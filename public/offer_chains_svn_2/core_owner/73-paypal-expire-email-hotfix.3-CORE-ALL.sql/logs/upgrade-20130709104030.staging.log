10:40:44 SQL> @/dbbackups/ECST/migrations/core_owner/73-paypal-expire-email-hotfix.3-CORE-ALL.sql/upgrade.sql
10:40:44 SQL> 
10:40:44 SQL> .
10:40:44 SQL> /
SP2-0103: Nothing in SQL buffer to run.
10:40:44 SQL> 
10:40:44 SQL> --------------------------------------------------------------------------------
10:40:44 SQL> -- DDL for package PROCS_ACCOUNT
10:40:44 SQL> --------------------------------------------------------------------------------
10:40:44 SQL> 
10:40:44 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V22" AS
10:40:44   2  
10:40:44   3  FUNCTION GET_GRACE_START_DATE(
10:40:44   4  	in_subscription_id IN NUMBER
10:40:44   5  ) RETURN DATE;
10:40:44   6  
10:40:44   7  FUNCTION GET_GRACE_END_DATE(
10:40:44   8  	in_subscription_id IN NUMBER
10:40:44   9  ) RETURN DATE;
10:40:44  10  
10:40:44  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
10:40:44  12  	in_group_id    IN  NUMBER,
10:40:44  13  	out_result_set OUT SYS_REFCURSOR
10:40:44  14  );
10:40:44  15  
10:40:44  16  PROCEDURE ANNOTATE_ACCOUNT (
10:40:44  17  	in_group_id   IN  NUMBER,
10:40:44  18  	in_agent_id   IN  NUMBER,
10:40:44  19  	in_note       IN  VARCHAR2,
10:40:44  20  	in_created_by IN  VARCHAR2
10:40:44  21  );
10:40:44  22  
10:40:44  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
10:40:44  24  	in_group_id IN	NUMBER,
10:40:44  25  	out_exists  OUT NUMBER
10:40:44  26  );
10:40:44  27  
10:40:44  28  PROCEDURE DISABLE_ACCOUNT (
10:40:44  29  	in_group_id   IN NUMBER,
10:40:44  30  	in_updated_by IN VARCHAR2,
10:40:44  31  	in_note       IN VARCHAR2,
10:40:44  32  	in_agent_id   IN NUMBER
10:40:44  33  );
10:40:44  34  
10:40:44  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
10:40:44  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
10:40:44  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
10:40:44  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
10:40:44  39  );
10:40:44  40  
10:40:44  41  PROCEDURE REACTIVATE_ACCOUNT (
10:40:44  42  	in_group_id	  IN NUMBER,
10:40:44  43  	in_updated_by	  IN VARCHAR2,
10:40:44  44  	in_note 	  IN VARCHAR2,
10:40:44  45  	in_agent_id	  IN NUMBER
10:40:44  46  );
10:40:44  47  
10:40:44  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
10:40:44  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:40:44  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V22.CREDIT_CARD_ACTIVE,
10:40:44  51  	out_result_set OUT SYS_REFCURSOR
10:40:44  52  );
10:40:44  53  
10:40:44  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
10:40:44  55  	in_group_id	  IN NUMBER,
10:40:44  56  	out_result_gc_set OUT SYS_REFCURSOR,
10:40:44  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.TRUE
10:40:44  58  );
10:40:44  59  
10:40:44  60  PROCEDURE GET_ACCOUNT_INFO  (
10:40:44  61  	  in_group_id	    IN	NUMBER,
10:40:44  62  	  out_account_info  OUT SYS_REFCURSOR
10:40:44  63  );
10:40:44  64  
10:40:44  65  PROCEDURE GET_ACCOUNT_NOTES (
10:40:44  66  	  in_group_id	 IN  NUMBER,
10:40:44  67  	  out_result_set OUT SYS_REFCURSOR
10:40:44  68  );
10:40:44  69  
10:40:44  70  PROCEDURE GET_ACCOUNT_PAYPALS(
10:40:44  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
10:40:44  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V22.PAYPAL_ACTIVE,
10:40:44  73  	out_result_set OUT SYS_REFCURSOR
10:40:44  74  );
10:40:44  75  
10:40:44  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
10:40:44  77  	  in_group_id	 IN  NUMBER,
10:40:44  78  	  in_start_date  IN DATE,
10:40:44  79  	  in_end_date	 IN DATE,
10:40:44  80  	  in_status	 IN NUMBER,
10:40:44  81  	  in_group_account_type IN VARCHAR2,
10:40:44  82  	  out_result_set  OUT SYS_REFCURSOR
10:40:44  83  );
10:40:44  84  
10:40:44  85  PROCEDURE FREEZE_ACCOUNT (
10:40:44  86  	in_group_id   IN NUMBER,
10:40:44  87  	in_updated_by IN VARCHAR2,
10:40:44  88  	in_note       IN VARCHAR2,
10:40:44  89  	in_agent_id   IN NUMBER
10:40:44  90  );
10:40:44  91  
10:40:44  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
10:40:44  93  	in_group_id	   IN  NUMBER,
10:40:44  94  	in_subscription_id IN NUMBER,
10:40:44  95  	out_result_set	   OUT SYS_REFCURSOR
10:40:44  96  );
10:40:44  97  
10:40:44  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
10:40:44  99  	in_group_id    IN  NUMBER,
10:40:44 100  	out_result_set OUT SYS_REFCURSOR
10:40:44 101  );
10:40:44 102  
10:40:44 103  PROCEDURE GET_GC_INVOICE (
10:40:44 104  	in_group_id    IN  NUMBER,
10:40:44 105  	in_gc_code     IN  VARCHAR2,
10:40:44 106  	out_result_set OUT SYS_REFCURSOR
10:40:44 107  );
10:40:44 108  
10:40:44 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
10:40:44 110  	in_group_id    IN  NUMBER,
10:40:44 111  	out_result_set OUT SYS_REFCURSOR
10:40:44 112  );
10:40:44 113  
10:40:44 114  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
10:40:44 115  	in_group_id IN NUMBER,
10:40:44 116  	out_result_set	   OUT SYS_REFCURSOR
10:40:44 117  );
10:40:44 118  
10:40:44 119  PROCEDURE UPDATE_ACCOUNT_STATUS (
10:40:44 120  	in_account_id	     IN ACCOUNT.ID%TYPE,
10:40:44 121  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:40:44 122  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
10:40:44 123  );
10:40:44 124  
10:40:44 125  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
10:40:44 126  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
10:40:44 127  	out_licenses_num OUT NUMBER
10:40:44 128  );
10:40:44 129  
10:40:44 130  PROCEDURE SET_TAX_EXEMPT (
10:40:44 131  	in_group_id  IN NUMBER,
10:40:44 132  	in_exempt_id IN VARCHAR2
10:40:44 133  );
10:40:44 134  
10:40:44 135  PROCEDURE IS_TAX_EXEMPT (
10:40:44 136  	in_group_id	  IN NUMBER,
10:40:44 137  	out_is_tax_exempt OUT NUMBER
10:40:44 138  );
10:40:44 139  
10:40:44 140  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:40:44 141  	in_account_id IN NUMBER,
10:40:44 142  	out_group_id  OUT NUMBER
10:40:44 143  );
10:40:44 144  
10:40:44 145  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:44 146  	in_group_id IN NUMBER,
10:40:44 147  	out_account_id	OUT NUMBER
10:40:44 148  );
10:40:44 149  
10:40:44 150  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:40:44 151  	in_invoice_id IN NUMBER,
10:40:44 152  	out_group_ids OUT SYS_REFCURSOR
10:40:44 153  );
10:40:44 154  
10:40:44 155  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
10:40:44 156  	in_group_id	  IN NUMBER,
10:40:44 157  	out_tax_exempt_id OUT VARCHAR2
10:40:44 158  );
10:40:44 159  
10:40:44 160  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
10:40:44 161  	in_group_id    IN NUMBER,
10:40:44 162  	out_result_set OUT SYS_REFCURSOR
10:40:44 163  );
10:40:44 164  
10:40:44 165  PROCEDURE GET_USR_ALL_SBSCR_IDS (
10:40:44 166  	in_group_id	   IN NUMBER,
10:40:44 167  	out_result_set	   OUT SYS_REFCURSOR
10:40:44 168  );
10:40:44 169  
10:40:44 170  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
10:40:44 171  	in_group_id	   IN NUMBER,
10:40:44 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:44 173  	out_result_set	   OUT SYS_REFCURSOR
10:40:44 174  );
10:40:44 175  
10:40:44 176  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
10:40:44 177  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:44 178  	in_expiration_date IN DATE,
10:40:44 179  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:40:44 180  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:44 181  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:40:44 182  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:40:44 183  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:40:44 184  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:40:44 185  	in_lower_bound IN NUMBER DEFAULT 1,
10:40:44 186  	in_upper_bound IN NUMBER DEFAULT 11,
10:40:44 187  	out_result_set OUT SYS_REFCURSOR
10:40:44 188  );
10:40:44 189  
10:40:44 190  END PROCS_ACCOUNT_V22;
10:40:44 191  .
10:40:44 SQL> /

Package created.

Elapsed: 00:00:00.20
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_ACCOUNT_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_ACCOUNT (
10:40:45   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
10:40:45   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:40:45   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
10:40:45   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
10:40:45   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
10:40:45  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE UPDATE_ACCOUNT (
10:40:45  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:40:45  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
10:40:45  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
10:40:45  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:40:45  22  );
10:40:45  23  
10:40:45  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
10:40:45  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:40:45  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
10:40:45  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
10:40:45  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:40:45  29  );
10:40:45  30  
10:40:45  31  PROCEDURE READ_ACCOUNT (
10:40:45  32  	in_account_id  IN ACCOUNT.ID%TYPE,
10:40:45  33  	out_result_set OUT SYS_REFCURSOR
10:40:45  34  );
10:40:45  35  
10:40:45  36  PROCEDURE CREATE_ACCOUNT_NOTE (
10:40:45  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
10:40:45  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
10:40:45  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
10:40:45  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
10:40:45  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
10:40:45  42  );
10:40:45  43  
10:40:45  44  END PROCS_ACCOUNT_CRU_V22;
10:40:45  45  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_ADDRESS(
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   7  */
10:40:45   8  	  out_address_id	OUT NUMBER,
10:40:45   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
10:40:45  16  );
10:40:45  17  
10:40:45  18  PROCEDURE UPDATE_ADDRESS(
10:40:45  19  /*
10:40:45  20  Throws exceptions:
10:40:45  21  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  22  */
10:40:45  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
10:40:45  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
10:40:45  31  );
10:40:45  32  
10:40:45  33  PROCEDURE GET_ADDRESS (
10:40:45  34  /*
10:40:45  35  Throws exceptions:
10:40:45  36  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  37  */
10:40:45  38  	  in_id 		IN ADDRESS.ID%TYPE,
10:40:45  39  	  out_result_set	OUT SYS_REFCURSOR
10:40:45  40  );
10:40:45  41  
10:40:45  42  END PROCS_ADDRESS_V22;
10:40:45  43  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_ADDRESS_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_ADDRESS(
10:40:45   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
10:40:45   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
10:40:45  13  );
10:40:45  14  
10:40:45  15  PROCEDURE UPDATE_ADDRESS(
10:40:45  16  	in_address_id	      IN ADDRESS.ID%TYPE,
10:40:45  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
10:40:45  24  );
10:40:45  25  
10:40:45  26  END PROCS_ADDRESS_CRU_V22;
10:40:45  27  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_ADJUSTMENTS
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
10:40:45   4  	in_invoice_id		  IN NUMBER,
10:40:45   5  	in_adjustment_reason	  IN VARCHAR2,
10:40:45   6  	in_is_credit		  IN NUMBER,
10:40:45   7  	in_charge_id		  IN NUMBER,
10:40:45   8  	in_business_date	  IN DATE,
10:40:45   9  	in_created_by		  IN VARCHAR2,
10:40:45  10  	out_invoice_adjustment_id OUT NUMBER
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
10:40:45  14  	in_invoice_id		  IN NUMBER,
10:40:45  15  	in_original_charge_id	  IN NUMBER,
10:40:45  16  	in_charge_id		  IN NUMBER,
10:40:45  17  	in_updated_by		  IN VARCHAR2
10:40:45  18  );
10:40:45  19  
10:40:45  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
10:40:45  21  	in_line_item_id 	    IN NUMBER,
10:40:45  22  	in_invoice_adjustment_id    IN NUMBER,
10:40:45  23  	in_amount		    IN NUMBER,
10:40:45  24  	in_tax			    IN NUMBER,
10:40:45  25  	in_discount		    IN NUMBER,
10:40:45  26  	in_created_by		    IN VARCHAR2,
10:40:45  27  	out_line_item_adjustment_id OUT NUMBER
10:40:45  28  );
10:40:45  29  
10:40:45  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
10:40:45  31  	in_tax_id		   IN NUMBER,
10:40:45  32  	in_line_item_adjustment_id IN NUMBER,
10:40:45  33  	in_amount		   IN NUMBER,
10:40:45  34  	in_created_by		   IN VARCHAR2,
10:40:45  35  	out_tax_adjustment_id	   OUT NUMBER
10:40:45  36  );
10:40:45  37  
10:40:45  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
10:40:45  39  	in_discount_id		   NUMBER,
10:40:45  40  	in_line_item_id 	   NUMBER,
10:40:45  41  	in_line_item_adjustment_id IN NUMBER,
10:40:45  42  	in_amount		   IN NUMBER,
10:40:45  43  	in_created_by		   IN VARCHAR2,
10:40:45  44  	out_discount_li_id	   OUT NUMBER
10:40:45  45  );
10:40:45  46  
10:40:45  47  END PROCS_ADJUSTMENTS_V22;
10:40:45  48  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_SUB_ADX_INFO (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   7  */
10:40:45   8  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
10:40:45  10  );
10:40:45  11  
10:40:45  12  END PROCS_ADX_V22;
10:40:45  13  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
10:40:45   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:45   5  	out_data	  OUT NUMBER
10:40:45   6  );
10:40:45   7  
10:40:45   8  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
10:40:45   9  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:45  10  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE EXPIRED_AASR_SUB_IDS(
10:40:45  14  	out_data   OUT SYS_REFCURSOR
10:40:45  15  );
10:40:45  16  
10:40:45  17  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
10:40:45  18  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:45  19  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:45  20  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE UPDATE_AASR_END_DATE(
10:40:45  24  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:45  25  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
10:40:45  26  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:45  27  );
10:40:45  28  
10:40:45  29  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
10:40:45  30  	out_data   OUT SYS_REFCURSOR,
10:40:45  31  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  32  );
10:40:45  33  
10:40:45  34  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:40:45  35  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  36  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:45  37  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:40:45  38  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:40:45  39  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:45  40  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:45  41  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:45  42  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:40:45  43  );
10:40:45  44  
10:40:45  45  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
10:40:45  46  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:45  47  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:45  48  	out_data   OUT SYS_REFCURSOR
10:40:45  49  );
10:40:45  50  
10:40:45  51  PROCEDURE CREATE_AMAZON_SUB(
10:40:45  52  	  out_id	      OUT NUMBER,
10:40:45  53  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:40:45  54  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:40:45  55  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:40:45  56  );
10:40:45  57  
10:40:45  58  PROCEDURE GET_ACTIVE_SUB_IDS (
10:40:45  59  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45  60  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:40:45  61  );
10:40:45  62  
10:40:45  63  PROCEDURE GET_ACTIVE_GROUP_IDS (
10:40:45  64  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45  65  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:40:45  66  );
10:40:45  67  
10:40:45  68  END PROCS_AMAZON_V22;
10:40:45  69  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
10:40:45   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:45   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
10:40:45   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
10:40:45   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
10:40:45   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
10:40:45   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
10:40:45  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:45  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
10:40:45  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
10:40:45  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
10:40:45  14  );
10:40:45  15  
10:40:45  16  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:40:45  17  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  18  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:45  19  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:40:45  20  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:40:45  21  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:45  22  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:45  23  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:45  24  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:40:45  25  );
10:40:45  26  
10:40:45  27  PROCEDURE CREATE_AMAZON_SUB(
10:40:45  28  	  out_id	      OUT NUMBER,
10:40:45  29  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:40:45  30  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:40:45  31  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:40:45  32  );
10:40:45  33  
10:40:45  34  END PROCS_AMAZON_CRU_V22;
10:40:45  35  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_CHARGE
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_CHARGE(
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	in_invoice_id	      IN NUMBER,
10:40:45  10  	in_transaction_id     IN NUMBER,
10:40:45  11  	in_instrument_type_id IN NUMBER,
10:40:45  12  	in_instrument_id      IN NUMBER,
10:40:45  13  	in_charge_amount      IN NUMBER,
10:40:45  14  	in_created_by	      IN VARCHAR2,
10:40:45  15  	in_charge_status_id   IN NUMBER,
10:40:45  16  	out_charge_id	      OUT NUMBER
10:40:45  17  );
10:40:45  18  
10:40:45  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:40:45  20  /*
10:40:45  21  Throws exceptions:
10:40:45  22  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  23  */
10:40:45  24  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45  25  	in_row_number	    IN NUMBER DEFAULT NULL
10:40:45  26  );
10:40:45  27  
10:40:45  28  PROCEDURE GET_UNPROCESSED_CHARGES (
10:40:45  29  /*
10:40:45  30  Throws exceptions:
10:40:45  31  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  32  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  33  */
10:40:45  34  	in_invoice_id  IN NUMBER,
10:40:45  35  	out_result_set OUT SYS_REFCURSOR
10:40:45  36  );
10:40:45  37  
10:40:45  38  PROCEDURE GET_PROCESSED_CHARGES (
10:40:45  39  /*
10:40:45  40  Throws exceptions:
10:40:45  41  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  42  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  43  */
10:40:45  44  	in_invoice_id  IN NUMBER,
10:40:45  45  	out_result_set OUT SYS_REFCURSOR
10:40:45  46  );
10:40:45  47  
10:40:45  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:40:45  49  /*
10:40:45  50  Throws exceptions:
10:40:45  51  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  52  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  53  */
10:40:45  54  	in_charge_id	    IN NUMBER,
10:40:45  55  	out_subscription_id OUT NUMBER
10:40:45  56  );
10:40:45  57  
10:40:45  58  PROCEDURE UPDATE_CHARGE_STATUS (
10:40:45  59  /*
10:40:45  60  Throws exceptions:
10:40:45  61  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  62  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  63  */
10:40:45  64  	in_charge_id	    IN CHARGE.ID%TYPE,
10:40:45  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:45  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:40:45  67  );
10:40:45  68  
10:40:45  69  FUNCTION IS_CHARGE_COLLECTED (
10:40:45  70  /*
10:40:45  71  Throws:
10:40:45  72  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  73  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  74  Returns:
10:40:45  75  GLOBAL_CONST.TRUE if transaction collected,
10:40:45  76  GLOBAL_CONST.FALSE else
10:40:45  77  */
10:40:45  78  	in_charge_id IN NUMBER
10:40:45  79  ) RETURN NUMBER;
10:40:45  80  
10:40:45  81  PROCEDURE GET_COLLECTED_CHARGES (
10:40:45  82  /*
10:40:45  83  Throws exceptions:
10:40:45  84  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  85  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  86  */
10:40:45  87  	in_invoice_id  IN NUMBER,
10:40:45  88  	out_result_set OUT SYS_REFCURSOR
10:40:45  89  );
10:40:45  90  
10:40:45  91  END PROCS_CHARGE_V22;
10:40:45  92  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_CHARGE_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_CHARGE(
10:40:45   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
10:40:45   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
10:40:45   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:45   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
10:40:45   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
10:40:45  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
10:40:45  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:45  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
10:40:45  13  );
10:40:45  14  
10:40:45  15  PROCEDURE UPDATE_CHARGE(
10:40:45  16  	in_charge_id	      IN CHARGE.ID%TYPE,
10:40:45  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:40:45  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
10:40:45  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
10:40:45  22  );
10:40:45  23  
10:40:45  24  END PROCS_CHARGE_CRU_V22;
10:40:45  25  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.00
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
10:40:45   2  
10:40:45   3  	PROCEDURE POPULATE_REQUEST_INFO(
10:40:45   4  	  in_hours_prior    IN	NUMBER,
10:40:45   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
10:40:45   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
10:40:45   7  	);
10:40:45   8  
10:40:45   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
10:40:45  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:45  11  	  in_start	     IN NUMBER,
10:40:45  12  	  in_end	     IN NUMBER,
10:40:45  13  	  out_result_set     OUT SYS_REFCURSOR
10:40:45  14  	);
10:40:45  15  
10:40:45  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
10:40:45  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
10:40:45  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:40:45  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
10:40:45  20  	);
10:40:45  21  
10:40:45  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
10:40:45  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:45  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:45  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:40:45  26  	);
10:40:45  27  
10:40:45  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
10:40:45  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:40:45  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
10:40:45  31  	  out_request_files   OUT SYS_REFCURSOR
10:40:45  32  	);
10:40:45  33  
10:40:45  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
10:40:45  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:45  36  	  out_count OUT NUMBER
10:40:45  37  	);
10:40:45  38  
10:40:45  39  	PROCEDURE GET_CREDIT_CARD_INFO (
10:40:45  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:40:45  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
10:40:45  42  	  out_card_info        OUT SYS_REFCURSOR
10:40:45  43  	);
10:40:45  44  
10:40:45  45  	PROCEDURE UPDATE_CC_UPDATE(
10:40:45  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
10:40:45  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:45  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
10:40:45  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
10:40:45  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
10:40:45  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:45  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:40:45  53  	);
10:40:45  54  
10:40:45  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
10:40:45  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
10:40:45  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:45  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
10:40:45  59  	);
10:40:45  60  
10:40:45  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
10:40:45  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
10:40:45  63  	  out_request_file     OUT SYS_REFCURSOR
10:40:45  64  	);
10:40:45  65  
10:40:45  66  	PROCEDURE SUSPEND_CREDIT_CARD (
10:40:45  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
10:40:45  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:45  69  	);
10:40:45  70  
10:40:45  71  	PROCEDURE UPDATE_CREDIT_CARD (
10:40:45  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
10:40:45  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:45  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:40:45  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:45  76  	);
10:40:45  77  
10:40:45  78  	PROCEDURE COMPLETABLE_REQUESTS (
10:40:45  79  	  out_request_files OUT SYS_REFCURSOR
10:40:45  80  	);
10:40:45  81  
10:40:45  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
10:40:45  83  	  in_max_hours_before_report IN  NUMBER,
10:40:45  84  	  out_request_files	     OUT SYS_REFCURSOR
10:40:45  85  	);
10:40:45  86  
10:40:45  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:40:45  88  	  in_account_id IN NUMBER,
10:40:45  89  	  out_group_id	OUT NUMBER
10:40:45  90  	);
10:40:45  91  
10:40:45  92  	PROCEDURE GET_LICENSE_BY_ID (
10:40:45  93  	  in_license_id  IN NUMBER,
10:40:45  94  	  out_result_set OUT SYS_REFCURSOR
10:40:45  95  	);
10:40:45  96  
10:40:45  97  END PROCS_CUPY;
10:40:45  98  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.09
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE
10:40:45   2  PACKAGE PROCS_ENTITLEMENT_V22 AS
10:40:45   3  
10:40:45   4  PROCEDURE GET_ALL_ENTITLEMENTS(
10:40:45   5  	in_group_id IN NUMBER,
10:40:45   6  	out_result_set OUT SYS_REFCURSOR);
10:40:45   7  
10:40:45   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
10:40:45   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:45  10  	out_result_set OUT SYS_REFCURSOR);
10:40:45  11  
10:40:45  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
10:40:45  13  	in_subscription_id IN NUMBER,
10:40:45  14  	out_uri OUT VARCHAR2);
10:40:45  15  
10:40:45  16  END PROCS_ENTITLEMENT_V22;
10:40:45  17  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
10:40:45   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
10:40:45   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:40:45   7  );
10:40:45   8  
10:40:45   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
10:40:45  10  	in_invoice_id		     IN NUMBER,
10:40:45  11  	out_is_invoice_for_redeem_gc OUT NUMBER
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE GET_UNREDEEMED_GCS (
10:40:45  15  	out_result_set		OUT SYS_REFCURSOR,
10:40:45  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:45  17  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:45  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  19  );
10:40:45  20  
10:40:45  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:40:45  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE ADD_CREDIT_CARD (
10:40:45  27  /*
10:40:45  28  Throws exceptions:
10:40:45  29  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  30  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  31  */
10:40:45  32  	in_group_id		  IN NUMBER,
10:40:45  33  	in_updated_by		  IN VARCHAR2,
10:40:45  34  	in_instrument_name	  IN VARCHAR2,
10:40:45  35  	in_card_holder_name	  IN VARCHAR2,
10:40:45  36  	in_street_address	  IN VARCHAR2,
10:40:45  37  	in_street_address2	  IN VARCHAR2,
10:40:45  38  	in_state		  IN VARCHAR2,
10:40:45  39  	in_city 		  IN VARCHAR2,
10:40:45  40  	in_postal_code		  IN VARCHAR2,
10:40:45  41  	in_country		  IN CHAR,
10:40:45  42  	in_last_four_cc 	  IN VARCHAR2,
10:40:45  43  	in_expiration_date	  IN DATE,
10:40:45  44  	in_credit_card_type_id	  IN NUMBER,
10:40:45  45  	in_token		  IN VARCHAR2,
10:40:45  46  	in_chase_profile_id	  IN VARCHAR2,
10:40:45  47  	in_credit_card_status_id  IN NUMBER,
10:40:45  48  	in_private_first_name	  IN VARCHAR2,
10:40:45  49  	in_private_last_name	  IN VARCHAR2,
10:40:45  50  	out_credit_card_id	  OUT NUMBER
10:40:45  51  );
10:40:45  52  
10:40:45  53  /******************************************************************************/
10:40:45  54  
10:40:45  55  PROCEDURE ADD_PAYPAL (
10:40:45  56  /*
10:40:45  57  Throws exceptions:
10:40:45  58  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  59  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  60  */
10:40:45  61  	in_group_id			IN NUMBER,
10:40:45  62  	in_instrument_name		IN VARCHAR2,
10:40:45  63  	in_private_email_address	IN VARCHAR2,
10:40:45  64  	in_created_by			IN VARCHAR2,
10:40:45  65  	in_paypal_status_id		IN NUMBER,
10:40:45  66  	in_paypal_prvt_street_address	IN VARCHAR2,
10:40:45  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
10:40:45  68  	in_state			IN VARCHAR2,
10:40:45  69  	in_city 			IN VARCHAR2,
10:40:45  70  	in_postal_code			IN VARCHAR2,
10:40:45  71  	in_country			IN CHAR,
10:40:45  72  	in_expiration_date		IN DATE,
10:40:45  73  	in_secret_token 		IN VARCHAR2,
10:40:45  74  	out_paypal_id			OUT NUMBER
10:40:45  75  );
10:40:45  76  
10:40:45  77  /********************************************/
10:40:45  78  
10:40:45  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
10:40:45  80  /*
10:40:45  81  Throws exceptions:
10:40:45  82  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45  83  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  84  */
10:40:45  85  	in_code       IN VARCHAR,
10:40:45  86  	out_result_set OUT SYS_REFCURSOR
10:40:45  87  );
10:40:45  88  
10:40:45  89  /********************************************/
10:40:45  90  
10:40:45  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:40:45  92  /*
10:40:45  93  Throws exceptions:
10:40:45  94  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45  95  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  96  */
10:40:45  97  	in_gift_certificate_id IN NUMBER,
10:40:45  98  	out_result_set	       OUT SYS_REFCURSOR
10:40:45  99  );
10:40:45 100  
10:40:45 101  /********************************************/
10:40:45 102  
10:40:45 103  PROCEDURE DISABLE_CREDIT_CARD (
10:40:45 104  /*
10:40:45 105  Throws exceptions:
10:40:45 106  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 107  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 108  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 109  */
10:40:45 110  	in_credit_card_id IN NUMBER,
10:40:45 111  	in_updated_by	  IN VARCHAR2
10:40:45 112  );
10:40:45 113  
10:40:45 114  /********************************************/
10:40:45 115  
10:40:45 116  PROCEDURE DISABLE_PAYPAL (
10:40:45 117  /*
10:40:45 118  Throws exceptions:
10:40:45 119  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 120  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 121  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 122  */
10:40:45 123  	in_paypal_id  IN NUMBER,
10:40:45 124  	in_updated_by IN VARCHAR2
10:40:45 125  );
10:40:45 126  
10:40:45 127  /********************************************/
10:40:45 128  
10:40:45 129  PROCEDURE UPDATE_CREDIT_CARD (
10:40:45 130  /*
10:40:45 131  Throws exceptions:
10:40:45 132  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 133  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 134  */
10:40:45 135  	in_credit_card_id	  IN NUMBER,
10:40:45 136  	in_updated_by		  IN VARCHAR2,
10:40:45 137  	in_instrument_name	  IN VARCHAR2,
10:40:45 138  	in_is_default		  IN NUMBER
10:40:45 139  );
10:40:45 140  
10:40:45 141  /********************************************/
10:40:45 142  
10:40:45 143  PROCEDURE START_GC_PURCHASING (
10:40:45 144  	in_group_id		  IN NUMBER,
10:40:45 145  	in_offer_chain_id	  IN VARCHAR2,
10:40:45 146  	in_gift_certificate_code  IN  VARCHAR2,
10:40:45 147  	in_created_by		  IN  VARCHAR2,
10:40:45 148  	in_recipient_name	  IN  VARCHAR2,
10:40:45 149  	in_recipient_email	  IN  VARCHAR2,
10:40:45 150  	in_recipient_address_id   IN NUMBER,
10:40:45 151  	in_recipient_notify_date  IN DATE,
10:40:45 152  	in_sender_name		  IN VARCHAR2,
10:40:45 153  	in_sender_email 	  IN VARCHAR2,
10:40:45 154  	in_gift_message 	  IN  VARCHAR2,
10:40:45 155  	in_expiration_date	  IN DATE,
10:40:45 156  	in_campaign		  IN VARCHAR2,
10:40:45 157  	in_reference_code	  IN VARCHAR2,
10:40:45 158  	out_gift_certificate_id   OUT NUMBER,
10:40:45 159  	out_invoice_id		  OUT NUMBER
10:40:45 160  );
10:40:45 161  
10:40:45 162  PROCEDURE FINALIZE_GC_PURCHASING (
10:40:45 163  	in_invoice_id	      IN NUMBER,
10:40:45 164  	in_created_by	      IN VARCHAR2,
10:40:45 165  	in_instrument_id      IN NUMBER,
10:40:45 166  	in_instrument_type_id IN NUMBER,
10:40:45 167  	in_order_id	      IN VARCHAR2,
10:40:45 168  	in_transaction_id     IN NUMBER,
10:40:45 169  	out_charge_amount     OUT NUMBER
10:40:45 170  );
10:40:45 171  
10:40:45 172  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
10:40:45 173  	in_group_id	  IN NUMBER,
10:40:45 174  	in_offer_chain_id IN VARCHAR2,
10:40:45 175  	in_gift_certificate_code  IN  VARCHAR2,
10:40:45 176  	in_created_by IN  VARCHAR2,
10:40:45 177  	in_recipient_name IN  VARCHAR2,
10:40:45 178  	in_recipient_email IN  VARCHAR2,
10:40:45 179  	in_sender_name IN VARCHAR2,
10:40:45 180  	in_sender_email IN VARCHAR2,
10:40:45 181  	in_gift_message IN  VARCHAR2,
10:40:45 182  	in_instrument_id  IN  NUMBER,
10:40:45 183  	in_instrument_type_id IN NUMBER,
10:40:45 184  	in_expiration_date IN DATE,
10:40:45 185  	in_order_id IN VARCHAR2,
10:40:45 186  	in_transaction_id IN NUMBER
10:40:45 187  );
10:40:45 188  
10:40:45 189  /*********************************************/
10:40:45 190  
10:40:45 191  PROCEDURE REDEEM_GIFT_CERTIFICATE (
10:40:45 192  	in_group_id			IN NUMBER,
10:40:45 193  	in_gift_certificate_code	IN VARCHAR2,
10:40:45 194  	in_created_by			IN VARCHAR2,
10:40:45 195  	in_redeemer_address_id		IN NUMBER,
10:40:45 196  	in_fin_instrument_id		IN NUMBER,
10:40:45 197  	in_fin_instrument_type_id	IN NUMBER,
10:40:45 198  	in_redemption_offer_chain_id	IN NUMBER,
10:40:45 199  	out_subscription_id		OUT NUMBER,
10:40:45 200  	out_license_id			OUT NUMBER
10:40:45 201  );
10:40:45 202  
10:40:45 203  /********************************************/
10:40:45 204  
10:40:45 205  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
10:40:45 206  	in_group_id	       IN  NUMBER,
10:40:45 207  	out_instrument_type_id OUT NUMBER,
10:40:45 208  	out_instrument_id      OUT NUMBER
10:40:45 209  );
10:40:45 210  
10:40:45 211  /************************************************/
10:40:45 212  
10:40:45 213  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
10:40:45 214  	in_group_id	      IN NUMBER,
10:40:45 215  	in_instrument_type_id IN NUMBER,
10:40:45 216  	in_instrument_id      IN NUMBER,
10:40:45 217  	in_updated_by	      IN VARCHAR2
10:40:45 218  );
10:40:45 219  
10:40:45 220  /***************************************************/
10:40:45 221  
10:40:45 222  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
10:40:45 223  	in_group_id	      IN NUMBER
10:40:45 224  );
10:40:45 225  
10:40:45 226  /****************************************************/
10:40:45 227  
10:40:45 228  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:45 229  	in_credit_card_id IN  NUMBER,
10:40:45 230  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 231  );
10:40:45 232  
10:40:45 233  /****************************************************/
10:40:45 234  
10:40:45 235  PROCEDURE GET_PAYPAL_BY_ID (
10:40:45 236  	in_paypal_id   IN  NUMBER,
10:40:45 237  	out_result_set OUT SYS_REFCURSOR
10:40:45 238  );
10:40:45 239  
10:40:45 240  /***********************************************/
10:40:45 241  
10:40:45 242  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
10:40:45 243  	in_credit_card_id NUMBER
10:40:45 244  ) RETURN NUMBER;
10:40:45 245  
10:40:45 246  /*************************************************/
10:40:45 247  
10:40:45 248  PROCEDURE GET_PURCHASED_GCERTIFICATES (
10:40:45 249  	in_group_id    IN NUMBER,
10:40:45 250  	out_result_set OUT SYS_REFCURSOR
10:40:45 251  );
10:40:45 252  
10:40:45 253  /*************************************************/
10:40:45 254  
10:40:45 255  -- isGiftCertificateForProperOffer
10:40:45 256  
10:40:45 257  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:40:45 258  	in_gift_certificate_id IN NUMBER,
10:40:45 259  	in_charge_id	       IN NUMBER,
10:40:45 260  	out_result	       OUT NUMBER
10:40:45 261  );
10:40:45 262  
10:40:45 263  FUNCTION IS_CREDIT_CARD_EXISTS (
10:40:45 264  /*
10:40:45 265  1 - if instrument exists
10:40:45 266  0 - else
10:40:45 267  */
10:40:45 268  	in_credit_card_id IN NUMBER
10:40:45 269  ) RETURN NUMBER;
10:40:45 270  
10:40:45 271  FUNCTION IS_PAYPAL_EXISTS (
10:40:45 272  /*
10:40:45 273  1 - if instrument exists
10:40:45 274  0 - else
10:40:45 275  */
10:40:45 276  	in_paypal_id IN NUMBER
10:40:45 277  ) RETURN NUMBER;
10:40:45 278  
10:40:45 279  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
10:40:45 280  /*
10:40:45 281  1 - if instrument exists
10:40:45 282  0 - else
10:40:45 283  */
10:40:45 284  	in_gift_certificate_id IN NUMBER
10:40:45 285  ) RETURN NUMBER;
10:40:45 286  
10:40:45 287  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
10:40:45 288  	in_credit_card_id IN NUMBER,
10:40:45 289  	out_group_id	  OUT NUMBER
10:40:45 290  );
10:40:45 291  
10:40:45 292  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
10:40:45 293  	in_paypal_id IN NUMBER,
10:40:45 294  	out_group_id	  OUT NUMBER
10:40:45 295  );
10:40:45 296  
10:40:45 297  PROCEDURE GET_EXPIRING_PAYPAL (
10:40:45 298  	in_expire_window_days	IN NUMBER,
10:40:45 299  	in_creation_limit_days	IN NUMBER,
10:40:45 300  	in_retry_throttle_name	PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:40:45 301  	out_result_set		OUT SYS_REFCURSOR
10:40:45 302  );
10:40:45 303  
10:40:45 304  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
10:40:45 305  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
10:40:45 306  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:40:45 307  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:45 308  );
10:40:45 309  
10:40:45 310  PROCEDURE UPDATE_PAYPAL_STATUS (
10:40:45 311  	in_paypal_id	    IN PAYPAL.ID%TYPE,
10:40:45 312  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:40:45 313  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
10:40:45 314  );
10:40:45 315  
10:40:45 316  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
10:40:45 317  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:40:45 318  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:40:45 319  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:40:45 320  );
10:40:45 321  
10:40:45 322  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:45 323  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45 324  	out_result_set OUT SYS_REFCURSOR
10:40:45 325  );
10:40:45 326  
10:40:45 327  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
10:40:45 328  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
10:40:45 329  	in_old_fin_instrument_id   IN NUMBER,
10:40:45 330  	in_old_fin_instrument_type IN NUMBER,
10:40:45 331  	in_new_fin_instrument_id   IN NUMBER,
10:40:45 332  	in_new_fin_instrument_type IN NUMBER,
10:40:45 333  	in_updated_by		   IN VARCHAR2
10:40:45 334  );
10:40:45 335  
10:40:45 336  END PROCS_FIN_INSTRUMENTS_V22;
10:40:45 337  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.03
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_CREDIT_CARD(
10:40:45   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
10:40:45   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
10:40:45   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
10:40:45   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
10:40:45   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
10:40:45  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:40:45  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
10:40:45  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
10:40:45  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
10:40:45  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
10:40:45  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:45  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:40:45  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
10:40:45  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
10:40:45  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:40:45  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
10:40:45  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:40:45  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
10:40:45  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE UPDATE_CREDIT_CARD(
10:40:45  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
10:40:45  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:45  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
10:40:45  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:45  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:40:45  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:40:45  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:40:45  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:40:45  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
10:40:45  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:45  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
10:40:45  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
10:40:45  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
10:40:45  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
10:40:45  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
10:40:45  45  );
10:40:45  46  
10:40:45  47  PROCEDURE CREATE_PAYPAL(
10:40:45  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
10:40:45  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
10:40:45  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
10:40:45  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:45  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:40:45  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
10:40:45  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:40:45  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:40:45  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:40:45  57  	in_state			IN PAYPAL.STATE%TYPE,
10:40:45  58  	in_city 			IN PAYPAL.CITY%TYPE,
10:40:45  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
10:40:45  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
10:40:45  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
10:40:45  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:40:45  63  );
10:40:45  64  
10:40:45  65  PROCEDURE UPDATE_PAYPAL(
10:40:45  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
10:40:45  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:45  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:40:45  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
10:40:45  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:45  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:45  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
10:40:45  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
10:40:45  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
10:40:45  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:45  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
10:40:45  79  );
10:40:45  80  
10:40:45  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
10:40:45  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
10:40:45  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
10:40:45  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
10:40:45  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
10:40:45  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:45  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
10:40:45  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:40:45  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
10:40:45  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
10:40:45  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:40:45  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:40:45  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:40:45  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:40:45  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
10:40:45  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
10:40:45  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:40:45  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:40:45 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:40:45 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:45 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
10:40:45 103  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
10:40:45 104  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
10:40:45 105  );
10:40:45 106  
10:40:45 107  PROCEDURE UPDATE_GIFT_CERTIFICATE(
10:40:45 108  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:40:45 109  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:45 110  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
10:40:45 111  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
10:40:45 112  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
10:40:45 113  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:40:45 114  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:40:45 115  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:40:45 116  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:40:45 117  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
10:40:45 118  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
10:40:45 119  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:40:45 120  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:40:45 121  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:40:45 122  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:45 123  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:45 124  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
10:40:45 125  );
10:40:45 126  
10:40:45 127  END PROCS_FIN_INSTRUMENTS_CRU_V22;
10:40:45 128  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.03
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V22" As
10:40:45   2  
10:40:45   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:40:45   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:45   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:40:45   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:45   7  );
10:40:45   8  
10:40:45   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:40:45  10  	out_result_set OUT SYS_REFCURSOR
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE EXPIRE_SUB_SHARE (
10:40:45  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:45  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:45  16  );
10:40:45  17  
10:40:45  18  PROCEDURE EXPIRE_ALL_SHARES (
10:40:45  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:40:45  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
10:40:45  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
10:40:45  25  	in_start	 IN  NUMBER,
10:40:45  26  	in_end		 IN  NUMBER,
10:40:45  27  	in_expired	 IN  NUMBER,
10:40:45  28  	out_result_set	 OUT SYS_REFCURSOR,
10:40:45  29  	out_shares_count OUT NUMBER
10:40:45  30  );
10:40:45  31  
10:40:45  32  PROCEDURE IS_VALID_IP_ADDRESS (
10:40:45  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:45  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:45  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:45  36  	out_is_valid	    OUT NUMBER
10:40:45  37  );
10:40:45  38  
10:40:45  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
10:40:45  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:45  42  	out_is_valid	    OUT NUMBER
10:40:45  43  );
10:40:45  44  
10:40:45  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
10:40:45  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:40:45  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
10:40:45  48  	Out_Result_Set	       Out Sys_Refcursor
10:40:45  49  );
10:40:45  50  
10:40:45  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
10:40:45  52  	in_group_account_id IN NUMBER,
10:40:45  53  	in_start	    IN NUMBER,
10:40:45  54  	in_end		    IN NUMBER,
10:40:45  55  	Out_Result_Set	    OUT Sys_Refcursor
10:40:45  56  );
10:40:45  57  
10:40:45  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
10:40:45  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
10:40:45  60  	Out_Result_Set	   Out Sys_Refcursor
10:40:45  61  );
10:40:45  62  
10:40:45  63  PROCEDURE CREATE_GROUP_ACCOUNT (
10:40:45  64  	in_subscription_id	 IN NUMBER,
10:40:45  65  	in_group_name		 IN VARCHAR2,
10:40:45  66  	in_first_name		 IN VARCHAR2,
10:40:45  67  	in_last_name		 IN VARCHAR2,
10:40:45  68  	in_email		 IN VARCHAR2,
10:40:45  69  	in_phone		 IN VARCHAR2,
10:40:45  70  	in_organization_type	 IN VARCHAR2,
10:40:45  71  	in_seats		 IN NUMBER,
10:40:45  72  	in_seat_ttl_in_hours	 IN NUMBER,
10:40:45  73  	in_ip			 IN NUMBER,
10:40:45  74  	in_created_by		 IN VARCHAR2
10:40:45  75  );
10:40:45  76  
10:40:45  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
10:40:45  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:45  79  	out_result_set	    OUT SYS_REFCURSOR
10:40:45  80  );
10:40:45  81  
10:40:45  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
10:40:45  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:45  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:45  85  	out_result_set	    OUT SYS_REFCURSOR
10:40:45  86  );
10:40:45  87  
10:40:45  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
10:40:45  89  	in_group_account_id   IN NUMBER,
10:40:45  90  	in_start	      IN NUMBER,
10:40:45  91  	in_end		      IN NUMBER,
10:40:45  92  	in_status	      IN NUMBER,
10:40:45  93  	out_record_count      OUT NUMBER,
10:40:45  94  	out_result_set	      OUT SYS_REFCURSOR
10:40:45  95  );
10:40:45  96  
10:40:45  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
10:40:45  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45  99  	in_start	      IN NUMBER,
10:40:45 100  	in_end		      IN NUMBER,
10:40:45 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:40:45 102  	out_record_count      OUT NUMBER,
10:40:45 103  	out_result_set	      OUT SYS_REFCURSOR
10:40:45 104  );
10:40:45 105  
10:40:45 106  PROCEDURE ADD_EMAIL_DOMAIN (
10:40:45 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:45 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:40:45 110  );
10:40:45 111  
10:40:45 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:40:45 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:45 115  );
10:40:45 116  
10:40:45 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:40:45 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:45 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:45 120  );
10:40:45 121  
10:40:45 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:40:45 123  	in_group_account_id    IN NUMBER,
10:40:45 124  	in_borrower_account_id IN NUMBER,
10:40:45 125  	in_ip_address	       IN VARCHAR2,
10:40:45 126  	in_email_domain        IN VARCHAR2,
10:40:45 127  	in_created_by	       IN VARCHAR2
10:40:45 128  );
10:40:45 129  
10:40:45 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
10:40:45 131  	in_group_account_id   IN NUMBER,
10:40:45 132  	out_occupied_seats   OUT NUMBER
10:40:45 133  );
10:40:45 134  
10:40:45 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
10:40:45 136  	in_group_account_id   IN NUMBER
10:40:45 137  ) RETURN NUMBER;
10:40:45 138  
10:40:45 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:40:45 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:45 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:45 142  );
10:40:45 143  
10:40:45 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:40:45 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:40:45 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:45 147  );
10:40:45 148  
10:40:45 149  PROCEDURE ADD_IP_RANGE (
10:40:45 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:45 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:40:45 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:45 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:45 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:40:45 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:40:45 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:40:45 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:40:45 158  );
10:40:45 159  
10:40:45 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
10:40:45 161  	in_group_account_id IN NUMBER,
10:40:45 162  	out_group_id OUT NUMBER
10:40:45 163  );
10:40:45 164  
10:40:45 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
10:40:45 166  	in_group_account_ip_range_id IN NUMBER,
10:40:45 167  	out_group_id OUT NUMBER
10:40:45 168  );
10:40:45 169  
10:40:45 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
10:40:45 171  	in_group_account_email_dom_id IN NUMBER,
10:40:45 172  	out_group_id OUT NUMBER
10:40:45 173  );
10:40:45 174  
10:40:45 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:40:45 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:45 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:40:45 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:40:45 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:40:45 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:40:45 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:40:45 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:45 183  );
10:40:45 184  
10:40:45 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:40:45 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:45 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:40:45 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:45 189  );
10:40:45 190  
10:40:45 191  END PROCS_GROUP_ACCOUNT_V22;
10:40:45 192  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
10:40:45   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:45   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
10:40:45   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
10:40:45   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
10:40:45   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
10:40:45   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
10:40:45  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:40:45  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE CREATE_GROUP_ACCOUNT (
10:40:45  15  	in_subscription_id	 IN NUMBER,
10:40:45  16  	in_group_name		 IN VARCHAR2,
10:40:45  17  	in_first_name		 IN VARCHAR2,
10:40:45  18  	in_last_name		 IN VARCHAR2,
10:40:45  19  	in_email		 IN VARCHAR2,
10:40:45  20  	in_phone		 IN VARCHAR2,
10:40:45  21  	in_organization_type	 IN VARCHAR2,
10:40:45  22  	in_seats		 IN NUMBER,
10:40:45  23  	in_seat_ttl_in_hours	 IN NUMBER,
10:40:45  24  	in_ip			 IN NUMBER,
10:40:45  25  	in_created_by		 IN VARCHAR2
10:40:45  26  );
10:40:45  27  
10:40:45  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:40:45  29  	in_group_account_id    IN NUMBER,
10:40:45  30  	in_borrower_account_id IN NUMBER,
10:40:45  31  	in_ip_address	       IN VARCHAR2,
10:40:45  32  	in_email_domain        IN VARCHAR2,
10:40:45  33  	in_start_date	       IN DATE,
10:40:45  34  	in_end_date	       IN DATE,
10:40:45  35  	in_created_by	       IN VARCHAR2
10:40:45  36  );
10:40:45  37  
10:40:45  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:40:45  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:45  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:45  41  );
10:40:45  42  
10:40:45  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:40:45  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:40:45  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:45  46  );
10:40:45  47  
10:40:45  48  PROCEDURE ADD_IP_RANGE (
10:40:45  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:45  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:40:45  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:45  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:45  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:40:45  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:40:45  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:40:45  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:40:45  57  );
10:40:45  58  
10:40:45  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:40:45  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:45  62  );
10:40:45  63  
10:40:45  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:40:45  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:45  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:45  67  );
10:40:45  68  
10:40:45  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
10:40:45  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:45  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:45  72  );
10:40:45  73  
10:40:45  74  PROCEDURE ADD_EMAIL_DOMAIN (
10:40:45  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:45  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:45  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:40:45  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:40:45  79  );
10:40:45  80  
10:40:45  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:40:45  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:45  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:40:45  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:40:45  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:40:45  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:40:45  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:40:45  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:45  89  );
10:40:45  90  
10:40:45  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:40:45  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:45  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:40:45  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:45  95  );
10:40:45  96  END PROCS_GROUP_ACCOUNT_CRU_V22;
10:40:45  97  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_AASR_HISTORY(
10:40:45   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:45   5  	in_system_activity_reason_id IN NUMBER,
10:40:45   6  	in_created_by		     IN VARCHAR2
10:40:45   7  );
10:40:45   8  
10:40:45   9  PROCEDURE CREATE_ADDRESS_HISTORY(
10:40:45  10  	in_address_id		     IN NUMBER,
10:40:45  11  	in_system_activity_reason_id IN NUMBER
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE CREATE_ACCOUNT_HISTORY(
10:40:45  15  	in_account_id		     IN NUMBER,
10:40:45  16  	in_system_activity_reason_id IN NUMBER
10:40:45  17  );
10:40:45  18  
10:40:45  19  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
10:40:45  20  	in_subscription_id	     IN NUMBER,
10:40:45  21  	in_system_activity_reason_id IN NUMBER
10:40:45  22  );
10:40:45  23  
10:40:45  24  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
10:40:45  25  	in_credit_card_id	      IN NUMBER,
10:40:45  26  	in_system_activity_reason_id  IN  NUMBER
10:40:45  27  );
10:40:45  28  
10:40:45  29  PROCEDURE CREATE_PAYPAL_HISTORY(
10:40:45  30  	in_paypal_id		      IN NUMBER,
10:40:45  31  	in_system_activity_reason_id  IN NUMBER
10:40:45  32  );
10:40:45  33  
10:40:45  34  PROCEDURE CREATE_GIFT_CERT_HISTORY(
10:40:45  35  	in_gift_certificate_id	      IN NUMBER,
10:40:45  36  	in_system_activity_reason_id  IN  NUMBER
10:40:45  37  );
10:40:45  38  
10:40:45  39  PROCEDURE CREATE_TRANSACTION_HISTORY (
10:40:45  40  	in_transaction_id	     IN NUMBER,
10:40:45  41  	in_system_activity_reason_id IN NUMBER
10:40:45  42  );
10:40:45  43  
10:40:45  44  PROCEDURE CREATE_INVOICE_HISTORY (
10:40:45  45  	in_invoice_id		     IN NUMBER,
10:40:45  46  	in_system_activity_reason_id IN NUMBER
10:40:45  47  );
10:40:45  48  
10:40:45  49  PROCEDURE CREATE_LICENSE_HISTORY (
10:40:45  50  	in_license_id		     IN NUMBER,
10:40:45  51  	in_system_activity_reason_id IN NUMBER
10:40:45  52  );
10:40:45  53  
10:40:45  54  PROCEDURE CREATE_CHARGE_HISTORY (
10:40:45  55  	in_charge_id		    IN NUMBER,
10:40:45  56  	in_system_activity_reason_id IN NUMBER
10:40:45  57  );
10:40:45  58  
10:40:45  59  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
10:40:45  60  	in_invoice_adjustment_id     IN NUMBER,
10:40:45  61  	in_system_activity_reason_id IN NUMBER
10:40:45  62  );
10:40:45  63  
10:40:45  64  
10:40:45  65  END PROCS_HISTORY_V22;
10:40:45  66  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_INVOICE
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_INVOICE_IDS(
10:40:45   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:40:45   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:40:45   6  	out_result_set OUT SYS_REFCURSOR
10:40:45   7  );
10:40:45   8  
10:40:45   9  PROCEDURE IS_INVOICE_FOR_GC (
10:40:45  10  	in_invoice_id  IN NUMBER,
10:40:45  11  	out_result     OUT NUMBER
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE CREATE_INVOICE(
10:40:45  15  /*
10:40:45  16  Throws exceptions:
10:40:45  17  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  18  */
10:40:45  19  	  in_invoice_status IN NUMBER,
10:40:45  20  	  in_created_by     IN VARCHAR2,
10:40:45  21  	  in_tax_exempt_id  IN VARCHAR2,
10:40:45  22  	  out_invoice_id    OUT NUMBER
10:40:45  23  );
10:40:45  24  
10:40:45  25  PROCEDURE GET_PENDING_INVOICES (
10:40:45  26  /*
10:40:45  27  Throws exceptions:
10:40:45  28  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  29  */
10:40:45  30  	out_result_set	     OUT SYS_REFCURSOR,
10:40:45  31  	in_row_number	     IN NUMBER DEFAULT NULL
10:40:45  32  );
10:40:45  33  
10:40:45  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:45  35  /*
10:40:45  36  Throws exceptions:
10:40:45  37  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  38  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  39  */
10:40:45  40  	in_invoice_id IN  NUMBER,
10:40:45  41  	out_amount    OUT NUMBER
10:40:45  42  );
10:40:45  43  
10:40:45  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
10:40:45  45  	in_invoice_id IN  NUMBER
10:40:45  46  ) RETURN NUMBER;
10:40:45  47  
10:40:45  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:40:45  49  /*
10:40:45  50  Throws exceptions:
10:40:45  51  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  52  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  53  */
10:40:45  54  	in_invoice_id  IN  NUMBER,
10:40:45  55  	out_account_id OUT NUMBER
10:40:45  56  );
10:40:45  57  
10:40:45  58  PROCEDURE GET_INVOICE_DETAILS (
10:40:45  59  /*
10:40:45  60  Throws exceptions:
10:40:45  61  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  62  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  63  */
10:40:45  64  	in_invoice_id	   IN  NUMBER,
10:40:45  65  	out_group_id	   OUT NUMBER,
10:40:45  66  	out_status_id	   OUT NUMBER,
10:40:45  67  	out_line_items_set OUT SYS_REFCURSOR,
10:40:45  68  	out_pp_charges_set OUT SYS_REFCURSOR,
10:40:45  69  	out_cc_charges_set OUT SYS_REFCURSOR,
10:40:45  70  	out_gc_charges_set OUT SYS_REFCURSOR
10:40:45  71  );
10:40:45  72  -- norlov: #38796
10:40:45  73  PROCEDURE GET_TRANSACTION_INVOICE (
10:40:45  74  /*
10:40:45  75  Throws exceptions:
10:40:45  76  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  77  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  78  */
10:40:45  79  	in_transaction_id  IN  NUMBER,
10:40:45  80  	out_result_set	      OUT SYS_REFCURSOR
10:40:45  81  );
10:40:45  82  
10:40:45  83  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:45  84  /*
10:40:45  85  Throws exceptions:
10:40:45  86  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  87  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  88  */
10:40:45  89  	in_invoice_id		       IN NUMBER,
10:40:45  90  	in_invoice_status_id	       IN NUMBER,
10:40:45  91  	in_updated_by		       IN VARCHAR2
10:40:45  92  );
10:40:45  93  
10:40:45  94  FUNCTION IS_INVOICE_PAYING_STARTED (
10:40:45  95  /*
10:40:45  96  Throws exceptions:
10:40:45  97  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  98  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  99  */
10:40:45 100  	in_invoice_id IN NUMBER
10:40:45 101  ) RETURN NUMBER;
10:40:45 102  
10:40:45 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
10:40:45 104  	in_invoice_id  IN NUMBER,
10:40:45 105  	out_is_started OUT NUMBER
10:40:45 106  );
10:40:45 107  
10:40:45 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
10:40:45 109  	in_invoice_id	      IN NUMBER,
10:40:45 110  	in_chargeback_date    IN DATE,
10:40:45 111  	out_chargeback_amount OUT NUMBER
10:40:45 112  );
10:40:45 113  
10:40:45 114  PROCEDURE APPLY_REFUND (
10:40:45 115  	in_invoice_id	     IN NUMBER,
10:40:45 116  	in_chargeback_amount IN NUMBER,
10:40:45 117  	in_created_by	     IN VARCHAR2,
10:40:45 118  	out_charge_id	     OUT NUMBER
10:40:45 119  );
10:40:45 120  
10:40:45 121  PROCEDURE GET_MAX_REFUND (
10:40:45 122  	in_invoice_id IN NUMBER,
10:40:45 123  	out_amount    OUT NUMBER
10:40:45 124  );
10:40:45 125  
10:40:45 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
10:40:45 127  	in_invoice_id	    IN NUMBER,
10:40:45 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
10:40:45 129  	out_days_num	    OUT NUMBER
10:40:45 130  );
10:40:45 131  
10:40:45 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:45 133  	in_invoice_id  IN NUMBER,
10:40:45 134  	out_result_set OUT SYS_REFCURSOR
10:40:45 135  );
10:40:45 136  
10:40:45 137  PROCEDURE GET_INVOICE_LICENSES (
10:40:45 138  	in_invoice_id  IN NUMBER,
10:40:45 139  	out_result_set OUT SYS_REFCURSOR
10:40:45 140  );
10:40:45 141  
10:40:45 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
10:40:45 143  	in_invoice_id	   IN NUMBER,
10:40:45 144  	out_offer_chain_id OUT NUMBER
10:40:45 145  );
10:40:45 146  
10:40:45 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
10:40:45 148  -- Closing invoice without refund
10:40:45 149  	in_invoice_id IN NUMBER,
10:40:45 150  	in_updated_by IN VARCHAR2
10:40:45 151  );
10:40:45 152  
10:40:45 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
10:40:45 154  	in_invoice_id	    IN NUMBER,
10:40:45 155  	out_subscription_id OUT NUMBER
10:40:45 156  );
10:40:45 157  
10:40:45 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
10:40:45 159  /*
10:40:45 160  Throws exceptions:
10:40:45 161  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45 162  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 163  Return:
10:40:45 164  	GLOBAL_CONSTANTS_V22.TRUE if ACCOUNT.EXEMPT_ID is not null
10:40:45 165  	GLOBAL_CONSTANTS_V22.FALSE else
10:40:45 166  */
10:40:45 167  	in_invoice_id	  IN NUMBER,
10:40:45 168  	out_is_tax_exempt OUT NUMBER
10:40:45 169  );
10:40:45 170  
10:40:45 171  PROCEDURE GET_INVOICE_BY_ID (
10:40:45 172  	in_invoice_id  IN NUMBER,
10:40:45 173  	out_result_set OUT SYS_REFCURSOR
10:40:45 174  );
10:40:45 175  
10:40:45 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
10:40:45 177  	in_invoice_id		      IN NUMBER,
10:40:45 178  	out_is_tax_calculation_needed OUT NUMBER
10:40:45 179  );
10:40:45 180  
10:40:45 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
10:40:45 182  	in_invoice_id		     IN NUMBER,
10:40:45 183  	in_updated_by		     IN VARCHAR2,
10:40:45 184  	in_is_tax_calculation_needed IN NUMBER
10:40:45 185  );
10:40:45 186  
10:40:45 187  PROCEDURE REFUND_INVOICE (
10:40:45 188  	in_invoice_id	   IN NUMBER,
10:40:45 189  	in_refund_amount   IN NUMBER,
10:40:45 190  	in_note 	   IN VARCHAR2,
10:40:45 191  	in_created_by	   IN VARCHAR2,
10:40:45 192  	out_charge_id	   OUT NUMBER
10:40:45 193  );
10:40:45 194  
10:40:45 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:40:45 196  	in_invoice_id		    IN NUMBER,
10:40:45 197  	out_order_id		    OUT VARCHAR2,
10:40:45 198  	out_external_transaction_id OUT VARCHAR2
10:40:45 199  );
10:40:45 200  
10:40:45 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
10:40:45 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
10:40:45 203  	out_result_set OUT SYS_REFCURSOR
10:40:45 204  );
10:40:45 205  
10:40:45 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
10:40:45 207  	in_invoice_id IN NUMBER,
10:40:45 208  	out_is_revoke OUT NUMBER
10:40:45 209  );
10:40:45 210  
10:40:45 211  END PROCS_INVOICE_V22;
10:40:45 212  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_INVOICE_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_INVOICE (
10:40:45   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
10:40:45   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
10:40:45   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
10:40:45   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
10:40:45   9  );
10:40:45  10  
10:40:45  11  PROCEDURE UPDATE_INVOICE (
10:40:45  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
10:40:45  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
10:40:45  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
10:40:45  16  );
10:40:45  17  
10:40:45  18  END PROCS_INVOICE_CRU_V22;
10:40:45  19  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> /*
10:40:45 SQL> CREATE TABLE ITUNES_RECEIPT (
10:40:45 SQL> 	id NUMBER NOT NULL ENABLE,
10:40:45 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
10:40:45 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
10:40:45 SQL> 	status NUMBER,
10:40:45 SQL> 	quantity NUMBER,
10:40:45 SQL> 	product_id VARCHAR(1024),
10:40:45 SQL> 	transaction_id VARCHAR(1024),
10:40:45 SQL> 	purchase_date TIMESTAMP,
10:40:45 SQL> 	original_transaction_id VARCHAR(1024),
10:40:45 SQL> 	original_purchase_date TIMESTAMP,
10:40:45 SQL> 	app_item_id VARCHAR(1024),
10:40:45 SQL> 	version_external_id NUMBER,
10:40:45 SQL> 	bid VARCHAR(1024),
10:40:45 SQL> 	bvrs VARCHAR(255),
10:40:45 SQL> 	expires_date TIMESTAMP,
10:40:45 SQL> 	create_date DATE NOT NULL,
10:40:45 SQL> 	created_by VARCHAR(255) NOT NULL,
10:40:45 SQL> 	update_date DATE NOT NULL,
10:40:45 SQL> 	updated_by VARCHAR(255) NOT NULL,
10:40:45 SQL> 	last_check_date DATE NOT NULL,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
10:40:45 SQL> )
10:40:45 SQL> TABLESPACE CORE;
10:40:45 SQL> */
10:40:45 SQL> 
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
10:40:45   4  	      /*
10:40:45   5  	      Throws exceptions:
10:40:45   6  	      APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   7  	      */
10:40:45   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:45   9  	      out_result_set	  OUT SYS_REFCURSOR
10:40:45  10  );
10:40:45  11  
10:40:45  12  PROCEDURE CREATE_RECEIPT(
10:40:45  13  /*
10:40:45  14  Throws exceptions:
10:40:45  15  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  16  */
10:40:45  17  	  out_id	      OUT NUMBER,
10:40:45  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:45  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:40:45  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:45  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:45  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:45  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:45  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:45  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:45  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:45  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:45  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:40:45  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:40:45  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:45  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
10:40:45  33  );
10:40:45  34  
10:40:45  35  PROCEDURE UPDATE_RECEIPT(
10:40:45  36  /*
10:40:45  37  Throws exceptions:
10:40:45  38  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  39  */
10:40:45  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:40:45  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:45  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:40:45  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:45  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:45  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:45  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:45  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:45  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:45  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:45  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:45  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:40:45  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:40:45  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:45  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:40:45  55  	  in_is_expired       IN NUMBER
10:40:45  56  );
10:40:45  57  
10:40:45  58  PROCEDURE LINK_ITUNES_RECEIPT(
10:40:45  59  /*
10:40:45  60  Throws exceptions:
10:40:45  61  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  62  */
10:40:45  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:40:45  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
10:40:45  66  );
10:40:45  67  
10:40:45  68  PROCEDURE MARK_RECEIPT_CHECKED(
10:40:45  69  /*
10:40:45  70  Throws exceptions:
10:40:45  71  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  72  */
10:40:45  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
10:40:45  74  );
10:40:45  75  
10:40:45  76  PROCEDURE GET_ITUNES_RECEIPTS (
10:40:45  77  /*
10:40:45  78  Throws exceptions:
10:40:45  79  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  80  */
10:40:45  81  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45  82  	in_row_number	    IN NUMBER DEFAULT 500
10:40:45  83  );
10:40:45  84  
10:40:45  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
10:40:45  86  /*
10:40:45  87  Throws exceptions:
10:40:45  88  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  89  */
10:40:45  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
10:40:45  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
10:40:45  92  );
10:40:45  93  
10:40:45  94  END PROCS_ITUNES_RECEIPT_V22;
10:40:45  95  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> /*
10:40:45 SQL> CREATE TABLE ITUNES_RECEIPT (
10:40:45 SQL> 	id NUMBER NOT NULL ENABLE,
10:40:45 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
10:40:45 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
10:40:45 SQL> 	status NUMBER,
10:40:45 SQL> 	quantity NUMBER,
10:40:45 SQL> 	product_id VARCHAR(1024),
10:40:45 SQL> 	transaction_id VARCHAR(1024),
10:40:45 SQL> 	purchase_date TIMESTAMP,
10:40:45 SQL> 	original_transaction_id VARCHAR(1024),
10:40:45 SQL> 	original_purchase_date TIMESTAMP,
10:40:45 SQL> 	app_item_id VARCHAR(1024),
10:40:45 SQL> 	version_external_id NUMBER,
10:40:45 SQL> 	bid VARCHAR(1024),
10:40:45 SQL> 	bvrs VARCHAR(255),
10:40:45 SQL> 	expires_date TIMESTAMP,
10:40:45 SQL> 	create_date DATE NOT NULL,
10:40:45 SQL> 	created_by VARCHAR(255) NOT NULL,
10:40:45 SQL> 	update_date DATE NOT NULL,
10:40:45 SQL> 	updated_by VARCHAR(255) NOT NULL,
10:40:45 SQL> 	last_check_date DATE NOT NULL,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
10:40:45 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
10:40:45 SQL> )
10:40:45 SQL> TABLESPACE CORE;
10:40:45 SQL> */
10:40:45 SQL> 
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_RECEIPT(
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   7  */
10:40:45   8  	  out_id	      OUT NUMBER,
10:40:45   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:45  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:40:45  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:45  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:45  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:45  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:45  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:45  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:45  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:45  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:45  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:40:45  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:40:45  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:45  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE UPDATE_RECEIPT(
10:40:45  27  /*
10:40:45  28  Throws exceptions:
10:40:45  29  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  30  */
10:40:45  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:40:45  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:45  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:40:45  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:45  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:45  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:45  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:45  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:45  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:45  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:45  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:45  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:40:45  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:40:45  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:45  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:40:45  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
10:40:45  47  );
10:40:45  48  
10:40:45  49  PROCEDURE LINK_ITUNES_RECEIPT(
10:40:45  50  /*
10:40:45  51  Throws exceptions:
10:40:45  52  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  53  */
10:40:45  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:40:45  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:45  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
10:40:45  57  );
10:40:45  58  
10:40:45  59  PROCEDURE MARK_RECEIPT_CHECKED(
10:40:45  60  /*
10:40:45  61  Throws exceptions:
10:40:45  62  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  63  */
10:40:45  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
10:40:45  65  );
10:40:45  66  
10:40:45  67  END PROCS_ITUNES_RECEIPT_CRU_V22;
10:40:45  68  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_LICENSE
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_LICENSE(
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45   9  */
10:40:45  10  	in_status_id		    IN NUMBER,
10:40:45  11  	in_needs_entitlements	    IN NUMBER,
10:40:45  12  	in_start_date		    IN DATE,
10:40:45  13  	in_end_date		    IN DATE,
10:40:45  14  	in_offer_id		    IN NUMBER,
10:40:45  15  	in_subscription_id	    IN NUMBER,
10:40:45  16  	in_invoice_id		    IN NUMBER,
10:40:45  17  	in_created_by		    IN VARCHAR2,
10:40:45  18  	in_is_extension 	    IN NUMBER,
10:40:45  19  	in_current_offer_index	    IN NUMBER,
10:40:45  20  	in_current_offer_recurr_num IN NUMBER,
10:40:45  21  	out_license_id		    OUT NUMBER
10:40:45  22  );
10:40:45  23  
10:40:45  24  /*********************************************/
10:40:45  25  
10:40:45  26  PROCEDURE UPDATE_LICENSE_STATUS(
10:40:45  27  /*
10:40:45  28  Throws exceptions:
10:40:45  29  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  30  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  31  */
10:40:45  32  	  in_license_id     IN NUMBER,
10:40:45  33  	  in_license_status IN NUMBER,
10:40:45  34  	  in_updated_by     IN VARCHAR2,
10:40:45  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:45  36  );
10:40:45  37  
10:40:45  38  /*********************************************/
10:40:45  39  
10:40:45  40  PROCEDURE GET_ENDING_LICENSES (
10:40:45  41  	in_hours_number IN NUMBER,
10:40:45  42  	out_result_set OUT SYS_REFCURSOR
10:40:45  43  );
10:40:45  44  
10:40:45  45  /*********************************************/
10:40:45  46  
10:40:45  47  PROCEDURE GET_ENDING_LICENSES_CC (
10:40:45  48  	in_hours_number IN NUMBER,
10:40:45  49  	out_result_set OUT SYS_REFCURSOR,
10:40:45  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  51  );
10:40:45  52  
10:40:45  53  /**********************************************/
10:40:45  54  
10:40:45  55  PROCEDURE GET_RECURRING_OFFER (
10:40:45  56  	in_license_id  IN NUMBER,
10:40:45  57  	out_result_set OUT SYS_REFCURSOR
10:40:45  58  );
10:40:45  59  
10:40:45  60  /**********************************************/
10:40:45  61  
10:40:45  62  PROCEDURE GET_NEXT_OFFER (
10:40:45  63  	in_license_id  IN NUMBER,
10:40:45  64  	out_result_set OUT SYS_REFCURSOR
10:40:45  65  );
10:40:45  66  
10:40:45  67  /**********************************************/
10:40:45  68  
10:40:45  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:40:45  70  	in_license_id IN NUMBER,
10:40:45  71  	out_group_id  OUT NUMBER
10:40:45  72  );
10:40:45  73  
10:40:45  74  /**************************************************/
10:40:45  75  
10:40:45  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:40:45  77  	out_result_set OUT SYS_REFCURSOR
10:40:45  78  );
10:40:45  79  
10:40:45  80  /**************************************************/
10:40:45  81  
10:40:45  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:40:45  83  	in_license_id	      IN NUMBER,
10:40:45  84  	in_needs_entitlements IN NUMBER,
10:40:45  85  	in_updated_by	      IN VARCHAR2
10:40:45  86  );
10:40:45  87  
10:40:45  88  PROCEDURE GET_ENDED_GC_LICENSES (
10:40:45  89  	out_result_set		OUT SYS_REFCURSOR,
10:40:45  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:45  91  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:45  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  93  );
10:40:45  94  
10:40:45  95  PROCEDURE GET_LICENSE_BY_ID (
10:40:45  96  
10:40:45  97  	in_license_id  IN NUMBER,
10:40:45  98  
10:40:45  99  	out_result_set OUT SYS_REFCURSOR
10:40:45 100  
10:40:45 101  );
10:40:45 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
10:40:45 103  	in_subscription_id IN NUMBER,
10:40:45 104  	in_end_date IN DATE,
10:40:45 105  	in_updated_by IN VARCHAR2
10:40:45 106  );
10:40:45 107  
10:40:45 108  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:40:45 109  	in_days_before_close	 IN NUMBER,
10:40:45 110  	in_num_licenses_to_fetch IN NUMBER,
10:40:45 111  	out_result_set		 OUT SYS_REFCURSOR
10:40:45 112  );
10:40:45 113  
10:40:45 114  END PROCS_LICENSE_V22;
10:40:45 115  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_LICENSE_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_LICENSE(
10:40:45   4  	out_license_id		    OUT LICENSE.ID%TYPE,
10:40:45   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
10:40:45   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
10:40:45   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
10:40:45   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
10:40:45  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
10:40:45  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
10:40:45  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
10:40:45  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
10:40:45  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
10:40:45  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
10:40:45  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
10:40:45  17  );
10:40:45  18  
10:40:45  19  PROCEDURE UPDATE_LICENSE (
10:40:45  20  	in_license_id		    IN LICENSE.ID%TYPE,
10:40:45  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:40:45  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
10:40:45  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
10:40:45  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
10:40:45  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
10:40:45  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
10:40:45  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
10:40:45  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
10:40:45  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
10:40:45  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
10:40:45  32  );
10:40:45  33  
10:40:45  34  END PROCS_LICENSE_CRU_V22;
10:40:45  35  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_LINE_ITEMS
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE ADD_LINE_ITEMS(
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	in_invoice_id IN NUMBER,
10:40:45  10  	in_offer_id   IN NUMBER,
10:40:45  11  	in_created_by IN VARCHAR2
10:40:45  12  );
10:40:45  13  
10:40:45  14  /****************************************************/
10:40:45  15  
10:40:45  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:40:45  17  	in_line_item_id    IN NUMBER,
10:40:45  18  	in_amount	   IN NUMBER,
10:40:45  19  	in_discount_amount IN NUMBER,
10:40:45  20  	in_taxes_amount    IN NUMBER
10:40:45  21  );
10:40:45  22  
10:40:45  23  /****************************************************/
10:40:45  24  
10:40:45  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:45  26  /*
10:40:45  27  Throws exceptions:
10:40:45  28  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  29  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  30  */
10:40:45  31  	in_invoice_id  IN NUMBER,
10:40:45  32  	out_result_set OUT SYS_REFCURSOR
10:40:45  33  );
10:40:45  34  
10:40:45  35  /****************************************************/
10:40:45  36  
10:40:45  37  PROCEDURE GET_LINE_ITEM_TAXES (
10:40:45  38  /*
10:40:45  39  Throws exceptions:
10:40:45  40  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  41  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  42  */
10:40:45  43  	in_line_item_id IN  NUMBER,
10:40:45  44  	out_result_set	OUT SYS_REFCURSOR
10:40:45  45  );
10:40:45  46  /****************************************************/
10:40:45  47  
10:40:45  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:40:45  49  /*
10:40:45  50  Throws exceptions:
10:40:45  51  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  52  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  53  */
10:40:45  54  	in_line_item_id IN  NUMBER,
10:40:45  55  	out_result_set	OUT SYS_REFCURSOR
10:40:45  56  );
10:40:45  57  
10:40:45  58  /****************************************************/
10:40:45  59  
10:40:45  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
10:40:45  61  /*
10:40:45  62  Throws exceptions:
10:40:45  63  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  64  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  65  */
10:40:45  66  	in_line_item_id     IN	NUMBER,
10:40:45  67  	out_amount	    OUT NUMBER
10:40:45  68  );
10:40:45  69  
10:40:45  70  /****************************************************/
10:40:45  71  
10:40:45  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
10:40:45  73  /*
10:40:45  74  Throws exceptions:
10:40:45  75  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  76  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  77  */
10:40:45  78  	in_line_item_id     IN	NUMBER
10:40:45  79  ) RETURN NUMBER;
10:40:45  80  
10:40:45  81  END PROCS_LINE_ITEMS_V22;
10:40:45  82  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_LINE_ITEM (
10:40:45   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
10:40:45   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
10:40:45   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
10:40:45   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
10:40:45   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
10:40:45   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
10:40:45  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE UPDATE_LINE_ITEM (
10:40:45  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
10:40:45  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
10:40:45  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
10:40:45  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
10:40:45  18  );
10:40:45  19  
10:40:45  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
10:40:45  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
10:40:45  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
10:40:45  23  );
10:40:45  24  
10:40:45  25  END PROCS_LINE_ITEMS_CRU_V22;
10:40:45  26  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.00
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_LOCKING
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V22" AS
10:40:45   2  
10:40:45   3  /*
10:40:45   4  Removed by Sergey
10:40:45   5  10.12.2010
10:40:45   6  PROCEDURE INITIALIZE_SYSTEM;
10:40:45   7  
10:40:45   8  PROCEDURE INITIALIZE_ACCOUNT (
10:40:45   9  	in_account_id IN NUMBER
10:40:45  10  );
10:40:45  11  
10:40:45  12  PROCEDURE INITIALIZE_GROUP (
10:40:45  13  	in_group_id IN NUMBER
10:40:45  14  );
10:40:45  15  */
10:40:45  16  
10:40:45  17  PROCEDURE LOCK_ACCOUNT (
10:40:45  18  	in_group_id    IN NUMBER,
10:40:45  19  	in_lock_key    IN VARCHAR2,
10:40:45  20  	in_seconds_num IN NUMBER,
10:40:45  21  	in_created_by  IN VARCHAR2,
10:40:45  22  	in_reason      IN VARCHAR2
10:40:45  23  );
10:40:45  24  
10:40:45  25  PROCEDURE RELEASE_LOCK (
10:40:45  26  	in_group_id IN NUMBER,
10:40:45  27  	in_lock_key IN VARCHAR2
10:40:45  28  );
10:40:45  29  
10:40:45  30  END PROCS_LOCKING_V22;
10:40:45  31  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_NOTIFICATION
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	in_notification_type_name IN VARCHAR2,
10:40:45  10  	out_notification_type_id  OUT NUMBER
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE ADD_NOTIFICATION (
10:40:45  14  /*
10:40:45  15  Throws exceptions:
10:40:45  16  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  17  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  18  */
10:40:45  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:40:45  20  	in_recipient_group_id	 IN NUMBER,
10:40:45  21  	in_notification_type_id  IN NUMBER,
10:40:45  22  	in_date_to_notify	 IN DATE,
10:40:45  23  	in_email_template_params IN CLOB
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
10:40:45  27  /*
10:40:45  28  Throws exceptions:
10:40:45  29  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  30  */
10:40:45  31  	out_result_set OUT SYS_REFCURSOR
10:40:45  32  );
10:40:45  33  
10:40:45  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
10:40:45  35  /*
10:40:45  36  Throws exceptions:
10:40:45  37  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  38  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  39  */
10:40:45  40  	in_notification_id IN NUMBER
10:40:45  41  );
10:40:45  42  
10:40:45  43  PROCEDURE SET_NOTIFICATION_STATUS (
10:40:45  44  /*
10:40:45  45  Throws exceptions:
10:40:45  46  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  47  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  48  */
10:40:45  49  	in_notification_id	  IN NUMBER,
10:40:45  50  	in_notification_status_id IN NUMBER,
10:40:45  51  	in_error_message	  IN VARCHAR2
10:40:45  52  );
10:40:45  53  
10:40:45  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
10:40:45  55  /*
10:40:45  56  Throws exceptions:
10:40:45  57  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  58  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  59  */
10:40:45  60  	in_notification_id IN NUMBER,
10:40:45  61  	in_error_message   IN VARCHAR2
10:40:45  62  );
10:40:45  63  
10:40:45  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
10:40:45  65  /*
10:40:45  66  Result: 1 if notification locked
10:40:45  67  2 - else
10:40:45  68  */
10:40:45  69  	in_notification_id IN NUMBER,
10:40:45  70  	out_lock_status    OUT NUMBER
10:40:45  71  );
10:40:45  72  
10:40:45  73  PROCEDURE GET_NOTIFICATION_DATA (
10:40:45  74  	in_notification_id IN NUMBER,
10:40:45  75  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  76  );
10:40:45  77  
10:40:45  78  END PROCS_NOTIFICATION_V22;
10:40:45  79  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
10:40:45   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
10:40:45   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
10:40:45   6  );
10:40:45   7  
10:40:45   8  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
10:40:45   9  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
10:40:45  10  	out_data	       OUT OFFER_CHAIN.ID%TYPE
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:45  14  	  in_offer_chain_id IN	 NUMBER,
10:40:45  15  	  out_result_set    OUT  SYS_REFCURSOR
10:40:45  16  );
10:40:45  17  
10:40:45  18  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
10:40:45  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:45  20  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
10:40:45  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:45  25  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  26  );
10:40:45  27  
10:40:45  28  PROCEDURE GET_OFFER_CHAINS_OFFERS (
10:40:45  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:45  30  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  31  );
10:40:45  32  
10:40:45  33  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
10:40:45  34  	in_product_id  IN  NUMBER,
10:40:45  35  	out_result_set OUT SYS_REFCURSOR
10:40:45  36  );
10:40:45  37  
10:40:45  38  PROCEDURE GET_OFFER_CHAIN_PRICE (
10:40:45  39  	in_offer_chain_id IN NUMBER,
10:40:45  40  	out_price	  OUT NUMBER
10:40:45  41  );
10:40:45  42  
10:40:45  43  PROCEDURE GET_FIRST_OFFER(
10:40:45  44  	in_offer_chain_id IN  NUMBER,
10:40:45  45  	out_offer_id	  OUT NUMBER
10:40:45  46  );
10:40:45  47  
10:40:45  48  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
10:40:45  49  	out_result_set OUT SYS_REFCURSOR
10:40:45  50  );
10:40:45  51  
10:40:45  52  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
10:40:45  53  	in_offer_chain_id IN NUMBER,
10:40:45  54  	out_result_set	  OUT SYS_REFCURSOR
10:40:45  55  );
10:40:45  56  
10:40:45  57  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
10:40:45  58  	in_offer_chain_id	  IN NUMBER,
10:40:45  59  	in_offer_chain_start_date IN DATE
10:40:45  60  ) RETURN DATE;
10:40:45  61  
10:40:45  62  FUNCTION CALCULATE_OFFER_AMOUNT (
10:40:45  63  	in_offer_id IN NUMBER
10:40:45  64  ) RETURN NUMBER;
10:40:45  65  
10:40:45  66  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
10:40:45  67  	in_offer_chain_id IN NUMBER
10:40:45  68  ) RETURN NUMBER;
10:40:45  69  
10:40:45  70  FUNCTION GET_FIRST_OFFER_INDEX (
10:40:45  71  	in_offer_chain_id IN NUMBER
10:40:45  72  ) RETURN NUMBER;
10:40:45  73  
10:40:45  74  FUNCTION GET_NEXT_OFFER_INDEX (
10:40:45  75  	in_offer_chain_id	     IN NUMBER,
10:40:45  76  	in_offer_chain_current_index IN NUMBER
10:40:45  77  ) RETURN NUMBER;
10:40:45  78  
10:40:45  79  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:40:45  80  	in_offer_chain_id	     IN NUMBER,
10:40:45  81  	in_offer_chain_current_index IN NUMBER,
10:40:45  82  	out_next_offer_index	     OUT NUMBER
10:40:45  83  );
10:40:45  84  
10:40:45  85  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:40:45  86  	in_license_id		     IN NUMBER,
10:40:45  87  	in_offer_chain_current_index IN NUMBER,
10:40:45  88  	out_next_offer_index	     OUT NUMBER
10:40:45  89  );
10:40:45  90  
10:40:45  91  FUNCTION IS_OFFER_INDEX_EXISTS (
10:40:45  92  	in_offer_chain_id	   IN NUMBER,
10:40:45  93  	in_offer_chain_offer_index IN NUMBER
10:40:45  94  ) RETURN NUMBER;
10:40:45  95  
10:40:45  96  PROCEDURE GET_OFFER_LENGTH (
10:40:45  97  	in_offer_id IN NUMBER,
10:40:45  98  	out_years   OUT NUMBER,
10:40:45  99  	out_months  OUT NUMBER,
10:40:45 100  	out_days    OUT NUMBER
10:40:45 101  );
10:40:45 102  
10:40:45 103  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
10:40:45 104  	in_offer_id   IN NUMBER,
10:40:45 105  	in_start_date IN DATE DEFAULT SYSDATE,
10:40:45 106  	out_days      OUT NUMBER
10:40:45 107  );
10:40:45 108  
10:40:45 109  PROCEDURE GET_OFFER_PRODUCTS (
10:40:45 110  	in_offer_id    IN NUMBER,
10:40:45 111  	out_result_set OUT SYS_REFCURSOR
10:40:45 112  );
10:40:45 113  
10:40:45 114  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
10:40:45 115  	in_offer_chain_id IN NUMBER,
10:40:45 116  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 117  );
10:40:45 118  
10:40:45 119  FUNCTION CHECK_FOR_SAME_PRODUCTS (
10:40:45 120  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
10:40:45 121  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
10:40:45 122  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:45 123  ) RETURN NUMBER;
10:40:45 124  
10:40:45 125  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
10:40:45 126  	in_offer_chain_id IN NUMBER
10:40:45 127  ) RETURN NUMBER;
10:40:45 128  
10:40:45 129  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
10:40:45 130  	in_offer_chain_id IN NUMBER
10:40:45 131  ) RETURN NUMBER;
10:40:45 132  
10:40:45 133  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
10:40:45 134  	in_offer_chain_id   IN NUMBER,
10:40:45 135  	in_eligibility_name IN VARCHAR2,
10:40:45 136  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 137  );
10:40:45 138  
10:40:45 139  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
10:40:45 140  	in_offer_chain_ids  IN VARCHAR2,
10:40:45 141  	in_eligibility_name IN VARCHAR2,
10:40:45 142  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 143  );
10:40:45 144  
10:40:45 145  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:45 146  	in_offer_chain_id IN NUMBER,
10:40:45 147  	in_meta_data_name IN VARCHAR2,
10:40:45 148  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 149  );
10:40:45 150  
10:40:45 151  PROCEDURE GET_OFFER_CHAINS_META_DATA (
10:40:45 152  	in_offer_chain_ids IN VARCHAR2,
10:40:45 153  	in_meta_data_name  IN VARCHAR2,
10:40:45 154  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 155  );
10:40:45 156  
10:40:45 157  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:40:45 158  	in_offer_id    IN NUMBER,
10:40:45 159  	out_result_set OUT SYS_REFCURSOR
10:40:45 160  );
10:40:45 161  
10:40:45 162  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:45 163  	in_product_offering_id IN NUMBER,
10:40:45 164  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
10:40:45 165  	out_result_set	       OUT SYS_REFCURSOR
10:40:45 166  );
10:40:45 167  
10:40:45 168  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
10:40:45 169  	in_offer_chain_1 IN NUMBER,
10:40:45 170  	in_offer_chain_2 IN NUMBER,
10:40:45 171  	out_result_set	OUT SYS_REFCURSOR
10:40:45 172  );
10:40:45 173  
10:40:45 174  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:40:45 175  	in_offer_chain_id IN NUMBER,
10:40:45 176  	in_meta_data_name IN VARCHAR2,
10:40:45 177  	out_value	  OUT VARCHAR2
10:40:45 178  );
10:40:45 179  
10:40:45 180  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
10:40:45 181  	in_offer_chain_id   IN NUMBER,
10:40:45 182  	in_eligibility_name IN VARCHAR2,
10:40:45 183  	out_value	    OUT VARCHAR2
10:40:45 184  );
10:40:45 185  
10:40:45 186  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
10:40:45 187  	in_offer_id    IN NUMBER,
10:40:45 188  	out_result_set OUT SYS_REFCURSOR
10:40:45 189  );
10:40:45 190  
10:40:45 191  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
10:40:45 192  	in_meta_data_name  IN VARCHAR2,
10:40:45 193  	in_meta_data_value IN VARCHAR2,
10:40:45 194  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 195  );
10:40:45 196  
10:40:45 197  PROCEDURE GET_ALL_META_DATA (
10:40:45 198  	in_offer_chain_id IN NUMBER,
10:40:45 199  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 200  );
10:40:45 201  
10:40:45 202  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
10:40:45 203  	in_group_id	  IN NUMBER,
10:40:45 204  	in_offer_chain_id IN NUMBER,
10:40:45 205  	out_is_eligible   OUT NUMBER,
10:40:45 206  	out_concurrent_subscription_id OUT NUMBER
10:40:45 207  );
10:40:45 208  
10:40:45 209  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:45 210  	in_offer_chain_id	 IN NUMBER,
10:40:45 211  	in_action_name		 IN VARCHAR2,
10:40:45 212  	out_notification_type_id OUT NUMBER
10:40:45 213  );
10:40:45 214  
10:40:45 215  END PROCS_OFFER_CHAIN_V22;
10:40:45 216  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
10:40:45   2  AS
10:40:45   3  
10:40:45   4  ----
10:40:45   5  --------------------------------------------------------------------------------
10:40:45   6  ----
10:40:45   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
10:40:45   8  	      returned from the previous call and store the result for the
10:40:45   9  	      next call.
10:40:45  10  	     This method will identify and create new Sync Events from trigger activity data */
10:40:45  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
10:40:45  12  ----
10:40:45  13  --------------------------------------------------------------------------------
10:40:45  14  ----
10:40:45  15  	  /* Internal logic call may need to be used to fix poller data */
10:40:45  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
10:40:45  17  ----
10:40:45  18  --------------------------------------------------------------------------------
10:40:45  19  ----
10:40:45  20  	  /* User request for sync events. Params should be hard-coded in the application
10:40:45  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
10:40:45  22  	      skipped. Last read time is logged.
10:40:45  23  	     Params:
10:40:45  24  		  set_maximum: Size of each transfer set
10:40:45  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
10:40:45  26  	     Returns:
10:40:45  27  		  set_id: Transfer set id, duplicated for all entries
10:40:45  28  		  group_id: regi_id value
10:40:45  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
10:40:45  30  	  */
10:40:45  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
10:40:45  32  ----
10:40:45  33  --------------------------------------------------------------------------------
10:40:45  34  ----
10:40:45  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
10:40:45  36  	      single confirmation per transfer set.
10:40:45  37  	  */
10:40:45  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
10:40:45  39  ----
10:40:45  40  --------------------------------------------------------------------------------
10:40:45  41  ----
10:40:45  42  	  procedure SET_LAST_RUN(ts in timestamp);
10:40:45  43  	  procedure GET_LAST_RUN(ts out timestamp);
10:40:45  44  END PROCS_POLLING_SYNC;
10:40:45  45  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.06
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE LOG_RETRY(
10:40:45   4  	  in_process_name IN VARCHAR2,
10:40:45   5  	  in_generic_id   IN NUMBER,
10:40:45   6  	  in_date	  IN VARCHAR2,
10:40:45   7  	  out_success	   OUT NUMBER
10:40:45   8  );
10:40:45   9  
10:40:45  10  PROCEDURE LOG_RETRY_DATE(
10:40:45  11  	  in_process_name IN VARCHAR2,
10:40:45  12  	  in_generic_id   IN NUMBER,
10:40:45  13  	  in_date	  IN DATE,
10:40:45  14  	  out_success	   OUT NUMBER
10:40:45  15  );
10:40:45  16  
10:40:45  17  PROCEDURE DELETE_RETRY(
10:40:45  18  	  in_process_name IN VARCHAR2,
10:40:45  19  	  in_remove_minutes  IN NUMBER
10:40:45  20  );
10:40:45  21  
10:40:45  22  PROCEDURE GET_SYSDATE (
10:40:45  23  	  out_date OUT VARCHAR2
10:40:45  24  );
10:40:45  25  
10:40:45  26  END PROCS_PROCESS_RETRY_V22;
10:40:45  27  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.00
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_PRODUCT
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_PRODUCTS (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   7  */
10:40:45   8  	in_status_id   IN  NUMBER,
10:40:45   9  	out_result_set OUT SYS_REFCURSOR
10:40:45  10  );
10:40:45  11  
10:40:45  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:45  13  /*
10:40:45  14  Throws exceptions:
10:40:45  15  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  16  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  17  */
10:40:45  18  	in_product_offering_id	IN NUMBER,
10:40:45  19  	out_result_set OUT SYS_REFCURSOR
10:40:45  20  );
10:40:45  21  
10:40:45  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
10:40:45  23  /*
10:40:45  24  Throws exceptions:
10:40:45  25  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  26  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  27  */
10:40:45  28  	in_product_id	    IN NUMBER,
10:40:45  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
10:40:45  30  	out_result_set	    OUT SYS_REFCURSOR
10:40:45  31  );
10:40:45  32  
10:40:45  33  PROCEDURE GET_PRODUCT_BY_ID (
10:40:45  34  	in_product_id  IN NUMBER,
10:40:45  35  	out_result_set OUT SYS_REFCURSOR
10:40:45  36  );
10:40:45  37  
10:40:45  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:40:45  39  	in_line_item_id IN NUMBER,
10:40:45  40  	out_result_set	OUT SYS_REFCURSOR
10:40:45  41  );
10:40:45  42  
10:40:45  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
10:40:45  44  	in_product_offering_id IN NUMBER,
10:40:45  45  	out_result_set	OUT SYS_REFCURSOR
10:40:45  46  );
10:40:45  47  
10:40:45  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
10:40:45  49  	in_product_offering_id IN NUMBER,
10:40:45  50  	out_result_set	       OUT SYS_REFCURSOR
10:40:45  51  );
10:40:45  52  
10:40:45  53  END PROCS_PRODUCT_V22;
10:40:45  54  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
10:40:45   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
10:40:45   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
10:40:45   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
10:40:45   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
10:40:45  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
10:40:45  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
10:40:45  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:45  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
10:40:45  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
10:40:45  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
10:40:45  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:45  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:45  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
10:40:45  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
10:40:45  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
10:40:45  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
10:40:45  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
10:40:45  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
10:40:45  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
10:40:45  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
10:40:45  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
10:40:45  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
10:40:45  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
10:40:45  29  );
10:40:45  30  
10:40:45  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
10:40:45  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
10:40:45  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
10:40:45  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
10:40:45  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
10:40:45  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
10:40:45  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:45  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:40:45  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
10:40:45  40  );
10:40:45  41  
10:40:45  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
10:40:45  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
10:40:45  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
10:40:45  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
10:40:45  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
10:40:45  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
10:40:45  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
10:40:45  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
10:40:45  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
10:40:45  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
10:40:45  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
10:40:45  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
10:40:45  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
10:40:45  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
10:40:45  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
10:40:45  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
10:40:45  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
10:40:45  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
10:40:45  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
10:40:45  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
10:40:45  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
10:40:45  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
10:40:45  65  );
10:40:45  66  
10:40:45  67  PROCEDURE CREATE_CPT_EXCEPTION (
10:40:45  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
10:40:45  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
10:40:45  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
10:40:45  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
10:40:45  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
10:40:45  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
10:40:45  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
10:40:45  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
10:40:45  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
10:40:45  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
10:40:45  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:45  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:45  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
10:40:45  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:45  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
10:40:45  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
10:40:45  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
10:40:45  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
10:40:45  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
10:40:45  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
10:40:45  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:40:45  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
10:40:45  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:40:45  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
10:40:45  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
10:40:45  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
10:40:45  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
10:40:45  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
10:40:45  97  );
10:40:45  98  
10:40:45  99  PROCEDURE CREATE_CPT_DEPOSIT (
10:40:45 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
10:40:45 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
10:40:45 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
10:40:45 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
10:40:45 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
10:40:45 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
10:40:45 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
10:40:45 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
10:40:45 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
10:40:45 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
10:40:45 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:45 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:45 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
10:40:45 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:45 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
10:40:45 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
10:40:45 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
10:40:45 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
10:40:45 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
10:40:45 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
10:40:45 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:40:45 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
10:40:45 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:40:45 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
10:40:45 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
10:40:45 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
10:40:45 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
10:40:45 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
10:40:45 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
10:40:45 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
10:40:45 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
10:40:45 132  );
10:40:45 133  
10:40:45 134  PROCEDURE CREATE_PP_SETTLEMENT (
10:40:45 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
10:40:45 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
10:40:45 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
10:40:45 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
10:40:45 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
10:40:45 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
10:40:45 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
10:40:45 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
10:40:45 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
10:40:45 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
10:40:45 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
10:40:45 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
10:40:45 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
10:40:45 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
10:40:45 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
10:40:45 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
10:40:45 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
10:40:45 153  );
10:40:45 154  
10:40:45 155  PROCEDURE CREATE_PP_DISPUTE (
10:40:45 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
10:40:45 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
10:40:45 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
10:40:45 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
10:40:45 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
10:40:45 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
10:40:45 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
10:40:45 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
10:40:45 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
10:40:45 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
10:40:45 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
10:40:45 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
10:40:45 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
10:40:45 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
10:40:45 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
10:40:45 172  );
10:40:45 173  
10:40:45 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
10:40:45 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
10:40:45 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
10:40:45 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:45 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
10:40:45 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
10:40:45 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
10:40:45 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
10:40:45 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
10:40:45 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
10:40:45 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
10:40:45 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
10:40:45 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
10:40:45 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
10:40:45 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
10:40:45 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
10:40:45 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
10:40:45 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
10:40:45 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
10:40:45 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
10:40:45 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
10:40:45 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
10:40:45 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
10:40:45 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
10:40:45 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
10:40:45 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
10:40:45 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
10:40:45 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
10:40:45 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
10:40:45 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
10:40:45 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
10:40:45 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
10:40:45 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
10:40:45 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
10:40:45 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
10:40:45 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
10:40:45 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
10:40:45 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
10:40:45 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
10:40:45 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
10:40:45 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
10:40:45 215  );
10:40:45 216  
10:40:45 217  PROCEDURE GET_EXT_SOURCE_LOG (
10:40:45 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:45 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:40:45 220  	out_result_set		 OUT SYS_REFCURSOR
10:40:45 221  );
10:40:45 222  
10:40:45 223  FUNCTION CHECK_EXT_SOURCE_LOG (
10:40:45 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:45 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:40:45 226  ) RETURN NUMBER;
10:40:45 227  
10:40:45 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
10:40:45 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
10:40:45 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
10:40:45 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
10:40:45 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
10:40:45 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
10:40:45 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
10:40:45 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
10:40:45 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
10:40:45 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
10:40:45 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
10:40:45 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
10:40:45 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
10:40:45 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
10:40:45 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
10:40:45 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
10:40:45 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
10:40:45 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
10:40:45 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
10:40:45 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
10:40:45 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
10:40:45 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
10:40:45 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
10:40:45 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
10:40:45 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
10:40:45 253  );
10:40:45 254  
10:40:45 255  END PROCS_RECONCILIATION_CRU_V22;
10:40:45 256  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.03
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
10:40:45   2  
10:40:45   3  ----
10:40:45   4  --------------------------------------------------------------------------------
10:40:45   5  ----
10:40:45   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45   7  ----
10:40:45   8  --------------------------------------------------------------------------------
10:40:45   9  ----
10:40:45  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  11  ----
10:40:45  12  --------------------------------------------------------------------------------
10:40:45  13  ----
10:40:45  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  15  ----
10:40:45  16  --------------------------------------------------------------------------------
10:40:45  17  ----
10:40:45  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  19  ----
10:40:45  20  --------------------------------------------------------------------------------
10:40:45  21  ----
10:40:45  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  23  ----
10:40:45  24  --------------------------------------------------------------------------------
10:40:45  25  ----
10:40:45  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  27  ----
10:40:45  28  --------------------------------------------------------------------------------
10:40:45  29  ----
10:40:45  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  31  ----
10:40:45  32  --------------------------------------------------------------------------------
10:40:45  33  ----
10:40:45  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  35  ----
10:40:45  36  --------------------------------------------------------------------------------
10:40:45  37  ----
10:40:45  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  39  ----
10:40:45  40  --------------------------------------------------------------------------------
10:40:45  41  ----
10:40:45  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  43  ----
10:40:45  44  --------------------------------------------------------------------------------
10:40:45  45  ----
10:40:45  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  47  ----
10:40:45  48  --------------------------------------------------------------------------------
10:40:45  49  ----
10:40:45  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  51  ----
10:40:45  52  --------------------------------------------------------------------------------
10:40:45  53  ----
10:40:45  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  55  ----
10:40:45  56  --------------------------------------------------------------------------------
10:40:45  57  ----
10:40:45  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  59  ----
10:40:45  60  --------------------------------------------------------------------------------
10:40:45  61  ----
10:40:45  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  63  ----
10:40:45  64  --------------------------------------------------------------------------------
10:40:45  65  ----
10:40:45  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  67  ----
10:40:45  68  --------------------------------------------------------------------------------
10:40:45  69  ----
10:40:45  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  71  ----
10:40:45  72  --------------------------------------------------------------------------------
10:40:45  73  ----
10:40:45  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  75  ----
10:40:45  76  --------------------------------------------------------------------------------
10:40:45  77  ----
10:40:45  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  79  ----
10:40:45  80  --------------------------------------------------------------------------------
10:40:45  81  ----
10:40:45  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  83  ----
10:40:45  84  --------------------------------------------------------------------------------
10:40:45  85  ----
10:40:45  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  87  ----
10:40:45  88  --------------------------------------------------------------------------------
10:40:45  89  ----
10:40:45  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  91  ----
10:40:45  92  --------------------------------------------------------------------------------
10:40:45  93  ----
10:40:45  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  95  ----
10:40:45  96  --------------------------------------------------------------------------------
10:40:45  97  ----
10:40:45  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45  99  ----
10:40:45 100  --------------------------------------------------------------------------------
10:40:45 101  ----
10:40:45 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 103  ----
10:40:45 104  --------------------------------------------------------------------------------
10:40:45 105  ----
10:40:45 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 107  ----
10:40:45 108  --------------------------------------------------------------------------------
10:40:45 109  ----
10:40:45 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 111  ----
10:40:45 112  --------------------------------------------------------------------------------
10:40:45 113  ----
10:40:45 114  /**/
10:40:45 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 116  ----
10:40:45 117  --------------------------------------------------------------------------------
10:40:45 118  ----
10:40:45 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 120  ----
10:40:45 121  --------------------------------------------------------------------------------
10:40:45 122  ----
10:40:45 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 124  ----
10:40:45 125  --------------------------------------------------------------------------------
10:40:45 126  ----
10:40:45 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 128  ----
10:40:45 129  --------------------------------------------------------------------------------
10:40:45 130  ----
10:40:45 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 132  ----
10:40:45 133  --------------------------------------------------------------------------------
10:40:45 134  ----
10:40:45 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 136  ----
10:40:45 137  --------------------------------------------------------------------------------
10:40:45 138  ----
10:40:45 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 140  ----
10:40:45 141  --------------------------------------------------------------------------------
10:40:45 142  ----
10:40:45 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 144  ----
10:40:45 145  --------------------------------------------------------------------------------
10:40:45 146  ----
10:40:45 147  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 148  ----
10:40:45 149  --------------------------------------------------------------------------------
10:40:45 150  ----
10:40:45 151  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 152  ----
10:40:45 153  --------------------------------------------------------------------------------
10:40:45 154  ----
10:40:45 155  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
10:40:45 156  ----
10:40:45 157  --------------------------------------------------------------------------------
10:40:45 158  ----
10:40:45 159  /**/
10:40:45 160  END PROCS_REPORTING;
10:40:45 161  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.07
10:40:45 SQL> 
10:40:45 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
10:40:45 SQL> 
10:40:45 SQL> whenever sqlerror exit failure
10:40:45 SQL> 
10:40:45 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
10:40:45   2  
10:40:45   3  ----
10:40:45   4  --------------------------------------------------------------------------------
10:40:45   5  ----
10:40:45   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
10:40:45   7  	      return line_item.amount%type;
10:40:45   8  ----
10:40:45   9  --------------------------------------------------------------------------------
10:40:45  10  ----
10:40:45  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
10:40:45  12  	      return line_item.amount%type;
10:40:45  13  ----
10:40:45  14  --------------------------------------------------------------------------------
10:40:45  15  ----
10:40:45  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
10:40:45  17  	      in_lower_date_bound DATE,
10:40:45  18  	      in_upper_date_bound DATE,
10:40:45  19  	      out_lic_cur OUT sys_refcursor
10:40:45  20  	  );
10:40:45  21  ----
10:40:45  22  --------------------------------------------------------------------------------
10:40:45  23  ----
10:40:45  24  END PROCS_REPORTING_1A;
10:40:45  25  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_REPORTS
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V22" AS
10:40:45   2  
10:40:45   3  FUNCTION GET_PRODUCT_NAMES(
10:40:45   4  	in_offer_id IN NUMBER
10:40:45   5  ) RETURN VARCHAR2;
10:40:45   6  
10:40:45   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
10:40:45   8  	in_start_date  IN DATE,
10:40:45   9  	in_end_date    IN DATE,
10:40:45  10  	out_result_set OUT SYS_REFCURSOR
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
10:40:45  14  	in_offer_id	       IN NUMBER,
10:40:45  15  	in_start_date	       IN DATE,
10:40:45  16  	in_end_date	       IN DATE,
10:40:45  17  	out_new_purchasers_num OUT NUMBER,
10:40:45  18  	out_renewals_num       OUT NUMBER,
10:40:45  19  	out_product_names      OUT VARCHAR2,
10:40:45  20  	out_total_dollar_value OUT NUMBER,
10:40:45  21  	out_unique_purchasers  OUT NUMBER
10:40:45  22  );
10:40:45  23  
10:40:45  24  /*
10:40:45  25  FUNCTIONS FOR THE FLASH REPORT
10:40:45  26  */
10:40:45  27  
10:40:45  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
10:40:45  29  	in_offer_id	       IN NUMBER,
10:40:45  30  	in_start_date	       IN DATE,
10:40:45  31  	in_end_date	       IN DATE
10:40:45  32  ) RETURN NUMBER;
10:40:45  33  
10:40:45  34  FUNCTION FLR_RENEWALS_NUM (
10:40:45  35  	in_offer_id	       IN NUMBER,
10:40:45  36  	in_start_date	       IN DATE,
10:40:45  37  	in_end_date	       IN DATE
10:40:45  38  ) RETURN NUMBER;
10:40:45  39  
10:40:45  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
10:40:45  41  	in_offer_id	       IN NUMBER,
10:40:45  42  	in_start_date	       IN DATE,
10:40:45  43  	in_end_date	       IN DATE
10:40:45  44  ) RETURN NUMBER;
10:40:45  45  
10:40:45  46  FUNCTION FLR_UNIQUE_PURCHASERS (
10:40:45  47  	in_offer_id	       IN NUMBER,
10:40:45  48  	in_start_date	       IN DATE,
10:40:45  49  	in_end_date	       IN DATE
10:40:45  50  ) RETURN NUMBER;
10:40:45  51  
10:40:45  52  END PROCS_REPORTS_V22;
10:40:45  53  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_SUBSCRIPTION
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
10:40:45   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
10:40:45   5  	in_updater	     IN VARCHAR2,
10:40:45   6  	in_duration_in_hours IN NUMBER
10:40:45   7  );
10:40:45   8  
10:40:45   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
10:40:45  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
10:40:45  11  	in_updater    IN VARCHAR2
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE START_SUBSCRIPTION_CREATION (
10:40:45  15  	in_group_id	      IN NUMBER,
10:40:45  16  	in_created_by	      IN VARCHAR2,
10:40:45  17  	in_offer_chain_id     IN NUMBER,
10:40:45  18  	in_instrument_type_id IN NUMBER,
10:40:45  19  	in_instrument_id      IN NUMBER,
10:40:45  20  	in_agent_id	      IN NUMBER,
10:40:45  21  	in_note 	      IN VARCHAR2,
10:40:45  22  	out_subscription_id   OUT NUMBER,
10:40:45  23  	out_invoice_id	      OUT NUMBER,
10:40:45  24  	out_new_license_id    OUT NUMBER,
10:40:45  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.TRUE
10:40:45  26  );
10:40:45  27  
10:40:45  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
10:40:45  29  	in_subscription_id    IN NUMBER,
10:40:45  30  	in_invoice_id	      IN NUMBER,
10:40:45  31  	in_instrument_type_id IN NUMBER,
10:40:45  32  	in_instrument_id      IN NUMBER,
10:40:45  33  	in_created_by	      IN VARCHAR2
10:40:45  34  );
10:40:45  35  
10:40:45  36  PROCEDURE SUSPEND_SUBSCRIPTION(
10:40:45  37  /*
10:40:45  38  Throws exceptions:
10:40:45  39  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  40  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45  41  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  42  */
10:40:45  43  	  in_subs_id	IN NUMBER ,
10:40:45  44  	  in_updated_by IN VARCHAR2
10:40:45  45  );
10:40:45  46  
10:40:45  47  PROCEDURE REACTIVATE_SUBSCRIPTION (
10:40:45  48  	in_subscription_id IN  NUMBER,
10:40:45  49  	in_updated_by	   IN  VARCHAR2
10:40:45  50  );
10:40:45  51  
10:40:45  52  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:45  53  /*
10:40:45  54  Throws exceptions:
10:40:45  55  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  56  */
10:40:45  57  	  in_subscription_id IN  NUMBER,
10:40:45  58  	  out_result_set      OUT SYS_REFCURSOR
10:40:45  59  );
10:40:45  60  
10:40:45  61  PROCEDURE GET_SUBSCRIPTION_INVOICES (
10:40:45  62  /*
10:40:45  63  Throws exceptions:
10:40:45  64  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45  65  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  66  */
10:40:45  67  	in_subscription_id  IN	NUMBER,
10:40:45  68  	out_result_set	    OUT SYS_REFCURSOR
10:40:45  69  );
10:40:45  70  
10:40:45  71  PROCEDURE GET_SUBSCRIPTION_NOTES (
10:40:45  72  /*
10:40:45  73  Throws exceptions:
10:40:45  74  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  75  */
10:40:45  76  	in_subscription_id  IN	NUMBER,
10:40:45  77  	out_result_set	    OUT SYS_REFCURSOR
10:40:45  78  );
10:40:45  79  
10:40:45  80  PROCEDURE ANNOTATE_SUBSCRIPTION (
10:40:45  81  /*
10:40:45  82  Throws exceptions:
10:40:45  83  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45  84  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  85  */
10:40:45  86  	in_subscription_id IN  NUMBER,
10:40:45  87  	in_agent_id	   IN  NUMBER,
10:40:45  88  	in_note 	   IN  VARCHAR2,
10:40:45  89  	in_created_by	   IN  VARCHAR2
10:40:45  90  );
10:40:45  91  
10:40:45  92  PROCEDURE GET_CANCEL_REASONS (
10:40:45  93  	out_result_set OUT    SYS_REFCURSOR
10:40:45  94  );
10:40:45  95  
10:40:45  96  FUNCTION GET_RENEWAL_DATE (
10:40:45  97  /*
10:40:45  98  Throws exceptions:
10:40:45  99  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 100  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 101  */
10:40:45 102  	in_subscription_id in NUMBER
10:40:45 103  ) RETURN DATE;
10:40:45 104  
10:40:45 105  FUNCTION GET_RECENT_CHARGE (
10:40:45 106  /*
10:40:45 107  Throws exceptions:
10:40:45 108  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 109  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 110  */
10:40:45 111  	in_subscription_id IN NUMBER
10:40:45 112  ) RETURN NUMBER;
10:40:45 113  
10:40:45 114  FUNCTION GET_BILLING_CYCLE (
10:40:45 115  /*
10:40:45 116  Throws exceptions:
10:40:45 117  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 118  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 119  */
10:40:45 120  	in_subscription_id IN NUMBER
10:40:45 121  ) RETURN VARCHAR2;
10:40:45 122  
10:40:45 123  PROCEDURE REFUND_SUBSCRIPTION (
10:40:45 124  /*
10:40:45 125  Throws exceptions:
10:40:45 126  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 127  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 128  */
10:40:45 129  	in_subscription_id IN NUMBER,
10:40:45 130  	in_invoice_id	   IN NUMBER,
10:40:45 131  	in_refund_amount   IN NUMBER,
10:40:45 132  	in_note 	   IN VARCHAR2,
10:40:45 133  	in_created_by	   IN VARCHAR2,
10:40:45 134  	out_charge_id	   OUT NUMBER
10:40:45 135  );
10:40:45 136  
10:40:45 137  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
10:40:45 138  /*
10:40:45 139  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 140  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 141  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 142  */
10:40:45 143  	in_subscription_id	IN NUMBER,
10:40:45 144  	in_effective_start_date IN DATE,
10:40:45 145  	in_effective_end_date	IN DATE,
10:40:45 146  	in_note 		IN VARCHAR2,
10:40:45 147  	in_updated_by		IN VARCHAR2
10:40:45 148  );
10:40:45 149  
10:40:45 150  FUNCTION CALC_SUBSCRIPTION_END_DATE (
10:40:45 151  /*
10:40:45 152  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 153  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 154  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 155  Returns:
10:40:45 156  NULL if it is impossible to calculate end date (for example,
10:40:45 157  	offer chain includes offer with infinity recurrences number)
10:40:45 158  DATE else
10:40:45 159  */
10:40:45 160  	in_subscription_id IN NUMBER
10:40:45 161  ) RETURN DATE;
10:40:45 162  
10:40:45 163  PROCEDURE HAS_FUTURE_LICENSE (
10:40:45 164  /*
10:40:45 165  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 166  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 167  */
10:40:45 168  	in_license_id IN  NUMBER,
10:40:45 169  	out_result    OUT NUMBER
10:40:45 170  );
10:40:45 171  
10:40:45 172  PROCEDURE CLOSE_SUBSCRIPTION (
10:40:45 173  	in_subscription_id IN NUMBER,
10:40:45 174  	in_updated_by	   IN VARCHAR2
10:40:45 175  );
10:40:45 176  
10:40:45 177  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
10:40:45 178  	in_subscription_id IN NUMBER,
10:40:45 179  	out_group_id	   OUT NUMBER
10:40:45 180  );
10:40:45 181  
10:40:45 182  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
10:40:45 183  /*
10:40:45 184  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 185  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 186  */
10:40:45 187  	in_subscription_id IN NUMBER,
10:40:45 188  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 189  );
10:40:45 190  
10:40:45 191  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
10:40:45 192  /*
10:40:45 193  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 194  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 195  */
10:40:45 196  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
10:40:45 197  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:40:45 198  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:45 199  );
10:40:45 200  
10:40:45 201  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:40:45 202  /*
10:40:45 203  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 204  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 205  */
10:40:45 206  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:40:45 207  	in_subscription_id IN NUMBER,
10:40:45 208  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 209  );
10:40:45 210  
10:40:45 211  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:40:45 212  /*
10:40:45 213  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 214  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 215  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 216  */
10:40:45 217  	in_invoice_id	     IN NUMBER,
10:40:45 218  	in_updated_by	     IN VARCHAR2,
10:40:45 219  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:45 220  );
10:40:45 221  
10:40:45 222  PROCEDURE FINALIZE_CANCELATION (
10:40:45 223  /*
10:40:45 224  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 225  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 226  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 227  */
10:40:45 228  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:40:45 229  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:40:45 230  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:45 231  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:45 232  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:45 233  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:45 234  	in_subscription_id    IN NUMBER,
10:40:45 235  	in_cancelation_reason IN VARCHAR2,
10:40:45 236  	in_cancelation_date   IN DATE,
10:40:45 237  	in_note 	      IN VARCHAR2,
10:40:45 238  	in_agent_id	      IN NUMBER,
10:40:45 239  	in_updated_by	      IN VARCHAR2
10:40:45 240  );
10:40:45 241  
10:40:45 242  PROCEDURE FINALIZE_FALSE_START (
10:40:45 243  /*
10:40:45 244  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 245  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 246  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 247  */
10:40:45 248  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:40:45 249  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:45 250  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:45 251  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:45 252  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:45 253  	in_subscription_id    IN NUMBER,
10:40:45 254  	in_cancelation_date   IN DATE,
10:40:45 255  	in_note 	      IN VARCHAR2,
10:40:45 256  	in_agent_id	      IN NUMBER,
10:40:45 257  	in_updated_by	      IN VARCHAR2
10:40:45 258  );
10:40:45 259  
10:40:45 260  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
10:40:45 261  	in_subscription_id IN NUMBER
10:40:45 262  ) RETURN NUMBER;
10:40:45 263  
10:40:45 264  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:40:45 265  /*
10:40:45 266  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 267  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 268  */
10:40:45 269  	in_subscription_id IN NUMBER,
10:40:45 270  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 271  );
10:40:45 272  
10:40:45 273  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
10:40:45 274  /*
10:40:45 275  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 276  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 277  */
10:40:45 278  	in_subscription_id IN NUMBER,
10:40:45 279  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 280  );
10:40:45 281  
10:40:45 282  PROCEDURE GET_SUBSCR_LIC_OFFER (
10:40:45 283  /*
10:40:45 284  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 285  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 286  */
10:40:45 287  	in_subscription_id IN NUMBER,
10:40:45 288  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 289  );
10:40:45 290  
10:40:45 291  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
10:40:45 292  /*
10:40:45 293  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 294  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 295  */
10:40:45 296  	in_subscription_id IN NUMBER,
10:40:45 297  	out_result	   OUT NUMBER
10:40:45 298  );
10:40:45 299  
10:40:45 300  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
10:40:45 301  /*
10:40:45 302  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 303  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 304  */
10:40:45 305  	in_group_id	   IN NUMBER,
10:40:45 306  	in_offer_chain_id  IN NUMBER,
10:40:45 307  	out_result	   out number
10:40:45 308  );
10:40:45 309  
10:40:45 310  PROCEDURE GET_EXISTING_SUBSCR_IDS (
10:40:45 311  /*
10:40:45 312  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 313  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 314  */
10:40:45 315  	in_group_id	   IN NUMBER,
10:40:45 316  	in_offer_chain_id  IN NUMBER,
10:40:45 317  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 318  );
10:40:45 319  
10:40:45 320  PROCEDURE ADD_META_DATA (
10:40:45 321  /*
10:40:45 322  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 323  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 324  */
10:40:45 325  	in_subscription_id IN NUMBER,
10:40:45 326  	in_name 	   IN VARCHAR2,
10:40:45 327  	in_value	   IN VARCHAR2,
10:40:45 328  	in_created_by	   IN VARCHAR2
10:40:45 329  );
10:40:45 330  
10:40:45 331  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:40:45 332  /*
10:40:45 333  APP_EXCEPTION_CODES_V22.INVALID_PARAMETER
10:40:45 334  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 335  */
10:40:45 336  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:40:45 337  	out_result_set	     OUT SYS_REFCURSOR
10:40:45 338  );
10:40:45 339  
10:40:45 340  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
10:40:45 341  /*
10:40:45 342  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 343  */
10:40:45 344  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
10:40:45 345  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 346  );
10:40:45 347  
10:40:45 348  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
10:40:45 349   (
10:40:45 350  /*
10:40:45 351  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 352  */
10:40:45 353  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:45 354  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 355  );
10:40:45 356  
10:40:45 357  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
10:40:45 358  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:40:45 359  ) RETURN NUMBER;
10:40:45 360  
10:40:45 361  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
10:40:45 362  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:40:45 363  ) RETURN VARCHAR2;
10:40:45 364  
10:40:45 365  
10:40:45 366  
10:40:45 367  PROCEDURE GET_ACTIVE_MEU_SUBS (
10:40:45 368  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 369  );
10:40:45 370  
10:40:45 371  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
10:40:45 372  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:45 373  	out_offer_id	    OUT LICENSE.ID%TYPE
10:40:45 374  );
10:40:45 375  
10:40:45 376  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
10:40:45 377  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:45 378  	out_license_id	    OUT LICENSE.ID%TYPE
10:40:45 379  );
10:40:45 380  
10:40:45 381  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:40:45 382  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 383  );
10:40:45 384  
10:40:45 385  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:40:45 386  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 387  );
10:40:45 388  
10:40:45 389  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:40:45 390  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 391  );
10:40:45 392  
10:40:45 393  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:40:45 394  	in_max_days_until_close IN NUMBER,
10:40:45 395  	in_num_subs_to_fetch	IN NUMBER,
10:40:45 396  	out_result_set		OUT SYS_REFCURSOR
10:40:45 397  );
10:40:45 398  
10:40:45 399  
10:40:45 400  END PROCS_SUBSCRIPTION_V22;
10:40:45 401  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_SUBSCRIPTION(
10:40:45   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
10:40:45   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
10:40:45   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
10:40:45   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
10:40:45  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:40:45  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:40:45  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:40:45  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:40:45  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
10:40:45  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:40:45  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:40:45  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:40:45  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:40:45  19  );
10:40:45  20  
10:40:45  21  PROCEDURE UPDATE_SUBSCRIPTION(
10:40:45  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
10:40:45  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
10:40:45  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:40:45  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:40:45  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:40:45  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
10:40:45  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:40:45  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:40:45  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:40:45  34  );
10:40:45  35  
10:40:45  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
10:40:45  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
10:40:45  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:45  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
10:40:45  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:45  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
10:40:45  42  );
10:40:45  43  
10:40:45  44  END PROCS_SUBSCRIPTION_CRU_V22;
10:40:45  45  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_SYSTEM
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE INCREMENT_VERSION;
10:40:45   4  
10:40:45   5  PROCEDURE CHECK_VERSION(
10:40:45   6  	  in_vers    IN NUMBER,
10:40:45   7  	  out_result OUT NUMBER
10:40:45   8  );
10:40:45   9  
10:40:45  10  END PROCS_SYSTEM_V22;
10:40:45  11  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_TAXES
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE ADD_TAX (
10:40:45   4  	in_tax_type_id		 IN NUMBER,
10:40:45   5  	in_calculated_amount	 IN NUMBER,
10:40:45   6  	in_created_by		 IN VARCHAR2,
10:40:45   7  	in_line_item_id 	 IN NUMBER,
10:40:45   8  	in_effective_rate	 IN VARCHAR2,
10:40:45   9  	in_taxable_amount	 IN NUMBER,
10:40:45  10  	in_tax_rule_id		 IN NUMBER,
10:40:45  11  	in_jurisdiction_level_id IN NUMBER,
10:40:45  12  	in_jurisdiction_name	 IN VARCHAR2,
10:40:45  13  	in_jurisdiction_id	 IN VARCHAR2,
10:40:45  14  	in_ext_tax_type 	 IN VARCHAR2,
10:40:45  15  	in_ext_result		 IN VARCHAR2,
10:40:45  16  	in_imposition_type	 IN VARCHAR2,
10:40:45  17  	in_imposition		 IN VARCHAR2
10:40:45  18  );
10:40:45  19  
10:40:45  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
10:40:45  21  	in_country_code IN CHAR,
10:40:45  22  	in_check_date IN DATE,
10:40:45  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V22.FALSE
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE GET_TAX_CATEGORY (
10:40:45  27  	in_tax_category_id IN NUMBER,
10:40:45  28  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  29  );
10:40:45  30  
10:40:45  31  END PROCS_TAXES_V22;
10:40:45  32  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.00
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_TAXES_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_TAX (
10:40:45   4  	inout_tax_id		 IN OUT NUMBER,
10:40:45   5  	in_tax_type_id		 IN NUMBER,
10:40:45   6  	in_calculated_amount	 IN NUMBER,
10:40:45   7  	in_created_by		 IN VARCHAR2,
10:40:45   8  	in_line_item_id 	 IN NUMBER,
10:40:45   9  	in_effective_rate	 IN VARCHAR2,
10:40:45  10  	in_taxable_amount	 IN NUMBER,
10:40:45  11  	in_tax_rule_id		 IN NUMBER,
10:40:45  12  	in_jurisdiction_level_id IN NUMBER,
10:40:45  13  	in_jurisdiction_name	 IN VARCHAR2,
10:40:45  14  	in_jurisdiction_id	 IN VARCHAR2,
10:40:45  15  	in_ext_tax_type 	 IN VARCHAR2,
10:40:45  16  	in_ext_result		 IN VARCHAR2,
10:40:45  17  	in_imposition_type	 IN VARCHAR2,
10:40:45  18  	in_imposition		 IN VARCHAR2
10:40:45  19  );
10:40:45  20  
10:40:45  21  END PROCS_TAXES_CRU_V22;
10:40:45  22  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_TEST
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE TEST_CLEAR_ALL;
10:40:45   4  PROCEDURE TEST_CLEAR_PRODUCTS;
10:40:45   5  
10:40:45   6  /********************************************/
10:40:45   7  
10:40:45   8  PROCEDURE TEST_GET_ACCOUNT (
10:40:45   9  	in_group_id	IN NUMBER,
10:40:45  10  	out_result_set	OUT SYS_REFCURSOR
10:40:45  11  );
10:40:45  12  
10:40:45  13  /********************************************/
10:40:45  14  
10:40:45  15  PROCEDURE TEST_GET_SUBSCRIPTION (
10:40:45  16  	in_subscription_id IN NUMBER,
10:40:45  17  	out_result_set	   OUT SYS_REFCURSOR
10:40:45  18  );
10:40:45  19  
10:40:45  20  /*********************************************/
10:40:45  21  
10:40:45  22  PROCEDURE TEST_DELETE_INVOICE (
10:40:45  23  	in_invoice_id IN NUMBER
10:40:45  24  );
10:40:45  25  
10:40:45  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
10:40:45  27  	in_group_id IN NUMBER
10:40:45  28  );
10:40:45  29  
10:40:45  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
10:40:45  31  	in_start_group_id IN NUMBER,
10:40:45  32  	in_end_group_id   IN NUMBER
10:40:45  33  );
10:40:45  34  
10:40:45  35  /**********************************************/
10:40:45  36  
10:40:45  37  FUNCTION TEST_IS_INVOICE_EXISTS(
10:40:45  38  /*
10:40:45  39  1 - exists
10:40:45  40  0 - not exists
10:40:45  41  */
10:40:45  42  	in_invoice_id IN NUMBER
10:40:45  43  ) RETURN NUMBER;
10:40:45  44  
10:40:45  45  PROCEDURE TEST_GET_INVOICE_INFO (
10:40:45  46  	in_invoice_id  IN NUMBER,
10:40:45  47  	out_result_set OUT SYS_REFCURSOR
10:40:45  48  );
10:40:45  49  
10:40:45  50  /******************************************************************************/
10:40:45  51  
10:40:45  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
10:40:45  53  	in_offer_chain_id in number
10:40:45  54  );
10:40:45  55  
10:40:45  56  END PROCS_TEST_V22;
10:40:45  57  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_TRANSACTION
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_TRANSACTION (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	in_transaction_id	  IN NUMBER,
10:40:45  10  	in_status_id		  IN NUMBER,
10:40:45  11  	in_amount		  IN NUMBER,
10:40:45  12  	in_created_by		  IN VARCHAR2,
10:40:45  13  	in_order_id		  IN VARCHAR2,
10:40:45  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE,
10:40:45  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:40:45  16  	out_transaction_id	  OUT NUMBER
10:40:45  17  );
10:40:45  18  
10:40:45  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:40:45  20  /*
10:40:45  21  Throws exceptions:
10:40:45  22  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  23  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  24  */
10:40:45  25  	in_transaction_id	   IN NUMBER,
10:40:45  26  	in_trans_attempt_status    IN NUMBER,
10:40:45  27  	in_external_status_code    IN VARCHAR2,
10:40:45  28  	in_external_status_message IN VARCHAR2,
10:40:45  29  	in_created_by		   IN VARCHAR2,
10:40:45  30  	in_ext_transaction_id	   IN VARCHAR2,
10:40:45  31  	out_transaction_attempt_id OUT NUMBER
10:40:45  32  );
10:40:45  33  
10:40:45  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:40:45  35  /*
10:40:45  36  Throws exceptions:
10:40:45  37  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  38  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  39  */
10:40:45  40  	in_transaction_id	 IN NUMBER,
10:40:45  41  	in_updated_by		 IN VARCHAR2,
10:40:45  42  	in_transaction_status_id IN NUMBER
10:40:45  43  );
10:40:45  44  
10:40:45  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
10:40:45  46  /*
10:40:45  47  Throws exceptions:
10:40:45  48  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  49  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  50  */
10:40:45  51  	in_transaction_id	 IN NUMBER,
10:40:45  52  	in_updated_by		 IN VARCHAR2,
10:40:45  53  	in_is_settled		 IN NUMBER
10:40:45  54  );
10:40:45  55  
10:40:45  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:40:45  57  /*
10:40:45  58  Throws exceptions:
10:40:45  59  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  60  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  61  */
10:40:45  62  	in_transaction_attempt_id IN NUMBER,
10:40:45  63  	in_updated_by		  IN VARCHAR2
10:40:45  64  );
10:40:45  65  
10:40:45  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:40:45  67  /*
10:40:45  68  Throws exceptions:
10:40:45  69  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  70  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  71  */
10:40:45  72  	in_transaction_attempt_id     IN NUMBER,
10:40:45  73  	in_transaction_attempt_status IN NUMBER
10:40:45  74  );
10:40:45  75  
10:40:45  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:40:45  77  /*
10:40:45  78  Throws exceptions:
10:40:45  79  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  80  */
10:40:45  81  	in_transaction_id	      IN NUMBER,
10:40:45  82  	in_transaction_attempt_status IN NUMBER,
10:40:45  83  	out_result_set		      OUT SYS_REFCURSOR
10:40:45  84  );
10:40:45  85  
10:40:45  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:40:45  87  /*
10:40:45  88  Throws exceptions:
10:40:45  89  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  90  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  91  */
10:40:45  92  	in_transaction_attempt_id IN NUMBER,
10:40:45  93  	in_ext_status_code	  IN VARCHAR2,
10:40:45  94  	in_ext_status_message	  IN VARCHAR2,
10:40:45  95  	in_ext_transaction_id	  IN VARCHAR2
10:40:45  96  );
10:40:45  97  
10:40:45  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:40:45  99  /*
10:40:45 100  Throws exceptions:
10:40:45 101  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 102  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 103  */
10:40:45 104  	in_transaction_id IN  NUMBER,
10:40:45 105  	out_attempts_num  OUT NUMBER
10:40:45 106  );
10:40:45 107  
10:40:45 108  PROCEDURE GET_TRANSACTION_AMOUNT (
10:40:45 109  /*
10:40:45 110  Throws exceptions:
10:40:45 111  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 112  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 113  */
10:40:45 114  	in_transaction_id      IN  NUMBER,
10:40:45 115  	out_transaction_amount OUT NUMBER
10:40:45 116  );
10:40:45 117  
10:40:45 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
10:40:45 119  /*
10:40:45 120  Throws exceptions:
10:40:45 121  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 122  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 123  */
10:40:45 124  	in_charge_id   IN  NUMBER,
10:40:45 125  	out_result_set OUT SYS_REFCURSOR
10:40:45 126  );
10:40:45 127  
10:40:45 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
10:40:45 129  /*
10:40:45 130  Throws exceptions:
10:40:45 131  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 132  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 133  */
10:40:45 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:40:45 135  	out_result_set OUT SYS_REFCURSOR
10:40:45 136  );
10:40:45 137  
10:40:45 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
10:40:45 139  /*
10:40:45 140  Throws exceptions:
10:40:45 141  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 142  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 143  */
10:40:45 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:40:45 145  	out_result_set OUT SYS_REFCURSOR
10:40:45 146  );
10:40:45 147  
10:40:45 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
10:40:45 149  /*
10:40:45 150  Throws exceptions:
10:40:45 151  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 152  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 153  */
10:40:45 154  	in_transaction_id IN  NUMBER,
10:40:45 155  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 156  );
10:40:45 157  
10:40:45 158  PROCEDURE RESERVE_TRANSACTION_ID (
10:40:45 159  /*
10:40:45 160  Throws exceptions:
10:40:45 161  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 162  */
10:40:45 163  	out_transaction_id OUT NUMBER
10:40:45 164  );
10:40:45 165  
10:40:45 166  PROCEDURE GET_TRANSACTION_BY_ID (
10:40:45 167  /*
10:40:45 168  Throws exceptions:
10:40:45 169  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 170  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 171  */
10:40:45 172  	in_transaction_id IN NUMBER,
10:40:45 173  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 174  );
10:40:45 175  
10:40:45 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:45 177  /*
10:40:45 178  Throws exceptions:
10:40:45 179  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 180  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:45 181  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 182  */
10:40:45 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:45 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:45 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:45 186  );
10:40:45 187  
10:40:45 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:40:45 189  /*
10:40:45 190  Throws exceptions:
10:40:45 191  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 192  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 193  */
10:40:45 194  	in_invoice_id	IN  NUMBER,
10:40:45 195  	out_result_set OUT SYS_REFCURSOR
10:40:45 196  );
10:40:45 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:40:45 198  /*
10:40:45 199  Throws exceptions:
10:40:45 200  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 201  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 202  */
10:40:45 203  	in_transaction_id IN  NUMBER,
10:40:45 204  	out_is_successfull  OUT NUMBER
10:40:45 205  );
10:40:45 206  
10:40:45 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
10:40:45 208  	in_transaction_id IN NUMBER
10:40:45 209  ) RETURN NUMBER;
10:40:45 210  
10:40:45 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
10:40:45 212  	in_transaction_id IN NUMBER
10:40:45 213  ) RETURN NUMBER;
10:40:45 214  
10:40:45 215  -- norlov: #38796
10:40:45 216  PROCEDURE GET_TRANSACTIONS (
10:40:45 217  /*
10:40:45 218  Throws exceptions:
10:40:45 219  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 220  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 221  */
10:40:45 222  	in_group_id	      IN  NUMBER,
10:40:45 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
10:40:45 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
10:40:45 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:40:45 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:40:45 227  	in_transaction_status IN NUMBER DEFAULT NULL,
10:40:45 228  	out_result_set	      OUT SYS_REFCURSOR
10:40:45 229  );
10:40:45 230  
10:40:45 231  FUNCTION IS_TRANSACTION_COLLECTED (
10:40:45 232  /*
10:40:45 233  Throws:
10:40:45 234  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 235  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 236  Returns:
10:40:45 237  GLOBAL_CONST.TRUE if transaction collected,
10:40:45 238  GLOBAL_CONST.FALSE else
10:40:45 239  */
10:40:45 240  	in_transaction_id IN NUMBER
10:40:45 241  ) RETURN NUMBER;
10:40:45 242  
10:40:45 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:40:45 244  /*
10:40:45 245  Throws exceptions:
10:40:45 246  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 247  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 248  */
10:40:45 249  	in_charge_id   in  number,
10:40:45 250  	out_attempt_count out number
10:40:45 251  );
10:40:45 252  
10:40:45 253  END PROCS_TRANSACTION_V22;
10:40:45 254  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.03
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PROCS_TRANSACTION_CRU
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_TRANSACTION (
10:40:45   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
10:40:45   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
10:40:45   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
10:40:45   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:40:45   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
10:40:45  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V22.FALSE,
10:40:45  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
10:40:45  12  );
10:40:45  13  
10:40:45  14  PROCEDURE UPDATE_TRANSACTION (
10:40:45  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
10:40:45  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
10:40:45  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:40:45  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
10:40:45  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE READ_TRANSACTION (
10:40:45  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:45  25  	out_result_set	  OUT SYS_REFCURSOR
10:40:45  26  );
10:40:45  27  
10:40:45  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
10:40:45  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
10:40:45  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
10:40:45  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:40:45  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:45  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
10:40:45  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:45  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:40:45  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:40:45  37  );
10:40:45  38  
10:40:45  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:45  40  /*
10:40:45  41  Throws exceptions:
10:40:45  42  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  43  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:45  44  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  45  */
10:40:45  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:45  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:45  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:45  49  );
10:40:45  50  
10:40:45  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
10:40:45  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
10:40:45  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:40:45  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:45  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:45  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:40:45  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
10:40:45  58  );
10:40:45  59  
10:40:45  60  END PROCS_TRANSACTION_CRU_V22;
10:40:45  61  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PUBLIC_PROCS_BILLING
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	  in_offer_chain_id IN	 NUMBER,
10:40:45  10  	  out_result_set    OUT  SYS_REFCURSOR
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:40:45  14  /*
10:40:45  15  Throws exceptions:
10:40:45  16  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  17  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  18  */
10:40:45  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE GET_PENDING_INVOICES (
10:40:45  24  /*
10:40:45  25  Throws exceptions:
10:40:45  26  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  27  */
10:40:45  28  	out_result_set	     OUT SYS_REFCURSOR,
10:40:45  29  	in_row_number	     IN NUMBER DEFAULT NULL
10:40:45  30  );
10:40:45  31  
10:40:45  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:40:45  33  /*
10:40:45  34  Throws exceptions:
10:40:45  35  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  36  */
10:40:45  37  	out_result_set	    OUT SYS_REFCURSOR,
10:40:45  38  	in_row_number	    IN NUMBER DEFAULT NULL
10:40:45  39  );
10:40:45  40  
10:40:45  41  PROCEDURE GET_UNPROCESSED_CHARGES (
10:40:45  42  /*
10:40:45  43  Throws exceptions:
10:40:45  44  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  45  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  46  */
10:40:45  47  	in_invoice_id  IN NUMBER,
10:40:45  48  	out_result_set OUT SYS_REFCURSOR
10:40:45  49  );
10:40:45  50  
10:40:45  51  PROCEDURE GET_PROCESSED_CHARGES (
10:40:45  52  /*
10:40:45  53  Throws exceptions:
10:40:45  54  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  55  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  56  */
10:40:45  57  	in_invoice_id  IN NUMBER,
10:40:45  58  	out_result_set OUT SYS_REFCURSOR
10:40:45  59  );
10:40:45  60  
10:40:45  61  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:40:45  62  /*
10:40:45  63  Throws exceptions:
10:40:45  64  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  65  */
10:40:45  66  	in_transaction_id	      IN NUMBER,
10:40:45  67  	in_transaction_attempt_status IN NUMBER,
10:40:45  68  	out_result_set		      OUT SYS_REFCURSOR
10:40:45  69  );
10:40:45  70  
10:40:45  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:40:45  72  /*
10:40:45  73  Throws exceptions:
10:40:45  74  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  75  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  76  */
10:40:45  77  	in_transaction_attempt_id     IN NUMBER,
10:40:45  78  	in_transaction_attempt_status IN NUMBER
10:40:45  79  );
10:40:45  80  
10:40:45  81  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:40:45  82  /*
10:40:45  83  Throws exceptions:
10:40:45  84  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  85  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  86  */
10:40:45  87  	in_transaction_attempt_id IN NUMBER,
10:40:45  88  	in_updated_by		  IN VARCHAR2
10:40:45  89  );
10:40:45  90  
10:40:45  91  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:40:45  92  /*
10:40:45  93  Throws exceptions:
10:40:45  94  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  95  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  96  */
10:40:45  97  	in_transaction_id	   IN NUMBER,
10:40:45  98  	in_trans_attempt_status    IN NUMBER,
10:40:45  99  	in_external_status_code    IN VARCHAR2,
10:40:45 100  	in_external_status_message IN VARCHAR2,
10:40:45 101  	in_created_by		   IN VARCHAR2,
10:40:45 102  	in_ext_transaction_id	   IN VARCHAR2,
10:40:45 103  	out_transaction_attempt_id OUT NUMBER
10:40:45 104  );
10:40:45 105  
10:40:45 106  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:40:45 107  /*
10:40:45 108  Throws exceptions:
10:40:45 109  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 110  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 111  */
10:40:45 112  	in_transaction_attempt_id IN NUMBER,
10:40:45 113  	in_ext_status_code	  IN VARCHAR2,
10:40:45 114  	in_ext_status_message	  IN VARCHAR2,
10:40:45 115  	in_ext_transaction_id	  IN VARCHAR2
10:40:45 116  );
10:40:45 117  
10:40:45 118  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:40:45 119  /*
10:40:45 120  Throws exceptions:
10:40:45 121  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 122  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 123  */
10:40:45 124  	in_transaction_id	 IN NUMBER,
10:40:45 125  	in_updated_by		 IN VARCHAR2,
10:40:45 126  	in_transaction_status_id IN NUMBER
10:40:45 127  );
10:40:45 128  
10:40:45 129  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:40:45 130  /*
10:40:45 131  Throws exceptions:
10:40:45 132  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 133  */
10:40:45 134  	in_transaction_id IN  NUMBER,
10:40:45 135  	out_attempts_num  OUT NUMBER
10:40:45 136  );
10:40:45 137  
10:40:45 138  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:40:45 139  /*
10:40:45 140  Throws exceptions:
10:40:45 141  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 142  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 143  */
10:40:45 144  	in_transaction_id IN  NUMBER,
10:40:45 145  	out_is_successfull  OUT NUMBER
10:40:45 146  );
10:40:45 147  
10:40:45 148  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:45 149  /*
10:40:45 150  Throws exceptions:
10:40:45 151  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 152  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 153  */
10:40:45 154  	in_invoice_id		       IN NUMBER,
10:40:45 155  	in_invoice_status_id	       IN NUMBER,
10:40:45 156  	in_updated_by		       IN VARCHAR2
10:40:45 157  );
10:40:45 158  
10:40:45 159  PROCEDURE SUSPEND_SUBSCRIPTION(
10:40:45 160  /*
10:40:45 161  Throws exceptions:
10:40:45 162  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 163  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 164  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 165  */
10:40:45 166  	  in_subs_id	IN NUMBER ,
10:40:45 167  	  in_updated_by IN VARCHAR2
10:40:45 168  );
10:40:45 169  
10:40:45 170  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:45 171  /*
10:40:45 172  Throws exceptions:
10:40:45 173  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 174  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 175  */
10:40:45 176  	in_credit_card_id IN  NUMBER,
10:40:45 177  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 178  );
10:40:45 179  
10:40:45 180  PROCEDURE GET_TRANSACTION_AMOUNT (
10:40:45 181  /*
10:40:45 182  Throws exceptions:
10:40:45 183  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 184  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 185  */
10:40:45 186  	in_transaction_id      IN  NUMBER,
10:40:45 187  	out_transaction_amount OUT NUMBER
10:40:45 188  );
10:40:45 189  
10:40:45 190  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:40:45 191  /*
10:40:45 192  Throws exceptions:
10:40:45 193  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 194  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 195  */
10:40:45 196  	in_invoice_id  IN  NUMBER,
10:40:45 197  	out_account_id OUT NUMBER
10:40:45 198  );
10:40:45 199  
10:40:45 200  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:40:45 201  /*
10:40:45 202  Throws exceptions:
10:40:45 203  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45 204  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 205  */
10:40:45 206  	in_gift_certificate_id IN NUMBER,
10:40:45 207  	out_result_set	       OUT SYS_REFCURSOR
10:40:45 208  );
10:40:45 209  
10:40:45 210  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:40:45 211  /*
10:40:45 212  Throws exceptions:
10:40:45 213  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 214  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 215  */
10:40:45 216  	in_charge_id	    IN NUMBER,
10:40:45 217  	out_subscription_id OUT NUMBER
10:40:45 218  );
10:40:45 219  
10:40:45 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:40:45 221  /*
10:40:45 222  Throws exceptions:
10:40:45 223  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 224  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 225  */
10:40:45 226  	in_gift_certificate_id IN NUMBER,
10:40:45 227  	in_charge_id	       IN NUMBER,
10:40:45 228  	out_result	       OUT NUMBER
10:40:45 229  );
10:40:45 230  
10:40:45 231  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:45 232  /*
10:40:45 233  Throws exceptions:
10:40:45 234  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 235  */
10:40:45 236  	  in_subscription_id IN  NUMBER,
10:40:45 237  	  out_result_set      OUT SYS_REFCURSOR
10:40:45 238  );
10:40:45 239  
10:40:45 240  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:45 241  /*
10:40:45 242  Throws exceptions:
10:40:45 243  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 244  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 245  */
10:40:45 246  	in_invoice_id IN  NUMBER,
10:40:45 247  	out_amount    OUT NUMBER
10:40:45 248  );
10:40:45 249  
10:40:45 250  PROCEDURE GET_TRANSACTION_BY_ID (
10:40:45 251  /*
10:40:45 252  Throws exceptions:
10:40:45 253  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 254  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 255  */
10:40:45 256  	in_transaction_id IN NUMBER,
10:40:45 257  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 258  );
10:40:45 259  
10:40:45 260  PROCEDURE UPDATE_CHARGE_STATUS (
10:40:45 261  /*
10:40:45 262  Throws exceptions:
10:40:45 263  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 264  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 265  */
10:40:45 266  	in_charge_id	    IN CHARGE.ID%TYPE,
10:40:45 267  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:45 268  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:40:45 269  );
10:40:45 270  
10:40:45 271  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:45 272  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45 273  	out_result_set OUT SYS_REFCURSOR
10:40:45 274  );
10:40:45 275  
10:40:45 276  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:45 277  /*
10:40:45 278  Throws exceptions:
10:40:45 279  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 280  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:45 281  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 282  */
10:40:45 283  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:45 284  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:45 285  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:45 286  );
10:40:45 287  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:40:45 288  /*
10:40:45 289  Throws exceptions:
10:40:45 290  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 291  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 292  */
10:40:45 293  	in_invoice_id	IN  NUMBER,
10:40:45 294  	out_result_set OUT SYS_REFCURSOR
10:40:45 295  );
10:40:45 296  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:40:45 297  /*
10:40:45 298  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 299  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 300  */
10:40:45 301  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:40:45 302  	in_subscription_id IN NUMBER,
10:40:45 303  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 304  );
10:40:45 305  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:40:45 306  /*
10:40:45 307  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 308  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 309  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 310  */
10:40:45 311  --  in_invoice_id        IN INVOICE.ID%TYPE,
10:40:45 312  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
10:40:45 313  -- norlov: in_refundable	      IN refund enabled
10:40:45 314  	in_invoice_id	     IN NUMBER,
10:40:45 315  	in_updated_by	     IN VARCHAR2,
10:40:45 316  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:45 317  --  in_cancellation_date IN DATE DEFAULT current_timestamp
10:40:45 318  );
10:40:45 319  
10:40:45 320  PROCEDURE FINALIZE_CANCELATION (
10:40:45 321  /*
10:40:45 322  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 323  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 324  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 325  */
10:40:45 326  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:40:45 327  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:40:45 328  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:45 329  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:45 330  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:45 331  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:45 332  	in_subscription_id    IN NUMBER,
10:40:45 333  	in_cancelation_reason IN VARCHAR2,
10:40:45 334  	in_cancelation_date   IN DATE,
10:40:45 335  	in_note 	      IN VARCHAR2,
10:40:45 336  	in_agent_id	      IN NUMBER,
10:40:45 337  	in_updated_by	      IN VARCHAR2
10:40:45 338  );
10:40:45 339  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:40:45 340  /*
10:40:45 341  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 342  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 343  */
10:40:45 344  	in_subscription_id IN NUMBER,
10:40:45 345  	out_result_set	   OUT SYS_REFCURSOR
10:40:45 346  );
10:40:45 347  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:45 348  /*
10:40:45 349  Throws exceptions (codes):
10:40:45 350  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 351  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 352  */
10:40:45 353  	in_offer_chain_id IN NUMBER,
10:40:45 354  	in_meta_data_name IN VARCHAR2,
10:40:45 355  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 356  );
10:40:45 357  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:45 358  /*
10:40:45 359  Throws exceptions (codes):
10:40:45 360  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 361  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 362  */
10:40:45 363  	in_product_offering_id IN NUMBER,
10:40:45 364  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
10:40:45 365  	out_result_set	       OUT SYS_REFCURSOR
10:40:45 366  );
10:40:45 367  PROCEDURE READ_ACCOUNT (
10:40:45 368  	in_account_id  IN ACCOUNT.ID%TYPE,
10:40:45 369  	out_result_set OUT SYS_REFCURSOR
10:40:45 370  );
10:40:45 371  
10:40:45 372  PROCEDURE GET_COLLECTED_CHARGES (
10:40:45 373  /*
10:40:45 374  Throws exceptions:
10:40:45 375  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 376  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 377  */
10:40:45 378  	in_invoice_id  IN NUMBER,
10:40:45 379  	out_result_set OUT SYS_REFCURSOR
10:40:45 380  );
10:40:45 381  
10:40:45 382  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:40:45 383  /*
10:40:45 384  Throws exceptions:
10:40:45 385  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45 386  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 387  */
10:40:45 388  	in_invoice_id IN NUMBER,
10:40:45 389  	out_group_ids OUT SYS_REFCURSOR
10:40:45 390  );
10:40:45 391  
10:40:45 392  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:45 393  /*
10:40:45 394  Throws exceptions:
10:40:45 395  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45 396  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 397  */
10:40:45 398  	in_group_id IN NUMBER,
10:40:45 399  	out_account_id	OUT NUMBER
10:40:45 400  );
10:40:45 401  
10:40:45 402  PROCEDURE LOCK_ACCOUNT (
10:40:45 403  	in_group_id    IN NUMBER,
10:40:45 404  	in_lock_key    IN VARCHAR2,
10:40:45 405  	in_seconds_num IN NUMBER,
10:40:45 406  	in_created_by  IN VARCHAR2,
10:40:45 407  	in_reason      IN VARCHAR2
10:40:45 408  );
10:40:45 409  
10:40:45 410  PROCEDURE RELEASE_LOCK (
10:40:45 411  	in_group_id IN NUMBER,
10:40:45 412  	in_lock_key IN VARCHAR2
10:40:45 413  );
10:40:45 414  
10:40:45 415  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:40:45 416  	in_invoice_id		    IN NUMBER,
10:40:45 417  	out_order_id		    OUT VARCHAR2,
10:40:45 418  	out_external_transaction_id OUT VARCHAR2
10:40:45 419  );
10:40:45 420  
10:40:45 421  PROCEDURE GET_PAYPAL_BY_ID (
10:40:45 422  	in_paypal_id   IN  NUMBER,
10:40:45 423  	out_result_set OUT SYS_REFCURSOR
10:40:45 424  );
10:40:45 425  
10:40:45 426  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:40:45 427  /*
10:40:45 428  Throws exceptions:
10:40:45 429  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 430  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 431  */
10:40:45 432  	in_charge_id   in  number,
10:40:45 433  	out_attempt_count out number
10:40:45 434  );
10:40:45 435  
10:40:45 436  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:45 437  	in_offer_chain_id	 IN NUMBER,
10:40:45 438  	in_action_name		 IN VARCHAR2,
10:40:45 439  	out_notification_type_id out number
10:40:45 440  );
10:40:45 441  
10:40:45 442  PROCEDURE SHOULD_MOVE_TO_GRACE(
10:40:45 443  	in_invoice_id  IN INVOICE.ID%TYPE,
10:40:45 444  	out_result     OUT NUMBER
10:40:45 445  );
10:40:45 446  
10:40:45 447  PROCEDURE MOVE_TO_GRACE(
10:40:45 448  	in_invoice_id		      IN INVOICE.ID%TYPE,
10:40:45 449  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
10:40:45 450  	in_grace_period_length_hours  IN NUMBER
10:40:45 451  );
10:40:45 452  
10:40:45 453  PROCEDURE MOVE_OUT_OF_GRACE(
10:40:45 454  	in_invoice_id	IN INVOICE.ID%TYPE,
10:40:45 455  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
10:40:45 456  );
10:40:45 457  
10:40:45 458  END PUBLIC_PROCS_BILLING_V22;
10:40:45 459  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:40:45   4  /*
10:40:45   5  Throws exceptions:
10:40:45   6  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45   7  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45   8  */
10:40:45   9  	in_notification_type_name IN VARCHAR2,
10:40:45  10  	out_notification_type_id  OUT NUMBER
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE ADD_NOTIFICATION (
10:40:45  14  /*
10:40:45  15  Throws exceptions:
10:40:45  16  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  17  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  18  */
10:40:45  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:40:45  20  	in_recipient_group_id	 IN NUMBER,
10:40:45  21  	in_notification_type_id  IN NUMBER,
10:40:45  22  	in_date_to_notify	 IN DATE,
10:40:45  23  	in_email_template_params IN CLOB
10:40:45  24  );
10:40:45  25  
10:40:45  26  END PUBLIC_PROCS_CLIENT_V22;
10:40:45  27  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.01
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE LOCK_ACCOUNT (
10:40:45   4  	in_group_id    IN NUMBER,
10:40:45   5  	in_lock_key    IN VARCHAR2,
10:40:45   6  	in_seconds_num IN NUMBER,
10:40:45   7  	in_created_by  IN VARCHAR2,
10:40:45   8  	in_reason      IN VARCHAR2
10:40:45   9  );
10:40:45  10  
10:40:45  11  PROCEDURE RELEASE_LOCK (
10:40:45  12  	in_group_id IN NUMBER,
10:40:45  13  	in_lock_key IN VARCHAR2
10:40:45  14  );
10:40:45  15  
10:40:45  16  END PUBLIC_PROCS_NOTIFICATION_V22;
10:40:45  17  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.00
10:40:45 SQL> 
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
10:40:45 SQL> --------------------------------------------------------------------------------
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:40:45   4  	out_result_set OUT SYS_REFCURSOR
10:40:45   5  );
10:40:45   6  
10:40:45   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:40:45   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:45   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:40:45  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:45  11  );
10:40:45  12  
10:40:45  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:45  14  /*
10:40:45  15  Throws exceptions:
10:40:45  16  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  17  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  18  */
10:40:45  19  	  in_offer_chain_id IN	 NUMBER,
10:40:45  20  	  out_result_set    OUT  SYS_REFCURSOR
10:40:45  21  );
10:40:45  22  
10:40:45  23  PROCEDURE GET_UNREDEEMED_GCS (
10:40:45  24  	out_result_set		OUT SYS_REFCURSOR,
10:40:45  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:45  26  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:45  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  28  );
10:40:45  29  
10:40:45  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:40:45  31  /*
10:40:45  32  APP_EXCEPTION_CODES_V22.INVALID_PARAMETER
10:40:45  33  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  34  */
10:40:45  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:40:45  36  	out_result_set	     OUT SYS_REFCURSOR
10:40:45  37  );
10:40:45  38  
10:40:45  39  PROCEDURE GET_ALL_OCH_META_DATA (
10:40:45  40  	in_offer_chain_id IN NUMBER,
10:40:45  41  	out_result_set	  OUT SYS_REFCURSOR
10:40:45  42  );
10:40:45  43  
10:40:45  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:45  45  /*
10:40:45  46  Throws exceptions (codes):
10:40:45  47  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  48  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  49  */
10:40:45  50  	in_offer_chain_id IN NUMBER,
10:40:45  51  	in_meta_data_name IN VARCHAR2,
10:40:45  52  	out_result_set	  OUT SYS_REFCURSOR
10:40:45  53  );
10:40:45  54  
10:40:45  55  PROCEDURE GET_ENDING_LICENSES (
10:40:45  56  /*
10:40:45  57  Throws exceptions:
10:40:45  58  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  59  */
10:40:45  60  	in_hours_number IN NUMBER,
10:40:45  61  	out_result_set OUT SYS_REFCURSOR
10:40:45  62  );
10:40:45  63  
10:40:45  64  PROCEDURE GET_ENDING_LICENSES_CC (
10:40:45  65  /*
10:40:45  66  Throws exceptions:
10:40:45  67  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  68  */
10:40:45  69  	in_hours_number IN NUMBER,
10:40:45  70  	out_result_set OUT SYS_REFCURSOR,
10:40:45  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:45  72  );
10:40:45  73  
10:40:45  74  /************************************************/
10:40:45  75  
10:40:45  76  PROCEDURE GET_RECURRING_OFFER (
10:40:45  77  /*
10:40:45  78  Throws exceptions:
10:40:45  79  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  80  */
10:40:45  81  	in_license_id  IN NUMBER,
10:40:45  82  	out_result_set OUT SYS_REFCURSOR
10:40:45  83  );
10:40:45  84  
10:40:45  85  /*************************************************/
10:40:45  86  
10:40:45  87  PROCEDURE GET_NEXT_OFFER (
10:40:45  88  /*
10:40:45  89  Throws exceptions:
10:40:45  90  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45  91  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45  92  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45  93  */
10:40:45  94  	in_license_id  IN NUMBER,
10:40:45  95  	out_result_set OUT SYS_REFCURSOR
10:40:45  96  );
10:40:45  97  
10:40:45  98  /**************************************************/
10:40:45  99  
10:40:45 100  PROCEDURE UPDATE_LICENSE_STATUS(
10:40:45 101  /*
10:40:45 102  Throws exceptions:
10:40:45 103  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 104  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 105  */
10:40:45 106  	  in_license_id     IN NUMBER,
10:40:45 107  	  in_license_status IN NUMBER,
10:40:45 108  	  in_updated_by     IN VARCHAR2
10:40:45 109  );
10:40:45 110  
10:40:45 111  /***************************************************/
10:40:45 112  
10:40:45 113  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:45 114  /*
10:40:45 115  Throws exceptions:
10:40:45 116  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 117  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 118  */
10:40:45 119  	in_invoice_id		       IN NUMBER,
10:40:45 120  	in_invoice_status_id	       IN NUMBER,
10:40:45 121  	in_updated_by		       IN VARCHAR2
10:40:45 122  );
10:40:45 123  
10:40:45 124  /***************************************************/
10:40:45 125  
10:40:45 126  PROCEDURE CREATE_LICENSE(
10:40:45 127  /*
10:40:45 128  Throws exceptions:
10:40:45 129  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 130  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 131  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:45 132  */
10:40:45 133  	in_status_id		    IN NUMBER,
10:40:45 134  	in_needs_entitlements	    IN NUMBER,
10:40:45 135  	in_start_date		    IN DATE,
10:40:45 136  	in_end_date		    IN DATE,
10:40:45 137  	in_offer_id		    IN NUMBER,
10:40:45 138  	in_subscription_id	    IN NUMBER,
10:40:45 139  	in_invoice_id		    IN NUMBER,
10:40:45 140  	in_created_by		    IN VARCHAR2,
10:40:45 141  	in_is_extension 	    IN NUMBER,
10:40:45 142  	in_current_offer_index	    IN NUMBER,
10:40:45 143  	in_current_offer_recurr_num IN NUMBER,
10:40:45 144  	out_license_id		    OUT NUMBER
10:40:45 145  );
10:40:45 146  
10:40:45 147  /**************************************************/
10:40:45 148  
10:40:45 149  PROCEDURE CREATE_INVOICE(
10:40:45 150  /*
10:40:45 151  Throws exceptions:
10:40:45 152  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 153  */
10:40:45 154  	  in_invoice_status IN NUMBER,
10:40:45 155  	  in_created_by     IN VARCHAR2,
10:40:45 156  	  in_tax_exempt_id  IN VARCHAR2,
10:40:45 157  	  out_invoice_id    OUT NUMBER
10:40:45 158  );
10:40:45 159  
10:40:45 160  /*****************************************************/
10:40:45 161  
10:40:45 162  PROCEDURE CREATE_CHARGE(
10:40:45 163  /*
10:40:45 164  Throws exceptions:
10:40:45 165  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 166  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 167  */
10:40:45 168  	in_invoice_id	      IN NUMBER,
10:40:45 169  	in_transaction_id     IN NUMBER,
10:40:45 170  	in_instrument_type_id IN NUMBER,
10:40:45 171  	in_instrument_id      IN NUMBER,
10:40:45 172  	in_charge_amount      IN NUMBER,
10:40:45 173  	in_created_by	      IN VARCHAR2,
10:40:45 174  	in_charge_status_id   IN NUMBER,
10:40:45 175  	out_charge_id	      OUT NUMBER
10:40:45 176  );
10:40:45 177  
10:40:45 178  /*****************************************************/
10:40:45 179  
10:40:45 180  PROCEDURE HAS_FUTURE_LICENSE (
10:40:45 181  /*
10:40:45 182  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 183  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 184  --
10:40:45 185  RETURNS:
10:40:45 186  1 - if has,
10:40:45 187  0 - else
10:40:45 188  */
10:40:45 189  	in_license_id IN NUMBER,
10:40:45 190  	out_result	   OUT NUMBER
10:40:45 191  );
10:40:45 192  
10:40:45 193  /*****************************************************/
10:40:45 194  
10:40:45 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:40:45 196  /*
10:40:45 197  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 198  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 199  */
10:40:45 200  	in_license_id IN NUMBER,
10:40:45 201  	out_group_id  OUT NUMBER
10:40:45 202  );
10:40:45 203  
10:40:45 204  /*****************************************************/
10:40:45 205  
10:40:45 206  PROCEDURE GET_OFFER_PRODUCTS (
10:40:45 207  /*
10:40:45 208  Throws exceptions (codes):
10:40:45 209  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 210  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 211  */
10:40:45 212  	in_offer_id    IN NUMBER,
10:40:45 213  	out_result_set OUT SYS_REFCURSOR
10:40:45 214  );
10:40:45 215  
10:40:45 216  /*******************************************************/
10:40:45 217  
10:40:45 218  PROCEDURE CREATE_TRANSACTION (
10:40:45 219  /*
10:40:45 220  Throws exceptions:
10:40:45 221  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 222  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 223  */
10:40:45 224  	in_transaction_id	  IN NUMBER,
10:40:45 225  	in_status_id		  IN NUMBER,
10:40:45 226  	in_amount		  IN NUMBER,
10:40:45 227  	in_created_by		  IN VARCHAR2,
10:40:45 228  	in_order_id		  IN VARCHAR2,
10:40:45 229  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:40:45 230  	out_transaction_id	  OUT NUMBER
10:40:45 231  );
10:40:45 232  
10:40:45 233  /*********************************************************/
10:40:45 234  
10:40:45 235  PROCEDURE ADD_LINE_ITEMS(
10:40:45 236  /*
10:40:45 237  Throws exceptions:
10:40:45 238  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 239  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 240  */
10:40:45 241  	in_invoice_id IN NUMBER,
10:40:45 242  	in_offer_id   IN NUMBER,
10:40:45 243  	in_created_by IN VARCHAR2
10:40:45 244  );
10:40:45 245  
10:40:45 246  /**********************************************************/
10:40:45 247  
10:40:45 248  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:45 249  /*
10:40:45 250  Throws exceptions:
10:40:45 251  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 252  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 253  */
10:40:45 254  	in_invoice_id IN  NUMBER,
10:40:45 255  	out_amount    OUT NUMBER
10:40:45 256  );
10:40:45 257  
10:40:45 258  /*********************************************************/
10:40:45 259  
10:40:45 260  PROCEDURE RESERVE_TRANSACTION_ID (
10:40:45 261  /*
10:40:45 262  Throws exceptions:
10:40:45 263  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 264  */
10:40:45 265  	out_transaction_id OUT NUMBER
10:40:45 266  );
10:40:45 267  
10:40:45 268  /**********************************************************/
10:40:45 269  
10:40:45 270  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:40:45 271  	in_offer_chain_id	     IN NUMBER,
10:40:45 272  	in_offer_chain_current_index IN NUMBER,
10:40:45 273  	out_next_offer_index	     OUT NUMBER
10:40:45 274  );
10:40:45 275  
10:40:45 276  /***********************************************************/
10:40:45 277  
10:40:45 278  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:40:45 279  	in_license_id		     IN NUMBER,
10:40:45 280  	in_offer_chain_current_index IN NUMBER,
10:40:45 281  	out_next_offer_index	     OUT NUMBER
10:40:45 282  );
10:40:45 283  
10:40:45 284  /**********************************************************/
10:40:45 285  
10:40:45 286  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:45 287  /*
10:40:45 288  Throws exceptions:
10:40:45 289  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 290  */
10:40:45 291  	  in_subscription_id IN  NUMBER,
10:40:45 292  	  out_result_set      OUT SYS_REFCURSOR
10:40:45 293  );
10:40:45 294  
10:40:45 295  /***********************************************************/
10:40:45 296  
10:40:45 297  PROCEDURE CLOSE_SUBSCRIPTION (
10:40:45 298  	in_subscription_id IN NUMBER,
10:40:45 299  	in_updated_by	   IN VARCHAR2
10:40:45 300  );
10:40:45 301  
10:40:45 302  /***********************************************************/
10:40:45 303  
10:40:45 304  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:40:45 305  	out_result_set OUT SYS_REFCURSOR
10:40:45 306  );
10:40:45 307  
10:40:45 308  /***********************************************************/
10:40:45 309  
10:40:45 310  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:40:45 311  	in_license_id	      IN NUMBER,
10:40:45 312  	in_needs_entitlements IN NUMBER,
10:40:45 313  	in_updated_by	      IN VARCHAR2
10:40:45 314  );
10:40:45 315  /***********************************************************/
10:40:45 316  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:40:45 317  	in_offer_id    IN NUMBER,
10:40:45 318  	out_result_set OUT SYS_REFCURSOR
10:40:45 319  );
10:40:45 320  /***********************************************************/
10:40:45 321  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:45 322  	in_product_offering_id IN NUMBER,
10:40:45 323  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
10:40:45 324  	out_result_set	       OUT SYS_REFCURSOR
10:40:45 325  );
10:40:45 326  
10:40:45 327  PROCEDURE LOCK_ACCOUNT (
10:40:45 328  	in_group_id    IN NUMBER,
10:40:45 329  	in_lock_key    IN VARCHAR2,
10:40:45 330  	in_seconds_num IN NUMBER,
10:40:45 331  	in_created_by  IN VARCHAR2,
10:40:45 332  	in_reason      IN VARCHAR2
10:40:45 333  );
10:40:45 334  
10:40:45 335  PROCEDURE RELEASE_LOCK (
10:40:45 336  	in_group_id IN NUMBER,
10:40:45 337  	in_lock_key IN VARCHAR2
10:40:45 338  );
10:40:45 339  
10:40:45 340  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:45 341  	in_invoice_id  IN NUMBER,
10:40:45 342  	out_result_set OUT SYS_REFCURSOR
10:40:45 343  );
10:40:45 344  
10:40:45 345  PROCEDURE ADD_TAX (
10:40:45 346  	in_tax_type_id		 IN NUMBER,
10:40:45 347  	in_calculated_amount	 IN NUMBER,
10:40:45 348  	in_created_by		 IN VARCHAR2,
10:40:45 349  	in_line_item_id 	 IN NUMBER,
10:40:45 350  	in_effective_rate	 IN VARCHAR2,
10:40:45 351  	in_taxable_amount	 IN NUMBER,
10:40:45 352  	in_tax_rule_id		 IN NUMBER,
10:40:45 353  	in_jurisdiction_level_id IN NUMBER,
10:40:45 354  	in_jurisdiction_name	 IN VARCHAR2,
10:40:45 355  	in_jurisdiction_id	 IN VARCHAR2,
10:40:45 356  	in_ext_tax_type 	 IN VARCHAR2,
10:40:45 357  	in_ext_result		 IN VARCHAR2,
10:40:45 358  	in_imposition_type	 IN VARCHAR2,
10:40:45 359  	in_imposition		 IN VARCHAR2
10:40:45 360  );
10:40:45 361  
10:40:45 362  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:45 363  	in_credit_card_id IN  NUMBER,
10:40:45 364  	out_result_set	  OUT SYS_REFCURSOR
10:40:45 365  );
10:40:45 366  
10:40:45 367  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:40:45 368  	in_line_item_id IN NUMBER,
10:40:45 369  	out_result_set	OUT SYS_REFCURSOR
10:40:45 370  );
10:40:45 371  
10:40:45 372  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:45 373  /*
10:40:45 374  Throws exceptions:
10:40:45 375  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:45 376  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 377  */
10:40:45 378  	in_group_id IN NUMBER,
10:40:45 379  	out_account_id	OUT NUMBER
10:40:45 380  );
10:40:45 381  
10:40:45 382  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:40:45 383  /*
10:40:45 384  Throws exceptions:
10:40:45 385  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:45 386  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:45 387  */
10:40:45 388  	in_line_item_id IN  NUMBER,
10:40:45 389  	out_result_set	OUT SYS_REFCURSOR
10:40:45 390  );
10:40:45 391  
10:40:45 392  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:40:45 393  	in_line_item_id    IN NUMBER,
10:40:45 394  	in_amount	   IN NUMBER,
10:40:45 395  	in_discount_amount IN NUMBER,
10:40:45 396  	in_taxes_amount    IN NUMBER
10:40:45 397  );
10:40:45 398  
10:40:45 399  PROCEDURE GET_PAYPAL_BY_ID (
10:40:45 400  	in_paypal_id   IN  NUMBER,
10:40:45 401  	out_result_set OUT SYS_REFCURSOR
10:40:45 402  );
10:40:45 403  
10:40:45 404  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:45 405  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:45 406  	out_result_set OUT SYS_REFCURSOR
10:40:45 407  );
10:40:45 408  
10:40:45 409  PROCEDURE GET_LICENSE_BY_ID (
10:40:45 410  	in_license_id  IN NUMBER,
10:40:45 411  	out_result_set OUT SYS_REFCURSOR
10:40:45 412  );
10:40:45 413  
10:40:45 414  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:45 415  	in_offer_chain_id	 IN NUMBER,
10:40:45 416  	in_action_name		 IN VARCHAR2,
10:40:45 417  	out_notification_type_id OUT NUMBER
10:40:45 418  );
10:40:45 419  
10:40:45 420  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:40:45 421  	in_offer_chain_id IN NUMBER,
10:40:45 422  	in_meta_data_name IN VARCHAR2,
10:40:45 423  	out_value	  OUT VARCHAR2
10:40:45 424  );
10:40:45 425  
10:40:45 426  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:40:45 427  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 428  );
10:40:45 429  
10:40:45 430  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:40:45 431  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 432  );
10:40:45 433  
10:40:45 434  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:40:45 435  	out_result_set	    OUT SYS_REFCURSOR
10:40:45 436  );
10:40:45 437  
10:40:45 438  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:40:45 439  	in_max_days_until_close IN NUMBER,
10:40:45 440  	in_num_subs_to_fetch	IN NUMBER,
10:40:45 441  	out_result_set		OUT SYS_REFCURSOR
10:40:45 442  );
10:40:45 443  
10:40:45 444  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:40:45 445  	in_days_before_close	 IN NUMBER,
10:40:45 446  	in_num_licenses_to_fetch IN NUMBER,
10:40:45 447  	out_result_set		 OUT SYS_REFCURSOR
10:40:45 448  );
10:40:45 449  
10:40:45 450  PROCEDURE GET_EXPIRING_PAYPAL (
10:40:45 451  	in_expire_window_days	IN NUMBER,
10:40:45 452  	in_creation_limit_days	IN NUMBER,
10:40:45 453  	in_retry_throttle_name	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:40:45 454  	out_result_set		OUT SYS_REFCURSOR
10:40:45 455  );
10:40:45 456  
10:40:45 457  END PUBLIC_PROCS_RENEWAL_V22;
10:40:45 458  .
10:40:45 SQL> /

Package created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_ACCOUNT (
10:40:45   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
10:40:45   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:40:45   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
10:40:45   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
10:40:45   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
10:40:45  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:40:45  12  ) AS
10:40:45  13  -- VARIABLES
10:40:45  14  var_new_account_id ACCOUNT.ID%TYPE;
10:40:45  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:45  16  var_date DATE := SYSDATE;
10:40:45  17  BEGIN
10:40:45  18  	SELECT
10:40:45  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
10:40:45  20  	FROM DUAL;
10:40:45  21  	INSERT INTO ACCOUNT (
10:40:45  22  	  ID,
10:40:45  23  	  ACCOUNT_STATUS_ID,
10:40:45  24  	  SUSPEND_DATE,
10:40:45  25  	  GROUP_ID,
10:40:45  26  	  CREATE_DATE,
10:40:45  27  	  CREATED_BY,
10:40:45  28  	  UPDATE_DATE,
10:40:45  29  	  UPDATED_BY,
10:40:45  30  	  SYSTEM_CATEGORY_ID,
10:40:45  31  	  INSTRUMENT_TYPE_ID,
10:40:45  32  	  INSTRUMENT_ID,
10:40:45  33  	  TAX_EXEMPT_ID
10:40:45  34  	) VALUES (
10:40:45  35  	  var_new_account_id,
10:40:45  36  	  in_account_status_id,
10:40:45  37  	  in_suspend_date,
10:40:45  38  	  in_group_id,
10:40:45  39  	  var_date,
10:40:45  40  	  in_created_by,
10:40:45  41  	  var_date,
10:40:45  42  	  in_created_by,
10:40:45  43  	  in_system_category_id,
10:40:45  44  	  in_instrument_type_id,
10:40:45  45  	  in_instrument_id,
10:40:45  46  	  NULL
10:40:45  47  	);
10:40:45  48  
10:40:45  49  	out_account_id := var_new_account_id;
10:40:45  50  END CREATE_ACCOUNT;
10:40:45  51  
10:40:45  52  /*************************************************************/
10:40:45  53  
10:40:45  54  PROCEDURE UPDATE_ACCOUNT (
10:40:45  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:40:45  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
10:40:45  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:45  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
10:40:45  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
10:40:45  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:45  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
10:40:45  62  ) AS
10:40:45  63  BEGIN
10:40:45  64  
10:40:45  65  	-- CREATE HISTORY
10:40:45  66  	PROCS_HISTORY_V22.CREATE_ACCOUNT_HISTORY(
10:40:45  67  	  in_account_id 	       => in_account_id,
10:40:45  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:45  69  	);
10:40:45  70  
10:40:45  71  	UPDATE ACCOUNT SET
10:40:45  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
10:40:45  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
10:40:45  74  	  UPDATED_BY	     = in_updated_by,
10:40:45  75  	  UPDATE_DATE	     = SYSDATE,
10:40:45  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
10:40:45  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:40:45  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
10:40:45  79  	WHERE
10:40:45  80  	  ACCOUNT.ID = in_account_id;
10:40:45  81  
10:40:45  82  END UPDATE_ACCOUNT;
10:40:45  83  
10:40:45  84  /*************************************************************/
10:40:45  85  
10:40:45  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
10:40:45  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
10:40:45  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
10:40:45  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
10:40:45  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:40:45  91  ) AS
10:40:45  92  BEGIN
10:40:45  93  
10:40:45  94  	-- CREATE HISTORY
10:40:45  95  	PROCS_HISTORY_V22.CREATE_ACCOUNT_HISTORY(
10:40:45  96  	  in_account_id 	       => in_account_id,
10:40:45  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:45  98  	);
10:40:45  99  
10:40:45 100  	UPDATE ACCOUNT SET
10:40:45 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
10:40:45 102  	  INSTRUMENT_ID      = in_instrument_id
10:40:45 103  	WHERE
10:40:45 104  	  ACCOUNT.ID = in_account_id;
10:40:45 105  
10:40:45 106  END;
10:40:45 107  
10:40:45 108  /*************************************************************/
10:40:45 109  
10:40:45 110  PROCEDURE READ_ACCOUNT (
10:40:45 111  	in_account_id  IN ACCOUNT.ID%TYPE,
10:40:45 112  	out_result_set OUT SYS_REFCURSOR
10:40:45 113  ) AS
10:40:45 114  BEGIN
10:40:45 115  	OPEN out_result_set FOR
10:40:45 116  	SELECT
10:40:45 117  	  ACCOUNT_STATUS_ID,
10:40:45 118  	  SUSPEND_DATE,
10:40:45 119  	  GROUP_ID
10:40:45 120  	FROM
10:40:45 121  	  ACCOUNT
10:40:45 122  	WHERE
10:40:45 123  	  ID = in_account_id;
10:40:45 124  END READ_ACCOUNT;
10:40:45 125  
10:40:45 126  /*************************************************************/
10:40:45 127  
10:40:45 128  PROCEDURE CREATE_ACCOUNT_NOTE (
10:40:45 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
10:40:45 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
10:40:45 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
10:40:45 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
10:40:45 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
10:40:45 134  ) AS
10:40:45 135  BEGIN
10:40:45 136  	IF inout_account_note_id IS NULL THEN
10:40:45 137  	  SELECT
10:40:45 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
10:40:45 139  	  FROM DUAL;
10:40:45 140  	END IF;
10:40:45 141  	INSERT INTO ACCOUNT_NOTE(
10:40:45 142  	  ID,
10:40:45 143  	  AGENT_ID,
10:40:45 144  	  ACCOUNT_ID,
10:40:45 145  	  NOTE,
10:40:45 146  	  CREATE_DATE,
10:40:45 147  	  CREATED_BY
10:40:45 148  	) VALUES (
10:40:45 149  	  inout_account_note_id,
10:40:45 150  	  in_agent_id,
10:40:45 151  	  in_account_id,
10:40:45 152  	  in_note,
10:40:45 153  	  SYSDATE,
10:40:45 154  	  in_created_by
10:40:45 155  	);
10:40:45 156  END CREATE_ACCOUNT_NOTE;
10:40:45 157  
10:40:45 158  END PROCS_ACCOUNT_CRU_V22;
10:40:45 159  .
10:40:45 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:45 SQL> 
10:40:45 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V22" AS
10:40:45   2  
10:40:45   3  PROCEDURE CREATE_ADDRESS(
10:40:45   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
10:40:45   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
10:40:45   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
10:40:45  13  ) AS
10:40:45  14  -- VARIABLES
10:40:45  15  var_address_id ADDRESS.ID%TYPE;
10:40:45  16  var_date DATE := SYSDATE;
10:40:45  17  BEGIN
10:40:45  18  	IF in_address_id IS NULL THEN
10:40:45  19  	  SELECT
10:40:45  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
10:40:45  21  	  FROM DUAL;
10:40:45  22  	ELSE
10:40:45  23  	  var_address_id := in_address_id;
10:40:45  24  	END IF;
10:40:45  25  	INSERT INTO
10:40:45  26  	  ADDRESS (
10:40:45  27  	    ID,
10:40:45  28  	    ADDRESS1,
10:40:45  29  	    ADDRESS2,
10:40:45  30  	    CITY,
10:40:45  31  	    STATE,
10:40:45  32  	    POSTAL_CODE,
10:40:45  33  	    COUNTRY,
10:40:45  34  	    CREATE_DATE,
10:40:45  35  	    CREATED_BY,
10:40:45  36  	    UPDATE_DATE,
10:40:45  37  	    UPDATED_BY
10:40:45  38  	  ) VALUES (
10:40:45  39  	    var_address_id,
10:40:45  40  	    in_address1,
10:40:45  41  	    in_address2,
10:40:45  42  	    in_city,
10:40:45  43  	    in_state,
10:40:45  44  	    in_postal_code,
10:40:45  45  	    in_country,
10:40:45  46  	    var_date,
10:40:45  47  	    in_created_by,
10:40:45  48  	    var_date,
10:40:45  49  	    in_created_by
10:40:45  50  	  );
10:40:45  51  
10:40:45  52  	out_address_id := var_address_id;
10:40:45  53  END CREATE_ADDRESS;
10:40:45  54  
10:40:45  55  PROCEDURE UPDATE_ADDRESS(
10:40:45  56  	in_address_id	      IN ADDRESS.ID%TYPE,
10:40:45  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:45  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:45  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:45  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:45  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:45  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:45  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
10:40:45  64  ) AS
10:40:45  65  BEGIN
10:40:45  66  
10:40:45  67  	-- Create history
10:40:45  68  	PROCS_HISTORY_V22.CREATE_ADDRESS_HISTORY(
10:40:45  69  	  in_address_id 		=> in_address_id,
10:40:45  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:45  71  	);
10:40:45  72  
10:40:45  73  	UPDATE
10:40:45  74  	  ADDRESS
10:40:45  75  	SET
10:40:45  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
10:40:45  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
10:40:45  78  	  CITY = NVL(in_city, CITY),
10:40:45  79  	  STATE = NVL(in_state, STATE),
10:40:45  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
10:40:45  81  	  COUNTRY = NVL(in_country, COUNTRY),
10:40:45  82  	  UPDATE_DATE = SYSDATE,
10:40:45  83  	  UPDATED_BY = in_updated_by
10:40:45  84  	WHERE
10:40:45  85  	  ID = in_address_id;
10:40:45  86  
10:40:45  87  END UPDATE_ADDRESS;
10:40:45  88  
10:40:45  89  END PROCS_ADDRESS_CRU_V22;
10:40:45  90  .
10:40:45 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE UPDATE_AMAZON_APPSTORE_RECEIPT(
10:40:46   4  	in_id		   IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:46   5  	in_updated_by	   IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE,
10:40:46   6  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE DEFAULT NULL,
10:40:46   7  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE DEFAULT NULL,
10:40:46   8  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE DEFAULT NULL,
10:40:46   9  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE DEFAULT NULL,
10:40:46  10  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:46  11  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE DEFAULT NULL,
10:40:46  12  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE DEFAULT NULL,
10:40:46  13  	in_last_check_date IN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE DEFAULT NULL
10:40:46  14  ) AS
10:40:46  15  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AMAZON_APPSTORE_RECEIPT';
10:40:46  16  BEGIN
10:40:46  17  	CORE_OWNER.PROCS_HISTORY_V22.CREATE_AASR_HISTORY(
10:40:46  18  	    in_id => in_id,
10:40:46  19  	    in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE,
10:40:46  20  	    in_created_by => in_updated_by
10:40:46  21  	);
10:40:46  22  
10:40:46  23  	UPDATE AMAZON_APPSTORE_RECEIPT SET
10:40:46  24  	  SUBSCRIPTION_ID = NVL(in_subscription_id,SUBSCRIPTION_ID),
10:40:46  25  	  USER_ID	  = NVL(in_user_id,USER_ID),
10:40:46  26  	  ITEM_TYPE	  = NVL(in_item_type,ITEM_TYPE),
10:40:46  27  	  START_DATE	  = NVL(in_start_date,START_DATE),
10:40:46  28  	  END_DATE	  = NVL(in_end_date,END_DATE),
10:40:46  29  	  SKU		  = NVL(in_sku,SKU),
10:40:46  30  	  PURCHASE_TOKEN  = NVL(in_purchase_token,PURCHASE_TOKEN),
10:40:46  31  	  LAST_CHECK_DATE = NVL(in_last_check_date,LAST_CHECK_DATE),
10:40:46  32  	  UPDATE_DATE	  = SYSDATE,
10:40:46  33  	  UPDATED_BY	  = in_updated_by
10:40:46  34  	WHERE
10:40:46  35  	  ID = in_id;
10:40:46  36  END UPDATE_AMAZON_APPSTORE_RECEIPT;
10:40:46  37  
10:40:46  38  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:40:46  39  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46  40  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:46  41  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:40:46  42  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:40:46  43  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:46  44  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:46  45  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:46  46  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:40:46  47  ) AS
10:40:46  48  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
10:40:46  49  var_now	 DATE := SYSDATE;
10:40:46  50  BEGIN
10:40:46  51  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE_RECEIPT (
10:40:46  52  	  ID,
10:40:46  53  	  SUBSCRIPTION_ID,
10:40:46  54  	  USER_ID,
10:40:46  55  	  ITEM_TYPE,
10:40:46  56  	  START_DATE,
10:40:46  57  	  END_DATE,
10:40:46  58  	  SKU,
10:40:46  59  	  PURCHASE_TOKEN,
10:40:46  60  	  CREATE_DATE,
10:40:46  61  	  CREATED_BY,
10:40:46  62  	  UPDATE_DATE,
10:40:46  63  	  UPDATED_BY
10:40:46  64  	) VALUES (
10:40:46  65  	  CORE_OWNER.AAS_RECEIPT_ID_SEQ.nextval,
10:40:46  66  	  in_subscription_id,
10:40:46  67  	  in_user_id,
10:40:46  68  	  in_item_type,
10:40:46  69  	  in_start_date,
10:40:46  70  	  in_end_date,
10:40:46  71  	  in_sku,
10:40:46  72  	  in_purchase_token,
10:40:46  73  	  var_now,
10:40:46  74  	  in_created_by,
10:40:46  75  	  var_now,
10:40:46  76  	  in_created_by
10:40:46  77  	);
10:40:46  78  END ADD_AMAZON_APPSTORE_RECEIPT;
10:40:46  79  
10:40:46  80  	PROCEDURE CREATE_AMAZON_SUB(
10:40:46  81  /*
10:40:46  82  Throws exceptions:
10:40:46  83  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46  84  */
10:40:46  85  	  out_id	      OUT NUMBER,
10:40:46  86  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:40:46  87  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:40:46  88  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:40:46  89  ) AS
10:40:46  90  -- VARIABLES
10:40:46  91  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
10:40:46  92  var_current_date	DATE;
10:40:46  93  var_count 	NUMBER;
10:40:46  94  AMAZON_SUB_USED	EXCEPTION;
10:40:46  95  BEGIN
10:40:46  96  
10:40:46  97  	SELECT COUNT(1) INTO var_count
10:40:46  98  	FROM SUBSCRIPTION s, AMAZON_SUB am
10:40:46  99  	WHERE
10:40:46 100  	  am.AMAZON_ID = in_amazon_id
10:40:46 101  	  and am.subscription_id = s.id
10:40:46 102  	  and s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE;
10:40:46 103  
10:40:46 104  	if var_count > 0 then
10:40:46 105  	  raise AMAZON_SUB_USED;
10:40:46 106  	end if;
10:40:46 107  
10:40:46 108  	SELECT
10:40:46 109  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
10:40:46 110  	INTO
10:40:46 111  	  out_id
10:40:46 112  	FROM
10:40:46 113  	  dual
10:40:46 114  	;
10:40:46 115  
10:40:46 116  	SELECT
10:40:46 117  	  sysdate
10:40:46 118  	INTO
10:40:46 119  	  var_current_date
10:40:46 120  	FROM
10:40:46 121  	  dual
10:40:46 122  	;
10:40:46 123  
10:40:46 124  	INSERT INTO CORE_OWNER.AMAZON_SUB
10:40:46 125  	(
10:40:46 126  	  id,
10:40:46 127  	  subscription_id,
10:40:46 128  	  amazon_id,
10:40:46 129  	  create_date,
10:40:46 130  	  created_by,
10:40:46 131  	  update_date,
10:40:46 132  	  updated_by
10:40:46 133  	)
10:40:46 134  	VALUES
10:40:46 135  	(
10:40:46 136  	  out_id,
10:40:46 137  	  in_subscription_id,
10:40:46 138  	  in_amazon_id,
10:40:46 139  	  var_current_date,
10:40:46 140  	  in_created_by,
10:40:46 141  	  var_current_date,
10:40:46 142  	  in_created_by
10:40:46 143  	);
10:40:46 144  
10:40:46 145  EXCEPTION
10:40:46 146  WHEN AMAZON_SUB_USED THEN
10:40:46 147  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 148  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
10:40:46 149  WHEN DUP_VAL_ON_INDEX THEN
10:40:46 150  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 151  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:40:46 152  WHEN OTHERS THEN
10:40:46 153  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 155  END CREATE_AMAZON_SUB;
10:40:46 156  
10:40:46 157  END PROCS_AMAZON_CRU_V22;
10:40:46 158  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_CHARGE(
10:40:46   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
10:40:46   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
10:40:46   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:46   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
10:40:46   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
10:40:46  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
10:40:46  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:46  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
10:40:46  13  ) AS
10:40:46  14  -- VARIABLES
10:40:46  15  var_charge_id CHARGE.ID%TYPE;
10:40:46  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  17  var_date DATE := SYSDATE;
10:40:46  18  BEGIN
10:40:46  19  	IF in_charge_id IS NULL THEN
10:40:46  20  	  SELECT
10:40:46  21  	    CRG_ID_SEQ.nextVal into var_charge_id
10:40:46  22  	  FROM DUAL;
10:40:46  23  	ELSE
10:40:46  24  	  var_charge_id := in_charge_id;
10:40:46  25  	END IF;
10:40:46  26  	INSERT INTO
10:40:46  27  	  CHARGE (
10:40:46  28  	    ID,
10:40:46  29  	    INVOICE_ID,
10:40:46  30  	    TRANSACTION_ID,
10:40:46  31  	    INSTRUMENT_TYPE_ID,
10:40:46  32  	    INSTRUMENT_ID,
10:40:46  33  	    CHARGE_AMOUNT,
10:40:46  34  	    CHARGE_STATUS_ID,
10:40:46  35  	    CREATE_DATE,
10:40:46  36  	    CREATED_BY,
10:40:46  37  	    UPDATE_DATE,
10:40:46  38  	    UPDATED_BY
10:40:46  39  	  ) VALUES (
10:40:46  40  	    var_charge_id,
10:40:46  41  	    in_invoice_id,
10:40:46  42  	    in_transaction_id,
10:40:46  43  	    in_instrument_type_id,
10:40:46  44  	    in_instrument_id,
10:40:46  45  	    in_charge_amount,
10:40:46  46  	    in_charge_status_id,
10:40:46  47  	    var_date,
10:40:46  48  	    in_created_by,
10:40:46  49  	    var_date,
10:40:46  50  	    in_created_by
10:40:46  51  	  );
10:40:46  52  
10:40:46  53  	out_charge_id := var_charge_id;
10:40:46  54  END CREATE_CHARGE;
10:40:46  55  
10:40:46  56  PROCEDURE UPDATE_CHARGE(
10:40:46  57  	in_charge_id	      IN CHARGE.ID%TYPE,
10:40:46  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:46  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:40:46  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
10:40:46  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
10:40:46  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
10:40:46  63  ) AS
10:40:46  64  BEGIN
10:40:46  65  
10:40:46  66  	-- Create history
10:40:46  67  	PROCS_HISTORY_V22.CREATE_CHARGE_HISTORY(
10:40:46  68  	  in_charge_id		       => in_charge_id,
10:40:46  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46  70  	);
10:40:46  71  
10:40:46  72  	UPDATE
10:40:46  73  	  CHARGE
10:40:46  74  	SET
10:40:46  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:40:46  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
10:40:46  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
10:40:46  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
10:40:46  79  	  UPDATE_DATE	     = SYSDATE,
10:40:46  80  	  UPDATED_BY	     = in_updated_by
10:40:46  81  	WHERE
10:40:46  82  	  ID = in_charge_id;
10:40:46  83  
10:40:46  84  END UPDATE_CHARGE;
10:40:46  85  
10:40:46  86  END PROCS_CHARGE_CRU_V22;
10:40:46  87  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_CREDIT_CARD(
10:40:46   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
10:40:46   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
10:40:46   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
10:40:46   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
10:40:46   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
10:40:46  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:40:46  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
10:40:46  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
10:40:46  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
10:40:46  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
10:40:46  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:46  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:40:46  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
10:40:46  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
10:40:46  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:40:46  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
10:40:46  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:40:46  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
10:40:46  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
10:40:46  24  ) AS
10:40:46  25  -- VARIABLES
10:40:46  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
10:40:46  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  28  var_date DATE := SYSDATE;
10:40:46  29  BEGIN
10:40:46  30  	IF in_credit_card_id IS NULL THEN
10:40:46  31  	  SELECT
10:40:46  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
10:40:46  33  	  FROM DUAL;
10:40:46  34  	ELSE
10:40:46  35  	  var_credit_card_id := in_credit_card_id;
10:40:46  36  	END IF;
10:40:46  37  	INSERT INTO CREDIT_CARD(
10:40:46  38  	    ID,
10:40:46  39  	    ACCOUNT_ID,
10:40:46  40  	    INSTRUMENT_NAME,
10:40:46  41  	    PRIVATE_CARD_HOLDER_NAME,
10:40:46  42  	    PRIVATE_STREET_ADDRESS,
10:40:46  43  	    PRIVATE_STREET_ADDRESS2,
10:40:46  44  	    STATE,
10:40:46  45  	    CITY,
10:40:46  46  	    POSTAL_CODE,
10:40:46  47  	    COUNTRY,
10:40:46  48  	    LAST_FOUR_CC,
10:40:46  49  	    EXPIRATION_DATE,
10:40:46  50  	    CREDIT_CARD_TYPE_ID,
10:40:46  51  	    SECRET_TOKEN,
10:40:46  52  	    CHASE_PROFILE_ID,
10:40:46  53  	    CREATE_DATE,
10:40:46  54  	    CREATED_BY,
10:40:46  55  	    UPDATE_DATE,
10:40:46  56  	    UPDATED_BY,
10:40:46  57  	    CREDIT_CARD_STATUS_ID,
10:40:46  58  	    PRIVATE_FIRST_NAME,
10:40:46  59  	    PRIVATE_LAST_NAME
10:40:46  60  	  ) VALUES (
10:40:46  61  	    var_credit_card_id,
10:40:46  62  	    in_account_id,
10:40:46  63  	    in_instrument_name,
10:40:46  64  	    in_private_card_holder_name,
10:40:46  65  	    in_private_street_address,
10:40:46  66  	    in_private_street_address2,
10:40:46  67  	    in_state,
10:40:46  68  	    in_city,
10:40:46  69  	    in_postal_code,
10:40:46  70  	    in_country,
10:40:46  71  	    in_last_four_cc,
10:40:46  72  	    in_expiration_date,
10:40:46  73  	    in_credit_card_type_id,
10:40:46  74  	    in_secret_token,
10:40:46  75  	    in_chase_profile_id,
10:40:46  76  	    var_date,
10:40:46  77  	    in_created_by,
10:40:46  78  	    var_date,
10:40:46  79  	    in_created_by,
10:40:46  80  	    in_credit_card_status_id,
10:40:46  81  	    in_private_first_name,
10:40:46  82  	    in_private_last_name
10:40:46  83  	  );
10:40:46  84  
10:40:46  85  	out_credit_card_id := var_credit_card_id;
10:40:46  86  END CREATE_CREDIT_CARD;
10:40:46  87  
10:40:46  88  /******************************************************************************/
10:40:46  89  
10:40:46  90  PROCEDURE UPDATE_CREDIT_CARD(
10:40:46  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
10:40:46  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:46  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
10:40:46  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:46  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
10:40:46  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:40:46  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:40:46  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:46  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:40:46 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
10:40:46 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:46 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:40:46 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
10:40:46 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
10:40:46 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
10:40:46 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:40:46 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
10:40:46 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
10:40:46 109  ) AS
10:40:46 110  BEGIN
10:40:46 111  
10:40:46 112  	-- Create history
10:40:46 113  	PROCS_HISTORY_V22.CREATE_CREDIT_CARD_HISTORY(
10:40:46 114  	  in_credit_card_id	       => in_credit_card_id,
10:40:46 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 116  	);
10:40:46 117  
10:40:46 118  	UPDATE CREDIT_CARD SET
10:40:46 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
10:40:46 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
10:40:46 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
10:40:46 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
10:40:46 123  	  STATE 		   = NVL(in_state, STATE),
10:40:46 124  	  CITY			   = NVL(in_city, CITY),
10:40:46 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
10:40:46 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
10:40:46 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
10:40:46 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
10:40:46 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
10:40:46 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
10:40:46 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
10:40:46 132  	  UPDATE_DATE		   = SYSDATE,
10:40:46 133  	  UPDATED_BY		   = in_updated_by,
10:40:46 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
10:40:46 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
10:40:46 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
10:40:46 137  	WHERE
10:40:46 138  	  ID = in_credit_card_id;
10:40:46 139  
10:40:46 140  END UPDATE_CREDIT_CARD;
10:40:46 141  
10:40:46 142  /******************************************************************************/
10:40:46 143  
10:40:46 144  PROCEDURE CREATE_PAYPAL(
10:40:46 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
10:40:46 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
10:40:46 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
10:40:46 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:46 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:40:46 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
10:40:46 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:40:46 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:40:46 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
10:40:46 154  	in_state			IN PAYPAL.STATE%TYPE,
10:40:46 155  	in_city 			IN PAYPAL.CITY%TYPE,
10:40:46 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
10:40:46 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
10:40:46 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
10:40:46 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:40:46 160  ) AS
10:40:46 161  -- VARIABLES
10:40:46 162  var_paypal_id PAYPAL.ID%TYPE;
10:40:46 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46 164  var_date DATE := SYSDATE;
10:40:46 165  BEGIN
10:40:46 166  	IF in_paypal_id IS NULL THEN
10:40:46 167  	  SELECT
10:40:46 168  	    PP_ID_SEQ.nextVal into var_paypal_id
10:40:46 169  	  FROM DUAL;
10:40:46 170  	ELSE
10:40:46 171  	  var_paypal_id := in_paypal_id;
10:40:46 172  	END IF;
10:40:46 173  	INSERT INTO PAYPAL(
10:40:46 174  	    ID,
10:40:46 175  	    ACCOUNT_ID,
10:40:46 176  	    INSTRUMENT_NAME,
10:40:46 177  	    PRIVATE_EMAIL_ADDRESS,
10:40:46 178  	    CREATE_DATE,
10:40:46 179  	    CREATED_BY,
10:40:46 180  	    UPDATE_DATE,
10:40:46 181  	    UPDATED_BY,
10:40:46 182  	    PAYPAL_STATUS_ID,
10:40:46 183  	    PRIVATE_STREET_ADDRESS,
10:40:46 184  	    PRIVATE_STREET_ADDRESS2,
10:40:46 185  	    STATE,
10:40:46 186  	    CITY,
10:40:46 187  	    POSTAL_CODE,
10:40:46 188  	    COUNTRY,
10:40:46 189  	    EXPIRATION_DATE,
10:40:46 190  	    SECRET_TOKEN
10:40:46 191  	  ) VALUES (
10:40:46 192  	    var_paypal_id,
10:40:46 193  	    in_account_id,
10:40:46 194  	    in_instrument_name,
10:40:46 195  	    in_private_email_address,
10:40:46 196  	    var_date,
10:40:46 197  	    in_created_by,
10:40:46 198  	    var_date,
10:40:46 199  	    in_created_by,
10:40:46 200  	    in_paypal_status_id,
10:40:46 201  	    in_paypal_prvt_street_address,
10:40:46 202  	    in_paypal_prvt_street_address2,
10:40:46 203  	    in_state,
10:40:46 204  	    in_city,
10:40:46 205  	    in_postal_code,
10:40:46 206  	    in_country,
10:40:46 207  	    in_expiration_date,
10:40:46 208  	    in_secret_token
10:40:46 209  	  );
10:40:46 210  	out_paypal_id := var_paypal_id;
10:40:46 211  END CREATE_PAYPAL;
10:40:46 212  
10:40:46 213  /******************************************************************************/
10:40:46 214  
10:40:46 215  PROCEDURE UPDATE_PAYPAL(
10:40:46 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
10:40:46 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
10:40:46 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
10:40:46 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
10:40:46 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
10:40:46 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:46 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
10:40:46 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
10:40:46 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
10:40:46 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:46 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
10:40:46 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:46 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
10:40:46 229  ) AS
10:40:46 230  BEGIN
10:40:46 231  	-- Create history
10:40:46 232  	PROCS_HISTORY_V22.CREATE_PAYPAL_HISTORY(
10:40:46 233  	  in_paypal_id		       => in_paypal_id,
10:40:46 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 235  	);
10:40:46 236  
10:40:46 237  	UPDATE PAYPAL SET
10:40:46 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
10:40:46 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
10:40:46 240  	  UPDATE_DATE	   = SYSDATE,
10:40:46 241  	  UPDATED_BY	   = in_updated_by,
10:40:46 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
10:40:46 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
10:40:46 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
10:40:46 245  	  STATE 		  = NVL(in_state, STATE),
10:40:46 246  	  CITY			  = NVL(in_city, CITY),
10:40:46 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
10:40:46 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
10:40:46 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
10:40:46 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
10:40:46 251  	WHERE
10:40:46 252  	  ID = in_paypal_id;
10:40:46 253  END UPDATE_PAYPAL;
10:40:46 254  
10:40:46 255  /******************************************************************************/
10:40:46 256  
10:40:46 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
10:40:46 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
10:40:46 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
10:40:46 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
10:40:46 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:46 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
10:40:46 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:46 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
10:40:46 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:40:46 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
10:40:46 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
10:40:46 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:40:46 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:40:46 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:40:46 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:40:46 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
10:40:46 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
10:40:46 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:40:46 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:40:46 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:40:46 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:46 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL,
10:40:46 279  	in_campaign		      IN GC_CAMPAIGN_AND_REF.CAMPAIGN%TYPE DEFAULT NULL,
10:40:46 280  	in_reference_code	      IN GC_CAMPAIGN_AND_REF.REFERENCE_CODE%TYPE DEFAULT NULL
10:40:46 281  ) AS
10:40:46 282  -- VARIABLES
10:40:46 283  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
10:40:46 284  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46 285  var_date DATE := SYSDATE;
10:40:46 286  BEGIN
10:40:46 287  	IF in_gift_certificate_id IS NULL THEN
10:40:46 288  	  SELECT
10:40:46 289  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
10:40:46 290  	  FROM DUAL;
10:40:46 291  	ELSE
10:40:46 292  	  var_gift_certificate_id := in_gift_certificate_id;
10:40:46 293  	END IF;
10:40:46 294  
10:40:46 295  	INSERT INTO GIFT_CERTIFICATE (
10:40:46 296  	    ID,
10:40:46 297  	    PURCHASER_GROUP_ID,
10:40:46 298  	    PURCHASE_INVOICE_ID,
10:40:46 299  	    OFFER_CHAIN_ID,
10:40:46 300  	    EXPIRATION_DATE,
10:40:46 301  	    PURCHASE_DATE,
10:40:46 302  	    GIFT_CERTIFICATE_STATUS_ID,
10:40:46 303  	    CODE,
10:40:46 304  	    CREATE_DATE,
10:40:46 305  	    CREATED_BY,
10:40:46 306  	    UPDATE_DATE,
10:40:46 307  	    UPDATED_BY,
10:40:46 308  	    RECIPIENT_NAME,
10:40:46 309  	    GIFT_MESSAGE,
10:40:46 310  	    RECIPIENT_EMAIL,
10:40:46 311  	    FINALIZED_INVOICE_ID,
10:40:46 312  	    SENDER_EMAIL,
10:40:46 313  	    SENDER_NAME,
10:40:46 314  	    REDEMPTION_DATE,
10:40:46 315  	    CANCELATION_DATE,
10:40:46 316  	    REDEEMER_GROUP_ID,
10:40:46 317  	    RECIPIENT_ADDRESS_ID,
10:40:46 318  	    RECIPIENT_NOTIFY_DATE
10:40:46 319  	  ) VALUES(
10:40:46 320  	    var_gift_certificate_id,
10:40:46 321  	    in_purchaser_group_id,
10:40:46 322  	    in_purchaser_invoice_id,
10:40:46 323  	    in_offer_chain_id,
10:40:46 324  	    in_expiration_date,
10:40:46 325  	    in_purchase_date,
10:40:46 326  	    in_gift_certificate_status_id,
10:40:46 327  	    in_code,
10:40:46 328  	    var_date,
10:40:46 329  	    in_created_by,
10:40:46 330  	    var_date,
10:40:46 331  	    in_created_by,
10:40:46 332  	    in_recipient_name,
10:40:46 333  	    in_gift_message,
10:40:46 334  	    in_recipient_email,
10:40:46 335  	    in_finalized_invoice_id,
10:40:46 336  	    in_sender_email,
10:40:46 337  	    in_sender_name,
10:40:46 338  	    in_redemption_date,
10:40:46 339  	    in_cancelation_date,
10:40:46 340  	    in_redeemer_group_id,
10:40:46 341  	    in_recipient_address_id,
10:40:46 342  	    in_recipient_notify_date
10:40:46 343  	  );
10:40:46 344  
10:40:46 345  	  IF in_campaign IS NOT NULL THEN
10:40:46 346  	    INSERT INTO GC_CAMPAIGN_AND_REF(GC_ID, CAMPAIGN, REFERENCE_CODE)
10:40:46 347  	      VALUES(var_gift_certificate_id, in_campaign, in_reference_code);
10:40:46 348  	  END IF;
10:40:46 349  
10:40:46 350  	out_gift_certificate_id := var_gift_certificate_id;
10:40:46 351  END CREATE_GIFT_CERTIFICATE;
10:40:46 352  
10:40:46 353  /******************************************************************************/
10:40:46 354  
10:40:46 355  PROCEDURE UPDATE_GIFT_CERTIFICATE(
10:40:46 356  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
10:40:46 357  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
10:40:46 358  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
10:40:46 359  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
10:40:46 360  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
10:40:46 361  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
10:40:46 362  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
10:40:46 363  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
10:40:46 364  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
10:40:46 365  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
10:40:46 366  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
10:40:46 367  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
10:40:46 368  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
10:40:46 369  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
10:40:46 370  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:46 371  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
10:40:46 372  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
10:40:46 373  ) AS
10:40:46 374  BEGIN
10:40:46 375  
10:40:46 376  	-- Create history
10:40:46 377  	PROCS_HISTORY_V22.CREATE_GIFT_CERT_HISTORY(
10:40:46 378  	  in_gift_certificate_id       => in_gift_certificate_id,
10:40:46 379  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 380  	);
10:40:46 381  
10:40:46 382  	UPDATE GIFT_CERTIFICATE SET
10:40:46 383  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
10:40:46 384  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
10:40:46 385  	  CODE			     = NVL(in_code, CODE),
10:40:46 386  	  UPDATE_DATE		     = SYSDATE,
10:40:46 387  	  UPDATED_BY		     = in_updated_by,
10:40:46 388  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
10:40:46 389  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
10:40:46 390  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
10:40:46 391  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
10:40:46 392  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
10:40:46 393  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
10:40:46 394  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
10:40:46 395  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
10:40:46 396  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
10:40:46 397  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
10:40:46 398  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
10:40:46 399  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
10:40:46 400  	WHERE
10:40:46 401  	  ID = in_gift_certificate_id;
10:40:46 402  
10:40:46 403  END UPDATE_GIFT_CERTIFICATE;
10:40:46 404  
10:40:46 405  END PROCS_FIN_INSTRUMENTS_CRU_V22;
10:40:46 406  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
10:40:46   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:46   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
10:40:46   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
10:40:46   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
10:40:46   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
10:40:46   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
10:40:46  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:40:46  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:46  12  ) AS
10:40:46  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
10:40:46  14  BEGIN
10:40:46  15  	UPDATE SUBSCRIPTION_SHARE SET
10:40:46  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
10:40:46  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
10:40:46  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
10:40:46  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
10:40:46  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
10:40:46  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
10:40:46  22  	  UPDATED_BY	       = in_updated_by,
10:40:46  23  	  UPDATE_DATE	       = SYSDATE
10:40:46  24  	WHERE
10:40:46  25  	  SUBSCRIPTION_SHARE.ID = in_id;
10:40:46  26  EXCEPTION
10:40:46  27  	WHEN OTHERS THEN
10:40:46  28  	  Procs_Common_V22.Throw_Exception(APP_EXCEPTION_CODES_V22.Internal_Error,
10:40:46  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
10:40:46  30  END UPDATE_SUBSCRIPTION_SHARE;
10:40:46  31  
10:40:46  32  PROCEDURE CREATE_GROUP_ACCOUNT (
10:40:46  33  	in_subscription_id	 IN NUMBER,
10:40:46  34  	in_group_name		 IN VARCHAR2,
10:40:46  35  	in_first_name		 IN VARCHAR2,
10:40:46  36  	in_last_name		 IN VARCHAR2,
10:40:46  37  	in_email		 IN VARCHAR2,
10:40:46  38  	in_phone		 IN VARCHAR2,
10:40:46  39  	in_organization_type	 IN VARCHAR2,
10:40:46  40  	in_seats		 IN NUMBER,
10:40:46  41  	in_seat_ttl_in_hours	 IN NUMBER,
10:40:46  42  	in_ip			 IN NUMBER,
10:40:46  43  	in_created_by		 IN VARCHAR2
10:40:46  44  ) AS
10:40:46  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
10:40:46  46  var_now DATE;
10:40:46  47  BEGIN
10:40:46  48  
10:40:46  49  	SELECT
10:40:46  50  	  SYSDATE INTO var_now
10:40:46  51  	FROM dual;
10:40:46  52  
10:40:46  53  	INSERT INTO GROUP_ACCOUNT (
10:40:46  54  	  id,
10:40:46  55  	  subscription_id,
10:40:46  56  	  group_name,
10:40:46  57  	  first_name,
10:40:46  58  	  last_name,
10:40:46  59  	  email,
10:40:46  60  	  phone,
10:40:46  61  	  organization_type,
10:40:46  62  	  seats,
10:40:46  63  	  seat_ttl_in_hours,
10:40:46  64  	  ip,
10:40:46  65  	  create_date,
10:40:46  66  	  created_by,
10:40:46  67  	  update_date,
10:40:46  68  	  updated_by
10:40:46  69  	) VALUES (
10:40:46  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
10:40:46  71  	  in_subscription_id,
10:40:46  72  	  in_group_name,
10:40:46  73  	  in_first_name,
10:40:46  74  	  in_last_name,
10:40:46  75  	  in_email,
10:40:46  76  	  in_phone,
10:40:46  77  	  in_organization_type,
10:40:46  78  	  in_seats,
10:40:46  79  	  in_seat_ttl_in_hours,
10:40:46  80  	  in_ip,
10:40:46  81  	  var_now,
10:40:46  82  	  in_created_by,
10:40:46  83  	  var_now,
10:40:46  84  	  in_created_by
10:40:46  85  	);
10:40:46  86  
10:40:46  87  EXCEPTION
10:40:46  88  	WHEN PROGRAM_ERROR THEN
10:40:46  89  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
10:40:46  91  	WHEN OTHERS THEN
10:40:46  92  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
10:40:46  94  END CREATE_GROUP_ACCOUNT;
10:40:46  95  
10:40:46  96  
10:40:46  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:40:46  98  	in_group_account_id    IN NUMBER,
10:40:46  99  	in_borrower_account_id IN NUMBER,
10:40:46 100  	in_ip_address	       IN VARCHAR2,
10:40:46 101  	in_email_domain        IN VARCHAR2,
10:40:46 102  	in_start_date	       IN DATE,
10:40:46 103  	in_end_date	       IN DATE,
10:40:46 104  	in_created_by	       IN VARCHAR2
10:40:46 105  ) AS
10:40:46 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
10:40:46 107  var_now DATE;
10:40:46 108  BEGIN
10:40:46 109  
10:40:46 110  	SELECT
10:40:46 111  	  SYSDATE INTO var_now
10:40:46 112  	FROM dual;
10:40:46 113  
10:40:46 114  	INSERT INTO SUBSCRIPTION_SHARE (
10:40:46 115  	  id,
10:40:46 116  	  group_account_id,
10:40:46 117  	  borrower_account_id,
10:40:46 118  	  ip_address,
10:40:46 119  	  email_domain,
10:40:46 120  	  start_date,
10:40:46 121  	  end_date,
10:40:46 122  	  create_date,
10:40:46 123  	  created_by,
10:40:46 124  	  update_date,
10:40:46 125  	  updated_by
10:40:46 126  	) VALUES (
10:40:46 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
10:40:46 128  	  in_group_account_id,
10:40:46 129  	  in_borrower_account_id,
10:40:46 130  	  in_ip_address,
10:40:46 131  	  in_email_domain,
10:40:46 132  	  in_start_date,
10:40:46 133  	  in_end_date,
10:40:46 134  	  var_now,
10:40:46 135  	  in_created_by,
10:40:46 136  	  var_now,
10:40:46 137  	  in_created_by
10:40:46 138  	);
10:40:46 139  
10:40:46 140  EXCEPTION
10:40:46 141  	WHEN PROGRAM_ERROR THEN
10:40:46 142  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
10:40:46 144  END CREATE_SUBSCRIPTION_SHARE;
10:40:46 145  
10:40:46 146  -- Eh, I don't like the cru packages at all
10:40:46 147  -- the idea of code reuse in PL/SQL is still lost on me
10:40:46 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
10:40:46 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:46 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:46 151  ) AS
10:40:46 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
10:40:46 153  BEGIN
10:40:46 154  	update
10:40:46 155  	  GROUP_ACCOUNT_IP_RANGE IR
10:40:46 156  	set
10:40:46 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_INACTIVE,
10:40:46 158  	  IR.UPDATED_BY = in_updated_by,
10:40:46 159  	  IR.UPDATE_DATE = sysdate
10:40:46 160  	where
10:40:46 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
10:40:46 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE
10:40:46 163  	;
10:40:46 164  EXCEPTION
10:40:46 165  WHEN OTHERS THEN
10:40:46 166  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 168  END DISABLE_IP_RANGES_BY_GA_ID;
10:40:46 169  
10:40:46 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
10:40:46 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:40:46 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:46 173  ) AS
10:40:46 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
10:40:46 175  BEGIN
10:40:46 176  	update
10:40:46 177  	  GROUP_ACCOUNT_IP_RANGE IR
10:40:46 178  	set
10:40:46 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_INACTIVE,
10:40:46 180  	  IR.UPDATED_BY = in_updated_by,
10:40:46 181  	  IR.UPDATE_DATE = sysdate
10:40:46 182  	where
10:40:46 183  	  IR.ID = in_id and
10:40:46 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE
10:40:46 185  	;
10:40:46 186  	if sql%rowcount = 0 then
10:40:46 187  	  raise NO_DATA_FOUND ;
10:40:46 188  	end if;
10:40:46 189  EXCEPTION
10:40:46 190  WHEN NO_DATA_FOUND THEN
10:40:46 191  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46 192  	  SPROC_NAME, 'Missing or invalid group_account_ip_range_id '||in_id, SQLERRM);
10:40:46 193  WHEN OTHERS THEN
10:40:46 194  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 195  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:40:46 196  END DISABLE_IP_RANGE_BY_ID;
10:40:46 197  
10:40:46 198  PROCEDURE ADD_IP_RANGE (
10:40:46 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:46 200  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:40:46 201  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:46 202  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:46 203  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:40:46 204  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:40:46 205  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:40:46 206  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:40:46 207  ) AS
10:40:46 208  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
10:40:46 209  BEGIN
10:40:46 210  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
10:40:46 211  	    ID,
10:40:46 212  	    GROUP_ACCOUNT_ID,
10:40:46 213  	    MINIMUM_IP_STRING,
10:40:46 214  	    MINIMUM_IP_LOW,
10:40:46 215  	    MINIMUM_IP_HIGH,
10:40:46 216  	    MAXIMUM_IP_STRING,
10:40:46 217  	    MAXIMUM_IP_LOW,
10:40:46 218  	    MAXIMUM_IP_HIGH,
10:40:46 219  	    CREATED_BY,
10:40:46 220  	    CREATE_DATE,
10:40:46 221  	    UPDATED_BY,
10:40:46 222  	    UPDATE_DATE,
10:40:46 223  	    GROUP_ACC_IP_RNG_STATUS_ID
10:40:46 224  	  )
10:40:46 225  	  VALUES (
10:40:46 226  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
10:40:46 227  	    in_group_account_id,
10:40:46 228  	    in_minimum_ip_string,
10:40:46 229  	    in_minimum_ip_low,
10:40:46 230  	    in_minimum_ip_high,
10:40:46 231  	    in_maximum_ip_string,
10:40:46 232  	    in_maximum_ip_low,
10:40:46 233  	    in_maximum_ip_high,
10:40:46 234  	    in_created_by,
10:40:46 235  	    sysdate,
10:40:46 236  	    in_created_by,
10:40:46 237  	    sysdate,
10:40:46 238  	    GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE
10:40:46 239  	  );
10:40:46 240  EXCEPTION
10:40:46 241  WHEN OTHERS THEN
10:40:46 242  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 243  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 244  END ADD_IP_RANGE;
10:40:46 245  
10:40:46 246  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:40:46 247  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:46 248  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:46 249  ) AS
10:40:46 250  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
10:40:46 251  BEGIN
10:40:46 252  	update
10:40:46 253  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:40:46 254  	set
10:40:46 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_INACT,
10:40:46 256  	  ED.UPDATED_BY = in_updated_by,
10:40:46 257  	  ED.UPDATE_DATE = sysdate
10:40:46 258  	where
10:40:46 259  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
10:40:46 260  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_ACT
10:40:46 261  	;
10:40:46 262  EXCEPTION
10:40:46 263  WHEN OTHERS THEN
10:40:46 264  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 265  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 266  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
10:40:46 267  
10:40:46 268  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
10:40:46 269  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:46 270  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:46 271  ) AS
10:40:46 272  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
10:40:46 273  BEGIN
10:40:46 274  	update
10:40:46 275  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:40:46 276  	set
10:40:46 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_INACT,
10:40:46 278  	  ED.UPDATED_BY = in_updated_by,
10:40:46 279  	  ED.UPDATE_DATE = sysdate
10:40:46 280  	where
10:40:46 281  	  ED.ID = in_id and
10:40:46 282  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_ACT
10:40:46 283  	;
10:40:46 284  EXCEPTION
10:40:46 285  WHEN OTHERS THEN
10:40:46 286  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 287  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:40:46 288  END DISABLE_EMAIL_DOMAIN_BY_ID;
10:40:46 289  
10:40:46 290  
10:40:46 291  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
10:40:46 292  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:46 293  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:46 294  ) AS
10:40:46 295  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
10:40:46 296  BEGIN
10:40:46 297  	update
10:40:46 298  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
10:40:46 299  	set
10:40:46 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_ACT,
10:40:46 301  	  ED.UPDATED_BY = in_updated_by,
10:40:46 302  	  ED.UPDATE_DATE = sysdate
10:40:46 303  	where
10:40:46 304  	  ED.ID = in_id and
10:40:46 305  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_INACT
10:40:46 306  	;
10:40:46 307  EXCEPTION
10:40:46 308  WHEN DUP_VAL_ON_INDEX THEN
10:40:46 309  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 310  		SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
10:40:46 311  WHEN OTHERS THEN
10:40:46 312  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 313  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
10:40:46 314  END ENABLE_EMAIL_DOMAIN_BY_ID;
10:40:46 315  
10:40:46 316  
10:40:46 317  PROCEDURE ADD_EMAIL_DOMAIN (
10:40:46 318  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:46 319  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:46 320  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:40:46 321  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:40:46 322  ) AS
10:40:46 323  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
10:40:46 324  BEGIN
10:40:46 325  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
10:40:46 326  	    ID,
10:40:46 327  	    GROUP_ACCOUNT_ID,
10:40:46 328  	    EMAIL_DOMAIN,
10:40:46 329  		IS_ACTIVE,
10:40:46 330  	    CREATED_BY,
10:40:46 331  	    CREATE_DATE,
10:40:46 332  	    UPDATED_BY,
10:40:46 333  	    UPDATE_DATE
10:40:46 334  	  )
10:40:46 335  	  VALUES (
10:40:46 336  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
10:40:46 337  	    in_group_account_id,
10:40:46 338  		in_email_domain,
10:40:46 339  		in_is_active,
10:40:46 340  		in_created_by,
10:40:46 341  	    sysdate,
10:40:46 342  	    in_created_by,
10:40:46 343  	    sysdate
10:40:46 344  	  );
10:40:46 345  EXCEPTION
10:40:46 346  WHEN DUP_VAL_ON_INDEX THEN
10:40:46 347  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 348  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
10:40:46 349  WHEN OTHERS THEN
10:40:46 350  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 351  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
10:40:46 352  END ADD_EMAIL_DOMAIN;
10:40:46 353  
10:40:46 354  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:40:46 355  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:46 356  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:40:46 357  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:40:46 358  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:40:46 359  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
10:40:46 360  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
10:40:46 361  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:46 362  ) AS
10:40:46 363  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
10:40:46 364  BEGIN
10:40:46 365  	update
10:40:46 366  	  group_account
10:40:46 367  	set
10:40:46 368  	  group_name = nvl(in_group_name, group_name),
10:40:46 369  	  first_name = nvl(in_first_name, first_name),
10:40:46 370  	  last_name = nvl(in_last_name, last_name),
10:40:46 371  	  email = nvl(in_email, email),
10:40:46 372  	  phone = nvl(in_phone, phone),
10:40:46 373  	  updated_by = in_updated_by,
10:40:46 374  	  update_date = sysdate
10:40:46 375  	where
10:40:46 376  	  id = in_group_account_id;
10:40:46 377  
10:40:46 378  	if(sql%rowcount = 0) then
10:40:46 379  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 380  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:40:46 381  	end if;
10:40:46 382  EXCEPTION
10:40:46 383  	WHEN OTHERS THEN
10:40:46 384  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 385  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
10:40:46 386  END UPDATE_GROUP_ACCOUNT;
10:40:46 387  
10:40:46 388  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:40:46 389  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
10:40:46 390  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
10:40:46 391  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:46 392  ) AS
10:40:46 393  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
10:40:46 394  var_subscription_id NUMBER;
10:40:46 395  var_seats NUMBER;
10:40:46 396  BEGIN
10:40:46 397  	select subscription_id, seats into var_subscription_id, var_seats
10:40:46 398  	from group_account
10:40:46 399  	where id = in_group_account_id;
10:40:46 400  
10:40:46 401  	update
10:40:46 402  	  group_account
10:40:46 403  	set
10:40:46 404  	  seats = in_seats,
10:40:46 405  	  updated_by = in_updated_by,
10:40:46 406  	  update_date = sysdate
10:40:46 407  	where
10:40:46 408  	  id = in_group_account_id;
10:40:46 409  
10:40:46 410  	if(sql%rowcount = 0) then
10:40:46 411  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 412  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:40:46 413  	end if;
10:40:46 414  
10:40:46 415  	PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:46 416  	  in_subscription_id => var_subscription_id,
10:40:46 417  	  in_agent_id	     => 0,
10:40:46 418  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
10:40:46 419  	  in_created_by      => in_updated_by
10:40:46 420  	);
10:40:46 421  EXCEPTION
10:40:46 422  	WHEN NO_DATA_FOUND THEN
10:40:46 423  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 424  	  SPROC_NAME, 'Group Account not found', SQLERRM);
10:40:46 425  	WHEN OTHERS THEN
10:40:46 426  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 427  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
10:40:46 428  END UPDATE_GROUP_ACCOUNT_SEATS;
10:40:46 429  
10:40:46 430  END PROCS_GROUP_ACCOUNT_CRU_V22;
10:40:46 431  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_INVOICE (
10:40:46   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
10:40:46   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
10:40:46   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
10:40:46   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
10:40:46   9  ) AS
10:40:46  10  -- VARIABLES
10:40:46  11  var_invoice_id INVOICE.ID%TYPE;
10:40:46  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  13  var_date DATE := SYSDATE;
10:40:46  14  BEGIN
10:40:46  15  	IF in_invoice_id IS NULL THEN
10:40:46  16  	  SELECT
10:40:46  17  	    INV_ID_SEQ.nextVal into var_invoice_id
10:40:46  18  	  FROM DUAL;
10:40:46  19  	ELSE
10:40:46  20  	  var_invoice_id := in_invoice_id;
10:40:46  21  	END IF;
10:40:46  22  	INSERT INTO
10:40:46  23  	  INVOICE (
10:40:46  24  	    ID,
10:40:46  25  	    INVOICE_STATUS_ID,
10:40:46  26  	    CREATE_DATE,
10:40:46  27  	    CREATED_BY,
10:40:46  28  	    UPDATE_DATE,
10:40:46  29  	    UPDATED_BY,
10:40:46  30  	    TAX_EXEMPT_ID,
10:40:46  31  	    IS_TAX_CALCULATION_NEEDED
10:40:46  32  	  ) VALUES (
10:40:46  33  	    var_invoice_id,
10:40:46  34  	    in_invoice_status_id,
10:40:46  35  	    var_date,
10:40:46  36  	    in_created_by,
10:40:46  37  	    var_date,
10:40:46  38  	    in_created_by,
10:40:46  39  	    in_tax_exempt_id,
10:40:46  40  	    0 -- DEFAULT VALUE
10:40:46  41  	  );
10:40:46  42  
10:40:46  43  	out_invoice_id := var_invoice_id;
10:40:46  44  END;
10:40:46  45  
10:40:46  46  /*****************************************************************/
10:40:46  47  
10:40:46  48  PROCEDURE UPDATE_INVOICE (
10:40:46  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
10:40:46  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
10:40:46  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
10:40:46  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
10:40:46  53  ) AS
10:40:46  54  BEGIN
10:40:46  55  	-- Create history
10:40:46  56  	PROCS_HISTORY_V22.CREATE_INVOICE_HISTORY(
10:40:46  57  	  in_invoice_id 	       => in_invoice_id,
10:40:46  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46  59  	);
10:40:46  60  
10:40:46  61  	UPDATE
10:40:46  62  	  INVOICE
10:40:46  63  	SET
10:40:46  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
10:40:46  65  	  UPDATE_DATE		    = SYSDATE,
10:40:46  66  	  UPDATED_BY		    = in_updated_by,
10:40:46  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
10:40:46  68  	WHERE
10:40:46  69  	  ID = in_invoice_id;
10:40:46  70  END;
10:40:46  71  
10:40:46  72  END PROCS_INVOICE_CRU_V22;
10:40:46  73  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_RECEIPT(
10:40:46   4  /*
10:40:46   5  Throws exceptions:
10:40:46   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46   7  */
10:40:46   8  	  out_id	      OUT NUMBER,
10:40:46   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:46  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:40:46  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:46  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:46  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:46  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:46  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:46  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:46  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:46  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:46  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:40:46  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:40:46  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:46  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
10:40:46  24  ) AS
10:40:46  25  -- VARIABLES
10:40:46  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
10:40:46  27  var_current_date	    DATE;
10:40:46  28  var_count 	    NUMBER;
10:40:46  29  ITUNES_ORG_TNX_USED   EXCEPTION;
10:40:46  30  BEGIN
10:40:46  31  	SELECT COUNT(1) into var_count
10:40:46  32  	FROM
10:40:46  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
10:40:46  34  	WHERE
10:40:46  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
10:40:46  36  	  IR.SUBSCRIPTION_ID = S.ID AND
10:40:46  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE;
10:40:46  38  
10:40:46  39  	if var_count > 0 then
10:40:46  40  	  raise ITUNES_ORG_TNX_USED;
10:40:46  41  	end if;
10:40:46  42  
10:40:46  43  	SELECT
10:40:46  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
10:40:46  45  	INTO
10:40:46  46  	  out_id
10:40:46  47  	FROM
10:40:46  48  	  dual
10:40:46  49  	;
10:40:46  50  
10:40:46  51  	SELECT
10:40:46  52  	  sysdate
10:40:46  53  	INTO
10:40:46  54  	  var_current_date
10:40:46  55  	FROM
10:40:46  56  	  dual
10:40:46  57  	;
10:40:46  58  
10:40:46  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
10:40:46  60  	(
10:40:46  61  	  id,
10:40:46  62  	  subscription_id,
10:40:46  63  	  receipt,
10:40:46  64  	  status,
10:40:46  65  	  quantity,
10:40:46  66  	  product_id,
10:40:46  67  	  transaction_id,
10:40:46  68  	  purchase_date,
10:40:46  69  	  original_transaction_id,
10:40:46  70  	  original_purchase_date,
10:40:46  71  	  app_item_id,
10:40:46  72  	  version_external_id,
10:40:46  73  	  bid,
10:40:46  74  	  bvrs,
10:40:46  75  	  expires_date,
10:40:46  76  	  create_date,
10:40:46  77  	  created_by,
10:40:46  78  	  update_date,
10:40:46  79  	  updated_by,
10:40:46  80  	  last_check_date
10:40:46  81  	)
10:40:46  82  	VALUES
10:40:46  83  	(
10:40:46  84  	  out_id,
10:40:46  85  	  in_subscription_id,
10:40:46  86  	  in_receipt,
10:40:46  87  	  in_status,
10:40:46  88  	  in_quantity,
10:40:46  89  	  in_product_id,
10:40:46  90  	  in_transaction_id,
10:40:46  91  	  in_purchase_date,
10:40:46  92  	  in_original_transaction_id,
10:40:46  93  	  in_original_purchase_date,
10:40:46  94  	  in_app_item_id,
10:40:46  95  	  in_version_external_id,
10:40:46  96  	  in_bid,
10:40:46  97  	  in_bvrs,
10:40:46  98  	  in_expires_date,
10:40:46  99  	  var_current_date,
10:40:46 100  	  in_created_by,
10:40:46 101  	  var_current_date,
10:40:46 102  	  in_created_by,
10:40:46 103  	  var_current_date
10:40:46 104  	);
10:40:46 105  
10:40:46 106  EXCEPTION
10:40:46 107  WHEN ITUNES_ORG_TNX_USED THEN
10:40:46 108  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
10:40:46 110  WHEN DUP_VAL_ON_INDEX THEN
10:40:46 111  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:40:46 113  WHEN OTHERS THEN
10:40:46 114  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 116  END CREATE_RECEIPT;
10:40:46 117  
10:40:46 118  PROCEDURE UPDATE_RECEIPT(
10:40:46 119  /*
10:40:46 120  Throws exceptions:
10:40:46 121  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 122  */
10:40:46 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:40:46 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:46 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
10:40:46 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:46 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:46 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:46 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:46 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:46 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:46 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:46 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:46 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
10:40:46 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
10:40:46 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:46 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:40:46 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
10:40:46 139  ) AS
10:40:46 140  -- VARIABLES
10:40:46 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
10:40:46 142  var_current_date	    DATE;
10:40:46 143  BEGIN
10:40:46 144  
10:40:46 145  	SELECT
10:40:46 146  	  sysdate
10:40:46 147  	INTO
10:40:46 148  	  var_current_date
10:40:46 149  	FROM
10:40:46 150  	  dual
10:40:46 151  	;
10:40:46 152  
10:40:46 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
10:40:46 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_ITUNES_RECEIPT_HISTORY
10:40:46 155  	  (
10:40:46 156  	      rec.id,
10:40:46 157  	      rec.subscription_id,
10:40:46 158  	      rec.receipt,
10:40:46 159  	      rec.status,
10:40:46 160  	      rec.quantity,
10:40:46 161  	      rec.product_id,
10:40:46 162  	      rec.transaction_id,
10:40:46 163  	      rec.purchase_date,
10:40:46 164  	      rec.original_transaction_id,
10:40:46 165  	      rec.original_purchase_date,
10:40:46 166  	      rec.app_item_id,
10:40:46 167  	      rec.version_external_id,
10:40:46 168  	      rec.bid,
10:40:46 169  	      rec.bvrs,
10:40:46 170  	      rec.expires_date,
10:40:46 171  	      rec.create_date,
10:40:46 172  	      rec.created_by,
10:40:46 173  	      rec.update_date,
10:40:46 174  	      rec.updated_by,
10:40:46 175  	      rec.last_check_date,
10:40:46 176  	      rec.cancel_date
10:40:46 177  	  );
10:40:46 178  	END LOOP;
10:40:46 179  
10:40:46 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
10:40:46 181  	SET
10:40:46 182  	  receipt = in_receipt,
10:40:46 183  	  status = in_status,
10:40:46 184  	  quantity = in_quantity,
10:40:46 185  	  product_id = in_product_id,
10:40:46 186  	  transaction_id = in_transaction_id,
10:40:46 187  	  purchase_date = in_purchase_date,
10:40:46 188  	  original_transaction_id = in_original_transaction_id,
10:40:46 189  	  original_purchase_date = in_original_purchase_date,
10:40:46 190  	  app_item_id = in_app_item_id,
10:40:46 191  	  version_external_id = in_version_external_id,
10:40:46 192  	  bid = in_bid,
10:40:46 193  	  bvrs = in_bvrs,
10:40:46 194  	  expires_date = in_expires_date,
10:40:46 195  	  update_date = var_current_date,
10:40:46 196  	  updated_by = in_updated_by,
10:40:46 197  	  last_check_date = var_current_date,
10:40:46 198  	  cancel_date = in_cancel_date
10:40:46 199  	WHERE
10:40:46 200  	  id = in_id
10:40:46 201  	;
10:40:46 202  
10:40:46 203  EXCEPTION
10:40:46 204  WHEN DUP_VAL_ON_INDEX THEN
10:40:46 205  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
10:40:46 207  WHEN OTHERS THEN
10:40:46 208  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 210  
10:40:46 211  END UPDATE_RECEIPT;
10:40:46 212  
10:40:46 213  PROCEDURE LINK_ITUNES_RECEIPT(
10:40:46 214  /*
10:40:46 215  Throws exceptions:
10:40:46 216  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 217  */
10:40:46 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
10:40:46 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
10:40:46 221  ) AS
10:40:46 222  -- VARIABLES
10:40:46 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
10:40:46 224  var_current_date	    DATE;
10:40:46 225  BEGIN
10:40:46 226  
10:40:46 227  	      SELECT
10:40:46 228  	  sysdate
10:40:46 229  	      INTO
10:40:46 230  	  var_current_date
10:40:46 231  	      FROM
10:40:46 232  	  dual
10:40:46 233  	      ;
10:40:46 234  
10:40:46 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
10:40:46 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_ITUNES_RECEIPT_HISTORY
10:40:46 237  	      (
10:40:46 238  	    rec.id,
10:40:46 239  	    rec.subscription_id,
10:40:46 240  	    rec.receipt,
10:40:46 241  	    rec.status,
10:40:46 242  	    rec.quantity,
10:40:46 243  	    rec.product_id,
10:40:46 244  	    rec.transaction_id,
10:40:46 245  	    rec.purchase_date,
10:40:46 246  	    rec.original_transaction_id,
10:40:46 247  	    rec.original_purchase_date,
10:40:46 248  	    rec.app_item_id,
10:40:46 249  	    rec.version_external_id,
10:40:46 250  	    rec.bid,
10:40:46 251  	    rec.bvrs,
10:40:46 252  	    rec.expires_date,
10:40:46 253  	    rec.create_date,
10:40:46 254  	    rec.created_by,
10:40:46 255  	    rec.update_date,
10:40:46 256  	    rec.updated_by,
10:40:46 257  	    rec.last_check_date,
10:40:46 258  	    rec.cancel_date
10:40:46 259  	      );
10:40:46 260  	      END LOOP;
10:40:46 261  
10:40:46 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
10:40:46 263  		SET
10:40:46 264  		      subscription_id = in_subscription_id,
10:40:46 265  		      update_date = var_current_date,
10:40:46 266  	      updated_by = in_updated_by,
10:40:46 267  	      last_check_date = var_current_date
10:40:46 268  	      WHERE
10:40:46 269  		  id = in_id
10:40:46 270  	      ;
10:40:46 271  
10:40:46 272  	      EXCEPTION
10:40:46 273  	      WHEN DUP_VAL_ON_INDEX THEN
10:40:46 274  		PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:46 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
10:40:46 276  	      WHEN OTHERS THEN
10:40:46 277  		PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 279  END LINK_ITUNES_RECEIPT;
10:40:46 280  
10:40:46 281  
10:40:46 282  PROCEDURE MARK_RECEIPT_CHECKED(
10:40:46 283  /*
10:40:46 284  Throws exceptions:
10:40:46 285  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 286  */
10:40:46 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
10:40:46 288  ) AS
10:40:46 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
10:40:46 290  BEGIN
10:40:46 291  	UPDATE
10:40:46 292  	  CORE_OWNER.ITUNES_RECEIPT
10:40:46 293  	SET
10:40:46 294  	  last_check_date = sysdate
10:40:46 295  	WHERE
10:40:46 296  	  id = in_id
10:40:46 297  	;
10:40:46 298  EXCEPTION
10:40:46 299  WHEN OTHERS THEN
10:40:46 300  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 302  END MARK_RECEIPT_CHECKED;
10:40:46 303  
10:40:46 304  END PROCS_ITUNES_RECEIPT_CRU_V22;
10:40:46 305  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_LICENSE(
10:40:46   4  	out_license_id		    OUT LICENSE.ID%TYPE,
10:40:46   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
10:40:46   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
10:40:46   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
10:40:46   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
10:40:46  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
10:40:46  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
10:40:46  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
10:40:46  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
10:40:46  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
10:40:46  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
10:40:46  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
10:40:46  17  ) AS
10:40:46  18  -- VARIABLES
10:40:46  19  var_license_id LICENSE.ID%TYPE;
10:40:46  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  21  var_date DATE := SYSDATE;
10:40:46  22  BEGIN
10:40:46  23  	IF in_license_id IS NULL THEN
10:40:46  24  	  SELECT
10:40:46  25  	    LCN_ID_SEQ.nextVal into var_license_id
10:40:46  26  	  FROM DUAL;
10:40:46  27  	ELSE
10:40:46  28  	  var_license_id := in_license_id;
10:40:46  29  	END IF;
10:40:46  30  	INSERT INTO
10:40:46  31  	  LICENSE (
10:40:46  32  	    ID,
10:40:46  33  	    LICENSE_STATUS_ID,
10:40:46  34  	    NEEDS_ENTITLEMENTS,
10:40:46  35  	    START_DATE,
10:40:46  36  	    OFFER_ID,
10:40:46  37  	    SUBSCRIPTION_ID,
10:40:46  38  	    INVOICE_ID,
10:40:46  39  	    END_DATE,
10:40:46  40  	    CREATE_DATE,
10:40:46  41  	    CREATED_BY,
10:40:46  42  	    UPDATE_DATE,
10:40:46  43  	    UPDATED_BY,
10:40:46  44  	    IS_EXTENSION,
10:40:46  45  	    CURRENT_OFFER_INDEX,
10:40:46  46  	    CURRENT_OFFER_RECURR_NUM,
10:40:46  47  	    ENTITLEMENT_END_DATE
10:40:46  48  	  ) VALUES (
10:40:46  49  	    var_license_id,
10:40:46  50  	    in_license_status_id,
10:40:46  51  	    in_needs_entitlements,
10:40:46  52  	    in_start_date,
10:40:46  53  	    in_offer_id,
10:40:46  54  	    in_subscription_id,
10:40:46  55  	    in_invoice_id,
10:40:46  56  	    in_end_date,
10:40:46  57  	    var_date,
10:40:46  58  	    in_created_by,
10:40:46  59  	    var_date,
10:40:46  60  	    in_created_by,
10:40:46  61  	    in_is_extension,
10:40:46  62  	    in_current_offer_index,
10:40:46  63  	    in_current_offer_recurr_num,
10:40:46  64  	    in_end_date
10:40:46  65  	  );
10:40:46  66  
10:40:46  67  	out_license_id := var_license_id;
10:40:46  68  END CREATE_LICENSE;
10:40:46  69  
10:40:46  70  /********************************************************************/
10:40:46  71  
10:40:46  72  PROCEDURE UPDATE_LICENSE (
10:40:46  73  	in_license_id		    IN LICENSE.ID%TYPE,
10:40:46  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
10:40:46  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
10:40:46  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
10:40:46  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
10:40:46  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
10:40:46  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
10:40:46  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
10:40:46  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
10:40:46  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
10:40:46  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
10:40:46  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
10:40:46  85  ) AS
10:40:46  86  BEGIN
10:40:46  87  	-- Create history
10:40:46  88  	PROCS_HISTORY_V22.CREATE_LICENSE_HISTORY(
10:40:46  89  	  in_license_id 	       => in_license_id,
10:40:46  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46  91  	);
10:40:46  92  
10:40:46  93  	UPDATE
10:40:46  94  	  LICENSE
10:40:46  95  	SET
10:40:46  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
10:40:46  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
10:40:46  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
10:40:46  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
10:40:46 100  	  UPDATE_DATE		   = SYSDATE,
10:40:46 101  	  UPDATED_BY		   = in_updated_by,
10:40:46 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
10:40:46 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
10:40:46 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
10:40:46 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
10:40:46 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
10:40:46 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
10:40:46 108  	WHERE
10:40:46 109  	  LICENSE.ID = in_license_id;
10:40:46 110  END UPDATE_LICENSE;
10:40:46 111  
10:40:46 112  END PROCS_LICENSE_CRU_V22;
10:40:46 113  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_LINE_ITEM (
10:40:46   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
10:40:46   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
10:40:46   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
10:40:46   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
10:40:46   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
10:40:46   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
10:40:46  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
10:40:46  11  ) AS
10:40:46  12  BEGIN
10:40:46  13  	IF inout_line_item_id IS NULL THEN
10:40:46  14  	  SELECT
10:40:46  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
10:40:46  16  	  FROM DUAL;
10:40:46  17  	END IF;
10:40:46  18  	INSERT INTO LINE_ITEM (
10:40:46  19  	  ID,
10:40:46  20  	  PRODUCT_OFFER_ID,
10:40:46  21  	  INVOICE_ID,
10:40:46  22  	  AMOUNT,
10:40:46  23  	  QUANTITY,
10:40:46  24  	  CREATE_DATE,
10:40:46  25  	  CREATED_BY,
10:40:46  26  	  DISCOUNT_AMOUNT,
10:40:46  27  	  TAXES_AMOUNT
10:40:46  28  	) VALUES (
10:40:46  29  	  inout_line_item_id,
10:40:46  30  	  in_product_offer_id,
10:40:46  31  	  in_invoice_id,
10:40:46  32  	  in_amount,
10:40:46  33  	  1, -- [REVU]: Deprecated. Ignore this field
10:40:46  34  	  SYSDATE,
10:40:46  35  	  in_created_by,
10:40:46  36  	  in_discount_amount,
10:40:46  37  	  in_taxes_amount
10:40:46  38  	);
10:40:46  39  END CREATE_LINE_ITEM;
10:40:46  40  
10:40:46  41  /******************************************************************************/
10:40:46  42  
10:40:46  43  PROCEDURE UPDATE_LINE_ITEM (
10:40:46  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
10:40:46  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
10:40:46  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
10:40:46  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
10:40:46  48  ) AS
10:40:46  49  BEGIN
10:40:46  50  	UPDATE
10:40:46  51  	  LINE_ITEM
10:40:46  52  	SET
10:40:46  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
10:40:46  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
10:40:46  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
10:40:46  56  	WHERE
10:40:46  57  	  LINE_ITEM.ID = in_line_item_id;
10:40:46  58  END UPDATE_LINE_ITEM;
10:40:46  59  
10:40:46  60  /******************************************************************************/
10:40:46  61  
10:40:46  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
10:40:46  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
10:40:46  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
10:40:46  65  ) AS
10:40:46  66  BEGIN
10:40:46  67  	INSERT INTO DISCOUNT_LINE_ITEM(
10:40:46  68  	  DISCOUNT_ID,
10:40:46  69  	  LINE_ITEM_ID
10:40:46  70  	) VALUES (
10:40:46  71  	  in_discount_id,
10:40:46  72  	  in_line_item_id
10:40:46  73  	);
10:40:46  74  END CREATE_DISCOUNT_LINE_ITEM;
10:40:46  75  
10:40:46  76  END PROCS_LINE_ITEMS_CRU_V22;
10:40:46  77  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.00
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
10:40:46   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
10:40:46   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
10:40:46   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
10:40:46   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
10:40:46  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
10:40:46  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
10:40:46  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:46  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
10:40:46  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
10:40:46  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
10:40:46  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:46  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:46  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
10:40:46  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
10:40:46  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
10:40:46  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
10:40:46  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
10:40:46  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
10:40:46  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
10:40:46  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
10:40:46  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
10:40:46  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
10:40:46  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
10:40:46  29  ) AS
10:40:46  30  -- VARIABLES
10:40:46  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
10:40:46  32  var_date DATE := SYSDATE;
10:40:46  33  BEGIN
10:40:46  34  	IF in_cpt_chargeback_act_id IS NULL THEN
10:40:46  35  	  SELECT
10:40:46  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
10:40:46  37  	  FROM DUAL;
10:40:46  38  	ELSE
10:40:46  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
10:40:46  40  	END IF;
10:40:46  41  	INSERT INTO
10:40:46  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
10:40:46  43  	    id,
10:40:46  44  	    rcn_ext_source_log_id,
10:40:46  45  	    record_type,
10:40:46  46  	    entity_type,
10:40:46  47  	    entity_number,
10:40:46  48  	    chargeback_amount_issuer,
10:40:46  49  	    prev_partial_representment,
10:40:46  50  	    presentment_currency,
10:40:46  51  	    chargeback_category,
10:40:46  52  	    status_flag,
10:40:46  53  	    sequence_number,
10:40:46  54  	    merchant_order_number,
10:40:46  55  	    account_number,
10:40:46  56  	    reason_code,
10:40:46  57  	    transaction_date,
10:40:46  58  	    chargeback_date,
10:40:46  59  	    activity_date,
10:40:46  60  	    chargeback_amount_action,
10:40:46  61  	    fee_amount,
10:40:46  62  	    usage_code,
10:40:46  63  	    mop_code,
10:40:46  64  	    authorization_date,
10:40:46  65  	    chargeback_due_date,
10:40:46  66  	    create_date,
10:40:46  67  	    created_by
10:40:46  68  	  ) VALUES (
10:40:46  69  	    var_cpt_chargeback_act_id,
10:40:46  70  	    in_ext_source_log_id,
10:40:46  71  	    in_record_type,
10:40:46  72  	    in_entity_type,
10:40:46  73  	    in_entity_number,
10:40:46  74  	    in_chargeback_amount_issuer,
10:40:46  75  	    in_prev_partial_repres,
10:40:46  76  	    in_presentment_currency,
10:40:46  77  	    in_chargeback_category,
10:40:46  78  	    in_status_flag,
10:40:46  79  	    in_sequence_number,
10:40:46  80  	    in_merchant_order_number,
10:40:46  81  	    in_account_number,
10:40:46  82  	    in_reason_code,
10:40:46  83  	    in_transaction_date,
10:40:46  84  	    in_chargeback_date,
10:40:46  85  	    in_activity_date,
10:40:46  86  	    in_chargeback_amount_action,
10:40:46  87  	    in_fee_amount,
10:40:46  88  	    in_usage_code,
10:40:46  89  	    in_mop_code,
10:40:46  90  	    in_authorization_date,
10:40:46  91  	    in_chargeback_due_date,
10:40:46  92  	    var_date,
10:40:46  93  	    in_created_by
10:40:46  94  	  );
10:40:46  95  
10:40:46  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
10:40:46  97  END CREATE_CPT_CHARGEBACK_ACT;
10:40:46  98  
10:40:46  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
10:40:46 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
10:40:46 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
10:40:46 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
10:40:46 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
10:40:46 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
10:40:46 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:46 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:40:46 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
10:40:46 108  ) AS
10:40:46 109  -- VARIABLES
10:40:46 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
10:40:46 111  var_date DATE := SYSDATE;
10:40:46 112  BEGIN
10:40:46 113  	IF in_ext_source_log_id IS NULL THEN
10:40:46 114  	  SELECT
10:40:46 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
10:40:46 116  	  FROM DUAL;
10:40:46 117  	ELSE
10:40:46 118  	  var_ext_source_log_id := in_ext_source_log_id;
10:40:46 119  	END IF;
10:40:46 120  	INSERT INTO
10:40:46 121  	  RCN_EXT_SOURCE_LOG (
10:40:46 122  	    id,
10:40:46 123  	    extraction_timestamp,
10:40:46 124  	    report_date,
10:40:46 125  	    report_generation_datetime,
10:40:46 126  	    record_type,
10:40:46 127  	    report_file_name,
10:40:46 128  	    create_date,
10:40:46 129  	    created_by
10:40:46 130  	  ) VALUES (
10:40:46 131  	    var_ext_source_log_id,
10:40:46 132  	    in_extraction_timestamp,
10:40:46 133  	    in_report_date,
10:40:46 134  	    in_report_gen_datetime,
10:40:46 135  	    in_record_type,
10:40:46 136  	    in_report_file_name,
10:40:46 137  	    var_date,
10:40:46 138  	    in_created_by
10:40:46 139  	  );
10:40:46 140  
10:40:46 141  	out_ext_source_log_id := var_ext_source_log_id;
10:40:46 142  END CREATE_EXT_SOURCE_LOG;
10:40:46 143  
10:40:46 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
10:40:46 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
10:40:46 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
10:40:46 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
10:40:46 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
10:40:46 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
10:40:46 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
10:40:46 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
10:40:46 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
10:40:46 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
10:40:46 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
10:40:46 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
10:40:46 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
10:40:46 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
10:40:46 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
10:40:46 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
10:40:46 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
10:40:46 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
10:40:46 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
10:40:46 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
10:40:46 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
10:40:46 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
10:40:46 167  ) AS
10:40:46 168  -- VARIABLES
10:40:46 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
10:40:46 170  var_date DATE := SYSDATE;
10:40:46 171  BEGIN
10:40:46 172  	IF in_cpt_service_charge_id IS NULL THEN
10:40:46 173  	  SELECT
10:40:46 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
10:40:46 175  	  FROM DUAL;
10:40:46 176  	ELSE
10:40:46 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
10:40:46 178  	END IF;
10:40:46 179  	INSERT INTO
10:40:46 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
10:40:46 181  	    id,
10:40:46 182  	    rcn_ext_source_log_id,
10:40:46 183  	    record_type,
10:40:46 184  	    category,
10:40:46 185  	    sub_category,
10:40:46 186  	    entity_type,
10:40:46 187  	    entity_number,
10:40:46 188  	    funds_transfer_inst_number,
10:40:46 189  	    secure_ba_number,
10:40:46 190  	    settlement_currency,
10:40:46 191  	    fee_schedule,
10:40:46 192  	    mop,
10:40:46 193  	    interchange_qualification,
10:40:46 194  	    fee_type_description,
10:40:46 195  	    action_type,
10:40:46 196  	    unit_quantity,
10:40:46 197  	    unit_fee,
10:40:46 198  	    amount,
10:40:46 199  	    percentage_rate,
10:40:46 200  	    total_charge,
10:40:46 201  	    create_date,
10:40:46 202  	    created_by
10:40:46 203  	  ) VALUES (
10:40:46 204  	    var_cpt_service_charge_id,
10:40:46 205  	    in_ext_source_log_id,
10:40:46 206  	    in_record_type,
10:40:46 207  	    in_category,
10:40:46 208  	    in_sub_category,
10:40:46 209  	    in_entity_type,
10:40:46 210  	    in_entity_number,
10:40:46 211  	    in_funds_trans_inst_number,
10:40:46 212  	    in_secure_ba_number,
10:40:46 213  	    in_settlement_currency,
10:40:46 214  	    in_fee_schedule,
10:40:46 215  	    in_mop,
10:40:46 216  	    in_interchange_qual,
10:40:46 217  	    in_fee_type_description,
10:40:46 218  	    in_action_type,
10:40:46 219  	    in_unit_quantity,
10:40:46 220  	    in_unit_fee,
10:40:46 221  	    in_amount,
10:40:46 222  	    in_percentage_rate,
10:40:46 223  	    in_total_charge,
10:40:46 224  	    var_date,
10:40:46 225  	    in_created_by
10:40:46 226  	  );
10:40:46 227  
10:40:46 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
10:40:46 229  END CREATE_CPT_SERVICE_CHARGE;
10:40:46 230  
10:40:46 231  PROCEDURE CREATE_CPT_EXCEPTION (
10:40:46 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
10:40:46 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
10:40:46 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
10:40:46 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
10:40:46 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
10:40:46 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
10:40:46 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
10:40:46 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
10:40:46 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
10:40:46 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
10:40:46 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:46 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:46 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
10:40:46 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:46 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
10:40:46 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
10:40:46 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
10:40:46 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
10:40:46 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
10:40:46 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
10:40:46 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:40:46 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
10:40:46 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:40:46 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
10:40:46 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
10:40:46 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
10:40:46 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
10:40:46 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
10:40:46 261  ) AS
10:40:46 262  -- VARIABLES
10:40:46 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
10:40:46 264  var_date DATE := SYSDATE;
10:40:46 265  BEGIN
10:40:46 266  	IF in_cpt_exception_id IS NULL THEN
10:40:46 267  	  SELECT
10:40:46 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
10:40:46 269  	  FROM DUAL;
10:40:46 270  	ELSE
10:40:46 271  	  var_cpt_exception_id := in_cpt_exception_id;
10:40:46 272  	END IF;
10:40:46 273  	INSERT INTO
10:40:46 274  	  RCN_CPT_EXCEPTION_DETAIL (
10:40:46 275  	    id,
10:40:46 276  	    rcn_ext_source_log_id,
10:40:46 277  	    record_type,
10:40:46 278  	    submission_date,
10:40:46 279  	    pid_number,
10:40:46 280  	    pid_short_name,
10:40:46 281  	    submission_number,
10:40:46 282  	    record_number,
10:40:46 283  	    entity_type,
10:40:46 284  	    entity_number,
10:40:46 285  	    presentment_currency,
10:40:46 286  	    merchant_order_number,
10:40:46 287  	    rdfi_number,
10:40:46 288  	    account_number,
10:40:46 289  	    expiration_date,
10:40:46 290  	    amount,
10:40:46 291  	    mop,
10:40:46 292  	    action_code,
10:40:46 293  	    auth_date,
10:40:46 294  	    auth_code,
10:40:46 295  	    auth_response_code,
10:40:46 296  	    trace_number,
10:40:46 297  	    consumer_country_code,
10:40:46 298  	    category,
10:40:46 299  	    mcc,
10:40:46 300  	    reject_code,
10:40:46 301  	    submission_status,
10:40:46 302  	    create_date,
10:40:46 303  	    created_by
10:40:46 304  	  ) VALUES (
10:40:46 305  	    var_cpt_exception_id,
10:40:46 306  	    in_ext_source_log_id,
10:40:46 307  	    in_record_type,
10:40:46 308  	    in_submission_date,
10:40:46 309  	    in_pid_number,
10:40:46 310  	    in_pid_short_name,
10:40:46 311  	    in_submission_number,
10:40:46 312  	    in_record_number,
10:40:46 313  	    in_entity_type,
10:40:46 314  	    in_entity_number,
10:40:46 315  	    in_presentment_currency,
10:40:46 316  	    in_merchant_order_number,
10:40:46 317  	    in_rdfi_number,
10:40:46 318  	    in_account_number,
10:40:46 319  	    in_expiration_date,
10:40:46 320  	    in_amount,
10:40:46 321  	    in_mop,
10:40:46 322  	    in_action_code,
10:40:46 323  	    in_auth_date,
10:40:46 324  	    in_auth_code,
10:40:46 325  	    in_auth_response_code,
10:40:46 326  	    in_trace_number,
10:40:46 327  	    in_consumer_country_code,
10:40:46 328  	    in_category,
10:40:46 329  	    in_mcc,
10:40:46 330  	    in_reject_code,
10:40:46 331  	    in_submission_status,
10:40:46 332  	    var_date,
10:40:46 333  	    in_created_by
10:40:46 334  	  );
10:40:46 335  
10:40:46 336  	out_cpt_exception_id := var_cpt_exception_id;
10:40:46 337  END CREATE_CPT_EXCEPTION;
10:40:46 338  
10:40:46 339  PROCEDURE CREATE_CPT_DEPOSIT (
10:40:46 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
10:40:46 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
10:40:46 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
10:40:46 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
10:40:46 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
10:40:46 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
10:40:46 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
10:40:46 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
10:40:46 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
10:40:46 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
10:40:46 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
10:40:46 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
10:40:46 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
10:40:46 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
10:40:46 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
10:40:46 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
10:40:46 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
10:40:46 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
10:40:46 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
10:40:46 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
10:40:46 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
10:40:46 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
10:40:46 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
10:40:46 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
10:40:46 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
10:40:46 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
10:40:46 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
10:40:46 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
10:40:46 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
10:40:46 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
10:40:46 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
10:40:46 372  ) AS
10:40:46 373  -- VARIABLES
10:40:46 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
10:40:46 375  var_date DATE := SYSDATE;
10:40:46 376  BEGIN
10:40:46 377  	IF in_cpt_deposit_id IS NULL THEN
10:40:46 378  	  SELECT
10:40:46 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
10:40:46 380  	  FROM DUAL;
10:40:46 381  	ELSE
10:40:46 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
10:40:46 383  	END IF;
10:40:46 384  	INSERT INTO
10:40:46 385  	  RCN_CPT_DEPOSIT_DETAIL (
10:40:46 386  	    id,
10:40:46 387  	    rcn_ext_source_log_id,
10:40:46 388  	    record_type,
10:40:46 389  	    submission_date,
10:40:46 390  	    pid_number,
10:40:46 391  	    pid_short_name,
10:40:46 392  	    submission_number,
10:40:46 393  	    record_number,
10:40:46 394  	    entity_type,
10:40:46 395  	    entity_number,
10:40:46 396  	    presentment_currency,
10:40:46 397  	    merchant_order_number,
10:40:46 398  	    rdfi_number,
10:40:46 399  	    account_number,
10:40:46 400  	    expiration_date,
10:40:46 401  	    amount,
10:40:46 402  	    mop,
10:40:46 403  	    action_code,
10:40:46 404  	    auth_date,
10:40:46 405  	    auth_code,
10:40:46 406  	    auth_response_code,
10:40:46 407  	    trace_number,
10:40:46 408  	    consumer_country_code,
10:40:46 409  	    mcc,
10:40:46 410  	    fee_code,
10:40:46 411  	    unit_fee,
10:40:46 412  	    percent_fee,
10:40:46 413  	    total_interchange_fee,
10:40:46 414  	    total_assessment_fee,
10:40:46 415  	    other_fee,
10:40:46 416  	    create_date,
10:40:46 417  	    created_by
10:40:46 418  	  ) VALUES (
10:40:46 419  	    var_cpt_deposit_id,
10:40:46 420  	    in_ext_source_log_id,
10:40:46 421  	    in_record_type,
10:40:46 422  	    in_submission_date,
10:40:46 423  	    in_pid_number,
10:40:46 424  	    in_pid_short_name,
10:40:46 425  	    in_submission_number,
10:40:46 426  	    in_record_number,
10:40:46 427  	    in_entity_type,
10:40:46 428  	    in_entity_number,
10:40:46 429  	    in_presentment_currency,
10:40:46 430  	    in_merchant_order_number,
10:40:46 431  	    in_rdfi_number,
10:40:46 432  	    in_account_number,
10:40:46 433  	    in_expiration_date,
10:40:46 434  	    in_amount,
10:40:46 435  	    in_mop,
10:40:46 436  	    in_action_code,
10:40:46 437  	    in_auth_date,
10:40:46 438  	    in_auth_code,
10:40:46 439  	    in_auth_response_code,
10:40:46 440  	    in_trace_number,
10:40:46 441  	    in_consumer_country_code,
10:40:46 442  	    in_mcc,
10:40:46 443  	    in_fee_code,
10:40:46 444  	    in_unit_fee,
10:40:46 445  	    in_percent_fee,
10:40:46 446  	    in_total_interchange_fee,
10:40:46 447  	    in_total_assessment_fee,
10:40:46 448  	    in_other_fee,
10:40:46 449  	    var_date,
10:40:46 450  	    in_created_by
10:40:46 451  	  );
10:40:46 452  
10:40:46 453  	out_cpt_deposit_id := var_cpt_deposit_id;
10:40:46 454  END CREATE_CPT_DEPOSIT;
10:40:46 455  
10:40:46 456  PROCEDURE CREATE_PP_SETTLEMENT (
10:40:46 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
10:40:46 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
10:40:46 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
10:40:46 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
10:40:46 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
10:40:46 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
10:40:46 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
10:40:46 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
10:40:46 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
10:40:46 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
10:40:46 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
10:40:46 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
10:40:46 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
10:40:46 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
10:40:46 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
10:40:46 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
10:40:46 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
10:40:46 475  ) AS
10:40:46 476  -- VARIABLES
10:40:46 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
10:40:46 478  var_date DATE := SYSDATE;
10:40:46 479  BEGIN
10:40:46 480  	IF in_pp_settlement_id IS NULL THEN
10:40:46 481  	  SELECT
10:40:46 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
10:40:46 483  	  FROM DUAL;
10:40:46 484  	ELSE
10:40:46 485  	  var_pp_settlement_id := in_pp_settlement_id;
10:40:46 486  	END IF;
10:40:46 487  	INSERT INTO
10:40:46 488  	  RCN_PP_SETTLEMENT (
10:40:46 489  	    id,
10:40:46 490  	    rcn_ext_source_log_id,
10:40:46 491  	    transaction_id,
10:40:46 492  	    invoice_id,
10:40:46 493  	    pp_ref_id,
10:40:46 494  	    pp_ref_id_type,
10:40:46 495  	    trans_event_code,
10:40:46 496  	    trans_init_date,
10:40:46 497  	    trans_comp_date,
10:40:46 498  	    trans_deb_or_cred,
10:40:46 499  	    gross_trans_amount,
10:40:46 500  	    gross_trans_currency,
10:40:46 501  	    fee_deb_or_cred,
10:40:46 502  	    fee_amount,
10:40:46 503  	    fee_currency,
10:40:46 504  	    custom_field,
10:40:46 505  	    create_date,
10:40:46 506  	    created_by
10:40:46 507  	  ) VALUES (
10:40:46 508  	    var_pp_settlement_id,
10:40:46 509  	    in_ext_source_log_id,
10:40:46 510  	    in_transaction_id,
10:40:46 511  	    in_invoice_id,
10:40:46 512  	    in_pp_ref_id,
10:40:46 513  	    in_pp_ref_id_type,
10:40:46 514  	    in_trans_event_code,
10:40:46 515  	    in_trans_init_date,
10:40:46 516  	    in_trans_comp_date,
10:40:46 517  	    in_trans_deb_or_cred,
10:40:46 518  	    in_gross_trans_amount,
10:40:46 519  	    in_gross_trans_currency,
10:40:46 520  	    in_fee_deb_or_cred,
10:40:46 521  	    in_fee_amount,
10:40:46 522  	    in_fee_currency,
10:40:46 523  	    in_custom_field,
10:40:46 524  	    var_date,
10:40:46 525  	    in_created_by
10:40:46 526  	  );
10:40:46 527  
10:40:46 528  	out_pp_settlement_id := var_pp_settlement_id;
10:40:46 529  END CREATE_PP_SETTLEMENT;
10:40:46 530  
10:40:46 531  PROCEDURE CREATE_PP_DISPUTE (
10:40:46 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
10:40:46 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
10:40:46 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
10:40:46 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
10:40:46 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
10:40:46 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
10:40:46 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
10:40:46 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
10:40:46 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
10:40:46 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
10:40:46 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
10:40:46 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
10:40:46 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
10:40:46 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
10:40:46 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
10:40:46 548  ) AS
10:40:46 549  -- VARIABLES
10:40:46 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
10:40:46 551  var_date DATE := SYSDATE;
10:40:46 552  BEGIN
10:40:46 553  	IF in_pp_dispute_id IS NULL THEN
10:40:46 554  	  SELECT
10:40:46 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
10:40:46 556  	  FROM DUAL;
10:40:46 557  	ELSE
10:40:46 558  	  var_pp_dispute_id := in_pp_dispute_id;
10:40:46 559  	END IF;
10:40:46 560  	INSERT INTO
10:40:46 561  	  RCN_PP_DISPUTE (
10:40:46 562  	    id,
10:40:46 563  	    rcn_ext_source_log_id,
10:40:46 564  	    dispute_type,
10:40:46 565  	    claimant_name,
10:40:46 566  	    claimant_email,
10:40:46 567  	    transaction_id,
10:40:46 568  	    trans_date,
10:40:46 569  	    disputed_amount,
10:40:46 570  	    disputed_amount_currency,
10:40:46 571  	    dispute_reason,
10:40:46 572  	    dispute_filing_date,
10:40:46 573  	    dispute_status,
10:40:46 574  	    dispute_case_id,
10:40:46 575  	    invoice_id,
10:40:46 576  	    create_date,
10:40:46 577  	    created_by
10:40:46 578  	  ) VALUES (
10:40:46 579  	    var_pp_dispute_id,
10:40:46 580  	    in_ext_source_log_id,
10:40:46 581  	    in_dispute_type,
10:40:46 582  	    in_claimant_name,
10:40:46 583  	    in_claimant_email,
10:40:46 584  	    in_transaction_id,
10:40:46 585  	    in_trans_date,
10:40:46 586  	    in_disputed_amount,
10:40:46 587  	    in_disputed_amount_currency,
10:40:46 588  	    in_dispute_reason,
10:40:46 589  	    in_dispute_filing_date,
10:40:46 590  	    in_dispute_status,
10:40:46 591  	    in_dispute_case_id,
10:40:46 592  	    in_invoice_id,
10:40:46 593  	    var_date,
10:40:46 594  	    in_created_by
10:40:46 595  	  );
10:40:46 596  
10:40:46 597  	out_pp_dispute_id := var_pp_dispute_id;
10:40:46 598  END CREATE_PP_DISPUTE;
10:40:46 599  
10:40:46 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
10:40:46 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
10:40:46 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
10:40:46 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
10:40:46 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
10:40:46 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
10:40:46 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
10:40:46 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
10:40:46 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
10:40:46 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
10:40:46 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
10:40:46 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
10:40:46 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
10:40:46 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
10:40:46 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
10:40:46 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
10:40:46 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
10:40:46 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
10:40:46 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
10:40:46 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
10:40:46 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
10:40:46 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
10:40:46 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
10:40:46 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
10:40:46 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
10:40:46 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
10:40:46 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
10:40:46 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
10:40:46 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
10:40:46 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
10:40:46 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
10:40:46 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
10:40:46 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
10:40:46 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
10:40:46 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
10:40:46 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
10:40:46 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
10:40:46 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
10:40:46 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
10:40:46 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
10:40:46 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
10:40:46 641  ) AS
10:40:46 642  -- VARIABLES
10:40:46 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
10:40:46 644  var_date DATE := SYSDATE;
10:40:46 645  BEGIN
10:40:46 646  	IF in_pp_trans_detail_id IS NULL THEN
10:40:46 647  	  SELECT
10:40:46 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
10:40:46 649  	  FROM DUAL;
10:40:46 650  	ELSE
10:40:46 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
10:40:46 652  	END IF;
10:40:46 653  	INSERT INTO
10:40:46 654  	  RCN_PP_TRANS_DETAIL (
10:40:46 655  	    id,
10:40:46 656  	    rcn_ext_source_log_id,
10:40:46 657  	    transaction_id,
10:40:46 658  	    invoice_id,
10:40:46 659  	    pp_ref_id,
10:40:46 660  	    trans_event_code,
10:40:46 661  	    trans_init_date,
10:40:46 662  	    trans_comp_date,
10:40:46 663  	    trans_deb_or_cred,
10:40:46 664  	    gross_trans_amount,
10:40:46 665  	    gross_trans_currency,
10:40:46 666  	    fee_deb_or_cred,
10:40:46 667  	    fee_amount,
10:40:46 668  	    fee_currency,
10:40:46 669  	    trans_status,
10:40:46 670  	    insurance_amount,
10:40:46 671  	    sales_tax_amount,
10:40:46 672  	    shipping_amount,
10:40:46 673  	    trans_subject,
10:40:46 674  	    trans_note,
10:40:46 675  	    payer_acct_id,
10:40:46 676  	    payer_addr_status,
10:40:46 677  	    item_name,
10:40:46 678  	    item_id,
10:40:46 679  	    option_1_name,
10:40:46 680  	    option_1_value,
10:40:46 681  	    option_2_name,
10:40:46 682  	    option_2_value,
10:40:46 683  	    auction_site,
10:40:46 684  	    auction_buyer_id,
10:40:46 685  	    auction_closing_date,
10:40:46 686  	    shipping_addr_line_1,
10:40:46 687  	    shipping_addr_line_2,
10:40:46 688  	    shipping_addr_city,
10:40:46 689  	    shipping_addr_state,
10:40:46 690  	    shipping_addr_zip,
10:40:46 691  	    shipping_addr_country,
10:40:46 692  	    custom_field,
10:40:46 693  	    create_date,
10:40:46 694  	    created_by
10:40:46 695  	  ) VALUES (
10:40:46 696  	    var_pp_trans_detail_id,
10:40:46 697  	    in_ext_source_log_id,
10:40:46 698  	    in_transaction_id,
10:40:46 699  	    in_invoice_id,
10:40:46 700  	    in_pp_ref_id,
10:40:46 701  	    in_trans_event_code,
10:40:46 702  	    in_trans_init_date,
10:40:46 703  	    in_trans_comp_date,
10:40:46 704  	    in_trans_deb_or_cred,
10:40:46 705  	    in_gross_trans_amount,
10:40:46 706  	    in_gross_trans_currency,
10:40:46 707  	    in_fee_deb_or_cred,
10:40:46 708  	    in_fee_amount,
10:40:46 709  	    in_fee_currency,
10:40:46 710  	    in_trans_status,
10:40:46 711  	    in_insurance_amount,
10:40:46 712  	    in_sales_tax_amount,
10:40:46 713  	    in_shipping_amount,
10:40:46 714  	    in_trans_subject,
10:40:46 715  	    in_trans_note,
10:40:46 716  	    in_payer_acct_id,
10:40:46 717  	    in_payer_addr_status,
10:40:46 718  	    in_item_name,
10:40:46 719  	    in_item_id,
10:40:46 720  	    in_option_1_name,
10:40:46 721  	    in_option_1_value,
10:40:46 722  	    in_option_2_name,
10:40:46 723  	    in_option_2_value,
10:40:46 724  	    in_auction_site,
10:40:46 725  	    in_auction_buyer_id,
10:40:46 726  	    in_auction_closing_date,
10:40:46 727  	    in_shipping_addr_line_1,
10:40:46 728  	    in_shipping_addr_line_2,
10:40:46 729  	    in_shipping_addr_city,
10:40:46 730  	    in_shipping_addr_state,
10:40:46 731  	    in_shipping_addr_zip,
10:40:46 732  	    in_shipping_addr_country,
10:40:46 733  	    in_custom_field,
10:40:46 734  	    var_date,
10:40:46 735  	    in_created_by
10:40:46 736  	  );
10:40:46 737  
10:40:46 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
10:40:46 739  END CREATE_PP_TRANS_DETAIL;
10:40:46 740  
10:40:46 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
10:40:46 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:46 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:40:46 744  ) AS
10:40:46 745  BEGIN
10:40:46 746  	DELETE FROM
10:40:46 747  	  RCN_EXT_SOURCE_LOG
10:40:46 748  	WHERE
10:40:46 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:40:46 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:40:46 751  END DELETE_EXT_SOURCE_LOG;
10:40:46 752  
10:40:46 753  PROCEDURE GET_EXT_SOURCE_LOG (
10:40:46 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:46 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
10:40:46 756  	out_result_set		 OUT SYS_REFCURSOR
10:40:46 757  ) AS
10:40:46 758  BEGIN
10:40:46 759  	OPEN out_result_set FOR
10:40:46 760  	SELECT * FROM
10:40:46 761  	  RCN_EXT_SOURCE_LOG
10:40:46 762  	WHERE
10:40:46 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:40:46 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:40:46 765  END GET_EXT_SOURCE_LOG;
10:40:46 766  
10:40:46 767  FUNCTION CHECK_EXT_SOURCE_LOG (
10:40:46 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
10:40:46 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
10:40:46 770  ) RETURN NUMBER AS
10:40:46 771  var_exists NUMBER;
10:40:46 772  BEGIN
10:40:46 773  	SELECT count(1) INTO var_exists
10:40:46 774  	FROM
10:40:46 775  	  RCN_EXT_SOURCE_LOG
10:40:46 776  	WHERE
10:40:46 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
10:40:46 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
10:40:46 779  
10:40:46 780  	IF var_exists > 1 THEN
10:40:46 781  	  var_exists := 1;
10:40:46 782  	END IF;
10:40:46 783  
10:40:46 784  	RETURN var_exists;
10:40:46 785  END;
10:40:46 786  
10:40:46 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
10:40:46 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
10:40:46 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
10:40:46 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
10:40:46 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
10:40:46 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
10:40:46 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
10:40:46 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
10:40:46 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
10:40:46 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
10:40:46 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
10:40:46 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
10:40:46 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
10:40:46 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
10:40:46 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
10:40:46 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
10:40:46 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
10:40:46 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
10:40:46 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
10:40:46 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
10:40:46 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
10:40:46 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
10:40:46 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
10:40:46 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
10:40:46 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
10:40:46 812  ) AS
10:40:46 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
10:40:46 814  var_date DATE := SYSDATE;
10:40:46 815  BEGIN
10:40:46 816  	SELECT
10:40:46 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
10:40:46 818  	FROM DUAL;
10:40:46 819  
10:40:46 820  	INSERT INTO
10:40:46 821  	  RCN_AMEX_CHARGEBACK (
10:40:46 822  	    id,
10:40:46 823  	    rcn_ext_source_log_id,
10:40:46 824  	    resolution,
10:40:46 825  	    from_system,
10:40:46 826  	    rejects_to_system,
10:40:46 827  	    disputes_to_system,
10:40:46 828  	    date_of_adjustment,
10:40:46 829  	    date_of_charge,
10:40:46 830  	    case_type,
10:40:46 831  	    cb_reas_code,
10:40:46 832  	    cb_amount,
10:40:46 833  	    cb_adjustment_number,
10:40:46 834  	    billed_amount,
10:40:46 835  	    soc_amount,
10:40:46 836  	    foreign_amount,
10:40:46 837  	    currency,
10:40:46 838  	    note1,
10:40:46 839  	    note2,
10:40:46 840  	    note3,
10:40:46 841  	    note4,
10:40:46 842  	    note5,
10:40:46 843  	    note6,
10:40:46 844  	    note7,
10:40:46 845  	    ind_ref_number,
10:40:46 846  	    create_date,
10:40:46 847  	    created_by,
10:40:46 848  	    update_date,
10:40:46 849  	    updated_by
10:40:46 850  	  ) VALUES (
10:40:46 851  	    var_amex_chargeback_id,
10:40:46 852  	    in_rcn_ext_source_log_id,
10:40:46 853  	    in_resolution,
10:40:46 854  	    in_from_system,
10:40:46 855  	    in_rejects_to_system,
10:40:46 856  	    in_disputes_to_system,
10:40:46 857  	    in_date_of_adjustment,
10:40:46 858  	    in_date_of_charge,
10:40:46 859  	    in_case_type,
10:40:46 860  	    in_cb_reas_code,
10:40:46 861  	    in_cb_amount,
10:40:46 862  	    in_cb_adjustment_number,
10:40:46 863  	    in_billed_amount,
10:40:46 864  	    in_soc_amount,
10:40:46 865  	    in_foreign_amount,
10:40:46 866  	    in_currency,
10:40:46 867  	    in_note1,
10:40:46 868  	    in_note2,
10:40:46 869  	    in_note3,
10:40:46 870  	    in_note4,
10:40:46 871  	    in_note5,
10:40:46 872  	    in_note6,
10:40:46 873  	    in_note7,
10:40:46 874  	    in_ind_ref_number,
10:40:46 875  	    var_date,
10:40:46 876  	    in_created_by,
10:40:46 877  	    var_date,
10:40:46 878  	    in_created_by
10:40:46 879  	  );
10:40:46 880  
10:40:46 881  END CREATE_AMEX_CHARGEBACK;
10:40:46 882  
10:40:46 883  END PROCS_RECONCILIATION_CRU_V22;
10:40:46 884  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_SUBSCRIPTION(
10:40:46   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
10:40:46   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:46   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
10:40:46   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
10:40:46   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
10:40:46  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:40:46  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:40:46  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:40:46  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:40:46  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
10:40:46  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:40:46  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:40:46  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:40:46  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:40:46  19  ) AS
10:40:46  20  -- VARIABLES
10:40:46  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
10:40:46  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  23  var_date DATE := SYSDATE;
10:40:46  24  BEGIN
10:40:46  25  	IF in_subscription_id IS NULL THEN
10:40:46  26  	  SELECT
10:40:46  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
10:40:46  28  	  FROM DUAL;
10:40:46  29  	ELSE
10:40:46  30  	  var_new_subscription_id := in_subscription_id;
10:40:46  31  	END IF;
10:40:46  32  	INSERT INTO SUBSCRIPTION (
10:40:46  33  	  ID,
10:40:46  34  	  SUSPEND_DATE,
10:40:46  35  	  ACCOUNT_ID,
10:40:46  36  	  PURCHASE_DATE,
10:40:46  37  	  OFFER_CHAIN_ID,
10:40:46  38  	  TERMINATION_DATE,
10:40:46  39  	  DAYS_REMAINING_ADJUSTMENT,
10:40:46  40  	  SCT_ID,
10:40:46  41  	  CREATE_DATE,
10:40:46  42  	  CREATED_BY,
10:40:46  43  	  UPDATE_DATE,
10:40:46  44  	  UPDATED_BY,
10:40:46  45  	  INSTRUMENT_TYPE_ID,
10:40:46  46  	  INSTRUMENT_ID,
10:40:46  47  	  SUBSCRIPTION_STATUS_ID,
10:40:46  48  	  CANCELLATION_DATE,
10:40:46  49  	  REACTIVATION_DATE
10:40:46  50  	) VALUES (
10:40:46  51  	  var_new_subscription_id,
10:40:46  52  	  in_suspend_date,
10:40:46  53  	  in_account_id,
10:40:46  54  	  in_purchase_date,
10:40:46  55  	  in_offer_chain_id,
10:40:46  56  	  in_termination_date,
10:40:46  57  	  in_days_remainning_ajustment,
10:40:46  58  	  in_sct_id,
10:40:46  59  	  var_date,
10:40:46  60  	  in_created_by,
10:40:46  61  	  var_date,
10:40:46  62  	  in_created_by,
10:40:46  63  	  in_instrument_type_id,
10:40:46  64  	  in_instrument_id,
10:40:46  65  	  in_subscription_status_id,
10:40:46  66  	  in_cancelation_date,
10:40:46  67  	  in_reactivation_date
10:40:46  68  	);
10:40:46  69  
10:40:46  70  	out_subscription_id := var_new_subscription_id;
10:40:46  71  END CREATE_SUBSCRIPTION;
10:40:46  72  
10:40:46  73  /******************************************************************************/
10:40:46  74  
10:40:46  75  PROCEDURE UPDATE_SUBSCRIPTION(
10:40:46  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
10:40:46  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
10:40:46  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
10:40:46  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
10:40:46  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
10:40:46  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
10:40:46  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
10:40:46  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
10:40:46  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
10:40:46  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
10:40:46  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
10:40:46  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
10:40:46  88  ) AS
10:40:46  89  BEGIN
10:40:46  90  	-- Create history
10:40:46  91  	PROCS_HISTORY_V22.CREATE_SUBSCRIPTION_HISTORY(
10:40:46  92  	  in_subscription_id	       => in_subscription_id,
10:40:46  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46  94  	);
10:40:46  95  
10:40:46  96  	UPDATE SUBSCRIPTION SET
10:40:46  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
10:40:46  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
10:40:46  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
10:40:46 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
10:40:46 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
10:40:46 102  	  UPDATE_DATE		    = SYSDATE,
10:40:46 103  	  UPDATED_BY		    = in_updated_by,
10:40:46 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
10:40:46 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
10:40:46 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
10:40:46 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
10:40:46 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
10:40:46 109  	WHERE
10:40:46 110  	  ID = in_subscription_id;
10:40:46 111  END UPDATE_SUBSCRIPTION;
10:40:46 112  
10:40:46 113  /******************************************************************************/
10:40:46 114  
10:40:46 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
10:40:46 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
10:40:46 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:46 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
10:40:46 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:46 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
10:40:46 121  ) AS
10:40:46 122  BEGIN
10:40:46 123  	IF inout_subscription_note_id IS NULL THEN
10:40:46 124  	  SELECT
10:40:46 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
10:40:46 126  	  FROM DUAL;
10:40:46 127  	END IF;
10:40:46 128  	INSERT INTO SUBSCRIPTION_NOTE (
10:40:46 129  	  ID,
10:40:46 130  	  AGENT_ID,
10:40:46 131  	  SUBSCRIPTION_ID,
10:40:46 132  	  NOTE,
10:40:46 133  	  CREATE_DATE,
10:40:46 134  	  CREATED_BY
10:40:46 135  	) VALUES (
10:40:46 136  	  inout_subscription_note_id,
10:40:46 137  	  in_agent_id,
10:40:46 138  	  in_subscription_id,
10:40:46 139  	  in_note,
10:40:46 140  	  SYSDATE,
10:40:46 141  	  in_created_by
10:40:46 142  	);
10:40:46 143  END CREATE_SUBSCRIPTION_NOTE;
10:40:46 144  
10:40:46 145  END PROCS_SUBSCRIPTION_CRU_V22;
10:40:46 146  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_TAX (
10:40:46   4  	inout_tax_id		 IN OUT NUMBER,
10:40:46   5  	in_tax_type_id		 IN NUMBER,
10:40:46   6  	in_calculated_amount	 IN NUMBER,
10:40:46   7  	in_created_by		 IN VARCHAR2,
10:40:46   8  	in_line_item_id 	 IN NUMBER,
10:40:46   9  	in_effective_rate	 IN VARCHAR2,
10:40:46  10  	in_taxable_amount	 IN NUMBER,
10:40:46  11  	in_tax_rule_id		 IN NUMBER,
10:40:46  12  	in_jurisdiction_level_id IN NUMBER,
10:40:46  13  	in_jurisdiction_name	 IN VARCHAR2,
10:40:46  14  	in_jurisdiction_id	 IN VARCHAR2,
10:40:46  15  	in_ext_tax_type 	 IN VARCHAR2,
10:40:46  16  	in_ext_result		 IN VARCHAR2,
10:40:46  17  	in_imposition_type	 IN VARCHAR2,
10:40:46  18  	in_imposition		 IN VARCHAR2
10:40:46  19  ) AS
10:40:46  20  var_date DATE := SYSDATE;
10:40:46  21  BEGIN
10:40:46  22  
10:40:46  23  	IF inout_tax_id IS NULL THEN
10:40:46  24  	  SELECT
10:40:46  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
10:40:46  26  	  FROM DUAL;
10:40:46  27  	END IF;
10:40:46  28  
10:40:46  29  	INSERT INTO TAX (
10:40:46  30  	  ID,
10:40:46  31  	  TAX_TYPE_ID,
10:40:46  32  	  CALCULATED_AMOUNT,
10:40:46  33  	  CREATE_DATE,
10:40:46  34  	  CREATED_BY,
10:40:46  35  	  LINE_ITEM_ID,
10:40:46  36  	  EFFECTIVE_RATE,
10:40:46  37  	  TAXABLE_AMOUNT,
10:40:46  38  	  TAX_RULE_ID,
10:40:46  39  	  JURISDICTION_LEVEL_ID,
10:40:46  40  	  JURISDICTION_NAME,
10:40:46  41  	  JURISDICTION_ID,
10:40:46  42  	  EXT_TAX_TYPE,
10:40:46  43  	  EXT_RESULT,
10:40:46  44  	  IMPOSITION_TYPE,
10:40:46  45  	  IMPOSITION
10:40:46  46  	) VALUES (
10:40:46  47  	  inout_tax_id,
10:40:46  48  	  in_tax_type_id,
10:40:46  49  	  in_calculated_amount,
10:40:46  50  	  var_date,
10:40:46  51  	  in_created_by,
10:40:46  52  	  in_line_item_id,
10:40:46  53  	  in_effective_rate,
10:40:46  54  	  in_taxable_amount,
10:40:46  55  	  in_tax_rule_id,
10:40:46  56  	  in_jurisdiction_level_id,
10:40:46  57  	  in_jurisdiction_name,
10:40:46  58  	  in_jurisdiction_id,
10:40:46  59  	  in_ext_tax_type,
10:40:46  60  	  in_ext_result,
10:40:46  61  	  in_imposition_type,
10:40:46  62  	  in_imposition
10:40:46  63  	);
10:40:46  64  
10:40:46  65  END CREATE_TAX;
10:40:46  66  
10:40:46  67  END PROCS_TAXES_CRU_V22;
10:40:46  68  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_TRANSACTION (
10:40:46   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
10:40:46   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
10:40:46   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
10:40:46   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
10:40:46   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:40:46   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
10:40:46  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V22.FALSE,
10:40:46  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
10:40:46  12  ) AS
10:40:46  13  -- VARIABLES
10:40:46  14  var_transaction_id TRANSACTION.ID%TYPE;
10:40:46  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46  16  var_date DATE := SYSDATE;
10:40:46  17  BEGIN
10:40:46  18  	IF in_transaction_id IS NULL THEN
10:40:46  19  	  SELECT
10:40:46  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
10:40:46  21  	  FROM DUAL;
10:40:46  22  	ELSE
10:40:46  23  	  var_transaction_id := in_transaction_id;
10:40:46  24  	END IF;
10:40:46  25  	INSERT INTO
10:40:46  26  	  TRANSACTION (
10:40:46  27  	    ID,
10:40:46  28  	    TRANSACTION_STATUS_ID,
10:40:46  29  	    TRANSACTION_AMOUNT,
10:40:46  30  	    CREATE_DATE,
10:40:46  31  	    CREATED_BY,
10:40:46  32  	    UPDATE_DATE,
10:40:46  33  	    UPDATED_BY,
10:40:46  34  	    ORDER_ID,
10:40:46  35  	    IS_REFUND,
10:40:46  36  	    TRANSACTION_TYPE_CODE
10:40:46  37  	  ) VALUES (
10:40:46  38  	    var_transaction_id,
10:40:46  39  	    in_transaction_status_id,
10:40:46  40  	    in_transaction_amount,
10:40:46  41  	    var_date,
10:40:46  42  	    in_created_by,
10:40:46  43  	    var_date,
10:40:46  44  	    in_created_by,
10:40:46  45  	    in_order_id,
10:40:46  46  	    in_is_refund,
10:40:46  47  	    in_transaction_type_code
10:40:46  48  	  );
10:40:46  49  
10:40:46  50  	out_transaction_id := var_transaction_id;
10:40:46  51  END CREATE_TRANSACTION;
10:40:46  52  
10:40:46  53  /*******************************************************************/
10:40:46  54  
10:40:46  55  PROCEDURE UPDATE_TRANSACTION (
10:40:46  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
10:40:46  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
10:40:46  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
10:40:46  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
10:40:46  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
10:40:46  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
10:40:46  62  ) AS
10:40:46  63  BEGIN
10:40:46  64  	-- Create history
10:40:46  65  	PROCS_HISTORY_V22.CREATE_TRANSACTION_HISTORY(
10:40:46  66  	  in_transaction_id	       => in_transaction_id,
10:40:46  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46  68  	);
10:40:46  69  	UPDATE
10:40:46  70  	  TRANSACTION
10:40:46  71  	SET
10:40:46  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
10:40:46  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
10:40:46  74  	  UPDATE_DATE		= SYSDATE,
10:40:46  75  	  UPDATED_BY		= in_updated_by,
10:40:46  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
10:40:46  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
10:40:46  78  	WHERE
10:40:46  79  	  ID = in_transaction_id;
10:40:46  80  END UPDATE_TRANSACTION;
10:40:46  81  
10:40:46  82  /*******************************************************************/
10:40:46  83  
10:40:46  84  PROCEDURE READ_TRANSACTION (
10:40:46  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:46  86  	out_result_set	  OUT SYS_REFCURSOR
10:40:46  87  ) AS
10:40:46  88  BEGIN
10:40:46  89  	OPEN out_result_set FOR
10:40:46  90  	SELECT
10:40:46  91  	  ID,
10:40:46  92  	  TRANSACTION_STATUS_ID,
10:40:46  93  	  TRANSACTION_TYPE_CODE,
10:40:46  94  	  TRANSACTION_AMOUNT,
10:40:46  95  	  CREATE_DATE,
10:40:46  96  	  CREATED_BY,
10:40:46  97  	  UPDATE_DATE,
10:40:46  98  	  UPDATED_BY,
10:40:46  99  	  ORDER_ID,
10:40:46 100  	  IS_REFUND,
10:40:46 101  	  IS_SETTLED
10:40:46 102  	FROM
10:40:46 103  	  TRANSACTION
10:40:46 104  	WHERE
10:40:46 105  	  ID = in_transaction_id;
10:40:46 106  END READ_TRANSACTION;
10:40:46 107  
10:40:46 108  /*******************************************************************/
10:40:46 109  
10:40:46 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
10:40:46 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
10:40:46 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
10:40:46 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:40:46 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:46 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
10:40:46 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:46 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:40:46 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:40:46 119  ) AS
10:40:46 120  BEGIN
10:40:46 121  	IF inout_transaction_attempt_id IS NULL THEN
10:40:46 122  	  SELECT
10:40:46 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
10:40:46 124  	  FROM DUAL;
10:40:46 125  	END IF;
10:40:46 126  	INSERT INTO TRANSACTION_ATTEMPT (
10:40:46 127  	  ID,
10:40:46 128  	  TRANSACTION_ID,
10:40:46 129  	  EXTERNAL_STATUS_CODE,
10:40:46 130  	  EXTERNAL_STATUS_MESSAGE,
10:40:46 131  	  CREATE_DATE,
10:40:46 132  	  CREATED_BY,
10:40:46 133  	  EXTERNAL_TRANSACTION_ID,
10:40:46 134  	  TRANSACTION_START_TIME,
10:40:46 135  	  TRANSACTION_ATTEMPT_STATUS_ID
10:40:46 136  	) VALUES (
10:40:46 137  	  inout_transaction_attempt_id,
10:40:46 138  	  in_transaction_id,
10:40:46 139  	  in_external_status_code,
10:40:46 140  	  in_external_status_message,
10:40:46 141  	  SYSDATE,
10:40:46 142  	  in_created_by,
10:40:46 143  	  in_external_transaction_id,
10:40:46 144  	  in_transaction_start_time,
10:40:46 145  	  in_status_id
10:40:46 146  	);
10:40:46 147  END;
10:40:46 148  
10:40:46 149  /*******************************************************************/
10:40:46 150  
10:40:46 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
10:40:46 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
10:40:46 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
10:40:46 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:46 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
10:40:46 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
10:40:46 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
10:40:46 158  ) AS
10:40:46 159  BEGIN
10:40:46 160  	UPDATE
10:40:46 161  	  TRANSACTION_ATTEMPT
10:40:46 162  	SET
10:40:46 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
10:40:46 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
10:40:46 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
10:40:46 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
10:40:46 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
10:40:46 168  	WHERE
10:40:46 169  	  ID = in_transaction_attempt_id;
10:40:46 170  END;
10:40:46 171  
10:40:46 172  /*******************************************************************/
10:40:46 173  
10:40:46 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:46 175  /*
10:40:46 176  Throws exceptions:
10:40:46 177  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 178  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:46 179  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 180  */
10:40:46 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:46 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:46 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:46 184  ) AS
10:40:46 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
10:40:46 186  -- EXCEPTIONS
10:40:46 187  BAD_TRANSACTION_ID EXCEPTION;
10:40:46 188  BEGIN
10:40:46 189  
10:40:46 190  	PROCS_HISTORY_V22.CREATE_TRANSACTION_HISTORY(
10:40:46 191  	  in_transaction_id	       => in_transaction_id,
10:40:46 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 193  	);
10:40:46 194  
10:40:46 195  	UPDATE
10:40:46 196  	  TRANSACTION
10:40:46 197  	SET
10:40:46 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
10:40:46 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
10:40:46 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
10:40:46 201  	WHERE
10:40:46 202  	  TRANSACTION.ID = in_transaction_id
10:40:46 203  	  AND TRANSACTION.ORDER_ID IS NULL;
10:40:46 204  
10:40:46 205  	IF SQL%ROWCOUNT = 0 THEN
10:40:46 206  	  RAISE BAD_TRANSACTION_ID;
10:40:46 207  	END IF;
10:40:46 208  EXCEPTION
10:40:46 209  WHEN BAD_TRANSACTION_ID THEN
10:40:46 210  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 211  	  SPROC_NAME, 'No such transaction');
10:40:46 212  END UPDATE_TRANSACTION_ORDER_ID;
10:40:46 213  
10:40:46 214  END PROCS_TRANSACTION_CRU_V22;
10:40:46 215  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_ADDRESS(
10:40:46   4  /*
10:40:46   5  Throws exceptions:
10:40:46   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46   7  */
10:40:46   8  	  out_address_id	OUT NUMBER,
10:40:46   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:46  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:46  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:46  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:46  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:46  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:46  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
10:40:46  16  ) AS
10:40:46  17  -- VARIABLES
10:40:46  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
10:40:46  19  -- EXCEPTIONS
10:40:46  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46  21  BEGIN
10:40:46  22  
10:40:46  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V22.CREATE_ADDRESS(
10:40:46  24  	  out_address_id      => out_address_id,
10:40:46  25  	  in_address_id       => null,
10:40:46  26  	  in_address1	      => in_address1,
10:40:46  27  	  in_address2	      => in_address2,
10:40:46  28  	  in_city	      => in_city,
10:40:46  29  	  in_state	      => in_state,
10:40:46  30  	  in_postal_code      => in_postal_code,
10:40:46  31  	  in_country	      => in_country,
10:40:46  32  	  in_created_by       => in_created_by
10:40:46  33  	);
10:40:46  34  
10:40:46  35  END CREATE_ADDRESS;
10:40:46  36  
10:40:46  37  PROCEDURE UPDATE_ADDRESS(
10:40:46  38  /*
10:40:46  39  Throws exceptions:
10:40:46  40  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46  41  */
10:40:46  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
10:40:46  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
10:40:46  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
10:40:46  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
10:40:46  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
10:40:46  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:46  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
10:40:46  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
10:40:46  50  ) AS
10:40:46  51  BEGIN
10:40:46  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V22.UPDATE_ADDRESS(
10:40:46  53  	  in_address_id 	=> in_address_id,
10:40:46  54  	  in_address1		=> in_address1,
10:40:46  55  	  in_address2		=> in_address2,
10:40:46  56  	  in_city		=> in_city,
10:40:46  57  	  in_state		=> in_state,
10:40:46  58  	  in_postal_code	=> in_postal_code,
10:40:46  59  	  in_country		=> in_country,
10:40:46  60  	  in_updated_by 	=> in_updated_by
10:40:46  61  	);
10:40:46  62  END UPDATE_ADDRESS;
10:40:46  63  
10:40:46  64  PROCEDURE GET_ADDRESS (
10:40:46  65  /*
10:40:46  66  Throws exceptions:
10:40:46  67  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46  68  */
10:40:46  69  	  in_id 		IN ADDRESS.ID%TYPE,
10:40:46  70  	  out_result_set	OUT SYS_REFCURSOR
10:40:46  71  ) AS
10:40:46  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
10:40:46  73  BEGIN
10:40:46  74  
10:40:46  75  OPEN out_result_set FOR
10:40:46  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
10:40:46  77  
10:40:46  78  END GET_ADDRESS;
10:40:46  79  
10:40:46  80  END PROCS_ADDRESS_V22;
10:40:46  81  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
10:40:46   4  	in_invoice_id		  IN NUMBER,
10:40:46   5  	in_adjustment_reason	  IN VARCHAR2,
10:40:46   6  	in_is_credit		  IN NUMBER,
10:40:46   7  	in_charge_id		  IN NUMBER,
10:40:46   8  	in_business_date	  IN DATE,
10:40:46   9  	in_created_by		  IN VARCHAR2,
10:40:46  10  	out_invoice_adjustment_id OUT NUMBER
10:40:46  11  ) AS
10:40:46  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
10:40:46  13  -- VARIABLES
10:40:46  14  var_current_date	    DATE := SYSDATE;
10:40:46  15  var_new_entity_id     NUMBER;
10:40:46  16  var_inv_adj_reason_id NUMBER;
10:40:46  17  -- EXCEPTIONS
10:40:46  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
10:40:46  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
10:40:46  20  BEGIN
10:40:46  21  
10:40:46  22  	IF in_is_credit != GLOBAL_CONSTANTS_V22.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:46  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
10:40:46  24  	END IF;
10:40:46  25  
10:40:46  26  	BEGIN
10:40:46  27  	  SELECT
10:40:46  28  	    ID into var_inv_adj_reason_id
10:40:46  29  	  FROM
10:40:46  30  	    INVOICE_ADJUSTMENT_REASON
10:40:46  31  	  WHERE
10:40:46  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
10:40:46  33  	  EXCEPTION
10:40:46  34  	    WHEN NO_DATA_FOUND THEN
10:40:46  35  	      RAISE DAB_ADJUSTMENT_REASON;
10:40:46  36  	END;
10:40:46  37  
10:40:46  38  	SELECT
10:40:46  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
10:40:46  40  	FROM
10:40:46  41  	  DUAL;
10:40:46  42  
10:40:46  43  	INSERT INTO INVOICE_ADJUSTMENT (
10:40:46  44  	  ID,
10:40:46  45  	  INVOICE_ID,
10:40:46  46  	  INVOICE_ADJUSTMENT_REASON_ID,
10:40:46  47  	  IS_CREDIT,
10:40:46  48  	  CHARGE_ID,
10:40:46  49  	  ADJUSTMENT_DATE,
10:40:46  50  	  CREATE_DATE,
10:40:46  51  	  CREATED_BY,
10:40:46  52  	  UPDATE_DATE,
10:40:46  53  	  UPDATED_BY
10:40:46  54  	)
10:40:46  55  	VALUES (
10:40:46  56  	  var_new_entity_id,
10:40:46  57  	  in_invoice_id,
10:40:46  58  	  var_inv_adj_reason_id,
10:40:46  59  	  in_is_credit,
10:40:46  60  	  in_charge_id,
10:40:46  61  	  in_business_date,
10:40:46  62  	  var_current_date,
10:40:46  63  	  in_created_by,
10:40:46  64  	  var_current_date,
10:40:46  65  	  in_created_by
10:40:46  66  	);
10:40:46  67  
10:40:46  68  	out_invoice_adjustment_id := var_new_entity_id;
10:40:46  69  
10:40:46  70  EXCEPTION
10:40:46  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
10:40:46  72  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46  73  	  SPROC_NAME, 'Bad in_is_credit value');
10:40:46  74  WHEN DAB_ADJUSTMENT_REASON THEN
10:40:46  75  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46  76  	  SPROC_NAME, 'Bad adjustment reason');
10:40:46  77  WHEN OTHERS THEN
10:40:46  78  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46  80  END CREATE_INVOICE_ADJUSTMENT;
10:40:46  81  
10:40:46  82  /******************************************************************************/
10:40:46  83  
10:40:46  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
10:40:46  85  	  in_invoice_id 	    IN NUMBER,
10:40:46  86  	  in_original_charge_id     IN NUMBER,
10:40:46  87  	  in_charge_id		    IN NUMBER,
10:40:46  88  	  in_updated_by 	    IN VARCHAR2
10:40:46  89  ) AS
10:40:46  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
10:40:46  91  var_invoice_adjustment_id NUMBER;
10:40:46  92  BEGIN
10:40:46  93  	SELECT
10:40:46  94  	  id into var_invoice_adjustment_id
10:40:46  95  	FROM
10:40:46  96  	  INVOICE_ADJUSTMENT
10:40:46  97  	WHERE INVOICE_ID = in_invoice_id
10:40:46  98  	      AND CHARGE_ID = in_original_charge_id;
10:40:46  99  
10:40:46 100  	--create history
10:40:46 101  	PROCS_HISTORY_V22.CREATE_INVOICE_ADJ_HISTORY(
10:40:46 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
10:40:46 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 104  	);
10:40:46 105  
10:40:46 106  	UPDATE INVOICE_ADJUSTMENT
10:40:46 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
10:40:46 108  	WHERE ID = var_invoice_adjustment_id;
10:40:46 109  
10:40:46 110  EXCEPTION
10:40:46 111  WHEN NO_DATA_FOUND THEN
10:40:46 112  	    NULL;
10:40:46 113  END UPDATE_INVOICE_ADJUSTMENT;
10:40:46 114  
10:40:46 115  /******************************************************************************/
10:40:46 116  
10:40:46 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
10:40:46 118  	in_line_item_id 	    IN NUMBER,
10:40:46 119  	in_invoice_adjustment_id    IN NUMBER,
10:40:46 120  	in_amount		    IN NUMBER,
10:40:46 121  	in_tax			    IN NUMBER,
10:40:46 122  	in_discount		    IN NUMBER,
10:40:46 123  	in_created_by		    IN VARCHAR2,
10:40:46 124  	out_line_item_adjustment_id OUT NUMBER
10:40:46 125  ) AS
10:40:46 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
10:40:46 127  -- VARIABLES
10:40:46 128  var_current_date DATE := SYSDATE;
10:40:46 129  var_new_entity_id NUMBER;
10:40:46 130  BEGIN
10:40:46 131  
10:40:46 132  	SELECT
10:40:46 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
10:40:46 134  	FROM
10:40:46 135  	  DUAL;
10:40:46 136  
10:40:46 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
10:40:46 138  	  ID,
10:40:46 139  	  LINE_ITEM_ID,
10:40:46 140  	  INVOICE_ADJUSTMENT_ID,
10:40:46 141  	  AMOUNT,
10:40:46 142  	  TAX,
10:40:46 143  	  DISCOUNT,
10:40:46 144  	  CREATE_DATE,
10:40:46 145  	  CREATED_BY
10:40:46 146  	)
10:40:46 147  	VALUES (
10:40:46 148  	  var_new_entity_id,
10:40:46 149  	  in_line_item_id,
10:40:46 150  	  in_invoice_adjustment_id,
10:40:46 151  	  in_amount,
10:40:46 152  	  in_tax,
10:40:46 153  	  in_discount,
10:40:46 154  	  var_current_date,
10:40:46 155  	  in_created_by
10:40:46 156  	);
10:40:46 157  
10:40:46 158  	out_line_item_adjustment_id := var_new_entity_id;
10:40:46 159  
10:40:46 160  EXCEPTION
10:40:46 161  WHEN OTHERS THEN
10:40:46 162  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 164  END CREATE_LINE_ITEM_ADJUSTMENT;
10:40:46 165  
10:40:46 166  /******************************************************************************/
10:40:46 167  
10:40:46 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
10:40:46 169  	in_tax_id		   IN NUMBER,
10:40:46 170  	in_line_item_adjustment_id IN NUMBER,
10:40:46 171  	in_amount		   IN NUMBER,
10:40:46 172  	in_created_by		   IN VARCHAR2,
10:40:46 173  	out_tax_adjustment_id	   OUT NUMBER
10:40:46 174  ) AS
10:40:46 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
10:40:46 176  -- VARIABLES
10:40:46 177  var_current_date DATE := SYSDATE;
10:40:46 178  var_new_entity_id NUMBER;
10:40:46 179  BEGIN
10:40:46 180  
10:40:46 181  	SELECT
10:40:46 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
10:40:46 183  	FROM
10:40:46 184  	  DUAL;
10:40:46 185  
10:40:46 186  	INSERT INTO TAX_ADJUSTMENT (
10:40:46 187  	  ID,
10:40:46 188  	  TAX_ID,
10:40:46 189  	  LINE_ITEM_ADJUSTMENT_ID,
10:40:46 190  	  AMOUNT,
10:40:46 191  	  CREATE_DATE,
10:40:46 192  	  CREATED_BY
10:40:46 193  	)
10:40:46 194  	VALUES (
10:40:46 195  	  var_new_entity_id,
10:40:46 196  	  in_tax_id,
10:40:46 197  	  in_line_item_adjustment_id,
10:40:46 198  	  in_amount,
10:40:46 199  	  var_current_date,
10:40:46 200  	  in_created_by
10:40:46 201  	);
10:40:46 202  
10:40:46 203  	out_tax_adjustment_id := var_new_entity_id;
10:40:46 204  
10:40:46 205  EXCEPTION
10:40:46 206  WHEN OTHERS THEN
10:40:46 207  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 209  END CREATE_TAX_ADJUSTMENT;
10:40:46 210  
10:40:46 211  /******************************************************************************/
10:40:46 212  
10:40:46 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
10:40:46 214  	in_discount_id		   NUMBER,
10:40:46 215  	in_line_item_id 	   NUMBER,
10:40:46 216  	in_line_item_adjustment_id IN NUMBER,
10:40:46 217  	in_amount		   IN NUMBER,
10:40:46 218  	in_created_by		   IN VARCHAR2,
10:40:46 219  	out_discount_li_id	   OUT NUMBER
10:40:46 220  ) AS
10:40:46 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
10:40:46 222  -- VARIABLES
10:40:46 223  var_current_date DATE := SYSDATE;
10:40:46 224  var_new_entity_id NUMBER;
10:40:46 225  BEGIN
10:40:46 226  
10:40:46 227  	SELECT
10:40:46 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
10:40:46 229  	FROM
10:40:46 230  	  DUAL;
10:40:46 231  
10:40:46 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
10:40:46 233  	  ID,
10:40:46 234  	  DISCOUNT_ID,
10:40:46 235  	  LINE_ITEM_ID,
10:40:46 236  	  LINE_ITEM_ADJUSTMENT_ID,
10:40:46 237  	  AMOUNT,
10:40:46 238  	  CREATE_DATE,
10:40:46 239  	  CREATED_BY
10:40:46 240  	)
10:40:46 241  	VALUES (
10:40:46 242  	  var_new_entity_id,
10:40:46 243  	  in_discount_id,
10:40:46 244  	  in_line_item_id,
10:40:46 245  	  in_line_item_adjustment_id,
10:40:46 246  	  in_amount,
10:40:46 247  	  var_current_date,
10:40:46 248  	  in_created_by
10:40:46 249  	);
10:40:46 250  
10:40:46 251  	out_discount_li_id := var_new_entity_id;
10:40:46 252  
10:40:46 253  EXCEPTION
10:40:46 254  WHEN OTHERS THEN
10:40:46 255  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
10:40:46 258  
10:40:46 259  END PROCS_ADJUSTMENTS_V22;
10:40:46 260  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE GET_SUB_ADX_INFO (
10:40:46   4  /*
10:40:46   5  Throws exceptions:
10:40:46   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46   7  */
10:40:46   8  	out_result_set	    OUT SYS_REFCURSOR,
10:40:46   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
10:40:46  10  ) AS
10:40:46  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
10:40:46  12  BEGIN
10:40:46  13  OPEN out_result_set FOR
10:40:46  14  SELECT /*+ FIRST_ROWS(5) */
10:40:46  15  	s.offer_chain_id,
10:40:46  16  	s.create_date,
10:40:46  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
10:40:46  18  	ocmd.value,
10:40:46  19  	a.group_id,
10:40:46  20  	s.id subscription_id
10:40:46  21  FROM
10:40:46  22  	account a,
10:40:46  23  	subscription s,
10:40:46  24  	offer_chain_meta_data ocmd,
10:40:46  25  	group_account g,
10:40:46  26  	subscription_share ss,
10:40:46  27  	account a2
10:40:46  28  WHERE
10:40:46  29  	s.account_id = a.id and
10:40:46  30  	s.offer_chain_id = ocmd.offer_chain_id and
10:40:46  31  	g.id = ss.group_account_id and
10:40:46  32  	ss.borrower_account_id = a2.id and
10:40:46  33  	s.id = g.subscription_id and
10:40:46  34  	ocmd.name = 'ADX_BUNDLE' and
10:40:46  35  	a2.group_id = in_group_id and
10:40:46  36  	rownum < 5
10:40:46  37  union all
10:40:46  38  SELECT /*+ FIRST_ROWS(5) */
10:40:46  39  	s.offer_chain_id,
10:40:46  40  	s.create_date,
10:40:46  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
10:40:46  42  	ocmd.value,
10:40:46  43  	a.group_id,
10:40:46  44  	s.id subscription_id
10:40:46  45  FROM
10:40:46  46  	account a,
10:40:46  47  	subscription s,
10:40:46  48  	offer_chain_meta_data ocmd
10:40:46  49  WHERE
10:40:46  50  	s.account_id = a.id and
10:40:46  51  	s.offer_chain_id = ocmd.offer_chain_id and
10:40:46  52  	ocmd.name = 'ADX_BUNDLE' and
10:40:46  53  	a.group_id = in_group_id and
10:40:46  54  	rownum < 5
10:40:46  55  ;
10:40:46  56  
10:40:46  57  END GET_SUB_ADX_INFO;
10:40:46  58  
10:40:46  59  END PROCS_ADX_V22;
10:40:46  60  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE AASR_PURCHASE_TOKEN_USED(
10:40:46   4  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:46   5  	out_data	  OUT NUMBER
10:40:46   6  ) AS
10:40:46   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_PURCHASE_TOKEN_USED';
10:40:46   8  BEGIN
10:40:46   9  	SELECT
10:40:46  10  	  COUNT(1)
10:40:46  11  	INTO OUT_DATA
10:40:46  12  	FROM AMAZON_APPSTORE_RECEIPT
10:40:46  13  	WHERE PURCHASE_TOKEN = in_purchase_token;
10:40:46  14  	EXCEPTION
10:40:46  15  	WHEN NO_DATA_FOUND THEN
10:40:46  16  	out_data := 0;
10:40:46  17  END;
10:40:46  18  
10:40:46  19  PROCEDURE UPDATE_AASR_LAST_CHECK_DATE(
10:40:46  20  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:46  21  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:46  22  ) AS
10:40:46  23  BEGIN
10:40:46  24  	CORE_OWNER.PROCS_AMAZON_CRU_V22.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:40:46  25  	  in_id 	     => in_id,
10:40:46  26  	  in_updated_by      => in_updated_by,
10:40:46  27  	  in_last_check_date => SYSDATE
10:40:46  28  	);
10:40:46  29  END UPDATE_AASR_LAST_CHECK_DATE;
10:40:46  30  
10:40:46  31  PROCEDURE EXPIRED_AASR_SUB_IDS(
10:40:46  32  	out_data   OUT SYS_REFCURSOR
10:40:46  33  ) AS
10:40:46  34  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRED_AASR_SUB_IDS';
10:40:46  35  BEGIN
10:40:46  36  	OPEN out_data FOR
10:40:46  37  	SELECT
10:40:46  38  	  *
10:40:46  39  	FROM
10:40:46  40  	  (
10:40:46  41  	    SELECT
10:40:46  42  	      AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:40:46  43  	    FROM AMAZON_APPSTORE_RECEIPT
10:40:46  44  	      INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:40:46  45  	    WHERE
10:40:46  46  	      AMAZON_APPSTORE_RECEIPT.END_DATE <= SYSDATE AND
10:40:46  47  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:46  48  	    ORDER BY dbms_random.value
10:40:46  49  	  )
10:40:46  50  	WHERE
10:40:46  51  	  ROWNUM <= 1000;
10:40:46  52  END EXPIRED_AASR_SUB_IDS;
10:40:46  53  
10:40:46  54  PROCEDURE UPDATE_AASR_PURCHASE_TOKEN(
10:40:46  55  	in_id		  IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:46  56  	in_purchase_token IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:46  57  	in_updated_by	  IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:46  58  ) AS
10:40:46  59  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_PURCHASE_TOKEN';
10:40:46  60  BEGIN
10:40:46  61  	  CORE_OWNER.PROCS_AMAZON_CRU_V22.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:40:46  62  	      in_id		  => in_id,
10:40:46  63  	      in_updated_by	  => in_updated_by,
10:40:46  64  	      in_purchase_token   => in_purchase_token
10:40:46  65  	  );
10:40:46  66  END UPDATE_AASR_PURCHASE_TOKEN;
10:40:46  67  
10:40:46  68  PROCEDURE UPDATE_AASR_END_DATE(
10:40:46  69  	in_id	      IN AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:46  70  	in_end_date   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE,
10:40:46  71  	in_updated_by IN AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE
10:40:46  72  ) AS
10:40:46  73  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_AASR_END_DATE';
10:40:46  74  BEGIN
10:40:46  75  	CORE_OWNER.PROCS_AMAZON_CRU_V22.UPDATE_AMAZON_APPSTORE_RECEIPT(
10:40:46  76  	    in_id	  => in_id,
10:40:46  77  	    in_updated_by => in_updated_by,
10:40:46  78  	    in_end_date   => in_end_date
10:40:46  79  	);
10:40:46  80  END UPDATE_AASR_END_DATE;
10:40:46  81  
10:40:46  82  PROCEDURE AASR_RECEIPTS_WITH_ACTIVE_SUBS(
10:40:46  83  	out_data   OUT SYS_REFCURSOR,
10:40:46  84  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:46  85  ) AS
10:40:46  86  SPROC_NAME CONSTANT VARCHAR2(32) := 'AASR_RECEIPTS_WITH_ACTIVE_SUBS';
10:40:46  87  BEGIN
10:40:46  88  	OPEN out_data FOR
10:40:46  89  	SELECT
10:40:46  90  	  *
10:40:46  91  	FROM (
10:40:46  92  	  SELECT
10:40:46  93  	    AMAZON_APPSTORE_RECEIPT.ID,
10:40:46  94  	    AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:40:46  95  	    AMAZON_APPSTORE_RECEIPT.USER_ID,
10:40:46  96  	    AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:40:46  97  	    AMAZON_APPSTORE_RECEIPT.START_DATE,
10:40:46  98  	    AMAZON_APPSTORE_RECEIPT.END_DATE,
10:40:46  99  	    AMAZON_APPSTORE_RECEIPT.SKU,
10:40:46 100  	    AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:40:46 101  	    AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:40:46 102  	    AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:40:46 103  	    AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:40:46 104  	    AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:40:46 105  	    AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:40:46 106  	  FROM AMAZON_APPSTORE_RECEIPT
10:40:46 107  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:40:46 108  	  WHERE
10:40:46 109  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:46 110  	    AND NOT EXISTS
10:40:46 111  	    (
10:40:46 112  		SELECT
10:40:46 113  		  NULL
10:40:46 114  		FROM PROCESS_RETRY_THROTTLE
10:40:46 115  		WHERE PROCESS_NAME = in_process_name
10:40:46 116  		      AND GENERIC_ID = AMAZON_APPSTORE_RECEIPT.ID
10:40:46 117  	    )
10:40:46 118  	  ORDER BY dbms_random.value
10:40:46 119  	)
10:40:46 120  	WHERE
10:40:46 121  	  ROWNUM <= 1000;
10:40:46 122  END AASR_RECEIPTS_WITH_ACTIVE_SUBS;
10:40:46 123  
10:40:46 124  PROCEDURE ADD_AMAZON_APPSTORE_RECEIPT(
10:40:46 125  	in_subscription_id IN AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46 126  	in_user_id	   IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:46 127  	in_item_type	   IN AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE,
10:40:46 128  	in_start_date	   IN AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE,
10:40:46 129  	in_end_date	   IN AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE DEFAULT NULL,
10:40:46 130  	in_sku		   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:46 131  	in_purchase_token  IN AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE,
10:40:46 132  	in_created_by	   IN AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE
10:40:46 133  ) AS
10:40:46 134  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE_RECEIPT';
10:40:46 135  BEGIN
10:40:46 136  	CORE_OWNER.PROCS_AMAZON_CRU_V22.ADD_AMAZON_APPSTORE_RECEIPT(
10:40:46 137  	    in_subscription_id =>  in_subscription_id,
10:40:46 138  	    in_user_id	       =>  in_user_id,
10:40:46 139  	    in_item_type       =>  in_item_type,
10:40:46 140  	    in_start_date      =>  in_start_date,
10:40:46 141  	    in_end_date        =>  in_end_date,
10:40:46 142  	    in_sku	       =>  in_sku,
10:40:46 143  	    in_purchase_token  =>  in_purchase_token,
10:40:46 144  	    in_created_by      =>  in_created_by
10:40:46 145  	);
10:40:46 146  END ADD_AMAZON_APPSTORE_RECEIPT;
10:40:46 147  
10:40:46 148  PROCEDURE AMAZON_APPSTORE_RECEIPTS(
10:40:46 149  	in_user_id IN AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE,
10:40:46 150  	in_sku	   IN AMAZON_APPSTORE_RECEIPT.SKU%TYPE,
10:40:46 151  	out_data   OUT SYS_REFCURSOR
10:40:46 152  ) AS
10:40:46 153  SPROC_NAME CONSTANT VARCHAR2(32) := 'AMAZON_APPSTORE_RECEIPTS';
10:40:46 154  BEGIN
10:40:46 155  	OPEN out_data FOR
10:40:46 156  	SELECT
10:40:46 157  	  AMAZON_APPSTORE_RECEIPT.ID,
10:40:46 158  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:40:46 159  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
10:40:46 160  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:40:46 161  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
10:40:46 162  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
10:40:46 163  	  AMAZON_APPSTORE_RECEIPT.SKU,
10:40:46 164  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:40:46 165  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:40:46 166  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:40:46 167  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:40:46 168  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:40:46 169  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:40:46 170  	FROM AMAZON_APPSTORE_RECEIPT
10:40:46 171  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID
10:40:46 172  	WHERE AMAZON_APPSTORE_RECEIPT.USER_ID = in_user_id AND
10:40:46 173  	      AMAZON_APPSTORE_RECEIPT.SKU = in_sku AND
10:40:46 174  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE;
10:40:46 175  END AMAZON_APPSTORE_RECEIPTS;
10:40:46 176  
10:40:46 177  	PROCEDURE CREATE_AMAZON_SUB(
10:40:46 178  	  out_id	      OUT NUMBER,
10:40:46 179  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
10:40:46 180  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
10:40:46 181  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
10:40:46 182  ) AS
10:40:46 183  -- VARIABLES
10:40:46 184  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
10:40:46 185  -- EXCEPTIONS
10:40:46 186  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 187  BEGIN
10:40:46 188  
10:40:46 189  	CORE_OWNER.PROCS_AMAZON_CRU_V22.CREATE_AMAZON_SUB(
10:40:46 190  	  out_id	      =>  out_id,
10:40:46 191  	  in_subscription_id  =>  in_subscription_id,
10:40:46 192  	  in_amazon_id	      =>  in_amazon_id,
10:40:46 193  	  in_created_by       =>  in_created_by
10:40:46 194  	);
10:40:46 195  
10:40:46 196  END CREATE_AMAZON_SUB;
10:40:46 197  
10:40:46 198  PROCEDURE GET_ACTIVE_SUB_IDS (
10:40:46 199  	out_result_set	    OUT SYS_REFCURSOR,
10:40:46 200  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:40:46 201  ) AS
10:40:46 202  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
10:40:46 203  BEGIN
10:40:46 204  OPEN out_result_set FOR
10:40:46 205  SELECT s.id
10:40:46 206  FROM subscription s, amazon_sub am
10:40:46 207  WHERE
10:40:46 208  	s.id = am.subscription_id
10:40:46 209  	and s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:46 210  	and am.amazon_id = in_amazon_id
10:40:46 211  ;
10:40:46 212  
10:40:46 213  END GET_ACTIVE_SUB_IDS;
10:40:46 214  
10:40:46 215  PROCEDURE GET_ACTIVE_GROUP_IDS (
10:40:46 216  	out_result_set	    OUT SYS_REFCURSOR,
10:40:46 217  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
10:40:46 218  ) AS
10:40:46 219  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
10:40:46 220  BEGIN
10:40:46 221  OPEN out_result_set FOR
10:40:46 222  SELECT distinct a.group_id id
10:40:46 223  FROM subscription s, amazon_sub am, account a
10:40:46 224  WHERE
10:40:46 225  	s.id = am.subscription_id
10:40:46 226  	and a.id = s.account_id
10:40:46 227  	and s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:46 228  	and am.amazon_id = in_amazon_id
10:40:46 229  ;
10:40:46 230  
10:40:46 231  END GET_ACTIVE_GROUP_IDS;
10:40:46 232  
10:40:46 233  END PROCS_AMAZON_V22;
10:40:46 234  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
10:40:46   2  
10:40:46   3  	/****************************************************************************/
10:40:46   4  
10:40:46   5  	PROCEDURE POPULATE_REQUEST_INFO(
10:40:46   6  	  in_hours_prior    IN	NUMBER,
10:40:46   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
10:40:46   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
10:40:46   9  	) AS
10:40:46  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
10:40:46  11  	var_start_date	    DATE := SYSDATE;
10:40:46  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
10:40:46  13  	var_request_file_id NUMBER := 0;
10:40:46  14  	var_license_count   NUMBER := 0;
10:40:46  15  	var_cc_update_count NUMBER := 0;
10:40:46  16  	BEGIN
10:40:46  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
10:40:46  18  	    INSERT INTO CC_REQUEST_FILE (ID,
10:40:46  19  					 FILE_NAME,
10:40:46  20  					 CC_REQUEST_FILE_STATUS,
10:40:46  21  					 CREATE_DATE,
10:40:46  22  					 CREATED_BY,
10:40:46  23  					 UPDATE_DATE,
10:40:46  24  					 UPDATED_BY)
10:40:46  25  					 VALUES (
10:40:46  26  					 var_request_file_id,
10:40:46  27  					 in_filename,
10:40:46  28  					 'NOT_CREATED',
10:40:46  29  					 var_start_date,
10:40:46  30  					 in_creator,
10:40:46  31  					 var_start_date,
10:40:46  32  					 in_creator);
10:40:46  33  
10:40:46  34  	   FOR record IN (SELECT
10:40:46  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
10:40:46  36  			  FROM
10:40:46  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
10:40:46  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
10:40:46  39  			  WHERE
10:40:46  40  			    s.INSTRUMENT_TYPE_ID	 = 1
10:40:46  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
10:40:46  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
10:40:46  43  			    AND l.LICENSE_STATUS_ID	 = 2
10:40:46  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
10:40:46  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
10:40:46  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
10:40:46  47  	   LOOP
10:40:46  48  	     var_license_count := 0;
10:40:46  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
10:40:46  50  
10:40:46  51  	     IF var_license_count = 0 THEN
10:40:46  52  		INSERT INTO CC_UPDATE (ID,
10:40:46  53  				       CREDIT_CARD_ID,
10:40:46  54  				       LICENSE_ID,
10:40:46  55  				       CC_UPDATE_STATUS,
10:40:46  56  				       CC_REQUEST_FILE_ID,
10:40:46  57  				       CREATE_DATE,
10:40:46  58  				       UPDATE_DATE,
10:40:46  59  				       CREATED_BY,
10:40:46  60  				       UPDATED_BY
10:40:46  61  				       ) VALUES (
10:40:46  62  				       CC_UPDATE_SEQ.NEXTVAL,
10:40:46  63  				       record.CREDIT_CARD_ID,
10:40:46  64  				       record.LICENSE_ID,
10:40:46  65  				       'NOT_ADDED_TO_FILE',
10:40:46  66  				       var_request_file_id,
10:40:46  67  				       var_start_date,
10:40:46  68  				       var_start_date,
10:40:46  69  				       in_creator,
10:40:46  70  				       in_creator
10:40:46  71  				       );
10:40:46  72  	     END IF;
10:40:46  73  	   END LOOP;
10:40:46  74  
10:40:46  75  	   SELECT COUNT(1) INTO var_cc_update_count
10:40:46  76  	   FROM CC_UPDATE
10:40:46  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
10:40:46  78  	   IF var_cc_update_count <= 0 THEN
10:40:46  79  	     UPDATE CC_REQUEST_FILE
10:40:46  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
10:40:46  81  	     WHERE ID = var_request_file_id;
10:40:46  82  	   END IF;
10:40:46  83  
10:40:46  84  	END POPULATE_REQUEST_INFO;
10:40:46  85  
10:40:46  86  	/****************************************************************************/
10:40:46  87  
10:40:46  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
10:40:46  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:46  90  	  in_start	     IN NUMBER,
10:40:46  91  	  in_end	     IN NUMBER,
10:40:46  92  	  out_result_set     OUT SYS_REFCURSOR
10:40:46  93  	) AS
10:40:46  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
10:40:46  95  	var_range_diff	    NUMBER := 0;
10:40:46  96  	var_upper_bond_diff NUMBER := 0;
10:40:46  97  	var_l_start	    NUMBER := 0;
10:40:46  98  	var_l_end	    NUMBER := 0;
10:40:46  99  	BEGIN
10:40:46 100  	  --Normalize the end points [START]
10:40:46 101  	  IF (in_start IS NULL OR in_start < 0) Then
10:40:46 102  	    var_l_start := 0;
10:40:46 103  	  ELSE
10:40:46 104  	    var_l_start := in_start;
10:40:46 105  	  END IF;
10:40:46 106  
10:40:46 107  	  IF (in_end IS NULL) Then
10:40:46 108  	    var_l_end := 500;
10:40:46 109  	  ELSE
10:40:46 110  	    var_l_end := in_end;
10:40:46 111  	  END IF;
10:40:46 112  
10:40:46 113  	  var_l_start := var_l_start + 1;
10:40:46 114  	  var_l_end   := var_l_end   + 1;
10:40:46 115  
10:40:46 116  	  var_range_diff  := var_l_end - var_l_start;
10:40:46 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
10:40:46 118  
10:40:46 119  	  IF (var_upper_bond_diff > 0) Then
10:40:46 120  	    var_l_end := var_l_end - var_upper_bond_diff;
10:40:46 121  	  END IF;
10:40:46 122  	  --Normalize the end points [END]
10:40:46 123  
10:40:46 124  	  OPEN out_result_set FOR
10:40:46 125  	    SELECT CHASE_PROFILE_ID FROM
10:40:46 126  	      (SELECT rownum rnum, q.* FROM
10:40:46 127  		 (SELECT
10:40:46 128  		    cc.CHASE_PROFILE_ID
10:40:46 129  		  FROM
10:40:46 130  		    CREDIT_CARD cc,
10:40:46 131  		    CC_UPDATE ccu
10:40:46 132  		  WHERE
10:40:46 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
10:40:46 134  		    AND ccu.CREDIT_CARD_ID = cc.id
10:40:46 135  		) Q
10:40:46 136  	      WHERE rownum <= var_l_end)
10:40:46 137  	    WHERE rnum >= var_l_Start;
10:40:46 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
10:40:46 139  
10:40:46 140  	/****************************************************************************/
10:40:46 141  
10:40:46 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
10:40:46 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
10:40:46 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:40:46 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
10:40:46 146  	)AS
10:40:46 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
10:40:46 148  	BEGIN
10:40:46 149  	  UPDATE CC_REQUEST_FILE
10:40:46 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
10:40:46 151  	      UPDATE_DATE = SYSDATE,
10:40:46 152  	      UPDATED_BY  = in_updated_by
10:40:46 153  	  WHERE ID = in_request_file_id;
10:40:46 154  	END UPDATE_REQUEST_FILE_STATUS;
10:40:46 155  
10:40:46 156  	/****************************************************************************/
10:40:46 157  
10:40:46 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
10:40:46 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:46 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:46 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:40:46 162  	) AS
10:40:46 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
10:40:46 164  	BEGIN
10:40:46 165  	  UPDATE CC_UPDATE
10:40:46 166  	  SET CC_UPDATE_STATUS = in_status,
10:40:46 167  	      UPDATE_DATE      = SYSDATE,
10:40:46 168  	      UPDATED_BY       = in_updated_by
10:40:46 169  	  WHERE
10:40:46 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
10:40:46 171  	END UPDATE_CC_REQUEST_STATUS;
10:40:46 172  
10:40:46 173  	/****************************************************************************/
10:40:46 174  
10:40:46 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
10:40:46 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
10:40:46 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
10:40:46 178  	  out_request_files   OUT SYS_REFCURSOR
10:40:46 179  	) AS
10:40:46 180  	var_older_than_hours NUMBER := in_older_than_hours;
10:40:46 181  	BEGIN
10:40:46 182  	 IF (var_older_than_hours IS NULL) THEN
10:40:46 183  	   var_older_than_hours := -288;
10:40:46 184  	 END IF;
10:40:46 185  
10:40:46 186  	 OPEN out_request_files FOR
10:40:46 187  	 SELECT
10:40:46 188  	   ID,
10:40:46 189  	   FILE_NAME
10:40:46 190  	 FROM
10:40:46 191  	   CC_REQUEST_FILE
10:40:46 192  	 WHERE
10:40:46 193  	   CC_REQUEST_FILE_STATUS = in_status
10:40:46 194  	 AND
10:40:46 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
10:40:46 196  	END REQUEST_FILES_BY_STATUS;
10:40:46 197  
10:40:46 198  	/****************************************************************************/
10:40:46 199  
10:40:46 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
10:40:46 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
10:40:46 202  	  out_count OUT NUMBER
10:40:46 203  	) AS
10:40:46 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
10:40:46 205  	BEGIN
10:40:46 206  	  SELECT COUNT(1) INTO out_count
10:40:46 207  	  FROM CC_UPDATE
10:40:46 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
10:40:46 209  	END COUNT_BY_REQUEST_FILE_ID;
10:40:46 210  
10:40:46 211  	/****************************************************************************/
10:40:46 212  
10:40:46 213  	PROCEDURE GET_CREDIT_CARD_INFO (
10:40:46 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
10:40:46 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
10:40:46 216  	  out_card_info        OUT SYS_REFCURSOR
10:40:46 217  	) AS
10:40:46 218  	BEGIN
10:40:46 219  	  OPEN out_card_info FOR
10:40:46 220  	  SELECT
10:40:46 221  	    u.LICENSE_ID,
10:40:46 222  	    cc.ACCOUNT_ID,
10:40:46 223  	    cc.ID CREDIT_CARD_ID,
10:40:46 224  	    cc.CHASE_PROFILE_ID,
10:40:46 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
10:40:46 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
10:40:46 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
10:40:46 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
10:40:46 229  	    u.ID CC_UPDATE_ID,
10:40:46 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
10:40:46 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
10:40:46 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
10:40:46 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
10:40:46 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
10:40:46 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
10:40:46 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
10:40:46 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
10:40:46 238  	  ORDER BY cc.UPDATE_DATE DESC;
10:40:46 239  	END GET_CREDIT_CARD_INFO;
10:40:46 240  
10:40:46 241  	/****************************************************************************/
10:40:46 242  
10:40:46 243  	PROCEDURE UPDATE_CC_UPDATE(
10:40:46 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
10:40:46 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:46 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
10:40:46 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
10:40:46 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
10:40:46 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
10:40:46 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
10:40:46 251  	) AS
10:40:46 252  	BEGIN
10:40:46 253  	  UPDATE CC_UPDATE
10:40:46 254  	  SET CC_UPDATE_STATUS = in_status,
10:40:46 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
10:40:46 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
10:40:46 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
10:40:46 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
10:40:46 259  	  UPDATE_DATE = SYSDATE,
10:40:46 260  	  UPDATED_BY = in_updated_by
10:40:46 261  	  WHERE ID = in_id;
10:40:46 262  	END UPDATE_CC_UPDATE;
10:40:46 263  
10:40:46 264  	/****************************************************************************/
10:40:46 265  
10:40:46 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
10:40:46 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
10:40:46 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
10:40:46 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
10:40:46 270  	) AS
10:40:46 271  	BEGIN
10:40:46 272  	  UPDATE CC_UPDATE
10:40:46 273  	  SET CC_UPDATE_STATUS = in_status,
10:40:46 274  	  UPDATE_DATE = SYSDATE,
10:40:46 275  	  UPDATED_BY = in_updated_by
10:40:46 276  	  WHERE ID = in_id;
10:40:46 277  	END UPDATE_CC_UPDATE_STATUS;
10:40:46 278  
10:40:46 279  	/****************************************************************************/
10:40:46 280  
10:40:46 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
10:40:46 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
10:40:46 283  	  out_request_file     OUT SYS_REFCURSOR
10:40:46 284  	) AS
10:40:46 285  	BEGIN
10:40:46 286  	  OPEN out_request_file FOR
10:40:46 287  	  SELECT ID, FILE_NAME
10:40:46 288  	  FROM CC_REQUEST_FILE
10:40:46 289  	  WHERE FILE_NAME = in_request_filename;
10:40:46 290  	END GET_REQUEST_FILE_BY_FILENAME;
10:40:46 291  
10:40:46 292  	/****************************************************************************/
10:40:46 293  
10:40:46 294  	PROCEDURE SUSPEND_CREDIT_CARD (
10:40:46 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
10:40:46 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:46 297  	) AS
10:40:46 298  	BEGIN
10:40:46 299  	  -- Create history
10:40:46 300  	  PROCS_HISTORY_V22.CREATE_CREDIT_CARD_HISTORY(
10:40:46 301  	      in_credit_card_id 	   => in_credit_card_id,
10:40:46 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 303  	  );
10:40:46 304  
10:40:46 305  	  UPDATE CREDIT_CARD
10:40:46 306  	  SET UPDATE_DATE = SYSDATE,
10:40:46 307  	  UPDATED_BY = in_updated_by,
10:40:46 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V22.CREDIT_CARD_DISABLED
10:40:46 309  	  WHERE ID = in_credit_card_id;
10:40:46 310  	END SUSPEND_CREDIT_CARD;
10:40:46 311  
10:40:46 312  	/****************************************************************************/
10:40:46 313  
10:40:46 314  	PROCEDURE UPDATE_CREDIT_CARD (
10:40:46 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
10:40:46 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:46 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
10:40:46 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:46 319  	) AS
10:40:46 320  	BEGIN
10:40:46 321  	  -- Create history
10:40:46 322  	  PROCS_HISTORY_V22.CREATE_CREDIT_CARD_HISTORY(
10:40:46 323  	      in_credit_card_id 	   => in_credit_card_id,
10:40:46 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V22.SAC_SYSTEM_APPLIED_RULE
10:40:46 325  	  );
10:40:46 326  
10:40:46 327  	  UPDATE CREDIT_CARD
10:40:46 328  	  SET UPDATE_DATE = SYSDATE,
10:40:46 329  	  UPDATED_BY = in_updated_by,
10:40:46 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
10:40:46 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
10:40:46 332  	  WHERE ID = in_credit_card_id;
10:40:46 333  	END UPDATE_CREDIT_CARD;
10:40:46 334  
10:40:46 335  	/****************************************************************************/
10:40:46 336  
10:40:46 337  	PROCEDURE COMPLETABLE_REQUESTS (
10:40:46 338  	  out_request_files OUT SYS_REFCURSOR
10:40:46 339  	) AS
10:40:46 340  	BEGIN
10:40:46 341  	  OPEN out_request_files FOR
10:40:46 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
10:40:46 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:40:46 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:40:46 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:40:46 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
10:40:46 347  	  MINUS
10:40:46 348  	  SELECT rf.ID, rf.FILE_NAME
10:40:46 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:40:46 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:40:46 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:40:46 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
10:40:46 353  	END COMPLETABLE_REQUESTS;
10:40:46 354  
10:40:46 355  	/****************************************************************************/
10:40:46 356  
10:40:46 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
10:40:46 358  	  in_max_hours_before_report IN  NUMBER,
10:40:46 359  	  out_request_files	     OUT SYS_REFCURSOR
10:40:46 360  	) AS
10:40:46 361  	BEGIN
10:40:46 362  	  OPEN out_request_files FOR
10:40:46 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
10:40:46 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:40:46 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:40:46 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:40:46 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
10:40:46 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
10:40:46 369  	  MINUS
10:40:46 370  	  SELECT rf.ID, rf.FILE_NAME
10:40:46 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
10:40:46 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
10:40:46 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
10:40:46 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
10:40:46 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
10:40:46 376  	END COMPLETABLE_REQUESTS_W_FAILS;
10:40:46 377  
10:40:46 378  	/****************************************************************************/
10:40:46 379  
10:40:46 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:40:46 381  	  in_account_id IN NUMBER,
10:40:46 382  	  out_group_id	OUT NUMBER
10:40:46 383  	) AS
10:40:46 384  	BEGIN
10:40:46 385  	  PROCS_ACCOUNT_V22.GET_GROUP_ID_BY_ACCOUNT_ID(
10:40:46 386  	    in_account_id => in_account_id,
10:40:46 387  	    out_group_id => out_group_id
10:40:46 388  	  );
10:40:46 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
10:40:46 390  
10:40:46 391  	/****************************************************************************/
10:40:46 392  
10:40:46 393  	PROCEDURE GET_LICENSE_BY_ID (
10:40:46 394  	  in_license_id  IN NUMBER,
10:40:46 395  	  out_result_set OUT SYS_REFCURSOR
10:40:46 396  	) AS
10:40:46 397  	BEGIN
10:40:46 398  	  PROCS_LICENSE_V22.GET_LICENSE_BY_ID(
10:40:46 399  	    in_license_id => in_license_id,
10:40:46 400  	    out_result_set => out_result_set
10:40:46 401  	  );
10:40:46 402  	END GET_LICENSE_BY_ID;
10:40:46 403  
10:40:46 404  END PROCS_CUPY;
10:40:46 405  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.46
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE
10:40:46   2  PACKAGE BODY PROCS_ENTITLEMENT_V22 AS
10:40:46   3  
10:40:46   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
10:40:46   5  	  in_subscription_id IN NUMBER,
10:40:46   6  	  out_uri OUT VARCHAR2)
10:40:46   7  	AS
10:40:46   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
10:40:46   9  	  UNKNOWN_ERROR   EXCEPTION;
10:40:46  10  	BEGIN
10:40:46  11  	  SELECT
10:40:46  12  	    POMD.VALUE INTO out_uri
10:40:46  13  	  FROM
10:40:46  14  	     OFFER_PRODUCT_OFFERING OPO,
10:40:46  15  	     PRODUCT_OFFERING PO,
10:40:46  16  	     OFFER_OFFER_CHAIN OOC,
10:40:46  17  	     SUBSCRIPTION S,
10:40:46  18  	     LICENSE LL,
10:40:46  19  	     PRODUCT_OFFERING_META_DATA POMD
10:40:46  20  	  WHERE
10:40:46  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
10:40:46  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
10:40:46  23  	     S.ID = in_subscription_id AND
10:40:46  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
10:40:46  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
10:40:46  26  	     PO.CAPABILITY_ID = 1 AND
10:40:46  27  	     S.ID = LL.SUBSCRIPTION_ID AND
10:40:46  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
10:40:46  29  	     NAME = 'entitlement_uri' AND
10:40:46  30  	     rownum < 2;
10:40:46  31  	EXCEPTION
10:40:46  32  	  WHEN OTHERS THEN
10:40:46  33  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
10:40:46  36  
10:40:46  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
10:40:46  38  	  in_group_id	 IN  NUMBER,
10:40:46  39  	  out_result_set OUT SYS_REFCURSOR)
10:40:46  40  	AS
10:40:46  41  	  -- CONSTANTS
10:40:46  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
10:40:46  43  	  -- EXCEPTIONS
10:40:46  44  	  NOT_FOUND	  EXCEPTION;
10:40:46  45  	  UNKNOWN_ERROR   EXCEPTION;
10:40:46  46  	  -- VARIABLES
10:40:46  47  	  var_subs	  SYS_REFCURSOR;
10:40:46  48  	BEGIN
10:40:46  49  	  OPEN out_result_set FOR
10:40:46  50  
10:40:46  51  	SELECT
10:40:46  52  	  C.CODE NAME,
10:40:46  53  	  C.DESCRIPTION,
10:40:46  54  	  0 INHERITED,
10:40:46  55  	  C.SHAREABLE,
10:40:46  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
10:40:46  57  	FROM
10:40:46  58  	  SUBSCRIPTION SB
10:40:46  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
10:40:46  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
10:40:46  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
10:40:46  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
10:40:46  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
10:40:46  64  	WHERE
10:40:46  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
10:40:46  66  	  AND LIC.START_DATE <= SYSDATE
10:40:46  67  	  AND AC.GROUP_ID = in_group_id
10:40:46  68  	GROUP BY
10:40:46  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
10:40:46  70  UNION ALL
10:40:46  71  	SELECT
10:40:46  72  	  C.CODE NAME,
10:40:46  73  	  C.DESCRIPTION,
10:40:46  74  	  1 INHERITED,
10:40:46  75  	  C.SHAREABLE,
10:40:46  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
10:40:46  77  	FROM
10:40:46  78  	  ACCOUNT BORROWER,
10:40:46  79  	  SUBSCRIPTION S,
10:40:46  80  	  LICENSE LIC,
10:40:46  81  	  OFFER_PRODUCT_OFFERING OPO,
10:40:46  82  	  PRODUCT_OFFERING PO,
10:40:46  83  	  CAPABILITY C,
10:40:46  84  	  GROUP_ACCOUNT GA,
10:40:46  85  	  SUBSCRIPTION_SHARE SS
10:40:46  86  	WHERE
10:40:46  87  	  BORROWER.GROUP_ID = in_group_id
10:40:46  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
10:40:46  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
10:40:46  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
10:40:46  91  	  AND PO.CAPABILITY_ID = C.ID
10:40:46  92  	  AND GA.SUBSCRIPTION_ID = S.ID
10:40:46  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
10:40:46  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
10:40:46  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
10:40:46  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
10:40:46  97  	  AND C.SHAREABLE = 1
10:40:46  98  	GROUP BY
10:40:46  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
10:40:46 100  
10:40:46 101  	EXCEPTION
10:40:46 102  	  WHEN OTHERS THEN
10:40:46 103  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 105  	END GET_ALL_ENTITLEMENTS;
10:40:46 106  
10:40:46 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
10:40:46 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:46 109  	  out_result_set OUT SYS_REFCURSOR)
10:40:46 110  	AS
10:40:46 111  	  -- CONSTANTS
10:40:46 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
10:40:46 113  	  -- EXCEPTIONS
10:40:46 114  	  NOT_FOUND	  EXCEPTION;
10:40:46 115  	  UNKNOWN_ERROR   EXCEPTION;
10:40:46 116  	  -- VARIABLES
10:40:46 117  	  var_subs	  SYS_REFCURSOR;
10:40:46 118  	BEGIN
10:40:46 119  	  OPEN out_result_set FOR
10:40:46 120  
10:40:46 121  	      SELECT
10:40:46 122  		c.code NAME,
10:40:46 123  		C.DESCRIPTION,
10:40:46 124  		0 INHERITED,
10:40:46 125  		C.SHAREABLE,
10:40:46 126  		sysdate as EXPIRES
10:40:46 127  	      FROM
10:40:46 128  		offer_offer_chain ooc,
10:40:46 129  		offer o,
10:40:46 130  		offer_product_offering opo,
10:40:46 131  		product_offering po,
10:40:46 132  		capability c
10:40:46 133  	      WHERE
10:40:46 134  		o.id = ooc.offer_id AND
10:40:46 135  		opo.offer_id = o.id AND
10:40:46 136  		po.id = opo.product_offering_id AND
10:40:46 137  		c.id = po.capability_id AND
10:40:46 138  		c.id !=0 AND
10:40:46 139  		ooc.offer_chain_id =
10:40:46 140  		(SELECT
10:40:46 141  		    ocmd.offer_chain_id
10:40:46 142  		  FROM
10:40:46 143  		      offer_chain_meta_data ocmd
10:40:46 144  		  WHERE
10:40:46 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
10:40:46 146  		      ocmd.value = in_product_id AND
10:40:46 147  		      rownum < 2
10:40:46 148  		)
10:40:46 149  	      ;
10:40:46 150  
10:40:46 151  	EXCEPTION
10:40:46 152  	  WHEN OTHERS THEN
10:40:46 153  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 155  	END GET_ITUNES_ENTITLEMENTS;
10:40:46 156  
10:40:46 157  END PROCS_ENTITLEMENT_V22;
10:40:46 158  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE CREATE_AASR_HISTORY(
10:40:46   4  	in_id			     IN CORE_OWNER.AMAZON_APPSTORE_RECEIPT.ID%TYPE,
10:40:46   5  	in_system_activity_reason_id IN NUMBER,
10:40:46   6  	in_created_by		     IN VARCHAR2
10:40:46   7  ) AS
10:40:46   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_AASR_HISTORY';
10:40:46   9  var_id		  AMAZON_APPSTORE_RECEIPT.ID%TYPE;
10:40:46  10  var_subscription_id AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID%TYPE;
10:40:46  11  var_user_id	  AMAZON_APPSTORE_RECEIPT.USER_ID%TYPE;
10:40:46  12  var_item_type	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE%TYPE;
10:40:46  13  var_start_date	  AMAZON_APPSTORE_RECEIPT.START_DATE%TYPE;
10:40:46  14  var_end_date	  AMAZON_APPSTORE_RECEIPT.END_DATE%TYPE;
10:40:46  15  var_sku		  AMAZON_APPSTORE_RECEIPT.SKU%TYPE;
10:40:46  16  var_purchase_token  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN%TYPE;
10:40:46  17  var_create_date	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE%TYPE;
10:40:46  18  var_created_by	  AMAZON_APPSTORE_RECEIPT.CREATED_BY%TYPE;
10:40:46  19  var_update_date	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE%TYPE;
10:40:46  20  var_updated_by	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY%TYPE;
10:40:46  21  var_last_check_date AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE%TYPE;
10:40:46  22  BEGIN
10:40:46  23  	SELECT
10:40:46  24  	  AMAZON_APPSTORE_RECEIPT.ID,
10:40:46  25  	  AMAZON_APPSTORE_RECEIPT.SUBSCRIPTION_ID,
10:40:46  26  	  AMAZON_APPSTORE_RECEIPT.USER_ID,
10:40:46  27  	  AMAZON_APPSTORE_RECEIPT.ITEM_TYPE,
10:40:46  28  	  AMAZON_APPSTORE_RECEIPT.START_DATE,
10:40:46  29  	  AMAZON_APPSTORE_RECEIPT.END_DATE,
10:40:46  30  	  AMAZON_APPSTORE_RECEIPT.SKU,
10:40:46  31  	  AMAZON_APPSTORE_RECEIPT.PURCHASE_TOKEN,
10:40:46  32  	  AMAZON_APPSTORE_RECEIPT.CREATE_DATE,
10:40:46  33  	  AMAZON_APPSTORE_RECEIPT.CREATED_BY,
10:40:46  34  	  AMAZON_APPSTORE_RECEIPT.UPDATE_DATE,
10:40:46  35  	  AMAZON_APPSTORE_RECEIPT.UPDATED_BY,
10:40:46  36  	  AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE
10:40:46  37  	INTO
10:40:46  38  	  var_id,
10:40:46  39  	  var_subscription_id,
10:40:46  40  	  var_user_id,
10:40:46  41  	  var_item_type,
10:40:46  42  	  var_start_date,
10:40:46  43  	  var_end_date,
10:40:46  44  	  var_sku,
10:40:46  45  	  var_purchase_token,
10:40:46  46  	  var_create_date,
10:40:46  47  	  var_created_by,
10:40:46  48  	  var_update_date,
10:40:46  49  	  var_updated_by,
10:40:46  50  	  var_last_check_date
10:40:46  51  	FROM
10:40:46  52  	  AMAZON_APPSTORE_RECEIPT
10:40:46  53  	WHERE
10:40:46  54  	  AMAZON_APPSTORE_RECEIPT.ID = in_id;
10:40:46  55  
10:40:46  56  	CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_AASR_HISTORY(
10:40:46  57  	    var_id,
10:40:46  58  	    var_subscription_id,
10:40:46  59  	    var_user_id,
10:40:46  60  	    var_item_type,
10:40:46  61  	    var_start_date,
10:40:46  62  	    var_end_date,
10:40:46  63  	    var_sku,
10:40:46  64  	    var_purchase_token,
10:40:46  65  	    var_create_date,
10:40:46  66  	    var_created_by,
10:40:46  67  	    var_update_date,
10:40:46  68  	    var_updated_by,
10:40:46  69  	    in_system_activity_reason_id,
10:40:46  70  	    in_created_by,
10:40:46  71  	    var_last_check_date
10:40:46  72  	);
10:40:46  73  END CREATE_AASR_HISTORY;
10:40:46  74  
10:40:46  75  PROCEDURE CREATE_ADDRESS_HISTORY(
10:40:46  76  	in_address_id		     IN NUMBER,
10:40:46  77  	in_system_activity_reason_id IN NUMBER
10:40:46  78  ) AS
10:40:46  79  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
10:40:46  80  -- VARIABLES
10:40:46  81  var_address1    ADDRESS.ADDRESS1%TYPE;
10:40:46  82  var_address2    ADDRESS.ADDRESS2%TYPE;
10:40:46  83  var_city	      ADDRESS.CITY%TYPE;
10:40:46  84  var_state       ADDRESS.STATE%TYPE;
10:40:46  85  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
10:40:46  86  var_country     ADDRESS.COUNTRY%TYPE;
10:40:46  87  var_created_by  ADDRESS.CREATED_BY%TYPE;
10:40:46  88  var_create_date ADDRESS.CREATE_DATE%TYPE;
10:40:46  89  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
10:40:46  90  var_update_date ADDRESS.UPDATE_DATE%TYPE;
10:40:46  91  -- EXCEPTIONS
10:40:46  92  BAD_ADDRESS_ID	     EXCEPTION;
10:40:46  93  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46  94  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46  95  BEGIN
10:40:46  96  
10:40:46  97  	BEGIN
10:40:46  98  	  SELECT
10:40:46  99  	    ADDRESS.ADDRESS1,
10:40:46 100  	    ADDRESS.ADDRESS2,
10:40:46 101  	    ADDRESS.CITY,
10:40:46 102  	    ADDRESS.STATE,
10:40:46 103  	    ADDRESS.POSTAL_CODE,
10:40:46 104  	    ADDRESS.COUNTRY,
10:40:46 105  	    ADDRESS.CREATED_BY,
10:40:46 106  	    ADDRESS.CREATE_DATE,
10:40:46 107  	    ADDRESS.UPDATED_BY,
10:40:46 108  	    ADDRESS.UPDATE_DATE
10:40:46 109  	    into
10:40:46 110  	    var_address1,
10:40:46 111  	    var_address2,
10:40:46 112  	    var_city,
10:40:46 113  	    var_state,
10:40:46 114  	    var_postal_code,
10:40:46 115  	    var_country,
10:40:46 116  	    var_created_by,
10:40:46 117  	    var_create_date,
10:40:46 118  	    var_updated_by,
10:40:46 119  	    var_update_date
10:40:46 120  	  FROM
10:40:46 121  	    ADDRESS
10:40:46 122  	  WHERE
10:40:46 123  	    ADDRESS.ID = in_address_id;
10:40:46 124  	  EXCEPTION
10:40:46 125  	    WHEN NO_DATA_FOUND THEN
10:40:46 126  	      RAISE BAD_ADDRESS_ID;
10:40:46 127  	END;
10:40:46 128  
10:40:46 129  	BEGIN
10:40:46 130  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_ADDRESS_HISTORY(
10:40:46 131  	    in_address_id,
10:40:46 132  	    in_system_activity_reason_id,
10:40:46 133  	    var_address1,
10:40:46 134  	    var_address2,
10:40:46 135  	    var_city,
10:40:46 136  	    var_state,
10:40:46 137  	    var_postal_code,
10:40:46 138  	    var_country,
10:40:46 139  	    var_created_by,
10:40:46 140  	    var_create_date,
10:40:46 141  	    var_updated_by,
10:40:46 142  	    var_update_date
10:40:46 143  	  );
10:40:46 144  	  EXCEPTION
10:40:46 145  	    WHEN OTHERS THEN
10:40:46 146  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 147  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 148  	END;
10:40:46 149  
10:40:46 150  EXCEPTION
10:40:46 151  WHEN BAD_ADDRESS_ID THEN
10:40:46 152  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 153  	  SPROC_NAME, 'Bad recipientAddress id');
10:40:46 154  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 155  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 156  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 157  WHEN OTHERS THEN
10:40:46 158  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 159  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 160  END CREATE_ADDRESS_HISTORY;
10:40:46 161  
10:40:46 162  /********************************************************************/
10:40:46 163  
10:40:46 164  PROCEDURE CREATE_ACCOUNT_HISTORY(
10:40:46 165  	in_account_id		     IN NUMBER,
10:40:46 166  	in_system_activity_reason_id IN NUMBER
10:40:46 167  ) AS
10:40:46 168  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
10:40:46 169  -- VARIABLES
10:40:46 170  var_account_status_id  NUMBER;
10:40:46 171  var_suspend_date	     DATE;
10:40:46 172  var_group_id	     NUMBER;
10:40:46 173  var_instrument_type_id NUMBER;
10:40:46 174  var_instrument_id      NUMBER;
10:40:46 175  var_updated_by	     VARCHAR2(255);
10:40:46 176  var_update_date	     DATE;
10:40:46 177  -- EXCEPTIONS
10:40:46 178  BAD_ACCOUNT_ID	     EXCEPTION;
10:40:46 179  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 180  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 181  BEGIN
10:40:46 182  
10:40:46 183  	BEGIN
10:40:46 184  	  SELECT
10:40:46 185  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:40:46 186  	    ACCOUNT.GROUP_ID,
10:40:46 187  	    ACCOUNT.INSTRUMENT_TYPE_ID,
10:40:46 188  	    ACCOUNT.INSTRUMENT_ID,
10:40:46 189  	    ACCOUNT.UPDATED_BY,
10:40:46 190  	    ACCOUNT.UPDATE_DATE
10:40:46 191  	    into
10:40:46 192  	    var_account_status_id,
10:40:46 193  	    var_group_id,
10:40:46 194  	    var_instrument_type_id,
10:40:46 195  	    var_instrument_id,
10:40:46 196  	    var_updated_by,
10:40:46 197  	    var_update_date
10:40:46 198  	  FROM
10:40:46 199  	    ACCOUNT
10:40:46 200  	  WHERE
10:40:46 201  	    ACCOUNT.ID = in_account_id;
10:40:46 202  	  EXCEPTION
10:40:46 203  	    WHEN NO_DATA_FOUND THEN
10:40:46 204  	      RAISE BAD_ACCOUNT_ID;
10:40:46 205  	END;
10:40:46 206  
10:40:46 207  	BEGIN
10:40:46 208  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_ACCOUNT_HISTORY(
10:40:46 209  	    in_account_id,
10:40:46 210  	    var_suspend_date,
10:40:46 211  	    var_group_id,
10:40:46 212  	    var_updated_by,
10:40:46 213  	    var_update_date,
10:40:46 214  	    in_system_activity_reason_id,
10:40:46 215  	    var_account_status_id,
10:40:46 216  	    var_instrument_type_id,
10:40:46 217  	    var_instrument_id
10:40:46 218  	  );
10:40:46 219  	  EXCEPTION
10:40:46 220  	    WHEN OTHERS THEN
10:40:46 221  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 222  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 223  	END;
10:40:46 224  
10:40:46 225  EXCEPTION
10:40:46 226  WHEN BAD_ACCOUNT_ID THEN
10:40:46 227  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 228  	  SPROC_NAME, 'Bad account id');
10:40:46 229  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 230  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 231  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 232  WHEN OTHERS THEN
10:40:46 233  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 234  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 235  END CREATE_ACCOUNT_HISTORY;
10:40:46 236  
10:40:46 237  /********************************************************************/
10:40:46 238  
10:40:46 239  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
10:40:46 240  	in_subscription_id	     IN NUMBER,
10:40:46 241  	in_system_activity_reason_id IN NUMBER
10:40:46 242  ) AS
10:40:46 243  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
10:40:46 244  -- VARIABLES
10:40:46 245  var_account_id		    NUMBER;
10:40:46 246  var_purchase_date 	    DATE;
10:40:46 247  var_offer_chain_id	    NUMBER;
10:40:46 248  var_suspend_date		    DATE;
10:40:46 249  var_termination_date	    DATE;
10:40:46 250  var_days_ramaining_adjustment NUMBER;
10:40:46 251  var_sct_id		    NUMBER;
10:40:46 252  var_updated_by		    VARCHAR2(255);
10:40:46 253  var_update_date		    DATE;
10:40:46 254  -- EXCEPTIONS
10:40:46 255  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:40:46 256  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 257  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 258  BEGIN
10:40:46 259  
10:40:46 260  	BEGIN
10:40:46 261  	  SELECT
10:40:46 262  	    SUBSCRIPTION.account_id,
10:40:46 263  	    SUBSCRIPTION.PURCHASE_DATE,
10:40:46 264  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:40:46 265  	    SUBSCRIPTION.SUSPEND_DATE,
10:40:46 266  	    SUBSCRIPTION.TERMINATION_DATE,
10:40:46 267  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
10:40:46 268  	    SUBSCRIPTION.SCT_ID,
10:40:46 269  	    SUBSCRIPTION.UPDATED_BY,
10:40:46 270  	    SUBSCRIPTION.UPDATE_DATE
10:40:46 271  	    into
10:40:46 272  	    var_account_id,
10:40:46 273  	    var_purchase_date,
10:40:46 274  	    var_offer_chain_id,
10:40:46 275  	    var_suspend_date,
10:40:46 276  	    var_termination_date,
10:40:46 277  	    var_days_ramaining_adjustment,
10:40:46 278  	    var_sct_id,
10:40:46 279  	    var_updated_by,
10:40:46 280  	    var_update_date
10:40:46 281  	  FROM
10:40:46 282  	    SUBSCRIPTION
10:40:46 283  	  WHERE
10:40:46 284  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:46 285  	  EXCEPTION
10:40:46 286  	    WHEN NO_DATA_FOUND THEN
10:40:46 287  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:46 288  	END;
10:40:46 289  
10:40:46 290  	BEGIN
10:40:46 291  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_SUBSCRIPTION_HISTORY(
10:40:46 292  	    in_subscription_id,
10:40:46 293  	    var_account_id,
10:40:46 294  	    var_purchase_date,
10:40:46 295  	    var_offer_chain_id,
10:40:46 296  	    var_suspend_date,
10:40:46 297  	    var_termination_date,
10:40:46 298  	    var_days_ramaining_adjustment,
10:40:46 299  	    var_sct_id,
10:40:46 300  	    var_updated_by,
10:40:46 301  	    var_update_date,
10:40:46 302  	    in_system_activity_reason_id
10:40:46 303  	  );
10:40:46 304  	  EXCEPTION
10:40:46 305  	    WHEN OTHERS THEN
10:40:46 306  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 307  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 308  	END;
10:40:46 309  
10:40:46 310  EXCEPTION
10:40:46 311  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:46 312  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 313  	  SPROC_NAME, 'No such subscription');
10:40:46 314  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 315  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 316  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 317  WHEN OTHERS THEN
10:40:46 318  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 320  END CREATE_SUBSCRIPTION_HISTORY;
10:40:46 321  
10:40:46 322  /********************************************************************/
10:40:46 323  
10:40:46 324  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
10:40:46 325  	in_credit_card_id	      IN NUMBER,
10:40:46 326  	in_system_activity_reason_id  IN NUMBER
10:40:46 327  ) AS
10:40:46 328  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
10:40:46 329  -- VARIABLES
10:40:46 330  var_account_id		     NUMBER;
10:40:46 331  var_instrument_name	     VARCHAR2(255);
10:40:46 332  var_private_card_holder_name   VARCHAR2(256);
10:40:46 333  var_private_street_address     VARCHAR2(256);
10:40:46 334  var_private_street_address2    VARCHAR2(256);
10:40:46 335  var_state 		     VARCHAR2(50);
10:40:46 336  var_city			     VARCHAR2(50);
10:40:46 337  var_postal_code		     VARCHAR2(20);
10:40:46 338  var_country		     CHAR(2);
10:40:46 339  var_last_four_cc		     VARCHAR2(4);
10:40:46 340  var_expiration_date	     DATE;
10:40:46 341  var_credit_card_type_id	     NUMBER;
10:40:46 342  var_secret_token		     VARCHAR2(255);
10:40:46 343  var_chase_profile_id	     VARCHAR2(255);
10:40:46 344  var_credit_card_status_id      NUMBER;
10:40:46 345  var_updated_by		     VARCHAR2(255);
10:40:46 346  var_update_date		     DATE;
10:40:46 347  -- EXCEPTIONS
10:40:46 348  BAD_CREDIT_CARD_ID     EXCEPTION;
10:40:46 349  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 350  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 351  BEGIN
10:40:46 352  
10:40:46 353  	BEGIN
10:40:46 354  	  SELECT
10:40:46 355  	    ACCOUNT_ID,
10:40:46 356  	    INSTRUMENT_NAME,
10:40:46 357  	    PRIVATE_CARD_HOLDER_NAME,
10:40:46 358  	    PRIVATE_STREET_ADDRESS,
10:40:46 359  	    PRIVATE_STREET_ADDRESS2,
10:40:46 360  	    STATE,
10:40:46 361  	    CITY,
10:40:46 362  	    POSTAL_CODE,
10:40:46 363  	    COUNTRY,
10:40:46 364  	    LAST_FOUR_CC,
10:40:46 365  	    EXPIRATION_DATE,
10:40:46 366  	    CREDIT_CARD_TYPE_ID,
10:40:46 367  	    SECRET_TOKEN,
10:40:46 368  	    CHASE_PROFILE_ID,
10:40:46 369  	    CREDIT_CARD_STATUS_ID,
10:40:46 370  	    UPDATED_BY,
10:40:46 371  	    UPDATE_DATE
10:40:46 372  	    into
10:40:46 373  	    var_account_id,
10:40:46 374  	    var_instrument_name,
10:40:46 375  	    var_private_card_holder_name,
10:40:46 376  	    var_private_street_address,
10:40:46 377  	    var_private_street_address2,
10:40:46 378  	    var_state,
10:40:46 379  	    var_city,
10:40:46 380  	    var_postal_code,
10:40:46 381  	    var_country,
10:40:46 382  	    var_last_four_cc,
10:40:46 383  	    var_expiration_date,
10:40:46 384  	    var_credit_card_type_id,
10:40:46 385  	    var_secret_token,
10:40:46 386  	    var_chase_profile_id,
10:40:46 387  	    var_credit_card_status_id,
10:40:46 388  	    var_updated_by,
10:40:46 389  	    var_update_date
10:40:46 390  	  FROM
10:40:46 391  	    CREDIT_CARD
10:40:46 392  	  WHERE
10:40:46 393  	    CREDIT_CARD.ID = in_credit_card_id;
10:40:46 394  	  EXCEPTION
10:40:46 395  	    WHEN NO_DATA_FOUND THEN
10:40:46 396  	      RAISE BAD_CREDIT_CARD_ID;
10:40:46 397  	END;
10:40:46 398  
10:40:46 399  	BEGIN
10:40:46 400  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_CREDIT_CARD_HISTORY(
10:40:46 401  	    in_credit_card_id,
10:40:46 402  	    var_account_id,
10:40:46 403  	    var_instrument_name,
10:40:46 404  	    var_private_card_holder_name,
10:40:46 405  	    var_private_street_address,
10:40:46 406  	    var_private_street_address2,
10:40:46 407  	    var_state,
10:40:46 408  	    var_city,
10:40:46 409  	    var_postal_code,
10:40:46 410  	    var_country,
10:40:46 411  	    var_last_four_cc,
10:40:46 412  	    var_expiration_date,
10:40:46 413  	    var_credit_card_type_id,
10:40:46 414  	    var_secret_token,
10:40:46 415  	    var_chase_profile_id,
10:40:46 416  	    var_credit_card_status_id,
10:40:46 417  	    var_updated_by,
10:40:46 418  	    var_update_date,
10:40:46 419  	    in_system_activity_reason_id
10:40:46 420  	  );
10:40:46 421  	  EXCEPTION
10:40:46 422  	    WHEN OTHERS THEN
10:40:46 423  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 424  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 425  	END;
10:40:46 426  
10:40:46 427  EXCEPTION
10:40:46 428  WHEN BAD_CREDIT_CARD_ID THEN
10:40:46 429  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 430  	  SPROC_NAME, 'No such credit card');
10:40:46 431  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 432  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 433  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 434  WHEN OTHERS THEN
10:40:46 435  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 437  END CREATE_CREDIT_CARD_HISTORY;
10:40:46 438  
10:40:46 439  /********************************************************************/
10:40:46 440  
10:40:46 441  PROCEDURE CREATE_PAYPAL_HISTORY(
10:40:46 442  /*
10:40:46 443  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 444  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 445  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:46 446  */
10:40:46 447  	in_paypal_id		      IN NUMBER,
10:40:46 448  	in_system_activity_reason_id  IN NUMBER
10:40:46 449  ) AS
10:40:46 450  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
10:40:46 451  -- VARIABLES
10:40:46 452  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
10:40:46 453  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
10:40:46 454  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
10:40:46 455  var_created_by		   PAYPAL.CREATED_BY%TYPE;
10:40:46 456  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
10:40:46 457  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
10:40:46 458  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
10:40:46 459  var_state 		   PAYPAL.STATE%TYPE;
10:40:46 460  var_city			   PAYPAL.CITY%TYPE;
10:40:46 461  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
10:40:46 462  var_country		   PAYPAL.COUNTRY%TYPE;
10:40:46 463  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
10:40:46 464  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
10:40:46 465  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
10:40:46 466  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
10:40:46 467  -- EXCEPTION
10:40:46 468  BAD_PAYPAL_ID	  EXCEPTION;
10:40:46 469  CAN_NOT_ADD_HISTORY EXCEPTION;
10:40:46 470  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:40:46 471  BEGIN
10:40:46 472  
10:40:46 473  	BEGIN
10:40:46 474  	  SELECT
10:40:46 475  	    ACCOUNT_ID,
10:40:46 476  	    INSTRUMENT_NAME,
10:40:46 477  	    PRIVATE_EMAIL_ADDRESS,
10:40:46 478  	    UPDATE_DATE,
10:40:46 479  	    UPDATED_BY,
10:40:46 480  	    PAYPAL_STATUS_ID,
10:40:46 481  	    PRIVATE_STREET_ADDRESS,
10:40:46 482  	    PRIVATE_STREET_ADDRESS2,
10:40:46 483  	    STATE,
10:40:46 484  	    CITY,
10:40:46 485  	    POSTAL_CODE,
10:40:46 486  	    COUNTRY,
10:40:46 487  	    EXPIRATION_DATE,
10:40:46 488  	    SECRET_TOKEN
10:40:46 489  	  INTO
10:40:46 490  	    var_account_id,
10:40:46 491  	    var_instrument_name,
10:40:46 492  	    var_private_email_address,
10:40:46 493  	    var_update_date,
10:40:46 494  	    var_updated_by,
10:40:46 495  	    var_paypal_status_id,
10:40:46 496  	    var_paypal_prvt_street_addr,
10:40:46 497  	    var_paypal_prvt_street_addr2,
10:40:46 498  	    var_state,
10:40:46 499  	    var_city,
10:40:46 500  	    var_postal_code,
10:40:46 501  	    var_country,
10:40:46 502  	    var_expiration_date,
10:40:46 503  	    var_secret_token
10:40:46 504  	  FROM
10:40:46 505  	    PAYPAL
10:40:46 506  	  WHERE
10:40:46 507  	    ID = in_paypal_id;
10:40:46 508  	  EXCEPTION
10:40:46 509  	    WHEN NO_DATA_FOUND THEN
10:40:46 510  	      RAISE BAD_PAYPAL_ID;
10:40:46 511  	END;
10:40:46 512  
10:40:46 513  	BEGIN
10:40:46 514  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_PAYPAL_HISTORY(
10:40:46 515  	    in_paypal_id,
10:40:46 516  	    var_account_id,
10:40:46 517  	    var_instrument_name,
10:40:46 518  	    var_private_email_address,
10:40:46 519  	    var_updated_by,
10:40:46 520  	    var_update_date,
10:40:46 521  	    var_paypal_status_id,
10:40:46 522  	    var_paypal_prvt_street_addr,
10:40:46 523  	    var_paypal_prvt_street_addr2,
10:40:46 524  	    var_state,
10:40:46 525  	    var_city,
10:40:46 526  	    var_postal_code,
10:40:46 527  	    var_country,
10:40:46 528  	    var_expiration_date,
10:40:46 529  	    in_system_activity_reason_id,
10:40:46 530  	    var_secret_token
10:40:46 531  	  );
10:40:46 532  	  EXCEPTION
10:40:46 533  	    WHEN OTHERS THEN
10:40:46 534  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 535  	      RAISE CAN_NOT_ADD_HISTORY;
10:40:46 536  	END;
10:40:46 537  
10:40:46 538  EXCEPTION
10:40:46 539  WHEN BAD_PAYPAL_ID THEN
10:40:46 540  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 541  	  SPROC_NAME, 'No such paypal');
10:40:46 542  WHEN CAN_NOT_ADD_HISTORY THEN
10:40:46 543  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 544  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
10:40:46 545  WHEN OTHERS THEN
10:40:46 546  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 548  END CREATE_PAYPAL_HISTORY;
10:40:46 549  
10:40:46 550  /********************************************************************/
10:40:46 551  
10:40:46 552  PROCEDURE CREATE_GIFT_CERT_HISTORY(
10:40:46 553  	in_gift_certificate_id	      IN NUMBER,
10:40:46 554  	in_system_activity_reason_id  IN NUMBER
10:40:46 555  ) AS
10:40:46 556  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
10:40:46 557  -- VARIABLES
10:40:46 558  var_purchaser_group_id	     NUMBER;
10:40:46 559  var_purchase_invoice_id	     NUMBER;
10:40:46 560  var_offer_chain_id	     NUMBER;
10:40:46 561  var_expiration_date	     DATE;
10:40:46 562  var_purchase_date 	     DATE;
10:40:46 563  var_gift_certificate_status_id NUMBER;
10:40:46 564  var_code			     VARCHAR2(255);
10:40:46 565  var_recipient_name	     VARCHAR2(255);
10:40:46 566  var_gift_message		     VARCHAR2(500);
10:40:46 567  var_recipient_email	     VARCHAR2(255);
10:40:46 568  var_finalized_invoice_id	     NUMBER;
10:40:46 569  var_sender_email		     VARCHAR2(50);
10:40:46 570  var_sender_name		     VARCHAR2(50);
10:40:46 571  var_redemption_date	     DATE;
10:40:46 572  var_redeemer_group_id	     NUMBER;
10:40:46 573  var_cancelation_date	     DATE;
10:40:46 574  var_updated_by		     VARCHAR2(255);
10:40:46 575  var_update_date		     DATE;
10:40:46 576  var_recipient_address_id	     NUMBER;
10:40:46 577  var_redeemer_address_id	     NUMBER;
10:40:46 578  var_recipient_notify_date      DATE;
10:40:46 579  -- EXCEPTIONS
10:40:46 580  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:40:46 581  CAN_NOT_CREATE_HISTORY  EXCEPTION;
10:40:46 582  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:46 583  BEGIN
10:40:46 584  
10:40:46 585  	BEGIN
10:40:46 586  	  SELECT
10:40:46 587  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:40:46 588  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
10:40:46 589  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:40:46 590  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
10:40:46 591  	    GIFT_CERTIFICATE.PURCHASE_DATE,
10:40:46 592  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:40:46 593  	    GIFT_CERTIFICATE.CODE,
10:40:46 594  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
10:40:46 595  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
10:40:46 596  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:40:46 597  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
10:40:46 598  	    GIFT_CERTIFICATE.SENDER_EMAIL,
10:40:46 599  	    GIFT_CERTIFICATE.SENDER_NAME,
10:40:46 600  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
10:40:46 601  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:40:46 602  	    GIFT_CERTIFICATE.CANCELATION_DATE,
10:40:46 603  	    GIFT_CERTIFICATE.UPDATED_BY,
10:40:46 604  	    GIFT_CERTIFICATE.UPDATE_DATE,
10:40:46 605  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
10:40:46 606  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
10:40:46 607  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
10:40:46 608  	    into
10:40:46 609  	    var_purchaser_group_id,
10:40:46 610  	    var_purchase_invoice_id,
10:40:46 611  	    var_offer_chain_id,
10:40:46 612  	    var_expiration_date,
10:40:46 613  	    var_purchase_date,
10:40:46 614  	    var_gift_certificate_status_id,
10:40:46 615  	    var_code,
10:40:46 616  	    var_recipient_name,
10:40:46 617  	    var_gift_message,
10:40:46 618  	    var_recipient_email,
10:40:46 619  	    var_finalized_invoice_id,
10:40:46 620  	    var_sender_email,
10:40:46 621  	    var_sender_name,
10:40:46 622  	    var_redemption_date,
10:40:46 623  	    var_redeemer_group_id,
10:40:46 624  	    var_cancelation_date,
10:40:46 625  	    var_updated_by,
10:40:46 626  	    var_update_date,
10:40:46 627  	    var_recipient_address_id,
10:40:46 628  	    var_redeemer_address_id,
10:40:46 629  	    var_recipient_notify_date
10:40:46 630  	  FROM
10:40:46 631  	    GIFT_CERTIFICATE
10:40:46 632  	  WHERE
10:40:46 633  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:40:46 634  	END;
10:40:46 635  
10:40:46 636  	BEGIN
10:40:46 637  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_GIFT_CERT_HISTORY(
10:40:46 638  	    in_gift_certificate_id,
10:40:46 639  	    var_purchaser_group_id,
10:40:46 640  	    var_purchase_invoice_id,
10:40:46 641  	    var_offer_chain_id,
10:40:46 642  	    var_expiration_date,
10:40:46 643  	    var_purchase_date,
10:40:46 644  	    var_gift_certificate_status_id,
10:40:46 645  	    var_code,
10:40:46 646  	    var_updated_by,
10:40:46 647  	    var_update_date,
10:40:46 648  	    in_system_activity_reason_id,
10:40:46 649  	    var_recipient_name,
10:40:46 650  	    var_gift_message,
10:40:46 651  	    var_recipient_email,
10:40:46 652  	    var_finalized_invoice_id,
10:40:46 653  	    var_sender_email,
10:40:46 654  	    var_sender_name,
10:40:46 655  	    var_redemption_date,
10:40:46 656  	    var_redeemer_group_id,
10:40:46 657  	    var_cancelation_date,
10:40:46 658  	    var_recipient_address_id,
10:40:46 659  	    var_redeemer_address_id,
10:40:46 660  	    var_recipient_notify_date
10:40:46 661  	  );
10:40:46 662  	  EXCEPTION
10:40:46 663  	    WHEN OTHERS THEN
10:40:46 664  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 665  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 666  	END;
10:40:46 667  
10:40:46 668  EXCEPTION
10:40:46 669  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:40:46 670  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 671  	  SPROC_NAME, 'No such gift certificate');
10:40:46 672  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 673  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 674  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 675  WHEN OTHERS THEN
10:40:46 676  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 678  END CREATE_GIFT_CERT_HISTORY;
10:40:46 679  
10:40:46 680  /********************************************************************/
10:40:46 681  
10:40:46 682  PROCEDURE CREATE_TRANSACTION_HISTORY (
10:40:46 683  	in_transaction_id	     IN NUMBER,
10:40:46 684  	in_system_activity_reason_id IN NUMBER
10:40:46 685  ) AS
10:40:46 686  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
10:40:46 687  -- VARIABLES
10:40:46 688  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
10:40:46 689  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
10:40:46 690  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
10:40:46 691  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
10:40:46 692  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
10:40:46 693  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
10:40:46 694  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
10:40:46 695  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
10:40:46 696  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
10:40:46 697  -- EXCEPTIONS
10:40:46 698  BAD_TRANSACTION_ID     EXCEPTION;
10:40:46 699  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 700  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 701  BEGIN
10:40:46 702  
10:40:46 703  	BEGIN
10:40:46 704  	  SELECT
10:40:46 705  	    TRANSACTION.TRANSACTION_STATUS_ID,
10:40:46 706  	    TRANSACTION.TRANSACTION_AMOUNT,
10:40:46 707  	    TRANSACTION.UPDATED_BY,
10:40:46 708  	    TRANSACTION.UPDATE_DATE,
10:40:46 709  	    TRANSACTION.ORDER_ID,
10:40:46 710  	    TRANSACTION.CHARGE_ID,
10:40:46 711  	    TRANSACTION.IS_REFUND,
10:40:46 712  	    TRANSACTION.IS_SETTLED,
10:40:46 713  	    TRANSACTION.TRANSACTION_TYPE_CODE
10:40:46 714  	    into
10:40:46 715  	    var_transaction_status_id,
10:40:46 716  	    var_transaction_amount,
10:40:46 717  	    var_updated_by,
10:40:46 718  	    var_update_date,
10:40:46 719  	    var_order_id,
10:40:46 720  	    var_charge_id,
10:40:46 721  	    var_is_refund,
10:40:46 722  	    var_is_settled,
10:40:46 723  	    var_transaction_type_code
10:40:46 724  	  FROM
10:40:46 725  	    TRANSACTION
10:40:46 726  	  WHERE
10:40:46 727  	    TRANSACTION.ID = in_transaction_id;
10:40:46 728  	  EXCEPTION
10:40:46 729  	    WHEN NO_DATA_FOUND THEN
10:40:46 730  	      RAISE BAD_TRANSACTION_ID;
10:40:46 731  	END;
10:40:46 732  
10:40:46 733  	BEGIN
10:40:46 734  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_TRANSACTION_HISTORY(
10:40:46 735  	    in_transaction_id,
10:40:46 736  	    var_transaction_status_id,
10:40:46 737  	    var_transaction_amount,
10:40:46 738  	    var_updated_by,
10:40:46 739  	    var_update_date,
10:40:46 740  	    var_order_id,
10:40:46 741  	    var_charge_id,
10:40:46 742  	    var_is_refund,
10:40:46 743  	    var_is_settled,
10:40:46 744  	    var_transaction_type_code,
10:40:46 745  	    in_system_activity_reason_id
10:40:46 746  	  );
10:40:46 747  	  EXCEPTION
10:40:46 748  	    WHEN OTHERS THEN
10:40:46 749  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 750  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 751  	END;
10:40:46 752  
10:40:46 753  EXCEPTION
10:40:46 754  WHEN BAD_TRANSACTION_ID THEN
10:40:46 755  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 756  	  SPROC_NAME, 'No such transaction');
10:40:46 757  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 758  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 759  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 760  WHEN OTHERS THEN
10:40:46 761  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 762  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 763  END CREATE_TRANSACTION_HISTORY;
10:40:46 764  
10:40:46 765  /********************************************************************/
10:40:46 766  
10:40:46 767  PROCEDURE CREATE_INVOICE_HISTORY (
10:40:46 768  /*
10:40:46 769  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 770  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 771  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:46 772  */
10:40:46 773  	in_invoice_id		     IN NUMBER,
10:40:46 774  	in_system_activity_reason_id IN NUMBER
10:40:46 775  ) AS
10:40:46 776  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
10:40:46 777  -- VARIABLES
10:40:46 778  var_invoice_status_id NUMBER;
10:40:46 779  var_updated_by	    VARCHAR2(255);
10:40:46 780  var_update_date	    DATE;
10:40:46 781  -- EXCEPTIONS
10:40:46 782  BAD_INVOICE_ID	     EXCEPTION;
10:40:46 783  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 784  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 785  BEGIN
10:40:46 786  
10:40:46 787  	BEGIN
10:40:46 788  	  SELECT
10:40:46 789  	    INVOICE.INVOICE_STATUS_ID,
10:40:46 790  	    INVOICE.UPDATED_BY,
10:40:46 791  	    INVOICE.UPDATE_DATE
10:40:46 792  	    into
10:40:46 793  	    var_invoice_status_id,
10:40:46 794  	    var_updated_by,
10:40:46 795  	    var_update_date
10:40:46 796  	  FROM
10:40:46 797  	    INVOICE
10:40:46 798  	  WHERE
10:40:46 799  	    INVOICE.ID = in_invoice_id;
10:40:46 800  	  EXCEPTION
10:40:46 801  	    WHEN NO_DATA_FOUND THEN
10:40:46 802  	      RAISE BAD_INVOICE_ID;
10:40:46 803  	END;
10:40:46 804  
10:40:46 805  	BEGIN
10:40:46 806  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_INVOICE_HISTORY(
10:40:46 807  	    in_invoice_id,
10:40:46 808  	    var_invoice_status_id,
10:40:46 809  	    var_updated_by,
10:40:46 810  	    var_update_date,
10:40:46 811  	    in_system_activity_reason_id
10:40:46 812  	  );
10:40:46 813  	  EXCEPTION
10:40:46 814  	    WHEN OTHERS THEN
10:40:46 815  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 816  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 817  	END;
10:40:46 818  
10:40:46 819  EXCEPTION
10:40:46 820  WHEN BAD_INVOICE_ID THEN
10:40:46 821  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 822  	  SPROC_NAME, 'No such invoice');
10:40:46 823  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 824  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 825  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 826  WHEN OTHERS THEN
10:40:46 827  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 828  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 829  END CREATE_INVOICE_HISTORY;
10:40:46 830  
10:40:46 831  /********************************************************************/
10:40:46 832  
10:40:46 833  PROCEDURE CREATE_LICENSE_HISTORY (
10:40:46 834  /*
10:40:46 835  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 836  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 837  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:46 838  */
10:40:46 839  	in_license_id		     IN NUMBER,
10:40:46 840  	in_system_activity_reason_id IN NUMBER
10:40:46 841  ) AS
10:40:46 842  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
10:40:46 843  -- VARIABLES
10:40:46 844  var_license_status_id	    NUMBER;
10:40:46 845  var_needs_entitlements	    NUMBER;
10:40:46 846  var_start_date		    DATE;
10:40:46 847  var_offer_id		    NUMBER;
10:40:46 848  var_subscription_id	    NUMBER;
10:40:46 849  var_invoice_id		    NUMBER;
10:40:46 850  var_end_date		    DATE;
10:40:46 851  var_is_extension		    NUMBER;
10:40:46 852  var_current_offer_index	    NUMBER;
10:40:46 853  var_current_offer_recurr_num  NUMBER;
10:40:46 854  var_updated_by		    VARCHAR2(255);
10:40:46 855  var_update_date		    DATE;
10:40:46 856  var_entitlement_end_date	    DATE;
10:40:46 857  var_grace_start_date	    DATE;
10:40:46 858  var_grace_end_date	    DATE;
10:40:46 859  -- EXCEPTIONS
10:40:46 860  BAD_LICENSE_ID	     EXCEPTION;
10:40:46 861  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 862  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 863  BEGIN
10:40:46 864  
10:40:46 865  	BEGIN
10:40:46 866  	  SELECT
10:40:46 867  	    LICENSE.LICENSE_STATUS_ID,
10:40:46 868  	    LICENSE.NEEDS_ENTITLEMENTS,
10:40:46 869  	    LICENSE.START_DATE,
10:40:46 870  	    LICENSE.OFFER_ID,
10:40:46 871  	    LICENSE.SUBSCRIPTION_ID,
10:40:46 872  	    LICENSE.INVOICE_ID,
10:40:46 873  	    LICENSE.END_DATE,
10:40:46 874  	    LICENSE.IS_EXTENSION,
10:40:46 875  	    LICENSE.CURRENT_OFFER_INDEX,
10:40:46 876  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:46 877  	    LICENSE.UPDATED_BY,
10:40:46 878  	    LICENSE.UPDATE_DATE,
10:40:46 879  	    LICENSE.ENTITLEMENT_END_DATE,
10:40:46 880  	    LICENSE.GRACE_START_DATE,
10:40:46 881  	    LICENSE.GRACE_END_DATE
10:40:46 882  	    into
10:40:46 883  	    var_license_status_id,
10:40:46 884  	    var_needs_entitlements,
10:40:46 885  	    var_start_date,
10:40:46 886  	    var_offer_id,
10:40:46 887  	    var_subscription_id,
10:40:46 888  	    var_invoice_id,
10:40:46 889  	    var_end_date,
10:40:46 890  	    var_is_extension,
10:40:46 891  	    var_current_offer_index,
10:40:46 892  	    var_current_offer_recurr_num,
10:40:46 893  	    var_updated_by,
10:40:46 894  	    var_update_date,
10:40:46 895  	    var_entitlement_end_date,
10:40:46 896  	    var_grace_start_date,
10:40:46 897  	    var_grace_end_date
10:40:46 898  	  FROM
10:40:46 899  	    LICENSE
10:40:46 900  	  WHERE
10:40:46 901  	    LICENSE.ID = in_license_id;
10:40:46 902  	  EXCEPTION
10:40:46 903  	    WHEN NO_DATA_FOUND THEN
10:40:46 904  	      RAISE BAD_LICENSE_ID;
10:40:46 905  	END;
10:40:46 906  
10:40:46 907  	BEGIN
10:40:46 908  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_LICENSE_HISTORY(
10:40:46 909  	    in_license_id,
10:40:46 910  	    var_license_status_id,
10:40:46 911  	    var_needs_entitlements,
10:40:46 912  	    var_start_date,
10:40:46 913  	    var_offer_id,
10:40:46 914  	    var_subscription_id,
10:40:46 915  	    var_invoice_id,
10:40:46 916  	    var_end_date,
10:40:46 917  	    var_updated_by,
10:40:46 918  	    var_update_date,
10:40:46 919  	    var_is_extension,
10:40:46 920  	    var_current_offer_index,
10:40:46 921  	    var_current_offer_recurr_num,
10:40:46 922  	    in_system_activity_reason_id,
10:40:46 923  	    var_entitlement_end_date,
10:40:46 924  	    var_grace_start_date,
10:40:46 925  	    var_grace_end_date
10:40:46 926  	  );
10:40:46 927  	  EXCEPTION
10:40:46 928  	    WHEN OTHERS THEN
10:40:46 929  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 930  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 931  	END;
10:40:46 932  
10:40:46 933  EXCEPTION
10:40:46 934  WHEN BAD_LICENSE_ID THEN
10:40:46 935  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 936  	  SPROC_NAME, 'No such license');
10:40:46 937  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 938  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 939  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 940  WHEN OTHERS THEN
10:40:46 941  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 942  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 943  END CREATE_LICENSE_HISTORY;
10:40:46 944  
10:40:46 945  /********************************************************************/
10:40:46 946  
10:40:46 947  PROCEDURE CREATE_CHARGE_HISTORY (
10:40:46 948  /*
10:40:46 949  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 950  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 951  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:46 952  */
10:40:46 953  	in_charge_id		    IN NUMBER,
10:40:46 954  	in_system_activity_reason_id IN NUMBER
10:40:46 955  ) AS
10:40:46 956  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
10:40:46 957  -- VARIABLES
10:40:46 958  var_invoice_id	     NUMBER;
10:40:46 959  var_transaction_id     NUMBER;
10:40:46 960  var_instrument_type_id NUMBER;
10:40:46 961  var_instrument_id      NUMBER;
10:40:46 962  var_charge_amount      NUMBER;
10:40:46 963  var_charge_status_id   NUMBER;
10:40:46 964  var_updated_by	     VARCHAR2(255);
10:40:46 965  var_update_date	     DATE;
10:40:46 966  -- EXCEPTIONS
10:40:46 967  BAD_CHARGE_ID	     EXCEPTION;
10:40:46 968  CAN_NOT_CREATE_HISTORY EXCEPTION;
10:40:46 969  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 970  BEGIN
10:40:46 971  
10:40:46 972  	BEGIN
10:40:46 973  	  SELECT
10:40:46 974  	    CHARGE.INVOICE_ID,
10:40:46 975  	    CHARGE.TRANSACTION_ID,
10:40:46 976  	    CHARGE.INSTRUMENT_TYPE_ID,
10:40:46 977  	    CHARGE.INSTRUMENT_ID,
10:40:46 978  	    CHARGE.CHARGE_AMOUNT,
10:40:46 979  	    CHARGE.CHARGE_STATUS_ID,
10:40:46 980  	    CHARGE.UPDATED_BY,
10:40:46 981  	    CHARGE.UPDATE_DATE
10:40:46 982  	    into
10:40:46 983  	    var_invoice_id,
10:40:46 984  	    var_transaction_id,
10:40:46 985  	    var_instrument_type_id,
10:40:46 986  	    var_instrument_id,
10:40:46 987  	    var_charge_amount,
10:40:46 988  	    var_charge_status_id,
10:40:46 989  	    var_updated_by,
10:40:46 990  	    var_update_date
10:40:46 991  	  FROM
10:40:46 992  	    CHARGE
10:40:46 993  	  WHERE
10:40:46 994  	    CHARGE.ID = in_charge_id;
10:40:46 995  	  EXCEPTION
10:40:46 996  	    WHEN NO_DATA_FOUND THEN
10:40:46 997  	      RAISE BAD_CHARGE_ID;
10:40:46 998  	END;
10:40:46 999  
10:40:46 1000  	 BEGIN
10:40:46 1001  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_CHARGE_HISTORY (
10:40:46 1002  	     in_charge_id,
10:40:46 1003  	     var_invoice_id,
10:40:46 1004  	     var_transaction_id,
10:40:46 1005  	     var_instrument_type_id,
10:40:46 1006  	     var_instrument_id,
10:40:46 1007  	     var_charge_amount,
10:40:46 1008  	     var_updated_by,
10:40:46 1009  	     var_update_date,
10:40:46 1010  	     var_charge_status_id,
10:40:46 1011  	     in_system_activity_reason_id
10:40:46 1012  	   );
10:40:46 1013  	   EXCEPTION
10:40:46 1014  	     WHEN OTHERS THEN
10:40:46 1015  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:46 1016  	       RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 1017  	 END;
10:40:46 1018  
10:40:46 1019  EXCEPTION
10:40:46 1020  WHEN BAD_CHARGE_ID THEN
10:40:46 1021  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1022  	   SPROC_NAME, 'No such license');
10:40:46 1023  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 1024  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 1025  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 1026  WHEN OTHERS THEN
10:40:46 1027  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1028  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1029  END CREATE_CHARGE_HISTORY;
10:40:46 1030  
10:40:46 1031  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
10:40:46 1032  /*
10:40:46 1033  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 1034  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 1035  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:46 1036  */
10:40:46 1037  	 in_invoice_adjustment_id  IN NUMBER,
10:40:46 1038  	 in_system_activity_reason_id IN NUMBER
10:40:46 1039  ) AS
10:40:46 1040  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
10:40:46 1041  --VARIABLED
10:40:46 1042  var_invoice_adj_id	   INVOICE_ADJUSTMENT.ID%TYPE;
10:40:46 1043  var_invoice_id		   INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
10:40:46 1044  var_is_credit		   INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
10:40:46 1045  var_charge_id		   INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
10:40:46 1046  var_adjustment_date	   INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
10:40:46 1047  var_create_date		   INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
10:40:46 1048  var_created_by		   INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
10:40:46 1049  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
10:40:46 1050  var_update_date		   INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
10:40:46 1051  var_updated_by		   INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
10:40:46 1052  BAD_INVOICE_ADJ_ID	   EXCEPTION;
10:40:46 1053  CAN_NOT_CREATE_HISTORY	   EXCEPTION;
10:40:46 1054  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46 1055  BEGIN
10:40:46 1056  
10:40:46 1057  	 BEGIN
10:40:46 1058  	   SELECT
10:40:46 1059  	     INVOICE_ADJUSTMENT.ID,
10:40:46 1060  	     INVOICE_ADJUSTMENT.INVOICE_ID,
10:40:46 1061  	     INVOICE_ADJUSTMENT.IS_CREDIT,
10:40:46 1062  	     INVOICE_ADJUSTMENT.CHARGE_ID,
10:40:46 1063  	     INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
10:40:46 1064  	     INVOICE_ADJUSTMENT.CREATE_DATE,
10:40:46 1065  	     INVOICE_ADJUSTMENT.CREATED_BY,
10:40:46 1066  	     INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
10:40:46 1067  	     INVOICE_ADJUSTMENT.UPDATE_DATE,
10:40:46 1068  	     INVOICE_ADJUSTMENT.UPDATED_BY
10:40:46 1069  	     into
10:40:46 1070  	     var_invoice_adj_id,
10:40:46 1071  	     var_invoice_id,
10:40:46 1072  	     var_is_credit,
10:40:46 1073  	     var_charge_id,
10:40:46 1074  	     var_adjustment_date,
10:40:46 1075  	     var_create_date,
10:40:46 1076  	     var_created_by,
10:40:46 1077  	     var_invoice_adj_reason_id,
10:40:46 1078  	     var_update_date,
10:40:46 1079  	     var_updated_by
10:40:46 1080  	   FROM
10:40:46 1081  	     INVOICE_ADJUSTMENT
10:40:46 1082  	   WHERE
10:40:46 1083  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
10:40:46 1084  	   EXCEPTION
10:40:46 1085  	     WHEN NO_DATA_FOUND THEN
10:40:46 1086  	       RAISE BAD_INVOICE_ADJ_ID;
10:40:46 1087  	 END;
10:40:46 1088  
10:40:46 1089  	 BEGIN
10:40:46 1090  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_INVOICE_ADJ_HISTORY (
10:40:46 1091  	     var_invoice_adj_id,
10:40:46 1092  	     var_invoice_id,
10:40:46 1093  	     var_is_credit,
10:40:46 1094  	     var_charge_id,
10:40:46 1095  	     var_adjustment_date,
10:40:46 1096  	     var_create_date,
10:40:46 1097  	     var_created_by,
10:40:46 1098  	     var_invoice_adj_reason_id,
10:40:46 1099  	     var_update_date,
10:40:46 1100  	     var_updated_by
10:40:46 1101  	   );
10:40:46 1102  	   EXCEPTION
10:40:46 1103  	     WHEN OTHERS THEN
10:40:46 1104  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:46 1105  	       RAISE CAN_NOT_CREATE_HISTORY;
10:40:46 1106  	 END;
10:40:46 1107  
10:40:46 1108  EXCEPTION
10:40:46 1109  WHEN BAD_INVOICE_ADJ_ID THEN
10:40:46 1110  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1111  	   SPROC_NAME, 'No such invoice adjustment');
10:40:46 1112  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:46 1113  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 1114  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:46 1115  WHEN OTHERS THEN
10:40:46 1116  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1117  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1118  END CREATE_INVOICE_ADJ_HISTORY;
10:40:46 1119  
10:40:46 1120  END PROCS_HISTORY_V22;
10:40:46 1121  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
10:40:46   4  /*
10:40:46   5  Throws exceptions:
10:40:46   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46   7  */
10:40:46   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:46   9  	out_result_set	    OUT SYS_REFCURSOR
10:40:46  10  ) AS
10:40:46  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
10:40:46  12  BEGIN
10:40:46  13  OPEN out_result_set FOR
10:40:46  14  	      SELECT
10:40:46  15  	      i.id as ITUNES_RECEIPT_ID,
10:40:46  16  	      s.id as SUBSCRIPTION_ID,
10:40:46  17  	      s.SUBSCRIPTION_STATUS_ID,
10:40:46  18  	      i.STATUS,
10:40:46  19  	      a.GROUP_ID
10:40:46  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
10:40:46  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
10:40:46  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
10:40:46  23  	      AND a.ID(+) = s.ACCOUNT_ID;
10:40:46  24  END ITUNES_RECEIPT_SUBSCRIPTION;
10:40:46  25  
10:40:46  26  
10:40:46  27  PROCEDURE CREATE_RECEIPT(
10:40:46  28  /*
10:40:46  29  Throws exceptions:
10:40:46  30  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46  31  */
10:40:46  32  	  out_id      OUT NUMBER,
10:40:46  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:46  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:40:46  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:46  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:46  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:46  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:46  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:46  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:46  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:46  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:46  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:40:46  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:40:46  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:46  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
10:40:46  48  ) AS
10:40:46  49  -- VARIABLES
10:40:46  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
10:40:46  51  -- EXCEPTIONS
10:40:46  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:46  53  BEGIN
10:40:46  54  
10:40:46  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V22.CREATE_RECEIPT(
10:40:46  56  	  out_id	      =>  out_id,
10:40:46  57  	  in_subscription_id  =>  in_subscription_id,
10:40:46  58  	  in_receipt	      =>  in_receipt,
10:40:46  59  	  in_status	      =>  in_status,
10:40:46  60  	  in_quantity	      =>  in_quantity,
10:40:46  61  	  in_product_id       =>  in_product_id,
10:40:46  62  	  in_transaction_id   =>  in_transaction_id,
10:40:46  63  	  in_purchase_date    =>  in_purchase_date,
10:40:46  64  	  in_original_transaction_id  =>  in_original_transaction_id,
10:40:46  65  	  in_original_purchase_date => in_original_purchase_date,
10:40:46  66  	  in_app_item_id      =>  in_app_item_id,
10:40:46  67  	  in_version_external_id  =>  in_version_external_id,
10:40:46  68  	  in_bid	      =>  in_bid,
10:40:46  69  	  in_bvrs	      =>  in_bvrs,
10:40:46  70  	  in_expires_date     =>  in_expires_date,
10:40:46  71  	  in_created_by       =>  in_created_by
10:40:46  72  	);
10:40:46  73  
10:40:46  74  END CREATE_RECEIPT;
10:40:46  75  
10:40:46  76  PROCEDURE UPDATE_RECEIPT(
10:40:46  77  /*
10:40:46  78  Throws exceptions:
10:40:46  79  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46  80  */
10:40:46  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:40:46  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
10:40:46  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
10:40:46  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
10:40:46  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
10:40:46  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
10:40:46  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
10:40:46  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
10:40:46  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
10:40:46  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
10:40:46  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
10:40:46  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
10:40:46  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
10:40:46  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
10:40:46  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
10:40:46  96  	  in_is_expired       IN NUMBER
10:40:46  97  ) AS
10:40:46  98  CANCEL_DATE DATE;
10:40:46  99  BEGIN
10:40:46 100  	-- see if cancel date is already set
10:40:46 101  	BEGIN
10:40:46 102  	  SELECT
10:40:46 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
10:40:46 104  	  FROM
10:40:46 105  	    ITUNES_RECEIPT IR
10:40:46 106  	  WHERE
10:40:46 107  	    IR.ID = in_id;
10:40:46 108  	EXCEPTION
10:40:46 109  	  WHEN NO_DATA_FOUND THEN
10:40:46 110  	    CANCEL_DATE := NULL;
10:40:46 111  	END;
10:40:46 112  
10:40:46 113  	-- only update cancel date if it isn't already set and the receipt is expired
10:40:46 114  	IF in_is_expired = 1 THEN
10:40:46 115  	  IF CANCEL_DATE IS NULL THEN
10:40:46 116  	    CANCEL_DATE := SYSDATE;
10:40:46 117  	  END IF;
10:40:46 118  	ELSE
10:40:46 119  	  CANCEL_DATE := NULL;
10:40:46 120  	END IF;
10:40:46 121  
10:40:46 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V22.UPDATE_RECEIPT(
10:40:46 123  	  in_id => in_id,
10:40:46 124  	  in_receipt => in_receipt,
10:40:46 125  	  in_status => in_status,
10:40:46 126  	  in_quantity => in_quantity,
10:40:46 127  	  in_product_id => in_product_id,
10:40:46 128  	  in_transaction_id => in_transaction_id,
10:40:46 129  	  in_purchase_date => in_purchase_date,
10:40:46 130  	  in_original_transaction_id => in_original_transaction_id,
10:40:46 131  	  in_original_purchase_date => in_original_purchase_date,
10:40:46 132  	  in_app_item_id => in_app_item_id,
10:40:46 133  	  in_version_external_id => in_version_external_id,
10:40:46 134  	  in_bid => in_bid,
10:40:46 135  	  in_bvrs => in_bvrs,
10:40:46 136  	  in_expires_date => in_expires_date,
10:40:46 137  	  in_updated_by => in_updated_by,
10:40:46 138  	  in_cancel_date => CANCEL_DATE
10:40:46 139  	);
10:40:46 140  END UPDATE_RECEIPT;
10:40:46 141  
10:40:46 142  PROCEDURE LINK_ITUNES_RECEIPT(
10:40:46 143  /*
10:40:46 144  Throws exceptions:
10:40:46 145  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 146  */
10:40:46 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
10:40:46 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
10:40:46 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
10:40:46 150  ) AS
10:40:46 151  BEGIN
10:40:46 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V22.LINK_ITUNES_RECEIPT(
10:40:46 153  		      in_id => in_id,
10:40:46 154  		      in_subscription_id => in_subscription_id,
10:40:46 155  		      in_updated_by => in_updated_by
10:40:46 156  		      );
10:40:46 157  END LINK_ITUNES_RECEIPT;
10:40:46 158  
10:40:46 159  PROCEDURE MARK_RECEIPT_CHECKED(
10:40:46 160  /*
10:40:46 161  Throws exceptions:
10:40:46 162  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 163  */
10:40:46 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
10:40:46 165  ) AS
10:40:46 166  BEGIN
10:40:46 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V22.MARK_RECEIPT_CHECKED(
10:40:46 168  	  in_id => in_id
10:40:46 169  	);
10:40:46 170  END MARK_RECEIPT_CHECKED;
10:40:46 171  
10:40:46 172  PROCEDURE GET_ITUNES_RECEIPTS (
10:40:46 173  /*
10:40:46 174  Throws exceptions:
10:40:46 175  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 176  */
10:40:46 177  	out_result_set	    OUT SYS_REFCURSOR,
10:40:46 178  	in_row_number	    IN NUMBER DEFAULT 500
10:40:46 179  ) AS
10:40:46 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
10:40:46 181  BEGIN
10:40:46 182  OPEN out_result_set FOR
10:40:46 183  SELECT * FROM
10:40:46 184  (
10:40:46 185  	SELECT * FROM
10:40:46 186  	(
10:40:46 187  	  SELECT
10:40:46 188  	    IR.ID,
10:40:46 189  	    IR.SUBSCRIPTION_ID,
10:40:46 190  	    IR.RECEIPT,
10:40:46 191  	    IR.STATUS,
10:40:46 192  	    IR.QUANTITY,
10:40:46 193  	    IR.PRODUCT_ID,
10:40:46 194  	    IR.TRANSACTION_ID,
10:40:46 195  	    IR.PURCHASE_DATE,
10:40:46 196  	    IR.ORIGINAL_TRANSACTION_ID,
10:40:46 197  	    IR.ORIGINAL_PURCHASE_DATE,
10:40:46 198  	    IR.APP_ITEM_ID,
10:40:46 199  	    IR.VERSION_EXTERNAL_ID,
10:40:46 200  	    IR.BID,
10:40:46 201  	    IR.BVRS,
10:40:46 202  	    IR.EXPIRES_DATE,
10:40:46 203  	    IR.CREATE_DATe,
10:40:46 204  	    IR.CREATED_BY,
10:40:46 205  	    IR.UPDATE_DATE,
10:40:46 206  	    IR.UPDATED_BY,
10:40:46 207  	    IR.LAST_CHECK_DATE,
10:40:46 208  	    OC.VENDOR_SOURCE_ID
10:40:46 209  	  FROM
10:40:46 210  	    CORE_OWNER.ITUNES_RECEIPT IR
10:40:46 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
10:40:46 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
10:40:46 213  	  WHERE
10:40:46 214  	    NOT EXISTS
10:40:46 215  	    (
10:40:46 216  	      SELECT NULL
10:40:46 217  	      FROM PROCESS_RETRY_THROTTLE
10:40:46 218  	      WHERE PROCESS_NAME = SPROC_NAME
10:40:46 219  		AND GENERIC_ID = IR.ID
10:40:46 220  	    ) AND
10:40:46 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
10:40:46 222  	    ROWNUM <= in_row_number*10
10:40:46 223  	)
10:40:46 224  	ORDER BY dbms_random.value
10:40:46 225  )
10:40:46 226  WHERE
10:40:46 227  	ROWNUM <= in_row_number;
10:40:46 228  
10:40:46 229  END GET_ITUNES_RECEIPTS;
10:40:46 230  
10:40:46 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
10:40:46 232  /*
10:40:46 233  Throws exceptions:
10:40:46 234  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 235  */
10:40:46 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
10:40:46 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
10:40:46 238  ) AS
10:40:46 239  BEGIN
10:40:46 240  
10:40:46 241  SELECT
10:40:46 242  	  oc.vendor_source_id
10:40:46 243  INTO
10:40:46 244  	  out_vendor_source_id
10:40:46 245  FROM
10:40:46 246  	  offer_chain_meta_data ocmd
10:40:46 247  JOIN
10:40:46 248  	  offer_chain oc
10:40:46 249  ON
10:40:46 250  	  ocmd.offer_chain_id = oc.id
10:40:46 251  WHERE
10:40:46 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
10:40:46 253  AND ocmd.value = in_itunes_pid
10:40:46 254  AND rownum <= 1;
10:40:46 255  
10:40:46 256  END GET_VENDOR_FROM_ITUNES_PID;
10:40:46 257  
10:40:46 258  END PROCS_ITUNES_RECEIPT_V22;
10:40:46 259  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE ADD_LINE_ITEMS(
10:40:46   4  /*
10:40:46   5  Throws exceptions:
10:40:46   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46   8  */
10:40:46   9  	in_invoice_id IN NUMBER,
10:40:46  10  	in_offer_id   IN NUMBER,
10:40:46  11  	in_created_by IN VARCHAR2
10:40:46  12  ) AS
10:40:46  13  -- VARIABLES
10:40:46  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
10:40:46  15  temp_invoice_id NUMBER;
10:40:46  16  temp_offer_id   NUMBER;
10:40:46  17  
10:40:46  18  var_line_item_data SYS_REFCURSOR;
10:40:46  19  var_new_line_item_id NUMBER;
10:40:46  20  var_product_unit_price NUMBER (10,6);
10:40:46  21  var_product_offering_price NUMBER(10,6);
10:40:46  22  var_product_offering_oprice NUMBER(10,6);
10:40:46  23  var_product_quantity NUMBER;
10:40:46  24  var_product_offering_id NUMBER;
10:40:46  25  
10:40:46  26  var_line_item_price	  NUMBER(10,2);
10:40:46  27  var_discount_fixed_amount   NUMBER(10,6);
10:40:46  28  var_discount_percent_amount NUMBER(10,2);
10:40:46  29  
10:40:46  30  
10:40:46  31  -- EXCEPTIONS
10:40:46  32  BAD_INVOICE_ID EXCEPTION;
10:40:46  33  BAD_OFFER_ID EXCEPTION;
10:40:46  34  BAD_DISCOUNT EXCEPTION;
10:40:46  35  BEGIN
10:40:46  36  
10:40:46  37  	-- Check that given invoice exists
10:40:46  38  	BEGIN
10:40:46  39  	  SELECT
10:40:46  40  	    INVOICE.ID into temp_invoice_id
10:40:46  41  	  FROM
10:40:46  42  	    INVOICE
10:40:46  43  	  WHERE
10:40:46  44  	    INVOICE.ID = in_invoice_id;
10:40:46  45  
10:40:46  46  	  EXCEPTION
10:40:46  47  	    WHEN NO_DATA_FOUND THEN
10:40:46  48  	      RAISE BAD_INVOICE_ID;
10:40:46  49  	END;
10:40:46  50  
10:40:46  51  	-- Check that given offer exists
10:40:46  52  	BEGIN
10:40:46  53  	  SELECT
10:40:46  54  	    OFFER.ID into temp_offer_id
10:40:46  55  	  FROM
10:40:46  56  	    OFFER
10:40:46  57  	  WHERE
10:40:46  58  	    OFFER.ID = in_offer_id;
10:40:46  59  
10:40:46  60  	  EXCEPTION
10:40:46  61  	    WHEN NO_DATA_FOUND THEN
10:40:46  62  	      RAISE BAD_OFFER_ID;
10:40:46  63  	END;
10:40:46  64  
10:40:46  65  	-- Get product_offering data
10:40:46  66  	OPEN var_line_item_data FOR
10:40:46  67  	SELECT
10:40:46  68  	  PRODUCT_OFFERING.ID,
10:40:46  69  	  PRODUCT_OFFERING.UNIT_PRICE,
10:40:46  70  	  PRODUCT_OFFERING.QUANTITY
10:40:46  71  	FROM
10:40:46  72  	  OFFER_PRODUCT_OFFERING
10:40:46  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46  74  	WHERE
10:40:46  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:40:46  76  
10:40:46  77  	-- insert line items
10:40:46  78  	-- add discounts to line items
10:40:46  79  	LOOP
10:40:46  80  	  FETCH var_line_item_data INTO
10:40:46  81  	    var_product_offering_id,
10:40:46  82  	    var_product_unit_price,
10:40:46  83  	    var_product_quantity;
10:40:46  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
10:40:46  85  
10:40:46  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
10:40:46  87  	  var_product_offering_price := var_product_offering_oprice;
10:40:46  88  
10:40:46  89  	  -- Apply discounts to line_item
10:40:46  90  	  BEGIN
10:40:46  91  	    SELECT
10:40:46  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
10:40:46  93  	    FROM
10:40:46  94  	      DISCOUNT_PRODUCT_OFFERING
10:40:46  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:40:46  96  	    WHERE
10:40:46  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:40:46  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
10:40:46  99  	    EXCEPTION
10:40:46 100  	    WHEN NO_DATA_FOUND THEN
10:40:46 101  	      var_discount_fixed_amount := NULL;
10:40:46 102  	  END;
10:40:46 103  
10:40:46 104  	  BEGIN
10:40:46 105  	    SELECT
10:40:46 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
10:40:46 107  	    FROM
10:40:46 108  	      DISCOUNT_PRODUCT_OFFERING
10:40:46 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:40:46 110  	    WHERE
10:40:46 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:40:46 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
10:40:46 113  	    EXCEPTION
10:40:46 114  	    WHEN NO_DATA_FOUND THEN
10:40:46 115  	      var_discount_percent_amount := NULL;
10:40:46 116  	  END;
10:40:46 117  
10:40:46 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
10:40:46 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
10:40:46 120  	  END IF;
10:40:46 121  
10:40:46 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
10:40:46 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
10:40:46 124  	  END IF;
10:40:46 125  
10:40:46 126  	  var_line_item_price := PROCS_COMMON_V22.ROUND_10_6_TO_10_2(var_product_offering_price);
10:40:46 127  
10:40:46 128  	  IF (var_line_item_price < 0) THEN
10:40:46 129  	      RAISE BAD_DISCOUNT;
10:40:46 130  	  END IF;
10:40:46 131  
10:40:46 132  	  var_new_line_item_id := NULL;
10:40:46 133  	  PROCS_LINE_ITEMS_CRU_V22.CREATE_LINE_ITEM(
10:40:46 134  	    inout_line_item_id	=> var_new_line_item_id,
10:40:46 135  	    in_product_offer_id => var_product_offering_id,
10:40:46 136  	    in_invoice_id	=> in_invoice_id,
10:40:46 137  	    in_amount		=> var_line_item_price,
10:40:46 138  	    in_created_by	=> in_created_by,
10:40:46 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
10:40:46 140  	    in_taxes_amount	=> NULL
10:40:46 141  	  );
10:40:46 142  
10:40:46 143  	  FOR f_discount IN (
10:40:46 144  	    SELECT
10:40:46 145  	      DISCOUNT.ID
10:40:46 146  	    FROM
10:40:46 147  	      DISCOUNT_PRODUCT_OFFERING
10:40:46 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:40:46 149  	    WHERE
10:40:46 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:40:46 151  	  )
10:40:46 152  	  LOOP
10:40:46 153  	    PROCS_LINE_ITEMS_CRU_V22.CREATE_DISCOUNT_LINE_ITEM(
10:40:46 154  	      in_discount_id =>  f_discount.ID,
10:40:46 155  	      in_line_item_id => var_new_line_item_id
10:40:46 156  	    );
10:40:46 157  	  END LOOP;
10:40:46 158  	END LOOP;
10:40:46 159  
10:40:46 160  EXCEPTION
10:40:46 161  WHEN BAD_INVOICE_ID THEN
10:40:46 162  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 163  	  SPROC_NAME, 'No such license');
10:40:46 164  WHEN BAD_OFFER_ID THEN
10:40:46 165  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 166  	  SPROC_NAME, 'No such offer');
10:40:46 167  WHEN BAD_DISCOUNT THEN
10:40:46 168  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 169  	  SPROC_NAME, 'Bad Discount');
10:40:46 170  WHEN OTHERS THEN
10:40:46 171  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 173  END ADD_LINE_ITEMS;
10:40:46 174  
10:40:46 175  /******************************************************************************/
10:40:46 176  
10:40:46 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:40:46 178  	in_line_item_id    IN NUMBER,
10:40:46 179  	in_amount	   IN NUMBER,
10:40:46 180  	in_discount_amount IN NUMBER,
10:40:46 181  	in_taxes_amount    IN NUMBER
10:40:46 182  ) AS
10:40:46 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
10:40:46 184  -- VARIABLES
10:40:46 185  temp_line_item_id NUMBER;
10:40:46 186  -- EXCEPTIONS
10:40:46 187  BAD_LINE_ITEM_ID EXCEPTION;
10:40:46 188  BEGIN
10:40:46 189  
10:40:46 190  	-- Check that line item exists
10:40:46 191  	BEGIN
10:40:46 192  	  SELECT
10:40:46 193  	    LINE_ITEM.ID into temp_line_item_id
10:40:46 194  	  FROM
10:40:46 195  	    LINE_ITEM
10:40:46 196  	  WHERE
10:40:46 197  	    LINE_ITEM.ID = in_line_item_id;
10:40:46 198  	  EXCEPTION
10:40:46 199  	    WHEN NO_DATA_FOUND THEN
10:40:46 200  	      RAISE BAD_LINE_ITEM_ID;
10:40:46 201  	END;
10:40:46 202  
10:40:46 203  	-- Update line item
10:40:46 204  	PROCS_LINE_ITEMS_CRU_V22.UPDATE_LINE_ITEM(
10:40:46 205  	  in_line_item_id    => in_line_item_id,
10:40:46 206  	  in_amount	     => in_amount,
10:40:46 207  	  in_discount_amount => in_discount_amount,
10:40:46 208  	  in_taxes_amount    => in_taxes_amount
10:40:46 209  	);
10:40:46 210  
10:40:46 211  EXCEPTION
10:40:46 212  WHEN BAD_LINE_ITEM_ID THEN
10:40:46 213  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 214  	  SPROC_NAME, 'No such line item');
10:40:46 215  WHEN OTHERS THEN
10:40:46 216  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 218  END UPDATE_LINE_ITEM_AMOUNT;
10:40:46 219  
10:40:46 220  /******************************************************************************/
10:40:46 221  
10:40:46 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:46 223  /*
10:40:46 224  Throws exceptions:
10:40:46 225  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 226  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 227  */
10:40:46 228  	in_invoice_id  IN NUMBER,
10:40:46 229  	out_result_set OUT SYS_REFCURSOR
10:40:46 230  ) AS
10:40:46 231  -- VARIABLES
10:40:46 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
10:40:46 233  temp_invoice_id NUMBER;
10:40:46 234  
10:40:46 235  -- EXCEPTIONS
10:40:46 236  BAD_INVOICE_ID EXCEPTION;
10:40:46 237  BEGIN
10:40:46 238  
10:40:46 239  	-- Check that given invoice exists
10:40:46 240  	BEGIN
10:40:46 241  	  SELECT
10:40:46 242  	    INVOICE.ID into temp_invoice_id
10:40:46 243  	  FROM
10:40:46 244  	    INVOICE
10:40:46 245  	  WHERE
10:40:46 246  	    INVOICE.ID = in_invoice_id;
10:40:46 247  	  EXCEPTION
10:40:46 248  	    WHEN NO_DATA_FOUND THEN
10:40:46 249  	      RAISE BAD_INVOICE_ID;
10:40:46 250  	END;
10:40:46 251  
10:40:46 252  	-- Select line items
10:40:46 253  	OPEN out_result_set FOR
10:40:46 254  	SELECT
10:40:46 255  	  LINE_ITEM.ID,
10:40:46 256  	  LINE_ITEM.AMOUNT,
10:40:46 257  	  LINE_ITEM.CREATE_DATE,
10:40:46 258  	  LINE_ITEM.CREATED_BY,
10:40:46 259  	  LINE_ITEM.INVOICE_ID,
10:40:46 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
10:40:46 261  	  LINE_ITEM.TAXES_AMOUNT,
10:40:46 262  	  LINE_ITEM.PRODUCT_OFFER_ID
10:40:46 263  	FROM
10:40:46 264  	  LINE_ITEM
10:40:46 265  	WHERE
10:40:46 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
10:40:46 267  
10:40:46 268  EXCEPTION
10:40:46 269  WHEN BAD_INVOICE_ID THEN
10:40:46 270  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 271  	  SPROC_NAME, 'No such invoice');
10:40:46 272  WHEN OTHERS THEN
10:40:46 273  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 275  END GET_INVOICE_LINE_ITEMS;
10:40:46 276  
10:40:46 277  /******************************************************************************/
10:40:46 278  
10:40:46 279  PROCEDURE GET_LINE_ITEM_TAXES (
10:40:46 280  /*
10:40:46 281  Throws exceptions:
10:40:46 282  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 283  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 284  */
10:40:46 285  	in_line_item_id IN  NUMBER,
10:40:46 286  	out_result_set	OUT SYS_REFCURSOR
10:40:46 287  ) AS
10:40:46 288  -- VARIABLES
10:40:46 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
10:40:46 290  temp_line_item_id NUMBER;
10:40:46 291  -- EXCEPTIONS
10:40:46 292  BAD_LINE_ITEM_ID EXCEPTION;
10:40:46 293  BEGIN
10:40:46 294  
10:40:46 295  	-- Check that line item exists
10:40:46 296  	BEGIN
10:40:46 297  	  SELECT
10:40:46 298  	    LINE_ITEM.ID into temp_line_item_id
10:40:46 299  	  FROM
10:40:46 300  	    LINE_ITEM
10:40:46 301  	  WHERE
10:40:46 302  	    LINE_ITEM.ID = in_line_item_id;
10:40:46 303  	  EXCEPTION
10:40:46 304  	    WHEN NO_DATA_FOUND THEN
10:40:46 305  	      RAISE BAD_LINE_ITEM_ID;
10:40:46 306  	END;
10:40:46 307  
10:40:46 308  	-- Get all taxes for given line item
10:40:46 309  	OPEN out_result_set FOR
10:40:46 310  	SELECT
10:40:46 311  	  TAX.ID,
10:40:46 312  	  TAX.CALCULATED_AMOUNT,
10:40:46 313  	  TAX.CREATE_DATE,
10:40:46 314  	  TAX.CREATED_BY,
10:40:46 315  	  TAX.EFFECTIVE_RATE,
10:40:46 316  	  TAX.EXT_RESULT,
10:40:46 317  	  TAX.EXT_TAX_TYPE,
10:40:46 318  	  TAX.IMPOSITION,
10:40:46 319  	  TAX.IMPOSITION_TYPE,
10:40:46 320  	  TAX.JURISDICTION_ID,
10:40:46 321  	  TAX.JURISDICTION_LEVEL_ID,
10:40:46 322  	  TAX.JURISDICTION_NAME,
10:40:46 323  	  TAX.LINE_ITEM_ID,
10:40:46 324  	  TAX.TAX_RULE_ID,
10:40:46 325  	  TAX.TAX_TYPE_ID,
10:40:46 326  	  TAX.TAXABLE_AMOUNT
10:40:46 327  	FROM
10:40:46 328  	  TAX
10:40:46 329  	WHERE
10:40:46 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
10:40:46 331  
10:40:46 332  EXCEPTION
10:40:46 333  WHEN BAD_LINE_ITEM_ID THEN
10:40:46 334  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 335  	  SPROC_NAME, 'No such line item');
10:40:46 336  WHEN OTHERS THEN
10:40:46 337  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 339  END GET_LINE_ITEM_TAXES;
10:40:46 340  
10:40:46 341  -- norlov: #38770
10:40:46 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:40:46 343  /*
10:40:46 344  Throws exceptions:
10:40:46 345  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 346  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 347  */
10:40:46 348  	in_line_item_id IN  NUMBER,
10:40:46 349  	out_result_set	OUT SYS_REFCURSOR
10:40:46 350  ) AS
10:40:46 351  -- VARIABLES
10:40:46 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
10:40:46 353  temp_line_item_id NUMBER;
10:40:46 354  -- EXCEPTIONS
10:40:46 355  BAD_LINE_ITEM_ID EXCEPTION;
10:40:46 356  BEGIN
10:40:46 357  
10:40:46 358  	-- Check that line item exists
10:40:46 359  	BEGIN
10:40:46 360  	  SELECT
10:40:46 361  	    LINE_ITEM.ID into temp_line_item_id
10:40:46 362  	  FROM
10:40:46 363  	    LINE_ITEM
10:40:46 364  	  WHERE
10:40:46 365  	    LINE_ITEM.ID = in_line_item_id;
10:40:46 366  	  EXCEPTION
10:40:46 367  	    WHEN NO_DATA_FOUND THEN
10:40:46 368  	      RAISE BAD_LINE_ITEM_ID;
10:40:46 369  	END;
10:40:46 370  
10:40:46 371  	-- Get all discounts for given line item
10:40:46 372  	OPEN out_result_set FOR
10:40:46 373  	SELECT
10:40:46 374  	  DISCOUNT.FIXED_AMOUNT,
10:40:46 375  	  DISCOUNT.NAME,
10:40:46 376  	  DISCOUNT.ID,
10:40:46 377  	  DISCOUNT.PERCENT_AMOUNT
10:40:46 378  	FROM
10:40:46 379  	  DISCOUNT_LINE_ITEM
10:40:46 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
10:40:46 381  	WHERE
10:40:46 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
10:40:46 383  
10:40:46 384  EXCEPTION
10:40:46 385  WHEN BAD_LINE_ITEM_ID THEN
10:40:46 386  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 387  	  SPROC_NAME, 'No such line item');
10:40:46 388  WHEN OTHERS THEN
10:40:46 389  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 391  END GET_LINE_ITEM_DISCOUNTS;
10:40:46 392  /******************************************************************************/
10:40:46 393  
10:40:46 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
10:40:46 395  /*
10:40:46 396  Throws exceptions:
10:40:46 397  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 398  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 399  */
10:40:46 400  	in_line_item_id     IN	NUMBER,
10:40:46 401  	out_amount	    OUT NUMBER
10:40:46 402  ) AS
10:40:46 403  -- VARIABLES
10:40:46 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
10:40:46 405  -- EXCEPTIONS
10:40:46 406  BAD_LINE_ITEM_ID EXCEPTION;
10:40:46 407  BEGIN
10:40:46 408  
10:40:46 409  	BEGIN
10:40:46 410  	  SELECT
10:40:46 411  	    LINE_ITEM.AMOUNT into out_amount
10:40:46 412  	  FROM
10:40:46 413  	    LINE_ITEM
10:40:46 414  	  WHERE
10:40:46 415  	    LINE_ITEM.ID = in_line_item_id;
10:40:46 416  	  EXCEPTION
10:40:46 417  	    WHEN NO_DATA_FOUND THEN
10:40:46 418  	      RAISE BAD_LINE_ITEM_ID;
10:40:46 419  	END;
10:40:46 420  
10:40:46 421  EXCEPTION
10:40:46 422  WHEN BAD_LINE_ITEM_ID THEN
10:40:46 423  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 424  	  SPROC_NAME, 'No such line item');
10:40:46 425  WHEN OTHERS THEN
10:40:46 426  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 428  END CALCULATE_LINE_ITEM_AMOUNT;
10:40:46 429  
10:40:46 430  /******************************************************************************/
10:40:46 431  
10:40:46 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
10:40:46 433  /*
10:40:46 434  Throws exceptions:
10:40:46 435  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:46 436  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:46 437  */
10:40:46 438  	in_line_item_id     IN	NUMBER
10:40:46 439  ) RETURN NUMBER AS
10:40:46 440  var_invoice_amount NUMBER(10, 2);
10:40:46 441  BEGIN
10:40:46 442  	PROCS_LINE_ITEMS_V22.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
10:40:46 443  	RETURN var_invoice_amount;
10:40:46 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
10:40:46 445  
10:40:46 446  END PROCS_LINE_ITEMS_V22;
10:40:46 447  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V22" AS
10:40:46   2  
10:40:46   3  /*
10:40:46   4  PROCEDURE INITIALIZE_SYSTEM AS
10:40:46   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
10:40:46   6  -- VARIABLES
10:40:46   7  var_account_ids SYS_REFCURSOR;
10:40:46   8  var_account_id  NUMBER;
10:40:46   9  BEGIN
10:40:46  10  
10:40:46  11  	OPEN var_account_ids FOR
10:40:46  12  	SELECT
10:40:46  13  	  ACCOUNT.ID
10:40:46  14  	FROM
10:40:46  15  	  ACCOUNT;
10:40:46  16  
10:40:46  17  	LOOP
10:40:46  18  	  FETCH var_account_ids into var_account_id;
10:40:46  19  	  EXIT WHEN var_account_ids%NOTFOUND;
10:40:46  20  	  BEGIN
10:40:46  21  	    INITIALIZE_ACCOUNT(var_account_id);
10:40:46  22  	    EXCEPTION
10:40:46  23  	      WHEN OTHERS THEN
10:40:46  24  		NULL;
10:40:46  25  	  END;
10:40:46  26  	END LOOP;
10:40:46  27  
10:40:46  28  END INITIALIZE_SYSTEM;
10:40:46  29  
10:40:46  30  PROCEDURE INITIALIZE_ACCOUNT (
10:40:46  31  	in_account_id IN NUMBER
10:40:46  32  ) AS
10:40:46  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
10:40:46  34  -- EXCEPTIONS
10:40:46  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
10:40:46  36  BEGIN
10:40:46  37  
10:40:46  38  	BEGIN
10:40:46  39  	  INSERT INTO ACCOUNT_LOCK(
10:40:46  40  	    ACCOUNT_ID,
10:40:46  41  	    LOCK_KEY,
10:40:46  42  	    END_DATE,
10:40:46  43  	    CREATED_BY,
10:40:46  44  	    REASON
10:40:46  45  	  ) VALUES (
10:40:46  46  	    in_account_id,
10:40:46  47  	    'initialization key',
10:40:46  48  	    SYSDATE,
10:40:46  49  	    'system',
10:40:46  50  	    'initialization'
10:40:46  51  	  );
10:40:46  52  	  EXCEPTION
10:40:46  53  	    WHEN DUP_VAL_ON_INDEX THEN
10:40:46  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
10:40:46  55  	END;
10:40:46  56  
10:40:46  57  EXCEPTION
10:40:46  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
10:40:46  59  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:46  60  	  SPROC_NAME, 'Account already initialized');
10:40:46  61  WHEN OTHERS THEN
10:40:46  62  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46  64  END;
10:40:46  65  
10:40:46  66  PROCEDURE INITIALIZE_GROUP (
10:40:46  67  	in_group_id IN NUMBER
10:40:46  68  ) AS
10:40:46  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
10:40:46  70  -- VARIABLES
10:40:46  71  var_account_id NUMBER;
10:40:46  72  -- EXCEPTIONS
10:40:46  73  BAD_GROUP_ID		EXCEPTION;
10:40:46  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
10:40:46  75  BEGIN
10:40:46  76  
10:40:46  77  	BEGIN
10:40:46  78  	  SELECT
10:40:46  79  	    ACCOUNT.ID into var_account_id
10:40:46  80  	  FROM
10:40:46  81  	    ACCOUNT
10:40:46  82  	  WHERE
10:40:46  83  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:46  84  	  EXCEPTION
10:40:46  85  	    WHEN NO_DATA_FOUND THEN
10:40:46  86  	     RAISE BAD_GROUP_ID;
10:40:46  87  	END;
10:40:46  88  
10:40:46  89  	BEGIN
10:40:46  90  	  INSERT INTO ACCOUNT_LOCK (
10:40:46  91  	    ACCOUNT_ID,
10:40:46  92  	    LOCK_KEY,
10:40:46  93  	    END_DATE,
10:40:46  94  	    CREATED_BY,
10:40:46  95  	    REASON
10:40:46  96  	  ) VALUES (
10:40:46  97  	    var_account_id,
10:40:46  98  	    'initialization key',
10:40:46  99  	    SYSDATE,
10:40:46 100  	    'system',
10:40:46 101  	    'initialization'
10:40:46 102  	  );
10:40:46 103  	  EXCEPTION
10:40:46 104  	    WHEN DUP_VAL_ON_INDEX THEN
10:40:46 105  	      RAISE GROUP_ALREADY_INITIALIZED;
10:40:46 106  	END;
10:40:46 107  
10:40:46 108  EXCEPTION
10:40:46 109  WHEN BAD_GROUP_ID THEN
10:40:46 110  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 111  	  SPROC_NAME, 'No such account with given group id');
10:40:46 112  WHEN GROUP_ALREADY_INITIALIZED THEN
10:40:46 113  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:46 114  	  SPROC_NAME, 'Group already initialized');
10:40:46 115  WHEN OTHERS THEN
10:40:46 116  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 118  END INITIALIZE_GROUP;
10:40:46 119  */
10:40:46 120  
10:40:46 121  PROCEDURE LOCK_ACCOUNT (
10:40:46 122  	in_group_id    IN NUMBER,
10:40:46 123  	in_lock_key    IN VARCHAR2,
10:40:46 124  	in_seconds_num IN NUMBER,
10:40:46 125  	in_created_by  IN VARCHAR2,
10:40:46 126  	in_reason      IN VARCHAR2
10:40:46 127  ) AS
10:40:46 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
10:40:46 129  -- CONSTANTS
10:40:46 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
10:40:46 131  -- VARIABLES
10:40:46 132  var_account_id NUMBER;
10:40:46 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46 134  var_date		DATE := SYSDATE;
10:40:46 135  var_lock_end_date DATE;
10:40:46 136  -- EXCEPTIONS
10:40:46 137  BAD_GROUP_ID   EXCEPTION;
10:40:46 138  ALREADY_LOCKED EXCEPTION;
10:40:46 139  BEGIN
10:40:46 140  
10:40:46 141  	BEGIN
10:40:46 142  	  SELECT
10:40:46 143  	    ACCOUNT.ID into var_account_id
10:40:46 144  	  FROM
10:40:46 145  	    ACCOUNT
10:40:46 146  	  WHERE
10:40:46 147  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:46 148  	  EXCEPTION
10:40:46 149  	    WHEN NO_DATA_FOUND THEN
10:40:46 150  	      RAISE BAD_GROUP_ID;
10:40:46 151  	END;
10:40:46 152  
10:40:46 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
10:40:46 154  
10:40:46 155  	BEGIN
10:40:46 156  
10:40:46 157  	  INSERT INTO ACCOUNT_LOCK (
10:40:46 158  	    ACCOUNT_ID,
10:40:46 159  	    LOCK_KEY,
10:40:46 160  	    END_DATE,
10:40:46 161  	    CREATED_BY,
10:40:46 162  	    REASON
10:40:46 163  	  ) VALUES (
10:40:46 164  	    var_account_id,
10:40:46 165  	    in_lock_key,
10:40:46 166  	    var_lock_end_date,
10:40:46 167  	    in_created_by,
10:40:46 168  	    in_reason
10:40:46 169  	  );
10:40:46 170  
10:40:46 171  	  EXCEPTION
10:40:46 172  	    WHEN DUP_VAL_ON_INDEX THEN
10:40:46 173  	      -- This rows was created before... I will try to update it
10:40:46 174  	      BEGIN
10:40:46 175  
10:40:46 176  		UPDATE
10:40:46 177  		  ACCOUNT_LOCK
10:40:46 178  		SET
10:40:46 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
10:40:46 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
10:40:46 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
10:40:46 182  		  ACCOUNT_LOCK.REASON = in_reason
10:40:46 183  		WHERE
10:40:46 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
10:40:46 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
10:40:46 186  
10:40:46 187  		IF SQL%ROWCOUNT = 0 THEN
10:40:46 188  		  RAISE ALREADY_LOCKED;
10:40:46 189  		END IF;
10:40:46 190  
10:40:46 191  	      END;
10:40:46 192  	END;
10:40:46 193  
10:40:46 194  EXCEPTION
10:40:46 195  WHEN BAD_GROUP_ID THEN
10:40:46 196  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 197  	  SPROC_NAME, 'No such group id');
10:40:46 198  WHEN ALREADY_LOCKED THEN
10:40:46 199  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:46 200  	  SPROC_NAME, 'Account already locked');
10:40:46 201  WHEN OTHERS THEN
10:40:46 202  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 204  END LOCK_ACCOUNT;
10:40:46 205  
10:40:46 206  /******************************************************************************/
10:40:46 207  
10:40:46 208  PROCEDURE RELEASE_LOCK (
10:40:46 209  	in_group_id IN NUMBER,
10:40:46 210  	in_lock_key IN VARCHAR2
10:40:46 211  ) AS
10:40:46 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
10:40:46 213  -- VARIABLES
10:40:46 214  var_account_id NUMBER;
10:40:46 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
10:40:46 216  var_date DATE := SYSDATE;
10:40:46 217  -- EXCEPTIONS
10:40:46 218  BAD_GROUP_ID		EXCEPTION;
10:40:46 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
10:40:46 220  BEGIN
10:40:46 221  
10:40:46 222  	BEGIN
10:40:46 223  	  SELECT
10:40:46 224  	    ACCOUNT.ID into var_account_id
10:40:46 225  	  FROM
10:40:46 226  	    ACCOUNT
10:40:46 227  	  WHERE
10:40:46 228  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:46 229  	  EXCEPTION
10:40:46 230  	    WHEN NO_DATA_FOUND THEN
10:40:46 231  	      RAISE BAD_GROUP_ID;
10:40:46 232  	END;
10:40:46 233  
10:40:46 234  	UPDATE
10:40:46 235  	  ACCOUNT_LOCK
10:40:46 236  	SET
10:40:46 237  	  ACCOUNT_LOCK.END_DATE = var_date
10:40:46 238  	WHERE
10:40:46 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
10:40:46 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
10:40:46 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
10:40:46 242  
10:40:46 243  	IF SQL%ROWCOUNT = 0 THEN
10:40:46 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
10:40:46 245  	END IF;
10:40:46 246  
10:40:46 247  EXCEPTION
10:40:46 248  WHEN BAD_GROUP_ID THEN
10:40:46 249  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 250  	  SPROC_NAME, 'No such group id');
10:40:46 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
10:40:46 252  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:46 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
10:40:46 254  WHEN OTHERS THEN
10:40:46 255  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 256  	  SPROC_NAME, 'Unknown error');
10:40:46 257  END RELEASE_LOCK;
10:40:46 258  
10:40:46 259  END PROCS_LOCKING_V22;
10:40:46 260  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.00
10:40:46 SQL> 
10:40:46 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V22" AS
10:40:46   2  
10:40:46   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
10:40:46   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
10:40:46   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
10:40:46   6  ) AS
10:40:46   7  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
10:40:46   8  BEGIN
10:40:46   9  	SELECT
10:40:46  10  	  ID INTO out_data
10:40:46  11  	FROM
10:40:46  12  	  OFFER_CHAIN
10:40:46  13  	WHERE
10:40:46  14  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
10:40:46  15  EXCEPTION
10:40:46  16  	WHEN NO_DATA_FOUND THEN NULL;
10:40:46  17  END OC_ID_BY_ITUNES_PRODUCT_ID;
10:40:46  18  
10:40:46  19  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
10:40:46  20  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
10:40:46  21  	out_data	       OUT OFFER_CHAIN.ID%TYPE
10:40:46  22  ) AS
10:40:46  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
10:40:46  24  BEGIN
10:40:46  25  	SELECT
10:40:46  26  	  ID INTO out_data
10:40:46  27  	FROM
10:40:46  28  	  OFFER_CHAIN
10:40:46  29  	WHERE
10:40:46  30  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
10:40:46  31  EXCEPTION
10:40:46  32  	WHEN NO_DATA_FOUND THEN NULL;
10:40:46  33  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
10:40:46  34  
10:40:46  35  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:46  36  	in_offer_chain_id IN   NUMBER,
10:40:46  37  	out_result_set	  OUT  SYS_REFCURSOR
10:40:46  38  ) AS
10:40:46  39  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
10:40:46  40  BEGIN
10:40:46  41  
10:40:46  42  	-- Get offer chain informations
10:40:46  43  	OPEN out_result_set FOR
10:40:46  44  	  SELECT
10:40:46  45  	    OC.ID,
10:40:46  46  	    OC.NAME,
10:40:46  47  	    OC.ADOPTABILITY_WINDOW_START_DATE,
10:40:46  48  	    OC.ADOPTABILITY_WINDOW_END_DATE,
10:40:46  49  	    OC.DESCRIPTION,
10:40:46  50  	    OC.IS_GIFT_CERTIFICATE,
10:40:46  51  	    OC.OFFER_CHAIN_STATUS_ID,
10:40:46  52  	    OC.PRODUCT_URI,
10:40:46  53  	    OC.BILLING_SOURCE_ID,
10:40:46  54  	    OC.VENDOR_SOURCE_ID,
10:40:46  55  	    OC.GROUP_ACCOUNT_TYPE_ID,
10:40:46  56  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
10:40:46  57  	    OC.AMAZON_APPSTORE_SKU,
10:40:46  58  	    OC.ITUNES_PRODUCT_ID
10:40:46  59  	  FROM
10:40:46  60  	    OFFER_CHAIN OC
10:40:46  61  	  WHERE
10:40:46  62  	    OC.ID = in_offer_chain_id
10:40:46  63  	    AND ROWNUM <= 1;
10:40:46  64  
10:40:46  65  EXCEPTION
10:40:46  66  WHEN OTHERS THEN
10:40:46  67  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46  68  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46  69  END GET_OFFER_CHAIN_BY_ID;
10:40:46  70  
10:40:46  71  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
10:40:46  72  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:46  73  	out_result_set	   OUT SYS_REFCURSOR
10:40:46  74  ) AS
10:40:46  75  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
10:40:46  76  -- EXCEPTIONS
10:40:46  77  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:40:46  78  BEGIN
10:40:46  79  
10:40:46  80  	IF (in_offer_chain_ids IS NULL) THEN
10:40:46  81  	  RAISE BAD_OFFER_CHAINS_IDS;
10:40:46  82  	END IF;
10:40:46  83  
10:40:46  84  	OPEN out_result_set FOR
10:40:46  85  	SELECT
10:40:46  86  	  OCH.ID,
10:40:46  87  	  OCH.NAME,
10:40:46  88  	  OCH.DESCRIPTION,
10:40:46  89  	  OCH.OFFER_CHAIN_STATUS_ID,
10:40:46  90  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
10:40:46  91  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
10:40:46  92  	  OCH.IS_GIFT_CERTIFICATE,
10:40:46  93  	  PROCS_OFFER_CHAIN_V22.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
10:40:46  94  	  PROCS_OFFER_CHAIN_V22.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
10:40:46  95  	  OCH.VENDOR_SOURCE_ID,
10:40:46  96  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
10:40:46  97  	FROM
10:40:46  98  	  OFFER_CHAIN OCH
10:40:46  99  	WHERE
10:40:46 100  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
10:40:46 101  
10:40:46 102  EXCEPTION
10:40:46 103  WHEN BAD_OFFER_CHAINS_IDS THEN
10:40:46 104  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46 105  	  SPROC_NAME, 'Invalid offer chains ids');
10:40:46 106  WHEN OTHERS THEN
10:40:46 107  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 109  END GET_OFFER_CHAINS_BY_IDS;
10:40:46 110  
10:40:46 111  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
10:40:46 112  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:46 113  	out_result_set	   OUT SYS_REFCURSOR
10:40:46 114  ) AS
10:40:46 115  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
10:40:46 116  -- EXCEPTIONS
10:40:46 117  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:40:46 118  BEGIN
10:40:46 119  
10:40:46 120  	IF (in_offer_chain_ids IS NULL) THEN
10:40:46 121  	  RAISE BAD_OFFER_CHAINS_IDS;
10:40:46 122  	END IF;
10:40:46 123  
10:40:46 124  	OPEN out_result_set FOR
10:40:46 125  	SELECT
10:40:46 126  	  OOCH.OFFER_CHAIN_ID,
10:40:46 127  	  PO.PRODUCT_ID
10:40:46 128  	FROM
10:40:46 129  	  PRODUCT_OFFERING PO
10:40:46 130  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
10:40:46 131  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
10:40:46 132  	WHERE
10:40:46 133  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
10:40:46 134  
10:40:46 135  EXCEPTION
10:40:46 136  WHEN BAD_OFFER_CHAINS_IDS THEN
10:40:46 137  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46 138  	  SPROC_NAME, 'Invalid offer chains ids');
10:40:46 139  WHEN OTHERS THEN
10:40:46 140  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 141  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 142  END GET_OFFER_CHAINS_PRODUCTS;
10:40:46 143  
10:40:46 144  PROCEDURE GET_OFFER_CHAINS_OFFERS (
10:40:46 145  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:46 146  	out_result_set	   OUT SYS_REFCURSOR
10:40:46 147  ) AS
10:40:46 148  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
10:40:46 149  -- EXCEPTIONS
10:40:46 150  BAD_OFFER_CHAINS_IDS EXCEPTION;
10:40:46 151  BEGIN
10:40:46 152  
10:40:46 153  	IF (in_offer_chain_ids IS NULL) THEN
10:40:46 154  	  RAISE BAD_OFFER_CHAINS_IDS;
10:40:46 155  	END IF;
10:40:46 156  
10:40:46 157  	OPEN out_result_set FOR
10:40:46 158  	SELECT
10:40:46 159  	  OOCH.OFFER_CHAIN_ID,
10:40:46 160  	  OOCH.OFFER_ID,
10:40:46 161  	  OOCH.INDEX_VALUE,
10:40:46 162  	  OOCH.NUM_RECURRENCES,
10:40:46 163  	  O.ENTITLEMENT_DURATION,
10:40:46 164  	  PROCS_OFFER_CHAIN_V22.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
10:40:46 165  	FROM
10:40:46 166  	  OFFER O
10:40:46 167  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
10:40:46 168  	WHERE
10:40:46 169  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
10:40:46 170  
10:40:46 171  EXCEPTION
10:40:46 172  WHEN BAD_OFFER_CHAINS_IDS THEN
10:40:46 173  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46 174  	  SPROC_NAME, 'Invalid offer chains ids');
10:40:46 175  WHEN OTHERS THEN
10:40:46 176  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 177  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 178  END GET_OFFER_CHAINS_OFFERS;
10:40:46 179  
10:40:46 180  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
10:40:46 181  	in_product_id  IN  NUMBER,
10:40:46 182  	out_result_set OUT SYS_REFCURSOR
10:40:46 183  )AS
10:40:46 184  -- VARIBLES
10:40:46 185  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
10:40:46 186  temp_product_id NUMBER;
10:40:46 187  
10:40:46 188  -- EXCEPTIONS
10:40:46 189  BAD_PRODUCT_ID EXCEPTION;
10:40:46 190  BEGIN
10:40:46 191  
10:40:46 192  	-- Check that given product exists
10:40:46 193  	BEGIN
10:40:46 194  	  SELECT
10:40:46 195  	    PRODUCT.ID into temp_product_id
10:40:46 196  	  FROM
10:40:46 197  	    PRODUCT
10:40:46 198  	  WHERE
10:40:46 199  	    PRODUCT.ID = in_product_id;
10:40:46 200  	  EXCEPTION
10:40:46 201  	    WHEN NO_DATA_FOUND THEN
10:40:46 202  	      RAISE BAD_PRODUCT_ID;
10:40:46 203  	END;
10:40:46 204  
10:40:46 205  	-- Select all offer chains that contains given product
10:40:46 206  	OPEN out_result_set FOR
10:40:46 207  	SELECT
10:40:46 208  	  OFFER_CHAIN.ID,
10:40:46 209  	  OFFER_CHAIN.NAME,
10:40:46 210  	  OFFER_CHAIN.DESCRIPTION,
10:40:46 211  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
10:40:46 212  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
10:40:46 213  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:40:46 214  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
10:40:46 215  	FROM
10:40:46 216  	  OFFER_CHAIN
10:40:46 217  	WHERE
10:40:46 218  	  OFFER_CHAIN.ID IN (
10:40:46 219  	    SELECT DISTINCT
10:40:46 220  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
10:40:46 221  	    FROM
10:40:46 222  	      OFFER_OFFER_CHAIN
10:40:46 223  	    WHERE
10:40:46 224  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
10:40:46 225  		SELECT DISTINCT
10:40:46 226  		  OFFER_PRODUCT_OFFERING.OFFER_ID
10:40:46 227  		FROM
10:40:46 228  		  OFFER_PRODUCT_OFFERING
10:40:46 229  		WHERE
10:40:46 230  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
10:40:46 231  	      )
10:40:46 232  	  );
10:40:46 233  
10:40:46 234  EXCEPTION
10:40:46 235  WHEN BAD_PRODUCT_ID THEN
10:40:46 236  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 237  	  SPROC_NAME, 'No such product');
10:40:46 238  WHEN OTHERS THEN
10:40:46 239  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 241  END GET_OFFER_CHAINS_BY_PRODUCT;
10:40:46 242  
10:40:46 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
10:40:46 244  	in_offer_chain_id IN NUMBER,
10:40:46 245  	out_price	  OUT NUMBER
10:40:46 246  ) AS
10:40:46 247  -- VARIABLES
10:40:46 248  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
10:40:46 249  temp_offer_chain_id NUMBER;
10:40:46 250  
10:40:46 251  -- EXCEPTION
10:40:46 252  BAD_OFFER_CHAIN_ID       EXCEPTION;
10:40:46 253  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
10:40:46 254  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:40:46 255  BEGIN
10:40:46 256  
10:40:46 257  	-- Check that given offer chain exists
10:40:46 258  	BEGIN
10:40:46 259  	  SELECT
10:40:46 260  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 261  	  FROM
10:40:46 262  	    OFFER_CHAIN
10:40:46 263  	  WHERE
10:40:46 264  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 265  
10:40:46 266  	  EXCEPTION
10:40:46 267  	  WHEN NO_DATA_FOUND THEN
10:40:46 268  	    RAISE BAD_OFFER_CHAIN_ID;
10:40:46 269  	END;
10:40:46 270  
10:40:46 271  	BEGIN
10:40:46 272  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
10:40:46 273  	  EXCEPTION
10:40:46 274  	    WHEN OTHERS THEN
10:40:46 275  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 276  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
10:40:46 277  	END;
10:40:46 278  
10:40:46 279  EXCEPTION
10:40:46 280  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 281  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 282  	  SPROC_NAME, 'Bad offer chain id');
10:40:46 283  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
10:40:46 284  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 285  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
10:40:46 286  WHEN OTHERS THEN
10:40:46 287  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 288  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 289  END GET_OFFER_CHAIN_PRICE;
10:40:46 290  
10:40:46 291  PROCEDURE GET_FIRST_OFFER(
10:40:46 292  	in_offer_chain_id IN  NUMBER,
10:40:46 293  	out_offer_id	  OUT NUMBER
10:40:46 294  ) AS
10:40:46 295  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
10:40:46 296  BEGIN
10:40:46 297  	-- Seect first offer in offer chain
10:40:46 298  	SELECT
10:40:46 299  	  OFFER_ID into out_offer_id
10:40:46 300  	FROM (
10:40:46 301  	  SELECT
10:40:46 302  	    OFFER_OFFER_CHAIN.OFFER_ID
10:40:46 303  	  FROM
10:40:46 304  	    OFFER_OFFER_CHAIN
10:40:46 305  	  WHERE
10:40:46 306  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 307  	  ORDER BY
10:40:46 308  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:40:46 309  	)
10:40:46 310  	WHERE
10:40:46 311  	  ROWNUM <= 1;
10:40:46 312  
10:40:46 313  EXCEPTION
10:40:46 314  WHEN NO_DATA_FOUND THEN
10:40:46 315  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 316  	  SPROC_NAME, 'No such offer chain');
10:40:46 317  WHEN OTHERS THEN
10:40:46 318  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 320  END GET_FIRST_OFFER;
10:40:46 321  
10:40:46 322  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
10:40:46 323  	out_result_set OUT SYS_REFCURSOR
10:40:46 324  ) AS
10:40:46 325  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
10:40:46 326  BEGIN
10:40:46 327  	OPEN out_result_set FOR
10:40:46 328  	SELECT
10:40:46 329  	  OFFER_CHAIN.ID,
10:40:46 330  	  OFFER_CHAIN.NAME,
10:40:46 331  	  OFFER_CHAIN.DESCRIPTION,
10:40:46 332  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
10:40:46 333  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
10:40:46 334  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:40:46 335  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:40:46 336  	  PROCS_OFFER_CHAIN_V22.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
10:40:46 337  	  PRODUCT_OFFERING.PRODUCT_ID
10:40:46 338  	FROM
10:40:46 339  	  OFFER_CHAIN,
10:40:46 340  	  OFFER_OFFER_CHAIN,
10:40:46 341  	  OFFER_PRODUCT_OFFERING,
10:40:46 342  	  PRODUCT_OFFERING
10:40:46 343  	WHERE
10:40:46 344  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
10:40:46 345  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:40:46 346  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46 347  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V22.OFFER_CHAIN_ACTIVE;
10:40:46 348  
10:40:46 349  EXCEPTION
10:40:46 350  WHEN OTHERS THEN
10:40:46 351  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 352  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 353  END GET_ACTIVE_OFFER_CHAINS;
10:40:46 354  
10:40:46 355  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
10:40:46 356  	in_offer_chain_id IN NUMBER,
10:40:46 357  	out_result_set	  OUT SYS_REFCURSOR
10:40:46 358  ) AS
10:40:46 359  -- VARIABLES
10:40:46 360  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
10:40:46 361  temp_offer_chain_id NUMBER;
10:40:46 362  
10:40:46 363  -- EXCEPTIONS
10:40:46 364  BAD_OFFER_CHAIN EXCEPTION;
10:40:46 365  BEGIN
10:40:46 366  
10:40:46 367  	-- Check that offer chain exists
10:40:46 368  	BEGIN
10:40:46 369  	  SELECT
10:40:46 370  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 371  	  FROM
10:40:46 372  	    OFFER_CHAIN
10:40:46 373  	  WHERE
10:40:46 374  	    OFFER_CHAIN.ID = in_offer_chain_id
10:40:46 375  	    AND ROWNUM <= 1;
10:40:46 376  
10:40:46 377  	  EXCEPTION
10:40:46 378  	    WHEN OTHERS THEN
10:40:46 379  	      RAISE BAD_OFFER_CHAIN;
10:40:46 380  	END;
10:40:46 381  
10:40:46 382  	-- Select all products for given offer chain
10:40:46 383  	OPEN out_result_set FOR
10:40:46 384  	SELECT DISTINCT
10:40:46 385  	  PRODUCT_OFFERING.PRODUCT_ID
10:40:46 386  	FROM
10:40:46 387  	  PRODUCT_OFFERING
10:40:46 388  	WHERE
10:40:46 389  	  PRODUCT_OFFERING.ID IN (
10:40:46 390  	    SELECT DISTINCT
10:40:46 391  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:46 392  	    FROM
10:40:46 393  	      OFFER_PRODUCT_OFFERING
10:40:46 394  	    WHERE
10:40:46 395  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:46 396  		SELECT
10:40:46 397  		  OFFER_OFFER_CHAIN.OFFER_ID
10:40:46 398  		FROM
10:40:46 399  		  OFFER_OFFER_CHAIN
10:40:46 400  		WHERE
10:40:46 401  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 402  	      )
10:40:46 403  	  );
10:40:46 404  
10:40:46 405  EXCEPTION
10:40:46 406  WHEN BAD_OFFER_CHAIN THEN
10:40:46 407  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 408  	  SPROC_NAME, 'No such offer chain');
10:40:46 409  WHEN OTHERS THEN
10:40:46 410  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 412  END GET_OFFER_CHAIN_PRODUCTS;
10:40:46 413  
10:40:46 414  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
10:40:46 415  	in_offer_chain_id	  IN NUMBER,
10:40:46 416  	in_offer_chain_start_date IN DATE
10:40:46 417  ) RETURN DATE AS
10:40:46 418  -- VARIABLES
10:40:46 419  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
10:40:46 420  temp_offer_chain_id    NUMBER;
10:40:46 421  var_offer_chain_length NUMBER;
10:40:46 422  var_offer_duration     VARCHAR2(30);
10:40:46 423  var_offer_recurrences  NUMBER;
10:40:46 424  var_end_date	     DATE;
10:40:46 425  
10:40:46 426  var_offer_ym_interval INTERVAL YEAR TO MONTH;
10:40:46 427  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
10:40:46 428  var_offer_years	    NUMBER;
10:40:46 429  var_offer_months	    NUMBER;
10:40:46 430  var_offer_days	    NUMBER;
10:40:46 431  var_infinity_offers_count NUMBER;
10:40:46 432  
10:40:46 433  var_offers_set SYS_REFCURSOR;
10:40:46 434  
10:40:46 435  -- EXCEPTIONS
10:40:46 436  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:46 437  BEGIN
10:40:46 438  
10:40:46 439  	var_end_date := in_offer_chain_start_date;
10:40:46 440  
10:40:46 441  	-- Check that offer chain exists
10:40:46 442  	BEGIN
10:40:46 443  	  SELECT
10:40:46 444  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 445  	  FROM
10:40:46 446  	    OFFER_CHAIN
10:40:46 447  	  WHERE
10:40:46 448  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 449  	  EXCEPTION
10:40:46 450  	    WHEN NO_DATA_FOUND
10:40:46 451  	      THEN RAISE BAD_OFFER_CHAIN_ID;
10:40:46 452  	END;
10:40:46 453  
10:40:46 454  	SELECT
10:40:46 455  	  COUNT(*) into var_infinity_offers_count
10:40:46 456  	FROM
10:40:46 457  	  OFFER_OFFER_CHAIN
10:40:46 458  	WHERE
10:40:46 459  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 460  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V22.OFFER_REC_INFINITY;
10:40:46 461  
10:40:46 462  	IF var_infinity_offers_count > 0 THEN
10:40:46 463  	  -- Offer chain contains offers with infinity num of recurrences
10:40:46 464  	  RETURN NULL;
10:40:46 465  	END IF;
10:40:46 466  
10:40:46 467  	-- Select offers durations
10:40:46 468  	OPEN var_offers_set FOR
10:40:46 469  	SELECT
10:40:46 470  	  OFFER.ENTITLEMENT_DURATION,
10:40:46 471  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
10:40:46 472  	FROM
10:40:46 473  	  OFFER_OFFER_CHAIN
10:40:46 474  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:46 475  	WHERE
10:40:46 476  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
10:40:46 477  
10:40:46 478  	-- Calculate sum of offers durations
10:40:46 479  	LOOP
10:40:46 480  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
10:40:46 481  	  EXIT WHEN var_offers_set%NOTFOUND;
10:40:46 482  	  PROCS_COMMON_V22.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
10:40:46 483  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
10:40:46 484  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
10:40:46 485  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
10:40:46 486  	END LOOP;
10:40:46 487  
10:40:46 488  	RETURN var_end_date;
10:40:46 489  
10:40:46 490  EXCEPTION
10:40:46 491  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 492  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 493  	  SPROC_NAME, 'No such offer chain');
10:40:46 494  WHEN OTHERS THEN
10:40:46 495  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 496  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 497  END CALCULATE_OFFER_CHAIN_END_DATE;
10:40:46 498  
10:40:46 499  FUNCTION CALCULATE_OFFER_AMOUNT (
10:40:46 500  	in_offer_id IN NUMBER
10:40:46 501  ) RETURN NUMBER AS
10:40:46 502  -- VARIABLES
10:40:46 503  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
10:40:46 504  temp_offer_id NUMBER;
10:40:46 505  
10:40:46 506  var_product_offering_set	    SYS_REFCURSOR;
10:40:46 507  var_product_offering_id	    NUMBER;
10:40:46 508  var_product_offering_price    NUMBER(10,6);
10:40:46 509  var_product_offering_t_amount NUMBER(10,6);
10:40:46 510  var_product_offering_quantity NUMBER;
10:40:46 511  
10:40:46 512  var_total_amount NUMBER(10,6);
10:40:46 513  var_final_amount NUMBER(10,2);
10:40:46 514  
10:40:46 515  var_percent_discount NUMBER(10,2);
10:40:46 516  var_fixed_discount NUMBER(10,6);
10:40:46 517  
10:40:46 518  -- EXCEPTIONS
10:40:46 519  BAD_OFFER_ID EXCEPTION;
10:40:46 520  BEGIN
10:40:46 521  
10:40:46 522  	BEGIN
10:40:46 523  	  SELECT
10:40:46 524  	    OFFER.ID into temp_offer_id
10:40:46 525  	  FROM
10:40:46 526  	    OFFER
10:40:46 527  	  WHERE
10:40:46 528  	    OFFER.ID = in_offer_id;
10:40:46 529  	  EXCEPTION
10:40:46 530  	    WHEN NO_DATA_FOUND THEN
10:40:46 531  	      RAISE BAD_OFFER_ID;
10:40:46 532  	END;
10:40:46 533  
10:40:46 534  	OPEN var_product_offering_set FOR
10:40:46 535  	SELECT
10:40:46 536  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
10:40:46 537  	  PRODUCT_OFFERING.UNIT_PRICE,
10:40:46 538  	  PRODUCT_OFFERING.QUANTITY
10:40:46 539  	FROM
10:40:46 540  	  OFFER_PRODUCT_OFFERING
10:40:46 541  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46 542  	WHERE
10:40:46 543  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:40:46 544  
10:40:46 545  	var_total_amount := 0;
10:40:46 546  
10:40:46 547  	LOOP
10:40:46 548  	  FETCH var_product_offering_set into
10:40:46 549  	    var_product_offering_id,
10:40:46 550  	    var_product_offering_price,
10:40:46 551  	    var_product_offering_quantity;
10:40:46 552  	  EXIT WHEN var_product_offering_set%NOTFOUND;
10:40:46 553  
10:40:46 554  	  SELECT
10:40:46 555  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
10:40:46 556  	  FROM
10:40:46 557  	    DISCOUNT_PRODUCT_OFFERING
10:40:46 558  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:40:46 559  	  WHERE
10:40:46 560  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:40:46 561  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
10:40:46 562  
10:40:46 563  	  SELECT
10:40:46 564  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
10:40:46 565  	  FROM
10:40:46 566  	    DISCOUNT_PRODUCT_OFFERING
10:40:46 567  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
10:40:46 568  	  WHERE
10:40:46 569  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
10:40:46 570  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
10:40:46 571  
10:40:46 572  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
10:40:46 573  
10:40:46 574  	  IF var_percent_discount IS NOT NULL THEN
10:40:46 575  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
10:40:46 576  	  END IF;
10:40:46 577  
10:40:46 578  	  IF var_fixed_discount IS NOT NULL THEN
10:40:46 579  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
10:40:46 580  	  END IF;
10:40:46 581  
10:40:46 582  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
10:40:46 583  	END LOOP;
10:40:46 584  	var_final_amount := var_total_amount;
10:40:46 585  	RETURN var_final_amount;
10:40:46 586  
10:40:46 587  EXCEPTION
10:40:46 588  WHEN BAD_OFFER_ID THEN
10:40:46 589  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 590  	  SPROC_NAME, 'No such offer');
10:40:46 591  WHEN OTHERS THEN
10:40:46 592  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 593  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 594  END CALCULATE_OFFER_AMOUNT;
10:40:46 595  
10:40:46 596  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
10:40:46 597  	in_offer_chain_id IN NUMBER
10:40:46 598  ) RETURN NUMBER AS
10:40:46 599  -- VARIABLES
10:40:46 600  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
10:40:46 601  temp_offer_chain_id    NUMBER;
10:40:46 602  var_first_offer_id     NUMBER;
10:40:46 603  -- EXCEPTIONS
10:40:46 604  BAD_OFFER_CHAIN_ID      EXCEPTION;
10:40:46 605  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
10:40:46 606  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:46 607  BEGIN
10:40:46 608  
10:40:46 609  	BEGIN
10:40:46 610  	  SELECT
10:40:46 611  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 612  	  FROM
10:40:46 613  	    OFFER_CHAIN
10:40:46 614  	  WHERE
10:40:46 615  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 616  	  EXCEPTION
10:40:46 617  	    WHEN NO_DATA_FOUND THEN
10:40:46 618  	      RAISE BAD_OFFER_CHAIN_ID;
10:40:46 619  	END;
10:40:46 620  
10:40:46 621  	BEGIN
10:40:46 622  	  PROCS_OFFER_CHAIN_V22.GET_FIRST_OFFER(
10:40:46 623  	    in_offer_chain_id => in_offer_chain_id,
10:40:46 624  	    out_offer_id      => var_first_offer_id
10:40:46 625  	  );
10:40:46 626  	  EXCEPTION
10:40:46 627  	    WHEN OTHERS THEN
10:40:46 628  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 629  	      RAISE CAN_NOT_GET_FIRST_OFFER;
10:40:46 630  	END;
10:40:46 631  
10:40:46 632  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
10:40:46 633  
10:40:46 634  EXCEPTION
10:40:46 635  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 636  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 637  	  SPROC_NAME, 'No such offer chain');
10:40:46 638  WHEN CAN_NOT_GET_FIRST_OFFER THEN
10:40:46 639  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 640  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
10:40:46 641  WHEN OTHERS THEN
10:40:46 642  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 643  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 644  END CALCULATE_OFFER_CHAIN_AMOUNT;
10:40:46 645  
10:40:46 646  FUNCTION GET_FIRST_OFFER_INDEX (
10:40:46 647  	in_offer_chain_id IN NUMBER
10:40:46 648  ) RETURN NUMBER AS
10:40:46 649  -- VARIABLES
10:40:46 650  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
10:40:46 651  var_first_offer_index NUMBER;
10:40:46 652  BEGIN
10:40:46 653  
10:40:46 654  	SELECT
10:40:46 655  	  INDEX_VALUE into var_first_offer_index
10:40:46 656  	FROM (
10:40:46 657  	  SELECT
10:40:46 658  	    OFFER_OFFER_CHAIN.INDEX_VALUE
10:40:46 659  	  FROM
10:40:46 660  	    OFFER_OFFER_CHAIN
10:40:46 661  	  WHERE
10:40:46 662  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 663  	  ORDER BY
10:40:46 664  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:40:46 665  	)
10:40:46 666  	WHERE
10:40:46 667  	  ROWNUM <= 1;
10:40:46 668  
10:40:46 669  	RETURN var_first_offer_index;
10:40:46 670  
10:40:46 671  EXCEPTION
10:40:46 672  WHEN NO_DATA_FOUND THEN
10:40:46 673  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 674  	  SPROC_NAME, 'No such offer chain');
10:40:46 675  WHEN OTHERS THEN
10:40:46 676  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 678  END GET_FIRST_OFFER_INDEX;
10:40:46 679  
10:40:46 680  FUNCTION GET_NEXT_OFFER_INDEX (
10:40:46 681  	in_offer_chain_id	     IN NUMBER,
10:40:46 682  	in_offer_chain_current_index IN NUMBER
10:40:46 683  ) RETURN NUMBER AS
10:40:46 684  -- VARIABLES
10:40:46 685  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
10:40:46 686  temp_offer_chain_id	     NUMBER;
10:40:46 687  temp_offer_chain_current_index NUMBER;
10:40:46 688  var_result		     NUMBER;
10:40:46 689  -- EXCEPTIONS
10:40:46 690  BAD_OFFER_CHAIN_ID      EXCEPTION;
10:40:46 691  BAD_CURRENT_INDEX_VALUE EXCEPTION;
10:40:46 692  BEGIN
10:40:46 693  
10:40:46 694  	-- Check that offer chain exists
10:40:46 695  	BEGIN
10:40:46 696  	  SELECT
10:40:46 697  	    OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 698  	  FROM
10:40:46 699  	    OFFER_CHAIN
10:40:46 700  	  WHERE
10:40:46 701  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 702  	  EXCEPTION
10:40:46 703  	    WHEN NO_DATA_FOUND THEN
10:40:46 704  	      RAISE BAD_OFFER_CHAIN_ID;
10:40:46 705  	END;
10:40:46 706  
10:40:46 707  	-- Check that current offer index exists
10:40:46 708  	BEGIN
10:40:46 709  	  SELECT
10:40:46 710  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
10:40:46 711  	  FROM
10:40:46 712  	    OFFER_OFFER_CHAIN
10:40:46 713  	  WHERE
10:40:46 714  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 715  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
10:40:46 716  	    -- TODO: delete next line
10:40:46 717  	    AND ROWNUM <= 1;
10:40:46 718  	  EXCEPTION
10:40:46 719  	    WHEN NO_DATA_FOUND THEN
10:40:46 720  	      RAISE BAD_CURRENT_INDEX_VALUE;
10:40:46 721  	END;
10:40:46 722  
10:40:46 723  	-- Get next offer index
10:40:46 724  	BEGIN
10:40:46 725  	  SELECT
10:40:46 726  	    INDEX_VALUE into var_result
10:40:46 727  	  FROM (
10:40:46 728  	    SELECT
10:40:46 729  	      OFFER_OFFER_CHAIN.INDEX_VALUE
10:40:46 730  	    FROM
10:40:46 731  	      OFFER_OFFER_CHAIN
10:40:46 732  	    WHERE
10:40:46 733  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 734  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
10:40:46 735  	    ORDER BY
10:40:46 736  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
10:40:46 737  	  )
10:40:46 738  	  WHERE
10:40:46 739  	    ROWNUM <= 1;
10:40:46 740  	  EXCEPTION
10:40:46 741  	    WHEN NO_DATA_FOUND THEN
10:40:46 742  	      var_result := NULL;
10:40:46 743  	END;
10:40:46 744  
10:40:46 745  	RETURN var_result;
10:40:46 746  
10:40:46 747  EXCEPTION
10:40:46 748  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 749  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 750  	  SPROC_NAME, 'No such offer chain');
10:40:46 751  WHEN BAD_CURRENT_INDEX_VALUE THEN
10:40:46 752  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 753  	  SPROC_NAME, 'Bad current index value');
10:40:46 754  WHEN OTHERS THEN
10:40:46 755  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 757  END GET_NEXT_OFFER_INDEX;
10:40:46 758  
10:40:46 759  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:40:46 760  	in_offer_chain_id	     IN NUMBER,
10:40:46 761  	in_offer_chain_current_index IN NUMBER,
10:40:46 762  	out_next_offer_index	     OUT NUMBER
10:40:46 763  ) AS
10:40:46 764  BEGIN
10:40:46 765  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
10:40:46 766  	  in_offer_chain_id,
10:40:46 767  	  in_offer_chain_current_index
10:40:46 768  	);
10:40:46 769  END P_GET_NEXT_OFFER_INDEX;
10:40:46 770  
10:40:46 771  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:40:46 772  	in_license_id		     IN NUMBER,
10:40:46 773  	in_offer_chain_current_index IN NUMBER,
10:40:46 774  	out_next_offer_index	     OUT NUMBER
10:40:46 775  ) AS
10:40:46 776  -- VARIABLES
10:40:46 777  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
10:40:46 778  var_offer_chain_id NUMBER;
10:40:46 779  -- EXCEPTIONS
10:40:46 780  BAD_LICENSE_ID		   EXCEPTION;
10:40:46 781  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
10:40:46 782  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
10:40:46 783  BEGIN
10:40:46 784  
10:40:46 785  	BEGIN
10:40:46 786  	  SELECT
10:40:46 787  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:40:46 788  	  FROM
10:40:46 789  	    SUBSCRIPTION
10:40:46 790  	  WHERE
10:40:46 791  	    SUBSCRIPTION.ID = (
10:40:46 792  	      SELECT
10:40:46 793  		LICENSE.SUBSCRIPTION_ID
10:40:46 794  	      FROM
10:40:46 795  		LICENSE
10:40:46 796  	      WHERE
10:40:46 797  		LICENSE.ID = in_license_id
10:40:46 798  	    );
10:40:46 799  	  EXCEPTION
10:40:46 800  	    WHEN NO_DATA_FOUND THEN
10:40:46 801  	      RAISE BAD_LICENSE_ID;
10:40:46 802  	END;
10:40:46 803  
10:40:46 804  	BEGIN
10:40:46 805  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
10:40:46 806  	    var_offer_chain_id,
10:40:46 807  	    in_offer_chain_current_index
10:40:46 808  	  );
10:40:46 809  	  EXCEPTION
10:40:46 810  	    WHEN OTHERS THEN
10:40:46 811  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 812  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
10:40:46 813  	END;
10:40:46 814  
10:40:46 815  EXCEPTION
10:40:46 816  WHEN BAD_LICENSE_ID THEN
10:40:46 817  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 818  	  SPROC_NAME, 'No such license');
10:40:46 819  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
10:40:46 820  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 821  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
10:40:46 822  WHEN OTHERS THEN
10:40:46 823  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 824  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 825  END GET_NEXT_OFFER_INDEX_BY_LCNS;
10:40:46 826  
10:40:46 827  FUNCTION IS_OFFER_INDEX_EXISTS (
10:40:46 828  	in_offer_chain_id	   IN NUMBER,
10:40:46 829  	in_offer_chain_offer_index IN NUMBER
10:40:46 830  ) RETURN NUMBER AS
10:40:46 831  -- VARIABLES
10:40:46 832  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
10:40:46 833  temp_count NUMBER;
10:40:46 834  BEGIN
10:40:46 835  
10:40:46 836  	SELECT
10:40:46 837  	  COUNT(*) into temp_count
10:40:46 838  	FROM
10:40:46 839  	  OFFER_OFFER_CHAIN
10:40:46 840  	WHERE
10:40:46 841  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 842  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
10:40:46 843  
10:40:46 844  	IF temp_count > 0 THEN
10:40:46 845  	  RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:46 846  	ELSE
10:40:46 847  	  RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 848  	END IF;
10:40:46 849  
10:40:46 850  EXCEPTION
10:40:46 851  WHEN OTHERS THEN
10:40:46 852  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 853  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 854  END IS_OFFER_INDEX_EXISTS;
10:40:46 855  
10:40:46 856  PROCEDURE GET_OFFER_LENGTH (
10:40:46 857  	in_offer_id IN NUMBER,
10:40:46 858  	out_years   OUT NUMBER,
10:40:46 859  	out_months  OUT NUMBER,
10:40:46 860  	out_days    OUT NUMBER
10:40:46 861  ) AS
10:40:46 862  -- VARIABLES
10:40:46 863  var_offer_duration VARCHAR2(30);
10:40:46 864  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
10:40:46 865  -- EXCEPTIONS
10:40:46 866  BAD_OFFER_ID	     EXCEPTION;
10:40:46 867  CAN_NOT_PARSE_DURATION EXCEPTION;
10:40:46 868  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:46 869  BEGIN
10:40:46 870  
10:40:46 871  	BEGIN
10:40:46 872  	  SELECT
10:40:46 873  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:40:46 874  	  FROM
10:40:46 875  	    OFFER
10:40:46 876  	  WHERE
10:40:46 877  	    OFFER.ID = in_offer_id;
10:40:46 878  	  EXCEPTION
10:40:46 879  	    WHEN NO_DATA_FOUND THEN
10:40:46 880  	      RAISE BAD_OFFER_ID;
10:40:46 881  	END;
10:40:46 882  
10:40:46 883  	BEGIN
10:40:46 884  	  PROCS_COMMON_V22.ISO8601DURATION_TO_INTERVALS(
10:40:46 885  	    var_offer_duration,
10:40:46 886  	    out_years,
10:40:46 887  	    out_months,
10:40:46 888  	    out_days
10:40:46 889  	  );
10:40:46 890  	  EXCEPTION
10:40:46 891  	    WHEN OTHERS THEN
10:40:46 892  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:46 893  	      RAISE CAN_NOT_PARSE_DURATION;
10:40:46 894  	END;
10:40:46 895  
10:40:46 896  EXCEPTION
10:40:46 897  WHEN BAD_OFFER_ID THEN
10:40:46 898  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 899  	  SPROC_NAME, 'No such offer');
10:40:46 900  WHEN CAN_NOT_PARSE_DURATION THEN
10:40:46 901  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 902  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
10:40:46 903  WHEN OTHERS THEN
10:40:46 904  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 906  END GET_OFFER_LENGTH;
10:40:46 907  
10:40:46 908  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
10:40:46 909  	in_offer_id   IN NUMBER,
10:40:46 910  	in_start_date IN DATE DEFAULT SYSDATE,
10:40:46 911  	out_days      OUT NUMBER
10:40:46 912  ) AS
10:40:46 913  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
10:40:46 914  -- VARIABLES
10:40:46 915  var_offer_duration VARCHAR2(30);
10:40:46 916  var_offer_years	 NUMBER;
10:40:46 917  var_offer_months	 NUMBER;
10:40:46 918  var_offer_days	 NUMBER;
10:40:46 919  var_offer_end_date DATE;
10:40:46 920  -- EXCEPTIONS
10:40:46 921  BAD_OFFER_ID EXCEPTION;
10:40:46 922  BEGIN
10:40:46 923  
10:40:46 924  	BEGIN
10:40:46 925  	  SELECT
10:40:46 926  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:40:46 927  	  FROM
10:40:46 928  	    OFFER
10:40:46 929  	  WHERE
10:40:46 930  	    OFFER.ID = in_offer_id;
10:40:46 931  	  EXCEPTION
10:40:46 932  	    WHEN NO_DATA_FOUND THEN
10:40:46 933  	      RAISE BAD_OFFER_ID;
10:40:46 934  	END;
10:40:46 935  
10:40:46 936  	PROCS_COMMON_V22.ISO8601DURATION_TO_INTERVALS (
10:40:46 937  	  var_offer_duration,
10:40:46 938  	  var_offer_years,
10:40:46 939  	  var_offer_months,
10:40:46 940  	  var_offer_days
10:40:46 941  	);
10:40:46 942  
10:40:46 943  	var_offer_end_date := ( ( in_start_date
10:40:46 944  	  + GLOBAL_CONSTANTS_V22.ONE_DAY_INTERVAL * var_offer_days )
10:40:46 945  	  + GLOBAL_CONSTANTS_V22.ONE_MONTH_INTERVAL * var_offer_months )
10:40:46 946  	  + GLOBAL_CONSTANTS_V22.ONE_YEAR_INTERVAL * var_offer_years;
10:40:46 947  
10:40:46 948  	out_days := var_offer_end_date - in_start_date;
10:40:46 949  
10:40:46 950  EXCEPTION
10:40:46 951  WHEN BAD_OFFER_ID THEN
10:40:46 952  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 953  	  SPROC_NAME, 'No such offer');
10:40:46 954  WHEN OTHERS THEN
10:40:46 955  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 956  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 957  END GET_OFFER_LENGTH_IN_DAYS;
10:40:46 958  
10:40:46 959  PROCEDURE GET_OFFER_PRODUCTS (
10:40:46 960  	in_offer_id    IN NUMBER,
10:40:46 961  	out_result_set OUT SYS_REFCURSOR
10:40:46 962  ) AS
10:40:46 963  -- VARIABLES
10:40:46 964  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
10:40:46 965  temp_offerr_id NUMBER;
10:40:46 966  -- EXCEPTIONS
10:40:46 967  BAD_OFFER_ID EXCEPTION;
10:40:46 968  BEGIN
10:40:46 969  
10:40:46 970  	BEGIN
10:40:46 971  	  SELECT
10:40:46 972  	    OFFER.ID into temp_offerr_id
10:40:46 973  	  FROM
10:40:46 974  	    OFFER
10:40:46 975  	  WHERE
10:40:46 976  	    OFFER.ID = in_offer_id;
10:40:46 977  	  EXCEPTION
10:40:46 978  	    WHEN NO_DATA_FOUND THEN
10:40:46 979  	      RAISE BAD_OFFER_ID;
10:40:46 980  	END;
10:40:46 981  
10:40:46 982  	OPEN out_result_set FOR
10:40:46 983  	SELECT DISTINCT
10:40:46 984  	  PRODUCT.ID,
10:40:46 985  	  PRODUCT.NAME
10:40:46 986  	FROM
10:40:46 987  	  PRODUCT
10:40:46 988  	WHERE
10:40:46 989  	  PRODUCT.ID IN (
10:40:46 990  	      SELECT
10:40:46 991  		PRODUCT_OFFERING.PRODUCT_ID
10:40:46 992  	      FROM
10:40:46 993  		OFFER_PRODUCT_OFFERING
10:40:46 994  		INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46 995  	      WHERE
10:40:46 996  		OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
10:40:46 997  	    );
10:40:46 998  
10:40:46 999  EXCEPTION
10:40:46 1000  WHEN BAD_OFFER_ID THEN
10:40:46 1001  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1002  	   SPROC_NAME, 'No such offer');
10:40:46 1003  WHEN OTHERS THEN
10:40:46 1004  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1005  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1006  END GET_OFFER_PRODUCTS;
10:40:46 1007  
10:40:46 1008  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
10:40:46 1009  	 in_offer_chain_id IN NUMBER,
10:40:46 1010  	 out_result_set    OUT SYS_REFCURSOR
10:40:46 1011  ) AS
10:40:46 1012  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
10:40:46 1013  -- VARIABLES
10:40:46 1014  temp_offer_chain_id NUMBER;
10:40:46 1015  -- EXCEPTIONS
10:40:46 1016  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:46 1017  BEGIN
10:40:46 1018  
10:40:46 1019  	 BEGIN
10:40:46 1020  	   SELECT
10:40:46 1021  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 1022  	   FROM
10:40:46 1023  	     OFFER_CHAIN
10:40:46 1024  	   WHERE
10:40:46 1025  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 1026  	   EXCEPTION
10:40:46 1027  	     WHEN NO_DATA_FOUND THEN
10:40:46 1028  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:46 1029  	 END;
10:40:46 1030  
10:40:46 1031  	 OPEN out_result_set FOR
10:40:46 1032  	 SELECT
10:40:46 1033  	   PRODUCT_OFFERING.ID,
10:40:46 1034  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:46 1035  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:46 1036  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:46 1037  	   PRODUCT_OFFERING.QUANTITY,
10:40:46 1038  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:46 1039  	   PRODUCT_OFFERING.CREATED_BY,
10:40:46 1040  	   PRODUCT.NAME,
10:40:46 1041  	   PRODUCT.PRODUCT_URI,
10:40:46 1042  	   CAPABILITY.ID CAP_ID,
10:40:46 1043  	   CAPABILITY.CODE CAP_CODE,
10:40:46 1044  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:46 1045  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:46 1046  	 FROM
10:40:46 1047  	   PRODUCT_OFFERING
10:40:46 1048  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:40:46 1049  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:46 1050  	 WHERE
10:40:46 1051  	   PRODUCT_OFFERING.ID IN (
10:40:46 1052  	     SELECT DISTINCT
10:40:46 1053  	       PRODUCT_OFFERING_ID
10:40:46 1054  	     FROM
10:40:46 1055  	       OFFER_PRODUCT_OFFERING
10:40:46 1056  	     WHERE
10:40:46 1057  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:46 1058  		 SELECT DISTINCT
10:40:46 1059  		   OFFER_ID
10:40:46 1060  		 FROM
10:40:46 1061  		   OFFER_OFFER_CHAIN
10:40:46 1062  		 WHERE
10:40:46 1063  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1064  	       )
10:40:46 1065  	   );
10:40:46 1066  
10:40:46 1067  EXCEPTION
10:40:46 1068  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 1069  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1070  	   SPROC_NAME, 'Bad offer chain id');
10:40:46 1071  WHEN OTHERS THEN
10:40:46 1072  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1073  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1074  END GET_OFFER_CHAIN_PROD_OFFERINGS;
10:40:46 1075  
10:40:46 1076  FUNCTION CHECK_FOR_SAME_PRODUCTS (
10:40:46 1077  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
10:40:46 1078  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
10:40:46 1079  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:46 1080  ) RETURN NUMBER AS
10:40:46 1081  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
10:40:46 1082  -- CONSTANTS
10:40:46 1083  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
10:40:46 1084  -- VARIABLES
10:40:46 1085  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
10:40:46 1086  var_same_products	SYS_REFCURSOR;
10:40:46 1087  var_same_product_id	NUMBER;
10:40:46 1088  same_product_count	NUMBER;
10:40:46 1089  var_product_eligibility_limit NUMBER;
10:40:46 1090  s_product_eligibility_limit   VARCHAR2(100);
10:40:46 1091  -- EXCEPTIONS
10:40:46 1092  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
10:40:46 1093  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
10:40:46 1094  BEGIN
10:40:46 1095  
10:40:46 1096  	 -- Check that first offer chain exists
10:40:46 1097  	 BEGIN
10:40:46 1098  	   SELECT
10:40:46 1099  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 1100  	   FROM
10:40:46 1101  	     OFFER_CHAIN
10:40:46 1102  	   WHERE
10:40:46 1103  	     OFFER_CHAIN.ID = in_offer_chain_1;
10:40:46 1104  	   EXCEPTION
10:40:46 1105  	     WHEN NO_DATA_FOUND THEN
10:40:46 1106  	       RAISE BAD_FIRST_OFFER_CHAIN;
10:40:46 1107  	 END;
10:40:46 1108  
10:40:46 1109  	 -- Check that second offer chain exists
10:40:46 1110  	 BEGIN
10:40:46 1111  	   SELECT
10:40:46 1112  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 1113  	   FROM
10:40:46 1114  	     OFFER_CHAIN
10:40:46 1115  	   WHERE
10:40:46 1116  	     OFFER_CHAIN.ID = in_offer_chain_2;
10:40:46 1117  	   EXCEPTION
10:40:46 1118  	     WHEN NO_DATA_FOUND THEN
10:40:46 1119  	       RAISE BAD_SECOND_OFFER_CHAIN;
10:40:46 1120  	 END;
10:40:46 1121  
10:40:46 1122  	 PROCS_OFFER_CHAIN_V22.GET_OFF_CHAINS_SAME_PRODUCTS(
10:40:46 1123  	   in_offer_chain_1 => in_offer_chain_1,
10:40:46 1124  	   in_offer_chain_2 => in_offer_chain_2,
10:40:46 1125  	   out_result_set   => var_same_products
10:40:46 1126  	 );
10:40:46 1127  
10:40:46 1128  	 LOOP
10:40:46 1129  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
10:40:46 1130  	   EXIT WHEN var_same_products%NOTFOUND;
10:40:46 1131  
10:40:46 1132  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:46 1133  	     -- Return false because this offer chains having same products
10:40:46 1134  	     RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:46 1135  	   ELSE
10:40:46 1136  
10:40:46 1137  	     -- Get eligibility rule for given product
10:40:46 1138  	     BEGIN
10:40:46 1139  	       SELECT
10:40:46 1140  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
10:40:46 1141  	       FROM
10:40:46 1142  		 PRODUCT_ELIGIBILITY
10:40:46 1143  	       WHERE
10:40:46 1144  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
10:40:46 1145  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
10:40:46 1146  
10:40:46 1147  	       -- REVU: What should to be here? 1?
10:40:46 1148  	       EXCEPTION
10:40:46 1149  		 WHEN NO_DATA_FOUND THEN
10:40:46 1150  		   s_product_eligibility_limit := '1';
10:40:46 1151  	     END;
10:40:46 1152  
10:40:46 1153  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V22.MAX_CONSURRENT_PRD_UNLIM THEN
10:40:46 1154  	       RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 1155  	     END IF;
10:40:46 1156  
10:40:46 1157  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
10:40:46 1158  
10:40:46 1159  	     -- Check for limit
10:40:46 1160  	     IF var_product_eligibility_limit < same_product_count THEN
10:40:46 1161  	       RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:46 1162  	     END IF;
10:40:46 1163  
10:40:46 1164  	   END IF;
10:40:46 1165  	 END LOOP;
10:40:46 1166  
10:40:46 1167  	 RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 1168  
10:40:46 1169  EXCEPTION
10:40:46 1170  WHEN BAD_FIRST_OFFER_CHAIN THEN
10:40:46 1171  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1172  	   SPROC_NAME, 'First offer chain not found');
10:40:46 1173  WHEN BAD_SECOND_OFFER_CHAIN THEN
10:40:46 1174  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1175  	   SPROC_NAME, 'Second offer chain not found');
10:40:46 1176  WHEN OTHERS THEN
10:40:46 1177  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1178  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1179  END CHECK_FOR_SAME_PRODUCTS;
10:40:46 1180  
10:40:46 1181  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
10:40:46 1182  	 in_offer_chain_id IN NUMBER
10:40:46 1183  ) RETURN NUMBER AS
10:40:46 1184  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
10:40:46 1185  -- VARIABLES
10:40:46 1186  var_is_cancelable_str VARCHAR2(1);
10:40:46 1187  var_is_cancelable     NUMBER;
10:40:46 1188  BEGIN
10:40:46 1189  
10:40:46 1190  	 BEGIN
10:40:46 1191  	   SELECT
10:40:46 1192  	     VALUE INTO var_is_cancelable_str
10:40:46 1193  	   FROM (
10:40:46 1194  	     SELECT
10:40:46 1195  	       VALUE, NAME
10:40:46 1196  	     FROM
10:40:46 1197  	       OFFER_CHAIN_META_DATA
10:40:46 1198  	     WHERE
10:40:46 1199  	       OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1200  	     )
10:40:46 1201  	   WHERE
10:40:46 1202  	     UPPER(NAME) = 'CANCELABLE';
10:40:46 1203  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
10:40:46 1204  	   EXCEPTION
10:40:46 1205  	     WHEN NO_DATA_FOUND THEN
10:40:46 1206  	       var_is_cancelable := GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 1207  	 END;
10:40:46 1208  
10:40:46 1209  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:46 1210  	   RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 1211  	 END IF;
10:40:46 1212  
10:40:46 1213  	 RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:46 1214  
10:40:46 1215  EXCEPTION
10:40:46 1216  WHEN OTHERS THEN
10:40:46 1217  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1218  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1219  END IS_OFFER_CHAIN_CANCELABLE;
10:40:46 1220  
10:40:46 1221  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
10:40:46 1222  	 in_offer_chain_id IN NUMBER
10:40:46 1223  ) RETURN NUMBER AS
10:40:46 1224  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
10:40:46 1225  -- VARIABLES
10:40:46 1226  var_max_concurrent_subs_str VARCHAR2(100);
10:40:46 1227  var_max_concurrent_subs	   NUMBER;
10:40:46 1228  BEGIN
10:40:46 1229  
10:40:46 1230  	 BEGIN
10:40:46 1231  	   SELECT
10:40:46 1232  	     VALUE into var_max_concurrent_subs_str
10:40:46 1233  	   FROM
10:40:46 1234  	     (
10:40:46 1235  	       SELECT
10:40:46 1236  		 NAME,
10:40:46 1237  		 VALUE
10:40:46 1238  	       FROM
10:40:46 1239  		 OFFER_CHAIN_ELIGIBILITY
10:40:46 1240  	       WHERE
10:40:46 1241  		 OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1242  	     )
10:40:46 1243  	   WHERE
10:40:46 1244  	     NAME LIKE GLOBAL_CONSTANTS_V22.MAX_CONCURRENT_SUBS;
10:40:46 1245  
10:40:46 1246  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V22.MAX_CONCURRENT_SUBS_UNLIM THEN
10:40:46 1247  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V22.INFINITY;
10:40:46 1248  	   ELSE
10:40:46 1249  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
10:40:46 1250  	   END IF;
10:40:46 1251  
10:40:46 1252  	   EXCEPTION
10:40:46 1253  	     WHEN NO_DATA_FOUND THEN
10:40:46 1254  	       var_max_concurrent_subs := 1;
10:40:46 1255  	 END;
10:40:46 1256  
10:40:46 1257  	 RETURN var_max_concurrent_subs;
10:40:46 1258  
10:40:46 1259  EXCEPTION
10:40:46 1260  WHEN OTHERS THEN
10:40:46 1261  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1262  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1263  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
10:40:46 1264  
10:40:46 1265  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
10:40:46 1266  	 in_offer_chain_id   IN NUMBER,
10:40:46 1267  	 in_eligibility_name IN VARCHAR2,
10:40:46 1268  	 out_result_set      OUT SYS_REFCURSOR
10:40:46 1269  ) AS
10:40:46 1270  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
10:40:46 1271  -- VARIABLES
10:40:46 1272  temp_offer_chain_id NUMBER;
10:40:46 1273  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
10:40:46 1274  -- EXCEPTIONS
10:40:46 1275  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:46 1276  BEGIN
10:40:46 1277  
10:40:46 1278  	 BEGIN
10:40:46 1279  	   SELECT
10:40:46 1280  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 1281  	   FROM
10:40:46 1282  	     OFFER_CHAIN
10:40:46 1283  	   WHERE
10:40:46 1284  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 1285  	   EXCEPTION
10:40:46 1286  	     WHEN NO_DATA_FOUND THEN
10:40:46 1287  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:46 1288  	 END;
10:40:46 1289  
10:40:46 1290  	 var_eligibility_name := UPPER(in_eligibility_name);
10:40:46 1291  
10:40:46 1292  	 OPEN out_result_set FOR
10:40:46 1293  	 SELECT
10:40:46 1294  	   OFFER_CHAIN_ELIGIBILITY.ID,
10:40:46 1295  	   OFFER_CHAIN_ELIGIBILITY.NAME,
10:40:46 1296  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
10:40:46 1297  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
10:40:46 1298  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
10:40:46 1299  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
10:40:46 1300  	 FROM
10:40:46 1301  	   OFFER_CHAIN_ELIGIBILITY
10:40:46 1302  	 WHERE
10:40:46 1303  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1304  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
10:40:46 1305  
10:40:46 1306  EXCEPTION
10:40:46 1307  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 1308  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1309  	   SPROC_NAME, 'No such offer chain');
10:40:46 1310  WHEN OTHERS THEN
10:40:46 1311  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1312  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1313  END GET_OFFER_CHAIN_ELIGIBILITY;
10:40:46 1314  
10:40:46 1315  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
10:40:46 1316  	 in_offer_chain_ids  IN VARCHAR2,
10:40:46 1317  	 in_eligibility_name IN VARCHAR2,
10:40:46 1318  	 out_result_set      OUT SYS_REFCURSOR
10:40:46 1319  ) AS
10:40:46 1320  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
10:40:46 1321  -- VARIABLES
10:40:46 1322  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
10:40:46 1323  BEGIN
10:40:46 1324  
10:40:46 1325  	 var_eligibility_name := UPPER(in_eligibility_name);
10:40:46 1326  
10:40:46 1327  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
10:40:46 1328  
10:40:46 1329  	 open out_result_set for
10:40:46 1330  	 'SELECT
10:40:46 1331  	   ID,
10:40:46 1332  	   NAME,
10:40:46 1333  	   VALUE,
10:40:46 1334  	   OFFER_CHAIN_ID,
10:40:46 1335  	   CREATE_DATE,
10:40:46 1336  	   CREATED_BY
10:40:46 1337  	 FROM
10:40:46 1338  	   OFFER_CHAIN_ELIGIBILITY
10:40:46 1339  	 WHERE
10:40:46 1340  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
10:40:46 1341  	   AND UPPER(NAME) = :1'
10:40:46 1342  	 using var_eligibility_name;
10:40:46 1343  
10:40:46 1344  EXCEPTION
10:40:46 1345  WHEN OTHERS THEN
10:40:46 1346  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1347  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1348  END GET_OFFER_CHAINS_ELIGIBILITY;
10:40:46 1349  
10:40:46 1350  PROCEDURE GET_OFFER_CHAINS_META_DATA (
10:40:46 1351  	 in_offer_chain_ids IN VARCHAR2,
10:40:46 1352  	 in_meta_data_name  IN VARCHAR2,
10:40:46 1353  	 out_result_set     OUT SYS_REFCURSOR
10:40:46 1354  ) AS
10:40:46 1355  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
10:40:46 1356  -- VARIABLES
10:40:46 1357  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
10:40:46 1358  BEGIN
10:40:46 1359  
10:40:46 1360  	 var_meta_data_name := UPPER(in_meta_data_name);
10:40:46 1361  
10:40:46 1362  	 open out_result_set for
10:40:46 1363  	 'select
10:40:46 1364  	   ID,
10:40:46 1365  	   NAME,
10:40:46 1366  	   VALUE,
10:40:46 1367  	   OFFER_CHAIN_ID,
10:40:46 1368  	   CREATED_BY,
10:40:46 1369  	   CREATE_DATE
10:40:46 1370  	 from
10:40:46 1371  	   OFFER_CHAIN_META_DATA
10:40:46 1372  	 where
10:40:46 1373  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
10:40:46 1374  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
10:40:46 1375  	 using var_meta_data_name;
10:40:46 1376  
10:40:46 1377  EXCEPTION
10:40:46 1378  WHEN OTHERS THEN
10:40:46 1379  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1380  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1381  END GET_OFFER_CHAINS_META_DATA;
10:40:46 1382  
10:40:46 1383  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:46 1384  	 in_offer_chain_id IN NUMBER,
10:40:46 1385  	 in_meta_data_name IN VARCHAR2,
10:40:46 1386  	 out_result_set    OUT SYS_REFCURSOR
10:40:46 1387  ) AS
10:40:46 1388  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
10:40:46 1389  -- VARIABLES
10:40:46 1390  temp_offer_chain_id NUMBER;
10:40:46 1391  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
10:40:46 1392  -- EXCEPTIONS
10:40:46 1393  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:46 1394  BEGIN
10:40:46 1395  
10:40:46 1396  	 BEGIN
10:40:46 1397  	   SELECT
10:40:46 1398  	     OFFER_CHAIN.ID into temp_offer_chain_id
10:40:46 1399  	   FROM
10:40:46 1400  	     OFFER_CHAIN
10:40:46 1401  	   WHERE
10:40:46 1402  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:46 1403  	   EXCEPTION
10:40:46 1404  	     WHEN NO_DATA_FOUND THEN
10:40:46 1405  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:46 1406  	 END;
10:40:46 1407  
10:40:46 1408  	 var_meta_data_name := UPPER(in_meta_data_name);
10:40:46 1409  
10:40:46 1410  	 OPEN out_result_set FOR
10:40:46 1411  	 SELECT
10:40:46 1412  	   OFFER_CHAIN_META_DATA.ID,
10:40:46 1413  	   OFFER_CHAIN_META_DATA.NAME,
10:40:46 1414  	   OFFER_CHAIN_META_DATA.VALUE,
10:40:46 1415  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
10:40:46 1416  	   OFFER_CHAIN_META_DATA.CREATED_BY,
10:40:46 1417  	   OFFER_CHAIN_META_DATA.CREATE_DATE
10:40:46 1418  	 FROM
10:40:46 1419  	   OFFER_CHAIN_META_DATA
10:40:46 1420  	 WHERE
10:40:46 1421  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1422  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
10:40:46 1423  
10:40:46 1424  EXCEPTION
10:40:46 1425  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 1426  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1427  	   SPROC_NAME, 'No such offer chain');
10:40:46 1428  WHEN OTHERS THEN
10:40:46 1429  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1430  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1431  END GET_OFFER_CHAIN_META_DATA;
10:40:46 1432  
10:40:46 1433  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:40:46 1434  	 in_offer_id	IN NUMBER,
10:40:46 1435  	 out_result_set OUT SYS_REFCURSOR
10:40:46 1436  ) AS
10:40:46 1437  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
10:40:46 1438  -- VARIABLES
10:40:46 1439  temp_offer_id NUMBER;
10:40:46 1440  -- EXCEPTIONS
10:40:46 1441  BAD_OFFER_ID EXCEPTION;
10:40:46 1442  BEGIN
10:40:46 1443  
10:40:46 1444  	 BEGIN
10:40:46 1445  	   SELECT
10:40:46 1446  	     OFFER.ID into temp_offer_id
10:40:46 1447  	   FROM
10:40:46 1448  	     OFFER
10:40:46 1449  	   WHERE
10:40:46 1450  	     OFFER.ID = in_offer_id;
10:40:46 1451  	   EXCEPTION
10:40:46 1452  	     WHEN NO_DATA_FOUND THEN
10:40:46 1453  	       RAISE BAD_OFFER_ID;
10:40:46 1454  	 END;
10:40:46 1455  
10:40:46 1456  	 OPEN out_result_set FOR
10:40:46 1457  	 SELECT DISTINCT
10:40:46 1458  	   PRODUCT_OFFERING.ID,
10:40:46 1459  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:46 1460  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:46 1461  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:46 1462  	   PRODUCT_OFFERING.QUANTITY,
10:40:46 1463  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:46 1464  	   PRODUCT_OFFERING.CREATED_BY,
10:40:46 1465  	   CAPABILITY.ID CAP_ID,
10:40:46 1466  	   CAPABILITY.CODE CAP_CODE,
10:40:46 1467  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:46 1468  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:46 1469  	 FROM
10:40:46 1470  	   OFFER_PRODUCT_OFFERING
10:40:46 1471  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:46 1472  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:46 1473  	 WHERE
10:40:46 1474  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:40:46 1475  
10:40:46 1476  EXCEPTION
10:40:46 1477  WHEN BAD_OFFER_ID THEN
10:40:46 1478  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1479  	   SPROC_NAME, 'No such offer');
10:40:46 1480  WHEN OTHERS THEN
10:40:46 1481  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1482  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
10:40:46 1484  
10:40:46 1485  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:46 1486  	 in_product_offering_id IN NUMBER,
10:40:46 1487  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
10:40:46 1488  	 out_result_set 	OUT SYS_REFCURSOR
10:40:46 1489  ) AS
10:40:46 1490  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
10:40:46 1491  -- VARIABLES
10:40:46 1492  temp_product_offering_id NUMBER;
10:40:46 1493  -- EXCEPTIONS
10:40:46 1494  BAD_PRODUCT_OFFERING_ID EXCEPTION;
10:40:46 1495  BEGIN
10:40:46 1496  
10:40:46 1497  	 BEGIN
10:40:46 1498  	   SELECT
10:40:46 1499  	     PRODUCT_OFFERING.ID into temp_product_offering_id
10:40:46 1500  	   FROM
10:40:46 1501  	     PRODUCT_OFFERING
10:40:46 1502  	   WHERE
10:40:46 1503  	     PRODUCT_OFFERING.ID = in_product_offering_id;
10:40:46 1504  	   EXCEPTION
10:40:46 1505  	     WHEN NO_DATA_FOUND THEN
10:40:46 1506  	       RAISE BAD_PRODUCT_OFFERING_ID;
10:40:46 1507  	 END;
10:40:46 1508  
10:40:46 1509  	 OPEN out_result_set FOR
10:40:46 1510  	 SELECT
10:40:46 1511  	   PRODUCT_OFFERING_META_DATA.ID,
10:40:46 1512  	   PRODUCT_OFFERING_META_DATA.NAME,
10:40:46 1513  	   PRODUCT_OFFERING_META_DATA.VALUE,
10:40:46 1514  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
10:40:46 1515  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
10:40:46 1516  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
10:40:46 1517  	 FROM
10:40:46 1518  	   PRODUCT_OFFERING_META_DATA
10:40:46 1519  	 WHERE
10:40:46 1520  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
10:40:46 1521  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
10:40:46 1522  
10:40:46 1523  EXCEPTION
10:40:46 1524  WHEN BAD_PRODUCT_OFFERING_ID THEN
10:40:46 1525  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1526  	   SPROC_NAME, 'No such product offering');
10:40:46 1527  END GET_PRODUCT_OFFERING_META_DATA;
10:40:46 1528  
10:40:46 1529  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
10:40:46 1530  	 in_offer_chain_1 IN NUMBER,
10:40:46 1531  	 in_offer_chain_2 IN NUMBER,
10:40:46 1532  	 out_result_set   OUT SYS_REFCURSOR
10:40:46 1533  ) AS
10:40:46 1534  BEGIN
10:40:46 1535  
10:40:46 1536  	 OPEN out_result_set FOR
10:40:46 1537  	 SELECT
10:40:46 1538  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
10:40:46 1539  	   COUNT_1 + COUNT_2	    AS "COUNT"
10:40:46 1540  	 FROM
10:40:46 1541  	   (
10:40:46 1542  	     SELECT
10:40:46 1543  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
10:40:46 1544  	       COUNT(*) 		   as "COUNT_1"
10:40:46 1545  	     FROM
10:40:46 1546  	       (
10:40:46 1547  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
10:40:46 1548  	       )
10:40:46 1549  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:40:46 1550  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46 1551  	     GROUP BY
10:40:46 1552  	       PRODUCT_OFFERING.PRODUCT_ID
10:40:46 1553  	   )
10:40:46 1554  	   INNER JOIN
10:40:46 1555  	   (
10:40:46 1556  	     SELECT
10:40:46 1557  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
10:40:46 1558  	       COUNT(*) 		   as "COUNT_2"
10:40:46 1559  	     FROM
10:40:46 1560  	       (
10:40:46 1561  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
10:40:46 1562  	       )
10:40:46 1563  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
10:40:46 1564  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:46 1565  	     GROUP BY
10:40:46 1566  	       PRODUCT_OFFERING.PRODUCT_ID
10:40:46 1567  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
10:40:46 1568  
10:40:46 1569  END GET_OFF_CHAINS_SAME_PRODUCTS;
10:40:46 1570  
10:40:46 1571  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:40:46 1572  	 in_offer_chain_id IN NUMBER,
10:40:46 1573  	 in_meta_data_name IN VARCHAR2,
10:40:46 1574  	 out_value	   OUT VARCHAR2
10:40:46 1575  ) AS
10:40:46 1576  BEGIN
10:40:46 1577  	 BEGIN
10:40:46 1578  	   SELECT
10:40:46 1579  	     OFFER_CHAIN_META_DATA.VALUE into out_value
10:40:46 1580  	   FROM
10:40:46 1581  	     OFFER_CHAIN_META_DATA
10:40:46 1582  	   WHERE
10:40:46 1583  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1584  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
10:40:46 1585  
10:40:46 1586  	   EXCEPTION
10:40:46 1587  	     WHEN NO_DATA_FOUND THEN
10:40:46 1588  	       out_value := NULL;
10:40:46 1589  	 END;
10:40:46 1590  END GET_OFFER_CHAIN_MD_VALUE;
10:40:46 1591  
10:40:46 1592  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
10:40:46 1593  	 in_offer_chain_id   IN NUMBER,
10:40:46 1594  	 in_eligibility_name IN VARCHAR2,
10:40:46 1595  	 out_value	     OUT VARCHAR2
10:40:46 1596  ) AS
10:40:46 1597  BEGIN
10:40:46 1598  	 BEGIN
10:40:46 1599  	   SELECT
10:40:46 1600  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
10:40:46 1601  	   FROM
10:40:46 1602  	     OFFER_CHAIN_ELIGIBILITY
10:40:46 1603  	   WHERE
10:40:46 1604  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1605  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
10:40:46 1606  
10:40:46 1607  	   EXCEPTION
10:40:46 1608  	     WHEN NO_DATA_FOUND THEN
10:40:46 1609  	       out_value := NULL;
10:40:46 1610  	 END;
10:40:46 1611  END GET_OFFER_CHAIN_EL_VALUE;
10:40:46 1612  
10:40:46 1613  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
10:40:46 1614  	 in_offer_id	IN NUMBER,
10:40:46 1615  	 out_result_set OUT SYS_REFCURSOR
10:40:46 1616  ) AS
10:40:46 1617  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
10:40:46 1618  -- VARIABLES
10:40:46 1619  temp_offer_id NUMBER;
10:40:46 1620  -- EXCEPTIONS
10:40:46 1621  BAD_OFFER_ID EXCEPTION;
10:40:46 1622  BEGIN
10:40:46 1623  
10:40:46 1624  	 BEGIN
10:40:46 1625  	   SELECT
10:40:46 1626  	     OFFER.ID into temp_offer_id
10:40:46 1627  	   FROM
10:40:46 1628  	     OFFER
10:40:46 1629  	   WHERE
10:40:46 1630  	     OFFER.ID = in_offer_id;
10:40:46 1631  	   EXCEPTION
10:40:46 1632  	     WHEN NO_DATA_FOUND THEN
10:40:46 1633  	       RAISE BAD_OFFER_ID;
10:40:46 1634  	 END;
10:40:46 1635  
10:40:46 1636  	 OPEN out_result_set FOR
10:40:46 1637  	 SELECT
10:40:46 1638  	   PRODUCT_OFFERING.ID,
10:40:46 1639  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:46 1640  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:46 1641  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:46 1642  	   PRODUCT_OFFERING.QUANTITY,
10:40:46 1643  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:46 1644  	   PRODUCT_OFFERING.CREATED_BY,
10:40:46 1645  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
10:40:46 1646  	 FROM
10:40:46 1647  	   PRODUCT_OFFERING
10:40:46 1648  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:46 1649  	 WHERE
10:40:46 1650  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
10:40:46 1651  
10:40:46 1652  EXCEPTION
10:40:46 1653  WHEN BAD_OFFER_ID THEN
10:40:46 1654  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1655  	   SPROC_NAME, 'No such offer');
10:40:46 1656  WHEN OTHERS THEN
10:40:46 1657  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1658  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1659  END GET_OFFER_PRODUCT_OFFERINGS;
10:40:46 1660  
10:40:46 1661  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
10:40:46 1662  	 in_meta_data_name  IN VARCHAR2,
10:40:46 1663  	 in_meta_data_value IN VARCHAR2,
10:40:46 1664  	 out_result_set     OUT SYS_REFCURSOR
10:40:46 1665  ) AS
10:40:46 1666  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
10:40:46 1667  -- VARIABLES
10:40:46 1668  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
10:40:46 1669  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
10:40:46 1670  BEGIN
10:40:46 1671  
10:40:46 1672  	 OPEN out_result_set FOR
10:40:46 1673  	 SELECT
10:40:46 1674  	   och.ID,
10:40:46 1675  	   och.NAME,
10:40:46 1676  	   och.DESCRIPTION,
10:40:46 1677  	   och.OFFER_CHAIN_STATUS_ID,
10:40:46 1678  	   PROCS_OFFER_CHAIN_V22.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
10:40:46 1679  	   och.ADOPTABILITY_WINDOW_START_DATE,
10:40:46 1680  	   och.ADOPTABILITY_WINDOW_END_DATE,
10:40:46 1681  	   PROCS_OFFER_CHAIN_V22.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
10:40:46 1682  	   och.IS_GIFT_CERTIFICATE,
10:40:46 1683  	   'false' as comf_offer_chain, -- TODO
10:40:46 1684  	   po.PRODUCT_ID,
10:40:46 1685  	   och.GROUP_ACCOUNT_TYPE_ID
10:40:46 1686  	 FROM
10:40:46 1687  	   OFFER_CHAIN och,
10:40:46 1688  	   OFFER_OFFER_CHAIN ooch,
10:40:46 1689  	   OFFER_PRODUCT_OFFERING opo,
10:40:46 1690  	   PRODUCT_OFFERING po
10:40:46 1691  	 WHERE
10:40:46 1692  	   och.ID = ooch.OFFER_CHAIN_ID
10:40:46 1693  	   and ooch.OFFER_ID = opo.OFFER_ID
10:40:46 1694  	   and opo.PRODUCT_OFFERING_ID = po.ID
10:40:46 1695  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V22.OFFER_CHAIN_ACTIVE
10:40:46 1696  	   and och.id in (
10:40:46 1697  	     SELECT DISTINCT
10:40:46 1698  	       och2.id
10:40:46 1699  	     from
10:40:46 1700  	       offer_chain och2
10:40:46 1701  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
10:40:46 1702  	     where
10:40:46 1703  	       UPPER(ochmd.name) = v_meta_data_name
10:40:46 1704  	       AND UPPER(ochmd.value) = v_meta_data_value
10:40:46 1705  	   );
10:40:46 1706  
10:40:46 1707  EXCEPTION
10:40:46 1708  WHEN OTHERS THEN
10:40:46 1709  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1710  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1711  END GET_OFFER_CHAINS_BY_META_DATA;
10:40:46 1712  
10:40:46 1713  PROCEDURE GET_ALL_META_DATA (
10:40:46 1714  	 in_offer_chain_id IN NUMBER,
10:40:46 1715  	 out_result_set    OUT SYS_REFCURSOR
10:40:46 1716  ) AS
10:40:46 1717  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
10:40:46 1718  -- Variables
10:40:46 1719  temp_offer_chain_id NUMBER;
10:40:46 1720  -- Exceptions
10:40:46 1721  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:46 1722  BEGIN
10:40:46 1723  
10:40:46 1724  	 BEGIN
10:40:46 1725  	   SELECT
10:40:46 1726  	     OCH.ID into temp_offer_chain_id
10:40:46 1727  	   FROM
10:40:46 1728  	     OFFER_CHAIN OCH
10:40:46 1729  	   WHERE
10:40:46 1730  	     OCH.ID = in_offer_chain_id;
10:40:46 1731  	   EXCEPTION
10:40:46 1732  	     WHEN NO_DATA_FOUND THEN
10:40:46 1733  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:46 1734  	 END;
10:40:46 1735  
10:40:46 1736  	 OPEN out_result_set FOR
10:40:46 1737  	 SELECT
10:40:46 1738  	   OCHMD.ID,
10:40:46 1739  	   OCHMD.OFFER_CHAIN_ID,
10:40:46 1740  	   OCHMD.NAME,
10:40:46 1741  	   OCHMD.VALUE,
10:40:46 1742  	   OCHMD.CREATE_DATE,
10:40:46 1743  	   OCHMD.CREATED_BY
10:40:46 1744  	 FROM
10:40:46 1745  	   OFFER_CHAIN_META_DATA OCHMD
10:40:46 1746  	 WHERE
10:40:46 1747  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
10:40:46 1748  
10:40:46 1749  EXCEPTION
10:40:46 1750  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:46 1751  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1752  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:40:46 1753  WHEN OTHERS THEN
10:40:46 1754  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1755  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1756  END GET_ALL_META_DATA;
10:40:46 1757  
10:40:46 1758  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
10:40:46 1759  	 in_group_id	   IN NUMBER,
10:40:46 1760  	 in_offer_chain_id IN NUMBER,
10:40:46 1761  	 out_is_eligible   OUT NUMBER,
10:40:46 1762  	 out_concurrent_subscription_id OUT NUMBER
10:40:46 1763  ) AS
10:40:46 1764  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
10:40:46 1765  -- Variables
10:40:46 1766  var_account_id  NUMBER;
10:40:46 1767  var_is_eligible NUMBER;
10:40:46 1768  var_is_gc       NUMBER;
10:40:46 1769  -- Exceptions
10:40:46 1770  BAD_GROUP_ID		   EXCEPTION;
10:40:46 1771  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
10:40:46 1772  BAD_OC_ID		   EXCEPTION;
10:40:46 1773  EXCEPTION_MESSAGE	   VARCHAR(1024);
10:40:46 1774  BEGIN
10:40:46 1775  
10:40:46 1776  	 var_is_eligible := GLOBAL_CONSTANTS_V22.TRUE;
10:40:46 1777  
10:40:46 1778  	 out_concurrent_subscription_id := NULL;
10:40:46 1779  
10:40:46 1780  	 BEGIN
10:40:46 1781  	   SELECT
10:40:46 1782  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
10:40:46 1783  	   FROM
10:40:46 1784  	     OFFER_CHAIN OC
10:40:46 1785  	   WHERE
10:40:46 1786  	     OC.ID = in_offer_chain_id;
10:40:46 1787  	   EXCEPTION
10:40:46 1788  	     WHEN NO_DATA_FOUND THEN
10:40:46 1789  	       RAISE BAD_OC_ID;
10:40:46 1790  	 END;
10:40:46 1791  
10:40:46 1792  	 -- only check eligibility if this is not a gift certificate
10:40:46 1793  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
10:40:46 1794  	   BEGIN
10:40:46 1795  	     SELECT
10:40:46 1796  	       A.ID into var_account_id
10:40:46 1797  	     FROM
10:40:46 1798  	       ACCOUNT A
10:40:46 1799  	     WHERE
10:40:46 1800  	       A.GROUP_ID = in_group_id;
10:40:46 1801  	     EXCEPTION
10:40:46 1802  	       WHEN NO_DATA_FOUND THEN
10:40:46 1803  		 RAISE BAD_GROUP_ID;
10:40:46 1804  	   END;
10:40:46 1805  
10:40:46 1806  
10:40:46 1807  	   FOR f_offer_chain IN (
10:40:46 1808  	       SELECT
10:40:46 1809  		 S.ID as SUBSCRIPTION_ID,
10:40:46 1810  		 S.OFFER_CHAIN_ID
10:40:46 1811  	       FROM
10:40:46 1812  		 SUBSCRIPTION S
10:40:46 1813  	       WHERE
10:40:46 1814  		 S.ACCOUNT_ID = var_account_id
10:40:46 1815  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:46 1816  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:46 1817  	   )
10:40:46 1818  	   LOOP
10:40:46 1819  	     BEGIN
10:40:46 1820  	       IF (
10:40:46 1821  		 PROCS_OFFER_CHAIN_V22.CHECK_FOR_SAME_PRODUCTS(
10:40:46 1822  		   in_offer_chain_id,
10:40:46 1823  		   f_offer_chain.offer_chain_id,
10:40:46 1824  		   GLOBAL_CONSTANTS_V22.TRUE
10:40:46 1825  		 ) = GLOBAL_CONSTANTS_V22.TRUE
10:40:46 1826  	       ) THEN
10:40:46 1827  		 var_is_eligible := GLOBAL_CONSTANTS_V22.FALSE;
10:40:46 1828  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
10:40:46 1829  	       END IF;
10:40:46 1830  	       EXCEPTION
10:40:46 1831  		 WHEN OTHERS THEN
10:40:46 1832  		   EXCEPTION_MESSAGE := SQLERRM;
10:40:46 1833  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
10:40:46 1834  	     END;
10:40:46 1835  	   END LOOP;
10:40:46 1836  	 END IF;
10:40:46 1837  	 out_is_eligible := var_is_eligible;
10:40:46 1838  
10:40:46 1839  EXCEPTION
10:40:46 1840  WHEN BAD_GROUP_ID THEN
10:40:46 1841  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1842  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:40:46 1843  WHEN BAD_OC_ID THEN
10:40:46 1844  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:46 1845  	   SPROC_NAME, 'No such offer chain', SQLERRM);
10:40:46 1846  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
10:40:46 1847  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 1848  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
10:40:46 1849  WHEN OTHERS THEN
10:40:46 1850  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1851  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1852  END CHECK_PRODUCT_ELIGIBILITY;
10:40:46 1853  
10:40:46 1854  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:46 1855  	 in_offer_chain_id	  IN NUMBER,
10:40:46 1856  	 in_action_name 	  IN VARCHAR2,
10:40:46 1857  	 out_notification_type_id OUT NUMBER
10:40:46 1858  ) AS
10:40:46 1859  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
10:40:46 1860  -- Variables
10:40:46 1861  var_action_id NUMBER;
10:40:46 1862  -- Exceptions
10:40:46 1863  BAD_ACTION_NAME	      EXCEPTION;
10:40:46 1864  MULTIPLY_ACTIONS_FOUND EXCEPTION;
10:40:46 1865  BEGIN
10:40:46 1866  
10:40:46 1867  	 BEGIN
10:40:46 1868  	   SELECT
10:40:46 1869  	     A.ID into var_action_id
10:40:46 1870  	   FROM
10:40:46 1871  	     ACTION A
10:40:46 1872  	   WHERE
10:40:46 1873  	     UPPER(A.NAME) = UPPER(in_action_name);
10:40:46 1874  	   EXCEPTION
10:40:46 1875  	     WHEN NO_DATA_FOUND THEN
10:40:46 1876  	       RAISE BAD_ACTION_NAME;
10:40:46 1877  	     WHEN TOO_MANY_ROWS THEN
10:40:46 1878  	       RAISE MULTIPLY_ACTIONS_FOUND;
10:40:46 1879  	 END;
10:40:46 1880  
10:40:46 1881  	 SELECT
10:40:46 1882  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
10:40:46 1883  	 FROM
10:40:46 1884  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
10:40:46 1885  	 WHERE
10:40:46 1886  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
10:40:46 1887  	   AND OCNT.ACTION_ID = var_action_id;
10:40:46 1888  
10:40:46 1889  EXCEPTION
10:40:46 1890  WHEN NO_DATA_FOUND THEN
10:40:46 1891  	 out_notification_type_id := NULL;
10:40:46 1892  WHEN BAD_ACTION_NAME THEN
10:40:46 1893  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:46 1894  	   SPROC_NAME, 'Bad action name', SQLERRM);
10:40:46 1895  WHEN MULTIPLY_ACTIONS_FOUND THEN
10:40:46 1896  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:46 1897  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
10:40:46 1898  WHEN OTHERS THEN
10:40:46 1899  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:46 1900  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:46 1901  END GET_NOTIFICATION_TYPE_ID;
10:40:46 1902  
10:40:46 1903  END PROCS_OFFER_CHAIN_V22;
10:40:46 1904  .
10:40:46 SQL> /

Package body created.

Elapsed: 00:00:00.08
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
10:40:47   2  AS
10:40:47   3  	  --------------------------------------------------------------------------------
10:40:47   4  PROCEDURE GATHER_SYNC_EVENTS
10:40:47   5  	  (
10:40:47   6  	      in_last_timestamp TIMESTAMP,
10:40:47   7  	      out_new_timestamp OUT TIMESTAMP)
10:40:47   8  IS
10:40:47   9  BEGIN
10:40:47  10  	  out_new_timestamp := systimestamp;
10:40:47  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
10:40:47  12  END;
10:40:47  13  	  --------------------------------------------------------------------------------
10:40:47  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
10:40:47  15  IS
10:40:47  16  BEGIN
10:40:47  17  	  INSERT
10:40:47  18  	  INTO
10:40:47  19  	      core_owner.polling_sync
10:40:47  20  	      (
10:40:47  21  		  account_id,
10:40:47  22  		  group_id,
10:40:47  23  		  event_type,
10:40:47  24  		  event_date
10:40:47  25  	      )
10:40:47  26  	  select id, group_id, event_type, event_date from (
10:40:47  27  	      SELECT
10:40:47  28  		  a.id,
10:40:47  29  		  a.group_id,
10:40:47  30  		  'I' event_type,
10:40:47  31  		  in_end_ts event_date,
10:40:47  32  		  max(cl.change_time) last_change_time
10:40:47  33  	      FROM
10:40:47  34  		  core_hist_owner.change_log cl,
10:40:47  35  		  core_owner.credit_card cc,
10:40:47  36  		  core_owner.account a
10:40:47  37  	      WHERE
10:40:47  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:40:47  39  	      AND cl.item = 'CREDIT_CARD'
10:40:47  40  	      AND cl.id = cc.id
10:40:47  41  	      AND cc.account_id = a.id
10:40:47  42  	      GROUP BY a.id, a.group_id
10:40:47  43  	      UNION ALL
10:40:47  44  	      SELECT
10:40:47  45  		  a.id,
10:40:47  46  		  a.group_id,
10:40:47  47  		  'I',
10:40:47  48  		  in_end_ts,
10:40:47  49  		  max(cl.change_time) last_change_time
10:40:47  50  	      FROM
10:40:47  51  		  core_hist_owner.change_log cl,
10:40:47  52  		  core_owner.paypal p,
10:40:47  53  		  core_owner.account a
10:40:47  54  	      WHERE
10:40:47  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:40:47  56  	      AND cl.item = 'PAYPAL'
10:40:47  57  	      AND cl.id = p.id
10:40:47  58  	      AND p.account_id = a.id
10:40:47  59  	      GROUP BY a.id, a.group_id
10:40:47  60  	      UNION ALL
10:40:47  61  	      SELECT
10:40:47  62  		  a.id,
10:40:47  63  		  a.group_id,
10:40:47  64  		  'S',
10:40:47  65  		  in_end_ts,
10:40:47  66  		  max(cl.change_time) last_change_time
10:40:47  67  	      FROM
10:40:47  68  		  core_hist_owner.change_log cl,
10:40:47  69  		  core_owner.subscription s,
10:40:47  70  		  core_owner.account a
10:40:47  71  	      WHERE
10:40:47  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:40:47  73  	      AND cl.item = 'SUBSCRIPTION'
10:40:47  74  	      AND cl.id = s.id
10:40:47  75  	      AND s.account_id = a.id
10:40:47  76  	      GROUP BY a.id, a.group_id
10:40:47  77  	      UNION ALL
10:40:47  78  	      SELECT
10:40:47  79  		  a.id,
10:40:47  80  		  a.group_id,
10:40:47  81  		  'G',
10:40:47  82  		  in_end_ts,
10:40:47  83  		  max(cl.change_time) last_change_time
10:40:47  84  	      FROM
10:40:47  85  		  core_hist_owner.change_log cl,
10:40:47  86  		  core_owner.gift_certificate gc,
10:40:47  87  		  core_owner.account a
10:40:47  88  	      WHERE
10:40:47  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
10:40:47  90  	      AND cl.item = 'GIFT_CERTIFICATE'
10:40:47  91  	      AND cl.id = gc.id
10:40:47  92  	      AND gc.purchaser_group_id = a.group_id
10:40:47  93  	      GROUP BY a.id, a.group_id
10:40:47  94  	  ) t
10:40:47  95  	  where not exists (
10:40:47  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
10:40:47  97  	      from polling_sync ps
10:40:47  98  	      where ps.account_id = t.id
10:40:47  99  		and ps.group_id = t.group_id
10:40:47 100  		and ps.event_type = t.event_type
10:40:47 101  		and ps.event_date >= t.last_change_time
10:40:47 102  	  )
10:40:47 103  	  ;
10:40:47 104  END;
10:40:47 105  --------------------------------------------------------------------------------
10:40:47 106  FUNCTION CREATE_NEW_TRANSFER_SET
10:40:47 107  	  (
10:40:47 108  	      in_set_maximum NUMBER)
10:40:47 109  	  RETURN core_owner.polling_sync.set_id%type
10:40:47 110  IS
10:40:47 111  	  pragma autonomous_transaction;
10:40:47 112  	  v_set_id core_owner.polling_sync.set_id%type;
10:40:47 113  BEGIN
10:40:47 114  	  SELECT
10:40:47 115  	      pollsync_setid_seq.nextval
10:40:47 116  	  INTO
10:40:47 117  	      v_set_id
10:40:47 118  	  FROM
10:40:47 119  	      dual;
10:40:47 120  	  update
10:40:47 121  	    core_owner.polling_sync ps
10:40:47 122  	  set
10:40:47 123  	    ps.set_id = v_set_id
10:40:47 124  	  where
10:40:47 125  	    ps.set_id IS NULL and
10:40:47 126  	    rownum <= in_set_maximum
10:40:47 127  	  ;
10:40:47 128  	  COMMIT;
10:40:47 129  	  RETURN v_set_id;
10:40:47 130  END;
10:40:47 131  --------------------------------------------------------------------------------
10:40:47 132  FUNCTION RETREIVE_TRANSFER_SET
10:40:47 133  	  (
10:40:47 134  	      in_set_id core_owner.polling_sync.set_id%type)
10:40:47 135  	  RETURN sys_refcursor
10:40:47 136  IS
10:40:47 137  	  v_refcursor sys_refcursor;
10:40:47 138  BEGIN
10:40:47 139  	  UPDATE
10:40:47 140  	      core_owner.polling_sync ps
10:40:47 141  	  SET
10:40:47 142  	      ps.last_send_date = sysdate,
10:40:47 143  	      ps.num_calls = ps.num_calls + 1
10:40:47 144  	  WHERE
10:40:47 145  	      ps.set_id = in_set_id ;
10:40:47 146  	  OPEN v_refcursor FOR
10:40:47 147  	  SELECT
10:40:47 148  	      ps.set_id,
10:40:47 149  	      ps.group_id,
10:40:47 150  	      ps.event_type,
10:40:47 151  	      ps.event_date
10:40:47 152  	  FROM
10:40:47 153  	      core_owner.polling_sync ps
10:40:47 154  	  WHERE
10:40:47 155  	      ps.set_id = in_set_id
10:40:47 156  	  AND ps.group_id IS NOT NULL ;
10:40:47 157  	  RETURN v_refcursor;
10:40:47 158  END;
10:40:47 159  --------------------------------------------------------------------------------
10:40:47 160  PROCEDURE GET_TRANSFER_SET
10:40:47 161  	  (
10:40:47 162  	      in_set_maximum NUMBER,
10:40:47 163  	      in_max_retries NUMBER,
10:40:47 164  	      out_refcursor OUT sys_refcursor)
10:40:47 165  IS
10:40:47 166  	  v_set_id core_owner.polling_sync.set_id%type;
10:40:47 167  BEGIN
10:40:47 168  	  /* Look for previously sent but unconfirmed sets and
10:40:47 169  	  send again until max_retries calls */
10:40:47 170  	  FOR x IN
10:40:47 171  	  (
10:40:47 172  	      SELECT
10:40:47 173  		  ps.set_id,
10:40:47 174  		  COUNT( *) set_size
10:40:47 175  	      FROM
10:40:47 176  		  core_owner.polling_sync ps
10:40:47 177  	      WHERE
10:40:47 178  		  ps.event_date > sysdate - 14
10:40:47 179  	      AND ps.confirm_date IS NULL
10:40:47 180  	      AND ps.last_send_date IS NOT NULL
10:40:47 181  	      AND ps.num_calls < in_max_retries
10:40:47 182  	      GROUP BY
10:40:47 183  		  ps.set_id
10:40:47 184  	      ORDER BY
10:40:47 185  		  ps.set_id
10:40:47 186  	  )
10:40:47 187  	  LOOP
10:40:47 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
10:40:47 189  	      RETURN;
10:40:47 190  	  END LOOP;
10:40:47 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
10:40:47 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
10:40:47 193  	  RETURN;
10:40:47 194  END;
10:40:47 195  --------------------------------------------------------------------------------
10:40:47 196  PROCEDURE CONFIRM_TRANSFER_SET
10:40:47 197  	  (
10:40:47 198  	      in_set_id core_owner.polling_sync.set_id%type)
10:40:47 199  IS
10:40:47 200  	  v_unconfirmable EXCEPTION;
10:40:47 201  BEGIN
10:40:47 202  	  UPDATE
10:40:47 203  	      core_owner.polling_sync ps
10:40:47 204  	  SET
10:40:47 205  	      ps.confirm_date = systimestamp
10:40:47 206  	  WHERE
10:40:47 207  	      ps.set_id = in_set_id
10:40:47 208  	  AND ps.confirm_date IS NULL ;
10:40:47 209  	  IF(sql%rowcount < 1) THEN
10:40:47 210  	      raise v_unconfirmable;
10:40:47 211  	  END IF;
10:40:47 212  END;
10:40:47 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
10:40:47 214  IS
10:40:47 215  BEGIN
10:40:47 216  	  UPDATE POLLING_SYNC_LASTRUN
10:40:47 217  	  SET last_run = current_timestamp;
10:40:47 218  	  IF ( sql%rowcount = 0 )
10:40:47 219  	  THEN
10:40:47 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
10:40:47 221  	  END if;
10:40:47 222  	  COMMIT;
10:40:47 223  END;
10:40:47 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
10:40:47 225  IS
10:40:47 226  BEGIN
10:40:47 227  	  SELECT LAST_RUN INTO ts
10:40:47 228  	  FROM POLLING_SYNC_LASTRUN
10:40:47 229  	  WHERE ROWNUM < 2;
10:40:47 230  EXCEPTION
10:40:47 231  	WHEN NO_DATA_FOUND
10:40:47 232  	THEN
10:40:47 233  	  ts := current_timestamp;
10:40:47 234  END;
10:40:47 235  END PROCS_POLLING_SYNC;
10:40:47 236  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.06
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE GET_PRODUCTS (
10:40:47   4  /*
10:40:47   5  Throws exceptions:
10:40:47   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47   7  */
10:40:47   8  	in_status_id   IN  NUMBER,
10:40:47   9  	out_result_set OUT SYS_REFCURSOR
10:40:47  10  ) AS
10:40:47  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
10:40:47  12  BEGIN
10:40:47  13  	OPEN out_result_set FOR
10:40:47  14  	SELECT
10:40:47  15  	  PRODUCT.ID,
10:40:47  16  	  PRODUCT.NAME,
10:40:47  17  	  PRODUCT.UNIT_PRICE,
10:40:47  18  	  PRODUCT.PRODUCTION_COST,
10:40:47  19  	  PRODUCT.CREATE_DATE,
10:40:47  20  	  PRODUCT.CREATED_BY,
10:40:47  21  	  PRODUCT.PRODUCT_STATUS_ID,
10:40:47  22  	  PRODUCT.PRODUCT_URI
10:40:47  23  	FROM
10:40:47  24  	  PRODUCT
10:40:47  25   WHERE
10:40:47  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
10:40:47  27  EXCEPTION
10:40:47  28  WHEN OTHERS THEN
10:40:47  29  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47  31  END GET_PRODUCTS;
10:40:47  32  
10:40:47  33  /******************************************************************************/
10:40:47  34  
10:40:47  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:47  36  	in_product_offering_id	IN NUMBER,
10:40:47  37  	out_result_set OUT SYS_REFCURSOR
10:40:47  38  ) AS
10:40:47  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
10:40:47  40  -- VARIABLES
10:40:47  41  temp_product_offering_id NUMBER;
10:40:47  42  -- EXCEPTIONS
10:40:47  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
10:40:47  44  BEGIN
10:40:47  45  
10:40:47  46  	-- Check that product offering exists
10:40:47  47  	BEGIN
10:40:47  48  	  SELECT
10:40:47  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
10:40:47  50  	  FROM
10:40:47  51  	    PRODUCT_OFFERING
10:40:47  52  	  WHERE
10:40:47  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
10:40:47  54  	  EXCEPTION
10:40:47  55  	    WHEN NO_DATA_FOUND THEN
10:40:47  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
10:40:47  57  	END;
10:40:47  58  
10:40:47  59  	OPEN out_result_set FOR
10:40:47  60  	SELECT
10:40:47  61  	  PRODUCT_OFFERING_META_DATA.ID,
10:40:47  62  	  PRODUCT_OFFERING_META_DATA.NAME,
10:40:47  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
10:40:47  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
10:40:47  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
10:40:47  66  	FROM
10:40:47  67  	  PRODUCT_OFFERING_META_DATA
10:40:47  68  	WHERE
10:40:47  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
10:40:47  70  
10:40:47  71  EXCEPTION
10:40:47  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
10:40:47  73  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47  74  	  SPROC_NAME, 'No such product offering id');
10:40:47  75  WHEN OTHERS THEN
10:40:47  76  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47  78  END GET_PRODUCT_OFFERING_META_DATA;
10:40:47  79  
10:40:47  80  /******************************************************************************/
10:40:47  81  
10:40:47  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
10:40:47  83  /*
10:40:47  84  Throws exceptions:
10:40:47  85  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47  86  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47  87  */
10:40:47  88  	in_product_id	    IN NUMBER,
10:40:47  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
10:40:47  90  	out_result_set	    OUT SYS_REFCURSOR
10:40:47  91  ) AS
10:40:47  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
10:40:47  93  -- VARIABLES
10:40:47  94  temp_product_id NUMBER;
10:40:47  95  -- EXCEPTIONS
10:40:47  96  BAD_PRODUCT_ID EXCEPTION;
10:40:47  97  BEGIN
10:40:47  98  
10:40:47  99  	BEGIN
10:40:47 100  	  SELECT
10:40:47 101  	    PRODUCT.ID into temp_product_id
10:40:47 102  	  FROM
10:40:47 103  	    PRODUCT
10:40:47 104  	  WHERE
10:40:47 105  	    PRODUCT.ID = in_product_id;
10:40:47 106  	  EXCEPTION
10:40:47 107  	    WHEN NO_DATA_FOUND THEN
10:40:47 108  	      RAISE BAD_PRODUCT_ID;
10:40:47 109  	END;
10:40:47 110  
10:40:47 111  	OPEN out_result_set FOR
10:40:47 112  	SELECT
10:40:47 113  	  PRODUCT_ELIGIBILITY.ID
10:40:47 114  	FROM
10:40:47 115  	  PRODUCT_ELIGIBILITY
10:40:47 116  	WHERE
10:40:47 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
10:40:47 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
10:40:47 119  
10:40:47 120  EXCEPTION
10:40:47 121  WHEN BAD_PRODUCT_ID THEN
10:40:47 122  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 123  	  SPROC_NAME, 'No such product');
10:40:47 124  WHEN OTHERS THEN
10:40:47 125  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
10:40:47 128  
10:40:47 129  /******************************************************************************/
10:40:47 130  
10:40:47 131  PROCEDURE GET_PRODUCT_BY_ID (
10:40:47 132  	in_product_id  IN NUMBER,
10:40:47 133  	out_result_set OUT SYS_REFCURSOR
10:40:47 134  ) AS
10:40:47 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
10:40:47 136  -- VARIABLES
10:40:47 137  temp_product_id NUMBER;
10:40:47 138  -- EXCEPTIONS
10:40:47 139  BAD_PRODUCT_ID EXCEPTION;
10:40:47 140  BEGIN
10:40:47 141  
10:40:47 142  	BEGIN
10:40:47 143  	  SELECT
10:40:47 144  	    PRODUCT.ID into temp_product_id
10:40:47 145  	  FROM
10:40:47 146  	    PRODUCT
10:40:47 147  	  WHERE
10:40:47 148  	    PRODUCT.ID = in_product_id;
10:40:47 149  	  EXCEPTION
10:40:47 150  	    WHEN NO_DATA_FOUND THEN
10:40:47 151  	      RAISE BAD_PRODUCT_ID;
10:40:47 152  	END;
10:40:47 153  
10:40:47 154  	OPEN out_result_set FOR
10:40:47 155  	SELECT
10:40:47 156  	  PRODUCT.ID,
10:40:47 157  	  PRODUCT.NAME,
10:40:47 158  	  PRODUCT.PRODUCT_STATUS_ID,
10:40:47 159  	  PRODUCT.PRODUCT_URI,
10:40:47 160  	  PRODUCT.PRODUCTION_COST,
10:40:47 161  	  PRODUCT.UNIT_PRICE,
10:40:47 162  	  PRODUCT.CREATE_DATE,
10:40:47 163  	  PRODUCT.CREATED_BY
10:40:47 164  	FROM
10:40:47 165  	  PRODUCT
10:40:47 166  	WHERE
10:40:47 167  	  PRODUCT.ID = in_product_id;
10:40:47 168  
10:40:47 169  EXCEPTION
10:40:47 170  WHEN BAD_PRODUCT_ID THEN
10:40:47 171  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 172  	  SPROC_NAME, 'No such product');
10:40:47 173  WHEN OTHERS THEN
10:40:47 174  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 176  END GET_PRODUCT_BY_ID;
10:40:47 177  
10:40:47 178  /******************************************************************************/
10:40:47 179  
10:40:47 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:40:47 181  	in_line_item_id IN NUMBER,
10:40:47 182  	out_result_set	OUT SYS_REFCURSOR
10:40:47 183  ) AS
10:40:47 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
10:40:47 185  -- VARIABLES
10:40:47 186  temp_line_item_id NUMBER;
10:40:47 187  -- EXCEPTIONS
10:40:47 188  BAD_LINE_ITEM_ID EXCEPTION;
10:40:47 189  BEGIN
10:40:47 190  
10:40:47 191  	BEGIN
10:40:47 192  	  SELECT
10:40:47 193  	    LINE_ITEM.ID into temp_line_item_id
10:40:47 194  	  FROM
10:40:47 195  	    LINE_ITEM
10:40:47 196  	  WHERE
10:40:47 197  	    LINE_ITEM.ID = in_line_item_id;
10:40:47 198  	  EXCEPTION
10:40:47 199  	    WHEN NO_DATA_FOUND THEN
10:40:47 200  	      RAISE BAD_LINE_ITEM_ID;
10:40:47 201  	END;
10:40:47 202  
10:40:47 203  	OPEN out_result_set FOR
10:40:47 204  	SELECT
10:40:47 205  	  PRODUCT_OFFERING.ID,
10:40:47 206  	  PRODUCT_OFFERING.PRODUCT_ID,
10:40:47 207  	  PRODUCT_OFFERING.QUANTITY,
10:40:47 208  	  PRODUCT_OFFERING.UNIT_PRICE,
10:40:47 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:47 210  	  PRODUCT_OFFERING.CREATE_DATE,
10:40:47 211  	  PRODUCT_OFFERING.CREATED_BY,
10:40:47 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
10:40:47 213  	  CAPABILITY.ID CAP_ID,
10:40:47 214  	  CAPABILITY.CODE CAP_CODE,
10:40:47 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:47 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:47 217  	FROM
10:40:47 218  	  PRODUCT_OFFERING
10:40:47 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
10:40:47 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:47 221  	WHERE
10:40:47 222  	  LINE_ITEM.ID = in_line_item_id;
10:40:47 223  
10:40:47 224  EXCEPTION
10:40:47 225  WHEN BAD_LINE_ITEM_ID THEN
10:40:47 226  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 227  	  SPROC_NAME, 'No such line item');
10:40:47 228  WHEN OTHERS THEN
10:40:47 229  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
10:40:47 232  
10:40:47 233  /******************************************************************************/
10:40:47 234  
10:40:47 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
10:40:47 236  	in_product_offering_id IN NUMBER,
10:40:47 237  	out_result_set	OUT SYS_REFCURSOR
10:40:47 238  ) AS
10:40:47 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
10:40:47 240  BEGIN
10:40:47 241  	OPEN out_result_set FOR
10:40:47 242  	SELECT
10:40:47 243  	  PRODUCT_OFFERING.ID,
10:40:47 244  	  PRODUCT_OFFERING.PRODUCT_ID,
10:40:47 245  	  PRODUCT_OFFERING.QUANTITY,
10:40:47 246  	  PRODUCT_OFFERING.UNIT_PRICE,
10:40:47 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:47 248  	  PRODUCT_OFFERING.CREATE_DATE,
10:40:47 249  	  PRODUCT_OFFERING.CREATED_BY,
10:40:47 250  	  CAPABILITY.ID CAP_ID,
10:40:47 251  	  CAPABILITY.CODE CAP_CODE,
10:40:47 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:47 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:47 254  	FROM
10:40:47 255  	  PRODUCT_OFFERING
10:40:47 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:47 257  	WHERE
10:40:47 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
10:40:47 259  
10:40:47 260  EXCEPTION
10:40:47 261  WHEN OTHERS THEN
10:40:47 262  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 264  END GET_PRD_OFFERING_BY_ID;
10:40:47 265  
10:40:47 266  /******************************************************************************/
10:40:47 267  
10:40:47 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
10:40:47 269  	in_product_offering_id IN NUMBER,
10:40:47 270  	out_result_set	       OUT SYS_REFCURSOR
10:40:47 271  ) AS
10:40:47 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
10:40:47 273  -- VARIABLES
10:40:47 274  temp_product_offering_id NUMBER;
10:40:47 275  -- EXCEPTIONS
10:40:47 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
10:40:47 277  BEGIN
10:40:47 278  
10:40:47 279  	BEGIN
10:40:47 280  	  SELECT
10:40:47 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
10:40:47 282  	  FROM
10:40:47 283  	    PRODUCT_OFFERING
10:40:47 284  	  WHERE
10:40:47 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
10:40:47 286  	  EXCEPTION
10:40:47 287  	    WHEN NO_DATA_FOUND THEN
10:40:47 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
10:40:47 289  	END;
10:40:47 290  
10:40:47 291  	OPEN out_result_set FOR
10:40:47 292  	SELECT
10:40:47 293  	  DISCOUNT.ID,
10:40:47 294  	  DISCOUNT.NAME,
10:40:47 295  	  DISCOUNT.FIXED_AMOUNT,
10:40:47 296  	  DISCOUNT.PERCENT_AMOUNT,
10:40:47 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
10:40:47 298  	  DISCOUNT.CREATE_DATE,
10:40:47 299  	  DISCOUNT.CREATED_BY,
10:40:47 300  	  DISCOUNT.DESCRIPTION
10:40:47 301  	FROM
10:40:47 302  	  DISCOUNT
10:40:47 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
10:40:47 304  	WHERE
10:40:47 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
10:40:47 306  
10:40:47 307  EXCEPTION
10:40:47 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
10:40:47 309  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 310  	  SPROC_NAME, 'No such product offering');
10:40:47 311  WHEN OTHERS THEN
10:40:47 312  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
10:40:47 315  
10:40:47 316  END PROCS_PRODUCT_V22;
10:40:47 317  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE
10:40:47   2  PACKAGE BODY PROCS_REPORTING AS
10:40:47   3  
10:40:47   4  ----
10:40:47   5  --------------------------------------------------------------------------------
10:40:47   6  ----
10:40:47   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47   8  	  is
10:40:47   9  	  begin
10:40:47  10  	      open out_cursor for
10:40:47  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
10:40:47  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
10:40:47  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
10:40:47  14  			,c.create_date, c.update_date
10:40:47  15  		  from charge c
10:40:47  16  		      ,charge_status cs
10:40:47  17  		      ,instrument_type it
10:40:47  18  		      ,ids
10:40:47  19  		  where c.id = ids.id
10:40:47  20  		    and c.charge_status_id = cs.id
10:40:47  21  		    and c.instrument_type_id = it.id
10:40:47  22  	      ;
10:40:47  23  	  end;
10:40:47  24  ----
10:40:47  25  --------------------------------------------------------------------------------
10:40:47  26  ----
10:40:47  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47  28  	  is
10:40:47  29  	  begin
10:40:47  30  	      open out_cursor for
10:40:47  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
10:40:47  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
10:40:47  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
10:40:47  35  		  from license l
10:40:47  36  		      ,license_status ls
10:40:47  37  		      ,ids
10:40:47  38  		  where l.id = ids.id
10:40:47  39  		    and l.license_status_id = ls.id
10:40:47  40  	      ;
10:40:47  41  	  end;
10:40:47  42  ----
10:40:47  43  --------------------------------------------------------------------------------
10:40:47  44  ----
10:40:47  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47  46  	  is
10:40:47  47  	  begin
10:40:47  48  	      open out_cursor for
10:40:47  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
10:40:47  50  		  select
10:40:47  51  		    i.id invoice_id,
10:40:47  52  		    i.create_date,
10:40:47  53  		    i.update_date,
10:40:47  54  		    i.invoice_status_id,
10:40:47  55  		    istat.value invoice_status,
10:40:47  56  		    NVL(
10:40:47  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
10:40:47  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
10:40:47  59  		    ) offer_chain_id
10:40:47  60  		  from	   invoice i
10:40:47  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
10:40:47  62  		      join ids			on ids.id = i.id
10:40:47  63  		  where 1 = 1
10:40:47  64  	      ;
10:40:47  65  	  end;
10:40:47  66  ----
10:40:47  67  --------------------------------------------------------------------------------
10:40:47  68  ----
10:40:47  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47  70  	  is
10:40:47  71  	  begin
10:40:47  72  	      open out_cursor for
10:40:47  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
10:40:47  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
10:40:47  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
10:40:47  76  		  from line_item li
10:40:47  77  		    , ids
10:40:47  78  		  where li.id = ids.id
10:40:47  79  	      ;
10:40:47  80  	  end;
10:40:47  81  ----
10:40:47  82  --------------------------------------------------------------------------------
10:40:47  83  ----
10:40:47  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47  85  	  is
10:40:47  86  	  begin
10:40:47  87  	      open out_cursor for
10:40:47  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
10:40:47  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
10:40:47  91  			,a.instrument_id, a.tax_exempt_id
10:40:47  92  			-- need system category??
10:40:47  93  		  from account a
10:40:47  94  		      ,account_status astat
10:40:47  95  		      ,instrument_type it
10:40:47  96  		      , ids
10:40:47  97  		  where a.id = ids.id
10:40:47  98  		    and astat.id = a.account_status_id
10:40:47  99  		    and a.instrument_type_id = it.id(+)
10:40:47 100  	      ;
10:40:47 101  	  end;
10:40:47 102  ----
10:40:47 103  --------------------------------------------------------------------------------
10:40:47 104  ----
10:40:47 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 106  	  is
10:40:47 107  	  begin
10:40:47 108  	      open out_cursor for
10:40:47 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
10:40:47 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
10:40:47 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
10:40:47 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
10:40:47 114  		  from subscription s
10:40:47 115  		      ,subscription_status ss
10:40:47 116  		      ,subscription_cancel_reason sct
10:40:47 117  		      ,instrument_type it
10:40:47 118  		      , ids
10:40:47 119  		  where s.id = ids.id
10:40:47 120  		    and ss.id = s.subscription_status_id
10:40:47 121  		    and s.instrument_type_id = it.id
10:40:47 122  		    and sct.id(+) = s.sct_id
10:40:47 123  	      ;
10:40:47 124  	  end;
10:40:47 125  ----
10:40:47 126  --------------------------------------------------------------------------------
10:40:47 127  ----
10:40:47 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 129  	  is
10:40:47 130  	  begin
10:40:47 131  	      open out_cursor for
10:40:47 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 133  		  select t.id transaction_id, t.transaction_amount
10:40:47 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
10:40:47 135  			,t.create_date, t.update_date, t.is_settled
10:40:47 136  		  from transaction t
10:40:47 137  		      ,transaction_status ts
10:40:47 138  		      , ids
10:40:47 139  		  where t.id = ids.id
10:40:47 140  		    and t.transaction_status_id = ts.id
10:40:47 141  	      ;
10:40:47 142  	  end;
10:40:47 143  ----
10:40:47 144  --------------------------------------------------------------------------------
10:40:47 145  ----
10:40:47 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 147  	  is
10:40:47 148  	  begin
10:40:47 149  	      open out_cursor for
10:40:47 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
10:40:47 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
10:40:47 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
10:40:47 154  			,oc.billing_source_id, bs.name billing_source_name
10:40:47 155  			,oc.is_seat_license,oc.group_account_type_id
10:40:47 156  		  from offer_chain oc
10:40:47 157  		      , offer_chain_status ocs
10:40:47 158  		      , ids
10:40:47 159  		      , vendor_source vs
10:40:47 160  		      , billing_source bs
10:40:47 161  		  where oc.id = ids.id
10:40:47 162  		    and oc.offer_chain_status_id = ocs.id
10:40:47 163  		    and oc.vendor_source_id = vs.id
10:40:47 164  		    and oc.billing_source_id = bs.id
10:40:47 165  	      ;
10:40:47 166  	  end;
10:40:47 167  ----
10:40:47 168  --------------------------------------------------------------------------------
10:40:47 169  ----
10:40:47 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 171  	  is
10:40:47 172  	  begin
10:40:47 173  	      open out_cursor for
10:40:47 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:40:47 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
10:40:47 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
10:40:47 177  		  from offer_offer_chain ooc
10:40:47 178  		  , ids
10:40:47 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
10:40:47 180  	      ;
10:40:47 181  	  end;
10:40:47 182  ----
10:40:47 183  --------------------------------------------------------------------------------
10:40:47 184  ----
10:40:47 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 186  	  is
10:40:47 187  	  begin
10:40:47 188  	      open out_cursor for
10:40:47 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
10:40:47 191  		  from offer o
10:40:47 192  		      ,offer_status os
10:40:47 193  		      , ids
10:40:47 194  		  where o.id = ids.id
10:40:47 195  		    and o.offer_status_id = os.id
10:40:47 196  	      ;
10:40:47 197  	  end;
10:40:47 198  ----
10:40:47 199  --------------------------------------------------------------------------------
10:40:47 200  ----
10:40:47 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 202  	  is
10:40:47 203  	  begin
10:40:47 204  	      open out_cursor for
10:40:47 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
10:40:47 207  			 ,gc.expiration_date, gc.purchase_date
10:40:47 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
10:40:47 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
10:40:47 210  			 ,recipient_address_id
10:40:47 211  			 ,redeemer_address_id
10:40:47 212  			 ,recipient_notify_date
10:40:47 213  			 ,recipient_name
10:40:47 214  			 ,redemption_date
10:40:47 215  			 ,recipient_email
10:40:47 216  		  from gift_certificate gc
10:40:47 217  		      ,gift_certificate_status gcs
10:40:47 218  		      , ids
10:40:47 219  		  where gc.id = ids.id
10:40:47 220  		    and gc.gift_certificate_status_id = gcs.id
10:40:47 221  	      ;
10:40:47 222  	  end;
10:40:47 223  ----
10:40:47 224  --------------------------------------------------------------------------------
10:40:47 225  ----
10:40:47 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 227  	  is
10:40:47 228  	  begin
10:40:47 229  	      open out_cursor for
10:40:47 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
10:40:47 232  		  from product_offering po
10:40:47 233  		  , ids
10:40:47 234  		  where po.id = ids.id
10:40:47 235  	      ;
10:40:47 236  	  end;
10:40:47 237  ----
10:40:47 238  --------------------------------------------------------------------------------
10:40:47 239  ----
10:40:47 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 241  	  is
10:40:47 242  	  begin
10:40:47 243  	      open out_cursor for
10:40:47 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
10:40:47 246  			,product_uri, p.create_date
10:40:47 247  		  from product p
10:40:47 248  		      ,product_status ps
10:40:47 249  		      , ids
10:40:47 250  		  where p.id = ids.id
10:40:47 251  		    and p.product_status_id = ps.id
10:40:47 252  	      ;
10:40:47 253  	  end;
10:40:47 254  ----
10:40:47 255  --------------------------------------------------------------------------------
10:40:47 256  ----
10:40:47 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 258  	  is
10:40:47 259  	  begin
10:40:47 260  	      open out_cursor for
10:40:47 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:40:47 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
10:40:47 263  		  from offer_product_offering opo
10:40:47 264  		  , ids
10:40:47 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
10:40:47 266  	      ;
10:40:47 267  	  end;
10:40:47 268  ----
10:40:47 269  --------------------------------------------------------------------------------
10:40:47 270  ----
10:40:47 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 272  	  is
10:40:47 273  	  begin
10:40:47 274  	      open out_cursor for
10:40:47 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
10:40:47 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
10:40:47 277  		  from discount_product_offering dpo
10:40:47 278  		  , ids
10:40:47 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
10:40:47 280  	      ;
10:40:47 281  	  end;
10:40:47 282  ----
10:40:47 283  --------------------------------------------------------------------------------
10:40:47 284  ----
10:40:47 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 286  	  is
10:40:47 287  	  begin
10:40:47 288  	      open out_cursor for
10:40:47 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
10:40:47 291  			,d.discount_type_id, dt.value discount_type, d.create_date
10:40:47 292  		  from discount d
10:40:47 293  		      ,discount_type dt
10:40:47 294  		      , ids
10:40:47 295  		  where d.id = ids.id
10:40:47 296  		    and d.discount_type_id = dt.id
10:40:47 297  	      ;
10:40:47 298  	  end;
10:40:47 299  ----
10:40:47 300  --------------------------------------------------------------------------------
10:40:47 301  ----
10:40:47 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 303  	  is
10:40:47 304  	  begin
10:40:47 305  	      open out_cursor for
10:40:47 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
10:40:47 308  		  from product_eligibility pg
10:40:47 309  		  , ids
10:40:47 310  		  where pg.id = ids.id
10:40:47 311  	      ;
10:40:47 312  	  end;
10:40:47 313  ----
10:40:47 314  --------------------------------------------------------------------------------
10:40:47 315  ----
10:40:47 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 317  	  is
10:40:47 318  	  begin
10:40:47 319  	      open out_cursor for
10:40:47 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
10:40:47 322  		  from offer_chain_eligibility oce
10:40:47 323  		  , ids
10:40:47 324  		  where oce.id = ids.id
10:40:47 325  	      ;
10:40:47 326  	  end;
10:40:47 327  ----
10:40:47 328  --------------------------------------------------------------------------------
10:40:47 329  ----
10:40:47 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 331  	  is
10:40:47 332  	  begin
10:40:47 333  	      open out_cursor for
10:40:47 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
10:40:47 336  		  from offer_chain_meta_data ocm
10:40:47 337  		  , ids
10:40:47 338  		  where ocm.id = ids.id
10:40:47 339  	      ;
10:40:47 340  	  end;
10:40:47 341  ----
10:40:47 342  --------------------------------------------------------------------------------
10:40:47 343  ----
10:40:47 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 345  	  is
10:40:47 346  	  begin
10:40:47 347  	      open out_cursor for
10:40:47 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
10:40:47 350  		  from product_offering_meta_data pom
10:40:47 351  		  , ids
10:40:47 352  		  where pom.id = ids.id
10:40:47 353  	      ;
10:40:47 354  	  end;
10:40:47 355  ----
10:40:47 356  --------------------------------------------------------------------------------
10:40:47 357  ----
10:40:47 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 359  	  is
10:40:47 360  	  begin
10:40:47 361  	      open out_cursor for
10:40:47 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
10:40:47 364  		  from subscription_meta_data sm
10:40:47 365  		  , ids
10:40:47 366  		  where sm.id = ids.id
10:40:47 367  	      ;
10:40:47 368  	  end;
10:40:47 369  ----
10:40:47 370  --------------------------------------------------------------------------------
10:40:47 371  ----
10:40:47 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 373  	  is
10:40:47 374  	  begin
10:40:47 375  	      open out_cursor for
10:40:47 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
10:40:47 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
10:40:47 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
10:40:47 380  		  from credit_card cc
10:40:47 381  		      ,credit_card_type cct
10:40:47 382  		      ,credit_card_status ccs
10:40:47 383  		      , ids
10:40:47 384  		  where cc.id = ids.id
10:40:47 385  		    and cc.credit_card_type_id = cct.id(+)
10:40:47 386  		    and cc.credit_card_status_id = ccs.id
10:40:47 387  	      ;
10:40:47 388  	  end;
10:40:47 389  ----
10:40:47 390  --------------------------------------------------------------------------------
10:40:47 391  ----
10:40:47 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 393  	  is
10:40:47 394  	  begin
10:40:47 395  	      open out_cursor for
10:40:47 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
10:40:47 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
10:40:47 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
10:40:47 400  			,ta.create_date
10:40:47 401  		  from transaction_attempt ta
10:40:47 402  		      ,transaction_attempt_status tas
10:40:47 403  		      , ids
10:40:47 404  		  where ta.id = ids.id
10:40:47 405  		    and ta.transaction_attempt_status_id = tas.id
10:40:47 406  	      ;
10:40:47 407  	  end;
10:40:47 408  ----
10:40:47 409  --------------------------------------------------------------------------------
10:40:47 410  ----
10:40:47 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 412  	  is
10:40:47 413  	  begin
10:40:47 414  	      open out_cursor for
10:40:47 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
10:40:47 417  			,ia.adjustment_date, ia.create_date
10:40:47 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
10:40:47 419  		  , ids
10:40:47 420  		  where ia.id = ids.id
10:40:47 421  		  and ir.id = ia.invoice_adjustment_reason_id
10:40:47 422  	      ;
10:40:47 423  	  end;
10:40:47 424  ----
10:40:47 425  --------------------------------------------------------------------------------
10:40:47 426  ----
10:40:47 427  
10:40:47 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 429  	  is
10:40:47 430  	  begin
10:40:47 431  	      open out_cursor for
10:40:47 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
10:40:47 434  		  from line_item_adjustment lia
10:40:47 435  		  , ids
10:40:47 436  		  where lia.id = ids.id
10:40:47 437  	      ;
10:40:47 438  	  end;
10:40:47 439  ----
10:40:47 440  --------------------------------------------------------------------------------
10:40:47 441  ----
10:40:47 442  
10:40:47 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 444  	  is
10:40:47 445  	  begin
10:40:47 446  	      open out_cursor for
10:40:47 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 448  		  select
10:40:47 449  		    tax.id tax_id,
10:40:47 450  		    ttype.code tax_type,
10:40:47 451  		    tax.calculated_amount,
10:40:47 452  		    tax.create_date,
10:40:47 453  		    tax.line_item_id,
10:40:47 454  		    tax.effective_rate,
10:40:47 455  		    tax.taxable_amount,
10:40:47 456  		    tax.tax_rule_id,
10:40:47 457  		    j.name jurisdiction_level,
10:40:47 458  		    tax.jurisdiction_name,
10:40:47 459  		    tax.jurisdiction_id,
10:40:47 460  		    tax.ext_tax_type,
10:40:47 461  		    tax.ext_result,
10:40:47 462  		    tax.imposition_type,
10:40:47 463  		    tax.imposition
10:40:47 464  		  from tax
10:40:47 465  		  , tax_type ttype
10:40:47 466  		  , jurisdiction_level j
10:40:47 467  		  , ids
10:40:47 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
10:40:47 469  	      ;
10:40:47 470  	  end;
10:40:47 471  ----
10:40:47 472  --------------------------------------------------------------------------------
10:40:47 473  ----
10:40:47 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
10:40:47 475  	  is
10:40:47 476  	  begin
10:40:47 477  	      open out_cursor for
10:40:47 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
10:40:47 479  		  select
10:40:47 480  		    tax.id tad_adjustment_id,
10:40:47 481  		    tax.tax_id tax_id,
10:40:47 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
10:40:47 483  		    tax.amount tax_amount,
10:40:47 484  		    tax.create_date create_date
10:40:47 485  		  from tax_adjustment tax
10:40:47 486  		  , ids
10:40:47 487  		  where tax.id = ids.id
10:40:47 488  	      ;
10:40:47 489  	  end;
10:40:47 490  ----
10:40:47 491  --------------------------------------------------------------------------------
10:40:47 492  ----
10:40:47 493  /**/
10:40:47 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 495  	  BEGIN
10:40:47 496  	    OPEN OUT_CURSOR FOR
10:40:47 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 498  	    SELECT
10:40:47 499  		t.id rcn_ext_source_log_id
10:40:47 500  	      , t.extraction_timestamp
10:40:47 501  	      , t.report_date
10:40:47 502  	      , t.report_generation_datetime
10:40:47 503  	      , t.record_type
10:40:47 504  	      , t.report_file_name
10:40:47 505  	      , t.create_date
10:40:47 506  	      , t.created_by
10:40:47 507  	    FROM rcn_ext_source_log t, ids
10:40:47 508  	    WHERE ids.id = t.id;
10:40:47 509  	  END;
10:40:47 510  
10:40:47 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 512  	  BEGIN
10:40:47 513  	    OPEN OUT_CURSOR FOR
10:40:47 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 515  	    SELECT
10:40:47 516  		t.id rcn_cpt_svc_chg_dtl_id
10:40:47 517  	      , t.rcn_ext_source_log_id
10:40:47 518  	      , t.record_type
10:40:47 519  	      , t.category
10:40:47 520  	      , t.sub_category
10:40:47 521  	      , t.entity_type
10:40:47 522  	      , t.entity_number
10:40:47 523  	      , t.funds_transfer_inst_number
10:40:47 524  	      , t.secure_ba_number
10:40:47 525  	      , t.settlement_currency
10:40:47 526  	      , t.fee_schedule
10:40:47 527  	      , t.mop
10:40:47 528  	      , t.interchange_qualification
10:40:47 529  	      , t.fee_type_description
10:40:47 530  	      , t.action_type
10:40:47 531  	      , t.unit_quantity
10:40:47 532  	      , t.unit_fee
10:40:47 533  	      , t.amount
10:40:47 534  	      , t.percentage_rate
10:40:47 535  	      , t.total_charge
10:40:47 536  	      , t.create_date
10:40:47 537  	      , t.created_by
10:40:47 538  	    FROM rcn_cpt_service_charge_detail t, ids
10:40:47 539  	    WHERE ids.id = t.id;
10:40:47 540  	  END;
10:40:47 541  ----
10:40:47 542  --------------------------------------------------------------------------------
10:40:47 543  ----
10:40:47 544  
10:40:47 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 546  	  BEGIN
10:40:47 547  	    OPEN OUT_CURSOR FOR
10:40:47 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 549  	    SELECT
10:40:47 550  		t.id rcn_cpt_excp_dtl_id
10:40:47 551  	      , t.rcn_ext_source_log_id
10:40:47 552  	      , t.record_type
10:40:47 553  	      , t.submission_date
10:40:47 554  	      , t.pid_number
10:40:47 555  	      , t.pid_short_name
10:40:47 556  	      , t.submission_number
10:40:47 557  	      , t.record_number
10:40:47 558  	      , t.entity_type
10:40:47 559  	      , t.entity_number
10:40:47 560  	      , t.presentment_currency
10:40:47 561  	      , t.merchant_order_number
10:40:47 562  	      , t.rdfi_number
10:40:47 563  	      , t.account_number
10:40:47 564  	      , t.expiration_date
10:40:47 565  	      , t.amount
10:40:47 566  	      , t.mop
10:40:47 567  	      , t.action_code
10:40:47 568  	      , t.auth_date
10:40:47 569  	      , t.auth_code
10:40:47 570  	      , t.auth_response_code
10:40:47 571  	      , t.trace_number
10:40:47 572  	      , t.consumer_country_code
10:40:47 573  	      , t.category
10:40:47 574  	      , t.mcc
10:40:47 575  	      , t.reject_code
10:40:47 576  	      , t.submission_status
10:40:47 577  	      , t.create_date
10:40:47 578  	      , t.created_by
10:40:47 579  	    FROM rcn_cpt_exception_detail t, ids
10:40:47 580  	    WHERE ids.id = t.id;
10:40:47 581  	  END;
10:40:47 582  ----
10:40:47 583  --------------------------------------------------------------------------------
10:40:47 584  ----
10:40:47 585  
10:40:47 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 587  	  BEGIN
10:40:47 588  	    OPEN OUT_CURSOR FOR
10:40:47 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 590  	      SELECT
10:40:47 591  		t.id rcn_cpt_deposit_dtl_id
10:40:47 592  	      , t.rcn_ext_source_log_id
10:40:47 593  	      , t.record_type
10:40:47 594  	      , t.submission_date
10:40:47 595  	      , t.pid_number
10:40:47 596  	      , t.pid_short_name
10:40:47 597  	      , t.submission_number
10:40:47 598  	      , t.record_number
10:40:47 599  	      , t.entity_type
10:40:47 600  	      , t.entity_number
10:40:47 601  	      , t.presentment_currency
10:40:47 602  	      , t.merchant_order_number
10:40:47 603  	      , t.rdfi_number
10:40:47 604  	      , t.account_number
10:40:47 605  	      , t.expiration_date
10:40:47 606  	      , t.amount
10:40:47 607  	      , t.mop
10:40:47 608  	      , t.action_code
10:40:47 609  	      , t.auth_date
10:40:47 610  	      , t.auth_code
10:40:47 611  	      , t.auth_response_code
10:40:47 612  	      , t.trace_number
10:40:47 613  	      , t.consumer_country_code
10:40:47 614  	      , t.mcc
10:40:47 615  	      , t.create_date
10:40:47 616  	      , t.created_by
10:40:47 617  	      , t.fee_code
10:40:47 618  	      , t.unit_fee
10:40:47 619  	      , t.percent_fee
10:40:47 620  	      , t.total_interchange_fee
10:40:47 621  	      , t.total_assessment_fee
10:40:47 622  	      , t.other_fee
10:40:47 623  	    FROM rcn_cpt_deposit_detail t, ids
10:40:47 624  	    WHERE ids.id = t.id;
10:40:47 625  	  END;
10:40:47 626  ----
10:40:47 627  --------------------------------------------------------------------------------
10:40:47 628  ----
10:40:47 629  
10:40:47 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 631  	  BEGIN
10:40:47 632  	    OPEN OUT_CURSOR FOR
10:40:47 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 634  	    SELECT
10:40:47 635  		t.id rcn_cpt_chgbk_act_dtl_id
10:40:47 636  	      , t.rcn_ext_source_log_id
10:40:47 637  	      , t.record_type
10:40:47 638  	      , t.entity_type
10:40:47 639  	      , t.entity_number
10:40:47 640  	      , t.chargeback_amount_issuer
10:40:47 641  	      , t.prev_partial_representment
10:40:47 642  	      , t.presentment_currency
10:40:47 643  	      , t.chargeback_category
10:40:47 644  	      , t.status_flag
10:40:47 645  	      , t.sequence_number
10:40:47 646  	      , t.merchant_order_number
10:40:47 647  	      , t.account_number
10:40:47 648  	      , t.reason_code
10:40:47 649  	      , t.transaction_date
10:40:47 650  	      , t.chargeback_date
10:40:47 651  	      , t.activity_date
10:40:47 652  	      , t.chargeback_amount_action
10:40:47 653  	      , t.fee_amount
10:40:47 654  	      , t.usage_code
10:40:47 655  	      , t.mop_code
10:40:47 656  	      , t.authorization_date
10:40:47 657  	      , t.chargeback_due_date
10:40:47 658  	      , t.create_date
10:40:47 659  	      , t.created_by
10:40:47 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
10:40:47 661  	    WHERE ids.id = t.id;
10:40:47 662  	  END;
10:40:47 663  ----
10:40:47 664  --------------------------------------------------------------------------------
10:40:47 665  ----
10:40:47 666  
10:40:47 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 668  	  BEGIN
10:40:47 669  	    OPEN OUT_CURSOR FOR
10:40:47 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 671  	    SELECT
10:40:47 672  		t.id rcn_pp_settlement_id
10:40:47 673  	      , t.rcn_ext_source_log_id
10:40:47 674  	      , t.transaction_id
10:40:47 675  	      , t.invoice_id
10:40:47 676  	      , t.pp_ref_id
10:40:47 677  	      , t.pp_ref_id_type
10:40:47 678  	      , t.trans_event_code
10:40:47 679  	      , t.trans_init_date
10:40:47 680  	      , t.trans_comp_date
10:40:47 681  	      , t.trans_deb_or_cred
10:40:47 682  	      , t.gross_trans_amount
10:40:47 683  	      , t.gross_trans_currency
10:40:47 684  	      , t.fee_deb_or_cred
10:40:47 685  	      , t.fee_amount
10:40:47 686  	      , t.fee_currency
10:40:47 687  	      , t.custom_field
10:40:47 688  	      , t.create_date
10:40:47 689  	      , t.created_by
10:40:47 690  	    FROM rcn_pp_settlement t, ids
10:40:47 691  	    WHERE ids.id = t.id;
10:40:47 692  	  END;
10:40:47 693  ----
10:40:47 694  --------------------------------------------------------------------------------
10:40:47 695  ----
10:40:47 696  
10:40:47 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 698  	  BEGIN
10:40:47 699  	    OPEN OUT_CURSOR FOR
10:40:47 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 701  	    SELECT
10:40:47 702  		t.id rcn_pp_dispute_id
10:40:47 703  	      , t.rcn_ext_source_log_id
10:40:47 704  	      , t.dispute_type
10:40:47 705  	      , t.claimant_name
10:40:47 706  	      , t.claimant_email
10:40:47 707  	      , t.transaction_id
10:40:47 708  	      , t.trans_date
10:40:47 709  	      , t.disputed_amount
10:40:47 710  	      , t.disputed_amount_currency
10:40:47 711  	      , t.dispute_reason
10:40:47 712  	      , t.dispute_filing_date
10:40:47 713  	      , t.dispute_status
10:40:47 714  	      , t.dispute_case_id
10:40:47 715  	      , t.invoice_id
10:40:47 716  	      , t.create_date
10:40:47 717  	      , t.created_by
10:40:47 718  	    FROM
10:40:47 719  	    rcn_pp_dispute t, ids
10:40:47 720  	    WHERE ids.id = t.id;
10:40:47 721  	  END;
10:40:47 722  ----
10:40:47 723  --------------------------------------------------------------------------------
10:40:47 724  ----
10:40:47 725  
10:40:47 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 727  	  BEGIN
10:40:47 728  	    OPEN OUT_CURSOR FOR
10:40:47 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 730  	    SELECT
10:40:47 731  		t.id rcn_pp_trans_dtl_id
10:40:47 732  	      , t.rcn_ext_source_log_id
10:40:47 733  	      , t.transaction_id
10:40:47 734  	      , t.invoice_id
10:40:47 735  	      , t.pp_ref_id
10:40:47 736  	      , t.trans_event_code
10:40:47 737  	      , t.trans_init_date
10:40:47 738  	      , t.trans_comp_date
10:40:47 739  	      , t.trans_deb_or_cred
10:40:47 740  	      , t.gross_trans_amount
10:40:47 741  	      , t.gross_trans_currency
10:40:47 742  	      , t.fee_deb_or_cred
10:40:47 743  	      , t.fee_amount
10:40:47 744  	      , t.fee_currency
10:40:47 745  	      , t.trans_status
10:40:47 746  	      , t.insurance_amount
10:40:47 747  	      , t.sales_tax_amount
10:40:47 748  	      , t.shipping_amount
10:40:47 749  	      , t.trans_subject
10:40:47 750  	      , t.trans_note
10:40:47 751  	      , t.payer_acct_id
10:40:47 752  	      , t.payer_addr_status
10:40:47 753  	      , t.item_name
10:40:47 754  	      , t.item_id
10:40:47 755  	      , t.option_1_name
10:40:47 756  	      , t.option_1_value
10:40:47 757  	      , t.option_2_name
10:40:47 758  	      , t.option_2_value
10:40:47 759  	      , t.auction_site
10:40:47 760  	      , t.auction_buyer_id
10:40:47 761  	      , t.auction_closing_date
10:40:47 762  	      , t.shipping_addr_line_1
10:40:47 763  	      , t.shipping_addr_line_2
10:40:47 764  	      , t.shipping_addr_city
10:40:47 765  	      , t.shipping_addr_state
10:40:47 766  	      , t.shipping_addr_zip
10:40:47 767  	      , t.shipping_addr_country
10:40:47 768  	      , t.custom_field
10:40:47 769  	      , t.create_date
10:40:47 770  	      , t.created_by
10:40:47 771  	    FROM rcn_pp_trans_detail t, ids
10:40:47 772  	    WHERE ids.id = t.id;
10:40:47 773  	  END;
10:40:47 774  ----
10:40:47 775  --------------------------------------------------------------------------------
10:40:47 776  ----
10:40:47 777  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 778  	  BEGIN
10:40:47 779  	    OPEN OUT_CURSOR FOR
10:40:47 780  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 781  	    SELECT
10:40:47 782  	      rac.id
10:40:47 783  	    , rac.rcn_ext_source_log_id
10:40:47 784  	    , rac.resolution
10:40:47 785  	    , rac.from_system
10:40:47 786  	    , rac.rejects_to_system
10:40:47 787  	    , rac.disputes_to_system
10:40:47 788  	    , rac.date_of_adjustment
10:40:47 789  	    , rac.date_of_charge
10:40:47 790  	    , rac.case_type
10:40:47 791  	    , rac.cb_reas_code
10:40:47 792  	    , rac.cb_amount
10:40:47 793  	    , rac.cb_adjustment_number
10:40:47 794  	    , rac.billed_amount
10:40:47 795  	    , rac.soc_amount
10:40:47 796  	    , rac.foreign_amount
10:40:47 797  	    , rac.currency
10:40:47 798  	    , rac.note1
10:40:47 799  	    , rac.note2
10:40:47 800  	    , rac.note3
10:40:47 801  	    , rac.note4
10:40:47 802  	    , rac.note5
10:40:47 803  	    , rac.note6
10:40:47 804  	    , rac.note7
10:40:47 805  	    , rac.ind_ref_number
10:40:47 806  	    , rac.create_date
10:40:47 807  	    , rac.created_by
10:40:47 808  	    , rac.update_date
10:40:47 809  	    , rac.updated_by
10:40:47 810  	    FROM rcn_amex_chargeback rac, ids
10:40:47 811  	    WHERE ids.id = rac.id;
10:40:47 812  	  END;
10:40:47 813  ----
10:40:47 814  --------------------------------------------------------------------------------
10:40:47 815  ----
10:40:47 816  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 817  	  BEGIN
10:40:47 818  	    OPEN OUT_CURSOR FOR
10:40:47 819  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 820  	    SELECT
10:40:47 821  		t.ID PAYPAL_ID
10:40:47 822  	      , ACCOUNT_ID
10:40:47 823  	      , INSTRUMENT_NAME
10:40:47 824  	      , CREATE_DATE
10:40:47 825  	      , CREATED_BY
10:40:47 826  	      , UPDATE_DATE
10:40:47 827  	      , UPDATED_BY
10:40:47 828  	      , s.value PAYPAL_STATUS
10:40:47 829  	      , STATE
10:40:47 830  	      , CITY
10:40:47 831  	      , POSTAL_CODE
10:40:47 832  	      , COUNTRY
10:40:47 833  	      , EXPIRATION_DATE
10:40:47 834  	    FROM paypal t, paypal_status s, ids
10:40:47 835  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
10:40:47 836  	  END;
10:40:47 837  ----
10:40:47 838  --------------------------------------------------------------------------------
10:40:47 839  ----
10:40:47 840  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
10:40:47 841  	  BEGIN
10:40:47 842  	    OPEN OUT_CURSOR FOR
10:40:47 843  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
10:40:47 844  	    SELECT
10:40:47 845  	      a.id ADDRESS_ID,
10:40:47 846  	      address1,
10:40:47 847  	      address2,
10:40:47 848  	      city,
10:40:47 849  	      state,
10:40:47 850  	      postal_code,
10:40:47 851  	      country,
10:40:47 852  	      create_date,
10:40:47 853  	      created_by,
10:40:47 854  	      update_date,
10:40:47 855  	      updated_by
10:40:47 856  	    FROM address a, ids
10:40:47 857  	    WHERE ids.id = a.id;
10:40:47 858  	  END;
10:40:47 859  ----
10:40:47 860  --------------------------------------------------------------------------------
10:40:47 861  ----
10:40:47 862  /**/
10:40:47 863  END PROCS_REPORTING;
10:40:47 864  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.06
10:40:47 SQL> 
10:40:47 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
10:40:47   2  
10:40:47   3  ----
10:40:47   4  --------------------------------------------------------------------------------
10:40:47   5  ----
10:40:47   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
10:40:47   7  	      return line_item.amount%type
10:40:47   8  	  is
10:40:47   9  	      v_discount  line_item.amount%type := 0;
10:40:47  10  	  begin
10:40:47  11  	      for x in (
10:40:47  12  		  select d.id discount_id
10:40:47  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
10:40:47  14  		  from discount d
10:40:47  15  		      join discount_line_item dli	      on dli.discount_id = d.id
10:40:47  16  		      join discount_product_offering dop      on dop.discount_id = d.id
10:40:47  17  		      join product_offering po		      on po.id = dop.product_offering_id
10:40:47  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
10:40:47  19  		  where dli.line_item_id = in_line_item_id
10:40:47  20  	      )
10:40:47  21  	      loop
10:40:47  22  		  v_discount := v_discount + x.discount_amount;
10:40:47  23  	      end loop;
10:40:47  24  
10:40:47  25  	      return v_discount;
10:40:47  26  	  end;
10:40:47  27  ----
10:40:47  28  --------------------------------------------------------------------------------
10:40:47  29  ----
10:40:47  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
10:40:47  31  	      return line_item.amount%type
10:40:47  32  	  is
10:40:47  33  	      v_li_total  line_item.amount%type;
10:40:47  34  	      v_inv_total line_item.amount%type;
10:40:47  35  	      v_ref_total line_item.amount%type;
10:40:47  36  	  begin
10:40:47  37  
10:40:47  38  	      for li in (
10:40:47  39  		  select li.invoice_id, po.*
10:40:47  40  		  from line_item li
10:40:47  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
10:40:47  42  		  where li.id = in_line_item_id
10:40:47  43  	      )
10:40:47  44  	      loop
10:40:47  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
10:40:47  46  
10:40:47  47  		  v_inv_total := 0;
10:40:47  48  		  v_ref_total := 0;
10:40:47  49  		  for x in (
10:40:47  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
10:40:47  51  		      from charge c
10:40:47  52  		      where c.invoice_id = li.invoice_id
10:40:47  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
10:40:47  54  		  )
10:40:47  55  		  loop
10:40:47  56  		      if (x.type = 1) then
10:40:47  57  			  v_inv_total := x.total;
10:40:47  58  		      else
10:40:47  59  			  v_ref_total := x.total;
10:40:47  60  		      end if;
10:40:47  61  		  end loop;
10:40:47  62  
10:40:47  63  		  if (v_inv_total > 0) then
10:40:47  64  		      return (v_ref_total / v_inv_total) * v_li_total;
10:40:47  65  		  else
10:40:47  66  		      return 0;
10:40:47  67  		  end if;
10:40:47  68  
10:40:47  69  	      end loop;
10:40:47  70  
10:40:47  71  	      return 0;
10:40:47  72  	  end;
10:40:47  73  ----
10:40:47  74  --------------------------------------------------------------------------------
10:40:47  75  ----
10:40:47  76  	PROCEDURE EXTRACT_LINE_ITEMS(
10:40:47  77  	  in_lower_date_bound DATE,
10:40:47  78  	  in_upper_date_bound DATE,
10:40:47  79  	  out_lic_cur OUT sys_refcursor
10:40:47  80  	) AS
10:40:47  81  	BEGIN
10:40:47  82  	  OPEN out_lic_cur FOR
10:40:47  83  	  with liq as (
10:40:47  84  		SELECT li2.id
10:40:47  85  		      FROM
10:40:47  86  			   line_item li2
10:40:47  87  		      WHERE
10:40:47  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47  89  		UNION
10:40:47  90  		SELECT li2.id
10:40:47  91  		      FROM
10:40:47  92  			   line_item li2
10:40:47  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
10:40:47  94  		      WHERE
10:40:47  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47  96  		UNION
10:40:47  97  		SELECT li2.id
10:40:47  98  		      FROM
10:40:47  99  			   line_item li2
10:40:47 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
10:40:47 101  		      WHERE
10:40:47 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47 103  		UNION
10:40:47 104  		SELECT li2.id
10:40:47 105  		      FROM
10:40:47 106  			   line_item li2
10:40:47 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
10:40:47 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
10:40:47 109  		      WHERE
10:40:47 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47 111  		UNION
10:40:47 112  		SELECT li2.id
10:40:47 113  		      FROM
10:40:47 114  			   line_item li2
10:40:47 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
10:40:47 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
10:40:47 117  		      WHERE
10:40:47 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47 119  		UNION
10:40:47 120  		SELECT li2.id
10:40:47 121  		      FROM
10:40:47 122  			   line_item li2
10:40:47 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
10:40:47 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
10:40:47 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
10:40:47 126  		      WHERE
10:40:47 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47 128  	  )
10:40:47 129  	  SELECT distinct
10:40:47 130  	    line_item.id				 line_item_id
10:40:47 131  	  , product.name				 product_name
10:40:47 132  	  , product.unit_price				 product_unit_price
10:40:47 133  	  , product.production_cost			 product_production_cost
10:40:47 134  	  , offer_chain.name				 offer_chain_name
10:40:47 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
10:40:47 136  	  , gclicense.purchase_date			 subscription_start_date
10:40:47 137  	  , gclicense.start_date			 license_start_date
10:40:47 138  	  , gclicense.end_date				 license_end_date
10:40:47 139  	  , credit_card.city				 cc_city
10:40:47 140  	  , credit_card.state				 cc_state
10:40:47 141  	  , credit_card.postal_code			 cc_postal_code
10:40:47 142  	  , line_item.create_date			 line_item_purchase_date
10:40:47 143  	  , gclicense.account_regi_id
10:40:47 144  	  , product_offering.quantity			 purchase_quantity
10:40:47 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
10:40:47 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
10:40:47 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
10:40:47 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
10:40:47 149  	  , 0						 purchase_tax_amount
10:40:47 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
10:40:47 151  	  , invoice.id					 invoice_number
10:40:47 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
10:40:47 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
10:40:47 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
10:40:47 155  	  FROM
10:40:47 156  	       line_item
10:40:47 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
10:40:47 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
10:40:47 159  	  JOIN product				ON product.id	       = product_offering.product_id
10:40:47 160  	  join (
10:40:47 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
10:40:47 162  		      ,subscription.sct_id, license.start_date, license.end_date
10:40:47 163  		      ,account.group_id account_regi_id
10:40:47 164  		from	 license
10:40:47 165  		    join subscription ON subscription.id = license.subscription_id
10:40:47 166  		    join account      ON account.id	 = subscription.account_id
10:40:47 167  		union all
10:40:47 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
10:40:47 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
10:40:47 170  		      ,gc.purchaser_group_id account_regi_id
10:40:47 171  		from	 gift_certificate gc
10:40:47 172  		where
10:40:47 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
10:40:47 174  
10:40:47 175  	  ) gclicense
10:40:47 176  						on gclicense.invoice_id = invoice.id
10:40:47 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
10:40:47 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
10:40:47 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
10:40:47 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
10:40:47 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
10:40:47 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
10:40:47 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
10:40:47 184  	  join liq				on line_item.id 	= liq.id
10:40:47 185  	    ;
10:40:47 186  	END EXTRACT_LINE_ITEMS;
10:40:47 187  ----
10:40:47 188  --------------------------------------------------------------------------------
10:40:47 189  ----
10:40:47 190  END PROCS_REPORTING_1A;
10:40:47 191  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V22" AS
10:40:47   2  
10:40:47   3  FUNCTION GET_PRODUCT_NAMES(
10:40:47   4  	in_offer_id IN NUMBER
10:40:47   5  ) RETURN VARCHAR2 AS
10:40:47   6  var_result_names VARCHAR2(1024);
10:40:47   7  BEGIN
10:40:47   8  
10:40:47   9  	var_result_names := NULL;
10:40:47  10  
10:40:47  11  	FOR f_product IN (
10:40:47  12  	  SELECT
10:40:47  13  	    PRODUCT.NAME
10:40:47  14  	  FROM
10:40:47  15  	    PRODUCT
10:40:47  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
10:40:47  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
10:40:47  18  	  WHERE
10:40:47  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
10:40:47  20  	)
10:40:47  21  	LOOP
10:40:47  22  
10:40:47  23  	  IF var_result_names IS NULL THEN
10:40:47  24  	    var_result_names := f_product.NAME;
10:40:47  25  	  ELSE
10:40:47  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
10:40:47  27  	  END IF;
10:40:47  28  
10:40:47  29  	END LOOP;
10:40:47  30  
10:40:47  31  	RETURN var_result_names;
10:40:47  32  
10:40:47  33  END GET_PRODUCT_NAMES;
10:40:47  34  
10:40:47  35  /******************************************************************************/
10:40:47  36  
10:40:47  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
10:40:47  38  	in_start_date  IN DATE,
10:40:47  39  	in_end_date    IN DATE,
10:40:47  40  	out_result_set OUT SYS_REFCURSOR
10:40:47  41  ) AS
10:40:47  42  -- CONSTANTS
10:40:47  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:40:47  44  BEGIN
10:40:47  45  
10:40:47  46  	OPEN out_result_set FOR
10:40:47  47  	SELECT
10:40:47  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
10:40:47  49  	  "Offer_Id",
10:40:47  50  	  "New_Purchases_Num",
10:40:47  51  	  "Number_Of_renewals",
10:40:47  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
10:40:47  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
10:40:47  54  	FROM (
10:40:47  55  	  SELECT
10:40:47  56  	    "Offer_Id",
10:40:47  57  	    "Number_Of_renewals",
10:40:47  58  	    "New_Purchases_Num"
10:40:47  59  	  FROM (
10:40:47  60  	    SELECT
10:40:47  61  	      OFFER.ID as "Offer_Id",
10:40:47  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
10:40:47  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
10:40:47  64  	    FROM
10:40:47  65  	      OFFER
10:40:47  66  	  )
10:40:47  67  	  WHERE
10:40:47  68  	    "New_Purchases_Num" > 0
10:40:47  69  	    OR "Number_Of_renewals" > 0
10:40:47  70  	);
10:40:47  71  
10:40:47  72  	/*
10:40:47  73  	OPEN out_result_set FOR
10:40:47  74  	SELECT
10:40:47  75  	  "Product_Names",
10:40:47  76  	  "Offer_Id",
10:40:47  77  	  "New_Purchases_Num",
10:40:47  78  	  "Number_Of_renewals",
10:40:47  79  	  "Total_Dollar_Value",
10:40:47  80  	  "Unique_Purchasers_num"
10:40:47  81  	FROM (
10:40:47  82  	  SELECT
10:40:47  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
10:40:47  84  	    offer.id as "Offer_Id",
10:40:47  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
10:40:47  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
10:40:47  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
10:40:47  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
10:40:47  89  	  FROM
10:40:47  90  	    OFFER
10:40:47  91  	)
10:40:47  92  	WHERE
10:40:47  93  	  "New_Purchases_Num" > 0
10:40:47  94  	  OR "Number_Of_renewals" > 0
10:40:47  95  	  OR "Total_Dollar_Value" > 0
10:40:47  96  	  OR "Unique_Purchasers_num" > 0;
10:40:47  97  	*/
10:40:47  98  
10:40:47  99  END GET_FULL_FLASH_REPORT_PURCH;
10:40:47 100  
10:40:47 101  /******************************************************************************/
10:40:47 102  
10:40:47 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
10:40:47 104  	in_offer_id	       IN NUMBER,
10:40:47 105  	in_start_date	       IN DATE,
10:40:47 106  	in_end_date	       IN DATE,
10:40:47 107  	out_new_purchasers_num OUT NUMBER,
10:40:47 108  	out_renewals_num       OUT NUMBER,
10:40:47 109  	out_product_names      OUT VARCHAR2,
10:40:47 110  	out_total_dollar_value OUT NUMBER,
10:40:47 111  	out_unique_purchasers  OUT NUMBER
10:40:47 112  ) AS
10:40:47 113  -- CONSTANTS
10:40:47 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:40:47 115  BEGIN
10:40:47 116  
10:40:47 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
10:40:47 118  
10:40:47 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
10:40:47 120  	  in_offer_id,
10:40:47 121  	  in_start_date,
10:40:47 122  	  in_end_date
10:40:47 123  	);
10:40:47 124  
10:40:47 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
10:40:47 126  	  in_offer_id,
10:40:47 127  	  in_start_date,
10:40:47 128  	  in_end_date
10:40:47 129  	);
10:40:47 130  
10:40:47 131  	out_renewals_num := FLR_RENEWALS_NUM(
10:40:47 132  	  in_offer_id,
10:40:47 133  	  in_start_date,
10:40:47 134  	  in_end_date
10:40:47 135  	);
10:40:47 136  
10:40:47 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
10:40:47 138  	  in_offer_id,
10:40:47 139  	  in_start_date,
10:40:47 140  	  in_end_date
10:40:47 141  	);
10:40:47 142  
10:40:47 143  END GET_FLASH_REPORT_PURCHASES;
10:40:47 144  
10:40:47 145  /******************************************************************************/
10:40:47 146  
10:40:47 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
10:40:47 148  	in_offer_id	       IN NUMBER,
10:40:47 149  	in_start_date	       IN DATE,
10:40:47 150  	in_end_date	       IN DATE
10:40:47 151  ) RETURN NUMBER AS
10:40:47 152  -- CONSTANTS
10:40:47 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:40:47 154  -- VARIABLES
10:40:47 155  var_new_purchases_num NUMBER;
10:40:47 156  BEGIN
10:40:47 157  	SELECT
10:40:47 158  	  COUNT(LICENSE.ID)
10:40:47 159  	  into
10:40:47 160  	  var_new_purchases_num
10:40:47 161  	FROM
10:40:47 162  	  LICENSE
10:40:47 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:40:47 164  	WHERE
10:40:47 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
10:40:47 166  	  AND LICENSE.OFFER_ID = in_offer_id
10:40:47 167  	  AND CHARGE.CHARGE_AMOUNT > 0
10:40:47 168  	  AND PROCS_CHARGE_V22.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V22.TRUE
10:40:47 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:40:47 170  
10:40:47 171  	RETURN var_new_purchases_num;
10:40:47 172  END FLR_NEW_PURCHASERS_NUM;
10:40:47 173  
10:40:47 174  /******************************************************************************/
10:40:47 175  
10:40:47 176  FUNCTION FLR_RENEWALS_NUM (
10:40:47 177  	in_offer_id	       IN NUMBER,
10:40:47 178  	in_start_date	       IN DATE,
10:40:47 179  	in_end_date	       IN DATE
10:40:47 180  ) RETURN NUMBER AS
10:40:47 181  -- CONSTANTS
10:40:47 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:40:47 183  -- VARIABLES
10:40:47 184  var_renewals_num NUMBER;
10:40:47 185  BEGIN
10:40:47 186  	SELECT
10:40:47 187  	  COUNT(LICENSE.ID)
10:40:47 188  	  into
10:40:47 189  	  var_renewals_num
10:40:47 190  	FROM
10:40:47 191  	  LICENSE
10:40:47 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:40:47 193  	WHERE
10:40:47 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
10:40:47 195  	  AND LICENSE.OFFER_ID = in_offer_id
10:40:47 196  	  AND CHARGE.CHARGE_AMOUNT > 0
10:40:47 197  	  AND PROCS_CHARGE_V22.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V22.TRUE
10:40:47 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:40:47 199  
10:40:47 200  	RETURN var_renewals_num;
10:40:47 201  END FLR_RENEWALS_NUM;
10:40:47 202  
10:40:47 203  /******************************************************************************/
10:40:47 204  
10:40:47 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
10:40:47 206  	in_offer_id	       IN NUMBER,
10:40:47 207  	in_start_date	       IN DATE,
10:40:47 208  	in_end_date	       IN DATE
10:40:47 209  ) RETURN NUMBER AS
10:40:47 210  var_dollar_value NUMBER(10,2);
10:40:47 211  BEGIN
10:40:47 212  	SELECT
10:40:47 213  	  SUM(CHARGE.CHARGE_AMOUNT)
10:40:47 214  	  into
10:40:47 215  	  var_dollar_value
10:40:47 216  	FROM
10:40:47 217  	  LICENSE
10:40:47 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:40:47 219  	WHERE
10:40:47 220  	  LICENSE.OFFER_ID = in_offer_id
10:40:47 221  	  AND CHARGE.CHARGE_AMOUNT > 0
10:40:47 222  	  AND PROCS_CHARGE_V22.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V22.TRUE
10:40:47 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:40:47 224  
10:40:47 225  	RETURN var_dollar_value;
10:40:47 226  END FLR_TOTAL_DOLLAR_VALUE;
10:40:47 227  
10:40:47 228  /******************************************************************************/
10:40:47 229  
10:40:47 230  FUNCTION FLR_UNIQUE_PURCHASERS (
10:40:47 231  	in_offer_id	       IN NUMBER,
10:40:47 232  	in_start_date	       IN DATE,
10:40:47 233  	in_end_date	       IN DATE
10:40:47 234  ) RETURN NUMBER AS
10:40:47 235  -- CONSTANTS
10:40:47 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
10:40:47 237  -- VARIABLES
10:40:47 238  var_unique_purchasers NUMBER;
10:40:47 239  BEGIN
10:40:47 240  	SELECT
10:40:47 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
10:40:47 242  	FROM
10:40:47 243  	  LICENSE
10:40:47 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
10:40:47 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 246  	WHERE
10:40:47 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
10:40:47 248  	  AND LICENSE.OFFER_ID = in_offer_id
10:40:47 249  	  AND CHARGE.CHARGE_AMOUNT > 0
10:40:47 250  	  AND PROCS_CHARGE_V22.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V22.TRUE
10:40:47 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
10:40:47 252  
10:40:47 253  	RETURN var_unique_purchasers;
10:40:47 254  END;
10:40:47 255  
10:40:47 256  END PROCS_REPORTS_V22;
10:40:47 257  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE INCREMENT_VERSION
10:40:47   4  /*
10:40:47   5  Throws exceptions:
10:40:47   6  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47   7  */
10:40:47   8  AS
10:40:47   9  BEGIN
10:40:47  10  
10:40:47  11  	UPDATE SYS_VERSION SET version=version+1;
10:40:47  12  
10:40:47  13  END INCREMENT_VERSION;
10:40:47  14  
10:40:47  15  /*************************************************************/
10:40:47  16  
10:40:47  17  PROCEDURE CHECK_VERSION(
10:40:47  18  	  in_vers    IN NUMBER,
10:40:47  19  	  out_result OUT NUMBER
10:40:47  20  ) AS
10:40:47  21  	current_version NUMBER;
10:40:47  22  BEGIN
10:40:47  23  	SELECT version INTO current_version FROM SYS_VERSION;
10:40:47  24  	IF(current_version != in_vers) THEN
10:40:47  25  	  out_result := 1;
10:40:47  26  	ELSE
10:40:47  27  	  out_result := 0;
10:40:47  28  	END IF;
10:40:47  29  END CHECK_VERSION;
10:40:47  30  
10:40:47  31  END PROCS_SYSTEM_V22;
10:40:47  32  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.00
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE ADD_TAX (
10:40:47   4  	in_tax_type_id		 IN NUMBER,
10:40:47   5  	in_calculated_amount	 IN NUMBER,
10:40:47   6  	in_created_by		 IN VARCHAR2,
10:40:47   7  	in_line_item_id 	 IN NUMBER,
10:40:47   8  	in_effective_rate	 IN VARCHAR2,
10:40:47   9  	in_taxable_amount	 IN NUMBER,
10:40:47  10  	in_tax_rule_id		 IN NUMBER,
10:40:47  11  	in_jurisdiction_level_id IN NUMBER,
10:40:47  12  	in_jurisdiction_name	 IN VARCHAR2,
10:40:47  13  	in_jurisdiction_id	 IN VARCHAR2,
10:40:47  14  	in_ext_tax_type 	 IN VARCHAR2,
10:40:47  15  	in_ext_result		 IN VARCHAR2,
10:40:47  16  	in_imposition_type	 IN VARCHAR2,
10:40:47  17  	in_imposition		 IN VARCHAR2
10:40:47  18  ) AS
10:40:47  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
10:40:47  20  -- VARIABLES
10:40:47  21  var_new_tax_id	NUMBER;
10:40:47  22  temp_line_item_id NUMBER;
10:40:47  23  -- EXCEPTIONS
10:40:47  24  BAD_LINE_ITEM_ID EXCEPTION;
10:40:47  25  BEGIN
10:40:47  26  
10:40:47  27  	BEGIN
10:40:47  28  	  SELECT
10:40:47  29  	    LINE_ITEM.ID into temp_line_item_id
10:40:47  30  	  FROM
10:40:47  31  	    LINE_ITEM
10:40:47  32  	  WHERE
10:40:47  33  	    LINE_ITEM.ID = in_line_item_id;
10:40:47  34  	  EXCEPTION
10:40:47  35  	    WHEN NO_DATA_FOUND THEN
10:40:47  36  	      RAISE BAD_LINE_ITEM_ID;
10:40:47  37  	END;
10:40:47  38  
10:40:47  39  	var_new_tax_id := NULL;
10:40:47  40  
10:40:47  41  	PROCS_TAXES_CRU_V22.CREATE_TAX(
10:40:47  42  	  var_new_tax_id,
10:40:47  43  	  in_tax_type_id,
10:40:47  44  	  in_calculated_amount,
10:40:47  45  	  in_created_by,
10:40:47  46  	  in_line_item_id,
10:40:47  47  	  in_effective_rate,
10:40:47  48  	  in_taxable_amount,
10:40:47  49  	  in_tax_rule_id,
10:40:47  50  	  in_jurisdiction_level_id,
10:40:47  51  	  in_jurisdiction_name,
10:40:47  52  	  in_jurisdiction_id,
10:40:47  53  	  in_ext_tax_type,
10:40:47  54  	  in_ext_result,
10:40:47  55  	  in_imposition_type,
10:40:47  56  	  in_imposition
10:40:47  57  	);
10:40:47  58  
10:40:47  59  EXCEPTION
10:40:47  60  WHEN BAD_LINE_ITEM_ID THEN
10:40:47  61  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47  62  	  SPROC_NAME, 'No such line item');
10:40:47  63  WHEN OTHERS THEN
10:40:47  64  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47  66  END ADD_TAX;
10:40:47  67  
10:40:47  68  /******************************************************************************/
10:40:47  69  
10:40:47  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
10:40:47  71  	in_country_code IN CHAR,
10:40:47  72  	in_check_date IN DATE,
10:40:47  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V22.FALSE
10:40:47  74  ) AS
10:40:47  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
10:40:47  76  -- VARIABLES
10:40:47  77  var_countries_count NUMBER;
10:40:47  78  var_result	  NUMBER;
10:40:47  79  BEGIN
10:40:47  80  
10:40:47  81  	SELECT
10:40:47  82  	  COUNT(1) into var_countries_count
10:40:47  83  	FROM
10:40:47  84  	  TAX_COUNTRY_EXCLUSION_LIST
10:40:47  85  	WHERE
10:40:47  86  	  country_code = in_country_code
10:40:47  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
10:40:47  88  	  AND (
10:40:47  89  	    end_date is null
10:40:47  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
10:40:47  91  	  );
10:40:47  92  
10:40:47  93  	IF var_countries_count > 1 THEN
10:40:47  94  	  -- [REVU] Should not happen. DB structure error
10:40:47  95  	  var_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47  96  	ELSIF var_countries_count = 1 THEN
10:40:47  97  	  var_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47  98  	ELSE
10:40:47  99  	  var_result := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 100  	END IF;
10:40:47 101  
10:40:47 102  	out_is_founded := var_result;
10:40:47 103  
10:40:47 104  EXCEPTION
10:40:47 105  WHEN OTHERS THEN
10:40:47 106  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 108  END CHECK_COUNTRY_FOR_EXCLUSION;
10:40:47 109  
10:40:47 110  /******************************************************************************/
10:40:47 111  
10:40:47 112  PROCEDURE GET_TAX_CATEGORY (
10:40:47 113  	in_tax_category_id IN NUMBER,
10:40:47 114  	out_result_set	   OUT SYS_REFCURSOR
10:40:47 115  ) AS
10:40:47 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
10:40:47 117  BEGIN
10:40:47 118  
10:40:47 119  	OPEN out_result_set FOR
10:40:47 120  	SELECT
10:40:47 121  	  ID,
10:40:47 122  	  CODE,
10:40:47 123  	  DESCRIPTION
10:40:47 124  	FROM
10:40:47 125  	  TAX_CATEGORY
10:40:47 126  	WHERE
10:40:47 127  	  ID = in_tax_category_id;
10:40:47 128  
10:40:47 129  EXCEPTION
10:40:47 130  WHEN OTHERS THEN
10:40:47 131  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 133  END GET_TAX_CATEGORY;
10:40:47 134  
10:40:47 135  END PROCS_TAXES_V22;
10:40:47 136  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE CREATE_TRANSACTION (
10:40:47   4  /*
10:40:47   5  Throws exceptions:
10:40:47   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47   8  */
10:40:47   9  	in_transaction_id	  IN NUMBER,
10:40:47  10  	in_status_id		  IN NUMBER,
10:40:47  11  	in_amount		  IN NUMBER,
10:40:47  12  	in_created_by		  IN VARCHAR2,
10:40:47  13  	in_order_id		  IN VARCHAR2,
10:40:47  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE,
10:40:47  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:40:47  16  	out_transaction_id	  OUT NUMBER
10:40:47  17  ) AS
10:40:47  18  -- VARIABLES
10:40:47  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
10:40:47  20  var_transaction_count  NUMBER;
10:40:47  21  -- EXCEPTIONS
10:40:47  22  BAD_TRANSACTION_ID     EXCEPTION;
10:40:47  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47  24  BEGIN
10:40:47  25  
10:40:47  26  	IF in_transaction_id IS NOT NULL THEN
10:40:47  27  	  SELECT
10:40:47  28  	    COUNT(*) into var_transaction_count
10:40:47  29  	  FROM
10:40:47  30  	    TRANSACTION
10:40:47  31  	  WHERE
10:40:47  32  	    TRANSACTION.ID = in_transaction_id;
10:40:47  33  	  IF var_transaction_count > 0 THEN
10:40:47  34  	    RAISE BAD_TRANSACTION_ID;
10:40:47  35  	  END IF;
10:40:47  36  	END IF;
10:40:47  37  
10:40:47  38  	PROCS_TRANSACTION_CRU_V22.CREATE_TRANSACTION(
10:40:47  39  	  out_transaction_id	   => out_transaction_id,
10:40:47  40  	  in_transaction_id	   => in_transaction_id,
10:40:47  41  	  in_transaction_status_id => in_status_id,
10:40:47  42  	  in_transaction_amount    => in_amount,
10:40:47  43  	  in_created_by 	   => in_created_by,
10:40:47  44  	  in_order_id		   => in_order_id,
10:40:47  45  	  in_is_refund		   => in_is_refund,
10:40:47  46  	  in_transaction_type_code => in_transaction_type_code
10:40:47  47  	);
10:40:47  48  
10:40:47  49  EXCEPTION
10:40:47  50  WHEN BAD_TRANSACTION_ID THEN
10:40:47  51  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:47  52  	  SPROC_NAME, 'Transaction with given id already exists');
10:40:47  53  WHEN OTHERS THEN
10:40:47  54  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47  56  END CREATE_TRANSACTION;
10:40:47  57  
10:40:47  58  /******************************************************************************/
10:40:47  59  
10:40:47  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:40:47  61  /*
10:40:47  62  Throws exceptions:
10:40:47  63  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47  64  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47  65  */
10:40:47  66  	in_transaction_id	   IN NUMBER,
10:40:47  67  	in_trans_attempt_status    IN NUMBER,
10:40:47  68  	in_external_status_code    IN VARCHAR2,
10:40:47  69  	in_external_status_message IN VARCHAR2,
10:40:47  70  	in_created_by		   IN VARCHAR2,
10:40:47  71  	in_ext_transaction_id	   IN VARCHAR2,
10:40:47  72  	out_transaction_attempt_id OUT NUMBER
10:40:47  73  ) AS
10:40:47  74  -- VARIABLES
10:40:47  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
10:40:47  76  var_transaction_create_date DATE;
10:40:47  77  var_transaction_attempt_id  NUMBER;
10:40:47  78  
10:40:47  79  -- EXCEPTIONS
10:40:47  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
10:40:47  81  BAD_TRANSACTION_ID       EXCEPTION;
10:40:47  82  BEGIN
10:40:47  83  
10:40:47  84  	-- Check that transaction exists
10:40:47  85  	BEGIN
10:40:47  86  	  SELECT
10:40:47  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
10:40:47  88  	  FROM
10:40:47  89  	    TRANSACTION
10:40:47  90  	  WHERE
10:40:47  91  	    TRANSACTION.ID = in_transaction_id;
10:40:47  92  	  EXCEPTION
10:40:47  93  	    WHEN OTHERS THEN
10:40:47  94  	      RAISE BAD_TRANSACTION_ID;
10:40:47  95  	END;
10:40:47  96  
10:40:47  97  	-- Check that transaction status is correct
10:40:47  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_IN_PROGRESS
10:40:47  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_FAILED THEN
10:40:47 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:40:47 102  	END IF;
10:40:47 103  
10:40:47 104  	var_transaction_attempt_id := NULL;
10:40:47 105  	PROCS_TRANSACTION_CRU_V22.CREATE_TRANSACTION_ATTEMPT(
10:40:47 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
10:40:47 107  	  in_transaction_id	       => in_transaction_id,
10:40:47 108  	  in_external_status_code      => in_external_status_code,
10:40:47 109  	  in_external_status_message   => in_external_status_message,
10:40:47 110  	  in_created_by 	       => in_created_by,
10:40:47 111  	  in_external_transaction_id   => in_ext_transaction_id,
10:40:47 112  	  in_transaction_start_time    => var_transaction_create_date,
10:40:47 113  	  in_status_id		       => in_trans_attempt_status
10:40:47 114  	);
10:40:47 115  
10:40:47 116  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION(
10:40:47 117  	  in_transaction_id => in_transaction_id,
10:40:47 118  	  in_updated_by     => in_created_by
10:40:47 119  	);
10:40:47 120  
10:40:47 121  	out_transaction_attempt_id := var_transaction_attempt_id;
10:40:47 122  
10:40:47 123  EXCEPTION
10:40:47 124  WHEN BAD_TRANSACTION_ID THEN
10:40:47 125  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 126  	  SPROC_NAME, 'No such transaction');
10:40:47 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:40:47 128  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 129  	  SPROC_NAME, 'Bad transaction attempt status');
10:40:47 130  WHEN OTHERS THEN
10:40:47 131  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 133  END CREATE_TRANSACTION_ATTEMPT;
10:40:47 134  
10:40:47 135  /******************************************************************************/
10:40:47 136  
10:40:47 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:40:47 138  /*
10:40:47 139  Throws exceptions:
10:40:47 140  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 141  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 142  */
10:40:47 143  	in_transaction_id	 IN NUMBER,
10:40:47 144  	in_updated_by		 IN VARCHAR2,
10:40:47 145  	in_transaction_status_id IN NUMBER
10:40:47 146  ) AS
10:40:47 147  -- VARIABLES
10:40:47 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
10:40:47 149  temp_transaction_id NUMBER;
10:40:47 150  
10:40:47 151  -- EXCEPTIONS
10:40:47 152  BAD_TRANSACTION_ID     EXCEPTION;
10:40:47 153  BAD_TRANSACTION_STATUS EXCEPTION;
10:40:47 154  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 155  BEGIN
10:40:47 156  
10:40:47 157  	-- Check that transaction exists
10:40:47 158  	BEGIN
10:40:47 159  	  SELECT
10:40:47 160  	    TRANSACTION.ID into temp_transaction_id
10:40:47 161  	  FROM
10:40:47 162  	    TRANSACTION
10:40:47 163  	  WHERE
10:40:47 164  	    TRANSACTION.ID = in_transaction_id;
10:40:47 165  	  EXCEPTION
10:40:47 166  	    WHEN OTHERS THEN
10:40:47 167  	      RAISE BAD_TRANSACTION_ID;
10:40:47 168  	END;
10:40:47 169  
10:40:47 170  	-- Check that transaction status is correct
10:40:47 171  	IF    in_transaction_status_id != GLOBAL_STATUSES_V22.TRANSACTION_PENDING
10:40:47 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V22.TRANSACTION_CLOSED
10:40:47 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V22.TRANSACTION_CHARGEBACK
10:40:47 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V22.TRANSACTION_DECLINED THEN
10:40:47 175  	  RAISE BAD_TRANSACTION_STATUS;
10:40:47 176  	END IF;
10:40:47 177  
10:40:47 178  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION(
10:40:47 179  	  in_transaction_id	   => in_transaction_id,
10:40:47 180  	  in_updated_by 	   => in_updated_by,
10:40:47 181  	  in_transaction_status_id => in_transaction_status_id
10:40:47 182  	);
10:40:47 183  
10:40:47 184  EXCEPTION
10:40:47 185  WHEN BAD_TRANSACTION_ID THEN
10:40:47 186  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 187  	  SPROC_NAME, 'No such transaction');
10:40:47 188  WHEN BAD_TRANSACTION_STATUS THEN
10:40:47 189  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 190  	  SPROC_NAME, 'Bad transaction status');
10:40:47 191  WHEN OTHERS THEN
10:40:47 192  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 193  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 194  END UPDATE_TRANSACTION_STATUS;
10:40:47 195  
10:40:47 196  /******************************************************************************/
10:40:47 197  
10:40:47 198  PROCEDURE UPDATE_TRANSACTION_SETTLED (
10:40:47 199  /*
10:40:47 200  Throws exceptions:
10:40:47 201  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 202  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 203  */
10:40:47 204  	in_transaction_id	 IN NUMBER,
10:40:47 205  	in_updated_by		 IN VARCHAR2,
10:40:47 206  	in_is_settled		 IN NUMBER
10:40:47 207  ) AS
10:40:47 208  -- VARIABLES
10:40:47 209  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
10:40:47 210  temp_transaction_id NUMBER;
10:40:47 211  
10:40:47 212  -- EXCEPTIONS
10:40:47 213  BAD_TRANSACTION_ID     EXCEPTION;
10:40:47 214  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 215  BEGIN
10:40:47 216  
10:40:47 217  	-- Check that transaction exists
10:40:47 218  	BEGIN
10:40:47 219  	  SELECT
10:40:47 220  	    TRANSACTION.ID into temp_transaction_id
10:40:47 221  	  FROM
10:40:47 222  	    TRANSACTION
10:40:47 223  	  WHERE
10:40:47 224  	    TRANSACTION.ID = in_transaction_id;
10:40:47 225  	  EXCEPTION
10:40:47 226  	    WHEN OTHERS THEN
10:40:47 227  	      RAISE BAD_TRANSACTION_ID;
10:40:47 228  	END;
10:40:47 229  
10:40:47 230  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION(
10:40:47 231  	  in_transaction_id	   => in_transaction_id,
10:40:47 232  	  in_updated_by 	   => in_updated_by,
10:40:47 233  	  in_is_settled 	   => in_is_settled
10:40:47 234  	);
10:40:47 235  
10:40:47 236  EXCEPTION
10:40:47 237  WHEN BAD_TRANSACTION_ID THEN
10:40:47 238  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 239  	  SPROC_NAME, 'No such transaction');
10:40:47 240  WHEN OTHERS THEN
10:40:47 241  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 242  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 243  END UPDATE_TRANSACTION_SETTLED;
10:40:47 244  
10:40:47 245  /******************************************************************************/
10:40:47 246  
10:40:47 247  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:40:47 248  /*
10:40:47 249  Throws exceptions:
10:40:47 250  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 251  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 252  */
10:40:47 253  	in_transaction_attempt_id IN NUMBER,
10:40:47 254  	in_updated_by		  IN VARCHAR2
10:40:47 255  ) AS
10:40:47 256  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
10:40:47 257  -- VARIABLES
10:40:47 258  var_transaction_id NUMBER;
10:40:47 259  -- EXCEPTION
10:40:47 260  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
10:40:47 261  BEGIN
10:40:47 262  
10:40:47 263  	BEGIN
10:40:47 264  	  SELECT
10:40:47 265  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
10:40:47 266  	  FROM
10:40:47 267  	    TRANSACTION_ATTEMPT
10:40:47 268  	  WHERE
10:40:47 269  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:40:47 270  	  EXCEPTION
10:40:47 271  	    WHEN NO_DATA_FOUND THEN
10:40:47 272  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
10:40:47 273  	END;
10:40:47 274  
10:40:47 275  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION(
10:40:47 276  	  in_transaction_id => var_transaction_id,
10:40:47 277  	  in_updated_by     => in_updated_by
10:40:47 278  	);
10:40:47 279  
10:40:47 280  EXCEPTION
10:40:47 281  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
10:40:47 282  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 283  	  SPROC_NAME, 'No such transaction attempt');
10:40:47 284  WHEN OTHERS THEN
10:40:47 285  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 286  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 287  END UPDATE_TRNSCTN_ATTEMPT_TIME;
10:40:47 288  
10:40:47 289  /******************************************************************************/
10:40:47 290  
10:40:47 291  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:40:47 292  /*
10:40:47 293  Throws exceptions:
10:40:47 294  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 295  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 296  */
10:40:47 297  	in_transaction_attempt_id     IN NUMBER,
10:40:47 298  	in_transaction_attempt_status IN NUMBER
10:40:47 299  ) AS
10:40:47 300  -- VARIABLES
10:40:47 301  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
10:40:47 302  temp_transaction_attempt_id NUMBER;
10:40:47 303  
10:40:47 304  -- EXCEPTION
10:40:47 305  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
10:40:47 306  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
10:40:47 307  BEGIN
10:40:47 308  
10:40:47 309  	-- Check that transaction attempt exists
10:40:47 310  	BEGIN
10:40:47 311  	  SELECT
10:40:47 312  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
10:40:47 313  	  FROM
10:40:47 314  	    TRANSACTION_ATTEMPT
10:40:47 315  	  WHERE
10:40:47 316  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:40:47 317  	  EXCEPTION
10:40:47 318  	    WHEN NO_DATA_FOUND THEN
10:40:47 319  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
10:40:47 320  	END;
10:40:47 321  
10:40:47 322  	-- Check that transaction attempt is correct
10:40:47 323  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_IN_PROGRESS
10:40:47 324  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47 325  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_FAILED THEN
10:40:47 326  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:40:47 327  	END IF;
10:40:47 328  
10:40:47 329  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION_ATTEMPT(
10:40:47 330  	  in_transaction_attempt_id => in_transaction_attempt_id,
10:40:47 331  	  in_status_id		    => in_transaction_attempt_status
10:40:47 332  	);
10:40:47 333  
10:40:47 334  EXCEPTION
10:40:47 335  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
10:40:47 336  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 337  	  SPROC_NAME, 'No such transaction attempt');
10:40:47 338  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:40:47 339  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 340  	  SPROC_NAME, 'Bad transaction attempt status');
10:40:47 341  WHEN OTHERS THEN
10:40:47 342  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 343  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 344  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
10:40:47 345  
10:40:47 346  /******************************************************************************/
10:40:47 347  
10:40:47 348  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:40:47 349  /*
10:40:47 350  Throws exceptions:
10:40:47 351  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 352  */
10:40:47 353  	in_transaction_id	      IN NUMBER,
10:40:47 354  	in_transaction_attempt_status IN NUMBER,
10:40:47 355  	out_result_set		      OUT SYS_REFCURSOR
10:40:47 356  ) AS
10:40:47 357  -- VARIABLES
10:40:47 358  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
10:40:47 359  temp_transaction_id NUMBER;
10:40:47 360  -- EXCEPTIONS
10:40:47 361  BAD_TRANSACTION_ID       EXCEPTION;
10:40:47 362  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
10:40:47 363  BEGIN
10:40:47 364  
10:40:47 365  	-- Check that transaction exists
10:40:47 366  	BEGIN
10:40:47 367  	  SELECT
10:40:47 368  	    TRANSACTION.ID into temp_transaction_id
10:40:47 369  	  FROM
10:40:47 370  	    TRANSACTION
10:40:47 371  	  WHERE
10:40:47 372  	    TRANSACTION.ID = in_transaction_id;
10:40:47 373  	  EXCEPTION
10:40:47 374  	    WHEN OTHERS THEN
10:40:47 375  	      RAISE BAD_TRANSACTION_ID;
10:40:47 376  	END;
10:40:47 377  
10:40:47 378  	-- Check that transaction attempt status is correct
10:40:47 379  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_IN_PROGRESS
10:40:47 380  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47 381  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V22.TRANS_ATTEMPT_FAILED THEN
10:40:47 382  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
10:40:47 383  	END IF;
10:40:47 384  
10:40:47 385  	OPEN out_result_set FOR
10:40:47 386  	SELECT
10:40:47 387  	  TRANSACTION_ATTEMPT.ID,
10:40:47 388  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
10:40:47 389  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
10:40:47 390  	  TRANSACTION_ATTEMPT.CREATE_DATE,
10:40:47 391  	  TRANSACTION_ATTEMPT.CREATED_BY,
10:40:47 392  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
10:40:47 393  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
10:40:47 394  	  TRANSACTION.TRANSACTION_AMOUNT,
10:40:47 395  	  TRANSACTION.ID as "TRANSACTION_ID",
10:40:47 396  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
10:40:47 397  	FROM
10:40:47 398  	  TRANSACTION_ATTEMPT
10:40:47 399  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
10:40:47 400  	WHERE
10:40:47 401  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:40:47 402  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
10:40:47 403  
10:40:47 404  EXCEPTION
10:40:47 405  WHEN BAD_TRANSACTION_ID THEN
10:40:47 406  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 407  	  SPROC_NAME, 'No such transaction');
10:40:47 408  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
10:40:47 409  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 410  	  SPROC_NAME, 'Bad transaction attempt status');
10:40:47 411  WHEN OTHERS THEN
10:40:47 412  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 413  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 414  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
10:40:47 415  
10:40:47 416  /******************************************************************************/
10:40:47 417  
10:40:47 418  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:40:47 419  /*
10:40:47 420  Throws exceptions:
10:40:47 421  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 422  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 423  */
10:40:47 424  	in_transaction_attempt_id IN NUMBER,
10:40:47 425  	in_ext_status_code	  IN VARCHAR2,
10:40:47 426  	in_ext_status_message	  IN VARCHAR2,
10:40:47 427  	in_ext_transaction_id	  IN VARCHAR2
10:40:47 428  ) AS
10:40:47 429  -- VARIABLES
10:40:47 430  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
10:40:47 431  temp_trans_attempt_count NUMBER;
10:40:47 432  -- EXCEPTIONS
10:40:47 433  BAD_ATTEMPT_ID EXCEPTION;
10:40:47 434  BEGIN
10:40:47 435  
10:40:47 436  	SELECT
10:40:47 437  	  COUNT(*) into temp_trans_attempt_count
10:40:47 438  	FROM
10:40:47 439  	  TRANSACTION_ATTEMPT
10:40:47 440  	WHERE
10:40:47 441  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
10:40:47 442  
10:40:47 443  	IF temp_trans_attempt_count = 0 THEN
10:40:47 444  	  RAISE BAD_ATTEMPT_ID;
10:40:47 445  	END IF;
10:40:47 446  
10:40:47 447  	PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION_ATTEMPT(
10:40:47 448  	  in_transaction_attempt_id  => in_transaction_attempt_id,
10:40:47 449  	  in_external_status_code    => in_ext_status_code,
10:40:47 450  	  in_external_status_message => in_ext_status_message,
10:40:47 451  	  in_external_transaction_id => in_ext_transaction_id
10:40:47 452  	);
10:40:47 453  
10:40:47 454  EXCEPTION
10:40:47 455  WHEN BAD_ATTEMPT_ID THEN
10:40:47 456  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 457  	  SPROC_NAME, 'No such attempt');
10:40:47 458  WHEN OTHERS THEN
10:40:47 459  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 460  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 461  END UPDATE_TRANSACTION_ATTEMPT_INF;
10:40:47 462  
10:40:47 463  /******************************************************************************/
10:40:47 464  
10:40:47 465  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:40:47 466  /*
10:40:47 467  Throws exceptions:
10:40:47 468  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 469  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 470  */
10:40:47 471  	in_transaction_id IN  NUMBER,
10:40:47 472  	out_attempts_num  OUT NUMBER
10:40:47 473  ) AS
10:40:47 474  -- VARIABLES
10:40:47 475  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
10:40:47 476  temp_transaction_count NUMBER;
10:40:47 477  
10:40:47 478  -- EXCEPTIONS
10:40:47 479  BAD_TRANSACTION_ID EXCEPTION;
10:40:47 480  BEGIN
10:40:47 481  
10:40:47 482  	SELECT
10:40:47 483  	  COUNT(*) into temp_transaction_count
10:40:47 484  	FROM
10:40:47 485  	  TRANSACTION
10:40:47 486  	WHERE
10:40:47 487  	  TRANSACTION.ID = in_transaction_id;
10:40:47 488  
10:40:47 489  	IF temp_transaction_count = 0 THEN
10:40:47 490  	  RAISE BAD_TRANSACTION_ID;
10:40:47 491  	END IF;
10:40:47 492  
10:40:47 493  	SELECT
10:40:47 494  	  COUNT(*) into out_attempts_num
10:40:47 495  	FROM
10:40:47 496  	  TRANSACTION_ATTEMPT
10:40:47 497  	WHERE
10:40:47 498  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:40:47 499  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_FAILED;
10:40:47 500  
10:40:47 501  EXCEPTION
10:40:47 502  WHEN BAD_TRANSACTION_ID THEN
10:40:47 503  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 504  	  SPROC_NAME, 'No such transaction');
10:40:47 505  WHEN OTHERS THEN
10:40:47 506  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 507  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 508  END GET_FAILED_ATTEMPTS_NUMBER;
10:40:47 509  /******************************************************************************/
10:40:47 510  
10:40:47 511  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:40:47 512  /*
10:40:47 513  Throws exceptions:
10:40:47 514  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 515  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 516  */
10:40:47 517  	in_transaction_id IN  NUMBER,
10:40:47 518  	out_is_successfull  OUT NUMBER
10:40:47 519  ) AS
10:40:47 520  -- VARIABLES
10:40:47 521  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
10:40:47 522  temp_transaction_count NUMBER;
10:40:47 523  
10:40:47 524  -- EXCEPTIONS
10:40:47 525  BAD_TRANSACTION_ID EXCEPTION;
10:40:47 526  BEGIN
10:40:47 527  
10:40:47 528  	SELECT
10:40:47 529  	  COUNT(*) into temp_transaction_count
10:40:47 530  	FROM
10:40:47 531  	  TRANSACTION
10:40:47 532  	WHERE
10:40:47 533  	  TRANSACTION.ID = in_transaction_id;
10:40:47 534  
10:40:47 535  	IF temp_transaction_count = 0 THEN
10:40:47 536  	  RAISE BAD_TRANSACTION_ID;
10:40:47 537  	END IF;
10:40:47 538  
10:40:47 539  	SELECT
10:40:47 540  	  COUNT(*) into out_is_successfull
10:40:47 541  	FROM
10:40:47 542  	  TRANSACTION_ATTEMPT
10:40:47 543  	WHERE
10:40:47 544  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:40:47 545  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS;
10:40:47 546  
10:40:47 547  EXCEPTION
10:40:47 548  WHEN BAD_TRANSACTION_ID THEN
10:40:47 549  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 550  	  SPROC_NAME, 'No such transaction');
10:40:47 551  WHEN OTHERS THEN
10:40:47 552  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 553  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 554  END IS_TRANSACTION_SUCCESSFULL;
10:40:47 555  /******************************************************************************/
10:40:47 556  
10:40:47 557  PROCEDURE GET_TRANSACTION_AMOUNT (
10:40:47 558  /*
10:40:47 559  Throws exceptions:
10:40:47 560  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 561  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 562  */
10:40:47 563  	in_transaction_id      IN  NUMBER,
10:40:47 564  	out_transaction_amount OUT NUMBER
10:40:47 565  ) AS
10:40:47 566  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
10:40:47 567  BEGIN
10:40:47 568  
10:40:47 569  	SELECT
10:40:47 570  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
10:40:47 571  	FROM
10:40:47 572  	  TRANSACTION
10:40:47 573  	WHERE
10:40:47 574  	  TRANSACTION.ID = in_transaction_id;
10:40:47 575  
10:40:47 576  EXCEPTION
10:40:47 577  WHEN NO_DATA_FOUND THEN
10:40:47 578  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 579  	  SPROC_NAME, 'No such transaction');
10:40:47 580  WHEN OTHERS THEN
10:40:47 581  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 582  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 583  END GET_TRANSACTION_AMOUNT;
10:40:47 584  
10:40:47 585  /******************************************************************************/
10:40:47 586  
10:40:47 587  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
10:40:47 588  /*
10:40:47 589  Throws exceptions:
10:40:47 590  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 591  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 592  */
10:40:47 593  	in_charge_id   IN  NUMBER,
10:40:47 594  	out_result_set OUT SYS_REFCURSOR
10:40:47 595  ) AS
10:40:47 596  -- VARIABLES
10:40:47 597  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
10:40:47 598  temp_charge_id NUMBER;
10:40:47 599  -- EXCEPTIONS
10:40:47 600  BAD_CHARGE_ID EXCEPTION;
10:40:47 601  BEGIN
10:40:47 602  
10:40:47 603  	BEGIN
10:40:47 604  	  SELECT
10:40:47 605  	    CHARGE.ID into temp_charge_id
10:40:47 606  	  FROM
10:40:47 607  	    CHARGE
10:40:47 608  	  WHERE
10:40:47 609  	    CHARGE.ID = in_charge_id;
10:40:47 610  	  EXCEPTION
10:40:47 611  	    WHEN NO_DATA_FOUND THEN
10:40:47 612  	      RAISE BAD_CHARGE_ID;
10:40:47 613  	END;
10:40:47 614  
10:40:47 615  	OPEN out_result_set FOR
10:40:47 616  	SELECT DISTINCT
10:40:47 617  	  TRANSACTION.ID,
10:40:47 618  	  TRANSACTION.TRANSACTION_STATUS_ID,
10:40:47 619  	  TRANSACTION.CREATE_DATE,
10:40:47 620  	  TRANSACTION.TRANSACTION_AMOUNT,
10:40:47 621  	  TRANSACTION.IS_REFUND,
10:40:47 622  	  TRANSACTION.ORDER_ID
10:40:47 623  	FROM
10:40:47 624  	  CHARGE INNER JOIN TRANSACTION ON
10:40:47 625  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 626  	WHERE
10:40:47 627  	  CHARGE.ID = in_charge_id;
10:40:47 628  
10:40:47 629  EXCEPTION
10:40:47 630  WHEN BAD_CHARGE_ID THEN
10:40:47 631  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 632  	  SPROC_NAME, 'No such charge');
10:40:47 633  WHEN OTHERS THEN
10:40:47 634  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 635  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 636  END GET_TRANSACTIONS_BY_CHARGE_ID;
10:40:47 637  /******************************************************************************/
10:40:47 638  
10:40:47 639  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
10:40:47 640  /*
10:40:47 641  Throws exceptions:
10:40:47 642  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 643  */
10:40:47 644  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:40:47 645  	out_result_set OUT SYS_REFCURSOR
10:40:47 646  ) AS
10:40:47 647  -- VARIABLES
10:40:47 648  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
10:40:47 649  BEGIN
10:40:47 650  	OPEN out_result_set FOR
10:40:47 651  	SELECT DISTINCT
10:40:47 652  	  TRANSACTION.ID
10:40:47 653  	FROM
10:40:47 654  	  TRANSACTION
10:40:47 655  	WHERE
10:40:47 656  	  TRANSACTION.ORDER_ID = in_order_id;
10:40:47 657  
10:40:47 658  EXCEPTION
10:40:47 659  WHEN OTHERS THEN
10:40:47 660  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 661  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 662  END GET_TRANSACTION_BY_ORDER_ID;
10:40:47 663  /******************************************************************************/
10:40:47 664  
10:40:47 665  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
10:40:47 666  /*
10:40:47 667  Throws exceptions:
10:40:47 668  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 669  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 670  */
10:40:47 671  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
10:40:47 672  	out_result_set OUT SYS_REFCURSOR
10:40:47 673  ) AS
10:40:47 674  -- VARIABLES
10:40:47 675  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
10:40:47 676  temp_order_id TRANSACTION.ORDER_ID%TYPE;
10:40:47 677  -- EXCEPTIONS
10:40:47 678  BAD_ORDER_ID EXCEPTION;
10:40:47 679  BEGIN
10:40:47 680  
10:40:47 681  	--TODO BOO, REMOVE ME
10:40:47 682  	BEGIN
10:40:47 683  	  SELECT
10:40:47 684  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
10:40:47 685  	  FROM
10:40:47 686  	    TRANSACTION
10:40:47 687  	  WHERE
10:40:47 688  	    TRANSACTION.ORDER_ID = in_order_id;
10:40:47 689  	  EXCEPTION
10:40:47 690  	    WHEN NO_DATA_FOUND THEN
10:40:47 691  	      RAISE BAD_ORDER_ID;
10:40:47 692  	END;
10:40:47 693  
10:40:47 694  	OPEN out_result_set FOR
10:40:47 695  	SELECT c.ID CHARGE_ID,
10:40:47 696  	  c.CHARGE_AMOUNT,
10:40:47 697  	  c.CHARGE_STATUS_ID,
10:40:47 698  	  c.INSTRUMENT_ID,
10:40:47 699  	  c.INSTRUMENT_TYPE_ID,
10:40:47 700  	  c.INVOICE_ID,
10:40:47 701  	  t.ID TRANSACTION_ID,
10:40:47 702  	  t.IS_REFUND,
10:40:47 703  	  t.IS_SETTLED,
10:40:47 704  	  t.ORDER_ID,
10:40:47 705  	  t.TRANSACTION_AMOUNT,
10:40:47 706  	  t.TRANSACTION_STATUS_ID,
10:40:47 707  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
10:40:47 708  	  t.CREATED_BY TRANSACTION_CREATED_BY,
10:40:47 709  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
10:40:47 710  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
10:40:47 711  	FROM CHARGE c
10:40:47 712  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
10:40:47 713  	WHERE TRANSACTION_ID IN (
10:40:47 714  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
10:40:47 715  	);
10:40:47 716  
10:40:47 717  EXCEPTION
10:40:47 718  WHEN BAD_ORDER_ID THEN
10:40:47 719  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 720  	  SPROC_NAME, 'No such order');
10:40:47 721  WHEN OTHERS THEN
10:40:47 722  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 723  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 724  END GET_TRANSACTIONS_BY_ORDER_ID;
10:40:47 725  /******************************************************************************/
10:40:47 726  
10:40:47 727  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:40:47 728  /*
10:40:47 729  Throws exceptions:
10:40:47 730  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 731  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 732  */
10:40:47 733  	in_invoice_id	IN  NUMBER,
10:40:47 734  	out_result_set OUT SYS_REFCURSOR
10:40:47 735  ) AS
10:40:47 736  -- VARIABLES
10:40:47 737  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
10:40:47 738  temp_invoice_id NUMBER;
10:40:47 739  -- EXCEPTIONS
10:40:47 740  BAD_INVOICE_ID EXCEPTION;
10:40:47 741  BEGIN
10:40:47 742  
10:40:47 743  	BEGIN
10:40:47 744  	  SELECT
10:40:47 745  	    INVOICE.ID into temp_invoice_id
10:40:47 746  	  FROM
10:40:47 747  	    INVOICE
10:40:47 748  	  WHERE
10:40:47 749  	    INVOICE.ID = in_invoice_id;
10:40:47 750  	  EXCEPTION
10:40:47 751  	    WHEN NO_DATA_FOUND THEN
10:40:47 752  	      RAISE BAD_INVOICE_ID;
10:40:47 753  	END;
10:40:47 754  
10:40:47 755  	OPEN out_result_set FOR
10:40:47 756  	SELECT DISTINCT
10:40:47 757  	  TRANSACTION.ID,
10:40:47 758  	  TRANSACTION.TRANSACTION_STATUS_ID,
10:40:47 759  	  TRANSACTION.CREATE_DATE,
10:40:47 760  	  TRANSACTION.UPDATE_DATE,
10:40:47 761  	  TRANSACTION.ORDER_ID,
10:40:47 762  	  TRANSACTION.TRANSACTION_AMOUNT
10:40:47 763  	FROM
10:40:47 764  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
10:40:47 765  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
10:40:47 766  	WHERE
10:40:47 767  	  INVOICE.ID = in_invoice_id
10:40:47 768  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 769  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
10:40:47 770  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_CLOSED;
10:40:47 771  
10:40:47 772  EXCEPTION
10:40:47 773  WHEN BAD_INVOICE_ID THEN
10:40:47 774  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 775  	  SPROC_NAME, 'No such invoice');
10:40:47 776  WHEN OTHERS THEN
10:40:47 777  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 778  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 779  END GET_CLOSED_REFUNDS_BY_INVOICE;
10:40:47 780  
10:40:47 781  /******************************************************************************/
10:40:47 782  
10:40:47 783  PROCEDURE GET_TRANSACTION_ATTEMPTS (
10:40:47 784  /*
10:40:47 785  Throws exceptions:
10:40:47 786  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 787  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 788  */
10:40:47 789  	in_transaction_id IN  NUMBER,
10:40:47 790  	out_result_set	  OUT SYS_REFCURSOR
10:40:47 791  ) AS
10:40:47 792  -- VARIABLES
10:40:47 793  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
10:40:47 794  temp_transaction_id NUMBER;
10:40:47 795  -- EXCEPTIONS
10:40:47 796  BAD_TRANSACTION_ID EXCEPTION;
10:40:47 797  BEGIN
10:40:47 798  
10:40:47 799  	BEGIN
10:40:47 800  	  SELECT
10:40:47 801  	    TRANSACTION.ID into temp_transaction_id
10:40:47 802  	  FROM
10:40:47 803  	    TRANSACTION
10:40:47 804  	  WHERE
10:40:47 805  	    TRANSACTION.ID = in_transaction_id;
10:40:47 806  	  EXCEPTION
10:40:47 807  	    WHEN NO_DATA_FOUND THEN
10:40:47 808  	      RAISE BAD_TRANSACTION_ID;
10:40:47 809  	END;
10:40:47 810  
10:40:47 811  	OPEN out_result_set FOR
10:40:47 812  	SELECT
10:40:47 813  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
10:40:47 814  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
10:40:47 815  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
10:40:47 816  	  TRANSACTION_ATTEMPT.CREATE_DATE,
10:40:47 817  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
10:40:47 818  	FROM
10:40:47 819  	  TRANSACTION_ATTEMPT
10:40:47 820  	WHERE
10:40:47 821  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
10:40:47 822  
10:40:47 823  EXCEPTION
10:40:47 824  WHEN BAD_TRANSACTION_ID THEN
10:40:47 825  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 826  	  SPROC_NAME, 'No such transaction');
10:40:47 827  WHEN OTHERS THEN
10:40:47 828  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 830  END GET_TRANSACTION_ATTEMPTS;
10:40:47 831  
10:40:47 832  /******************************************************************************/
10:40:47 833  
10:40:47 834  PROCEDURE RESERVE_TRANSACTION_ID (
10:40:47 835  /*
10:40:47 836  Throws exceptions:
10:40:47 837  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 838  */
10:40:47 839  	out_transaction_id OUT NUMBER
10:40:47 840  ) AS
10:40:47 841  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
10:40:47 842  BEGIN
10:40:47 843  	SELECT
10:40:47 844  	  TRN_ID_SEQ.nextVal into out_transaction_id
10:40:47 845  	FROM DUAL;
10:40:47 846  EXCEPTION
10:40:47 847  WHEN OTHERS THEN
10:40:47 848  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 849  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 850  END RESERVE_TRANSACTION_ID;
10:40:47 851  
10:40:47 852  /******************************************************************************/
10:40:47 853  
10:40:47 854  PROCEDURE GET_TRANSACTION_BY_ID (
10:40:47 855  /*
10:40:47 856  Throws exceptions:
10:40:47 857  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 858  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 859  */
10:40:47 860  	in_transaction_id IN NUMBER,
10:40:47 861  	out_result_set	  OUT SYS_REFCURSOR
10:40:47 862  ) AS
10:40:47 863  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
10:40:47 864  -- VARIABLES
10:40:47 865  temp_transaction_id NUMBER;
10:40:47 866  -- EXCPTIONS
10:40:47 867  BAD_TRANSACTION_ID EXCEPTION;
10:40:47 868  BEGIN
10:40:47 869  	BEGIN
10:40:47 870  	  SELECT
10:40:47 871  	    TRANSACTION.ID into temp_transaction_id
10:40:47 872  	  FROM
10:40:47 873  	    TRANSACTION
10:40:47 874  	  WHERE
10:40:47 875  	    TRANSACTION.ID = in_transaction_id;
10:40:47 876  	  EXCEPTION
10:40:47 877  	    WHEN NO_DATA_FOUND THEN
10:40:47 878  	      RAISE BAD_TRANSACTION_ID;
10:40:47 879  	END;
10:40:47 880  
10:40:47 881  	PROCS_TRANSACTION_CRU_V22.READ_TRANSACTION(
10:40:47 882  	  in_transaction_id => in_transaction_id,
10:40:47 883  	  out_result_set    => out_result_set
10:40:47 884  	);
10:40:47 885  
10:40:47 886  EXCEPTION
10:40:47 887  WHEN NO_DATA_FOUND THEN
10:40:47 888  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 889  	  SPROC_NAME, 'No such transaction');
10:40:47 890  WHEN OTHERS THEN
10:40:47 891  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 892  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 893  END GET_TRANSACTION_BY_ID;
10:40:47 894  
10:40:47 895  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:47 896  /*
10:40:47 897  Throws exceptions:
10:40:47 898  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 899  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:47 900  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 901  */
10:40:47 902  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:47 903  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:47 904  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:47 905  ) AS
10:40:47 906  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
10:40:47 907  -- VARIABLES
10:40:47 908  temp_transaction_id TRANSACTION.ID%TYPE;
10:40:47 909  -- EXCEPTIONS
10:40:47 910  BAD_TRANSACTION_ID   EXCEPTION;
10:40:47 911  ORDER_ID_IS_NOT_NULL EXCEPTION;
10:40:47 912  CRU_UNKNOWN_ERROR    EXCEPTION;
10:40:47 913  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 914  BEGIN
10:40:47 915  	BEGIN
10:40:47 916  	  SELECT
10:40:47 917  	    TRANSACTION.ID into temp_transaction_id
10:40:47 918  	  FROM
10:40:47 919  	    TRANSACTION
10:40:47 920  	  WHERE
10:40:47 921  	    TRANSACTION.ID = in_transaction_id;
10:40:47 922  	  EXCEPTION
10:40:47 923  	    WHEN NO_DATA_FOUND THEN
10:40:47 924  	      RAISE BAD_TRANSACTION_ID;
10:40:47 925  	END;
10:40:47 926  
10:40:47 927  	BEGIN
10:40:47 928  	  PROCS_TRANSACTION_CRU_V22.UPDATE_TRANSACTION_ORDER_ID(
10:40:47 929  	    in_transaction_id => in_transaction_id,
10:40:47 930  	    in_order_id       => in_order_id,
10:40:47 931  	    in_updated_by     => in_updated_by
10:40:47 932  	  );
10:40:47 933  	  EXCEPTION
10:40:47 934  	    WHEN OTHERS THEN
10:40:47 935  	      IF SQLCODE = APP_EXCEPTION_CODES_V22.NOT_FOUND THEN
10:40:47 936  		RAISE ORDER_ID_IS_NOT_NULL;
10:40:47 937  	      ELSE
10:40:47 938  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 939  		RAISE CRU_UNKNOWN_ERROR;
10:40:47 940  	      END IF;
10:40:47 941  	END;
10:40:47 942  
10:40:47 943  EXCEPTION
10:40:47 944  WHEN BAD_TRANSACTION_ID THEN
10:40:47 945  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 946  	  SPROC_NAME, 'No such transaction');
10:40:47 947  WHEN ORDER_ID_IS_NOT_NULL THEN
10:40:47 948  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 949  	  SPROC_NAME, 'Order id is not null');
10:40:47 950  WHEN CRU_UNKNOWN_ERROR THEN
10:40:47 951  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 952  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
10:40:47 953  WHEN OTHERS THEN
10:40:47 954  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 955  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 956  END UPDATE_TRANSACTION_ORDER_ID;
10:40:47 957  
10:40:47 958  /******************************************************************************/
10:40:47 959  
10:40:47 960  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
10:40:47 961  	in_transaction_id IN NUMBER
10:40:47 962  ) RETURN NUMBER AS
10:40:47 963  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
10:40:47 964  -- Variables
10:40:47 965  var_tax_amount NUMBER(10,2);
10:40:47 966  BEGIN
10:40:47 967  
10:40:47 968  	SELECT
10:40:47 969  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
10:40:47 970  	FROM
10:40:47 971  	  LINE_ITEM LI
10:40:47 972  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
10:40:47 973  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
10:40:47 974  	WHERE
10:40:47 975  	  CH.TRANSACTION_ID = in_transaction_id;
10:40:47 976  
10:40:47 977  	IF var_tax_amount IS NULL THEN
10:40:47 978  	  var_tax_amount := 0;
10:40:47 979  	END IF;
10:40:47 980  
10:40:47 981  	RETURN var_tax_amount;
10:40:47 982  
10:40:47 983  END GET_TRANSACTION_TAX_AMOUNT;
10:40:47 984  
10:40:47 985  /******************************************************************************/
10:40:47 986  
10:40:47 987  FUNCTION GET_TRANSACTION_INTRL_TAXES (
10:40:47 988  	in_transaction_id IN NUMBER
10:40:47 989  ) RETURN NUMBER AS
10:40:47 990  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
10:40:47 991  -- Variables
10:40:47 992  var_intrl_tax_amount NUMBER(10, 2);
10:40:47 993  BEGIN
10:40:47 994  
10:40:47 995  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
10:40:47 996  	FROM
10:40:47 997  	  LINE_ITEM LI
10:40:47 998  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
10:40:47 999  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
10:40:47 1000  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
10:40:47 1001  	 WHERE
10:40:47 1002  	   CH.TRANSACTION_ID = in_transaction_id
10:40:47 1003  	   AND T.TAX_TYPE_ID IN (
10:40:47 1004  	     SELECT GLOBAL_ENUMS_V22.TAX_TYPE_VAT FROM DUAL
10:40:47 1005  	   );
10:40:47 1006  
10:40:47 1007  	 IF var_intrl_tax_amount IS NULL THEN
10:40:47 1008  	   var_intrl_tax_amount := 0;
10:40:47 1009  	 END IF;
10:40:47 1010  
10:40:47 1011  	 RETURN var_intrl_tax_amount;
10:40:47 1012  
10:40:47 1013  END GET_TRANSACTION_INTRL_TAXES;
10:40:47 1014  
10:40:47 1015  /******************************************************************************/
10:40:47 1016  -- norlov: #38796
10:40:47 1017  PROCEDURE GET_TRANSACTIONS (
10:40:47 1018  /*
10:40:47 1019  Throws exceptions:
10:40:47 1020  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1021  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1022  */
10:40:47 1023  	 in_group_id	       IN  NUMBER,
10:40:47 1024  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
10:40:47 1025  	 in_subscription_id    IN NUMBER DEFAULT NULL,
10:40:47 1026  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:40:47 1027  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
10:40:47 1028  	 in_transaction_status IN NUMBER DEFAULT NULL,
10:40:47 1029  	 out_result_set        OUT SYS_REFCURSOR
10:40:47 1030  ) AS
10:40:47 1031  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
10:40:47 1032  -- VARIABLES
10:40:47 1033  var_account_id ACCOUNT.ID%TYPE;
10:40:47 1034  statement VARCHAR2(2000);
10:40:47 1035  -- EXCEPTIONS
10:40:47 1036  BAD_GROUP_ID   EXCEPTION;
10:40:47 1037  BEGIN
10:40:47 1038  	-- check group id
10:40:47 1039  	BEGIN
10:40:47 1040  	   SELECT
10:40:47 1041  	     ACCOUNT.ID into var_account_id
10:40:47 1042  	   FROM
10:40:47 1043  	     ACCOUNT
10:40:47 1044  	   WHERE
10:40:47 1045  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 1046  	   EXCEPTION
10:40:47 1047  	     WHEN NO_DATA_FOUND THEN
10:40:47 1048  	       RAISE BAD_GROUP_ID;
10:40:47 1049  	 END;
10:40:47 1050  
10:40:47 1051  	 OPEN out_result_set FOR
10:40:47 1052  	 SELECT
10:40:47 1053  	   TRANSACTION.ID,
10:40:47 1054  	   TRANSACTION.TRANSACTION_STATUS_ID,
10:40:47 1055  	   TRANSACTION.TRANSACTION_AMOUNT,
10:40:47 1056  	   TRANSACTION.CREATE_DATE,
10:40:47 1057  	   TRANSACTION.CREATED_BY,
10:40:47 1058  	   TRANSACTION.IS_REFUND,
10:40:47 1059  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
10:40:47 1060  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
10:40:47 1061  	 FROM
10:40:47 1062  	   TRANSACTION
10:40:47 1063  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:40:47 1064  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
10:40:47 1065  	 WHERE
10:40:47 1066  	   -- Filter by invoice ID
10:40:47 1067  	   (
10:40:47 1068  	     INVOICE.ID IN (
10:40:47 1069  	       -- Gift certificate invoices
10:40:47 1070  	       SELECT
10:40:47 1071  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
10:40:47 1072  	       FROM
10:40:47 1073  		 GIFT_CERTIFICATE
10:40:47 1074  	       WHERE
10:40:47 1075  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:40:47 1076  		 -- If subscription_id is set then return nothing
10:40:47 1077  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
10:40:47 1078  	     )
10:40:47 1079  	     OR
10:40:47 1080  	     INVOICE.ID IN (
10:40:47 1081  	       SELECT
10:40:47 1082  		 LICENSE.INVOICE_ID
10:40:47 1083  	       FROM
10:40:47 1084  		 LICENSE
10:40:47 1085  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 1086  	       WHERE
10:40:47 1087  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:47 1088  		 -- Filter by subscription id
10:40:47 1089  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
10:40:47 1090  	     )
10:40:47 1091  	   )
10:40:47 1092  	   -- Filter by invoice id
10:40:47 1093  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
10:40:47 1094  	   -- Filter by start date
10:40:47 1095  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
10:40:47 1096  	   -- Filter by end date
10:40:47 1097  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
10:40:47 1098  	   -- Filter by transaction status
10:40:47 1099  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
10:40:47 1100  
10:40:47 1101  /*
10:40:47 1102  
10:40:47 1103  statement :=  'select distinct '||CHR(10)
10:40:47 1104  || ' TRANSACTION.ID,'||CHR(10)
10:40:47 1105  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
10:40:47 1106  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
10:40:47 1107  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
10:40:47 1108  || ' TRANSACTION.CREATED_BY, '||CHR(10)
10:40:47 1109  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
10:40:47 1110  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
10:40:47 1111  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
10:40:47 1112  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
10:40:47 1113  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
10:40:47 1114  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
10:40:47 1115  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
10:40:47 1116  
10:40:47 1117  IF (in_transaction_status IS NOT NULL) THEN
10:40:47 1118  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
10:40:47 1119  END IF;
10:40:47 1120  
10:40:47 1121  IF (in_invoice_id IS NOT NULL) THEN
10:40:47 1122  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
10:40:47 1123  END IF;
10:40:47 1124  
10:40:47 1125  IF (in_subscription_id IS NOT NULL) THEN
10:40:47 1126  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
10:40:47 1127  END IF;
10:40:47 1128  
10:40:47 1129  IF (in_start_date IS NOT NULL) THEN
10:40:47 1130  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
10:40:47 1131  END IF;
10:40:47 1132  
10:40:47 1133  IF (in_end_date IS NOT NULL) THEN
10:40:47 1134  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
10:40:47 1135  END IF;
10:40:47 1136  dbms_output.put_line(statement);
10:40:47 1137  OPEN out_result_set FOR statement;
10:40:47 1138  
10:40:47 1139  */
10:40:47 1140  
10:40:47 1141  EXCEPTION
10:40:47 1142  WHEN BAD_GROUP_ID THEN
10:40:47 1143  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1144  	   SPROC_NAME, 'No such group');
10:40:47 1145  WHEN OTHERS THEN
10:40:47 1146  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1147  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1148  END GET_TRANSACTIONS;
10:40:47 1149  
10:40:47 1150  FUNCTION IS_TRANSACTION_COLLECTED (
10:40:47 1151  /*
10:40:47 1152  Throws:
10:40:47 1153  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1154  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1155  Returns:
10:40:47 1156  GLOBAL_CONST.TRUE if transaction collected,
10:40:47 1157  GLOBAL_CONST.FALSE else
10:40:47 1158  */
10:40:47 1159  	 in_transaction_id IN NUMBER
10:40:47 1160  ) RETURN NUMBER AS
10:40:47 1161  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
10:40:47 1162  -- VARIABLES
10:40:47 1163  temp_transaction_id     NUMBER;
10:40:47 1164  var_success_attemps_num NUMBER;
10:40:47 1165  -- EXCEPTIONS
10:40:47 1166  BAD_TRANSACTION_ID EXCEPTION;
10:40:47 1167  BEGIN
10:40:47 1168  
10:40:47 1169  	 BEGIN
10:40:47 1170  	   SELECT
10:40:47 1171  	     TRANSACTION.ID into temp_transaction_id
10:40:47 1172  	   FROM
10:40:47 1173  	     TRANSACTION
10:40:47 1174  	   WHERE
10:40:47 1175  	     TRANSACTION.ID = in_transaction_id;
10:40:47 1176  	   EXCEPTION
10:40:47 1177  	     WHEN NO_DATA_FOUND THEN
10:40:47 1178  	       RAISE BAD_TRANSACTION_ID;
10:40:47 1179  	 END;
10:40:47 1180  
10:40:47 1181  	 SELECT
10:40:47 1182  	   COUNT(*) into var_success_attemps_num
10:40:47 1183  	 FROM
10:40:47 1184  	   TRANSACTION_ATTEMPT
10:40:47 1185  	 WHERE
10:40:47 1186  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
10:40:47 1187  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS FROM DUAL );
10:40:47 1188  
10:40:47 1189  	 IF var_success_attemps_num > 0 THEN
10:40:47 1190  	   RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 1191  	 ELSE
10:40:47 1192  	   RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 1193  	 END IF;
10:40:47 1194  
10:40:47 1195  EXCEPTION
10:40:47 1196  WHEN BAD_TRANSACTION_ID THEN
10:40:47 1197  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1198  	   SPROC_NAME, 'No such transaction');
10:40:47 1199  WHEN OTHERS THEN
10:40:47 1200  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1201  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1202  END IS_TRANSACTION_COLLECTED;
10:40:47 1203  
10:40:47 1204  
10:40:47 1205  /******************************************************************************/
10:40:47 1206  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:40:47 1207  /*
10:40:47 1208  Throws exceptions:
10:40:47 1209  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1210  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1211  */
10:40:47 1212  	 in_charge_id	in  number,
10:40:47 1213  	 out_attempt_count OUT NUMBER
10:40:47 1214  ) AS
10:40:47 1215  -- VARIABLES
10:40:47 1216  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
10:40:47 1217  temp_transaction_id NUMBER;
10:40:47 1218  -- EXCEPTIONS
10:40:47 1219  BAD_CHARGE_ID EXCEPTION;
10:40:47 1220  BEGIN
10:40:47 1221  
10:40:47 1222  	 BEGIN
10:40:47 1223  	   SELECT
10:40:47 1224  	     TRANSACTION_ID into temp_transaction_id
10:40:47 1225  	   FROM
10:40:47 1226  	     CHARGE
10:40:47 1227  	   WHERE
10:40:47 1228  	     CHARGE.ID = in_charge_id;
10:40:47 1229  	   EXCEPTION
10:40:47 1230  	     WHEN NO_DATA_FOUND THEN
10:40:47 1231  	       RAISE BAD_CHARGE_ID;
10:40:47 1232  	 END;
10:40:47 1233  
10:40:47 1234  	 select
10:40:47 1235  	   count(1)
10:40:47 1236  	 into
10:40:47 1237  	   out_attempt_count
10:40:47 1238  	 from
10:40:47 1239  	   transaction tr
10:40:47 1240  	 inner join
10:40:47 1241  	   transaction_attempt ta
10:40:47 1242  	 on (tr.id = ta.transaction_id)
10:40:47 1243  	 where
10:40:47 1244  	   tr.ID = temp_transaction_id;
10:40:47 1245  
10:40:47 1246  	 out_attempt_count := out_attempt_count + 1;
10:40:47 1247  
10:40:47 1248  EXCEPTION
10:40:47 1249  WHEN BAD_CHARGE_ID THEN
10:40:47 1250  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1251  	   SPROC_NAME, 'No such charge');
10:40:47 1252  WHEN OTHERS THEN
10:40:47 1253  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1254  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1255  end GET_NEXT_ATTEMPT_NUMBER;
10:40:47 1256  /******************************************************************************/
10:40:47 1257  
10:40:47 1258  END PROCS_TRANSACTION_V22;
10:40:47 1259  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.05
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE CREATE_LICENSE(
10:40:47   4  /*
10:40:47   5  Throws exceptions:
10:40:47   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47   8  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47   9  */
10:40:47  10  	in_status_id		    IN NUMBER,
10:40:47  11  	in_needs_entitlements	    IN NUMBER,
10:40:47  12  	in_start_date		    IN DATE,
10:40:47  13  	in_end_date		    IN DATE,
10:40:47  14  	in_offer_id		    IN NUMBER,
10:40:47  15  	in_subscription_id	    IN NUMBER,
10:40:47  16  	in_invoice_id		    IN NUMBER,
10:40:47  17  	in_created_by		    IN VARCHAR2,
10:40:47  18  	in_is_extension 	    IN NUMBER,
10:40:47  19  	in_current_offer_index	    IN NUMBER,
10:40:47  20  	in_current_offer_recurr_num IN NUMBER,
10:40:47  21  	out_license_id		    OUT NUMBER
10:40:47  22  ) AS
10:40:47  23  -- VARIABLES
10:40:47  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
10:40:47  25  temp_offer_id	   NUMBER;
10:40:47  26  temp_subscription_id NUMBER;
10:40:47  27  temp_invoice_id	   NUMBER;
10:40:47  28  
10:40:47  29  var_new_license_id NUMBER;
10:40:47  30  var_offer_duration VARCHAR2(30);
10:40:47  31  
10:40:47  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
10:40:47  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
10:40:47  34  var_offer_years	    NUMBER;
10:40:47  35  var_offer_months	    NUMBER;
10:40:47  36  var_offer_days	    NUMBER;
10:40:47  37  
10:40:47  38  -- EXCEPTIONS
10:40:47  39  BAD_OFFER_ID	     EXCEPTION;
10:40:47  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:40:47  41  BAD_INVOICE_ID	     EXCEPTION;
10:40:47  42  BAD_OFFER_DURATION     EXCEPTION;
10:40:47  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47  44  BEGIN
10:40:47  45  
10:40:47  46  	-- TODO:
10:40:47  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
10:40:47  48  
10:40:47  49  	out_license_id := NULL;
10:40:47  50  
10:40:47  51  	-- get offer id and offer entitlement duration
10:40:47  52  	BEGIN
10:40:47  53  	  SELECT
10:40:47  54  	    OFFER.ID,
10:40:47  55  	    OFFER.ENTITLEMENT_DURATION
10:40:47  56  	    into
10:40:47  57  	    temp_offer_id,
10:40:47  58  	    var_offer_duration
10:40:47  59  	  FROM
10:40:47  60  	    OFFER
10:40:47  61  	  WHERE
10:40:47  62  	    OFFER.ID = in_offer_id;
10:40:47  63  	  EXCEPTION
10:40:47  64  	  WHEN NO_DATA_FOUND THEN
10:40:47  65  	    RAISE BAD_OFFER_ID;
10:40:47  66  	END;
10:40:47  67  
10:40:47  68  	-- Check that subscription exists
10:40:47  69  	BEGIN
10:40:47  70  	  SELECT
10:40:47  71  	    SUBSCRIPTION.ID into temp_subscription_id
10:40:47  72  	  FROM
10:40:47  73  	    SUBSCRIPTION
10:40:47  74  	  WHERE
10:40:47  75  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:47  76  	  EXCEPTION
10:40:47  77  	  WHEN NO_DATA_FOUND THEN
10:40:47  78  	    RAISE BAD_SUBSCRIPTION_ID;
10:40:47  79  	END;
10:40:47  80  
10:40:47  81  	-- Check that invoice exists
10:40:47  82  	BEGIN
10:40:47  83  	  SELECT
10:40:47  84  	    INVOICE.ID into temp_invoice_id
10:40:47  85  	  FROM
10:40:47  86  	    INVOICE
10:40:47  87  	  WHERE
10:40:47  88  	    INVOICE.ID = in_invoice_id;
10:40:47  89  	  EXCEPTION
10:40:47  90  	  WHEN NO_DATA_FOUND THEN
10:40:47  91  	    RAISE BAD_INVOICE_ID;
10:40:47  92  	END;
10:40:47  93  
10:40:47  94  	-- convert offer duration into intervals
10:40:47  95  	BEGIN
10:40:47  96  	  PROCS_COMMON_V22.ISO8601DURATION_TO_INTERVALS(
10:40:47  97  	    var_offer_duration,
10:40:47  98  	    var_offer_years,
10:40:47  99  	    var_offer_months,
10:40:47 100  	    var_offer_days);
10:40:47 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
10:40:47 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
10:40:47 103  	  EXCEPTION
10:40:47 104  	    WHEN OTHERS THEN
10:40:47 105  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 106  	      RAISE BAD_OFFER_DURATION;
10:40:47 107  	END;
10:40:47 108  
10:40:47 109  	-- insert new row into license table
10:40:47 110  	PROCS_LICENSE_CRU_V22.CREATE_LICENSE(
10:40:47 111  	  out_license_id	      => var_new_license_id,
10:40:47 112  	  in_license_status_id	      => in_status_id,
10:40:47 113  	  in_needs_entitlements       => in_needs_entitlements,
10:40:47 114  	  in_start_date 	      => in_start_date,
10:40:47 115  	  in_offer_id		      => in_offer_id,
10:40:47 116  	  in_subscription_id	      => in_subscription_id,
10:40:47 117  	  in_invoice_id 	      => in_invoice_id,
10:40:47 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
10:40:47 119  	  in_created_by 	      => in_created_by,
10:40:47 120  	  in_is_extension	      => in_is_extension,
10:40:47 121  	  in_current_offer_index      => in_current_offer_index,
10:40:47 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
10:40:47 123  	);
10:40:47 124  
10:40:47 125  	out_license_id := var_new_license_id;
10:40:47 126  
10:40:47 127  EXCEPTION
10:40:47 128  WHEN BAD_OFFER_DURATION THEN
10:40:47 129  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
10:40:47 131  WHEN BAD_OFFER_ID THEN
10:40:47 132  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 133  	  SPROC_NAME, 'No such offer');
10:40:47 134  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 135  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 136  	  SPROC_NAME, 'No such subscription');
10:40:47 137  WHEN BAD_INVOICE_ID THEN
10:40:47 138  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 139  	  SPROC_NAME, 'No such invoice');
10:40:47 140  WHEN OTHERS THEN
10:40:47 141  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 143  END;
10:40:47 144  
10:40:47 145  /******************************************************************************/
10:40:47 146  
10:40:47 147  PROCEDURE UPDATE_LICENSE_STATUS(
10:40:47 148  	  in_license_id     IN NUMBER,
10:40:47 149  	  in_license_status IN NUMBER,
10:40:47 150  	  in_updated_by     IN VARCHAR2,
10:40:47 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:47 152  ) AS
10:40:47 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
10:40:47 154  -- VARIABLES
10:40:47 155  temp_license_id NUMBER;
10:40:47 156  -- EXCEPTIONS
10:40:47 157  BAD_LICENSE_ID	     EXCEPTION;
10:40:47 158  BAD_LICENSE_STATUS     EXCEPTION;
10:40:47 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 160  BEGIN
10:40:47 161  
10:40:47 162  	BEGIN
10:40:47 163  	  SELECT
10:40:47 164  	    ID into temp_license_id
10:40:47 165  	  FROM
10:40:47 166  	    LICENSE
10:40:47 167  	  WHERE
10:40:47 168  	    LICENSE.ID = in_license_id;
10:40:47 169  	  EXCEPTION
10:40:47 170  	    WHEN NO_DATA_FOUND THEN
10:40:47 171  	      RAISE BAD_LICENSE_ID;
10:40:47 172  	END;
10:40:47 173  
10:40:47 174  	IF in_license_status != GLOBAL_STATUSES_V22.LICENSE_CLOSED
10:40:47 175  	   AND in_license_status != GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 176  	   AND in_license_status != GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD THEN
10:40:47 177  	  RAISE BAD_LICENSE_STATUS;
10:40:47 178  	END IF;
10:40:47 179  
10:40:47 180  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V22.TRUE) then
10:40:47 181  	  PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 182  	    in_license_id	 => in_license_id,
10:40:47 183  	    in_updated_by	 => in_updated_by,
10:40:47 184  	    in_license_status_id => in_license_status,
10:40:47 185  	    in_entitlement_end_date	 => sysdate
10:40:47 186  	  );
10:40:47 187  	ELSE
10:40:47 188  	  PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 189  	    in_license_id	 => in_license_id,
10:40:47 190  	    in_updated_by	 => in_updated_by,
10:40:47 191  	    in_license_status_id => in_license_status
10:40:47 192  	  );
10:40:47 193  	END IF;
10:40:47 194  
10:40:47 195  EXCEPTION
10:40:47 196  WHEN BAD_LICENSE_STATUS THEN
10:40:47 197  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 198  	  SPROC_NAME, 'Bad status id');
10:40:47 199  WHEN BAD_LICENSE_ID THEN
10:40:47 200  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 201  	  SPROC_NAME, 'No such license');
10:40:47 202  WHEN OTHERS THEN
10:40:47 203  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 205  END UPDATE_LICENSE_STATUS;
10:40:47 206  
10:40:47 207  /******************************************************************************/
10:40:47 208  
10:40:47 209  PROCEDURE GET_ENDING_LICENSES (
10:40:47 210  	in_hours_number IN NUMBER,
10:40:47 211  	out_result_set	OUT SYS_REFCURSOR
10:40:47 212  ) AS
10:40:47 213  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
10:40:47 214  -- VARIABLES
10:40:47 215  var_days		NUMBER;
10:40:47 216  var_hours 	NUMBER;
10:40:47 217  var_time_interval INTERVAL DAY (3) TO SECOND;
10:40:47 218  BEGIN
10:40:47 219  
10:40:47 220  	var_hours := mod(in_hours_number,24);
10:40:47 221  	var_days := (in_hours_number - var_hours) / 24;
10:40:47 222  	var_time_interval := var_days||' '||var_hours||':0:0';
10:40:47 223  
10:40:47 224  	OPEN out_result_set FOR
10:40:47 225  SELECT * FROM
10:40:47 226  (
10:40:47 227  	SELECT
10:40:47 228  	  LICENSE.ID,
10:40:47 229  	  LICENSE.CREATE_DATE,
10:40:47 230  	  LICENSE.CREATED_BY,
10:40:47 231  	  LICENSE.CURRENT_OFFER_INDEX,
10:40:47 232  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 233  	  LICENSE.END_DATE,
10:40:47 234  	  LICENSE.ENTITLEMENT_END_DATE,
10:40:47 235  	  LICENSE.INVOICE_ID,
10:40:47 236  	  LICENSE.IS_EXTENSION,
10:40:47 237  	  LICENSE.LICENSE_STATUS_ID,
10:40:47 238  	  LICENSE.OFFER_ID,
10:40:47 239  	  LICENSE.START_DATE,
10:40:47 240  	  LICENSE.SUBSCRIPTION_ID,
10:40:47 241  	  LICENSE.UPDATE_DATE,
10:40:47 242  	  LICENSE.UPDATED_BY
10:40:47 243  	FROM
10:40:47 244  	  LICENSE
10:40:47 245  	WHERE
10:40:47 246  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
10:40:47 247  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 248  	  AND NOT EXISTS
10:40:47 249  	  (
10:40:47 250  	    SELECT NULL
10:40:47 251  	    FROM PROCESS_RETRY_THROTTLE
10:40:47 252  	    WHERE PROCESS_NAME = SPROC_NAME
10:40:47 253  	      AND GENERIC_ID = LICENSE.ID
10:40:47 254  	  )
10:40:47 255  	  AND ROWNUM <= 40000
10:40:47 256  	  ORDER BY dbms_random.value
10:40:47 257  ) WHERE
10:40:47 258  	  ROWNUM <= 4000;
10:40:47 259  EXCEPTION
10:40:47 260  WHEN OTHERS THEN
10:40:47 261  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 263  END GET_ENDING_LICENSES;
10:40:47 264  
10:40:47 265  
10:40:47 266  /******************************************************************************/
10:40:47 267  
10:40:47 268  PROCEDURE GET_ENDING_LICENSES_CC (
10:40:47 269  	in_hours_number IN NUMBER,
10:40:47 270  	out_result_set	OUT SYS_REFCURSOR,
10:40:47 271  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:47 272  ) AS
10:40:47 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
10:40:47 274  -- VARIABLES
10:40:47 275  var_days		NUMBER;
10:40:47 276  var_hours 	NUMBER;
10:40:47 277  var_time_interval INTERVAL DAY (3) TO SECOND;
10:40:47 278  BEGIN
10:40:47 279  
10:40:47 280  	var_hours := mod(in_hours_number,24);
10:40:47 281  	var_days := (in_hours_number - var_hours) / 24;
10:40:47 282  	var_time_interval := var_days||' '||var_hours||':0:0';
10:40:47 283  
10:40:47 284  	OPEN out_result_set FOR
10:40:47 285  SELECT * FROM
10:40:47 286  (
10:40:47 287  	SELECT
10:40:47 288  	  LICENSE.ID,
10:40:47 289  	  LICENSE.CREATE_DATE,
10:40:47 290  	  LICENSE.CREATED_BY,
10:40:47 291  	  LICENSE.CURRENT_OFFER_INDEX,
10:40:47 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 293  	  LICENSE.END_DATE,
10:40:47 294  	  LICENSE.ENTITLEMENT_END_DATE,
10:40:47 295  	  LICENSE.INVOICE_ID,
10:40:47 296  	  LICENSE.IS_EXTENSION,
10:40:47 297  	  LICENSE.LICENSE_STATUS_ID,
10:40:47 298  	  LICENSE.OFFER_ID,
10:40:47 299  	  LICENSE.START_DATE,
10:40:47 300  	  LICENSE.SUBSCRIPTION_ID,
10:40:47 301  	  LICENSE.UPDATE_DATE,
10:40:47 302  	  LICENSE.UPDATED_BY
10:40:47 303  	FROM
10:40:47 304  	  LICENSE
10:40:47 305  	WHERE
10:40:47 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
10:40:47 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 308  	  AND NOT EXISTS
10:40:47 309  	  (
10:40:47 310  	    SELECT NULL
10:40:47 311  	    FROM PROCESS_RETRY_THROTTLE
10:40:47 312  	    WHERE PROCESS_NAME = in_process_name
10:40:47 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
10:40:47 314  	  )
10:40:47 315  	  AND ROWNUM <= 10000
10:40:47 316  	  ORDER BY dbms_random.value
10:40:47 317  ) WHERE
10:40:47 318  	  ROWNUM <= 1000
10:40:47 319  	  ;
10:40:47 320  EXCEPTION
10:40:47 321  WHEN OTHERS THEN
10:40:47 322  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 324  END GET_ENDING_LICENSES_CC;
10:40:47 325  
10:40:47 326  /******************************************************************************/
10:40:47 327  
10:40:47 328  PROCEDURE GET_RECURRING_OFFER (
10:40:47 329  	in_license_id  IN NUMBER,
10:40:47 330  	out_result_set OUT SYS_REFCURSOR
10:40:47 331  ) AS
10:40:47 332  -- VARIABLES
10:40:47 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
10:40:47 334  var_offer_chain_id	    NUMBER;
10:40:47 335  var_offer_id		    NUMBER;
10:40:47 336  var_offer_num_recurrences     NUMBER;
10:40:47 337  var_license_cur_offer_rec_num NUMBER;
10:40:47 338  var_offer_index		    NUMBER;
10:40:47 339  -- EXCEPTIONS
10:40:47 340  BAD_LICENSE_ID	     EXCEPTION;
10:40:47 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
10:40:47 342  BEGIN
10:40:47 343  
10:40:47 344  	BEGIN
10:40:47 345  	  SELECT
10:40:47 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:40:47 347  	    LICENSE.OFFER_ID,
10:40:47 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
10:40:47 349  	    into
10:40:47 350  	    var_offer_chain_id,
10:40:47 351  	    var_offer_id,
10:40:47 352  	    var_license_cur_offer_rec_num
10:40:47 353  	  FROM
10:40:47 354  	    LICENSE
10:40:47 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 356  	  WHERE
10:40:47 357  	    LICENSE.ID = in_license_id;
10:40:47 358  	  EXCEPTION
10:40:47 359  	    WHEN NO_DATA_FOUND THEN
10:40:47 360  	      RAISE BAD_LICENSE_ID;
10:40:47 361  	END;
10:40:47 362  
10:40:47 363  	BEGIN
10:40:47 364  	  SELECT
10:40:47 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
10:40:47 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
10:40:47 367  	    into
10:40:47 368  	    var_offer_num_recurrences,
10:40:47 369  	    var_offer_index
10:40:47 370  	  FROM
10:40:47 371  	    OFFER_OFFER_CHAIN
10:40:47 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 373  	  WHERE
10:40:47 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:40:47 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
10:40:47 376  	  EXCEPTION
10:40:47 377  	    WHEN NO_DATA_FOUND THEN
10:40:47 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
10:40:47 379  	END;
10:40:47 380  
10:40:47 381  	IF var_offer_num_recurrences = 0 THEN
10:40:47 382  	  --out_result_set := NULL;
10:40:47 383  	  -- TODO: Remove this hardcode
10:40:47 384  	  OPEN out_result_set FOR
10:40:47 385  	  SELECT
10:40:47 386  	    OFFER.ID,
10:40:47 387  	    OFFER.OFFER_STATUS_ID,
10:40:47 388  	    OFFER.ENTITLEMENT_DURATION,
10:40:47 389  	    OFFER.CREATED_BY,
10:40:47 390  	    OFFER.CREATE_DATE,
10:40:47 391  	    OFFER.UPDATED_BY,
10:40:47 392  	    OFFER.UPDATE_DATE,
10:40:47 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:40:47 394  	    var_offer_index as "OFFER_INDEX"
10:40:47 395  	  FROM
10:40:47 396  	    OFFER_OFFER_CHAIN
10:40:47 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 398  	  WHERE ROWNUM = 0;
10:40:47 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
10:40:47 400  	  --out_result_set := NULL;
10:40:47 401  	  -- TODO: Remove this hardcode
10:40:47 402  	  OPEN out_result_set FOR
10:40:47 403  	  SELECT
10:40:47 404  	    OFFER.ID,
10:40:47 405  	    OFFER.OFFER_STATUS_ID,
10:40:47 406  	    OFFER.ENTITLEMENT_DURATION,
10:40:47 407  	    OFFER.CREATED_BY,
10:40:47 408  	    OFFER.CREATE_DATE,
10:40:47 409  	    OFFER.UPDATED_BY,
10:40:47 410  	    OFFER.UPDATE_DATE,
10:40:47 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:40:47 412  	    var_offer_index as "OFFER_INDEX"
10:40:47 413  	  FROM
10:40:47 414  	    OFFER_OFFER_CHAIN
10:40:47 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 416  	  WHERE ROWNUM = 0;
10:40:47 417  	ELSE
10:40:47 418  	  OPEN out_result_set FOR
10:40:47 419  	  SELECT
10:40:47 420  	    OFFER.ID,
10:40:47 421  	    OFFER.OFFER_STATUS_ID,
10:40:47 422  	    OFFER.ENTITLEMENT_DURATION,
10:40:47 423  	    OFFER.CREATED_BY,
10:40:47 424  	    OFFER.CREATE_DATE,
10:40:47 425  	    OFFER.UPDATED_BY,
10:40:47 426  	    OFFER.UPDATE_DATE,
10:40:47 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
10:40:47 428  	    var_offer_index as "OFFER_INDEX"
10:40:47 429  	  FROM
10:40:47 430  	    OFFER
10:40:47 431  	  WHERE
10:40:47 432  	    OFFER.ID = var_offer_id;
10:40:47 433  	END IF;
10:40:47 434  
10:40:47 435  EXCEPTION
10:40:47 436  WHEN BAD_LICENSE_ID THEN
10:40:47 437  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 438  	  SPROC_NAME, 'No such license');
10:40:47 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
10:40:47 440  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
10:40:47 442  WHEN OTHERS THEN
10:40:47 443  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 445  END GET_RECURRING_OFFER;
10:40:47 446  
10:40:47 447  /******************************************************************************/
10:40:47 448  
10:40:47 449  PROCEDURE GET_NEXT_OFFER (
10:40:47 450  /*
10:40:47 451  Throws exceptions:
10:40:47 452  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 453  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 454  */
10:40:47 455  	in_license_id  IN NUMBER,
10:40:47 456  	out_result_set OUT SYS_REFCURSOR
10:40:47 457  ) AS
10:40:47 458  -- VARIABLES
10:40:47 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
10:40:47 460  var_offer_chain_id	NUMBER;
10:40:47 461  var_offer_id		NUMBER;
10:40:47 462  var_license_current_index NUMBER;
10:40:47 463  var_next_offer_index	NUMBER;
10:40:47 464  -- EXCEPTIONS
10:40:47 465  BAD_LICENSE_ID	      EXCEPTION;
10:40:47 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
10:40:47 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:47 468  BEGIN
10:40:47 469  
10:40:47 470  	BEGIN
10:40:47 471  	  SELECT
10:40:47 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
10:40:47 473  	    LICENSE.OFFER_ID,
10:40:47 474  	    LICENSE.CURRENT_OFFER_INDEX
10:40:47 475  	    into
10:40:47 476  	    var_offer_chain_id,
10:40:47 477  	    var_offer_id,
10:40:47 478  	    var_license_current_index
10:40:47 479  	  FROM
10:40:47 480  	    LICENSE
10:40:47 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 482  	  WHERE
10:40:47 483  	    LICENSE.ID = in_license_id;
10:40:47 484  	  EXCEPTION
10:40:47 485  	    WHEN NO_DATA_FOUND THEN
10:40:47 486  	      RAISE BAD_LICENSE_ID;
10:40:47 487  	END;
10:40:47 488  
10:40:47 489  	BEGIN
10:40:47 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V22.GET_NEXT_OFFER_INDEX(
10:40:47 491  	    var_offer_chain_id,
10:40:47 492  	    var_license_current_index
10:40:47 493  	  );
10:40:47 494  	  EXCEPTION
10:40:47 495  	    WHEN OTHERS THEN
10:40:47 496  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
10:40:47 498  	END;
10:40:47 499  
10:40:47 500  	IF var_next_offer_index IS NULL THEN
10:40:47 501  	  -- RETURN NULL;
10:40:47 502  	  -- TODO: Remove this hardcode
10:40:47 503  	  OPEN out_result_set FOR
10:40:47 504  	  SELECT
10:40:47 505  	    OFFER.ID,
10:40:47 506  	    OFFER.OFFER_STATUS_ID,
10:40:47 507  	    OFFER.ENTITLEMENT_DURATION,
10:40:47 508  	    OFFER.CREATED_BY,
10:40:47 509  	    OFFER.CREATE_DATE,
10:40:47 510  	    OFFER.UPDATED_BY,
10:40:47 511  	    OFFER.UPDATE_DATE,
10:40:47 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
10:40:47 513  	  FROM
10:40:47 514  	    OFFER_OFFER_CHAIN
10:40:47 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 516  	  WHERE
10:40:47 517  	    1=2;
10:40:47 518  	ELSE
10:40:47 519  	  OPEN out_result_set FOR
10:40:47 520  	  SELECT
10:40:47 521  	    OFFER.ID,
10:40:47 522  	    OFFER.OFFER_STATUS_ID,
10:40:47 523  	    OFFER.ENTITLEMENT_DURATION,
10:40:47 524  	    OFFER.CREATED_BY,
10:40:47 525  	    OFFER.CREATE_DATE,
10:40:47 526  	    OFFER.UPDATED_BY,
10:40:47 527  	    OFFER.UPDATE_DATE,
10:40:47 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
10:40:47 529  	  FROM
10:40:47 530  	    OFFER_OFFER_CHAIN
10:40:47 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 532  	  WHERE
10:40:47 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:40:47 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
10:40:47 535  	END IF;
10:40:47 536  
10:40:47 537  EXCEPTION
10:40:47 538  WHEN BAD_LICENSE_ID THEN
10:40:47 539  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 540  	  SPROC_NAME, 'No such license');
10:40:47 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
10:40:47 542  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
10:40:47 544  WHEN OTHERS THEN
10:40:47 545  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 547  END GET_NEXT_OFFER;
10:40:47 548  
10:40:47 549  /******************************************************************************/
10:40:47 550  
10:40:47 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:40:47 552  	in_license_id IN NUMBER,
10:40:47 553  	out_group_id  OUT NUMBER
10:40:47 554  ) AS
10:40:47 555  -- VARIABLES
10:40:47 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
10:40:47 557  var_subscription_id NUMBER;
10:40:47 558  var_group_id	  NUMBER;
10:40:47 559  -- EXCEPTIONS
10:40:47 560  BAD_LICENSE_ID	   EXCEPTION;
10:40:47 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
10:40:47 562  BEGIN
10:40:47 563  
10:40:47 564  	-- Get subscription id
10:40:47 565  	BEGIN
10:40:47 566  	  SELECT
10:40:47 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:40:47 568  	  FROM
10:40:47 569  	    LICENSE
10:40:47 570  	  WHERE
10:40:47 571  	    LICENSE.ID = in_license_id;
10:40:47 572  	  EXCEPTION
10:40:47 573  	    WHEN NO_DATA_FOUND THEN
10:40:47 574  	      RAISE BAD_LICENSE_ID;
10:40:47 575  	END;
10:40:47 576  
10:40:47 577  	-- Get group id
10:40:47 578  	BEGIN
10:40:47 579  	  SELECT
10:40:47 580  	    ACCOUNT.GROUP_ID into var_group_id
10:40:47 581  	  FROM
10:40:47 582  	    SUBSCRIPTION
10:40:47 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 584  	  WHERE
10:40:47 585  	    SUBSCRIPTION.ID = var_subscription_id;
10:40:47 586  	  EXCEPTION
10:40:47 587  	    WHEN NO_DATA_FOUND THEN
10:40:47 588  	      RAISE CAN_NOT_GET_GROUP_ID;
10:40:47 589  	END;
10:40:47 590  
10:40:47 591  	out_group_id := var_group_id;
10:40:47 592  
10:40:47 593  EXCEPTION
10:40:47 594  WHEN BAD_LICENSE_ID THEN
10:40:47 595  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 596  	  SPROC_NAME, 'No such license');
10:40:47 597  WHEN CAN_NOT_GET_GROUP_ID THEN
10:40:47 598  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 599  	  SPROC_NAME, 'Could not get group id');
10:40:47 600  WHEN OTHERS THEN
10:40:47 601  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 603  END GET_GROUP_ID_BY_LICENSE_ID;
10:40:47 604  
10:40:47 605  /******************************************************************************/
10:40:47 606  
10:40:47 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:40:47 608  	out_result_set OUT SYS_REFCURSOR
10:40:47 609  ) AS
10:40:47 610  BEGIN
10:40:47 611  	OPEN out_result_set FOR
10:40:47 612  SELECT * FROM
10:40:47 613  (
10:40:47 614  	SELECT
10:40:47 615  	  LICENSE.ID,
10:40:47 616  	  LICENSE.INVOICE_ID,
10:40:47 617  	  LICENSE.IS_EXTENSION,
10:40:47 618  	  LICENSE.START_DATE,
10:40:47 619  	  LICENSE.END_DATE,
10:40:47 620  	  LICENSE.ENTITLEMENT_END_DATE,
10:40:47 621  	  LICENSE.CURRENT_OFFER_INDEX,
10:40:47 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 623  	  LICENSE.CREATE_DATE,
10:40:47 624  	  LICENSE.CREATED_BY,
10:40:47 625  	  LICENSE.LICENSE_STATUS_ID,
10:40:47 626  	  LICENSE.OFFER_ID,
10:40:47 627  	  LICENSE.SUBSCRIPTION_ID,
10:40:47 628  	  LICENSE.UPDATE_DATE,
10:40:47 629  	  LICENSE.UPDATED_BY,
10:40:47 630  	  LICENSE.NEEDS_ENTITLEMENTS
10:40:47 631  	FROM
10:40:47 632  	  LICENSE
10:40:47 633  	WHERE
10:40:47 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 635  	AND ROWNUM <= 5000
10:40:47 636  	ORDER BY dbms_random.value
10:40:47 637  ) WHERE
10:40:47 638  	ROWNUM <= 500;
10:40:47 639  
10:40:47 640  END GET_NEED_ENTITLEMENTS_LICENSES;
10:40:47 641  
10:40:47 642  /******************************************************************************/
10:40:47 643  
10:40:47 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:40:47 645  	in_license_id	      IN NUMBER,
10:40:47 646  	in_needs_entitlements IN NUMBER,
10:40:47 647  	in_updated_by	      IN VARCHAR2
10:40:47 648  ) AS
10:40:47 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
10:40:47 650  -- VARIABLES
10:40:47 651  temp_license_id NUMBER;
10:40:47 652  -- EXCEPTIONS
10:40:47 653  BAD_LICENSE_ID	     EXCEPTION;
10:40:47 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
10:40:47 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 656  BEGIN
10:40:47 657  
10:40:47 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V22.TRUE
10:40:47 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
10:40:47 661  	END IF;
10:40:47 662  
10:40:47 663  	BEGIN
10:40:47 664  	  SELECT
10:40:47 665  	    LICENSE.ID into temp_license_id
10:40:47 666  	  FROM
10:40:47 667  	    LICENSE
10:40:47 668  	  WHERE
10:40:47 669  	    LICENSE.ID = in_license_id;
10:40:47 670  	  EXCEPTION
10:40:47 671  	    WHEN NO_DATA_FOUND THEN
10:40:47 672  	      RAISE BAD_LICENSE_ID;
10:40:47 673  	END;
10:40:47 674  
10:40:47 675  	PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 676  	  in_license_id 	=> in_license_id,
10:40:47 677  	  in_needs_entitlements => in_needs_entitlements,
10:40:47 678  	  in_updated_by 	=> in_updated_by
10:40:47 679  	);
10:40:47 680  
10:40:47 681  EXCEPTION
10:40:47 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
10:40:47 683  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 684  	  SPROC_NAME, 'Bad entitlements flag value');
10:40:47 685  WHEN BAD_LICENSE_ID THEN
10:40:47 686  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 687  	  SPROC_NAME, 'No such license');
10:40:47 688  WHEN OTHERS THEN
10:40:47 689  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
10:40:47 692  
10:40:47 693  
10:40:47 694  /******************************************************************************/
10:40:47 695  
10:40:47 696  PROCEDURE GET_ENDED_GC_LICENSES (
10:40:47 697  	out_result_set		OUT SYS_REFCURSOR,
10:40:47 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:47 699  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:47 700  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:47 701  ) AS
10:40:47 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
10:40:47 703  var_days		NUMBER;
10:40:47 704  var_hours 	NUMBER;
10:40:47 705  var_time_interval INTERVAL DAY (3) TO SECOND;
10:40:47 706  BEGIN
10:40:47 707  	var_hours := mod(in_hours_number,24);
10:40:47 708  	var_days := (in_hours_number - var_hours) / 24;
10:40:47 709  	var_time_interval := var_days||' '||var_hours||':0:0';
10:40:47 710  	OPEN out_result_set FOR
10:40:47 711  SELECT * FROM
10:40:47 712  (
10:40:47 713  	SELECT
10:40:47 714  	  l.ID,
10:40:47 715  	  l.CREATE_DATE,
10:40:47 716  	  l.CREATED_BY,
10:40:47 717  	  l.CURRENT_OFFER_INDEX,
10:40:47 718  	  l.CURRENT_OFFER_RECURR_NUM,
10:40:47 719  	  l.END_DATE,
10:40:47 720  	  l.ENTITLEMENT_END_DATE,
10:40:47 721  	  l.INVOICE_ID,
10:40:47 722  	  l.IS_EXTENSION,
10:40:47 723  	  l.LICENSE_STATUS_ID,
10:40:47 724  	  l.OFFER_ID,
10:40:47 725  	  l.START_DATE,
10:40:47 726  	  l.SUBSCRIPTION_ID,
10:40:47 727  	  l.UPDATE_DATE,
10:40:47 728  	  l.UPDATED_BY
10:40:47 729  	FROM
10:40:47 730  	  GIFT_CERTIFICATE gc
10:40:47 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
10:40:47 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
10:40:47 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
10:40:47 734  	WHERE
10:40:47 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
10:40:47 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
10:40:47 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_CLOSED
10:40:47 739  	  AND NOT EXISTS (
10:40:47 740  	    SELECT NULL
10:40:47 741  	    FROM PROCESS_RETRY_THROTTLE
10:40:47 742  	    WHERE PROCESS_NAME = in_process_name
10:40:47 743  	      AND GENERIC_ID = l.ID
10:40:47 744  	  )
10:40:47 745  	  AND ROWNUM <= in_num_rows*10
10:40:47 746  	  ORDER BY dbms_random.value
10:40:47 747  ) WHERE
10:40:47 748  	  ROWNUM <= in_num_rows
10:40:47 749  	  GROUP BY SUBSCRIPTION_ID;
10:40:47 750  EXCEPTION
10:40:47 751  WHEN OTHERS THEN
10:40:47 752  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 754  END GET_ENDED_GC_LICENSES;
10:40:47 755  
10:40:47 756  PROCEDURE GET_LICENSE_BY_ID (
10:40:47 757  	in_license_id  IN NUMBER,
10:40:47 758  	out_result_set OUT SYS_REFCURSOR
10:40:47 759  ) AS
10:40:47 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
10:40:47 761  -- VARIABLES
10:40:47 762  temp_license_id NUMBER;
10:40:47 763  -- EXCEPTIONS
10:40:47 764  BAD_LICENSE_ID EXCEPTION;
10:40:47 765  BEGIN
10:40:47 766  
10:40:47 767  	BEGIN
10:40:47 768  	  SELECT
10:40:47 769  	    l.id into temp_license_id
10:40:47 770  	  FROM
10:40:47 771  	    license l
10:40:47 772  	  WHERE
10:40:47 773  	    l.id = in_license_id;
10:40:47 774  	  EXCEPTION
10:40:47 775  	    WHEN NO_DATA_FOUND THEN
10:40:47 776  	      RAISE BAD_LICENSE_ID;
10:40:47 777  	END;
10:40:47 778  
10:40:47 779  	OPEN out_result_set FOR
10:40:47 780  	SELECT
10:40:47 781  	  l.id,
10:40:47 782  	  l.license_status_id,
10:40:47 783  	  l.subscription_id,
10:40:47 784  	  l.invoice_id,
10:40:47 785  	  l.offer_id,
10:40:47 786  	  l.start_date,
10:40:47 787  	  l.end_date,
10:40:47 788  	  l.entitlement_end_date,
10:40:47 789  	  l.is_extension,
10:40:47 790  	  l.create_date,
10:40:47 791  	  l.created_by,
10:40:47 792  	  l.update_date,
10:40:47 793  	  l.updated_by,
10:40:47 794  	  l.current_offer_index,
10:40:47 795  	  l.current_offer_recurr_num,
10:40:47 796  	  l.needs_entitlements
10:40:47 797  	FROM
10:40:47 798  	  LICENSE l
10:40:47 799  	WHERE
10:40:47 800  	  l.id = in_license_id;
10:40:47 801  
10:40:47 802  EXCEPTION
10:40:47 803  WHEN BAD_LICENSE_ID THEN
10:40:47 804  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 805  	  SPROC_NAME, 'No such license');
10:40:47 806  WHEN OTHERS THEN
10:40:47 807  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 809  END GET_LICENSE_BY_ID;
10:40:47 810  
10:40:47 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
10:40:47 812  	in_subscription_id IN NUMBER,
10:40:47 813  	in_end_date IN DATE,
10:40:47 814  	in_updated_by IN VARCHAR2
10:40:47 815  ) AS
10:40:47 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
10:40:47 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 818  var_latest_lice NUMBER;
10:40:47 819  BEGIN
10:40:47 820  	SELECT max(id)
10:40:47 821  	INTO  var_latest_lice
10:40:47 822  	FROM LICENSE
10:40:47 823  	WHERE
10:40:47 824  	  subscription_id = in_subscription_id
10:40:47 825  	;
10:40:47 826  
10:40:47 827  	PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 828  	  in_license_id        => var_latest_lice,
10:40:47 829  	  in_updated_by        => in_updated_by,
10:40:47 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 831  	  in_end_date	       => in_end_date,
10:40:47 832  	  in_entitlement_end_date => in_end_date
10:40:47 833  	);
10:40:47 834  
10:40:47 835  EXCEPTION
10:40:47 836  WHEN NO_DATA_FOUND THEN
10:40:47 837  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
10:40:47 839  WHEN OTHERS THEN
10:40:47 840  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 842  END UP_LATEST_LICE_END_BY_SUBID;
10:40:47 843  
10:40:47 844  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:40:47 845  	in_days_before_close	 IN NUMBER,
10:40:47 846  	in_num_licenses_to_fetch IN NUMBER,
10:40:47 847  	out_result_set		 OUT SYS_REFCURSOR
10:40:47 848  ) AS
10:40:47 849  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
10:40:47 850  BEGIN
10:40:47 851  	OPEN out_result_set FOR
10:40:47 852  	SELECT
10:40:47 853  	    *
10:40:47 854  	FROM
10:40:47 855  	    (
10:40:47 856  		SELECT
10:40:47 857  		    l.id
10:40:47 858  		FROM
10:40:47 859  		    license l
10:40:47 860  		JOIN
10:40:47 861  		    invoice i
10:40:47 862  		ON
10:40:47 863  		    l.invoice_id = i.id
10:40:47 864  		WHERE
10:40:47 865  		    i.invoice_status_id = GLOBAL_STATUSES_V22.INVOICE_OPEN
10:40:47 866  		AND l.license_status_id = GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD
10:40:47 867  		AND SYSDATE + in_days_before_close >= l.grace_end_date
10:40:47 868  		AND NOT EXISTS
10:40:47 869  		    (
10:40:47 870  			SELECT
10:40:47 871  			    1
10:40:47 872  			FROM
10:40:47 873  			    charge c
10:40:47 874  			WHERE
10:40:47 875  			    c.invoice_id = i.id
10:40:47 876  			AND c.charge_status_id = GLOBAL_STATUSES_V22.CHARGE_OPENED)
10:40:47 877  		AND rownum <= in_num_licenses_to_fetch * 10
10:40:47 878  		ORDER BY
10:40:47 879  		    dbms_random.value)
10:40:47 880  	WHERE
10:40:47 881  	    rownum <= in_num_licenses_to_fetch;
10:40:47 882  END GET_GRACE_LICE_FOR_FINAL_TRANS;
10:40:47 883  
10:40:47 884  END PROCS_LICENSE_V22;
10:40:47 885  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.28
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE CREATE_CHARGE(
10:40:47   4  /*
10:40:47   5  Throws exceptions:
10:40:47   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47   8  */
10:40:47   9  	in_invoice_id	      IN NUMBER,
10:40:47  10  	in_transaction_id     IN NUMBER,
10:40:47  11  	in_instrument_type_id IN NUMBER,
10:40:47  12  	in_instrument_id      IN NUMBER,
10:40:47  13  	in_charge_amount      IN NUMBER,
10:40:47  14  	in_created_by	      IN VARCHAR2,
10:40:47  15  	in_charge_status_id   IN NUMBER,
10:40:47  16  	out_charge_id	      OUT NUMBER
10:40:47  17  ) AS
10:40:47  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
10:40:47  19  -- VARIABLES
10:40:47  20  temp_invoice_id	  NUMBER;
10:40:47  21  temp_transaction_id NUMBER;
10:40:47  22  var_new_charge_id   NUMBER;
10:40:47  23  -- EXCEPTIONS
10:40:47  24  BAD_INVOICE_ID	     EXCEPTION;
10:40:47  25  BAD_TRANSACTION_ID     EXCEPTION;
10:40:47  26  BAD_PAYPAL_ID	     EXCEPTION;
10:40:47  27  BAD_CREDIT_CARD_ID     EXCEPTION;
10:40:47  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
10:40:47  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
10:40:47  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47  31  BEGIN
10:40:47  32  	-- Check that incoming data is correct
10:40:47  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47  35  	  RAISE BAD_INSTRUMENT_TYPE;
10:40:47  36  	END IF;
10:40:47  37  
10:40:47  38  	-- Check that status is correct
10:40:47  39  	IF in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_CANCELED THEN
10:40:47  42  	  RAISE BAD_CHARGE_STATUS_ID;
10:40:47  43  	END IF;
10:40:47  44  
10:40:47  45  	-- Check that invoice exists
10:40:47  46  	BEGIN
10:40:47  47  	  SELECT
10:40:47  48  	    INVOICE.ID into temp_invoice_id
10:40:47  49  	  FROM
10:40:47  50  	    INVOICE
10:40:47  51  	  WHERE
10:40:47  52  	    INVOICE.ID = in_invoice_id;
10:40:47  53  	  EXCEPTION
10:40:47  54  	    WHEN NO_DATA_FOUND THEN
10:40:47  55  	      RAISE BAD_INVOICE_ID;
10:40:47  56  	END;
10:40:47  57  
10:40:47  58  	-- Check that transaction exists
10:40:47  59  	BEGIN
10:40:47  60  	  SELECT
10:40:47  61  	    TRANSACTION.ID into temp_transaction_id
10:40:47  62  	  FROM
10:40:47  63  	    TRANSACTION
10:40:47  64  	  WHERE
10:40:47  65  	    TRANSACTION.ID = in_transaction_id;
10:40:47  66  	  EXCEPTION
10:40:47  67  	    WHEN NO_DATA_FOUND THEN
10:40:47  68  	      RAISE BAD_TRANSACTION_ID;
10:40:47  69  	END;
10:40:47  70  
10:40:47  71  	-- Check that instrument exists
10:40:47  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47  73  	  IF PROCS_FIN_INSTRUMENTS_V22.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47  74  	    RAISE BAD_CREDIT_CARD_ID;
10:40:47  75  	  END IF;
10:40:47  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47  77  	  IF PROCS_FIN_INSTRUMENTS_V22.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47  78  	    RAISE BAD_PAYPAL_ID;
10:40:47  79  	  END IF;
10:40:47  80  	END IF;
10:40:47  81  
10:40:47  82  	-- Create new charge
10:40:47  83  	PROCS_CHARGE_CRU_V22.CREATE_CHARGE(
10:40:47  84  	  out_charge_id 	=> var_new_charge_id,
10:40:47  85  	  in_invoice_id 	=> in_invoice_id,
10:40:47  86  	  in_transaction_id	=> in_transaction_id,
10:40:47  87  	  in_instrument_type_id => in_instrument_type_id,
10:40:47  88  	  in_instrument_id	=> in_instrument_id,
10:40:47  89  	  in_charge_amount	=> in_charge_amount,
10:40:47  90  	  in_charge_status_id	=> in_charge_status_id,
10:40:47  91  	  in_created_by 	=> in_created_by
10:40:47  92  	);
10:40:47  93  
10:40:47  94  	out_charge_id := var_new_charge_id;
10:40:47  95  
10:40:47  96  EXCEPTION
10:40:47  97  WHEN BAD_CHARGE_STATUS_ID THEN
10:40:47  98  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
10:40:47 100  WHEN BAD_INSTRUMENT_TYPE THEN
10:40:47 101  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 102  	  PROCS_NAME, 'Bad instrument type id');
10:40:47 103  WHEN BAD_INVOICE_ID THEN
10:40:47 104  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 105  	  PROCS_NAME, 'No such invoice');
10:40:47 106  WHEN BAD_TRANSACTION_ID THEN
10:40:47 107  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 108  	  PROCS_NAME, 'No such transaction');
10:40:47 109  WHEN BAD_PAYPAL_ID THEN
10:40:47 110  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 111  	  PROCS_NAME, 'No such paypal');
10:40:47 112  WHEN BAD_CREDIT_CARD_ID THEN
10:40:47 113  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 114  	  PROCS_NAME, 'No such credit card');
10:40:47 115  WHEN OTHERS THEN
10:40:47 116  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
10:40:47 118  END CREATE_CHARGE;
10:40:47 119  
10:40:47 120  /********************************************************/
10:40:47 121  -- norlov #38562 :
10:40:47 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:40:47 123  /*
10:40:47 124  Throws exceptions:
10:40:47 125  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 126  */
10:40:47 127  	out_result_set	    OUT SYS_REFCURSOR,
10:40:47 128  	in_row_number	    IN NUMBER DEFAULT NULL
10:40:47 129  ) AS
10:40:47 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
10:40:47 131  -- COMSTANTS
10:40:47 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
10:40:47 133  -- VARIABLES
10:40:47 134  var_row_number NUMBER;
10:40:47 135  BEGIN
10:40:47 136  	IF in_row_number IS NULL THEN
10:40:47 137  	  var_row_number := DEFAULT_ROW_NUMBER;
10:40:47 138  	ELSE
10:40:47 139  	  var_row_number := in_row_number;
10:40:47 140  	END IF;
10:40:47 141  
10:40:47 142  	-- Select charges
10:40:47 143  	OPEN out_result_set FOR
10:40:47 144  SELECT * FROM
10:40:47 145  (
10:40:47 146  	SELECT
10:40:47 147  	  CHARGE.ID,
10:40:47 148  	  CHARGE.TRANSACTION_ID,
10:40:47 149  	  CHARGE.INSTRUMENT_ID,
10:40:47 150  	  CHARGE.INSTRUMENT_TYPE_ID,
10:40:47 151  	  CHARGE.CHARGE_AMOUNT,
10:40:47 152  	  CHARGE.CREATE_DATE,
10:40:47 153  	  CHARGE.CREATED_BY,
10:40:47 154  	  CHARGE.INVOICE_ID
10:40:47 155  	FROM
10:40:47 156  	  CHARGE
10:40:47 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 158  	WHERE
10:40:47 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_PENDING
10:40:47 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
10:40:47 162  	  AND NOT EXISTS
10:40:47 163  	  (
10:40:47 164  	    SELECT NULL
10:40:47 165  	    FROM PROCESS_RETRY_THROTTLE
10:40:47 166  	    WHERE PROCESS_NAME = SPROC_NAME
10:40:47 167  	      AND GENERIC_ID = CHARGE.ID
10:40:47 168  	  )
10:40:47 169  	  AND ROWNUM <= var_row_number*10
10:40:47 170  	  ORDER BY dbms_random.value
10:40:47 171  ) WHERE
10:40:47 172  	  ROWNUM <= var_row_number;
10:40:47 173  
10:40:47 174  END GET_PENDING_REFUND_CHARGES;
10:40:47 175  /******************************************************************************/
10:40:47 176  
10:40:47 177  PROCEDURE GET_UNPROCESSED_CHARGES (
10:40:47 178  /*
10:40:47 179  Throws exceptions:
10:40:47 180  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 181  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 182  */
10:40:47 183  	in_invoice_id  IN NUMBER,
10:40:47 184  	out_result_set OUT SYS_REFCURSOR
10:40:47 185  ) AS
10:40:47 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
10:40:47 187  -- VARIABLES
10:40:47 188  temp_invoice_id NUMBER;
10:40:47 189  -- EXCEPTIONS
10:40:47 190  BAD_INVOICE_ID EXCEPTION;
10:40:47 191  BEGIN
10:40:47 192  
10:40:47 193  	-- Check that invoice exists
10:40:47 194  	BEGIN
10:40:47 195  	  SELECT
10:40:47 196  	    INVOICE.ID into temp_invoice_id
10:40:47 197  	  FROM
10:40:47 198  	    INVOICE
10:40:47 199  	  WHERE
10:40:47 200  	    INVOICE.ID = in_invoice_id;
10:40:47 201  	  EXCEPTION
10:40:47 202  	    WHEN NO_DATA_FOUND THEN
10:40:47 203  	      RAISE BAD_INVOICE_ID;
10:40:47 204  	END;
10:40:47 205  
10:40:47 206  	-- Select charges
10:40:47 207  	OPEN out_result_set FOR
10:40:47 208  	SELECT
10:40:47 209  	  CHARGE.ID,
10:40:47 210  	  CHARGE.TRANSACTION_ID,
10:40:47 211  	  CHARGE.INSTRUMENT_ID,
10:40:47 212  	  CHARGE.INSTRUMENT_TYPE_ID,
10:40:47 213  	  CHARGE.CHARGE_AMOUNT,
10:40:47 214  	  CHARGE.CREATE_DATE,
10:40:47 215  	  CHARGE.CREATED_BY,
10:40:47 216  	  CHARGE.INVOICE_ID
10:40:47 217  	FROM
10:40:47 218  	  CHARGE
10:40:47 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 220  	WHERE
10:40:47 221  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 223  	  AND
10:40:47 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_PENDING;
10:40:47 225  
10:40:47 226  EXCEPTION
10:40:47 227  WHEN BAD_INVOICE_ID THEN
10:40:47 228  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 229  	  SPROC_NAME, 'No such invoice');
10:40:47 230  WHEN OTHERS THEN
10:40:47 231  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 233  END GET_UNPROCESSED_CHARGES;
10:40:47 234  
10:40:47 235  /******************************************************************************/
10:40:47 236  
10:40:47 237  PROCEDURE GET_PROCESSED_CHARGES (
10:40:47 238  /*
10:40:47 239  Throws exceptions:
10:40:47 240  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 241  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 242  */
10:40:47 243  	in_invoice_id  IN NUMBER,
10:40:47 244  	out_result_set OUT SYS_REFCURSOR
10:40:47 245  ) AS
10:40:47 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
10:40:47 247  -- VARIABLES
10:40:47 248  temp_invoice_id NUMBER;
10:40:47 249  -- EXCEPTIONS
10:40:47 250  BAD_INVOICE_ID  EXCEPTION;
10:40:47 251  BEGIN
10:40:47 252  
10:40:47 253  	-- Check that invoice exists
10:40:47 254  	BEGIN
10:40:47 255  	  SELECT
10:40:47 256  	    INVOICE.ID into temp_invoice_id
10:40:47 257  	  FROM
10:40:47 258  	    INVOICE
10:40:47 259  	  WHERE
10:40:47 260  	    INVOICE.ID = in_invoice_id;
10:40:47 261  	  EXCEPTION
10:40:47 262  	    WHEN NO_DATA_FOUND THEN
10:40:47 263  	      RAISE BAD_INVOICE_ID;
10:40:47 264  	END;
10:40:47 265  
10:40:47 266  	-- Select charges
10:40:47 267  	OPEN out_result_set FOR
10:40:47 268  	SELECT /*+ STAR_TRANSFORMATION */
10:40:47 269  	  CHARGE.ID,
10:40:47 270  	  CHARGE.TRANSACTION_ID,
10:40:47 271  	  CHARGE.INSTRUMENT_ID,
10:40:47 272  	  CHARGE.INSTRUMENT_TYPE_ID,
10:40:47 273  	  CHARGE.CHARGE_AMOUNT,
10:40:47 274  	  CHARGE.CREATE_DATE,
10:40:47 275  	  CHARGE.CREATED_BY,
10:40:47 276  	  CHARGE.INVOICE_ID
10:40:47 277  	FROM
10:40:47 278  	  CHARGE
10:40:47 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 280  	WHERE
10:40:47 281  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_CLOSED;
10:40:47 284  
10:40:47 285  EXCEPTION
10:40:47 286  WHEN BAD_INVOICE_ID THEN
10:40:47 287  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 288  	  SPROC_NAME, 'No such invoice');
10:40:47 289  WHEN OTHERS THEN
10:40:47 290  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 292  END GET_PROCESSED_CHARGES;
10:40:47 293  
10:40:47 294  /******************************************************************************/
10:40:47 295  
10:40:47 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:40:47 297  /*
10:40:47 298  Throws exceptions:
10:40:47 299  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 300  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 301  */
10:40:47 302  	in_charge_id	    IN NUMBER,
10:40:47 303  	out_subscription_id OUT NUMBER
10:40:47 304  ) AS
10:40:47 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
10:40:47 306  -- VARIABLES
10:40:47 307  var_invoice_id	  NUMBER;
10:40:47 308  var_subscription_id NUMBER;
10:40:47 309  -- EXCEPTIONS
10:40:47 310  BAD_CHARGE_ID		EXCEPTION;
10:40:47 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:40:47 312  BEGIN
10:40:47 313  
10:40:47 314  	BEGIN
10:40:47 315  	  SELECT
10:40:47 316  	    CHARGE.INVOICE_ID into var_invoice_id
10:40:47 317  	  FROM
10:40:47 318  	    CHARGE
10:40:47 319  	  WHERE
10:40:47 320  	    CHARGE.ID = in_charge_id;
10:40:47 321  	  EXCEPTION
10:40:47 322  	    WHEN NO_DATA_FOUND THEN
10:40:47 323  	      RAISE BAD_CHARGE_ID;
10:40:47 324  	END;
10:40:47 325  
10:40:47 326  	BEGIN
10:40:47 327  	  SELECT
10:40:47 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:40:47 329  	  FROM
10:40:47 330  	    LICENSE
10:40:47 331  	  WHERE
10:40:47 332  	    LICENSE.INVOICE_ID = var_invoice_id
10:40:47 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
10:40:47 334  	  EXCEPTION
10:40:47 335  	    WHEN NO_DATA_FOUND THEN
10:40:47 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:40:47 337  	END;
10:40:47 338  
10:40:47 339  	out_subscription_id := var_subscription_id;
10:40:47 340  
10:40:47 341  EXCEPTION
10:40:47 342  WHEN BAD_CHARGE_ID THEN
10:40:47 343  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 344  	  SPROC_NAME, 'No such charge');
10:40:47 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:40:47 346  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 347  	  SPROC_NAME, 'Could not find subscription for given charge');
10:40:47 348  WHEN OTHERS THEN
10:40:47 349  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
10:40:47 352  
10:40:47 353  /******************************************************************************/
10:40:47 354  
10:40:47 355  PROCEDURE UPDATE_CHARGE_STATUS (
10:40:47 356  /*
10:40:47 357  Throws exceptions:
10:40:47 358  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 359  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 360  */
10:40:47 361  	in_charge_id	    IN CHARGE.ID%TYPE,
10:40:47 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:47 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:40:47 364  ) AS
10:40:47 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
10:40:47 366  -- EXCEPTIONS
10:40:47 367  BAD_CHARGE_ID	     EXCEPTION;
10:40:47 368  BAD_STATUS_ID	     EXCEPTION;
10:40:47 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 370  BEGIN
10:40:47 371  
10:40:47 372  	IF in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V22.CHARGE_CANCELED THEN
10:40:47 375  	  RAISE BAD_STATUS_ID;
10:40:47 376  	END IF;
10:40:47 377  
10:40:47 378  	PROCS_CHARGE_CRU_V22.UPDATE_CHARGE(
10:40:47 379  	  in_charge_id	      => in_charge_id,
10:40:47 380  	  in_charge_status_id => in_charge_status_id,
10:40:47 381  	  in_updated_by       => in_updated_by
10:40:47 382  	);
10:40:47 383  
10:40:47 384  	IF SQL%ROWCOUNT = 0 THEN
10:40:47 385  	  RAISE BAD_CHARGE_ID;
10:40:47 386  	END IF;
10:40:47 387  
10:40:47 388  EXCEPTION
10:40:47 389  WHEN BAD_CHARGE_ID THEN
10:40:47 390  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 391  	  SPROC_NAME, 'No such charge');
10:40:47 392  WHEN BAD_STATUS_ID THEN
10:40:47 393  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 394  	  SPROC_NAME, 'Bad status id');
10:40:47 395  WHEN OTHERS THEN
10:40:47 396  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 398  END UPDATE_CHARGE_STATUS;
10:40:47 399  
10:40:47 400  FUNCTION IS_CHARGE_COLLECTED (
10:40:47 401  /*
10:40:47 402  Throws:
10:40:47 403  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 404  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 405  Returns:
10:40:47 406  GLOBAL_CONST.TRUE if transaction collected,
10:40:47 407  GLOBAL_CONST.FALSE else
10:40:47 408  */
10:40:47 409  	in_charge_id IN NUMBER
10:40:47 410  ) RETURN NUMBER AS
10:40:47 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
10:40:47 412  -- VARIABLES
10:40:47 413  var_transaction_id NUMBER;
10:40:47 414  is_transaction_collected NUMBER;
10:40:47 415  -- EXCEPTIONS
10:40:47 416  BAD_CHARGE_ID	       EXCEPTION;
10:40:47 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
10:40:47 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:40:47 419  BEGIN
10:40:47 420  
10:40:47 421  	BEGIN
10:40:47 422  	  SELECT
10:40:47 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
10:40:47 424  	  FROM
10:40:47 425  	    CHARGE
10:40:47 426  	  WHERE
10:40:47 427  	    CHARGE.ID = in_charge_id;
10:40:47 428  	  EXCEPTION
10:40:47 429  	    WHEN NO_DATA_FOUND THEN
10:40:47 430  	      RAISE BAD_CHARGE_ID;
10:40:47 431  	END;
10:40:47 432  
10:40:47 433  	BEGIN
10:40:47 434  	  is_transaction_collected := PROCS_TRANSACTION_V22.IS_TRANSACTION_COLLECTED(var_transaction_id);
10:40:47 435  	  EXCEPTION
10:40:47 436  	    WHEN OTHERS THEN
10:40:47 437  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
10:40:47 439  	END;
10:40:47 440  
10:40:47 441  	RETURN is_transaction_collected;
10:40:47 442  
10:40:47 443  EXCEPTION
10:40:47 444  WHEN BAD_CHARGE_ID THEN
10:40:47 445  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 446  	  SPROC_NAME, 'No such charge');
10:40:47 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
10:40:47 448  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
10:40:47 450  WHEN OTHERS THEN
10:40:47 451  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 453  END;
10:40:47 454  
10:40:47 455  PROCEDURE GET_COLLECTED_CHARGES (
10:40:47 456  /*
10:40:47 457  Throws exceptions:
10:40:47 458  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 459  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 460  */
10:40:47 461  	in_invoice_id  IN NUMBER,
10:40:47 462  	out_result_set OUT SYS_REFCURSOR
10:40:47 463  ) AS
10:40:47 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
10:40:47 465  -- VARIABLES
10:40:47 466  temp_invoice_id NUMBER;
10:40:47 467  -- EXCEPTIONS
10:40:47 468  BAD_INVOICE_ID  EXCEPTION;
10:40:47 469  BEGIN
10:40:47 470  
10:40:47 471  	-- Check that invoice exists
10:40:47 472  	BEGIN
10:40:47 473  	  SELECT
10:40:47 474  	    INVOICE.ID into temp_invoice_id
10:40:47 475  	  FROM
10:40:47 476  	    INVOICE
10:40:47 477  	  WHERE
10:40:47 478  	    INVOICE.ID = in_invoice_id;
10:40:47 479  	  EXCEPTION
10:40:47 480  	    WHEN NO_DATA_FOUND THEN
10:40:47 481  	      RAISE BAD_INVOICE_ID;
10:40:47 482  	END;
10:40:47 483  
10:40:47 484  	-- Select charges
10:40:47 485  	OPEN out_result_set FOR
10:40:47 486  	SELECT
10:40:47 487  	  CHARGE.ID,
10:40:47 488  	  CHARGE.TRANSACTION_ID,
10:40:47 489  	  CHARGE.INSTRUMENT_ID,
10:40:47 490  	  CHARGE.INSTRUMENT_TYPE_ID,
10:40:47 491  	  CHARGE.CHARGE_AMOUNT,
10:40:47 492  	  CHARGE.CREATE_DATE,
10:40:47 493  	  CHARGE.CREATED_BY,
10:40:47 494  	  CHARGE.INVOICE_ID
10:40:47 495  	FROM
10:40:47 496  	  CHARGE
10:40:47 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 498  	WHERE
10:40:47 499  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V22.CHARGE_PROCESSED FROM DUAL)
10:40:47 501  	  AND PROCS_CHARGE_V22.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 502  
10:40:47 503  EXCEPTION
10:40:47 504  WHEN BAD_INVOICE_ID THEN
10:40:47 505  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 506  	  SPROC_NAME, 'No such invoice');
10:40:47 507  WHEN OTHERS THEN
10:40:47 508  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 510  END GET_COLLECTED_CHARGES;
10:40:47 511  
10:40:47 512  END PROCS_CHARGE_V22;
10:40:47 513  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
10:40:47   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
10:40:47   5  	in_updater	     IN VARCHAR2,
10:40:47   6  	in_duration_in_hours IN NUMBER
10:40:47   7  ) AS
10:40:47   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
10:40:47   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
10:40:47  10  var_lic_id	  LICENSE.ID%TYPE;
10:40:47  11  var_grace_start	  DATE;
10:40:47  12  var_grace_end	  DATE;
10:40:47  13  BEGIN
10:40:47  14  	SELECT
10:40:47  15  	  ID,
10:40:47  16  	  SUBSCRIPTION_ID,
10:40:47  17  	  START_DATE,
10:40:47  18  	  START_DATE + (in_duration_in_hours / 24)
10:40:47  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
10:40:47  20  	FROM
10:40:47  21  	  LICENSE
10:40:47  22  	WHERE
10:40:47  23  	  INVOICE_ID = in_invoice_id
10:40:47  24  	  AND ROWNUM <= 1;
10:40:47  25  
10:40:47  26  	PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47  27  	    in_license_id	    => var_lic_id,
10:40:47  28  	    in_updated_by	    => in_updater,
10:40:47  29  	    in_grace_start_date     => var_grace_start,
10:40:47  30  	    in_grace_end_date	    => var_grace_end,
10:40:47  31  	    in_entitlement_end_date => var_grace_end,
10:40:47  32  	    in_license_status_id    => GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD
10:40:47  33  	);
10:40:47  34  
10:40:47  35  	PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47  36  	    in_subscription_id	      => var_subs_id,
10:40:47  37  	    in_updated_by	      => in_updater,
10:40:47  38  	    in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD
10:40:47  39  	  );
10:40:47  40  END START_GRACE_BY_INVOICE_ID;
10:40:47  41  
10:40:47  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
10:40:47  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
10:40:47  44  	in_updater    IN VARCHAR2
10:40:47  45  ) AS
10:40:47  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
10:40:47  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
10:40:47  48  var_lic_id	  LICENSE.ID%TYPE;
10:40:47  49  var_lic_end_date	  DATE;
10:40:47  50  BEGIN
10:40:47  51  	SELECT
10:40:47  52  	  ID,
10:40:47  53  	  SUBSCRIPTION_ID,
10:40:47  54  	  END_DATE
10:40:47  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
10:40:47  56  	FROM
10:40:47  57  	  LICENSE
10:40:47  58  	WHERE
10:40:47  59  	  INVOICE_ID = in_invoice_id
10:40:47  60  	  AND ROWNUM <= 1;
10:40:47  61  
10:40:47  62  	PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47  63  	    in_license_id	    => var_lic_id,
10:40:47  64  	    in_updated_by	    => in_updater,
10:40:47  65  	    in_grace_end_date	    => SYSDATE,
10:40:47  66  	    in_entitlement_end_date => var_lic_end_date,
10:40:47  67  	    in_license_status_id    => GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47  68  	);
10:40:47  69  
10:40:47  70  	PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47  71  	    in_subscription_id	      => var_subs_id,
10:40:47  72  	    in_updated_by	      => in_updater,
10:40:47  73  	    in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47  74  	);
10:40:47  75  END STOP_GRACE_BY_INVOICE_ID;
10:40:47  76  
10:40:47  77  
10:40:47  78  PROCEDURE START_SUBSCRIPTION_CREATION (
10:40:47  79  	in_group_id	      IN NUMBER,
10:40:47  80  	in_created_by	      IN VARCHAR2,
10:40:47  81  	in_offer_chain_id     IN NUMBER,
10:40:47  82  	in_instrument_type_id IN NUMBER,
10:40:47  83  	in_instrument_id      IN NUMBER,
10:40:47  84  	in_agent_id	      IN NUMBER,
10:40:47  85  	in_note 	      IN VARCHAR2,
10:40:47  86  	out_subscription_id   OUT NUMBER,
10:40:47  87  	out_invoice_id	      OUT NUMBER,
10:40:47  88  	out_new_license_id    OUT NUMBER,
10:40:47  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.TRUE
10:40:47  90  ) AS
10:40:47  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
10:40:47  92  -- VARIABLES
10:40:47  93  var_account_id		 NUMBER;
10:40:47  94  var_account_status	 NUMBER;
10:40:47  95  var_offer_chain_status_id  NUMBER;
10:40:47  96  var_is_gift_certificate	 NUMBER;
10:40:47  97  var_is_for_redemption	 NUMBER;
10:40:47  98  var_same_offer_chains_num  NUMBER;
10:40:47  99  var_max_concurrent_subscrs NUMBER;
10:40:47 100  var_first_offer_id	 NUMBER;
10:40:47 101  var_new_invoice_id	 NUMBER;
10:40:47 102  var_new_subscription_id	 NUMBER;
10:40:47 103  var_date			 DATE := SYSDATE;
10:40:47 104  var_account_tax_exempt_id  VARCHAR2(255);
10:40:47 105  var_concur_subscription_id NUMBER;
10:40:47 106  -- EXCEPTIONS
10:40:47 107  BAD_GROUP_ID		    EXCEPTION;
10:40:47 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
10:40:47 109  BAD_OFFER_CHAIN		    EXCEPTION;
10:40:47 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
10:40:47 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
10:40:47 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
10:40:47 113  LIMIT_REACHED		    EXCEPTION;
10:40:47 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
10:40:47 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
10:40:47 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
10:40:47 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
10:40:47 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
10:40:47 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
10:40:47 120  
10:40:47 121  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 122  BEGIN
10:40:47 123  
10:40:47 124  	-- Get account id and status
10:40:47 125  	BEGIN
10:40:47 126  	  SELECT
10:40:47 127  	    ACCOUNT.ID,
10:40:47 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:40:47 129  	    ACCOUNT.TAX_EXEMPT_ID
10:40:47 130  	    into
10:40:47 131  	    var_account_id,
10:40:47 132  	    var_account_status,
10:40:47 133  	    var_account_tax_exempt_id
10:40:47 134  	  FROM
10:40:47 135  	    ACCOUNT
10:40:47 136  	  WHERE
10:40:47 137  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:47 138  	  EXCEPTION
10:40:47 139  	  WHEN NO_DATA_FOUND THEN
10:40:47 140  	    RAISE BAD_GROUP_ID;
10:40:47 141  	END;
10:40:47 142  
10:40:47 143  	-- Could not create subscription for disabled account
10:40:47 144  	IF var_account_status = GLOBAL_STATUSES_V22.ACCOUNT_DISABLED THEN
10:40:47 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
10:40:47 146  	END IF;
10:40:47 147  
10:40:47 148  	-- Get offer chain status
10:40:47 149  	BEGIN
10:40:47 150  	  SELECT
10:40:47 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
10:40:47 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
10:40:47 153  	    into
10:40:47 154  	    var_offer_chain_status_id,
10:40:47 155  	    var_is_gift_certificate
10:40:47 156  	  FROM
10:40:47 157  	    OFFER_CHAIN
10:40:47 158  	  WHERE
10:40:47 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
10:40:47 160  
10:40:47 161  	  EXCEPTION
10:40:47 162  	    WHEN NO_DATA_FOUND THEN
10:40:47 163  	      RAISE BAD_OFFER_CHAIN;
10:40:47 164  	END;
10:40:47 165  
10:40:47 166  	-- Could not subscribe to inactive/disabled offer chain
10:40:47 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V22.OFFER_CHAIN_ACTIVE THEN
10:40:47 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
10:40:47 169  	END IF;
10:40:47 170  
10:40:47 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
10:40:47 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
10:40:47 174  	END IF;
10:40:47 175  
10:40:47 176  	-- check if the OC is for Redemption:
10:40:47 177  	SELECT
10:40:47 178  	  COUNT(*) into var_is_for_redemption
10:40:47 179  	FROM
10:40:47 180  	  OFFER_CHAIN_ELIGIBILITY
10:40:47 181  	WHERE
10:40:47 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V22.GIFT_CERTIFICATE_REQUIRED
10:40:47 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V22.ELIGIBILITY_FLAG_SET;
10:40:47 185  
10:40:47 186  	IF var_is_for_redemption > 0 THEN
10:40:47 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
10:40:47 188  	END IF;
10:40:47 189  
10:40:47 190  	SELECT
10:40:47 191  	  COUNT(*) into var_same_offer_chains_num
10:40:47 192  	FROM
10:40:47 193  	  SUBSCRIPTION
10:40:47 194  	WHERE
10:40:47 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:47 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 199  
10:40:47 200  	-- ELIGIBILITY LOGIC CHANGED TO:
10:40:47 201  	-- FOR EACH offer chain eligibility rule in OC:
10:40:47 202  	--   IF offer chain eligibility rule fails:
10:40:47 203  	--     deny purchase;
10:40:47 204  	--   END IF
10:40:47 205  	-- END FOR
10:40:47 206  	-- FOR EACH product eligibility rule in OC:
10:40:47 207  	--   IF product eligibilty rule fails:
10:40:47 208  	--     deny purchase;
10:40:47 209  	--   END IF
10:40:47 210  	-- END FOR
10:40:47 211  	-- allow purchase;
10:40:47 212  
10:40:47 213  	-- if user have any active existing subscriptions to the offer chain
10:40:47 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
10:40:47 215  	-- then deny purchase
10:40:47 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
10:40:47 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V22.INFINITY
10:40:47 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
10:40:47 219  	  -- Find first concurrent subscription id:
10:40:47 220  	  SELECT
10:40:47 221  	    ID into var_concur_subscription_id
10:40:47 222  	  FROM (
10:40:47 223  	    SELECT
10:40:47 224  	      ID
10:40:47 225  	    FROM
10:40:47 226  	      SUBSCRIPTION
10:40:47 227  	    WHERE
10:40:47 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:47 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 232  	    ORDER BY
10:40:47 233  	      ID
10:40:47 234  	  )
10:40:47 235  	  WHERE
10:40:47 236  	    ROWNUM <= 1;
10:40:47 237  	  RAISE LIMIT_REACHED;
10:40:47 238  	END IF;
10:40:47 239  
10:40:47 240  	-- if user does not have any active existing subscriptions to the offer chain
10:40:47 241  	-- and if product from the offer chain is already owned from another offer chain
10:40:47 242  	-- then deny purchase
10:40:47 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V22.FALSE) THEN
10:40:47 244  	  FOR f_account_offer_chains IN (
10:40:47 245  	    SELECT DISTINCT
10:40:47 246  	      OFFER_CHAIN_ID
10:40:47 247  	    FROM
10:40:47 248  	      SUBSCRIPTION
10:40:47 249  	    WHERE
10:40:47 250  	      ACCOUNT_ID = var_account_id
10:40:47 251  	      AND (
10:40:47 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED
10:40:47 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 255  	  )
10:40:47 256  	  LOOP
10:40:47 257  	    IF PROCS_OFFER_CHAIN_V22.CHECK_FOR_SAME_PRODUCTS(
10:40:47 258  	      in_offer_chain_1	       => in_offer_chain_id,
10:40:47 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
10:40:47 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V22.TRUE
10:40:47 261  	    ) = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 262  
10:40:47 263  	      -- Find first concurrent subscription id:
10:40:47 264  	      SELECT
10:40:47 265  		ID into var_concur_subscription_id
10:40:47 266  	      FROM (
10:40:47 267  		SELECT
10:40:47 268  		  ID
10:40:47 269  		FROM
10:40:47 270  		  SUBSCRIPTION
10:40:47 271  		WHERE
10:40:47 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:47 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
10:40:47 274  		  AND (
10:40:47 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED
10:40:47 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 278  		ORDER BY
10:40:47 279  		  ID
10:40:47 280  	      )
10:40:47 281  	      WHERE
10:40:47 282  		ROWNUM <= 1;
10:40:47 283  
10:40:47 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
10:40:47 285  	    END IF;
10:40:47 286  	  END LOOP;
10:40:47 287  	END IF;
10:40:47 288  
10:40:47 289  	BEGIN
10:40:47 290  	  PROCS_OFFER_CHAIN_V22.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
10:40:47 291  	  EXCEPTION
10:40:47 292  	    WHEN OTHERS THEN
10:40:47 293  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
10:40:47 295  	END;
10:40:47 296  
10:40:47 297  	BEGIN
10:40:47 298  	  PROCS_INVOICE_V22.CREATE_INVOICE(
10:40:47 299  	    in_invoice_status => GLOBAL_STATUSES_V22.INVOICE_OPEN,
10:40:47 300  	    in_created_by     => in_created_by,
10:40:47 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
10:40:47 302  	    out_invoice_id    => var_new_invoice_id
10:40:47 303  	  );
10:40:47 304  	  EXCEPTION
10:40:47 305  	    WHEN OTHERS THEN
10:40:47 306  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 307  	      RAISE CAN_NOT_CREATE_INVOICE;
10:40:47 308  	END;
10:40:47 309  
10:40:47 310  	BEGIN
10:40:47 311  	  PROCS_LINE_ITEMS_V22.ADD_LINE_ITEMS(
10:40:47 312  	    in_invoice_id => var_new_invoice_id,
10:40:47 313  	    in_offer_id   => var_first_offer_id,
10:40:47 314  	    in_created_by => in_created_by
10:40:47 315  	  );
10:40:47 316  	  EXCEPTION
10:40:47 317  	    WHEN OTHERS THEN
10:40:47 318  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:40:47 320  	END;
10:40:47 321  
10:40:47 322  	PROCS_SUBSCRIPTION_CRU_V22.CREATE_SUBSCRIPTION(
10:40:47 323  	  out_subscription_id	    => var_new_subscription_id,
10:40:47 324  	  in_account_id 	    => var_account_id,
10:40:47 325  	  in_purchase_date	    => var_date,
10:40:47 326  	  in_offer_chain_id	    => in_offer_chain_id,
10:40:47 327  	  in_created_by 	    => in_created_by,
10:40:47 328  	  in_instrument_type_id     => in_instrument_type_id,
10:40:47 329  	  in_instrument_id	    => in_instrument_id,
10:40:47 330  	  in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 331  	);
10:40:47 332  
10:40:47 333  	BEGIN
10:40:47 334  	  PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:47 335  	    in_subscription_id => var_new_subscription_id,
10:40:47 336  	    in_agent_id        => in_agent_id,
10:40:47 337  	    in_note	       => in_note,
10:40:47 338  	    in_created_by      => in_created_by
10:40:47 339  	  );
10:40:47 340  	  EXCEPTION
10:40:47 341  	   WHEN OTHERS THEN
10:40:47 342  	     EXCEPTION_MESSAGE := SQLERRM;
10:40:47 343  	     RAISE CAN_NOT_CREATE_NOTE;
10:40:47 344  	END;
10:40:47 345  
10:40:47 346  	BEGIN
10:40:47 347  	  PROCS_LICENSE_V22.CREATE_LICENSE(
10:40:47 348  	    in_status_id		=> GLOBAL_STATUSES_V22.LICENSE_ACTIVE,
10:40:47 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 350  	    in_start_date		=> var_date,
10:40:47 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
10:40:47 352  	    in_offer_id 		=> var_first_offer_id,
10:40:47 353  	    in_subscription_id		=> var_new_subscription_id,
10:40:47 354  	    in_invoice_id		=> var_new_invoice_id,
10:40:47 355  	    in_created_by		=> in_created_by,
10:40:47 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V22.FALSE,
10:40:47 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V22.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
10:40:47 358  	    in_current_offer_recurr_num => 1,
10:40:47 359  	    out_license_id		=> out_new_license_id
10:40:47 360  	  );
10:40:47 361  	  EXCEPTION
10:40:47 362  	    WHEN OTHERS THEN
10:40:47 363  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 364  	      RAISE CAN_NOT_CREATE_LICENSE;
10:40:47 365  	END;
10:40:47 366  
10:40:47 367  	out_subscription_id := var_new_subscription_id;
10:40:47 368  	out_invoice_id := var_new_invoice_id;
10:40:47 369  
10:40:47 370  EXCEPTION
10:40:47 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
10:40:47 372  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 373  	  SPROC_NAME, 'Offer chain is not active');
10:40:47 374  WHEN LIMIT_REACHED THEN
10:40:47 375  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.CONFLICT_ERROR,
10:40:47 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
10:40:47 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
10:40:47 378  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
10:40:47 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
10:40:47 381  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
10:40:47 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
10:40:47 384  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
10:40:47 386  WHEN BAD_OFFER_CHAIN THEN
10:40:47 387  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 388  	  SPROC_NAME, 'No such offer chain');
10:40:47 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
10:40:47 390  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.CONFLICT_ERROR,
10:40:47 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
10:40:47 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
10:40:47 393  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
10:40:47 395  WHEN CAN_NOT_CREATE_INVOICE THEN
10:40:47 396  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
10:40:47 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:40:47 399  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:40:47 401  WHEN CAN_NOT_CREATE_LICENSE THEN
10:40:47 402  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:40:47 404  WHEN BAD_GROUP_ID THEN
10:40:47 405  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 406  	  SPROC_NAME, 'Bad group id');
10:40:47 407  WHEN CAN_NOT_CREATE_NOTE THEN
10:40:47 408  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:40:47 410  WHEN OTHERS THEN
10:40:47 411  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 413  END START_SUBSCRIPTION_CREATION;
10:40:47 414  
10:40:47 415  /******************************************************************************/
10:40:47 416  
10:40:47 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
10:40:47 418  	in_subscription_id    IN NUMBER,
10:40:47 419  	in_invoice_id	      IN NUMBER,
10:40:47 420  	in_instrument_type_id IN NUMBER,
10:40:47 421  	in_instrument_id      IN NUMBER,
10:40:47 422  	in_created_by	      IN VARCHAR2
10:40:47 423  ) AS
10:40:47 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
10:40:47 425  -- VARIABLES
10:40:47 426  var_invoice_amount     NUMBER(10, 2);
10:40:47 427  var_new_transaction_id NUMBER;
10:40:47 428  var_new_charge_id      NUMBER;
10:40:47 429  -- EXCEPTIONS
10:40:47 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
10:40:47 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
10:40:47 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
10:40:47 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
10:40:47 434  
10:40:47 435  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 436  BEGIN
10:40:47 437  
10:40:47 438  	-- Calculate invoice amount ( + discounts, taxes)
10:40:47 439  	BEGIN
10:40:47 440  	  PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT(
10:40:47 441  	    in_invoice_id => in_invoice_id,
10:40:47 442  	    out_amount	  => var_invoice_amount
10:40:47 443  	  );
10:40:47 444  	  EXCEPTION
10:40:47 445  	   WHEN OTHERS THEN
10:40:47 446  	     EXCEPTION_MESSAGE := SQLERRM;
10:40:47 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:40:47 448  	END;
10:40:47 449  
10:40:47 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_ZCI_INSTRUMENT
10:40:47 451  	  AND var_invoice_amount > 0 THEN
10:40:47 452  	  RAISE CAN_NOT_USE_FCINSTR;
10:40:47 453  	END IF;
10:40:47 454  
10:40:47 455  	IF var_invoice_amount = 0 THEN
10:40:47 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
10:40:47 457  	  PROCS_INVOICE_CRU_V22.UPDATE_INVOICE(
10:40:47 458  	    in_invoice_id		   => in_invoice_id,
10:40:47 459  	    in_updated_by		   => in_created_by,
10:40:47 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V22.INVOICE_CLOSED
10:40:47 461  	  );
10:40:47 462  	ELSE
10:40:47 463  	  -- Create transaction and charge
10:40:47 464  	  BEGIN
10:40:47 465  	    PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 466  	      in_transaction_id 	=> NULL,
10:40:47 467  	      in_status_id		=> GLOBAL_STATUSES_V22.TRANSACTION_PENDING,
10:40:47 468  	      in_amount 		=> var_invoice_amount,
10:40:47 469  	      in_created_by		=> in_created_by,
10:40:47 470  	      in_order_id		=> NULL,
10:40:47 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
10:40:47 472  	      out_transaction_id	=> var_new_transaction_id
10:40:47 473  	    );
10:40:47 474  	    EXCEPTION
10:40:47 475  	      WHEN OTHERS THEN
10:40:47 476  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 478  	  END;
10:40:47 479  
10:40:47 480  	  BEGIN
10:40:47 481  	    PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 482  	      in_invoice_id	    => in_invoice_id,
10:40:47 483  	      in_transaction_id     => var_new_transaction_id,
10:40:47 484  	      in_instrument_type_id => in_instrument_type_id,
10:40:47 485  	      in_instrument_id	    => in_instrument_id,
10:40:47 486  	      in_charge_amount	    => var_invoice_amount,
10:40:47 487  	      in_created_by	    => in_created_by,
10:40:47 488  	      in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 489  	      out_charge_id	    => var_new_charge_id
10:40:47 490  	    );
10:40:47 491  	    EXCEPTION
10:40:47 492  	      WHEN OTHERS THEN
10:40:47 493  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 494  		RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 495  	  END;
10:40:47 496  	END IF;
10:40:47 497  
10:40:47 498  EXCEPTION
10:40:47 499  WHEN CAN_NOT_USE_FCINSTR THEN
10:40:47 500  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:40:47 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:40:47 503  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
10:40:47 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 506  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 508  WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 509  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 511  WHEN OTHERS THEN
10:40:47 512  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 514  END FINALIZE_SUBSCRIPTION_CREATION;
10:40:47 515  
10:40:47 516  /******************************************************************************/
10:40:47 517  
10:40:47 518  PROCEDURE SUSPEND_SUBSCRIPTION(
10:40:47 519  /*
10:40:47 520  Throws exceptions:
10:40:47 521  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 522  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 523  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 524  */
10:40:47 525  	  in_subs_id	IN NUMBER,
10:40:47 526  	  in_updated_by IN VARCHAR2
10:40:47 527  ) AS
10:40:47 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
10:40:47 529  var_subscription_status_id  NUMBER;
10:40:47 530  var_license_id		  NUMBER;
10:40:47 531  var_offer_id		  NUMBER;
10:40:47 532  var_license_start_date	  DATE;
10:40:47 533  var_license_end_date	  DATE;
10:40:47 534  
10:40:47 535  var_entitlement_dupration   VARCHAR2(30);
10:40:47 536  var_d_entitlement_dupration NUMBER;
10:40:47 537  
10:40:47 538  var_ym_interval INTERVAL YEAR TO MONTH;
10:40:47 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
10:40:47 540  
10:40:47 541  -- EXCEPTIONS
10:40:47 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
10:40:47 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
10:40:47 544  NO_LICENSE_FOUND	      EXCEPTION;
10:40:47 545  NO_OFFER_FOUND	      EXCEPTION;
10:40:47 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:47 547  BEGIN
10:40:47 548  	-- TODO: Finish this prcedure (in Phase II)
10:40:47 549  
10:40:47 550  	-- Get subscription by id. FAULT if no such subscription.
10:40:47 551  	-- begin TX
10:40:47 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
10:40:47 553  	--   Set status to PROCESSED.
10:40:47 554  	--   updated record.
10:40:47 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
10:40:47 556  	--   new subscription status is SUSPENDED.
10:40:47 557  	--   suspend_date is now.
10:40:47 558  	--   update subscription record.
10:40:47 559  	-- end TX
10:40:47 560  
10:40:47 561  	BEGIN
10:40:47 562  	  SELECT
10:40:47 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
10:40:47 564  	  FROM
10:40:47 565  	    SUBSCRIPTION
10:40:47 566  	  WHERE
10:40:47 567  	    SUBSCRIPTION.ID = in_subs_id;
10:40:47 568  	  EXCEPTION
10:40:47 569  	  WHEN NO_DATA_FOUND THEN
10:40:47 570  	    RAISE BAD_SUBSCRIPTION_ID;
10:40:47 571  	END;
10:40:47 572  
10:40:47 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE THEN
10:40:47 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
10:40:47 575  	END IF;
10:40:47 576  
10:40:47 577  	BEGIN
10:40:47 578  	  SELECT
10:40:47 579  	    LICENSE.ID,
10:40:47 580  	    LICENSE.OFFER_ID,
10:40:47 581  	    LICENSE.START_DATE
10:40:47 582  	    into
10:40:47 583  	    var_license_id,
10:40:47 584  	    var_offer_id,
10:40:47 585  	    var_license_start_date
10:40:47 586  	  FROM
10:40:47 587  	    LICENSE
10:40:47 588  	  WHERE
10:40:47 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
10:40:47 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE;
10:40:47 591  	  EXCEPTION
10:40:47 592  	  WHEN NO_DATA_FOUND THEN
10:40:47 593  	    RAISE NO_LICENSE_FOUND;
10:40:47 594  	END;
10:40:47 595  
10:40:47 596  	PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 597  	  in_license_id        => var_license_id,
10:40:47 598  	  in_updated_by        => in_updated_by,
10:40:47 599  	  in_license_status_id => GLOBAL_STATUSES_V22.LICENSE_CLOSED
10:40:47 600  	);
10:40:47 601  
10:40:47 602  	BEGIN
10:40:47 603  	  SELECT
10:40:47 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
10:40:47 605  	  FROM
10:40:47 606  	    OFFER
10:40:47 607  	  WHERE
10:40:47 608  	    OFFER.ID = var_offer_id;
10:40:47 609  	  EXCEPTION
10:40:47 610  	  WHEN NO_DATA_FOUND THEN
10:40:47 611  	    RAISE NO_OFFER_FOUND;
10:40:47 612  	END;
10:40:47 613  
10:40:47 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
10:40:47 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
10:40:47 616  
10:40:47 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
10:40:47 618  
10:40:47 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
10:40:47 620  
10:40:47 621  	PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47 622  	  in_subscription_id	       => in_subs_id,
10:40:47 623  	  in_updated_by 	       => in_updated_by,
10:40:47 624  	  in_suspend_date	       => SYSDATE,
10:40:47 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED,
10:40:47 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
10:40:47 627  	);
10:40:47 628  
10:40:47 629  EXCEPTION
10:40:47 630  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 631  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 632  	  SPROC_NAME, 'No such subscription');
10:40:47 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:40:47 634  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 635  	  SPROC_NAME, 'Subscription is not active');
10:40:47 636  WHEN NO_LICENSE_FOUND THEN
10:40:47 637  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
10:40:47 639  WHEN NO_OFFER_FOUND THEN
10:40:47 640  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
10:40:47 642  WHEN OTHERS THEN
10:40:47 643  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 645  END SUSPEND_SUBSCRIPTION;
10:40:47 646  
10:40:47 647  /******************************************************************************/
10:40:47 648  
10:40:47 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
10:40:47 650  	in_subscription_id IN  NUMBER,
10:40:47 651  	in_updated_by	   IN  VARCHAR2
10:40:47 652  ) AS
10:40:47 653  BEGIN
10:40:47 654  	-- TODO: finish this function (in Phase II)
10:40:47 655  	NULL;
10:40:47 656  END REACTIVATE_SUBSCRIPTION;
10:40:47 657  
10:40:47 658  /******************************************************************************/
10:40:47 659  
10:40:47 660  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:47 661  /*
10:40:47 662  Throws exceptions:
10:40:47 663  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 664  */
10:40:47 665  	  in_subscription_id  IN  NUMBER,
10:40:47 666  	  out_result_set      OUT SYS_REFCURSOR
10:40:47 667  ) AS
10:40:47 668  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
10:40:47 669  -- VARIABLES
10:40:47 670  temp_subscription_id NUMBER;
10:40:47 671  -- EXCEPTIONS
10:40:47 672  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 673  BEGIN
10:40:47 674  	-- Find subscription by id
10:40:47 675  	-- Return its details
10:40:47 676  
10:40:47 677  	BEGIN
10:40:47 678  	  SELECT
10:40:47 679  	    SUBSCRIPTION.ID into temp_subscription_id
10:40:47 680  	  FROM
10:40:47 681  	    SUBSCRIPTION
10:40:47 682  	  WHERE
10:40:47 683  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:47 684  	  EXCEPTION
10:40:47 685  	    WHEN NO_DATA_FOUND THEN
10:40:47 686  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:47 687  	END;
10:40:47 688  
10:40:47 689  	OPEN out_result_set FOR
10:40:47 690  	SELECT
10:40:47 691  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
10:40:47 692  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:40:47 693  	  SUBSCRIPTION.PURCHASE_DATE,
10:40:47 694  	  SUBSCRIPTION.SUSPEND_DATE,
10:40:47 695  	  SUBSCRIPTION.REACTIVATION_DATE,
10:40:47 696  	  SUBSCRIPTION.CANCELLATION_DATE,
10:40:47 697  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
10:40:47 698  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:40:47 699  	  OFFER_CHAIN.NAME,
10:40:47 700  	  OFFER_CHAIN.DESCRIPTION,
10:40:47 701  	  OFFER_CHAIN.PRODUCT_URI,
10:40:47 702  	  SUBSCRIPTION.INSTRUMENT_ID,
10:40:47 703  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:40:47 704  	  PROCS_SUBSCRIPTION_V22.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
10:40:47 705  	  PROCS_SUBSCRIPTION_V22.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
10:40:47 706  	  PROCS_SUBSCRIPTION_V22.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
10:40:47 707  	  PROCS_SUBSCRIPTION_V22.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
10:40:47 708  	  (
10:40:47 709  	    SELECT
10:40:47 710  	      ACCOUNT.GROUP_ID
10:40:47 711  	      FROM ACCOUNT
10:40:47 712  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
10:40:47 713  	  ) as "GROUP_ID",
10:40:47 714  	  (
10:40:47 715  	    SELECT
10:40:47 716  	      MAX(ENTITLEMENT_END_DATE)
10:40:47 717  	      FROM LICENSE
10:40:47 718  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 719  	  )
10:40:47 720  	  as "ENT_END_DATE",
10:40:47 721  	  (
10:40:47 722  	    SELECT
10:40:47 723  	      MIN(START_DATE)
10:40:47 724  	      FROM LICENSE
10:40:47 725  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 726  	  )
10:40:47 727  	  as "ENT_START_DATE",
10:40:47 728  	  PROCS_SUBSCRIPTION_V22.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
10:40:47 729  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
10:40:47 730  	  GROUP_ACCOUNT.ID GA_ID,
10:40:47 731  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
10:40:47 732  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
10:40:47 733  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
10:40:47 734  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
10:40:47 735  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
10:40:47 736  	  GROUP_ACCOUNT.PHONE GA_PHONE,
10:40:47 737  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
10:40:47 738  	  GROUP_ACCOUNT.SEATS GA_SEATS,
10:40:47 739  	  PROCS_GROUP_ACCOUNT_V22.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
10:40:47 740  	  GROUP_ACCOUNT.IP GA_IP,
10:40:47 741  	  PROCS_SUBSCRIPTION_V22.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
10:40:47 742  	  PROCS_ACCOUNT_V22.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
10:40:47 743  	  PROCS_ACCOUNT_V22.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
10:40:47 744  	FROM
10:40:47 745  	  SUBSCRIPTION
10:40:47 746  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 747  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
10:40:47 748  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
10:40:47 749  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
10:40:47 750  	WHERE
10:40:47 751  	  SUBSCRIPTION.ID = in_subscription_id;
10:40:47 752  
10:40:47 753  EXCEPTION
10:40:47 754  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 755  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 756  	  SPROC_NAME, 'No such subscription');
10:40:47 757  WHEN OTHERS THEN
10:40:47 758  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 759  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 760  END GET_SUBSCRIPTION_INFO;
10:40:47 761  
10:40:47 762  /******************************************************************************/
10:40:47 763  
10:40:47 764  PROCEDURE GET_SUBSCRIPTION_INVOICES (
10:40:47 765  /*
10:40:47 766  Throws exceptions:
10:40:47 767  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 768  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 769  */
10:40:47 770  	in_subscription_id  IN	NUMBER,
10:40:47 771  	out_result_set	    OUT SYS_REFCURSOR
10:40:47 772  ) AS
10:40:47 773  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
10:40:47 774  temp_subscription_id NUMBER;
10:40:47 775  BEGIN
10:40:47 776  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
10:40:47 777  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
10:40:47 778  	--   for each license
10:40:47 779  	--     get associated invoice
10:40:47 780  	--     add to results list
10:40:47 781  	--   end loop
10:40:47 782  	-- end
10:40:47 783  
10:40:47 784  	SELECT
10:40:47 785  	  SUBSCRIPTION.ID into temp_subscription_id
10:40:47 786  	FROM
10:40:47 787  	  SUBSCRIPTION
10:40:47 788  	WHERE
10:40:47 789  	  SUBSCRIPTION.ID = in_subscription_id;
10:40:47 790  
10:40:47 791  	OPEN out_result_set FOR
10:40:47 792  	SELECT
10:40:47 793  	  INVOICE.ID,
10:40:47 794  	  INVOICE.INVOICE_STATUS_ID,
10:40:47 795  	  INVOICE.CREATE_DATE,
10:40:47 796  	  INVOICE.CREATED_BY,
10:40:47 797  	  INVOICE.UPDATE_DATE,
10:40:47 798  	  INVOICE.UPDATED_BY,
10:40:47 799  	  INVOICE.TAX_EXEMPT_ID
10:40:47 800  	FROM
10:40:47 801  	  LICENSE
10:40:47 802  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:47 803  	WHERE
10:40:47 804  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:40:47 805  
10:40:47 806  EXCEPTION
10:40:47 807  WHEN NO_DATA_FOUND THEN
10:40:47 808  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 809  	  SPROC_NAME, 'Could not find subscription with given ID');
10:40:47 810  WHEN OTHERS THEN
10:40:47 811  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 812  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 813  END GET_SUBSCRIPTION_INVOICES;
10:40:47 814  
10:40:47 815  /******************************************************************************/
10:40:47 816  
10:40:47 817  PROCEDURE GET_SUBSCRIPTION_NOTES (
10:40:47 818  /*
10:40:47 819  Throws exceptions:
10:40:47 820  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 821  */
10:40:47 822  	in_subscription_id  IN	NUMBER,
10:40:47 823  	out_result_set	    OUT SYS_REFCURSOR
10:40:47 824  ) AS
10:40:47 825  -- VARIABLES
10:40:47 826  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
10:40:47 827  temp_subscription_id NUMBER;
10:40:47 828  -- EXCEPTIONS
10:40:47 829  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 830  BEGIN
10:40:47 831  
10:40:47 832  	-- Check that subscription exists
10:40:47 833  	BEGIN
10:40:47 834  	  SELECT
10:40:47 835  	    SUBSCRIPTION.ID into temp_subscription_id
10:40:47 836  	  FROM
10:40:47 837  	    SUBSCRIPTION
10:40:47 838  	  WHERE
10:40:47 839  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:47 840  	  EXCEPTION
10:40:47 841  	    WHEN NO_DATA_FOUND THEN
10:40:47 842  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:47 843  	END;
10:40:47 844  
10:40:47 845  	OPEN out_result_set FOR
10:40:47 846  	SELECT
10:40:47 847  	  SUBSCRIPTION_NOTE.NOTE,
10:40:47 848  	  SUBSCRIPTION_NOTE.CREATED_BY,
10:40:47 849  	  SUBSCRIPTION_NOTE.CREATE_DATE
10:40:47 850  	FROM
10:40:47 851  	  SUBSCRIPTION_NOTE
10:40:47 852  	WHERE
10:40:47 853  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 854  	ORDER BY
10:40:47 855  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
10:40:47 856  
10:40:47 857  EXCEPTION
10:40:47 858  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 859  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 860  	  SPROC_NAME, 'No such subscription');
10:40:47 861  WHEN OTHERS THEN
10:40:47 862  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 863  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 864  END GET_SUBSCRIPTION_NOTES;
10:40:47 865  
10:40:47 866  /******************************************************************************/
10:40:47 867  
10:40:47 868  PROCEDURE ANNOTATE_SUBSCRIPTION (
10:40:47 869  /*
10:40:47 870  Throws exceptions:
10:40:47 871  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 872  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 873  */
10:40:47 874  	in_subscription_id IN  NUMBER,
10:40:47 875  	in_agent_id	   IN  NUMBER,
10:40:47 876  	in_note 	   IN  VARCHAR2,
10:40:47 877  	in_created_by	   IN  VARCHAR2
10:40:47 878  ) AS
10:40:47 879  -- VARIABLES
10:40:47 880  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
10:40:47 881  temp_subscription_id     NUMBER;
10:40:47 882  var_subscription_note_id NUMBER;
10:40:47 883  -- EXCEPTIONS
10:40:47 884  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 885  BEGIN
10:40:47 886  
10:40:47 887  	-- Check that subscription exists
10:40:47 888  	BEGIN
10:40:47 889  	  SELECT
10:40:47 890  	    SUBSCRIPTION.ID into temp_subscription_id
10:40:47 891  	  FROM
10:40:47 892  	    SUBSCRIPTION
10:40:47 893  	  WHERE
10:40:47 894  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:47 895  	  EXCEPTION
10:40:47 896  	    WHEN NO_DATA_FOUND THEN
10:40:47 897  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:47 898  	END;
10:40:47 899  
10:40:47 900  	PROCS_SUBSCRIPTION_CRU_V22.CREATE_SUBSCRIPTION_NOTE(
10:40:47 901  	  inout_subscription_note_id => var_subscription_note_id,
10:40:47 902  	  in_agent_id		     => in_agent_id,
10:40:47 903  	  in_subscription_id	     => in_subscription_id,
10:40:47 904  	  in_note		     => in_note,
10:40:47 905  	  in_created_by 	     => in_created_by
10:40:47 906  	);
10:40:47 907  
10:40:47 908  EXCEPTION
10:40:47 909  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 910  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 911  	  SPROC_NAME, 'No such subscription');
10:40:47 912  WHEN OTHERS THEN
10:40:47 913  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 915  END ANNOTATE_SUBSCRIPTION;
10:40:47 916  
10:40:47 917  /******************************************************************************/
10:40:47 918  
10:40:47 919  PROCEDURE GET_CANCEL_REASONS (
10:40:47 920  	out_result_set	  OUT SYS_REFCURSOR
10:40:47 921  ) AS
10:40:47 922  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
10:40:47 923  BEGIN
10:40:47 924  	OPEN out_result_set FOR
10:40:47 925  	SELECT
10:40:47 926  	  SUBSCRIPTION_CANCEL_REASON.ID,
10:40:47 927  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
10:40:47 928  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
10:40:47 929  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
10:40:47 930  	FROM
10:40:47 931  	  SUBSCRIPTION_CANCEL_REASON;
10:40:47 932  
10:40:47 933  END GET_CANCEL_REASONS;
10:40:47 934  
10:40:47 935  /******************************************************************************/
10:40:47 936  
10:40:47 937  FUNCTION GET_RENEWAL_DATE (
10:40:47 938  /*
10:40:47 939  Throws exceptions:
10:40:47 940  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 941  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 942  */
10:40:47 943  	in_subscription_id in NUMBER
10:40:47 944  ) RETURN DATE AS
10:40:47 945  -- VARIABLES
10:40:47 946  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
10:40:47 947  var_subscription_status NUMBER;
10:40:47 948  var_licenses_count      NUMBER;
10:40:47 949  var_license_end_date    DATE;
10:40:47 950  var_last_offer_id       NUMBER;
10:40:47 951  var_offer_chain_id      NUMBER;
10:40:47 952  var_last_license_id     NUMBER;
10:40:47 953  var_current_offer_index NUMBER;
10:40:47 954  var_current_offer_recurr_num NUMBER;
10:40:47 955  var_offer_recurr_num    NUMBER;
10:40:47 956  -- EXCEPTIONS
10:40:47 957  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 958  NO_LICENSES_FOUND EXCEPTION;
10:40:47 959  BEGIN
10:40:47 960  
10:40:47 961  	-- Get subscription id and offer chain id
10:40:47 962  	BEGIN
10:40:47 963  	  SELECT
10:40:47 964  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:40:47 965  	    SUBSCRIPTION.OFFER_CHAIN_ID
10:40:47 966  	    into
10:40:47 967  	    var_subscription_status,
10:40:47 968  	    var_offer_chain_id
10:40:47 969  	  FROM
10:40:47 970  	    SUBSCRIPTION
10:40:47 971  	  WHERE
10:40:47 972  	    SUBSCRIPTION.ID = in_subscription_id;
10:40:47 973  	  EXCEPTION
10:40:47 974  	    WHEN NO_DATA_FOUND THEN
10:40:47 975  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:47 976  	END;
10:40:47 977  
10:40:47 978  	IF var_subscription_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE THEN
10:40:47 979  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
10:40:47 980  	  -- AND var_subscription_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED THEN
10:40:47 981  	  RETURN NULL;
10:40:47 982  	END IF;
10:40:47 983  
10:40:47 984  	BEGIN
10:40:47 985  	  SELECT
10:40:47 986  	    LICENSE_ID,
10:40:47 987  	    END_DATE,
10:40:47 988  	    OFFER_ID,
10:40:47 989  	    CURRENT_OFFER_INDEX,
10:40:47 990  	    CURRENT_OFFER_RECURR_NUM
10:40:47 991  	    into
10:40:47 992  	    var_last_license_id,
10:40:47 993  	    var_license_end_date,
10:40:47 994  	    var_last_offer_id,
10:40:47 995  	    var_current_offer_index,
10:40:47 996  	    var_current_offer_recurr_num
10:40:47 997  	  FROM
10:40:47 998  	    (
10:40:47 999  	      SELECT
10:40:47 1000  		 LICENSE.ID as "LICENSE_ID",
10:40:47 1001  		 LICENSE.END_DATE,
10:40:47 1002  		 LICENSE.OFFER_ID,
10:40:47 1003  		 LICENSE.CURRENT_OFFER_INDEX,
10:40:47 1004  		 LICENSE.CURRENT_OFFER_RECURR_NUM
10:40:47 1005  	       FROM
10:40:47 1006  		 LICENSE
10:40:47 1007  	       WHERE
10:40:47 1008  		 LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 1009  		 AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 1010  	       ORDER BY END_DATE DESC
10:40:47 1011  	     )
10:40:47 1012  	     INNER JOIN OFFER ON OFFER_ID = OFFER.ID
10:40:47 1013  	   WHERE
10:40:47 1014  	     ROWNUM <= 1;
10:40:47 1015  
10:40:47 1016  	   EXCEPTION
10:40:47 1017  	     WHEN NO_DATA_FOUND THEN
10:40:47 1018  	       -- RAISE NO_LICENSES_FOUND;
10:40:47 1019  	       RETURN NULL;
10:40:47 1020  	 END;
10:40:47 1021  
10:40:47 1022  	 SELECT
10:40:47 1023  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
10:40:47 1024  	 FROM
10:40:47 1025  	   OFFER_OFFER_CHAIN
10:40:47 1026  	 WHERE
10:40:47 1027  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:40:47 1028  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
10:40:47 1029  
10:40:47 1030  	 IF PROCS_OFFER_CHAIN_V22.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
10:40:47 1031  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
10:40:47 1032  	   -- There is no next offer for this subscription
10:40:47 1033  	   RETURN NULL;
10:40:47 1034  	 END IF;
10:40:47 1035  
10:40:47 1036  	 RETURN var_license_end_date;
10:40:47 1037  
10:40:47 1038  EXCEPTION
10:40:47 1039  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1040  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1041  	   SPROC_NAME, 'No such subscription');
10:40:47 1042  WHEN NO_LICENSES_FOUND THEN
10:40:47 1043  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1044  	   SPROC_NAME, 'No licenses found');
10:40:47 1045  WHEN OTHERS THEN
10:40:47 1046  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1047  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1048  END GET_RENEWAL_DATE;
10:40:47 1049  
10:40:47 1050  /******************************************************************************/
10:40:47 1051  
10:40:47 1052  FUNCTION GET_RECENT_CHARGE (
10:40:47 1053  /*
10:40:47 1054  Throws exceptions:
10:40:47 1055  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1056  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1057  */
10:40:47 1058  	 in_subscription_id IN NUMBER
10:40:47 1059  ) RETURN NUMBER AS
10:40:47 1060  -- VARIABLES
10:40:47 1061  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
10:40:47 1062  temp_subscription_id NUMBER;
10:40:47 1063  var_recent_charge    NUMBER(10,2);
10:40:47 1064  
10:40:47 1065  -- EXCEPTIONS
10:40:47 1066  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 1067  BEGIN
10:40:47 1068  
10:40:47 1069  	 BEGIN
10:40:47 1070  	   SELECT
10:40:47 1071  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 1072  	   FROM
10:40:47 1073  	     SUBSCRIPTION
10:40:47 1074  	   WHERE
10:40:47 1075  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1076  	   EXCEPTION
10:40:47 1077  	     WHEN NO_DATA_FOUND THEN
10:40:47 1078  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1079  	 END;
10:40:47 1080  
10:40:47 1081  	 BEGIN
10:40:47 1082  	   SELECT
10:40:47 1083  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
10:40:47 1084  	   FROM
10:40:47 1085  	     LICENSE
10:40:47 1086  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 1087  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:47 1088  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
10:40:47 1089  	   WHERE
10:40:47 1090  	     -- TODO: Review
10:40:47 1091  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_PROCESSED
10:40:47 1092  	     -- AND
10:40:47 1093  	     SUBSCRIPTION.ID = in_subscription_id
10:40:47 1094  	     AND CHARGE.CHARGE_AMOUNT >= 0
10:40:47 1095  	     AND ROWNUM <= 1
10:40:47 1096  	   ORDER BY
10:40:47 1097  	     LICENSE.ID ASC, CHARGE.ID DESC;
10:40:47 1098  	   EXCEPTION
10:40:47 1099  	     WHEN NO_DATA_FOUND THEN
10:40:47 1100  	       var_recent_charge := 0;
10:40:47 1101  	 END;
10:40:47 1102  
10:40:47 1103  	 RETURN var_recent_charge;
10:40:47 1104  
10:40:47 1105  EXCEPTION
10:40:47 1106  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1107  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1108  	   SPROC_NAME, 'No such subscription');
10:40:47 1109  WHEN OTHERS THEN
10:40:47 1110  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1111  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1112  END GET_RECENT_CHARGE;
10:40:47 1113  
10:40:47 1114  /******************************************************************************/
10:40:47 1115  
10:40:47 1116  FUNCTION GET_BILLING_CYCLE (
10:40:47 1117  	 in_subscription_id IN NUMBER
10:40:47 1118  ) RETURN VARCHAR2 AS
10:40:47 1119  -- VARIABLES
10:40:47 1120  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
10:40:47 1121  temp_subscription_id NUMBER;
10:40:47 1122  var_offer_duration   VARCHAR2(30);
10:40:47 1123  
10:40:47 1124  -- EXCEPTIONS
10:40:47 1125  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 1126  BEGIN
10:40:47 1127  
10:40:47 1128  	 BEGIN
10:40:47 1129  	   SELECT
10:40:47 1130  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 1131  	   FROM
10:40:47 1132  	     SUBSCRIPTION
10:40:47 1133  	   WHERE
10:40:47 1134  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1135  	   EXCEPTION
10:40:47 1136  	     WHEN NO_DATA_FOUND THEN
10:40:47 1137  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1138  	 END;
10:40:47 1139  
10:40:47 1140  	 SELECT
10:40:47 1141  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
10:40:47 1142  	 FROM
10:40:47 1143  	   LICENSE
10:40:47 1144  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 1145  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
10:40:47 1146  	 WHERE
10:40:47 1147  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_PROCESSED
10:40:47 1148  	   --AND
10:40:47 1149  	   SUBSCRIPTION.ID = in_subscription_id
10:40:47 1150  	   AND ROWNUM <= 1
10:40:47 1151  	 ORDER BY
10:40:47 1152  	   LICENSE.ID ASC;
10:40:47 1153  
10:40:47 1154  	 RETURN var_offer_duration;
10:40:47 1155  
10:40:47 1156  EXCEPTION
10:40:47 1157  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1158  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1159  	   SPROC_NAME, 'No such subscription');
10:40:47 1160  WHEN OTHERS THEN
10:40:47 1161  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1163  END GET_BILLING_CYCLE;
10:40:47 1164  
10:40:47 1165  /******************************************************************************/
10:40:47 1166  
10:40:47 1167  PROCEDURE REFUND_SUBSCRIPTION (
10:40:47 1168  /*
10:40:47 1169  Throws exceptions:
10:40:47 1170  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1171  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1172  */
10:40:47 1173  	 in_subscription_id IN NUMBER,
10:40:47 1174  	 in_invoice_id	    IN NUMBER,
10:40:47 1175  	 in_refund_amount   IN NUMBER,
10:40:47 1176  	 in_note	    IN VARCHAR2,
10:40:47 1177  	 in_created_by	    IN VARCHAR2,
10:40:47 1178  	 out_charge_id	    OUT NUMBER
10:40:47 1179  ) AS
10:40:47 1180  -- VARIABLES
10:40:47 1181  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
10:40:47 1182  var_invoice_status_id  NUMBER;
10:40:47 1183  var_account_id	      NUMBER;
10:40:47 1184  var_account_status_id  NUMBER;
10:40:47 1185  var_new_transaction_id NUMBER;
10:40:47 1186  var_instrument_type_id NUMBER;
10:40:47 1187  var_instrument_id      NUMBER;
10:40:47 1188  var_new_charge_id      NUMBER;
10:40:47 1189  var_invoice_amount     NUMBER(10,2);
10:40:47 1190  var_refunds_before     NUMBER(10,2);
10:40:47 1191  var_charges_amount     NUMBER(10,2);
10:40:47 1192  -- EXCEPTIONS
10:40:47 1193  BAD_SUBSCRIPTION_ID	     EXCEPTION;
10:40:47 1194  ACCOUNT_IS_FROZEN	     EXCEPTION;
10:40:47 1195  BAD_INVOICE_ID		     EXCEPTION;
10:40:47 1196  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
10:40:47 1197  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
10:40:47 1198  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
10:40:47 1199  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:40:47 1200  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
10:40:47 1201  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:40:47 1202  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
10:40:47 1203  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
10:40:47 1204  EXCEPTION_MESSAGE	      VARCHAR2(1024);
10:40:47 1205  BEGIN
10:40:47 1206  
10:40:47 1207  	 BEGIN
10:40:47 1208  	   SELECT
10:40:47 1209  	     SUBSCRIPTION.INSTRUMENT_ID,
10:40:47 1210  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:40:47 1211  	     SUBSCRIPTION.ACCOUNT_ID
10:40:47 1212  	     into
10:40:47 1213  	     var_instrument_id,
10:40:47 1214  	     var_instrument_type_id,
10:40:47 1215  	     var_account_id
10:40:47 1216  	   FROM
10:40:47 1217  	     SUBSCRIPTION
10:40:47 1218  	   WHERE
10:40:47 1219  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1220  	   EXCEPTION
10:40:47 1221  	     WHEN NO_DATA_FOUND THEN
10:40:47 1222  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1223  	 END;
10:40:47 1224  
10:40:47 1225  	 -- Check account status. It should not to be frozen
10:40:47 1226  	 SELECT
10:40:47 1227  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
10:40:47 1228  	 FROM
10:40:47 1229  	   ACCOUNT
10:40:47 1230  	 WHERE
10:40:47 1231  	   ACCOUNT.ID = var_account_id;
10:40:47 1232  
10:40:47 1233  	 IF var_account_status_id = GLOBAL_STATUSES_V22.ACCOUNT_FROZEN THEN
10:40:47 1234  	   RAISE ACCOUNT_IS_FROZEN;
10:40:47 1235  	 END IF;
10:40:47 1236  
10:40:47 1237  	 BEGIN
10:40:47 1238  	   SELECT
10:40:47 1239  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
10:40:47 1240  	   FROM
10:40:47 1241  	     INVOICE
10:40:47 1242  	   WHERE
10:40:47 1243  	     INVOICE.ID = in_invoice_id;
10:40:47 1244  	   EXCEPTION
10:40:47 1245  	     WHEN NO_DATA_FOUND THEN
10:40:47 1246  	       RAISE BAD_INVOICE_ID;
10:40:47 1247  	 END;
10:40:47 1248  
10:40:47 1249  	 IF var_invoice_status_id != GLOBAL_STATUSES_V22.INVOICE_CLOSED THEN
10:40:47 1250  	   RAISE INVOICE_IS_NOT_CLOSED;
10:40:47 1251  	 END IF;
10:40:47 1252  
10:40:47 1253  	 BEGIN
10:40:47 1254  	   PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT (
10:40:47 1255  	     in_invoice_id => in_invoice_id,
10:40:47 1256  	     out_amount    => var_invoice_amount
10:40:47 1257  	   );
10:40:47 1258  	   EXCEPTION
10:40:47 1259  	     WHEN OTHERS THEN
10:40:47 1260  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1261  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:40:47 1262  	 END;
10:40:47 1263  
10:40:47 1264  	 IF ( in_refund_amount > var_invoice_amount ) THEN
10:40:47 1265  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
10:40:47 1266  	 END IF;
10:40:47 1267  
10:40:47 1268  	 SELECT /*+ STAR_TRANSFORMATION */
10:40:47 1269  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
10:40:47 1270  	 FROM
10:40:47 1271  	   CHARGE
10:40:47 1272  	 WHERE
10:40:47 1273  	   CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1274  	   AND (
10:40:47 1275  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 1276  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 1277  	   )
10:40:47 1278  	   AND CHARGE.CHARGE_AMOUNT < 0;
10:40:47 1279  
10:40:47 1280  	 -- Refunds are negative
10:40:47 1281  	 var_refunds_before := -var_refunds_before;
10:40:47 1282  
10:40:47 1283  	 var_charges_amount := 0;
10:40:47 1284  
10:40:47 1285  	 FOR f_processed_charges IN (
10:40:47 1286  	   SELECT
10:40:47 1287  	     CHARGE.CHARGE_AMOUNT
10:40:47 1288  	   FROM
10:40:47 1289  	     CHARGE
10:40:47 1290  	   WHERE
10:40:47 1291  	     CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1292  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V22.CHARGE_PROCESSED FROM DUAL)
10:40:47 1293  	 )
10:40:47 1294  	 LOOP
10:40:47 1295  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
10:40:47 1296  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
10:40:47 1297  	   END IF;
10:40:47 1298  	 END LOOP;
10:40:47 1299  
10:40:47 1300  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
10:40:47 1301  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
10:40:47 1302  	 END IF;
10:40:47 1303  
10:40:47 1304  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
10:40:47 1305  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
10:40:47 1306  	 END IF;
10:40:47 1307  
10:40:47 1308  	 BEGIN
10:40:47 1309  	   PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 1310  	     in_transaction_id	       => NULL,
10:40:47 1311  	     in_status_id	       => GLOBAL_STATUSES_V22.TRANSACTION_PREPARE,
10:40:47 1312  	     in_amount		       => -in_refund_amount,
10:40:47 1313  	     in_created_by	       => in_created_by,
10:40:47 1314  	     in_order_id	       => NULL,
10:40:47 1315  	     in_is_refund	       => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1316  	     in_transaction_type_code  => 'REFUND',
10:40:47 1317  	     out_transaction_id        => var_new_transaction_id
10:40:47 1318  	   );
10:40:47 1319  	   EXCEPTION
10:40:47 1320  	     WHEN OTHERS THEN
10:40:47 1321  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1322  	       RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 1323  	 END;
10:40:47 1324  
10:40:47 1325  	 BEGIN
10:40:47 1326  	   PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 1327  	     in_invoice_id	   => in_invoice_id,
10:40:47 1328  	     in_transaction_id	   => var_new_transaction_id,
10:40:47 1329  	     in_instrument_type_id => var_instrument_type_id,
10:40:47 1330  	     in_instrument_id	   => var_instrument_id,
10:40:47 1331  	     in_charge_amount	   => -in_refund_amount,
10:40:47 1332  	     in_created_by	   => in_created_by,
10:40:47 1333  	     in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 1334  	     out_charge_id	   => var_new_charge_id
10:40:47 1335  	   );
10:40:47 1336  	   EXCEPTION
10:40:47 1337  	     WHEN OTHERS THEN
10:40:47 1338  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1339  	       RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 1340  	 END;
10:40:47 1341  
10:40:47 1342  	 IF in_note IS NOT NULL THEN
10:40:47 1343  	   BEGIN
10:40:47 1344  	     PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:47 1345  	       in_subscription_id => in_subscription_id,
10:40:47 1346  	       in_agent_id	  => 0, -- AGENT_ID??
10:40:47 1347  	       in_note		  => in_note,
10:40:47 1348  	       in_created_by	  => in_created_by
10:40:47 1349  	     );
10:40:47 1350  	     EXCEPTION
10:40:47 1351  	       WHEN OTHERS THEN
10:40:47 1352  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1353  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
10:40:47 1354  	   END;
10:40:47 1355  	 END IF;
10:40:47 1356  
10:40:47 1357  	 out_charge_id := var_new_charge_id;
10:40:47 1358  
10:40:47 1359  EXCEPTION
10:40:47 1360  WHEN INVOICE_IS_NOT_CLOSED THEN
10:40:47 1361  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1362  	   SPROC_NAME, 'Invoice is not closed');
10:40:47 1363  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1364  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1365  	   SPROC_NAME, 'No such subscription');
10:40:47 1366  WHEN ACCOUNT_IS_FROZEN THEN
10:40:47 1367  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1368  	   SPROC_NAME, 'Could not refund subscription for frozen account');
10:40:47 1369  WHEN BAD_INVOICE_ID THEN
10:40:47 1370  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1371  	   SPROC_NAME, 'No such invoice');
10:40:47 1372  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:40:47 1373  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1374  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
10:40:47 1375  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
10:40:47 1376  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1377  	   SPROC_NAME, 'Refund is greater than amount');
10:40:47 1378  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
10:40:47 1379  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1380  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
10:40:47 1381  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
10:40:47 1382  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1383  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
10:40:47 1384  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 1385  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1386  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 1387  WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 1388  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1389  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 1390  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
10:40:47 1391  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1392  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:40:47 1393  WHEN OTHERS THEN
10:40:47 1394  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1396  END REFUND_SUBSCRIPTION;
10:40:47 1397  
10:40:47 1398  /******************************************************************************/
10:40:47 1399  
10:40:47 1400  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
10:40:47 1401  /*
10:40:47 1402  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1403  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 1404  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1405  */
10:40:47 1406  	 in_subscription_id	 IN NUMBER,
10:40:47 1407  	 in_effective_start_date IN DATE,
10:40:47 1408  	 in_effective_end_date	 IN DATE,
10:40:47 1409  	 in_note		 IN VARCHAR2,
10:40:47 1410  	 in_updated_by		 IN VARCHAR2
10:40:47 1411  ) AS
10:40:47 1412  -- VARIABLES
10:40:47 1413  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
10:40:47 1414  temp_subscription_id	    NUMBER;
10:40:47 1415  var_current_license_id	    NUMBER;
10:40:47 1416  var_current_license_start_date DATE;
10:40:47 1417  var_current_license_end_date DATE;
10:40:47 1418  var_current_offer_id	    NUMBER;
10:40:47 1419  var_current_invoice_id	    NUMBER;
10:40:47 1420  var_current_date 	    DATE;
10:40:47 1421  var_current_offer_index	    NUMBER;
10:40:47 1422  var_current_offer_recurr_num NUMBER;
10:40:47 1423  var_account_tax_exempt_id    VARCHAR2(255);
10:40:47 1424  
10:40:47 1425  var_free_invoice_id NUMBER;
10:40:47 1426  var_free_license_id NUMBER;
10:40:47 1427  var_new_license_id  NUMBER;
10:40:47 1428  var_ext_license_id  NUMBER;
10:40:47 1429  -- EXCEPTIONS
10:40:47 1430  BAD_SUBSCRIPTION_ID	     EXCEPTION;
10:40:47 1431  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
10:40:47 1432  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
10:40:47 1433  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
10:40:47 1434  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
10:40:47 1435  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
10:40:47 1436  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
10:40:47 1437  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
10:40:47 1438  EXT_START_DATE_LATER_THEN_END EXCEPTION;
10:40:47 1439  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
10:40:47 1440  EXCEPTION_MESSAGE	     VARCHAR2(1024);
10:40:47 1441  BEGIN
10:40:47 1442  
10:40:47 1443  	 var_current_date := PROCS_COMMON_V22.NORMALIZE_DATE(SYSDATE);
10:40:47 1444  
10:40:47 1445  	 -- Check that subscription exists
10:40:47 1446  	 BEGIN
10:40:47 1447  	   SELECT
10:40:47 1448  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 1449  	   FROM
10:40:47 1450  	     SUBSCRIPTION
10:40:47 1451  	   WHERE
10:40:47 1452  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1453  	   EXCEPTION
10:40:47 1454  	     WHEN NO_DATA_FOUND THEN
10:40:47 1455  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1456  	 END;
10:40:47 1457  
10:40:47 1458  	 -- Get account tax exempt id
10:40:47 1459  	 SELECT DISTINCT
10:40:47 1460  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
10:40:47 1461  	 FROM
10:40:47 1462  	   ACCOUNT
10:40:47 1463  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 1464  	 WHERE
10:40:47 1465  	   SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1466  
10:40:47 1467  	 -- Select current data
10:40:47 1468  	 BEGIN
10:40:47 1469  	   SELECT
10:40:47 1470  	     LICENSE.ID,
10:40:47 1471  	     LICENSE.START_DATE,
10:40:47 1472  	     LICENSE.END_DATE,
10:40:47 1473  	     LICENSE.CURRENT_OFFER_INDEX,
10:40:47 1474  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 1475  	     OFFER.ID,
10:40:47 1476  	     INVOICE.ID
10:40:47 1477  	   INTO
10:40:47 1478  	     var_current_license_id,
10:40:47 1479  	     var_current_license_start_date,
10:40:47 1480  	     var_current_license_end_date,
10:40:47 1481  	     var_current_offer_index,
10:40:47 1482  	     var_current_offer_recurr_num,
10:40:47 1483  	     var_current_offer_id,
10:40:47 1484  	     var_current_invoice_id
10:40:47 1485  	   FROM
10:40:47 1486  	     LICENSE
10:40:47 1487  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 1488  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
10:40:47 1489  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:47 1490  	   WHERE
10:40:47 1491  	     SUBSCRIPTION.ID = in_subscription_id
10:40:47 1492  	     AND PROCS_COMMON_V22.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
10:40:47 1493  	     AND PROCS_COMMON_V22.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
10:40:47 1494  	     AND ROWNUM <= 1
10:40:47 1495  	   ORDER BY
10:40:47 1496  	     LICENSE.ID DESC;
10:40:47 1497  	   EXCEPTION
10:40:47 1498  	     WHEN NO_DATA_FOUND THEN
10:40:47 1499  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
10:40:47 1500  	 END;
10:40:47 1501  
10:40:47 1502  	 IF var_current_license_end_date < in_effective_start_date THEN
10:40:47 1503  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
10:40:47 1504  	 END IF;
10:40:47 1505  
10:40:47 1506  	 IF var_current_license_start_date > in_effective_start_date THEN
10:40:47 1507  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
10:40:47 1508  	 END IF;
10:40:47 1509  
10:40:47 1510  	 IF in_effective_start_date > in_effective_end_date THEN
10:40:47 1511  	   RAISE EXT_START_DATE_LATER_THEN_END;
10:40:47 1512  	 END IF;
10:40:47 1513  
10:40:47 1514  	 -- Closing curent license
10:40:47 1515  	 BEGIN
10:40:47 1516  	   PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 1517  	     in_license_id	   => var_current_license_id,
10:40:47 1518  	     in_updated_by	   => in_updated_by,
10:40:47 1519  	     in_license_status_id  => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:40:47 1520  	     in_end_date	   => in_effective_start_date,
10:40:47 1521  	     in_needs_entitlements => GLOBAL_CONSTANTS_V22.TRUE
10:40:47 1522  	   );
10:40:47 1523  	   EXCEPTION
10:40:47 1524  	     WHEN OTHERS THEN
10:40:47 1525  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1526  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
10:40:47 1527  	 END;
10:40:47 1528  
10:40:47 1529  	 -- Creating new "free" invoice
10:40:47 1530  	 BEGIN
10:40:47 1531  	   PROCS_INVOICE_V22.CREATE_INVOICE(
10:40:47 1532  	     in_invoice_status => GLOBAL_STATUSES_V22.INVOICE_CLOSED,
10:40:47 1533  	     in_created_by     => in_updated_by,
10:40:47 1534  	     in_tax_exempt_id  => var_account_tax_exempt_id,
10:40:47 1535  	     out_invoice_id    => var_free_invoice_id
10:40:47 1536  	   );
10:40:47 1537  	   EXCEPTION
10:40:47 1538  	     WHEN OTHERS THEN
10:40:47 1539  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1540  	       RAISE CAN_NOT_CREATE_INVOICE;
10:40:47 1541  	 END;
10:40:47 1542  
10:40:47 1543  	 -- Creating new "free" license
10:40:47 1544  	 BEGIN
10:40:47 1545  	   PROCS_LICENSE_V22.CREATE_LICENSE (
10:40:47 1546  	     in_status_id		 => GLOBAL_STATUSES_V22.LICENSE_ACTIVE,
10:40:47 1547  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1548  	     in_start_date		 => in_effective_start_date,
10:40:47 1549  	     in_end_date		 => in_effective_end_date,
10:40:47 1550  	     in_offer_id		 => var_current_offer_id,
10:40:47 1551  	     in_subscription_id 	 => in_subscription_id,
10:40:47 1552  	     in_invoice_id		 => var_free_invoice_id,
10:40:47 1553  	     in_created_by		 => in_updated_by,
10:40:47 1554  	     in_is_extension		 => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1555  	     in_current_offer_index	 => var_current_offer_index,
10:40:47 1556  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
10:40:47 1557  	     out_license_id		 => var_free_license_id
10:40:47 1558  	   );
10:40:47 1559  	   EXCEPTION
10:40:47 1560  	     WHEN OTHERS THEN
10:40:47 1561  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1562  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
10:40:47 1563  	 END;
10:40:47 1564  
10:40:47 1565  	 -- Creating new license
10:40:47 1566  	 IF PROCS_COMMON_V22.NORMALIZE_DATE(var_current_license_end_date) >
10:40:47 1567  	    PROCS_COMMON_V22.NORMALIZE_DATE(in_effective_start_date) THEN
10:40:47 1568  	   BEGIN
10:40:47 1569  	     PROCS_LICENSE_V22.CREATE_LICENSE (
10:40:47 1570  	       in_status_id		   => GLOBAL_STATUSES_V22.LICENSE_ACTIVE,
10:40:47 1571  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1572  	       in_start_date		   => in_effective_end_date,
10:40:47 1573  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
10:40:47 1574  	       in_offer_id		   => var_current_offer_id,
10:40:47 1575  	       in_subscription_id	   => in_subscription_id,
10:40:47 1576  	       in_invoice_id		   => var_current_invoice_id,
10:40:47 1577  	       in_created_by		   => in_updated_by,
10:40:47 1578  	       in_is_extension		   => GLOBAL_CONSTANTS_V22.FALSE,
10:40:47 1579  	       in_current_offer_index	   => var_current_offer_index,
10:40:47 1580  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
10:40:47 1581  	       out_license_id		   => var_ext_license_id
10:40:47 1582  	     );
10:40:47 1583  	     EXCEPTION
10:40:47 1584  	       WHEN OTHERS THEN
10:40:47 1585  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1586  		 RAISE CAN_NOT_CREATE_END_LICENSE;
10:40:47 1587  	   END;
10:40:47 1588  	 END IF;
10:40:47 1589  
10:40:47 1590  	 -- Create new note for subscription
10:40:47 1591  	 BEGIN
10:40:47 1592  	   PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION (
10:40:47 1593  	     in_subscription_id => in_subscription_id,
10:40:47 1594  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
10:40:47 1595  	     in_note		=> in_note,
10:40:47 1596  	     in_created_by	=> in_updated_by
10:40:47 1597  	   );
10:40:47 1598  	   EXCEPTION
10:40:47 1599  	     WHEN OTHERS THEN
10:40:47 1600  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1601  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
10:40:47 1602  	 END;
10:40:47 1603  
10:40:47 1604  EXCEPTION
10:40:47 1605  WHEN EXT_START_DATE_LATER_THEN_END THEN
10:40:47 1606  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1607  	   SPROC_NAME, 'Extension start date is bigger then end date');
10:40:47 1608  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
10:40:47 1609  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1610  	   SPROC_NAME, 'Extension start date is too far');
10:40:47 1611  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
10:40:47 1612  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1613  	   SPROC_NAME, 'Extension start date is too small');
10:40:47 1614  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1615  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1616  	   SPROC_NAME, 'No such subscription');
10:40:47 1617  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
10:40:47 1618  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1619  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
10:40:47 1620  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
10:40:47 1621  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1622  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
10:40:47 1623  WHEN CAN_NOT_CREATE_INVOICE THEN
10:40:47 1624  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1625  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:40:47 1626  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
10:40:47 1627  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1628  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:40:47 1629  WHEN CAN_NOT_CREATE_END_LICENSE THEN
10:40:47 1630  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1631  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
10:40:47 1632  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
10:40:47 1633  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1634  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
10:40:47 1635  WHEN OTHERS THEN
10:40:47 1636  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1637  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1638  END ADD_SUBSCRIPTION_EXTENSION;
10:40:47 1639  
10:40:47 1640  /******************************************************************************/
10:40:47 1641  
10:40:47 1642  FUNCTION CALC_SUBSCRIPTION_END_DATE (
10:40:47 1643  /*
10:40:47 1644  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1645  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 1646  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1647  Returns:
10:40:47 1648  NULL if it is impossible to calculate end date (for example,
10:40:47 1649  	 offer chain includes offer with infinity recurrences number)
10:40:47 1650  DATE else
10:40:47 1651  */
10:40:47 1652  	 in_subscription_id IN NUMBER
10:40:47 1653  ) RETURN DATE AS
10:40:47 1654  -- VARIABLES
10:40:47 1655  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
10:40:47 1656  last_license_id		     NUMBER;
10:40:47 1657  last_license_end_date	     DATE;
10:40:47 1658  last_license_offer_id	     NUMBER;
10:40:47 1659  last_license_offer_index      NUMBER;
10:40:47 1660  last_license_offer_recurr_num NUMBER;
10:40:47 1661  var_last_license_id	     NUMBER;
10:40:47 1662  var_offer_chain_id	     NUMBER;
10:40:47 1663  var_current_offer_rec_number  NUMBER;
10:40:47 1664  var_next_offers_set	     SYS_REFCURSOR;
10:40:47 1665  var_next_offer_duration	     VARCHAR2(30);
10:40:47 1666  var_next_offer_recur	     NUMBER;
10:40:47 1667  var_infinity_offers_number    NUMBER;
10:40:47 1668  
10:40:47 1669  var_result_date DATE;
10:40:47 1670  
10:40:47 1671  var_ym_interval	INTERVAL YEAR TO MONTH;
10:40:47 1672  var_ds_interval	INTERVAL DAY(3) TO SECOND;
10:40:47 1673  var_offer_years	NUMBER;
10:40:47 1674  var_offer_months NUMBER;
10:40:47 1675  var_offer_days	NUMBER;
10:40:47 1676  
10:40:47 1677  -- EXCEPTIONS
10:40:47 1678  BAD_SUBSCRIPTION_ID	  EXCEPTION;
10:40:47 1679  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
10:40:47 1680  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
10:40:47 1681  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
10:40:47 1682  EXCEPTION_MESSAGE	  VARCHAR2(1024);
10:40:47 1683  BEGIN
10:40:47 1684  
10:40:47 1685  	 BEGIN
10:40:47 1686  	   SELECT
10:40:47 1687  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:40:47 1688  	   FROM
10:40:47 1689  	     SUBSCRIPTION
10:40:47 1690  	   WHERE
10:40:47 1691  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1692  	   EXCEPTION
10:40:47 1693  	     WHEN NO_DATA_FOUND THEN
10:40:47 1694  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1695  	 END;
10:40:47 1696  
10:40:47 1697  	 BEGIN
10:40:47 1698  	   SELECT
10:40:47 1699  	     ID into var_last_license_id
10:40:47 1700  	   FROM
10:40:47 1701  	     (
10:40:47 1702  	       SELECT
10:40:47 1703  		 LICENSE.ID
10:40:47 1704  	       FROM
10:40:47 1705  		 LICENSE
10:40:47 1706  	       WHERE
10:40:47 1707  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 1708  	       ORDER BY
10:40:47 1709  		 LICENSE.END_DATE DESC
10:40:47 1710  	     )
10:40:47 1711  	   WHERE
10:40:47 1712  	     ROWNUM <= 1;
10:40:47 1713  	   EXCEPTION
10:40:47 1714  	     WHEN NO_DATA_FOUND THEN
10:40:47 1715  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
10:40:47 1716  	 END;
10:40:47 1717  
10:40:47 1718  	 SELECT
10:40:47 1719  	   COUNT(*) into var_infinity_offers_number
10:40:47 1720  	 FROM
10:40:47 1721  	   OFFER_OFFER_CHAIN
10:40:47 1722  	 WHERE
10:40:47 1723  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:40:47 1724  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V22.OFFER_REC_INFINITY;
10:40:47 1725  
10:40:47 1726  	 IF var_infinity_offers_number > 0 THEN
10:40:47 1727  	   RETURN NULL;
10:40:47 1728  	 END IF;
10:40:47 1729  
10:40:47 1730  	 BEGIN
10:40:47 1731  	   SELECT
10:40:47 1732  	     LICENSE.ID,
10:40:47 1733  	     LICENSE.END_DATE,
10:40:47 1734  	     LICENSE.CURRENT_OFFER_INDEX,
10:40:47 1735  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 1736  	     LICENSE.OFFER_ID
10:40:47 1737  	     into
10:40:47 1738  	     last_license_id,
10:40:47 1739  	     last_license_end_date,
10:40:47 1740  	     last_license_offer_index,
10:40:47 1741  	     last_license_offer_recurr_num,
10:40:47 1742  	     last_license_offer_id
10:40:47 1743  	   FROM
10:40:47 1744  	     LICENSE
10:40:47 1745  	   WHERE
10:40:47 1746  	     LICENSE.ID = var_last_license_id;
10:40:47 1747  	   EXCEPTION
10:40:47 1748  	     WHEN NO_DATA_FOUND THEN
10:40:47 1749  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
10:40:47 1750  	 END;
10:40:47 1751  
10:40:47 1752  	 var_result_date := last_license_end_date;
10:40:47 1753  
10:40:47 1754  	 -- Find current recurrence number
10:40:47 1755  	 SELECT
10:40:47 1756  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
10:40:47 1757  	 FROM
10:40:47 1758  	   OFFER_OFFER_CHAIN
10:40:47 1759  	 WHERE
10:40:47 1760  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
10:40:47 1761  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
10:40:47 1762  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
10:40:47 1763  
10:40:47 1764  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
10:40:47 1765  	   BEGIN
10:40:47 1766  	     PROCS_OFFER_CHAIN_V22.GET_OFFER_LENGTH(
10:40:47 1767  	       last_license_offer_id,
10:40:47 1768  	       var_offer_years,
10:40:47 1769  	       var_offer_months,
10:40:47 1770  	       var_offer_days
10:40:47 1771  	     );
10:40:47 1772  
10:40:47 1773  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
10:40:47 1774  	     var_ds_interval := var_offer_days||' 0:0:0';
10:40:47 1775  
10:40:47 1776  	     var_result_date := var_result_date
10:40:47 1777  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
10:40:47 1778  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
10:40:47 1779  	     EXCEPTION
10:40:47 1780  	       WHEN OTHERS THEN
10:40:47 1781  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1782  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
10:40:47 1783  	   END;
10:40:47 1784  	 END IF;
10:40:47 1785  
10:40:47 1786  	 OPEN var_next_offers_set FOR
10:40:47 1787  	 SELECT
10:40:47 1788  	   OFFER.ENTITLEMENT_DURATION,
10:40:47 1789  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
10:40:47 1790  	 FROM
10:40:47 1791  	   OFFER_OFFER_CHAIN
10:40:47 1792  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
10:40:47 1793  	 WHERE
10:40:47 1794  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
10:40:47 1795  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
10:40:47 1796  
10:40:47 1797  	 LOOP
10:40:47 1798  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
10:40:47 1799  	   EXIT WHEN var_next_offers_set%NOTFOUND;
10:40:47 1800  	   BEGIN
10:40:47 1801  	     PROCS_COMMON_V22.ISO8601DURATION_TO_INTERVALS(
10:40:47 1802  	       var_next_offer_duration,
10:40:47 1803  	       var_offer_years,
10:40:47 1804  	       var_offer_months,
10:40:47 1805  	       var_offer_days
10:40:47 1806  	     );
10:40:47 1807  
10:40:47 1808  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
10:40:47 1809  	     var_ds_interval := var_offer_days||' 0:0:0';
10:40:47 1810  
10:40:47 1811  	     var_result_date := var_result_date
10:40:47 1812  	       + ( var_ym_interval * var_next_offer_recur )
10:40:47 1813  	       + ( var_ds_interval * var_next_offer_recur );
10:40:47 1814  	     EXCEPTION
10:40:47 1815  	       WHEN OTHERS THEN
10:40:47 1816  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1817  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
10:40:47 1818  	   END;
10:40:47 1819  	 END LOOP;
10:40:47 1820  
10:40:47 1821  	 RETURN var_result_date;
10:40:47 1822  
10:40:47 1823  EXCEPTION
10:40:47 1824  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1825  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1826  	   SPROC_NAME, 'No such subscription');
10:40:47 1827  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
10:40:47 1828  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1829  	   SPROC_NAME, 'Could not find last license for given subscription');
10:40:47 1830  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
10:40:47 1831  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1832  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
10:40:47 1833  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
10:40:47 1834  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1835  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
10:40:47 1836  WHEN OTHERS THEN
10:40:47 1837  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1838  	   SPROC_NAME, 'Unkown error', SQLERRM);
10:40:47 1839  END CALC_SUBSCRIPTION_END_DATE;
10:40:47 1840  
10:40:47 1841  /******************************************************************************/
10:40:47 1842  
10:40:47 1843  PROCEDURE HAS_FUTURE_LICENSE (
10:40:47 1844  /*
10:40:47 1845  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1846  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1847  --
10:40:47 1848  RETURNS:
10:40:47 1849  GLOBAL_CONSTANTS_V22.TRUE - if has,
10:40:47 1850  GLOBAL_CONSTANTS_V22.FALSE - else
10:40:47 1851  */
10:40:47 1852  	 in_license_id IN  NUMBER,
10:40:47 1853  	 out_result    OUT NUMBER
10:40:47 1854  ) AS
10:40:47 1855  -- VARIABLES
10:40:47 1856  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
10:40:47 1857  var_subscription_id	 NUMBER;
10:40:47 1858  var_future_licenses_count NUMBER;
10:40:47 1859  -- EXCEPTIONS
10:40:47 1860  BAD_LICENSE_ID	    EXCEPTION;
10:40:47 1861  BEGIN
10:40:47 1862  
10:40:47 1863  	 BEGIN
10:40:47 1864  	   SELECT
10:40:47 1865  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:40:47 1866  	   FROM
10:40:47 1867  	     LICENSE
10:40:47 1868  	   WHERE
10:40:47 1869  	     LICENSE.ID = in_license_id;
10:40:47 1870  	   EXCEPTION
10:40:47 1871  	     WHEN NO_DATA_FOUND THEN
10:40:47 1872  	       RAISE BAD_LICENSE_ID;
10:40:47 1873  	 END;
10:40:47 1874  
10:40:47 1875  	 SELECT
10:40:47 1876  	   COUNT(*) into var_future_licenses_count
10:40:47 1877  	 FROM
10:40:47 1878  	   LICENSE
10:40:47 1879  	 WHERE
10:40:47 1880  	   LICENSE.ID != in_license_id
10:40:47 1881  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
10:40:47 1882  	   AND LICENSE.END_DATE > sysdate;
10:40:47 1883  
10:40:47 1884  	 IF var_future_licenses_count > 0 THEN
10:40:47 1885  	   out_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 1886  	 ELSE
10:40:47 1887  	   out_result := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 1888  	 END IF;
10:40:47 1889  
10:40:47 1890  EXCEPTION
10:40:47 1891  WHEN BAD_LICENSE_ID THEN
10:40:47 1892  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1893  	   SPROC_NAME, 'No such license');
10:40:47 1894  WHEN OTHERS THEN
10:40:47 1895  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1896  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1897  END HAS_FUTURE_LICENSE;
10:40:47 1898  
10:40:47 1899  /******************************************************************************/
10:40:47 1900  
10:40:47 1901  PROCEDURE CLOSE_SUBSCRIPTION (
10:40:47 1902  	 in_subscription_id IN NUMBER,
10:40:47 1903  	 in_updated_by	    IN VARCHAR2
10:40:47 1904  ) AS
10:40:47 1905  -- VARIABLES
10:40:47 1906  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
10:40:47 1907  temp_subscription_id NUMBER;
10:40:47 1908  var_licenses_count   NUMBER;
10:40:47 1909  -- EXCEPTIONS
10:40:47 1910  BAD_SUBSCRIPTION_ID    EXCEPTION;
10:40:47 1911  ACTIVE_LICENSES_FOUND  EXCEPTION;
10:40:47 1912  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 1913  BEGIN
10:40:47 1914  
10:40:47 1915  	 BEGIN
10:40:47 1916  	   SELECT
10:40:47 1917  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 1918  	   FROM
10:40:47 1919  	     SUBSCRIPTION
10:40:47 1920  	   WHERE
10:40:47 1921  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1922  	   EXCEPTION
10:40:47 1923  	     WHEN NO_DATA_FOUND THEN
10:40:47 1924  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 1925  	 END;
10:40:47 1926  
10:40:47 1927  	 SELECT
10:40:47 1928  	   COUNT(*) into var_licenses_count
10:40:47 1929  	 FROM
10:40:47 1930  	   LICENSE
10:40:47 1931  	 WHERE
10:40:47 1932  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 1933  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE;
10:40:47 1934  
10:40:47 1935  	 IF var_licenses_count > 0 THEN
10:40:47 1936  	   RAISE ACTIVE_LICENSES_FOUND;
10:40:47 1937  	 END IF;
10:40:47 1938  
10:40:47 1939  	 PROCS_SUBSCRIPTION_V22.UPDATE_SUBSCRIPTION_STATUS(
10:40:47 1940  	   in_subscription_id	     => in_subscription_id,
10:40:47 1941  	   in_updated_by	     => in_updated_by,
10:40:47 1942  	   in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_CLOSED
10:40:47 1943  	 );
10:40:47 1944  
10:40:47 1945  EXCEPTION
10:40:47 1946  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 1947  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1948  	   SPROC_NAME, 'No such subscription');
10:40:47 1949  WHEN ACTIVE_LICENSES_FOUND THEN
10:40:47 1950  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1951  	   SPROC_NAME, 'Active licenses found');
10:40:47 1952  WHEN OTHERS THEN
10:40:47 1953  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1954  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1955  END CLOSE_SUBSCRIPTION;
10:40:47 1956  
10:40:47 1957  /******************************************************************************/
10:40:47 1958  
10:40:47 1959  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
10:40:47 1960  	 in_subscription_id IN NUMBER,
10:40:47 1961  	 out_group_id	    OUT NUMBER
10:40:47 1962  ) AS
10:40:47 1963  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
10:40:47 1964  BEGIN
10:40:47 1965  	 SELECT
10:40:47 1966  	   ACCOUNT.GROUP_ID into out_group_id
10:40:47 1967  	 FROM
10:40:47 1968  	   SUBSCRIPTION
10:40:47 1969  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 1970  	 WHERE
10:40:47 1971  	   SUBSCRIPTION.ID = in_subscription_id;
10:40:47 1972  EXCEPTION
10:40:47 1973  WHEN NO_DATA_FOUND THEN
10:40:47 1974  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1975  	   SPROC_NAME, 'No such subscription');
10:40:47 1976  WHEN OTHERS THEN
10:40:47 1977  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1978  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1979  END GET_GROUP_ID_BY_SBSCRPTN_ID;
10:40:47 1980  
10:40:47 1981  /******************************************************************************/
10:40:47 1982  
10:40:47 1983  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
10:40:47 1984  /*
10:40:47 1985  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 1986  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1987  */
10:40:47 1988  	 in_subscription_id IN NUMBER,
10:40:47 1989  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 1990  ) AS
10:40:47 1991  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
10:40:47 1992  -- VARIABLES
10:40:47 1993  var_offer_chain NUMBER;
10:40:47 1994  -- EXCEPTIONS
10:40:47 1995  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 1996  BEGIN
10:40:47 1997  	 BEGIN
10:40:47 1998  	   SELECT
10:40:47 1999  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
10:40:47 2000  	   FROM
10:40:47 2001  	     SUBSCRIPTION
10:40:47 2002  	   WHERE
10:40:47 2003  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2004  	   EXCEPTION
10:40:47 2005  	     WHEN NO_DATA_FOUND THEN
10:40:47 2006  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2007  	 END;
10:40:47 2008  
10:40:47 2009  	 OPEN out_result_set FOR
10:40:47 2010  	 SELECT DISTINCT
10:40:47 2011  	   PRODUCT.ID,
10:40:47 2012  	   PRODUCT.NAME
10:40:47 2013  	 FROM
10:40:47 2014  	   PRODUCT
10:40:47 2015  	 WHERE
10:40:47 2016  	   PRODUCT.ID IN (
10:40:47 2017  	     SELECT DISTINCT
10:40:47 2018  	       PRODUCT_OFFERING.PRODUCT_ID
10:40:47 2019  	     FROM
10:40:47 2020  	       PRODUCT_OFFERING
10:40:47 2021  	     WHERE
10:40:47 2022  	       PRODUCT_OFFERING.ID IN (
10:40:47 2023  		 SELECT DISTINCT
10:40:47 2024  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:47 2025  		 FROM
10:40:47 2026  		   OFFER_PRODUCT_OFFERING
10:40:47 2027  		 WHERE
10:40:47 2028  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:47 2029  		     SELECT DISTINCT
10:40:47 2030  		       OFFER_OFFER_CHAIN.OFFER_ID
10:40:47 2031  		     FROM
10:40:47 2032  		       OFFER_OFFER_CHAIN
10:40:47 2033  		     WHERE
10:40:47 2034  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
10:40:47 2035  		   )
10:40:47 2036  	       )
10:40:47 2037  	   );
10:40:47 2038  
10:40:47 2039  EXCEPTION
10:40:47 2040  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2041  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2042  	   SPROC_NAME, 'No such subscription');
10:40:47 2043  WHEN OTHERS THEN
10:40:47 2044  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2045  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2046  END GET_SUBSCRIPTION_PRODUCTS;
10:40:47 2047  
10:40:47 2048  /******************************************************************************/
10:40:47 2049  
10:40:47 2050  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
10:40:47 2051  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
10:40:47 2052  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
10:40:47 2053  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:47 2054  ) AS
10:40:47 2055  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
10:40:47 2056  BEGIN
10:40:47 2057  	 PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47 2058  	   in_subscription_id	     => in_subscription_id,
10:40:47 2059  	   in_subscription_status_id => in_subscription_status_id,
10:40:47 2060  	   in_updated_by	     => in_updated_by
10:40:47 2061  	 );
10:40:47 2062  END UPDATE_SUBSCRIPTION_STATUS;
10:40:47 2063  
10:40:47 2064  /******************************************************************************/
10:40:47 2065  
10:40:47 2066  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:40:47 2067  /*
10:40:47 2068  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2069  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2070  */
10:40:47 2071  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:40:47 2072  	 in_subscription_id IN NUMBER,
10:40:47 2073  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 2074  ) AS
10:40:47 2075  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
10:40:47 2076  -- VARIABLES
10:40:47 2077  temp_subscription_id SUBSCRIPTION.ID%TYPE;
10:40:47 2078  -- EXCEPTIONS
10:40:47 2079  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2080  BEGIN
10:40:47 2081  
10:40:47 2082  	 BEGIN
10:40:47 2083  	   SELECT
10:40:47 2084  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 2085  	   FROM
10:40:47 2086  	     SUBSCRIPTION
10:40:47 2087  	   WHERE
10:40:47 2088  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2089  	   EXCEPTION
10:40:47 2090  	     WHEN NO_DATA_FOUND THEN
10:40:47 2091  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2092  	 END;
10:40:47 2093  
10:40:47 2094  	 OPEN out_result_set FOR
10:40:47 2095  	 SELECT DISTINCT
10:40:47 2096  	   LICENSE.INVOICE_ID as "ID"
10:40:47 2097  	 FROM
10:40:47 2098  	   LICENSE
10:40:47 2099  	 WHERE
10:40:47 2100  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V22.LICENSE_ACTIVE, GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD)
10:40:47 2101  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:40:47 2102  
10:40:47 2103  EXCEPTION
10:40:47 2104  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2105  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2106  	   SPROC_NAME, 'No such subscription');
10:40:47 2107  WHEN OTHERS THEN
10:40:47 2108  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2109  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2110  END GET_ACTIVE_INVOICES_IDS;
10:40:47 2111  
10:40:47 2112  /******************************************************************************/
10:40:47 2113  
10:40:47 2114  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:40:47 2115  /*
10:40:47 2116  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2117  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2118  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 2119  */
10:40:47 2120  	 in_invoice_id	      IN NUMBER,
10:40:47 2121  	 in_updated_by	      IN VARCHAR2,
10:40:47 2122  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:47 2123  ) AS
10:40:47 2124  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
10:40:47 2125  -- VARIABLES
10:40:47 2126  temp_invoice_id	      INVOICE.ID%TYPE;
10:40:47 2127  var_chargeback_amount  NUMBER(10,2);
10:40:47 2128  ver_refund_charge_id   NUMBER;
10:40:47 2129  -- EXCEPTIONS
10:40:47 2130  BAD_INVOICE_ID		    EXCEPTION;
10:40:47 2131  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
10:40:47 2132  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
10:40:47 2133  EXCEPTION_MESSAGE	    VARCHAR2(1024);
10:40:47 2134  -- STUB
10:40:47 2135  var_now DATE;
10:40:47 2136  var_revoke NUMBER;
10:40:47 2137  var_refund NUMBER;
10:40:47 2138  var_billed NUMBER;
10:40:47 2139  var_subscription_in_grace NUMBER;
10:40:47 2140  BEGIN
10:40:47 2141  
10:40:47 2142  	 var_now := sysdate;
10:40:47 2143  
10:40:47 2144  	 -- Check that invoice exists
10:40:47 2145  	 BEGIN
10:40:47 2146  	   SELECT
10:40:47 2147  	     INVOICE.ID into temp_invoice_id
10:40:47 2148  	   FROM
10:40:47 2149  	     INVOICE
10:40:47 2150  	   WHERE
10:40:47 2151  	     INVOICE.ID = in_invoice_id;
10:40:47 2152  	   EXCEPTION
10:40:47 2153  	     WHEN NO_DATA_FOUND THEN
10:40:47 2154  	       RAISE BAD_INVOICE_ID;
10:40:47 2155  	 END;
10:40:47 2156  
10:40:47 2157  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V22.FALSE, GLOBAL_CONSTANTS_V22.TRUE) into var_revoke
10:40:47 2158  	 from license l, subscription s, offer_chain oc
10:40:47 2159  	 where
10:40:47 2160  	   l.subscription_id = s.id and
10:40:47 2161  	   s.offer_chain_id = oc.id and
10:40:47 2162  	   l.invoice_id = in_invoice_id and
10:40:47 2163  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V22.TRUE and
10:40:47 2164  	   rownum < 2;
10:40:47 2165  
10:40:47 2166  	 select
10:40:47 2167  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
10:40:47 2168  	 into
10:40:47 2169  	   var_subscription_in_grace
10:40:47 2170  	 from license l, subscription s
10:40:47 2171  	 where
10:40:47 2172  	   l.subscription_id = s.id and
10:40:47 2173  	   l.invoice_id = in_invoice_id and
10:40:47 2174  	   rownum < 2;
10:40:47 2175  
10:40:47 2176  	 var_billed := PROCS_INVOICE_V22.IS_INVOICE_PAYING_STARTED(in_invoice_id);
10:40:47 2177  	 var_refund := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2178  
10:40:47 2179  	 -- Check that transaction for given invoice not started
10:40:47 2180  	 -- if refund enabled calculate and apply chargeback
10:40:47 2181  	 IF (
10:40:47 2182  	     var_billed = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 2183  	   )THEN
10:40:47 2184  	   if (in_refundable = GLOBAL_CONSTANTS_V22.TRUE) then
10:40:47 2185  	     -- If started then we need to calculate refund
10:40:47 2186  	     BEGIN
10:40:47 2187  	       PROCS_INVOICE_V22.CALCULATE_INVOICE_CHARGEBACK(
10:40:47 2188  		 in_invoice_id,
10:40:47 2189  		 var_now,
10:40:47 2190  		 var_chargeback_amount
10:40:47 2191  	       );
10:40:47 2192  	       EXCEPTION
10:40:47 2193  		 WHEN OTHERS THEN
10:40:47 2194  		   EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2195  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
10:40:47 2196  	     END;
10:40:47 2197  	     IF var_chargeback_amount > 0 THEN
10:40:47 2198  	       BEGIN
10:40:47 2199  		 PROCS_INVOICE_V22.APPLY_REFUND(
10:40:47 2200  		   in_invoice_id,
10:40:47 2201  		   var_chargeback_amount,
10:40:47 2202  		   in_updated_by,
10:40:47 2203  		   ver_refund_charge_id
10:40:47 2204  		 );
10:40:47 2205  		 EXCEPTION
10:40:47 2206  		   WHEN OTHERS THEN
10:40:47 2207  		     EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2208  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
10:40:47 2209  	       END;
10:40:47 2210  	       var_refund := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2211  	     END IF;
10:40:47 2212  	   end if;
10:40:47 2213  	 ELSE
10:40:47 2214  
10:40:47 2215  	   FOR f_transaction_to_close IN (
10:40:47 2216  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 2217  	   )
10:40:47 2218  	   LOOP
10:40:47 2219  	     PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_STATUS(
10:40:47 2220  	       in_transaction_id	=> f_transaction_to_close.ID,
10:40:47 2221  	       in_updated_by		=> in_updated_by,
10:40:47 2222  	       in_transaction_status_id => GLOBAL_STATUSES_V22.TRANSACTION_CLOSED
10:40:47 2223  	     );
10:40:47 2224  	   END LOOP;
10:40:47 2225  	   -- Needs to close charges. No refund.
10:40:47 2226  	   FOR f_charge_to_close IN (
10:40:47 2227  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 2228  	   )
10:40:47 2229  	   LOOP
10:40:47 2230  	     PROCS_CHARGE_V22.UPDATE_CHARGE_STATUS(
10:40:47 2231  	       in_charge_id	   => f_charge_to_close.ID,
10:40:47 2232  	       in_updated_by	   => in_updated_by,
10:40:47 2233  	       in_charge_status_id => GLOBAL_STATUSES_V22.CHARGE_CANCELED
10:40:47 2234  	     );
10:40:47 2235  	   END LOOP;
10:40:47 2236  
10:40:47 2237  	   PROCS_INVOICE_V22.UPDATE_INVOICE_STATUS(
10:40:47 2238  	     in_invoice_id		    => in_invoice_id,
10:40:47 2239  	     in_updated_by		    => in_updated_by,
10:40:47 2240  	     in_invoice_status_id	    => GLOBAL_STATUSES_V22.INVOICE_CLOSED
10:40:47 2241  	   );
10:40:47 2242  
10:40:47 2243  	 END IF;
10:40:47 2244  	 -- update licenses
10:40:47 2245  	 IF(var_revoke = GLOBAL_CONSTANTS_V22.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V22.FALSE AND var_billed = GLOBAL_CONSTANTS_V22.FALSE)) THEN
10:40:47 2246  	   FOR f_license_to_cancel IN (
10:40:47 2247  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 2248  	   )
10:40:47 2249  	   LOOP
10:40:47 2250  	     PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 2251  	       in_license_id	     => f_license_to_cancel.ID,
10:40:47 2252  	       in_license_status_id  => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:40:47 2253  	       in_needs_entitlements => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 2254  	       in_updated_by	     => in_updated_by,
10:40:47 2255  	       in_entitlement_end_date => var_now
10:40:47 2256  	     );
10:40:47 2257  	   END LOOP;
10:40:47 2258  	 ELSE
10:40:47 2259  	   FOR f_license_to_cancel IN (
10:40:47 2260  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V22.LICENSE_ACTIVE, GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD)
10:40:47 2261  	   )
10:40:47 2262  	   LOOP
10:40:47 2263  	     PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 2264  	       in_license_id	     => f_license_to_cancel.ID,
10:40:47 2265  	       in_license_status_id  => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:40:47 2266  	       in_updated_by	     => in_updated_by
10:40:47 2267  	     );
10:40:47 2268  	   END LOOP;
10:40:47 2269  	 END IF;
10:40:47 2270  
10:40:47 2271  
10:40:47 2272  EXCEPTION
10:40:47 2273  WHEN BAD_INVOICE_ID THEN
10:40:47 2274  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2275  	   SPROC_NAME, 'No such invoice');
10:40:47 2276  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
10:40:47 2277  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2278  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
10:40:47 2279  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
10:40:47 2280  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2281  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
10:40:47 2282  WHEN OTHERS THEN
10:40:47 2283  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2284  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2285  END CANCEL_SUBSCRIPTION_INVOICE;
10:40:47 2286  
10:40:47 2287  /******************************************************************************/
10:40:47 2288  
10:40:47 2289  PROCEDURE FINALIZE_CANCELATION (
10:40:47 2290  /*
10:40:47 2291  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2292  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2293  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 2294  */
10:40:47 2295  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
10:40:47 2296  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:40:47 2297  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:47 2298  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:47 2299  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:47 2300  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:47 2301  	 in_subscription_id    IN NUMBER,
10:40:47 2302  	 in_cancelation_reason IN VARCHAR2,
10:40:47 2303  	 in_cancelation_date   IN DATE,
10:40:47 2304  	 in_note	       IN VARCHAR2,
10:40:47 2305  	 in_agent_id	       IN NUMBER,
10:40:47 2306  	 in_updated_by	       IN VARCHAR2
10:40:47 2307  ) AS
10:40:47 2308  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
10:40:47 2309  -- VARIABLES
10:40:47 2310  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
10:40:47 2311  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
10:40:47 2312  var_active_invoices_count NUMBER;
10:40:47 2313  var_license_to_disgrace	 LICENSE.ID%TYPE;
10:40:47 2314  var_now			 DATE := SYSDATE;
10:40:47 2315  -- EXCEPTIONS
10:40:47 2316  BAD_SUBSCRIPTION_ID	   EXCEPTION;
10:40:47 2317  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
10:40:47 2318  BAD_CANCELATION_REASON	   EXCEPTION;
10:40:47 2319  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
10:40:47 2320  ACTIVE_INVOICES_FOUND	   EXCEPTION;
10:40:47 2321  CAN_NOT_CREATE_NOTE	   EXCEPTION;
10:40:47 2322  EXCEPTION_MESSAGE	   VARCHAR2(1024);
10:40:47 2323  BEGIN
10:40:47 2324  
10:40:47 2325  	 -- Get current subscription status
10:40:47 2326  	 BEGIN
10:40:47 2327  	   SELECT
10:40:47 2328  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
10:40:47 2329  	   FROM
10:40:47 2330  	     SUBSCRIPTION
10:40:47 2331  	   WHERE
10:40:47 2332  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2333  	   EXCEPTION
10:40:47 2334  	     WHEN NO_DATA_FOUND THEN
10:40:47 2335  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2336  	 END;
10:40:47 2337  
10:40:47 2338  	 -- Check that subscription reason is correct
10:40:47 2339  	 BEGIN
10:40:47 2340  	   SELECT
10:40:47 2341  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
10:40:47 2342  	   FROM
10:40:47 2343  	     SUBSCRIPTION_CANCEL_REASON
10:40:47 2344  	   WHERE
10:40:47 2345  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
10:40:47 2346  	     AND ROWNUM <= 1;
10:40:47 2347  	   EXCEPTION
10:40:47 2348  	     WHEN NO_DATA_FOUND THEN
10:40:47 2349  	       RAISE BAD_CANCELATION_REASON;
10:40:47 2350  	 END;
10:40:47 2351  
10:40:47 2352  	 -- Check for invoices with active licenses
10:40:47 2353  	 SELECT
10:40:47 2354  	   COUNT(*) into var_active_invoices_count
10:40:47 2355  	 FROM
10:40:47 2356  	   LICENSE
10:40:47 2357  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:47 2358  	 WHERE
10:40:47 2359  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V22.LICENSE_ACTIVE, GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD)
10:40:47 2360  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:40:47 2361  
10:40:47 2362  	 IF var_active_invoices_count > 0 THEN
10:40:47 2363  	   RAISE ACTIVE_INVOICES_FOUND;
10:40:47 2364  	 END IF;
10:40:47 2365  
10:40:47 2366  	 -- Check that subscription is active
10:40:47 2367  	 IF var_current_subscr_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE AND
10:40:47 2368  	    var_current_subscr_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED AND
10:40:47 2369  	    var_current_subscr_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD THEN
10:40:47 2370  	   RAISE BAD_SUBSCRIPTION_STATUS;
10:40:47 2371  	 END IF;
10:40:47 2372  
10:40:47 2373  	 -- Update subscription data
10:40:47 2374  	 BEGIN
10:40:47 2375  	   PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47 2376  	     in_subscription_id        => in_subscription_id,
10:40:47 2377  	     in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_CANCELED,
10:40:47 2378  	     in_cancelation_date       => in_cancelation_date,
10:40:47 2379  	     in_updated_by	       => in_updated_by,
10:40:47 2380  	     in_sct_id		       => var_sct_id
10:40:47 2381  	   );
10:40:47 2382  	   EXCEPTION
10:40:47 2383  	     WHEN OTHERS THEN
10:40:47 2384  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2385  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
10:40:47 2386  	 END;
10:40:47 2387  
10:40:47 2388  	 -- Terminate grace period for licenses in grace [SAR-31]
10:40:47 2389  	 BEGIN
10:40:47 2390  	   SELECT
10:40:47 2391  	     LICENSE.ID into var_license_to_disgrace
10:40:47 2392  	   FROM
10:40:47 2393  	     LICENSE
10:40:47 2394  	   WHERE
10:40:47 2395  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 2396  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD
10:40:47 2397  	     AND ROWNUM <= 1
10:40:47 2398  	   ORDER BY
10:40:47 2399  	     CREATE_DATE DESC;
10:40:47 2400  	 EXCEPTION
10:40:47 2401  	   WHEN NO_DATA_FOUND THEN
10:40:47 2402  	     var_license_to_disgrace := NULL;
10:40:47 2403  	 END;
10:40:47 2404  
10:40:47 2405  	 IF var_license_to_disgrace IS NOT NULL THEN
10:40:47 2406  	   PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 2407  	     in_license_id	     => var_license_to_disgrace,
10:40:47 2408  	     in_license_status_id    => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:40:47 2409  	     in_updated_by	     => in_updated_by
10:40:47 2410  	   );
10:40:47 2411  	 END IF;
10:40:47 2412  
10:40:47 2413  	 -- Annotate subscription
10:40:47 2414  	 IF in_note IS NOT NULL THEN
10:40:47 2415  	   BEGIN
10:40:47 2416  	     PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:47 2417  	       in_subscription_id,
10:40:47 2418  	       in_agent_id,
10:40:47 2419  	       in_note,
10:40:47 2420  	       in_updated_by
10:40:47 2421  	     );
10:40:47 2422  	     EXCEPTION
10:40:47 2423  	      WHEN OTHERS THEN
10:40:47 2424  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2425  		RAISE CAN_NOT_CREATE_NOTE;
10:40:47 2426  	   END;
10:40:47 2427  	 END IF;
10:40:47 2428  
10:40:47 2429  EXCEPTION
10:40:47 2430  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2431  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2432  	   SPROC_NAME, 'No such subscription');
10:40:47 2433  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:40:47 2434  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2435  	   SPROC_NAME, 'Bad current subscription status');
10:40:47 2436  WHEN BAD_CANCELATION_REASON THEN
10:40:47 2437  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2438  	   SPROC_NAME, 'Bad cancellation reason');
10:40:47 2439  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
10:40:47 2440  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2441  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
10:40:47 2442  WHEN ACTIVE_INVOICES_FOUND THEN
10:40:47 2443  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 2444  	   SPROC_NAME, 'Invoices with active licenses found');
10:40:47 2445  WHEN CAN_NOT_CREATE_NOTE THEN
10:40:47 2446  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2447  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:40:47 2448  --WHEN OTHERS THEN
10:40:47 2449  --  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2450  --    SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2451  END FINALIZE_CANCELATION;
10:40:47 2452  
10:40:47 2453  /******************************************************************************/
10:40:47 2454  
10:40:47 2455  PROCEDURE FINALIZE_FALSE_START (
10:40:47 2456  /*
10:40:47 2457  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2458  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2459  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 2460  */
10:40:47 2461  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
10:40:47 2462  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:47 2463  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:47 2464  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:47 2465  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:47 2466  	 in_subscription_id    IN NUMBER,
10:40:47 2467  	 in_cancelation_date   IN DATE,
10:40:47 2468  	 in_note	       IN VARCHAR2,
10:40:47 2469  	 in_agent_id	       IN NUMBER,
10:40:47 2470  	 in_updated_by	       IN VARCHAR2
10:40:47 2471  ) AS
10:40:47 2472  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
10:40:47 2473  FALSE_START_REASON CONSTANT NUMBER := 41;
10:40:47 2474  -- VARIABLES
10:40:47 2475  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
10:40:47 2476  var_active_invoices_count NUMBER;
10:40:47 2477  -- EXCEPTIONS
10:40:47 2478  BAD_SUBSCRIPTION_ID	   EXCEPTION;
10:40:47 2479  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
10:40:47 2480  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
10:40:47 2481  ACTIVE_INVOICES_FOUND	   EXCEPTION;
10:40:47 2482  CAN_NOT_CREATE_NOTE	   EXCEPTION;
10:40:47 2483  EXCEPTION_MESSAGE	   VARCHAR2(1024);
10:40:47 2484  BEGIN
10:40:47 2485  
10:40:47 2486  	 -- Get current subscription status
10:40:47 2487  	 BEGIN
10:40:47 2488  	   SELECT
10:40:47 2489  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
10:40:47 2490  	   FROM
10:40:47 2491  	     SUBSCRIPTION
10:40:47 2492  	   WHERE
10:40:47 2493  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2494  	   EXCEPTION
10:40:47 2495  	     WHEN NO_DATA_FOUND THEN
10:40:47 2496  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2497  	 END;
10:40:47 2498  
10:40:47 2499  	 -- Check for invoices with active licenses
10:40:47 2500  	 SELECT
10:40:47 2501  	   COUNT(*) into var_active_invoices_count
10:40:47 2502  	 FROM
10:40:47 2503  	   LICENSE
10:40:47 2504  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:47 2505  	 WHERE
10:40:47 2506  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 2507  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
10:40:47 2508  
10:40:47 2509  	 IF var_active_invoices_count > 0 THEN
10:40:47 2510  	   RAISE ACTIVE_INVOICES_FOUND;
10:40:47 2511  	 END IF;
10:40:47 2512  
10:40:47 2513  	 -- Check that subscription is active
10:40:47 2514  	 IF var_current_subscr_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 2515  	    AND var_current_subscr_status != GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED THEN
10:40:47 2516  	   RAISE BAD_SUBSCRIPTION_STATUS;
10:40:47 2517  	 END IF;
10:40:47 2518  
10:40:47 2519  	 -- Update subscription data
10:40:47 2520  	 BEGIN
10:40:47 2521  	   PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47 2522  	     in_subscription_id        => in_subscription_id,
10:40:47 2523  	     in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_FALSE_START,
10:40:47 2524  	     in_cancelation_date       => in_cancelation_date,
10:40:47 2525  	     in_updated_by	       => in_updated_by,
10:40:47 2526  	     in_sct_id		       => FALSE_START_REASON
10:40:47 2527  	   );
10:40:47 2528  	   EXCEPTION
10:40:47 2529  	     WHEN OTHERS THEN
10:40:47 2530  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2531  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
10:40:47 2532  	 END;
10:40:47 2533  
10:40:47 2534  	 -- Annotate subscription
10:40:47 2535  	 IF in_note IS NOT NULL THEN
10:40:47 2536  	   BEGIN
10:40:47 2537  	     PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:47 2538  	       in_subscription_id,
10:40:47 2539  	       in_agent_id,
10:40:47 2540  	       in_note,
10:40:47 2541  	       in_updated_by
10:40:47 2542  	     );
10:40:47 2543  	     EXCEPTION
10:40:47 2544  	      WHEN OTHERS THEN
10:40:47 2545  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2546  		RAISE CAN_NOT_CREATE_NOTE;
10:40:47 2547  	   END;
10:40:47 2548  	 END IF;
10:40:47 2549  
10:40:47 2550  EXCEPTION
10:40:47 2551  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2552  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2553  	   SPROC_NAME, 'No such subscription');
10:40:47 2554  WHEN BAD_SUBSCRIPTION_STATUS THEN
10:40:47 2555  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2556  	   SPROC_NAME, 'Bad current subscription status');
10:40:47 2557  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
10:40:47 2558  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2559  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
10:40:47 2560  WHEN ACTIVE_INVOICES_FOUND THEN
10:40:47 2561  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 2562  	   SPROC_NAME, 'Invoices with active licenses found');
10:40:47 2563  WHEN CAN_NOT_CREATE_NOTE THEN
10:40:47 2564  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2565  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:40:47 2566  WHEN OTHERS THEN
10:40:47 2567  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2568  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2569  END FINALIZE_FALSE_START;
10:40:47 2570  
10:40:47 2571  /******************************************************************************/
10:40:47 2572  
10:40:47 2573  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
10:40:47 2574  	 in_subscription_id IN NUMBER
10:40:47 2575  ) RETURN NUMBER AS
10:40:47 2576  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
10:40:47 2577  -- VARIABLES
10:40:47 2578  var_is_offer_chain_cancelable NUMBER;
10:40:47 2579  --64603
10:40:47 2580  var_end_date date;
10:40:47 2581  today_date date := current_date;
10:40:47 2582  offer_id number;
10:40:47 2583  -- EXCEPTIONS
10:40:47 2584  COULD_NOT_CHECK	   EXCEPTION;
10:40:47 2585  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2586  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:40:47 2587  BEGIN
10:40:47 2588  
10:40:47 2589  	 BEGIN
10:40:47 2590  	   -- find offer_chain_id for given in_subscription_id
10:40:47 2591  	   SELECT OFFER_CHAIN_ID into offer_id
10:40:47 2592  	   FROM SUBSCRIPTION
10:40:47 2593  	   WHERE ID = in_subscription_id;
10:40:47 2594  	   EXCEPTION
10:40:47 2595  	     WHEN NO_DATA_FOUND THEN
10:40:47 2596  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2597  	     WHEN OTHERS THEN
10:40:47 2598  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 2599  	       RAISE COULD_NOT_CHECK;
10:40:47 2600  	 END;
10:40:47 2601  
10:40:47 2602  	 -- find if it was redeemed from a gift certificate
10:40:47 2603  	 BEGIN
10:40:47 2604  	   SELECT l.end_date INTO var_end_date
10:40:47 2605  	   FROM LICENSE l, GIFT_CERTIFICATE g
10:40:47 2606  	   WHERE l.invoice_id = g.finalized_invoice_id
10:40:47 2607  	   AND l.subscription_id = in_subscription_id;
10:40:47 2608  
10:40:47 2609  	   -- if the license end_date is bigger than today, we are in the
10:40:47 2610  	   -- first period, so we cannot cancel; otherwise can cancel
10:40:47 2611  	   IF var_end_date > today_date THEN
10:40:47 2612  	       RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2613  	   ELSE
10:40:47 2614  	       RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2615  	   END IF;
10:40:47 2616  
10:40:47 2617  	   EXCEPTION
10:40:47 2618  	       -- not coming from a gift certificate,
10:40:47 2619  	       -- use old logic
10:40:47 2620  	       WHEN NO_DATA_FOUND THEN
10:40:47 2621  		   SELECT
10:40:47 2622  		       PROCS_OFFER_CHAIN_V22.IS_OFFER_CHAIN_CANCELABLE(offer_id)
10:40:47 2623  		       INTO var_is_offer_chain_cancelable
10:40:47 2624  		   FROM DUAL;
10:40:47 2625  		   RETURN var_is_offer_chain_cancelable;
10:40:47 2626  	 END;
10:40:47 2627  
10:40:47 2628  EXCEPTION
10:40:47 2629  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2630  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2631  	   SPROC_NAME, 'No such subscription');
10:40:47 2632  WHEN COULD_NOT_CHECK THEN
10:40:47 2633  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 2634  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
10:40:47 2635  WHEN OTHERS THEN
10:40:47 2636  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2637  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2638  
10:40:47 2639  END IS_SUBSCRIPTION_CANCELABLE;
10:40:47 2640  /******************************************************************************/
10:40:47 2641  
10:40:47 2642  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:40:47 2643  /*
10:40:47 2644  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2645  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2646  */
10:40:47 2647  	 in_subscription_id IN NUMBER,
10:40:47 2648  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 2649  ) AS
10:40:47 2650  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
10:40:47 2651  -- VARIABLES
10:40:47 2652  var_offer NUMBER;
10:40:47 2653  -- EXCEPTIONS
10:40:47 2654  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2655  BEGIN
10:40:47 2656  
10:40:47 2657  	 OPEN out_result_set FOR
10:40:47 2658  	 SELECT DISTINCT
10:40:47 2659  	   PRODUCT_OFFERING.ID,
10:40:47 2660  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:47 2661  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:47 2662  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:47 2663  	   PRODUCT_OFFERING.QUANTITY,
10:40:47 2664  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:47 2665  	   PRODUCT_OFFERING.CREATED_BY,
10:40:47 2666  	   CAPABILITY.ID CAP_ID,
10:40:47 2667  	   CAPABILITY.CODE CAP_CODE,
10:40:47 2668  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:47 2669  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:47 2670  	 FROM
10:40:47 2671  	   OFFER_PRODUCT_OFFERING
10:40:47 2672  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:47 2673  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:47 2674  	 WHERE
10:40:47 2675  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:47 2676  	     SELECT
10:40:47 2677  	       LICENSE.OFFER_ID
10:40:47 2678  	     FROM
10:40:47 2679  	       SUBSCRIPTION
10:40:47 2680  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 2681  	     WHERE
10:40:47 2682  	       SUBSCRIPTION.ID = in_subscription_id
10:40:47 2683  	   );
10:40:47 2684  
10:40:47 2685  EXCEPTION
10:40:47 2686  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2687  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2688  	   SPROC_NAME, 'No such subscription');
10:40:47 2689  WHEN OTHERS THEN
10:40:47 2690  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2691  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2692  END GET_SUBSCR_PROD_OFFERRINGS;
10:40:47 2693  
10:40:47 2694  
10:40:47 2695  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
10:40:47 2696  /*
10:40:47 2697  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2698  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2699  */
10:40:47 2700  	 in_subscription_id IN NUMBER,
10:40:47 2701  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 2702  ) AS
10:40:47 2703  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
10:40:47 2704  -- VARIABLES
10:40:47 2705  var_offer NUMBER;
10:40:47 2706  -- EXCEPTIONS
10:40:47 2707  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2708  BEGIN
10:40:47 2709  
10:40:47 2710  	 OPEN out_result_set FOR
10:40:47 2711  	 SELECT DISTINCT
10:40:47 2712  	   PRODUCT_OFFERING.ID,
10:40:47 2713  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:47 2714  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:47 2715  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:47 2716  	   PRODUCT_OFFERING.QUANTITY,
10:40:47 2717  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:47 2718  	   PRODUCT_OFFERING.CREATED_BY,
10:40:47 2719  	   CAPABILITY.ID CAP_ID,
10:40:47 2720  	   CAPABILITY.CODE CAP_CODE,
10:40:47 2721  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:47 2722  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:47 2723  	 FROM
10:40:47 2724  	   OFFER_PRODUCT_OFFERING
10:40:47 2725  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:47 2726  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:47 2727  	 WHERE
10:40:47 2728  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:47 2729  	     SELECT
10:40:47 2730  	       LICENSE.OFFER_ID
10:40:47 2731  	     FROM
10:40:47 2732  	       SUBSCRIPTION
10:40:47 2733  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 2734  	     WHERE
10:40:47 2735  	       SUBSCRIPTION.ID = in_subscription_id
10:40:47 2736  	   );
10:40:47 2737  
10:40:47 2738  EXCEPTION
10:40:47 2739  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2740  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2741  	   SPROC_NAME, 'No such subscription');
10:40:47 2742  WHEN OTHERS THEN
10:40:47 2743  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2744  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2745  END RETRIEVE_SUB_PROD_OFFER;
10:40:47 2746  /******************************************************************************/
10:40:47 2747  
10:40:47 2748  
10:40:47 2749  
10:40:47 2750  
10:40:47 2751  PROCEDURE GET_SUBSCR_LIC_OFFER(
10:40:47 2752  /*
10:40:47 2753  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2754  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2755  */
10:40:47 2756  	 in_subscription_id IN NUMBER,
10:40:47 2757  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 2758  ) AS
10:40:47 2759  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
10:40:47 2760  -- VARIABLES
10:40:47 2761  var_offer_chain NUMBER;
10:40:47 2762  -- EXCEPTIONS
10:40:47 2763  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2764  BEGIN
10:40:47 2765  	 BEGIN
10:40:47 2766  	   SELECT
10:40:47 2767  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
10:40:47 2768  	   FROM
10:40:47 2769  	     SUBSCRIPTION
10:40:47 2770  	   WHERE
10:40:47 2771  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2772  	   EXCEPTION
10:40:47 2773  	     WHEN NO_DATA_FOUND THEN
10:40:47 2774  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2775  	 END;
10:40:47 2776  
10:40:47 2777  	 OPEN out_result_set FOR
10:40:47 2778  	 SELECT DISTINCT
10:40:47 2779  	   po.ID po_id,
10:40:47 2780  	   po.PRODUCT_ID po_product_id,
10:40:47 2781  	   po.TAX_CATEGORY_ID po_tax_category_id,
10:40:47 2782  	   po.UNIT_PRICE po_unit_price,
10:40:47 2783  	   po.QUANTITY po_quantity,
10:40:47 2784  	   po.CREATE_DATE po_create_date,
10:40:47 2785  	   po.CREATED_BY po_created_by,
10:40:47 2786  	   l.ID l_id,
10:40:47 2787  	   l.license_status_id l_license_status_id,
10:40:47 2788  	   l.start_date l_start_date,
10:40:47 2789  	   l.offer_id l_offer_id,
10:40:47 2790  	   l.subscription_id l_subscription_id,
10:40:47 2791  	   l.invoice_id l_invoice_id,
10:40:47 2792  	   l.end_date l_end_date,
10:40:47 2793  	   l.entitlement_end_date l_entitlement_end_date,
10:40:47 2794  	   l.create_date l_create_date,
10:40:47 2795  	   l.created_by l_created_by,
10:40:47 2796  	   l.is_extension l_is_extension,
10:40:47 2797  	   l.current_offer_index l_current_offer_index,
10:40:47 2798  	   l.current_offer_recurr_num l_current_offer_recurr_num,
10:40:47 2799  	   l.needs_entitlements l_needs_entitlements
10:40:47 2800  	 FROM
10:40:47 2801  	   OFFER_PRODUCT_OFFERING opo,
10:40:47 2802  	   PRODUCT_OFFERING po,
10:40:47 2803  	   SUBSCRIPTION s,
10:40:47 2804  	   LICENSE l
10:40:47 2805  	 WHERE
10:40:47 2806  	   opo.product_offering_id = po.id
10:40:47 2807  	   and po.id = l.offer_id
10:40:47 2808  	   and l.subscription_id = s.id
10:40:47 2809  	   and l.license_status_id = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 2810  	   and s.id = in_subscription_id
10:40:47 2811  	 ;
10:40:47 2812  EXCEPTION
10:40:47 2813  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2814  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2815  	   SPROC_NAME, 'No such subscription');
10:40:47 2816  WHEN OTHERS THEN
10:40:47 2817  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2818  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2819  END GET_SUBSCR_LIC_OFFER;
10:40:47 2820  
10:40:47 2821  /******************************************************************************/
10:40:47 2822  
10:40:47 2823  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
10:40:47 2824  /*
10:40:47 2825  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2826  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2827  */
10:40:47 2828  	 in_subscription_id IN NUMBER,
10:40:47 2829  	 out_result	    OUT NUMBER
10:40:47 2830  ) AS
10:40:47 2831  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
10:40:47 2832  -- VARIABLES
10:40:47 2833  temp_subscription_id NUMBER;
10:40:47 2834  var_local_result     NUMBER;
10:40:47 2835  -- EXCEPTIONS
10:40:47 2836  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:47 2837  BEGIN
10:40:47 2838  
10:40:47 2839  	 -- Check that subscription exists
10:40:47 2840  	 BEGIN
10:40:47 2841  	   SELECT
10:40:47 2842  	     SUBSCRIPTION.ID into temp_subscription_id
10:40:47 2843  	   FROM
10:40:47 2844  	     SUBSCRIPTION
10:40:47 2845  	   WHERE
10:40:47 2846  	     SUBSCRIPTION.ID = in_subscription_id;
10:40:47 2847  	   EXCEPTION
10:40:47 2848  	     WHEN NO_DATA_FOUND THEN
10:40:47 2849  	       RAISE BAD_SUBSCRIPTION_ID;
10:40:47 2850  	 END;
10:40:47 2851  
10:40:47 2852  	 var_local_result := NULL;
10:40:47 2853  
10:40:47 2854  	 -- Check charges for each invoice associated with gived subscription
10:40:47 2855  	 FOR f_invoice IN (
10:40:47 2856  	   SELECT DISTINCT
10:40:47 2857  	     LICENSE.INVOICE_ID as "ID"
10:40:47 2858  	   FROM
10:40:47 2859  	     LICENSE
10:40:47 2860  	   WHERE
10:40:47 2861  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:47 2862  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V22.LICENSE_ACTIVE FROM DUAL )
10:40:47 2863  	 )
10:40:47 2864  	 LOOP
10:40:47 2865  
10:40:47 2866  	   -- Check each charge in invoice
10:40:47 2867  	   FOR f_charge IN (
10:40:47 2868  	     SELECT
10:40:47 2869  	       CHARGE.ID,
10:40:47 2870  	       CHARGE.CHARGE_STATUS_ID,
10:40:47 2871  	       CHARGE.CHARGE_AMOUNT
10:40:47 2872  	     FROM
10:40:47 2873  	       CHARGE
10:40:47 2874  	     WHERE
10:40:47 2875  	       CHARGE.INVOICE_ID = f_invoice.ID
10:40:47 2876  	   )
10:40:47 2877  	   LOOP
10:40:47 2878  
10:40:47 2879  	     -- Charge amount < 0     => it is a refund
10:40:47 2880  	     -- Charge status is OPEN => means that it is not processed yet
10:40:47 2881  	     IF f_charge.CHARGE_AMOUNT < 0
10:40:47 2882  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED THEN
10:40:47 2883  	       var_local_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2884  	     END IF;
10:40:47 2885  
10:40:47 2886  	   END LOOP;
10:40:47 2887  
10:40:47 2888  	 END LOOP;
10:40:47 2889  
10:40:47 2890  	 IF var_local_result IS NULL THEN
10:40:47 2891  	   out_result := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2892  	 ELSE
10:40:47 2893  	   out_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2894  	 END IF;
10:40:47 2895  
10:40:47 2896  EXCEPTION
10:40:47 2897  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:47 2898  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2899  	   SPROC_NAME, 'No such transaction id');
10:40:47 2900  WHEN OTHERS THEN
10:40:47 2901  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2902  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2903  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
10:40:47 2904  
10:40:47 2905  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
10:40:47 2906  /*
10:40:47 2907  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2908  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2909  */
10:40:47 2910  	 in_group_id	    IN NUMBER,
10:40:47 2911  	 in_offer_chain_id  IN NUMBER,
10:40:47 2912  	 out_result	    OUT NUMBER
10:40:47 2913  ) AS
10:40:47 2914  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
10:40:47 2915  -- VARIABLES
10:40:47 2916  temp_acct_id	    NUMBER;
10:40:47 2917  temp_oc_id	    NUMBER;
10:40:47 2918  -- EXCEPTIONS
10:40:47 2919  BAD_GROUP_ID EXCEPTION;
10:40:47 2920  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:47 2921  BEGIN
10:40:47 2922  	 -- Check that group id exists
10:40:47 2923  	 BEGIN
10:40:47 2924  	   SELECT
10:40:47 2925  	     ACCOUNT.ID into temp_acct_id
10:40:47 2926  	   FROM
10:40:47 2927  	     ACCOUNT
10:40:47 2928  	   WHERE
10:40:47 2929  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 2930  	   EXCEPTION
10:40:47 2931  	     WHEN NO_DATA_FOUND THEN
10:40:47 2932  	       RAISE BAD_GROUP_ID;
10:40:47 2933  	 END;
10:40:47 2934  	 -- Check that offer chain id exists
10:40:47 2935  	 BEGIN
10:40:47 2936  	   SELECT
10:40:47 2937  	     OFFER_CHAIN.ID into temp_oc_id
10:40:47 2938  	   FROM
10:40:47 2939  	     OFFER_CHAIN
10:40:47 2940  	   WHERE
10:40:47 2941  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:47 2942  	   EXCEPTION
10:40:47 2943  	     WHEN NO_DATA_FOUND THEN
10:40:47 2944  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:47 2945  	 END;
10:40:47 2946  	 SELECT
10:40:47 2947  	   COUNT(*) into out_result
10:40:47 2948  	 FROM
10:40:47 2949  	   SUBSCRIPTION
10:40:47 2950  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 2951  	 WHERE
10:40:47 2952  	   ACCOUNT.GROUP_ID = in_group_id
10:40:47 2953  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 2954  	   AND (
10:40:47 2955  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 2956  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 2957  
10:40:47 2958  EXCEPTION
10:40:47 2959  WHEN BAD_GROUP_ID THEN
10:40:47 2960  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2961  	   SPROC_NAME, 'No such transaction id');
10:40:47 2962  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:47 2963  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2964  	   SPROC_NAME, 'No such offer chain id');
10:40:47 2965  WHEN OTHERS THEN
10:40:47 2966  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2967  	   sproc_name, 'Unknown error', sqlerrm);
10:40:47 2968  END GET_EXISTING_SUBSCR_NUMBER;
10:40:47 2969  
10:40:47 2970  PROCEDURE GET_EXISTING_SUBSCR_IDS (
10:40:47 2971  /*
10:40:47 2972  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 2973  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 2974  */
10:40:47 2975  	 in_group_id	    IN NUMBER,
10:40:47 2976  	 in_offer_chain_id  IN NUMBER,
10:40:47 2977  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 2978  ) AS
10:40:47 2979  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
10:40:47 2980  -- VARIABLES
10:40:47 2981  temp_acct_id	    NUMBER;
10:40:47 2982  temp_oc_id	    NUMBER;
10:40:47 2983  -- EXCEPTIONS
10:40:47 2984  BAD_GROUP_ID EXCEPTION;
10:40:47 2985  BAD_OFFER_CHAIN_ID EXCEPTION;
10:40:47 2986  BEGIN
10:40:47 2987  
10:40:47 2988  	 -- Check that group id exists
10:40:47 2989  	 BEGIN
10:40:47 2990  	   SELECT
10:40:47 2991  	     ACCOUNT.ID into temp_acct_id
10:40:47 2992  	   FROM
10:40:47 2993  	     ACCOUNT
10:40:47 2994  	   WHERE
10:40:47 2995  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 2996  	   EXCEPTION
10:40:47 2997  	     WHEN NO_DATA_FOUND THEN
10:40:47 2998  	       RAISE BAD_GROUP_ID;
10:40:47 2999  	 END;
10:40:47 3000  	 -- Check that offer chain id exists
10:40:47 3001  	 BEGIN
10:40:47 3002  	   SELECT
10:40:47 3003  	     OFFER_CHAIN.ID into temp_oc_id
10:40:47 3004  	   FROM
10:40:47 3005  	     OFFER_CHAIN
10:40:47 3006  	   WHERE
10:40:47 3007  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:47 3008  	   EXCEPTION
10:40:47 3009  	     WHEN NO_DATA_FOUND THEN
10:40:47 3010  	       RAISE BAD_OFFER_CHAIN_ID;
10:40:47 3011  	 END;
10:40:47 3012  
10:40:47 3013  	 OPEN out_result_set FOR
10:40:47 3014  	 SELECT
10:40:47 3015  	   SUBSCRIPTION.ID
10:40:47 3016  	 FROM
10:40:47 3017  	   SUBSCRIPTION
10:40:47 3018  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 3019  	 WHERE
10:40:47 3020  	   ACCOUNT.GROUP_ID = in_group_id
10:40:47 3021  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 3022  	   AND (
10:40:47 3023  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 3024  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 3025  
10:40:47 3026  EXCEPTION
10:40:47 3027  WHEN BAD_GROUP_ID THEN
10:40:47 3028  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 3029  	   SPROC_NAME, 'No such transaction id');
10:40:47 3030  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:47 3031  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 3032  	   SPROC_NAME, 'No such offer chain id');
10:40:47 3033  WHEN OTHERS THEN
10:40:47 3034  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 3035  	   sproc_name, 'Unknown error', sqlerrm);
10:40:47 3036  END GET_EXISTING_SUBSCR_IDS;
10:40:47 3037  
10:40:47 3038  PROCEDURE ADD_META_DATA (
10:40:47 3039  /*
10:40:47 3040  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 3041  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 3042  */
10:40:47 3043  	 in_subscription_id IN NUMBER,
10:40:47 3044  	 in_name	    IN VARCHAR2,
10:40:47 3045  	 in_value	    IN VARCHAR2,
10:40:47 3046  	 in_created_by	    IN VARCHAR2
10:40:47 3047  ) AS
10:40:47 3048  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
10:40:47 3049  BEGIN
10:40:47 3050  
10:40:47 3051  	 INSERT INTO SUBSCRIPTION_META_DATA (
10:40:47 3052  	   ID,
10:40:47 3053  	   SUBSCRIPTION_ID,
10:40:47 3054  	   NAME,
10:40:47 3055  	   VALUE,
10:40:47 3056  	   CREATE_DATE,
10:40:47 3057  	   CREATED_BY
10:40:47 3058  	 ) VALUES (
10:40:47 3059  	   SUBMD_ID_SEQ.nextVal,
10:40:47 3060  	   in_subscription_id,
10:40:47 3061  	   in_name,
10:40:47 3062  	   in_value,
10:40:47 3063  	   sysdate,
10:40:47 3064  	   in_created_by
10:40:47 3065  	 );
10:40:47 3066  
10:40:47 3067  EXCEPTION
10:40:47 3068  WHEN OTHERS THEN
10:40:47 3069  	 IF SQLCODE = -2291 THEN
10:40:47 3070  	   PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 3071  	     SPROC_NAME, 'No such subscription');
10:40:47 3072  	 ELSE
10:40:47 3073  	   PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 3074  	     SPROC_NAME, 'Unknown error', sqlerrm);
10:40:47 3075  	 END IF;
10:40:47 3076  END ADD_META_DATA;
10:40:47 3077  
10:40:47 3078  /******************************************************************************/
10:40:47 3079  
10:40:47 3080  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:40:47 3081  /*
10:40:47 3082  APP_EXCEPTION_CODES_V22.INVALID_PARAMETER
10:40:47 3083  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 3084  */
10:40:47 3085  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:40:47 3086  	 out_result_set       OUT SYS_REFCURSOR
10:40:47 3087  ) AS
10:40:47 3088  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
10:40:47 3089  -- Exceptions
10:40:47 3090  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
10:40:47 3091  BEGIN
10:40:47 3092  
10:40:47 3093  	 IF in_subscriptions_ids IS NULL THEN
10:40:47 3094  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
10:40:47 3095  	 END IF;
10:40:47 3096  
10:40:47 3097  	 OPEN out_result_set FOR
10:40:47 3098  	 SELECT
10:40:47 3099  	   SMD.SUBSCRIPTION_ID,
10:40:47 3100  	   SMD.NAME,
10:40:47 3101  	   SMD.VALUE
10:40:47 3102  	 FROM
10:40:47 3103  	   SUBSCRIPTION_META_DATA SMD
10:40:47 3104  	 WHERE
10:40:47 3105  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
10:40:47 3106  
10:40:47 3107  EXCEPTION
10:40:47 3108  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
10:40:47 3109  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 3110  	   SPROC_NAME, 'Bad subscription ids parameter');
10:40:47 3111  WHEN OTHERS THEN
10:40:47 3112  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 3113  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 3114  END GET_SUBSCRIPTIONS_META_DATA;
10:40:47 3115  
10:40:47 3116  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
10:40:47 3117  /*
10:40:47 3118  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 3119  */
10:40:47 3120  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
10:40:47 3121  	 out_result_set     OUT SYS_REFCURSOR
10:40:47 3122  ) AS
10:40:47 3123  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
10:40:47 3124  BEGIN
10:40:47 3125  	 OPEN out_result_set FOR
10:40:47 3126  	 SELECT subscription.id FROM
10:40:47 3127  	   subscription
10:40:47 3128  	 INNER JOIN license ON license.subscription_id = subscription.id
10:40:47 3129  	 INNER JOIN invoice ON invoice.id = license.invoice_id
10:40:47 3130  	 INNER JOIN charge ON invoice.id = charge.invoice_id
10:40:47 3131  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
10:40:47 3132  	 WHERE transaction.order_id = in_order_id;
10:40:47 3133  EXCEPTION
10:40:47 3134  WHEN OTHERS THEN
10:40:47 3135  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 3136  	   SPROC_NAME, 'Unknown error', sqlerrm);
10:40:47 3137  END GET_SUBS_BY_TRNS_ORDER_ID;
10:40:47 3138  
10:40:47 3139  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
10:40:47 3140  	(
10:40:47 3141  /*
10:40:47 3142  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 3143  */
10:40:47 3144  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:47 3145  	 out_result_set      OUT SYS_REFCURSOR
10:40:47 3146  )
10:40:47 3147  AS
10:40:47 3148  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
10:40:47 3149  BEGIN
10:40:47 3150  	 OPEN out_result_set FOR
10:40:47 3151  	 SELECT
10:40:47 3152  	   c.ID,
10:40:47 3153  	   c.TRANSACTION_ID,
10:40:47 3154  	   c.INSTRUMENT_ID,
10:40:47 3155  	   c.INSTRUMENT_TYPE_ID,
10:40:47 3156  	   c.CHARGE_AMOUNT,
10:40:47 3157  	   c.CREATE_DATE,
10:40:47 3158  	   c.CREATED_BY,
10:40:47 3159  	   c.INVOICE_ID
10:40:47 3160  	  FROM
10:40:47 3161  	   subscription s,
10:40:47 3162  	   license l,
10:40:47 3163  	   charge c
10:40:47 3164  	 WHERE
10:40:47 3165  	   s.id = l.subscription_id and
10:40:47 3166  	   l.invoice_id = c.invoice_id and
10:40:47 3167  	   c.charge_status_id = GLOBAL_STATUSES_V22.CHARGE_OPENED and
10:40:47 3168  	   exists (
10:40:47 3169  	     select null
10:40:47 3170  	     from transaction t
10:40:47 3171  	     where
10:40:47 3172  	       t.id = c.transaction_id
10:40:47 3173  	   ) and
10:40:47 3174  	   s.id = in_subscription_id;
10:40:47 3175  EXCEPTION
10:40:47 3176  WHEN OTHERS THEN
10:40:47 3177  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 3178  	   SPROC_NAME, 'Unknown error', sqlerrm);
10:40:47 3179  END GET_OPEN_CHARGES_BY_SUBID;
10:40:47 3180  
10:40:47 3181  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
10:40:47 3182  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:40:47 3183  ) RETURN NUMBER
10:40:47 3184  AS
10:40:47 3185  var_gift_certificate_id NUMBER;
10:40:47 3186  BEGIN
10:40:47 3187  	     SELECT id INTO var_gift_certificate_id
10:40:47 3188  	     FROM
10:40:47 3189  	       gift_certificate gc
10:40:47 3190  	     WHERE
10:40:47 3191  	       gc.finalized_invoice_id in (
10:40:47 3192  		 SELECT invoice_id
10:40:47 3193  		 FROM (
10:40:47 3194  		   SELECT l.invoice_id
10:40:47 3195  		   FROM
10:40:47 3196  		     license l
10:40:47 3197  		   WHERE
10:40:47 3198  		     l.subscription_id = in_subscription_id
10:40:47 3199  		   ORDER BY l.create_date asc
10:40:47 3200  		 )
10:40:47 3201  	       )
10:40:47 3202  	       and rownum <= 1;
10:40:47 3203  	     return var_gift_certificate_id;
10:40:47 3204  END GET_GIFT_CERT_ID_BY_SUB_ID;
10:40:47 3205  
10:40:47 3206  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
10:40:47 3207  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
10:40:47 3208  ) RETURN VARCHAR2
10:40:47 3209  AS
10:40:47 3210  var_gift_certificate_code VARCHAR2(255 BYTE);
10:40:47 3211  BEGIN
10:40:47 3212  	     SELECT code INTO var_gift_certificate_code
10:40:47 3213  	     FROM
10:40:47 3214  	       gift_certificate gc
10:40:47 3215  	     WHERE
10:40:47 3216  	       gc.finalized_invoice_id in (
10:40:47 3217  		 SELECT invoice_id
10:40:47 3218  		 FROM (
10:40:47 3219  		   SELECT l.invoice_id
10:40:47 3220  		   FROM
10:40:47 3221  		     license l
10:40:47 3222  		   WHERE
10:40:47 3223  		     l.subscription_id = in_subscription_id
10:40:47 3224  		 )
10:40:47 3225  	       )
10:40:47 3226  	       and rownum <= 1;
10:40:47 3227  	     return var_gift_certificate_code;
10:40:47 3228  END GET_GIFT_CERT_CODE_BY_SUB_ID;
10:40:47 3229  
10:40:47 3230  PROCEDURE GET_ACTIVE_MEU_SUBS (
10:40:47 3231  	 out_result_set      OUT SYS_REFCURSOR
10:40:47 3232  )
10:40:47 3233  AS
10:40:47 3234  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
10:40:47 3235  BEGIN
10:40:47 3236  	 OPEN out_result_set FOR
10:40:47 3237  	       SELECT
10:40:47 3238  		   s.id,
10:40:47 3239  		   s.instrument_type_id,
10:40:47 3240  		   s.instrument_id,
10:40:47 3241  		   a.group_id,
10:40:47 3242  		   s.offer_chain_id
10:40:47 3243  	       FROM
10:40:47 3244  		   core_owner.subscription s,
10:40:47 3245  		   core_owner.account a
10:40:47 3246  	       WHERE
10:40:47 3247  		   a.id = s.account_id AND(
10:40:47 3248  		       s.offer_chain_id = 1745992781 OR
10:40:47 3249  		       s.offer_chain_id = 3902149773 OR
10:40:47 3250  		       s.offer_chain_id = 2240201337) AND
10:40:47 3251  		   NOT EXISTS
10:40:47 3252  		   (
10:40:47 3253  		       SELECT
10:40:47 3254  			   1
10:40:47 3255  		       FROM
10:40:47 3256  			   core_owner.subscription ss
10:40:47 3257  		       WHERE
10:40:47 3258  			   ss.account_id = a.id AND(
10:40:47 3259  			       ss.offer_chain_id = 2794122734 OR
10:40:47 3260  			       ss.offer_chain_id = 3564368005 OR
10:40:47 3261  			       ss.offer_chain_id = 757934392)) AND
10:40:47 3262  		   rownum < 5000;
10:40:47 3263  END GET_ACTIVE_MEU_SUBS;
10:40:47 3264  
10:40:47 3265  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
10:40:47 3266  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:47 3267  	 out_offer_id	     OUT LICENSE.ID%TYPE
10:40:47 3268  )
10:40:47 3269  AS
10:40:47 3270  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
10:40:47 3271  BEGIN
10:40:47 3272  	 SELECT OFFER_ID INTO out_offer_id
10:40:47 3273  	 FROM LICENSE L,
10:40:47 3274  	 (
10:40:47 3275  	   SELECT MIN(ID) ID FROM LICENSE
10:40:47 3276  	   WHERE SUBSCRIPTION_ID = in_subscription_id
10:40:47 3277  	   AND LICENSE_STATUS_ID = 2
10:40:47 3278  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
10:40:47 3279  	 ) EARLIEST_ACTIVE_LICENSE
10:40:47 3280  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
10:40:47 3281  END GET_EARLIEST_ACTIVE_OFFER_ID;
10:40:47 3282  
10:40:47 3283  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
10:40:47 3284  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
10:40:47 3285  	 out_license_id      OUT LICENSE.ID%TYPE
10:40:47 3286  )
10:40:47 3287  AS
10:40:47 3288  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
10:40:47 3289  BEGIN
10:40:47 3290  	 SELECT MIN(ID) into out_license_id
10:40:47 3291  	 FROM LICENSE
10:40:47 3292  	 WHERE SUBSCRIPTION_ID = in_subscription_id
10:40:47 3293  	   AND LICENSE_STATUS_ID = 2
10:40:47 3294  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
10:40:47 3295  END GET_EARLIEST_ACTIVE_LICENSE_ID;
10:40:47 3296  
10:40:47 3297  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:40:47 3298  	 out_result_set      OUT SYS_REFCURSOR
10:40:47 3299  )
10:40:47 3300  AS
10:40:47 3301  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
10:40:47 3302  BEGIN
10:40:47 3303  	 OPEN out_result_set FOR
10:40:47 3304  	   SELECT
10:40:47 3305  	     s.id
10:40:47 3306  	   FROM
10:40:47 3307  	     core_owner.transaction t
10:40:47 3308  	   INNER JOIN
10:40:47 3309  	     core_owner.charge c
10:40:47 3310  	   ON
10:40:47 3311  	     c.transaction_id = t.id
10:40:47 3312  	   INNER JOIN
10:40:47 3313  	     core_owner.invoice i
10:40:47 3314  	   ON
10:40:47 3315  	     i.id = c.invoice_id
10:40:47 3316  	   INNER JOIN
10:40:47 3317  	     core_owner.license l
10:40:47 3318  	   ON
10:40:47 3319  	     i.id = l.invoice_id
10:40:47 3320  	   INNER JOIN
10:40:47 3321  	     core_owner.subscription s
10:40:47 3322  	   ON
10:40:47 3323  	     l.subscription_id = s.id
10:40:47 3324  	   INNER JOIN
10:40:47 3325  	     core_owner.account a
10:40:47 3326  	   ON
10:40:47 3327  	     s.account_id = a.id
10:40:47 3328  	   JOIN
10:40:47 3329  	     core_owner.rcn_cpt_chargeback_act_detail ccad
10:40:47 3330  	   ON
10:40:47 3331  	     t.order_id = ccad.merchant_order_number
10:40:47 3332  	   WHERE
10:40:47 3333  	     ccad.chargeback_category = 'RECD'
10:40:47 3334  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 3335  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
10:40:47 3336  
10:40:47 3337  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:40:47 3338  	 out_result_set      OUT SYS_REFCURSOR
10:40:47 3339  )
10:40:47 3340  AS
10:40:47 3341  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
10:40:47 3342  BEGIN
10:40:47 3343  	 OPEN out_result_set FOR
10:40:47 3344  	   SELECT
10:40:47 3345  	     s.id
10:40:47 3346  	   FROM
10:40:47 3347  	     core_owner.transaction t
10:40:47 3348  	   INNER JOIN
10:40:47 3349  	     core_owner.charge c
10:40:47 3350  	   ON
10:40:47 3351  	     c.transaction_id = t.id
10:40:47 3352  	   INNER JOIN
10:40:47 3353  	     core_owner.invoice i
10:40:47 3354  	   ON
10:40:47 3355  	     i.id = c.invoice_id
10:40:47 3356  	   INNER JOIN
10:40:47 3357  	     core_owner.license l
10:40:47 3358  	   ON
10:40:47 3359  	     i.id = l.invoice_id
10:40:47 3360  	   INNER JOIN
10:40:47 3361  	     core_owner.subscription s
10:40:47 3362  	   ON
10:40:47 3363  	     l.subscription_id = s.id
10:40:47 3364  	   INNER JOIN
10:40:47 3365  	     core_owner.account a
10:40:47 3366  	   ON
10:40:47 3367  	     s.account_id = a.id
10:40:47 3368  	   INNER JOIN
10:40:47 3369  	     core_owner.rcn_pp_trans_detail ptd
10:40:47 3370  	   ON
10:40:47 3371  	     t.order_id = ptd.invoice_id
10:40:47 3372  	   WHERE
10:40:47 3373  	     ptd.trans_status = 'D'
10:40:47 3374  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 3375  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
10:40:47 3376  
10:40:47 3377  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:40:47 3378  	 in_max_days_until_close IN NUMBER,
10:40:47 3379  	 in_num_subs_to_fetch	 IN NUMBER,
10:40:47 3380  	 out_result_set 	 OUT SYS_REFCURSOR
10:40:47 3381  )
10:40:47 3382  AS
10:40:47 3383  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
10:40:47 3384  BEGIN
10:40:47 3385  	 OPEN out_result_set FOR
10:40:47 3386  	 SELECT
10:40:47 3387  	     *
10:40:47 3388  	 FROM
10:40:47 3389  	     (
10:40:47 3390  		 SELECT
10:40:47 3391  		     a.group_id group_id,
10:40:47 3392  		     l.grace_end_date grace_end_date
10:40:47 3393  		 FROM
10:40:47 3394  		     license l
10:40:47 3395  		 JOIN
10:40:47 3396  		     subscription s
10:40:47 3397  		 ON
10:40:47 3398  		     s.id = l.subscription_id
10:40:47 3399  		 JOIN
10:40:47 3400  		     account a
10:40:47 3401  		 ON
10:40:47 3402  		     a.id = s.account_id
10:40:47 3403  		 WHERE
10:40:47 3404  		     l.license_status_id = GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD
10:40:47 3405  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
10:40:47 3406  		 AND NOT EXISTS
10:40:47 3407  		     (
10:40:47 3408  			 SELECT
10:40:47 3409  			     NULL
10:40:47 3410  			 FROM
10:40:47 3411  			     process_retry_throttle
10:40:47 3412  			 WHERE
10:40:47 3413  			     process_name = sproc_name
10:40:47 3414  			 AND generic_id = a.group_id)
10:40:47 3415  		 AND rownum <= in_num_subs_to_fetch * 10
10:40:47 3416  		 ORDER BY
10:40:47 3417  		     dbms_random.value)
10:40:47 3418  	 WHERE
10:40:47 3419  	     rownum <= in_num_subs_to_fetch;
10:40:47 3420  END GET_GRACE_PERIOD_SUB_REGIS;
10:40:47 3421  
10:40:47 3422  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:40:47 3423  	 out_result_set      OUT SYS_REFCURSOR
10:40:47 3424  )
10:40:47 3425  AS
10:40:47 3426  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
10:40:47 3427  BEGIN
10:40:47 3428  	 OPEN out_result_set FOR
10:40:47 3429  	   SELECT
10:40:47 3430  	     s.id
10:40:47 3431  	   FROM
10:40:47 3432  	     core_owner.transaction t
10:40:47 3433  	   INNER JOIN
10:40:47 3434  	     core_owner.charge c
10:40:47 3435  	   ON
10:40:47 3436  	     c.transaction_id = t.id
10:40:47 3437  	   INNER JOIN
10:40:47 3438  	     core_owner.invoice i
10:40:47 3439  	   ON
10:40:47 3440  	     i.id = c.invoice_id
10:40:47 3441  	   INNER JOIN
10:40:47 3442  	     core_owner.license l
10:40:47 3443  	   ON
10:40:47 3444  	     i.id = l.invoice_id
10:40:47 3445  	   INNER JOIN
10:40:47 3446  	     core_owner.subscription s
10:40:47 3447  	   ON
10:40:47 3448  	     l.subscription_id = s.id
10:40:47 3449  	   INNER JOIN
10:40:47 3450  	     core_owner.account a
10:40:47 3451  	   ON
10:40:47 3452  	     s.account_id = a.id
10:40:47 3453  	   INNER JOIN
10:40:47 3454  	     core_owner.rcn_amex_chargeback ac
10:40:47 3455  	   ON
10:40:47 3456  	     t.order_id = lower(ac.ind_ref_number)
10:40:47 3457  	   WHERE
10:40:47 3458  	     s.subscription_status_id in (GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 3459  END GET_ACT_SUBS_W_AMEX_CB;
10:40:47 3460  
10:40:47 3461  END PROCS_SUBSCRIPTION_V22;
10:40:47 3462  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.12
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE GET_INVOICE_IDS(
10:40:47   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:40:47   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
10:40:47   6  	out_result_set OUT SYS_REFCURSOR
10:40:47   7  ) AS
10:40:47   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
10:40:47   9  BEGIN
10:40:47  10  	OPEN out_result_set FOR
10:40:47  11  	  SELECT
10:40:47  12  	    Invoice.ID
10:40:47  13  	  FROM
10:40:47  14  	      Invoice
10:40:47  15  	      INNER JOIN License
10:40:47  16  		ON
10:40:47  17  		  License.Invoice_Id = Invoice.Id
10:40:47  18  	      INNER JOIN Subscription
10:40:47  19  		ON
10:40:47  20  		  License.Subscription_Id = Subscription.Id
10:40:47  21  	      INNER JOIN account
10:40:47  22  		ON
10:40:47  23  		  Subscription.Account_Id = account.id
10:40:47  24  	  WHERE
10:40:47  25  	    Account.Group_Id = in_group_id
10:40:47  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
10:40:47  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V22.INVOICE_OPEN;
10:40:47  28  END GET_INVOICE_IDS;
10:40:47  29  
10:40:47  30  
10:40:47  31  PROCEDURE IS_INVOICE_FOR_GC (
10:40:47  32  	in_invoice_id IN NUMBER,
10:40:47  33  	out_result    OUT NUMBER
10:40:47  34  ) AS
10:40:47  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
10:40:47  36  var_is_for_gc NUMBER;
10:40:47  37  BEGIN
10:40:47  38  	SELECT
10:40:47  39  	  count(1) into var_is_for_gc
10:40:47  40  	FROM GIFT_CERTIFICATE GC
10:40:47  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
10:40:47  42  
10:40:47  43  	IF var_is_for_gc > 0 THEN
10:40:47  44  	  out_result := 1;
10:40:47  45  	ELSE
10:40:47  46  	  out_result := 0;
10:40:47  47  	END IF;
10:40:47  48  END IS_INVOICE_FOR_GC;
10:40:47  49  
10:40:47  50  PROCEDURE CREATE_INVOICE(
10:40:47  51  /*
10:40:47  52  Throws exceptions:
10:40:47  53  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47  54  */
10:40:47  55  	  in_invoice_status IN NUMBER,
10:40:47  56  	  in_created_by     IN VARCHAR2,
10:40:47  57  	  in_tax_exempt_id  IN VARCHAR2,
10:40:47  58  	  out_invoice_id    OUT NUMBER
10:40:47  59  ) AS
10:40:47  60  -- VARIABLES
10:40:47  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
10:40:47  62  var_new_invoice_id NUMBER;
10:40:47  63  -- EXCEPTIONS
10:40:47  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47  65  BEGIN
10:40:47  66  
10:40:47  67  	PROCS_INVOICE_CRU_V22.CREATE_INVOICE(
10:40:47  68  	  out_invoice_id		 => var_new_invoice_id,
10:40:47  69  	  in_created_by 		 => in_created_by,
10:40:47  70  	  in_invoice_status_id		 => in_invoice_status,
10:40:47  71  	  in_tax_exempt_id		 => in_tax_exempt_id
10:40:47  72  	);
10:40:47  73  
10:40:47  74  	out_invoice_id := var_new_invoice_id;
10:40:47  75  
10:40:47  76  EXCEPTION
10:40:47  77  WHEN OTHERS THEN
10:40:47  78  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47  80  END CREATE_INVOICE;
10:40:47  81  
10:40:47  82  /************************************************************/
10:40:47  83  
10:40:47  84  PROCEDURE GET_PENDING_INVOICES (
10:40:47  85  /*
10:40:47  86  Throws exceptions:
10:40:47  87  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47  88  */
10:40:47  89  	out_result_set	     OUT SYS_REFCURSOR,
10:40:47  90  	in_row_number	     IN NUMBER DEFAULT NULL
10:40:47  91  ) AS
10:40:47  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
10:40:47  93  -- COMSTANTS
10:40:47  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
10:40:47  95  -- VARIABLES
10:40:47  96  var_row_number NUMBER;
10:40:47  97  BEGIN
10:40:47  98  
10:40:47  99  	IF in_row_number IS NULL THEN
10:40:47 100  	  var_row_number := DEFAULT_ROW_NUMBER;
10:40:47 101  	ELSE
10:40:47 102  	  var_row_number := in_row_number;
10:40:47 103  	END IF;
10:40:47 104  
10:40:47 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
10:40:47 106  	OPEN out_result_set FOR
10:40:47 107  SELECT * FROM
10:40:47 108  (
10:40:47 109  	SELECT
10:40:47 110  	  INVOICE.ID
10:40:47 111  	FROM
10:40:47 112  	  CHARGE
10:40:47 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
10:40:47 114  	WHERE
10:40:47 115  	  EXISTS(
10:40:47 116  	    SELECT NULL
10:40:47 117  	    FROM TRANSACTION
10:40:47 118  	    WHERE
10:40:47 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_PENDING
10:40:47 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:40:47 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V22.TRUE
10:40:47 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
10:40:47 123  	  )
10:40:47 124  	  AND
10:40:47 125  	  NOT EXISTS(
10:40:47 126  	    SELECT NULL
10:40:47 127  	    FROM PROCESS_RETRY_THROTTLE
10:40:47 128  	    WHERE PROCESS_NAME = SPROC_NAME
10:40:47 129  	      AND GENERIC_ID = INVOICE.ID
10:40:47 130  	  )
10:40:47 131  	  AND ROWNUM <= var_row_number*10
10:40:47 132  	  ORDER BY dbms_random.value
10:40:47 133  ) WHERE
10:40:47 134  	  ROWNUM <= var_row_number;
10:40:47 135  
10:40:47 136  EXCEPTION
10:40:47 137  WHEN OTHERS THEN
10:40:47 138  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 140  END GET_PENDING_INVOICES;
10:40:47 141  
10:40:47 142  /************************************************************/
10:40:47 143  
10:40:47 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
10:40:47 145  	in_invoice_id IN  NUMBER
10:40:47 146  ) RETURN NUMBER AS
10:40:47 147  var_amount NUMBER;
10:40:47 148  BEGIN
10:40:47 149  
10:40:47 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
10:40:47 151  	RETURN var_amount;
10:40:47 152  
10:40:47 153  END;
10:40:47 154  
10:40:47 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:47 156  /*
10:40:47 157  Throws exceptions:
10:40:47 158  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 159  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 160  */
10:40:47 161  	in_invoice_id IN  NUMBER,
10:40:47 162  	out_amount    OUT NUMBER
10:40:47 163  ) AS
10:40:47 164  -- VARIABLES
10:40:47 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
10:40:47 166  temp_invoice_id	     NUMBER;
10:40:47 167  var_total_amount	     NUMBER(10,6);
10:40:47 168  var_final_amount	     NUMBER(10,2);
10:40:47 169  var_line_item_amount   NUMBER(10,6);
10:40:47 170  
10:40:47 171  var_line_items_set     SYS_REFCURSOR;
10:40:47 172  var_line_item_id	     NUMBER;
10:40:47 173  var_line_item_quantity NUMBER;
10:40:47 174  var_line_item_price    NUMBER (10,2);
10:40:47 175  
10:40:47 176  var_discount_fixed_amount NUMBER (10,2);
10:40:47 177  var_discount_percent_amount NUMBER (10,2);
10:40:47 178  
10:40:47 179  -- EXCEPTIONS
10:40:47 180  BAD_INVOICE_ID		    EXCEPTION;
10:40:47 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
10:40:47 182  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 183  BEGIN
10:40:47 184  
10:40:47 185  	var_total_amount := 0;
10:40:47 186  
10:40:47 187  	-- Check that given invoice exists
10:40:47 188  	BEGIN
10:40:47 189  	  SELECT
10:40:47 190  	    INVOICE.ID into temp_invoice_id
10:40:47 191  	  FROM
10:40:47 192  	    INVOICE
10:40:47 193  	  WHERE
10:40:47 194  	    INVOICE.ID = in_invoice_id
10:40:47 195  	    AND ROWNUM <= 1;
10:40:47 196  	  EXCEPTION
10:40:47 197  	    WHEN NO_DATA_FOUND THEN
10:40:47 198  	      RAISE BAD_INVOICE_ID;
10:40:47 199  	END;
10:40:47 200  
10:40:47 201  	-- Calculate amount for each line item in invoice
10:40:47 202  	FOR f_line_item IN (
10:40:47 203  	  SELECT
10:40:47 204  	    LINE_ITEM.ID
10:40:47 205  	  FROM
10:40:47 206  	    LINE_ITEM
10:40:47 207  	  WHERE
10:40:47 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
10:40:47 209  	)
10:40:47 210  	LOOP
10:40:47 211  	  BEGIN
10:40:47 212  	    PROCS_LINE_ITEMS_V22.CALCULATE_LINE_ITEM_AMOUNT(
10:40:47 213  	      in_line_item_id => f_line_item.ID,
10:40:47 214  	      out_amount      => var_line_item_amount
10:40:47 215  	    );
10:40:47 216  	    var_total_amount := var_total_amount + var_line_item_amount;
10:40:47 217  	    EXCEPTION
10:40:47 218  	      WHEN OTHERS THEN
10:40:47 219  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
10:40:47 221  	  END;
10:40:47 222  	END LOOP;
10:40:47 223  	var_final_amount := var_total_amount;
10:40:47 224  	out_amount := var_final_amount;
10:40:47 225  
10:40:47 226  EXCEPTION
10:40:47 227  WHEN BAD_INVOICE_ID THEN
10:40:47 228  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 229  	  SPROC_NAME, 'No such invoice');
10:40:47 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
10:40:47 231  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
10:40:47 233  WHEN OTHERS THEN
10:40:47 234  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 236  END;
10:40:47 237  
10:40:47 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:40:47 239  /*
10:40:47 240  Throws exceptions:
10:40:47 241  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 242  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 243  */
10:40:47 244  	in_invoice_id  IN  NUMBER,
10:40:47 245  	out_account_id OUT NUMBER
10:40:47 246  ) AS
10:40:47 247  -- VARIABLES
10:40:47 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
10:40:47 249  temp_gc_account_id NUMBER;
10:40:47 250  temp_ss_account_id NUMBER;
10:40:47 251  temp_invoice_id	 NUMBER;
10:40:47 252  -- EXCEPTIONS
10:40:47 253  BAD_INVOICE_ID	   EXCEPTION;
10:40:47 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
10:40:47 255  BEGIN
10:40:47 256  
10:40:47 257  	-- Check that given invoice exists
10:40:47 258  	BEGIN
10:40:47 259  	  SELECT
10:40:47 260  	    INVOICE.ID into temp_invoice_id
10:40:47 261  	  FROM
10:40:47 262  	    INVOICE
10:40:47 263  	  WHERE
10:40:47 264  	    INVOICE.ID = in_invoice_id;
10:40:47 265  	  EXCEPTION
10:40:47 266  	    WHEN NO_DATA_FOUND THEN
10:40:47 267  	      RAISE BAD_INVOICE_ID;
10:40:47 268  	END;
10:40:47 269  
10:40:47 270  	-- Try to find gift certificate with given invoice
10:40:47 271  	BEGIN
10:40:47 272  	  SELECT
10:40:47 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
10:40:47 274  	  FROM
10:40:47 275  	    GIFT_CERTIFICATE
10:40:47 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
10:40:47 277  	  WHERE
10:40:47 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
10:40:47 279  	    AND ROWNUM <= 1;
10:40:47 280  	  EXCEPTION
10:40:47 281  	    WHEN NO_DATA_FOUND THEN
10:40:47 282  	      temp_gc_account_id := NULL;
10:40:47 283  	END;
10:40:47 284  
10:40:47 285  	-- check subscriptions for given invoice
10:40:47 286  	IF temp_gc_account_id IS NOT NULL THEN
10:40:47 287  	  out_account_id := temp_gc_account_id;
10:40:47 288  	ELSE
10:40:47 289  	  BEGIN
10:40:47 290  	    SELECT
10:40:47 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
10:40:47 292  	    FROM
10:40:47 293  	      LICENSE
10:40:47 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:47 296  	    WHERE
10:40:47 297  	      LICENSE.INVOICE_ID = in_invoice_id
10:40:47 298  	      AND ROWNUM <= 1;
10:40:47 299  	    EXCEPTION
10:40:47 300  	      WHEN NO_DATA_FOUND THEN
10:40:47 301  		temp_ss_account_id := NULL;
10:40:47 302  	  END;
10:40:47 303  	  IF temp_ss_account_id IS NULL THEN
10:40:47 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
10:40:47 305  	  ELSE
10:40:47 306  	    out_account_id := temp_ss_account_id;
10:40:47 307  	  END IF;
10:40:47 308  	END IF;
10:40:47 309  
10:40:47 310  EXCEPTION
10:40:47 311  WHEN BAD_INVOICE_ID THEN
10:40:47 312  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 313  	  SPROC_NAME, 'No such invoice');
10:40:47 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:40:47 315  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 316  	  SPROC_NAME, 'Could not find account by given invoice id');
10:40:47 317  WHEN OTHERS THEN
10:40:47 318  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 320  END GET_ACCOUNT_BY_INVOICE_ID;
10:40:47 321  
10:40:47 322  /*****************************************************************/
10:40:47 323  
10:40:47 324  PROCEDURE GET_INVOICE_DETAILS (
10:40:47 325  /*
10:40:47 326  Throws exceptions:
10:40:47 327  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 328  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 329  */
10:40:47 330  	in_invoice_id	   IN  NUMBER,
10:40:47 331  	out_group_id	   OUT NUMBER,
10:40:47 332  	out_status_id	   OUT NUMBER,
10:40:47 333  	out_line_items_set OUT SYS_REFCURSOR,
10:40:47 334  	out_pp_charges_set OUT SYS_REFCURSOR,
10:40:47 335  	out_cc_charges_set OUT SYS_REFCURSOR,
10:40:47 336  	out_gc_charges_set OUT SYS_REFCURSOR
10:40:47 337  ) AS
10:40:47 338  -- VARIABLES
10:40:47 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
10:40:47 340  
10:40:47 341  -- EXCEPTIONS
10:40:47 342  BAD_INVOICE_ID	     EXCEPTION;
10:40:47 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
10:40:47 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 345  BEGIN
10:40:47 346  
10:40:47 347  	-- get invoice status
10:40:47 348  	BEGIN
10:40:47 349  	  SELECT
10:40:47 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
10:40:47 351  	  FROM
10:40:47 352  	    INVOICE
10:40:47 353  	  WHERE
10:40:47 354  	    INVOICE.ID = in_invoice_id;
10:40:47 355  	  EXCEPTION
10:40:47 356  	    WHEN NO_DATA_FOUND THEN
10:40:47 357  	      RAISE BAD_INVOICE_ID;
10:40:47 358  	END;
10:40:47 359  
10:40:47 360  	-- get group id
10:40:47 361  	BEGIN
10:40:47 362  	  PROCS_INVOICE_V22.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
10:40:47 363  	  EXCEPTION
10:40:47 364  	    WHEN OTHERS THEN
10:40:47 365  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
10:40:47 367  	END;
10:40:47 368  
10:40:47 369  	-- get all line items for given invoice
10:40:47 370  	OPEN out_line_items_set FOR
10:40:47 371  	SELECT
10:40:47 372  	  LINE_ITEM.AMOUNT,
10:40:47 373  	  LINE_ITEM.ID,
10:40:47 374  	  LINE_ITEM.CREATED_BY,
10:40:47 375  	  LINE_ITEM.CREATE_DATE,
10:40:47 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
10:40:47 377  	  LINE_ITEM.TAXES_AMOUNT,
10:40:47 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
10:40:47 379  	  LINE_ITEM.INVOICE_ID
10:40:47 380  	FROM
10:40:47 381  	  LINE_ITEM
10:40:47 382  	WHERE
10:40:47 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
10:40:47 384  
10:40:47 385  	-- get all pp charges for given invoice
10:40:47 386  	OPEN out_pp_charges_set FOR
10:40:47 387  	SELECT
10:40:47 388  	  CHARGE.ID as "CHARGE_ID",
10:40:47 389  	  CHARGE_AMOUNT,
10:40:47 390  	  CHARGE.INSTRUMENT_ID,
10:40:47 391  	  CHARGE.CHARGE_STATUS_ID
10:40:47 392  	FROM
10:40:47 393  	  CHARGE
10:40:47 394  	WHERE
10:40:47 395  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL;
10:40:47 397  
10:40:47 398  	-- get all credir cards for given invoice
10:40:47 399  	OPEN out_cc_charges_set FOR
10:40:47 400  	SELECT
10:40:47 401  	  CHARGE.ID as "CHARGE_ID",
10:40:47 402  	  CHARGE.CHARGE_AMOUNT,
10:40:47 403  	  CHARGE.INSTRUMENT_ID,
10:40:47 404  	  CHARGE.CHARGE_STATUS_ID
10:40:47 405  	FROM
10:40:47 406  	  CHARGE
10:40:47 407  	WHERE
10:40:47 408  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD;
10:40:47 410  
10:40:47 411  	OPEN out_gc_charges_set FOR
10:40:47 412  	SELECT
10:40:47 413  	  CHARGE.ID as "CHARGE_ID",
10:40:47 414  	  CHARGE.CHARGE_AMOUNT,
10:40:47 415  	  CHARGE.INSTRUMENT_ID,
10:40:47 416  	  CHARGE.CHARGE_STATUS_ID
10:40:47 417  	FROM
10:40:47 418  	  CHARGE
10:40:47 419  	WHERE
10:40:47 420  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_GIFT_CERTIFICATE;
10:40:47 422  
10:40:47 423  EXCEPTION
10:40:47 424  WHEN BAD_INVOICE_ID THEN
10:40:47 425  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 426  	  SPROC_NAME, 'No such invoice');
10:40:47 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:40:47 428  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
10:40:47 430  WHEN OTHERS THEN
10:40:47 431  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 433  END GET_INVOICE_DETAILS;
10:40:47 434  
10:40:47 435  /******************************************************/
10:40:47 436  -- norlov: #38796
10:40:47 437  PROCEDURE GET_TRANSACTION_INVOICE (
10:40:47 438  /*
10:40:47 439  Throws exceptions:
10:40:47 440  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 441  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 442  */
10:40:47 443  	in_transaction_id  IN  NUMBER,
10:40:47 444  	out_result_set	      OUT SYS_REFCURSOR
10:40:47 445  ) AS
10:40:47 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
10:40:47 447  -- VARIABLES
10:40:47 448  temp_transaction_id  NUMBER;
10:40:47 449  var_invoice_id	   NUMBER;
10:40:47 450  var_subscription_id  NUMBER;
10:40:47 451  var_offer_chain_id   NUMBER;
10:40:47 452  var_offer_chain_name VARCHAR2(255);
10:40:47 453  -- EXCEPTIONS
10:40:47 454  BAD_TRANSACTION_ID     EXCEPTION;
10:40:47 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 456  BEGIN
10:40:47 457   -- check if there is the transaction
10:40:47 458  	BEGIN
10:40:47 459  	  SELECT
10:40:47 460  	    TRANSACTION.ID into temp_transaction_id
10:40:47 461  	  FROM
10:40:47 462  	    TRANSACTION
10:40:47 463  	  WHERE
10:40:47 464  	    TRANSACTION.ID = in_transaction_id;
10:40:47 465  	  EXCEPTION
10:40:47 466  	    WHEN NO_DATA_FOUND THEN
10:40:47 467  	      RAISE BAD_TRANSACTION_ID;
10:40:47 468  	END;
10:40:47 469  
10:40:47 470  	-- Get invoice id
10:40:47 471  	SELECT DISTINCT
10:40:47 472  	  CHARGE.INVOICE_ID into var_invoice_id
10:40:47 473  	FROM
10:40:47 474  	  CHARGE
10:40:47 475  	WHERE
10:40:47 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
10:40:47 477  
10:40:47 478  	-- Get subscription id if exists
10:40:47 479  	BEGIN
10:40:47 480  	  SELECT DISTINCT
10:40:47 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
10:40:47 482  	  FROM
10:40:47 483  	    LICENSE
10:40:47 484  	  WHERE
10:40:47 485  	    LICENSE.INVOICE_ID = var_invoice_id;
10:40:47 486  	  EXCEPTION
10:40:47 487  	    WHEN NO_DATA_FOUND THEN
10:40:47 488  	      var_subscription_id := NULL;
10:40:47 489  	END;
10:40:47 490  
10:40:47 491  	IF var_subscription_id IS NOT NULL THEN
10:40:47 492  	  -- Fetch offer chain from subscription
10:40:47 493  	  SELECT
10:40:47 494  	    OFFER_CHAIN.ID,
10:40:47 495  	    OFFER_CHAIN.NAME
10:40:47 496  	    into
10:40:47 497  	    var_offer_chain_id,
10:40:47 498  	    var_offer_chain_name
10:40:47 499  	  FROM
10:40:47 500  	    OFFER_CHAIN
10:40:47 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 502  	  WHERE
10:40:47 503  	    SUBSCRIPTION.ID = var_subscription_id;
10:40:47 504  	ELSE
10:40:47 505  	  -- Fetch offer chain from GC
10:40:47 506  	  SELECT
10:40:47 507  	    OFFER_CHAIN.ID,
10:40:47 508  	    OFFER_CHAIN.NAME
10:40:47 509  	    into
10:40:47 510  	    var_offer_chain_id,
10:40:47 511  	    var_offer_chain_name
10:40:47 512  	  FROM
10:40:47 513  	    OFFER_CHAIN
10:40:47 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 515  	  WHERE
10:40:47 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
10:40:47 517  	END IF;
10:40:47 518  
10:40:47 519  	OPEN out_result_set FOR
10:40:47 520  	SELECT DISTINCT
10:40:47 521  	  var_invoice_id       AS "INVOICE_ID",
10:40:47 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
10:40:47 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
10:40:47 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
10:40:47 525  	FROM
10:40:47 526  	  DUAL;
10:40:47 527  
10:40:47 528  EXCEPTION
10:40:47 529  WHEN BAD_TRANSACTION_ID THEN
10:40:47 530  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 531  	  SPROC_NAME, 'No such transaction');
10:40:47 532  WHEN OTHERS THEN
10:40:47 533  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 535  END GET_TRANSACTION_INVOICE;
10:40:47 536  
10:40:47 537  /******************************************************/
10:40:47 538  
10:40:47 539  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:47 540  /*
10:40:47 541  Throws exceptions:
10:40:47 542  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 543  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 544  */
10:40:47 545  	in_invoice_id		       IN NUMBER,
10:40:47 546  	in_invoice_status_id	       IN NUMBER,
10:40:47 547  	in_updated_by		       IN VARCHAR2
10:40:47 548  ) AS
10:40:47 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
10:40:47 550  -- VARIABLES
10:40:47 551  temp_invoice_id NUMBER;
10:40:47 552  -- EXCEPTIONS
10:40:47 553  BAD_INVOICE_ID		      EXCEPTION;
10:40:47 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
10:40:47 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
10:40:47 556  BEGIN
10:40:47 557  
10:40:47 558  	-- Check if invoice exists
10:40:47 559  	BEGIN
10:40:47 560  	  SELECT
10:40:47 561  	    INVOICE.ID into temp_invoice_id
10:40:47 562  	  FROM
10:40:47 563  	    INVOICE
10:40:47 564  	  WHERE
10:40:47 565  	    INVOICE.ID = in_invoice_id;
10:40:47 566  	  EXCEPTION
10:40:47 567  	    WHEN NO_DATA_FOUND THEN
10:40:47 568  	      RAISE BAD_INVOICE_ID;
10:40:47 569  	END;
10:40:47 570  
10:40:47 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V22.INVOICE_OPEN
10:40:47 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V22.INVOICE_CLOSED THEN
10:40:47 573  	  RAISE BAD_INVOICE_STATUS_ID;
10:40:47 574  	END IF;
10:40:47 575  
10:40:47 576  	PROCS_INVOICE_CRU_V22.UPDATE_INVOICE(
10:40:47 577  	  in_invoice_id 		 => in_invoice_id,
10:40:47 578  	  in_invoice_status_id		 => in_invoice_status_id,
10:40:47 579  	  in_updated_by 		 => in_updated_by
10:40:47 580  	);
10:40:47 581  
10:40:47 582  EXCEPTION
10:40:47 583  WHEN BAD_INVOICE_STATUS_ID THEN
10:40:47 584  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 585  	  SPROC_NAME, 'Bad invoice status id');
10:40:47 586  WHEN BAD_INVOICE_ID THEN
10:40:47 587  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 588  	  SPROC_NAME, 'No such invoice');
10:40:47 589  WHEN OTHERS THEN
10:40:47 590  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 592  END UPDATE_INVOICE_STATUS;
10:40:47 593  
10:40:47 594  /****************************************************************/
10:40:47 595  
10:40:47 596  FUNCTION IS_INVOICE_PAYING_STARTED (
10:40:47 597  /*
10:40:47 598  Throws exceptions:
10:40:47 599  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 600  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 601  */
10:40:47 602  	in_invoice_id IN NUMBER
10:40:47 603  ) RETURN NUMBER AS
10:40:47 604  -- VARIABLES
10:40:47 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
10:40:47 606  temp_invoice_id		 NUMBER;
10:40:47 607  var_processed_charges_num  NUMBER;
10:40:47 608  var_processed_transac_num  NUMBER;
10:40:47 609  var_success_attempts_num	 NUMBER;
10:40:47 610  var_is_gc 		 NUMBER;
10:40:47 611  -- EXCEPTIONS
10:40:47 612  BAD_INVOICE_ID EXCEPTION;
10:40:47 613  BEGIN
10:40:47 614  
10:40:47 615  	-- Check that invoice exists
10:40:47 616  	BEGIN
10:40:47 617  	  SELECT
10:40:47 618  	    INVOICE.ID into temp_invoice_id
10:40:47 619  	  FROM
10:40:47 620  	    INVOICE
10:40:47 621  	  WHERE
10:40:47 622  	    INVOICE.ID = in_invoice_id;
10:40:47 623  	  EXCEPTION
10:40:47 624  	   WHEN NO_DATA_FOUND THEN
10:40:47 625  	     RAISE BAD_INVOICE_ID;
10:40:47 626  	END;
10:40:47 627  
10:40:47 628  	-- Check that there are tansaction attempts with status success
10:40:47 629  	SELECT
10:40:47 630  	  COUNT(1) into var_success_attempts_num
10:40:47 631  	FROM
10:40:47 632  	  TRANSACTION_ATTEMPT ta,
10:40:47 633  	  TRANSACTION t,
10:40:47 634  	  CHARGE c
10:40:47 635  	WHERE
10:40:47 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS and
10:40:47 637  	  ta.transaction_id = t.id and
10:40:47 638  	  c.transaction_id = t.id and
10:40:47 639  	  t.is_refund = GLOBAL_CONSTANTS_V22.FALSE and
10:40:47 640  	  c.invoice_id = in_invoice_id
10:40:47 641  	;
10:40:47 642  
10:40:47 643  	IF var_success_attempts_num > 0 THEN
10:40:47 644  	  RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 645  	END IF;
10:40:47 646  
10:40:47 647  	SELECT
10:40:47 648  	  COUNT(1) into var_success_attempts_num
10:40:47 649  	FROM
10:40:47 650  	  TRANSACTION t,
10:40:47 651  	  CHARGE c
10:40:47 652  	WHERE
10:40:47 653  	  c.transaction_id = t.id and
10:40:47 654  	  t.is_refund = GLOBAL_CONSTANTS_V22.FALSE and
10:40:47 655  	  t.is_settled = GLOBAL_CONSTANTS_V22.TRUE and
10:40:47 656  	  c.invoice_id = in_invoice_id
10:40:47 657  	;
10:40:47 658  
10:40:47 659  	IF var_success_attempts_num > 0 THEN
10:40:47 660  	  RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 661  	END IF;
10:40:47 662  
10:40:47 663  	SELECT
10:40:47 664  	  COUNT(1) into var_is_gc
10:40:47 665  	FROM
10:40:47 666  	  gift_certificate gc
10:40:47 667  	WHERE
10:40:47 668  	  gc.finalized_invoice_id = in_invoice_id
10:40:47 669  	;
10:40:47 670  
10:40:47 671  	IF var_is_gc > 0 THEN
10:40:47 672  	  RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 673  	END IF;
10:40:47 674  
10:40:47 675  	RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 676  
10:40:47 677  EXCEPTION
10:40:47 678  WHEN BAD_INVOICE_ID THEN
10:40:47 679  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 680  	  SPROC_NAME, 'No such invoice');
10:40:47 681  WHEN OTHERS THEN
10:40:47 682  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 684  END IS_INVOICE_PAYING_STARTED;
10:40:47 685  
10:40:47 686  /******************************************************************************/
10:40:47 687  
10:40:47 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
10:40:47 689  	in_invoice_id  IN NUMBER,
10:40:47 690  	out_is_started OUT NUMBER
10:40:47 691  ) AS
10:40:47 692  BEGIN
10:40:47 693  	-- Just a wrapper
10:40:47 694  	out_is_started := PROCS_INVOICE_V22.IS_INVOICE_PAYING_STARTED(in_invoice_id);
10:40:47 695  END P_IS_INVOICE_PAYING_STARTED;
10:40:47 696  
10:40:47 697  /******************************************************************************/
10:40:47 698  
10:40:47 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
10:40:47 700  	in_invoice_id	      IN NUMBER,
10:40:47 701  	in_chargeback_date    IN DATE,
10:40:47 702  	out_chargeback_amount OUT NUMBER
10:40:47 703  ) AS
10:40:47 704  -- VARIABLES
10:40:47 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
10:40:47 706  var_chargeback_date    DATE;
10:40:47 707  temp_invoice_id	     NUMBER;
10:40:47 708  var_licenses_number    NUMBER;
10:40:47 709  var_invoice_start_date DATE;
10:40:47 710  var_invoice_end_date   DATE;
10:40:47 711  var_offer_id	     NUMBER;
10:40:47 712  var_offer_days_interval NUMBER;
10:40:47 713  var_license_days_used  NUMBER;
10:40:47 714  var_invoice_amount     NUMBER(10,2);
10:40:47 715  var_offer_chain_id     NUMBER;
10:40:47 716  var_offer_chain_meta_data_val VARCHAR2(1024);
10:40:47 717  var_offer_chain_full_refund   NUMBER;
10:40:47 718  var_offer_chain_prorated_ref  NUMBER;
10:40:47 719  var_chargeback_calculated NUMBER;
10:40:47 720  var_max_invoice_refund	NUMBER;
10:40:47 721  -- EXCEPTIONS
10:40:47 722  BAD_INVOICE_ID		  EXCEPTION;
10:40:47 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
10:40:47 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
10:40:47 725  BEGIN
10:40:47 726  
10:40:47 727  	IF in_chargeback_date IS NULL THEN
10:40:47 728  	  var_chargeback_date := PROCS_COMMON_V22.NORMALIZE_DATE(current_date);
10:40:47 729  	ELSE
10:40:47 730  	  var_chargeback_date := PROCS_COMMON_V22.NORMALIZE_DATE(in_chargeback_date);
10:40:47 731  	END IF;
10:40:47 732  
10:40:47 733  	-- Check that invoice exists
10:40:47 734  	BEGIN
10:40:47 735  	  SELECT
10:40:47 736  	    INVOICE.ID into temp_invoice_id
10:40:47 737  	  FROM
10:40:47 738  	    INVOICE
10:40:47 739  	  WHERE
10:40:47 740  	    INVOICE.ID = in_invoice_id;
10:40:47 741  	  EXCEPTION
10:40:47 742  	    WHEN NO_DATA_FOUND THEN
10:40:47 743  	      RAISE BAD_INVOICE_ID;
10:40:47 744  	END;
10:40:47 745  
10:40:47 746  	-- Check that invoice has at least one license
10:40:47 747  	SELECT
10:40:47 748  	  COUNT(*) into var_licenses_number
10:40:47 749  	FROM
10:40:47 750  	  LICENSE
10:40:47 751  	WHERE
10:40:47 752  	  LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 753  
10:40:47 754  	IF var_licenses_number = 0 THEN
10:40:47 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
10:40:47 756  	END IF;
10:40:47 757  
10:40:47 758  	SELECT
10:40:47 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
10:40:47 760  	FROM
10:40:47 761  	  LICENSE
10:40:47 762  	WHERE
10:40:47 763  	  LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 764  
10:40:47 765  	var_invoice_start_date := PROCS_COMMON_V22.NORMALIZE_DATE(var_invoice_start_date);
10:40:47 766  
10:40:47 767  	SELECT DISTINCT
10:40:47 768  	  LICENSE.OFFER_ID into var_offer_id
10:40:47 769  	FROM
10:40:47 770  	  LICENSE
10:40:47 771  	WHERE
10:40:47 772  	  LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 773  
10:40:47 774  	SELECT
10:40:47 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
10:40:47 776  	FROM
10:40:47 777  	  LICENSE
10:40:47 778  	WHERE
10:40:47 779  	  LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 780  
10:40:47 781  	-- All licenses for given invoice should point into the same offer
10:40:47 782  
10:40:47 783  	PROCS_OFFER_CHAIN_V22.GET_OFFER_LENGTH_IN_DAYS(
10:40:47 784  	  in_offer_id	=> var_offer_id,
10:40:47 785  	  in_start_date => var_invoice_start_date,
10:40:47 786  	  out_days	=> var_offer_days_interval
10:40:47 787  	);
10:40:47 788  
10:40:47 789  	IF var_offer_days_interval = 0 THEN
10:40:47 790  	  RAISE OFFER_LENGTH_IS_ZERO;
10:40:47 791  	END IF;
10:40:47 792  
10:40:47 793  	PROCS_INVOICE_V22.GET_INVOICE_DAYS_USED_NUMBER(
10:40:47 794  	  in_invoice_id      => in_invoice_id,
10:40:47 795  	  in_chargeback_date => var_chargeback_date,
10:40:47 796  	  out_days_num	     => var_license_days_used
10:40:47 797  	);
10:40:47 798  
10:40:47 799  	PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT(
10:40:47 800  	  in_invoice_id => in_invoice_id,
10:40:47 801  	  out_amount	=> var_invoice_amount
10:40:47 802  	);
10:40:47 803  
10:40:47 804  	-- 39437
10:40:47 805  	-- Get offer chain id by invoice id
10:40:47 806  	SELECT DISTINCT
10:40:47 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
10:40:47 808  	FROM
10:40:47 809  	  SUBSCRIPTION
10:40:47 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 811  	WHERE
10:40:47 812  	  LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 813  
10:40:47 814  	-- Get offer chain's meta data full amount value
10:40:47 815  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_MD_VALUE(
10:40:47 816  	  in_offer_chain_id => var_offer_chain_id,
10:40:47 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V22.OFFER_CHAIN_FULL_REFUND,
10:40:47 818  	  out_value	    => var_offer_chain_meta_data_val
10:40:47 819  	);
10:40:47 820  	IF var_offer_chain_meta_data_val IS NULL THEN
10:40:47 821  	  var_offer_chain_full_refund := NULL;
10:40:47 822  	ELSE
10:40:47 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
10:40:47 824  	END IF;
10:40:47 825  
10:40:47 826  	-- Get offer chain's meta data prorated amount value
10:40:47 827  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_MD_VALUE(
10:40:47 828  	  in_offer_chain_id => var_offer_chain_id,
10:40:47 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V22.OFFER_CHAIN_PRORATED_REFUND,
10:40:47 830  	  out_value	    => var_offer_chain_meta_data_val
10:40:47 831  	);
10:40:47 832  	IF var_offer_chain_meta_data_val IS NULL THEN
10:40:47 833  	  var_offer_chain_prorated_ref := NULL;
10:40:47 834  	ELSE
10:40:47 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
10:40:47 836  	END IF;
10:40:47 837  
10:40:47 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 839  
10:40:47 840  	IF var_offer_chain_full_refund IS NOT NULL
10:40:47 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
10:40:47 843  	    out_chargeback_amount := var_invoice_amount;
10:40:47 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 845  	  END IF;
10:40:47 846  	END IF;
10:40:47 847  
10:40:47 848  	IF var_offer_chain_prorated_ref IS NOT NULL
10:40:47 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
10:40:47 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
10:40:47 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 853  	  END IF;
10:40:47 854  	END IF;
10:40:47 855  
10:40:47 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 857  	  PROCS_INVOICE_V22.GET_MAX_REFUND(
10:40:47 858  	    in_invoice_id => in_invoice_id,
10:40:47 859  	    out_amount	  => var_max_invoice_refund
10:40:47 860  	  );
10:40:47 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
10:40:47 862  	    out_chargeback_amount := var_max_invoice_refund;
10:40:47 863  	  END IF;
10:40:47 864  	END IF;
10:40:47 865  
10:40:47 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 867  	  out_chargeback_amount := 0;
10:40:47 868  	END IF;
10:40:47 869  
10:40:47 870  EXCEPTION
10:40:47 871  WHEN BAD_INVOICE_ID THEN
10:40:47 872  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 873  	  SPROC_NAME, 'No such invoice');
10:40:47 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
10:40:47 875  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 876  	  SPROC_NAME, 'No licenses found');
10:40:47 877  WHEN OFFER_LENGTH_IS_ZERO THEN
10:40:47 878  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 879  	  SPROC_NAME, 'Offer length is zero');
10:40:47 880  WHEN OTHERS THEN
10:40:47 881  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 883  END CALCULATE_INVOICE_CHARGEBACK;
10:40:47 884  
10:40:47 885  /********************************************************************/
10:40:47 886  
10:40:47 887  PROCEDURE APPLY_REFUND (
10:40:47 888  	in_invoice_id	     IN NUMBER,
10:40:47 889  	in_chargeback_amount IN NUMBER,
10:40:47 890  	in_created_by	     IN VARCHAR2,
10:40:47 891  	out_charge_id	     OUT NUMBER
10:40:47 892  ) AS
10:40:47 893  -- VARIABLES
10:40:47 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
10:40:47 895  temp_invoice_id		 NUMBER;
10:40:47 896  var_total_charges_amount	 NUMBER(10,2);
10:40:47 897  var_charge_amount_to_apply NUMBER(10,2);
10:40:47 898  var_transaction_id	 NUMBER;
10:40:47 899  var_instrument_type_id	 NUMBER;
10:40:47 900  var_instrument_id 	 NUMBER;
10:40:47 901  var_charge_id		 NUMBER;
10:40:47 902  -- EXCEPTIONS
10:40:47 903  BAD_INVOICE_ID		 EXCEPTION;
10:40:47 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
10:40:47 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
10:40:47 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
10:40:47 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:40:47 908  BEGIN
10:40:47 909  
10:40:47 910  	BEGIN
10:40:47 911  	  SELECT
10:40:47 912  	    INVOICE.ID into temp_invoice_id
10:40:47 913  	  FROM
10:40:47 914  	    INVOICE
10:40:47 915  	  WHERE
10:40:47 916  	    INVOICE.ID = in_invoice_id;
10:40:47 917  	  EXCEPTION
10:40:47 918  	    WHEN NO_DATA_FOUND THEN
10:40:47 919  	      RAISE BAD_INVOICE_ID;
10:40:47 920  	END;
10:40:47 921  
10:40:47 922  	SELECT
10:40:47 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
10:40:47 924  	FROM
10:40:47 925  	  CHARGE
10:40:47 926  	WHERE
10:40:47 927  	  CHARGE.INVOICE_ID = in_invoice_id
10:40:47 928  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 929  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V22.INSTRUMENT_GIFT_CERTIFICATE;
10:40:47 930  
10:40:47 931  	-- FIXME: Maybe whe should throw exception here?
10:40:47 932  	IF var_total_charges_amount < in_chargeback_amount THEN
10:40:47 933  	  var_charge_amount_to_apply := var_total_charges_amount;
10:40:47 934  	ELSE
10:40:47 935  	  var_charge_amount_to_apply := in_chargeback_amount;
10:40:47 936  	END IF;
10:40:47 937  
10:40:47 938  	BEGIN
10:40:47 939  	  PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 940  	    in_transaction_id	      => NULL,
10:40:47 941  	    in_status_id	      => GLOBAL_STATUSES_V22.TRANSACTION_PREPARE,
10:40:47 942  	    in_amount		      => -var_charge_amount_to_apply,
10:40:47 943  	    in_created_by	      => in_created_by,
10:40:47 944  	    in_order_id 	      => NULL,
10:40:47 945  	    in_is_refund	      => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 946  	    in_transaction_type_code  => 'REFUND',
10:40:47 947  	    out_transaction_id	      => var_transaction_id
10:40:47 948  	  );
10:40:47 949  	  EXCEPTION
10:40:47 950  	    WHEN OTHERS THEN
10:40:47 951  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 952  	      RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 953  	END;
10:40:47 954  
10:40:47 955  	BEGIN
10:40:47 956  	  SELECT
10:40:47 957  	    C.INSTRUMENT_TYPE_ID,
10:40:47 958  	    C.INSTRUMENT_ID
10:40:47 959  	    into
10:40:47 960  	    var_instrument_type_id,
10:40:47 961  	    var_instrument_id
10:40:47 962  	  FROM
10:40:47 963  	    CHARGE C,
10:40:47 964  	    TRANSACTION_ATTEMPT TA,
10:40:47 965  	    TRANSACTION T
10:40:47 966  	  WHERE
10:40:47 967  	    C.INVOICE_ID = in_invoice_id and
10:40:47 968  	    C.TRANSACTION_ID = T.ID and
10:40:47 969  	    TA.TRANSACTION_ID = T.ID and
10:40:47 970  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS and
10:40:47 971  	    T.IS_REFUND = GLOBAL_CONSTANTS_V22.FALSE and
10:40:47 972  	    T.TRANSACTION_AMOUNT >= 0 and
10:40:47 973  	    rownum < 2;
10:40:47 974  	EXCEPTION
10:40:47 975  	    WHEN NO_DATA_FOUND THEN
10:40:47 976  	      RAISE CAN_NOT_FIND_INSTRUMENT;
10:40:47 977  	END;
10:40:47 978  	BEGIN
10:40:47 979  	  PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 980  	    in_invoice_id	  => in_invoice_id,
10:40:47 981  	    in_transaction_id	  => var_transaction_id,
10:40:47 982  	    in_instrument_type_id => var_instrument_type_id,
10:40:47 983  	    in_instrument_id	  => var_instrument_id,
10:40:47 984  	    in_charge_amount	  => -var_charge_amount_to_apply,
10:40:47 985  	    in_created_by	  => in_created_by,
10:40:47 986  	    in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 987  	    out_charge_id	  => var_charge_id
10:40:47 988  	  );
10:40:47 989  	  EXCEPTION
10:40:47 990  	    WHEN OTHERS THEN
10:40:47 991  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 992  	      RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 993  	END;
10:40:47 994  
10:40:47 995  	out_charge_id := var_charge_id;
10:40:47 996  
10:40:47 997  EXCEPTION
10:40:47 998  WHEN BAD_INVOICE_ID THEN
10:40:47 999  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1000  	   SPROC_NAME, 'No such invoice');
10:40:47 1001  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 1002  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1003  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 1004  WHEN CAN_NOT_FIND_INSTRUMENT THEN
10:40:47 1005  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1006  	   SPROC_NAME, 'Could not find financial instrument');
10:40:47 1007  WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 1008  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1009  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 1010  WHEN OTHERS THEN
10:40:47 1011  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1012  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1013  END APPLY_REFUND;
10:40:47 1014  
10:40:47 1015  /******************************************************************************/
10:40:47 1016  
10:40:47 1017  PROCEDURE GET_MAX_REFUND (
10:40:47 1018  	 in_invoice_id IN NUMBER,
10:40:47 1019  	 out_amount    OUT NUMBER
10:40:47 1020  ) AS
10:40:47 1021  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
10:40:47 1022  -- VARIABLES
10:40:47 1023  temp_invoice_id	       NUMBER;
10:40:47 1024  var_invoice_refunds_sum NUMBER(10,2);
10:40:47 1025  var_invoice_charges_sum NUMBER(10,2);
10:40:47 1026  -- EXCEPTIONS
10:40:47 1027  BAD_INVOICE_ID EXCEPTION;
10:40:47 1028  BEGIN
10:40:47 1029  
10:40:47 1030  	 BEGIN
10:40:47 1031  	   SELECT
10:40:47 1032  	     INVOICE.ID into temp_invoice_id
10:40:47 1033  	   FROM
10:40:47 1034  	     INVOICE
10:40:47 1035  	   WHERE
10:40:47 1036  	     INVOICE.ID = in_invoice_id;
10:40:47 1037  	   EXCEPTION
10:40:47 1038  	     WHEN NO_DATA_FOUND THEN
10:40:47 1039  	       RAISE BAD_INVOICE_ID;
10:40:47 1040  	 END;
10:40:47 1041  
10:40:47 1042  	 var_invoice_refunds_sum := 0;
10:40:47 1043  	 var_invoice_charges_sum := 0;
10:40:47 1044  
10:40:47 1045  	 FOR f_charge IN (
10:40:47 1046  	   SELECT
10:40:47 1047  	     CHARGE.ID,
10:40:47 1048  	     CHARGE.CHARGE_STATUS_ID,
10:40:47 1049  	     CHARGE.CHARGE_AMOUNT,
10:40:47 1050  	     CHARGE.TRANSACTION_ID
10:40:47 1051  	   FROM
10:40:47 1052  	     CHARGE
10:40:47 1053  	   WHERE
10:40:47 1054  	     CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1055  	 )
10:40:47 1056  	 LOOP
10:40:47 1057  	   -- If charge.status = canceled then continue
10:40:47 1058  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V22.CHARGE_CANCELED THEN
10:40:47 1059  
10:40:47 1060  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
10:40:47 1061  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 1062  		  AND PROCS_TRANSACTION_V22.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 1063  		 -- Transaction collected
10:40:47 1064  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
10:40:47 1065  	       ELSE
10:40:47 1066  		 -- Transaction is not collected. Do nothing
10:40:47 1067  		 NULL;
10:40:47 1068  	       END IF;
10:40:47 1069  	     ELSE
10:40:47 1070  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 1071  		  AND PROCS_TRANSACTION_V22.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 1072  		 -- If charge is processed transaction is not collected then do nothing
10:40:47 1073  		 NULL;
10:40:47 1074  	       ELSE
10:40:47 1075  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
10:40:47 1076  	       END IF;
10:40:47 1077  	     END IF;
10:40:47 1078  
10:40:47 1079  	   END IF;
10:40:47 1080  	 END LOOP;
10:40:47 1081  
10:40:47 1082  	 -- Refunds are negative
10:40:47 1083  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
10:40:47 1084  
10:40:47 1085  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
10:40:47 1086  
10:40:47 1087  EXCEPTION
10:40:47 1088  WHEN BAD_INVOICE_ID THEN
10:40:47 1089  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1090  	   SPROC_NAME, 'No such invoice');
10:40:47 1091  WHEN OTHERS THEN
10:40:47 1092  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1093  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1094  END GET_MAX_REFUND;
10:40:47 1095  
10:40:47 1096  /******************************************************************************/
10:40:47 1097  
10:40:47 1098  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
10:40:47 1099  	 in_invoice_id	     IN NUMBER,
10:40:47 1100  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
10:40:47 1101  	 out_days_num	     OUT NUMBER
10:40:47 1102  ) AS
10:40:47 1103  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
10:40:47 1104  -- VARIABLES
10:40:47 1105  temp_invoice_id	      NUMBER;
10:40:47 1106  var_license_start_date DATE;
10:40:47 1107  var_license_end_date   DATE;
10:40:47 1108  var_chargeback_date    DATE;
10:40:47 1109  var_invoice_days_used  NUMBER;
10:40:47 1110  -- EXCEPTIONS
10:40:47 1111  BAD_INVOICE_ID EXCEPTION;
10:40:47 1112  BEGIN
10:40:47 1113  
10:40:47 1114  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
10:40:47 1115  
10:40:47 1116  	 BEGIN
10:40:47 1117  	   SELECT
10:40:47 1118  	     INVOICE.ID into temp_invoice_id
10:40:47 1119  	   FROM
10:40:47 1120  	     INVOICE
10:40:47 1121  	   WHERE
10:40:47 1122  	     INVOICE.ID = in_invoice_id;
10:40:47 1123  	   EXCEPTION
10:40:47 1124  	     WHEN NO_DATA_FOUND THEN
10:40:47 1125  	       RAISE BAD_INVOICE_ID;
10:40:47 1126  	 END;
10:40:47 1127  
10:40:47 1128  	 var_invoice_days_used := 0;
10:40:47 1129  
10:40:47 1130  	 FOR f_license IN (
10:40:47 1131  	   SELECT
10:40:47 1132  	     LICENSE.START_DATE,
10:40:47 1133  	     LICENSE.END_DATE
10:40:47 1134  	   FROM
10:40:47 1135  	     LICENSE
10:40:47 1136  	   WHERE
10:40:47 1137  	     LICENSE.INVOICE_ID = in_invoice_id
10:40:47 1138  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V22.FALSE
10:40:47 1139  	 )
10:40:47 1140  	 LOOP
10:40:47 1141  	   var_license_start_date := PROCS_COMMON_V22.NORMALIZE_DATE(f_license.START_DATE);
10:40:47 1142  	   var_license_end_date := PROCS_COMMON_V22.NORMALIZE_DATE(f_license.END_DATE);
10:40:47 1143  
10:40:47 1144  	   IF var_license_start_date <= var_chargeback_date THEN
10:40:47 1145  	     IF var_license_end_date <= var_chargeback_date THEN
10:40:47 1146  	       -- License is passed
10:40:47 1147  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
10:40:47 1148  	     ELSE
10:40:47 1149  	       -- This is current license
10:40:47 1150  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
10:40:47 1151  	     END IF;
10:40:47 1152  	   ELSE
10:40:47 1153  	     -- if var_license_start_date > in_chargeback_date then do nothing
10:40:47 1154  	     NULL;
10:40:47 1155  	   END IF;
10:40:47 1156  	 END LOOP;
10:40:47 1157  
10:40:47 1158  	 out_days_num := var_invoice_days_used;
10:40:47 1159  
10:40:47 1160  EXCEPTION
10:40:47 1161  WHEN BAD_INVOICE_ID THEN
10:40:47 1162  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1163  	   SPROC_NAME, 'No such invoice');
10:40:47 1164  WHEN OTHERS THEN
10:40:47 1165  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1166  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1167  END GET_INVOICE_DAYS_USED_NUMBER;
10:40:47 1168  
10:40:47 1169  /******************************************************************************/
10:40:47 1170  
10:40:47 1171  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:47 1172  	 in_invoice_id	IN NUMBER,
10:40:47 1173  	 out_result_set OUT SYS_REFCURSOR
10:40:47 1174  ) AS
10:40:47 1175  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
10:40:47 1176  -- VARIABLES
10:40:47 1177  temp_invoice_id NUMBER;
10:40:47 1178  -- EXCEPTIONS
10:40:47 1179  BAD_INVOICE_ID EXCEPTION;
10:40:47 1180  BEGIN
10:40:47 1181  
10:40:47 1182  	 BEGIN
10:40:47 1183  	   SELECT
10:40:47 1184  	     INVOICE.ID into temp_invoice_id
10:40:47 1185  	   FROM
10:40:47 1186  	     INVOICE
10:40:47 1187  	   WHERE
10:40:47 1188  	     INVOICE.ID = in_invoice_id;
10:40:47 1189  	   EXCEPTION
10:40:47 1190  	     WHEN NO_DATA_FOUND THEN
10:40:47 1191  	       RAISE BAD_INVOICE_ID;
10:40:47 1192  	 END;
10:40:47 1193  
10:40:47 1194  	 OPEN out_result_set FOR
10:40:47 1195  	 SELECT
10:40:47 1196  	   LINE_ITEM.ID,
10:40:47 1197  	   LINE_ITEM.PRODUCT_OFFER_ID,
10:40:47 1198  	   LINE_ITEM.INVOICE_ID,
10:40:47 1199  	   LINE_ITEM.AMOUNT,
10:40:47 1200  	   LINE_ITEM.DISCOUNT_AMOUNT,
10:40:47 1201  	   LINE_ITEM.TAXES_AMOUNT,
10:40:47 1202  	   LINE_ITEM.CREATE_DATE,
10:40:47 1203  	   LINE_ITEM.CREATED_BY
10:40:47 1204  	 FROM
10:40:47 1205  	   LINE_ITEM
10:40:47 1206  	 WHERE
10:40:47 1207  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
10:40:47 1208  
10:40:47 1209  EXCEPTION
10:40:47 1210  WHEN BAD_INVOICE_ID THEN
10:40:47 1211  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1212  	   SPROC_NAME, 'No such invoice');
10:40:47 1213  WHEN OTHERS THEN
10:40:47 1214  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1216  END GET_INVOICE_LINE_ITEMS;
10:40:47 1217  
10:40:47 1218  /******************************************************************************/
10:40:47 1219  
10:40:47 1220  PROCEDURE GET_INVOICE_LICENSES (
10:40:47 1221  	 in_invoice_id	IN NUMBER,
10:40:47 1222  	 out_result_set OUT SYS_REFCURSOR
10:40:47 1223  ) AS
10:40:47 1224  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
10:40:47 1225  -- VARIABLES
10:40:47 1226  temp_invoice_id NUMBER;
10:40:47 1227  -- EXCEPTIONS
10:40:47 1228  BAD_INVOICE_ID EXCEPTION;
10:40:47 1229  BEGIN
10:40:47 1230  
10:40:47 1231  	 BEGIN
10:40:47 1232  	   SELECT
10:40:47 1233  	     INVOICE.ID into temp_invoice_id
10:40:47 1234  	   FROM
10:40:47 1235  	     INVOICE
10:40:47 1236  	   WHERE
10:40:47 1237  	     INVOICE.ID = in_invoice_id;
10:40:47 1238  	   EXCEPTION
10:40:47 1239  	     WHEN NO_DATA_FOUND THEN
10:40:47 1240  	       RAISE BAD_INVOICE_ID;
10:40:47 1241  	 END;
10:40:47 1242  
10:40:47 1243  	 OPEN out_result_set FOR
10:40:47 1244  	 SELECT
10:40:47 1245  	   LICENSE.ID,
10:40:47 1246  	   LICENSE.INVOICE_ID,
10:40:47 1247  	   LICENSE.CREATE_DATE,
10:40:47 1248  	   LICENSE.CREATED_BY,
10:40:47 1249  	   LICENSE.CURRENT_OFFER_INDEX,
10:40:47 1250  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
10:40:47 1251  	   LICENSE.END_DATE,
10:40:47 1252  	   LICENSE.ENTITLEMENT_END_DATE,
10:40:47 1253  	   LICENSE.IS_EXTENSION,
10:40:47 1254  	   LICENSE.LICENSE_STATUS_ID,
10:40:47 1255  	   LICENSE.NEEDS_ENTITLEMENTS,
10:40:47 1256  	   LICENSE.OFFER_ID,
10:40:47 1257  	   LICENSE.START_DATE,
10:40:47 1258  	   LICENSE.SUBSCRIPTION_ID,
10:40:47 1259  	   LICENSE.UPDATE_DATE,
10:40:47 1260  	   LICENSE.UPDATED_BY
10:40:47 1261  	 FROM
10:40:47 1262  	   LICENSE
10:40:47 1263  	 WHERE
10:40:47 1264  	   LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 1265  
10:40:47 1266  EXCEPTION
10:40:47 1267  WHEN BAD_INVOICE_ID THEN
10:40:47 1268  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1269  	   SPROC_NAME, 'No such invoice');
10:40:47 1270  WHEN OTHERS THEN
10:40:47 1271  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1272  	   SPROC_NAME, 'Unknown error');
10:40:47 1273  END GET_INVOICE_LICENSES;
10:40:47 1274  
10:40:47 1275  /******************************************************************************/
10:40:47 1276  
10:40:47 1277  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
10:40:47 1278  	 in_invoice_id	    IN NUMBER,
10:40:47 1279  	 out_offer_chain_id OUT NUMBER
10:40:47 1280  ) AS
10:40:47 1281  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
10:40:47 1282  -- VARIABLES
10:40:47 1283  temp_invoice_id NUMBER;
10:40:47 1284  -- EXCEPTIONS
10:40:47 1285  BAD_INVOICE_ID EXCEPTION;
10:40:47 1286  BEGIN
10:40:47 1287  
10:40:47 1288  	 BEGIN
10:40:47 1289  	   SELECT
10:40:47 1290  	     INVOICE.ID into temp_invoice_id
10:40:47 1291  	   FROM
10:40:47 1292  	     INVOICE
10:40:47 1293  	   WHERE
10:40:47 1294  	     INVOICE.ID = in_invoice_id;
10:40:47 1295  	   EXCEPTION
10:40:47 1296  	     WHEN NO_DATA_FOUND THEN
10:40:47 1297  	       RAISE BAD_INVOICE_ID;
10:40:47 1298  	 END;
10:40:47 1299  
10:40:47 1300  	 BEGIN
10:40:47 1301  	   SELECT DISTINCT
10:40:47 1302  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
10:40:47 1303  	   FROM
10:40:47 1304  	     LICENSE
10:40:47 1305  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:47 1306  	   WHERE
10:40:47 1307  	     LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 1308  	   EXCEPTION
10:40:47 1309  	     WHEN NO_DATA_FOUND THEN
10:40:47 1310  	       out_offer_chain_id := NULL;
10:40:47 1311  	 END;
10:40:47 1312  
10:40:47 1313  EXCEPTION
10:40:47 1314  WHEN BAD_INVOICE_ID THEN
10:40:47 1315  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1316  	   SPROC_NAME, 'No such invoice');
10:40:47 1317  WHEN OTHERS THEN
10:40:47 1318  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1319  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1320  END GET_OFFER_CH_ID_BY_INVOICE_ID;
10:40:47 1321  
10:40:47 1322  /******************************************************************************/
10:40:47 1323  
10:40:47 1324  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
10:40:47 1325  -- Closing invoice without refund
10:40:47 1326  	 in_invoice_id IN NUMBER,
10:40:47 1327  	 in_updated_by IN VARCHAR2
10:40:47 1328  ) AS
10:40:47 1329  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
10:40:47 1330  -- VARIABLES
10:40:47 1331  temp_invoice_id NUMBER;
10:40:47 1332  -- EXCEPTIONS
10:40:47 1333  BAD_INVOICE_ID EXCEPTION;
10:40:47 1334  BEGIN
10:40:47 1335  
10:40:47 1336  	 BEGIN
10:40:47 1337  	   SELECT
10:40:47 1338  	     INVOICE.ID into temp_invoice_id
10:40:47 1339  	   FROM
10:40:47 1340  	     INVOICE
10:40:47 1341  	   WHERE
10:40:47 1342  	     INVOICE.ID = in_invoice_id;
10:40:47 1343  	   EXCEPTION
10:40:47 1344  	     WHEN NO_DATA_FOUND THEN
10:40:47 1345  	       RAISE BAD_INVOICE_ID;
10:40:47 1346  	 END;
10:40:47 1347  
10:40:47 1348  	 -- Needs to close charges. No refund.
10:40:47 1349  	 FOR f_charge_to_close IN (
10:40:47 1350  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1351  	 )
10:40:47 1352  	 LOOP
10:40:47 1353  	   PROCS_CHARGE_V22.UPDATE_CHARGE_STATUS(
10:40:47 1354  	     in_charge_id	 => f_charge_to_close.ID,
10:40:47 1355  	     in_updated_by	 => in_updated_by,
10:40:47 1356  	     in_charge_status_id => GLOBAL_STATUSES_V22.CHARGE_CANCELED
10:40:47 1357  	   );
10:40:47 1358  	 END LOOP;
10:40:47 1359  
10:40:47 1360  	 --FOR f_license_to_cancel IN (
10:40:47 1361  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V22.LICENSE_ACTIVE
10:40:47 1362  	 --)
10:40:47 1363  	 --LOOP
10:40:47 1364  	 --  PROCS_LICENSE_CRU_V22.UPDATE_LICENSE(
10:40:47 1365  	 --    in_license_id	     => f_license_to_cancel.ID,
10:40:47 1366  	 --    in_license_status_id  => GLOBAL_STATUSES_V22.LICENSE_CLOSED,
10:40:47 1367  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V22.FALSE,
10:40:47 1368  	 --    in_updated_by	     => in_updated_by
10:40:47 1369  	 --  );
10:40:47 1370  	 --END LOOP;
10:40:47 1371  
10:40:47 1372  	 PROCS_INVOICE_V22.UPDATE_INVOICE_STATUS(
10:40:47 1373  	   in_invoice_id		  => in_invoice_id,
10:40:47 1374  	   in_updated_by		  => in_updated_by,
10:40:47 1375  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V22.INVOICE_CLOSED
10:40:47 1376  	 );
10:40:47 1377  
10:40:47 1378  	 FOR f_transaction_to_close IN (
10:40:47 1379  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1380  	 )
10:40:47 1381  	 LOOP
10:40:47 1382  	   PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_STATUS(
10:40:47 1383  	     in_transaction_id	      => f_transaction_to_close.ID,
10:40:47 1384  	     in_updated_by	      => in_updated_by,
10:40:47 1385  	     in_transaction_status_id => GLOBAL_STATUSES_V22.TRANSACTION_CLOSED
10:40:47 1386  	   );
10:40:47 1387  	 END LOOP;
10:40:47 1388  
10:40:47 1389  EXCEPTION
10:40:47 1390  WHEN BAD_INVOICE_ID THEN
10:40:47 1391  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1392  	   SPROC_NAME, 'No such invoice');
10:40:47 1393  WHEN OTHERS THEN
10:40:47 1394  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1396  END CLOSE_INVOICE_AS_NOT_COLLECTED;
10:40:47 1397  
10:40:47 1398  /******************************************************************************/
10:40:47 1399  
10:40:47 1400  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
10:40:47 1401  	 in_invoice_id	     IN NUMBER,
10:40:47 1402  	 out_subscription_id OUT NUMBER
10:40:47 1403  ) AS
10:40:47 1404  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
10:40:47 1405  -- VARIABLES
10:40:47 1406  temp_invoice_id NUMBER;
10:40:47 1407  -- EXCEPTIONS
10:40:47 1408  BAD_INVOICE_ID		 EXCEPTION;
10:40:47 1409  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:40:47 1410  BEGIN
10:40:47 1411  
10:40:47 1412  	 BEGIN
10:40:47 1413  	   SELECT
10:40:47 1414  	     INVOICE.ID into temp_invoice_id
10:40:47 1415  	   FROM
10:40:47 1416  	     INVOICE
10:40:47 1417  	   WHERE
10:40:47 1418  	     INVOICE.ID = in_invoice_id;
10:40:47 1419  	   EXCEPTION
10:40:47 1420  	     WHEN NO_DATA_FOUND THEN
10:40:47 1421  	       RAISE BAD_INVOICE_ID;
10:40:47 1422  	 END;
10:40:47 1423  
10:40:47 1424  	 BEGIN
10:40:47 1425  	   SELECT DISTINCT
10:40:47 1426  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
10:40:47 1427  	   FROM
10:40:47 1428  	     LICENSE
10:40:47 1429  	   WHERE
10:40:47 1430  	     LICENSE.INVOICE_ID = in_invoice_id;
10:40:47 1431  	   EXCEPTION
10:40:47 1432  	     WHEN NO_DATA_FOUND THEN
10:40:47 1433  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:40:47 1434  	 END;
10:40:47 1435  
10:40:47 1436  EXCEPTION
10:40:47 1437  WHEN BAD_INVOICE_ID THEN
10:40:47 1438  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1439  	   SPROC_NAME, 'No such invoice');
10:40:47 1440  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:40:47 1441  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1442  	   SPROC_NAME, 'Could not find subscription for given invoice');
10:40:47 1443  WHEN OTHERS THEN
10:40:47 1444  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1445  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1446  END GET_SUBSCR_ID_BY_INVOICE_ID;
10:40:47 1447  
10:40:47 1448  /******************************************************************************/
10:40:47 1449  
10:40:47 1450  PROCEDURE IS_INVOICE_TAX_EXEMPT (
10:40:47 1451  /*
10:40:47 1452  Throws exceptions:
10:40:47 1453  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1454  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1455  Return:
10:40:47 1456  	 GLOBAL_CONSTANTS_V22.TRUE if ACCOUNT.EXEMPT_ID is not null
10:40:47 1457  	 GLOBAL_CONSTANTS_V22.FALSE else
10:40:47 1458  */
10:40:47 1459  	 in_invoice_id	   IN NUMBER,
10:40:47 1460  	 out_is_tax_exempt OUT NUMBER
10:40:47 1461  ) AS
10:40:47 1462  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
10:40:47 1463  -- VARIABLES
10:40:47 1464  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
10:40:47 1465  -- EXCEPTIONS
10:40:47 1466  BAD_INVOICE_ID EXCEPTION;
10:40:47 1467  BEGIN
10:40:47 1468  
10:40:47 1469  	 BEGIN
10:40:47 1470  	   SELECT
10:40:47 1471  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
10:40:47 1472  	   FROM
10:40:47 1473  	     INVOICE
10:40:47 1474  	   WHERE
10:40:47 1475  	     INVOICE.ID = in_invoice_id;
10:40:47 1476  	   EXCEPTION
10:40:47 1477  	     WHEN NO_DATA_FOUND THEN
10:40:47 1478  	       RAISE BAD_INVOICE_ID;
10:40:47 1479  	 END;
10:40:47 1480  
10:40:47 1481  	 IF var_is_tax_exempt IS NULL THEN
10:40:47 1482  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 1483  	 ELSE
10:40:47 1484  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 1485  	 END IF;
10:40:47 1486  
10:40:47 1487  EXCEPTION
10:40:47 1488  WHEN BAD_INVOICE_ID THEN
10:40:47 1489  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1490  	   SPROC_NAME, 'No such invoice');
10:40:47 1491  WHEN OTHERS THEN
10:40:47 1492  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1493  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1494  END IS_INVOICE_TAX_EXEMPT;
10:40:47 1495  
10:40:47 1496  /******************************************************************************/
10:40:47 1497  
10:40:47 1498  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
10:40:47 1499  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
10:40:47 1500  	 out_result_set OUT SYS_REFCURSOR
10:40:47 1501  ) AS
10:40:47 1502  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
10:40:47 1503  -- VARIABLE
10:40:47 1504  temp_order_id TRANSACTION.ORDER_ID%TYPE;
10:40:47 1505  -- EXCEPTIONS
10:40:47 1506  BAD_ORDER_ID EXCEPTION;
10:40:47 1507  CAN_NOT_FIND_INVOICE EXCEPTION;
10:40:47 1508  BEGIN
10:40:47 1509  
10:40:47 1510  	 OPEN out_result_set FOR
10:40:47 1511  	   SELECT DISTINCT
10:40:47 1512  	     CHARGE.INVOICE_ID
10:40:47 1513  	   FROM
10:40:47 1514  	     CHARGE
10:40:47 1515  	   INNER JOIN
10:40:47 1516  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
10:40:47 1517  	   WHERE
10:40:47 1518  	     TRANSACTION.ORDER_ID = in_order_id;
10:40:47 1519  
10:40:47 1520  EXCEPTION
10:40:47 1521  WHEN BAD_ORDER_ID THEN
10:40:47 1522  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1523  	   SPROC_NAME, 'No such transaction');
10:40:47 1524  WHEN CAN_NOT_FIND_INVOICE THEN
10:40:47 1525  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1526  	   SPROC_NAME, 'Could not find invoice for given order id');
10:40:47 1527  WHEN OTHERS THEN
10:40:47 1528  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1529  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1530  END GET_INVOICE_BY_TRNS_ORDER_ID;
10:40:47 1531  
10:40:47 1532  /******************************************************************************/
10:40:47 1533  
10:40:47 1534  PROCEDURE GET_INVOICE_BY_ID (
10:40:47 1535  	 in_invoice_id	IN NUMBER,
10:40:47 1536  	 out_result_set OUT SYS_REFCURSOR
10:40:47 1537  ) AS
10:40:47 1538  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
10:40:47 1539  -- VARIABLE
10:40:47 1540  temp_invoice_id NUMBER;
10:40:47 1541  -- EXCEPTIONS
10:40:47 1542  BAD_INVOCIE_ID EXCEPTION;
10:40:47 1543  BEGIN
10:40:47 1544  
10:40:47 1545  	 BEGIN
10:40:47 1546  	   SELECT
10:40:47 1547  	     INVOICE.ID into temp_invoice_id
10:40:47 1548  	   FROM
10:40:47 1549  	     INVOICE
10:40:47 1550  	   WHERE
10:40:47 1551  	     INVOICE.ID = in_invoice_id;
10:40:47 1552  	   EXCEPTION
10:40:47 1553  	     WHEN NO_DATA_FOUND THEN
10:40:47 1554  	       RAISE BAD_INVOCIE_ID;
10:40:47 1555  	 END;
10:40:47 1556  
10:40:47 1557  	 OPEN out_result_set FOR
10:40:47 1558  	 SELECT
10:40:47 1559  	   INVOICE.ID,
10:40:47 1560  	   INVOICE.INVOICE_STATUS_ID,
10:40:47 1561  	   INVOICE.TAX_EXEMPT_ID,
10:40:47 1562  	   INVOICE.UPDATE_DATE,
10:40:47 1563  	   INVOICE.UPDATED_BY,
10:40:47 1564  	   INVOICE.CREATE_DATE,
10:40:47 1565  	   INVOICE.CREATED_BY
10:40:47 1566  	 FROM
10:40:47 1567  	   INVOICE
10:40:47 1568  	 WHERE
10:40:47 1569  	   INVOICE.ID = in_invoice_id;
10:40:47 1570  
10:40:47 1571  EXCEPTION
10:40:47 1572  WHEN BAD_INVOCIE_ID THEN
10:40:47 1573  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1574  	   SPROC_NAME, 'No such invoice');
10:40:47 1575  WHEN OTHERS THEN
10:40:47 1576  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1577  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1578  END GET_INVOICE_BY_ID;
10:40:47 1579  
10:40:47 1580  /******************************************************************************/
10:40:47 1581  
10:40:47 1582  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
10:40:47 1583  	 in_invoice_id		       IN NUMBER,
10:40:47 1584  	 out_is_tax_calculation_needed OUT NUMBER
10:40:47 1585  ) AS
10:40:47 1586  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
10:40:47 1587  BEGIN
10:40:47 1588  
10:40:47 1589  	 SELECT
10:40:47 1590  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
10:40:47 1591  	 FROM
10:40:47 1592  	   INVOICE I
10:40:47 1593  	 WHERE
10:40:47 1594  	   I.ID = in_invoice_id;
10:40:47 1595  
10:40:47 1596  EXCEPTION
10:40:47 1597  WHEN NO_DATA_FOUND THEN
10:40:47 1598  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1599  	   SPROC_NAME, 'No such invoice');
10:40:47 1600  WHEN OTHERS THEN
10:40:47 1601  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1602  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1603  END GET_IS_TAX_CALCULATION_NEEDED;
10:40:47 1604  
10:40:47 1605  /******************************************************************************/
10:40:47 1606  
10:40:47 1607  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
10:40:47 1608  	 in_invoice_id		      IN NUMBER,
10:40:47 1609  	 in_updated_by		      IN VARCHAR2,
10:40:47 1610  	 in_is_tax_calculation_needed IN NUMBER
10:40:47 1611  ) AS
10:40:47 1612  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
10:40:47 1613  -- VARIABLES
10:40:47 1614  temp_invoice_id	      NUMBER;
10:40:47 1615  -- EXCEPTIONS
10:40:47 1616  BAD_INVOICE_ID	      EXCEPTION;
10:40:47 1617  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
10:40:47 1618  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 1619  BEGIN
10:40:47 1620  
10:40:47 1621  	 BEGIN
10:40:47 1622  	   SELECT
10:40:47 1623  	     i.id into temp_invoice_id
10:40:47 1624  	   FROM
10:40:47 1625  	     invoice i
10:40:47 1626  	   WHERE
10:40:47 1627  	     i.id = in_invoice_id;
10:40:47 1628  	   EXCEPTION
10:40:47 1629  	     WHEN NO_DATA_FOUND THEN
10:40:47 1630  	       RAISE BAD_INVOICE_ID;
10:40:47 1631  	 END;
10:40:47 1632  
10:40:47 1633  	 BEGIN
10:40:47 1634  	   PROCS_INVOICE_CRU_V22.UPDATE_INVOICE(
10:40:47 1635  	     in_invoice_id => in_invoice_id,
10:40:47 1636  	     in_updated_by => in_updated_by,
10:40:47 1637  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
10:40:47 1638  	   );
10:40:47 1639  	   EXCEPTION
10:40:47 1640  	     WHEN OTHERS THEN
10:40:47 1641  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1642  	       RAISE CAN_NOT_UPDATE_INVOCIE;
10:40:47 1643  	 END;
10:40:47 1644  
10:40:47 1645  EXCEPTION
10:40:47 1646  WHEN BAD_INVOICE_ID THEN
10:40:47 1647  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1648  	   SPROC_NAME, 'No such invoice');
10:40:47 1649  WHEN CAN_NOT_UPDATE_INVOCIE THEN
10:40:47 1650  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1651  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
10:40:47 1652  WHEN OTHERS THEN
10:40:47 1653  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1654  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1655  END SET_IS_TAX_CALCULATION_NEEDED;
10:40:47 1656  
10:40:47 1657  /******************************************************************************/
10:40:47 1658  
10:40:47 1659  PROCEDURE REFUND_INVOICE (
10:40:47 1660  	 in_invoice_id	    IN NUMBER,
10:40:47 1661  	 in_refund_amount   IN NUMBER,
10:40:47 1662  	 in_note	    IN VARCHAR2,
10:40:47 1663  	 in_created_by	    IN VARCHAR2,
10:40:47 1664  	 out_charge_id	    OUT NUMBER
10:40:47 1665  ) AS
10:40:47 1666  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
10:40:47 1667  -- VARIABLES
10:40:47 1668  var_invoice_status_id  NUMBER;
10:40:47 1669  var_subscription_id    NUMBER;
10:40:47 1670  var_account_id	      NUMBER;
10:40:47 1671  var_group_id	      NUMBER;
10:40:47 1672  var_account_status_id  NUMBER;
10:40:47 1673  var_new_transaction_id NUMBER;
10:40:47 1674  var_instrument_type_id NUMBER;
10:40:47 1675  var_instrument_id      NUMBER;
10:40:47 1676  var_new_charge_id      NUMBER;
10:40:47 1677  var_invoice_amount     NUMBER(10,2);
10:40:47 1678  var_refunds_before     NUMBER(10,2);
10:40:47 1679  var_charges_amount     NUMBER(10,2);
10:40:47 1680  -- EXCEPTIONS
10:40:47 1681  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
10:40:47 1682  ACCOUNT_IS_FROZEN	     EXCEPTION;
10:40:47 1683  BAD_INVOICE_ID		     EXCEPTION;
10:40:47 1684  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
10:40:47 1685  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
10:40:47 1686  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
10:40:47 1687  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:40:47 1688  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
10:40:47 1689  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
10:40:47 1690  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
10:40:47 1691  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
10:40:47 1692  EXCEPTION_MESSAGE	      VARCHAR2(1024);
10:40:47 1693  BEGIN
10:40:47 1694  
10:40:47 1695  	 BEGIN
10:40:47 1696  	   SELECT
10:40:47 1697  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
10:40:47 1698  	   FROM
10:40:47 1699  	     INVOICE
10:40:47 1700  	   WHERE
10:40:47 1701  	     INVOICE.ID = in_invoice_id;
10:40:47 1702  	   EXCEPTION
10:40:47 1703  	     WHEN NO_DATA_FOUND THEN
10:40:47 1704  	       RAISE BAD_INVOICE_ID;
10:40:47 1705  	 END;
10:40:47 1706  
10:40:47 1707  	 -- Get instrument and subscription id if exists
10:40:47 1708  	 BEGIN
10:40:47 1709  	   SELECT
10:40:47 1710  	     SUBSCRIPTION.INSTRUMENT_ID,
10:40:47 1711  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:40:47 1712  	     SUBSCRIPTION.ACCOUNT_ID,
10:40:47 1713  	     SUBSCRIPTION.ID
10:40:47 1714  	     into
10:40:47 1715  	     var_instrument_id,
10:40:47 1716  	     var_instrument_type_id,
10:40:47 1717  	     var_account_id,
10:40:47 1718  	     var_subscription_id
10:40:47 1719  	   FROM
10:40:47 1720  	     SUBSCRIPTION
10:40:47 1721  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
10:40:47 1722  	   WHERE
10:40:47 1723  	     LICENSE.INVOICE_ID = in_invoice_id
10:40:47 1724  	     AND ROWNUM <= 1;
10:40:47 1725  	   EXCEPTION
10:40:47 1726  	     WHEN NO_DATA_FOUND THEN
10:40:47 1727  	       BEGIN
10:40:47 1728  
10:40:47 1729  		 var_subscription_id := NULL;
10:40:47 1730  
10:40:47 1731  		 SELECT
10:40:47 1732  		   CHARGE.INSTRUMENT_ID,
10:40:47 1733  		   CHARGE.INSTRUMENT_TYPE_ID,
10:40:47 1734  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
10:40:47 1735  		   into
10:40:47 1736  		   var_instrument_id,
10:40:47 1737  		   var_instrument_type_id,
10:40:47 1738  		   var_group_id
10:40:47 1739  		 FROM
10:40:47 1740  		   INVOICE
10:40:47 1741  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
10:40:47 1742  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:40:47 1743  		 WHERE
10:40:47 1744  		   INVOICE.ID = in_invoice_id
10:40:47 1745  		   AND ROWNUM <= 1;
10:40:47 1746  
10:40:47 1747  		 SELECT
10:40:47 1748  		   ACCOUNT.ID into var_account_id
10:40:47 1749  		 FROM
10:40:47 1750  		   ACCOUNT
10:40:47 1751  		 WHERE
10:40:47 1752  		   ACCOUNT.GROUP_ID = var_group_id;
10:40:47 1753  
10:40:47 1754  		 EXCEPTION
10:40:47 1755  		   WHEN NO_DATA_FOUND THEN
10:40:47 1756  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
10:40:47 1757  	       END;
10:40:47 1758  	 END;
10:40:47 1759  
10:40:47 1760  	 -- Check account status. It should not to be frozen
10:40:47 1761  	 SELECT
10:40:47 1762  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
10:40:47 1763  	 FROM
10:40:47 1764  	   ACCOUNT
10:40:47 1765  	 WHERE
10:40:47 1766  	   ACCOUNT.ID = var_account_id;
10:40:47 1767  
10:40:47 1768  	 IF var_account_status_id = GLOBAL_STATUSES_V22.ACCOUNT_FROZEN THEN
10:40:47 1769  	   RAISE ACCOUNT_IS_FROZEN;
10:40:47 1770  	 END IF;
10:40:47 1771  
10:40:47 1772  	 IF var_invoice_status_id != GLOBAL_STATUSES_V22.INVOICE_CLOSED THEN
10:40:47 1773  	   RAISE INVOICE_IS_NOT_CLOSED;
10:40:47 1774  	 END IF;
10:40:47 1775  
10:40:47 1776  	 BEGIN
10:40:47 1777  	   PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT (
10:40:47 1778  	     in_invoice_id => in_invoice_id,
10:40:47 1779  	     out_amount    => var_invoice_amount
10:40:47 1780  	   );
10:40:47 1781  	   EXCEPTION
10:40:47 1782  	     WHEN OTHERS THEN
10:40:47 1783  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1784  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:40:47 1785  	 END;
10:40:47 1786  
10:40:47 1787  	 IF ( in_refund_amount > var_invoice_amount ) THEN
10:40:47 1788  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
10:40:47 1789  	 END IF;
10:40:47 1790  
10:40:47 1791  	 SELECT /*+ STAR_TRANSFORMATION */
10:40:47 1792  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
10:40:47 1793  	 FROM
10:40:47 1794  	   CHARGE
10:40:47 1795  	 WHERE
10:40:47 1796  	   CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1797  	   AND (
10:40:47 1798  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 1799  	     OR (
10:40:47 1800  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V22.CHARGE_PROCESSED
10:40:47 1801  	       AND EXISTS (
10:40:47 1802  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47 1803  	       )
10:40:47 1804  	     )
10:40:47 1805  	   )
10:40:47 1806  	   AND CHARGE.CHARGE_AMOUNT < 0;
10:40:47 1807  
10:40:47 1808  	 -- Refunds are negative
10:40:47 1809  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
10:40:47 1810  	 var_refunds_before := 0 - var_refunds_before;
10:40:47 1811  
10:40:47 1812  	 var_charges_amount := 0;
10:40:47 1813  
10:40:47 1814  	 FOR f_processed_charges IN (
10:40:47 1815  	   SELECT
10:40:47 1816  	     CHARGE.CHARGE_AMOUNT
10:40:47 1817  	   FROM
10:40:47 1818  	     CHARGE
10:40:47 1819  	   WHERE
10:40:47 1820  	     CHARGE.INVOICE_ID = in_invoice_id
10:40:47 1821  	     AND CHARGE.CHARGE_AMOUNT > 0
10:40:47 1822  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V22.CHARGE_PROCESSED FROM DUAL)
10:40:47 1823  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS)
10:40:47 1824  	 )
10:40:47 1825  	 LOOP
10:40:47 1826  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
10:40:47 1827  	 END LOOP;
10:40:47 1828  
10:40:47 1829  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
10:40:47 1830  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
10:40:47 1831  	 END IF;
10:40:47 1832  
10:40:47 1833  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
10:40:47 1834  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
10:40:47 1835  	 END IF;
10:40:47 1836  
10:40:47 1837  	 BEGIN
10:40:47 1838  	   PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 1839  	     in_transaction_id	       => NULL,
10:40:47 1840  	     in_status_id	       => GLOBAL_STATUSES_V22.TRANSACTION_PREPARE,
10:40:47 1841  	     in_amount		       => -in_refund_amount,
10:40:47 1842  	     in_created_by	       => in_created_by,
10:40:47 1843  	     in_order_id	       => NULL,
10:40:47 1844  	     in_is_refund	       => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1845  	     in_transaction_type_code  => 'REFUND',
10:40:47 1846  	     out_transaction_id        => var_new_transaction_id
10:40:47 1847  	   );
10:40:47 1848  	   EXCEPTION
10:40:47 1849  	     WHEN OTHERS THEN
10:40:47 1850  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1851  	       RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 1852  	 END;
10:40:47 1853  
10:40:47 1854  	 BEGIN
10:40:47 1855  	   PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 1856  	     in_invoice_id	   => in_invoice_id,
10:40:47 1857  	     in_transaction_id	   => var_new_transaction_id,
10:40:47 1858  	     in_instrument_type_id => var_instrument_type_id,
10:40:47 1859  	     in_instrument_id	   => var_instrument_id,
10:40:47 1860  	     in_charge_amount	   => -in_refund_amount,
10:40:47 1861  	     in_created_by	   => in_created_by,
10:40:47 1862  	     in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 1863  	     out_charge_id	   => var_new_charge_id
10:40:47 1864  	   );
10:40:47 1865  	   EXCEPTION
10:40:47 1866  	     WHEN OTHERS THEN
10:40:47 1867  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1868  	       RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 1869  	 END;
10:40:47 1870  
10:40:47 1871  	 out_charge_id := var_new_charge_id;
10:40:47 1872  
10:40:47 1873  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
10:40:47 1874  	   BEGIN
10:40:47 1875  	     PROCS_SUBSCRIPTION_V22.ANNOTATE_SUBSCRIPTION(
10:40:47 1876  	       in_subscription_id => var_subscription_id,
10:40:47 1877  	       in_agent_id	  => 0, -- AGENT_ID??
10:40:47 1878  	       in_note		  => in_note,
10:40:47 1879  	       in_created_by	  => in_created_by
10:40:47 1880  	     );
10:40:47 1881  	     EXCEPTION
10:40:47 1882  	       WHEN OTHERS THEN
10:40:47 1883  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1884  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
10:40:47 1885  	   END;
10:40:47 1886  	 END IF;
10:40:47 1887  
10:40:47 1888  EXCEPTION
10:40:47 1889  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
10:40:47 1890  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1891  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
10:40:47 1892  WHEN INVOICE_IS_NOT_CLOSED THEN
10:40:47 1893  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1894  	   SPROC_NAME, 'Invoice is not closed');
10:40:47 1895  WHEN ACCOUNT_IS_FROZEN THEN
10:40:47 1896  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1897  	   SPROC_NAME, 'Could not refund subscription for frozen account');
10:40:47 1898  WHEN BAD_INVOICE_ID THEN
10:40:47 1899  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1900  	   SPROC_NAME, 'No such invoice');
10:40:47 1901  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:40:47 1902  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1903  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
10:40:47 1904  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
10:40:47 1905  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1906  	   SPROC_NAME, 'Refund is greater than amount');
10:40:47 1907  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
10:40:47 1908  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1909  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
10:40:47 1910  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
10:40:47 1911  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1912  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
10:40:47 1913  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 1914  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1915  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 1916  WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 1917  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1918  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 1919  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
10:40:47 1920  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1921  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
10:40:47 1922  WHEN OTHERS THEN
10:40:47 1923  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1925  END REFUND_INVOICE;
10:40:47 1926  
10:40:47 1927  /******************************************************************************/
10:40:47 1928  
10:40:47 1929  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:40:47 1930  	 in_invoice_id		     IN NUMBER,
10:40:47 1931  	 out_order_id		     OUT VARCHAR2,
10:40:47 1932  	 out_external_transaction_id OUT VARCHAR2
10:40:47 1933  ) AS
10:40:47 1934  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
10:40:47 1935  -- VARIABLES
10:40:47 1936  temp_invoice_id number;
10:40:47 1937  cnt_matched_instr number := 0;
10:40:47 1938  -- EXCEPTIONS
10:40:47 1939  BAD_INVOICE_ID EXCEPTION;
10:40:47 1940  BEGIN
10:40:47 1941  
10:40:47 1942  	 BEGIN
10:40:47 1943  	   SELECT
10:40:47 1944  	     i.id into temp_invoice_id
10:40:47 1945  	   from
10:40:47 1946  	     invoice i
10:40:47 1947  	   where
10:40:47 1948  	     i.id = in_invoice_id;
10:40:47 1949  	   EXCEPTION
10:40:47 1950  	     WHEN NO_DATA_FOUND THEN
10:40:47 1951  	       RAISE BAD_INVOICE_ID;
10:40:47 1952  	 END;
10:40:47 1953  
10:40:47 1954  	 select
10:40:47 1955  	   count(1) into cnt_matched_instr
10:40:47 1956  	 from
10:40:47 1957  	   charge ch
10:40:47 1958  	 inner join
10:40:47 1959  	   subscription s
10:40:47 1960  	 on
10:40:47 1961  	   s.instrument_id = ch.instrument_id
10:40:47 1962  	 where
10:40:47 1963  	   ch.invoice_id = in_invoice_id;
10:40:47 1964  
10:40:47 1965  	 if cnt_matched_instr = 0 then
10:40:47 1966  	   out_external_transaction_id := null;
10:40:47 1967  	   out_order_id := null;
10:40:47 1968  	   return;
10:40:47 1969  	 end if;
10:40:47 1970  
10:40:47 1971  	 SELECT
10:40:47 1972  	   t.order_id,
10:40:47 1973  	   ta.external_transaction_id
10:40:47 1974  	   into
10:40:47 1975  	   out_order_id,
10:40:47 1976  	   out_external_transaction_id
10:40:47 1977  	 from
10:40:47 1978  	   charge ch
10:40:47 1979  	   inner join transaction t on ch.transaction_id = t.id
10:40:47 1980  	   inner join transaction_attempt ta on ta.transaction_id = t.id
10:40:47 1981  	 where
10:40:47 1982  	   ch.invoice_id = in_invoice_id
10:40:47 1983  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47 1984  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
10:40:47 1985  
10:40:47 1986  EXCEPTION
10:40:47 1987  WHEN BAD_INVOICE_ID THEN
10:40:47 1988  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1989  	   SPROC_NAME, 'No such invoice');
10:40:47 1990  WHEN NO_DATA_FOUND THEN
10:40:47 1991  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1992  	   SPROC_NAME, 'No payment data found');
10:40:47 1993  WHEN OTHERS THEN
10:40:47 1994  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1995  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1996  END GET_PAYMENT_INFO_BY_INVOICE_ID;
10:40:47 1997  
10:40:47 1998  PROCEDURE IS_REVOKE_ENTITLEMENTS(
10:40:47 1999  	 in_invoice_id IN NUMBER,
10:40:47 2000  	 out_is_revoke OUT NUMBER
10:40:47 2001  ) AS
10:40:47 2002  BEGIN
10:40:47 2003  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V22.FALSE, GLOBAL_CONSTANTS_V22.TRUE)
10:40:47 2004  	   into out_is_revoke
10:40:47 2005  	 FROM
10:40:47 2006  	   offer_chain oc,
10:40:47 2007  	   subscription s,
10:40:47 2008  	   license l,
10:40:47 2009  	   invoice i
10:40:47 2010  	 where
10:40:47 2011  	   oc.id = s.offer_chain_id and
10:40:47 2012  	   s.id = l.subscription_id and
10:40:47 2013  	   l.invoice_id = i.id and
10:40:47 2014  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V22.TRUE and
10:40:47 2015  	   i.id = in_invoice_id and
10:40:47 2016  	   rownum < 2
10:40:47 2017  	 ;
10:40:47 2018  END IS_REVOKE_ENTITLEMENTS;
10:40:47 2019  
10:40:47 2020  END PROCS_INVOICE_V22;
10:40:47 2021  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:47 SQL> 
10:40:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V22" AS
10:40:47   2  
10:40:47   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
10:40:47   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:47   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
10:40:47   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
10:40:47   7  AS
10:40:47   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
10:40:47   9  BEGIN
10:40:47  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
10:40:47  11  	  PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_GIFT_CERTIFICATE (
10:40:47  12  	    in_gift_certificate_id	  => rec.Id,
10:40:47  13  	    in_gift_certificate_status_id => in_status_id,
10:40:47  14  	    in_updated_by		  => in_updater
10:40:47  15  	  );
10:40:47  16  	END LOOP;
10:40:47  17  END UPDATE_GC_STATUS_BY_INVOICE;
10:40:47  18  
10:40:47  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
10:40:47  20  	in_invoice_id		     IN NUMBER,
10:40:47  21  	out_is_invoice_for_redeem_gc OUT NUMBER
10:40:47  22  ) AS
10:40:47  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
10:40:47  24  var_is_for_gc NUMBER;
10:40:47  25  BEGIN
10:40:47  26  	SELECT
10:40:47  27  	  count(1) into var_is_for_gc
10:40:47  28  	FROM GIFT_CERTIFICATE GC
10:40:47  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
10:40:47  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
10:40:47  31  
10:40:47  32  	IF var_is_for_gc > 0 THEN
10:40:47  33  	  out_is_invoice_for_redeem_gc := 1;
10:40:47  34  	ELSE
10:40:47  35  	  out_is_invoice_for_redeem_gc := 0;
10:40:47  36  	END IF;
10:40:47  37  END IS_INVOICE_FOR_REDEEMED_GC;
10:40:47  38  
10:40:47  39  PROCEDURE GET_UNREDEEMED_GCS (
10:40:47  40  	out_result_set		OUT SYS_REFCURSOR,
10:40:47  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:47  42  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:47  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:47  44  ) AS
10:40:47  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
10:40:47  46  BEGIN
10:40:47  47  	OPEN out_result_set FOR
10:40:47  48  SELECT * FROM
10:40:47  49  (
10:40:47  50  	SELECT
10:40:47  51  	  gc.EXPIRATION_DATE,
10:40:47  52  	  ch.name,
10:40:47  53  	  ch.id offer_chain_id,
10:40:47  54  	  gc.sender_email,
10:40:47  55  	  gc.sender_name,
10:40:47  56  	  gc.recipient_email,
10:40:47  57  	  gc.recipient_name,
10:40:47  58  	  gc.purchase_date,
10:40:47  59  	  gc.redemption_date,
10:40:47  60  	  gc.purchaser_group_id,
10:40:47  61  	  gc.redeemer_group_id,
10:40:47  62  	  gc.code,
10:40:47  63  	  gc.gift_message,
10:40:47  64  	  gc.recipient_notify_date,
10:40:47  65  	  gc.id
10:40:47  66  	FROM
10:40:47  67  	  GIFT_CERTIFICATE gc,
10:40:47  68  	  OFFER_CHAIN ch
10:40:47  69  	WHERE
10:40:47  70  	  ch.id = gc.offer_chain_id
10:40:47  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
10:40:47  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
10:40:47  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
10:40:47  74  	  AND gc.redeemer_group_id is null
10:40:47  75  	  AND NOT EXISTS(
10:40:47  76  	    SELECT NULL
10:40:47  77  	    FROM PROCESS_RETRY_THROTTLE
10:40:47  78  	    WHERE PROCESS_NAME = in_process_name
10:40:47  79  	      AND GENERIC_ID = gc.id
10:40:47  80  	  ) AND EXISTS(
10:40:47  81  	    SELECT NULL
10:40:47  82  	    FROM
10:40:47  83  	      charge c,
10:40:47  84  	      transaction_attempt ta,
10:40:47  85  	      transaction t
10:40:47  86  	    WHERE
10:40:47  87  	      c.invoice_id = gc.purchase_invoice_id and
10:40:47  88  	      c.transaction_id = t.id and
10:40:47  89  	      t.id = ta.transaction_id and
10:40:47  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS
10:40:47  91  	  ) AND NOT EXISTS (
10:40:47  92  	    SELECT NULL
10:40:47  93  	    FROM
10:40:47  94  	      charge c,
10:40:47  95  	      transaction t
10:40:47  96  	    WHERE
10:40:47  97  	      c.invoice_id = gc.purchase_invoice_id and
10:40:47  98  	      c.transaction_id = t.id and
10:40:47  99  	      t.is_refund = GLOBAL_CONSTANTS_V22.TRUE
10:40:47 100  	  )
10:40:47 101  	  AND ROWNUM <= in_num_rows*10
10:40:47 102  	  ORDER BY dbms_random.value
10:40:47 103  ) WHERE
10:40:47 104  	  ROWNUM <= in_num_rows;
10:40:47 105  EXCEPTION
10:40:47 106  WHEN OTHERS THEN
10:40:47 107  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 109  END GET_UNREDEEMED_GCS;
10:40:47 110  
10:40:47 111  PROCEDURE ADD_CREDIT_CARD (
10:40:47 112  /*
10:40:47 113  Throws exceptions:
10:40:47 114  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 115  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 116  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 117  */
10:40:47 118  	in_group_id		  IN NUMBER,
10:40:47 119  	in_updated_by		  IN VARCHAR2,
10:40:47 120  	in_instrument_name	  IN VARCHAR2,
10:40:47 121  	in_card_holder_name	  IN VARCHAR2,
10:40:47 122  	in_street_address	  IN VARCHAR2,
10:40:47 123  	in_street_address2	  IN VARCHAR2,
10:40:47 124  	in_state		  IN VARCHAR2,
10:40:47 125  	in_city 		  IN VARCHAR2,
10:40:47 126  	in_postal_code		  IN VARCHAR2,
10:40:47 127  	in_country		  IN CHAR,
10:40:47 128  	in_last_four_cc 	  IN VARCHAR2,
10:40:47 129  	in_expiration_date	  IN DATE,
10:40:47 130  	in_credit_card_type_id	  IN NUMBER,
10:40:47 131  	in_token		  IN VARCHAR2,
10:40:47 132  	in_chase_profile_id	  IN VARCHAR2,
10:40:47 133  	in_credit_card_status_id  IN NUMBER,
10:40:47 134  	in_private_first_name	  IN VARCHAR2,
10:40:47 135  	in_private_last_name	  IN VARCHAR2,
10:40:47 136  	out_credit_card_id	  OUT NUMBER
10:40:47 137  ) AS
10:40:47 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
10:40:47 139  -- VARIABLES
10:40:47 140  var_account_id	      NUMBER;
10:40:47 141  var_account_status      NUMBER;
10:40:47 142  var_credit_card_id      NUMBER;
10:40:47 143  temp_old_credit_card_id NUMBER;
10:40:47 144  -- EXCEPTIONS
10:40:47 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
10:40:47 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
10:40:47 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
10:40:47 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
10:40:47 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:40:47 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
10:40:47 151  var_charges_set		SYS_REFCURSOR;
10:40:47 152  var_charge_id		NUMBER;
10:40:47 153  var_charge_invoice_id	NUMBER;
10:40:47 154  var_charge_transaction_id NUMBER;
10:40:47 155  var_charge_amount 	NUMBER(10,2);
10:40:47 156  temp_out_charge_id	NUMBER;
10:40:47 157  temp_out_transaction_id	NUMBER;
10:40:47 158  var_order_id			VARCHAR2(1024);
10:40:47 159  BEGIN
10:40:47 160  
10:40:47 161  	-- Get account id
10:40:47 162  	-- Get account status
10:40:47 163  	SELECT
10:40:47 164  	  ACCOUNT.ID,
10:40:47 165  	  ACCOUNT.ACCOUNT_STATUS_ID
10:40:47 166  	  into
10:40:47 167  	  var_account_id,
10:40:47 168  	  var_account_status
10:40:47 169  	FROM
10:40:47 170  	  ACCOUNT
10:40:47 171  	WHERE
10:40:47 172  	  ACCOUNT.GROUP_ID = in_group_id;
10:40:47 173  
10:40:47 174  	SELECT
10:40:47 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
10:40:47 176  	FROM DUAL;
10:40:47 177  
10:40:47 178  	-- Insert new row in CREDIT_CARD table
10:40:47 179  	PROCS_FIN_INSTRUMENTS_CRU_V22.CREATE_CREDIT_CARD(
10:40:47 180  	  out_credit_card_id	      => var_credit_card_id,
10:40:47 181  	  in_account_id 	      => var_account_id,
10:40:47 182  	  in_instrument_name	      => in_instrument_name,
10:40:47 183  	  in_private_card_holder_name => in_card_holder_name,
10:40:47 184  	  in_private_street_address   => in_street_address,
10:40:47 185  	  in_private_street_address2  => in_street_address2,
10:40:47 186  	  in_state		      => in_state,
10:40:47 187  	  in_city		      => in_city,
10:40:47 188  	  in_postal_code	      => in_postal_code,
10:40:47 189  	  in_country		      => in_country,
10:40:47 190  	  in_last_four_cc	      => in_last_four_cc,
10:40:47 191  	  in_expiration_date	      => in_expiration_date,
10:40:47 192  	  in_credit_card_type_id      => in_credit_card_type_id,
10:40:47 193  	  in_secret_token	      => in_token,
10:40:47 194  	  in_chase_profile_id	      => in_chase_profile_id,
10:40:47 195  	  in_created_by 	      => in_updated_by,
10:40:47 196  	  in_credit_card_status_id    => in_credit_card_status_id,
10:40:47 197  	  in_private_first_name       => in_private_first_name,
10:40:47 198  	  in_private_last_name	      => in_private_last_name
10:40:47 199  	);
10:40:47 200  
10:40:47 201  	out_credit_card_id := var_credit_card_id;
10:40:47 202  
10:40:47 203  EXCEPTION
10:40:47 204  WHEN NO_DATA_FOUND THEN
10:40:47 205  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 206  	  SPROC_NAME, 'No such account');
10:40:47 207  WHEN BAD_OLD_CREDIT_CARD THEN
10:40:47 208  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 209  	  SPROC_NAME, 'Bad old credit card id');
10:40:47 210  WHEN BAD_IS_DEFAULT_VALUE THEN
10:40:47 211  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 212  	  SPROC_NAME, 'Bad is_default value');
10:40:47 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
10:40:47 214  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
10:40:47 216  WHEN BAD_ACCOUNT_STATUS THEN
10:40:47 217  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 218  	  SPROC_NAME, 'Account is not active');
10:40:47 219  WHEN OTHERS THEN
10:40:47 220  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 222  END ADD_CREDIT_CARD;
10:40:47 223  
10:40:47 224  /******************************************************************************/
10:40:47 225  
10:40:47 226  PROCEDURE ADD_PAYPAL (
10:40:47 227  /*
10:40:47 228  Throws exceptions:
10:40:47 229  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 230  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 231  */
10:40:47 232  	in_group_id			IN NUMBER,
10:40:47 233  	in_instrument_name		IN VARCHAR2,
10:40:47 234  	in_private_email_address	IN VARCHAR2,
10:40:47 235  	in_created_by			IN VARCHAR2,
10:40:47 236  	in_paypal_status_id		IN NUMBER,
10:40:47 237  	in_paypal_prvt_street_address	IN VARCHAR2,
10:40:47 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
10:40:47 239  	in_state			IN VARCHAR2,
10:40:47 240  	in_city 			IN VARCHAR2,
10:40:47 241  	in_postal_code			IN VARCHAR2,
10:40:47 242  	in_country			IN CHAR,
10:40:47 243  	in_expiration_date		IN DATE,
10:40:47 244  	in_secret_token 		IN VARCHAR2,
10:40:47 245  	out_paypal_id			OUT NUMBER
10:40:47 246  ) AS
10:40:47 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
10:40:47 248  var_paypal_id NUMBER;
10:40:47 249  var_account_id  NUMBER;
10:40:47 250  -- EXCEPTIONS
10:40:47 251  BAD_GROUP_ID	    EXCEPTION;
10:40:47 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
10:40:47 253  BAD_PAYPAL_STATUS     EXCEPTION;
10:40:47 254  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 255  BEGIN
10:40:47 256  
10:40:47 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_ACTIVE
10:40:47 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_INACTIVE
10:40:47 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_FROZEN THEN
10:40:47 260  	  RAISE BAD_PAYPAL_STATUS;
10:40:47 261  	END IF;
10:40:47 262  
10:40:47 263  	BEGIN
10:40:47 264  	  SELECT
10:40:47 265  	    a.id into var_account_id
10:40:47 266  	  from
10:40:47 267  	    account a
10:40:47 268  	  where
10:40:47 269  	    a.group_id = in_group_id;
10:40:47 270  	  EXCEPTION
10:40:47 271  	    WHEN NO_DATA_FOUND THEN
10:40:47 272  	      RAISE BAD_GROUP_ID;
10:40:47 273  	END;
10:40:47 274  
10:40:47 275  	BEGIN
10:40:47 276  	  PROCS_FIN_INSTRUMENTS_CRU_V22.CREATE_PAYPAL(
10:40:47 277  	    out_paypal_id		   => var_paypal_id,
10:40:47 278  	    in_paypal_id		   => NULL,
10:40:47 279  	    in_account_id		   => var_account_id,
10:40:47 280  	    in_instrument_name		   => in_instrument_name,
10:40:47 281  	    in_private_email_address	   => in_private_email_address,
10:40:47 282  	    in_created_by		   => in_created_by,
10:40:47 283  	    in_paypal_status_id 	   => in_paypal_status_id,
10:40:47 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
10:40:47 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
10:40:47 286  	    in_state			   => in_state,
10:40:47 287  	    in_city			   => in_city,
10:40:47 288  	    in_postal_code		   => in_postal_code,
10:40:47 289  	    in_country			   => in_country,
10:40:47 290  	    in_expiration_date		   => in_expiration_date,
10:40:47 291  	    in_secret_token		   => in_secret_token
10:40:47 292  	  );
10:40:47 293  	  EXCEPTION
10:40:47 294  	    WHEN OTHERS THEN
10:40:47 295  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
10:40:47 297  	END;
10:40:47 298  
10:40:47 299  	out_paypal_id := var_paypal_id;
10:40:47 300  
10:40:47 301  EXCEPTION
10:40:47 302  WHEN BAD_GROUP_ID THEN
10:40:47 303  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 304  	  SPROC_NAME, 'No such group id');
10:40:47 305  WHEN BAD_PAYPAL_STATUS THEN
10:40:47 306  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 307  	  SPROC_NAME, 'Bad paypal status');
10:40:47 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
10:40:47 309  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
10:40:47 311  WHEN OTHERS THEN
10:40:47 312  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 314  END ADD_PAYPAL;
10:40:47 315  
10:40:47 316  /******************************************************************************/
10:40:47 317  
10:40:47 318  PROCEDURE DISABLE_CREDIT_CARD (
10:40:47 319  /*
10:40:47 320  Throws exceptions:
10:40:47 321  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 322  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 323  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 324  */
10:40:47 325  	in_credit_card_id IN NUMBER,
10:40:47 326  	in_updated_by	  IN VARCHAR2
10:40:47 327  ) AS
10:40:47 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
10:40:47 329  -- VARIBLES
10:40:47 330  var_account_id		     NUMBER;
10:40:47 331  var_group_id		     NUMBER;
10:40:47 332  var_credit_card_status	     NUMBER;
10:40:47 333  var_pending_transactions_num   NUMBER;
10:40:47 334  var_pending_invoices_num	     NUMBER;
10:40:47 335  current_def_instrument_type_id NUMBER;
10:40:47 336  current_def_instrument_id      NUMBER;
10:40:47 337  -- EXCEPTIONS
10:40:47 338  BAD_CC_STATUS		   EXCEPTION;
10:40:47 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
10:40:47 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
10:40:47 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
10:40:47 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
10:40:47 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
10:40:47 344  BEGIN
10:40:47 345  
10:40:47 346  	-- Get credit card status
10:40:47 347  	-- Get account id
10:40:47 348  	SELECT
10:40:47 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
10:40:47 350  	  CREDIT_CARD.ACCOUNT_ID
10:40:47 351  	  into
10:40:47 352  	  var_credit_card_status,
10:40:47 353  	  var_account_id
10:40:47 354  	FROM
10:40:47 355  	  CREDIT_CARD
10:40:47 356  	WHERE
10:40:47 357  	  CREDIT_CARD.ID = in_credit_card_id;
10:40:47 358  
10:40:47 359  	-- Check that we can disable this credit card (STUB)
10:40:47 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
10:40:47 362  	END IF;
10:40:47 363  
10:40:47 364  	-- Get account id
10:40:47 365  	SELECT
10:40:47 366  	  ACCOUNT.GROUP_ID into var_group_id
10:40:47 367  	FROM
10:40:47 368  	  ACCOUNT
10:40:47 369  	WHERE
10:40:47 370  	  ACCOUNT.ID = var_account_id;
10:40:47 371  
10:40:47 372  	-- Card should to be active
10:40:47 373  	IF var_credit_card_status != GLOBAL_STATUSES_V22.CREDIT_CARD_ACTIVE THEN
10:40:47 374  	  RAISE BAD_CC_STATUS;
10:40:47 375  	END IF;
10:40:47 376  
10:40:47 377  	-- Looking for pending transactions associated with given credit card
10:40:47 378  	SELECT
10:40:47 379  	  COUNT(*) into var_pending_invoices_num
10:40:47 380  	FROM
10:40:47 381  	  CHARGE
10:40:47 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 383  	WHERE
10:40:47 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
10:40:47 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_PENDING;
10:40:47 387  
10:40:47 388  	IF var_pending_invoices_num > 0 THEN
10:40:47 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
10:40:47 390  	END IF;
10:40:47 391  
10:40:47 392  	-- Getting current default financial instrument
10:40:47 393  	BEGIN
10:40:47 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
10:40:47 395  	    in_group_id 	   => var_group_id,
10:40:47 396  	    out_instrument_type_id => current_def_instrument_type_id,
10:40:47 397  	    out_instrument_id	   => current_def_instrument_id
10:40:47 398  	  );
10:40:47 399  	  EXCEPTION
10:40:47 400  	    WHEN OTHERS THEN
10:40:47 401  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:40:47 403  	END;
10:40:47 404  
10:40:47 405  	-- Checking that credit card is not default
10:40:47 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47 407  	  AND current_def_instrument_id = in_credit_card_id THEN
10:40:47 408  	  BEGIN
10:40:47 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
10:40:47 410  	      in_group_id => var_group_id
10:40:47 411  	    );
10:40:47 412  	  EXCEPTION
10:40:47 413  	    WHEN OTHERS THEN
10:40:47 414  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:40:47 416  	  END;
10:40:47 417  	END IF;
10:40:47 418  
10:40:47 419  	-- Update credit card status
10:40:47 420  	PROCS_FIN_INSTRUMENTS_V22.UPDATE_CREDIT_CARD_STATUS(
10:40:47 421  	  in_credit_card_id	   => in_credit_card_id,
10:40:47 422  	  in_updated_by 	   => in_updated_by,
10:40:47 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V22.CREDIT_CARD_DISABLED
10:40:47 424  	);
10:40:47 425  
10:40:47 426  EXCEPTION
10:40:47 427  WHEN NO_DATA_FOUND THEN
10:40:47 428  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 429  	  SPROC_NAME, 'No such credit card');
10:40:47 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:40:47 431  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
10:40:47 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:40:47 434  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
10:40:47 436  WHEN BAD_CC_STATUS THEN
10:40:47 437  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 438  	  SPROC_NAME, 'Credit card is not active');
10:40:47 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
10:40:47 440  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
10:40:47 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
10:40:47 443  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
10:40:47 445  WHEN OTHERS THEN
10:40:47 446  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 448  END DISABLE_CREDIT_CARD;
10:40:47 449  
10:40:47 450  /******************************************************************************/
10:40:47 451  
10:40:47 452  PROCEDURE DISABLE_PAYPAL (
10:40:47 453  /*
10:40:47 454  Throws exceptions:
10:40:47 455  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 456  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 457  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:47 458  */
10:40:47 459  	in_paypal_id  IN NUMBER,
10:40:47 460  	in_updated_by IN VARCHAR2
10:40:47 461  ) AS
10:40:47 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
10:40:47 463  -- VARIABLES
10:40:47 464  var_paypal_status_id NUMBER;
10:40:47 465  var_account_id	   NUMBER;
10:40:47 466  var_group_id	   NUMBER;
10:40:47 467  var_pending_invoices_num NUMBER;
10:40:47 468  current_def_instrument_type_id NUMBER;
10:40:47 469  current_def_instrument_id NUMBER;
10:40:47 470  -- EXCEPTIONS
10:40:47 471  BAD_PAYPAL_ID EXCEPTION;
10:40:47 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
10:40:47 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
10:40:47 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
10:40:47 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
10:40:47 476  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 477  BEGIN
10:40:47 478  
10:40:47 479  	-- Get Paypal status
10:40:47 480  	-- Get account
10:40:47 481  	BEGIN
10:40:47 482  	  SELECT
10:40:47 483  	    PAYPAL.PAYPAL_STATUS_ID,
10:40:47 484  	    PAYPAL.ACCOUNT_ID
10:40:47 485  	    into
10:40:47 486  	    var_paypal_status_id,
10:40:47 487  	    var_account_id
10:40:47 488  	  FROM
10:40:47 489  	    PAYPAL
10:40:47 490  	  WHERE
10:40:47 491  	    PAYPAL.ID = in_paypal_id;
10:40:47 492  	  EXCEPTION
10:40:47 493  	    WHEN NO_DATA_FOUND THEN
10:40:47 494  	      RAISE BAD_PAYPAL_ID;
10:40:47 495  	END;
10:40:47 496  
10:40:47 497  	-- Get group id
10:40:47 498  	SELECT
10:40:47 499  	  ACCOUNT.GROUP_ID into var_group_id
10:40:47 500  	FROM
10:40:47 501  	  ACCOUNT
10:40:47 502  	WHERE
10:40:47 503  	  ACCOUNT.ID = var_account_id;
10:40:47 504  
10:40:47 505  	-- Card should not be disabled
10:40:47 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V22.PAYPAL_INACTIVE THEN
10:40:47 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
10:40:47 508  	END IF;
10:40:47 509  
10:40:47 510  	-- Looking for pending transactions associated with given credit card
10:40:47 511  	SELECT
10:40:47 512  	  COUNT(*) into var_pending_invoices_num
10:40:47 513  	FROM
10:40:47 514  	  CHARGE
10:40:47 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
10:40:47 516  	WHERE
10:40:47 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL
10:40:47 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
10:40:47 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V22.TRANSACTION_PENDING;
10:40:47 520  
10:40:47 521  	IF var_pending_invoices_num > 0 THEN
10:40:47 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
10:40:47 523  	END IF;
10:40:47 524  
10:40:47 525  	-- Getting current default financial instrument
10:40:47 526  	BEGIN
10:40:47 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
10:40:47 528  	    in_group_id 	   => var_group_id,
10:40:47 529  	    out_instrument_type_id => current_def_instrument_type_id,
10:40:47 530  	    out_instrument_id	   => current_def_instrument_id
10:40:47 531  	  );
10:40:47 532  	  EXCEPTION
10:40:47 533  	    WHEN OTHERS THEN
10:40:47 534  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:40:47 536  	END;
10:40:47 537  
10:40:47 538  	-- Checking that credit card is not default
10:40:47 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL
10:40:47 540  	  AND current_def_instrument_id = in_paypal_id THEN
10:40:47 541  	  BEGIN
10:40:47 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
10:40:47 543  	      in_group_id => var_group_id
10:40:47 544  	    );
10:40:47 545  	  EXCEPTION
10:40:47 546  	    WHEN OTHERS THEN
10:40:47 547  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:40:47 549  	  END;
10:40:47 550  	END IF;
10:40:47 551  
10:40:47 552  	PROCS_FIN_INSTRUMENTS_V22.UPDATE_PAYPAL_STATUS(
10:40:47 553  	  in_paypal_id	      => in_paypal_id,
10:40:47 554  	  in_updated_by       => in_updated_by,
10:40:47 555  	  in_paypal_status_id => GLOBAL_STATUSES_V22.PAYPAL_INACTIVE
10:40:47 556  	);
10:40:47 557  
10:40:47 558  EXCEPTION
10:40:47 559  WHEN BAD_PAYPAL_ID THEN
10:40:47 560  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 561  	  SPROC_NAME, 'No such paypal');
10:40:47 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
10:40:47 563  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 564  	  SPROC_NAME, 'Paypal already inactive');
10:40:47 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
10:40:47 566  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
10:40:47 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:40:47 569  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
10:40:47 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:40:47 572  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
10:40:47 574  WHEN OTHERS THEN
10:40:47 575  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 577  END DISABLE_PAYPAL;
10:40:47 578  
10:40:47 579  /******************************************************************************/
10:40:47 580  
10:40:47 581  PROCEDURE UPDATE_CREDIT_CARD (
10:40:47 582  /*
10:40:47 583  Throws exceptions:
10:40:47 584  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:47 585  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 586  */
10:40:47 587  	in_credit_card_id	  IN NUMBER,
10:40:47 588  	in_updated_by		  IN VARCHAR2,
10:40:47 589  	in_instrument_name	  IN VARCHAR2,
10:40:47 590  	in_is_default		  IN NUMBER
10:40:47 591  ) AS
10:40:47 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
10:40:47 593  -- VARIABLES
10:40:47 594  var_account_id NUMBER;
10:40:47 595  var_group_id   NUMBER;
10:40:47 596  temp_cc_rownum NUMBER;
10:40:47 597  current_def_instrument_type_id NUMBER;
10:40:47 598  current_def_instrument_id      NUMBER;
10:40:47 599  -- EXCEPTION
10:40:47 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
10:40:47 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
10:40:47 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
10:40:47 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
10:40:47 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:40:47 605  BEGIN
10:40:47 606  
10:40:47 607  	-- Get account id
10:40:47 608  	SELECT
10:40:47 609  	  CREDIT_CARD.ACCOUNT_ID
10:40:47 610  	  into
10:40:47 611  	  var_account_id
10:40:47 612  	FROM
10:40:47 613  	  CREDIT_CARD
10:40:47 614  	WHERE
10:40:47 615  	  CREDIT_CARD.ID = in_credit_card_id;
10:40:47 616  
10:40:47 617  	-- Get group id
10:40:47 618  	SELECT
10:40:47 619  	  ACCOUNT.GROUP_ID into var_group_id
10:40:47 620  	FROM
10:40:47 621  	  ACCOUNT
10:40:47 622  	WHERE
10:40:47 623  	  ACCOUNT.ID = var_account_id;
10:40:47 624  
10:40:47 625  	-- Check that passed data is correct
10:40:47 626  	IF in_is_default != GLOBAL_CONSTANTS_V22.TRUE
10:40:47 627  	  AND in_is_default != GLOBAL_CONSTANTS_V22.FALSE
10:40:47 628  	  AND in_is_default IS NOT NULL THEN
10:40:47 629  	  RAISE BAD_IS_DEFAULT_VALUE;
10:40:47 630  	END IF;
10:40:47 631  
10:40:47 632  	-- Update credit card
10:40:47 633  	IF in_instrument_name IS NOT NULL THEN
10:40:47 634  	  PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_CREDIT_CARD(
10:40:47 635  	    in_credit_card_id  => in_credit_card_id,
10:40:47 636  	    in_updated_by      => in_updated_by,
10:40:47 637  	    in_instrument_name => in_instrument_name
10:40:47 638  	  );
10:40:47 639  	END IF;
10:40:47 640  
10:40:47 641  	-- Set default financial instrument
10:40:47 642  	IF in_is_default = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 643  	  BEGIN
10:40:47 644  	    PROCS_FIN_INSTRUMENTS_V22.SET_DEF_FINANCIAL_INSTRUMENT(
10:40:47 645  	      in_group_id	    => var_group_id,
10:40:47 646  	      in_instrument_type_id => GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD,
10:40:47 647  	      in_instrument_id	    => in_credit_card_id,
10:40:47 648  	      in_updated_by	    => in_updated_by
10:40:47 649  	    );
10:40:47 650  	    EXCEPTION
10:40:47 651  	      WHEN OTHERS THEN
10:40:47 652  		EXCEPTION_MESSAGE := SQLERRM;
10:40:47 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
10:40:47 654  	  END;
10:40:47 655  	END IF;
10:40:47 656  
10:40:47 657  	-- Set default financial instrument
10:40:47 658  	IF in_is_default = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 659  	  BEGIN
10:40:47 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
10:40:47 661  	      in_group_id	     => var_group_id,
10:40:47 662  	      out_instrument_type_id => current_def_instrument_type_id,
10:40:47 663  	      out_instrument_id      => current_def_instrument_id
10:40:47 664  	    );
10:40:47 665  	  EXCEPTION
10:40:47 666  	    WHEN OTHERS THEN
10:40:47 667  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
10:40:47 669  	  END;
10:40:47 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47 671  	    AND current_def_instrument_id = in_credit_card_id THEN
10:40:47 672  	    BEGIN
10:40:47 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
10:40:47 674  		in_group_id => var_group_id
10:40:47 675  	      );
10:40:47 676  	      EXCEPTION
10:40:47 677  		WHEN OTHERS THEN
10:40:47 678  		  EXCEPTION_MESSAGE := SQLERRM;
10:40:47 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
10:40:47 680  	    END;
10:40:47 681  	  END IF;
10:40:47 682  	END IF;
10:40:47 683  
10:40:47 684  EXCEPTION
10:40:47 685  WHEN NO_DATA_FOUND THEN
10:40:47 686  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 687  	  SPROC_NAME, 'No such credit card');
10:40:47 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
10:40:47 689  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
10:40:47 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
10:40:47 692  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
10:40:47 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
10:40:47 695  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
10:40:47 697  WHEN OTHERS THEN
10:40:47 698  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 700  END UPDATE_CREDIT_CARD;
10:40:47 701  
10:40:47 702  /******************************************************************************/
10:40:47 703  
10:40:47 704  	PROCEDURE START_GC_PURCHASING (
10:40:47 705  	  in_group_id		    IN NUMBER,
10:40:47 706  	  in_offer_chain_id	    IN VARCHAR2,
10:40:47 707  	  in_gift_certificate_code  IN	VARCHAR2,
10:40:47 708  	  in_created_by 	    IN	VARCHAR2,
10:40:47 709  	  in_recipient_name	    IN	VARCHAR2,
10:40:47 710  	  in_recipient_email	    IN	VARCHAR2,
10:40:47 711  	  in_recipient_address_id   IN NUMBER,
10:40:47 712  	  in_recipient_notify_date  IN DATE,
10:40:47 713  	  in_sender_name	    IN VARCHAR2,
10:40:47 714  	  in_sender_email	    IN VARCHAR2,
10:40:47 715  	  in_gift_message	    IN	VARCHAR2,
10:40:47 716  	  in_expiration_date	    IN DATE,
10:40:47 717  	  in_campaign		    IN VARCHAR2,
10:40:47 718  	  in_reference_code	    IN VARCHAR2,
10:40:47 719  	  out_gift_certificate_id   OUT NUMBER,
10:40:47 720  	  out_invoice_id	    OUT NUMBER
10:40:47 721  	) AS
10:40:47 722  	  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
10:40:47 723  -- VARIABLES
10:40:47 724  	  var_account_id	    NUMBER;
10:40:47 725  	  temp_gc_code		    GIFT_CERTIFICATE.CODE%TYPE;
10:40:47 726  	  var_och_is_gc 	    NUMBER;
10:40:47 727  	  var_offer_chain_status_id NUMBER;
10:40:47 728  	  var_is_for_redemption     NUMBER;
10:40:47 729  	  var_new_invoice_id	    NUMBER;
10:40:47 730  	  var_gift_cert_id	    NUMBER;
10:40:47 731  	  var_account_tax_exempt_id VARCHAR2(255);
10:40:47 732  -- EXCEPTIONS
10:40:47 733  	    BAD_GROUP_ID		  EXCEPTION;
10:40:47 734  	    GC_CODE_ALREADY_EXISTS	  EXCEPTION;
10:40:47 735  	    BAD_OFFER_CHAIN_ID		  EXCEPTION;
10:40:47 736  	    OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
10:40:47 737  	    BAD_OFFER_CHAIN_STATUS	  EXCEPTION;
10:40:47 738  	    CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
10:40:47 739  	    CAN_NOT_CREATE_INVOICE	  EXCEPTION;
10:40:47 740  	    OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
10:40:47 741  	    CAN_NOT_CREATE_LINE_ITEMS	  EXCEPTION;
10:40:47 742  	    REF_CODE_ALREADY_EXISTS	  EXCEPTION;
10:40:47 743  
10:40:47 744  	  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 745  	  BEGIN
10:40:47 746  -- Get account id
10:40:47 747  	    BEGIN
10:40:47 748  	      SELECT
10:40:47 749  		ACCOUNT.ID,
10:40:47 750  		ACCOUNT.TAX_EXEMPT_ID
10:40:47 751  	      into
10:40:47 752  		var_account_id,
10:40:47 753  		var_account_tax_exempt_id
10:40:47 754  	      FROM
10:40:47 755  		ACCOUNT
10:40:47 756  	      WHERE
10:40:47 757  		ACCOUNT.GROUP_ID = in_group_id;
10:40:47 758  	      EXCEPTION
10:40:47 759  	      WHEN NO_DATA_FOUND THEN
10:40:47 760  	      RAISE BAD_GROUP_ID;
10:40:47 761  	    END;
10:40:47 762  
10:40:47 763  -- Check for the same code
10:40:47 764  	    BEGIN
10:40:47 765  	      SELECT
10:40:47 766  		GIFT_CERTIFICATE.CODE into temp_gc_code
10:40:47 767  	      FROM
10:40:47 768  		GIFT_CERTIFICATE
10:40:47 769  	      WHERE
10:40:47 770  		GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
10:40:47 771  
10:40:47 772  	      RAISE GC_CODE_ALREADY_EXISTS;
10:40:47 773  
10:40:47 774  	      EXCEPTION
10:40:47 775  	      WHEN NO_DATA_FOUND THEN
10:40:47 776  	      NULL;
10:40:47 777  	    END;
10:40:47 778  
10:40:47 779  -- Get offer chain flag "is_gift_certificate"
10:40:47 780  	    BEGIN
10:40:47 781  	      SELECT
10:40:47 782  		OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:40:47 783  		OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
10:40:47 784  	      into
10:40:47 785  		var_och_is_gc,
10:40:47 786  		var_offer_chain_status_id
10:40:47 787  	      FROM
10:40:47 788  		OFFER_CHAIN
10:40:47 789  	      WHERE
10:40:47 790  		OFFER_CHAIN.ID = in_offer_chain_id;
10:40:47 791  	      EXCEPTION
10:40:47 792  	      WHEN NO_DATA_FOUND THEN
10:40:47 793  	      RAISE BAD_OFFER_CHAIN_ID;
10:40:47 794  	    END;
10:40:47 795  
10:40:47 796  	    IF var_och_is_gc != GLOBAL_CONSTANTS_V22.TRUE
10:40:47 797  	       OR var_och_is_gc IS NULL THEN
10:40:47 798  	      RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
10:40:47 799  	    END IF;
10:40:47 800  
10:40:47 801  	    IF var_offer_chain_status_id != GLOBAL_STATUSES_V22.OFFER_CHAIN_ACTIVE THEN
10:40:47 802  	      RAISE BAD_OFFER_CHAIN_STATUS;
10:40:47 803  	    END IF;
10:40:47 804  
10:40:47 805  -- norlov: #38151 check if the OC is for Redemption:
10:40:47 806  	    SELECT
10:40:47 807  	      COUNT(*) into var_is_for_redemption
10:40:47 808  	    FROM
10:40:47 809  	      OFFER_CHAIN_ELIGIBILITY
10:40:47 810  	    WHERE
10:40:47 811  	      OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 812  	      AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V22.GIFT_CERTIFICATE_REQUIRED
10:40:47 813  	      AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V22.ELIGIBILITY_FLAG_SET;
10:40:47 814  
10:40:47 815  	    IF var_is_for_redemption > 0 THEN
10:40:47 816  	      RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
10:40:47 817  	    END IF;
10:40:47 818  
10:40:47 819  -- Create new invoice
10:40:47 820  	    BEGIN
10:40:47 821  	      PROCS_INVOICE_V22.CREATE_INVOICE(
10:40:47 822  		  in_invoice_status => GLOBAL_STATUSES_V22.INVOICE_OPEN,
10:40:47 823  		  in_created_by     => in_created_by,
10:40:47 824  		  in_tax_exempt_id  => var_account_tax_exempt_id,
10:40:47 825  		  out_invoice_id    => var_new_invoice_id
10:40:47 826  	      );
10:40:47 827  	      EXCEPTION
10:40:47 828  	      WHEN OTHERS THEN
10:40:47 829  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 830  	      RAISE CAN_NOT_CREATE_INVOICE;
10:40:47 831  	    END;
10:40:47 832  
10:40:47 833  -- Add line items for new invoice
10:40:47 834  	    BEGIN
10:40:47 835  	      FOR f_offer_data IN (
10:40:47 836  	      SELECT
10:40:47 837  		OFFER_ID,
10:40:47 838  		NUM_RECURRENCES
10:40:47 839  	      FROM
10:40:47 840  		OFFER_OFFER_CHAIN
10:40:47 841  	      WHERE
10:40:47 842  		OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 843  	      )
10:40:47 844  	      LOOP
10:40:47 845  	      IF f_offer_data.NUM_RECURRENCES < 1 THEN
10:40:47 846  		RAISE OFFER_REC_NUM_LESS_THAN_ONE;
10:40:47 847  	      END IF;
10:40:47 848  	      FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
10:40:47 849  	      LOOP
10:40:47 850  		PROCS_LINE_ITEMS_V22.ADD_LINE_ITEMS(
10:40:47 851  		    in_invoice_id => var_new_invoice_id,
10:40:47 852  		    in_offer_id   => f_offer_data.OFFER_ID,
10:40:47 853  		    in_created_by => in_created_by
10:40:47 854  		);
10:40:47 855  	      END LOOP;
10:40:47 856  	      END LOOP;
10:40:47 857  
10:40:47 858  	      EXCEPTION
10:40:47 859  	      WHEN OTHERS THEN
10:40:47 860  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 861  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:40:47 862  	    END;
10:40:47 863  
10:40:47 864  	    BEGIN
10:40:47 865  	      PROCS_FIN_INSTRUMENTS_CRU_V22.CREATE_GIFT_CERTIFICATE(
10:40:47 866  		  out_gift_certificate_id	=> var_gift_cert_id,
10:40:47 867  		  in_purchaser_group_id 	=> in_group_id,
10:40:47 868  		  in_purchaser_invoice_id	=> var_new_invoice_id,
10:40:47 869  		  in_offer_chain_id		=> in_offer_chain_id,
10:40:47 870  		  in_expiration_date		=> in_expiration_date,
10:40:47 871  		  in_purchase_date		=> SYSDATE,
10:40:47 872  		  in_gift_certificate_status_id => GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_ACTIVE,
10:40:47 873  		  in_code			=> in_gift_certificate_code,
10:40:47 874  		  in_created_by 		=> in_created_by,
10:40:47 875  		  in_recipient_name		=> in_recipient_name,
10:40:47 876  		  in_gift_message		=> in_gift_message,
10:40:47 877  		  in_recipient_email		=> in_recipient_email,
10:40:47 878  		  in_sender_email		=> in_sender_email,
10:40:47 879  		  in_sender_name		=> in_sender_name,
10:40:47 880  		  in_recipient_address_id	=> in_recipient_address_id,
10:40:47 881  		  in_recipient_notify_date	=> in_recipient_notify_date,
10:40:47 882  		  in_campaign			=> in_campaign,
10:40:47 883  		  in_reference_code		=> in_reference_code
10:40:47 884  	      );
10:40:47 885  	      EXCEPTION WHEN DUP_VAL_ON_INDEX THEN RAISE REF_CODE_ALREADY_EXISTS;
10:40:47 886  	    END;
10:40:47 887  
10:40:47 888  	    out_gift_certificate_id := var_gift_cert_id;
10:40:47 889  	    out_invoice_id := var_new_invoice_id;
10:40:47 890  
10:40:47 891  	    EXCEPTION
10:40:47 892  	    WHEN BAD_OFFER_CHAIN_STATUS THEN
10:40:47 893  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 894  					     SPROC_NAME, 'Offer chain is not active');
10:40:47 895  	    WHEN GC_CODE_ALREADY_EXISTS THEN
10:40:47 896  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:47 897  					     SPROC_NAME, 'Gift certificate with same code already exists');
10:40:47 898  	    WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
10:40:47 899  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 900  					     SPROC_NAME, 'This offer chain can not be used for gift certificate');
10:40:47 901  	    WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
10:40:47 902  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 903  					     SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
10:40:47 904  	    WHEN CAN_NOT_CREATE_INVOICE THEN
10:40:47 905  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 906  					     SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:40:47 907  	    WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:40:47 908  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 909  					     SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:40:47 910  	    WHEN BAD_GROUP_ID THEN
10:40:47 911  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 912  					     SPROC_NAME, 'No such group id');
10:40:47 913  	    WHEN BAD_OFFER_CHAIN_ID THEN
10:40:47 914  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 915  					     SPROC_NAME, 'No such offer chain');
10:40:47 916  	    WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
10:40:47 917  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 918  					     SPROC_NAME, 'Some offer has recurrences number less than 1');
10:40:47 919  	    WHEN REF_CODE_ALREADY_EXISTS THEN
10:40:47 920  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 921  					     SPROC_NAME, 'reference_code already used');
10:40:47 922  	    WHEN OTHERS THEN
10:40:47 923  	    PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 924  					     SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 925  	  END START_GC_PURCHASING;
10:40:47 926  /******************************************************************************/
10:40:47 927  
10:40:47 928  	PROCEDURE FINALIZE_GC_PURCHASING (
10:40:47 929  	  in_invoice_id 	IN NUMBER,
10:40:47 930  	  in_created_by 	IN VARCHAR2,
10:40:47 931  	  in_instrument_id	IN NUMBER,
10:40:47 932  	  in_instrument_type_id IN NUMBER,
10:40:47 933  	  in_order_id		IN VARCHAR2,
10:40:47 934  	  in_transaction_id	IN NUMBER,
10:40:47 935  	  out_charge_amount	OUT NUMBER
10:40:47 936  	) AS
10:40:47 937  	  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
10:40:47 938  -- VARIABLES
10:40:47 939  	  temp_transaction_id_count NUMBER;
10:40:47 940  	  var_invoice_amount	    NUMBER(10,2);
10:40:47 941  	  var_transaction_id	    NUMBER;
10:40:47 942  	  var_new_charge_id	    NUMBER;
10:40:47 943  -- EXCEPTIONS
10:40:47 944  	    BAD_CREDIT_CARD_ID		EXCEPTION;
10:40:47 945  	    BAD_PAYPAL_ID		EXCEPTION;
10:40:47 946  	    BAD_INSTRUMENT_TYPE 	EXCEPTION;
10:40:47 947  	    TRANSACTION_EXISTS		EXCEPTION;
10:40:47 948  	    CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
10:40:47 949  	    CAN_NOT_USE_FCINSTR 	EXCEPTION;
10:40:47 950  	    CAN_NOT_CREATE_TRANSACTION	EXCEPTION;
10:40:47 951  	    CAN_NOT_CREATE_CHARGE	EXCEPTION;
10:40:47 952  	  EXCEPTION_MESSAGE   VARCHAR2(1024);
10:40:47 953  	  BEGIN
10:40:47 954  
10:40:47 955  -- Check that instrument exists
10:40:47 956  	    IF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47 957  	      IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 958  		RAISE BAD_CREDIT_CARD_ID;
10:40:47 959  	      END IF;
10:40:47 960  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47 961  	      IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 962  		RAISE BAD_PAYPAL_ID;
10:40:47 963  	      END IF;
10:40:47 964  	    ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_ZCI_INSTRUMENT THEN
10:40:47 965  	      NULL;
10:40:47 966  	    ELSE
10:40:47 967  	      RAISE BAD_INSTRUMENT_TYPE;
10:40:47 968  	    END IF;
10:40:47 969  
10:40:47 970  -- Check that transaction with given id do not exists
10:40:47 971  	    SELECT
10:40:47 972  	      COUNT(*) into temp_transaction_id_count
10:40:47 973  	    FROM
10:40:47 974  	      TRANSACTION
10:40:47 975  	    WHERE
10:40:47 976  	      TRANSACTION.ID = in_transaction_id;
10:40:47 977  
10:40:47 978  	    IF temp_transaction_id_count > 0 THEN
10:40:47 979  	      RAISE TRANSACTION_EXISTS;
10:40:47 980  	    END IF;
10:40:47 981  
10:40:47 982  -- Calculate new invoice amount
10:40:47 983  	    BEGIN
10:40:47 984  	      PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
10:40:47 985  	      EXCEPTION
10:40:47 986  	      WHEN OTHERS THEN
10:40:47 987  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:47 988  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:40:47 989  	    END;
10:40:47 990  
10:40:47 991  	    IF var_invoice_amount > 0
10:40:47 992  	       AND in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_ZCI_INSTRUMENT THEN
10:40:47 993  	      RAISE CAN_NOT_USE_FCINSTR;
10:40:47 994  	    END IF;
10:40:47 995  
10:40:47 996  -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
10:40:47 997  	    IF var_invoice_amount = 0 THEN
10:40:47 998  	      PROCS_INVOICE_CRU_V22.UPDATE_INVOICE(
10:40:47 999  		  in_invoice_id 		 => in_invoice_id,
10:40:47 1000  		   in_updated_by		  => in_created_by,
10:40:47 1001  		   in_invoice_status_id 	  => GLOBAL_STATUSES_V22.INVOICE_CLOSED
10:40:47 1002  	       );
10:40:47 1003  	     END IF;
10:40:47 1004  
10:40:47 1005  	     IF var_invoice_amount > 0 THEN
10:40:47 1006  -- Create transaction
10:40:47 1007  	       BEGIN
10:40:47 1008  		 PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 1009  		     in_transaction_id	      => in_transaction_id,
10:40:47 1010  		     in_status_id	      => GLOBAL_STATUSES_V22.TRANSACTION_PENDING,
10:40:47 1011  		     in_amount		      => var_invoice_amount,
10:40:47 1012  		     in_created_by	      => in_created_by,
10:40:47 1013  		     in_order_id	      => in_order_id,
10:40:47 1014  		     in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
10:40:47 1015  		     out_transaction_id       => var_transaction_id
10:40:47 1016  		 );
10:40:47 1017  		 EXCEPTION
10:40:47 1018  		 WHEN OTHERS THEN
10:40:47 1019  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1020  		 RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 1021  	       END;
10:40:47 1022  
10:40:47 1023  -- Create charge
10:40:47 1024  	       BEGIN
10:40:47 1025  		 PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 1026  		     in_invoice_id	   => in_invoice_id,
10:40:47 1027  		     in_transaction_id	   => var_transaction_id,
10:40:47 1028  		     in_instrument_type_id => in_instrument_type_id,
10:40:47 1029  		     in_instrument_id	   => in_instrument_id,
10:40:47 1030  		     in_charge_amount	   => var_invoice_amount,
10:40:47 1031  		     in_created_by	   => in_created_by,
10:40:47 1032  		     in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 1033  		     out_charge_id	   => var_new_charge_id
10:40:47 1034  		 );
10:40:47 1035  		 out_charge_amount := var_invoice_amount;
10:40:47 1036  		 EXCEPTION
10:40:47 1037  		 WHEN OTHERS THEN
10:40:47 1038  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1039  		 RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 1040  	       END;
10:40:47 1041  	     ELSE
10:40:47 1042  	       out_charge_amount := 0;
10:40:47 1043  	     END IF;
10:40:47 1044  
10:40:47 1045  	     EXCEPTION
10:40:47 1046  	     WHEN CAN_NOT_USE_FCINSTR THEN
10:40:47 1047  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1048  					      SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:40:47 1049  	     WHEN BAD_CREDIT_CARD_ID THEN
10:40:47 1050  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1051  					      SPROC_NAME, 'Bad credit card id');
10:40:47 1052  	     WHEN BAD_PAYPAL_ID THEN
10:40:47 1053  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1054  					      SPROC_NAME, 'Bad paypal id');
10:40:47 1055  	     WHEN BAD_INSTRUMENT_TYPE THEN
10:40:47 1056  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1057  					      SPROC_NAME, 'Bad instrument type');
10:40:47 1058  	     WHEN TRANSACTION_EXISTS THEN
10:40:47 1059  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:47 1060  					      SPROC_NAME, 'Transaction with given id already exists');
10:40:47 1061  	     WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 1062  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1063  					      SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 1064  	     WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 1065  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1066  					      SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 1067  	     WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:40:47 1068  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1069  					      SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
10:40:47 1070  	     WHEN OTHERS THEN
10:40:47 1071  	     PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1072  					      SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1073  	   END FINALIZE_GC_PURCHASING;
10:40:47 1074  
10:40:47 1075  /******************************************************************************/
10:40:47 1076  
10:40:47 1077  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
10:40:47 1078  	 in_group_id		   IN NUMBER,
10:40:47 1079  	 in_offer_chain_id	   IN VARCHAR2,
10:40:47 1080  	 in_gift_certificate_code  IN VARCHAR2,
10:40:47 1081  	 in_created_by		   IN VARCHAR2,
10:40:47 1082  	 in_recipient_name	   IN VARCHAR2,
10:40:47 1083  	 in_recipient_email	   IN VARCHAR2,
10:40:47 1084  	 in_sender_name 	   IN VARCHAR2,
10:40:47 1085  	 in_sender_email	   IN VARCHAR2,
10:40:47 1086  	 in_gift_message	   IN VARCHAR2,
10:40:47 1087  	 in_instrument_id	   IN NUMBER,
10:40:47 1088  	 in_instrument_type_id	   IN NUMBER,
10:40:47 1089  	 in_expiration_date	   IN DATE,
10:40:47 1090  	 in_order_id		   IN VARCHAR2,
10:40:47 1091  	 in_transaction_id	   IN NUMBER
10:40:47 1092  ) AS
10:40:47 1093  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
10:40:47 1094  -- VARIABLES
10:40:47 1095  var_gift_cert_id   NUMBER;
10:40:47 1096  var_account_id	  NUMBER;
10:40:47 1097  var_invoice_amount NUMBER (10,2);
10:40:47 1098  var_new_invoice_id NUMBER;
10:40:47 1099  var_new_charge_id  NUMBER;
10:40:47 1100  var_och_is_gc	  NUMBER;
10:40:47 1101  var_offer_chain_status_id NUMBER;
10:40:47 1102  var_is_for_redemption	 NUMBER;
10:40:47 1103  var_account_tax_exempt_id VARCHAR2(255);
10:40:47 1104  
10:40:47 1105  temp_transaction_id_count NUMBER;
10:40:47 1106  var_transaction_id	 NUMBER;
10:40:47 1107  temp_gc_code VARCHAR2(255);
10:40:47 1108  
10:40:47 1109  var_invoice_status_id NUMBER;
10:40:47 1110  -- EXCEPTIONS
10:40:47 1111  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
10:40:47 1112  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
10:40:47 1113  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
10:40:47 1114  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
10:40:47 1115  BAD_GROUP_ID			   EXCEPTION;
10:40:47 1116  BAD_OFFER_CHAIN_ID		   EXCEPTION;
10:40:47 1117  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
10:40:47 1118  TRANSACTION_EXISTS		   EXCEPTION;
10:40:47 1119  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
10:40:47 1120  BAD_INSTRUMENT_TYPE		   EXCEPTION;
10:40:47 1121  BAD_CREDIT_CARD_ID		   EXCEPTION;
10:40:47 1122  BAD_PAYPAL_ID			   EXCEPTION;
10:40:47 1123  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
10:40:47 1124  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
10:40:47 1125  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
10:40:47 1126  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
10:40:47 1127  CAN_NOT_USE_FCINSTR		   EXCEPTION;
10:40:47 1128  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
10:40:47 1129  EXCEPTION_MESSAGE		   VARCHAR2(1024);
10:40:47 1130  BEGIN
10:40:47 1131  
10:40:47 1132  	 -- Get account id
10:40:47 1133  	 BEGIN
10:40:47 1134  	   SELECT
10:40:47 1135  	     ACCOUNT.ID,
10:40:47 1136  	     ACCOUNT.TAX_EXEMPT_ID
10:40:47 1137  	     into
10:40:47 1138  	     var_account_id,
10:40:47 1139  	     var_account_tax_exempt_id
10:40:47 1140  	   FROM
10:40:47 1141  	     ACCOUNT
10:40:47 1142  	   WHERE
10:40:47 1143  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 1144  	   EXCEPTION
10:40:47 1145  	   WHEN NO_DATA_FOUND THEN
10:40:47 1146  	     RAISE BAD_GROUP_ID;
10:40:47 1147  	 END;
10:40:47 1148  
10:40:47 1149  	 -- Check that instrument exists
10:40:47 1150  	 IF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47 1151  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 1152  	     RAISE BAD_CREDIT_CARD_ID;
10:40:47 1153  	   END IF;
10:40:47 1154  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47 1155  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 1156  	     RAISE BAD_PAYPAL_ID;
10:40:47 1157  	   END IF;
10:40:47 1158  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_ZCI_INSTRUMENT THEN
10:40:47 1159  	   NULL;
10:40:47 1160  	 ELSE
10:40:47 1161  	   RAISE BAD_INSTRUMENT_TYPE;
10:40:47 1162  	 END IF;
10:40:47 1163  
10:40:47 1164  	 -- Check for the same code
10:40:47 1165  	 BEGIN
10:40:47 1166  	   SELECT
10:40:47 1167  	     GIFT_CERTIFICATE.CODE into temp_gc_code
10:40:47 1168  	   FROM
10:40:47 1169  	     GIFT_CERTIFICATE
10:40:47 1170  	   WHERE
10:40:47 1171  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
10:40:47 1172  
10:40:47 1173  	   RAISE GC_CODE_ALREADY_EXISTS;
10:40:47 1174  
10:40:47 1175  	   EXCEPTION
10:40:47 1176  	     WHEN NO_DATA_FOUND THEN
10:40:47 1177  	       NULL;
10:40:47 1178  	 END;
10:40:47 1179  
10:40:47 1180  	 -- Get offer chain flag "is_gift_certificate"
10:40:47 1181  	 BEGIN
10:40:47 1182  	   SELECT
10:40:47 1183  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
10:40:47 1184  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
10:40:47 1185  	     into
10:40:47 1186  	     var_och_is_gc,
10:40:47 1187  	     var_offer_chain_status_id
10:40:47 1188  	   FROM
10:40:47 1189  	     OFFER_CHAIN
10:40:47 1190  	   WHERE
10:40:47 1191  	     OFFER_CHAIN.ID = in_offer_chain_id;
10:40:47 1192  	   EXCEPTION
10:40:47 1193  	   WHEN NO_DATA_FOUND THEN
10:40:47 1194  	     RAISE BAD_OFFER_CHAIN_ID;
10:40:47 1195  	 END;
10:40:47 1196  
10:40:47 1197  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V22.TRUE
10:40:47 1198  	   OR var_och_is_gc IS NULL THEN
10:40:47 1199  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
10:40:47 1200  	 END IF;
10:40:47 1201  
10:40:47 1202  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V22.OFFER_CHAIN_ACTIVE THEN
10:40:47 1203  	   RAISE BAD_OFFER_CHAIN_STATUS;
10:40:47 1204  	 END IF;
10:40:47 1205  
10:40:47 1206  	 -- norlov: #38151 check if the OC is for Redemption:
10:40:47 1207  	 SELECT
10:40:47 1208  	   COUNT(*) into var_is_for_redemption
10:40:47 1209  	 FROM
10:40:47 1210  	   OFFER_CHAIN_ELIGIBILITY
10:40:47 1211  	 WHERE
10:40:47 1212  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 1213  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V22.GIFT_CERTIFICATE_REQUIRED
10:40:47 1214  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V22.ELIGIBILITY_FLAG_SET;
10:40:47 1215  
10:40:47 1216  	 IF var_is_for_redemption > 0 THEN
10:40:47 1217  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
10:40:47 1218  	 END IF;
10:40:47 1219  
10:40:47 1220  	 -- Check that transaction with given id do not exists
10:40:47 1221  	 SELECT
10:40:47 1222  	   COUNT(*) into temp_transaction_id_count
10:40:47 1223  	 FROM
10:40:47 1224  	   TRANSACTION
10:40:47 1225  	 WHERE
10:40:47 1226  	   TRANSACTION.ID = in_transaction_id;
10:40:47 1227  
10:40:47 1228  	 IF temp_transaction_id_count > 0 THEN
10:40:47 1229  	   RAISE TRANSACTION_EXISTS;
10:40:47 1230  	 END IF;
10:40:47 1231  
10:40:47 1232  	 -- Create new invoice
10:40:47 1233  	 BEGIN
10:40:47 1234  	   PROCS_INVOICE_V22.CREATE_INVOICE(
10:40:47 1235  	     in_invoice_status => GLOBAL_STATUSES_V22.INVOICE_OPEN,
10:40:47 1236  	     in_created_by     => in_created_by,
10:40:47 1237  	     in_tax_exempt_id  => var_account_tax_exempt_id,
10:40:47 1238  	     out_invoice_id    => var_new_invoice_id
10:40:47 1239  	   );
10:40:47 1240  	   EXCEPTION
10:40:47 1241  	     WHEN OTHERS THEN
10:40:47 1242  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1243  	       RAISE CAN_NOT_CREATE_INVOICE;
10:40:47 1244  	 END;
10:40:47 1245  
10:40:47 1246  	 -- Add line items for new invoice
10:40:47 1247  	 BEGIN
10:40:47 1248  	   FOR f_offer_data IN (
10:40:47 1249  	     SELECT
10:40:47 1250  	       OFFER_ID,
10:40:47 1251  	       NUM_RECURRENCES
10:40:47 1252  	     FROM
10:40:47 1253  	       OFFER_OFFER_CHAIN
10:40:47 1254  	     WHERE
10:40:47 1255  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
10:40:47 1256  	   )
10:40:47 1257  	   LOOP
10:40:47 1258  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
10:40:47 1259  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
10:40:47 1260  	     END IF;
10:40:47 1261  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
10:40:47 1262  	     LOOP
10:40:47 1263  	       PROCS_LINE_ITEMS_V22.ADD_LINE_ITEMS(
10:40:47 1264  		 in_invoice_id => var_new_invoice_id,
10:40:47 1265  		 in_offer_id   => f_offer_data.OFFER_ID,
10:40:47 1266  		 in_created_by => in_created_by
10:40:47 1267  	       );
10:40:47 1268  	     END LOOP;
10:40:47 1269  	   END LOOP;
10:40:47 1270  
10:40:47 1271  	   EXCEPTION
10:40:47 1272  	     WHEN OTHERS THEN
10:40:47 1273  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1274  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
10:40:47 1275  	 END;
10:40:47 1276  
10:40:47 1277  	 -- Calculate new invoice amount
10:40:47 1278  	 BEGIN
10:40:47 1279  	   PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
10:40:47 1280  	   EXCEPTION
10:40:47 1281  	     WHEN OTHERS THEN
10:40:47 1282  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1283  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
10:40:47 1284  	 END;
10:40:47 1285  
10:40:47 1286  	 IF var_invoice_amount > 0
10:40:47 1287  	   AND in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_ZCI_INSTRUMENT THEN
10:40:47 1288  	   RAISE CAN_NOT_USE_FCINSTR;
10:40:47 1289  	 END IF;
10:40:47 1290  
10:40:47 1291  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
10:40:47 1292  	 IF var_invoice_amount = 0 THEN
10:40:47 1293  	   PROCS_INVOICE_CRU_V22.UPDATE_INVOICE(
10:40:47 1294  	     in_invoice_id		    => var_new_invoice_id,
10:40:47 1295  	     in_updated_by		    => in_created_by,
10:40:47 1296  	     in_invoice_status_id	    => GLOBAL_STATUSES_V22.INVOICE_CLOSED
10:40:47 1297  	   );
10:40:47 1298  	 END IF;
10:40:47 1299  
10:40:47 1300  	 IF var_invoice_amount > 0 THEN
10:40:47 1301  	   -- Create transaction
10:40:47 1302  	   BEGIN
10:40:47 1303  	     PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:47 1304  	       in_transaction_id  => in_transaction_id,
10:40:47 1305  	       in_status_id	  => GLOBAL_STATUSES_V22.TRANSACTION_PENDING,
10:40:47 1306  	       in_amount	  => var_invoice_amount,
10:40:47 1307  	       in_created_by	  => in_created_by,
10:40:47 1308  	       in_order_id	  => in_order_id,
10:40:47 1309  	       out_transaction_id => var_transaction_id
10:40:47 1310  	     );
10:40:47 1311  	     EXCEPTION
10:40:47 1312  	       WHEN OTHERS THEN
10:40:47 1313  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1314  		 RAISE CAN_NOT_CREATE_TRANSACTION;
10:40:47 1315  	   END;
10:40:47 1316  
10:40:47 1317  	   -- Create charge
10:40:47 1318  	   BEGIN
10:40:47 1319  	     PROCS_CHARGE_V22.CREATE_CHARGE(
10:40:47 1320  	       in_invoice_id	     => var_new_invoice_id,
10:40:47 1321  	       in_transaction_id     => var_transaction_id,
10:40:47 1322  	       in_instrument_type_id => in_instrument_type_id,
10:40:47 1323  	       in_instrument_id      => in_instrument_id,
10:40:47 1324  	       in_charge_amount      => var_invoice_amount,
10:40:47 1325  	       in_created_by	     => in_created_by,
10:40:47 1326  	       in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 1327  	       out_charge_id	     => var_new_charge_id
10:40:47 1328  	     );
10:40:47 1329  	     EXCEPTION
10:40:47 1330  	       WHEN OTHERS THEN
10:40:47 1331  		 EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1332  		 RAISE CAN_NOT_CREATE_CHARGE;
10:40:47 1333  	   END;
10:40:47 1334  	 END IF;
10:40:47 1335  
10:40:47 1336  	 -- Create new row in GIFT_CERTIFICATE table
10:40:47 1337  	 PROCS_FIN_INSTRUMENTS_CRU_V22.CREATE_GIFT_CERTIFICATE(
10:40:47 1338  	   out_gift_certificate_id	 => var_gift_cert_id,
10:40:47 1339  	   in_purchaser_group_id	 => in_group_id,
10:40:47 1340  	   in_purchaser_invoice_id	 => var_new_invoice_id,
10:40:47 1341  	   in_offer_chain_id		 => in_offer_chain_id,
10:40:47 1342  	   in_expiration_date		 => in_expiration_date,
10:40:47 1343  	   in_purchase_date		 => SYSDATE,
10:40:47 1344  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_ACTIVE,
10:40:47 1345  	   in_code			 => in_gift_certificate_code,
10:40:47 1346  	   in_created_by		 => in_created_by,
10:40:47 1347  	   in_recipient_name		 => in_recipient_name,
10:40:47 1348  	   in_gift_message		 => in_gift_message,
10:40:47 1349  	   in_recipient_email		 => in_recipient_email,
10:40:47 1350  	   in_sender_email		 => in_sender_email,
10:40:47 1351  	   in_sender_name		 => in_sender_name
10:40:47 1352  	 );
10:40:47 1353  
10:40:47 1354  EXCEPTION
10:40:47 1355  WHEN CAN_NOT_USE_FCINSTR THEN
10:40:47 1356  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1357  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
10:40:47 1358  WHEN BAD_OFFER_CHAIN_STATUS THEN
10:40:47 1359  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1360  	   SPROC_NAME, 'Offer chain is not active');
10:40:47 1361  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
10:40:47 1362  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1363  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
10:40:47 1364  WHEN BAD_CREDIT_CARD_ID THEN
10:40:47 1365  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1366  	   SPROC_NAME, 'Bad credit card id');
10:40:47 1367  WHEN BAD_PAYPAL_ID THEN
10:40:47 1368  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1369  	   SPROC_NAME, 'Bad paypal id');
10:40:47 1370  WHEN BAD_INSTRUMENT_TYPE THEN
10:40:47 1371  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1372  	   SPROC_NAME, 'Bad instrument type');
10:40:47 1373  WHEN GC_CODE_ALREADY_EXISTS THEN
10:40:47 1374  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:47 1375  	   SPROC_NAME, 'Gift certificate with same code already exists');
10:40:47 1376  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
10:40:47 1377  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1378  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
10:40:47 1379  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
10:40:47 1380  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1381  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
10:40:47 1382  WHEN TRANSACTION_EXISTS THEN
10:40:47 1383  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR,
10:40:47 1384  	   SPROC_NAME, 'Transaction with given id already exists');
10:40:47 1385  WHEN CAN_NOT_CREATE_INVOICE THEN
10:40:47 1386  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1387  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
10:40:47 1388  WHEN CAN_NOT_CREATE_TRANSACTION THEN
10:40:47 1389  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1390  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
10:40:47 1391  WHEN CAN_NOT_CREATE_CHARGE THEN
10:40:47 1392  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1393  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
10:40:47 1394  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
10:40:47 1395  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1396  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
10:40:47 1397  WHEN BAD_GROUP_ID THEN
10:40:47 1398  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1399  	   SPROC_NAME, 'No such group id');
10:40:47 1400  WHEN BAD_OFFER_CHAIN_ID THEN
10:40:47 1401  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1402  	   SPROC_NAME, 'No such offer chain');
10:40:47 1403  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
10:40:47 1404  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1405  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
10:40:47 1406  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
10:40:47 1407  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1408  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
10:40:47 1409  WHEN OTHERS THEN
10:40:47 1410  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1411  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1412  END PURCHASE_GIFT_CERTIFICATE;
10:40:47 1413  
10:40:47 1414  /******************************************************************************/
10:40:47 1415  
10:40:47 1416  PROCEDURE REDEEM_GIFT_CERTIFICATE (
10:40:47 1417  	 in_group_id			 IN NUMBER,
10:40:47 1418  	 in_gift_certificate_code	 IN VARCHAR2,
10:40:47 1419  	 in_created_by			 IN VARCHAR2,
10:40:47 1420  	 in_redeemer_address_id 	 IN NUMBER,
10:40:47 1421  	 in_fin_instrument_id		 IN NUMBER,
10:40:47 1422  	 in_fin_instrument_type_id	 IN NUMBER,
10:40:47 1423  	 in_redemption_offer_chain_id	 IN NUMBER,
10:40:47 1424  	 out_subscription_id		 OUT NUMBER,
10:40:47 1425  	 out_license_id 		 OUT NUMBER
10:40:47 1426  ) AS
10:40:47 1427  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
10:40:47 1428  -- VARIABLES
10:40:47 1429  var_gift_certificate_id NUMBER;
10:40:47 1430  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
10:40:47 1431  var_purchased_oc_id     NUMBER;
10:40:47 1432  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
10:40:47 1433  var_offer_duration      VARCHAR2(30);
10:40:47 1434  var_invoice_id	       NUMBER;
10:40:47 1435  var_succ_purch_attempts_num NUMBER;
10:40:47 1436  var_subscription_id     NUMBER;
10:40:47 1437  var_license_id	       NUMBER;
10:40:47 1438  var_account_id	       NUMBER;
10:40:47 1439  var_gc_status_id        NUMBER;
10:40:47 1440  var_gc_charges_amount   NUMBER;
10:40:47 1441  var_gc_expiration_date  DATE;
10:40:47 1442  var_gc_redeemer_group_id NUMBER;
10:40:47 1443  var_gc_purchase_invoice_id NUMBER;
10:40:47 1444  var_gc_purchase_inv_status_id NUMBER;
10:40:47 1445  var_offer_index		     NUMBER;
10:40:47 1446  var_purchaser_group_id	     NUMBER;
10:40:47 1447  temp_license_id		     NUMBER;
10:40:47 1448  var_same_offer_chains_num     NUMBER;
10:40:47 1449  var_max_concurrent_subscrs    NUMBER;
10:40:47 1450  var_account_tax_exempt_id     VARCHAR2(255);
10:40:47 1451  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
10:40:47 1452  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
10:40:47 1453  var_first_offer_id	  NUMBER;
10:40:47 1454  var_date 	     DATE := SYSDATE;
10:40:47 1455  
10:40:47 1456  var_offers SYS_REFCURSOR;
10:40:47 1457  
10:40:47 1458  -- EXCEPTIONS
10:40:47 1459  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
10:40:47 1460  BAD_GROUP_ID		      EXCEPTION;
10:40:47 1461  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
10:40:47 1462  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
10:40:47 1463  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
10:40:47 1464  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
10:40:47 1465  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
10:40:47 1466  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
10:40:47 1467  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
10:40:47 1468  LIMIT_REACHED		      EXCEPTION;
10:40:47 1469  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
10:40:47 1470  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
10:40:47 1471  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
10:40:47 1472  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
10:40:47 1473  EXCEPTION_MESSAGE	      VARCHAR2(1024);
10:40:47 1474  BEGIN
10:40:47 1475  
10:40:47 1476  	 -- Get account id
10:40:47 1477  	 BEGIN
10:40:47 1478  	   SELECT
10:40:47 1479  	     ACCOUNT.ID,
10:40:47 1480  	     ACCOUNT.TAX_EXEMPT_ID
10:40:47 1481  	     into
10:40:47 1482  	     var_account_id,
10:40:47 1483  	     var_account_tax_exempt_id
10:40:47 1484  	   FROM
10:40:47 1485  	     ACCOUNT
10:40:47 1486  	   WHERE
10:40:47 1487  	     ACCOUNT.GROUP_ID = in_group_id
10:40:47 1488  	     AND ROWNUM <= 1;
10:40:47 1489  
10:40:47 1490  	   EXCEPTION
10:40:47 1491  	   WHEN NO_DATA_FOUND THEN
10:40:47 1492  	     RAISE BAD_GROUP_ID;
10:40:47 1493  	 END;
10:40:47 1494  
10:40:47 1495  	 -- Get gift certificate data
10:40:47 1496  	 BEGIN
10:40:47 1497  	   SELECT
10:40:47 1498  	     GIFT_CERTIFICATE.ID,
10:40:47 1499  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:40:47 1500  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:40:47 1501  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:40:47 1502  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
10:40:47 1503  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:40:47 1504  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
10:40:47 1505  	     into
10:40:47 1506  	     var_gift_certificate_id,
10:40:47 1507  	     var_purchased_oc_id,
10:40:47 1508  	     var_gc_status_id,
10:40:47 1509  	     var_purchaser_group_id,
10:40:47 1510  	     var_gc_expiration_date,
10:40:47 1511  	     var_gc_redeemer_group_id,
10:40:47 1512  	     var_gc_purchase_invoice_id
10:40:47 1513  	   FROM
10:40:47 1514  	     GIFT_CERTIFICATE
10:40:47 1515  	   WHERE
10:40:47 1516  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
10:40:47 1517  	     AND ROWNUM <= 1;
10:40:47 1518  
10:40:47 1519  	   EXCEPTION
10:40:47 1520  	   WHEN NO_DATA_FOUND THEN
10:40:47 1521  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
10:40:47 1522  	 END;
10:40:47 1523  
10:40:47 1524  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
10:40:47 1525  	 -- but in that case a redemption offer chain id should always be passed in
10:40:47 1526  	 IF var_oc_id_to_redeem IS NULL THEN
10:40:47 1527  	   BEGIN
10:40:47 1528  	     SELECT
10:40:47 1529  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
10:40:47 1530  	       into
10:40:47 1531  	       var_oc_id_to_redeem
10:40:47 1532  	     FROM
10:40:47 1533  	       OFFER_CHAIN_META_DATA
10:40:47 1534  	     WHERE
10:40:47 1535  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
10:40:47 1536  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V22.REDEMPTION_OC_ID
10:40:47 1537  	       AND ROWNUM = 1;
10:40:47 1538  -- requested by ticket so (but above is correct for the actual migrated data):
10:40:47 1539  --  SELECT
10:40:47 1540  --      OFFER_CHAIN.ID
10:40:47 1541  --      into
10:40:47 1542  --      var_oc_id_to_redeem
10:40:47 1543  --    FROM
10:40:47 1544  --      OFFER_CHAIN
10:40:47 1545  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
10:40:47 1546  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
10:40:47 1547  --    WHERE
10:40:47 1548  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 1549  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V22.GIFT_CERTIFICATE_REQUIRED
10:40:47 1550  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V22.ELIGIBILITY_FLAG_SET
10:40:47 1551  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 1552  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V22.REDEMPTION_OC_ID
10:40:47 1553  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
10:40:47 1554  --      AND ROWNUM = 1;
10:40:47 1555  
10:40:47 1556  	     EXCEPTION
10:40:47 1557  	     WHEN NO_DATA_FOUND THEN
10:40:47 1558  	       RAISE OC_TO_REDEEM_NOT_FOUND;
10:40:47 1559  	   END;
10:40:47 1560  	 END IF;
10:40:47 1561  
10:40:47 1562  	 -- Check that purchase invoice for this GC was closed
10:40:47 1563  	 SELECT
10:40:47 1564  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
10:40:47 1565  	 FROM
10:40:47 1566  	   INVOICE
10:40:47 1567  	 WHERE
10:40:47 1568  	   INVOICE.ID = var_gc_purchase_invoice_id;
10:40:47 1569  
10:40:47 1570  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V22.INVOICE_CLOSED THEN
10:40:47 1571  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
10:40:47 1572  	 END IF;
10:40:47 1573  
10:40:47 1574  	 -- Check that this invoice was successfully processed by billing
10:40:47 1575  	 SELECT
10:40:47 1576  	   COUNT(1) into var_succ_purch_attempts_num
10:40:47 1577  	 FROM
10:40:47 1578  	   TRANSACTION_ATTEMPT TA
10:40:47 1579  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
10:40:47 1580  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
10:40:47 1581  	 WHERE
10:40:47 1582  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
10:40:47 1583  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V22.TRANS_ATTEMPT_SUCCESS;
10:40:47 1584  
10:40:47 1585  	 IF var_succ_purch_attempts_num = 0 THEN
10:40:47 1586  	   SELECT
10:40:47 1587  	     COUNT(1) into var_succ_purch_attempts_num
10:40:47 1588  	   FROM
10:40:47 1589  	     DUAL
10:40:47 1590  	   WHERE
10:40:47 1591  	     PROCS_INVOICE_V22.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
10:40:47 1592  	 END IF;
10:40:47 1593  
10:40:47 1594  	 IF var_succ_purch_attempts_num = 0 THEN
10:40:47 1595  	   RAISE PURCHASE_INVOICES_NOT_PAID;
10:40:47 1596  	 END IF;
10:40:47 1597  
10:40:47 1598  	 -- Check limit for gc's offer chain
10:40:47 1599  	 SELECT
10:40:47 1600  	   COUNT(*) into var_same_offer_chains_num
10:40:47 1601  	 FROM
10:40:47 1602  	   SUBSCRIPTION
10:40:47 1603  	 WHERE
10:40:47 1604  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:47 1605  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
10:40:47 1606  	   AND (
10:40:47 1607  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 1608  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:47 1609  IF var_same_offer_chains_num = 0 THEN
10:40:47 1610  	   -- if user does not have any active existing subscriptions to the offer chain
10:40:47 1611  	   -- and if product from the offer chain is already owned from another offer chain
10:40:47 1612  	   -- then deny purchase
10:40:47 1613  	   FOR f_account_offer_chains IN (
10:40:47 1614  	     SELECT DISTINCT
10:40:47 1615  	       OFFER_CHAIN_ID
10:40:47 1616  	     FROM
10:40:47 1617  	       SUBSCRIPTION
10:40:47 1618  	     WHERE
10:40:47 1619  	       ACCOUNT_ID = var_account_id
10:40:47 1620  	       AND (
10:40:47 1621  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 1622  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED
10:40:47 1623  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 1624  	   )
10:40:47 1625  	   LOOP
10:40:47 1626  	     IF PROCS_OFFER_CHAIN_V22.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 1627  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
10:40:47 1628  	     END IF;
10:40:47 1629  	   END LOOP;
10:40:47 1630  	 ELSE
10:40:47 1631  
10:40:47 1632  	   -- if user have any active existing subscriptions to the offer chain
10:40:47 1633  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
10:40:47 1634  	   -- then deny purchase
10:40:47 1635  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
10:40:47 1636  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V22.INFINITY
10:40:47 1637  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
10:40:47 1638  	     RAISE LIMIT_REACHED;
10:40:47 1639  	   END IF;
10:40:47 1640  	 END IF;
10:40:47 1641  -- norlov: END OF TODO
10:40:47 1642  
10:40:47 1643  
10:40:47 1644  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
10:40:47 1645  	   RAISE GIFT_CERTIFICATE_REDEEMED;
10:40:47 1646  	 END IF;
10:40:47 1647  
10:40:47 1648  	 IF var_gc_expiration_date < sysdate THEN
10:40:47 1649  	   RAISE GIFT_CERTIFICATE_EXPIRED;
10:40:47 1650  	 END IF;
10:40:47 1651  
10:40:47 1652  	  IF var_gc_status_id = GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_REFUNDED THEN
10:40:47 1653  	   RAISE GIFT_CERT_IS_REFUNDED;
10:40:47 1654  	 END IF;
10:40:47 1655  
10:40:47 1656  	 IF var_gc_status_id = GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_FINALIZED THEN
10:40:47 1657  	   RAISE GIFT_CERT_IS_FINALIZED;
10:40:47 1658  	 END IF;
10:40:47 1659  
10:40:47 1660  	 -- Check that user did not subscribed to same product already
10:40:47 1661  	 -- norlov: get rid of this since there is already the check?
10:40:47 1662  	 FOR f_user_offer_chain IN (
10:40:47 1663  	   SELECT DISTINCT
10:40:47 1664  	     OFFER_CHAIN_ID
10:40:47 1665  	   FROM
10:40:47 1666  	     SUBSCRIPTION
10:40:47 1667  	   WHERE
10:40:47 1668  	     ACCOUNT_ID=var_account_id
10:40:47 1669  	     AND (
10:40:47 1670  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 1671  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED
10:40:47 1672  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 1673  	 )
10:40:47 1674  	 LOOP
10:40:47 1675  	   IF PROCS_OFFER_CHAIN_V22.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V22.TRUE THEN
10:40:47 1676  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
10:40:47 1677  	   END IF;
10:40:47 1678  	 END LOOP;
10:40:47 1679  
10:40:47 1680  	 -- Check for gift certificate amount
10:40:47 1681  	 SELECT
10:40:47 1682  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
10:40:47 1683  	 FROM
10:40:47 1684  	   CHARGE
10:40:47 1685  	 WHERE
10:40:47 1686  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
10:40:47 1687  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V22.INSTRUMENT_GIFT_CERTIFICATE;
10:40:47 1688  
10:40:47 1689  	 -- Create new invoice
10:40:47 1690  	 PROCS_INVOICE_V22.CREATE_INVOICE(
10:40:47 1691  	   out_invoice_id    => var_invoice_id,
10:40:47 1692  	   in_invoice_status => GLOBAL_STATUSES_V22.INVOICE_CLOSED,
10:40:47 1693  	   in_tax_exempt_id  => var_account_tax_exempt_id,
10:40:47 1694  	   in_created_by     => in_created_by
10:40:47 1695  	 );
10:40:47 1696  
10:40:47 1697  	 -- If a financial instrument wasn't passed in, use the gift certificate id
10:40:47 1698  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
10:40:47 1699  	 IF var_fin_instrument_id is null THEN
10:40:47 1700  	   var_fin_instrument_id := var_gift_certificate_id;
10:40:47 1701  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V22.INSTRUMENT_GIFT_CERTIFICATE;
10:40:47 1702  	 END IF;
10:40:47 1703  
10:40:47 1704  	 -- Insert new row into subscription table
10:40:47 1705  	 PROCS_SUBSCRIPTION_CRU_V22.CREATE_SUBSCRIPTION(
10:40:47 1706  	   out_subscription_id	     => var_subscription_id,
10:40:47 1707  	   in_account_id	     => var_account_id,
10:40:47 1708  	   in_purchase_date	     => var_date,
10:40:47 1709  	   in_offer_chain_id	     => var_oc_id_to_redeem,
10:40:47 1710  	   in_created_by	     => in_created_by,
10:40:47 1711  	   in_instrument_type_id     => var_fin_instrument_type_id,
10:40:47 1712  	   in_instrument_id	     => var_fin_instrument_id,
10:40:47 1713  	   in_subscription_status_id => GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:47 1714  	 );
10:40:47 1715  
10:40:47 1716  	 out_subscription_id := var_subscription_id;
10:40:47 1717  
10:40:47 1718  	 BEGIN
10:40:47 1719  	   PROCS_OFFER_CHAIN_V22.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
10:40:47 1720  	   EXCEPTION
10:40:47 1721  	     WHEN OTHERS THEN
10:40:47 1722  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1723  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
10:40:47 1724  	 END;
10:40:47 1725  
10:40:47 1726  	 BEGIN
10:40:47 1727  	   PROCS_LICENSE_V22.CREATE_LICENSE (
10:40:47 1728  	     out_license_id		 => out_license_id,
10:40:47 1729  	     in_status_id		 => GLOBAL_STATUSES_V22.LICENSE_ACTIVE,
10:40:47 1730  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V22.TRUE,
10:40:47 1731  	     in_start_date		 => var_date,
10:40:47 1732  	     in_offer_id		 => var_first_offer_id,
10:40:47 1733  	     in_subscription_id 	 => var_subscription_id,
10:40:47 1734  	     in_invoice_id		 => var_invoice_id,
10:40:47 1735  	     in_created_by		 => in_created_by,
10:40:47 1736  	     in_end_date		 => NULL, -- Will be calculated automatically
10:40:47 1737  	     in_is_extension		 => GLOBAL_CONSTANTS_V22.FALSE,
10:40:47 1738  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V22.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
10:40:47 1739  	     in_current_offer_recurr_num => 1
10:40:47 1740  	   );
10:40:47 1741  
10:40:47 1742  	   EXCEPTION
10:40:47 1743  	     WHEN OTHERS THEN
10:40:47 1744  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1745  	       RAISE CAN_NOT_CREATE_LICENSE;
10:40:47 1746  	 END;
10:40:47 1747  
10:40:47 1748  	 -- Update original gift certificate
10:40:47 1749  	 BEGIN
10:40:47 1750  	   PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_GIFT_CERTIFICATE(
10:40:47 1751  	     in_gift_certificate_id	   => var_gift_certificate_id,
10:40:47 1752  	     in_updated_by		   => in_created_by,
10:40:47 1753  	     in_redeemer_group_id	   => in_group_id,
10:40:47 1754  	     in_finalized_invoice_id	   => var_invoice_id,
10:40:47 1755  	     in_redemption_date 	   => var_date,
10:40:47 1756  	     in_redeemer_address_id	   => in_redeemer_address_id,
10:40:47 1757  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_FINALIZED
10:40:47 1758  	   );
10:40:47 1759  	   EXCEPTION
10:40:47 1760  	     WHEN OTHERS THEN
10:40:47 1761  	       EXCEPTION_MESSAGE := SQLERRM;
10:40:47 1762  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
10:40:47 1763  	 END;
10:40:47 1764  
10:40:47 1765  EXCEPTION
10:40:47 1766  WHEN LIMIT_REACHED THEN
10:40:47 1767  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.CONFLICT_ERROR,
10:40:47 1768  	   SPROC_NAME, 'Limit reached for given offer chain');
10:40:47 1769  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
10:40:47 1770  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.CONFLICT_ERROR,
10:40:47 1771  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
10:40:47 1772  WHEN GIFT_CERTIFICATE_REDEEMED THEN
10:40:47 1773  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1774  	   SPROC_NAME, 'Gift certificate already redeemed');
10:40:47 1775  WHEN GIFT_CERTIFICATE_EXPIRED THEN
10:40:47 1776  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 1777  	   SPROC_NAME, 'Gift certificate expired');
10:40:47 1778  WHEN GIFT_CERT_IS_FINALIZED THEN
10:40:47 1779  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1780  	   SPROC_NAME, 'Gift certificate is finalized');
10:40:47 1781  WHEN GIFT_CERT_IS_REFUNDED THEN
10:40:47 1782  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1783  	   SPROC_NAME, 'Gift certificate has been refunded');
10:40:47 1784  WHEN BAD_GROUP_ID THEN
10:40:47 1785  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1786  	   SPROC_NAME, 'No such account with given group id');
10:40:47 1787  WHEN OC_TO_REDEEM_NOT_FOUND THEN
10:40:47 1788  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1789  	   SPROC_NAME, 'Offer chain to redeem not found');
10:40:47 1790  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
10:40:47 1791  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1792  	   SPROC_NAME, 'No such gift certificate code');
10:40:47 1793  WHEN CAN_NOT_CREATE_LICENSE THEN
10:40:47 1794  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1795  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
10:40:47 1796  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
10:40:47 1797  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:47 1798  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
10:40:47 1799  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
10:40:47 1800  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1801  	   SPROC_NAME, 'Purchase invoice is not closed');
10:40:47 1802  WHEN PURCHASE_INVOICES_NOT_PAID THEN
10:40:47 1803  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:47 1804  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
10:40:47 1805  WHEN OTHERS THEN
10:40:47 1806  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1807  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1808  END;
10:40:47 1809  
10:40:47 1810  /******************************************************************************/
10:40:47 1811  
10:40:47 1812  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
10:40:47 1813  /*
10:40:47 1814  Throws exceptions:
10:40:47 1815  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1816  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1817  */
10:40:47 1818  	 in_code	IN VARCHAR,
10:40:47 1819  	 out_result_set OUT SYS_REFCURSOR
10:40:47 1820  ) AS
10:40:47 1821  -- VARIABLES
10:40:47 1822  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
10:40:47 1823  temp_gift_certificate_id NUMBER;
10:40:47 1824  -- EXCEPTIONS
10:40:47 1825  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
10:40:47 1826  BEGIN
10:40:47 1827  
10:40:47 1828  	 BEGIN
10:40:47 1829  	   SELECT
10:40:47 1830  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
10:40:47 1831  	   FROM
10:40:47 1832  	     GIFT_CERTIFICATE
10:40:47 1833  	   WHERE
10:40:47 1834  	     GIFT_CERTIFICATE.CODE = in_code;
10:40:47 1835  	   EXCEPTION
10:40:47 1836  	     WHEN NO_DATA_FOUND THEN
10:40:47 1837  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
10:40:47 1838  	 END;
10:40:47 1839  
10:40:47 1840  	 -- Select all gift certificates with given code
10:40:47 1841  	 OPEN out_result_set FOR
10:40:47 1842  	 SELECT
10:40:47 1843  	   gc.EXPIRATION_DATE,
10:40:47 1844  	   ch.name,
10:40:47 1845  	   ch.id,
10:40:47 1846  	   gc.sender_email,
10:40:47 1847  	   gc.sender_name,
10:40:47 1848  	   gc.recipient_email,
10:40:47 1849  	   gc.recipient_name,
10:40:47 1850  	   gc.purchase_date,
10:40:47 1851  	   gc.redemption_date,
10:40:47 1852  	   gc.purchaser_group_id,
10:40:47 1853  	   gc.redeemer_group_id,
10:40:47 1854  	   gc.gift_message,
10:40:47 1855  	   ocmd.value redemption_offer_chain_ids,
10:40:47 1856  	   s.offer_chain_id redeemed_offer_chain_id,
10:40:47 1857  	   gc.recipient_notify_date,
10:40:47 1858  	   gc.gift_certificate_status_id,
10:40:47 1859  	   gc.purchase_invoice_id,
10:40:47 1860  	   gc.finalized_invoice_id,
10:40:47 1861  	   gccr.reference_code
10:40:47 1862  	 FROM
10:40:47 1863  	   GIFT_CERTIFICATE gc
10:40:47 1864  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:40:47 1865  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
10:40:47 1866  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
10:40:47 1867  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
10:40:47 1868  	 LEFT JOIN GC_CAMPAIGN_AND_REF gccr ON gc.id = gccr.GC_ID
10:40:47 1869  	 WHERE
10:40:47 1870  	   gc.code = in_code;
10:40:47 1871  
10:40:47 1872  EXCEPTION
10:40:47 1873  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
10:40:47 1874  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1875  	   SPROC_NAME, 'No such gift certificate');
10:40:47 1876  
10:40:47 1877  WHEN OTHERS THEN
10:40:47 1878  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1879  	   SPROC_NAME, 'Unknown Error', SQLERRM);
10:40:47 1880  END;
10:40:47 1881  
10:40:47 1882  /******************************************************************************/
10:40:47 1883  
10:40:47 1884  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:40:47 1885  /*
10:40:47 1886  Throws exceptions:
10:40:47 1887  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1888  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:47 1889  */
10:40:47 1890  	 in_gift_certificate_id IN NUMBER,
10:40:47 1891  	 out_result_set 	OUT SYS_REFCURSOR
10:40:47 1892  ) AS
10:40:47 1893  -- VARIABLES
10:40:47 1894  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
10:40:47 1895  temp_gift_certificate_id NUMBER;
10:40:47 1896  -- EXCEPTIONS
10:40:47 1897  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:40:47 1898  BEGIN
10:40:47 1899  
10:40:47 1900  	 BEGIN
10:40:47 1901  	   SELECT
10:40:47 1902  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
10:40:47 1903  	   FROM
10:40:47 1904  	     GIFT_CERTIFICATE
10:40:47 1905  	   WHERE
10:40:47 1906  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:40:47 1907  	   EXCEPTION
10:40:47 1908  	     WHEN NO_DATA_FOUND THEN
10:40:47 1909  	       RAISE BAD_GIFT_CERTIFICATE_ID;
10:40:47 1910  	 END;
10:40:47 1911  
10:40:47 1912  	 -- Select all gift certificates with given code
10:40:47 1913  	 OPEN out_result_set FOR
10:40:47 1914  	 SELECT
10:40:47 1915  	   gc.EXPIRATION_DATE,
10:40:47 1916  	   ch.name,
10:40:47 1917  	   ch.id,
10:40:47 1918  	   gc.sender_email,
10:40:47 1919  	   gc.sender_name,
10:40:47 1920  	   gc.recipient_email,
10:40:47 1921  	   gc.recipient_name,
10:40:47 1922  	   gc.purchase_date,
10:40:47 1923  	   gc.redemption_date,
10:40:47 1924  	   gc.purchaser_group_id,
10:40:47 1925  	   gc.redeemer_group_id,
10:40:47 1926  	   gc.code,
10:40:47 1927  	   gc.gift_message,
10:40:47 1928  	   gc.recipient_notify_date
10:40:47 1929  	 FROM
10:40:47 1930  	   GIFT_CERTIFICATE gc
10:40:47 1931  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:40:47 1932  	 WHERE
10:40:47 1933  	   gc.id = in_gift_certificate_id;
10:40:47 1934  
10:40:47 1935  EXCEPTION
10:40:47 1936  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:40:47 1937  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1938  	   SPROC_NAME, 'No such gift certificate');
10:40:47 1939  WHEN OTHERS THEN
10:40:47 1940  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1941  	   SPROC_NAME, 'Unknown Error', SQLERRM);
10:40:47 1942  END GET_GIFT_CERTIFICATE_BY_ID;
10:40:47 1943  
10:40:47 1944  /******************************************************************************/
10:40:47 1945  
10:40:47 1946  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
10:40:47 1947  	 in_group_id		IN  NUMBER,
10:40:47 1948  	 out_instrument_type_id OUT NUMBER,
10:40:47 1949  	 out_instrument_id	OUT NUMBER
10:40:47 1950  ) AS
10:40:47 1951  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
10:40:47 1952  BEGIN
10:40:47 1953  
10:40:47 1954  	 SELECT
10:40:47 1955  	   ACCOUNT.INSTRUMENT_TYPE_ID,
10:40:47 1956  	   ACCOUNT.INSTRUMENT_ID
10:40:47 1957  	   into
10:40:47 1958  	   out_instrument_type_id,
10:40:47 1959  	   out_instrument_id
10:40:47 1960  	 FROM
10:40:47 1961  	   ACCOUNT
10:40:47 1962  	 WHERE
10:40:47 1963  	   ACCOUNT.GROUP_ID = in_group_id;
10:40:47 1964  
10:40:47 1965  EXCEPTION
10:40:47 1966  WHEN NO_DATA_FOUND THEN
10:40:47 1967  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 1968  	   SPROC_NAME, 'Bad group id');
10:40:47 1969  WHEN OTHERS THEN
10:40:47 1970  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 1971  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 1972  END GET_DEF_FINANCIAL_INSTRUMENT;
10:40:47 1973  
10:40:47 1974  /******************************************************************************/
10:40:47 1975  
10:40:47 1976  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
10:40:47 1977  	 in_group_id	       IN NUMBER,
10:40:47 1978  	 in_instrument_type_id IN NUMBER,
10:40:47 1979  	 in_instrument_id      IN NUMBER,
10:40:47 1980  	 in_updated_by	       IN VARCHAR2
10:40:47 1981  ) AS
10:40:47 1982  -- VARIABLES
10:40:47 1983  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
10:40:47 1984  var_account_id	      NUMBER;
10:40:47 1985  -- EXCEPTIONS
10:40:47 1986  BAD_GROUP_ID	      EXCEPTION;
10:40:47 1987  BAD_CREDIT_CARD	      EXCEPTION;
10:40:47 1988  BAD_PAYPAL	      EXCEPTION;
10:40:47 1989  BAD_INSTRUMENT_TYPE    EXCEPTION;
10:40:47 1990  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 1991  BEGIN
10:40:47 1992  
10:40:47 1993  	 -- get account id
10:40:47 1994  	 BEGIN
10:40:47 1995  	   SELECT
10:40:47 1996  	     ACCOUNT.ID into var_account_id
10:40:47 1997  	   FROM
10:40:47 1998  	     ACCOUNT
10:40:47 1999  	   WHERE
10:40:47 2000  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 2001  	   EXCEPTION
10:40:47 2002  	     WHEN NO_DATA_FOUND THEN
10:40:47 2003  	       RAISE BAD_GROUP_ID;
10:40:47 2004  	 END;
10:40:47 2005  
10:40:47 2006  	 -- Chech that given instrument exists
10:40:47 2007  	 IF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47 2008  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2009  	     RAISE BAD_CREDIT_CARD;
10:40:47 2010  	   END IF;
10:40:47 2011  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47 2012  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2013  	     RAISE BAD_PAYPAL;
10:40:47 2014  	   END IF;
10:40:47 2015  	 ELSE
10:40:47 2016  	   RAISE BAD_INSTRUMENT_TYPE;
10:40:47 2017  	 END IF;
10:40:47 2018  
10:40:47 2019  	 -- update account information
10:40:47 2020  	 PROCS_ACCOUNT_CRU_V22.UPDATE_ACCOUNT(
10:40:47 2021  	   in_account_id	 => var_account_id,
10:40:47 2022  	   in_updated_by	 => in_updated_by,
10:40:47 2023  	   in_instrument_type_id => in_instrument_type_id,
10:40:47 2024  	   in_instrument_id	 => in_instrument_id
10:40:47 2025  	 );
10:40:47 2026  
10:40:47 2027  EXCEPTION
10:40:47 2028  WHEN BAD_GROUP_ID THEN
10:40:47 2029  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2030  	   SPROC_NAME, 'No such account');
10:40:47 2031  WHEN BAD_CREDIT_CARD THEN
10:40:47 2032  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2033  	   SPROC_NAME, 'Could not find credit card with given ID');
10:40:47 2034  WHEN BAD_PAYPAL THEN
10:40:47 2035  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2036  	   SPROC_NAME, 'Could not find paypal with given ID');
10:40:47 2037  WHEN BAD_INSTRUMENT_TYPE THEN
10:40:47 2038  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2039  	   SPROC_NAME, 'Bad instrument type id');
10:40:47 2040  WHEN OTHERS THEN
10:40:47 2041  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2042  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2043  END SET_DEF_FINANCIAL_INSTRUMENT;
10:40:47 2044  
10:40:47 2045  /******************************************************************************/
10:40:47 2046  
10:40:47 2047  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
10:40:47 2048  	 in_group_id IN NUMBER
10:40:47 2049  ) AS
10:40:47 2050  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
10:40:47 2051  -- VARIABLES
10:40:47 2052  var_account_id NUMBER;
10:40:47 2053  -- EXCEPTIONS
10:40:47 2054  BAD_GROUP_ID	 EXCEPTION;
10:40:47 2055  EXCEPTION_MESSAGE VARCHAR2(1024);
10:40:47 2056  BEGIN
10:40:47 2057  
10:40:47 2058  	 BEGIN
10:40:47 2059  	   SELECT
10:40:47 2060  	     ACCOUNT.ID into var_account_id
10:40:47 2061  	   FROM
10:40:47 2062  	     ACCOUNT
10:40:47 2063  	   WHERE
10:40:47 2064  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 2065  	   EXCEPTION
10:40:47 2066  	     WHEN NO_DATA_FOUND THEN
10:40:47 2067  	       RAISE BAD_GROUP_ID;
10:40:47 2068  	 END;
10:40:47 2069  
10:40:47 2070  	 PROCS_ACCOUNT_CRU_V22.UPDATE_DEF_FIN_INSTRUMENT(
10:40:47 2071  	   in_account_id => var_account_id,
10:40:47 2072  	   in_instrument_type_id => NULL,
10:40:47 2073  	   in_instrument_id => NULL,
10:40:47 2074  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
10:40:47 2075  	 );
10:40:47 2076  
10:40:47 2077  EXCEPTION
10:40:47 2078  WHEN BAD_GROUP_ID THEN
10:40:47 2079  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2080  	   SPROC_NAME, 'No such group id');
10:40:47 2081  WHEN OTHERS THEN
10:40:47 2082  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2083  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2084  END DEL_DEF_FINANCIAL_INSTRUMENT;
10:40:47 2085  
10:40:47 2086  /******************************************************************************/
10:40:47 2087  
10:40:47 2088  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:47 2089  	 in_credit_card_id IN  NUMBER,
10:40:47 2090  	 out_result_set    OUT SYS_REFCURSOR
10:40:47 2091  ) AS
10:40:47 2092  -- VARIABLES
10:40:47 2093  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
10:40:47 2094  temp_cc_count NUMBER;
10:40:47 2095  
10:40:47 2096  -- EXCEPTIONS
10:40:47 2097  BAD_CREDIT_CARD_ID EXCEPTION;
10:40:47 2098  BEGIN
10:40:47 2099  
10:40:47 2100  	 -- Check that credit card exists
10:40:47 2101  	 SELECT
10:40:47 2102  	   COUNT(*) into temp_cc_count
10:40:47 2103  	 FROM
10:40:47 2104  	   CREDIT_CARD
10:40:47 2105  	 WHERE
10:40:47 2106  	   CREDIT_CARD.ID = in_credit_card_id;
10:40:47 2107  	 IF temp_cc_count = 0 THEN
10:40:47 2108  	   RAISE BAD_CREDIT_CARD_ID;
10:40:47 2109  	 END IF;
10:40:47 2110  
10:40:47 2111  	 -- Get data
10:40:47 2112  	 OPEN out_result_set FOR
10:40:47 2113  	 SELECT
10:40:47 2114  	   CREDIT_CARD.ID,
10:40:47 2115  	   CREDIT_CARD.ACCOUNT_ID,
10:40:47 2116  	   CREDIT_CARD.INSTRUMENT_NAME,
10:40:47 2117  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
10:40:47 2118  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
10:40:47 2119  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
10:40:47 2120  	   CREDIT_CARD.STATE,
10:40:47 2121  	   CREDIT_CARD.CITY,
10:40:47 2122  	   CREDIT_CARD.POSTAL_CODE,
10:40:47 2123  	   CREDIT_CARD.COUNTRY,
10:40:47 2124  	   CREDIT_CARD.LAST_FOUR_CC,
10:40:47 2125  	   CREDIT_CARD.EXPIRATION_DATE,
10:40:47 2126  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
10:40:47 2127  	   CREDIT_CARD.SECRET_TOKEN,
10:40:47 2128  	   CREDIT_CARD.CREATE_DATE,
10:40:47 2129  	   CREDIT_CARD.CREATED_BY,
10:40:47 2130  	   CREDIT_CARD.UPDATE_DATE,
10:40:47 2131  	   CREDIT_CARD.UPDATED_BY,
10:40:47 2132  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
10:40:47 2133  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
10:40:47 2134  	   CREDIT_CARD.PRIVATE_LAST_NAME,
10:40:47 2135  	       CREDIT_CARD.CHASE_PROFILE_ID
10:40:47 2136  	 FROM
10:40:47 2137  	   CREDIT_CARD
10:40:47 2138  	 WHERE
10:40:47 2139  	   CREDIT_CARD.ID = in_credit_card_id;
10:40:47 2140  
10:40:47 2141  EXCEPTION
10:40:47 2142  WHEN BAD_CREDIT_CARD_ID THEN
10:40:47 2143  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2144  	   SPROC_NAME, 'No such credit card');
10:40:47 2145  WHEN OTHERS THEN
10:40:47 2146  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2147  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2148  END GET_CREDIT_CARD_BY_ID;
10:40:47 2149  
10:40:47 2150  /******************************************************************************/
10:40:47 2151  
10:40:47 2152  PROCEDURE GET_PAYPAL_BY_ID (
10:40:47 2153  	 in_paypal_id	IN  NUMBER,
10:40:47 2154  	 out_result_set OUT SYS_REFCURSOR
10:40:47 2155  ) AS
10:40:47 2156  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
10:40:47 2157  -- VARIABLES
10:40:47 2158  temp_pp_count NUMBER;
10:40:47 2159  -- EXCEPTIONS
10:40:47 2160  BAD_PAYPAL_ID EXCEPTION;
10:40:47 2161  BEGIN
10:40:47 2162  
10:40:47 2163  	 -- Check that credit card exists
10:40:47 2164  	 SELECT
10:40:47 2165  	   COUNT(*) into temp_pp_count
10:40:47 2166  	 FROM
10:40:47 2167  	   PAYPAL
10:40:47 2168  	 WHERE
10:40:47 2169  	   PAYPAL.ID = in_paypal_id;
10:40:47 2170  	 IF temp_pp_count = 0 THEN
10:40:47 2171  	   RAISE BAD_PAYPAL_ID;
10:40:47 2172  	 END IF;
10:40:47 2173  
10:40:47 2174  	 OPEN out_result_set FOR
10:40:47 2175  	 SELECT
10:40:47 2176  	   ID,
10:40:47 2177  	   ACCOUNT_ID,
10:40:47 2178  	   INSTRUMENT_NAME,
10:40:47 2179  	   PRIVATE_EMAIL_ADDRESS,
10:40:47 2180  	   CREATE_DATE,
10:40:47 2181  	   CREATED_BY,
10:40:47 2182  	   UPDATE_DATE,
10:40:47 2183  	   UPDATED_BY,
10:40:47 2184  	   PAYPAL_STATUS_ID,
10:40:47 2185  	   PRIVATE_STREET_ADDRESS,
10:40:47 2186  	   PRIVATE_STREET_ADDRESS2,
10:40:47 2187  	   STATE,
10:40:47 2188  	   CITY,
10:40:47 2189  	   POSTAL_CODE,
10:40:47 2190  	   COUNTRY,
10:40:47 2191  	   EXPIRATION_DATE,
10:40:47 2192  	   SECRET_TOKEN
10:40:47 2193  	 FROM
10:40:47 2194  	   PAYPAL
10:40:47 2195  	 WHERE
10:40:47 2196  	   ID = in_paypal_id;
10:40:47 2197  
10:40:47 2198  EXCEPTION
10:40:47 2199  WHEN BAD_PAYPAL_ID THEN
10:40:47 2200  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2201  	   SPROC_NAME, 'No such paypal');
10:40:47 2202  WHEN OTHERS THEN
10:40:47 2203  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2204  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2205  END GET_PAYPAL_BY_ID;
10:40:47 2206  
10:40:47 2207  /******************************************************************************/
10:40:47 2208  
10:40:47 2209  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
10:40:47 2210  /*
10:40:47 2211  	 Returns GLOBAL_CONSTANTS_V22.TRUE if system can disable credit card
10:40:47 2212  	 GLOBAL_CONSTANTS_V22.FALSE else
10:40:47 2213  */
10:40:47 2214  	 in_credit_card_id NUMBER
10:40:47 2215  ) RETURN NUMBER AS
10:40:47 2216  BEGIN
10:40:47 2217  	 -- STUB
10:40:47 2218  	 RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2219  END F_CAN_DISABLE_CREDIT_CARD;
10:40:47 2220  
10:40:47 2221  /******************************************************************************/
10:40:47 2222  
10:40:47 2223  PROCEDURE GET_PURCHASED_GCERTIFICATES (
10:40:47 2224  	 in_group_id	IN NUMBER,
10:40:47 2225  	 out_result_set OUT SYS_REFCURSOR
10:40:47 2226  ) AS
10:40:47 2227  -- VARIABLES
10:40:47 2228  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
10:40:47 2229  var_account_id NUMBER;
10:40:47 2230  -- EXCEPTIONS
10:40:47 2231  BAD_GROUP_ID EXCEPTION;
10:40:47 2232  BEGIN
10:40:47 2233  
10:40:47 2234  	 BEGIN
10:40:47 2235  	   SELECT
10:40:47 2236  	     ACCOUNT.ID into var_account_id
10:40:47 2237  	   FROM
10:40:47 2238  	     ACCOUNT
10:40:47 2239  	   WHERE
10:40:47 2240  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:47 2241  	   EXCEPTION
10:40:47 2242  	     WHEN NO_DATA_FOUND THEN
10:40:47 2243  	       RAISE BAD_GROUP_ID;
10:40:47 2244  	 END;
10:40:47 2245  
10:40:47 2246  	 OPEN out_result_set FOR
10:40:47 2247  	 SELECT
10:40:47 2248  	   GIFT_CERTIFICATE.CODE,
10:40:47 2249  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
10:40:47 2250  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
10:40:47 2251  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:40:47 2252  	   GIFT_CERTIFICATE.SENDER_EMAIL,
10:40:47 2253  	   GIFT_CERTIFICATE.SENDER_NAME,
10:40:47 2254  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:40:47 2255  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
10:40:47 2256  	   GIFT_CERTIFICATE.PURCHASE_DATE,
10:40:47 2257  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
10:40:47 2258  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
10:40:47 2259  	 FROM
10:40:47 2260  	   GIFT_CERTIFICATE
10:40:47 2261  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:47 2262  	 WHERE
10:40:47 2263  	   ROWNUM <= 100 AND
10:40:47 2264  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:40:47 2265  
10:40:47 2266  EXCEPTION
10:40:47 2267  WHEN BAD_GROUP_ID THEN
10:40:47 2268  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2269  	   SPROC_NAME, 'No such group id');
10:40:47 2270  WHEN OTHERS THEN
10:40:47 2271  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2272  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2273  END GET_PURCHASED_GCERTIFICATES;
10:40:47 2274  
10:40:47 2275  /******************************************************************************/
10:40:47 2276  
10:40:47 2277  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:40:47 2278  	 in_gift_certificate_id IN NUMBER,
10:40:47 2279  	 in_charge_id		IN NUMBER,
10:40:47 2280  	 out_result		OUT NUMBER
10:40:47 2281  ) AS
10:40:47 2282  -- VARIABLES
10:40:47 2283  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
10:40:47 2284  var_invoice_id	    NUMBER;
10:40:47 2285  var_offer_chain_id   NUMBER;
10:40:47 2286  var_offer_chain_s_id NUMBER;
10:40:47 2287  -- EXCEPTIONS
10:40:47 2288  BAD_CHARGE_ID		 EXCEPTION;
10:40:47 2289  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
10:40:47 2290  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
10:40:47 2291  BEGIN
10:40:47 2292  
10:40:47 2293  	 BEGIN
10:40:47 2294  	   SELECT
10:40:47 2295  	     CHARGE.INVOICE_ID into var_invoice_id
10:40:47 2296  	   FROM
10:40:47 2297  	     CHARGE
10:40:47 2298  	   WHERE
10:40:47 2299  	     CHARGE.ID = in_charge_id;
10:40:47 2300  	   EXCEPTION
10:40:47 2301  	     WHEN NO_DATA_FOUND THEN
10:40:47 2302  	       RAISE BAD_CHARGE_ID;
10:40:47 2303  	 END;
10:40:47 2304  
10:40:47 2305  	 BEGIN
10:40:47 2306  	   SELECT
10:40:47 2307  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
10:40:47 2308  	   FROM
10:40:47 2309  	     GIFT_CERTIFICATE
10:40:47 2310  	   WHERE
10:40:47 2311  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:40:47 2312  	   EXCEPTION
10:40:47 2313  	     WHEN NO_DATA_FOUND THEN
10:40:47 2314  	       RAISE BAD_GIFT_CERTIFICATE_ID;
10:40:47 2315  	 END;
10:40:47 2316  
10:40:47 2317  	 BEGIN
10:40:47 2318  	   SELECT
10:40:47 2319  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
10:40:47 2320  	   FROM
10:40:47 2321  	     SUBSCRIPTION
10:40:47 2322  	   WHERE
10:40:47 2323  	     SUBSCRIPTION.ID IN (
10:40:47 2324  	       SELECT DISTINCT
10:40:47 2325  		 LICENSE.SUBSCRIPTION_ID
10:40:47 2326  	       FROM
10:40:47 2327  		 LICENSE
10:40:47 2328  	       WHERE
10:40:47 2329  		 LICENSE.INVOICE_ID = var_invoice_id
10:40:47 2330  	     );
10:40:47 2331  	   EXCEPTION
10:40:47 2332  	     WHEN NO_DATA_FOUND THEN
10:40:47 2333  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
10:40:47 2334  	 END;
10:40:47 2335  
10:40:47 2336  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
10:40:47 2337  	   out_result := GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2338  	 ELSE
10:40:47 2339  	   out_result := GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2340  	 END IF;
10:40:47 2341  
10:40:47 2342  EXCEPTION
10:40:47 2343  WHEN BAD_CHARGE_ID THEN
10:40:47 2344  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2345  	   SPROC_NAME, 'No such charge');
10:40:47 2346  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:40:47 2347  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2348  	   SPROC_NAME, 'No such gift certificate');
10:40:47 2349  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
10:40:47 2350  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2351  	   SPROC_NAME, 'Could not find subscription for given charge');
10:40:47 2352  WHEN OTHERS THEN
10:40:47 2353  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2354  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2355  END IS_GCERT_FOR_PROPER_OFFER;
10:40:47 2356  
10:40:47 2357  /******************************************************************************/
10:40:47 2358  
10:40:47 2359  FUNCTION IS_CREDIT_CARD_EXISTS (
10:40:47 2360  /*
10:40:47 2361  GLOBAL_CONSTANTS_V22.TRUE - if instrument exists
10:40:47 2362  GLOBAL_CONSTANTS_V22.FALSE - else
10:40:47 2363  */
10:40:47 2364  	 in_credit_card_id IN NUMBER
10:40:47 2365  ) RETURN NUMBER AS
10:40:47 2366  -- VARIABLES
10:40:47 2367  var_cc_count NUMBER;
10:40:47 2368  BEGIN
10:40:47 2369  	 SELECT
10:40:47 2370  	   COUNT(*) into var_cc_count
10:40:47 2371  	 FROM
10:40:47 2372  	   CREDIT_CARD
10:40:47 2373  	 WHERE
10:40:47 2374  	   CREDIT_CARD.ID = in_credit_card_id;
10:40:47 2375  
10:40:47 2376  	 IF var_cc_count = 0 THEN
10:40:47 2377  	   RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2378  	 ELSE
10:40:47 2379  	   RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2380  	 END IF;
10:40:47 2381  
10:40:47 2382  END IS_CREDIT_CARD_EXISTS;
10:40:47 2383  
10:40:47 2384  /******************************************************************************/
10:40:47 2385  
10:40:47 2386  FUNCTION IS_PAYPAL_EXISTS (
10:40:47 2387  /*
10:40:47 2388  GLOBAL_CONSTANTS_V22.TRUE - if instrument exists
10:40:47 2389  GLOBAL_CONSTANTS_V22.FALSE - else
10:40:47 2390  */
10:40:47 2391  	 in_paypal_id IN NUMBER
10:40:47 2392  ) RETURN NUMBER AS
10:40:47 2393  -- VARIABLES
10:40:47 2394  var_pp_count NUMBER;
10:40:47 2395  BEGIN
10:40:47 2396  	 SELECT
10:40:47 2397  	   COUNT(*) into var_pp_count
10:40:47 2398  	 FROM
10:40:47 2399  	   PAYPAL
10:40:47 2400  	 WHERE
10:40:47 2401  	   PAYPAL.ID = in_paypal_id;
10:40:47 2402  
10:40:47 2403  	 IF var_pp_count = 0 THEN
10:40:47 2404  	   RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2405  	 ELSE
10:40:47 2406  	   RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2407  	 END IF;
10:40:47 2408  
10:40:47 2409  END IS_PAYPAL_EXISTS;
10:40:47 2410  
10:40:47 2411  /******************************************************************************/
10:40:47 2412  
10:40:47 2413  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
10:40:47 2414  /*
10:40:47 2415  GLOBAL_CONSTANTS_V22.TRUE - if instrument exists
10:40:47 2416  GLOBAL_CONSTANTS_V22.FALSE - else
10:40:47 2417  */
10:40:47 2418  	 in_gift_certificate_id IN NUMBER
10:40:47 2419  ) RETURN NUMBER AS
10:40:47 2420  -- VARIABLES
10:40:47 2421  var_gc_count NUMBER;
10:40:47 2422  BEGIN
10:40:47 2423  	 SELECT
10:40:47 2424  	   COUNT(*) into var_gc_count
10:40:47 2425  	 FROM
10:40:47 2426  	   GIFT_CERTIFICATE
10:40:47 2427  	 WHERE
10:40:47 2428  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
10:40:47 2429  
10:40:47 2430  	 IF var_gc_count = 0 THEN
10:40:47 2431  	   RETURN GLOBAL_CONSTANTS_V22.FALSE;
10:40:47 2432  	 ELSE
10:40:47 2433  	   RETURN GLOBAL_CONSTANTS_V22.TRUE;
10:40:47 2434  	 END IF;
10:40:47 2435  
10:40:47 2436  END IS_GIFT_CERTIFICATE_EXISTS;
10:40:47 2437  
10:40:47 2438  /******************************************************************************/
10:40:47 2439  
10:40:47 2440  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
10:40:47 2441  	 in_credit_card_id IN NUMBER,
10:40:47 2442  	 out_group_id	   OUT NUMBER
10:40:47 2443  ) AS
10:40:47 2444  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
10:40:47 2445  BEGIN
10:40:47 2446  	 SELECT
10:40:47 2447  	   ACCOUNT.GROUP_ID into out_group_id
10:40:47 2448  	 FROM
10:40:47 2449  	   CREDIT_CARD
10:40:47 2450  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
10:40:47 2451  	 WHERE
10:40:47 2452  	   CREDIT_CARD.ID = in_credit_card_id;
10:40:47 2453  EXCEPTION
10:40:47 2454  WHEN NO_DATA_FOUND THEN
10:40:47 2455  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2456  	   SPROC_NAME, 'No such credit card');
10:40:47 2457  WHEN OTHERS THEN
10:40:47 2458  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2459  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2460  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
10:40:47 2461  
10:40:47 2462  /******************************************************************************/
10:40:47 2463  
10:40:47 2464  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
10:40:47 2465  	 in_paypal_id IN NUMBER,
10:40:47 2466  	 out_group_id OUT NUMBER
10:40:47 2467  ) AS
10:40:47 2468  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
10:40:47 2469  BEGIN
10:40:47 2470  	 SELECT
10:40:47 2471  	   ACCOUNT.GROUP_ID into out_group_id
10:40:47 2472  	 FROM
10:40:47 2473  	   PAYPAL
10:40:47 2474  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
10:40:47 2475  	 WHERE
10:40:47 2476  	   PAYPAL.ID = in_paypal_id;
10:40:47 2477  EXCEPTION
10:40:47 2478  WHEN NO_DATA_FOUND THEN
10:40:47 2479  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2480  	   SPROC_NAME, 'No such paypal');
10:40:47 2481  WHEN OTHERS THEN
10:40:47 2482  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2483  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2484  END GET_GROUP_ID_BY_PAYPAL_ID;
10:40:47 2485  
10:40:47 2486  /******************************************************************************/
10:40:47 2487  
10:40:47 2488  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
10:40:47 2489  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
10:40:47 2490  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
10:40:47 2491  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
10:40:47 2492  ) AS
10:40:47 2493  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
10:40:47 2494  -- EXCEPTIONS
10:40:47 2495  BAD_CREDIT_CARD_ID     EXCEPTION;
10:40:47 2496  BAD_STATUS_ID	      EXCEPTION;
10:40:47 2497  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 2498  BEGIN
10:40:47 2499  
10:40:47 2500  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V22.CREDIT_CARD_ACTIVE
10:40:47 2501  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V22.CREDIT_CARD_INVALID
10:40:47 2502  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V22.CREDIT_CARD_DISABLED
10:40:47 2503  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V22.CREDIT_CARD_EXPIRED THEN
10:40:47 2504  	   RAISE BAD_STATUS_ID;
10:40:47 2505  	 END IF;
10:40:47 2506  
10:40:47 2507  	 PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_CREDIT_CARD(
10:40:47 2508  	   in_credit_card_id	    => in_credit_card_id,
10:40:47 2509  	   in_updated_by	    => in_updated_by,
10:40:47 2510  	   in_credit_card_status_id => in_credit_card_status_id
10:40:47 2511  	 );
10:40:47 2512  
10:40:47 2513  	 IF SQL%ROWCOUNT = 0 THEN
10:40:47 2514  	   RAISE BAD_CREDIT_CARD_ID;
10:40:47 2515  	 END IF;
10:40:47 2516  
10:40:47 2517  EXCEPTION
10:40:47 2518  WHEN BAD_CREDIT_CARD_ID THEN
10:40:47 2519  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2520  	   SPROC_NAME, 'No such credit card');
10:40:47 2521  WHEN BAD_STATUS_ID THEN
10:40:47 2522  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2523  	   SPROC_NAME, 'Bad credit card status id');
10:40:47 2524  WHEN OTHERS THEN
10:40:47 2525  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2526  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2527  END UPDATE_CREDIT_CARD_STATUS;
10:40:47 2528  
10:40:47 2529  /******************************************************************************/
10:40:47 2530  
10:40:47 2531  PROCEDURE UPDATE_PAYPAL_STATUS (
10:40:47 2532  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
10:40:47 2533  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
10:40:47 2534  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
10:40:47 2535  ) AS
10:40:47 2536  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
10:40:47 2537  -- EXCEPTIONS
10:40:47 2538  BAD_PAYPAL_ID	      EXCEPTION;
10:40:47 2539  BAD_STATUS_ID	      EXCEPTION;
10:40:47 2540  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:47 2541  BEGIN
10:40:47 2542  
10:40:47 2543  	 IF in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_ACTIVE
10:40:47 2544  	   AND in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_INACTIVE
10:40:47 2545  	   AND in_paypal_status_id != GLOBAL_STATUSES_V22.PAYPAL_FROZEN THEN
10:40:47 2546  	   RAISE BAD_STATUS_ID;
10:40:47 2547  	 END IF;
10:40:47 2548  
10:40:47 2549  	 PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_PAYPAL(
10:40:47 2550  	   in_paypal_id        => in_paypal_id,
10:40:47 2551  	   in_paypal_status_id => in_paypal_status_id,
10:40:47 2552  	   in_updated_by       => in_updated_by
10:40:47 2553  	 );
10:40:47 2554  
10:40:47 2555  	 IF SQL%ROWCOUNT = 0 THEN
10:40:47 2556  	   RAISE BAD_PAYPAL_ID;
10:40:47 2557  	 END IF;
10:40:47 2558  
10:40:47 2559  EXCEPTION
10:40:47 2560  WHEN BAD_PAYPAL_ID THEN
10:40:47 2561  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2562  	   SPROC_NAME, 'No such paypal');
10:40:47 2563  WHEN BAD_STATUS_ID THEN
10:40:47 2564  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2565  	   SPROC_NAME, 'Bad paypal status id');
10:40:47 2566  WHEN OTHERS THEN
10:40:47 2567  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2568  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2569  END UPDATE_PAYPAL_STATUS;
10:40:47 2570  
10:40:47 2571  /******************************************************************************/
10:40:47 2572  
10:40:47 2573  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
10:40:47 2574  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
10:40:47 2575  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
10:40:47 2576  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
10:40:47 2577  ) AS
10:40:47 2578  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
10:40:47 2579  -- EXCEPTIONS
10:40:47 2580  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
10:40:47 2581  BAD_STATUS_ID	       EXCEPTION;
10:40:47 2582  EXCEPTION_MESSAGE       VARCHAR2(1024);
10:40:47 2583  BEGIN
10:40:47 2584  
10:40:47 2585  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_ACTIVE
10:40:47 2586  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_FINALIZED THEN
10:40:47 2587  	   RAISE BAD_STATUS_ID;
10:40:47 2588  	 END IF;
10:40:47 2589  
10:40:47 2590  	 PROCS_FIN_INSTRUMENTS_CRU_V22.UPDATE_GIFT_CERTIFICATE(
10:40:47 2591  	   in_gift_certificate_id	 => in_gift_certificate_id,
10:40:47 2592  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
10:40:47 2593  	   in_updated_by		 => in_updated_by
10:40:47 2594  	 );
10:40:47 2595  
10:40:47 2596  	 IF SQL%ROWCOUNT = 0 THEN
10:40:47 2597  	   RAISE BAD_GIFT_CERTIFICATE_ID;
10:40:47 2598  	 END IF;
10:40:47 2599  
10:40:47 2600  EXCEPTION
10:40:47 2601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
10:40:47 2602  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2603  	   SPROC_NAME, 'No such gift certificate');
10:40:47 2604  WHEN BAD_STATUS_ID THEN
10:40:47 2605  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2606  	   SPROC_NAME, 'Bad paypal status id');
10:40:47 2607  WHEN OTHERS THEN
10:40:47 2608  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2609  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2610  END UPDATE_GIFT_CERTIFICATE_STATUS;
10:40:47 2611  
10:40:47 2612  /******************************************************************************/
10:40:47 2613  
10:40:47 2614  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:47 2615  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:47 2616  	 out_result_set OUT SYS_REFCURSOR
10:40:47 2617  ) AS
10:40:47 2618  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
10:40:47 2619  -- VARIABLES
10:40:47 2620  temp_invoice_id NUMBER;
10:40:47 2621  -- EXCEPTIONS
10:40:47 2622  BAD_INVOICE_ID EXCEPTION;
10:40:47 2623  BEGIN
10:40:47 2624  
10:40:47 2625  	 BEGIN
10:40:47 2626  	   SELECT
10:40:47 2627  	     I.ID into temp_invoice_id
10:40:47 2628  	   FROM
10:40:47 2629  	     INVOICE I
10:40:47 2630  	   WHERE
10:40:47 2631  	     I.ID = in_invoice_id;
10:40:47 2632  	   EXCEPTION
10:40:47 2633  	     WHEN NO_DATA_FOUND THEN
10:40:47 2634  	       RAISE BAD_INVOICE_ID;
10:40:47 2635  	 END;
10:40:47 2636  
10:40:47 2637  	 OPEN out_result_set FOR
10:40:47 2638  	   SELECT
10:40:47 2639  	     gc.EXPIRATION_DATE,
10:40:47 2640  	     ch.name,
10:40:47 2641  	     ch.id offer_chain_id,
10:40:47 2642  	     gc.sender_email,
10:40:47 2643  	     gc.sender_name,
10:40:47 2644  	     gc.recipient_email,
10:40:47 2645  	     gc.recipient_name,
10:40:47 2646  	     gc.purchase_date,
10:40:47 2647  	     gc.redemption_date,
10:40:47 2648  	     gc.purchaser_group_id,
10:40:47 2649  	     gc.redeemer_group_id,
10:40:47 2650  	     gc.code,
10:40:47 2651  	     gc.gift_message,
10:40:47 2652  	     gc.recipient_notify_date,
10:40:47 2653  	     gc.id
10:40:47 2654  	   FROM
10:40:47 2655  	     GIFT_CERTIFICATE gc
10:40:47 2656  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
10:40:47 2657  	   WHERE
10:40:47 2658  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
10:40:47 2659  
10:40:47 2660  EXCEPTION
10:40:47 2661  WHEN BAD_INVOICE_ID THEN
10:40:47 2662  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2663  	   SPROC_NAME, 'No such invoice');
10:40:47 2664  WHEN OTHERS THEN
10:40:47 2665  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2666  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2667  END GET_GC_BY_PURCH_INVOICE_ID;
10:40:47 2668  
10:40:47 2669  
10:40:47 2670  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:40:47 2671  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:47 2672  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:40:47 2673  ) AS
10:40:47 2674  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
10:40:47 2675  -- VARIABLES
10:40:47 2676  temp_invoice_id NUMBER;
10:40:47 2677  -- EXCEPTIONS
10:40:47 2678  BAD_INVOICE_ID EXCEPTION;
10:40:47 2679  BEGIN
10:40:47 2680  
10:40:47 2681  	 BEGIN
10:40:47 2682  	   SELECT
10:40:47 2683  	     I.ID into temp_invoice_id
10:40:47 2684  	   FROM
10:40:47 2685  	     INVOICE I
10:40:47 2686  	   WHERE
10:40:47 2687  	     I.ID = in_invoice_id;
10:40:47 2688  	   EXCEPTION
10:40:47 2689  	     WHEN NO_DATA_FOUND THEN
10:40:47 2690  	       RAISE BAD_INVOICE_ID;
10:40:47 2691  	 END;
10:40:47 2692  
10:40:47 2693  	 BEGIN
10:40:47 2694  	   SELECT
10:40:47 2695  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
10:40:47 2696  	   FROM
10:40:47 2697  	     GIFT_CERTIFICATE
10:40:47 2698  	   WHERE
10:40:47 2699  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
10:40:47 2700  	   EXCEPTION
10:40:47 2701  	     WHEN NO_DATA_FOUND THEN
10:40:47 2702  	       out_gift_certificate_id := NULL;
10:40:47 2703  	 END;
10:40:47 2704  
10:40:47 2705  EXCEPTION
10:40:47 2706  WHEN BAD_INVOICE_ID THEN
10:40:47 2707  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2708  	   SPROC_NAME, 'No such invoice');
10:40:47 2709  WHEN OTHERS THEN
10:40:47 2710  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2711  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2712  END GET_GC_ID_BY_PURCH_INVOICE_ID;
10:40:47 2713  
10:40:47 2714  /******************************************************************************/
10:40:47 2715  
10:40:47 2716  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
10:40:47 2717  	 in_old_fin_instrument_id   IN NUMBER,
10:40:47 2718  	 in_old_fin_instrument_type IN NUMBER,
10:40:47 2719  	 in_new_fin_instrument_id   IN NUMBER,
10:40:47 2720  	 in_new_fin_instrument_type IN NUMBER,
10:40:47 2721  	 in_updated_by		    IN VARCHAR2
10:40:47 2722  ) AS
10:40:47 2723  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
10:40:47 2724  -- variables
10:40:47 2725  temp_out_transaction_id NUMBER;
10:40:47 2726  temp_out_charge_id      NUMBER;
10:40:47 2727  var_accounts_count      NUMBER;
10:40:47 2728  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
10:40:47 2729  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
10:40:47 2730  -- EXCEPTIONS
10:40:47 2731  BAD_OLD_CC   EXCEPTION;
10:40:47 2732  BAD_OLD_PP   EXCEPTION;
10:40:47 2733  BAD_OLD_TYPE EXCEPTION;
10:40:47 2734  BAD_NEW_CC   EXCEPTION;
10:40:47 2735  BAD_NEW_PP   EXCEPTION;
10:40:47 2736  BAD_NEW_TYPE EXCEPTION;
10:40:47 2737  DIFFERENT_OWNERS EXCEPTION;
10:40:47 2738  BEGIN
10:40:47 2739  
10:40:47 2740  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47 2741  	   IF PROCS_FIN_INSTRUMENTS_V22.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2742  	     -- throw exception: bad old credit card
10:40:47 2743  	     RAISE BAD_OLD_CC;
10:40:47 2744  	   END IF;
10:40:47 2745  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47 2746  	   IF PROCS_FIN_INSTRUMENTS_V22.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2747  	     -- throw exception: bad old paypal
10:40:47 2748  	     RAISE BAD_OLD_PP;
10:40:47 2749  	   END IF;
10:40:47 2750  	 ELSE
10:40:47 2751  	   -- throw exception: bad instrument type
10:40:47 2752  	   RAISE BAD_OLD_TYPE;
10:40:47 2753  	 END IF;
10:40:47 2754  
10:40:47 2755  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD THEN
10:40:47 2756  	   IF PROCS_FIN_INSTRUMENTS_V22.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2757  	     -- throw exception: bad new credit card
10:40:47 2758  	     RAISE BAD_NEW_CC;
10:40:47 2759  	   END IF;
10:40:47 2760  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL THEN
10:40:47 2761  	   IF PROCS_FIN_INSTRUMENTS_V22.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:47 2762  	     -- throw exception: bad new paypal
10:40:47 2763  	     RAISE BAD_NEW_PP;
10:40:47 2764  	   END IF;
10:40:47 2765  	 ELSE
10:40:47 2766  	   -- throw exception: bad new instrument type
10:40:47 2767  	   RAISE BAD_NEW_TYPE;
10:40:47 2768  	 END IF;
10:40:47 2769  
10:40:47 2770  	 -- Check that owner of both instruments - same man
10:40:47 2771  
10:40:47 2772  	 SELECT count(1) into var_accounts_count FROM (
10:40:47 2773  	   SELECT
10:40:47 2774  	     CC.ACCOUNT_ID
10:40:47 2775  	   FROM
10:40:47 2776  	     CREDIT_CARD CC
10:40:47 2777  	   WHERE
10:40:47 2778  	     (
10:40:47 2779  	       CC.ID = in_old_fin_instrument_id
10:40:47 2780  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47 2781  	     )
10:40:47 2782  	     OR
10:40:47 2783  	     (
10:40:47 2784  	       CC.ID = in_new_fin_instrument_id
10:40:47 2785  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_CREDIT_CARD
10:40:47 2786  	     )
10:40:47 2787  	   UNION
10:40:47 2788  	   SELECT
10:40:47 2789  	     PP.ACCOUNT_ID
10:40:47 2790  	   FROM
10:40:47 2791  	     PAYPAL PP
10:40:47 2792  	   WHERE
10:40:47 2793  	     (
10:40:47 2794  	       PP.ID = in_old_fin_instrument_id
10:40:47 2795  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL
10:40:47 2796  	     )
10:40:47 2797  	     OR
10:40:47 2798  	     (
10:40:47 2799  	       PP.ID = in_new_fin_instrument_id
10:40:47 2800  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL
10:40:47 2801  	     )
10:40:47 2802  	 )
10:40:47 2803  	 WHERE
10:40:47 2804  	   account_id IS NOT NULL;
10:40:47 2805  
10:40:47 2806  	 IF (var_accounts_count > 1) THEN
10:40:47 2807  	   -- Throw exception: different owners of instruments
10:40:47 2808  	   RAISE DIFFERENT_OWNERS;
10:40:47 2809  	 END IF;
10:40:47 2810  
10:40:47 2811  	 FOR f_sub IN (
10:40:47 2812  	   select
10:40:47 2813  	     s.id
10:40:47 2814  	   FROM
10:40:47 2815  	     subscription s
10:40:47 2816  	   WHERE
10:40:47 2817  	     (
10:40:47 2818  	       s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE OR
10:40:47 2819  	       s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED OR
10:40:47 2820  	       s.subscription_status_id = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD
10:40:47 2821  	     )
10:40:47 2822  	     AND
10:40:47 2823  	     s.instrument_type_id = in_old_fin_instrument_type AND
10:40:47 2824  	     s.instrument_id = in_old_fin_instrument_id
10:40:47 2825  	 ) LOOP
10:40:47 2826  	   PROCS_SUBSCRIPTION_CRU_V22.UPDATE_SUBSCRIPTION(
10:40:47 2827  	     in_subscription_id => f_sub.id,
10:40:47 2828  	     in_instrument_type_id => in_new_fin_instrument_type,
10:40:47 2829  	     in_instrument_id => in_new_fin_instrument_id,
10:40:47 2830  	     in_updated_by => in_updated_by
10:40:47 2831  	   );
10:40:47 2832  	 END LOOP;
10:40:47 2833  
10:40:47 2834  	 FOR f_open_charge IN (
10:40:47 2835  	   select
10:40:47 2836  	     ch.id,
10:40:47 2837  	     ch.invoice_id,
10:40:47 2838  	     ch.transaction_id,
10:40:47 2839  	     ch.charge_amount
10:40:47 2840  	   FROM
10:40:47 2841  	     charge ch
10:40:47 2842  	   WHERE
10:40:47 2843  	     ch.instrument_type_id = in_old_fin_instrument_type
10:40:47 2844  	     AND ch.instrument_id = in_old_fin_instrument_id
10:40:47 2845  	     AND ch.charge_status_id = GLOBAL_STATUSES_V22.CHARGE_OPENED
10:40:47 2846  	 ) LOOP
10:40:47 2847  
10:40:47 2848  	   FOR f_pending_transaction IN (
10:40:47 2849  	     select
10:40:47 2850  	       id, transaction_amount, order_id, is_refund
10:40:47 2851  	     from
10:40:47 2852  	       transaction
10:40:47 2853  	     where
10:40:47 2854  	       id = f_open_charge.transaction_id
10:40:47 2855  	       and transaction_status_id = GLOBAL_STATUSES_V22.TRANSACTION_PENDING
10:40:47 2856  	   ) LOOP
10:40:47 2857  
10:40:47 2858  	     SELECT
10:40:47 2859  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
10:40:47 2860  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
10:40:47 2861  					     TRANSACTION_TYPE_CODE)
10:40:47 2862  	     INTO var_transaction_type
10:40:47 2863  	     FROM
10:40:47 2864  	       Transaction
10:40:47 2865  	     WHERE
10:40:47 2866  	       id = f_pending_transaction.id
10:40:47 2867  	       AND ROWNUM <= 1;
10:40:47 2868  
10:40:47 2869  	     PROCS_TRANSACTION_V22.CREATE_TRANSACTION (
10:40:47 2870  	       in_transaction_id => NULL,
10:40:47 2871  	       in_status_id  => GLOBAL_STATUSES_V22.TRANSACTION_PENDING,
10:40:47 2872  	       in_amount     => f_pending_transaction.transaction_amount,
10:40:47 2873  	       in_created_by => in_updated_by,
10:40:47 2874  	       in_order_id   => null,
10:40:47 2875  	       in_is_refund  => f_pending_transaction.is_refund,
10:40:47 2876  	       in_transaction_type_code => var_transaction_type,
10:40:47 2877  	       out_transaction_id => temp_out_transaction_id
10:40:47 2878  	     );
10:40:47 2879  
10:40:47 2880  	     PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_STATUS(
10:40:47 2881  	       in_transaction_id => f_pending_transaction.id,
10:40:47 2882  	       in_updated_by	 => in_updated_by,
10:40:47 2883  	       in_transaction_status_id  => GLOBAL_STATUSES_V22.TRANSACTION_CLOSED
10:40:47 2884  	     );
10:40:47 2885  
10:40:47 2886  	     -- Create new charge
10:40:47 2887  	     PROCS_CHARGE_V22.CREATE_CHARGE (
10:40:47 2888  	       in_invoice_id	     => f_open_charge.invoice_id,
10:40:47 2889  	       in_transaction_id     => temp_out_transaction_id,
10:40:47 2890  	       in_instrument_type_id => in_new_fin_instrument_type,
10:40:47 2891  	       in_instrument_id      => in_new_fin_instrument_id,
10:40:47 2892  	       in_charge_amount      => f_open_charge.charge_amount,
10:40:47 2893  	       in_created_by	     => in_updated_by,
10:40:47 2894  	       in_charge_status_id   => GLOBAL_STATUSES_V22.CHARGE_OPENED,
10:40:47 2895  	       out_charge_id	     => temp_out_charge_id
10:40:47 2896  	     );
10:40:47 2897  	     -- Cancel old charge
10:40:47 2898  	     PROCS_CHARGE_V22.UPDATE_CHARGE_STATUS(
10:40:47 2899  	       in_charge_id	   => f_open_charge.id,
10:40:47 2900  	       in_updated_by	   => in_updated_by,
10:40:47 2901  	       in_charge_status_id => GLOBAL_STATUSES_V22.CHARGE_CANCELED
10:40:47 2902  	     );
10:40:47 2903  
10:40:47 2904  	     PROCS_ADJUSTMENTS_V22.UPDATE_INVOICE_ADJUSTMENT(
10:40:47 2905  	       IN_INVOICE_ID => f_open_charge.invoice_id,
10:40:47 2906  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
10:40:47 2907  	       IN_CHARGE_ID => temp_out_charge_id,
10:40:47 2908  	       IN_UPDATED_BY => in_updated_by
10:40:47 2909  	     );
10:40:47 2910  
10:40:47 2911  	   END LOOP;
10:40:47 2912  	 END LOOP;
10:40:47 2913  
10:40:47 2914  EXCEPTION
10:40:47 2915  WHEN BAD_OLD_CC THEN
10:40:47 2916  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2917  	   SPROC_NAME, 'Trying to switch from non existing credit card');
10:40:47 2918  WHEN BAD_OLD_PP THEN
10:40:47 2919  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2920  	   SPROC_NAME, 'Trying to switch from non existing paypal');
10:40:47 2921  WHEN BAD_OLD_TYPE THEN
10:40:47 2922  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2923  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
10:40:47 2924  WHEN BAD_NEW_CC THEN
10:40:47 2925  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2926  	   SPROC_NAME, 'Trying to switch to non existing credit card');
10:40:47 2927  WHEN BAD_NEW_PP THEN
10:40:47 2928  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2929  	   SPROC_NAME, 'Trying to switch to non existing paypal');
10:40:47 2930  WHEN BAD_NEW_TYPE THEN
10:40:47 2931  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:47 2932  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
10:40:47 2933  WHEN DIFFERENT_OWNERS THEN
10:40:47 2934  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:47 2935  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
10:40:47 2936  WHEN OTHERS THEN
10:40:47 2937  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:47 2938  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:47 2939  END SWITCH_FINANCIAL_INSTRUMENT;
10:40:47 2940  
10:40:47 2941  /******************************************************************************/
10:40:47 2942  
10:40:47 2943  /*
10:40:47 2944  	   Note, this returns paypal records which are in the given window of time
10:40:47 2945  	   based on their creation date, not their expiration date, because we've seen
10:40:47 2946  	   suspicious values in the data for expiration dates. The java layer should
10:40:47 2947  	   inspect the expiration dates and decide whether or not to act on the data.
10:40:47 2948  */
10:40:47 2949  
10:40:47 2950  PROCEDURE GET_EXPIRING_PAYPAL (
10:40:47 2951  	 in_expire_window_days	 IN NUMBER,
10:40:47 2952  	 in_creation_limit_days  IN NUMBER,
10:40:47 2953  	 in_retry_throttle_name  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:40:47 2954  	 out_result_set 	 OUT SYS_REFCURSOR
10:40:47 2955  ) AS
10:40:47 2956  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_EXPIRING_PAYPAL';
10:40:47 2957  var_rows_to_return CONSTANT NUMBER := 1000;
10:40:47 2958  BEGIN
10:40:47 2959  	 OPEN out_result_set FOR
10:40:47 2960  	 SELECT * FROM (
10:40:47 2961  	       SELECT
10:40:47 2962  	       ac.group_id	   AS group_id,
10:40:47 2963  	       pp.id		   AS paypal_id,
10:40:47 2964  	       sb.id		   AS subscription_id,
10:40:47 2965  	       pp.create_date	   AS paypal_creation_date,
10:40:47 2966  	       pp.expiration_date  AS paypal_expiration_date,
10:40:47 2967  	       lc.end_date	   AS license_end_date
10:40:47 2968  	   FROM license lc
10:40:47 2969  	   INNER JOIN subscription sb
10:40:47 2970  	   ON lc.subscription_id = sb.id
10:40:47 2971  	   INNER JOIN paypal pp
10:40:47 2972  	   ON pp.account_id = sb.account_id
10:40:47 2973  	   INNER JOIN account ac
10:40:47 2974  	   ON pp.account_id = ac.id
10:40:47 2975  	   WHERE SYSDATE <= lc.end_date
10:40:47 2976  	     AND SYSDATE + in_expire_window_days > lc.end_date
10:40:47 2977  	     AND pp.paypal_status_id = GLOBAL_STATUSES_V22.PAYPAL_ACTIVE
10:40:47 2978  	     AND lc.license_status_id IN (GLOBAL_STATUSES_V22.LICENSE_ACTIVE,
10:40:47 2979  					  GLOBAL_STATUSES_V22.LICENSE_IN_GRACE_PERIOD)
10:40:47 2980  	     AND pp.id = sb.instrument_id
10:40:47 2981  	     AND sb.instrument_type_id = GLOBAL_ENUMS_V22.INSTRUMENT_PAYPAL
10:40:47 2982  	     AND sb.subscription_status_id IN (GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE,
10:40:47 2983  					       GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD)
10:40:47 2984  	     AND pp.create_date + in_creation_limit_days <= lc.end_date
10:40:47 2985  	     AND NOT EXISTS(
10:40:47 2986  	       SELECT NULL
10:40:47 2987  	       FROM process_retry_throttle rt
10:40:47 2988  	       WHERE rt.process_name = in_retry_throttle_name
10:40:47 2989  		 AND rt.generic_id = pp.id
10:40:47 2990  	     )
10:40:47 2991  	     AND ROWNUM <= 10 * var_rows_to_return
10:40:47 2992  	   ORDER BY dbms_random.value
10:40:47 2993  	 )
10:40:47 2994  	 WHERE ROWNUM <= var_rows_to_return;
10:40:47 2995  END GET_EXPIRING_PAYPAL;
10:40:47 2996  
10:40:47 2997  /******************************************************************************/
10:40:47 2998  
10:40:47 2999  END PROCS_FIN_INSTRUMENTS_V22;
10:40:47 3000  .
10:40:47 SQL> /

Package body created.

Elapsed: 00:00:00.58
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:40:48   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:48   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:40:48   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:48   7  ) AS
10:40:48   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
10:40:48   9  BEGIN
10:40:48  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V22.UPDATE_SUBSCRIPTION_SHARE (
10:40:48  11  	  in_id 		=> in_sub_share_id,
10:40:48  12  	  in_needs_entitlements => in_need_entitlements,
10:40:48  13  	  in_updated_by 	=> in_updater
10:40:48  14  	);
10:40:48  15  END UPDATE_SS_NEED_ENTITLEMENTS;
10:40:48  16  
10:40:48  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:40:48  18  	out_result_set OUT SYS_REFCURSOR
10:40:48  19  ) AS
10:40:48  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
10:40:48  21  BEGIN
10:40:48  22  	OPEN out_result_set FOR
10:40:48  23  	SELECT * FROM (
10:40:48  24  	  SELECT DISTINCT
10:40:48  25  	    ga.Subscription_Id,
10:40:48  26  	    A.Group_Id Borrower_Group_Id,
10:40:48  27  	    L.Offer_Id,
10:40:48  28  	    ss.id Subscription_Share_id
10:40:48  29  	  FROM
10:40:48  30  	    Subscription_Share Ss,
10:40:48  31  	    Group_Account Ga,
10:40:48  32  	    Account A,
10:40:48  33  	    License l
10:40:48  34  	  WHERE
10:40:48  35  	    Ss.Group_Account_Id        = ga.id
10:40:48  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V22.TRUE
10:40:48  37  	    AND Ss.Borrower_Account_Id = A.Id
10:40:48  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
10:40:48  39  	    AND ROWNUM <= 5000
10:40:48  40  	  ORDER BY dbms_random.value
10:40:48  41  ) WHERE
10:40:48  42  	ROWNUM <= 1000;
10:40:48  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
10:40:48  44  
10:40:48  45  PROCEDURE EXPIRE_SUB_SHARE(
10:40:48  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:48  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:48  48  ) AS
10:40:48  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
10:40:48  50  BEGIN
10:40:48  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V22.UPDATE_SUBSCRIPTION_SHARE (
10:40:48  52  	  in_id 	=> in_sub_share_id,
10:40:48  53  	  in_end_date	=> SYSDATE,
10:40:48  54  	  in_updated_by => in_updater,
10:40:48  55  	  in_needs_entitlements => 1
10:40:48  56  	);
10:40:48  57  END EXPIRE_SUB_SHARE;
10:40:48  58  
10:40:48  59  PROCEDURE EXPIRE_ALL_SHARES (
10:40:48  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:40:48  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:48  62  ) AS
10:40:48  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
10:40:48  64  BEGIN
10:40:48  65  	UPDATE SUBSCRIPTION_SHARE SET
10:40:48  66  	  END_DATE = SYSDATE,
10:40:48  67  	  UPDATED_BY = in_updated_by,
10:40:48  68  	  UPDATE_DATE = SYSDATE
10:40:48  69  	WHERE
10:40:48  70  	  GROUP_ACCOUNT_ID = in_group_account_id
10:40:48  71  	AND
10:40:48  72  	  SYSDATE < END_DATE;
10:40:48  73  EXCEPTION
10:40:48  74  	WHEN OTHERS THEN
10:40:48  75  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
10:40:48  77  END EXPIRE_ALL_SHARES;
10:40:48  78  
10:40:48  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
10:40:48  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
10:40:48  81  	in_start	 IN  NUMBER,
10:40:48  82  	in_end		 IN  NUMBER,
10:40:48  83  	in_expired	 IN  NUMBER,
10:40:48  84  	out_result_set	 OUT SYS_REFCURSOR,
10:40:48  85  	out_shares_count OUT NUMBER
10:40:48  86  ) AS
10:40:48  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
10:40:48  88  range_diff NUMBER := 0;
10:40:48  89  upper_bond_diff NUMBER := 0;
10:40:48  90  l_start NUMBER := 0;
10:40:48  91  l_end   NUMBER := 0;
10:40:48  92  BEGIN
10:40:48  93  	--Normalize the end points [START]
10:40:48  94  	IF (in_start IS NULL OR in_start < 0) Then
10:40:48  95  	  l_start := 0;
10:40:48  96  	ELSE
10:40:48  97  	  l_start := in_start;
10:40:48  98  	END IF;
10:40:48  99  
10:40:48 100  	IF (in_end IS NULL) Then
10:40:48 101  	  l_end := 11;
10:40:48 102  	ELSE
10:40:48 103  	  l_end := in_end;
10:40:48 104  	END IF;
10:40:48 105  
10:40:48 106  	l_start := l_start + 1;
10:40:48 107  	l_end	:= l_end   + 1;
10:40:48 108  
10:40:48 109  	range_diff := l_end - l_start;
10:40:48 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V22.MAX_RETURN_COUNT;
10:40:48 111  
10:40:48 112  	IF (upper_bond_diff > 0) Then
10:40:48 113  	  l_end := l_end - upper_bond_diff;
10:40:48 114  	END IF;
10:40:48 115  	--Normalize the end points [END]
10:40:48 116  
10:40:48 117  	BEGIN
10:40:48 118  	  SELECT
10:40:48 119  	    COUNT(1) INTO out_shares_count
10:40:48 120  	  FROM
10:40:48 121  	    GROUP_ACCOUNT ga,
10:40:48 122  	    SUBSCRIPTION_SHARE ss,
10:40:48 123  	    ACCOUNT a
10:40:48 124  	  WHERE
10:40:48 125  	    a.GROUP_ID		= in_group_id AND
10:40:48 126  	    a.Id		= ss.borrower_account_id And
10:40:48 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
10:40:48 128  	END;
10:40:48 129  
10:40:48 130  	IF in_expired > 0 THEN
10:40:48 131  	BEGIN
10:40:48 132  	    OPEN out_result_set FOR
10:40:48 133  	    SELECT
10:40:48 134  	      *
10:40:48 135  	    FROM
10:40:48 136  	      (SELECT rownum rnum, q.*
10:40:48 137  	       FROM
10:40:48 138  		(SELECT
10:40:48 139  		   ga.SUBSCRIPTION_ID,
10:40:48 140  		   ss.START_DATE,
10:40:48 141  		   ss.END_DATE,
10:40:48 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
10:40:48 143  		 FROM
10:40:48 144  		   GROUP_ACCOUNT ga,
10:40:48 145  		   SUBSCRIPTION_SHARE ss,
10:40:48 146  		   ACCOUNT a,
10:40:48 147  		   SUBSCRIPTION s,
10:40:48 148  		   ACCOUNT a2
10:40:48 149  		 WHERE
10:40:48 150  		   a.GROUP_ID	       = in_group_id AND
10:40:48 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
10:40:48 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
10:40:48 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
10:40:48 154  		   s.ACCOUNT_ID        = a2.ID
10:40:48 155  		) Q
10:40:48 156  	      WHERE rownum <= l_end)
10:40:48 157  	    WHERE rnum >= l_Start;
10:40:48 158  	END;
10:40:48 159  	ELSE
10:40:48 160  	BEGIN
10:40:48 161  	    OPEN out_result_set FOR
10:40:48 162  	    SELECT
10:40:48 163  	      *
10:40:48 164  	    FROM
10:40:48 165  	      (SELECT rownum rnum, q.*
10:40:48 166  	       FROM
10:40:48 167  		(SELECT
10:40:48 168  		   ga.SUBSCRIPTION_ID,
10:40:48 169  		   ss.START_DATE,
10:40:48 170  		   ss.END_DATE,
10:40:48 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
10:40:48 172  		 FROM
10:40:48 173  		   GROUP_ACCOUNT ga,
10:40:48 174  		   SUBSCRIPTION_SHARE ss,
10:40:48 175  		   ACCOUNT a,
10:40:48 176  		   SUBSCRIPTION s,
10:40:48 177  		   ACCOUNT a2
10:40:48 178  		 WHERE
10:40:48 179  		   a.GROUP_ID	       = in_group_id AND
10:40:48 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
10:40:48 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
10:40:48 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
10:40:48 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
10:40:48 184  		   s.ACCOUNT_ID        = a2.ID
10:40:48 185  		) Q
10:40:48 186  	      WHERE rownum <= l_end)
10:40:48 187  	    WHERE rnum >= l_start;
10:40:48 188  	  END;
10:40:48 189  	END IF;
10:40:48 190  EXCEPTION
10:40:48 191  WHEN NO_DATA_FOUND THEN
10:40:48 192  	NULL;
10:40:48 193  WHEN OTHERS THEN
10:40:48 194  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
10:40:48 196  END SUB_SHARE_BY_GROUP_ID;
10:40:48 197  
10:40:48 198  PROCEDURE IS_VALID_IP_ADDRESS (
10:40:48 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:48 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:48 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:48 202  	out_is_valid	    OUT NUMBER
10:40:48 203  ) AS
10:40:48 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
10:40:48 205  BEGIN
10:40:48 206  	SELECT
10:40:48 207  	  COUNT(1) INTO out_is_valid
10:40:48 208  	FROM
10:40:48 209  	  GROUP_ACCOUNT_IP_RANGE,
10:40:48 210  	  GROUP_ACCOUNT,
10:40:48 211  	  SUBSCRIPTION,
10:40:48 212  	  OFFER_CHAIN
10:40:48 213  	WHERE
10:40:48 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
10:40:48 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:40:48 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:40:48 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
10:40:48 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 219  	 (
10:40:48 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
10:40:48 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
10:40:48 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
10:40:48 223  	 ) AND
10:40:48 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE;
10:40:48 225  EXCEPTION
10:40:48 226  WHEN OTHERS THEN
10:40:48 227  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
10:40:48 229  END IS_VALID_IP_ADDRESS;
10:40:48 230  
10:40:48 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
10:40:48 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:48 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:48 234  	out_is_valid	    OUT NUMBER
10:40:48 235  ) AS
10:40:48 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
10:40:48 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:40:48 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:40:48 239  BEGIN
10:40:48 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
10:40:48 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
10:40:48 242  
10:40:48 243  	SELECT
10:40:48 244  	  COUNT(1) INTO out_is_valid
10:40:48 245  	FROM
10:40:48 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
10:40:48 247  	  GROUP_ACCOUNT ga,
10:40:48 248  	  SUBSCRIPTION s,
10:40:48 249  	  OFFER_CHAIN oc
10:40:48 250  	WHERE
10:40:48 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
10:40:48 252  	  ga.SUBSCRIPTION_ID = s.ID AND
10:40:48 253  	  s.OFFER_CHAIN_ID = oc.ID AND
10:40:48 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
10:40:48 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
10:40:48 257  	  gaed.IS_ACTIVE = 1;
10:40:48 258  EXCEPTION
10:40:48 259  WHEN OTHERS THEN
10:40:48 260  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
10:40:48 262  END IS_VALID_EMAIL_DOMAIN;
10:40:48 263  
10:40:48 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
10:40:48 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
10:40:48 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
10:40:48 267  	out_Result_Set	       OUT Sys_Refcursor
10:40:48 268  ) AS
10:40:48 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
10:40:48 270  BEGIN
10:40:48 271  	BEGIN
10:40:48 272  	   OPEN out_result_set FOR
10:40:48 273  	   SELECT
10:40:48 274  	      ss.ID,
10:40:48 275  	      ss.GROUP_ACCOUNT_ID,
10:40:48 276  	      ss.BORROWER_ACCOUNT_ID,
10:40:48 277  	      ss.IP_ADDRESS,
10:40:48 278  	      ss.START_DATE,
10:40:48 279  	      ss.END_DATE,
10:40:48 280  	      ss.CREATED_BY,
10:40:48 281  	      ss.CREATE_DATE,
10:40:48 282  	      ss.UPDATED_BY,
10:40:48 283  	      ss.UPDATE_DATE,
10:40:48 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
10:40:48 285  	   FROM
10:40:48 286  	     SUBSCRIPTION_SHARE ss,
10:40:48 287  	     ACCOUNT a
10:40:48 288  	   WHERE
10:40:48 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
10:40:48 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
10:40:48 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
10:40:48 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
10:40:48 293  	END;
10:40:48 294  EXCEPTION
10:40:48 295  WHEN OTHERS THEN
10:40:48 296  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
10:40:48 298  END GET_SUBSCRIPTION_SHARE;
10:40:48 299  
10:40:48 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
10:40:48 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
10:40:48 302  	out_result_set	   OUT SYS_REFCURSOR
10:40:48 303  ) As
10:40:48 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
10:40:48 305  BEGIN
10:40:48 306  OPEN out_result_set FOR
10:40:48 307  	SELECT
10:40:48 308  	  ID,
10:40:48 309  	  SUBSCRIPTION_ID,
10:40:48 310  	  GROUP_NAME,
10:40:48 311  	  FIRST_NAME,
10:40:48 312  	  LAST_NAME,
10:40:48 313  	  EMAIL,
10:40:48 314  	  PHONE,
10:40:48 315  	  ORGANIZATION_TYPE,
10:40:48 316  	  SEATS,
10:40:48 317  	  SEAT_TTL_IN_HOURS,
10:40:48 318  	  CREATE_DATE,
10:40:48 319  	  CREATED_BY,
10:40:48 320  	  UPDATE_DATE,
10:40:48 321  	  UPDATED_BY
10:40:48 322  	FROM
10:40:48 323  	  GROUP_ACCOUNT
10:40:48 324  	Where
10:40:48 325  	  Subscription_Id = in_subscription_id;
10:40:48 326  EXCEPTION
10:40:48 327  WHEN OTHERS THEN
10:40:48 328  	Procs_Common_V22.Throw_Exception(APP_EXCEPTION_CODES_V22.Unknown_Error,
10:40:48 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 330  
10:40:48 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
10:40:48 332  
10:40:48 333  PROCEDURE CREATE_GROUP_ACCOUNT (
10:40:48 334  	in_subscription_id	 IN NUMBER,
10:40:48 335  	in_group_name		 IN VARCHAR2,
10:40:48 336  	in_first_name		 IN VARCHAR2,
10:40:48 337  	in_last_name		 IN VARCHAR2,
10:40:48 338  	in_email		 IN VARCHAR2,
10:40:48 339  	in_phone		 IN VARCHAR2,
10:40:48 340  	in_organization_type	 IN VARCHAR2,
10:40:48 341  	in_seats		 IN NUMBER,
10:40:48 342  	in_seat_ttl_in_hours	 IN NUMBER,
10:40:48 343  	in_ip			 IN NUMBER,
10:40:48 344  	in_created_by		 IN VARCHAR2
10:40:48 345  ) AS
10:40:48 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
10:40:48 347  BEGIN
10:40:48 348  
10:40:48 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V22.CREATE_GROUP_ACCOUNT(
10:40:48 350  	  in_subscription_id => in_subscription_id,
10:40:48 351  	  in_group_name => in_group_name,
10:40:48 352  	  in_first_name => in_first_name,
10:40:48 353  	  in_last_name => in_last_name,
10:40:48 354  	  in_email => in_email,
10:40:48 355  	  in_phone => in_phone,
10:40:48 356  	  in_organization_type => in_organization_type,
10:40:48 357  	  in_seats => in_seats,
10:40:48 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
10:40:48 359  	  in_ip => in_ip,
10:40:48 360  	  in_created_by => in_created_by
10:40:48 361  	);
10:40:48 362  
10:40:48 363  END CREATE_GROUP_ACCOUNT;
10:40:48 364  
10:40:48 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
10:40:48 366  	in_group_account_id IN NUMBER,
10:40:48 367  	in_start	    IN NUMBER,
10:40:48 368  	in_end		    IN NUMBER,
10:40:48 369  	out_Result_Set	    OUT Sys_Refcursor
10:40:48 370  ) AS
10:40:48 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
10:40:48 372  range_diff NUMBER := 0;
10:40:48 373  upper_bond_diff NUMBER := 0;
10:40:48 374  l_start NUMBER := 0;
10:40:48 375  l_end   NUMBER := 0;
10:40:48 376  BEGIN
10:40:48 377  	-- Normalize the end points [START]
10:40:48 378  	IF (in_start IS NULL OR in_start < 0) Then
10:40:48 379  	  l_start := 0;
10:40:48 380  	ELSE
10:40:48 381  	  l_start := in_start;
10:40:48 382  	END IF;
10:40:48 383  
10:40:48 384  	IF (in_end IS NULL) Then
10:40:48 385  	  l_end := 11;
10:40:48 386  	ELSE
10:40:48 387  	  l_end := in_end;
10:40:48 388  	END IF;
10:40:48 389  
10:40:48 390  	l_start := l_start + 1;
10:40:48 391  	l_end	:= l_end   + 1;
10:40:48 392  
10:40:48 393  	range_diff := l_end - l_start;
10:40:48 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V22.MAX_RETURN_COUNT;
10:40:48 395  
10:40:48 396  	IF (upper_bond_diff > 0) Then
10:40:48 397  	  l_end := l_end - upper_bond_diff;
10:40:48 398  	END IF;
10:40:48 399  	-- Normalize the end points [END]
10:40:48 400  
10:40:48 401  	BEGIN
10:40:48 402  	   OPEN out_result_set FOR
10:40:48 403  	   SELECT *
10:40:48 404  	   FROM
10:40:48 405  	     (SELECT rownum rnum, Q.*
10:40:48 406  	      FROM
10:40:48 407  	       (SELECT
10:40:48 408  		  ss.ID,
10:40:48 409  		  ss.GROUP_ACCOUNT_ID,
10:40:48 410  		  ss.BORROWER_ACCOUNT_ID,
10:40:48 411  		  ss.IP_ADDRESS,
10:40:48 412  		  ss.START_DATE,
10:40:48 413  		  ss.END_DATE,
10:40:48 414  		  ss.CREATED_BY,
10:40:48 415  		  ss.CREATE_DATE,
10:40:48 416  		  ss.UPDATED_BY,
10:40:48 417  		  ss.UPDATE_DATE,
10:40:48 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
10:40:48 419  		FROM
10:40:48 420  		  SUBSCRIPTION_SHARE ss,
10:40:48 421  		  ACCOUNT a,
10:40:48 422  		  LICENSE l,
10:40:48 423  		  GROUP_ACCOUNT ga
10:40:48 424  		WHERE
10:40:48 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
10:40:48 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
10:40:48 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
10:40:48 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
10:40:48 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
10:40:48 431  	      ) Q
10:40:48 432  	    WHERE rownum <= l_end)
10:40:48 433  	  WHERE rnum >= l_start;
10:40:48 434  	END;
10:40:48 435  EXCEPTION
10:40:48 436  WHEN OTHERS THEN
10:40:48 437  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
10:40:48 439  END GET_SUBSCRIPTION_SHARES;
10:40:48 440  
10:40:48 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
10:40:48 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:48 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:48 444  	out_result_set	      OUT SYS_REFCURSOR
10:40:48 445  ) AS
10:40:48 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
10:40:48 447  BEGIN
10:40:48 448  	BEGIN
10:40:48 449  	  OPEN out_result_set FOR
10:40:48 450  	  SELECT
10:40:48 451  	    ID,
10:40:48 452  	    SUBSCRIPTION_ID,
10:40:48 453  	    GROUP_NAME,
10:40:48 454  	    FIRST_NAME,
10:40:48 455  	    LAST_NAME,
10:40:48 456  	    EMAIL,
10:40:48 457  	    PHONE,
10:40:48 458  	    ORGANIZATION_TYPE,
10:40:48 459  	    SEATS,
10:40:48 460  	    SEAT_TTL_IN_HOURS,
10:40:48 461  	    CREATE_DATE,
10:40:48 462  	    CREATED_BY,
10:40:48 463  	    UPDATE_DATE,
10:40:48 464  	    UPDATED_BY
10:40:48 465  	  FROM
10:40:48 466  	    GROUP_ACCOUNT
10:40:48 467  	  WHERE
10:40:48 468  	    ID IN (
10:40:48 469  	      SELECT
10:40:48 470  		GROUP_ACCOUNT_ID
10:40:48 471  	      FROM
10:40:48 472  		GROUP_ACCOUNT_IP_RANGE,
10:40:48 473  		GROUP_ACCOUNT,
10:40:48 474  		SUBSCRIPTION,
10:40:48 475  		OFFER_CHAIN
10:40:48 476  	      WHERE
10:40:48 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
10:40:48 478  	      AND
10:40:48 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:40:48 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:40:48 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
10:40:48 482  	      AND
10:40:48 483  		(
10:40:48 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
10:40:48 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
10:40:48 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
10:40:48 487  		)
10:40:48 488  	      AND
10:40:48 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE
10:40:48 490  	    );
10:40:48 491  	  END;
10:40:48 492  EXCEPTION
10:40:48 493  WHEN OTHERS THEN
10:40:48 494  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 496  END GET_GROUP_ACCOUNT_BY_IP;
10:40:48 497  
10:40:48 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
10:40:48 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:48 500  	out_result_set	    OUT SYS_REFCURSOR
10:40:48 501  ) AS
10:40:48 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
10:40:48 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:40:48 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
10:40:48 505  BEGIN
10:40:48 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
10:40:48 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
10:40:48 508  	BEGIN
10:40:48 509  	  OPEN out_result_set FOR
10:40:48 510  	  SELECT
10:40:48 511  	    ID,
10:40:48 512  	    SUBSCRIPTION_ID,
10:40:48 513  	    GROUP_NAME,
10:40:48 514  	    FIRST_NAME,
10:40:48 515  	    LAST_NAME,
10:40:48 516  	    EMAIL,
10:40:48 517  	    PHONE,
10:40:48 518  	    ORGANIZATION_TYPE,
10:40:48 519  	    SEATS,
10:40:48 520  	    SEAT_TTL_IN_HOURS,
10:40:48 521  	    CREATE_DATE,
10:40:48 522  	    CREATED_BY,
10:40:48 523  	    UPDATE_DATE,
10:40:48 524  	    UPDATED_BY
10:40:48 525  	  FROM
10:40:48 526  	    GROUP_ACCOUNT
10:40:48 527  	  WHERE
10:40:48 528  	    ID IN (
10:40:48 529  	      SELECT
10:40:48 530  		GROUP_ACCOUNT_ID
10:40:48 531  	      FROM
10:40:48 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
10:40:48 533  		GROUP_ACCOUNT ga,
10:40:48 534  		SUBSCRIPTION s,
10:40:48 535  		OFFER_CHAIN oc
10:40:48 536  	      WHERE
10:40:48 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
10:40:48 538  		ga.SUBSCRIPTION_ID = s.ID AND
10:40:48 539  		s.OFFER_CHAIN_ID = oc.ID AND
10:40:48 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
10:40:48 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
10:40:48 542  		gaed.IS_ACTIVE = 1
10:40:48 543  	    );
10:40:48 544  	  END;
10:40:48 545  EXCEPTION
10:40:48 546  WHEN OTHERS THEN
10:40:48 547  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
10:40:48 550  
10:40:48 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
10:40:48 552  	in_group_account_id   IN NUMBER,
10:40:48 553  	in_start	      IN NUMBER,
10:40:48 554  	in_end		      IN NUMBER,
10:40:48 555  	in_status	      IN NUMBER,
10:40:48 556  	out_record_count      OUT NUMBER,
10:40:48 557  	out_result_set	      OUT SYS_REFCURSOR
10:40:48 558  ) AS
10:40:48 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
10:40:48 560  range_diff NUMBER := 0;
10:40:48 561  upper_bond_diff NUMBER := 0;
10:40:48 562  l_start NUMBER := 0;
10:40:48 563  l_end   NUMBER := 0;
10:40:48 564  BEGIN
10:40:48 565  	--Normalize the end points [START]
10:40:48 566  	IF (in_start IS NULL OR in_start < 0) Then
10:40:48 567  	  l_start := 0;
10:40:48 568  	ELSE
10:40:48 569  	  l_start := in_start;
10:40:48 570  	END IF;
10:40:48 571  
10:40:48 572  	IF (in_end IS NULL) Then
10:40:48 573  	  l_end := 11;
10:40:48 574  	ELSE
10:40:48 575  	  l_end := in_end;
10:40:48 576  	END IF;
10:40:48 577  
10:40:48 578  	l_start := l_start + 1;
10:40:48 579  	l_end	:= l_end   + 1;
10:40:48 580  
10:40:48 581  	range_diff := l_end - l_start;
10:40:48 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V22.MAX_RETURN_COUNT;
10:40:48 583  
10:40:48 584  	IF (upper_bond_diff > 0) Then
10:40:48 585  	  l_end := l_end - upper_bond_diff;
10:40:48 586  	END IF;
10:40:48 587  	--Normalize the end points [END]
10:40:48 588  
10:40:48 589  	--Total count of records [START]
10:40:48 590  	SELECT
10:40:48 591  	  COUNT(1) INTO out_record_count
10:40:48 592  	FROM
10:40:48 593  	  GROUP_ACCOUNT_IP_RANGE
10:40:48 594  	WHERE
10:40:48 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
10:40:48 597  	--Total count of records [END]
10:40:48 598  
10:40:48 599  	OPEN out_result_set FOR
10:40:48 600  	SELECT
10:40:48 601  	  *
10:40:48 602  	FROM
10:40:48 603  	  (SELECT rownum rnum, q.*
10:40:48 604  	   FROM
10:40:48 605  	    (SELECT
10:40:48 606  	       ID,
10:40:48 607  	       GROUP_ACCOUNT_ID,
10:40:48 608  	       MINIMUM_IP_STRING,
10:40:48 609  	       MAXIMUM_IP_STRING,
10:40:48 610  	       GROUP_ACC_IP_RNG_STATUS_ID
10:40:48 611  	     FROM
10:40:48 612  	       GROUP_ACCOUNT_IP_RANGE
10:40:48 613  	     WHERE
10:40:48 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 615  	       (in_status IS NULL OR
10:40:48 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
10:40:48 617  	    ) Q
10:40:48 618  	  WHERE rownum <= l_end)
10:40:48 619  	WHERE rnum >= l_Start;
10:40:48 620  EXCEPTION
10:40:48 621  WHEN OTHERS THEN
10:40:48 622  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
10:40:48 624  END GET_GROUP_ACCOUNT_IP_RANGES;
10:40:48 625  
10:40:48 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
10:40:48 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:48 628  	in_start	      IN NUMBER,
10:40:48 629  	in_end		      IN NUMBER,
10:40:48 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
10:40:48 631  	out_record_count      OUT NUMBER,
10:40:48 632  	out_result_set	      OUT SYS_REFCURSOR
10:40:48 633  ) AS
10:40:48 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
10:40:48 635  range_diff NUMBER := 0;
10:40:48 636  upper_bond_diff NUMBER := 0;
10:40:48 637  l_start NUMBER := 0;
10:40:48 638  l_end   NUMBER := 0;
10:40:48 639  BEGIN
10:40:48 640  	--Normalize the end points [START]
10:40:48 641  	IF (in_start IS NULL OR in_start < 0) Then
10:40:48 642  	  l_start := 0;
10:40:48 643  	ELSE
10:40:48 644  	  l_start := in_start;
10:40:48 645  	END IF;
10:40:48 646  
10:40:48 647  	IF (in_end IS NULL) Then
10:40:48 648  	  l_end := 11;
10:40:48 649  	ELSE
10:40:48 650  	  l_end := in_end;
10:40:48 651  	END IF;
10:40:48 652  
10:40:48 653  	l_start := l_start + 1;
10:40:48 654  	l_end	:= l_end   + 1;
10:40:48 655  
10:40:48 656  	range_diff := l_end - l_start;
10:40:48 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V22.MAX_RETURN_COUNT;
10:40:48 658  
10:40:48 659  	IF (upper_bond_diff > 0) Then
10:40:48 660  	  l_end := l_end - upper_bond_diff;
10:40:48 661  	END IF;
10:40:48 662  	--Normalize the end points [END]
10:40:48 663  
10:40:48 664  	--Total count of records [START]
10:40:48 665  	SELECT
10:40:48 666  	  COUNT(1) INTO out_record_count
10:40:48 667  	FROM
10:40:48 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
10:40:48 669  	WHERE
10:40:48 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
10:40:48 672  	--Total count of records [END]
10:40:48 673  
10:40:48 674  	OPEN out_result_set FOR
10:40:48 675  	SELECT
10:40:48 676  	  *
10:40:48 677  	FROM
10:40:48 678  	  (SELECT rownum rnum, q.*
10:40:48 679  	   FROM
10:40:48 680  	    (SELECT
10:40:48 681  	      ID,
10:40:48 682  	      GROUP_ACCOUNT_ID,
10:40:48 683  	      EMAIL_DOMAIN,
10:40:48 684  	      IS_ACTIVE
10:40:48 685  	     FROM
10:40:48 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
10:40:48 687  	     WHERE
10:40:48 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 689  	       (in_status IS NULL OR
10:40:48 690  		IS_ACTIVE = in_status)
10:40:48 691  	    ) Q
10:40:48 692  	  WHERE rownum <= l_end)
10:40:48 693  	WHERE rnum >= l_Start;
10:40:48 694  
10:40:48 695  EXCEPTION
10:40:48 696  WHEN OTHERS THEN
10:40:48 697  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
10:40:48 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
10:40:48 700  
10:40:48 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
10:40:48 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:48 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:48 704  ) AS
10:40:48 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
10:40:48 706  BEGIN
10:40:48 707  	  PROCS_GROUP_ACCOUNT_CRU_V22.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
10:40:48 708  	    in_group_account_id => in_group_account_id,
10:40:48 709  	    in_updated_by => in_updated_by
10:40:48 710  	  );
10:40:48 711  EXCEPTION
10:40:48 712  WHEN OTHERS THEN
10:40:48 713  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
10:40:48 716  
10:40:48 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
10:40:48 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
10:40:48 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
10:40:48 720  ) AS
10:40:48 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
10:40:48 722  BEGIN
10:40:48 723  	  PROCS_GROUP_ACCOUNT_CRU_V22.DISABLE_EMAIL_DOMAIN_BY_ID(
10:40:48 724  	    in_id => in_id,
10:40:48 725  	    in_updated_by => in_updated_by
10:40:48 726  	  );
10:40:48 727  EXCEPTION
10:40:48 728  WHEN OTHERS THEN
10:40:48 729  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
10:40:48 732  
10:40:48 733  PROCEDURE ADD_EMAIL_DOMAIN (
10:40:48 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
10:40:48 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
10:40:48 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
10:40:48 737  ) AS
10:40:48 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
10:40:48 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
10:40:48 740  var_is_dupe NUMBER(1);
10:40:48 741  var_group_account_count NUMBER := 0;
10:40:48 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
10:40:48 743  NOT_GL EXCEPTION;
10:40:48 744  BEGIN
10:40:48 745  
10:40:48 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
10:40:48 747  	  FROM
10:40:48 748  	    GROUP_ACCOUNT,
10:40:48 749  	    SUBSCRIPTION,
10:40:48 750  	    OFFER_CHAIN
10:40:48 751  	  WHERE
10:40:48 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
10:40:48 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:40:48 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 755  	  ;
10:40:48 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
10:40:48 757  	    RAISE NOT_GL;
10:40:48 758  	  END IF;
10:40:48 759  
10:40:48 760  	  PROCS_GROUP_ACCOUNT_CRU_V22.ADD_EMAIL_DOMAIN(
10:40:48 761  	     in_group_account_id => in_group_account_id,
10:40:48 762  	     in_email_domain => in_email_domain,
10:40:48 763  	     in_is_active => GLOBAL_STATUSES_V22.GROUP_ACC_EMAIL_DOMAIN_ACT,
10:40:48 764  	     in_created_by => in_created_by
10:40:48 765  	  );
10:40:48 766  
10:40:48 767  EXCEPTION
10:40:48 768  WHEN NOT_GL THEN
10:40:48 769  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 770  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
10:40:48 771  WHEN OTHERS THEN
10:40:48 772  	IF (sqlcode=APP_EXCEPTION_CODES_V22.DUPLICATE_ERROR) THEN
10:40:48 773  	   RAISE;
10:40:48 774  	ELSE
10:40:48 775  	  PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 776  	    SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 777  	END IF;
10:40:48 778  END ADD_EMAIL_DOMAIN;
10:40:48 779  
10:40:48 780  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
10:40:48 781  	in_group_account_id    IN NUMBER,
10:40:48 782  	in_borrower_account_id IN NUMBER,
10:40:48 783  	in_ip_address	       IN VARCHAR2,
10:40:48 784  	in_email_domain        IN VARCHAR2,
10:40:48 785  	in_created_by	       IN VARCHAR2
10:40:48 786  ) AS
10:40:48 787  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
10:40:48 788  ga_ttl_in_hours NUMBER := NULL;
10:40:48 789  start_date DATE := NULL;
10:40:48 790  end_date DATE := NULL;
10:40:48 791  BEGIN
10:40:48 792  	start_date := sysdate;
10:40:48 793  	end_date   := GLOBAL_CONSTANTS_V22.MAX_DATE;
10:40:48 794  
10:40:48 795  	BEGIN
10:40:48 796  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
10:40:48 797  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
10:40:48 798  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
10:40:48 799  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:40:48 800  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
10:40:48 801  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
10:40:48 802  	EXCEPTION
10:40:48 803  	  WHEN no_data_found THEN
10:40:48 804  	    ga_ttl_in_hours := NULL;
10:40:48 805  	END;
10:40:48 806  
10:40:48 807  	IF (ga_ttl_in_hours IS NOT NULL) THEN
10:40:48 808  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
10:40:48 809  	END IF;
10:40:48 810  
10:40:48 811  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V22.CREATE_SUBSCRIPTION_SHARE(
10:40:48 812  	  in_group_account_id => in_group_account_id,
10:40:48 813  	  in_borrower_account_id => in_borrower_account_id,
10:40:48 814  	  in_ip_address => in_ip_address,
10:40:48 815  	  in_email_domain => in_email_domain,
10:40:48 816  	  in_start_date => start_date,
10:40:48 817  	  in_end_date => end_date,
10:40:48 818  	  in_created_by => in_created_by
10:40:48 819  	);
10:40:48 820  END CREATE_SUBSCRIPTION_SHARE;
10:40:48 821  
10:40:48 822  
10:40:48 823  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
10:40:48 824  	in_group_account_id   IN NUMBER,
10:40:48 825  	out_occupied_seats   OUT NUMBER
10:40:48 826  ) AS
10:40:48 827  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
10:40:48 828  BEGIN
10:40:48 829  	SELECT
10:40:48 830  	  PROCS_GROUP_ACCOUNT_V22.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
10:40:48 831  	FROM dual;
10:40:48 832  EXCEPTION
10:40:48 833  WHEN OTHERS THEN
10:40:48 834  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 835  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 836  END GET_NUM_OCCUPIED_GROUP_SEATS;
10:40:48 837  
10:40:48 838  
10:40:48 839  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
10:40:48 840  	in_group_account_id   IN NUMBER
10:40:48 841  ) RETURN NUMBER IS
10:40:48 842  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
10:40:48 843  num_seats NUMBER;
10:40:48 844  BEGIN
10:40:48 845  	SELECT
10:40:48 846  	  COUNT(1) INTO num_seats
10:40:48 847  	FROM
10:40:48 848  	  SUBSCRIPTION_SHARE
10:40:48 849  	WHERE
10:40:48 850  	  GROUP_ACCOUNT_ID = in_group_account_id AND
10:40:48 851  	  SYSDATE BETWEEN START_DATE AND END_DATE;
10:40:48 852  	RETURN num_seats;
10:40:48 853  EXCEPTION
10:40:48 854  WHEN OTHERS THEN
10:40:48 855  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 856  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 857  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
10:40:48 858  
10:40:48 859  -- *********************************************************************
10:40:48 860  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
10:40:48 861  -- *********************************************************************
10:40:48 862  -- I'm debating if this should be in a different package, but right now
10:40:48 863  -- I'm too lazy to move this else where.
10:40:48 864  -- *********************************************************************
10:40:48 865  
10:40:48 866  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
10:40:48 867  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:48 868  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:48 869  ) AS
10:40:48 870  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
10:40:48 871  BEGIN
10:40:48 872  	  PROCS_GROUP_ACCOUNT_CRU_V22.DISABLE_IP_RANGES_BY_GA_ID(
10:40:48 873  	    in_group_account_id => in_group_account_id,
10:40:48 874  	    in_updated_by => in_updated_by
10:40:48 875  	  );
10:40:48 876  EXCEPTION
10:40:48 877  WHEN OTHERS THEN
10:40:48 878  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 879  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 880  END DISABLE_IP_RANGES_BY_GA_ID;
10:40:48 881  
10:40:48 882  PROCEDURE DISABLE_IP_RANGE_BY_ID (
10:40:48 883  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
10:40:48 884  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
10:40:48 885  ) AS
10:40:48 886  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
10:40:48 887  BEGIN
10:40:48 888  	  PROCS_GROUP_ACCOUNT_CRU_V22.DISABLE_IP_RANGE_BY_ID(
10:40:48 889  	    in_id => in_id,
10:40:48 890  	    in_updated_by => in_updated_by
10:40:48 891  	  );
10:40:48 892  EXCEPTION
10:40:48 893  WHEN OTHERS THEN
10:40:48 894  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 895  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 896  END DISABLE_IP_RANGE_BY_ID;
10:40:48 897  
10:40:48 898  PROCEDURE ADD_IP_RANGE (
10:40:48 899  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
10:40:48 900  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
10:40:48 901  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
10:40:48 902  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
10:40:48 903  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
10:40:48 904  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
10:40:48 905  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
10:40:48 906  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
10:40:48 907  ) AS
10:40:48 908  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
10:40:48 909  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
10:40:48 910  var_is_dupe NUMBER(1);
10:40:48 911  NOT_GL EXCEPTION;
10:40:48 912  DUPE EXCEPTION;
10:40:48 913  BEGIN
10:40:48 914  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
10:40:48 915  	  FROM
10:40:48 916  	    GROUP_ACCOUNT,
10:40:48 917  	    SUBSCRIPTION,
10:40:48 918  	    OFFER_CHAIN
10:40:48 919  	  WHERE
10:40:48 920  	    GROUP_ACCOUNT.ID = in_group_account_id AND
10:40:48 921  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
10:40:48 922  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 923  	  ;
10:40:48 924  	  IF(var_ga_type != 'GL') THEN
10:40:48 925  	    RAISE NOT_GL;
10:40:48 926  	  END IF;
10:40:48 927  
10:40:48 928  	  PROCS_GROUP_ACCOUNT_CRU_V22.ADD_IP_RANGE(
10:40:48 929  	    in_group_account_id => in_group_account_id,
10:40:48 930  	    in_minimum_ip_string => in_minimum_ip_string,
10:40:48 931  	    in_minimum_ip_low => in_minimum_ip_low,
10:40:48 932  	    in_minimum_ip_high => in_minimum_ip_high,
10:40:48 933  	    in_maximum_ip_string => in_maximum_ip_string,
10:40:48 934  	    in_maximum_ip_low => in_maximum_ip_low,
10:40:48 935  	    in_maximum_ip_high => in_maximum_ip_high,
10:40:48 936  	    in_created_by => in_created_by
10:40:48 937  	  );
10:40:48 938  
10:40:48 939  	  -- Check for overlapping ip address range after insert.  Note that if another
10:40:48 940  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
10:40:48 941  	  SELECT count(1) into var_is_dupe
10:40:48 942  	  FROM
10:40:48 943  	    GROUP_ACCOUNT_IP_RANGE
10:40:48 944  	  WHERE
10:40:48 945  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V22.GROUP_ACC_IP_RNG_ACTIVE AND
10:40:48 946  		((
10:40:48 947  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
10:40:48 948  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
10:40:48 949  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
10:40:48 950  		) OR
10:40:48 951  
10:40:48 952  		(
10:40:48 953  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
10:40:48 954  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
10:40:48 955  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
10:40:48 956  		)) AND
10:40:48 957  	    ROWNUM < 3;
10:40:48 958  
10:40:48 959  	  If(var_is_dupe > 1) THEN
10:40:48 960  	    RAISE DUPE;
10:40:48 961  	  END IF;
10:40:48 962  EXCEPTION
10:40:48 963  WHEN NOT_GL THEN
10:40:48 964  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 965  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
10:40:48 966  WHEN DUPE THEN
10:40:48 967  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 968  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
10:40:48 969  WHEN OTHERS THEN
10:40:48 970  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 971  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 972  END ADD_IP_RANGE;
10:40:48 973  
10:40:48 974  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
10:40:48 975  	in_group_account_id IN NUMBER,
10:40:48 976  	out_group_id OUT NUMBER
10:40:48 977  ) AS
10:40:48 978  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
10:40:48 979  BEGIN
10:40:48 980  	SELECT
10:40:48 981  	  a.group_id into out_group_id
10:40:48 982  	FROM
10:40:48 983  	  account a,
10:40:48 984  	  subscription s,
10:40:48 985  	  group_account ga
10:40:48 986  	WHERE
10:40:48 987  	  a.id = s.account_id and
10:40:48 988  	  s.id = ga.subscription_id and
10:40:48 989  	  ga.id = in_group_account_id and
10:40:48 990  	  rownum < 2
10:40:48 991  	;
10:40:48 992  EXCEPTION
10:40:48 993  WHEN NO_DATA_FOUND THEN
10:40:48 994  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 995  	  SPROC_NAME, 'Bad group_account_id');
10:40:48 996  WHEN OTHERS THEN
10:40:48 997  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 998  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 999  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
10:40:48 1000  
10:40:48 1001  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
10:40:48 1002  	 in_group_account_ip_range_id IN NUMBER,
10:40:48 1003  	 out_group_id OUT NUMBER
10:40:48 1004  ) AS
10:40:48 1005  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
10:40:48 1006  BEGIN
10:40:48 1007  	 SELECT
10:40:48 1008  	   a.group_id into out_group_id
10:40:48 1009  	 FROM
10:40:48 1010  	   account a,
10:40:48 1011  	   subscription s,
10:40:48 1012  	   group_account ga,
10:40:48 1013  	   group_account_ip_range ir
10:40:48 1014  	 WHERE
10:40:48 1015  	   a.id = s.account_id and
10:40:48 1016  	   s.id = ga.subscription_id and
10:40:48 1017  	   ga.id = ir.group_account_id and
10:40:48 1018  	   ir.id = in_group_account_ip_range_id and
10:40:48 1019  	   rownum < 2
10:40:48 1020  	 ;
10:40:48 1021  EXCEPTION
10:40:48 1022  WHEN NO_DATA_FOUND THEN
10:40:48 1023  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1024  	   SPROC_NAME, 'Bad group_account_ip_range_id');
10:40:48 1025  WHEN OTHERS THEN
10:40:48 1026  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1027  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1028  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
10:40:48 1029  
10:40:48 1030  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
10:40:48 1031  	 in_group_account_email_dom_id IN NUMBER,
10:40:48 1032  	 out_group_id OUT NUMBER
10:40:48 1033  ) AS
10:40:48 1034  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
10:40:48 1035  BEGIN
10:40:48 1036  	 SELECT
10:40:48 1037  	   a.group_id into out_group_id
10:40:48 1038  	 FROM
10:40:48 1039  	   account a,
10:40:48 1040  	   subscription s,
10:40:48 1041  	   group_account ga,
10:40:48 1042  	   group_account_email_domain ir
10:40:48 1043  	 WHERE
10:40:48 1044  	   a.id = s.account_id and
10:40:48 1045  	   s.id = ga.subscription_id and
10:40:48 1046  	   ga.id = ir.group_account_id and
10:40:48 1047  	   ir.id = in_group_account_email_dom_id and
10:40:48 1048  	   rownum < 2
10:40:48 1049  	 ;
10:40:48 1050  EXCEPTION
10:40:48 1051  WHEN NO_DATA_FOUND THEN
10:40:48 1052  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1053  	   SPROC_NAME, 'Bad group_account_ip_range_id');
10:40:48 1054  WHEN OTHERS THEN
10:40:48 1055  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1056  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1057  END GET_GRP_ID_BY_EMAIL_DOM_ID;
10:40:48 1058  
10:40:48 1059  PROCEDURE UPDATE_GROUP_ACCOUNT (
10:40:48 1060  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
10:40:48 1061  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
10:40:48 1062  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
10:40:48 1063  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
10:40:48 1064  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
10:40:48 1065  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
10:40:48 1066  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:48 1067  ) AS
10:40:48 1068  BEGIN
10:40:48 1069  	 PROCS_GROUP_ACCOUNT_CRU_V22.UPDATE_GROUP_ACCOUNT(
10:40:48 1070  	   in_group_account_id => in_group_account_id,
10:40:48 1071  	   in_group_name => in_group_name,
10:40:48 1072  	   in_first_name => in_first_name,
10:40:48 1073  	   in_last_name => in_last_name,
10:40:48 1074  	   in_email => in_email,
10:40:48 1075  	   in_phone => in_phone,
10:40:48 1076  	   in_updated_by => in_updated_by
10:40:48 1077  	 );
10:40:48 1078  END UPDATE_GROUP_ACCOUNT;
10:40:48 1079  
10:40:48 1080  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
10:40:48 1081  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
10:40:48 1082  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
10:40:48 1083  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
10:40:48 1084  ) AS
10:40:48 1085  BEGIN
10:40:48 1086  	 PROCS_GROUP_ACCOUNT_CRU_V22.UPDATE_GROUP_ACCOUNT_SEATS(
10:40:48 1087  	   in_group_account_id => in_group_account_id,
10:40:48 1088  	   in_seats => in_seats,
10:40:48 1089  	   in_updated_by => in_updated_by
10:40:48 1090  	 );
10:40:48 1091  END UPDATE_GROUP_ACCOUNT_SEATS;
10:40:48 1092  
10:40:48 1093  END PROCS_GROUP_ACCOUNT_V22;
10:40:48 1094  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE TEST_CLEAR_ALL IS
10:40:48   4  BEGIN
10:40:48   5  	DELETE FROM TAX_ADJUSTMENT;
10:40:48   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
10:40:48   7  	DELETE FROM INVOICE_ADJUSTMENT;
10:40:48   8  	DELETE FROM LICENSE;
10:40:48   9  	DELETE FROM OFFER_OFFER_CHAIN;
10:40:48  10  	delete from offer_product_offering;
10:40:48  11  	delete from tax;
10:40:48  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
10:40:48  13  	delete from discount_line_item; -- ?
10:40:48  14  	delete from discount; -- ?
10:40:48  15  	DELETE FROM LINE_ITEM;
10:40:48  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
10:40:48  17  	DELETE FROM PRODUCT_OFFERING;
10:40:48  18  	DELETE FROM PRODUCT;
10:40:48  19  	DELETE FROM INVOICE_NOTE;
10:40:48  20  	DELETE FROM GIFT_CERTIFICATE;
10:40:48  21  	DELETE FROM OFFER;
10:40:48  22  	DELETE FROM OFFER_CHAIN_META_DATA;
10:40:48  23  	DELETE FROM SUBSCRIPTION_NOTE;
10:40:48  24  	DELETE FROM SUBSCRIPTION_META_DATA;
10:40:48  25  	DELETE FROM SUBSCRIPTION;
10:40:48  26  	DELETE FROM CREDIT_CARD;
10:40:48  27  	DELETE FROM FLAGGED_ACCOUNTS;
10:40:48  28  	DELETE FROM ACCOUNT_NOTE;
10:40:48  29  	DELETE FROM ACCOUNT_LOCK;
10:40:48  30  	DELETE FROM ACCOUNT;
10:40:48  31  	DELETE FROM CHARGE;
10:40:48  32  	DELETE FROM TRANSACTION_ATTEMPT;
10:40:48  33  	DELETE FROM CHARGEBACK;
10:40:48  34  	DELETE FROM TRANSACTION;
10:40:48  35  	DELETE FROM INVOICE_NOTE;
10:40:48  36  	DELETE FROM INVOICE;
10:40:48  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
10:40:48  38  	DELETE FROM OFFER_CHAIN;
10:40:48  39  END TEST_CLEAR_ALL;
10:40:48  40  
10:40:48  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
10:40:48  42  BEGIN
10:40:48  43  	DELETE FROM OFFER_OFFER_CHAIN;
10:40:48  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
10:40:48  45  	DELETE FROM TAX;
10:40:48  46  	DELETE FROM PRODUCT_OFFERING;
10:40:48  47  	DELETE FROM PRODUCT;
10:40:48  48  	DELETE FROM OFFER;
10:40:48  49  	DELETE FROM OFFER_CHAIN_META_DATA;
10:40:48  50  	DELETE FROM OFFER_CHAIN;
10:40:48  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
10:40:48  52  END;
10:40:48  53  
10:40:48  54  /******************************************/
10:40:48  55  
10:40:48  56  PROCEDURE TEST_GET_ACCOUNT (
10:40:48  57  	in_group_id	IN NUMBER,
10:40:48  58  	out_result_set	OUT SYS_REFCURSOR
10:40:48  59  ) AS
10:40:48  60  BEGIN
10:40:48  61  
10:40:48  62  	OPEN out_result_set FOR
10:40:48  63  	SELECT *
10:40:48  64  	FROM
10:40:48  65  	  ACCOUNT
10:40:48  66  	WHERE
10:40:48  67  	  ACCOUNT.GROUP_ID = in_group_id;
10:40:48  68  
10:40:48  69  END TEST_GET_ACCOUNT;
10:40:48  70  
10:40:48  71  /*******************************************/
10:40:48  72  
10:40:48  73  PROCEDURE TEST_GET_SUBSCRIPTION (
10:40:48  74  	in_subscription_id IN NUMBER,
10:40:48  75  	out_result_set	   OUT SYS_REFCURSOR
10:40:48  76  ) AS
10:40:48  77  BEGIN
10:40:48  78  	OPEN out_result_set FOR
10:40:48  79  	SELECT *
10:40:48  80  	FROM
10:40:48  81  	  SUBSCRIPTION
10:40:48  82  	WHERE
10:40:48  83  	  SUBSCRIPTION.ID = in_subscription_id;
10:40:48  84  
10:40:48  85  END TEST_GET_SUBSCRIPTION;
10:40:48  86  
10:40:48  87  /***************************************************/
10:40:48  88  
10:40:48  89  PROCEDURE TEST_DELETE_INVOICE (
10:40:48  90  	in_invoice_id IN NUMBER
10:40:48  91  ) AS
10:40:48  92  var_line_item_id_set SYS_REFCURSOR;
10:40:48  93  var_line_item_id	   NUMBER;
10:40:48  94  
10:40:48  95  var_charge_id_set  SYS_REFCURSOR;
10:40:48  96  var_charge_id	 NUMBER;
10:40:48  97  var_transaction_id NUMBER;
10:40:48  98  BEGIN
10:40:48  99  	-- GET ACCOUNT'S LINE_ITEMS
10:40:48 100  	OPEN var_line_item_id_set FOR
10:40:48 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
10:40:48 102  	LOOP
10:40:48 103  	  FETCH var_line_item_id_set into var_line_item_id;
10:40:48 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
10:40:48 105  
10:40:48 106  	  -- DELETE ADJUSTMENTS
10:40:48 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
10:40:48 108  	  LOOP
10:40:48 109  
10:40:48 110  	    -- DELETE DISCOUNT ADJUSTMENTS
10:40:48 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
10:40:48 112  
10:40:48 113  	    -- DELETE TAX ADJUSTMENTS
10:40:48 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
10:40:48 115  	  END LOOP;
10:40:48 116  
10:40:48 117  	  -- DELETE LINE ITEM ADJUSTMENTS
10:40:48 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
10:40:48 119  
10:40:48 120  	  -- DELETE DISCOUNT_LINE_ITEM
10:40:48 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
10:40:48 122  
10:40:48 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
10:40:48 124  
10:40:48 125  	  -- DELETE LINE ITEM
10:40:48 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
10:40:48 127  
10:40:48 128  	END LOOP;
10:40:48 129  
10:40:48 130  	-- DELETE INVOICE ADJUSTMENTS
10:40:48 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
10:40:48 132  
10:40:48 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
10:40:48 134  	OPEN var_charge_id_set FOR
10:40:48 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
10:40:48 136  	LOOP
10:40:48 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
10:40:48 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
10:40:48 139  	  -- DELETE CHARGEBACK
10:40:48 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
10:40:48 141  
10:40:48 142  	  -- DELETE TRANSACTION ATTEMP
10:40:48 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
10:40:48 144  
10:40:48 145  	  -- DELETE CHARGE
10:40:48 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
10:40:48 147  
10:40:48 148  	  -- DELETE TRANSACTION
10:40:48 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
10:40:48 150  	END LOOP;
10:40:48 151  
10:40:48 152  	-- DELETE INVOICE NOTES
10:40:48 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
10:40:48 154  
10:40:48 155  	-- DELETE INVOICE
10:40:48 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
10:40:48 157  END;
10:40:48 158  
10:40:48 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
10:40:48 160  	in_group_id IN NUMBER
10:40:48 161  ) AS
10:40:48 162  -- VARIABLES
10:40:48 163  var_account_id NUMBER;
10:40:48 164  
10:40:48 165  -- CURSORS
10:40:48 166  var_subscription_id_set SYS_REFCURSOR;
10:40:48 167  var_subscription_id     NUMBER;
10:40:48 168  
10:40:48 169  var_license_id_set SYS_REFCURSOR;
10:40:48 170  var_license_id	 NUMBER;
10:40:48 171  var_invoice_id	 NUMBER;
10:40:48 172  
10:40:48 173  var_gift_certificate_id_set SYS_REFCURSOR;
10:40:48 174  var_gift_certificate_id	  NUMBER;
10:40:48 175  var_gc_purchase_invoice_id  NUMBER;
10:40:48 176  BEGIN
10:40:48 177  
10:40:48 178   /*FOR f_account in (
10:40:48 179  	  select id from account where group_id = in_group_id
10:40:48 180  	)
10:40:48 181  	loop
10:40:48 182  
10:40:48 183  	  -- delete account
10:40:48 184  	  delete from account where id = f_account.id;
10:40:48 185  
10:40:48 186  	end loop;*/
10:40:48 187  
10:40:48 188  	BEGIN
10:40:48 189  	  SELECT
10:40:48 190  	    ACCOUNT.ID into var_account_id
10:40:48 191  	  FROM
10:40:48 192  	    ACCOUNT
10:40:48 193  	  WHERE
10:40:48 194  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 195  	  EXCEPTION
10:40:48 196  	    WHEN NO_DATA_FOUND THEN
10:40:48 197  	      -- Nothing to do
10:40:48 198  	      RETURN;
10:40:48 199  	END;
10:40:48 200  
10:40:48 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
10:40:48 202  	OPEN var_subscription_id_set FOR
10:40:48 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
10:40:48 204  	LOOP
10:40:48 205  	  FETCH var_subscription_id_set into var_subscription_id;
10:40:48 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
10:40:48 207  
10:40:48 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
10:40:48 209  	  OPEN var_license_id_set FOR
10:40:48 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
10:40:48 211  	  LOOP
10:40:48 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
10:40:48 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
10:40:48 214  
10:40:48 215  
10:40:48 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
10:40:48 217  	    OPEN var_gift_certificate_id_set FOR
10:40:48 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
10:40:48 219  	    LOOP
10:40:48 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
10:40:48 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
10:40:48 222  
10:40:48 223  	      -- DELETE GIFT_CERTIFICATE
10:40:48 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
10:40:48 225  
10:40:48 226  	      -- DELETE LICENSE
10:40:48 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
10:40:48 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
10:40:48 229  	      END IF;
10:40:48 230  
10:40:48 231  	    END LOOP;
10:40:48 232  
10:40:48 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
10:40:48 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
10:40:48 235  
10:40:48 236  	    -- DELETE LICENSE
10:40:48 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
10:40:48 238  
10:40:48 239  	    -- DELETE INVOICE
10:40:48 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
10:40:48 241  	      TEST_DELETE_INVOICE(var_invoice_id);
10:40:48 242  	    END IF;
10:40:48 243  	  END LOOP;
10:40:48 244  
10:40:48 245  	  -- DELETE SUBSCRIPTION_NOTE
10:40:48 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
10:40:48 247  
10:40:48 248  	  -- DELETE SUBSCRIPTION META_DATA
10:40:48 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
10:40:48 250  
10:40:48 251  	  -- DELETE SUBSCRIPTION
10:40:48 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
10:40:48 253  	END LOOP;
10:40:48 254  
10:40:48 255  	-- DELETE CREDIT_CARDS
10:40:48 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
10:40:48 257  
10:40:48 258  	-- DELETE PAYPAL
10:40:48 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
10:40:48 260  
10:40:48 261  	-- DELETE FLAGS
10:40:48 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
10:40:48 263  
10:40:48 264  	-- DELETE ACCOUNT NOTES
10:40:48 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
10:40:48 266  
10:40:48 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
10:40:48 268  	OPEN var_gift_certificate_id_set FOR
10:40:48 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:40:48 270  	LOOP
10:40:48 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
10:40:48 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
10:40:48 273  
10:40:48 274  	  -- DELETE GIFT CERTIFICATE
10:40:48 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
10:40:48 276  
10:40:48 277  	  -- DELETE INVOICE
10:40:48 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
10:40:48 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
10:40:48 280  	  END IF;
10:40:48 281  	END LOOP;
10:40:48 282  
10:40:48 283  	-- DELETE LOCKS
10:40:48 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
10:40:48 285  
10:40:48 286  	-- DELETE ACCOUNT
10:40:48 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
10:40:48 288  
10:40:48 289  END TEST_DELETE_USER_ACCOUNT;
10:40:48 290  
10:40:48 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
10:40:48 292  	in_start_group_id IN NUMBER,
10:40:48 293  	in_end_group_id   IN NUMBER
10:40:48 294  ) IS
10:40:48 295   gid ACCOUNT.GROUP_ID%TYPE;
10:40:48 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
10:40:48 297  BEGIN
10:40:48 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
10:40:48 299  	/*
10:40:48 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
10:40:48 301  	LOOP
10:40:48 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
10:40:48 303  	END LOOP;*/
10:40:48 304  	OPEN c(in_start_group_id, in_end_group_id);
10:40:48 305  	WHILE c%ISOPEN LOOP
10:40:48 306  	  FETCH c INTO gid;
10:40:48 307  	  IF c%NOTFOUND THEN
10:40:48 308  	   CLOSE c;
10:40:48 309  	  END IF;
10:40:48 310  	  TEST_DELETE_USER_ACCOUNT(gid);
10:40:48 311  	END LOOP;
10:40:48 312  END;
10:40:48 313  
10:40:48 314  /**********************************************************/
10:40:48 315  
10:40:48 316  FUNCTION TEST_IS_INVOICE_EXISTS(
10:40:48 317  /*
10:40:48 318  1 - exists
10:40:48 319  0 - not exists
10:40:48 320  */
10:40:48 321  	in_invoice_id IN NUMBER
10:40:48 322  ) RETURN NUMBER AS
10:40:48 323  var_invoice_count NUMBER;
10:40:48 324  BEGIN
10:40:48 325  	SELECT
10:40:48 326  	  COUNT(*) into var_invoice_count
10:40:48 327  	FROM
10:40:48 328  	  INVOICE
10:40:48 329  	WHERE
10:40:48 330  	  INVOICE.ID = in_invoice_id;
10:40:48 331  	IF var_invoice_count = 0 THEN
10:40:48 332  	  RETURN 0;
10:40:48 333  	ELSE
10:40:48 334  	  RETURN 1;
10:40:48 335  	END IF;
10:40:48 336  END;
10:40:48 337  
10:40:48 338  PROCEDURE TEST_GET_INVOICE_INFO (
10:40:48 339  	in_invoice_id  IN NUMBER,
10:40:48 340  	out_result_set OUT SYS_REFCURSOR
10:40:48 341  ) AS
10:40:48 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
10:40:48 343  BEGIN
10:40:48 344  
10:40:48 345  	 OPEN out_result_set FOR SELECT
10:40:48 346  	    in_invoice_id AS "INVOICE_ID",
10:40:48 347  	    INVOICE.INVOICE_STATUS_ID,
10:40:48 348  	    PROCS_INVOICE_V22.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
10:40:48 349  	    CHARGE.ID AS "CHARGE_ID",
10:40:48 350  	    CHARGE.CHARGE_AMOUNT,
10:40:48 351  	    CHARGE.TRANSACTION_ID,
10:40:48 352  	    TRANSACTION.TRANSACTION_STATUS_ID
10:40:48 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
10:40:48 354  
10:40:48 355  END TEST_GET_INVOICE_INFO;
10:40:48 356  
10:40:48 357  /******************************************************************************/
10:40:48 358  
10:40:48 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
10:40:48 360  	in_offer_chain_id in number
10:40:48 361  ) as
10:40:48 362  begin
10:40:48 363  
10:40:48 364  	for v_offer_chain in (
10:40:48 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
10:40:48 366  	)
10:40:48 367  	loop
10:40:48 368  
10:40:48 369  	  for v_offer in (
10:40:48 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
10:40:48 371  	  )
10:40:48 372  	  loop
10:40:48 373  
10:40:48 374  	    for v_product_offering in (
10:40:48 375  	      select
10:40:48 376  		product_offering.id,
10:40:48 377  		product_offering.product_id
10:40:48 378  	      from
10:40:48 379  		offer_product_offering
10:40:48 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
10:40:48 381  	      where offer_product_offering.offer_id = v_offer.id
10:40:48 382  	    )
10:40:48 383  	    loop
10:40:48 384  
10:40:48 385  	      -- delete product eligibility
10:40:48 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
10:40:48 387  
10:40:48 388  	      -- delete meta data
10:40:48 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
10:40:48 390  
10:40:48 391  	      -- delete product
10:40:48 392  	      delete from product where id = v_product_offering.product_id;
10:40:48 393  
10:40:48 394  	      -- delete product_offering
10:40:48 395  	      delete from product_offering where id = v_product_offering.id;
10:40:48 396  
10:40:48 397  	    end loop;
10:40:48 398  
10:40:48 399  	    -- delete data from offer_product_offering table
10:40:48 400  	    delete from offer_product_offering where offer_id = v_offer.id;
10:40:48 401  
10:40:48 402  	    -- delete data from offer_offer_chain table
10:40:48 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
10:40:48 404  
10:40:48 405  	    -- delete offer
10:40:48 406  	    delete from offer where id = v_offer.id;
10:40:48 407  
10:40:48 408  	  end loop;
10:40:48 409  
10:40:48 410  	  -- delete offer_chain_eligibility
10:40:48 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
10:40:48 412  
10:40:48 413  	  -- delete metadata
10:40:48 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
10:40:48 415  
10:40:48 416  	  -- delete offer chain
10:40:48 417  	  delete from offer_chain where id = v_offer_chain.id;
10:40:48 418  
10:40:48 419  	end loop;
10:40:48 420  
10:40:48 421  end;
10:40:48 422  
10:40:48 423  END PROCS_TEST_V22;
10:40:48 424  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
10:40:48   4  	in_group_id    IN  NUMBER,
10:40:48   5  	out_result_set OUT SYS_REFCURSOR
10:40:48   6  ) AS
10:40:48   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
10:40:48   8  BEGIN
10:40:48   9  	OPEN out_result_set FOR
10:40:48  10  	SELECT
10:40:48  11  	  Invoice.Id
10:40:48  12  	FROM
10:40:48  13  	  LICENSE
10:40:48  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:48  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
10:40:48  18  	Where
10:40:48  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
10:40:48  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V22.INVOICE_OPEN;
10:40:48  21  END INVOICE_IDS_BY_GROUP_ID;
10:40:48  22  
10:40:48  23  FUNCTION GET_GRACE_START_DATE(
10:40:48  24  	in_subscription_id IN NUMBER
10:40:48  25  ) RETURN DATE AS
10:40:48  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
10:40:48  27  grace_start_date_var DATE;
10:40:48  28  BEGIN
10:40:48  29  	SELECT GRACE_START_DATE into grace_start_date_var
10:40:48  30  	FROM
10:40:48  31  	  (
10:40:48  32  	    SELECT
10:40:48  33  	      GRACE_START_DATE
10:40:48  34  	    FROM
10:40:48  35  	      LICENSE
10:40:48  36  	    WHERE
10:40:48  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:48  38  	    ORDER BY
10:40:48  39  	      LICENSE.END_DATE DESC
10:40:48  40  	  )
10:40:48  41  	WHERE
10:40:48  42  	  ROWNUM <= 1;
10:40:48  43  
10:40:48  44  	RETURN grace_start_date_var;
10:40:48  45  END GET_GRACE_START_DATE;
10:40:48  46  
10:40:48  47  FUNCTION GET_GRACE_END_DATE(
10:40:48  48  	in_subscription_id IN NUMBER
10:40:48  49  ) RETURN DATE AS
10:40:48  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
10:40:48  51  grace_end_date_var DATE;
10:40:48  52  BEGIN
10:40:48  53  	SELECT GRACE_END_DATE into grace_end_date_var
10:40:48  54  	FROM
10:40:48  55  	  (
10:40:48  56  	    SELECT
10:40:48  57  	      GRACE_END_DATE
10:40:48  58  	    FROM
10:40:48  59  	      LICENSE
10:40:48  60  	    WHERE
10:40:48  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
10:40:48  62  	    ORDER BY
10:40:48  63  	      LICENSE.END_DATE DESC
10:40:48  64  	  )
10:40:48  65  	WHERE ROWNUM <= 1;
10:40:48  66  
10:40:48  67  	RETURN grace_end_date_var;
10:40:48  68  END GET_GRACE_END_DATE;
10:40:48  69  
10:40:48  70  
10:40:48  71  
10:40:48  72  PROCEDURE ANNOTATE_ACCOUNT (
10:40:48  73  	in_group_id   IN  NUMBER,
10:40:48  74  	in_agent_id   IN  NUMBER,
10:40:48  75  	in_note       IN  VARCHAR2,
10:40:48  76  	in_created_by IN  VARCHAR2
10:40:48  77  ) AS
10:40:48  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
10:40:48  79  -- VARIABLES
10:40:48  80  var_account_id	  NUMBER;
10:40:48  81  var_account_note_id NUMBER;
10:40:48  82  -- EXCEPTIONS
10:40:48  83  BAD_ACCOUNT_ID EXCEPTION;
10:40:48  84  BEGIN
10:40:48  85  
10:40:48  86  	-- Get account id
10:40:48  87  	BEGIN
10:40:48  88  	  SELECT
10:40:48  89  	    ACCOUNT.ID into var_account_id
10:40:48  90  	  FROM
10:40:48  91  	    ACCOUNT
10:40:48  92  	  WHERE
10:40:48  93  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48  94  	  EXCEPTION
10:40:48  95  	    WHEN NO_DATA_FOUND THEN
10:40:48  96  	      RAISE BAD_ACCOUNT_ID;
10:40:48  97  	END;
10:40:48  98  
10:40:48  99  	-- Insert new row into ACCOUNT_NOTE table
10:40:48 100  	PROCS_ACCOUNT_CRU_V22.CREATE_ACCOUNT_NOTE(
10:40:48 101  	  inout_account_note_id => var_account_note_id,
10:40:48 102  	  in_agent_id		=> in_agent_id,
10:40:48 103  	  in_account_id 	=> var_account_id,
10:40:48 104  	  in_note		=> in_note,
10:40:48 105  	  in_created_by 	=> in_created_by
10:40:48 106  	);
10:40:48 107  
10:40:48 108  EXCEPTION
10:40:48 109  WHEN BAD_ACCOUNT_ID THEN
10:40:48 110  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 111  	  SPROC_NAME, 'No such group id');
10:40:48 112  WHEN OTHERS THEN
10:40:48 113  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 115  END ANNOTATE_ACCOUNT;
10:40:48 116  
10:40:48 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
10:40:48 118  	in_group_id IN	NUMBER,
10:40:48 119  	out_exists  OUT NUMBER
10:40:48 120  ) AS
10:40:48 121  -- VARIABLES
10:40:48 122  var_found_id  NUMBER;
10:40:48 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
10:40:48 124  BEGIN
10:40:48 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
10:40:48 126  	out_exists := GLOBAL_CONSTANTS_V22.TRUE;
10:40:48 127  EXCEPTION
10:40:48 128  WHEN NO_DATA_FOUND THEN
10:40:48 129  	out_exists := GLOBAL_CONSTANTS_V22.FALSE;
10:40:48 130  WHEN OTHERS THEN
10:40:48 131  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 133  END ASSERT_ACCOUNT_EXISTS;
10:40:48 134  
10:40:48 135  PROCEDURE DISABLE_ACCOUNT (
10:40:48 136  	in_group_id   IN NUMBER,
10:40:48 137  	in_updated_by IN VARCHAR2,
10:40:48 138  	in_note       IN VARCHAR2,
10:40:48 139  	in_agent_id   IN NUMBER
10:40:48 140  ) AS
10:40:48 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
10:40:48 142  var_account_id	      NUMBER;
10:40:48 143  current_account_status  NUMBER;
10:40:48 144  
10:40:48 145  var_active_subscriptions_num NUMBER;
10:40:48 146  var_pending_invoices_num	   NUMBER;
10:40:48 147  
10:40:48 148  -- EXCEPTIONS
10:40:48 149  BAD_ACOUNT_ID		EXCEPTION;
10:40:48 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
10:40:48 151  PENDING_INVOICES_FOUND	EXCEPTION;
10:40:48 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
10:40:48 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
10:40:48 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
10:40:48 155  BEGIN
10:40:48 156  
10:40:48 157  	-- Get account's status and id
10:40:48 158  	BEGIN
10:40:48 159  	  SELECT
10:40:48 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
10:40:48 161  	    ACCOUNT.ID
10:40:48 162  	  INTO
10:40:48 163  	    current_account_status,
10:40:48 164  	    var_account_id
10:40:48 165  	  FROM ACCOUNT
10:40:48 166  	  WHERE
10:40:48 167  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 168  	  EXCEPTION
10:40:48 169  	    WHEN NO_DATA_FOUND THEN
10:40:48 170  	      RAISE BAD_ACOUNT_ID;
10:40:48 171  	END;
10:40:48 172  
10:40:48 173  	-- For now, we can disable account whenever
10:40:48 174  	IF current_account_status = GLOBAL_STATUSES_V22.ACCOUNT_DISABLED THEN
10:40:48 175  	  RAISE BAD_CURRENT_ACC_STATUS;
10:40:48 176  	END IF;
10:40:48 177  
10:40:48 178  	-- Checks for out outstanding balances
10:40:48 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
10:40:48 180  	SELECT
10:40:48 181  	  COUNT(*) into var_pending_invoices_num
10:40:48 182  	FROM
10:40:48 183  	  LICENSE
10:40:48 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:48 186  	WHERE
10:40:48 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V22.INVOICE_OPEN FROM DUAL );
10:40:48 189  
10:40:48 190  	IF var_pending_invoices_num > 0 THEN
10:40:48 191  	  RAISE PENDING_INVOICES_FOUND;
10:40:48 192  	END IF;
10:40:48 193  
10:40:48 194  	SELECT
10:40:48 195  	  COUNT(*) into var_active_subscriptions_num
10:40:48 196  	FROM
10:40:48 197  	  SUBSCRIPTION
10:40:48 198  	WHERE
10:40:48 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 200  	  AND (
10:40:48 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE
10:40:48 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_SUSPENDED
10:40:48 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_IN_GRACE_PERIOD);
10:40:48 204  
10:40:48 205  	IF var_active_subscriptions_num > 0 THEN
10:40:48 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
10:40:48 207  	END IF;
10:40:48 208  
10:40:48 209  	PROCS_ACCOUNT_V22.UPDATE_ACCOUNT_STATUS(
10:40:48 210  	  in_account_id        => var_account_id,
10:40:48 211  	  in_account_status_id => GLOBAL_STATUSES_V22.ACCOUNT_DISABLED,
10:40:48 212  	  in_updated_by        => in_updated_by
10:40:48 213  	);
10:40:48 214  
10:40:48 215  	-- Annotate account
10:40:48 216  	IF in_note IS NOT NULL THEN
10:40:48 217  	  BEGIN
10:40:48 218  	    PROCS_ACCOUNT_V22.ANNOTATE_ACCOUNT(
10:40:48 219  	      in_group_id   => in_group_id,
10:40:48 220  	      in_agent_id   => in_agent_id,
10:40:48 221  	      in_note	    => in_note,
10:40:48 222  	      in_created_by => in_updated_by
10:40:48 223  	    );
10:40:48 224  	    EXCEPTION
10:40:48 225  	      WHEN OTHERS THEN
10:40:48 226  		EXCEPTION_MESSAGE := SQLERRM;
10:40:48 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
10:40:48 228  	  END;
10:40:48 229  	END IF;
10:40:48 230  
10:40:48 231  EXCEPTION
10:40:48 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
10:40:48 233  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
10:40:48 235  WHEN BAD_CURRENT_ACC_STATUS THEN
10:40:48 236  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:48 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
10:40:48 238  WHEN PENDING_INVOICES_FOUND THEN
10:40:48 239  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
10:40:48 241  WHEN BAD_ACOUNT_ID THEN
10:40:48 242  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 243  	  SPROC_NAME, 'No such account');
10:40:48 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
10:40:48 245  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
10:40:48 247  WHEN OTHERS THEN
10:40:48 248  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 250  END DISABLE_ACCOUNT;
10:40:48 251  
10:40:48 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
10:40:48 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
10:40:48 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
10:40:48 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
10:40:48 256  ) AS
10:40:48 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
10:40:48 258  var_count  NUMBER  := 0;
10:40:48 259  BEGIN
10:40:48 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
10:40:48 261  
10:40:48 262  	IF (var_count = 0) THEN
10:40:48 263  	  PROCS_ACCOUNT_CRU_V22.CREATE_ACCOUNT(
10:40:48 264  	      out_account_id	    => out_new_account_id,
10:40:48 265  	      in_account_status_id  => GLOBAL_STATUSES_V22.ACCOUNT_ACTIVE,
10:40:48 266  	      in_group_id	    => in_group_id,
10:40:48 267  	      in_created_by	    => in_created_by,
10:40:48 268  	      in_system_category_id => GLOBAL_ENUMS_V22.SYSTEM_CATEGORY_LIVE
10:40:48 269  	  );
10:40:48 270  	ELSE
10:40:48 271  	  out_new_account_id := NULL;
10:40:48 272  	END IF;
10:40:48 273  END CREATE_ACTIVE_ACCOUNT;
10:40:48 274  
10:40:48 275  PROCEDURE REACTIVATE_ACCOUNT (
10:40:48 276  	in_group_id   IN NUMBER,
10:40:48 277  	in_updated_by IN VARCHAR2,
10:40:48 278  	in_note       IN VARCHAR2,
10:40:48 279  	in_agent_id   IN NUMBER
10:40:48 280  ) AS
10:40:48 281  -- VARIABLES
10:40:48 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
10:40:48 283  var_account_id	      NUMBER;
10:40:48 284  current_account_status  NUMBER;
10:40:48 285  
10:40:48 286  -- EXCEPTIONS
10:40:48 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
10:40:48 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
10:40:48 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:48 290  BEGIN
10:40:48 291  	-- Get account id, status
10:40:48 292  	SELECT
10:40:48 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
10:40:48 294  	  ACCOUNT.ID
10:40:48 295  	INTO
10:40:48 296  	  current_account_status,
10:40:48 297  	  var_account_id
10:40:48 298  	FROM ACCOUNT
10:40:48 299  	WHERE
10:40:48 300  	  ACCOUNT.GROUP_ID = in_group_id;
10:40:48 301  
10:40:48 302  	IF current_account_status != GLOBAL_STATUSES_V22.ACCOUNT_FROZEN THEN
10:40:48 303  	  RAISE BAD_CURRENT_ACC_STATUS;
10:40:48 304  	END IF;
10:40:48 305  
10:40:48 306  	-- Change account status
10:40:48 307  	PROCS_ACCOUNT_V22.UPDATE_ACCOUNT_STATUS(
10:40:48 308  	  in_account_id        => var_account_id,
10:40:48 309  	  in_updated_by        => in_updated_by,
10:40:48 310  	  in_account_status_id => GLOBAL_STATUSES_V22.ACCOUNT_ACTIVE
10:40:48 311  	);
10:40:48 312  
10:40:48 313  	-- Add note
10:40:48 314  	BEGIN
10:40:48 315  	  PROCS_ACCOUNT_V22.ANNOTATE_ACCOUNT(
10:40:48 316  	    in_group_id   => in_group_id,
10:40:48 317  	    in_agent_id   => in_agent_id,
10:40:48 318  	    in_note	  => in_note,
10:40:48 319  	    in_created_by => in_updated_by
10:40:48 320  	  );
10:40:48 321  	  EXCEPTION
10:40:48 322  	    WHEN OTHERS THEN
10:40:48 323  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:48 324  	      RAISE CAN_NOT_CREATE_NOTE;
10:40:48 325  	END;
10:40:48 326  
10:40:48 327  EXCEPTION
10:40:48 328  WHEN BAD_CURRENT_ACC_STATUS THEN
10:40:48 329  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:48 330  	  SPROC_NAME, 'Current account status is not "frozen"');
10:40:48 331  WHEN NO_DATA_FOUND THEN
10:40:48 332  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 333  	  SPROC_NAME, 'Could not find account with given group ID');
10:40:48 334  WHEN CAN_NOT_CREATE_NOTE THEN
10:40:48 335  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 336  	  SPROC_NAME, 'Could not annotate account');
10:40:48 337  WHEN OTHERS THEN
10:40:48 338  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 340  END REACTIVATE_ACCOUNT;
10:40:48 341  
10:40:48 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
10:40:48 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
10:40:48 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V22.CREDIT_CARD_ACTIVE,
10:40:48 345  	out_result_set OUT SYS_REFCURSOR
10:40:48 346  ) AS
10:40:48 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
10:40:48 348  BEGIN
10:40:48 349  	OPEN out_result_set FOR
10:40:48 350  	  SELECT
10:40:48 351  	    CREDIT_CARD.ID,
10:40:48 352  	    CREDIT_CARD.ACCOUNT_ID,
10:40:48 353  	    CREDIT_CARD.INSTRUMENT_NAME,
10:40:48 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
10:40:48 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
10:40:48 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
10:40:48 357  	    CREDIT_CARD.STATE,
10:40:48 358  	    CREDIT_CARD.CITY,
10:40:48 359  	    CREDIT_CARD.POSTAL_CODE,
10:40:48 360  	    CREDIT_CARD.COUNTRY,
10:40:48 361  	    CREDIT_CARD.LAST_FOUR_CC,
10:40:48 362  	    CREDIT_CARD.EXPIRATION_DATE,
10:40:48 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
10:40:48 364  	    CREDIT_CARD.SECRET_TOKEN,
10:40:48 365  	    CREDIT_CARD.CREATE_DATE,
10:40:48 366  	    CREDIT_CARD.CREATED_BY,
10:40:48 367  	    CREDIT_CARD.UPDATE_DATE,
10:40:48 368  	    CREDIT_CARD.UPDATED_BY,
10:40:48 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
10:40:48 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
10:40:48 371  	    Credit_Card.Private_Last_Name,
10:40:48 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
10:40:48 373  	  From
10:40:48 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
10:40:48 375  	  Where
10:40:48 376  	    Account.Group_Id = in_group_id
10:40:48 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
10:40:48 378  END GET_ACCOUNT_CREDIT_CARDS;
10:40:48 379  
10:40:48 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
10:40:48 381  	in_group_id	  IN NUMBER,
10:40:48 382  	out_result_gc_set OUT SYS_REFCURSOR,
10:40:48 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.TRUE
10:40:48 384  ) AS
10:40:48 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
10:40:48 386  var_account_id NUMBER;
10:40:48 387  
10:40:48 388  -- Exceptions
10:40:48 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
10:40:48 390  BEGIN
10:40:48 391  
10:40:48 392  	-- Get account id
10:40:48 393  	SELECT
10:40:48 394  	  ACCOUNT.ID INTO var_account_id
10:40:48 395  	FROM
10:40:48 396  	  ACCOUNT
10:40:48 397  	WHERE
10:40:48 398  	  ACCOUNT.GROUP_ID = in_group_id;
10:40:48 399  
10:40:48 400  	-- Check that incoming data is correct
10:40:48 401  	IF in_instr_status != GLOBAL_CONSTANTS_V22.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V22.FALSE THEN
10:40:48 402  	  RAISE WRONG_INSTR_EXCEPTION;
10:40:48 403  	END IF;
10:40:48 404  
10:40:48 405  	OPEN out_result_gc_set FOR
10:40:48 406  	SELECT
10:40:48 407  	  GIFT_CERTIFICATE.ID,
10:40:48 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:40:48 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
10:40:48 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
10:40:48 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
10:40:48 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
10:40:48 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
10:40:48 414  	  GIFT_CERTIFICATE.CODE,
10:40:48 415  	  GIFT_CERTIFICATE.CREATE_DATE,
10:40:48 416  	  GIFT_CERTIFICATE.CREATED_BY,
10:40:48 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
10:40:48 418  	  GIFT_CERTIFICATE.UPDATED_BY,
10:40:48 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
10:40:48 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
10:40:48 421  	  GIFT_CERTIFICATE.SENDER_NAME,
10:40:48 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
10:40:48 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
10:40:48 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
10:40:48 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
10:40:48 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
10:40:48 427  	FROM
10:40:48 428  	  GIFT_CERTIFICATE
10:40:48 429  	WHERE
10:40:48 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:40:48 431  	  AND (
10:40:48 432  		( in_instr_status = GLOBAL_CONSTANTS_V22.TRUE AND
10:40:48 433  		  (
10:40:48 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
10:40:48 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_ACTIVE
10:40:48 436  		  )
10:40:48 437  		)
10:40:48 438  		OR
10:40:48 439  		(
10:40:48 440  		  in_instr_status = GLOBAL_CONSTANTS_V22.FALSE AND
10:40:48 441  		  (
10:40:48 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
10:40:48 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V22.GIFT_CERTIFICATE_ACTIVE
10:40:48 444  		  )
10:40:48 445  		)
10:40:48 446  	      );
10:40:48 447  
10:40:48 448  EXCEPTION
10:40:48 449  WHEN NO_DATA_FOUND THEN
10:40:48 450  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 451  	  SPROC_NAME, 'Can not find account with given group id');
10:40:48 452  WHEN WRONG_INSTR_EXCEPTION THEN
10:40:48 453  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 454  	  SPROC_NAME, 'Wrong gift certificate type');
10:40:48 455  WHEN OTHERS THEN
10:40:48 456  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
10:40:48 459  
10:40:48 460  PROCEDURE GET_ACCOUNT_INFO  (
10:40:48 461  	  in_group_id	    IN	NUMBER,
10:40:48 462  	  out_account_info  OUT SYS_REFCURSOR
10:40:48 463  ) AS
10:40:48 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
10:40:48 465  var_account_id  NUMBER;
10:40:48 466  BEGIN
10:40:48 467  
10:40:48 468  	-- Get account id
10:40:48 469  	SELECT
10:40:48 470  	  ACCOUNT.ID INTO var_account_id
10:40:48 471  	FROM
10:40:48 472  	  ACCOUNT
10:40:48 473  	WHERE
10:40:48 474  	  ACCOUNT.GROUP_ID = in_group_id;
10:40:48 475  
10:40:48 476  	-- Get account info
10:40:48 477  	OPEN out_account_info FOR
10:40:48 478  	  SELECT
10:40:48 479  	    ACCOUNT.ACCOUNT_STATUS_ID
10:40:48 480  	  FROM ACCOUNT
10:40:48 481  	  WHERE
10:40:48 482  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 483  
10:40:48 484  EXCEPTION
10:40:48 485  WHEN NO_DATA_FOUND THEN
10:40:48 486  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 487  	  SPROC_NAME, 'No such account');
10:40:48 488  WHEN OTHERS THEN
10:40:48 489  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
10:40:48 491  END GET_ACCOUNT_INFO;
10:40:48 492  
10:40:48 493  PROCEDURE GET_ACCOUNT_NOTES (
10:40:48 494  	  in_group_id	 IN  NUMBER,
10:40:48 495  	  out_result_set OUT SYS_REFCURSOR
10:40:48 496  ) AS
10:40:48 497  -- VARIABLES
10:40:48 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
10:40:48 499  var_account_id NUMBER;
10:40:48 500  -- EXCEPTIONS
10:40:48 501  BAD_ACCOUNT_ID EXCEPTION;
10:40:48 502  BEGIN
10:40:48 503  
10:40:48 504  	-- Check that account is exists
10:40:48 505  	BEGIN
10:40:48 506  	  SELECT
10:40:48 507  	    ACCOUNT.ID into var_account_id
10:40:48 508  	  FROM
10:40:48 509  	    ACCOUNT
10:40:48 510  	  WHERE
10:40:48 511  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 512  	  EXCEPTION
10:40:48 513  	    WHEN NO_DATA_FOUND THEN
10:40:48 514  	      RAISE BAD_ACCOUNT_ID;
10:40:48 515  	END;
10:40:48 516  
10:40:48 517  	-- Get account notes
10:40:48 518  	OPEN out_result_set FOR
10:40:48 519  	SELECT
10:40:48 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
10:40:48 521  	  ACCOUNT_NOTE.AGENT_ID,
10:40:48 522  	  ACCOUNT_NOTE.CREATE_DATE,
10:40:48 523  	  ACCOUNT_NOTE.CREATED_BY,
10:40:48 524  	  ACCOUNT_NOTE.ID,
10:40:48 525  	  ACCOUNT_NOTE.NOTE
10:40:48 526  	FROM
10:40:48 527  	  ACCOUNT_NOTE
10:40:48 528  	WHERE
10:40:48 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
10:40:48 530  	ORDER BY
10:40:48 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
10:40:48 532  
10:40:48 533  EXCEPTION
10:40:48 534  WHEN BAD_ACCOUNT_ID THEN
10:40:48 535  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 536  	  SPROC_NAME, 'No such account');
10:40:48 537  WHEN OTHERS THEN
10:40:48 538  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 540  END GET_ACCOUNT_NOTES;
10:40:48 541  
10:40:48 542  PROCEDURE GET_ACCOUNT_PAYPALS(
10:40:48 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
10:40:48 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V22.PAYPAL_ACTIVE,
10:40:48 545  	out_result_set OUT SYS_REFCURSOR
10:40:48 546  ) AS
10:40:48 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
10:40:48 548  BEGIN
10:40:48 549  	OPEN out_result_set FOR
10:40:48 550  	  SELECT
10:40:48 551  	    DISTINCT
10:40:48 552  	    PAYPAL.ID,
10:40:48 553  	    PAYPAL.ACCOUNT_ID,
10:40:48 554  	    PAYPAL.INSTRUMENT_NAME,
10:40:48 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
10:40:48 556  	    PAYPAL.CREATE_DATE,
10:40:48 557  	    PAYPAL.CREATED_BY,
10:40:48 558  	    PAYPAL.UPDATE_DATE,
10:40:48 559  	    PAYPAL.UPDATED_BY,
10:40:48 560  	    PAYPAL.PAYPAL_STATUS_ID,
10:40:48 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
10:40:48 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
10:40:48 563  	    PAYPAL.STATE,
10:40:48 564  	    PAYPAL.CITY,
10:40:48 565  	    PAYPAL.POSTAL_CODE,
10:40:48 566  	    PAYPAL.COUNTRY,
10:40:48 567  	    Paypal.Expiration_Date,
10:40:48 568  	    Paypal.Secret_Token,
10:40:48 569  	    decode((SELECT
10:40:48 570  	    Instrument_Id
10:40:48 571  		    FROM ACCOUNT
10:40:48 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
10:40:48 573  	  FROM
10:40:48 574  	      PAYPAL
10:40:48 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
10:40:48 576  	  WHERE
10:40:48 577  	    ACCOUNT.GROUP_ID = in_group_id
10:40:48 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
10:40:48 579  END GET_ACCOUNT_PAYPALS;
10:40:48 580  
10:40:48 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
10:40:48 582  	  in_group_id	 IN  NUMBER,
10:40:48 583  	  in_start_date  IN DATE,
10:40:48 584  	  in_end_date	 IN DATE,
10:40:48 585  	  in_status	 IN NUMBER,
10:40:48 586  	  in_group_account_type IN VARCHAR2,
10:40:48 587  	  out_result_set OUT SYS_REFCURSOR
10:40:48 588  ) AS
10:40:48 589  -- VARIABLES
10:40:48 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
10:40:48 591  var_account_id NUMBER;
10:40:48 592  -- EXCEPTIONS
10:40:48 593  BAD_GROUP_ID	      EXCEPTION;
10:40:48 594  BEGIN
10:40:48 595  	-- Get account id
10:40:48 596  	BEGIN
10:40:48 597  	  SELECT
10:40:48 598  	    ACCOUNT.ID INTO var_account_id
10:40:48 599  	  FROM
10:40:48 600  	    ACCOUNT
10:40:48 601  	  WHERE
10:40:48 602  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 603  	  EXCEPTION
10:40:48 604  	    WHEN NO_DATA_FOUND THEN
10:40:48 605  	      RAISE BAD_GROUP_ID;
10:40:48 606  	END;
10:40:48 607  
10:40:48 608  	-- Get information about account subscriptions
10:40:48 609  	OPEN out_result_set FOR
10:40:48 610  	SELECT
10:40:48 611  	  in_group_id AS "GROUP_ID",
10:40:48 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
10:40:48 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
10:40:48 614  	  SUBSCRIPTION.PURCHASE_DATE,
10:40:48 615  	  SUBSCRIPTION.SUSPEND_DATE,
10:40:48 616  	  SUBSCRIPTION.REACTIVATION_DATE,
10:40:48 617  	  SUBSCRIPTION.CANCELLATION_DATE,
10:40:48 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
10:40:48 619  	  SUBSCRIPTION.INSTRUMENT_ID,
10:40:48 620  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
10:40:48 621  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
10:40:48 622  	  OFFER_CHAIN.NAME,
10:40:48 623  	  OFFER_CHAIN.DESCRIPTION,
10:40:48 624  	  OFFER_CHAIN.PRODUCT_URI,
10:40:48 625  	  PROCS_SUBSCRIPTION_V22.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
10:40:48 626  	  PROCS_SUBSCRIPTION_V22.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
10:40:48 627  	  PROCS_SUBSCRIPTION_V22.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
10:40:48 628  	  PROCS_SUBSCRIPTION_V22.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
10:40:48 629  	  PROCS_SUBSCRIPTION_V22.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
10:40:48 630  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
10:40:48 631  	  (
10:40:48 632  	    SELECT
10:40:48 633  	      MAX(ENTITLEMENT_END_DATE)
10:40:48 634  	      FROM LICENSE
10:40:48 635  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 636  	  )
10:40:48 637  	  as "ENT_END_DATE",
10:40:48 638  	  (
10:40:48 639  	    SELECT
10:40:48 640  	      MIN(START_DATE)
10:40:48 641  	      FROM LICENSE
10:40:48 642  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 643  	  )
10:40:48 644  	  as "ENT_START_DATE",
10:40:48 645  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
10:40:48 646  	  GROUP_ACCOUNT.ID GA_ID,
10:40:48 647  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
10:40:48 648  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
10:40:48 649  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
10:40:48 650  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
10:40:48 651  	  GROUP_ACCOUNT.PHONE GA_PHONE,
10:40:48 652  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
10:40:48 653  	  GROUP_ACCOUNT.SEATS GA_SEATS,
10:40:48 654  	  PROCS_GROUP_ACCOUNT_V22.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
10:40:48 655  	  GROUP_ACCOUNT.IP GA_IP,
10:40:48 656  	  PROCS_SUBSCRIPTION_V22.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
10:40:48 657  	  PROCS_ACCOUNT_V22.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
10:40:48 658  	  PROCS_ACCOUNT_V22.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
10:40:48 659  	FROM
10:40:48 660  	  SUBSCRIPTION
10:40:48 661  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 662  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
10:40:48 663  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
10:40:48 664  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
10:40:48 665  	WHERE
10:40:48 666  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 667  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V22.REAL_TIME_CANCEL_REASON)
10:40:48 668  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
10:40:48 669  	  AND PROCS_COMMON_V22.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V22.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
10:40:48 670  	  AND PROCS_COMMON_V22.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V22.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
10:40:48 671  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
10:40:48 672  
10:40:48 673  EXCEPTION
10:40:48 674  WHEN BAD_GROUP_ID THEN
10:40:48 675  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 676  	  SPROC_NAME, 'Can not find account with given group id');
10:40:48 677  WHEN OTHERS THEN
10:40:48 678  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 680  END GET_ACCOUNT_SUBSCRIPTIONS;
10:40:48 681  
10:40:48 682  PROCEDURE FREEZE_ACCOUNT (
10:40:48 683  	in_group_id   IN NUMBER,
10:40:48 684  	in_updated_by IN VARCHAR2,
10:40:48 685  	in_note       IN VARCHAR2,
10:40:48 686  	in_agent_id   IN NUMBER
10:40:48 687  ) AS
10:40:48 688  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
10:40:48 689  -- VARIABLES
10:40:48 690  var_account_id	    NUMBER;
10:40:48 691  var_account_status_id NUMBER;
10:40:48 692  -- EXCEPTIONS
10:40:48 693  BAD_GROUP_ID	    EXCEPTION;
10:40:48 694  BAD_ACCOUNT_STATUS_ID EXCEPTION;
10:40:48 695  CAN_NOT_CREATE_NOTE   EXCEPTION;
10:40:48 696  EXCEPTION_MESSAGE     VARCHAR2(1024);
10:40:48 697  BEGIN
10:40:48 698  
10:40:48 699  	-- Get account status, account id
10:40:48 700  	BEGIN
10:40:48 701  	  SELECT
10:40:48 702  	    ACCOUNT.ID,
10:40:48 703  	    ACCOUNT.ACCOUNT_STATUS_ID
10:40:48 704  	    into
10:40:48 705  	    var_account_id,
10:40:48 706  	    var_account_status_id
10:40:48 707  	  FROM
10:40:48 708  	    ACCOUNT
10:40:48 709  	  WHERE
10:40:48 710  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 711  	  EXCEPTION
10:40:48 712  	    WHEN NO_DATA_FOUND THEN
10:40:48 713  	      RAISE BAD_GROUP_ID;
10:40:48 714  	END;
10:40:48 715  
10:40:48 716  	-- We can freeze only ACTIVE accounts
10:40:48 717  	IF var_account_status_id != GLOBAL_STATUSES_V22.ACCOUNT_ACTIVE
10:40:48 718  	  AND var_account_status_id != GLOBAL_STATUSES_V22.ACCOUNT_FROZEN THEN
10:40:48 719  	  RAISE BAD_ACCOUNT_STATUS_ID;
10:40:48 720  	END IF;
10:40:48 721  
10:40:48 722  	-- Set account status
10:40:48 723  	PROCS_ACCOUNT_V22.UPDATE_ACCOUNT_STATUS(
10:40:48 724  	  in_account_id        => var_account_id,
10:40:48 725  	  in_updated_by        => in_updated_by,
10:40:48 726  	  in_account_status_id => GLOBAL_STATUSES_V22.ACCOUNT_FROZEN
10:40:48 727  	);
10:40:48 728  
10:40:48 729  	-- Annotate account
10:40:48 730  	BEGIN
10:40:48 731  	  PROCS_ACCOUNT_V22.ANNOTATE_ACCOUNT(
10:40:48 732  	    in_group_id   => in_group_id,
10:40:48 733  	    in_agent_id   => in_agent_id,
10:40:48 734  	    in_note	  => in_note,
10:40:48 735  	    in_created_by => in_updated_by
10:40:48 736  	  );
10:40:48 737  	  EXCEPTION
10:40:48 738  	    WHEN OTHERS THEN
10:40:48 739  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:48 740  	      RAISE CAN_NOT_CREATE_NOTE;
10:40:48 741  	END;
10:40:48 742  
10:40:48 743  EXCEPTION
10:40:48 744  WHEN BAD_GROUP_ID THEN
10:40:48 745  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 746  	  SPROC_NAME, 'No such group id');
10:40:48 747  WHEN BAD_ACCOUNT_STATUS_ID THEN
10:40:48 748  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.STATE_ERROR,
10:40:48 749  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
10:40:48 750  WHEN CAN_NOT_CREATE_NOTE THEN
10:40:48 751  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 752  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
10:40:48 753  WHEN OTHERS THEN
10:40:48 754  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 755  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 756  END FREEZE_ACCOUNT;
10:40:48 757  
10:40:48 758  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
10:40:48 759  	in_group_id	   IN  NUMBER,
10:40:48 760  	in_subscription_id IN NUMBER,
10:40:48 761  	out_result_set	   OUT SYS_REFCURSOR
10:40:48 762  ) AS
10:40:48 763  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
10:40:48 764  -- VARIABLES
10:40:48 765  var_account_id	   NUMBER;
10:40:48 766  temp_subscription_id NUMBER;
10:40:48 767  -- EXCEPTIONS
10:40:48 768  BAD_GROUP_ID	  EXCEPTION;
10:40:48 769  BAD_SUBSCRIPTION_ID EXCEPTION;
10:40:48 770  BEGIN
10:40:48 771  	-- Get account id
10:40:48 772  	BEGIN
10:40:48 773  	  SELECT
10:40:48 774  	    ACCOUNT.ID into var_account_id
10:40:48 775  	  FROM
10:40:48 776  	    ACCOUNT
10:40:48 777  	  WHERE
10:40:48 778  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 779  	  EXCEPTION
10:40:48 780  	    WHEN NO_DATA_FOUND THEN
10:40:48 781  	      RAISE BAD_GROUP_ID;
10:40:48 782  	END;
10:40:48 783  
10:40:48 784  	-- Check that subscription exists
10:40:48 785  	BEGIN
10:40:48 786  	  IF in_subscription_id IS NOT NULL THEN
10:40:48 787  	    SELECT
10:40:48 788  	      SUBSCRIPTION.ID into temp_subscription_id
10:40:48 789  	    FROM
10:40:48 790  	      SUBSCRIPTION
10:40:48 791  	    WHERE
10:40:48 792  	      SUBSCRIPTION.ID = in_subscription_id;
10:40:48 793  	  END IF;
10:40:48 794  	  EXCEPTION
10:40:48 795  	    WHEN NO_DATA_FOUND THEN
10:40:48 796  	      RAISE BAD_SUBSCRIPTION_ID;
10:40:48 797  	END;
10:40:48 798  
10:40:48 799  	OPEN out_result_set FOR
10:40:48 800  	SELECT DISTINCT
10:40:48 801  	  INVOICE.ID as "INVOICE_ID",
10:40:48 802  	  INVOICE.CREATE_DATE,
10:40:48 803  	  INVOICE.INVOICE_STATUS_ID,
10:40:48 804  	  PROCS_INVOICE_V22.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:40:48 805  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:40:48 806  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:40:48 807  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
10:40:48 808  	  NULL as "GC_CODE",
10:40:48 809  	  NULL as "GC_ID"
10:40:48 810  	FROM
10:40:48 811  	  LICENSE
10:40:48 812  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 813  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
10:40:48 814  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 815  	WHERE
10:40:48 816  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 817  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V22.REAL_TIME_CANCEL_REASON)
10:40:48 818  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
10:40:48 819  
10:40:48 820  EXCEPTION
10:40:48 821  WHEN BAD_GROUP_ID THEN
10:40:48 822  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 823  	  SPROC_NAME, 'No such account');
10:40:48 824  WHEN BAD_SUBSCRIPTION_ID THEN
10:40:48 825  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 826  	  SPROC_NAME, 'No such subscription');
10:40:48 827  WHEN OTHERS THEN
10:40:48 828  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 830  END GET_ACCOUNT_SUBSCR_INVOICES;
10:40:48 831  
10:40:48 832  PROCEDURE GET_ACCOUNT_GC_INVOICES (
10:40:48 833  	in_group_id    IN  NUMBER,
10:40:48 834  	out_result_set OUT SYS_REFCURSOR
10:40:48 835  ) AS
10:40:48 836  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
10:40:48 837  -- VARIABLES
10:40:48 838  var_account_id NUMBER;
10:40:48 839  -- EXCEPTIONS
10:40:48 840  BAD_GROUP_ID EXCEPTION;
10:40:48 841  BEGIN
10:40:48 842  	-- Get account id
10:40:48 843  	BEGIN
10:40:48 844  	  SELECT
10:40:48 845  	    ACCOUNT.ID into var_account_id
10:40:48 846  	  FROM
10:40:48 847  	    ACCOUNT
10:40:48 848  	  WHERE
10:40:48 849  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 850  	  EXCEPTION
10:40:48 851  	    WHEN NO_DATA_FOUND THEN
10:40:48 852  	      RAISE BAD_GROUP_ID;
10:40:48 853  	END;
10:40:48 854  
10:40:48 855  	-- Get invoices
10:40:48 856  	OPEN out_result_set FOR
10:40:48 857  	SELECT DISTINCT
10:40:48 858  	  INVOICE.ID as "INVOICE_ID",
10:40:48 859  	  INVOICE.CREATE_DATE,
10:40:48 860  	  INVOICE.INVOICE_STATUS_ID,
10:40:48 861  	  PROCS_INVOICE_V22.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:40:48 862  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:40:48 863  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:40:48 864  	  NULL as "SUBSCRIPTION_ID",
10:40:48 865  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
10:40:48 866  	  GIFT_CERTIFICATE.ID as "GC_ID"
10:40:48 867  	FROM
10:40:48 868  	  GIFT_CERTIFICATE
10:40:48 869  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:40:48 870  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 871  	WHERE
10:40:48 872  	  ROWNUM <= 100 AND
10:40:48 873  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
10:40:48 874  
10:40:48 875  EXCEPTION
10:40:48 876  WHEN BAD_GROUP_ID THEN
10:40:48 877  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 878  	  SPROC_NAME, 'No such account');
10:40:48 879  WHEN OTHERS THEN
10:40:48 880  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 881  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 882  END GET_ACCOUNT_GC_INVOICES;
10:40:48 883  
10:40:48 884  -- norlov: #38580
10:40:48 885  PROCEDURE GET_GC_INVOICE (
10:40:48 886  	in_group_id    IN  NUMBER,
10:40:48 887  	in_gc_code     IN  VARCHAR2,
10:40:48 888  	out_result_set OUT SYS_REFCURSOR
10:40:48 889  ) AS
10:40:48 890  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
10:40:48 891  -- VARIABLES
10:40:48 892  var_account_id NUMBER;
10:40:48 893  -- EXCEPTIONS
10:40:48 894  BAD_GROUP_ID EXCEPTION;
10:40:48 895  BEGIN
10:40:48 896  	-- Get account id
10:40:48 897  	BEGIN
10:40:48 898  	  SELECT
10:40:48 899  	    ACCOUNT.ID into var_account_id
10:40:48 900  	  FROM
10:40:48 901  	    ACCOUNT
10:40:48 902  	  WHERE
10:40:48 903  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 904  	  EXCEPTION
10:40:48 905  	    WHEN NO_DATA_FOUND THEN
10:40:48 906  	      RAISE BAD_GROUP_ID;
10:40:48 907  	END;
10:40:48 908  
10:40:48 909  	-- Get invoice for the GC
10:40:48 910  	OPEN out_result_set FOR
10:40:48 911  	SELECT DISTINCT
10:40:48 912  	  INVOICE.ID as "INVOICE_ID",
10:40:48 913  	  INVOICE.CREATE_DATE,
10:40:48 914  	  INVOICE.INVOICE_STATUS_ID,
10:40:48 915  	  PROCS_INVOICE_V22.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
10:40:48 916  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
10:40:48 917  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
10:40:48 918  	  NULL as "SUBSCRIPTION_ID",
10:40:48 919  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
10:40:48 920  	FROM
10:40:48 921  	  GIFT_CERTIFICATE
10:40:48 922  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
10:40:48 923  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
10:40:48 924  	WHERE
10:40:48 925  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
10:40:48 926  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
10:40:48 927  
10:40:48 928  EXCEPTION
10:40:48 929  WHEN BAD_GROUP_ID THEN
10:40:48 930  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 931  	  SPROC_NAME, 'No such account');
10:40:48 932  WHEN OTHERS THEN
10:40:48 933  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 934  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 935  END GET_GC_INVOICE;
10:40:48 936  
10:40:48 937  PROCEDURE GET_ACCOUNT_PRODUCTS (
10:40:48 938  	in_group_id    IN  NUMBER,
10:40:48 939  	out_result_set OUT SYS_REFCURSOR
10:40:48 940  ) AS
10:40:48 941  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
10:40:48 942  -- VARIABLES
10:40:48 943  var_account_id NUMBER;
10:40:48 944  -- EXCEPTIONS
10:40:48 945  BAD_GROUP_ID EXCEPTION;
10:40:48 946  BEGIN
10:40:48 947  	-- Get account id
10:40:48 948  	BEGIN
10:40:48 949  	  SELECT
10:40:48 950  	    ACCOUNT.ID into var_account_id
10:40:48 951  	  FROM
10:40:48 952  	    ACCOUNT
10:40:48 953  	  WHERE
10:40:48 954  	    ACCOUNT.GROUP_ID = in_group_id;
10:40:48 955  	  EXCEPTION
10:40:48 956  	    WHEN NO_DATA_FOUND THEN
10:40:48 957  	      RAISE BAD_GROUP_ID;
10:40:48 958  	END;
10:40:48 959  
10:40:48 960  	OPEN out_result_set FOR
10:40:48 961  	SELECT DISTINCT
10:40:48 962  	  PRODUCT.ID,
10:40:48 963  	  PRODUCT.NAME
10:40:48 964  	FROM
10:40:48 965  	  PRODUCT
10:40:48 966  	WHERE
10:40:48 967  	  PRODUCT.ID IN (
10:40:48 968  	    SELECT DISTINCT
10:40:48 969  	      PRODUCT_OFFERING.PRODUCT_ID
10:40:48 970  	    FROM
10:40:48 971  	      PRODUCT_OFFERING
10:40:48 972  	    WHERE
10:40:48 973  	      PRODUCT_OFFERING.ID IN (
10:40:48 974  		SELECT DISTINCT
10:40:48 975  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:48 976  		FROM
10:40:48 977  		  OFFER_PRODUCT_OFFERING
10:40:48 978  		WHERE
10:40:48 979  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:48 980  		    SELECT DISTINCT
10:40:48 981  		      OFFER_OFFER_CHAIN.OFFER_ID
10:40:48 982  		    FROM
10:40:48 983  		      OFFER_OFFER_CHAIN
10:40:48 984  		    WHERE
10:40:48 985  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
10:40:48 986  			SELECT DISTINCT
10:40:48 987  			  SUBSCRIPTION.OFFER_CHAIN_ID
10:40:48 988  			FROM
10:40:48 989  			  SUBSCRIPTION
10:40:48 990  			WHERE
10:40:48 991  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 992  		      )
10:40:48 993  		  )
10:40:48 994  	      )
10:40:48 995  	  );
10:40:48 996  
10:40:48 997  EXCEPTION
10:40:48 998  WHEN BAD_GROUP_ID THEN
10:40:48 999  	PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1000  	   SPROC_NAME, 'No such account');
10:40:48 1001  WHEN OTHERS THEN
10:40:48 1002  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1003  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1004  END GET_ACCOUNT_PRODUCTS;
10:40:48 1005  
10:40:48 1006  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
10:40:48 1007  	 in_group_id IN NUMBER,
10:40:48 1008  	 out_result_set     OUT SYS_REFCURSOR
10:40:48 1009  ) AS
10:40:48 1010  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
10:40:48 1011  -- VARIABLES
10:40:48 1012  var_account_id NUMBER;
10:40:48 1013  -- EXCEPTIONS
10:40:48 1014  BAD_GROUP_ID EXCEPTION;
10:40:48 1015  BEGIN
10:40:48 1016  	  -- Get account id
10:40:48 1017  	 BEGIN
10:40:48 1018  	   SELECT
10:40:48 1019  	     ACCOUNT.ID into var_account_id
10:40:48 1020  	   FROM
10:40:48 1021  	     ACCOUNT
10:40:48 1022  	   WHERE
10:40:48 1023  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1024  	   EXCEPTION
10:40:48 1025  	     WHEN NO_DATA_FOUND THEN
10:40:48 1026  	       RAISE BAD_GROUP_ID;
10:40:48 1027  	 END;
10:40:48 1028  
10:40:48 1029  	 OPEN out_result_set FOR
10:40:48 1030  	 SELECT DISTINCT
10:40:48 1031  	   PRODUCT_OFFERING.ID,
10:40:48 1032  	   PRODUCT_OFFERING.PRODUCT_ID,
10:40:48 1033  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
10:40:48 1034  	   PRODUCT_OFFERING.UNIT_PRICE,
10:40:48 1035  	   PRODUCT_OFFERING.QUANTITY,
10:40:48 1036  	   PRODUCT_OFFERING.CREATE_DATE,
10:40:48 1037  	   PRODUCT_OFFERING.CREATED_BY,
10:40:48 1038  	   CAPABILITY.ID CAP_ID,
10:40:48 1039  	   CAPABILITY.CODE CAP_CODE,
10:40:48 1040  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
10:40:48 1041  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
10:40:48 1042  	 FROM
10:40:48 1043  	   OFFER_PRODUCT_OFFERING
10:40:48 1044  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
10:40:48 1045  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
10:40:48 1046  	 WHERE
10:40:48 1047  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
10:40:48 1048  	     SELECT DISTINCT
10:40:48 1049  	       OFFER_OFFER_CHAIN.OFFER_ID
10:40:48 1050  	     FROM
10:40:48 1051  	       OFFER_OFFER_CHAIN
10:40:48 1052  	     WHERE
10:40:48 1053  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
10:40:48 1054  		 SELECT DISTINCT
10:40:48 1055  		   SUBSCRIPTION.OFFER_CHAIN_ID
10:40:48 1056  		 FROM
10:40:48 1057  		   SUBSCRIPTION
10:40:48 1058  		 WHERE
10:40:48 1059  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 1060  	       )
10:40:48 1061  	   );
10:40:48 1062  
10:40:48 1063  EXCEPTION
10:40:48 1064  WHEN BAD_GROUP_ID THEN
10:40:48 1065  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1066  	   SPROC_NAME, 'No such account');
10:40:48 1067  WHEN OTHERS THEN
10:40:48 1068  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1070  END GET_ACCOUNT_PROD_OFFERRINGS;
10:40:48 1071  
10:40:48 1072  PROCEDURE UPDATE_ACCOUNT_STATUS (
10:40:48 1073  	 in_account_id	      IN ACCOUNT.ID%TYPE,
10:40:48 1074  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
10:40:48 1075  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
10:40:48 1076  ) AS
10:40:48 1077  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
10:40:48 1078  -- EXCEPTIONS
10:40:48 1079  BAD_ACCOUNT_ID	      EXCEPTION;
10:40:48 1080  BAD_STATUS_ID	      EXCEPTION;
10:40:48 1081  EXCEPTION_MESSAGE      VARCHAR2(1024);
10:40:48 1082  BEGIN
10:40:48 1083  
10:40:48 1084  	 IF in_account_status_id != GLOBAL_STATUSES_V22.ACCOUNT_ACTIVE
10:40:48 1085  	   AND in_account_status_id != GLOBAL_STATUSES_V22.ACCOUNT_FROZEN
10:40:48 1086  	   AND in_account_status_id != GLOBAL_STATUSES_V22.ACCOUNT_DISABLED THEN
10:40:48 1087  	   RAISE BAD_STATUS_ID;
10:40:48 1088  	 END IF;
10:40:48 1089  
10:40:48 1090  	 PROCS_ACCOUNT_CRU_V22.UPDATE_ACCOUNT(
10:40:48 1091  	   in_account_id	=> in_account_id,
10:40:48 1092  	   in_account_status_id => in_account_status_id,
10:40:48 1093  	   in_updated_by	=> in_updated_by
10:40:48 1094  	 );
10:40:48 1095  
10:40:48 1096  	 IF SQL%ROWCOUNT = 0 THEN
10:40:48 1097  	   RAISE BAD_ACCOUNT_ID;
10:40:48 1098  	 END IF;
10:40:48 1099  
10:40:48 1100  EXCEPTION
10:40:48 1101  WHEN BAD_ACCOUNT_ID THEN
10:40:48 1102  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1103  	   SPROC_NAME, 'No such account');
10:40:48 1104  WHEN BAD_STATUS_ID THEN
10:40:48 1105  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 1106  	   SPROC_NAME, 'Bad status id');
10:40:48 1107  WHEN OTHERS THEN
10:40:48 1108  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1109  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1110  END UPDATE_ACCOUNT_STATUS;
10:40:48 1111  
10:40:48 1112  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
10:40:48 1113  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
10:40:48 1114  	 out_licenses_num OUT NUMBER
10:40:48 1115  ) AS
10:40:48 1116  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
10:40:48 1117  -- VARIABLES
10:40:48 1118  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
10:40:48 1119  -- EXCEPTIONS
10:40:48 1120  BAD_ACCOUNT_ID EXCEPTION;
10:40:48 1121  BEGIN
10:40:48 1122  
10:40:48 1123  	 BEGIN
10:40:48 1124  	   SELECT
10:40:48 1125  	     ACCOUNT.ID into var_account_id
10:40:48 1126  	   FROM
10:40:48 1127  	     ACCOUNT
10:40:48 1128  	   WHERE
10:40:48 1129  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1130  	   EXCEPTION
10:40:48 1131  	     WHEN NO_DATA_FOUND THEN
10:40:48 1132  	       RAISE BAD_ACCOUNT_ID;
10:40:48 1133  	 END;
10:40:48 1134  
10:40:48 1135  	 SELECT
10:40:48 1136  	   COUNT(LICENSE.ID) into out_licenses_num
10:40:48 1137  	 FROM
10:40:48 1138  	   LICENSE
10:40:48 1139  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 1140  	 WHERE
10:40:48 1141  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
10:40:48 1142  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V22.TRUE;
10:40:48 1143  
10:40:48 1144  EXCEPTION
10:40:48 1145  WHEN BAD_ACCOUNT_ID THEN
10:40:48 1146  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1147  	   SPROC_NAME, 'No such group id');
10:40:48 1148  WHEN OTHERS THEN
10:40:48 1149  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1150  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1151  END GET_NEEDS_ENTTL_LICENSES_NUM;
10:40:48 1152  
10:40:48 1153  PROCEDURE SET_TAX_EXEMPT (
10:40:48 1154  	 in_group_id  IN NUMBER,
10:40:48 1155  	 in_exempt_id IN VARCHAR2
10:40:48 1156  ) AS
10:40:48 1157  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
10:40:48 1158  -- VARIABLES
10:40:48 1159  var_account_id NUMBER;
10:40:48 1160  -- EXCEPTIONS
10:40:48 1161  BAD_GROUP_ID EXCEPTION;
10:40:48 1162  BEGIN
10:40:48 1163  
10:40:48 1164  	 BEGIN
10:40:48 1165  	   SELECT
10:40:48 1166  	     ACCOUNT.ID into var_account_id
10:40:48 1167  	   FROM
10:40:48 1168  	     ACCOUNT
10:40:48 1169  	   WHERE
10:40:48 1170  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1171  	   EXCEPTION
10:40:48 1172  	     WHEN NO_DATA_FOUND THEN
10:40:48 1173  	       RAISE BAD_GROUP_ID;
10:40:48 1174  	 END;
10:40:48 1175  
10:40:48 1176  	 UPDATE
10:40:48 1177  	   ACCOUNT
10:40:48 1178  	 SET
10:40:48 1179  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
10:40:48 1180  	 WHERE
10:40:48 1181  	   ACCOUNT.ID = var_account_id;
10:40:48 1182  
10:40:48 1183  EXCEPTION
10:40:48 1184  WHEN BAD_GROUP_ID THEN
10:40:48 1185  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1186  	   SPROC_NAME, 'No such group id');
10:40:48 1187  WHEN OTHERS THEN
10:40:48 1188  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1189  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1190  END SET_TAX_EXEMPT;
10:40:48 1191  
10:40:48 1192  PROCEDURE IS_TAX_EXEMPT (
10:40:48 1193  	 in_group_id	   IN NUMBER,
10:40:48 1194  	 out_is_tax_exempt OUT NUMBER
10:40:48 1195  ) AS
10:40:48 1196  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
10:40:48 1197  -- VARIABLES
10:40:48 1198  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
10:40:48 1199  -- EXCEPTIONS
10:40:48 1200  BAD_GROUP_ID EXCEPTION;
10:40:48 1201  BEGIN
10:40:48 1202  
10:40:48 1203  	 BEGIN
10:40:48 1204  	   SELECT
10:40:48 1205  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
10:40:48 1206  	   FROM
10:40:48 1207  	     ACCOUNT
10:40:48 1208  	   WHERE
10:40:48 1209  	     ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1210  	   EXCEPTION
10:40:48 1211  	     WHEN NO_DATA_FOUND THEN
10:40:48 1212  	       RAISE BAD_GROUP_ID;
10:40:48 1213  	 END;
10:40:48 1214  
10:40:48 1215  	 IF var_is_tax_exempt IS NULL THEN
10:40:48 1216  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V22.FALSE;
10:40:48 1217  	 ELSE
10:40:48 1218  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V22.TRUE;
10:40:48 1219  	 END IF;
10:40:48 1220  
10:40:48 1221  EXCEPTION
10:40:48 1222  WHEN BAD_GROUP_ID THEN
10:40:48 1223  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1224  	   SPROC_NAME, 'No such group id');
10:40:48 1225  WHEN OTHERS THEN
10:40:48 1226  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1227  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1228  END IS_TAX_EXEMPT;
10:40:48 1229  
10:40:48 1230  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
10:40:48 1231  	 in_account_id IN NUMBER,
10:40:48 1232  	 out_group_id  OUT NUMBER
10:40:48 1233  ) AS
10:40:48 1234  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
10:40:48 1235  BEGIN
10:40:48 1236  
10:40:48 1237  	 SELECT
10:40:48 1238  	   ACCOUNT.GROUP_ID into out_group_id
10:40:48 1239  	 FROM
10:40:48 1240  	   ACCOUNT
10:40:48 1241  	 WHERE
10:40:48 1242  	   ACCOUNT.ID = in_account_id;
10:40:48 1243  
10:40:48 1244  EXCEPTION
10:40:48 1245  WHEN NO_DATA_FOUND THEN
10:40:48 1246  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1247  	   SPROC_NAME, 'No such account');
10:40:48 1248  WHEN OTHERS THEN
10:40:48 1249  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1250  	   SPROC_NAME, 'Unknown error');
10:40:48 1251  END GET_GROUP_ID_BY_ACCOUNT_ID;
10:40:48 1252  
10:40:48 1253  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:48 1254  	 in_group_id IN NUMBER,
10:40:48 1255  	 out_account_id  OUT NUMBER
10:40:48 1256  ) AS
10:40:48 1257  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
10:40:48 1258  BEGIN
10:40:48 1259  
10:40:48 1260  	 SELECT
10:40:48 1261  	   ACCOUNT.ID into out_account_id
10:40:48 1262  	 FROM
10:40:48 1263  	   ACCOUNT
10:40:48 1264  	 WHERE
10:40:48 1265  	   ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1266  
10:40:48 1267  EXCEPTION
10:40:48 1268  WHEN NO_DATA_FOUND THEN
10:40:48 1269  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1270  	   SPROC_NAME, 'No such account');
10:40:48 1271  WHEN OTHERS THEN
10:40:48 1272  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1273  	   SPROC_NAME, 'Unknown error');
10:40:48 1274  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:40:48 1275  
10:40:48 1276  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:40:48 1277  	 in_invoice_id IN NUMBER,
10:40:48 1278  	 out_group_ids OUT SYS_REFCURSOR
10:40:48 1279  ) AS
10:40:48 1280  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
10:40:48 1281  -- VARIABLES
10:40:48 1282  temp_invoice_id		 NUMBER;
10:40:48 1283  var_subscrib_group_id	 NUMBER;
10:40:48 1284  var_gc_purchaser_group_id NUMBER;
10:40:48 1285  var_gc_redeemer_group_id  NUMBER;
10:40:48 1286  -- EXCEPTIONS
10:40:48 1287  BAD_INVOICE_ID	    EXCEPTION;
10:40:48 1288  CAN_NOT_FIND_ACCOUNT EXCEPTION;
10:40:48 1289  BEGIN
10:40:48 1290  
10:40:48 1291  	 BEGIN
10:40:48 1292  	   SELECT
10:40:48 1293  	     INVOICE.ID into temp_invoice_id
10:40:48 1294  	   FROM
10:40:48 1295  	     INVOICE
10:40:48 1296  	   WHERE
10:40:48 1297  	     INVOICE.ID = in_invoice_id;
10:40:48 1298  	   EXCEPTION
10:40:48 1299  	     WHEN NO_DATA_FOUND THEN
10:40:48 1300  	       RAISE BAD_INVOICE_ID;
10:40:48 1301  	 END;
10:40:48 1302  
10:40:48 1303  	 BEGIN
10:40:48 1304  	   SELECT DISTINCT
10:40:48 1305  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
10:40:48 1306  	   FROM
10:40:48 1307  	     ACCOUNT
10:40:48 1308  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
10:40:48 1309  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
10:40:48 1310  	   WHERE
10:40:48 1311  	     LICENSE.INVOICE_ID = in_invoice_id;
10:40:48 1312  	   EXCEPTION
10:40:48 1313  	     WHEN NO_DATA_FOUND THEN
10:40:48 1314  	       var_subscrib_group_id := NULL;
10:40:48 1315  	 END;
10:40:48 1316  
10:40:48 1317  	 IF var_subscrib_group_id IS NULL THEN
10:40:48 1318  	   BEGIN
10:40:48 1319  	     SELECT
10:40:48 1320  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
10:40:48 1321  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
10:40:48 1322  	       into
10:40:48 1323  	       var_gc_purchaser_group_id,
10:40:48 1324  	       var_gc_redeemer_group_id
10:40:48 1325  	     FROM
10:40:48 1326  	       GIFT_CERTIFICATE
10:40:48 1327  	     WHERE
10:40:48 1328  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
10:40:48 1329  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
10:40:48 1330  	     EXCEPTION
10:40:48 1331  	       WHEN NO_DATA_FOUND THEN
10:40:48 1332  		 var_gc_purchaser_group_id := NULL;
10:40:48 1333  		 var_gc_redeemer_group_id  := NULL;
10:40:48 1334  	   END;
10:40:48 1335  	 END IF;
10:40:48 1336  
10:40:48 1337  	 IF var_subscrib_group_id IS NULL
10:40:48 1338  	   AND var_gc_purchaser_group_id IS NULL
10:40:48 1339  	   AND var_gc_redeemer_group_id IS NULL THEN
10:40:48 1340  	     RAISE CAN_NOT_FIND_ACCOUNT;
10:40:48 1341  	 END IF;
10:40:48 1342  
10:40:48 1343  	 OPEN out_group_ids FOR
10:40:48 1344  	 SELECT GROUP_ID FROM (
10:40:48 1345  	   SELECT
10:40:48 1346  	     var_subscrib_group_id as "GROUP_ID"
10:40:48 1347  	   FROM
10:40:48 1348  	     DUAL
10:40:48 1349  	   UNION
10:40:48 1350  	   SELECT
10:40:48 1351  	     var_gc_purchaser_group_id as "GROUP_ID"
10:40:48 1352  	   FROM
10:40:48 1353  	     DUAL
10:40:48 1354  	   UNION
10:40:48 1355  	   SELECT
10:40:48 1356  	     var_gc_redeemer_group_id as "GROUP_ID"
10:40:48 1357  	   FROM
10:40:48 1358  	     DUAL
10:40:48 1359  	 )
10:40:48 1360  	 WHERE
10:40:48 1361  	   GROUP_ID IS NOT NULL;
10:40:48 1362  
10:40:48 1363  EXCEPTION
10:40:48 1364  WHEN BAD_INVOICE_ID THEN
10:40:48 1365  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1366  	   SPROC_NAME, 'No such invoice');
10:40:48 1367  WHEN CAN_NOT_FIND_ACCOUNT THEN
10:40:48 1368  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1369  	   SPROC_NAME, 'Could not find account for given invoice');
10:40:48 1370  WHEN OTHERS THEN
10:40:48 1371  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1372  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1373  END GET_GROUPS_ID_BY_INVOICE_ID;
10:40:48 1374  
10:40:48 1375  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
10:40:48 1376  	 in_group_id	   IN NUMBER,
10:40:48 1377  	 out_tax_exempt_id OUT VARCHAR2
10:40:48 1378  ) AS
10:40:48 1379  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
10:40:48 1380  -- VARIABLES
10:40:48 1381  -- EXCEPTIONS
10:40:48 1382  BEGIN
10:40:48 1383  
10:40:48 1384  	 SELECT
10:40:48 1385  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
10:40:48 1386  	 FROM
10:40:48 1387  	   ACCOUNT
10:40:48 1388  	 WHERE
10:40:48 1389  	   ACCOUNT.GROUP_ID = in_group_id;
10:40:48 1390  
10:40:48 1391  EXCEPTION
10:40:48 1392  WHEN NO_DATA_FOUND THEN
10:40:48 1393  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1394  	   SPROC_NAME, 'No such account');
10:40:48 1395  WHEN OTHERS THEN
10:40:48 1396  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1397  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1398  END GET_ACCOUNT_TAX_EXEMPT_ID;
10:40:48 1399  
10:40:48 1400  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
10:40:48 1401  	 in_group_id	IN NUMBER,
10:40:48 1402  	 out_result_set OUT SYS_REFCURSOR
10:40:48 1403  ) AS
10:40:48 1404  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
10:40:48 1405  -- Variables
10:40:48 1406  var_account_id NUMBER;
10:40:48 1407  -- Exceptions
10:40:48 1408  BAD_GROUP_ID   EXCEPTION;
10:40:48 1409  BEGIN
10:40:48 1410  
10:40:48 1411  	 BEGIN
10:40:48 1412  	   SELECT
10:40:48 1413  	     ID into var_account_id
10:40:48 1414  	   FROM
10:40:48 1415  	     ACCOUNT
10:40:48 1416  	   WHERE
10:40:48 1417  	     GROUP_ID = in_group_id;
10:40:48 1418  	   EXCEPTION
10:40:48 1419  	     WHEN NO_DATA_FOUND THEN
10:40:48 1420  	       RAISE BAD_GROUP_ID;
10:40:48 1421  	 END;
10:40:48 1422  
10:40:48 1423  	 OPEN out_result_set FOR
10:40:48 1424  	 SELECT
10:40:48 1425  	   S.ID as SUBSCRIPTION_ID,
10:40:48 1426  	   OCHMD.OFFER_CHAIN_ID
10:40:48 1427  	 FROM
10:40:48 1428  	   SUBSCRIPTION S
10:40:48 1429  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
10:40:48 1430  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V22.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
10:40:48 1431  	 WHERE
10:40:48 1432  	   S.ACCOUNT_ID = var_account_id;
10:40:48 1433  
10:40:48 1434  EXCEPTION
10:40:48 1435  WHEN BAD_GROUP_ID THEN
10:40:48 1436  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1437  	   SPROC_NAME, 'No such account');
10:40:48 1438  WHEN OTHERS THEN
10:40:48 1439  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1440  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1441  END GET_UPGRADABLE_SUBSCRIPTIONS;
10:40:48 1442  
10:40:48 1443  PROCEDURE GET_USR_ALL_SBSCR_IDS (
10:40:48 1444  	 in_group_id	    IN NUMBER,
10:40:48 1445  	 out_result_set     OUT SYS_REFCURSOR
10:40:48 1446  ) AS
10:40:48 1447  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
10:40:48 1448  -- VARIABLES
10:40:48 1449  var_account_id NUMBER;
10:40:48 1450  -- EXCEPTIONS
10:40:48 1451  BAD_GROUP_ID EXCEPTION;
10:40:48 1452  BEGIN
10:40:48 1453  
10:40:48 1454  	 BEGIN
10:40:48 1455  	   SELECT
10:40:48 1456  	     A.ID INTO var_account_id
10:40:48 1457  	   FROM
10:40:48 1458  	     ACCOUNT A
10:40:48 1459  	   WHERE
10:40:48 1460  	     A.GROUP_ID = in_group_id;
10:40:48 1461  	   EXCEPTION
10:40:48 1462  	     WHEN NO_DATA_FOUND THEN
10:40:48 1463  	       RAISE BAD_GROUP_ID;
10:40:48 1464  	 END;
10:40:48 1465  
10:40:48 1466  	 OPEN out_result_set FOR
10:40:48 1467  	 SELECT
10:40:48 1468  	   S.ID
10:40:48 1469  	 FROM
10:40:48 1470  	   SUBSCRIPTION S
10:40:48 1471  	 WHERE
10:40:48 1472  	   S.ACCOUNT_ID = var_account_id
10:40:48 1473  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE;
10:40:48 1474  
10:40:48 1475  EXCEPTION
10:40:48 1476  WHEN BAD_GROUP_ID THEN
10:40:48 1477  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1478  	   SPROC_NAME, 'No such account');
10:40:48 1479  WHEN OTHERS THEN
10:40:48 1480  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1481  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1482  END GET_USR_ALL_SBSCR_IDS;
10:40:48 1483  
10:40:48 1484  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
10:40:48 1485  	 in_group_id	    IN NUMBER,
10:40:48 1486  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
10:40:48 1487  	 out_result_set     OUT SYS_REFCURSOR
10:40:48 1488  ) AS
10:40:48 1489  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
10:40:48 1490  -- VARIABLES
10:40:48 1491  var_account_id NUMBER;
10:40:48 1492  -- EXCEPTIONS
10:40:48 1493  BAD_GROUP_ID	   EXCEPTION;
10:40:48 1494  BAD_OFFER_CHAIN_IDS EXCEPTION;
10:40:48 1495  BEGIN
10:40:48 1496  
10:40:48 1497  	 IF in_offer_chain_ids IS NULL THEN
10:40:48 1498  	   RAISE BAD_OFFER_CHAIN_IDS;
10:40:48 1499  	 END IF;
10:40:48 1500  
10:40:48 1501  	 BEGIN
10:40:48 1502  	   SELECT
10:40:48 1503  	     A.ID INTO var_account_id
10:40:48 1504  	   FROM
10:40:48 1505  	     ACCOUNT A
10:40:48 1506  	   WHERE
10:40:48 1507  	     A.GROUP_ID = in_group_id;
10:40:48 1508  	   EXCEPTION
10:40:48 1509  	     WHEN NO_DATA_FOUND THEN
10:40:48 1510  	       RAISE BAD_GROUP_ID;
10:40:48 1511  	 END;
10:40:48 1512  
10:40:48 1513  	 OPEN out_result_set FOR
10:40:48 1514  	 SELECT
10:40:48 1515  	   S.ID
10:40:48 1516  	 FROM
10:40:48 1517  	   SUBSCRIPTION S
10:40:48 1518  	 WHERE
10:40:48 1519  	   S.ACCOUNT_ID = var_account_id
10:40:48 1520  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
10:40:48 1521  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V22.SUBSCRIPTION_ACTIVE;
10:40:48 1522  
10:40:48 1523  EXCEPTION
10:40:48 1524  WHEN BAD_OFFER_CHAIN_IDS THEN
10:40:48 1525  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.INVALID_PARAMETER,
10:40:48 1526  	   SPROC_NAME, 'Offer chains ids parameter is null');
10:40:48 1527  WHEN BAD_GROUP_ID THEN
10:40:48 1528  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 1529  	   SPROC_NAME, 'No such account');
10:40:48 1530  WHEN OTHERS THEN
10:40:48 1531  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1532  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1533  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
10:40:48 1534  
10:40:48 1535  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
10:40:48 1536  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
10:40:48 1537  	 in_expiration_date IN DATE,
10:40:48 1538  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
10:40:48 1539  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
10:40:48 1540  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
10:40:48 1541  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
10:40:48 1542  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
10:40:48 1543  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
10:40:48 1544  	 in_lower_bound IN NUMBER DEFAULT 1,
10:40:48 1545  	 in_upper_bound IN NUMBER DEFAULT 11,
10:40:48 1546  	 out_result_set OUT SYS_REFCURSOR
10:40:48 1547  ) AS
10:40:48 1548  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
10:40:48 1549  BEGIN
10:40:48 1550  
10:40:48 1551  	 OPEN out_result_set FOR
10:40:48 1552  	     SELECT
10:40:48 1553  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
10:40:48 1554  	     FROM
10:40:48 1555  	       account a,
10:40:48 1556  	       credit_card cc
10:40:48 1557  	     WHERE
10:40:48 1558  	       cc.expiration_date = in_expiration_date and
10:40:48 1559  	       cc.last_four_cc = in_last_four_cc and
10:40:48 1560  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
10:40:48 1561  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
10:40:48 1562  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
10:40:48 1563  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
10:40:48 1564  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
10:40:48 1565  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
10:40:48 1566  	       a.id = cc.account_id and
10:40:48 1567  	       rownum >= in_lower_bound and
10:40:48 1568  	       rownum <= in_upper_bound
10:40:48 1569  	   ;
10:40:48 1570  
10:40:48 1571  EXCEPTION
10:40:48 1572  WHEN OTHERS THEN
10:40:48 1573  	 PROCS_COMMON_V22.THROW_EXCEPTION(APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 1574  	   SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 1575  END GET_GROUP_IDS_BY_CC_INFO;
10:40:48 1576  
10:40:48 1577  END PROCS_ACCOUNT_V22;
10:40:48 1578  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE LOG_RETRY(
10:40:48   4  	  in_process_name IN VARCHAR2,
10:40:48   5  	  in_generic_id   IN NUMBER,
10:40:48   6  	  in_date	  IN VARCHAR2,
10:40:48   7  	  out_success	   OUT NUMBER
10:40:48   8  ) AS
10:40:48   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_V22';
10:40:48  10  BEGIN
10:40:48  11  
10:40:48  12  	out_success := 1;
10:40:48  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
10:40:48  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
10:40:48  15  	commit;
10:40:48  16  EXCEPTION
10:40:48  17  WHEN DUP_VAL_ON_INDEX THEN
10:40:48  18  	rollback;
10:40:48  19  	out_success := 0;
10:40:48  20  WHEN OTHERS THEN
10:40:48  21  	rollback;
10:40:48  22  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48  24  
10:40:48  25  END;
10:40:48  26  
10:40:48  27  PROCEDURE LOG_RETRY_DATE(
10:40:48  28  	  in_process_name IN VARCHAR2,
10:40:48  29  	  in_generic_id   IN NUMBER,
10:40:48  30  	  in_date	  IN DATE,
10:40:48  31  	  out_success	   OUT NUMBER
10:40:48  32  ) AS
10:40:48  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'LOG_RETRY_DATE_V22';
10:40:48  34  BEGIN
10:40:48  35  
10:40:48  36  	out_success := 1;
10:40:48  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
10:40:48  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
10:40:48  39  	commit;
10:40:48  40  EXCEPTION
10:40:48  41  WHEN DUP_VAL_ON_INDEX THEN
10:40:48  42  	rollback;
10:40:48  43  	out_success := 0;
10:40:48  44  WHEN OTHERS THEN
10:40:48  45  	rollback;
10:40:48  46  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48  48  
10:40:48  49  END;
10:40:48  50  
10:40:48  51  PROCEDURE DELETE_RETRY(
10:40:48  52  	  in_process_name IN VARCHAR2,
10:40:48  53  	  in_remove_minutes  IN NUMBER
10:40:48  54  ) AS
10:40:48  55  BEGIN
10:40:48  56  
10:40:48  57  delete from PROCESS_RETRY_THROTTLE
10:40:48  58  where
10:40:48  59  	process_name = in_process_name and
10:40:48  60  	create_date <= sysdate - (in_remove_minutes / (60 * 24));
10:40:48  61  commit;
10:40:48  62  END;
10:40:48  63  
10:40:48  64  PROCEDURE GET_SYSDATE (
10:40:48  65  	out_date  OUT VARCHAR2
10:40:48  66  ) AS
10:40:48  67  BEGIN
10:40:48  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
10:40:48  69  END;
10:40:48  70  
10:40:48  71  END PROCS_PROCESS_RETRY_V22;
10:40:48  72  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:40:48   4  /*
10:40:48   5  Throws exceptions:
10:40:48   6  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48   7  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48   8  */
10:40:48   9  	in_notification_type_name IN VARCHAR2,
10:40:48  10  	out_notification_type_id  OUT NUMBER
10:40:48  11  ) AS
10:40:48  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
10:40:48  13  BEGIN
10:40:48  14  	SELECT
10:40:48  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
10:40:48  16  	FROM
10:40:48  17  	  NOTIFICATION_TYPE
10:40:48  18  	WHERE
10:40:48  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
10:40:48  20  EXCEPTION
10:40:48  21  WHEN NO_DATA_FOUND THEN
10:40:48  22  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48  23  	  SPROC_NAME, 'No such type');
10:40:48  24  WHEN OTHERS THEN
10:40:48  25  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48  27  END GET_NOTIFICATION_TYPE_BY_NAME;
10:40:48  28  
10:40:48  29  /******************************************************************/
10:40:48  30  
10:40:48  31  PROCEDURE ADD_NOTIFICATION (
10:40:48  32  /*
10:40:48  33  Throws exceptions:
10:40:48  34  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  35  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  36  */
10:40:48  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:40:48  38  	in_recipient_group_id	 IN NUMBER,
10:40:48  39  	in_notification_type_id  IN NUMBER,
10:40:48  40  	in_date_to_notify	 IN DATE,
10:40:48  41  	in_email_template_params IN CLOB
10:40:48  42  ) AS
10:40:48  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
10:40:48  44  -- VARIABLES
10:40:48  45  temp_type_count NUMBER;
10:40:48  46  var_create_date DATE := SYSDATE;
10:40:48  47  -- EXCEPTIONS
10:40:48  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
10:40:48  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
10:40:48  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
10:40:48  51  BEGIN
10:40:48  52  
10:40:48  53  	SELECT
10:40:48  54  	  COUNT(*) into temp_type_count
10:40:48  55  	FROM
10:40:48  56  	  NOTIFICATION_TYPE
10:40:48  57  	WHERE
10:40:48  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
10:40:48  59  
10:40:48  60  	IF temp_type_count = 0 THEN
10:40:48  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
10:40:48  62  	END IF;
10:40:48  63  
10:40:48  64  	INSERT INTO NOTIFICATION (
10:40:48  65  	  ID,
10:40:48  66  	  ACCOUNT_ID,
10:40:48  67  	  GROUP_ID,
10:40:48  68  	  NOTIFICATION_TYPE_ID,
10:40:48  69  	  NOTIFICATION_STATUS_ID,
10:40:48  70  	  EMAIL_TEMPLATE_PARAMS,
10:40:48  71  	  UPDATE_DATE,
10:40:48  72  	  CREATE_DATE,
10:40:48  73  	  DATE_TO_NOTIFY
10:40:48  74  	) VALUES (
10:40:48  75  	  NOT_ID_SEQ.nextVal,
10:40:48  76  	  in_sender_account_id,
10:40:48  77  	  in_recipient_group_id,
10:40:48  78  	  in_notification_type_id,
10:40:48  79  	  NOTIFICATION_STATUSES_V22.NOTIFICATION_PENDING,
10:40:48  80  	  in_email_template_params,
10:40:48  81  	  var_create_date,
10:40:48  82  	  var_create_date,
10:40:48  83  	  in_date_to_notify
10:40:48  84  	);
10:40:48  85  
10:40:48  86  	--BEGIN
10:40:48  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V22.CREATE_NOTIFICATION_HISTORY (
10:40:48  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
10:40:48  89  	--    in_group_id		  => in_recipient_group_id,
10:40:48  90  	--    notification_reason_type_id => in_notification_type_id,
10:40:48  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V22.NOTIFICATION_PENDING,
10:40:48  92  	--    email_template_params	  => in_email_template_params,
10:40:48  93  	--    in_create_date		  => var_create_date
10:40:48  94  	--  );
10:40:48  95  	--  EXCEPTION
10:40:48  96  	--    WHEN OTHERS THEN
10:40:48  97  	--	EXCEPTION_MESSAGE := SQLERRM;
10:40:48  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
10:40:48  99  	--END;
10:40:48 100  
10:40:48 101  EXCEPTION
10:40:48 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
10:40:48 103  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 104  	  SPROC_NAME, 'No such notification status');
10:40:48 105  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:48 106  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:48 108  WHEN OTHERS THEN
10:40:48 109  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 111  END ADD_NOTIFICATION;
10:40:48 112  
10:40:48 113  /******************************************************************************/
10:40:48 114  
10:40:48 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
10:40:48 116  /*
10:40:48 117  Throws exceptions:
10:40:48 118  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 119  */
10:40:48 120  	out_result_set OUT SYS_REFCURSOR
10:40:48 121  ) AS
10:40:48 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
10:40:48 123  -- CONSTANTS
10:40:48 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
10:40:48 125  BEGIN
10:40:48 126  	OPEN out_result_set FOR
10:40:48 127  SELECT * FROM
10:40:48 128  (
10:40:48 129  	SELECT
10:40:48 130  	  NOTIFICATION.ID
10:40:48 131  	FROM
10:40:48 132  	  NOTIFICATION
10:40:48 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
10:40:48 134  	WHERE
10:40:48 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
10:40:48 136  	  AND NOT EXISTS (
10:40:48 137  	    SELECT NULL
10:40:48 138  	    FROM PROCESS_RETRY_THROTTLE
10:40:48 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
10:40:48 140  	  )
10:40:48 141  	  AND (
10:40:48 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V22.NOTIFICATION_PENDING
10:40:48 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V22.NOTIFICATION_FAILED
10:40:48 144  	  )
10:40:48 145  	  AND (
10:40:48 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
10:40:48 147  	  )ORDER BY dbms_random.value
10:40:48 148  ) WHERE
10:40:48 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
10:40:48 150  
10:40:48 151  EXCEPTION
10:40:48 152  WHEN OTHERS THEN
10:40:48 153  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 155  END GET_PENDING_NOTIFICATIONS;
10:40:48 156  
10:40:48 157  /******************************************************************************/
10:40:48 158  
10:40:48 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
10:40:48 160  /*
10:40:48 161  Throws exceptions:
10:40:48 162  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 163  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 164  */
10:40:48 165  	in_notification_id IN NUMBER
10:40:48 166  ) AS
10:40:48 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
10:40:48 168  -- VARIABLES
10:40:48 169  temp_notification_id NUMBER;
10:40:48 170  -- EXCEPTIONS
10:40:48 171  BAD_NOTIFICATION_ID EXCEPTION;
10:40:48 172  BEGIN
10:40:48 173  
10:40:48 174  	BEGIN
10:40:48 175  	  SELECT
10:40:48 176  	    NOTIFICATION.ID into temp_notification_id
10:40:48 177  	  FROM
10:40:48 178  	    NOTIFICATION
10:40:48 179  	  WHERE
10:40:48 180  	    NOTIFICATION.ID = in_notification_id;
10:40:48 181  	  EXCEPTION
10:40:48 182  	    WHEN NO_DATA_FOUND THEN
10:40:48 183  	      RAISE BAD_NOTIFICATION_ID;
10:40:48 184  	END;
10:40:48 185  
10:40:48 186  	UPDATE
10:40:48 187  	  NOTIFICATION
10:40:48 188  	SET
10:40:48 189  	  NOTIFICATION.UPDATE_DATE = sysdate
10:40:48 190  	WHERE
10:40:48 191  	  NOTIFICATION.ID = in_notification_id;
10:40:48 192  
10:40:48 193  EXCEPTION
10:40:48 194  WHEN BAD_NOTIFICATION_ID THEN
10:40:48 195  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 196  	  SPROC_NAME, 'No such notification');
10:40:48 197  WHEN OTHERS THEN
10:40:48 198  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 200  END UPDATE_NOTIFICATION_TIMESTAMP;
10:40:48 201  
10:40:48 202  /******************************************************************************/
10:40:48 203  
10:40:48 204  PROCEDURE SET_NOTIFICATION_STATUS (
10:40:48 205  /*
10:40:48 206  Throws exceptions:
10:40:48 207  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 208  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 209  */
10:40:48 210  	in_notification_id	  IN NUMBER,
10:40:48 211  	in_notification_status_id IN NUMBER,
10:40:48 212  	in_error_message	  IN VARCHAR2
10:40:48 213  ) AS
10:40:48 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
10:40:48 215  -- VARIABLES
10:40:48 216  var_group_id		NUMBER;
10:40:48 217  var_account_id		NUMBER;
10:40:48 218  var_notification_type_id	NUMBER;
10:40:48 219  var_email_template_params CLOB;
10:40:48 220  var_create_history_date	DATE := SYSDATE;
10:40:48 221  var_notification_status_id   NUMBER;
10:40:48 222  var_date_to_notify	DATE;
10:40:48 223  max_fails   NUMBER := 5;
10:40:48 224  num_fails   NUMBER;
10:40:48 225  -- EXCEPTIONS
10:40:48 226  BAD_NOTIFICATION_ID	 EXCEPTION;
10:40:48 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
10:40:48 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
10:40:48 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:40:48 230  BEGIN
10:40:48 231  
10:40:48 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V22.NOTIFICATION_SENT
10:40:48 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V22.NOTIFICATION_PENDING
10:40:48 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V22.NOTIFICATION_FAILED THEN
10:40:48 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
10:40:48 236  	END IF;
10:40:48 237  
10:40:48 238  	BEGIN
10:40:48 239  	  SELECT
10:40:48 240  	    NOTIFICATION.GROUP_ID,
10:40:48 241  	    NOTIFICATION.ACCOUNT_ID,
10:40:48 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
10:40:48 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
10:40:48 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
10:40:48 245  	    NOTIFICATION.DATE_TO_NOTIFY
10:40:48 246  	    into
10:40:48 247  	    var_group_id,
10:40:48 248  	    var_account_id,
10:40:48 249  	    var_notification_type_id,
10:40:48 250  	    var_notification_status_id,
10:40:48 251  	    var_email_template_params,
10:40:48 252  	    var_date_to_notify
10:40:48 253  	  FROM
10:40:48 254  	    NOTIFICATION
10:40:48 255  	  WHERE
10:40:48 256  	    NOTIFICATION.ID = in_notification_id;
10:40:48 257  	  EXCEPTION
10:40:48 258  	    WHEN NO_DATA_FOUND THEN
10:40:48 259  	      RAISE BAD_NOTIFICATION_ID;
10:40:48 260  	END;
10:40:48 261  
10:40:48 262  	BEGIN
10:40:48 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_NOTIFICATION_HISTORY (
10:40:48 264  	    in_notification_id		=> in_notification_id,
10:40:48 265  	    in_account_id		=> var_account_id,
10:40:48 266  	    in_group_id 		=> var_group_id,
10:40:48 267  	    notification_reason_type_id => var_notification_type_id,
10:40:48 268  	    notification_status_id	=> var_notification_status_id,
10:40:48 269  	    email_template_params	=> var_email_template_params,
10:40:48 270  	    in_create_date		=> var_create_history_date,
10:40:48 271  	    in_date_to_notify		=> var_date_to_notify
10:40:48 272  	  );
10:40:48 273  	  EXCEPTION
10:40:48 274  	    WHEN OTHERS THEN
10:40:48 275  	      EXCEPTION_MESSAGE := SQLERRM;
10:40:48 276  	      RAISE CAN_NOT_CREATE_HISTORY;
10:40:48 277  	END;
10:40:48 278  
10:40:48 279  	UPDATE
10:40:48 280  	  NOTIFICATION
10:40:48 281  	SET
10:40:48 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
10:40:48 283  	  NOTIFICATION.UPDATE_DATE = sysdate
10:40:48 284  	WHERE
10:40:48 285  	  NOTIFICATION.ID = in_notification_id;
10:40:48 286  
10:40:48 287  	IF ( in_error_message IS NOT NULL ) THEN
10:40:48 288  	  ADD_NOTIFICATION_FAILURE(
10:40:48 289  	    in_notification_id => in_notification_id,
10:40:48 290  	    in_error_message => in_error_message
10:40:48 291  	  );
10:40:48 292  	END IF;
10:40:48 293  
10:40:48 294  	SELECT COUNT(1) INTO num_fails
10:40:48 295  	FROM NOTIFICATION_FAILURE
10:40:48 296  	WHERE NOTIFICATION_ID = in_notification_id;
10:40:48 297  
10:40:48 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V22.NOTIFICATION_SENT OR num_fails >= max_fails) then
10:40:48 299  	  FOR REC IN (
10:40:48 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
10:40:48 301  	      FROM NOTIFICATION_FAILURE
10:40:48 302  	      WHERE NOTIFICATION_ID = in_notification_id
10:40:48 303  	      ) LOOP
10:40:48 304  	      BEGIN
10:40:48 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_NOTIF_FAILURE_HISTORY(
10:40:48 306  		  in_error_message	   => REC.ERROR_MESSAGE,
10:40:48 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
10:40:48 308  		  in_create_date	   => REC.CREATE_DATE
10:40:48 309  		);
10:40:48 310  		EXCEPTION
10:40:48 311  		  WHEN OTHERS THEN
10:40:48 312  		    EXCEPTION_MESSAGE := SQLERRM;
10:40:48 313  		    RAISE CAN_NOT_CREATE_HISTORY;
10:40:48 314  	      END;
10:40:48 315  	  END LOOP;
10:40:48 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
10:40:48 317  
10:40:48 318  	  BEGIN
10:40:48 319  	    SELECT
10:40:48 320  	      NOTIFICATION.GROUP_ID,
10:40:48 321  	      NOTIFICATION.ACCOUNT_ID,
10:40:48 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
10:40:48 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
10:40:48 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
10:40:48 325  	      NOTIFICATION.DATE_TO_NOTIFY
10:40:48 326  	      into
10:40:48 327  	      var_group_id,
10:40:48 328  	      var_account_id,
10:40:48 329  	      var_notification_type_id,
10:40:48 330  	      var_notification_status_id,
10:40:48 331  	      var_email_template_params,
10:40:48 332  	      var_date_to_notify
10:40:48 333  	    FROM
10:40:48 334  	      NOTIFICATION
10:40:48 335  	    WHERE
10:40:48 336  	      NOTIFICATION.ID = in_notification_id;
10:40:48 337  	    EXCEPTION
10:40:48 338  	      WHEN NO_DATA_FOUND THEN
10:40:48 339  		RAISE BAD_NOTIFICATION_ID;
10:40:48 340  	  END;
10:40:48 341  
10:40:48 342  	  BEGIN
10:40:48 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V22.CREATE_NOTIFICATION_HISTORY (
10:40:48 344  	      in_notification_id	  => in_notification_id,
10:40:48 345  	      in_account_id		  => var_account_id,
10:40:48 346  	      in_group_id		  => var_group_id,
10:40:48 347  	      notification_reason_type_id => var_notification_type_id,
10:40:48 348  	      notification_status_id	  => var_notification_status_id,
10:40:48 349  	      email_template_params	  => var_email_template_params,
10:40:48 350  	      in_create_date		  => var_create_history_date,
10:40:48 351  	      in_date_to_notify 	  => var_date_to_notify
10:40:48 352  	    );
10:40:48 353  	    EXCEPTION
10:40:48 354  	      WHEN OTHERS THEN
10:40:48 355  		EXCEPTION_MESSAGE := SQLERRM;
10:40:48 356  		RAISE CAN_NOT_CREATE_HISTORY;
10:40:48 357  	  END;
10:40:48 358  
10:40:48 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
10:40:48 360  
10:40:48 361  	END IF;
10:40:48 362  	commit;
10:40:48 363  
10:40:48 364  EXCEPTION
10:40:48 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
10:40:48 366  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 367  	  SPROC_NAME, 'Bad notification status');
10:40:48 368  WHEN BAD_NOTIFICATION_ID THEN
10:40:48 369  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 370  	  SPROC_NAME, 'No such notification');
10:40:48 371  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:48 372  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:48 374  WHEN OTHERS THEN
10:40:48 375  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 377  END SET_NOTIFICATION_STATUS;
10:40:48 378  
10:40:48 379  /******************************************************************************/
10:40:48 380  
10:40:48 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
10:40:48 382  /*
10:40:48 383  Throws exceptions:
10:40:48 384  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 385  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 386  */
10:40:48 387  	in_notification_id IN NUMBER,
10:40:48 388  	in_error_message   IN VARCHAR2
10:40:48 389  ) AS
10:40:48 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
10:40:48 391  -- VARIABLES
10:40:48 392  temp_notification_id NUMBER;
10:40:48 393  var_create_date	   DATE := SYSDATE;
10:40:48 394  -- EXCEPTIONS
10:40:48 395  BAD_NOTIFICATION_ID	 EXCEPTION;
10:40:48 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
10:40:48 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
10:40:48 398  BEGIN
10:40:48 399  
10:40:48 400  	BEGIN
10:40:48 401  	  SELECT
10:40:48 402  	    NOTIFICATION.ID into temp_notification_id
10:40:48 403  	  FROM
10:40:48 404  	    NOTIFICATION
10:40:48 405  	  WHERE
10:40:48 406  	    NOTIFICATION.ID = in_notification_id;
10:40:48 407  	  EXCEPTION
10:40:48 408  	    WHEN NO_DATA_FOUND THEN
10:40:48 409  	      RAISE BAD_NOTIFICATION_ID;
10:40:48 410  	END;
10:40:48 411  
10:40:48 412  	INSERT INTO NOTIFICATION_FAILURE (
10:40:48 413  	  ID,
10:40:48 414  	  NOTIFICATION_ID,
10:40:48 415  	  ERROR_MESSAGE,
10:40:48 416  	  CREATE_DATE
10:40:48 417  	) VALUES (
10:40:48 418  	  NOTF_ID_SEQ.nextVal,
10:40:48 419  	  in_notification_id,
10:40:48 420  	  in_error_message,
10:40:48 421  	  sysdate
10:40:48 422  	);
10:40:48 423  
10:40:48 424  	--BEGIN
10:40:48 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V22.CREATE_NOTIF_FAILURE_HISTORY(
10:40:48 426  	--    in_error_message	       => in_error_message,
10:40:48 427  	--    in_notification_queue_id => in_notification_id,
10:40:48 428  	--    in_create_date	       => var_create_date
10:40:48 429  	--  );
10:40:48 430  	--  EXCEPTION
10:40:48 431  	--    WHEN OTHERS THEN
10:40:48 432  	--	EXCEPTION_MESSAGE := SQLERRM;
10:40:48 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
10:40:48 434  	--END;
10:40:48 435  
10:40:48 436  EXCEPTION
10:40:48 437  WHEN BAD_NOTIFICATION_ID THEN
10:40:48 438  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 439  	  SPROC_NAME, 'No such notification');
10:40:48 440  WHEN CAN_NOT_CREATE_HISTORY THEN
10:40:48 441  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.INTERNAL_ERROR,
10:40:48 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
10:40:48 443  WHEN OTHERS THEN
10:40:48 444  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 446  END ADD_NOTIFICATION_FAILURE;
10:40:48 447  
10:40:48 448  /******************************************************************************/
10:40:48 449  
10:40:48 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
10:40:48 451  /*
10:40:48 452  Result: GLOBAL_STATUSES.TRUE if notification locked
10:40:48 453  GLOBA_STATUSES.FALSE - else
10:40:48 454  */
10:40:48 455  	in_notification_id IN NUMBER,
10:40:48 456  	out_lock_status    OUT NUMBER
10:40:48 457  ) AS
10:40:48 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
10:40:48 459  -- VARIABLE
10:40:48 460  temp_notification_id NUMBER;
10:40:48 461  BEGIN
10:40:48 462  	SELECT
10:40:48 463  	  NOTIFICATION.ID into temp_notification_id
10:40:48 464  	FROM
10:40:48 465  	  NOTIFICATION
10:40:48 466  	WHERE
10:40:48 467  	  NOTIFICATION.ID = in_notification_id
10:40:48 468  	  AND (
10:40:48 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V22.NOTIFICATION_PENDING
10:40:48 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V22.NOTIFICATION_FAILED
10:40:48 471  	  )
10:40:48 472  	FOR UPDATE;
10:40:48 473  
10:40:48 474  	out_lock_status := 1;
10:40:48 475  
10:40:48 476  EXCEPTION
10:40:48 477  WHEN NO_DATA_FOUND THEN
10:40:48 478  	out_lock_status := 0;
10:40:48 479  WHEN OTHERS THEN
10:40:48 480  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 482  END LOCK_PENDING_NOTIFICATION;
10:40:48 483  
10:40:48 484  /******************************************************************************/
10:40:48 485  
10:40:48 486  PROCEDURE GET_NOTIFICATION_DATA (
10:40:48 487  	in_notification_id IN NUMBER,
10:40:48 488  	out_result_set	   OUT SYS_REFCURSOR
10:40:48 489  ) AS
10:40:48 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
10:40:48 491  BEGIN
10:40:48 492  	OPEN out_result_set FOR
10:40:48 493  	SELECT
10:40:48 494  	  NOTIFICATION.ID,
10:40:48 495  	  NOTIFICATION.GROUP_ID,
10:40:48 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
10:40:48 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
10:40:48 498  	  NOTIFICATION.CREATE_DATE,
10:40:48 499  	  NOTIFICATION.UPDATE_DATE,
10:40:48 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
10:40:48 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
10:40:48 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
10:40:48 503  	FROM
10:40:48 504  	  NOTIFICATION
10:40:48 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
10:40:48 506  	WHERE
10:40:48 507  	  NOTIFICATION.ID = in_notification_id;
10:40:48 508  
10:40:48 509  EXCEPTION
10:40:48 510  WHEN OTHERS THEN
10:40:48 511  	PROCS_COMMON_V22.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR,
10:40:48 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
10:40:48 513  END GET_NOTIFICATION_DATA;
10:40:48 514  
10:40:48 515  END PROCS_NOTIFICATION_V22;
10:40:48 516  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.02
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:48   4  /*
10:40:48   5  Throws exceptions:
10:40:48   6  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48   7  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48   8  */
10:40:48   9  	  in_offer_chain_id IN	 NUMBER,
10:40:48  10  	  out_result_set    OUT  SYS_REFCURSOR
10:40:48  11  ) AS
10:40:48  12  BEGIN
10:40:48  13  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_BY_ID (
10:40:48  14  	  in_offer_chain_id => in_offer_chain_id,
10:40:48  15  	  out_result_set => out_result_set
10:40:48  16  	);
10:40:48  17  END GET_OFFER_CHAIN_BY_ID;
10:40:48  18  
10:40:48  19  PROCEDURE GET_PENDING_INVOICES (
10:40:48  20  /*
10:40:48  21  Throws exceptions:
10:40:48  22  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  23  */
10:40:48  24  	out_result_set	     OUT SYS_REFCURSOR,
10:40:48  25  	in_row_number	     IN NUMBER DEFAULT NULL
10:40:48  26  ) AS
10:40:48  27  BEGIN
10:40:48  28  	PROCS_INVOICE_V22.GET_PENDING_INVOICES(
10:40:48  29  	  out_result_set,
10:40:48  30  	  in_row_number
10:40:48  31  	);
10:40:48  32  END GET_PENDING_INVOICES;
10:40:48  33  
10:40:48  34  /********************************************************/
10:40:48  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
10:40:48  36  /*
10:40:48  37  Throws exceptions:
10:40:48  38  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  39  */
10:40:48  40  	out_result_set	    OUT SYS_REFCURSOR,
10:40:48  41  	in_row_number	    IN NUMBER DEFAULT NULL
10:40:48  42  ) AS
10:40:48  43  BEGIN
10:40:48  44  	PROCS_CHARGE_V22.GET_PENDING_REFUND_CHARGES(
10:40:48  45  	  out_result_set,
10:40:48  46  	  in_row_number
10:40:48  47  	);
10:40:48  48  END GET_PENDING_REFUND_CHARGES;
10:40:48  49  /********************************************************/
10:40:48  50  
10:40:48  51  PROCEDURE GET_UNPROCESSED_CHARGES (
10:40:48  52  /*
10:40:48  53  Throws exceptions:
10:40:48  54  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  55  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  56  */
10:40:48  57  	in_invoice_id  IN NUMBER,
10:40:48  58  	out_result_set OUT SYS_REFCURSOR
10:40:48  59  ) AS
10:40:48  60  BEGIN
10:40:48  61  	PROCS_CHARGE_V22.GET_UNPROCESSED_CHARGES(
10:40:48  62  	  in_invoice_id,
10:40:48  63  	  out_result_set
10:40:48  64  	);
10:40:48  65  END GET_UNPROCESSED_CHARGES;
10:40:48  66  
10:40:48  67  /********************************************************/
10:40:48  68  
10:40:48  69  PROCEDURE GET_PROCESSED_CHARGES (
10:40:48  70  /*
10:40:48  71  Throws exceptions:
10:40:48  72  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  73  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  74  */
10:40:48  75  	in_invoice_id  IN NUMBER,
10:40:48  76  	out_result_set OUT SYS_REFCURSOR
10:40:48  77  ) AS
10:40:48  78  BEGIN
10:40:48  79  	PROCS_CHARGE_V22.GET_PROCESSED_CHARGES(
10:40:48  80  	  in_invoice_id,
10:40:48  81  	  out_result_set
10:40:48  82  	);
10:40:48  83  END GET_PROCESSED_CHARGES;
10:40:48  84  
10:40:48  85  /********************************************************/
10:40:48  86  
10:40:48  87  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
10:40:48  88  /*
10:40:48  89  Throws exceptions:
10:40:48  90  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  91  */
10:40:48  92  	in_transaction_id	      IN NUMBER,
10:40:48  93  	in_transaction_attempt_status IN NUMBER,
10:40:48  94  	out_result_set		      OUT SYS_REFCURSOR
10:40:48  95  ) AS
10:40:48  96  BEGIN
10:40:48  97  	PROCS_TRANSACTION_V22.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
10:40:48  98  	  in_transaction_id,
10:40:48  99  	  in_transaction_attempt_status,
10:40:48 100  	  out_result_set
10:40:48 101  	);
10:40:48 102  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
10:40:48 103  
10:40:48 104  /********************************************************/
10:40:48 105  
10:40:48 106  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
10:40:48 107  /*
10:40:48 108  Throws exceptions:
10:40:48 109  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 110  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 111  */
10:40:48 112  	in_transaction_attempt_id     IN NUMBER,
10:40:48 113  	in_transaction_attempt_status IN NUMBER
10:40:48 114  ) AS
10:40:48 115  BEGIN
10:40:48 116  	PROCS_TRANSACTION_V22.UPDATE_TRNSCTN_ATTEMPT_STATUS(
10:40:48 117  	   in_transaction_attempt_id,
10:40:48 118  	   in_transaction_attempt_status
10:40:48 119  	);
10:40:48 120  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
10:40:48 121  
10:40:48 122  /********************************************************/
10:40:48 123  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
10:40:48 124  /*
10:40:48 125  Throws exceptions:
10:40:48 126  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 127  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 128  */
10:40:48 129  	in_invoice_id	IN  NUMBER,
10:40:48 130  	out_result_set OUT SYS_REFCURSOR
10:40:48 131  ) AS
10:40:48 132  BEGIN
10:40:48 133  	PROCS_TRANSACTION_V22.GET_CLOSED_REFUNDS_BY_INVOICE(
10:40:48 134  	   in_invoice_id,
10:40:48 135  	   out_result_set
10:40:48 136  	);
10:40:48 137  END GET_CLOSED_REFUNDS_BY_INVOICE;
10:40:48 138  
10:40:48 139  /********************************************************/
10:40:48 140  
10:40:48 141  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
10:40:48 142  /*
10:40:48 143  Throws exceptions:
10:40:48 144  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 145  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 146  */
10:40:48 147  	in_transaction_attempt_id IN NUMBER,
10:40:48 148  	in_updated_by		  IN VARCHAR2
10:40:48 149  ) AS
10:40:48 150  BEGIN
10:40:48 151  	PROCS_TRANSACTION_V22.UPDATE_TRNSCTN_ATTEMPT_TIME(
10:40:48 152  	  in_transaction_attempt_id,
10:40:48 153  	  in_updated_by
10:40:48 154  	);
10:40:48 155  END UPDATE_TRNSCTN_ATTEMPT_TIME;
10:40:48 156  
10:40:48 157  /********************************************************/
10:40:48 158  
10:40:48 159  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
10:40:48 160  /*
10:40:48 161  Throws exceptions:
10:40:48 162  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 163  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 164  */
10:40:48 165  	in_transaction_id	   IN NUMBER,
10:40:48 166  	in_trans_attempt_status    IN NUMBER,
10:40:48 167  	in_external_status_code    IN VARCHAR2,
10:40:48 168  	in_external_status_message IN VARCHAR2,
10:40:48 169  	in_created_by		   IN VARCHAR2,
10:40:48 170  	in_ext_transaction_id	   IN VARCHAR2,
10:40:48 171  	out_transaction_attempt_id OUT NUMBER
10:40:48 172  ) AS
10:40:48 173  BEGIN
10:40:48 174  	PROCS_TRANSACTION_V22.CREATE_TRANSACTION_ATTEMPT(
10:40:48 175  	  in_transaction_id,
10:40:48 176  	  in_trans_attempt_status,
10:40:48 177  	  in_external_status_code,
10:40:48 178  	  in_external_status_message,
10:40:48 179  	  in_created_by,
10:40:48 180  	  in_ext_transaction_id,
10:40:48 181  	  out_transaction_attempt_id
10:40:48 182  	);
10:40:48 183  END CREATE_TRANSACTION_ATTEMPT;
10:40:48 184  
10:40:48 185  /********************************************************/
10:40:48 186  
10:40:48 187  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
10:40:48 188  /*
10:40:48 189  Throws exceptions:
10:40:48 190  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 191  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 192  */
10:40:48 193  	in_transaction_attempt_id IN NUMBER,
10:40:48 194  	in_ext_status_code	  IN VARCHAR2,
10:40:48 195  	in_ext_status_message	  IN VARCHAR2,
10:40:48 196  	in_ext_transaction_id	  IN VARCHAR2
10:40:48 197  ) AS
10:40:48 198  BEGIN
10:40:48 199  	PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_ATTEMPT_INF(
10:40:48 200  	  in_transaction_attempt_id,
10:40:48 201  	  in_ext_status_code,
10:40:48 202  	  in_ext_status_message,
10:40:48 203  	  in_ext_transaction_id
10:40:48 204  	);
10:40:48 205  END UPDATE_TRANSACTION_ATTEMPT_INF;
10:40:48 206  
10:40:48 207  /********************************************************/
10:40:48 208  
10:40:48 209  PROCEDURE UPDATE_TRANSACTION_STATUS (
10:40:48 210  /*
10:40:48 211  Throws exceptions:
10:40:48 212  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 213  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 214  */
10:40:48 215  	in_transaction_id	 IN NUMBER,
10:40:48 216  	in_updated_by		 IN VARCHAR2,
10:40:48 217  	in_transaction_status_id IN NUMBER
10:40:48 218  ) AS
10:40:48 219  BEGIN
10:40:48 220  	PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_STATUS(
10:40:48 221  	  in_transaction_id,
10:40:48 222  	  in_updated_by,
10:40:48 223  	  in_transaction_status_id
10:40:48 224  	);
10:40:48 225  END UPDATE_TRANSACTION_STATUS;
10:40:48 226  
10:40:48 227  /********************************************************/
10:40:48 228  
10:40:48 229  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
10:40:48 230  /*
10:40:48 231  Throws exceptions:
10:40:48 232  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 233  */
10:40:48 234  	in_transaction_id IN  NUMBER,
10:40:48 235  	out_attempts_num  OUT NUMBER
10:40:48 236  ) AS
10:40:48 237  BEGIN
10:40:48 238  	PROCS_TRANSACTION_V22.GET_FAILED_ATTEMPTS_NUMBER(
10:40:48 239  	  in_transaction_id,
10:40:48 240  	  out_attempts_num
10:40:48 241  	);
10:40:48 242  END GET_FAILED_ATTEMPTS_NUMBER;
10:40:48 243  
10:40:48 244  /********************************************************/
10:40:48 245  
10:40:48 246  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
10:40:48 247  /*
10:40:48 248  Throws exceptions:
10:40:48 249  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 250  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 251  */
10:40:48 252  	in_transaction_id IN  NUMBER,
10:40:48 253  	out_is_successfull  OUT NUMBER
10:40:48 254  ) AS
10:40:48 255  BEGIN
10:40:48 256  	PROCS_TRANSACTION_V22.IS_TRANSACTION_SUCCESSFULL(
10:40:48 257  	  in_transaction_id,
10:40:48 258  	  out_is_successfull
10:40:48 259  	);
10:40:48 260  END IS_TRANSACTION_SUCCESSFULL;
10:40:48 261  /********************************************************/
10:40:48 262  
10:40:48 263  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:48 264  /*
10:40:48 265  Throws exceptions:
10:40:48 266  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 267  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 268  */
10:40:48 269  	in_invoice_id		       IN NUMBER,
10:40:48 270  	in_invoice_status_id	       IN NUMBER,
10:40:48 271  	in_updated_by		       IN VARCHAR2
10:40:48 272  ) AS
10:40:48 273  BEGIN
10:40:48 274  	PROCS_INVOICE_V22.UPDATE_INVOICE_STATUS(
10:40:48 275  	  in_invoice_id,
10:40:48 276  	  in_invoice_status_id,
10:40:48 277  	  in_updated_by
10:40:48 278  	);
10:40:48 279  END UPDATE_INVOICE_STATUS;
10:40:48 280  
10:40:48 281  /********************************************************/
10:40:48 282  
10:40:48 283  PROCEDURE SUSPEND_SUBSCRIPTION(
10:40:48 284  /*
10:40:48 285  Throws exceptions:
10:40:48 286  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 287  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:48 288  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 289  */
10:40:48 290  	  in_subs_id	IN NUMBER ,
10:40:48 291  	  in_updated_by IN VARCHAR2
10:40:48 292  ) AS
10:40:48 293  BEGIN
10:40:48 294  	PROCS_SUBSCRIPTION_V22.SUSPEND_SUBSCRIPTION(
10:40:48 295  	  in_subs_id,
10:40:48 296  	  in_updated_by
10:40:48 297  	);
10:40:48 298  END SUSPEND_SUBSCRIPTION;
10:40:48 299  
10:40:48 300  /********************************************************/
10:40:48 301  
10:40:48 302  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:48 303  /*
10:40:48 304  Throws exceptions:
10:40:48 305  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 306  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 307  */
10:40:48 308  	in_credit_card_id IN  NUMBER,
10:40:48 309  	out_result_set	  OUT SYS_REFCURSOR
10:40:48 310  ) AS
10:40:48 311  BEGIN
10:40:48 312  	PROCS_FIN_INSTRUMENTS_V22.GET_CREDIT_CARD_BY_ID(
10:40:48 313  	  in_credit_card_id,
10:40:48 314  	  out_result_set
10:40:48 315  	);
10:40:48 316  END GET_CREDIT_CARD_BY_ID;
10:40:48 317  
10:40:48 318  /*********************************************************/
10:40:48 319  
10:40:48 320  PROCEDURE GET_TRANSACTION_AMOUNT (
10:40:48 321  /*
10:40:48 322  Throws exceptions:
10:40:48 323  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 324  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 325  */
10:40:48 326  	in_transaction_id      IN  NUMBER,
10:40:48 327  	out_transaction_amount OUT NUMBER
10:40:48 328  ) AS
10:40:48 329  BEGIN
10:40:48 330  	PROCS_TRANSACTION_V22.GET_TRANSACTION_AMOUNT(
10:40:48 331  	  in_transaction_id,
10:40:48 332  	  out_transaction_amount
10:40:48 333  	);
10:40:48 334  END GET_TRANSACTION_AMOUNT;
10:40:48 335  
10:40:48 336  /***********************************************************/
10:40:48 337  
10:40:48 338  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
10:40:48 339  /*
10:40:48 340  Throws exceptions:
10:40:48 341  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 342  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 343  */
10:40:48 344  	in_invoice_id  IN  NUMBER,
10:40:48 345  	out_account_id OUT NUMBER
10:40:48 346  ) AS
10:40:48 347  BEGIN
10:40:48 348  	PROCS_INVOICE_V22.GET_ACCOUNT_BY_INVOICE_ID(
10:40:48 349  	  in_invoice_id,
10:40:48 350  	  out_account_id
10:40:48 351  	);
10:40:48 352  END GET_ACCOUNT_BY_INVOICE_ID;
10:40:48 353  
10:40:48 354  /************************************************************/
10:40:48 355  
10:40:48 356  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
10:40:48 357  /*
10:40:48 358  Throws exceptions:
10:40:48 359  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 360  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 361  */
10:40:48 362  	in_gift_certificate_id IN NUMBER,
10:40:48 363  	out_result_set	       OUT SYS_REFCURSOR
10:40:48 364  ) AS
10:40:48 365  BEGIN
10:40:48 366  	PROCS_FIN_INSTRUMENTS_V22.GET_GIFT_CERTIFICATE_BY_ID (
10:40:48 367  	  in_gift_certificate_id,
10:40:48 368  	  out_result_set
10:40:48 369  	);
10:40:48 370  END GET_GIFT_CERTIFICATE_BY_ID;
10:40:48 371  
10:40:48 372  /**************************************************************/
10:40:48 373  
10:40:48 374  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
10:40:48 375  /*
10:40:48 376  Throws exceptions:
10:40:48 377  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 378  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 379  */
10:40:48 380  	in_charge_id	    IN NUMBER,
10:40:48 381  	out_subscription_id OUT NUMBER
10:40:48 382  ) AS
10:40:48 383  BEGIN
10:40:48 384  	PROCS_CHARGE_V22.GET_SUBSCR_ID_BY_CHARGE_ID(
10:40:48 385  	  in_charge_id,
10:40:48 386  	  out_subscription_id
10:40:48 387  	);
10:40:48 388  END GET_SUBSCR_ID_BY_CHARGE_ID;
10:40:48 389  
10:40:48 390  /**************************************************************/
10:40:48 391  
10:40:48 392  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
10:40:48 393  /*
10:40:48 394  Throws exceptions:
10:40:48 395  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 396  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 397  */
10:40:48 398  	in_gift_certificate_id IN NUMBER,
10:40:48 399  	in_charge_id	       IN NUMBER,
10:40:48 400  	out_result	       OUT NUMBER
10:40:48 401  ) AS
10:40:48 402  BEGIN
10:40:48 403  	PROCS_FIN_INSTRUMENTS_V22.IS_GCERT_FOR_PROPER_OFFER (
10:40:48 404  	  in_gift_certificate_id,
10:40:48 405  	  in_charge_id,
10:40:48 406  	  out_result
10:40:48 407  	);
10:40:48 408  END IS_GCERT_FOR_PROPER_OFFER;
10:40:48 409  
10:40:48 410  /**************************************************************/
10:40:48 411  
10:40:48 412  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:48 413  /*
10:40:48 414  Throws exceptions:
10:40:48 415  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 416  */
10:40:48 417  	  in_subscription_id IN  NUMBER,
10:40:48 418  	  out_result_set      OUT SYS_REFCURSOR
10:40:48 419  ) AS
10:40:48 420  BEGIN
10:40:48 421  	PROCS_SUBSCRIPTION_V22.GET_SUBSCRIPTION_INFO (
10:40:48 422  	  in_subscription_id,
10:40:48 423  	  out_result_set
10:40:48 424  	);
10:40:48 425  END GET_SUBSCRIPTION_INFO;
10:40:48 426  
10:40:48 427  /****************************************************************/
10:40:48 428  
10:40:48 429  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:48 430  /*
10:40:48 431  Throws exceptions:
10:40:48 432  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 433  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 434  */
10:40:48 435  	in_invoice_id IN  NUMBER,
10:40:48 436  	out_amount    OUT NUMBER
10:40:48 437  ) AS
10:40:48 438  BEGIN
10:40:48 439  	PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT (
10:40:48 440  	  in_invoice_id,
10:40:48 441  	  out_amount
10:40:48 442  	);
10:40:48 443  END CALCULATE_INVOICE_AMOUNT;
10:40:48 444  
10:40:48 445  /****************************************************************/
10:40:48 446  
10:40:48 447  PROCEDURE GET_TRANSACTION_BY_ID (
10:40:48 448  /*
10:40:48 449  Throws exceptions:
10:40:48 450  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 451  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 452  */
10:40:48 453  	in_transaction_id IN NUMBER,
10:40:48 454  	out_result_set	  OUT SYS_REFCURSOR
10:40:48 455  ) AS
10:40:48 456  BEGIN
10:40:48 457  	PROCS_TRANSACTION_V22.GET_TRANSACTION_BY_ID(
10:40:48 458  	  in_transaction_id,
10:40:48 459  	  out_result_set
10:40:48 460  	);
10:40:48 461  END GET_TRANSACTION_BY_ID;
10:40:48 462  
10:40:48 463  /****************************************************************/
10:40:48 464  
10:40:48 465  PROCEDURE UPDATE_CHARGE_STATUS (
10:40:48 466  /*
10:40:48 467  Throws exceptions:
10:40:48 468  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 469  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 470  */
10:40:48 471  	in_charge_id	    IN CHARGE.ID%TYPE,
10:40:48 472  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
10:40:48 473  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
10:40:48 474  ) AS
10:40:48 475  BEGIN
10:40:48 476  	PROCS_CHARGE_V22.UPDATE_CHARGE_STATUS(
10:40:48 477  	  in_charge_id,
10:40:48 478  	  in_charge_status_id,
10:40:48 479  	  in_updated_by
10:40:48 480  	);
10:40:48 481  END UPDATE_CHARGE_STATUS;
10:40:48 482  
10:40:48 483  /****************************************************************/
10:40:48 484  
10:40:48 485  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:48 486  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:48 487  	out_result_set OUT SYS_REFCURSOR
10:40:48 488  ) AS
10:40:48 489  BEGIN
10:40:48 490  	PROCS_FIN_INSTRUMENTS_V22.GET_GC_BY_PURCH_INVOICE_ID(
10:40:48 491  	  in_invoice_id,
10:40:48 492  	  out_result_set
10:40:48 493  	);
10:40:48 494  END GET_GC_BY_PURCH_INVOICE_ID;
10:40:48 495  
10:40:48 496  /****************************************************************/
10:40:48 497  
10:40:48 498  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
10:40:48 499  /*
10:40:48 500  Throws exceptions:
10:40:48 501  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 502  APP_EXCEPTION_CODES_V22.INTRNAL_ERROR
10:40:48 503  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 504  */
10:40:48 505  	in_transaction_id IN TRANSACTION.ID%TYPE,
10:40:48 506  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
10:40:48 507  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
10:40:48 508  ) AS
10:40:48 509  BEGIN
10:40:48 510  	PROCS_TRANSACTION_V22.UPDATE_TRANSACTION_ORDER_ID(
10:40:48 511  	  in_transaction_id,
10:40:48 512  	  in_order_id,
10:40:48 513  	  in_updated_by
10:40:48 514  	);
10:40:48 515  END UPDATE_TRANSACTION_ORDER_ID;
10:40:48 516  
10:40:48 517  /****************************************************************/
10:40:48 518  
10:40:48 519  PROCEDURE GET_ACTIVE_INVOICES_IDS (
10:40:48 520  /*
10:40:48 521  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 522  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 523  */
10:40:48 524  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
10:40:48 525  	in_subscription_id IN NUMBER,
10:40:48 526  	out_result_set	   OUT SYS_REFCURSOR
10:40:48 527  ) AS
10:40:48 528  BEGIN
10:40:48 529  	PROCS_SUBSCRIPTION_V22.GET_ACTIVE_INVOICES_IDS(
10:40:48 530  	  in_subscription_id,
10:40:48 531  	  out_result_set
10:40:48 532  	);
10:40:48 533  END GET_ACTIVE_INVOICES_IDS;
10:40:48 534  
10:40:48 535  /****************************************************************/
10:40:48 536  
10:40:48 537  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
10:40:48 538  /*
10:40:48 539  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 540  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 541  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:48 542  */
10:40:48 543  --  in_invoice_id        IN INVOICE.ID%TYPE,
10:40:48 544  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
10:40:48 545  -- norlov: in_refundable	      IN refund enabled
10:40:48 546  	in_invoice_id	     IN NUMBER,
10:40:48 547  	in_updated_by	     IN VARCHAR2,
10:40:48 548  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V22.FALSE
10:40:48 549  --  in_cancellation_date IN DATE DEFAULT current_timestamp
10:40:48 550  ) AS
10:40:48 551  BEGIN
10:40:48 552  	PROCS_SUBSCRIPTION_V22.CANCEL_SUBSCRIPTION_INVOICE(
10:40:48 553  	  in_invoice_id,
10:40:48 554  	  in_updated_by,
10:40:48 555  	  in_refundable
10:40:48 556  	);
10:40:48 557  END CANCEL_SUBSCRIPTION_INVOICE;
10:40:48 558  
10:40:48 559  /****************************************************************/
10:40:48 560  
10:40:48 561  PROCEDURE FINALIZE_CANCELATION (
10:40:48 562  /*
10:40:48 563  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 564  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 565  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:48 566  */
10:40:48 567  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
10:40:48 568  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
10:40:48 569  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
10:40:48 570  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
10:40:48 571  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
10:40:48 572  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
10:40:48 573  	in_subscription_id    IN NUMBER,
10:40:48 574  	in_cancelation_reason IN VARCHAR2,
10:40:48 575  	in_cancelation_date   IN DATE,
10:40:48 576  	in_note 	      IN VARCHAR2,
10:40:48 577  	in_agent_id	      IN NUMBER,
10:40:48 578  	in_updated_by	      IN VARCHAR2
10:40:48 579  ) AS
10:40:48 580  BEGIN
10:40:48 581  	PROCS_SUBSCRIPTION_V22.FINALIZE_CANCELATION(
10:40:48 582  	  in_subscription_id,
10:40:48 583  	  in_cancelation_reason,
10:40:48 584  	  in_cancelation_date,
10:40:48 585  	  in_note,
10:40:48 586  	  in_agent_id,
10:40:48 587  	  in_updated_by
10:40:48 588  	);
10:40:48 589  END FINALIZE_CANCELATION;
10:40:48 590  
10:40:48 591  /****************************************************************/
10:40:48 592  
10:40:48 593  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
10:40:48 594  /*
10:40:48 595  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 596  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 597  */
10:40:48 598  	in_subscription_id IN NUMBER,
10:40:48 599  	out_result_set	   OUT SYS_REFCURSOR
10:40:48 600  ) AS
10:40:48 601  BEGIN
10:40:48 602  	PROCS_SUBSCRIPTION_V22.GET_SUBSCR_PROD_OFFERRINGS(
10:40:48 603  	  in_subscription_id,
10:40:48 604  	  out_result_set
10:40:48 605  	);
10:40:48 606  END GET_SUBSCR_PROD_OFFERRINGS;
10:40:48 607  
10:40:48 608  /****************************************************************/
10:40:48 609  
10:40:48 610  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:48 611  /*
10:40:48 612  Throws exceptions (codes):
10:40:48 613  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 614  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 615  */
10:40:48 616  	in_offer_chain_id IN NUMBER,
10:40:48 617  	in_meta_data_name IN VARCHAR2,
10:40:48 618  	out_result_set	  OUT SYS_REFCURSOR
10:40:48 619  )AS
10:40:48 620  BEGIN
10:40:48 621  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_META_DATA(
10:40:48 622  	  in_offer_chain_id,
10:40:48 623  	  in_meta_data_name,
10:40:48 624  	  out_result_set
10:40:48 625  	);
10:40:48 626  END GET_OFFER_CHAIN_META_DATA;
10:40:48 627  
10:40:48 628  /****************************************************************/
10:40:48 629  
10:40:48 630  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:48 631  /*
10:40:48 632  Throws exceptions (codes):
10:40:48 633  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 634  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 635  */
10:40:48 636  	in_product_offering_id IN NUMBER,
10:40:48 637  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
10:40:48 638  	out_result_set	       OUT SYS_REFCURSOR
10:40:48 639  )AS
10:40:48 640  BEGIN
10:40:48 641  	PROCS_OFFER_CHAIN_V22.GET_PRODUCT_OFFERING_META_DATA(
10:40:48 642  	  in_product_offering_id,
10:40:48 643  	  in_meta_data_name,
10:40:48 644  	  out_result_set
10:40:48 645  	);
10:40:48 646  END GET_PRODUCT_OFFERING_META_DATA;
10:40:48 647  
10:40:48 648  /****************************************************************/
10:40:48 649  
10:40:48 650  PROCEDURE READ_ACCOUNT (
10:40:48 651  	in_account_id  IN ACCOUNT.ID%TYPE,
10:40:48 652  	out_result_set OUT SYS_REFCURSOR
10:40:48 653  )AS
10:40:48 654  BEGIN
10:40:48 655  	PROCS_ACCOUNT_CRU_V22.READ_ACCOUNT(
10:40:48 656  	  in_account_id,
10:40:48 657  	  out_result_set
10:40:48 658  	);
10:40:48 659  END READ_ACCOUNT;
10:40:48 660  
10:40:48 661  /****************************************************************/
10:40:48 662  
10:40:48 663  PROCEDURE GET_COLLECTED_CHARGES (
10:40:48 664  /*
10:40:48 665  Throws exceptions:
10:40:48 666  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 667  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 668  */
10:40:48 669  	in_invoice_id  IN NUMBER,
10:40:48 670  	out_result_set OUT SYS_REFCURSOR
10:40:48 671  ) AS
10:40:48 672  BEGIN
10:40:48 673  	PROCS_CHARGE_V22.GET_COLLECTED_CHARGES(
10:40:48 674  	  in_invoice_id,
10:40:48 675  	  out_result_set
10:40:48 676  	);
10:40:48 677  END GET_COLLECTED_CHARGES;
10:40:48 678  
10:40:48 679  /****************************************************************/
10:40:48 680  
10:40:48 681  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
10:40:48 682  /*
10:40:48 683  Throws exceptions:
10:40:48 684  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 685  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 686  */
10:40:48 687  	in_invoice_id IN NUMBER,
10:40:48 688  	out_group_ids OUT SYS_REFCURSOR
10:40:48 689  ) AS
10:40:48 690  BEGIN
10:40:48 691  
10:40:48 692  	PROCS_ACCOUNT_V22.GET_GROUPS_ID_BY_INVOICE_ID(
10:40:48 693  	  in_invoice_id,
10:40:48 694  	  out_group_ids
10:40:48 695  	);
10:40:48 696  
10:40:48 697  END GET_GROUPS_ID_BY_INVOICE_ID;
10:40:48 698  
10:40:48 699  /****************************************************************/
10:40:48 700  
10:40:48 701  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:48 702  /*
10:40:48 703  Throws exceptions:
10:40:48 704  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 705  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 706  */
10:40:48 707  	in_group_id IN NUMBER,
10:40:48 708  	out_account_id	OUT NUMBER
10:40:48 709  ) AS
10:40:48 710  BEGIN
10:40:48 711  
10:40:48 712  	PROCS_ACCOUNT_V22.GET_ACCOUNT_ID_BY_GROUP_ID(
10:40:48 713  	  in_group_id,
10:40:48 714  	  out_account_id
10:40:48 715  	);
10:40:48 716  
10:40:48 717  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:40:48 718  
10:40:48 719  /****************************************************************/
10:40:48 720  
10:40:48 721  PROCEDURE LOCK_ACCOUNT (
10:40:48 722  	in_group_id    IN NUMBER,
10:40:48 723  	in_lock_key    IN VARCHAR2,
10:40:48 724  	in_seconds_num IN NUMBER,
10:40:48 725  	in_created_by  IN VARCHAR2,
10:40:48 726  	in_reason      IN VARCHAR2
10:40:48 727  ) AS
10:40:48 728  BEGIN
10:40:48 729  	PROCS_LOCKING_V22.LOCK_ACCOUNT(
10:40:48 730  	  in_group_id,
10:40:48 731  	  in_lock_key,
10:40:48 732  	  in_seconds_num,
10:40:48 733  	  in_created_by,
10:40:48 734  	  in_reason
10:40:48 735  	);
10:40:48 736  END LOCK_ACCOUNT;
10:40:48 737  
10:40:48 738  /****************************************************************/
10:40:48 739  
10:40:48 740  PROCEDURE RELEASE_LOCK (
10:40:48 741  	in_group_id IN NUMBER,
10:40:48 742  	in_lock_key IN VARCHAR2
10:40:48 743  ) AS
10:40:48 744  BEGIN
10:40:48 745  	PROCS_LOCKING_V22.RELEASE_LOCK(
10:40:48 746  	  in_group_id,
10:40:48 747  	  in_lock_key
10:40:48 748  	);
10:40:48 749  END RELEASE_LOCK;
10:40:48 750  
10:40:48 751  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
10:40:48 752  	in_invoice_id		    IN NUMBER,
10:40:48 753  	out_order_id		    OUT VARCHAR2,
10:40:48 754  	out_external_transaction_id OUT VARCHAR2
10:40:48 755  ) AS
10:40:48 756  BEGIN
10:40:48 757  	PROCS_INVOICE_V22.GET_PAYMENT_INFO_BY_INVOICE_ID(
10:40:48 758  	  in_invoice_id,
10:40:48 759  	  out_order_id,
10:40:48 760  	  out_external_transaction_id
10:40:48 761  	);
10:40:48 762  END GET_PAYMENT_INFO_BY_INVOICE_ID;
10:40:48 763  
10:40:48 764  /******************************************************************************/
10:40:48 765  
10:40:48 766  PROCEDURE GET_PAYPAL_BY_ID (
10:40:48 767  	in_paypal_id   IN  NUMBER,
10:40:48 768  	out_result_set OUT SYS_REFCURSOR
10:40:48 769  ) AS
10:40:48 770  BEGIN
10:40:48 771  	PROCS_FIN_INSTRUMENTS_V22.GET_PAYPAL_BY_ID(
10:40:48 772  	  in_paypal_id,
10:40:48 773  	  out_result_set
10:40:48 774  	);
10:40:48 775  END GET_PAYPAL_BY_ID;
10:40:48 776  
10:40:48 777  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
10:40:48 778  /*
10:40:48 779  Throws exceptions:
10:40:48 780  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 781  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 782  */
10:40:48 783  	in_charge_id   in  number,
10:40:48 784  	out_attempt_count out number
10:40:48 785  ) as
10:40:48 786  begin
10:40:48 787  	PROCS_TRANSACTION_V22.GET_NEXT_ATTEMPT_NUMBER(
10:40:48 788  	  in_charge_id,
10:40:48 789  	  out_attempt_count
10:40:48 790  	);
10:40:48 791  end GET_NEXT_ATTEMPT_NUMBER;
10:40:48 792  
10:40:48 793  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:48 794  	in_offer_chain_id	 IN NUMBER,
10:40:48 795  	in_action_name		 IN VARCHAR2,
10:40:48 796  	out_notification_type_id out number
10:40:48 797  ) as
10:40:48 798  begin
10:40:48 799  	PROCS_OFFER_CHAIN_V22.GET_NOTIFICATION_TYPE_ID(
10:40:48 800  	  in_offer_chain_id,
10:40:48 801  	  in_action_name,
10:40:48 802  	  out_notification_type_id
10:40:48 803  	);
10:40:48 804  end GET_NOTIFICATION_TYPE_ID;
10:40:48 805  
10:40:48 806  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
10:40:48 807  /*
10:40:48 808  Throws exceptions:
10:40:48 809  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 810  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 811  */
10:40:48 812  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:48 813  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
10:40:48 814  ) AS
10:40:48 815  BEGIN
10:40:48 816  PROCS_FIN_INSTRUMENTS_V22.GET_GC_ID_BY_PURCH_INVOICE_ID(
10:40:48 817  in_invoice_id,
10:40:48 818  out_gift_certificate_id
10:40:48 819  );
10:40:48 820  END GET_GC_ID_BY_PURCH_INVOICE_ID;
10:40:48 821  
10:40:48 822  /****************************************************************************/
10:40:48 823  
10:40:48 824  PROCEDURE SHOULD_MOVE_TO_GRACE(
10:40:48 825  	in_invoice_id  IN INVOICE.ID%TYPE,
10:40:48 826  	out_result     OUT NUMBER
10:40:48 827  ) AS
10:40:48 828  BEGIN
10:40:48 829  	-- if the invoice preceding the given invoice has no transaction attempts, then
10:40:48 830  	-- it is not billed out of Sartre. if so, then the associated subscription
10:40:48 831  	-- should be canceled after a final failed billing attempt--not moved to grace.
10:40:48 832  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
10:40:48 833  	FROM CHARGE c
10:40:48 834  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
10:40:48 835  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
10:40:48 836  	WHERE c.INVOICE_ID = (
10:40:48 837  	  -- select previous invoice_id, or -1 if there is none
10:40:48 838  	  SELECT PREV_INVOICE_ID FROM (
10:40:48 839  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
10:40:48 840  	    FROM INVOICE i
10:40:48 841  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
10:40:48 842  	    WHERE l.SUBSCRIPTION_ID = (
10:40:48 843  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
10:40:48 844  	    )
10:40:48 845  	  ) WHERE ID = in_invoice_id
10:40:48 846  	);
10:40:48 847  END SHOULD_MOVE_TO_GRACE;
10:40:48 848  
10:40:48 849  /****************************************************************************/
10:40:48 850  
10:40:48 851  PROCEDURE MOVE_TO_GRACE(
10:40:48 852  	in_invoice_id		      IN INVOICE.ID%TYPE,
10:40:48 853  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
10:40:48 854  	in_grace_period_length_hours  IN NUMBER
10:40:48 855  ) AS
10:40:48 856  BEGIN
10:40:48 857  	PROCS_SUBSCRIPTION_V22.START_GRACE_BY_INVOICE_ID(
10:40:48 858  	  in_invoice_id        => in_invoice_id,
10:40:48 859  	  in_updater	       => in_updated_by,
10:40:48 860  	  in_duration_in_hours => in_grace_period_length_hours
10:40:48 861  	);
10:40:48 862  END MOVE_TO_GRACE;
10:40:48 863  
10:40:48 864  /****************************************************************************/
10:40:48 865  
10:40:48 866  PROCEDURE MOVE_OUT_OF_GRACE(
10:40:48 867  	in_invoice_id	IN INVOICE.ID%TYPE,
10:40:48 868  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
10:40:48 869  ) AS
10:40:48 870  BEGIN
10:40:48 871  	PROCS_SUBSCRIPTION_V22.STOP_GRACE_BY_INVOICE_ID(
10:40:48 872  	  in_invoice_id => in_invoice_id,
10:40:48 873  	  in_updater	=> in_updated_by
10:40:48 874  	);
10:40:48 875  END MOVE_OUT_OF_GRACE;
10:40:48 876  
10:40:48 877  END PUBLIC_PROCS_BILLING_V22;
10:40:48 878  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE LOCK_ACCOUNT (
10:40:48   4  	in_group_id    IN NUMBER,
10:40:48   5  	in_lock_key    IN VARCHAR2,
10:40:48   6  	in_seconds_num IN NUMBER,
10:40:48   7  	in_created_by  IN VARCHAR2,
10:40:48   8  	in_reason      IN VARCHAR2
10:40:48   9  ) AS
10:40:48  10  BEGIN
10:40:48  11  	PROCS_LOCKING_V22.LOCK_ACCOUNT(
10:40:48  12  	  in_group_id,
10:40:48  13  	  in_lock_key,
10:40:48  14  	  in_seconds_num,
10:40:48  15  	  in_created_by,
10:40:48  16  	  in_reason
10:40:48  17  	);
10:40:48  18  END LOCK_ACCOUNT;
10:40:48  19  
10:40:48  20  /******************************************************************************/
10:40:48  21  
10:40:48  22  PROCEDURE RELEASE_LOCK (
10:40:48  23  	in_group_id IN NUMBER,
10:40:48  24  	in_lock_key IN VARCHAR2
10:40:48  25  ) AS
10:40:48  26  BEGIN
10:40:48  27  	PROCS_LOCKING_V22.RELEASE_LOCK(
10:40:48  28  	  in_group_id,
10:40:48  29  	  in_lock_key
10:40:48  30  	);
10:40:48  31  END RELEASE_LOCK;
10:40:48  32  
10:40:48  33  END PUBLIC_PROCS_NOTIFICATION_V22;
10:40:48  34  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
10:40:48   4  	out_result_set OUT SYS_REFCURSOR
10:40:48   5  ) AS
10:40:48   6  BEGIN
10:40:48   7  	PROCS_GROUP_ACCOUNT_V22.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
10:40:48   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
10:40:48   9  
10:40:48  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
10:40:48  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
10:40:48  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
10:40:48  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
10:40:48  14  ) AS
10:40:48  15  BEGIN
10:40:48  16  	PROCS_GROUP_ACCOUNT_V22.UPDATE_SS_NEED_ENTITLEMENTS(
10:40:48  17  	  in_sub_share_id => in_sub_share_id,
10:40:48  18  	  in_need_entitlements => in_need_entitlements,
10:40:48  19  	  in_updater => in_updater
10:40:48  20  	);
10:40:48  21  END UPDATE_SS_NEED_ENTITLEMENTS;
10:40:48  22  
10:40:48  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
10:40:48  24  /*
10:40:48  25  Throws exceptions:
10:40:48  26  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  27  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  28  */
10:40:48  29  	  in_offer_chain_id IN	 NUMBER,
10:40:48  30  	  out_result_set    OUT  SYS_REFCURSOR
10:40:48  31  ) AS
10:40:48  32  BEGIN
10:40:48  33  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_BY_ID (
10:40:48  34  	  in_offer_chain_id => in_offer_chain_id,
10:40:48  35  	  out_result_set => out_result_set
10:40:48  36  	);
10:40:48  37  END GET_OFFER_CHAIN_BY_ID;
10:40:48  38  
10:40:48  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
10:40:48  40  /*
10:40:48  41  Throws exceptions (codes):
10:40:48  42  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  43  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  44  */
10:40:48  45  	in_offer_chain_id IN NUMBER,
10:40:48  46  	in_meta_data_name IN VARCHAR2,
10:40:48  47  	out_result_set	  OUT SYS_REFCURSOR
10:40:48  48  )AS
10:40:48  49  BEGIN
10:40:48  50  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_META_DATA(
10:40:48  51  	  in_offer_chain_id,
10:40:48  52  	  in_meta_data_name,
10:40:48  53  	  out_result_set
10:40:48  54  	);
10:40:48  55  END GET_OFFER_CHAIN_META_DATA;
10:40:48  56  
10:40:48  57  PROCEDURE GET_ENDING_LICENSES (
10:40:48  58  /*
10:40:48  59  Throws exceptions:
10:40:48  60  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  61  */
10:40:48  62  	in_hours_number IN NUMBER,
10:40:48  63  	out_result_set OUT SYS_REFCURSOR
10:40:48  64  ) AS
10:40:48  65  BEGIN
10:40:48  66  	PROCS_LICENSE_V22.GET_ENDING_LICENSES(in_hours_number,out_result_set);
10:40:48  67  END GET_ENDING_LICENSES;
10:40:48  68  
10:40:48  69  PROCEDURE GET_ENDING_LICENSES_CC (
10:40:48  70  /*
10:40:48  71  Throws exceptions:
10:40:48  72  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  73  */
10:40:48  74  	in_hours_number IN NUMBER,
10:40:48  75  	out_result_set OUT SYS_REFCURSOR,
10:40:48  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:48  77  ) AS
10:40:48  78  BEGIN
10:40:48  79  	PROCS_LICENSE_V22.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
10:40:48  80  END GET_ENDING_LICENSES_CC;
10:40:48  81  
10:40:48  82  /*******************************************************/
10:40:48  83  
10:40:48  84  PROCEDURE GET_RECURRING_OFFER (
10:40:48  85  /*
10:40:48  86  Throws exceptions:
10:40:48  87  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  88  */
10:40:48  89  	in_license_id  IN NUMBER,
10:40:48  90  	out_result_set OUT SYS_REFCURSOR
10:40:48  91  ) AS
10:40:48  92  BEGIN
10:40:48  93  	PROCS_LICENSE_V22.GET_RECURRING_OFFER (
10:40:48  94  	  in_license_id,
10:40:48  95  	  out_result_set
10:40:48  96  	);
10:40:48  97  END GET_RECURRING_OFFER;
10:40:48  98  
10:40:48  99  /********************************************************/
10:40:48 100  
10:40:48 101  PROCEDURE GET_NEXT_OFFER (
10:40:48 102  /*
10:40:48 103  Throws exceptions:
10:40:48 104  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 105  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:48 106  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 107  */
10:40:48 108  	in_license_id  IN NUMBER,
10:40:48 109  	out_result_set OUT SYS_REFCURSOR
10:40:48 110  ) AS
10:40:48 111  BEGIN
10:40:48 112  	PROCS_LICENSE_V22.GET_NEXT_OFFER (
10:40:48 113  	  in_license_id,
10:40:48 114  	  out_result_set
10:40:48 115  	);
10:40:48 116  END GET_NEXT_OFFER;
10:40:48 117  
10:40:48 118  /*********************************************************/
10:40:48 119  
10:40:48 120  PROCEDURE UPDATE_LICENSE_STATUS(
10:40:48 121  /*
10:40:48 122  Throws exceptions:
10:40:48 123  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 124  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 125  */
10:40:48 126  	  in_license_id     IN NUMBER,
10:40:48 127  	  in_license_status IN NUMBER,
10:40:48 128  	  in_updated_by     IN VARCHAR2
10:40:48 129  ) AS
10:40:48 130  BEGIN
10:40:48 131  	PROCS_LICENSE_V22.UPDATE_LICENSE_STATUS (
10:40:48 132  	  in_license_id,
10:40:48 133  	  in_license_status,
10:40:48 134  	  in_updated_by
10:40:48 135  	);
10:40:48 136  END UPDATE_LICENSE_STATUS;
10:40:48 137  
10:40:48 138  /**********************************************************/
10:40:48 139  
10:40:48 140  PROCEDURE UPDATE_INVOICE_STATUS (
10:40:48 141  /*
10:40:48 142  Throws exceptions:
10:40:48 143  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 144  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 145  */
10:40:48 146  	in_invoice_id		       IN NUMBER,
10:40:48 147  	in_invoice_status_id	       IN NUMBER,
10:40:48 148  	in_updated_by		       IN VARCHAR2
10:40:48 149  ) AS
10:40:48 150  BEGIN
10:40:48 151  	PROCS_INVOICE_V22.UPDATE_INVOICE_STATUS(
10:40:48 152  	  in_invoice_id,
10:40:48 153  	  in_invoice_status_id,
10:40:48 154  	  in_updated_by
10:40:48 155  	);
10:40:48 156  END UPDATE_INVOICE_STATUS;
10:40:48 157  
10:40:48 158  /***********************************************************/
10:40:48 159  
10:40:48 160  PROCEDURE CREATE_LICENSE(
10:40:48 161  /*
10:40:48 162  Throws exceptions:
10:40:48 163  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 164  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 165  APP_EXCEPTION_CODES_V22.INTERNAL_ERROR
10:40:48 166  */
10:40:48 167  	in_status_id		    IN NUMBER,
10:40:48 168  	in_needs_entitlements	    IN NUMBER,
10:40:48 169  	in_start_date		    IN DATE,
10:40:48 170  	in_end_date		    IN DATE,
10:40:48 171  	in_offer_id		    IN NUMBER,
10:40:48 172  	in_subscription_id	    IN NUMBER,
10:40:48 173  	in_invoice_id		    IN NUMBER,
10:40:48 174  	in_created_by		    IN VARCHAR2,
10:40:48 175  	in_is_extension 	    IN NUMBER,
10:40:48 176  	in_current_offer_index	    IN NUMBER,
10:40:48 177  	in_current_offer_recurr_num IN NUMBER,
10:40:48 178  	out_license_id		    OUT NUMBER
10:40:48 179  ) AS
10:40:48 180  BEGIN
10:40:48 181  	PROCS_LICENSE_V22.CREATE_LICENSE (
10:40:48 182  	  in_status_id,
10:40:48 183  	  in_needs_entitlements,
10:40:48 184  	  in_start_date,
10:40:48 185  	  in_end_date,
10:40:48 186  	  in_offer_id,
10:40:48 187  	  in_subscription_id,
10:40:48 188  	  in_invoice_id,
10:40:48 189  	  in_created_by,
10:40:48 190  	  in_is_extension,
10:40:48 191  	  in_current_offer_index,
10:40:48 192  	  in_current_offer_recurr_num,
10:40:48 193  	  out_license_id
10:40:48 194  	);
10:40:48 195  END CREATE_LICENSE;
10:40:48 196  
10:40:48 197  /******************************************************/
10:40:48 198  
10:40:48 199  PROCEDURE CREATE_INVOICE(
10:40:48 200  /*
10:40:48 201  Throws exceptions:
10:40:48 202  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 203  */
10:40:48 204  	  in_invoice_status IN NUMBER,
10:40:48 205  	  in_created_by     IN VARCHAR2,
10:40:48 206  	  in_tax_exempt_id  IN VARCHAR2,
10:40:48 207  	  out_invoice_id    OUT NUMBER
10:40:48 208  ) AS
10:40:48 209  BEGIN
10:40:48 210  	PROCS_INVOICE_V22.CREATE_INVOICE (
10:40:48 211  	  in_invoice_status,
10:40:48 212  	  in_created_by,
10:40:48 213  	  in_tax_exempt_id,
10:40:48 214  	  out_invoice_id
10:40:48 215  	);
10:40:48 216  END CREATE_INVOICE;
10:40:48 217  
10:40:48 218  /*******************************************************/
10:40:48 219  
10:40:48 220  PROCEDURE CREATE_CHARGE(
10:40:48 221  /*
10:40:48 222  Throws exceptions:
10:40:48 223  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 224  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 225  */
10:40:48 226  	in_invoice_id	      IN NUMBER,
10:40:48 227  	in_transaction_id     IN NUMBER,
10:40:48 228  	in_instrument_type_id IN NUMBER,
10:40:48 229  	in_instrument_id      IN NUMBER,
10:40:48 230  	in_charge_amount      IN NUMBER,
10:40:48 231  	in_created_by	      IN VARCHAR2,
10:40:48 232  	in_charge_status_id   IN NUMBER,
10:40:48 233  	out_charge_id	      OUT NUMBER
10:40:48 234  ) AS
10:40:48 235  BEGIN
10:40:48 236  	PROCS_CHARGE_V22.CREATE_CHARGE (
10:40:48 237  	  in_invoice_id,
10:40:48 238  	  in_transaction_id,
10:40:48 239  	  in_instrument_type_id,
10:40:48 240  	  in_instrument_id,
10:40:48 241  	  in_charge_amount,
10:40:48 242  	  in_created_by,
10:40:48 243  	  in_charge_status_id,
10:40:48 244  	  out_charge_id
10:40:48 245  	);
10:40:48 246  END CREATE_CHARGE;
10:40:48 247  
10:40:48 248  /**********************************************************/
10:40:48 249  
10:40:48 250  PROCEDURE HAS_FUTURE_LICENSE (
10:40:48 251  /*
10:40:48 252  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 253  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 254  --
10:40:48 255  RETURNS:
10:40:48 256  1 - if has,
10:40:48 257  0 - else
10:40:48 258  */
10:40:48 259  	in_license_id IN NUMBER,
10:40:48 260  	out_result	   OUT NUMBER
10:40:48 261  ) AS
10:40:48 262  BEGIN
10:40:48 263  	PROCS_SUBSCRIPTION_V22.HAS_FUTURE_LICENSE (
10:40:48 264  	  in_license_id,
10:40:48 265  	  out_result
10:40:48 266  	);
10:40:48 267  END HAS_FUTURE_LICENSE;
10:40:48 268  
10:40:48 269  /***********************************************************/
10:40:48 270  
10:40:48 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
10:40:48 272  /*
10:40:48 273  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 274  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 275  */
10:40:48 276  	in_license_id IN NUMBER,
10:40:48 277  	out_group_id  OUT NUMBER
10:40:48 278  ) AS
10:40:48 279  BEGIN
10:40:48 280  	PROCS_LICENSE_V22.GET_GROUP_ID_BY_LICENSE_ID (
10:40:48 281  	  in_license_id,
10:40:48 282  	  out_group_id
10:40:48 283  	);
10:40:48 284  END GET_GROUP_ID_BY_LICENSE_ID;
10:40:48 285  
10:40:48 286  /**********************************************************/
10:40:48 287  
10:40:48 288  PROCEDURE GET_OFFER_PRODUCTS (
10:40:48 289  /*
10:40:48 290  Throws exceptions (codes):
10:40:48 291  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 292  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 293  */
10:40:48 294  	in_offer_id    IN NUMBER,
10:40:48 295  	out_result_set OUT SYS_REFCURSOR
10:40:48 296  ) AS
10:40:48 297  BEGIN
10:40:48 298  	PROCS_OFFER_CHAIN_V22.GET_OFFER_PRODUCTS (
10:40:48 299  	  in_offer_id,
10:40:48 300  	  out_result_set
10:40:48 301  	);
10:40:48 302  END GET_OFFER_PRODUCTS;
10:40:48 303  
10:40:48 304  /***********************************************************/
10:40:48 305  
10:40:48 306  PROCEDURE CREATE_TRANSACTION (
10:40:48 307  /*
10:40:48 308  Throws exceptions:
10:40:48 309  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 310  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 311  */
10:40:48 312  	in_transaction_id	  IN NUMBER,
10:40:48 313  	in_status_id		  IN NUMBER,
10:40:48 314  	in_amount		  IN NUMBER,
10:40:48 315  	in_created_by		  IN VARCHAR2,
10:40:48 316  	in_order_id		  IN VARCHAR2,
10:40:48 317  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
10:40:48 318  	out_transaction_id	  OUT NUMBER
10:40:48 319  ) AS
10:40:48 320  BEGIN
10:40:48 321  	PROCS_TRANSACTION_V22.CREATE_TRANSACTION(
10:40:48 322  	  in_transaction_id,
10:40:48 323  	  in_status_id,
10:40:48 324  	  in_amount,
10:40:48 325  	  in_created_by,
10:40:48 326  	  in_order_id,
10:40:48 327  	  GLOBAL_CONSTANTS_V22.FALSE, -- is_refund should be false in renewal
10:40:48 328  	  in_transaction_type_code,
10:40:48 329  	  out_transaction_id
10:40:48 330  	);
10:40:48 331  END CREATE_TRANSACTION;
10:40:48 332  
10:40:48 333  /************************************************************/
10:40:48 334  
10:40:48 335  PROCEDURE ADD_LINE_ITEMS(
10:40:48 336  /*
10:40:48 337  Throws exceptions:
10:40:48 338  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 339  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 340  */
10:40:48 341  	in_invoice_id IN NUMBER,
10:40:48 342  	in_offer_id   IN NUMBER,
10:40:48 343  	in_created_by IN VARCHAR2
10:40:48 344  ) AS
10:40:48 345  BEGIN
10:40:48 346  	PROCS_LINE_ITEMS_V22.ADD_LINE_ITEMS(
10:40:48 347  	  in_invoice_id,
10:40:48 348  	  in_offer_id,
10:40:48 349  	  in_created_by
10:40:48 350  	);
10:40:48 351  END ADD_LINE_ITEMS;
10:40:48 352  
10:40:48 353  /************************************************************/
10:40:48 354  
10:40:48 355  PROCEDURE CALCULATE_INVOICE_AMOUNT (
10:40:48 356  /*
10:40:48 357  Throws exceptions:
10:40:48 358  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 359  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 360  */
10:40:48 361  	in_invoice_id IN  NUMBER,
10:40:48 362  	out_amount    OUT NUMBER
10:40:48 363  ) AS
10:40:48 364  BEGIN
10:40:48 365  	PROCS_INVOICE_V22.CALCULATE_INVOICE_AMOUNT (
10:40:48 366  	  in_invoice_id,
10:40:48 367  	  out_amount
10:40:48 368  	);
10:40:48 369  END CALCULATE_INVOICE_AMOUNT;
10:40:48 370  
10:40:48 371  /*************************************************************/
10:40:48 372  
10:40:48 373  PROCEDURE RESERVE_TRANSACTION_ID (
10:40:48 374  /*
10:40:48 375  Throws exceptions:
10:40:48 376  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 377  */
10:40:48 378  	out_transaction_id OUT NUMBER
10:40:48 379  ) AS
10:40:48 380  BEGIN
10:40:48 381  	PROCS_TRANSACTION_V22.RESERVE_TRANSACTION_ID (
10:40:48 382  	  out_transaction_id
10:40:48 383  	);
10:40:48 384  END RESERVE_TRANSACTION_ID;
10:40:48 385  
10:40:48 386  /***************************************************************/
10:40:48 387  
10:40:48 388  PROCEDURE P_GET_NEXT_OFFER_INDEX (
10:40:48 389  	in_offer_chain_id	     IN NUMBER,
10:40:48 390  	in_offer_chain_current_index IN NUMBER,
10:40:48 391  	out_next_offer_index	     OUT NUMBER
10:40:48 392  ) AS
10:40:48 393  BEGIN
10:40:48 394  	PROCS_OFFER_CHAIN_V22.P_GET_NEXT_OFFER_INDEX(
10:40:48 395  	  in_offer_chain_id,
10:40:48 396  	  in_offer_chain_current_index,
10:40:48 397  	  out_next_offer_index
10:40:48 398  	);
10:40:48 399  END P_GET_NEXT_OFFER_INDEX;
10:40:48 400  
10:40:48 401  /***************************************************************/
10:40:48 402  
10:40:48 403  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
10:40:48 404  	in_license_id		     IN NUMBER,
10:40:48 405  	in_offer_chain_current_index IN NUMBER,
10:40:48 406  	out_next_offer_index	     OUT NUMBER
10:40:48 407  ) AS
10:40:48 408  BEGIN
10:40:48 409  	PROCS_OFFER_CHAIN_V22.GET_NEXT_OFFER_INDEX_BY_LCNS(
10:40:48 410  	  in_license_id,
10:40:48 411  	  in_offer_chain_current_index,
10:40:48 412  	  out_next_offer_index
10:40:48 413  	);
10:40:48 414  END GET_NEXT_OFFER_INDEX_BY_LCNS;
10:40:48 415  
10:40:48 416  /******************************************************************/
10:40:48 417  
10:40:48 418  PROCEDURE GET_SUBSCRIPTION_INFO (
10:40:48 419  /*
10:40:48 420  Throws exceptions:
10:40:48 421  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 422  */
10:40:48 423  	  in_subscription_id IN  NUMBER,
10:40:48 424  	  out_result_set      OUT SYS_REFCURSOR
10:40:48 425  ) AS
10:40:48 426  BEGIN
10:40:48 427  	PROCS_SUBSCRIPTION_V22.GET_SUBSCRIPTION_INFO(
10:40:48 428  	  in_subscription_id,
10:40:48 429  	  out_result_set
10:40:48 430  	);
10:40:48 431  END GET_SUBSCRIPTION_INFO;
10:40:48 432  
10:40:48 433  /*******************************************************************/
10:40:48 434  
10:40:48 435  PROCEDURE CLOSE_SUBSCRIPTION (
10:40:48 436  	in_subscription_id IN NUMBER,
10:40:48 437  	in_updated_by	   IN VARCHAR2
10:40:48 438  ) AS
10:40:48 439  BEGIN
10:40:48 440  	PROCS_SUBSCRIPTION_V22.CLOSE_SUBSCRIPTION(
10:40:48 441  	  in_subscription_id,
10:40:48 442  	  in_updated_by
10:40:48 443  	);
10:40:48 444  END CLOSE_SUBSCRIPTION;
10:40:48 445  
10:40:48 446  /*******************************************************************/
10:40:48 447  
10:40:48 448  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
10:40:48 449  	out_result_set OUT SYS_REFCURSOR
10:40:48 450  ) AS
10:40:48 451  BEGIN
10:40:48 452  	PROCS_LICENSE_V22.GET_NEED_ENTITLEMENTS_LICENSES(
10:40:48 453  	  out_result_set
10:40:48 454  	);
10:40:48 455  END GET_NEED_ENTITLEMENTS_LICENSES;
10:40:48 456  
10:40:48 457  /*******************************************************************/
10:40:48 458  
10:40:48 459  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
10:40:48 460  	in_license_id	      IN NUMBER,
10:40:48 461  	in_needs_entitlements IN NUMBER,
10:40:48 462  	in_updated_by	      IN VARCHAR2
10:40:48 463  ) AS
10:40:48 464  BEGIN
10:40:48 465  	PROCS_LICENSE_V22.UPDATE_NEED_ENTITLEMENTS_FLAG(
10:40:48 466  	  in_license_id,
10:40:48 467  	  in_needs_entitlements,
10:40:48 468  	  in_updated_by
10:40:48 469  	);
10:40:48 470  END UPDATE_NEED_ENTITLEMENTS_FLAG;
10:40:48 471  
10:40:48 472  /*******************************************************/
10:40:48 473  
10:40:48 474  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
10:40:48 475  /*
10:40:48 476  Throws exceptions (codes):
10:40:48 477  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 478  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 479  */
10:40:48 480  	in_offer_id    IN NUMBER,
10:40:48 481  	out_result_set OUT SYS_REFCURSOR
10:40:48 482  ) AS
10:40:48 483  BEGIN
10:40:48 484  	PROCS_OFFER_CHAIN_V22.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
10:40:48 485  END GET_PROD_OFFERINGS_BY_OFFER_ID;
10:40:48 486  
10:40:48 487  /*******************************************************/
10:40:48 488  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
10:40:48 489  /*
10:40:48 490  Throws exceptions (codes):
10:40:48 491  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 492  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 493  */
10:40:48 494  	in_product_offering_id IN NUMBER,
10:40:48 495  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
10:40:48 496  	out_result_set	       OUT SYS_REFCURSOR
10:40:48 497  ) AS
10:40:48 498  BEGIN
10:40:48 499  	PROCS_OFFER_CHAIN_V22.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
10:40:48 500  END GET_PRODUCT_OFFERING_META_DATA;
10:40:48 501  
10:40:48 502  /*******************************************************/
10:40:48 503  
10:40:48 504  PROCEDURE LOCK_ACCOUNT (
10:40:48 505  	in_group_id    IN NUMBER,
10:40:48 506  	in_lock_key    IN VARCHAR2,
10:40:48 507  	in_seconds_num IN NUMBER,
10:40:48 508  	in_created_by  IN VARCHAR2,
10:40:48 509  	in_reason      IN VARCHAR2
10:40:48 510  ) AS
10:40:48 511  BEGIN
10:40:48 512  	PROCS_LOCKING_V22.LOCK_ACCOUNT(
10:40:48 513  	  in_group_id,
10:40:48 514  	  in_lock_key,
10:40:48 515  	  in_seconds_num,
10:40:48 516  	  in_created_by,
10:40:48 517  	  in_reason
10:40:48 518  	);
10:40:48 519  END LOCK_ACCOUNT;
10:40:48 520  
10:40:48 521  /****************************************************************/
10:40:48 522  
10:40:48 523  PROCEDURE RELEASE_LOCK (
10:40:48 524  	in_group_id IN NUMBER,
10:40:48 525  	in_lock_key IN VARCHAR2
10:40:48 526  ) AS
10:40:48 527  BEGIN
10:40:48 528  	PROCS_LOCKING_V22.RELEASE_LOCK(
10:40:48 529  	  in_group_id,
10:40:48 530  	  in_lock_key
10:40:48 531  	);
10:40:48 532  END RELEASE_LOCK;
10:40:48 533  
10:40:48 534  /******************************************************************************/
10:40:48 535  
10:40:48 536  PROCEDURE GET_INVOICE_LINE_ITEMS (
10:40:48 537  	in_invoice_id  IN NUMBER,
10:40:48 538  	out_result_set OUT SYS_REFCURSOR
10:40:48 539  ) AS
10:40:48 540  BEGIN
10:40:48 541  	PROCS_INVOICE_V22.GET_INVOICE_LINE_ITEMS(
10:40:48 542  	  in_invoice_id,
10:40:48 543  	  out_result_set
10:40:48 544  	);
10:40:48 545  END GET_INVOICE_LINE_ITEMS;
10:40:48 546  
10:40:48 547  /******************************************************************************/
10:40:48 548  
10:40:48 549  PROCEDURE ADD_TAX (
10:40:48 550  	in_tax_type_id		 IN NUMBER,
10:40:48 551  	in_calculated_amount	 IN NUMBER,
10:40:48 552  	in_created_by		 IN VARCHAR2,
10:40:48 553  	in_line_item_id 	 IN NUMBER,
10:40:48 554  	in_effective_rate	 IN VARCHAR2,
10:40:48 555  	in_taxable_amount	 IN NUMBER,
10:40:48 556  	in_tax_rule_id		 IN NUMBER,
10:40:48 557  	in_jurisdiction_level_id IN NUMBER,
10:40:48 558  	in_jurisdiction_name	 IN VARCHAR2,
10:40:48 559  	in_jurisdiction_id	 IN VARCHAR2,
10:40:48 560  	in_ext_tax_type 	 IN VARCHAR2,
10:40:48 561  	in_ext_result		 IN VARCHAR2,
10:40:48 562  	in_imposition_type	 IN VARCHAR2,
10:40:48 563  	in_imposition		 IN VARCHAR2
10:40:48 564  ) AS
10:40:48 565  BEGIN
10:40:48 566  	PROCS_TAXES_V22.ADD_TAX(
10:40:48 567  	  in_tax_type_id,
10:40:48 568  	  in_calculated_amount,
10:40:48 569  	  in_created_by,
10:40:48 570  	  in_line_item_id,
10:40:48 571  	  in_effective_rate,
10:40:48 572  	  in_taxable_amount,
10:40:48 573  	  in_tax_rule_id,
10:40:48 574  	  in_jurisdiction_level_id,
10:40:48 575  	  in_jurisdiction_name,
10:40:48 576  	  in_jurisdiction_id,
10:40:48 577  	  in_ext_tax_type,
10:40:48 578  	  in_ext_result,
10:40:48 579  	  in_imposition_type,
10:40:48 580  	  in_imposition
10:40:48 581  	);
10:40:48 582  END ADD_TAX;
10:40:48 583  
10:40:48 584  /******************************************************************************/
10:40:48 585  
10:40:48 586  PROCEDURE GET_CREDIT_CARD_BY_ID (
10:40:48 587  	in_credit_card_id IN  NUMBER,
10:40:48 588  	out_result_set	  OUT SYS_REFCURSOR
10:40:48 589  ) AS
10:40:48 590  BEGIN
10:40:48 591  	PROCS_FIN_INSTRUMENTS_V22.GET_CREDIT_CARD_BY_ID(
10:40:48 592  	  in_credit_card_id,
10:40:48 593  	  out_result_set
10:40:48 594  	);
10:40:48 595  END GET_CREDIT_CARD_BY_ID;
10:40:48 596  
10:40:48 597  /******************************************************************************/
10:40:48 598  
10:40:48 599  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
10:40:48 600  	in_line_item_id IN NUMBER,
10:40:48 601  	out_result_set	OUT SYS_REFCURSOR
10:40:48 602  ) AS
10:40:48 603  BEGIN
10:40:48 604  	PROCS_PRODUCT_V22.GET_PRD_OFFERING_BY_LINE_IT_ID(
10:40:48 605  	  in_line_item_id,
10:40:48 606  	  out_result_set
10:40:48 607  	);
10:40:48 608  END GET_PRD_OFFERING_BY_LINE_IT_ID;
10:40:48 609  
10:40:48 610  /******************************************************************************/
10:40:48 611  
10:40:48 612  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
10:40:48 613  /*
10:40:48 614  Throws exceptions:
10:40:48 615  APP_EXCEPTION_CODES_V22.NOT_FOUND,
10:40:48 616  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 617  */
10:40:48 618  	in_group_id IN NUMBER,
10:40:48 619  	out_account_id	OUT NUMBER
10:40:48 620  ) AS
10:40:48 621  BEGIN
10:40:48 622  	PROCS_ACCOUNT_V22.GET_ACCOUNT_ID_BY_GROUP_ID(
10:40:48 623  	  in_group_id,
10:40:48 624  	  out_account_id
10:40:48 625  	);
10:40:48 626  END GET_ACCOUNT_ID_BY_GROUP_ID;
10:40:48 627  
10:40:48 628  /******************************************************************************/
10:40:48 629  
10:40:48 630  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
10:40:48 631  /*
10:40:48 632  Throws exceptions:
10:40:48 633  APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48 634  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 635  */
10:40:48 636  	in_line_item_id IN  NUMBER,
10:40:48 637  	out_result_set	OUT SYS_REFCURSOR
10:40:48 638  ) AS
10:40:48 639  BEGIN
10:40:48 640  	PROCS_LINE_ITEMS_V22.GET_LINE_ITEM_DISCOUNTS(
10:40:48 641  	  in_line_item_id,
10:40:48 642  	  out_result_set
10:40:48 643  	);
10:40:48 644  END GET_LINE_ITEM_DISCOUNTS;
10:40:48 645  
10:40:48 646  /******************************************************************************/
10:40:48 647  
10:40:48 648  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
10:40:48 649  	in_line_item_id    IN NUMBER,
10:40:48 650  	in_amount	   IN NUMBER,
10:40:48 651  	in_discount_amount IN NUMBER,
10:40:48 652  	in_taxes_amount    IN NUMBER
10:40:48 653  ) AS
10:40:48 654  BEGIN
10:40:48 655  	PROCS_LINE_ITEMS_V22.UPDATE_LINE_ITEM_AMOUNT(
10:40:48 656  	  in_line_item_id,
10:40:48 657  	  in_amount,
10:40:48 658  	  in_discount_amount,
10:40:48 659  	  in_taxes_amount
10:40:48 660  	);
10:40:48 661  END UPDATE_LINE_ITEM_AMOUNT;
10:40:48 662  
10:40:48 663  /******************************************************************************/
10:40:48 664  
10:40:48 665  PROCEDURE GET_PAYPAL_BY_ID (
10:40:48 666  	in_paypal_id   IN  NUMBER,
10:40:48 667  	out_result_set OUT SYS_REFCURSOR
10:40:48 668  ) AS
10:40:48 669  BEGIN
10:40:48 670  	PROCS_FIN_INSTRUMENTS_V22.GET_PAYPAL_BY_ID(
10:40:48 671  	  in_paypal_id,
10:40:48 672  	  out_result_set
10:40:48 673  	);
10:40:48 674  END GET_PAYPAL_BY_ID;
10:40:48 675  
10:40:48 676  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
10:40:48 677  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
10:40:48 678  	out_result_set OUT SYS_REFCURSOR
10:40:48 679  ) AS
10:40:48 680  BEGIN
10:40:48 681  	PROCS_FIN_INSTRUMENTS_V22.GET_GC_BY_PURCH_INVOICE_ID (
10:40:48 682  	  in_invoice_id,
10:40:48 683  	  out_result_set
10:40:48 684  	);
10:40:48 685  END GET_GC_BY_PURCH_INVOICE_ID;
10:40:48 686  
10:40:48 687  PROCEDURE GET_LICENSE_BY_ID (
10:40:48 688  	in_license_id  IN NUMBER,
10:40:48 689  	out_result_set OUT SYS_REFCURSOR
10:40:48 690  ) AS
10:40:48 691  BEGIN
10:40:48 692  	PROCS_LICENSE_V22.GET_LICENSE_BY_ID (
10:40:48 693  	  in_license_id,
10:40:48 694  	  out_result_set
10:40:48 695  	);
10:40:48 696  END GET_LICENSE_BY_ID;
10:40:48 697  
10:40:48 698  /******************************************************************************/
10:40:48 699  
10:40:48 700  PROCEDURE GET_NOTIFICATION_TYPE_ID (
10:40:48 701  	in_offer_chain_id	 IN NUMBER,
10:40:48 702  	in_action_name		 IN VARCHAR2,
10:40:48 703  	out_notification_type_id OUT NUMBER
10:40:48 704  ) AS
10:40:48 705  BEGIN
10:40:48 706  	PROCS_OFFER_CHAIN_V22.GET_NOTIFICATION_TYPE_ID(
10:40:48 707  	  in_offer_chain_id,
10:40:48 708  	  in_action_name,
10:40:48 709  	  out_notification_type_id
10:40:48 710  	);
10:40:48 711  END GET_NOTIFICATION_TYPE_ID;
10:40:48 712  
10:40:48 713  /******************************************************************************/
10:40:48 714  
10:40:48 715  PROCEDURE GET_ALL_OCH_META_DATA (
10:40:48 716  	in_offer_chain_id IN NUMBER,
10:40:48 717  	out_result_set	  OUT SYS_REFCURSOR
10:40:48 718  ) AS
10:40:48 719  BEGIN
10:40:48 720  	PROCS_OFFER_CHAIN_V22.GET_ALL_META_DATA (
10:40:48 721  	  in_offer_chain_id,
10:40:48 722  	  out_result_set
10:40:48 723  	);
10:40:48 724  END GET_ALL_OCH_META_DATA;
10:40:48 725  
10:40:48 726  /******************************************************************************/
10:40:48 727  
10:40:48 728  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
10:40:48 729  /*
10:40:48 730  APP_EXCEPTION_CODES_V22.INVALID_PARAMETER
10:40:48 731  APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48 732  */
10:40:48 733  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
10:40:48 734  	out_result_set	     OUT SYS_REFCURSOR
10:40:48 735  ) AS
10:40:48 736  BEGIN
10:40:48 737  	PROCS_SUBSCRIPTION_V22.GET_SUBSCRIPTIONS_META_DATA(
10:40:48 738  	  in_subscriptions_ids,
10:40:48 739  	  out_result_set
10:40:48 740  	);
10:40:48 741  END GET_SUBSCRIPTIONS_META_DATA;
10:40:48 742  
10:40:48 743  PROCEDURE GET_UNREDEEMED_GCS (
10:40:48 744  	out_result_set		OUT SYS_REFCURSOR,
10:40:48 745  	in_hours_number 	IN NUMBER DEFAULT 14*24,
10:40:48 746  	in_num_rows		IN NUMBER DEFAULT 10000,
10:40:48 747  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
10:40:48 748  ) AS
10:40:48 749  BEGIN
10:40:48 750  	PROCS_FIN_INSTRUMENTS_V22.GET_UNREDEEMED_GCS(
10:40:48 751  	  out_result_set => out_result_set,
10:40:48 752  	  in_hours_number => in_hours_number,
10:40:48 753  	  in_num_rows => in_num_rows,
10:40:48 754  	  in_process_name => in_process_name
10:40:48 755  	);
10:40:48 756  END GET_UNREDEEMED_GCS;
10:40:48 757  
10:40:48 758  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
10:40:48 759  	in_offer_chain_id IN NUMBER,
10:40:48 760  	in_meta_data_name IN VARCHAR2,
10:40:48 761  	out_value	  OUT VARCHAR2
10:40:48 762  ) AS
10:40:48 763  BEGIN
10:40:48 764  	PROCS_OFFER_CHAIN_V22.GET_OFFER_CHAIN_MD_VALUE(
10:40:48 765  	  in_offer_chain_id => in_offer_chain_id,
10:40:48 766  	  in_meta_data_name => in_meta_data_name,
10:40:48 767  	  out_value => out_value
10:40:48 768  	);
10:40:48 769  END GET_OFFER_CHAIN_MD_VALUE;
10:40:48 770  
10:40:48 771  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
10:40:48 772  	out_result_set	    OUT SYS_REFCURSOR
10:40:48 773  )
10:40:48 774  AS
10:40:48 775  BEGIN
10:40:48 776  	PROCS_SUBSCRIPTION_V22.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
10:40:48 777  	  out_result_set => out_result_set
10:40:48 778  	);
10:40:48 779  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
10:40:48 780  
10:40:48 781  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
10:40:48 782  	out_result_set	    OUT SYS_REFCURSOR
10:40:48 783  )
10:40:48 784  AS
10:40:48 785  BEGIN
10:40:48 786  	PROCS_SUBSCRIPTION_V22.GET_ACT_SUBS_W_PP_CHARGEBACKS(
10:40:48 787  	  out_result_set => out_result_set
10:40:48 788  	);
10:40:48 789  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
10:40:48 790  
10:40:48 791  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
10:40:48 792  	in_max_days_until_close IN NUMBER,
10:40:48 793  	in_num_subs_to_fetch	IN NUMBER,
10:40:48 794  	out_result_set		OUT SYS_REFCURSOR
10:40:48 795  )
10:40:48 796  AS
10:40:48 797  BEGIN
10:40:48 798  	PROCS_SUBSCRIPTION_V22.GET_GRACE_PERIOD_SUB_REGIS(
10:40:48 799  	  in_max_days_until_close => in_max_days_until_close,
10:40:48 800  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
10:40:48 801  	  out_result_set => out_result_set
10:40:48 802  	);
10:40:48 803  END GET_GRACE_PERIOD_SUB_REGIS;
10:40:48 804  
10:40:48 805  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
10:40:48 806  	out_result_set	    OUT SYS_REFCURSOR
10:40:48 807  )
10:40:48 808  AS
10:40:48 809  BEGIN
10:40:48 810  	PROCS_SUBSCRIPTION_V22.GET_ACT_SUBS_W_AMEX_CB(
10:40:48 811  	  out_result_set => out_result_set
10:40:48 812  	);
10:40:48 813  END GET_ACT_SUBS_W_AMEX_CB;
10:40:48 814  
10:40:48 815  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
10:40:48 816  	in_days_before_close	 IN NUMBER,
10:40:48 817  	in_num_licenses_to_fetch IN NUMBER,
10:40:48 818  	out_result_set		 OUT SYS_REFCURSOR
10:40:48 819  ) AS
10:40:48 820  BEGIN
10:40:48 821  	PROCS_LICENSE_V22.GET_GRACE_LICE_FOR_FINAL_TRANS(
10:40:48 822  	  in_days_before_close => in_days_before_close,
10:40:48 823  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
10:40:48 824  	  out_result_set => out_result_set
10:40:48 825  	);
10:40:48 826  END GET_GRACE_LICE_FOR_FINAL_TRANS;
10:40:48 827  
10:40:48 828  PROCEDURE GET_EXPIRING_PAYPAL (
10:40:48 829  	in_expire_window_days	  IN NUMBER,
10:40:48 830  	in_creation_limit_days	  IN NUMBER,
10:40:48 831  	in_retry_throttle_name	  IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE,
10:40:48 832  	out_result_set		  OUT SYS_REFCURSOR
10:40:48 833  ) AS
10:40:48 834  BEGIN
10:40:48 835  	PROCS_FIN_INSTRUMENTS_V22.GET_EXPIRING_PAYPAL(
10:40:48 836  	  in_expire_window_days   => in_expire_window_days,
10:40:48 837  	  in_creation_limit_days  => in_creation_limit_days,
10:40:48 838  	  in_retry_throttle_name  => in_retry_throttle_name,
10:40:48 839  	  out_result_set	  => out_result_set
10:40:48 840  	);
10:40:48 841  END GET_EXPIRING_PAYPAL;
10:40:48 842  
10:40:48 843  END PUBLIC_PROCS_RENEWAL_V22;
10:40:48 844  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
10:40:48 SQL> 
10:40:48 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V22" AS
10:40:48   2  
10:40:48   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
10:40:48   4  /*
10:40:48   5  Throws exceptions:
10:40:48   6  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48   7  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48   8  */
10:40:48   9  	in_notification_type_name IN VARCHAR2,
10:40:48  10  	out_notification_type_id  OUT NUMBER
10:40:48  11  ) AS
10:40:48  12  BEGIN
10:40:48  13  	PROCS_NOTIFICATION_V22.GET_NOTIFICATION_TYPE_BY_NAME (
10:40:48  14  	  in_notification_type_name,
10:40:48  15  	  out_notification_type_id
10:40:48  16  	);
10:40:48  17  END;
10:40:48  18  
10:40:48  19  /*****************************************************************/
10:40:48  20  
10:40:48  21  PROCEDURE ADD_NOTIFICATION (
10:40:48  22  /*
10:40:48  23  Throws exceptions:
10:40:48  24  CORE_OWNER.APP_EXCEPTION_CODES_V22.NOT_FOUND
10:40:48  25  CORE_OWNER.APP_EXCEPTION_CODES_V22.UNKNOWN_ERROR
10:40:48  26  */
10:40:48  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
10:40:48  28  	in_recipient_group_id	 IN NUMBER,
10:40:48  29  	in_notification_type_id  IN NUMBER,
10:40:48  30  	in_date_to_notify	 IN DATE,
10:40:48  31  	in_email_template_params IN CLOB
10:40:48  32  ) AS
10:40:48  33  BEGIN
10:40:48  34  	PROCS_NOTIFICATION_V22.ADD_NOTIFICATION (
10:40:48  35  	  in_sender_account_id,
10:40:48  36  	  in_recipient_group_id,
10:40:48  37  	  in_notification_type_id,
10:40:48  38  	  in_date_to_notify,
10:40:48  39  	  in_email_template_params
10:40:48  40  	);
10:40:48  41  END;
10:40:48  42  
10:40:48  43  END PUBLIC_PROCS_CLIENT_V22;
10:40:48  44  .
10:40:48 SQL> /

Package body created.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.03
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ADX_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_TEST_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V22 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V22 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V22 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V22 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> 
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V22 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V22 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V22 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V22 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V22 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V22 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V22 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V22 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V22 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V22 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V22 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> 
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V22 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.02
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:48 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> 
10:40:48 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:48 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:49 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> 
10:40:49 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:49 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:49 SQL> 
10:40:49 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> 
10:40:49 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V22 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:49 SQL> 
10:40:49 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V22 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
10:40:49 SQL> 
10:40:49 SQL> Grant Execute On Core_Owner.Global_Statuses_V22 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
10:40:49 SQL> 
10:40:49 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
10:40:49 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECST
        Schema: core_owner
        Migration: 73-paypal-expire-email-hotfix.3-CORE-ALL.sql
        SVN Revision: 13366
        Duration: 4 sec.
        DBA: apathrose
        