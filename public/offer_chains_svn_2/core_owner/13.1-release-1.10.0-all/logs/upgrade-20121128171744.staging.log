17:17:45 SQL> @/dbbackups/ECST/migrations/core_owner/13.1-release-1.10.0-all/upgrade.sql
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_ACCOUNT
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE ANNOTATE_ACCOUNT (
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   8  */
17:17:45   9  	in_group_id   IN  NUMBER,
17:17:45  10  	in_agent_id   IN  NUMBER,
17:17:45  11  	in_note       IN  VARCHAR2,
17:17:45  12  	in_created_by IN  VARCHAR2
17:17:45  13  );
17:17:45  14  
17:17:45  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
17:17:45  16  /*
17:17:45  17  Throws exceptions:
17:17:45  18  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  19  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  20  */
17:17:45  21  	in_group_id IN	NUMBER,
17:17:45  22  	out_exists  OUT NUMBER
17:17:45  23  );
17:17:45  24  
17:17:45  25  PROCEDURE DISABLE_ACCOUNT (
17:17:45  26  /*
17:17:45  27  Throws exceptions:
17:17:45  28  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:45  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:45  30  */
17:17:45  31  	in_group_id   IN NUMBER,
17:17:45  32  	in_updated_by IN VARCHAR2,
17:17:45  33  	in_note       IN VARCHAR2,
17:17:45  34  	in_agent_id   IN NUMBER
17:17:45  35  );
17:17:45  36  
17:17:45  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
17:17:45  38  /*
17:17:45  39  Throws exceptions:
17:17:45  40  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:45  41  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  42  */
17:17:45  43  	in_created_by	       IN VARCHAR2,
17:17:45  44  	in_group_id	       IN NUMBER
17:17:45  45  );
17:17:45  46  
17:17:45  47  PROCEDURE REACTIVATE_ACCOUNT (
17:17:45  48  /*
17:17:45  49  Throws exceptions:
17:17:45  50  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:45  51  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:45  52  */
17:17:45  53  	in_group_id	  IN NUMBER,
17:17:45  54  	in_updated_by	  IN VARCHAR2,
17:17:45  55  	in_note 	  IN VARCHAR2,
17:17:45  56  	in_agent_id	  IN NUMBER
17:17:45  57  );
17:17:45  58  
17:17:45  59  /*
17:17:45  60  
17:17:45  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
17:17:45  62  Waiting for new instructions.
17:17:45  63  
17:17:45  64  PROCEDURE SUSPEND_ACCOUNT (
17:17:45  65  /*
17:17:45  66  Throws exceptions:
17:17:45  67  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:45  68  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:45  69  
17:17:45  70  	  in_group_id	 IN  NUMBER,
17:17:45  71  	  in_updated_by  IN  VARCHAR2
17:17:45  72  )
17:17:45  73  */
17:17:45  74  
17:17:45  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
17:17:45  76  /*
17:17:45  77  IN:
17:17:45  78  instr_status:
17:17:45  79  1 - get active instruments only (default)
17:17:45  80  0 - get inactive instruments only
17:17:45  81  
17:17:45  82  Throws exceptions:
17:17:45  83  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  85  */
17:17:45  86  	in_group_id	  IN NUMBER,
17:17:45  87  	out_result_cc_set OUT SYS_REFCURSOR,
17:17:45  88  	out_default_id	  OUT NUMBER,
17:17:45  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
17:17:45  90  );
17:17:45  91  
17:17:45  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
17:17:45  93  /*
17:17:45  94  IN:
17:17:45  95  instr_status:
17:17:45  96  GLOBAL_CONSTANTS_V15.TRUE - get active instruments only (default)
17:17:45  97  GLOBAL_CONSTANTS_V15.FALSE - get inactive instruments only
17:17:45  98  
17:17:45  99  Throws exceptions:
17:17:45 100  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 102  */
17:17:45 103  	in_group_id	  IN NUMBER,
17:17:45 104  	out_result_gc_set OUT SYS_REFCURSOR,
17:17:45 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
17:17:45 106  );
17:17:45 107  
17:17:45 108  PROCEDURE GET_ACCOUNT_INFO  (
17:17:45 109  /*
17:17:45 110  Throws exceptions:
17:17:45 111  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 112  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 113  */
17:17:45 114  	  in_group_id	    IN	NUMBER,
17:17:45 115  	  out_account_info  OUT SYS_REFCURSOR
17:17:45 116  );
17:17:45 117  
17:17:45 118  PROCEDURE GET_ACCOUNT_NOTES (
17:17:45 119  /*
17:17:45 120  Throws exceptions:
17:17:45 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 122  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45 123  */
17:17:45 124  	  in_group_id	 IN  NUMBER,
17:17:45 125  	  out_result_set OUT SYS_REFCURSOR
17:17:45 126  );
17:17:45 127  
17:17:45 128  PROCEDURE GET_ACCOUNT_PAYPALS(
17:17:45 129  /*
17:17:45 130  IN:
17:17:45 131  instr_status:
17:17:45 132  1 - get active instruments only (default)
17:17:45 133  0 - get inactive instruments only
17:17:45 134  
17:17:45 135  Throws exceptions:
17:17:45 136  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 137  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 138  */
17:17:45 139  	in_group_id	  IN NUMBER,
17:17:45 140  	out_result_pp_set OUT SYS_REFCURSOR,
17:17:45 141  	out_default_id	  OUT NUMBER,
17:17:45 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
17:17:45 143  );
17:17:45 144  
17:17:45 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
17:17:45 146  /*
17:17:45 147  Throws exceptions:
17:17:45 148  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 149  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:45 150  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 151  */
17:17:45 152  	  in_group_id	 IN  NUMBER,
17:17:45 153  	  in_start_date  IN DATE,
17:17:45 154  	  in_end_date	 IN DATE,
17:17:45 155  	  in_status	 IN NUMBER,
17:17:45 156  	  in_group_account_type IN VARCHAR2,
17:17:45 157  	  out_result_set  OUT SYS_REFCURSOR
17:17:45 158  );
17:17:45 159  
17:17:45 160  PROCEDURE FREEZE_ACCOUNT (
17:17:45 161  /*
17:17:45 162  Throws exceptions:
17:17:45 163  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 164  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 165  */
17:17:45 166  	in_group_id   IN NUMBER,
17:17:45 167  	in_updated_by IN VARCHAR2,
17:17:45 168  	in_note       IN VARCHAR2,
17:17:45 169  	in_agent_id   IN NUMBER
17:17:45 170  );
17:17:45 171  
17:17:45 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
17:17:45 173  /*
17:17:45 174  Throws exceptions:
17:17:45 175  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 176  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 177  */
17:17:45 178  	in_group_id	   IN  NUMBER,
17:17:45 179  	in_subscription_id IN NUMBER,
17:17:45 180  	out_result_set	   OUT SYS_REFCURSOR
17:17:45 181  );
17:17:45 182  
17:17:45 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
17:17:45 184  /*
17:17:45 185  Throws exceptions:
17:17:45 186  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 188  */
17:17:45 189  	in_group_id    IN  NUMBER,
17:17:45 190  	out_result_set OUT SYS_REFCURSOR
17:17:45 191  );
17:17:45 192  
17:17:45 193  PROCEDURE GET_GC_INVOICE (
17:17:45 194  /*
17:17:45 195  Throws exceptions:
17:17:45 196  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 198  */
17:17:45 199  	in_group_id    IN  NUMBER,
17:17:45 200  	in_gc_code     IN  VARCHAR2,
17:17:45 201  	out_result_set OUT SYS_REFCURSOR
17:17:45 202  );
17:17:45 203  
17:17:45 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
17:17:45 205  /*
17:17:45 206  Throws exceptions:
17:17:45 207  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 208  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 209  */
17:17:45 210  	in_group_id    IN  NUMBER,
17:17:45 211  	out_result_set OUT SYS_REFCURSOR
17:17:45 212  );
17:17:45 213  
17:17:45 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
17:17:45 215  /*
17:17:45 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 218  */
17:17:45 219  	in_group_id IN NUMBER,
17:17:45 220  	out_result_set	   OUT SYS_REFCURSOR
17:17:45 221  );
17:17:45 222  
17:17:45 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
17:17:45 224  /*
17:17:45 225  Throws exceptions:
17:17:45 226  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 227  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 228  */
17:17:45 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
17:17:45 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
17:17:45 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
17:17:45 232  );
17:17:45 233  
17:17:45 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
17:17:45 235  /*
17:17:45 236  Throws exceptions:
17:17:45 237  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 239  */
17:17:45 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
17:17:45 241  	out_licenses_num OUT NUMBER
17:17:45 242  );
17:17:45 243  
17:17:45 244  PROCEDURE SET_TAX_EXEMPT (
17:17:45 245  /*
17:17:45 246  Throws exceptions:
17:17:45 247  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 248  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 249  */
17:17:45 250  	in_group_id  IN NUMBER,
17:17:45 251  	in_exempt_id IN VARCHAR2
17:17:45 252  );
17:17:45 253  
17:17:45 254  PROCEDURE IS_TAX_EXEMPT (
17:17:45 255  /*
17:17:45 256  Throws exceptions:
17:17:45 257  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 258  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 259  Return:
17:17:45 260  	GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
17:17:45 261  	GLOBAL_CONSTANTS_V15.FALSE else
17:17:45 262  */
17:17:45 263  	in_group_id	  IN NUMBER,
17:17:45 264  	out_is_tax_exempt OUT NUMBER
17:17:45 265  );
17:17:45 266  
17:17:45 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
17:17:45 268  /*
17:17:45 269  Throws exceptions:
17:17:45 270  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 271  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 272  */
17:17:45 273  	in_account_id IN NUMBER,
17:17:45 274  	out_group_id  OUT NUMBER
17:17:45 275  );
17:17:45 276  
17:17:45 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:45 278  /*
17:17:45 279  Throws exceptions:
17:17:45 280  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 281  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 282  */
17:17:45 283  	in_group_id IN NUMBER,
17:17:45 284  	out_account_id	OUT NUMBER
17:17:45 285  );
17:17:45 286  
17:17:45 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
17:17:45 288  /*
17:17:45 289  Throws exceptions:
17:17:45 290  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 291  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 292  */
17:17:45 293  	in_invoice_id IN NUMBER,
17:17:45 294  	out_group_ids OUT SYS_REFCURSOR
17:17:45 295  );
17:17:45 296  
17:17:45 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
17:17:45 298  /*
17:17:45 299  Throws exceptions:
17:17:45 300  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 301  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 302  */
17:17:45 303  	in_group_id	  IN NUMBER,
17:17:45 304  	out_tax_exempt_id OUT VARCHAR2
17:17:45 305  );
17:17:45 306  
17:17:45 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
17:17:45 308  /*
17:17:45 309  Throws exceptions:
17:17:45 310  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 312  
17:17:45 313  Result has two columns:
17:17:45 314  subscription_id and offer_chain_id
17:17:45 315  */
17:17:45 316  	in_group_id    IN NUMBER,
17:17:45 317  	out_result_set OUT SYS_REFCURSOR
17:17:45 318  );
17:17:45 319  
17:17:45 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
17:17:45 321  /*
17:17:45 322  Throws exceptions:
17:17:45 323  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 324  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45 325  
17:17:45 326  Result has two columns:
17:17:45 327  subscription_id and offer_chain_id
17:17:45 328  */
17:17:45 329  	in_group_id	   IN NUMBER,
17:17:45 330  	out_result_set	   OUT SYS_REFCURSOR
17:17:45 331  );
17:17:45 332  
17:17:45 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
17:17:45 334  /*
17:17:45 335  Throws exceptions:
17:17:45 336  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:45 337  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:45 338  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:45 339  
17:17:45 340  Result has two columns:
17:17:45 341  subscription_id and offer_chain_id
17:17:45 342  */
17:17:45 343  	in_group_id	   IN NUMBER,
17:17:45 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:45 345  	out_result_set	   OUT SYS_REFCURSOR
17:17:45 346  );
17:17:45 347  
17:17:45 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
17:17:45 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:45 350  	in_expiration_date IN DATE,
17:17:45 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
17:17:45 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:45 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
17:17:45 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
17:17:45 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
17:17:45 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
17:17:45 357  	in_lower_bound IN NUMBER DEFAULT 1,
17:17:45 358  	in_upper_bound IN NUMBER DEFAULT 11,
17:17:45 359  	out_result_set OUT SYS_REFCURSOR
17:17:45 360  );
17:17:45 361  
17:17:45 362  END PROCS_ACCOUNT_V15;
17:17:45 363  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.09
17:17:45 SQL> 
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_ACCOUNT_CRU
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_ACCOUNT (
17:17:45   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
17:17:45   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
17:17:45   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:45   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
17:17:45   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
17:17:45   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
17:17:45  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:45  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
17:17:45  12  );
17:17:45  13  
17:17:45  14  PROCEDURE UPDATE_ACCOUNT (
17:17:45  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
17:17:45  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
17:17:45  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:45  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
17:17:45  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
17:17:45  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:45  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
17:17:45  22  );
17:17:45  23  
17:17:45  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
17:17:45  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
17:17:45  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
17:17:45  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
17:17:45  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
17:17:45  29  );
17:17:45  30  
17:17:45  31  PROCEDURE READ_ACCOUNT (
17:17:45  32  	in_account_id  IN ACCOUNT.ID%TYPE,
17:17:45  33  	out_result_set OUT SYS_REFCURSOR
17:17:45  34  );
17:17:45  35  
17:17:45  36  PROCEDURE CREATE_ACCOUNT_NOTE (
17:17:45  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
17:17:45  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
17:17:45  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
17:17:45  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
17:17:45  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
17:17:45  42  );
17:17:45  43  
17:17:45  44  END PROCS_ACCOUNT_CRU_V15;
17:17:45  45  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.05
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_ADDRESS(
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   7  */
17:17:45   8  	  out_address_id	OUT NUMBER,
17:17:45   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:45  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:45  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:45  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:45  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:45  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:45  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
17:17:45  16  );
17:17:45  17  
17:17:45  18  PROCEDURE UPDATE_ADDRESS(
17:17:45  19  /*
17:17:45  20  Throws exceptions:
17:17:45  21  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  22  */
17:17:45  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
17:17:45  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:45  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:45  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:45  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:45  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:45  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:45  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
17:17:45  31  );
17:17:45  32  
17:17:45  33  PROCEDURE GET_ADDRESS (
17:17:45  34  /*
17:17:45  35  Throws exceptions:
17:17:45  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  37  */
17:17:45  38  	  in_id 		IN ADDRESS.ID%TYPE,
17:17:45  39  	  out_result_set	OUT SYS_REFCURSOR
17:17:45  40  );
17:17:45  41  
17:17:45  42  END PROCS_ADDRESS_V15;
17:17:45  43  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:45 SQL> 
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_ADDRESS_CRU
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_ADDRESS(
17:17:45   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
17:17:45   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
17:17:45   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:45   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:45   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:45   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:45  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:45  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:45  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
17:17:45  13  );
17:17:45  14  
17:17:45  15  PROCEDURE UPDATE_ADDRESS(
17:17:45  16  	in_address_id	      IN ADDRESS.ID%TYPE,
17:17:45  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:45  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:45  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:45  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:45  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:45  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:45  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
17:17:45  24  );
17:17:45  25  
17:17:45  26  END PROCS_ADDRESS_CRU_V15;
17:17:45  27  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:45 SQL> 
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_ADJUSTMENTS
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
17:17:45   4  	in_invoice_id		  IN NUMBER,
17:17:45   5  	in_adjustment_reason	  IN VARCHAR2,
17:17:45   6  	in_is_credit		  IN NUMBER,
17:17:45   7  	in_charge_id		  IN NUMBER,
17:17:45   8  	in_business_date	  IN DATE,
17:17:45   9  	in_created_by		  IN VARCHAR2,
17:17:45  10  	out_invoice_adjustment_id OUT NUMBER
17:17:45  11  );
17:17:45  12  
17:17:45  13  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
17:17:45  14  	in_line_item_id 	    IN NUMBER,
17:17:45  15  	in_invoice_adjustment_id    IN NUMBER,
17:17:45  16  	in_amount		    IN NUMBER,
17:17:45  17  	in_tax			    IN NUMBER,
17:17:45  18  	in_discount		    IN NUMBER,
17:17:45  19  	in_created_by		    IN VARCHAR2,
17:17:45  20  	out_line_item_adjustment_id OUT NUMBER
17:17:45  21  );
17:17:45  22  
17:17:45  23  PROCEDURE CREATE_TAX_ADJUSTMENT (
17:17:45  24  	in_tax_id		   IN NUMBER,
17:17:45  25  	in_line_item_adjustment_id IN NUMBER,
17:17:45  26  	in_amount		   IN NUMBER,
17:17:45  27  	in_created_by		   IN VARCHAR2,
17:17:45  28  	out_tax_adjustment_id	   OUT NUMBER
17:17:45  29  );
17:17:45  30  
17:17:45  31  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
17:17:45  32  	in_discount_id		   NUMBER,
17:17:45  33  	in_line_item_id 	   NUMBER,
17:17:45  34  	in_line_item_adjustment_id IN NUMBER,
17:17:45  35  	in_amount		   IN NUMBER,
17:17:45  36  	in_created_by		   IN VARCHAR2,
17:17:45  37  	out_discount_li_id	   OUT NUMBER
17:17:45  38  );
17:17:45  39  
17:17:45  40  END PROCS_ADJUSTMENTS_V15;
17:17:45  41  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE GET_SUB_ADX_INFO (
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   7  */
17:17:45   8  	out_result_set	    OUT SYS_REFCURSOR,
17:17:45   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
17:17:45  10  );
17:17:45  11  
17:17:45  12  END PROCS_ADX_V15;
17:17:45  13  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_AMAZON_SUB(
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   7  */
17:17:45   8  	  out_id	      OUT NUMBER,
17:17:45   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
17:17:45  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
17:17:45  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
17:17:45  12  );
17:17:45  13  
17:17:45  14  PROCEDURE GET_ACTIVE_SUB_IDS (
17:17:45  15  /*
17:17:45  16  Throws exceptions:
17:17:45  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  18  */
17:17:45  19  	out_result_set	    OUT SYS_REFCURSOR,
17:17:45  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
17:17:45  21  );
17:17:45  22  
17:17:45  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
17:17:45  24  /*
17:17:45  25  Throws exceptions:
17:17:45  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  27  */
17:17:45  28  	out_result_set	    OUT SYS_REFCURSOR,
17:17:45  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
17:17:45  30  );
17:17:45  31  
17:17:45  32  END PROCS_AMAZON_V15;
17:17:45  33  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_AMAZON_SUB(
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   7  */
17:17:45   8  	  out_id	      OUT NUMBER,
17:17:45   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
17:17:45  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
17:17:45  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
17:17:45  12  );
17:17:45  13  
17:17:45  14  END PROCS_AMAZON_CRU_V15;
17:17:45  15  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:45 SQL> 
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_CHARGE
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_CHARGE(
17:17:45   4  /*
17:17:45   5  Throws exceptions:
17:17:45   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45   8  */
17:17:45   9  	in_invoice_id	      IN NUMBER,
17:17:45  10  	in_transaction_id     IN NUMBER,
17:17:45  11  	in_instrument_type_id IN NUMBER,
17:17:45  12  	in_instrument_id      IN NUMBER,
17:17:45  13  	in_charge_amount      IN NUMBER,
17:17:45  14  	in_created_by	      IN VARCHAR2,
17:17:45  15  	in_charge_status_id   IN NUMBER,
17:17:45  16  	out_charge_id	      OUT NUMBER
17:17:45  17  );
17:17:45  18  
17:17:45  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
17:17:45  20  /*
17:17:45  21  Throws exceptions:
17:17:45  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  23  */
17:17:45  24  	out_result_set	    OUT SYS_REFCURSOR,
17:17:45  25  	in_row_number	    IN NUMBER DEFAULT NULL
17:17:45  26  );
17:17:45  27  
17:17:45  28  PROCEDURE GET_UNPROCESSED_CHARGES (
17:17:45  29  /*
17:17:45  30  Throws exceptions:
17:17:45  31  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  32  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  33  */
17:17:45  34  	in_invoice_id  IN NUMBER,
17:17:45  35  	out_result_set OUT SYS_REFCURSOR
17:17:45  36  );
17:17:45  37  
17:17:45  38  PROCEDURE GET_PROCESSED_CHARGES (
17:17:45  39  /*
17:17:45  40  Throws exceptions:
17:17:45  41  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  42  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  43  */
17:17:45  44  	in_invoice_id  IN NUMBER,
17:17:45  45  	out_result_set OUT SYS_REFCURSOR
17:17:45  46  );
17:17:45  47  
17:17:45  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
17:17:45  49  /*
17:17:45  50  Throws exceptions:
17:17:45  51  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  53  */
17:17:45  54  	in_charge_id	    IN NUMBER,
17:17:45  55  	out_subscription_id OUT NUMBER
17:17:45  56  );
17:17:45  57  
17:17:45  58  PROCEDURE UPDATE_CHARGE_STATUS (
17:17:45  59  /*
17:17:45  60  Throws exceptions:
17:17:45  61  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  63  */
17:17:45  64  	in_charge_id	    IN CHARGE.ID%TYPE,
17:17:45  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:45  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
17:17:45  67  );
17:17:45  68  
17:17:45  69  FUNCTION IS_CHARGE_COLLECTED (
17:17:45  70  /*
17:17:45  71  Throws:
17:17:45  72  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  74  Returns:
17:17:45  75  GLOBAL_CONST.TRUE if transaction collected,
17:17:45  76  GLOBAL_CONST.FALSE else
17:17:45  77  */
17:17:45  78  	in_charge_id IN NUMBER
17:17:45  79  ) RETURN NUMBER;
17:17:45  80  
17:17:45  81  PROCEDURE GET_COLLECTED_CHARGES (
17:17:45  82  /*
17:17:45  83  Throws exceptions:
17:17:45  84  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:45  85  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:45  86  */
17:17:45  87  	in_invoice_id  IN NUMBER,
17:17:45  88  	out_result_set OUT SYS_REFCURSOR
17:17:45  89  );
17:17:45  90  
17:17:45  91  END PROCS_CHARGE_V15;
17:17:45  92  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:45 SQL> 
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> -- DDL for package PROCS_CHARGE_CRU
17:17:45 SQL> --------------------------------------------------------------------------------
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V15" AS
17:17:45   2  
17:17:45   3  PROCEDURE CREATE_CHARGE(
17:17:45   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
17:17:45   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
17:17:45   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
17:17:45   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:45   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
17:17:45   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
17:17:45  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
17:17:45  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:45  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
17:17:45  13  );
17:17:45  14  
17:17:45  15  PROCEDURE UPDATE_CHARGE(
17:17:45  16  	in_charge_id	      IN CHARGE.ID%TYPE,
17:17:45  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:45  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
17:17:45  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
17:17:45  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
17:17:45  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
17:17:45  22  );
17:17:45  23  
17:17:45  24  END PROCS_CHARGE_CRU_V15;
17:17:45  25  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:45 SQL> 
17:17:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
17:17:45   2  
17:17:45   3  	PROCEDURE POPULATE_REQUEST_INFO(
17:17:45   4  	  in_hours_prior    IN	NUMBER,
17:17:45   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
17:17:45   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
17:17:45   7  	);
17:17:45   8  
17:17:45   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
17:17:45  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:45  11  	  in_start	     IN NUMBER,
17:17:45  12  	  in_end	     IN NUMBER,
17:17:45  13  	  out_result_set     OUT SYS_REFCURSOR
17:17:45  14  	);
17:17:45  15  
17:17:45  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
17:17:45  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
17:17:45  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
17:17:45  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
17:17:45  20  	);
17:17:45  21  
17:17:45  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
17:17:45  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:45  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:45  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
17:17:45  26  	);
17:17:45  27  
17:17:45  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
17:17:45  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
17:17:45  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
17:17:45  31  	  out_request_files   OUT SYS_REFCURSOR
17:17:45  32  	);
17:17:45  33  
17:17:45  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
17:17:45  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:45  36  	  out_count OUT NUMBER
17:17:45  37  	);
17:17:45  38  
17:17:45  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
17:17:45  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
17:17:45  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
17:17:45  42  	  out_card_license     OUT SYS_REFCURSOR
17:17:45  43  	);
17:17:45  44  
17:17:45  45  	PROCEDURE UPDATE_CC_UPDATE(
17:17:45  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
17:17:45  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:45  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
17:17:45  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
17:17:45  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
17:17:45  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:45  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
17:17:45  53  	);
17:17:45  54  
17:17:45  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
17:17:45  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
17:17:45  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:45  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
17:17:45  59  	);
17:17:45  60  
17:17:45  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
17:17:45  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
17:17:45  63  	  out_request_file     OUT SYS_REFCURSOR
17:17:45  64  	);
17:17:45  65  
17:17:45  66  	PROCEDURE SUSPEND_CREDIT_CARD (
17:17:45  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
17:17:45  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:45  69  	);
17:17:45  70  
17:17:45  71  	PROCEDURE UPDATE_CREDIT_CARD (
17:17:45  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
17:17:45  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:45  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
17:17:45  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:45  76  	);
17:17:45  77  
17:17:45  78  	PROCEDURE COMPLETABLE_REQUESTS (
17:17:45  79  	  out_request_files OUT SYS_REFCURSOR
17:17:45  80  	);
17:17:45  81  
17:17:45  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
17:17:45  83  	  in_max_hours_before_report IN  NUMBER,
17:17:45  84  	  out_request_files	     OUT SYS_REFCURSOR
17:17:45  85  	);
17:17:45  86  
17:17:45  87  END PROCS_CUPY;
17:17:45  88  .
17:17:45 SQL> /

Package created.

Elapsed: 00:00:00.34
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE
17:17:46   2  PACKAGE PROCS_ENTITLEMENT_V15 AS
17:17:46   3  
17:17:46   4  PROCEDURE GET_ALL_ENTITLEMENTS(
17:17:46   5  	in_group_id IN NUMBER,
17:17:46   6  	out_result_set OUT SYS_REFCURSOR);
17:17:46   7  
17:17:46   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
17:17:46   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:46  10  	out_result_set OUT SYS_REFCURSOR);
17:17:46  11  
17:17:46  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
17:17:46  13  	in_subscription_id IN NUMBER,
17:17:46  14  	out_uri OUT VARCHAR2);
17:17:46  15  
17:17:46  16  END PROCS_ENTITLEMENT_V15;
17:17:46  17  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
17:17:46   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:46   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
17:17:46   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
17:17:46   7  );
17:17:46   8  
17:17:46   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
17:17:46  10  	in_invoice_id		     IN NUMBER,
17:17:46  11  	out_is_invoice_for_redeem_gc OUT NUMBER
17:17:46  12  );
17:17:46  13  
17:17:46  14  PROCEDURE GET_UNREDEEMED_GCS (
17:17:46  15  	out_result_set		OUT SYS_REFCURSOR,
17:17:46  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:46  17  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:46  18  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:46  19  );
17:17:46  20  
17:17:46  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
17:17:46  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:46  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
17:17:46  24  );
17:17:46  25  
17:17:46  26  PROCEDURE ADD_CREDIT_CARD (
17:17:46  27  /*
17:17:46  28  Throws exceptions:
17:17:46  29  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  31  */
17:17:46  32  	in_group_id		  IN NUMBER,
17:17:46  33  	in_updated_by		  IN VARCHAR2,
17:17:46  34  	in_instrument_name	  IN VARCHAR2,
17:17:46  35  	in_card_holder_name	  IN VARCHAR2,
17:17:46  36  	in_street_address	  IN VARCHAR2,
17:17:46  37  	in_street_address2	  IN VARCHAR2,
17:17:46  38  	in_state		  IN VARCHAR2,
17:17:46  39  	in_city 		  IN VARCHAR2,
17:17:46  40  	in_postal_code		  IN VARCHAR2,
17:17:46  41  	in_country		  IN CHAR,
17:17:46  42  	in_last_four_cc 	  IN VARCHAR2,
17:17:46  43  	in_expiration_date	  IN DATE,
17:17:46  44  	in_credit_card_type_id	  IN NUMBER,
17:17:46  45  	in_token		  IN VARCHAR2,
17:17:46  46  	in_chase_profile_id	  IN VARCHAR2,
17:17:46  47  	in_credit_card_status_id  IN NUMBER,
17:17:46  48  	in_private_first_name	  IN VARCHAR2,
17:17:46  49  	in_private_last_name	  IN VARCHAR2,
17:17:46  50  	out_credit_card_id	  OUT NUMBER
17:17:46  51  );
17:17:46  52  
17:17:46  53  /******************************************************************************/
17:17:46  54  
17:17:46  55  PROCEDURE ADD_PAYPAL (
17:17:46  56  /*
17:17:46  57  Throws exceptions:
17:17:46  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  60  */
17:17:46  61  	in_group_id			IN NUMBER,
17:17:46  62  	in_instrument_name		IN VARCHAR2,
17:17:46  63  	in_private_email_address	IN VARCHAR2,
17:17:46  64  	in_created_by			IN VARCHAR2,
17:17:46  65  	in_paypal_status_id		IN NUMBER,
17:17:46  66  	in_paypal_prvt_street_address	IN VARCHAR2,
17:17:46  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
17:17:46  68  	in_state			IN VARCHAR2,
17:17:46  69  	in_city 			IN VARCHAR2,
17:17:46  70  	in_postal_code			IN VARCHAR2,
17:17:46  71  	in_country			IN CHAR,
17:17:46  72  	in_expiration_date		IN DATE,
17:17:46  73  	in_secret_token 		IN VARCHAR2,
17:17:46  74  	out_paypal_id			OUT NUMBER
17:17:46  75  );
17:17:46  76  
17:17:46  77  /********************************************/
17:17:46  78  
17:17:46  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
17:17:46  80  /*
17:17:46  81  Throws exceptions:
17:17:46  82  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:46  83  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  84  */
17:17:46  85  	in_code       IN VARCHAR,
17:17:46  86  	out_result_set OUT SYS_REFCURSOR
17:17:46  87  );
17:17:46  88  
17:17:46  89  /********************************************/
17:17:46  90  
17:17:46  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
17:17:46  92  /*
17:17:46  93  Throws exceptions:
17:17:46  94  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:46  95  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  96  */
17:17:46  97  	in_gift_certificate_id IN NUMBER,
17:17:46  98  	out_result_set	       OUT SYS_REFCURSOR
17:17:46  99  );
17:17:46 100  
17:17:46 101  /********************************************/
17:17:46 102  
17:17:46 103  PROCEDURE DISABLE_CREDIT_CARD (
17:17:46 104  /*
17:17:46 105  Throws exceptions:
17:17:46 106  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 107  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 108  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46 109  */
17:17:46 110  	in_credit_card_id IN NUMBER,
17:17:46 111  	in_updated_by	  IN VARCHAR2
17:17:46 112  );
17:17:46 113  
17:17:46 114  /********************************************/
17:17:46 115  
17:17:46 116  PROCEDURE DISABLE_PAYPAL (
17:17:46 117  /*
17:17:46 118  Throws exceptions:
17:17:46 119  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 120  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 121  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46 122  */
17:17:46 123  	in_paypal_id  IN NUMBER,
17:17:46 124  	in_updated_by IN VARCHAR2
17:17:46 125  );
17:17:46 126  
17:17:46 127  /********************************************/
17:17:46 128  
17:17:46 129  PROCEDURE UPDATE_CREDIT_CARD (
17:17:46 130  /*
17:17:46 131  Throws exceptions:
17:17:46 132  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 133  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 134  */
17:17:46 135  	in_credit_card_id	  IN NUMBER,
17:17:46 136  	in_updated_by		  IN VARCHAR2,
17:17:46 137  	in_instrument_name	  IN VARCHAR2,
17:17:46 138  	in_is_default		  IN NUMBER
17:17:46 139  );
17:17:46 140  
17:17:46 141  /********************************************/
17:17:46 142  
17:17:46 143  PROCEDURE START_GC_PURCHASING (
17:17:46 144  	in_group_id		  IN NUMBER,
17:17:46 145  	in_offer_chain_id	  IN VARCHAR2,
17:17:46 146  	in_gift_certificate_code  IN  VARCHAR2,
17:17:46 147  	in_created_by		  IN  VARCHAR2,
17:17:46 148  	in_recipient_name	  IN  VARCHAR2,
17:17:46 149  	in_recipient_email	  IN  VARCHAR2,
17:17:46 150  	in_recipient_address_id   IN NUMBER,
17:17:46 151  	in_recipient_notify_date  IN DATE,
17:17:46 152  	in_sender_name		  IN VARCHAR2,
17:17:46 153  	in_sender_email 	  IN VARCHAR2,
17:17:46 154  	in_gift_message 	  IN  VARCHAR2,
17:17:46 155  	in_expiration_date	  IN DATE,
17:17:46 156  	out_gift_certificate_id   OUT NUMBER,
17:17:46 157  	out_invoice_id		  OUT NUMBER
17:17:46 158  );
17:17:46 159  
17:17:46 160  PROCEDURE FINALIZE_GC_PURCHASING (
17:17:46 161  	in_invoice_id	      IN NUMBER,
17:17:46 162  	in_created_by	      IN VARCHAR2,
17:17:46 163  	in_instrument_id      IN NUMBER,
17:17:46 164  	in_instrument_type_id IN NUMBER,
17:17:46 165  	in_order_id	      IN VARCHAR2,
17:17:46 166  	in_transaction_id     IN NUMBER,
17:17:46 167  	out_charge_amount     OUT NUMBER
17:17:46 168  );
17:17:46 169  
17:17:46 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
17:17:46 171  	in_group_id	  IN NUMBER,
17:17:46 172  	in_offer_chain_id IN VARCHAR2,
17:17:46 173  	in_gift_certificate_code  IN  VARCHAR2,
17:17:46 174  	in_created_by IN  VARCHAR2,
17:17:46 175  	in_recipient_name IN  VARCHAR2,
17:17:46 176  	in_recipient_email IN  VARCHAR2,
17:17:46 177  	in_sender_name IN VARCHAR2,
17:17:46 178  	in_sender_email IN VARCHAR2,
17:17:46 179  	in_gift_message IN  VARCHAR2,
17:17:46 180  	in_instrument_id  IN  NUMBER,
17:17:46 181  	in_instrument_type_id IN NUMBER,
17:17:46 182  	in_expiration_date IN DATE,
17:17:46 183  	in_order_id IN VARCHAR2,
17:17:46 184  	in_transaction_id IN NUMBER
17:17:46 185  );
17:17:46 186  
17:17:46 187  /*********************************************/
17:17:46 188  
17:17:46 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
17:17:46 190  	in_group_id			IN NUMBER,
17:17:46 191  	in_gift_certificate_code	IN VARCHAR2,
17:17:46 192  	in_created_by			IN VARCHAR2,
17:17:46 193  	in_redeemer_address_id		IN NUMBER,
17:17:46 194  	in_fin_instrument_id		IN NUMBER,
17:17:46 195  	in_fin_instrument_type_id	IN NUMBER,
17:17:46 196  	in_redemption_offer_chain_id	IN NUMBER,
17:17:46 197  	out_subscription_id		OUT NUMBER,
17:17:46 198  	out_license_id			OUT NUMBER
17:17:46 199  );
17:17:46 200  
17:17:46 201  /********************************************/
17:17:46 202  
17:17:46 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
17:17:46 204  	in_group_id	       IN  NUMBER,
17:17:46 205  	out_instrument_type_id OUT NUMBER,
17:17:46 206  	out_instrument_id      OUT NUMBER
17:17:46 207  );
17:17:46 208  
17:17:46 209  /************************************************/
17:17:46 210  
17:17:46 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
17:17:46 212  	in_group_id	      IN NUMBER,
17:17:46 213  	in_instrument_type_id IN NUMBER,
17:17:46 214  	in_instrument_id      IN NUMBER,
17:17:46 215  	in_updated_by	      IN VARCHAR2
17:17:46 216  );
17:17:46 217  
17:17:46 218  /***************************************************/
17:17:46 219  
17:17:46 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
17:17:46 221  	in_group_id	      IN NUMBER
17:17:46 222  );
17:17:46 223  
17:17:46 224  /****************************************************/
17:17:46 225  
17:17:46 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:46 227  	in_credit_card_id IN  NUMBER,
17:17:46 228  	out_result_set	  OUT SYS_REFCURSOR
17:17:46 229  );
17:17:46 230  
17:17:46 231  /****************************************************/
17:17:46 232  
17:17:46 233  PROCEDURE GET_PAYPAL_BY_ID (
17:17:46 234  	in_paypal_id   IN  NUMBER,
17:17:46 235  	out_result_set OUT SYS_REFCURSOR
17:17:46 236  );
17:17:46 237  
17:17:46 238  /***********************************************/
17:17:46 239  
17:17:46 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
17:17:46 241  	in_credit_card_id NUMBER
17:17:46 242  ) RETURN NUMBER;
17:17:46 243  
17:17:46 244  /*************************************************/
17:17:46 245  
17:17:46 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
17:17:46 247  	in_group_id    IN NUMBER,
17:17:46 248  	out_result_set OUT SYS_REFCURSOR
17:17:46 249  );
17:17:46 250  
17:17:46 251  /*************************************************/
17:17:46 252  
17:17:46 253  -- isGiftCertificateForProperOffer
17:17:46 254  
17:17:46 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
17:17:46 256  	in_gift_certificate_id IN NUMBER,
17:17:46 257  	in_charge_id	       IN NUMBER,
17:17:46 258  	out_result	       OUT NUMBER
17:17:46 259  );
17:17:46 260  
17:17:46 261  FUNCTION IS_CREDIT_CARD_EXISTS (
17:17:46 262  /*
17:17:46 263  1 - if instrument exists
17:17:46 264  0 - else
17:17:46 265  */
17:17:46 266  	in_credit_card_id IN NUMBER
17:17:46 267  ) RETURN NUMBER;
17:17:46 268  
17:17:46 269  FUNCTION IS_PAYPAL_EXISTS (
17:17:46 270  /*
17:17:46 271  1 - if instrument exists
17:17:46 272  0 - else
17:17:46 273  */
17:17:46 274  	in_paypal_id IN NUMBER
17:17:46 275  ) RETURN NUMBER;
17:17:46 276  
17:17:46 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
17:17:46 278  /*
17:17:46 279  1 - if instrument exists
17:17:46 280  0 - else
17:17:46 281  */
17:17:46 282  	in_gift_certificate_id IN NUMBER
17:17:46 283  ) RETURN NUMBER;
17:17:46 284  
17:17:46 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
17:17:46 286  	in_credit_card_id IN NUMBER,
17:17:46 287  	out_group_id	  OUT NUMBER
17:17:46 288  );
17:17:46 289  
17:17:46 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
17:17:46 291  	in_paypal_id IN NUMBER,
17:17:46 292  	out_group_id	  OUT NUMBER
17:17:46 293  );
17:17:46 294  
17:17:46 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
17:17:46 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
17:17:46 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
17:17:46 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:46 299  );
17:17:46 300  
17:17:46 301  PROCEDURE UPDATE_PAYPAL_STATUS (
17:17:46 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
17:17:46 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
17:17:46 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
17:17:46 305  );
17:17:46 306  
17:17:46 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
17:17:46 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
17:17:46 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
17:17:46 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
17:17:46 311  );
17:17:46 312  
17:17:46 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:46 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:46 315  	out_result_set OUT SYS_REFCURSOR
17:17:46 316  );
17:17:46 317  
17:17:46 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
17:17:46 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
17:17:46 320  	in_old_fin_instrument_id   IN NUMBER,
17:17:46 321  	in_old_fin_instrument_type IN NUMBER,
17:17:46 322  	in_new_fin_instrument_id   IN NUMBER,
17:17:46 323  	in_new_fin_instrument_type IN NUMBER,
17:17:46 324  	in_updated_by		   IN VARCHAR2
17:17:46 325  );
17:17:46 326  
17:17:46 327  END PROCS_FIN_INSTRUMENTS_V15;
17:17:46 328  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.06
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_CREDIT_CARD(
17:17:46   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
17:17:46   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
17:17:46   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
17:17:46   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
17:17:46   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
17:17:46   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
17:17:46  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
17:17:46  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
17:17:46  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
17:17:46  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
17:17:46  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
17:17:46  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:46  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
17:17:46  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
17:17:46  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
17:17:46  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
17:17:46  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
17:17:46  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
17:17:46  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
17:17:46  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
17:17:46  24  );
17:17:46  25  
17:17:46  26  PROCEDURE UPDATE_CREDIT_CARD(
17:17:46  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
17:17:46  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:46  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
17:17:46  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:46  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
17:17:46  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
17:17:46  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
17:17:46  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:46  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
17:17:46  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
17:17:46  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:46  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
17:17:46  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
17:17:46  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
17:17:46  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
17:17:46  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
17:17:46  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
17:17:46  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
17:17:46  45  );
17:17:46  46  
17:17:46  47  PROCEDURE CREATE_PAYPAL(
17:17:46  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
17:17:46  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
17:17:46  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
17:17:46  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:46  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
17:17:46  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
17:17:46  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
17:17:46  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
17:17:46  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
17:17:46  57  	in_state			IN PAYPAL.STATE%TYPE,
17:17:46  58  	in_city 			IN PAYPAL.CITY%TYPE,
17:17:46  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
17:17:46  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
17:17:46  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
17:17:46  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
17:17:46  63  );
17:17:46  64  
17:17:46  65  PROCEDURE UPDATE_PAYPAL(
17:17:46  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
17:17:46  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:46  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
17:17:46  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
17:17:46  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
17:17:46  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:46  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:46  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
17:17:46  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
17:17:46  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:46  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
17:17:46  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:46  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
17:17:46  79  );
17:17:46  80  
17:17:46  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
17:17:46  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
17:17:46  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
17:17:46  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
17:17:46  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:46  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
17:17:46  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:46  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
17:17:46  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
17:17:46  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
17:17:46  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
17:17:46  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
17:17:46  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
17:17:46  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
17:17:46  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
17:17:46  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
17:17:46  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
17:17:46  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
17:17:46  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
17:17:46 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
17:17:46 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:46 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
17:17:46 103  );
17:17:46 104  
17:17:46 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
17:17:46 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
17:17:46 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:46 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
17:17:46 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
17:17:46 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
17:17:46 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
17:17:46 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
17:17:46 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
17:17:46 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
17:17:46 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
17:17:46 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
17:17:46 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
17:17:46 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
17:17:46 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
17:17:46 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:46 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:46 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
17:17:46 123  );
17:17:46 124  
17:17:46 125  END PROCS_FIN_INSTRUMENTS_CRU_V15;
17:17:46 126  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.06
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V15" As
17:17:46   2  
17:17:46   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
17:17:46   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:46   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
17:17:46   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:46   7  );
17:17:46   8  
17:17:46   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
17:17:46  10  	out_result_set OUT SYS_REFCURSOR
17:17:46  11  );
17:17:46  12  
17:17:46  13  PROCEDURE EXPIRE_SUB_SHARE (
17:17:46  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:46  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:46  16  );
17:17:46  17  
17:17:46  18  PROCEDURE EXPIRE_ALL_SHARES (
17:17:46  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
17:17:46  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:46  21  );
17:17:46  22  
17:17:46  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
17:17:46  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
17:17:46  25  	in_start	 IN  NUMBER,
17:17:46  26  	in_end		 IN  NUMBER,
17:17:46  27  	in_expired	 IN  NUMBER,
17:17:46  28  	out_result_set	 OUT SYS_REFCURSOR,
17:17:46  29  	out_shares_count OUT NUMBER
17:17:46  30  );
17:17:46  31  
17:17:46  32  PROCEDURE IS_VALID_IP_ADDRESS (
17:17:46  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:46  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:46  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:46  36  	out_is_valid	    OUT NUMBER
17:17:46  37  );
17:17:46  38  
17:17:46  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
17:17:46  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:46  42  	out_is_valid	    OUT NUMBER
17:17:46  43  );
17:17:46  44  
17:17:46  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
17:17:46  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
17:17:46  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
17:17:46  48  	Out_Result_Set	       Out Sys_Refcursor
17:17:46  49  );
17:17:46  50  
17:17:46  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
17:17:46  52  	in_group_account_id IN NUMBER,
17:17:46  53  	in_start	    IN NUMBER,
17:17:46  54  	in_end		    IN NUMBER,
17:17:46  55  	Out_Result_Set	    OUT Sys_Refcursor
17:17:46  56  );
17:17:46  57  
17:17:46  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
17:17:46  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
17:17:46  60  	Out_Result_Set	   Out Sys_Refcursor
17:17:46  61  );
17:17:46  62  
17:17:46  63  PROCEDURE CREATE_GROUP_ACCOUNT (
17:17:46  64  	in_subscription_id	 IN NUMBER,
17:17:46  65  	in_group_name		 IN VARCHAR2,
17:17:46  66  	in_first_name		 IN VARCHAR2,
17:17:46  67  	in_last_name		 IN VARCHAR2,
17:17:46  68  	in_email		 IN VARCHAR2,
17:17:46  69  	in_phone		 IN VARCHAR2,
17:17:46  70  	in_organization_type	 IN VARCHAR2,
17:17:46  71  	in_seats		 IN NUMBER,
17:17:46  72  	in_seat_ttl_in_hours	 IN NUMBER,
17:17:46  73  	in_ip			 IN NUMBER,
17:17:46  74  	in_created_by		 IN VARCHAR2
17:17:46  75  );
17:17:46  76  
17:17:46  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
17:17:46  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:46  79  	out_result_set	    OUT SYS_REFCURSOR
17:17:46  80  );
17:17:46  81  
17:17:46  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
17:17:46  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:46  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:46  85  	out_result_set	    OUT SYS_REFCURSOR
17:17:46  86  );
17:17:46  87  
17:17:46  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
17:17:46  89  	in_group_account_id   IN NUMBER,
17:17:46  90  	in_start	      IN NUMBER,
17:17:46  91  	in_end		      IN NUMBER,
17:17:46  92  	in_status	      IN NUMBER,
17:17:46  93  	out_record_count      OUT NUMBER,
17:17:46  94  	out_result_set	      OUT SYS_REFCURSOR
17:17:46  95  );
17:17:46  96  
17:17:46  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
17:17:46  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46  99  	in_start	      IN NUMBER,
17:17:46 100  	in_end		      IN NUMBER,
17:17:46 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
17:17:46 102  	out_record_count      OUT NUMBER,
17:17:46 103  	out_result_set	      OUT SYS_REFCURSOR
17:17:46 104  );
17:17:46 105  
17:17:46 106  PROCEDURE ADD_EMAIL_DOMAIN (
17:17:46 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:46 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
17:17:46 110  );
17:17:46 111  
17:17:46 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
17:17:46 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:46 115  );
17:17:46 116  
17:17:46 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
17:17:46 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:46 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:46 120  );
17:17:46 121  
17:17:46 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
17:17:46 123  	in_group_account_id    IN NUMBER,
17:17:46 124  	in_borrower_account_id IN NUMBER,
17:17:46 125  	in_ip_address	       IN VARCHAR2,
17:17:46 126  	in_email_domain        IN VARCHAR2,
17:17:46 127  	in_created_by	       IN VARCHAR2
17:17:46 128  );
17:17:46 129  
17:17:46 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
17:17:46 131  	in_group_account_id   IN NUMBER,
17:17:46 132  	out_occupied_seats   OUT NUMBER
17:17:46 133  );
17:17:46 134  
17:17:46 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
17:17:46 136  	in_group_account_id   IN NUMBER
17:17:46 137  ) RETURN NUMBER;
17:17:46 138  
17:17:46 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
17:17:46 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:46 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:46 142  );
17:17:46 143  
17:17:46 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
17:17:46 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
17:17:46 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:46 147  );
17:17:46 148  
17:17:46 149  PROCEDURE ADD_IP_RANGE (
17:17:46 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:46 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
17:17:46 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:46 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:46 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
17:17:46 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
17:17:46 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
17:17:46 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
17:17:46 158  );
17:17:46 159  
17:17:46 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
17:17:46 161  	in_group_account_id IN NUMBER,
17:17:46 162  	out_group_id OUT NUMBER
17:17:46 163  );
17:17:46 164  
17:17:46 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
17:17:46 166  	in_group_account_ip_range_id IN NUMBER,
17:17:46 167  	out_group_id OUT NUMBER
17:17:46 168  );
17:17:46 169  
17:17:46 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
17:17:46 171  	in_group_account_email_dom_id IN NUMBER,
17:17:46 172  	out_group_id OUT NUMBER
17:17:46 173  );
17:17:46 174  
17:17:46 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
17:17:46 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:46 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
17:17:46 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
17:17:46 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
17:17:46 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
17:17:46 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
17:17:46 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:46 183  );
17:17:46 184  
17:17:46 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
17:17:46 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:46 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
17:17:46 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:46 189  );
17:17:46 190  
17:17:46 191  END PROCS_GROUP_ACCOUNT_V15;
17:17:46 192  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.07
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
17:17:46   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:46   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
17:17:46   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
17:17:46   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
17:17:46   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
17:17:46   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
17:17:46  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
17:17:46  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:46  12  );
17:17:46  13  
17:17:46  14  PROCEDURE CREATE_GROUP_ACCOUNT (
17:17:46  15  	in_subscription_id	 IN NUMBER,
17:17:46  16  	in_group_name		 IN VARCHAR2,
17:17:46  17  	in_first_name		 IN VARCHAR2,
17:17:46  18  	in_last_name		 IN VARCHAR2,
17:17:46  19  	in_email		 IN VARCHAR2,
17:17:46  20  	in_phone		 IN VARCHAR2,
17:17:46  21  	in_organization_type	 IN VARCHAR2,
17:17:46  22  	in_seats		 IN NUMBER,
17:17:46  23  	in_seat_ttl_in_hours	 IN NUMBER,
17:17:46  24  	in_ip			 IN NUMBER,
17:17:46  25  	in_created_by		 IN VARCHAR2
17:17:46  26  );
17:17:46  27  
17:17:46  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
17:17:46  29  	in_group_account_id    IN NUMBER,
17:17:46  30  	in_borrower_account_id IN NUMBER,
17:17:46  31  	in_ip_address	       IN VARCHAR2,
17:17:46  32  	in_email_domain        IN VARCHAR2,
17:17:46  33  	in_start_date	       IN DATE,
17:17:46  34  	in_end_date	       IN DATE,
17:17:46  35  	in_created_by	       IN VARCHAR2
17:17:46  36  );
17:17:46  37  
17:17:46  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
17:17:46  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:46  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:46  41  );
17:17:46  42  
17:17:46  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
17:17:46  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
17:17:46  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:46  46  );
17:17:46  47  
17:17:46  48  PROCEDURE ADD_IP_RANGE (
17:17:46  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:46  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
17:17:46  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:46  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:46  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
17:17:46  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
17:17:46  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
17:17:46  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
17:17:46  57  );
17:17:46  58  
17:17:46  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
17:17:46  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:46  62  );
17:17:46  63  
17:17:46  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
17:17:46  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:46  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:46  67  );
17:17:46  68  
17:17:46  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
17:17:46  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:46  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:46  72  );
17:17:46  73  
17:17:46  74  PROCEDURE ADD_EMAIL_DOMAIN (
17:17:46  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:46  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:46  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
17:17:46  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
17:17:46  79  );
17:17:46  80  
17:17:46  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
17:17:46  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:46  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
17:17:46  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
17:17:46  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
17:17:46  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
17:17:46  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
17:17:46  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:46  89  );
17:17:46  90  
17:17:46  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
17:17:46  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:46  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
17:17:46  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:46  95  );
17:17:46  96  END PROCS_GROUP_ACCOUNT_CRU_V15;
17:17:46  97  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_HISTORY
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_ADDRESS_HISTORY(
17:17:46   4  /*
17:17:46   5  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   7  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46   8  */
17:17:46   9  	in_address_id		     IN NUMBER,
17:17:46  10  	in_system_activity_reason_id IN NUMBER
17:17:46  11  );
17:17:46  12  
17:17:46  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
17:17:46  14  /*
17:17:46  15  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  17  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  18  */
17:17:46  19  	in_account_id		     IN NUMBER,
17:17:46  20  	in_system_activity_reason_id IN NUMBER
17:17:46  21  );
17:17:46  22  
17:17:46  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
17:17:46  24  /*
17:17:46  25  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  27  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  28  */
17:17:46  29  	in_subscription_id	     IN NUMBER,
17:17:46  30  	in_system_activity_reason_id IN NUMBER
17:17:46  31  );
17:17:46  32  
17:17:46  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
17:17:46  34  /*
17:17:46  35  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  37  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  38  */
17:17:46  39  	in_credit_card_id	      IN NUMBER,
17:17:46  40  	in_system_activity_reason_id  IN  NUMBER
17:17:46  41  );
17:17:46  42  
17:17:46  43  PROCEDURE CREATE_PAYPAL_HISTORY(
17:17:46  44  /*
17:17:46  45  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  46  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  47  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  48  */
17:17:46  49  	in_paypal_id		      IN NUMBER,
17:17:46  50  	in_system_activity_reason_id  IN NUMBER
17:17:46  51  );
17:17:46  52  
17:17:46  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
17:17:46  54  /*
17:17:46  55  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  56  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  57  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  58  */
17:17:46  59  	in_gift_certificate_id	      IN NUMBER,
17:17:46  60  	in_system_activity_reason_id  IN  NUMBER
17:17:46  61  );
17:17:46  62  
17:17:46  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
17:17:46  64  /*
17:17:46  65  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  67  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  68  */
17:17:46  69  	in_transaction_id	     IN NUMBER,
17:17:46  70  	in_system_activity_reason_id IN NUMBER
17:17:46  71  );
17:17:46  72  
17:17:46  73  PROCEDURE CREATE_INVOICE_HISTORY (
17:17:46  74  /*
17:17:46  75  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  76  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  77  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  78  */
17:17:46  79  	in_invoice_id		     IN NUMBER,
17:17:46  80  	in_system_activity_reason_id IN NUMBER
17:17:46  81  );
17:17:46  82  
17:17:46  83  PROCEDURE CREATE_LICENSE_HISTORY (
17:17:46  84  /*
17:17:46  85  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  87  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  88  */
17:17:46  89  	in_license_id		     IN NUMBER,
17:17:46  90  	in_system_activity_reason_id IN NUMBER
17:17:46  91  );
17:17:46  92  
17:17:46  93  PROCEDURE CREATE_CHARGE_HISTORY (
17:17:46  94  /*
17:17:46  95  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  96  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  97  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46  98  */
17:17:46  99  	in_charge_id		    IN NUMBER,
17:17:46 100  	in_system_activity_reason_id IN NUMBER
17:17:46 101  );
17:17:46 102  
17:17:46 103  END PROCS_HISTORY_V15;
17:17:46 104  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_INVOICE
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE IS_INVOICE_FOR_GC (
17:17:46   4  	in_invoice_id  IN NUMBER,
17:17:46   5  	out_result     OUT NUMBER
17:17:46   6  );
17:17:46   7  
17:17:46   8  PROCEDURE CREATE_INVOICE(
17:17:46   9  /*
17:17:46  10  Throws exceptions:
17:17:46  11  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  12  */
17:17:46  13  	  in_invoice_status IN NUMBER,
17:17:46  14  	  in_created_by     IN VARCHAR2,
17:17:46  15  	  in_tax_exempt_id  IN VARCHAR2,
17:17:46  16  	  out_invoice_id    OUT NUMBER
17:17:46  17  );
17:17:46  18  
17:17:46  19  PROCEDURE GET_PENDING_INVOICES (
17:17:46  20  /*
17:17:46  21  Throws exceptions:
17:17:46  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  23  */
17:17:46  24  	out_result_set1      OUT SYS_REFCURSOR,
17:17:46  25  	out_result_set2      OUT SYS_REFCURSOR,
17:17:46  26  	out_result_set3      OUT SYS_REFCURSOR,
17:17:46  27  	in_row_number	     IN NUMBER DEFAULT NULL
17:17:46  28  );
17:17:46  29  
17:17:46  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:46  31  /*
17:17:46  32  Throws exceptions:
17:17:46  33  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  34  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  35  */
17:17:46  36  	in_invoice_id IN  NUMBER,
17:17:46  37  	out_amount    OUT NUMBER
17:17:46  38  );
17:17:46  39  
17:17:46  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
17:17:46  41  	in_invoice_id IN  NUMBER
17:17:46  42  ) RETURN NUMBER;
17:17:46  43  
17:17:46  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
17:17:46  45  /*
17:17:46  46  Throws exceptions:
17:17:46  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  49  */
17:17:46  50  	in_invoice_id  IN  NUMBER,
17:17:46  51  	out_account_id OUT NUMBER
17:17:46  52  );
17:17:46  53  
17:17:46  54  PROCEDURE GET_INVOICE_DETAILS (
17:17:46  55  /*
17:17:46  56  Throws exceptions:
17:17:46  57  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  58  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  59  */
17:17:46  60  	in_invoice_id	   IN  NUMBER,
17:17:46  61  	out_group_id	   OUT NUMBER,
17:17:46  62  	out_status_id	   OUT NUMBER,
17:17:46  63  	out_line_items_set OUT SYS_REFCURSOR,
17:17:46  64  	out_pp_charges_set OUT SYS_REFCURSOR,
17:17:46  65  	out_cc_charges_set OUT SYS_REFCURSOR,
17:17:46  66  	out_gc_charges_set OUT SYS_REFCURSOR
17:17:46  67  );
17:17:46  68  -- norlov: #38796
17:17:46  69  PROCEDURE GET_TRANSACTION_INVOICE (
17:17:46  70  /*
17:17:46  71  Throws exceptions:
17:17:46  72  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  74  */
17:17:46  75  	in_transaction_id  IN  NUMBER,
17:17:46  76  	out_result_set	      OUT SYS_REFCURSOR
17:17:46  77  );
17:17:46  78  
17:17:46  79  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:46  80  /*
17:17:46  81  Throws exceptions:
17:17:46  82  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  83  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  84  */
17:17:46  85  	in_invoice_id		       IN NUMBER,
17:17:46  86  	in_invoice_status_id	       IN NUMBER,
17:17:46  87  	in_updated_by		       IN VARCHAR2
17:17:46  88  );
17:17:46  89  
17:17:46  90  FUNCTION IS_INVOICE_PAYING_STARTED (
17:17:46  91  /*
17:17:46  92  Throws exceptions:
17:17:46  93  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  95  */
17:17:46  96  	in_invoice_id IN NUMBER
17:17:46  97  ) RETURN NUMBER;
17:17:46  98  
17:17:46  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
17:17:46 100  	in_invoice_id  IN NUMBER,
17:17:46 101  	out_is_started OUT NUMBER
17:17:46 102  );
17:17:46 103  
17:17:46 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
17:17:46 105  	in_invoice_id	      IN NUMBER,
17:17:46 106  	in_chargeback_date    IN DATE,
17:17:46 107  	out_chargeback_amount OUT NUMBER
17:17:46 108  );
17:17:46 109  
17:17:46 110  PROCEDURE APPLY_REFUND (
17:17:46 111  	in_invoice_id	     IN NUMBER,
17:17:46 112  	in_chargeback_amount IN NUMBER,
17:17:46 113  	in_created_by	     IN VARCHAR2,
17:17:46 114  	out_charge_id	     OUT NUMBER
17:17:46 115  );
17:17:46 116  
17:17:46 117  PROCEDURE GET_MAX_REFUND (
17:17:46 118  	in_invoice_id IN NUMBER,
17:17:46 119  	out_amount    OUT NUMBER
17:17:46 120  );
17:17:46 121  
17:17:46 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
17:17:46 123  	in_invoice_id	    IN NUMBER,
17:17:46 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
17:17:46 125  	out_days_num	    OUT NUMBER
17:17:46 126  );
17:17:46 127  
17:17:46 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:46 129  	in_invoice_id  IN NUMBER,
17:17:46 130  	out_result_set OUT SYS_REFCURSOR
17:17:46 131  );
17:17:46 132  
17:17:46 133  PROCEDURE GET_INVOICE_LICENSES (
17:17:46 134  	in_invoice_id  IN NUMBER,
17:17:46 135  	out_result_set OUT SYS_REFCURSOR
17:17:46 136  );
17:17:46 137  
17:17:46 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
17:17:46 139  	in_invoice_id	   IN NUMBER,
17:17:46 140  	out_offer_chain_id OUT NUMBER
17:17:46 141  );
17:17:46 142  
17:17:46 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
17:17:46 144  -- Closing invoice without refund
17:17:46 145  	in_invoice_id IN NUMBER,
17:17:46 146  	in_updated_by IN VARCHAR2
17:17:46 147  );
17:17:46 148  
17:17:46 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
17:17:46 150  	in_invoice_id	    IN NUMBER,
17:17:46 151  	out_subscription_id OUT NUMBER
17:17:46 152  );
17:17:46 153  
17:17:46 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
17:17:46 155  /*
17:17:46 156  Throws exceptions:
17:17:46 157  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:46 158  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 159  Return:
17:17:46 160  	GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
17:17:46 161  	GLOBAL_CONSTANTS_V15.FALSE else
17:17:46 162  */
17:17:46 163  	in_invoice_id	  IN NUMBER,
17:17:46 164  	out_is_tax_exempt OUT NUMBER
17:17:46 165  );
17:17:46 166  
17:17:46 167  PROCEDURE GET_INVOICE_BY_ID (
17:17:46 168  	in_invoice_id  IN NUMBER,
17:17:46 169  	out_result_set OUT SYS_REFCURSOR
17:17:46 170  );
17:17:46 171  
17:17:46 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
17:17:46 173  	in_invoice_id		      IN NUMBER,
17:17:46 174  	out_is_tax_calculation_needed OUT NUMBER
17:17:46 175  );
17:17:46 176  
17:17:46 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
17:17:46 178  	in_invoice_id		     IN NUMBER,
17:17:46 179  	in_updated_by		     IN VARCHAR2,
17:17:46 180  	in_is_tax_calculation_needed IN NUMBER
17:17:46 181  );
17:17:46 182  
17:17:46 183  PROCEDURE REFUND_INVOICE (
17:17:46 184  	in_invoice_id	   IN NUMBER,
17:17:46 185  	in_refund_amount   IN NUMBER,
17:17:46 186  	in_note 	   IN VARCHAR2,
17:17:46 187  	in_created_by	   IN VARCHAR2,
17:17:46 188  	out_charge_id	   OUT NUMBER
17:17:46 189  );
17:17:46 190  
17:17:46 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
17:17:46 192  	in_invoice_id		    IN NUMBER,
17:17:46 193  	out_order_id		    OUT VARCHAR2,
17:17:46 194  	out_external_transaction_id OUT VARCHAR2
17:17:46 195  );
17:17:46 196  
17:17:46 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
17:17:46 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
17:17:46 199  	out_result_set OUT SYS_REFCURSOR
17:17:46 200  );
17:17:46 201  
17:17:46 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
17:17:46 203  	in_invoice_id IN NUMBER,
17:17:46 204  	out_is_revoke OUT NUMBER
17:17:46 205  );
17:17:46 206  
17:17:46 207  END PROCS_INVOICE_V15;
17:17:46 208  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_INVOICE_CRU
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_INVOICE (
17:17:46   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
17:17:46   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
17:17:46   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
17:17:46   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
17:17:46   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
17:17:46   9  );
17:17:46  10  
17:17:46  11  PROCEDURE UPDATE_INVOICE (
17:17:46  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
17:17:46  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
17:17:46  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
17:17:46  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
17:17:46  16  );
17:17:46  17  
17:17:46  18  END PROCS_INVOICE_CRU_V15;
17:17:46  19  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:46 SQL> 
17:17:46 SQL> /*
17:17:46 SQL> CREATE TABLE ITUNES_RECEIPT (
17:17:46 SQL> 	id NUMBER NOT NULL ENABLE,
17:17:46 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
17:17:46 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
17:17:46 SQL> 	status NUMBER,
17:17:46 SQL> 	quantity NUMBER,
17:17:46 SQL> 	product_id VARCHAR(1024),
17:17:46 SQL> 	transaction_id VARCHAR(1024),
17:17:46 SQL> 	purchase_date TIMESTAMP,
17:17:46 SQL> 	original_transaction_id VARCHAR(1024),
17:17:46 SQL> 	original_purchase_date TIMESTAMP,
17:17:46 SQL> 	app_item_id VARCHAR(1024),
17:17:46 SQL> 	version_external_id NUMBER,
17:17:46 SQL> 	bid VARCHAR(1024),
17:17:46 SQL> 	bvrs VARCHAR(255),
17:17:46 SQL> 	expires_date TIMESTAMP,
17:17:46 SQL> 	create_date DATE NOT NULL,
17:17:46 SQL> 	created_by VARCHAR(255) NOT NULL,
17:17:46 SQL> 	update_date DATE NOT NULL,
17:17:46 SQL> 	updated_by VARCHAR(255) NOT NULL,
17:17:46 SQL> 	last_check_date DATE NOT NULL,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
17:17:46 SQL> )
17:17:46 SQL> TABLESPACE CORE;
17:17:46 SQL> */
17:17:46 SQL> 
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
17:17:46   4  	      /*
17:17:46   5  	      Throws exceptions:
17:17:46   6  	      APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   7  	      */
17:17:46   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:46   9  	      out_result_set	  OUT SYS_REFCURSOR
17:17:46  10  );
17:17:46  11  
17:17:46  12  PROCEDURE CREATE_RECEIPT(
17:17:46  13  /*
17:17:46  14  Throws exceptions:
17:17:46  15  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  16  */
17:17:46  17  	  out_id	      OUT NUMBER,
17:17:46  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:46  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:46  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
17:17:46  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:46  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:46  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:46  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:46  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:46  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:46  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:46  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:46  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
17:17:46  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
17:17:46  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:46  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
17:17:46  33  );
17:17:46  34  
17:17:46  35  PROCEDURE UPDATE_RECEIPT(
17:17:46  36  /*
17:17:46  37  Throws exceptions:
17:17:46  38  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  39  */
17:17:46  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
17:17:46  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:46  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
17:17:46  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:46  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:46  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:46  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:46  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:46  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:46  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:46  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:46  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
17:17:46  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
17:17:46  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:46  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
17:17:46  55  	  in_is_expired       IN NUMBER
17:17:46  56  );
17:17:46  57  
17:17:46  58  PROCEDURE LINK_ITUNES_RECEIPT(
17:17:46  59  /*
17:17:46  60  Throws exceptions:
17:17:46  61  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  62  */
17:17:46  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
17:17:46  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:46  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
17:17:46  66  );
17:17:46  67  
17:17:46  68  PROCEDURE MARK_RECEIPT_CHECKED(
17:17:46  69  /*
17:17:46  70  Throws exceptions:
17:17:46  71  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  72  */
17:17:46  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
17:17:46  74  );
17:17:46  75  
17:17:46  76  PROCEDURE GET_ITUNES_RECEIPTS (
17:17:46  77  /*
17:17:46  78  Throws exceptions:
17:17:46  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  80  */
17:17:46  81  	out_result_set	    OUT SYS_REFCURSOR,
17:17:46  82  	in_row_number	    IN NUMBER DEFAULT 500
17:17:46  83  );
17:17:46  84  
17:17:46  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
17:17:46  86  /*
17:17:46  87  Throws exceptions:
17:17:46  88  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  89  */
17:17:46  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
17:17:46  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
17:17:46  92  );
17:17:46  93  
17:17:46  94  END PROCS_ITUNES_RECEIPT_V15;
17:17:46  95  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:46 SQL> 
17:17:46 SQL> /*
17:17:46 SQL> CREATE TABLE ITUNES_RECEIPT (
17:17:46 SQL> 	id NUMBER NOT NULL ENABLE,
17:17:46 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
17:17:46 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
17:17:46 SQL> 	status NUMBER,
17:17:46 SQL> 	quantity NUMBER,
17:17:46 SQL> 	product_id VARCHAR(1024),
17:17:46 SQL> 	transaction_id VARCHAR(1024),
17:17:46 SQL> 	purchase_date TIMESTAMP,
17:17:46 SQL> 	original_transaction_id VARCHAR(1024),
17:17:46 SQL> 	original_purchase_date TIMESTAMP,
17:17:46 SQL> 	app_item_id VARCHAR(1024),
17:17:46 SQL> 	version_external_id NUMBER,
17:17:46 SQL> 	bid VARCHAR(1024),
17:17:46 SQL> 	bvrs VARCHAR(255),
17:17:46 SQL> 	expires_date TIMESTAMP,
17:17:46 SQL> 	create_date DATE NOT NULL,
17:17:46 SQL> 	created_by VARCHAR(255) NOT NULL,
17:17:46 SQL> 	update_date DATE NOT NULL,
17:17:46 SQL> 	updated_by VARCHAR(255) NOT NULL,
17:17:46 SQL> 	last_check_date DATE NOT NULL,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
17:17:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
17:17:46 SQL> )
17:17:46 SQL> TABLESPACE CORE;
17:17:46 SQL> */
17:17:46 SQL> 
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_RECEIPT(
17:17:46   4  /*
17:17:46   5  Throws exceptions:
17:17:46   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   7  */
17:17:46   8  	  out_id	      OUT NUMBER,
17:17:46   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:46  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:46  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
17:17:46  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:46  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:46  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:46  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:46  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:46  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:46  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:46  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:46  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
17:17:46  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
17:17:46  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:46  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
17:17:46  24  );
17:17:46  25  
17:17:46  26  PROCEDURE UPDATE_RECEIPT(
17:17:46  27  /*
17:17:46  28  Throws exceptions:
17:17:46  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  30  */
17:17:46  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
17:17:46  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:46  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
17:17:46  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:46  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:46  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:46  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:46  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:46  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:46  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:46  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:46  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
17:17:46  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
17:17:46  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:46  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
17:17:46  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
17:17:46  47  );
17:17:46  48  
17:17:46  49  PROCEDURE LINK_ITUNES_RECEIPT(
17:17:46  50  /*
17:17:46  51  Throws exceptions:
17:17:46  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  53  */
17:17:46  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
17:17:46  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:46  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
17:17:46  57  );
17:17:46  58  
17:17:46  59  PROCEDURE MARK_RECEIPT_CHECKED(
17:17:46  60  /*
17:17:46  61  Throws exceptions:
17:17:46  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  63  */
17:17:46  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
17:17:46  65  );
17:17:46  66  
17:17:46  67  END PROCS_ITUNES_RECEIPT_CRU_V15;
17:17:46  68  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_LICENSE
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_LICENSE(
17:17:46   4  /*
17:17:46   5  Throws exceptions:
17:17:46   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   8  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:46   9  */
17:17:46  10  	in_status_id		    IN NUMBER,
17:17:46  11  	in_needs_entitlements	    IN NUMBER,
17:17:46  12  	in_start_date		    IN DATE,
17:17:46  13  	in_end_date		    IN DATE,
17:17:46  14  	in_offer_id		    IN NUMBER,
17:17:46  15  	in_subscription_id	    IN NUMBER,
17:17:46  16  	in_invoice_id		    IN NUMBER,
17:17:46  17  	in_created_by		    IN VARCHAR2,
17:17:46  18  	in_is_extension 	    IN NUMBER,
17:17:46  19  	in_current_offer_index	    IN NUMBER,
17:17:46  20  	in_current_offer_recurr_num IN NUMBER,
17:17:46  21  	out_license_id		    OUT NUMBER
17:17:46  22  );
17:17:46  23  
17:17:46  24  /*********************************************/
17:17:46  25  
17:17:46  26  PROCEDURE UPDATE_LICENSE_STATUS(
17:17:46  27  /*
17:17:46  28  Throws exceptions:
17:17:46  29  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  31  */
17:17:46  32  	  in_license_id     IN NUMBER,
17:17:46  33  	  in_license_status IN NUMBER,
17:17:46  34  	  in_updated_by     IN VARCHAR2,
17:17:46  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:46  36  );
17:17:46  37  
17:17:46  38  /*********************************************/
17:17:46  39  
17:17:46  40  PROCEDURE GET_ENDING_LICENSES (
17:17:46  41  	in_hours_number IN NUMBER,
17:17:46  42  	out_result_set OUT SYS_REFCURSOR
17:17:46  43  );
17:17:46  44  
17:17:46  45  /*********************************************/
17:17:46  46  
17:17:46  47  PROCEDURE GET_ENDING_LICENSES_CC (
17:17:46  48  	in_hours_number IN NUMBER,
17:17:46  49  	out_result_set OUT SYS_REFCURSOR,
17:17:46  50  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:46  51  );
17:17:46  52  
17:17:46  53  /**********************************************/
17:17:46  54  
17:17:46  55  PROCEDURE GET_RECURRING_OFFER (
17:17:46  56  	in_license_id  IN NUMBER,
17:17:46  57  	out_result_set OUT SYS_REFCURSOR
17:17:46  58  );
17:17:46  59  
17:17:46  60  /**********************************************/
17:17:46  61  
17:17:46  62  PROCEDURE GET_NEXT_OFFER (
17:17:46  63  	in_license_id  IN NUMBER,
17:17:46  64  	out_result_set OUT SYS_REFCURSOR
17:17:46  65  );
17:17:46  66  
17:17:46  67  /**********************************************/
17:17:46  68  
17:17:46  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
17:17:46  70  	in_license_id IN NUMBER,
17:17:46  71  	out_group_id  OUT NUMBER
17:17:46  72  );
17:17:46  73  
17:17:46  74  /**************************************************/
17:17:46  75  
17:17:46  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
17:17:46  77  	out_result_set OUT SYS_REFCURSOR
17:17:46  78  );
17:17:46  79  
17:17:46  80  /**************************************************/
17:17:46  81  
17:17:46  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
17:17:46  83  	in_license_id	      IN NUMBER,
17:17:46  84  	in_needs_entitlements IN NUMBER,
17:17:46  85  	in_updated_by	      IN VARCHAR2
17:17:46  86  );
17:17:46  87  
17:17:46  88  PROCEDURE GET_ENDED_GC_LICENSES (
17:17:46  89  	out_result_set		OUT SYS_REFCURSOR,
17:17:46  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:46  91  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:46  92  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:46  93  );
17:17:46  94  
17:17:46  95  PROCEDURE GET_LICENSE_BY_ID (
17:17:46  96  
17:17:46  97  	in_license_id  IN NUMBER,
17:17:46  98  
17:17:46  99  	out_result_set OUT SYS_REFCURSOR
17:17:46 100  
17:17:46 101  );
17:17:46 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
17:17:46 103  	in_subscription_id IN NUMBER,
17:17:46 104  	in_end_date IN DATE,
17:17:46 105  	in_updated_by IN VARCHAR2
17:17:46 106  );
17:17:46 107  END PROCS_LICENSE_V15;
17:17:46 108  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_LICENSE_CRU
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_LICENSE(
17:17:46   4  	out_license_id		    OUT LICENSE.ID%TYPE,
17:17:46   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
17:17:46   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
17:17:46   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
17:17:46   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
17:17:46   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
17:17:46  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
17:17:46  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
17:17:46  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
17:17:46  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
17:17:46  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
17:17:46  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
17:17:46  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
17:17:46  17  );
17:17:46  18  
17:17:46  19  PROCEDURE UPDATE_LICENSE (
17:17:46  20  	in_license_id		    IN LICENSE.ID%TYPE,
17:17:46  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
17:17:46  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
17:17:46  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
17:17:46  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
17:17:46  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
17:17:46  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
17:17:46  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
17:17:46  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
17:17:46  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
17:17:46  30  );
17:17:46  31  
17:17:46  32  END PROCS_LICENSE_CRU_V15;
17:17:46  33  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_LINE_ITEMS
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE ADD_LINE_ITEMS(
17:17:46   4  /*
17:17:46   5  Throws exceptions:
17:17:46   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   8  */
17:17:46   9  	in_invoice_id IN NUMBER,
17:17:46  10  	in_offer_id   IN NUMBER,
17:17:46  11  	in_created_by IN VARCHAR2
17:17:46  12  );
17:17:46  13  
17:17:46  14  /****************************************************/
17:17:46  15  
17:17:46  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
17:17:46  17  	in_line_item_id    IN NUMBER,
17:17:46  18  	in_amount	   IN NUMBER,
17:17:46  19  	in_discount_amount IN NUMBER,
17:17:46  20  	in_taxes_amount    IN NUMBER
17:17:46  21  );
17:17:46  22  
17:17:46  23  /****************************************************/
17:17:46  24  
17:17:46  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:46  26  /*
17:17:46  27  Throws exceptions:
17:17:46  28  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  30  */
17:17:46  31  	in_invoice_id  IN NUMBER,
17:17:46  32  	out_result_set OUT SYS_REFCURSOR
17:17:46  33  );
17:17:46  34  
17:17:46  35  /****************************************************/
17:17:46  36  
17:17:46  37  PROCEDURE GET_LINE_ITEM_TAXES (
17:17:46  38  /*
17:17:46  39  Throws exceptions:
17:17:46  40  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  41  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  42  */
17:17:46  43  	in_line_item_id IN  NUMBER,
17:17:46  44  	out_result_set	OUT SYS_REFCURSOR
17:17:46  45  );
17:17:46  46  /****************************************************/
17:17:46  47  
17:17:46  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
17:17:46  49  /*
17:17:46  50  Throws exceptions:
17:17:46  51  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  53  */
17:17:46  54  	in_line_item_id IN  NUMBER,
17:17:46  55  	out_result_set	OUT SYS_REFCURSOR
17:17:46  56  );
17:17:46  57  
17:17:46  58  /****************************************************/
17:17:46  59  
17:17:46  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
17:17:46  61  /*
17:17:46  62  Throws exceptions:
17:17:46  63  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  64  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  65  */
17:17:46  66  	in_line_item_id     IN	NUMBER,
17:17:46  67  	out_amount	    OUT NUMBER
17:17:46  68  );
17:17:46  69  
17:17:46  70  /****************************************************/
17:17:46  71  
17:17:46  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
17:17:46  73  /*
17:17:46  74  Throws exceptions:
17:17:46  75  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  76  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  77  */
17:17:46  78  	in_line_item_id     IN	NUMBER
17:17:46  79  ) RETURN NUMBER;
17:17:46  80  
17:17:46  81  END PROCS_LINE_ITEMS_V15;
17:17:46  82  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_LINE_ITEM (
17:17:46   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
17:17:46   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
17:17:46   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
17:17:46   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
17:17:46   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
17:17:46   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
17:17:46  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
17:17:46  11  );
17:17:46  12  
17:17:46  13  PROCEDURE UPDATE_LINE_ITEM (
17:17:46  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
17:17:46  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
17:17:46  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
17:17:46  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
17:17:46  18  );
17:17:46  19  
17:17:46  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
17:17:46  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
17:17:46  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
17:17:46  23  );
17:17:46  24  
17:17:46  25  END PROCS_LINE_ITEMS_CRU_V15;
17:17:46  26  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_LOCKING
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V15" AS
17:17:46   2  
17:17:46   3  /*
17:17:46   4  Removed by Sergey
17:17:46   5  10.12.2010
17:17:46   6  PROCEDURE INITIALIZE_SYSTEM;
17:17:46   7  
17:17:46   8  PROCEDURE INITIALIZE_ACCOUNT (
17:17:46   9  	in_account_id IN NUMBER
17:17:46  10  );
17:17:46  11  
17:17:46  12  PROCEDURE INITIALIZE_GROUP (
17:17:46  13  	in_group_id IN NUMBER
17:17:46  14  );
17:17:46  15  */
17:17:46  16  
17:17:46  17  PROCEDURE LOCK_ACCOUNT (
17:17:46  18  	in_group_id    IN NUMBER,
17:17:46  19  	in_lock_key    IN VARCHAR2,
17:17:46  20  	in_seconds_num IN NUMBER,
17:17:46  21  	in_created_by  IN VARCHAR2,
17:17:46  22  	in_reason      IN VARCHAR2
17:17:46  23  );
17:17:46  24  
17:17:46  25  PROCEDURE RELEASE_LOCK (
17:17:46  26  	in_group_id IN NUMBER,
17:17:46  27  	in_lock_key IN VARCHAR2
17:17:46  28  );
17:17:46  29  
17:17:46  30  END PROCS_LOCKING_V15;
17:17:46  31  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_OFFER_CHAIN
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:46   4  /*
17:17:46   5  Throws exceptions:
17:17:46   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   8  */
17:17:46   9  	  in_offer_chain_id IN	 NUMBER,
17:17:46  10  	  out_result_set    OUT  SYS_REFCURSOR
17:17:46  11  );
17:17:46  12  
17:17:46  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
17:17:46  14  /*
17:17:46  15  Throws exceptions:
17:17:46  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:46  17  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:46  18  */
17:17:46  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:46  20  	out_result_set	   OUT SYS_REFCURSOR
17:17:46  21  );
17:17:46  22  
17:17:46  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
17:17:46  24  /*
17:17:46  25  Throws exceptions:
17:17:46  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:46  27  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:46  28  */
17:17:46  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:46  30  	out_result_set	   OUT SYS_REFCURSOR
17:17:46  31  );
17:17:46  32  
17:17:46  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
17:17:46  34  /*
17:17:46  35  Throws exceptions:
17:17:46  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:46  37  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:46  38  */
17:17:46  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:46  40  	out_result_set	   OUT SYS_REFCURSOR
17:17:46  41  );
17:17:46  42  
17:17:46  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
17:17:46  44  /*
17:17:46  45  Throws exceptions (codes):
17:17:46  46  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  47  */
17:17:46  48  	in_product_id  IN  NUMBER,
17:17:46  49  	out_result_set OUT SYS_REFCURSOR
17:17:46  50  );
17:17:46  51  
17:17:46  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
17:17:46  53  /*
17:17:46  54  Throws exceptions (codes):
17:17:46  55  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  56  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  57  */
17:17:46  58  	in_offer_chain_id IN NUMBER,
17:17:46  59  	out_price	  OUT NUMBER
17:17:46  60  );
17:17:46  61  
17:17:46  62  PROCEDURE GET_FIRST_OFFER(
17:17:46  63  /*
17:17:46  64  Throws exceptions (codes):
17:17:46  65  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  67  */
17:17:46  68  	in_offer_chain_id IN  NUMBER,
17:17:46  69  	out_offer_id	  OUT NUMBER
17:17:46  70  );
17:17:46  71  
17:17:46  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
17:17:46  73  /*
17:17:46  74  Throws exceptions (codes):
17:17:46  75  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  76  */
17:17:46  77  	out_result_set OUT SYS_REFCURSOR
17:17:46  78  );
17:17:46  79  
17:17:46  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
17:17:46  81  /*
17:17:46  82  Throws exceptions (codes):
17:17:46  83  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  85  */
17:17:46  86  	in_offer_chain_id IN NUMBER,
17:17:46  87  	out_result_set	  OUT SYS_REFCURSOR
17:17:46  88  );
17:17:46  89  
17:17:46  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
17:17:46  91  /*
17:17:46  92  Throws exceptions (codes):
17:17:46  93  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  95  */
17:17:46  96  	in_offer_chain_id	  IN NUMBER,
17:17:46  97  	in_offer_chain_start_date IN DATE
17:17:46  98  ) RETURN DATE;
17:17:46  99  
17:17:46 100  FUNCTION CALCULATE_OFFER_AMOUNT (
17:17:46 101  	in_offer_id IN NUMBER
17:17:46 102  ) RETURN NUMBER;
17:17:46 103  
17:17:46 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
17:17:46 105  	in_offer_chain_id IN NUMBER
17:17:46 106  ) RETURN NUMBER;
17:17:46 107  
17:17:46 108  FUNCTION GET_FIRST_OFFER_INDEX (
17:17:46 109  	in_offer_chain_id IN NUMBER
17:17:46 110  ) RETURN NUMBER;
17:17:46 111  
17:17:46 112  FUNCTION GET_NEXT_OFFER_INDEX (
17:17:46 113  /*
17:17:46 114  NULL, if not exists
17:17:46 115  */
17:17:46 116  	in_offer_chain_id	     IN NUMBER,
17:17:46 117  	in_offer_chain_current_index IN NUMBER
17:17:46 118  ) RETURN NUMBER;
17:17:46 119  
17:17:46 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
17:17:46 121  	in_offer_chain_id	     IN NUMBER,
17:17:46 122  	in_offer_chain_current_index IN NUMBER,
17:17:46 123  	out_next_offer_index	     OUT NUMBER
17:17:46 124  );
17:17:46 125  
17:17:46 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
17:17:46 127  	in_license_id		     IN NUMBER,
17:17:46 128  	in_offer_chain_current_index IN NUMBER,
17:17:46 129  	out_next_offer_index	     OUT NUMBER
17:17:46 130  );
17:17:46 131  
17:17:46 132  FUNCTION IS_OFFER_INDEX_EXISTS (
17:17:46 133  /*
17:17:46 134  1 - exists
17:17:46 135  0 - not exists
17:17:46 136  */
17:17:46 137  	in_offer_chain_id	   IN NUMBER,
17:17:46 138  	in_offer_chain_offer_index IN NUMBER
17:17:46 139  ) RETURN NUMBER;
17:17:46 140  
17:17:46 141  PROCEDURE GET_OFFER_LENGTH (
17:17:46 142  	in_offer_id IN NUMBER,
17:17:46 143  	out_years   OUT NUMBER,
17:17:46 144  	out_months  OUT NUMBER,
17:17:46 145  	out_days    OUT NUMBER
17:17:46 146  );
17:17:46 147  
17:17:46 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
17:17:46 149  	in_offer_id   IN NUMBER,
17:17:46 150  	in_start_date IN DATE DEFAULT SYSDATE,
17:17:46 151  	out_days      OUT NUMBER
17:17:46 152  );
17:17:46 153  
17:17:46 154  PROCEDURE GET_OFFER_PRODUCTS (
17:17:46 155  /*
17:17:46 156  Throws exceptions (codes):
17:17:46 157  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 158  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 159  */
17:17:46 160  	in_offer_id    IN NUMBER,
17:17:46 161  	out_result_set OUT SYS_REFCURSOR
17:17:46 162  );
17:17:46 163  
17:17:46 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
17:17:46 165  /*
17:17:46 166  Throws exceptions (codes):
17:17:46 167  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 168  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 169  */
17:17:46 170  	in_offer_chain_id IN NUMBER,
17:17:46 171  	out_result_set	  OUT SYS_REFCURSOR
17:17:46 172  );
17:17:46 173  
17:17:46 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
17:17:46 175  /*
17:17:46 176  Throws exceptions (codes):
17:17:46 177  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 178  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 179  Returns:
17:17:46 180  GLOBAL_CONSTANTS_V15.TRUE if there are at least one same product
17:17:46 181  GLOBAL_CONSTANTS_V15.FALSE else
17:17:46 182  */
17:17:46 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
17:17:46 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
17:17:46 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:46 186  ) RETURN NUMBER;
17:17:46 187  
17:17:46 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
17:17:46 189  /*
17:17:46 190  Throws exceptions (codes):
17:17:46 191  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 192  Returns:
17:17:46 193  GLOBAL_CONSTANTS_V15.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
17:17:46 194  GLOBAL_CONSTANTS_V15.FALSE else
17:17:46 195  */
17:17:46 196  	in_offer_chain_id IN NUMBER
17:17:46 197  ) RETURN NUMBER;
17:17:46 198  
17:17:46 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
17:17:46 200  /*
17:17:46 201  Throws exceptions (codes):
17:17:46 202  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 203  */
17:17:46 204  	in_offer_chain_id IN NUMBER
17:17:46 205  ) RETURN NUMBER;
17:17:46 206  
17:17:46 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
17:17:46 208  /*
17:17:46 209  Throws exceptions (codes):
17:17:46 210  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 211  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 212  */
17:17:46 213  	in_offer_chain_id   IN NUMBER,
17:17:46 214  	in_eligibility_name IN VARCHAR2,
17:17:46 215  	out_result_set	    OUT SYS_REFCURSOR
17:17:46 216  );
17:17:46 217  
17:17:46 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
17:17:46 219  /*
17:17:46 220  Throws exceptions (codes):
17:17:46 221  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 222  */
17:17:46 223  	in_offer_chain_ids  IN VARCHAR2,
17:17:46 224  	in_eligibility_name IN VARCHAR2,
17:17:46 225  	out_result_set	    OUT SYS_REFCURSOR
17:17:46 226  );
17:17:46 227  
17:17:46 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:46 229  /*
17:17:46 230  Throws exceptions (codes):
17:17:46 231  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 232  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 233  */
17:17:46 234  	in_offer_chain_id IN NUMBER,
17:17:46 235  	in_meta_data_name IN VARCHAR2,
17:17:46 236  	out_result_set	  OUT SYS_REFCURSOR
17:17:46 237  );
17:17:46 238  
17:17:46 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
17:17:46 240  /*
17:17:46 241  Throws exceptions (codes):
17:17:46 242  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 243  */
17:17:46 244  	in_offer_chain_ids IN VARCHAR2,
17:17:46 245  	in_meta_data_name  IN VARCHAR2,
17:17:46 246  	out_result_set	   OUT SYS_REFCURSOR
17:17:46 247  );
17:17:46 248  
17:17:46 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
17:17:46 250  /*
17:17:46 251  Throws exceptions (codes):
17:17:46 252  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 253  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 254  */
17:17:46 255  	in_offer_id    IN NUMBER,
17:17:46 256  	out_result_set OUT SYS_REFCURSOR
17:17:46 257  );
17:17:46 258  
17:17:46 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:46 260  /*
17:17:46 261  Throws exceptions (codes):
17:17:46 262  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46 263  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 264  */
17:17:46 265  	in_product_offering_id IN NUMBER,
17:17:46 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
17:17:46 267  	out_result_set	       OUT SYS_REFCURSOR
17:17:46 268  );
17:17:46 269  
17:17:46 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
17:17:46 271  /*
17:17:46 272  Throws exceptions (codes):
17:17:46 273  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46 274  */
17:17:46 275  	in_offer_chain_1 IN NUMBER,
17:17:46 276  	in_offer_chain_2 IN NUMBER,
17:17:46 277  	out_result_set	OUT SYS_REFCURSOR
17:17:46 278  );
17:17:46 279  
17:17:46 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
17:17:46 281  	in_offer_chain_id IN NUMBER,
17:17:46 282  	in_meta_data_name IN VARCHAR2,
17:17:46 283  	out_value	  OUT VARCHAR2
17:17:46 284  );
17:17:46 285  
17:17:46 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
17:17:46 287  	in_offer_chain_id   IN NUMBER,
17:17:46 288  	in_eligibility_name IN VARCHAR2,
17:17:46 289  	out_value	    OUT VARCHAR2
17:17:46 290  );
17:17:46 291  
17:17:46 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
17:17:46 293  	in_offer_id    IN NUMBER,
17:17:46 294  	out_result_set OUT SYS_REFCURSOR
17:17:46 295  );
17:17:46 296  
17:17:46 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
17:17:46 298  	in_meta_data_name  IN VARCHAR2,
17:17:46 299  	in_meta_data_value IN VARCHAR2,
17:17:46 300  	out_result_set	   OUT SYS_REFCURSOR
17:17:46 301  );
17:17:46 302  
17:17:46 303  PROCEDURE GET_ALL_META_DATA (
17:17:46 304  	in_offer_chain_id IN NUMBER,
17:17:46 305  	out_result_set	  OUT SYS_REFCURSOR
17:17:46 306  );
17:17:46 307  
17:17:46 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
17:17:46 309  	in_group_id	  IN NUMBER,
17:17:46 310  	in_offer_chain_id IN NUMBER,
17:17:46 311  	out_is_eligible   OUT NUMBER,
17:17:46 312  	out_concurrent_subscription_id OUT NUMBER
17:17:46 313  );
17:17:46 314  
17:17:46 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:46 316  	in_offer_chain_id	 IN NUMBER,
17:17:46 317  	in_action_name		 IN VARCHAR2,
17:17:46 318  	out_notification_type_id OUT NUMBER
17:17:46 319  );
17:17:46 320  
17:17:46 321  END PROCS_OFFER_CHAIN_V15;
17:17:46 322  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
17:17:46   2  AS
17:17:46   3  
17:17:46   4  ----
17:17:46   5  --------------------------------------------------------------------------------
17:17:46   6  ----
17:17:46   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
17:17:46   8  	      returned from the previous call and store the result for the
17:17:46   9  	      next call.
17:17:46  10  	     This method will identify and create new Sync Events from trigger activity data */
17:17:46  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
17:17:46  12  ----
17:17:46  13  --------------------------------------------------------------------------------
17:17:46  14  ----
17:17:46  15  	  /* Internal logic call may need to be used to fix poller data */
17:17:46  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
17:17:46  17  ----
17:17:46  18  --------------------------------------------------------------------------------
17:17:46  19  ----
17:17:46  20  	  /* User request for sync events. Params should be hard-coded in the application
17:17:46  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
17:17:46  22  	      skipped. Last read time is logged.
17:17:46  23  	     Params:
17:17:46  24  		  set_maximum: Size of each transfer set
17:17:46  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
17:17:46  26  	     Returns:
17:17:46  27  		  set_id: Transfer set id, duplicated for all entries
17:17:46  28  		  group_id: regi_id value
17:17:46  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
17:17:46  30  	  */
17:17:46  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
17:17:46  32  ----
17:17:46  33  --------------------------------------------------------------------------------
17:17:46  34  ----
17:17:46  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
17:17:46  36  	      single confirmation per transfer set.
17:17:46  37  	  */
17:17:46  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
17:17:46  39  ----
17:17:46  40  --------------------------------------------------------------------------------
17:17:46  41  ----
17:17:46  42  	  procedure SET_LAST_RUN(ts in timestamp);
17:17:46  43  	  procedure GET_LAST_RUN(ts out timestamp);
17:17:46  44  END PROCS_POLLING_SYNC;
17:17:46  45  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_PRODUCT
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE GET_PRODUCTS (
17:17:46   4  /*
17:17:46   5  Throws exceptions:
17:17:46   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46   7  */
17:17:46   8  	in_status_id   IN  NUMBER,
17:17:46   9  	out_result_set OUT SYS_REFCURSOR
17:17:46  10  );
17:17:46  11  
17:17:46  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:46  13  /*
17:17:46  14  Throws exceptions:
17:17:46  15  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  17  */
17:17:46  18  	in_product_offering_id	IN NUMBER,
17:17:46  19  	out_result_set OUT SYS_REFCURSOR
17:17:46  20  );
17:17:46  21  
17:17:46  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
17:17:46  23  /*
17:17:46  24  Throws exceptions:
17:17:46  25  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:46  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:46  27  */
17:17:46  28  	in_product_id	    IN NUMBER,
17:17:46  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
17:17:46  30  	out_result_set	    OUT SYS_REFCURSOR
17:17:46  31  );
17:17:46  32  
17:17:46  33  PROCEDURE GET_PRODUCT_BY_ID (
17:17:46  34  	in_product_id  IN NUMBER,
17:17:46  35  	out_result_set OUT SYS_REFCURSOR
17:17:46  36  );
17:17:46  37  
17:17:46  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
17:17:46  39  	in_line_item_id IN NUMBER,
17:17:46  40  	out_result_set	OUT SYS_REFCURSOR
17:17:46  41  );
17:17:46  42  
17:17:46  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
17:17:46  44  	in_product_offering_id IN NUMBER,
17:17:46  45  	out_result_set	OUT SYS_REFCURSOR
17:17:46  46  );
17:17:46  47  
17:17:46  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
17:17:46  49  	in_product_offering_id IN NUMBER,
17:17:46  50  	out_result_set	       OUT SYS_REFCURSOR
17:17:46  51  );
17:17:46  52  
17:17:46  53  END PROCS_PRODUCT_V15;
17:17:46  54  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:46 SQL> 
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
17:17:46 SQL> --------------------------------------------------------------------------------
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V15" AS
17:17:46   2  
17:17:46   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
17:17:46   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
17:17:46   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
17:17:46   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
17:17:46   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
17:17:46   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
17:17:46  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
17:17:46  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
17:17:46  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:46  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
17:17:46  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
17:17:46  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
17:17:46  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:46  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:46  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
17:17:46  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
17:17:46  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
17:17:46  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
17:17:46  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
17:17:46  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
17:17:46  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
17:17:46  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
17:17:46  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
17:17:46  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
17:17:46  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
17:17:46  29  );
17:17:46  30  
17:17:46  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
17:17:46  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
17:17:46  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
17:17:46  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
17:17:46  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
17:17:46  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
17:17:46  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
17:17:46  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
17:17:46  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
17:17:46  40  );
17:17:46  41  
17:17:46  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
17:17:46  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
17:17:46  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
17:17:46  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
17:17:46  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
17:17:46  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
17:17:46  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
17:17:46  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
17:17:46  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
17:17:46  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
17:17:46  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
17:17:46  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
17:17:46  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
17:17:46  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
17:17:46  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
17:17:46  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
17:17:46  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
17:17:46  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
17:17:46  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
17:17:46  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
17:17:46  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
17:17:46  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
17:17:46  65  );
17:17:46  66  
17:17:46  67  PROCEDURE CREATE_CPT_EXCEPTION (
17:17:46  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
17:17:46  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
17:17:46  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
17:17:46  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
17:17:46  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
17:17:46  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
17:17:46  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
17:17:46  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
17:17:46  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
17:17:46  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
17:17:46  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:46  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:46  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
17:17:46  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:46  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
17:17:46  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
17:17:46  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
17:17:46  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
17:17:46  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
17:17:46  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
17:17:46  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
17:17:46  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
17:17:46  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
17:17:46  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
17:17:46  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
17:17:46  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
17:17:46  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
17:17:46  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
17:17:46  97  );
17:17:46  98  
17:17:46  99  PROCEDURE CREATE_CPT_DEPOSIT (
17:17:46 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
17:17:46 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
17:17:46 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
17:17:46 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
17:17:46 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
17:17:46 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
17:17:46 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
17:17:46 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
17:17:46 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
17:17:46 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
17:17:46 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:46 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:46 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
17:17:46 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:46 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
17:17:46 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
17:17:46 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
17:17:46 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
17:17:46 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
17:17:46 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
17:17:46 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
17:17:46 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
17:17:46 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
17:17:46 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
17:17:46 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
17:17:46 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
17:17:46 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
17:17:46 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
17:17:46 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
17:17:46 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
17:17:46 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
17:17:46 132  );
17:17:46 133  
17:17:46 134  PROCEDURE CREATE_PP_SETTLEMENT (
17:17:46 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
17:17:46 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
17:17:46 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
17:17:46 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
17:17:46 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
17:17:46 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
17:17:46 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
17:17:46 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
17:17:46 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
17:17:46 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
17:17:46 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
17:17:46 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
17:17:46 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
17:17:46 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
17:17:46 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
17:17:46 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
17:17:46 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
17:17:46 153  );
17:17:46 154  
17:17:46 155  PROCEDURE CREATE_PP_DISPUTE (
17:17:46 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
17:17:46 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
17:17:46 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
17:17:46 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
17:17:46 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
17:17:46 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
17:17:46 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
17:17:46 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
17:17:46 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
17:17:46 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
17:17:46 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
17:17:46 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
17:17:46 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
17:17:46 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
17:17:46 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
17:17:46 172  );
17:17:46 173  
17:17:46 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
17:17:46 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
17:17:46 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
17:17:46 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:46 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
17:17:46 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
17:17:46 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
17:17:46 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
17:17:46 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
17:17:46 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
17:17:46 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
17:17:46 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
17:17:46 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
17:17:46 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
17:17:46 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
17:17:46 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
17:17:46 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
17:17:46 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
17:17:46 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
17:17:46 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
17:17:46 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
17:17:46 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
17:17:46 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
17:17:46 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
17:17:46 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
17:17:46 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
17:17:46 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
17:17:46 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
17:17:46 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
17:17:46 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
17:17:46 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
17:17:46 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
17:17:46 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
17:17:46 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
17:17:46 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
17:17:46 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
17:17:46 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
17:17:46 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
17:17:46 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
17:17:46 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
17:17:46 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
17:17:46 215  );
17:17:46 216  
17:17:46 217  PROCEDURE GET_EXT_SOURCE_LOG (
17:17:46 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
17:17:46 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
17:17:46 220  	out_result_set		 OUT SYS_REFCURSOR
17:17:46 221  );
17:17:46 222  
17:17:46 223  END PROCS_RECONCILIATION_CRU_V15;
17:17:46 224  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.07
17:17:46 SQL> 
17:17:46 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
17:17:46   2  
17:17:46   3  ----
17:17:46   4  --------------------------------------------------------------------------------
17:17:46   5  ----
17:17:46   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46   7  ----
17:17:46   8  --------------------------------------------------------------------------------
17:17:46   9  ----
17:17:46  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  11  ----
17:17:46  12  --------------------------------------------------------------------------------
17:17:46  13  ----
17:17:46  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  15  ----
17:17:46  16  --------------------------------------------------------------------------------
17:17:46  17  ----
17:17:46  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  19  ----
17:17:46  20  --------------------------------------------------------------------------------
17:17:46  21  ----
17:17:46  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  23  ----
17:17:46  24  --------------------------------------------------------------------------------
17:17:46  25  ----
17:17:46  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  27  ----
17:17:46  28  --------------------------------------------------------------------------------
17:17:46  29  ----
17:17:46  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  31  ----
17:17:46  32  --------------------------------------------------------------------------------
17:17:46  33  ----
17:17:46  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  35  ----
17:17:46  36  --------------------------------------------------------------------------------
17:17:46  37  ----
17:17:46  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  39  ----
17:17:46  40  --------------------------------------------------------------------------------
17:17:46  41  ----
17:17:46  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  43  ----
17:17:46  44  --------------------------------------------------------------------------------
17:17:46  45  ----
17:17:46  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  47  ----
17:17:46  48  --------------------------------------------------------------------------------
17:17:46  49  ----
17:17:46  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  51  ----
17:17:46  52  --------------------------------------------------------------------------------
17:17:46  53  ----
17:17:46  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  55  ----
17:17:46  56  --------------------------------------------------------------------------------
17:17:46  57  ----
17:17:46  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  59  ----
17:17:46  60  --------------------------------------------------------------------------------
17:17:46  61  ----
17:17:46  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  63  ----
17:17:46  64  --------------------------------------------------------------------------------
17:17:46  65  ----
17:17:46  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  67  ----
17:17:46  68  --------------------------------------------------------------------------------
17:17:46  69  ----
17:17:46  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  71  ----
17:17:46  72  --------------------------------------------------------------------------------
17:17:46  73  ----
17:17:46  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  75  ----
17:17:46  76  --------------------------------------------------------------------------------
17:17:46  77  ----
17:17:46  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  79  ----
17:17:46  80  --------------------------------------------------------------------------------
17:17:46  81  ----
17:17:46  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  83  ----
17:17:46  84  --------------------------------------------------------------------------------
17:17:46  85  ----
17:17:46  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  87  ----
17:17:46  88  --------------------------------------------------------------------------------
17:17:46  89  ----
17:17:46  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  91  ----
17:17:46  92  --------------------------------------------------------------------------------
17:17:46  93  ----
17:17:46  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  95  ----
17:17:46  96  --------------------------------------------------------------------------------
17:17:46  97  ----
17:17:46  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46  99  ----
17:17:46 100  --------------------------------------------------------------------------------
17:17:46 101  ----
17:17:46 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 103  ----
17:17:46 104  --------------------------------------------------------------------------------
17:17:46 105  ----
17:17:46 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 107  ----
17:17:46 108  --------------------------------------------------------------------------------
17:17:46 109  ----
17:17:46 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 111  ----
17:17:46 112  --------------------------------------------------------------------------------
17:17:46 113  ----
17:17:46 114  /**/
17:17:46 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 116  ----
17:17:46 117  --------------------------------------------------------------------------------
17:17:46 118  ----
17:17:46 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 120  ----
17:17:46 121  --------------------------------------------------------------------------------
17:17:46 122  ----
17:17:46 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 124  ----
17:17:46 125  --------------------------------------------------------------------------------
17:17:46 126  ----
17:17:46 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 128  ----
17:17:46 129  --------------------------------------------------------------------------------
17:17:46 130  ----
17:17:46 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 132  ----
17:17:46 133  --------------------------------------------------------------------------------
17:17:46 134  ----
17:17:46 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 136  ----
17:17:46 137  --------------------------------------------------------------------------------
17:17:46 138  ----
17:17:46 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 140  ----
17:17:46 141  --------------------------------------------------------------------------------
17:17:46 142  ----
17:17:46 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 144  ----
17:17:46 145  --------------------------------------------------------------------------------
17:17:46 146  ----
17:17:46 147  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 148  ----
17:17:46 149  --------------------------------------------------------------------------------
17:17:46 150  ----
17:17:46 151  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
17:17:46 152  ----
17:17:46 153  --------------------------------------------------------------------------------
17:17:46 154  ----
17:17:46 155  /**/
17:17:46 156  END PROCS_REPORTING;
17:17:46 157  .
17:17:46 SQL> /

Package created.

Elapsed: 00:00:00.05
17:17:47 SQL> 
17:17:47 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
17:17:47 SQL> 
17:17:47 SQL> whenever sqlerror exit failure
17:17:47 SQL> 
17:17:47 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
17:17:47   2  
17:17:47   3  ----
17:17:47   4  --------------------------------------------------------------------------------
17:17:47   5  ----
17:17:47   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
17:17:47   7  	      return line_item.amount%type;
17:17:47   8  ----
17:17:47   9  --------------------------------------------------------------------------------
17:17:47  10  ----
17:17:47  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
17:17:47  12  	      return line_item.amount%type;
17:17:47  13  ----
17:17:47  14  --------------------------------------------------------------------------------
17:17:47  15  ----
17:17:47  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
17:17:47  17  	      in_lower_date_bound DATE,
17:17:47  18  	      in_upper_date_bound DATE,
17:17:47  19  	      out_lic_cur OUT sys_refcursor
17:17:47  20  	  );
17:17:47  21  ----
17:17:47  22  --------------------------------------------------------------------------------
17:17:47  23  ----
17:17:47  24  END PROCS_REPORTING_1A;
17:17:47  25  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_REPORTS
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
17:17:47   2  
17:17:47   3  FUNCTION GET_PRODUCT_NAMES(
17:17:47   4  	in_offer_id IN NUMBER
17:17:47   5  ) RETURN VARCHAR2;
17:17:47   6  
17:17:47   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
17:17:47   8  	in_start_date  IN DATE,
17:17:47   9  	in_end_date    IN DATE,
17:17:47  10  	out_result_set OUT SYS_REFCURSOR
17:17:47  11  );
17:17:47  12  
17:17:47  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
17:17:47  14  	in_offer_id	       IN NUMBER,
17:17:47  15  	in_start_date	       IN DATE,
17:17:47  16  	in_end_date	       IN DATE,
17:17:47  17  	out_new_purchasers_num OUT NUMBER,
17:17:47  18  	out_renewals_num       OUT NUMBER,
17:17:47  19  	out_product_names      OUT VARCHAR2,
17:17:47  20  	out_total_dollar_value OUT NUMBER,
17:17:47  21  	out_unique_purchasers  OUT NUMBER
17:17:47  22  );
17:17:47  23  
17:17:47  24  /*
17:17:47  25  FUNCTIONS FOR THE FLASH REPORT
17:17:47  26  */
17:17:47  27  
17:17:47  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
17:17:47  29  	in_offer_id	       IN NUMBER,
17:17:47  30  	in_start_date	       IN DATE,
17:17:47  31  	in_end_date	       IN DATE
17:17:47  32  ) RETURN NUMBER;
17:17:47  33  
17:17:47  34  FUNCTION FLR_RENEWALS_NUM (
17:17:47  35  	in_offer_id	       IN NUMBER,
17:17:47  36  	in_start_date	       IN DATE,
17:17:47  37  	in_end_date	       IN DATE
17:17:47  38  ) RETURN NUMBER;
17:17:47  39  
17:17:47  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
17:17:47  41  	in_offer_id	       IN NUMBER,
17:17:47  42  	in_start_date	       IN DATE,
17:17:47  43  	in_end_date	       IN DATE
17:17:47  44  ) RETURN NUMBER;
17:17:47  45  
17:17:47  46  FUNCTION FLR_UNIQUE_PURCHASERS (
17:17:47  47  	in_offer_id	       IN NUMBER,
17:17:47  48  	in_start_date	       IN DATE,
17:17:47  49  	in_end_date	       IN DATE
17:17:47  50  ) RETURN NUMBER;
17:17:47  51  
17:17:47  52  END PROCS_REPORTS_V5;
17:17:47  53  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_SUBSCRIPTION
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE START_SUBSCRIPTION_CREATION (
17:17:47   4  	in_group_id	      IN NUMBER,
17:17:47   5  	in_created_by	      IN VARCHAR2,
17:17:47   6  	in_offer_chain_id     IN NUMBER,
17:17:47   7  	in_instrument_type_id IN NUMBER,
17:17:47   8  	in_instrument_id      IN NUMBER,
17:17:47   9  	in_agent_id	      IN NUMBER,
17:17:47  10  	in_note 	      IN VARCHAR2,
17:17:47  11  	out_subscription_id   OUT NUMBER,
17:17:47  12  	out_invoice_id	      OUT NUMBER,
17:17:47  13  	out_new_license_id    OUT NUMBER,
17:17:47  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
17:17:47  15  );
17:17:47  16  
17:17:47  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
17:17:47  18  	in_subscription_id    IN NUMBER,
17:17:47  19  	in_invoice_id	      IN NUMBER,
17:17:47  20  	in_instrument_type_id IN NUMBER,
17:17:47  21  	in_instrument_id      IN NUMBER,
17:17:47  22  	in_created_by	      IN VARCHAR2
17:17:47  23  );
17:17:47  24  
17:17:47  25  PROCEDURE SUSPEND_SUBSCRIPTION(
17:17:47  26  /*
17:17:47  27  Throws exceptions:
17:17:47  28  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  29  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  31  */
17:17:47  32  	  in_subs_id	IN NUMBER ,
17:17:47  33  	  in_updated_by IN VARCHAR2
17:17:47  34  );
17:17:47  35  
17:17:47  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
17:17:47  37  	in_subscription_id IN  NUMBER,
17:17:47  38  	in_updated_by	   IN  VARCHAR2
17:17:47  39  );
17:17:47  40  
17:17:47  41  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:47  42  /*
17:17:47  43  Throws exceptions:
17:17:47  44  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  45  */
17:17:47  46  	  in_subscription_id IN  NUMBER,
17:17:47  47  	  out_result_set      OUT SYS_REFCURSOR
17:17:47  48  );
17:17:47  49  
17:17:47  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
17:17:47  51  /*
17:17:47  52  Throws exceptions:
17:17:47  53  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47  54  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  55  */
17:17:47  56  	in_subscription_id  IN	NUMBER,
17:17:47  57  	out_result_set	    OUT SYS_REFCURSOR
17:17:47  58  );
17:17:47  59  
17:17:47  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
17:17:47  61  /*
17:17:47  62  Throws exceptions:
17:17:47  63  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  64  */
17:17:47  65  	in_subscription_id  IN	NUMBER,
17:17:47  66  	out_result_set	    OUT SYS_REFCURSOR
17:17:47  67  );
17:17:47  68  
17:17:47  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
17:17:47  70  /*
17:17:47  71  Throws exceptions:
17:17:47  72  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  74  */
17:17:47  75  	in_subscription_id IN  NUMBER,
17:17:47  76  	in_agent_id	   IN  NUMBER,
17:17:47  77  	in_note 	   IN  VARCHAR2,
17:17:47  78  	in_created_by	   IN  VARCHAR2
17:17:47  79  );
17:17:47  80  
17:17:47  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
17:17:47  82  /*
17:17:47  83  Throws exceptions:
17:17:47  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  85  */
17:17:47  86  	out_result_set OUT SYS_REFCURSOR
17:17:47  87  );
17:17:47  88  
17:17:47  89  FUNCTION GET_RENEWAL_DATE (
17:17:47  90  /*
17:17:47  91  Throws exceptions:
17:17:47  92  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  93  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  94  */
17:17:47  95  	in_subscription_id in NUMBER
17:17:47  96  ) RETURN DATE;
17:17:47  97  
17:17:47  98  FUNCTION GET_RECENT_CHARGE (
17:17:47  99  /*
17:17:47 100  Throws exceptions:
17:17:47 101  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 102  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 103  */
17:17:47 104  	in_subscription_id IN NUMBER
17:17:47 105  ) RETURN NUMBER;
17:17:47 106  
17:17:47 107  FUNCTION GET_BILLING_CYCLE (
17:17:47 108  /*
17:17:47 109  Throws exceptions:
17:17:47 110  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 111  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 112  */
17:17:47 113  	in_subscription_id IN NUMBER
17:17:47 114  ) RETURN VARCHAR2;
17:17:47 115  
17:17:47 116  PROCEDURE REFUND_SUBSCRIPTION (
17:17:47 117  /*
17:17:47 118  Throws exceptions:
17:17:47 119  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 120  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 121  */
17:17:47 122  	in_subscription_id IN NUMBER,
17:17:47 123  	in_invoice_id	   IN NUMBER,
17:17:47 124  	in_refund_amount   IN NUMBER,
17:17:47 125  	in_note 	   IN VARCHAR2,
17:17:47 126  	in_created_by	   IN VARCHAR2,
17:17:47 127  	out_charge_id	   OUT NUMBER
17:17:47 128  );
17:17:47 129  
17:17:47 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
17:17:47 131  /*
17:17:47 132  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 133  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 134  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 135  */
17:17:47 136  	in_subscription_id	IN NUMBER,
17:17:47 137  	in_effective_start_date IN DATE,
17:17:47 138  	in_effective_end_date	IN DATE,
17:17:47 139  	in_note 		IN VARCHAR2,
17:17:47 140  	in_updated_by		IN VARCHAR2
17:17:47 141  );
17:17:47 142  
17:17:47 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
17:17:47 144  /*
17:17:47 145  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 146  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 147  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 148  Returns:
17:17:47 149  NULL if it is impossible to calculate end date (for example,
17:17:47 150  	offer chain includes offer with infinity recurrences number)
17:17:47 151  DATE else
17:17:47 152  */
17:17:47 153  	in_subscription_id IN NUMBER
17:17:47 154  ) RETURN DATE;
17:17:47 155  
17:17:47 156  PROCEDURE HAS_FUTURE_LICENSE (
17:17:47 157  /*
17:17:47 158  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 159  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 160  */
17:17:47 161  	in_license_id IN  NUMBER,
17:17:47 162  	out_result    OUT NUMBER
17:17:47 163  );
17:17:47 164  
17:17:47 165  PROCEDURE CLOSE_SUBSCRIPTION (
17:17:47 166  	in_subscription_id IN NUMBER,
17:17:47 167  	in_updated_by	   IN VARCHAR2
17:17:47 168  );
17:17:47 169  
17:17:47 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
17:17:47 171  	in_subscription_id IN NUMBER,
17:17:47 172  	out_group_id	   OUT NUMBER
17:17:47 173  );
17:17:47 174  
17:17:47 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
17:17:47 176  /*
17:17:47 177  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 178  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 179  */
17:17:47 180  	in_subscription_id IN NUMBER,
17:17:47 181  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 182  );
17:17:47 183  
17:17:47 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
17:17:47 185  /*
17:17:47 186  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 188  */
17:17:47 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
17:17:47 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
17:17:47 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:47 192  );
17:17:47 193  
17:17:47 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
17:17:47 195  /*
17:17:47 196  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 198  */
17:17:47 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
17:17:47 200  	in_subscription_id IN NUMBER,
17:17:47 201  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 202  );
17:17:47 203  
17:17:47 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
17:17:47 205  /*
17:17:47 206  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 207  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 208  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 209  */
17:17:47 210  	in_invoice_id	     IN NUMBER,
17:17:47 211  	in_updated_by	     IN VARCHAR2,
17:17:47 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:47 213  );
17:17:47 214  
17:17:47 215  PROCEDURE FINALIZE_CANCELATION (
17:17:47 216  /*
17:17:47 217  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 218  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 219  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 220  */
17:17:47 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
17:17:47 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
17:17:47 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:47 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:47 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:47 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:47 227  	in_subscription_id    IN NUMBER,
17:17:47 228  	in_cancelation_reason IN VARCHAR2,
17:17:47 229  	in_cancelation_date   IN DATE,
17:17:47 230  	in_note 	      IN VARCHAR2,
17:17:47 231  	in_agent_id	      IN NUMBER,
17:17:47 232  	in_updated_by	      IN VARCHAR2
17:17:47 233  );
17:17:47 234  
17:17:47 235  PROCEDURE FINALIZE_FALSE_START (
17:17:47 236  /*
17:17:47 237  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 239  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 240  */
17:17:47 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
17:17:47 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:47 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:47 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:47 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:47 246  	in_subscription_id    IN NUMBER,
17:17:47 247  	in_cancelation_date   IN DATE,
17:17:47 248  	in_note 	      IN VARCHAR2,
17:17:47 249  	in_agent_id	      IN NUMBER,
17:17:47 250  	in_updated_by	      IN VARCHAR2
17:17:47 251  );
17:17:47 252  
17:17:47 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
17:17:47 254  	in_subscription_id IN NUMBER
17:17:47 255  ) RETURN NUMBER;
17:17:47 256  
17:17:47 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
17:17:47 258  /*
17:17:47 259  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 260  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 261  */
17:17:47 262  	in_subscription_id IN NUMBER,
17:17:47 263  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 264  );
17:17:47 265  
17:17:47 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
17:17:47 267  /*
17:17:47 268  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 269  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 270  */
17:17:47 271  	in_subscription_id IN NUMBER,
17:17:47 272  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 273  );
17:17:47 274  
17:17:47 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
17:17:47 276  /*
17:17:47 277  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 278  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 279  */
17:17:47 280  	in_subscription_id IN NUMBER,
17:17:47 281  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 282  );
17:17:47 283  
17:17:47 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
17:17:47 285  /*
17:17:47 286  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 287  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 288  */
17:17:47 289  	in_subscription_id IN NUMBER,
17:17:47 290  	out_result	   OUT NUMBER
17:17:47 291  );
17:17:47 292  
17:17:47 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
17:17:47 294  /*
17:17:47 295  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 296  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 297  */
17:17:47 298  	in_group_id	   IN NUMBER,
17:17:47 299  	in_offer_chain_id  IN NUMBER,
17:17:47 300  	out_result	   out number
17:17:47 301  );
17:17:47 302  
17:17:47 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
17:17:47 304  /*
17:17:47 305  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 306  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 307  */
17:17:47 308  	in_group_id	   IN NUMBER,
17:17:47 309  	in_offer_chain_id  IN NUMBER,
17:17:47 310  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 311  );
17:17:47 312  
17:17:47 313  PROCEDURE ADD_META_DATA (
17:17:47 314  /*
17:17:47 315  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 316  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 317  */
17:17:47 318  	in_subscription_id IN NUMBER,
17:17:47 319  	in_name 	   IN VARCHAR2,
17:17:47 320  	in_value	   IN VARCHAR2,
17:17:47 321  	in_created_by	   IN VARCHAR2
17:17:47 322  );
17:17:47 323  
17:17:47 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
17:17:47 325  /*
17:17:47 326  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:47 327  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 328  */
17:17:47 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
17:17:47 330  	out_result_set	     OUT SYS_REFCURSOR
17:17:47 331  );
17:17:47 332  
17:17:47 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
17:17:47 334  /*
17:17:47 335  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 336  */
17:17:47 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
17:17:47 338  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 339  );
17:17:47 340  
17:17:47 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
17:17:47 342   (
17:17:47 343  /*
17:17:47 344  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 345  */
17:17:47 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:47 347  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 348  );
17:17:47 349  
17:17:47 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
17:17:47 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
17:17:47 352  ) RETURN NUMBER;
17:17:47 353  
17:17:47 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
17:17:47 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
17:17:47 356  ) RETURN VARCHAR2;
17:17:47 357  
17:17:47 358  
17:17:47 359  
17:17:47 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
17:17:47 361  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 362  );
17:17:47 363  
17:17:47 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
17:17:47 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:47 366  	out_offer_id	    OUT NUMBER
17:17:47 367  );
17:17:47 368  
17:17:47 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
17:17:47 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:47 371  	out_license_id	    OUT NUMBER
17:17:47 372  );
17:17:47 373  
17:17:47 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
17:17:47 375  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 376  );
17:17:47 377  
17:17:47 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
17:17:47 379  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 380  );
17:17:47 381  
17:17:47 382  END PROCS_SUBSCRIPTION_V15;
17:17:47 383  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.05
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_SUBSCRIPTION(
17:17:47   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
17:17:47   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
17:17:47   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
17:17:47   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
17:17:47  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
17:17:47  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
17:17:47  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
17:17:47  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
17:17:47  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
17:17:47  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
17:17:47  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
17:17:47  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
17:17:47  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
17:17:47  19  );
17:17:47  20  
17:17:47  21  PROCEDURE UPDATE_SUBSCRIPTION(
17:17:47  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
17:17:47  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
17:17:47  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
17:17:47  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
17:17:47  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
17:17:47  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
17:17:47  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:47  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
17:17:47  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
17:17:47  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
17:17:47  34  );
17:17:47  35  
17:17:47  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
17:17:47  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
17:17:47  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:47  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
17:17:47  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:47  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
17:17:47  42  );
17:17:47  43  
17:17:47  44  END PROCS_SUBSCRIPTION_CRU_V15;
17:17:47  45  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_SYSTEM
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE INCREMENT_VERSION;
17:17:47   4  
17:17:47   5  PROCEDURE CHECK_VERSION(
17:17:47   6  	  in_vers    IN NUMBER,
17:17:47   7  	  out_result OUT NUMBER
17:17:47   8  );
17:17:47   9  
17:17:47  10  END PROCS_SYSTEM_V15;
17:17:47  11  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_TAXES
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE ADD_TAX (
17:17:47   4  	in_tax_type_id		 IN NUMBER,
17:17:47   5  	in_calculated_amount	 IN NUMBER,
17:17:47   6  	in_created_by		 IN VARCHAR2,
17:17:47   7  	in_line_item_id 	 IN NUMBER,
17:17:47   8  	in_effective_rate	 IN VARCHAR2,
17:17:47   9  	in_taxable_amount	 IN NUMBER,
17:17:47  10  	in_tax_rule_id		 IN NUMBER,
17:17:47  11  	in_jurisdiction_level_id IN NUMBER,
17:17:47  12  	in_jurisdiction_name	 IN VARCHAR2,
17:17:47  13  	in_jurisdiction_id	 IN VARCHAR2,
17:17:47  14  	in_ext_tax_type 	 IN VARCHAR2,
17:17:47  15  	in_ext_result		 IN VARCHAR2,
17:17:47  16  	in_imposition_type	 IN VARCHAR2,
17:17:47  17  	in_imposition		 IN VARCHAR2
17:17:47  18  );
17:17:47  19  
17:17:47  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
17:17:47  21  	in_country_code IN CHAR,
17:17:47  22  	in_check_date IN DATE,
17:17:47  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V15.FALSE
17:17:47  24  );
17:17:47  25  
17:17:47  26  PROCEDURE GET_TAX_CATEGORY (
17:17:47  27  	in_tax_category_id IN NUMBER,
17:17:47  28  	out_result_set	   OUT SYS_REFCURSOR
17:17:47  29  );
17:17:47  30  
17:17:47  31  END PROCS_TAXES_V15;
17:17:47  32  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_TAXES_CRU
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_TAX (
17:17:47   4  	inout_tax_id		 IN OUT NUMBER,
17:17:47   5  	in_tax_type_id		 IN NUMBER,
17:17:47   6  	in_calculated_amount	 IN NUMBER,
17:17:47   7  	in_created_by		 IN VARCHAR2,
17:17:47   8  	in_line_item_id 	 IN NUMBER,
17:17:47   9  	in_effective_rate	 IN VARCHAR2,
17:17:47  10  	in_taxable_amount	 IN NUMBER,
17:17:47  11  	in_tax_rule_id		 IN NUMBER,
17:17:47  12  	in_jurisdiction_level_id IN NUMBER,
17:17:47  13  	in_jurisdiction_name	 IN VARCHAR2,
17:17:47  14  	in_jurisdiction_id	 IN VARCHAR2,
17:17:47  15  	in_ext_tax_type 	 IN VARCHAR2,
17:17:47  16  	in_ext_result		 IN VARCHAR2,
17:17:47  17  	in_imposition_type	 IN VARCHAR2,
17:17:47  18  	in_imposition		 IN VARCHAR2
17:17:47  19  );
17:17:47  20  
17:17:47  21  END PROCS_TAXES_CRU_V15;
17:17:47  22  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_TEST
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE TEST_CLEAR_ALL;
17:17:47   4  PROCEDURE TEST_CLEAR_PRODUCTS;
17:17:47   5  
17:17:47   6  /********************************************/
17:17:47   7  
17:17:47   8  PROCEDURE TEST_GET_ACCOUNT (
17:17:47   9  	in_group_id	IN NUMBER,
17:17:47  10  	out_result_set	OUT SYS_REFCURSOR
17:17:47  11  );
17:17:47  12  
17:17:47  13  /********************************************/
17:17:47  14  
17:17:47  15  PROCEDURE TEST_GET_SUBSCRIPTION (
17:17:47  16  	in_subscription_id IN NUMBER,
17:17:47  17  	out_result_set	   OUT SYS_REFCURSOR
17:17:47  18  );
17:17:47  19  
17:17:47  20  /*********************************************/
17:17:47  21  
17:17:47  22  PROCEDURE TEST_DELETE_INVOICE (
17:17:47  23  	in_invoice_id IN NUMBER
17:17:47  24  );
17:17:47  25  
17:17:47  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
17:17:47  27  	in_group_id IN NUMBER
17:17:47  28  );
17:17:47  29  
17:17:47  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
17:17:47  31  	in_start_group_id IN NUMBER,
17:17:47  32  	in_end_group_id   IN NUMBER
17:17:47  33  );
17:17:47  34  
17:17:47  35  /**********************************************/
17:17:47  36  
17:17:47  37  FUNCTION TEST_IS_INVOICE_EXISTS(
17:17:47  38  /*
17:17:47  39  1 - exists
17:17:47  40  0 - not exists
17:17:47  41  */
17:17:47  42  	in_invoice_id IN NUMBER
17:17:47  43  ) RETURN NUMBER;
17:17:47  44  
17:17:47  45  PROCEDURE TEST_GET_INVOICE_INFO (
17:17:47  46  	in_invoice_id  IN NUMBER,
17:17:47  47  	out_result_set OUT SYS_REFCURSOR
17:17:47  48  );
17:17:47  49  
17:17:47  50  /******************************************************************************/
17:17:47  51  
17:17:47  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
17:17:47  53  	in_offer_chain_id in number
17:17:47  54  );
17:17:47  55  
17:17:47  56  END PROCS_TEST_V15;
17:17:47  57  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_TRANSACTION
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_TRANSACTION (
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   8  */
17:17:47   9  	in_transaction_id  IN NUMBER,
17:17:47  10  	in_status_id	   IN NUMBER,
17:17:47  11  	in_amount	   IN NUMBER,
17:17:47  12  	in_created_by	   IN VARCHAR2,
17:17:47  13  	in_order_id	   IN VARCHAR2,
17:17:47  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE,
17:17:47  15  	out_transaction_id OUT NUMBER
17:17:47  16  );
17:17:47  17  
17:17:47  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
17:17:47  19  /*
17:17:47  20  Throws exceptions:
17:17:47  21  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  23  */
17:17:47  24  	in_transaction_id	   IN NUMBER,
17:17:47  25  	in_trans_attempt_status    IN NUMBER,
17:17:47  26  	in_external_status_code    IN VARCHAR2,
17:17:47  27  	in_external_status_message IN VARCHAR2,
17:17:47  28  	in_created_by		   IN VARCHAR2,
17:17:47  29  	in_ext_transaction_id	   IN VARCHAR2,
17:17:47  30  	out_transaction_attempt_id OUT NUMBER
17:17:47  31  );
17:17:47  32  
17:17:47  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
17:17:47  34  /*
17:17:47  35  Throws exceptions:
17:17:47  36  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  37  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  38  */
17:17:47  39  	in_transaction_id	 IN NUMBER,
17:17:47  40  	in_updated_by		 IN VARCHAR2,
17:17:47  41  	in_transaction_status_id IN NUMBER
17:17:47  42  );
17:17:47  43  
17:17:47  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
17:17:47  45  /*
17:17:47  46  Throws exceptions:
17:17:47  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  49  */
17:17:47  50  	in_transaction_id	 IN NUMBER,
17:17:47  51  	in_updated_by		 IN VARCHAR2,
17:17:47  52  	in_is_settled		 IN NUMBER
17:17:47  53  );
17:17:47  54  
17:17:47  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
17:17:47  56  /*
17:17:47  57  Throws exceptions:
17:17:47  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  60  */
17:17:47  61  	in_transaction_attempt_id IN NUMBER,
17:17:47  62  	in_updated_by		  IN VARCHAR2
17:17:47  63  );
17:17:47  64  
17:17:47  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
17:17:47  66  /*
17:17:47  67  Throws exceptions:
17:17:47  68  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  69  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  70  */
17:17:47  71  	in_transaction_attempt_id     IN NUMBER,
17:17:47  72  	in_transaction_attempt_status IN NUMBER
17:17:47  73  );
17:17:47  74  
17:17:47  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
17:17:47  76  /*
17:17:47  77  Throws exceptions:
17:17:47  78  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  79  */
17:17:47  80  	in_transaction_id	      IN NUMBER,
17:17:47  81  	in_transaction_attempt_status IN NUMBER,
17:17:47  82  	out_result_set		      OUT SYS_REFCURSOR
17:17:47  83  );
17:17:47  84  
17:17:47  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
17:17:47  86  /*
17:17:47  87  Throws exceptions:
17:17:47  88  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  89  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  90  */
17:17:47  91  	in_transaction_attempt_id IN NUMBER,
17:17:47  92  	in_ext_status_code	  IN VARCHAR2,
17:17:47  93  	in_ext_status_message	  IN VARCHAR2,
17:17:47  94  	in_ext_transaction_id	  IN VARCHAR2
17:17:47  95  );
17:17:47  96  
17:17:47  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
17:17:47  98  /*
17:17:47  99  Throws exceptions:
17:17:47 100  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 102  */
17:17:47 103  	in_transaction_id IN  NUMBER,
17:17:47 104  	out_attempts_num  OUT NUMBER
17:17:47 105  );
17:17:47 106  
17:17:47 107  PROCEDURE GET_TRANSACTION_AMOUNT (
17:17:47 108  /*
17:17:47 109  Throws exceptions:
17:17:47 110  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 111  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 112  */
17:17:47 113  	in_transaction_id      IN  NUMBER,
17:17:47 114  	out_transaction_amount OUT NUMBER
17:17:47 115  );
17:17:47 116  
17:17:47 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
17:17:47 118  /*
17:17:47 119  Throws exceptions:
17:17:47 120  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 122  */
17:17:47 123  	in_charge_id   IN  NUMBER,
17:17:47 124  	out_result_set OUT SYS_REFCURSOR
17:17:47 125  );
17:17:47 126  
17:17:47 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
17:17:47 128  /*
17:17:47 129  Throws exceptions:
17:17:47 130  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 131  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 132  */
17:17:47 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
17:17:47 134  	out_result_set OUT SYS_REFCURSOR
17:17:47 135  );
17:17:47 136  
17:17:47 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
17:17:47 138  /*
17:17:47 139  Throws exceptions:
17:17:47 140  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 141  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 142  */
17:17:47 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
17:17:47 144  	out_result_set OUT SYS_REFCURSOR
17:17:47 145  );
17:17:47 146  
17:17:47 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
17:17:47 148  /*
17:17:47 149  Throws exceptions:
17:17:47 150  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 151  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 152  */
17:17:47 153  	in_transaction_id IN  NUMBER,
17:17:47 154  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 155  );
17:17:47 156  
17:17:47 157  PROCEDURE RESERVE_TRANSACTION_ID (
17:17:47 158  /*
17:17:47 159  Throws exceptions:
17:17:47 160  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 161  */
17:17:47 162  	out_transaction_id OUT NUMBER
17:17:47 163  );
17:17:47 164  
17:17:47 165  PROCEDURE GET_TRANSACTION_BY_ID (
17:17:47 166  /*
17:17:47 167  Throws exceptions:
17:17:47 168  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 169  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 170  */
17:17:47 171  	in_transaction_id IN NUMBER,
17:17:47 172  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 173  );
17:17:47 174  
17:17:47 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:47 176  /*
17:17:47 177  Throws exceptions:
17:17:47 178  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 179  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:47 180  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 181  */
17:17:47 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:47 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:47 185  );
17:17:47 186  
17:17:47 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
17:17:47 188  /*
17:17:47 189  Throws exceptions:
17:17:47 190  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 191  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 192  */
17:17:47 193  	in_invoice_id	IN  NUMBER,
17:17:47 194  	out_result_set OUT SYS_REFCURSOR
17:17:47 195  );
17:17:47 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
17:17:47 197  /*
17:17:47 198  Throws exceptions:
17:17:47 199  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 200  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 201  */
17:17:47 202  	in_transaction_id IN  NUMBER,
17:17:47 203  	out_is_successfull  OUT NUMBER
17:17:47 204  );
17:17:47 205  
17:17:47 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
17:17:47 207  	in_transaction_id IN NUMBER
17:17:47 208  ) RETURN NUMBER;
17:17:47 209  
17:17:47 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
17:17:47 211  	in_transaction_id IN NUMBER
17:17:47 212  ) RETURN NUMBER;
17:17:47 213  
17:17:47 214  -- norlov: #38796
17:17:47 215  PROCEDURE GET_TRANSACTIONS (
17:17:47 216  /*
17:17:47 217  Throws exceptions:
17:17:47 218  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 219  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 220  */
17:17:47 221  	in_group_id	      IN  NUMBER,
17:17:47 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
17:17:47 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
17:17:47 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
17:17:47 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
17:17:47 226  	in_transaction_status IN NUMBER DEFAULT NULL,
17:17:47 227  	out_result_set	      OUT SYS_REFCURSOR
17:17:47 228  );
17:17:47 229  
17:17:47 230  FUNCTION IS_TRANSACTION_COLLECTED (
17:17:47 231  /*
17:17:47 232  Throws:
17:17:47 233  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 234  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 235  Returns:
17:17:47 236  GLOBAL_CONST.TRUE if transaction collected,
17:17:47 237  GLOBAL_CONST.FALSE else
17:17:47 238  */
17:17:47 239  	in_transaction_id IN NUMBER
17:17:47 240  ) RETURN NUMBER;
17:17:47 241  
17:17:47 242  PROCEDURE GET_ATTEMPT_NUMBER (
17:17:47 243  /*
17:17:47 244  Throws exceptions:
17:17:47 245  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 246  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 247  */
17:17:47 248  	in_charge_id   in  number,
17:17:47 249  	out_attempt_count out number
17:17:47 250  );
17:17:47 251  
17:17:47 252  END PROCS_TRANSACTION_V15;
17:17:47 253  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PROCS_TRANSACTION_CRU
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_TRANSACTION (
17:17:47   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
17:17:47   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
17:17:47   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
17:17:47   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
17:17:47   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
17:17:47  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:47  11  );
17:17:47  12  
17:17:47  13  PROCEDURE UPDATE_TRANSACTION (
17:17:47  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
17:17:47  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
17:17:47  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
17:17:47  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
17:17:47  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
17:17:47  20  );
17:17:47  21  
17:17:47  22  PROCEDURE READ_TRANSACTION (
17:17:47  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47  24  	out_result_set	  OUT SYS_REFCURSOR
17:17:47  25  );
17:17:47  26  
17:17:47  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
17:17:47  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
17:17:47  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
17:17:47  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
17:17:47  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:47  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
17:17:47  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:47  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
17:17:47  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
17:17:47  36  );
17:17:47  37  
17:17:47  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:47  39  /*
17:17:47  40  Throws exceptions:
17:17:47  41  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  42  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:47  43  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  44  */
17:17:47  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:47  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:47  48  );
17:17:47  49  
17:17:47  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
17:17:47  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
17:17:47  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
17:17:47  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:47  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:47  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
17:17:47  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
17:17:47  57  );
17:17:47  58  
17:17:47  59  END PROCS_TRANSACTION_CRU_V15;
17:17:47  60  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PUBLIC_PROCS_BILLING
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   8  */
17:17:47   9  	  in_offer_chain_id IN	 NUMBER,
17:17:47  10  	  out_result_set    OUT  SYS_REFCURSOR
17:17:47  11  );
17:17:47  12  
17:17:47  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
17:17:47  14  /*
17:17:47  15  Throws exceptions:
17:17:47  16  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  18  */
17:17:47  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:47  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
17:17:47  21  );
17:17:47  22  
17:17:47  23  PROCEDURE GET_PENDING_INVOICES (
17:17:47  24  /*
17:17:47  25  Throws exceptions:
17:17:47  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  27  */
17:17:47  28  	out_result_set1      OUT SYS_REFCURSOR,
17:17:47  29  	out_result_set2      OUT SYS_REFCURSOR,
17:17:47  30  	out_result_set3      OUT SYS_REFCURSOR,
17:17:47  31  	in_row_number	     IN NUMBER DEFAULT NULL
17:17:47  32  );
17:17:47  33  
17:17:47  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
17:17:47  35  /*
17:17:47  36  Throws exceptions:
17:17:47  37  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  38  */
17:17:47  39  	out_result_set	    OUT SYS_REFCURSOR,
17:17:47  40  	in_row_number	    IN NUMBER DEFAULT NULL
17:17:47  41  );
17:17:47  42  
17:17:47  43  PROCEDURE GET_UNPROCESSED_CHARGES (
17:17:47  44  /*
17:17:47  45  Throws exceptions:
17:17:47  46  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  47  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  48  */
17:17:47  49  	in_invoice_id  IN NUMBER,
17:17:47  50  	out_result_set OUT SYS_REFCURSOR
17:17:47  51  );
17:17:47  52  
17:17:47  53  PROCEDURE GET_PROCESSED_CHARGES (
17:17:47  54  /*
17:17:47  55  Throws exceptions:
17:17:47  56  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  57  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  58  */
17:17:47  59  	in_invoice_id  IN NUMBER,
17:17:47  60  	out_result_set OUT SYS_REFCURSOR
17:17:47  61  );
17:17:47  62  
17:17:47  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
17:17:47  64  /*
17:17:47  65  Throws exceptions:
17:17:47  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  67  */
17:17:47  68  	in_transaction_id	      IN NUMBER,
17:17:47  69  	in_transaction_attempt_status IN NUMBER,
17:17:47  70  	out_result_set		      OUT SYS_REFCURSOR
17:17:47  71  );
17:17:47  72  
17:17:47  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
17:17:47  74  /*
17:17:47  75  Throws exceptions:
17:17:47  76  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  77  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  78  */
17:17:47  79  	in_transaction_attempt_id     IN NUMBER,
17:17:47  80  	in_transaction_attempt_status IN NUMBER
17:17:47  81  );
17:17:47  82  
17:17:47  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
17:17:47  84  /*
17:17:47  85  Throws exceptions:
17:17:47  86  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  87  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  88  */
17:17:47  89  	in_transaction_attempt_id IN NUMBER,
17:17:47  90  	in_updated_by		  IN VARCHAR2
17:17:47  91  );
17:17:47  92  
17:17:47  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
17:17:47  94  /*
17:17:47  95  Throws exceptions:
17:17:47  96  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  97  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  98  */
17:17:47  99  	in_transaction_id	   IN NUMBER,
17:17:47 100  	in_trans_attempt_status    IN NUMBER,
17:17:47 101  	in_external_status_code    IN VARCHAR2,
17:17:47 102  	in_external_status_message IN VARCHAR2,
17:17:47 103  	in_created_by		   IN VARCHAR2,
17:17:47 104  	in_ext_transaction_id	   IN VARCHAR2,
17:17:47 105  	out_transaction_attempt_id OUT NUMBER
17:17:47 106  );
17:17:47 107  
17:17:47 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
17:17:47 109  /*
17:17:47 110  Throws exceptions:
17:17:47 111  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 112  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 113  */
17:17:47 114  	in_transaction_attempt_id IN NUMBER,
17:17:47 115  	in_ext_status_code	  IN VARCHAR2,
17:17:47 116  	in_ext_status_message	  IN VARCHAR2,
17:17:47 117  	in_ext_transaction_id	  IN VARCHAR2
17:17:47 118  );
17:17:47 119  
17:17:47 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
17:17:47 121  /*
17:17:47 122  Throws exceptions:
17:17:47 123  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 124  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 125  */
17:17:47 126  	in_transaction_id	 IN NUMBER,
17:17:47 127  	in_updated_by		 IN VARCHAR2,
17:17:47 128  	in_transaction_status_id IN NUMBER
17:17:47 129  );
17:17:47 130  
17:17:47 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
17:17:47 132  /*
17:17:47 133  Throws exceptions:
17:17:47 134  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 135  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 136  */
17:17:47 137  	in_transaction_id IN  NUMBER,
17:17:47 138  	out_attempts_num  OUT NUMBER
17:17:47 139  );
17:17:47 140  
17:17:47 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
17:17:47 142  /*
17:17:47 143  Throws exceptions:
17:17:47 144  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 145  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 146  */
17:17:47 147  	in_transaction_id IN  NUMBER,
17:17:47 148  	out_is_successfull  OUT NUMBER
17:17:47 149  );
17:17:47 150  
17:17:47 151  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:47 152  /*
17:17:47 153  Throws exceptions:
17:17:47 154  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 155  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 156  */
17:17:47 157  	in_invoice_id		       IN NUMBER,
17:17:47 158  	in_invoice_status_id	       IN NUMBER,
17:17:47 159  	in_updated_by		       IN VARCHAR2
17:17:47 160  );
17:17:47 161  
17:17:47 162  PROCEDURE SUSPEND_SUBSCRIPTION(
17:17:47 163  /*
17:17:47 164  Throws exceptions:
17:17:47 165  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 166  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 167  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 168  */
17:17:47 169  	  in_subs_id	IN NUMBER ,
17:17:47 170  	  in_updated_by IN VARCHAR2
17:17:47 171  );
17:17:47 172  
17:17:47 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:47 174  /*
17:17:47 175  Throws exceptions:
17:17:47 176  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 177  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 178  */
17:17:47 179  	in_credit_card_id IN  NUMBER,
17:17:47 180  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 181  );
17:17:47 182  
17:17:47 183  PROCEDURE GET_TRANSACTION_AMOUNT (
17:17:47 184  /*
17:17:47 185  Throws exceptions:
17:17:47 186  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 188  */
17:17:47 189  	in_transaction_id      IN  NUMBER,
17:17:47 190  	out_transaction_amount OUT NUMBER
17:17:47 191  );
17:17:47 192  
17:17:47 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
17:17:47 194  /*
17:17:47 195  Throws exceptions:
17:17:47 196  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 198  */
17:17:47 199  	in_invoice_id  IN  NUMBER,
17:17:47 200  	out_account_id OUT NUMBER
17:17:47 201  );
17:17:47 202  
17:17:47 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
17:17:47 204  /*
17:17:47 205  Throws exceptions:
17:17:47 206  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 207  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 208  */
17:17:47 209  	in_gift_certificate_id IN NUMBER,
17:17:47 210  	out_result_set	       OUT SYS_REFCURSOR
17:17:47 211  );
17:17:47 212  
17:17:47 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
17:17:47 214  /*
17:17:47 215  Throws exceptions:
17:17:47 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 218  */
17:17:47 219  	in_charge_id	    IN NUMBER,
17:17:47 220  	out_subscription_id OUT NUMBER
17:17:47 221  );
17:17:47 222  
17:17:47 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
17:17:47 224  /*
17:17:47 225  Throws exceptions:
17:17:47 226  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 227  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 228  */
17:17:47 229  	in_gift_certificate_id IN NUMBER,
17:17:47 230  	in_charge_id	       IN NUMBER,
17:17:47 231  	out_result	       OUT NUMBER
17:17:47 232  );
17:17:47 233  
17:17:47 234  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:47 235  /*
17:17:47 236  Throws exceptions:
17:17:47 237  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 238  */
17:17:47 239  	  in_subscription_id IN  NUMBER,
17:17:47 240  	  out_result_set      OUT SYS_REFCURSOR
17:17:47 241  );
17:17:47 242  
17:17:47 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:47 244  /*
17:17:47 245  Throws exceptions:
17:17:47 246  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 247  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 248  */
17:17:47 249  	in_invoice_id IN  NUMBER,
17:17:47 250  	out_amount    OUT NUMBER
17:17:47 251  );
17:17:47 252  
17:17:47 253  PROCEDURE GET_TRANSACTION_BY_ID (
17:17:47 254  /*
17:17:47 255  Throws exceptions:
17:17:47 256  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 257  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 258  */
17:17:47 259  	in_transaction_id IN NUMBER,
17:17:47 260  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 261  );
17:17:47 262  
17:17:47 263  PROCEDURE UPDATE_CHARGE_STATUS (
17:17:47 264  /*
17:17:47 265  Throws exceptions:
17:17:47 266  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 267  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 268  */
17:17:47 269  	in_charge_id	    IN CHARGE.ID%TYPE,
17:17:47 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:47 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
17:17:47 272  );
17:17:47 273  
17:17:47 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:47 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:47 276  	out_result_set OUT SYS_REFCURSOR
17:17:47 277  );
17:17:47 278  
17:17:47 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:47 280  /*
17:17:47 281  Throws exceptions:
17:17:47 282  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 283  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:47 284  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 285  */
17:17:47 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:47 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:47 289  );
17:17:47 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
17:17:47 291  /*
17:17:47 292  Throws exceptions:
17:17:47 293  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 294  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 295  */
17:17:47 296  	in_invoice_id	IN  NUMBER,
17:17:47 297  	out_result_set OUT SYS_REFCURSOR
17:17:47 298  );
17:17:47 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
17:17:47 300  /*
17:17:47 301  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 302  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 303  */
17:17:47 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
17:17:47 305  	in_subscription_id IN NUMBER,
17:17:47 306  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 307  );
17:17:47 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
17:17:47 309  /*
17:17:47 310  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 312  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 313  */
17:17:47 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
17:17:47 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
17:17:47 316  -- norlov: in_refundable	      IN refund enabled
17:17:47 317  	in_invoice_id	     IN NUMBER,
17:17:47 318  	in_updated_by	     IN VARCHAR2,
17:17:47 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:47 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
17:17:47 321  );
17:17:47 322  
17:17:47 323  PROCEDURE FINALIZE_CANCELATION (
17:17:47 324  /*
17:17:47 325  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 326  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 327  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 328  */
17:17:47 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
17:17:47 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
17:17:47 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:47 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:47 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:47 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:47 335  	in_subscription_id    IN NUMBER,
17:17:47 336  	in_cancelation_reason IN VARCHAR2,
17:17:47 337  	in_cancelation_date   IN DATE,
17:17:47 338  	in_note 	      IN VARCHAR2,
17:17:47 339  	in_agent_id	      IN NUMBER,
17:17:47 340  	in_updated_by	      IN VARCHAR2
17:17:47 341  );
17:17:47 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
17:17:47 343  /*
17:17:47 344  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 345  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 346  */
17:17:47 347  	in_subscription_id IN NUMBER,
17:17:47 348  	out_result_set	   OUT SYS_REFCURSOR
17:17:47 349  );
17:17:47 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:47 351  /*
17:17:47 352  Throws exceptions (codes):
17:17:47 353  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 354  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 355  */
17:17:47 356  	in_offer_chain_id IN NUMBER,
17:17:47 357  	in_meta_data_name IN VARCHAR2,
17:17:47 358  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 359  );
17:17:47 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:47 361  /*
17:17:47 362  Throws exceptions (codes):
17:17:47 363  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 364  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 365  */
17:17:47 366  	in_product_offering_id IN NUMBER,
17:17:47 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
17:17:47 368  	out_result_set	       OUT SYS_REFCURSOR
17:17:47 369  );
17:17:47 370  PROCEDURE READ_ACCOUNT (
17:17:47 371  	in_account_id  IN ACCOUNT.ID%TYPE,
17:17:47 372  	out_result_set OUT SYS_REFCURSOR
17:17:47 373  );
17:17:47 374  
17:17:47 375  PROCEDURE GET_COLLECTED_CHARGES (
17:17:47 376  /*
17:17:47 377  Throws exceptions:
17:17:47 378  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 379  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 380  */
17:17:47 381  	in_invoice_id  IN NUMBER,
17:17:47 382  	out_result_set OUT SYS_REFCURSOR
17:17:47 383  );
17:17:47 384  
17:17:47 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
17:17:47 386  /*
17:17:47 387  Throws exceptions:
17:17:47 388  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 389  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 390  */
17:17:47 391  	in_invoice_id IN NUMBER,
17:17:47 392  	out_group_ids OUT SYS_REFCURSOR
17:17:47 393  );
17:17:47 394  
17:17:47 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:47 396  /*
17:17:47 397  Throws exceptions:
17:17:47 398  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 399  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 400  */
17:17:47 401  	in_group_id IN NUMBER,
17:17:47 402  	out_account_id	OUT NUMBER
17:17:47 403  );
17:17:47 404  
17:17:47 405  PROCEDURE LOCK_ACCOUNT (
17:17:47 406  	in_group_id    IN NUMBER,
17:17:47 407  	in_lock_key    IN VARCHAR2,
17:17:47 408  	in_seconds_num IN NUMBER,
17:17:47 409  	in_created_by  IN VARCHAR2,
17:17:47 410  	in_reason      IN VARCHAR2
17:17:47 411  );
17:17:47 412  
17:17:47 413  PROCEDURE RELEASE_LOCK (
17:17:47 414  	in_group_id IN NUMBER,
17:17:47 415  	in_lock_key IN VARCHAR2
17:17:47 416  );
17:17:47 417  
17:17:47 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
17:17:47 419  	in_invoice_id		    IN NUMBER,
17:17:47 420  	out_order_id		    OUT VARCHAR2,
17:17:47 421  	out_external_transaction_id OUT VARCHAR2
17:17:47 422  );
17:17:47 423  
17:17:47 424  PROCEDURE GET_PAYPAL_BY_ID (
17:17:47 425  	in_paypal_id   IN  NUMBER,
17:17:47 426  	out_result_set OUT SYS_REFCURSOR
17:17:47 427  );
17:17:47 428  
17:17:47 429  PROCEDURE GET_ATTEMPT_NUMBER (
17:17:47 430  /*
17:17:47 431  Throws exceptions:
17:17:47 432  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 433  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 434  */
17:17:47 435  	in_charge_id   in  number,
17:17:47 436  	out_attempt_count out number
17:17:47 437  );
17:17:47 438  
17:17:47 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:47 440  	in_offer_chain_id	 IN NUMBER,
17:17:47 441  	in_action_name		 IN VARCHAR2,
17:17:47 442  	out_notification_type_id out number
17:17:47 443  );
17:17:47 444  
17:17:47 445  END PUBLIC_PROCS_BILLING_V15;
17:17:47 446  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.04
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE LOCK_ACCOUNT (
17:17:47   4  	in_group_id    IN NUMBER,
17:17:47   5  	in_lock_key    IN VARCHAR2,
17:17:47   6  	in_seconds_num IN NUMBER,
17:17:47   7  	in_created_by  IN VARCHAR2,
17:17:47   8  	in_reason      IN VARCHAR2
17:17:47   9  );
17:17:47  10  
17:17:47  11  PROCEDURE RELEASE_LOCK (
17:17:47  12  	in_group_id IN NUMBER,
17:17:47  13  	in_lock_key IN VARCHAR2
17:17:47  14  );
17:17:47  15  
17:17:47  16  END PUBLIC_PROCS_NOTIFICATION_V15;
17:17:47  17  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
17:17:47 SQL> --------------------------------------------------------------------------------
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
17:17:47   4  	out_result_set OUT SYS_REFCURSOR
17:17:47   5  );
17:17:47   6  
17:17:47   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
17:17:47   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:47   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
17:17:47  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:47  11  );
17:17:47  12  
17:17:47  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:47  14  /*
17:17:47  15  Throws exceptions:
17:17:47  16  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  18  */
17:17:47  19  	  in_offer_chain_id IN	 NUMBER,
17:17:47  20  	  out_result_set    OUT  SYS_REFCURSOR
17:17:47  21  );
17:17:47  22  
17:17:47  23  PROCEDURE GET_UNREDEEMED_GCS (
17:17:47  24  	out_result_set		OUT SYS_REFCURSOR,
17:17:47  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:47  26  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:47  27  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:47  28  );
17:17:47  29  
17:17:47  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
17:17:47  31  /*
17:17:47  32  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:47  33  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  34  */
17:17:47  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
17:17:47  36  	out_result_set	     OUT SYS_REFCURSOR
17:17:47  37  );
17:17:47  38  
17:17:47  39  PROCEDURE GET_ALL_OCH_META_DATA (
17:17:47  40  	in_offer_chain_id IN NUMBER,
17:17:47  41  	out_result_set	  OUT SYS_REFCURSOR
17:17:47  42  );
17:17:47  43  
17:17:47  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:47  45  /*
17:17:47  46  Throws exceptions (codes):
17:17:47  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  49  */
17:17:47  50  	in_offer_chain_id IN NUMBER,
17:17:47  51  	in_meta_data_name IN VARCHAR2,
17:17:47  52  	out_result_set	  OUT SYS_REFCURSOR
17:17:47  53  );
17:17:47  54  
17:17:47  55  PROCEDURE GET_ENDING_LICENSES (
17:17:47  56  /*
17:17:47  57  Throws exceptions:
17:17:47  58  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  59  */
17:17:47  60  	in_hours_number IN NUMBER,
17:17:47  61  	out_result_set OUT SYS_REFCURSOR
17:17:47  62  );
17:17:47  63  
17:17:47  64  PROCEDURE GET_ENDING_LICENSES_CC (
17:17:47  65  /*
17:17:47  66  Throws exceptions:
17:17:47  67  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  68  */
17:17:47  69  	in_hours_number IN NUMBER,
17:17:47  70  	out_result_set OUT SYS_REFCURSOR,
17:17:47  71  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:47  72  );
17:17:47  73  
17:17:47  74  /************************************************/
17:17:47  75  
17:17:47  76  PROCEDURE GET_RECURRING_OFFER (
17:17:47  77  /*
17:17:47  78  Throws exceptions:
17:17:47  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  80  */
17:17:47  81  	in_license_id  IN NUMBER,
17:17:47  82  	out_result_set OUT SYS_REFCURSOR
17:17:47  83  );
17:17:47  84  
17:17:47  85  /*************************************************/
17:17:47  86  
17:17:47  87  PROCEDURE GET_NEXT_OFFER (
17:17:47  88  /*
17:17:47  89  Throws exceptions:
17:17:47  90  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47  91  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47  92  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  93  */
17:17:47  94  	in_license_id  IN NUMBER,
17:17:47  95  	out_result_set OUT SYS_REFCURSOR
17:17:47  96  );
17:17:47  97  
17:17:47  98  /**************************************************/
17:17:47  99  
17:17:47 100  PROCEDURE UPDATE_LICENSE_STATUS(
17:17:47 101  /*
17:17:47 102  Throws exceptions:
17:17:47 103  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 104  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 105  */
17:17:47 106  	  in_license_id     IN NUMBER,
17:17:47 107  	  in_license_status IN NUMBER,
17:17:47 108  	  in_updated_by     IN VARCHAR2
17:17:47 109  );
17:17:47 110  
17:17:47 111  /***************************************************/
17:17:47 112  
17:17:47 113  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:47 114  /*
17:17:47 115  Throws exceptions:
17:17:47 116  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 117  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 118  */
17:17:47 119  	in_invoice_id		       IN NUMBER,
17:17:47 120  	in_invoice_status_id	       IN NUMBER,
17:17:47 121  	in_updated_by		       IN VARCHAR2
17:17:47 122  );
17:17:47 123  
17:17:47 124  /***************************************************/
17:17:47 125  
17:17:47 126  PROCEDURE CREATE_LICENSE(
17:17:47 127  /*
17:17:47 128  Throws exceptions:
17:17:47 129  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 130  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 131  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:47 132  */
17:17:47 133  	in_status_id		    IN NUMBER,
17:17:47 134  	in_needs_entitlements	    IN NUMBER,
17:17:47 135  	in_start_date		    IN DATE,
17:17:47 136  	in_end_date		    IN DATE,
17:17:47 137  	in_offer_id		    IN NUMBER,
17:17:47 138  	in_subscription_id	    IN NUMBER,
17:17:47 139  	in_invoice_id		    IN NUMBER,
17:17:47 140  	in_created_by		    IN VARCHAR2,
17:17:47 141  	in_is_extension 	    IN NUMBER,
17:17:47 142  	in_current_offer_index	    IN NUMBER,
17:17:47 143  	in_current_offer_recurr_num IN NUMBER,
17:17:47 144  	out_license_id		    OUT NUMBER
17:17:47 145  );
17:17:47 146  
17:17:47 147  /**************************************************/
17:17:47 148  
17:17:47 149  PROCEDURE CREATE_INVOICE(
17:17:47 150  /*
17:17:47 151  Throws exceptions:
17:17:47 152  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 153  */
17:17:47 154  	  in_invoice_status IN NUMBER,
17:17:47 155  	  in_created_by     IN VARCHAR2,
17:17:47 156  	  in_tax_exempt_id  IN VARCHAR2,
17:17:47 157  	  out_invoice_id    OUT NUMBER
17:17:47 158  );
17:17:47 159  
17:17:47 160  /*****************************************************/
17:17:47 161  
17:17:47 162  PROCEDURE CREATE_CHARGE(
17:17:47 163  /*
17:17:47 164  Throws exceptions:
17:17:47 165  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 166  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 167  */
17:17:47 168  	in_invoice_id	      IN NUMBER,
17:17:47 169  	in_transaction_id     IN NUMBER,
17:17:47 170  	in_instrument_type_id IN NUMBER,
17:17:47 171  	in_instrument_id      IN NUMBER,
17:17:47 172  	in_charge_amount      IN NUMBER,
17:17:47 173  	in_created_by	      IN VARCHAR2,
17:17:47 174  	in_charge_status_id   IN NUMBER,
17:17:47 175  	out_charge_id	      OUT NUMBER
17:17:47 176  );
17:17:47 177  
17:17:47 178  /*****************************************************/
17:17:47 179  
17:17:47 180  PROCEDURE HAS_FUTURE_LICENSE (
17:17:47 181  /*
17:17:47 182  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 183  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 184  --
17:17:47 185  RETURNS:
17:17:47 186  1 - if has,
17:17:47 187  0 - else
17:17:47 188  */
17:17:47 189  	in_license_id IN NUMBER,
17:17:47 190  	out_result	   OUT NUMBER
17:17:47 191  );
17:17:47 192  
17:17:47 193  /*****************************************************/
17:17:47 194  
17:17:47 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
17:17:47 196  /*
17:17:47 197  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 198  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 199  */
17:17:47 200  	in_license_id IN NUMBER,
17:17:47 201  	out_group_id  OUT NUMBER
17:17:47 202  );
17:17:47 203  
17:17:47 204  /*****************************************************/
17:17:47 205  
17:17:47 206  PROCEDURE GET_OFFER_PRODUCTS (
17:17:47 207  /*
17:17:47 208  Throws exceptions (codes):
17:17:47 209  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 210  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 211  */
17:17:47 212  	in_offer_id    IN NUMBER,
17:17:47 213  	out_result_set OUT SYS_REFCURSOR
17:17:47 214  );
17:17:47 215  
17:17:47 216  /*******************************************************/
17:17:47 217  
17:17:47 218  PROCEDURE CREATE_TRANSACTION (
17:17:47 219  /*
17:17:47 220  Throws exceptions:
17:17:47 221  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 222  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 223  */
17:17:47 224  	in_transaction_id  IN NUMBER,
17:17:47 225  	in_status_id	   IN NUMBER,
17:17:47 226  	in_amount	   IN NUMBER,
17:17:47 227  	in_created_by	   IN VARCHAR2,
17:17:47 228  	in_order_id	   IN VARCHAR2,
17:17:47 229  	out_transaction_id OUT NUMBER
17:17:47 230  );
17:17:47 231  
17:17:47 232  /*********************************************************/
17:17:47 233  
17:17:47 234  PROCEDURE ADD_LINE_ITEMS(
17:17:47 235  /*
17:17:47 236  Throws exceptions:
17:17:47 237  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 239  */
17:17:47 240  	in_invoice_id IN NUMBER,
17:17:47 241  	in_offer_id   IN NUMBER,
17:17:47 242  	in_created_by IN VARCHAR2
17:17:47 243  );
17:17:47 244  
17:17:47 245  /**********************************************************/
17:17:47 246  
17:17:47 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:47 248  /*
17:17:47 249  Throws exceptions:
17:17:47 250  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 251  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 252  */
17:17:47 253  	in_invoice_id IN  NUMBER,
17:17:47 254  	out_amount    OUT NUMBER
17:17:47 255  );
17:17:47 256  
17:17:47 257  /*********************************************************/
17:17:47 258  
17:17:47 259  PROCEDURE RESERVE_TRANSACTION_ID (
17:17:47 260  /*
17:17:47 261  Throws exceptions:
17:17:47 262  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 263  */
17:17:47 264  	out_transaction_id OUT NUMBER
17:17:47 265  );
17:17:47 266  
17:17:47 267  /**********************************************************/
17:17:47 268  
17:17:47 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
17:17:47 270  	in_offer_chain_id	     IN NUMBER,
17:17:47 271  	in_offer_chain_current_index IN NUMBER,
17:17:47 272  	out_next_offer_index	     OUT NUMBER
17:17:47 273  );
17:17:47 274  
17:17:47 275  /***********************************************************/
17:17:47 276  
17:17:47 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
17:17:47 278  	in_license_id		     IN NUMBER,
17:17:47 279  	in_offer_chain_current_index IN NUMBER,
17:17:47 280  	out_next_offer_index	     OUT NUMBER
17:17:47 281  );
17:17:47 282  
17:17:47 283  /**********************************************************/
17:17:47 284  
17:17:47 285  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:47 286  /*
17:17:47 287  Throws exceptions:
17:17:47 288  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 289  */
17:17:47 290  	  in_subscription_id IN  NUMBER,
17:17:47 291  	  out_result_set      OUT SYS_REFCURSOR
17:17:47 292  );
17:17:47 293  
17:17:47 294  /***********************************************************/
17:17:47 295  
17:17:47 296  PROCEDURE CLOSE_SUBSCRIPTION (
17:17:47 297  	in_subscription_id IN NUMBER,
17:17:47 298  	in_updated_by	   IN VARCHAR2
17:17:47 299  );
17:17:47 300  
17:17:47 301  /***********************************************************/
17:17:47 302  
17:17:47 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
17:17:47 304  	out_result_set OUT SYS_REFCURSOR
17:17:47 305  );
17:17:47 306  
17:17:47 307  /***********************************************************/
17:17:47 308  
17:17:47 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
17:17:47 310  	in_license_id	      IN NUMBER,
17:17:47 311  	in_needs_entitlements IN NUMBER,
17:17:47 312  	in_updated_by	      IN VARCHAR2
17:17:47 313  );
17:17:47 314  /***********************************************************/
17:17:47 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
17:17:47 316  	in_offer_id    IN NUMBER,
17:17:47 317  	out_result_set OUT SYS_REFCURSOR
17:17:47 318  );
17:17:47 319  /***********************************************************/
17:17:47 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:47 321  	in_product_offering_id IN NUMBER,
17:17:47 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
17:17:47 323  	out_result_set	       OUT SYS_REFCURSOR
17:17:47 324  );
17:17:47 325  
17:17:47 326  PROCEDURE LOCK_ACCOUNT (
17:17:47 327  	in_group_id    IN NUMBER,
17:17:47 328  	in_lock_key    IN VARCHAR2,
17:17:47 329  	in_seconds_num IN NUMBER,
17:17:47 330  	in_created_by  IN VARCHAR2,
17:17:47 331  	in_reason      IN VARCHAR2
17:17:47 332  );
17:17:47 333  
17:17:47 334  PROCEDURE RELEASE_LOCK (
17:17:47 335  	in_group_id IN NUMBER,
17:17:47 336  	in_lock_key IN VARCHAR2
17:17:47 337  );
17:17:47 338  
17:17:47 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:47 340  	in_invoice_id  IN NUMBER,
17:17:47 341  	out_result_set OUT SYS_REFCURSOR
17:17:47 342  );
17:17:47 343  
17:17:47 344  PROCEDURE ADD_TAX (
17:17:47 345  	in_tax_type_id		 IN NUMBER,
17:17:47 346  	in_calculated_amount	 IN NUMBER,
17:17:47 347  	in_created_by		 IN VARCHAR2,
17:17:47 348  	in_line_item_id 	 IN NUMBER,
17:17:47 349  	in_effective_rate	 IN VARCHAR2,
17:17:47 350  	in_taxable_amount	 IN NUMBER,
17:17:47 351  	in_tax_rule_id		 IN NUMBER,
17:17:47 352  	in_jurisdiction_level_id IN NUMBER,
17:17:47 353  	in_jurisdiction_name	 IN VARCHAR2,
17:17:47 354  	in_jurisdiction_id	 IN VARCHAR2,
17:17:47 355  	in_ext_tax_type 	 IN VARCHAR2,
17:17:47 356  	in_ext_result		 IN VARCHAR2,
17:17:47 357  	in_imposition_type	 IN VARCHAR2,
17:17:47 358  	in_imposition		 IN VARCHAR2
17:17:47 359  );
17:17:47 360  
17:17:47 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:47 362  	in_credit_card_id IN  NUMBER,
17:17:47 363  	out_result_set	  OUT SYS_REFCURSOR
17:17:47 364  );
17:17:47 365  
17:17:47 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
17:17:47 367  	in_line_item_id IN NUMBER,
17:17:47 368  	out_result_set	OUT SYS_REFCURSOR
17:17:47 369  );
17:17:47 370  
17:17:47 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:47 372  /*
17:17:47 373  Throws exceptions:
17:17:47 374  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 375  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 376  */
17:17:47 377  	in_group_id IN NUMBER,
17:17:47 378  	out_account_id	OUT NUMBER
17:17:47 379  );
17:17:47 380  
17:17:47 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
17:17:47 382  /*
17:17:47 383  Throws exceptions:
17:17:47 384  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 385  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 386  */
17:17:47 387  	in_line_item_id IN  NUMBER,
17:17:47 388  	out_result_set	OUT SYS_REFCURSOR
17:17:47 389  );
17:17:47 390  
17:17:47 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
17:17:47 392  	in_line_item_id    IN NUMBER,
17:17:47 393  	in_amount	   IN NUMBER,
17:17:47 394  	in_discount_amount IN NUMBER,
17:17:47 395  	in_taxes_amount    IN NUMBER
17:17:47 396  );
17:17:47 397  
17:17:47 398  PROCEDURE GET_PAYPAL_BY_ID (
17:17:47 399  	in_paypal_id   IN  NUMBER,
17:17:47 400  	out_result_set OUT SYS_REFCURSOR
17:17:47 401  );
17:17:47 402  
17:17:47 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:47 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:47 405  	out_result_set OUT SYS_REFCURSOR
17:17:47 406  );
17:17:47 407  
17:17:47 408  PROCEDURE GET_LICENSE_BY_ID (
17:17:47 409  	in_license_id  IN NUMBER,
17:17:47 410  	out_result_set OUT SYS_REFCURSOR
17:17:47 411  );
17:17:47 412  
17:17:47 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:47 414  	in_offer_chain_id	 IN NUMBER,
17:17:47 415  	in_action_name		 IN VARCHAR2,
17:17:47 416  	out_notification_type_id OUT NUMBER
17:17:47 417  );
17:17:47 418  
17:17:47 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
17:17:47 420  	in_offer_chain_id IN NUMBER,
17:17:47 421  	in_meta_data_name IN VARCHAR2,
17:17:47 422  	out_value	  OUT VARCHAR2
17:17:47 423  );
17:17:47 424  
17:17:47 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
17:17:47 426  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 427  );
17:17:47 428  
17:17:47 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
17:17:47 430  	out_result_set	    OUT SYS_REFCURSOR
17:17:47 431  );
17:17:47 432  
17:17:47 433  END PUBLIC_PROCS_RENEWAL_V15;
17:17:47 434  .
17:17:47 SQL> /

Package created.

Elapsed: 00:00:00.05
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_ACCOUNT (
17:17:47   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
17:17:47   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
17:17:47   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
17:17:47   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
17:17:47   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
17:17:47  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:47  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
17:17:47  12  ) AS
17:17:47  13  -- VARIABLES
17:17:47  14  var_new_account_id ACCOUNT.ID%TYPE;
17:17:47  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  16  var_date DATE := SYSDATE;
17:17:47  17  BEGIN
17:17:47  18  	SELECT
17:17:47  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
17:17:47  20  	FROM DUAL;
17:17:47  21  	INSERT INTO ACCOUNT (
17:17:47  22  	  ID,
17:17:47  23  	  ACCOUNT_STATUS_ID,
17:17:47  24  	  SUSPEND_DATE,
17:17:47  25  	  GROUP_ID,
17:17:47  26  	  CREATE_DATE,
17:17:47  27  	  CREATED_BY,
17:17:47  28  	  UPDATE_DATE,
17:17:47  29  	  UPDATED_BY,
17:17:47  30  	  SYSTEM_CATEGORY_ID,
17:17:47  31  	  INSTRUMENT_TYPE_ID,
17:17:47  32  	  INSTRUMENT_ID,
17:17:47  33  	  TAX_EXEMPT_ID
17:17:47  34  	) VALUES (
17:17:47  35  	  var_new_account_id,
17:17:47  36  	  in_account_status_id,
17:17:47  37  	  in_suspend_date,
17:17:47  38  	  in_group_id,
17:17:47  39  	  var_date,
17:17:47  40  	  in_created_by,
17:17:47  41  	  var_date,
17:17:47  42  	  in_created_by,
17:17:47  43  	  in_system_category_id,
17:17:47  44  	  in_instrument_type_id,
17:17:47  45  	  in_instrument_id,
17:17:47  46  	  NULL
17:17:47  47  	);
17:17:47  48  
17:17:47  49  	out_account_id := var_new_account_id;
17:17:47  50  END CREATE_ACCOUNT;
17:17:47  51  
17:17:47  52  /*************************************************************/
17:17:47  53  
17:17:47  54  PROCEDURE UPDATE_ACCOUNT (
17:17:47  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
17:17:47  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
17:17:47  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
17:17:47  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:47  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
17:17:47  62  ) AS
17:17:47  63  BEGIN
17:17:47  64  
17:17:47  65  	-- CREATE HISTORY
17:17:47  66  	PROCS_HISTORY_V15.CREATE_ACCOUNT_HISTORY(
17:17:47  67  	  in_account_id 	       => in_account_id,
17:17:47  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  69  	);
17:17:47  70  
17:17:47  71  	UPDATE ACCOUNT SET
17:17:47  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
17:17:47  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
17:17:47  74  	  UPDATED_BY	     = in_updated_by,
17:17:47  75  	  UPDATE_DATE	     = SYSDATE,
17:17:47  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
17:17:47  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
17:17:47  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
17:17:47  79  	WHERE
17:17:47  80  	  ACCOUNT.ID = in_account_id;
17:17:47  81  
17:17:47  82  END UPDATE_ACCOUNT;
17:17:47  83  
17:17:47  84  /*************************************************************/
17:17:47  85  
17:17:47  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
17:17:47  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
17:17:47  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
17:17:47  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
17:17:47  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
17:17:47  91  ) AS
17:17:47  92  BEGIN
17:17:47  93  
17:17:47  94  	-- CREATE HISTORY
17:17:47  95  	PROCS_HISTORY_V15.CREATE_ACCOUNT_HISTORY(
17:17:47  96  	  in_account_id 	       => in_account_id,
17:17:47  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  98  	);
17:17:47  99  
17:17:47 100  	UPDATE ACCOUNT SET
17:17:47 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
17:17:47 102  	  INSTRUMENT_ID      = in_instrument_id
17:17:47 103  	WHERE
17:17:47 104  	  ACCOUNT.ID = in_account_id;
17:17:47 105  
17:17:47 106  END;
17:17:47 107  
17:17:47 108  /*************************************************************/
17:17:47 109  
17:17:47 110  PROCEDURE READ_ACCOUNT (
17:17:47 111  	in_account_id  IN ACCOUNT.ID%TYPE,
17:17:47 112  	out_result_set OUT SYS_REFCURSOR
17:17:47 113  ) AS
17:17:47 114  BEGIN
17:17:47 115  	OPEN out_result_set FOR
17:17:47 116  	SELECT
17:17:47 117  	  ACCOUNT_STATUS_ID,
17:17:47 118  	  SUSPEND_DATE,
17:17:47 119  	  GROUP_ID
17:17:47 120  	FROM
17:17:47 121  	  ACCOUNT
17:17:47 122  	WHERE
17:17:47 123  	  ID = in_account_id;
17:17:47 124  END READ_ACCOUNT;
17:17:47 125  
17:17:47 126  /*************************************************************/
17:17:47 127  
17:17:47 128  PROCEDURE CREATE_ACCOUNT_NOTE (
17:17:47 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
17:17:47 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
17:17:47 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
17:17:47 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
17:17:47 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
17:17:47 134  ) AS
17:17:47 135  BEGIN
17:17:47 136  	IF inout_account_note_id IS NULL THEN
17:17:47 137  	  SELECT
17:17:47 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
17:17:47 139  	  FROM DUAL;
17:17:47 140  	END IF;
17:17:47 141  	INSERT INTO ACCOUNT_NOTE(
17:17:47 142  	  ID,
17:17:47 143  	  AGENT_ID,
17:17:47 144  	  ACCOUNT_ID,
17:17:47 145  	  NOTE,
17:17:47 146  	  CREATE_DATE,
17:17:47 147  	  CREATED_BY
17:17:47 148  	) VALUES (
17:17:47 149  	  inout_account_note_id,
17:17:47 150  	  in_agent_id,
17:17:47 151  	  in_account_id,
17:17:47 152  	  in_note,
17:17:47 153  	  SYSDATE,
17:17:47 154  	  in_created_by
17:17:47 155  	);
17:17:47 156  END CREATE_ACCOUNT_NOTE;
17:17:47 157  
17:17:47 158  END PROCS_ACCOUNT_CRU_V15;
17:17:47 159  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_ADDRESS(
17:17:47   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
17:17:47   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:47   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:47   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:47   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:47  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:47  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
17:17:47  13  ) AS
17:17:47  14  -- VARIABLES
17:17:47  15  var_address_id ADDRESS.ID%TYPE;
17:17:47  16  var_date DATE := SYSDATE;
17:17:47  17  BEGIN
17:17:47  18  	IF in_address_id IS NULL THEN
17:17:47  19  	  SELECT
17:17:47  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
17:17:47  21  	  FROM DUAL;
17:17:47  22  	ELSE
17:17:47  23  	  var_address_id := in_address_id;
17:17:47  24  	END IF;
17:17:47  25  	INSERT INTO
17:17:47  26  	  ADDRESS (
17:17:47  27  	    ID,
17:17:47  28  	    ADDRESS1,
17:17:47  29  	    ADDRESS2,
17:17:47  30  	    CITY,
17:17:47  31  	    STATE,
17:17:47  32  	    POSTAL_CODE,
17:17:47  33  	    COUNTRY,
17:17:47  34  	    CREATE_DATE,
17:17:47  35  	    CREATED_BY,
17:17:47  36  	    UPDATE_DATE,
17:17:47  37  	    UPDATED_BY
17:17:47  38  	  ) VALUES (
17:17:47  39  	    var_address_id,
17:17:47  40  	    in_address1,
17:17:47  41  	    in_address2,
17:17:47  42  	    in_city,
17:17:47  43  	    in_state,
17:17:47  44  	    in_postal_code,
17:17:47  45  	    in_country,
17:17:47  46  	    var_date,
17:17:47  47  	    in_created_by,
17:17:47  48  	    var_date,
17:17:47  49  	    in_created_by
17:17:47  50  	  );
17:17:47  51  
17:17:47  52  	out_address_id := var_address_id;
17:17:47  53  END CREATE_ADDRESS;
17:17:47  54  
17:17:47  55  PROCEDURE UPDATE_ADDRESS(
17:17:47  56  	in_address_id	      IN ADDRESS.ID%TYPE,
17:17:47  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:47  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:47  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:47  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:47  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:47  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
17:17:47  64  ) AS
17:17:47  65  BEGIN
17:17:47  66  
17:17:47  67  	-- Create history
17:17:47  68  	PROCS_HISTORY_V15.CREATE_ADDRESS_HISTORY(
17:17:47  69  	  in_address_id 		=> in_address_id,
17:17:47  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  71  	);
17:17:47  72  
17:17:47  73  	UPDATE
17:17:47  74  	  ADDRESS
17:17:47  75  	SET
17:17:47  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
17:17:47  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
17:17:47  78  	  CITY = NVL(in_city, CITY),
17:17:47  79  	  STATE = NVL(in_state, STATE),
17:17:47  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
17:17:47  81  	  COUNTRY = NVL(in_country, COUNTRY),
17:17:47  82  	  UPDATE_DATE = SYSDATE,
17:17:47  83  	  UPDATED_BY = in_updated_by
17:17:47  84  	WHERE
17:17:47  85  	  ID = in_address_id;
17:17:47  86  
17:17:47  87  END UPDATE_ADDRESS;
17:17:47  88  
17:17:47  89  END PROCS_ADDRESS_CRU_V15;
17:17:47  90  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_AMAZON_SUB(
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   7  */
17:17:47   8  	  out_id	      OUT NUMBER,
17:17:47   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
17:17:47  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
17:17:47  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
17:17:47  12  ) AS
17:17:47  13  -- VARIABLES
17:17:47  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
17:17:47  15  var_current_date	DATE;
17:17:47  16  var_count 	NUMBER;
17:17:47  17  AMAZON_SUB_USED	EXCEPTION;
17:17:47  18  BEGIN
17:17:47  19  
17:17:47  20  	SELECT COUNT(1) INTO var_count
17:17:47  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
17:17:47  22  	WHERE
17:17:47  23  	  am.AMAZON_ID = in_amazon_id
17:17:47  24  	  and am.subscription_id = s.id
17:17:47  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
17:17:47  26  
17:17:47  27  	if var_count > 0 then
17:17:47  28  	  raise AMAZON_SUB_USED;
17:17:47  29  	end if;
17:17:47  30  
17:17:47  31  	SELECT
17:17:47  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
17:17:47  33  	INTO
17:17:47  34  	  out_id
17:17:47  35  	FROM
17:17:47  36  	  dual
17:17:47  37  	;
17:17:47  38  
17:17:47  39  	SELECT
17:17:47  40  	  sysdate
17:17:47  41  	INTO
17:17:47  42  	  var_current_date
17:17:47  43  	FROM
17:17:47  44  	  dual
17:17:47  45  	;
17:17:47  46  
17:17:47  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
17:17:47  48  	(
17:17:47  49  	  id,
17:17:47  50  	  subscription_id,
17:17:47  51  	  amazon_id,
17:17:47  52  	  create_date,
17:17:47  53  	  created_by,
17:17:47  54  	  update_date,
17:17:47  55  	  updated_by
17:17:47  56  	)
17:17:47  57  	VALUES
17:17:47  58  	(
17:17:47  59  	  out_id,
17:17:47  60  	  in_subscription_id,
17:17:47  61  	  in_amazon_id,
17:17:47  62  	  var_current_date,
17:17:47  63  	  in_created_by,
17:17:47  64  	  var_current_date,
17:17:47  65  	  in_created_by
17:17:47  66  	);
17:17:47  67  
17:17:47  68  EXCEPTION
17:17:47  69  WHEN AMAZON_SUB_USED THEN
17:17:47  70  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
17:17:47  72  WHEN DUP_VAL_ON_INDEX THEN
17:17:47  73  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
17:17:47  75  WHEN OTHERS THEN
17:17:47  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47  78  END CREATE_AMAZON_SUB;
17:17:47  79  
17:17:47  80  END PROCS_AMAZON_CRU_V15;
17:17:47  81  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_CHARGE(
17:17:47   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
17:17:47   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
17:17:47   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:47   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
17:17:47   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
17:17:47  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
17:17:47  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:47  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
17:17:47  13  ) AS
17:17:47  14  -- VARIABLES
17:17:47  15  var_charge_id CHARGE.ID%TYPE;
17:17:47  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  17  var_date DATE := SYSDATE;
17:17:47  18  BEGIN
17:17:47  19  	IF in_charge_id IS NULL THEN
17:17:47  20  	  SELECT
17:17:47  21  	    CRG_ID_SEQ.nextVal into var_charge_id
17:17:47  22  	  FROM DUAL;
17:17:47  23  	ELSE
17:17:47  24  	  var_charge_id := in_charge_id;
17:17:47  25  	END IF;
17:17:47  26  	INSERT INTO
17:17:47  27  	  CHARGE (
17:17:47  28  	    ID,
17:17:47  29  	    INVOICE_ID,
17:17:47  30  	    TRANSACTION_ID,
17:17:47  31  	    INSTRUMENT_TYPE_ID,
17:17:47  32  	    INSTRUMENT_ID,
17:17:47  33  	    CHARGE_AMOUNT,
17:17:47  34  	    CHARGE_STATUS_ID,
17:17:47  35  	    CREATE_DATE,
17:17:47  36  	    CREATED_BY,
17:17:47  37  	    UPDATE_DATE,
17:17:47  38  	    UPDATED_BY
17:17:47  39  	  ) VALUES (
17:17:47  40  	    var_charge_id,
17:17:47  41  	    in_invoice_id,
17:17:47  42  	    in_transaction_id,
17:17:47  43  	    in_instrument_type_id,
17:17:47  44  	    in_instrument_id,
17:17:47  45  	    in_charge_amount,
17:17:47  46  	    in_charge_status_id,
17:17:47  47  	    var_date,
17:17:47  48  	    in_created_by,
17:17:47  49  	    var_date,
17:17:47  50  	    in_created_by
17:17:47  51  	  );
17:17:47  52  
17:17:47  53  	out_charge_id := var_charge_id;
17:17:47  54  END CREATE_CHARGE;
17:17:47  55  
17:17:47  56  PROCEDURE UPDATE_CHARGE(
17:17:47  57  	in_charge_id	      IN CHARGE.ID%TYPE,
17:17:47  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:47  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
17:17:47  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
17:17:47  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
17:17:47  63  ) AS
17:17:47  64  BEGIN
17:17:47  65  
17:17:47  66  	-- Create history
17:17:47  67  	PROCS_HISTORY_V15.CREATE_CHARGE_HISTORY(
17:17:47  68  	  in_charge_id		       => in_charge_id,
17:17:47  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  70  	);
17:17:47  71  
17:17:47  72  	UPDATE
17:17:47  73  	  CHARGE
17:17:47  74  	SET
17:17:47  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
17:17:47  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
17:17:47  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
17:17:47  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
17:17:47  79  	  UPDATE_DATE	     = SYSDATE,
17:17:47  80  	  UPDATED_BY	     = in_updated_by
17:17:47  81  	WHERE
17:17:47  82  	  ID = in_charge_id;
17:17:47  83  
17:17:47  84  END UPDATE_CHARGE;
17:17:47  85  
17:17:47  86  END PROCS_CHARGE_CRU_V15;
17:17:47  87  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_CREDIT_CARD(
17:17:47   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
17:17:47   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
17:17:47   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
17:17:47   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
17:17:47   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
17:17:47  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
17:17:47  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
17:17:47  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
17:17:47  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
17:17:47  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
17:17:47  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:47  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
17:17:47  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
17:17:47  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
17:17:47  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
17:17:47  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
17:17:47  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
17:17:47  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
17:17:47  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
17:17:47  24  ) AS
17:17:47  25  -- VARIABLES
17:17:47  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
17:17:47  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  28  var_date DATE := SYSDATE;
17:17:47  29  BEGIN
17:17:47  30  	IF in_credit_card_id IS NULL THEN
17:17:47  31  	  SELECT
17:17:47  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
17:17:47  33  	  FROM DUAL;
17:17:47  34  	ELSE
17:17:47  35  	  var_credit_card_id := in_credit_card_id;
17:17:47  36  	END IF;
17:17:47  37  	INSERT INTO CREDIT_CARD(
17:17:47  38  	    ID,
17:17:47  39  	    ACCOUNT_ID,
17:17:47  40  	    INSTRUMENT_NAME,
17:17:47  41  	    PRIVATE_CARD_HOLDER_NAME,
17:17:47  42  	    PRIVATE_STREET_ADDRESS,
17:17:47  43  	    PRIVATE_STREET_ADDRESS2,
17:17:47  44  	    STATE,
17:17:47  45  	    CITY,
17:17:47  46  	    POSTAL_CODE,
17:17:47  47  	    COUNTRY,
17:17:47  48  	    LAST_FOUR_CC,
17:17:47  49  	    EXPIRATION_DATE,
17:17:47  50  	    CREDIT_CARD_TYPE_ID,
17:17:47  51  	    SECRET_TOKEN,
17:17:47  52  	    CHASE_PROFILE_ID,
17:17:47  53  	    CREATE_DATE,
17:17:47  54  	    CREATED_BY,
17:17:47  55  	    UPDATE_DATE,
17:17:47  56  	    UPDATED_BY,
17:17:47  57  	    CREDIT_CARD_STATUS_ID,
17:17:47  58  	    PRIVATE_FIRST_NAME,
17:17:47  59  	    PRIVATE_LAST_NAME
17:17:47  60  	  ) VALUES (
17:17:47  61  	    var_credit_card_id,
17:17:47  62  	    in_account_id,
17:17:47  63  	    in_instrument_name,
17:17:47  64  	    in_private_card_holder_name,
17:17:47  65  	    in_private_street_address,
17:17:47  66  	    in_private_street_address2,
17:17:47  67  	    in_state,
17:17:47  68  	    in_city,
17:17:47  69  	    in_postal_code,
17:17:47  70  	    in_country,
17:17:47  71  	    in_last_four_cc,
17:17:47  72  	    in_expiration_date,
17:17:47  73  	    in_credit_card_type_id,
17:17:47  74  	    in_secret_token,
17:17:47  75  	    in_chase_profile_id,
17:17:47  76  	    var_date,
17:17:47  77  	    in_created_by,
17:17:47  78  	    var_date,
17:17:47  79  	    in_created_by,
17:17:47  80  	    in_credit_card_status_id,
17:17:47  81  	    in_private_first_name,
17:17:47  82  	    in_private_last_name
17:17:47  83  	  );
17:17:47  84  
17:17:47  85  	out_credit_card_id := var_credit_card_id;
17:17:47  86  END CREATE_CREDIT_CARD;
17:17:47  87  
17:17:47  88  /******************************************************************************/
17:17:47  89  
17:17:47  90  PROCEDURE UPDATE_CREDIT_CARD(
17:17:47  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
17:17:47  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:47  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
17:17:47  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:47  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
17:17:47  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
17:17:47  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
17:17:47  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
17:17:47 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
17:17:47 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:47 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
17:17:47 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
17:17:47 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
17:17:47 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
17:17:47 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
17:17:47 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
17:17:47 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
17:17:47 109  ) AS
17:17:47 110  BEGIN
17:17:47 111  
17:17:47 112  	-- Create history
17:17:47 113  	PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
17:17:47 114  	  in_credit_card_id	       => in_credit_card_id,
17:17:47 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 116  	);
17:17:47 117  
17:17:47 118  	UPDATE CREDIT_CARD SET
17:17:47 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
17:17:47 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
17:17:47 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
17:17:47 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
17:17:47 123  	  STATE 		   = NVL(in_state, STATE),
17:17:47 124  	  CITY			   = NVL(in_city, CITY),
17:17:47 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
17:17:47 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
17:17:47 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
17:17:47 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
17:17:47 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
17:17:47 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
17:17:47 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
17:17:47 132  	  UPDATE_DATE		   = SYSDATE,
17:17:47 133  	  UPDATED_BY		   = in_updated_by,
17:17:47 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
17:17:47 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
17:17:47 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
17:17:47 137  	WHERE
17:17:47 138  	  ID = in_credit_card_id;
17:17:47 139  
17:17:47 140  END UPDATE_CREDIT_CARD;
17:17:47 141  
17:17:47 142  /******************************************************************************/
17:17:47 143  
17:17:47 144  PROCEDURE CREATE_PAYPAL(
17:17:47 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
17:17:47 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
17:17:47 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
17:17:47 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:47 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
17:17:47 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
17:17:47 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
17:17:47 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
17:17:47 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
17:17:47 154  	in_state			IN PAYPAL.STATE%TYPE,
17:17:47 155  	in_city 			IN PAYPAL.CITY%TYPE,
17:17:47 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
17:17:47 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
17:17:47 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
17:17:47 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
17:17:47 160  ) AS
17:17:47 161  -- VARIABLES
17:17:47 162  var_paypal_id PAYPAL.ID%TYPE;
17:17:47 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47 164  var_date DATE := SYSDATE;
17:17:47 165  BEGIN
17:17:47 166  	IF in_paypal_id IS NULL THEN
17:17:47 167  	  SELECT
17:17:47 168  	    PP_ID_SEQ.nextVal into var_paypal_id
17:17:47 169  	  FROM DUAL;
17:17:47 170  	ELSE
17:17:47 171  	  var_paypal_id := in_paypal_id;
17:17:47 172  	END IF;
17:17:47 173  	INSERT INTO PAYPAL(
17:17:47 174  	    ID,
17:17:47 175  	    ACCOUNT_ID,
17:17:47 176  	    INSTRUMENT_NAME,
17:17:47 177  	    PRIVATE_EMAIL_ADDRESS,
17:17:47 178  	    CREATE_DATE,
17:17:47 179  	    CREATED_BY,
17:17:47 180  	    UPDATE_DATE,
17:17:47 181  	    UPDATED_BY,
17:17:47 182  	    PAYPAL_STATUS_ID,
17:17:47 183  	    PRIVATE_STREET_ADDRESS,
17:17:47 184  	    PRIVATE_STREET_ADDRESS2,
17:17:47 185  	    STATE,
17:17:47 186  	    CITY,
17:17:47 187  	    POSTAL_CODE,
17:17:47 188  	    COUNTRY,
17:17:47 189  	    EXPIRATION_DATE,
17:17:47 190  	    SECRET_TOKEN
17:17:47 191  	  ) VALUES (
17:17:47 192  	    var_paypal_id,
17:17:47 193  	    in_account_id,
17:17:47 194  	    in_instrument_name,
17:17:47 195  	    in_private_email_address,
17:17:47 196  	    var_date,
17:17:47 197  	    in_created_by,
17:17:47 198  	    var_date,
17:17:47 199  	    in_created_by,
17:17:47 200  	    in_paypal_status_id,
17:17:47 201  	    in_paypal_prvt_street_address,
17:17:47 202  	    in_paypal_prvt_street_address2,
17:17:47 203  	    in_state,
17:17:47 204  	    in_city,
17:17:47 205  	    in_postal_code,
17:17:47 206  	    in_country,
17:17:47 207  	    in_expiration_date,
17:17:47 208  	    in_secret_token
17:17:47 209  	  );
17:17:47 210  	out_paypal_id := var_paypal_id;
17:17:47 211  END CREATE_PAYPAL;
17:17:47 212  
17:17:47 213  /******************************************************************************/
17:17:47 214  
17:17:47 215  PROCEDURE UPDATE_PAYPAL(
17:17:47 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
17:17:47 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
17:17:47 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
17:17:47 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
17:17:47 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
17:17:47 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:47 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
17:17:47 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
17:17:47 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
17:17:47 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
17:17:47 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:47 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
17:17:47 229  ) AS
17:17:47 230  BEGIN
17:17:47 231  	-- Create history
17:17:47 232  	PROCS_HISTORY_V15.CREATE_PAYPAL_HISTORY(
17:17:47 233  	  in_paypal_id		       => in_paypal_id,
17:17:47 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 235  	);
17:17:47 236  
17:17:47 237  	UPDATE PAYPAL SET
17:17:47 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
17:17:47 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
17:17:47 240  	  UPDATE_DATE	   = SYSDATE,
17:17:47 241  	  UPDATED_BY	   = in_updated_by,
17:17:47 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
17:17:47 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
17:17:47 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
17:17:47 245  	  STATE 		  = NVL(in_state, STATE),
17:17:47 246  	  CITY			  = NVL(in_city, CITY),
17:17:47 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
17:17:47 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
17:17:47 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
17:17:47 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
17:17:47 251  	WHERE
17:17:47 252  	  ID = in_paypal_id;
17:17:47 253  END UPDATE_PAYPAL;
17:17:47 254  
17:17:47 255  /******************************************************************************/
17:17:47 256  
17:17:47 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
17:17:47 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
17:17:47 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
17:17:47 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
17:17:47 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:47 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
17:17:47 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:47 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
17:17:47 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
17:17:47 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
17:17:47 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
17:17:47 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
17:17:47 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
17:17:47 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
17:17:47 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
17:17:47 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
17:17:47 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
17:17:47 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
17:17:47 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
17:17:47 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
17:17:47 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:47 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
17:17:47 279  ) AS
17:17:47 280  -- VARIABLES
17:17:47 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
17:17:47 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47 283  var_date DATE := SYSDATE;
17:17:47 284  BEGIN
17:17:47 285  	IF in_gift_certificate_id IS NULL THEN
17:17:47 286  	  SELECT
17:17:47 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
17:17:47 288  	  FROM DUAL;
17:17:47 289  	ELSE
17:17:47 290  	  var_gift_certificate_id := in_gift_certificate_id;
17:17:47 291  	END IF;
17:17:47 292  	INSERT INTO GIFT_CERTIFICATE (
17:17:47 293  	    ID,
17:17:47 294  	    PURCHASER_GROUP_ID,
17:17:47 295  	    PURCHASE_INVOICE_ID,
17:17:47 296  	    OFFER_CHAIN_ID,
17:17:47 297  	    EXPIRATION_DATE,
17:17:47 298  	    PURCHASE_DATE,
17:17:47 299  	    GIFT_CERTIFICATE_STATUS_ID,
17:17:47 300  	    CODE,
17:17:47 301  	    CREATE_DATE,
17:17:47 302  	    CREATED_BY,
17:17:47 303  	    UPDATE_DATE,
17:17:47 304  	    UPDATED_BY,
17:17:47 305  	    RECIPIENT_NAME,
17:17:47 306  	    GIFT_MESSAGE,
17:17:47 307  	    RECIPIENT_EMAIL,
17:17:47 308  	    FINALIZED_INVOICE_ID,
17:17:47 309  	    SENDER_EMAIL,
17:17:47 310  	    SENDER_NAME,
17:17:47 311  	    REDEMPTION_DATE,
17:17:47 312  	    CANCELATION_DATE,
17:17:47 313  	    REDEEMER_GROUP_ID,
17:17:47 314  	    RECIPIENT_ADDRESS_ID,
17:17:47 315  	    RECIPIENT_NOTIFY_DATE
17:17:47 316  	  ) VALUES(
17:17:47 317  	    var_gift_certificate_id,
17:17:47 318  	    in_purchaser_group_id,
17:17:47 319  	    in_purchaser_invoice_id,
17:17:47 320  	    in_offer_chain_id,
17:17:47 321  	    in_expiration_date,
17:17:47 322  	    in_purchase_date,
17:17:47 323  	    in_gift_certificate_status_id,
17:17:47 324  	    in_code,
17:17:47 325  	    var_date,
17:17:47 326  	    in_created_by,
17:17:47 327  	    var_date,
17:17:47 328  	    in_created_by,
17:17:47 329  	    in_recipient_name,
17:17:47 330  	    in_gift_message,
17:17:47 331  	    in_recipient_email,
17:17:47 332  	    in_finalized_invoice_id,
17:17:47 333  	    in_sender_email,
17:17:47 334  	    in_sender_name,
17:17:47 335  	    in_redemption_date,
17:17:47 336  	    in_cancelation_date,
17:17:47 337  	    in_redeemer_group_id,
17:17:47 338  	    in_recipient_address_id,
17:17:47 339  	    in_recipient_notify_date
17:17:47 340  	  );
17:17:47 341  
17:17:47 342  	out_gift_certificate_id := var_gift_certificate_id;
17:17:47 343  END CREATE_GIFT_CERTIFICATE;
17:17:47 344  
17:17:47 345  /******************************************************************************/
17:17:47 346  
17:17:47 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
17:17:47 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
17:17:47 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
17:17:47 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
17:17:47 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
17:17:47 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
17:17:47 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
17:17:47 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
17:17:47 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
17:17:47 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
17:17:47 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
17:17:47 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
17:17:47 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
17:17:47 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
17:17:47 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
17:17:47 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:47 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
17:17:47 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
17:17:47 365  ) AS
17:17:47 366  BEGIN
17:17:47 367  
17:17:47 368  	-- Create history
17:17:47 369  	PROCS_HISTORY_V15.CREATE_GIFT_CERT_HISTORY(
17:17:47 370  	  in_gift_certificate_id       => in_gift_certificate_id,
17:17:47 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 372  	);
17:17:47 373  
17:17:47 374  	UPDATE GIFT_CERTIFICATE SET
17:17:47 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
17:17:47 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
17:17:47 377  	  CODE			     = NVL(in_code, CODE),
17:17:47 378  	  UPDATE_DATE		     = SYSDATE,
17:17:47 379  	  UPDATED_BY		     = in_updated_by,
17:17:47 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
17:17:47 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
17:17:47 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
17:17:47 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
17:17:47 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
17:17:47 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
17:17:47 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
17:17:47 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
17:17:47 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
17:17:47 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
17:17:47 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
17:17:47 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
17:17:47 392  	WHERE
17:17:47 393  	  ID = in_gift_certificate_id;
17:17:47 394  
17:17:47 395  END UPDATE_GIFT_CERTIFICATE;
17:17:47 396  
17:17:47 397  END PROCS_FIN_INSTRUMENTS_CRU_V15;
17:17:47 398  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.05
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
17:17:47   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:47   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
17:17:47   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
17:17:47   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
17:17:47   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
17:17:47   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
17:17:47  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
17:17:47  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:47  12  ) AS
17:17:47  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
17:17:47  14  BEGIN
17:17:47  15  	UPDATE SUBSCRIPTION_SHARE SET
17:17:47  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
17:17:47  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
17:17:47  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
17:17:47  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
17:17:47  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
17:17:47  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
17:17:47  22  	  UPDATED_BY	       = in_updated_by,
17:17:47  23  	  UPDATE_DATE	       = SYSDATE
17:17:47  24  	WHERE
17:17:47  25  	  SUBSCRIPTION_SHARE.ID = in_id;
17:17:47  26  EXCEPTION
17:17:47  27  	WHEN OTHERS THEN
17:17:47  28  	  Procs_Common_V15.Throw_Exception(APP_EXCEPTION_CODES_V15.Internal_Error,
17:17:47  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
17:17:47  30  END UPDATE_SUBSCRIPTION_SHARE;
17:17:47  31  
17:17:47  32  PROCEDURE CREATE_GROUP_ACCOUNT (
17:17:47  33  	in_subscription_id	 IN NUMBER,
17:17:47  34  	in_group_name		 IN VARCHAR2,
17:17:47  35  	in_first_name		 IN VARCHAR2,
17:17:47  36  	in_last_name		 IN VARCHAR2,
17:17:47  37  	in_email		 IN VARCHAR2,
17:17:47  38  	in_phone		 IN VARCHAR2,
17:17:47  39  	in_organization_type	 IN VARCHAR2,
17:17:47  40  	in_seats		 IN NUMBER,
17:17:47  41  	in_seat_ttl_in_hours	 IN NUMBER,
17:17:47  42  	in_ip			 IN NUMBER,
17:17:47  43  	in_created_by		 IN VARCHAR2
17:17:47  44  ) AS
17:17:47  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
17:17:47  46  var_now DATE;
17:17:47  47  BEGIN
17:17:47  48  
17:17:47  49  	SELECT
17:17:47  50  	  SYSDATE INTO var_now
17:17:47  51  	FROM dual;
17:17:47  52  
17:17:47  53  	INSERT INTO GROUP_ACCOUNT (
17:17:47  54  	  id,
17:17:47  55  	  subscription_id,
17:17:47  56  	  group_name,
17:17:47  57  	  first_name,
17:17:47  58  	  last_name,
17:17:47  59  	  email,
17:17:47  60  	  phone,
17:17:47  61  	  organization_type,
17:17:47  62  	  seats,
17:17:47  63  	  seat_ttl_in_hours,
17:17:47  64  	  ip,
17:17:47  65  	  create_date,
17:17:47  66  	  created_by,
17:17:47  67  	  update_date,
17:17:47  68  	  updated_by
17:17:47  69  	) VALUES (
17:17:47  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
17:17:47  71  	  in_subscription_id,
17:17:47  72  	  in_group_name,
17:17:47  73  	  in_first_name,
17:17:47  74  	  in_last_name,
17:17:47  75  	  in_email,
17:17:47  76  	  in_phone,
17:17:47  77  	  in_organization_type,
17:17:47  78  	  in_seats,
17:17:47  79  	  in_seat_ttl_in_hours,
17:17:47  80  	  in_ip,
17:17:47  81  	  var_now,
17:17:47  82  	  in_created_by,
17:17:47  83  	  var_now,
17:17:47  84  	  in_created_by
17:17:47  85  	);
17:17:47  86  
17:17:47  87  EXCEPTION
17:17:47  88  	WHEN PROGRAM_ERROR THEN
17:17:47  89  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:47  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
17:17:47  91  	WHEN OTHERS THEN
17:17:47  92  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
17:17:47  94  END CREATE_GROUP_ACCOUNT;
17:17:47  95  
17:17:47  96  
17:17:47  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
17:17:47  98  	in_group_account_id    IN NUMBER,
17:17:47  99  	in_borrower_account_id IN NUMBER,
17:17:47 100  	in_ip_address	       IN VARCHAR2,
17:17:47 101  	in_email_domain        IN VARCHAR2,
17:17:47 102  	in_start_date	       IN DATE,
17:17:47 103  	in_end_date	       IN DATE,
17:17:47 104  	in_created_by	       IN VARCHAR2
17:17:47 105  ) AS
17:17:47 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
17:17:47 107  var_now DATE;
17:17:47 108  BEGIN
17:17:47 109  
17:17:47 110  	SELECT
17:17:47 111  	  SYSDATE INTO var_now
17:17:47 112  	FROM dual;
17:17:47 113  
17:17:47 114  	INSERT INTO SUBSCRIPTION_SHARE (
17:17:47 115  	  id,
17:17:47 116  	  group_account_id,
17:17:47 117  	  borrower_account_id,
17:17:47 118  	  ip_address,
17:17:47 119  	  email_domain,
17:17:47 120  	  start_date,
17:17:47 121  	  end_date,
17:17:47 122  	  create_date,
17:17:47 123  	  created_by,
17:17:47 124  	  update_date,
17:17:47 125  	  updated_by
17:17:47 126  	) VALUES (
17:17:47 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
17:17:47 128  	  in_group_account_id,
17:17:47 129  	  in_borrower_account_id,
17:17:47 130  	  in_ip_address,
17:17:47 131  	  in_email_domain,
17:17:47 132  	  in_start_date,
17:17:47 133  	  in_end_date,
17:17:47 134  	  var_now,
17:17:47 135  	  in_created_by,
17:17:47 136  	  var_now,
17:17:47 137  	  in_created_by
17:17:47 138  	);
17:17:47 139  
17:17:47 140  EXCEPTION
17:17:47 141  	WHEN PROGRAM_ERROR THEN
17:17:47 142  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:47 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
17:17:47 144  END CREATE_SUBSCRIPTION_SHARE;
17:17:47 145  
17:17:47 146  -- Eh, I don't like the cru packages at all
17:17:47 147  -- the idea of code reuse in PL/SQL is still lost on me
17:17:47 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
17:17:47 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:47 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:47 151  ) AS
17:17:47 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
17:17:47 153  BEGIN
17:17:47 154  	update
17:17:47 155  	  GROUP_ACCOUNT_IP_RANGE IR
17:17:47 156  	set
17:17:47 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_INACTIVE,
17:17:47 158  	  IR.UPDATED_BY = in_updated_by,
17:17:47 159  	  IR.UPDATE_DATE = sysdate
17:17:47 160  	where
17:17:47 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
17:17:47 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
17:17:47 163  	;
17:17:47 164  EXCEPTION
17:17:47 165  WHEN OTHERS THEN
17:17:47 166  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 168  END DISABLE_IP_RANGES_BY_GA_ID;
17:17:47 169  
17:17:47 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
17:17:47 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
17:17:47 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:47 173  ) AS
17:17:47 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
17:17:47 175  BEGIN
17:17:47 176  	update
17:17:47 177  	  GROUP_ACCOUNT_IP_RANGE IR
17:17:47 178  	set
17:17:47 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_INACTIVE,
17:17:47 180  	  IR.UPDATED_BY = in_updated_by,
17:17:47 181  	  IR.UPDATE_DATE = sysdate
17:17:47 182  	where
17:17:47 183  	  IR.ID = in_id and
17:17:47 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
17:17:47 185  	;
17:17:47 186  raise no_data_found;
17:17:47 187  EXCEPTION
17:17:47 188  WHEN OTHERS THEN
17:17:47 189  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
17:17:47 191  END DISABLE_IP_RANGE_BY_ID;
17:17:47 192  
17:17:47 193  PROCEDURE ADD_IP_RANGE (
17:17:47 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:47 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
17:17:47 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:47 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:47 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
17:17:47 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
17:17:47 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
17:17:47 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
17:17:47 202  ) AS
17:17:47 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
17:17:47 204  BEGIN
17:17:47 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
17:17:47 206  	    ID,
17:17:47 207  	    GROUP_ACCOUNT_ID,
17:17:47 208  	    MINIMUM_IP_STRING,
17:17:47 209  	    MINIMUM_IP_LOW,
17:17:47 210  	    MINIMUM_IP_HIGH,
17:17:47 211  	    MAXIMUM_IP_STRING,
17:17:47 212  	    MAXIMUM_IP_LOW,
17:17:47 213  	    MAXIMUM_IP_HIGH,
17:17:47 214  	    CREATED_BY,
17:17:47 215  	    CREATE_DATE,
17:17:47 216  	    UPDATED_BY,
17:17:47 217  	    UPDATE_DATE,
17:17:47 218  	    GROUP_ACC_IP_RNG_STATUS_ID
17:17:47 219  	  )
17:17:47 220  	  VALUES (
17:17:47 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
17:17:47 222  	    in_group_account_id,
17:17:47 223  	    in_minimum_ip_string,
17:17:47 224  	    in_minimum_ip_low,
17:17:47 225  	    in_minimum_ip_high,
17:17:47 226  	    in_maximum_ip_string,
17:17:47 227  	    in_maximum_ip_low,
17:17:47 228  	    in_maximum_ip_high,
17:17:47 229  	    in_created_by,
17:17:47 230  	    sysdate,
17:17:47 231  	    in_created_by,
17:17:47 232  	    sysdate,
17:17:47 233  	    GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
17:17:47 234  	  );
17:17:47 235  EXCEPTION
17:17:47 236  WHEN OTHERS THEN
17:17:47 237  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 239  END ADD_IP_RANGE;
17:17:47 240  
17:17:47 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
17:17:47 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:47 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:47 244  ) AS
17:17:47 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
17:17:47 246  BEGIN
17:17:47 247  	update
17:17:47 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
17:17:47 249  	set
17:17:47 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT,
17:17:47 251  	  ED.UPDATED_BY = in_updated_by,
17:17:47 252  	  ED.UPDATE_DATE = sysdate
17:17:47 253  	where
17:17:47 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
17:17:47 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT
17:17:47 256  	;
17:17:47 257  EXCEPTION
17:17:47 258  WHEN OTHERS THEN
17:17:47 259  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
17:17:47 262  
17:17:47 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
17:17:47 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:47 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:47 266  ) AS
17:17:47 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
17:17:47 268  BEGIN
17:17:47 269  	update
17:17:47 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
17:17:47 271  	set
17:17:47 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT,
17:17:47 273  	  ED.UPDATED_BY = in_updated_by,
17:17:47 274  	  ED.UPDATE_DATE = sysdate
17:17:47 275  	where
17:17:47 276  	  ED.ID = in_id and
17:17:47 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT
17:17:47 278  	;
17:17:47 279  EXCEPTION
17:17:47 280  WHEN OTHERS THEN
17:17:47 281  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
17:17:47 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
17:17:47 284  
17:17:47 285  
17:17:47 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
17:17:47 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:47 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:47 289  ) AS
17:17:47 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
17:17:47 291  BEGIN
17:17:47 292  	update
17:17:47 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
17:17:47 294  	set
17:17:47 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT,
17:17:47 296  	  ED.UPDATED_BY = in_updated_by,
17:17:47 297  	  ED.UPDATE_DATE = sysdate
17:17:47 298  	where
17:17:47 299  	  ED.ID = in_id and
17:17:47 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT
17:17:47 301  	;
17:17:47 302  EXCEPTION
17:17:47 303  WHEN OTHERS THEN
17:17:47 304  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
17:17:47 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
17:17:47 307  
17:17:47 308  
17:17:47 309  PROCEDURE ADD_EMAIL_DOMAIN (
17:17:47 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:47 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:47 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
17:17:47 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
17:17:47 314  ) AS
17:17:47 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
17:17:47 316  BEGIN
17:17:47 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
17:17:47 318  	    ID,
17:17:47 319  	    GROUP_ACCOUNT_ID,
17:17:47 320  	    EMAIL_DOMAIN,
17:17:47 321  		IS_ACTIVE,
17:17:47 322  	    CREATED_BY,
17:17:47 323  	    CREATE_DATE,
17:17:47 324  	    UPDATED_BY,
17:17:47 325  	    UPDATE_DATE
17:17:47 326  	  )
17:17:47 327  	  VALUES (
17:17:47 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
17:17:47 329  	    in_group_account_id,
17:17:47 330  		in_email_domain,
17:17:47 331  		in_is_active,
17:17:47 332  		in_created_by,
17:17:47 333  	    sysdate,
17:17:47 334  	    in_created_by,
17:17:47 335  	    sysdate
17:17:47 336  	  );
17:17:47 337  EXCEPTION
17:17:47 338  WHEN DUP_VAL_ON_INDEX THEN
17:17:47 339  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:47 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
17:17:47 341  WHEN OTHERS THEN
17:17:47 342  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
17:17:47 344  END ADD_EMAIL_DOMAIN;
17:17:47 345  
17:17:47 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
17:17:47 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:47 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
17:17:47 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
17:17:47 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
17:17:47 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
17:17:47 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
17:17:47 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:47 354  ) AS
17:17:47 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
17:17:47 356  BEGIN
17:17:47 357  	update
17:17:47 358  	  group_account
17:17:47 359  	set
17:17:47 360  	  group_name = nvl(in_group_name, group_name),
17:17:47 361  	  first_name = nvl(in_first_name, first_name),
17:17:47 362  	  last_name = nvl(in_last_name, last_name),
17:17:47 363  	  email = nvl(in_email, email),
17:17:47 364  	  phone = nvl(in_phone, phone),
17:17:47 365  	  updated_by = in_updated_by,
17:17:47 366  	  update_date = sysdate
17:17:47 367  	where
17:17:47 368  	  id = in_group_account_id;
17:17:47 369  
17:17:47 370  	if(sql%rowcount = 0) then
17:17:47 371  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
17:17:47 373  	end if;
17:17:47 374  EXCEPTION
17:17:47 375  	WHEN OTHERS THEN
17:17:47 376  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:47 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
17:17:47 378  END UPDATE_GROUP_ACCOUNT;
17:17:47 379  
17:17:47 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
17:17:47 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
17:17:47 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
17:17:47 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:47 384  ) AS
17:17:47 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
17:17:47 386  var_subscription_id NUMBER;
17:17:47 387  var_seats NUMBER;
17:17:47 388  BEGIN
17:17:47 389  	select subscription_id, seats into var_subscription_id, var_seats
17:17:47 390  	from group_account
17:17:47 391  	where id = in_group_account_id;
17:17:47 392  
17:17:47 393  	update
17:17:47 394  	  group_account
17:17:47 395  	set
17:17:47 396  	  seats = in_seats,
17:17:47 397  	  updated_by = in_updated_by,
17:17:47 398  	  update_date = sysdate
17:17:47 399  	where
17:17:47 400  	  id = in_group_account_id;
17:17:47 401  
17:17:47 402  	if(sql%rowcount = 0) then
17:17:47 403  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
17:17:47 405  	end if;
17:17:47 406  
17:17:47 407  	PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:47 408  	  in_subscription_id => var_subscription_id,
17:17:47 409  	  in_agent_id	     => 0,
17:17:47 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
17:17:47 411  	  in_created_by      => in_updated_by
17:17:47 412  	);
17:17:47 413  EXCEPTION
17:17:47 414  	WHEN NO_DATA_FOUND THEN
17:17:47 415  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
17:17:47 417  	WHEN OTHERS THEN
17:17:47 418  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:47 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
17:17:47 420  END UPDATE_GROUP_ACCOUNT_SEATS;
17:17:47 421  
17:17:47 422  END PROCS_GROUP_ACCOUNT_CRU_V15;
17:17:47 423  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.05
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_INVOICE (
17:17:47   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
17:17:47   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
17:17:47   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
17:17:47   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
17:17:47   9  ) AS
17:17:47  10  -- VARIABLES
17:17:47  11  var_invoice_id INVOICE.ID%TYPE;
17:17:47  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  13  var_date DATE := SYSDATE;
17:17:47  14  BEGIN
17:17:47  15  	IF in_invoice_id IS NULL THEN
17:17:47  16  	  SELECT
17:17:47  17  	    INV_ID_SEQ.nextVal into var_invoice_id
17:17:47  18  	  FROM DUAL;
17:17:47  19  	ELSE
17:17:47  20  	  var_invoice_id := in_invoice_id;
17:17:47  21  	END IF;
17:17:47  22  	INSERT INTO
17:17:47  23  	  INVOICE (
17:17:47  24  	    ID,
17:17:47  25  	    INVOICE_STATUS_ID,
17:17:47  26  	    CREATE_DATE,
17:17:47  27  	    CREATED_BY,
17:17:47  28  	    UPDATE_DATE,
17:17:47  29  	    UPDATED_BY,
17:17:47  30  	    TAX_EXEMPT_ID,
17:17:47  31  	    IS_TAX_CALCULATION_NEEDED
17:17:47  32  	  ) VALUES (
17:17:47  33  	    var_invoice_id,
17:17:47  34  	    in_invoice_status_id,
17:17:47  35  	    var_date,
17:17:47  36  	    in_created_by,
17:17:47  37  	    var_date,
17:17:47  38  	    in_created_by,
17:17:47  39  	    in_tax_exempt_id,
17:17:47  40  	    0 -- DEFAULT VALUE
17:17:47  41  	  );
17:17:47  42  
17:17:47  43  	out_invoice_id := var_invoice_id;
17:17:47  44  END;
17:17:47  45  
17:17:47  46  /*****************************************************************/
17:17:47  47  
17:17:47  48  PROCEDURE UPDATE_INVOICE (
17:17:47  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
17:17:47  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
17:17:47  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
17:17:47  53  ) AS
17:17:47  54  BEGIN
17:17:47  55  	-- Create history
17:17:47  56  	PROCS_HISTORY_V15.CREATE_INVOICE_HISTORY(
17:17:47  57  	  in_invoice_id 	       => in_invoice_id,
17:17:47  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  59  	);
17:17:47  60  
17:17:47  61  	UPDATE
17:17:47  62  	  INVOICE
17:17:47  63  	SET
17:17:47  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
17:17:47  65  	  UPDATE_DATE		    = SYSDATE,
17:17:47  66  	  UPDATED_BY		    = in_updated_by,
17:17:47  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
17:17:47  68  	WHERE
17:17:47  69  	  ID = in_invoice_id;
17:17:47  70  END;
17:17:47  71  
17:17:47  72  END PROCS_INVOICE_CRU_V15;
17:17:47  73  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_RECEIPT(
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   7  */
17:17:47   8  	  out_id	      OUT NUMBER,
17:17:47   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:47  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:47  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
17:17:47  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:47  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:47  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:47  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:47  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:47  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:47  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:47  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:47  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
17:17:47  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
17:17:47  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:47  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
17:17:47  24  ) AS
17:17:47  25  -- VARIABLES
17:17:47  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
17:17:47  27  var_current_date	    DATE;
17:17:47  28  var_count 	    NUMBER;
17:17:47  29  ITUNES_ORG_TNX_USED   EXCEPTION;
17:17:47  30  BEGIN
17:17:47  31  	SELECT COUNT(1) into var_count
17:17:47  32  	FROM
17:17:47  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
17:17:47  34  	WHERE
17:17:47  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
17:17:47  36  	  IR.SUBSCRIPTION_ID = S.ID AND
17:17:47  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
17:17:47  38  
17:17:47  39  	if var_count > 0 then
17:17:47  40  	  raise ITUNES_ORG_TNX_USED;
17:17:47  41  	end if;
17:17:47  42  
17:17:47  43  	SELECT
17:17:47  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
17:17:47  45  	INTO
17:17:47  46  	  out_id
17:17:47  47  	FROM
17:17:47  48  	  dual
17:17:47  49  	;
17:17:47  50  
17:17:47  51  	SELECT
17:17:47  52  	  sysdate
17:17:47  53  	INTO
17:17:47  54  	  var_current_date
17:17:47  55  	FROM
17:17:47  56  	  dual
17:17:47  57  	;
17:17:47  58  
17:17:47  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
17:17:47  60  	(
17:17:47  61  	  id,
17:17:47  62  	  subscription_id,
17:17:47  63  	  receipt,
17:17:47  64  	  status,
17:17:47  65  	  quantity,
17:17:47  66  	  product_id,
17:17:47  67  	  transaction_id,
17:17:47  68  	  purchase_date,
17:17:47  69  	  original_transaction_id,
17:17:47  70  	  original_purchase_date,
17:17:47  71  	  app_item_id,
17:17:47  72  	  version_external_id,
17:17:47  73  	  bid,
17:17:47  74  	  bvrs,
17:17:47  75  	  expires_date,
17:17:47  76  	  create_date,
17:17:47  77  	  created_by,
17:17:47  78  	  update_date,
17:17:47  79  	  updated_by,
17:17:47  80  	  last_check_date
17:17:47  81  	)
17:17:47  82  	VALUES
17:17:47  83  	(
17:17:47  84  	  out_id,
17:17:47  85  	  in_subscription_id,
17:17:47  86  	  in_receipt,
17:17:47  87  	  in_status,
17:17:47  88  	  in_quantity,
17:17:47  89  	  in_product_id,
17:17:47  90  	  in_transaction_id,
17:17:47  91  	  in_purchase_date,
17:17:47  92  	  in_original_transaction_id,
17:17:47  93  	  in_original_purchase_date,
17:17:47  94  	  in_app_item_id,
17:17:47  95  	  in_version_external_id,
17:17:47  96  	  in_bid,
17:17:47  97  	  in_bvrs,
17:17:47  98  	  in_expires_date,
17:17:47  99  	  var_current_date,
17:17:47 100  	  in_created_by,
17:17:47 101  	  var_current_date,
17:17:47 102  	  in_created_by,
17:17:47 103  	  var_current_date
17:17:47 104  	);
17:17:47 105  
17:17:47 106  EXCEPTION
17:17:47 107  WHEN ITUNES_ORG_TNX_USED THEN
17:17:47 108  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
17:17:47 110  WHEN DUP_VAL_ON_INDEX THEN
17:17:47 111  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
17:17:47 113  WHEN OTHERS THEN
17:17:47 114  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 116  END CREATE_RECEIPT;
17:17:47 117  
17:17:47 118  PROCEDURE UPDATE_RECEIPT(
17:17:47 119  /*
17:17:47 120  Throws exceptions:
17:17:47 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 122  */
17:17:47 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
17:17:47 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:47 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
17:17:47 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:47 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:47 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:47 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:47 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:47 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:47 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:47 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:47 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
17:17:47 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
17:17:47 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:47 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
17:17:47 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
17:17:47 139  ) AS
17:17:47 140  -- VARIABLES
17:17:47 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
17:17:47 142  var_current_date	    DATE;
17:17:47 143  BEGIN
17:17:47 144  
17:17:47 145  	SELECT
17:17:47 146  	  sysdate
17:17:47 147  	INTO
17:17:47 148  	  var_current_date
17:17:47 149  	FROM
17:17:47 150  	  dual
17:17:47 151  	;
17:17:47 152  
17:17:47 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
17:17:47 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ITUNES_RECEIPT_HISTORY
17:17:47 155  	  (
17:17:47 156  	      rec.id,
17:17:47 157  	      rec.subscription_id,
17:17:47 158  	      rec.receipt,
17:17:47 159  	      rec.status,
17:17:47 160  	      rec.quantity,
17:17:47 161  	      rec.product_id,
17:17:47 162  	      rec.transaction_id,
17:17:47 163  	      rec.purchase_date,
17:17:47 164  	      rec.original_transaction_id,
17:17:47 165  	      rec.original_purchase_date,
17:17:47 166  	      rec.app_item_id,
17:17:47 167  	      rec.version_external_id,
17:17:47 168  	      rec.bid,
17:17:47 169  	      rec.bvrs,
17:17:47 170  	      rec.expires_date,
17:17:47 171  	      rec.create_date,
17:17:47 172  	      rec.created_by,
17:17:47 173  	      rec.update_date,
17:17:47 174  	      rec.updated_by,
17:17:47 175  	      rec.last_check_date,
17:17:47 176  	      rec.cancel_date
17:17:47 177  	  );
17:17:47 178  	END LOOP;
17:17:47 179  
17:17:47 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
17:17:47 181  	SET
17:17:47 182  	  receipt = in_receipt,
17:17:47 183  	  status = in_status,
17:17:47 184  	  quantity = in_quantity,
17:17:47 185  	  product_id = in_product_id,
17:17:47 186  	  transaction_id = in_transaction_id,
17:17:47 187  	  purchase_date = in_purchase_date,
17:17:47 188  	  original_transaction_id = in_original_transaction_id,
17:17:47 189  	  original_purchase_date = in_original_purchase_date,
17:17:47 190  	  app_item_id = in_app_item_id,
17:17:47 191  	  version_external_id = in_version_external_id,
17:17:47 192  	  bid = in_bid,
17:17:47 193  	  bvrs = in_bvrs,
17:17:47 194  	  expires_date = in_expires_date,
17:17:47 195  	  update_date = var_current_date,
17:17:47 196  	  updated_by = in_updated_by,
17:17:47 197  	  last_check_date = var_current_date,
17:17:47 198  	  cancel_date = in_cancel_date
17:17:47 199  	WHERE
17:17:47 200  	  id = in_id
17:17:47 201  	;
17:17:47 202  
17:17:47 203  EXCEPTION
17:17:47 204  WHEN DUP_VAL_ON_INDEX THEN
17:17:47 205  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
17:17:47 207  WHEN OTHERS THEN
17:17:47 208  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 210  
17:17:47 211  END UPDATE_RECEIPT;
17:17:47 212  
17:17:47 213  PROCEDURE LINK_ITUNES_RECEIPT(
17:17:47 214  /*
17:17:47 215  Throws exceptions:
17:17:47 216  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 217  */
17:17:47 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
17:17:47 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:47 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
17:17:47 221  ) AS
17:17:47 222  -- VARIABLES
17:17:47 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
17:17:47 224  var_current_date	    DATE;
17:17:47 225  BEGIN
17:17:47 226  
17:17:47 227  	      SELECT
17:17:47 228  	  sysdate
17:17:47 229  	      INTO
17:17:47 230  	  var_current_date
17:17:47 231  	      FROM
17:17:47 232  	  dual
17:17:47 233  	      ;
17:17:47 234  
17:17:47 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
17:17:47 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ITUNES_RECEIPT_HISTORY
17:17:47 237  	      (
17:17:47 238  	    rec.id,
17:17:47 239  	    rec.subscription_id,
17:17:47 240  	    rec.receipt,
17:17:47 241  	    rec.status,
17:17:47 242  	    rec.quantity,
17:17:47 243  	    rec.product_id,
17:17:47 244  	    rec.transaction_id,
17:17:47 245  	    rec.purchase_date,
17:17:47 246  	    rec.original_transaction_id,
17:17:47 247  	    rec.original_purchase_date,
17:17:47 248  	    rec.app_item_id,
17:17:47 249  	    rec.version_external_id,
17:17:47 250  	    rec.bid,
17:17:47 251  	    rec.bvrs,
17:17:47 252  	    rec.expires_date,
17:17:47 253  	    rec.create_date,
17:17:47 254  	    rec.created_by,
17:17:47 255  	    rec.update_date,
17:17:47 256  	    rec.updated_by,
17:17:47 257  	    rec.last_check_date,
17:17:47 258  	    rec.cancel_date
17:17:47 259  	      );
17:17:47 260  	      END LOOP;
17:17:47 261  
17:17:47 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
17:17:47 263  		SET
17:17:47 264  		      subscription_id = in_subscription_id,
17:17:47 265  		      update_date = var_current_date,
17:17:47 266  	      updated_by = in_updated_by,
17:17:47 267  	      last_check_date = var_current_date
17:17:47 268  	      WHERE
17:17:47 269  		  id = in_id
17:17:47 270  	      ;
17:17:47 271  
17:17:47 272  	      EXCEPTION
17:17:47 273  	      WHEN DUP_VAL_ON_INDEX THEN
17:17:47 274  		PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:47 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
17:17:47 276  	      WHEN OTHERS THEN
17:17:47 277  		PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 279  END LINK_ITUNES_RECEIPT;
17:17:47 280  
17:17:47 281  
17:17:47 282  PROCEDURE MARK_RECEIPT_CHECKED(
17:17:47 283  /*
17:17:47 284  Throws exceptions:
17:17:47 285  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 286  */
17:17:47 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
17:17:47 288  ) AS
17:17:47 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
17:17:47 290  BEGIN
17:17:47 291  	UPDATE
17:17:47 292  	  CORE_OWNER.ITUNES_RECEIPT
17:17:47 293  	SET
17:17:47 294  	  last_check_date = sysdate
17:17:47 295  	WHERE
17:17:47 296  	  id = in_id
17:17:47 297  	;
17:17:47 298  EXCEPTION
17:17:47 299  WHEN OTHERS THEN
17:17:47 300  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 302  END MARK_RECEIPT_CHECKED;
17:17:47 303  
17:17:47 304  END PROCS_ITUNES_RECEIPT_CRU_V15;
17:17:47 305  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_LICENSE(
17:17:47   4  	out_license_id		    OUT LICENSE.ID%TYPE,
17:17:47   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
17:17:47   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
17:17:47   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
17:17:47   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
17:17:47  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
17:17:47  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
17:17:47  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
17:17:47  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
17:17:47  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
17:17:47  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
17:17:47  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
17:17:47  17  ) AS
17:17:47  18  -- VARIABLES
17:17:47  19  var_license_id LICENSE.ID%TYPE;
17:17:47  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  21  var_date DATE := SYSDATE;
17:17:47  22  BEGIN
17:17:47  23  	IF in_license_id IS NULL THEN
17:17:47  24  	  SELECT
17:17:47  25  	    LCN_ID_SEQ.nextVal into var_license_id
17:17:47  26  	  FROM DUAL;
17:17:47  27  	ELSE
17:17:47  28  	  var_license_id := in_license_id;
17:17:47  29  	END IF;
17:17:47  30  	INSERT INTO
17:17:47  31  	  LICENSE (
17:17:47  32  	    ID,
17:17:47  33  	    LICENSE_STATUS_ID,
17:17:47  34  	    NEEDS_ENTITLEMENTS,
17:17:47  35  	    START_DATE,
17:17:47  36  	    OFFER_ID,
17:17:47  37  	    SUBSCRIPTION_ID,
17:17:47  38  	    INVOICE_ID,
17:17:47  39  	    END_DATE,
17:17:47  40  	    CREATE_DATE,
17:17:47  41  	    CREATED_BY,
17:17:47  42  	    UPDATE_DATE,
17:17:47  43  	    UPDATED_BY,
17:17:47  44  	    IS_EXTENSION,
17:17:47  45  	    CURRENT_OFFER_INDEX,
17:17:47  46  	    CURRENT_OFFER_RECURR_NUM,
17:17:47  47  	    ENTITLEMENT_END_DATE
17:17:47  48  	  ) VALUES (
17:17:47  49  	    var_license_id,
17:17:47  50  	    in_license_status_id,
17:17:47  51  	    in_needs_entitlements,
17:17:47  52  	    in_start_date,
17:17:47  53  	    in_offer_id,
17:17:47  54  	    in_subscription_id,
17:17:47  55  	    in_invoice_id,
17:17:47  56  	    in_end_date,
17:17:47  57  	    var_date,
17:17:47  58  	    in_created_by,
17:17:47  59  	    var_date,
17:17:47  60  	    in_created_by,
17:17:47  61  	    in_is_extension,
17:17:47  62  	    in_current_offer_index,
17:17:47  63  	    in_current_offer_recurr_num,
17:17:47  64  	    in_end_date
17:17:47  65  	  );
17:17:47  66  
17:17:47  67  	out_license_id := var_license_id;
17:17:47  68  END CREATE_LICENSE;
17:17:47  69  
17:17:47  70  /********************************************************************/
17:17:47  71  
17:17:47  72  PROCEDURE UPDATE_LICENSE (
17:17:47  73  	in_license_id		    IN LICENSE.ID%TYPE,
17:17:47  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
17:17:47  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
17:17:47  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
17:17:47  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
17:17:47  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
17:17:47  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
17:17:47  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
17:17:47  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
17:17:47  83  ) AS
17:17:47  84  BEGIN
17:17:47  85  	-- Create history
17:17:47  86  	PROCS_HISTORY_V15.CREATE_LICENSE_HISTORY(
17:17:47  87  	  in_license_id 	       => in_license_id,
17:17:47  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  89  	);
17:17:47  90  
17:17:47  91  	UPDATE
17:17:47  92  	  LICENSE
17:17:47  93  	SET
17:17:47  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
17:17:47  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
17:17:47  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
17:17:47  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
17:17:47  98  	  UPDATE_DATE		   = SYSDATE,
17:17:47  99  	  UPDATED_BY		   = in_updated_by,
17:17:47 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
17:17:47 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
17:17:47 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
17:17:47 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
17:17:47 104  	WHERE
17:17:47 105  	  LICENSE.ID = in_license_id;
17:17:47 106  END UPDATE_LICENSE;
17:17:47 107  
17:17:47 108  END PROCS_LICENSE_CRU_V15;
17:17:47 109  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.01
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_LINE_ITEM (
17:17:47   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
17:17:47   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
17:17:47   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
17:17:47   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
17:17:47   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
17:17:47   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
17:17:47  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
17:17:47  11  ) AS
17:17:47  12  BEGIN
17:17:47  13  	IF inout_line_item_id IS NULL THEN
17:17:47  14  	  SELECT
17:17:47  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
17:17:47  16  	  FROM DUAL;
17:17:47  17  	END IF;
17:17:47  18  	INSERT INTO LINE_ITEM (
17:17:47  19  	  ID,
17:17:47  20  	  PRODUCT_OFFER_ID,
17:17:47  21  	  INVOICE_ID,
17:17:47  22  	  AMOUNT,
17:17:47  23  	  QUANTITY,
17:17:47  24  	  CREATE_DATE,
17:17:47  25  	  CREATED_BY,
17:17:47  26  	  DISCOUNT_AMOUNT,
17:17:47  27  	  TAXES_AMOUNT
17:17:47  28  	) VALUES (
17:17:47  29  	  inout_line_item_id,
17:17:47  30  	  in_product_offer_id,
17:17:47  31  	  in_invoice_id,
17:17:47  32  	  in_amount,
17:17:47  33  	  1, -- [REVU]: Deprecated. Ignore this field
17:17:47  34  	  SYSDATE,
17:17:47  35  	  in_created_by,
17:17:47  36  	  in_discount_amount,
17:17:47  37  	  in_taxes_amount
17:17:47  38  	);
17:17:47  39  END CREATE_LINE_ITEM;
17:17:47  40  
17:17:47  41  /******************************************************************************/
17:17:47  42  
17:17:47  43  PROCEDURE UPDATE_LINE_ITEM (
17:17:47  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
17:17:47  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
17:17:47  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
17:17:47  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
17:17:47  48  ) AS
17:17:47  49  BEGIN
17:17:47  50  	UPDATE
17:17:47  51  	  LINE_ITEM
17:17:47  52  	SET
17:17:47  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
17:17:47  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
17:17:47  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
17:17:47  56  	WHERE
17:17:47  57  	  LINE_ITEM.ID = in_line_item_id;
17:17:47  58  END UPDATE_LINE_ITEM;
17:17:47  59  
17:17:47  60  /******************************************************************************/
17:17:47  61  
17:17:47  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
17:17:47  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
17:17:47  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
17:17:47  65  ) AS
17:17:47  66  BEGIN
17:17:47  67  	INSERT INTO DISCOUNT_LINE_ITEM(
17:17:47  68  	  DISCOUNT_ID,
17:17:47  69  	  LINE_ITEM_ID
17:17:47  70  	) VALUES (
17:17:47  71  	  in_discount_id,
17:17:47  72  	  in_line_item_id
17:17:47  73  	);
17:17:47  74  END CREATE_DISCOUNT_LINE_ITEM;
17:17:47  75  
17:17:47  76  END PROCS_LINE_ITEMS_CRU_V15;
17:17:47  77  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
17:17:47   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
17:17:47   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
17:17:47   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
17:17:47   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
17:17:47  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
17:17:47  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
17:17:47  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:47  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
17:17:47  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
17:17:47  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
17:17:47  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:47  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:47  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
17:17:47  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
17:17:47  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
17:17:47  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
17:17:47  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
17:17:47  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
17:17:47  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
17:17:47  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
17:17:47  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
17:17:47  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
17:17:47  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
17:17:47  29  ) AS
17:17:47  30  -- VARIABLES
17:17:47  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
17:17:47  32  var_date DATE := SYSDATE;
17:17:47  33  BEGIN
17:17:47  34  	IF in_cpt_chargeback_act_id IS NULL THEN
17:17:47  35  	  SELECT
17:17:47  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
17:17:47  37  	  FROM DUAL;
17:17:47  38  	ELSE
17:17:47  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
17:17:47  40  	END IF;
17:17:47  41  	INSERT INTO
17:17:47  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
17:17:47  43  	    id,
17:17:47  44  	    rcn_ext_source_log_id,
17:17:47  45  	    record_type,
17:17:47  46  	    entity_type,
17:17:47  47  	    entity_number,
17:17:47  48  	    chargeback_amount_issuer,
17:17:47  49  	    prev_partial_representment,
17:17:47  50  	    presentment_currency,
17:17:47  51  	    chargeback_category,
17:17:47  52  	    status_flag,
17:17:47  53  	    sequence_number,
17:17:47  54  	    merchant_order_number,
17:17:47  55  	    account_number,
17:17:47  56  	    reason_code,
17:17:47  57  	    transaction_date,
17:17:47  58  	    chargeback_date,
17:17:47  59  	    activity_date,
17:17:47  60  	    chargeback_amount_action,
17:17:47  61  	    fee_amount,
17:17:47  62  	    usage_code,
17:17:47  63  	    mop_code,
17:17:47  64  	    authorization_date,
17:17:47  65  	    chargeback_due_date,
17:17:47  66  	    create_date,
17:17:47  67  	    created_by
17:17:47  68  	  ) VALUES (
17:17:47  69  	    var_cpt_chargeback_act_id,
17:17:47  70  	    in_ext_source_log_id,
17:17:47  71  	    in_record_type,
17:17:47  72  	    in_entity_type,
17:17:47  73  	    in_entity_number,
17:17:47  74  	    in_chargeback_amount_issuer,
17:17:47  75  	    in_prev_partial_repres,
17:17:47  76  	    in_presentment_currency,
17:17:47  77  	    in_chargeback_category,
17:17:47  78  	    in_status_flag,
17:17:47  79  	    in_sequence_number,
17:17:47  80  	    in_merchant_order_number,
17:17:47  81  	    in_account_number,
17:17:47  82  	    in_reason_code,
17:17:47  83  	    in_transaction_date,
17:17:47  84  	    in_chargeback_date,
17:17:47  85  	    in_activity_date,
17:17:47  86  	    in_chargeback_amount_action,
17:17:47  87  	    in_fee_amount,
17:17:47  88  	    in_usage_code,
17:17:47  89  	    in_mop_code,
17:17:47  90  	    in_authorization_date,
17:17:47  91  	    in_chargeback_due_date,
17:17:47  92  	    var_date,
17:17:47  93  	    in_created_by
17:17:47  94  	  );
17:17:47  95  
17:17:47  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
17:17:47  97  END CREATE_CPT_CHARGEBACK_ACT;
17:17:47  98  
17:17:47  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
17:17:47 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
17:17:47 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
17:17:47 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
17:17:47 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
17:17:47 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
17:17:47 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
17:17:47 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
17:17:47 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
17:17:47 108  ) AS
17:17:47 109  -- VARIABLES
17:17:47 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
17:17:47 111  var_date DATE := SYSDATE;
17:17:47 112  BEGIN
17:17:47 113  	IF in_ext_source_log_id IS NULL THEN
17:17:47 114  	  SELECT
17:17:47 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
17:17:47 116  	  FROM DUAL;
17:17:47 117  	ELSE
17:17:47 118  	  var_ext_source_log_id := in_ext_source_log_id;
17:17:47 119  	END IF;
17:17:47 120  	INSERT INTO
17:17:47 121  	  RCN_EXT_SOURCE_LOG (
17:17:47 122  	    id,
17:17:47 123  	    extraction_timestamp,
17:17:47 124  	    report_date,
17:17:47 125  	    report_generation_datetime,
17:17:47 126  	    record_type,
17:17:47 127  	    report_file_name,
17:17:47 128  	    create_date,
17:17:47 129  	    created_by
17:17:47 130  	  ) VALUES (
17:17:47 131  	    var_ext_source_log_id,
17:17:47 132  	    in_extraction_timestamp,
17:17:47 133  	    in_report_date,
17:17:47 134  	    in_report_gen_datetime,
17:17:47 135  	    in_record_type,
17:17:47 136  	    in_report_file_name,
17:17:47 137  	    var_date,
17:17:47 138  	    in_created_by
17:17:47 139  	  );
17:17:47 140  
17:17:47 141  	out_ext_source_log_id := var_ext_source_log_id;
17:17:47 142  END CREATE_EXT_SOURCE_LOG;
17:17:47 143  
17:17:47 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
17:17:47 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
17:17:47 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
17:17:47 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
17:17:47 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
17:17:47 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
17:17:47 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
17:17:47 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
17:17:47 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
17:17:47 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
17:17:47 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
17:17:47 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
17:17:47 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
17:17:47 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
17:17:47 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
17:17:47 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
17:17:47 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
17:17:47 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
17:17:47 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
17:17:47 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
17:17:47 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
17:17:47 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
17:17:47 167  ) AS
17:17:47 168  -- VARIABLES
17:17:47 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
17:17:47 170  var_date DATE := SYSDATE;
17:17:47 171  BEGIN
17:17:47 172  	IF in_cpt_service_charge_id IS NULL THEN
17:17:47 173  	  SELECT
17:17:47 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
17:17:47 175  	  FROM DUAL;
17:17:47 176  	ELSE
17:17:47 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
17:17:47 178  	END IF;
17:17:47 179  	INSERT INTO
17:17:47 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
17:17:47 181  	    id,
17:17:47 182  	    rcn_ext_source_log_id,
17:17:47 183  	    record_type,
17:17:47 184  	    category,
17:17:47 185  	    sub_category,
17:17:47 186  	    entity_type,
17:17:47 187  	    entity_number,
17:17:47 188  	    funds_transfer_inst_number,
17:17:47 189  	    secure_ba_number,
17:17:47 190  	    settlement_currency,
17:17:47 191  	    fee_schedule,
17:17:47 192  	    mop,
17:17:47 193  	    interchange_qualification,
17:17:47 194  	    fee_type_description,
17:17:47 195  	    action_type,
17:17:47 196  	    unit_quantity,
17:17:47 197  	    unit_fee,
17:17:47 198  	    amount,
17:17:47 199  	    percentage_rate,
17:17:47 200  	    total_charge,
17:17:47 201  	    create_date,
17:17:47 202  	    created_by
17:17:47 203  	  ) VALUES (
17:17:47 204  	    var_cpt_service_charge_id,
17:17:47 205  	    in_ext_source_log_id,
17:17:47 206  	    in_record_type,
17:17:47 207  	    in_category,
17:17:47 208  	    in_sub_category,
17:17:47 209  	    in_entity_type,
17:17:47 210  	    in_entity_number,
17:17:47 211  	    in_funds_trans_inst_number,
17:17:47 212  	    in_secure_ba_number,
17:17:47 213  	    in_settlement_currency,
17:17:47 214  	    in_fee_schedule,
17:17:47 215  	    in_mop,
17:17:47 216  	    in_interchange_qual,
17:17:47 217  	    in_fee_type_description,
17:17:47 218  	    in_action_type,
17:17:47 219  	    in_unit_quantity,
17:17:47 220  	    in_unit_fee,
17:17:47 221  	    in_amount,
17:17:47 222  	    in_percentage_rate,
17:17:47 223  	    in_total_charge,
17:17:47 224  	    var_date,
17:17:47 225  	    in_created_by
17:17:47 226  	  );
17:17:47 227  
17:17:47 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
17:17:47 229  END CREATE_CPT_SERVICE_CHARGE;
17:17:47 230  
17:17:47 231  PROCEDURE CREATE_CPT_EXCEPTION (
17:17:47 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
17:17:47 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
17:17:47 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
17:17:47 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
17:17:47 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
17:17:47 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
17:17:47 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
17:17:47 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
17:17:47 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
17:17:47 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
17:17:47 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:47 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:47 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
17:17:47 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:47 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
17:17:47 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
17:17:47 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
17:17:47 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
17:17:47 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
17:17:47 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
17:17:47 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
17:17:47 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
17:17:47 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
17:17:47 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
17:17:47 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
17:17:47 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
17:17:47 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
17:17:47 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
17:17:47 261  ) AS
17:17:47 262  -- VARIABLES
17:17:47 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
17:17:47 264  var_date DATE := SYSDATE;
17:17:47 265  BEGIN
17:17:47 266  	IF in_cpt_exception_id IS NULL THEN
17:17:47 267  	  SELECT
17:17:47 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
17:17:47 269  	  FROM DUAL;
17:17:47 270  	ELSE
17:17:47 271  	  var_cpt_exception_id := in_cpt_exception_id;
17:17:47 272  	END IF;
17:17:47 273  	INSERT INTO
17:17:47 274  	  RCN_CPT_EXCEPTION_DETAIL (
17:17:47 275  	    id,
17:17:47 276  	    rcn_ext_source_log_id,
17:17:47 277  	    record_type,
17:17:47 278  	    submission_date,
17:17:47 279  	    pid_number,
17:17:47 280  	    pid_short_name,
17:17:47 281  	    submission_number,
17:17:47 282  	    record_number,
17:17:47 283  	    entity_type,
17:17:47 284  	    entity_number,
17:17:47 285  	    presentment_currency,
17:17:47 286  	    merchant_order_number,
17:17:47 287  	    rdfi_number,
17:17:47 288  	    account_number,
17:17:47 289  	    expiration_date,
17:17:47 290  	    amount,
17:17:47 291  	    mop,
17:17:47 292  	    action_code,
17:17:47 293  	    auth_date,
17:17:47 294  	    auth_code,
17:17:47 295  	    auth_response_code,
17:17:47 296  	    trace_number,
17:17:47 297  	    consumer_country_code,
17:17:47 298  	    category,
17:17:47 299  	    mcc,
17:17:47 300  	    reject_code,
17:17:47 301  	    submission_status,
17:17:47 302  	    create_date,
17:17:47 303  	    created_by
17:17:47 304  	  ) VALUES (
17:17:47 305  	    var_cpt_exception_id,
17:17:47 306  	    in_ext_source_log_id,
17:17:47 307  	    in_record_type,
17:17:47 308  	    in_submission_date,
17:17:47 309  	    in_pid_number,
17:17:47 310  	    in_pid_short_name,
17:17:47 311  	    in_submission_number,
17:17:47 312  	    in_record_number,
17:17:47 313  	    in_entity_type,
17:17:47 314  	    in_entity_number,
17:17:47 315  	    in_presentment_currency,
17:17:47 316  	    in_merchant_order_number,
17:17:47 317  	    in_rdfi_number,
17:17:47 318  	    in_account_number,
17:17:47 319  	    in_expiration_date,
17:17:47 320  	    in_amount,
17:17:47 321  	    in_mop,
17:17:47 322  	    in_action_code,
17:17:47 323  	    in_auth_date,
17:17:47 324  	    in_auth_code,
17:17:47 325  	    in_auth_response_code,
17:17:47 326  	    in_trace_number,
17:17:47 327  	    in_consumer_country_code,
17:17:47 328  	    in_category,
17:17:47 329  	    in_mcc,
17:17:47 330  	    in_reject_code,
17:17:47 331  	    in_submission_status,
17:17:47 332  	    var_date,
17:17:47 333  	    in_created_by
17:17:47 334  	  );
17:17:47 335  
17:17:47 336  	out_cpt_exception_id := var_cpt_exception_id;
17:17:47 337  END CREATE_CPT_EXCEPTION;
17:17:47 338  
17:17:47 339  PROCEDURE CREATE_CPT_DEPOSIT (
17:17:47 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
17:17:47 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
17:17:47 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
17:17:47 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
17:17:47 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
17:17:47 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
17:17:47 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
17:17:47 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
17:17:47 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
17:17:47 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
17:17:47 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
17:17:47 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
17:17:47 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
17:17:47 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
17:17:47 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
17:17:47 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
17:17:47 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
17:17:47 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
17:17:47 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
17:17:47 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
17:17:47 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
17:17:47 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
17:17:47 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
17:17:47 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
17:17:47 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
17:17:47 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
17:17:47 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
17:17:47 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
17:17:47 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
17:17:47 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
17:17:47 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
17:17:47 372  ) AS
17:17:47 373  -- VARIABLES
17:17:47 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
17:17:47 375  var_date DATE := SYSDATE;
17:17:47 376  BEGIN
17:17:47 377  	IF in_cpt_deposit_id IS NULL THEN
17:17:47 378  	  SELECT
17:17:47 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
17:17:47 380  	  FROM DUAL;
17:17:47 381  	ELSE
17:17:47 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
17:17:47 383  	END IF;
17:17:47 384  	INSERT INTO
17:17:47 385  	  RCN_CPT_DEPOSIT_DETAIL (
17:17:47 386  	    id,
17:17:47 387  	    rcn_ext_source_log_id,
17:17:47 388  	    record_type,
17:17:47 389  	    submission_date,
17:17:47 390  	    pid_number,
17:17:47 391  	    pid_short_name,
17:17:47 392  	    submission_number,
17:17:47 393  	    record_number,
17:17:47 394  	    entity_type,
17:17:47 395  	    entity_number,
17:17:47 396  	    presentment_currency,
17:17:47 397  	    merchant_order_number,
17:17:47 398  	    rdfi_number,
17:17:47 399  	    account_number,
17:17:47 400  	    expiration_date,
17:17:47 401  	    amount,
17:17:47 402  	    mop,
17:17:47 403  	    action_code,
17:17:47 404  	    auth_date,
17:17:47 405  	    auth_code,
17:17:47 406  	    auth_response_code,
17:17:47 407  	    trace_number,
17:17:47 408  	    consumer_country_code,
17:17:47 409  	    mcc,
17:17:47 410  	    fee_code,
17:17:47 411  	    unit_fee,
17:17:47 412  	    percent_fee,
17:17:47 413  	    total_interchange_fee,
17:17:47 414  	    total_assessment_fee,
17:17:47 415  	    other_fee,
17:17:47 416  	    create_date,
17:17:47 417  	    created_by
17:17:47 418  	  ) VALUES (
17:17:47 419  	    var_cpt_deposit_id,
17:17:47 420  	    in_ext_source_log_id,
17:17:47 421  	    in_record_type,
17:17:47 422  	    in_submission_date,
17:17:47 423  	    in_pid_number,
17:17:47 424  	    in_pid_short_name,
17:17:47 425  	    in_submission_number,
17:17:47 426  	    in_record_number,
17:17:47 427  	    in_entity_type,
17:17:47 428  	    in_entity_number,
17:17:47 429  	    in_presentment_currency,
17:17:47 430  	    in_merchant_order_number,
17:17:47 431  	    in_rdfi_number,
17:17:47 432  	    in_account_number,
17:17:47 433  	    in_expiration_date,
17:17:47 434  	    in_amount,
17:17:47 435  	    in_mop,
17:17:47 436  	    in_action_code,
17:17:47 437  	    in_auth_date,
17:17:47 438  	    in_auth_code,
17:17:47 439  	    in_auth_response_code,
17:17:47 440  	    in_trace_number,
17:17:47 441  	    in_consumer_country_code,
17:17:47 442  	    in_mcc,
17:17:47 443  	    in_fee_code,
17:17:47 444  	    in_unit_fee,
17:17:47 445  	    in_percent_fee,
17:17:47 446  	    in_total_interchange_fee,
17:17:47 447  	    in_total_assessment_fee,
17:17:47 448  	    in_other_fee,
17:17:47 449  	    var_date,
17:17:47 450  	    in_created_by
17:17:47 451  	  );
17:17:47 452  
17:17:47 453  	out_cpt_deposit_id := var_cpt_deposit_id;
17:17:47 454  END CREATE_CPT_DEPOSIT;
17:17:47 455  
17:17:47 456  PROCEDURE CREATE_PP_SETTLEMENT (
17:17:47 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
17:17:47 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
17:17:47 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
17:17:47 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
17:17:47 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
17:17:47 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
17:17:47 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
17:17:47 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
17:17:47 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
17:17:47 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
17:17:47 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
17:17:47 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
17:17:47 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
17:17:47 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
17:17:47 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
17:17:47 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
17:17:47 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
17:17:47 475  ) AS
17:17:47 476  -- VARIABLES
17:17:47 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
17:17:47 478  var_date DATE := SYSDATE;
17:17:47 479  BEGIN
17:17:47 480  	IF in_pp_settlement_id IS NULL THEN
17:17:47 481  	  SELECT
17:17:47 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
17:17:47 483  	  FROM DUAL;
17:17:47 484  	ELSE
17:17:47 485  	  var_pp_settlement_id := in_pp_settlement_id;
17:17:47 486  	END IF;
17:17:47 487  	INSERT INTO
17:17:47 488  	  RCN_PP_SETTLEMENT (
17:17:47 489  	    id,
17:17:47 490  	    rcn_ext_source_log_id,
17:17:47 491  	    transaction_id,
17:17:47 492  	    invoice_id,
17:17:47 493  	    pp_ref_id,
17:17:47 494  	    pp_ref_id_type,
17:17:47 495  	    trans_event_code,
17:17:47 496  	    trans_init_date,
17:17:47 497  	    trans_comp_date,
17:17:47 498  	    trans_deb_or_cred,
17:17:47 499  	    gross_trans_amount,
17:17:47 500  	    gross_trans_currency,
17:17:47 501  	    fee_deb_or_cred,
17:17:47 502  	    fee_amount,
17:17:47 503  	    fee_currency,
17:17:47 504  	    custom_field,
17:17:47 505  	    create_date,
17:17:47 506  	    created_by
17:17:47 507  	  ) VALUES (
17:17:47 508  	    var_pp_settlement_id,
17:17:47 509  	    in_ext_source_log_id,
17:17:47 510  	    in_transaction_id,
17:17:47 511  	    in_invoice_id,
17:17:47 512  	    in_pp_ref_id,
17:17:47 513  	    in_pp_ref_id_type,
17:17:47 514  	    in_trans_event_code,
17:17:47 515  	    in_trans_init_date,
17:17:47 516  	    in_trans_comp_date,
17:17:47 517  	    in_trans_deb_or_cred,
17:17:47 518  	    in_gross_trans_amount,
17:17:47 519  	    in_gross_trans_currency,
17:17:47 520  	    in_fee_deb_or_cred,
17:17:47 521  	    in_fee_amount,
17:17:47 522  	    in_fee_currency,
17:17:47 523  	    in_custom_field,
17:17:47 524  	    var_date,
17:17:47 525  	    in_created_by
17:17:47 526  	  );
17:17:47 527  
17:17:47 528  	out_pp_settlement_id := var_pp_settlement_id;
17:17:47 529  END CREATE_PP_SETTLEMENT;
17:17:47 530  
17:17:47 531  PROCEDURE CREATE_PP_DISPUTE (
17:17:47 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
17:17:47 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
17:17:47 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
17:17:47 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
17:17:47 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
17:17:47 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
17:17:47 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
17:17:47 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
17:17:47 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
17:17:47 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
17:17:47 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
17:17:47 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
17:17:47 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
17:17:47 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
17:17:47 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
17:17:47 548  ) AS
17:17:47 549  -- VARIABLES
17:17:47 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
17:17:47 551  var_date DATE := SYSDATE;
17:17:47 552  BEGIN
17:17:47 553  	IF in_pp_dispute_id IS NULL THEN
17:17:47 554  	  SELECT
17:17:47 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
17:17:47 556  	  FROM DUAL;
17:17:47 557  	ELSE
17:17:47 558  	  var_pp_dispute_id := in_pp_dispute_id;
17:17:47 559  	END IF;
17:17:47 560  	INSERT INTO
17:17:47 561  	  RCN_PP_DISPUTE (
17:17:47 562  	    id,
17:17:47 563  	    rcn_ext_source_log_id,
17:17:47 564  	    dispute_type,
17:17:47 565  	    claimant_name,
17:17:47 566  	    claimant_email,
17:17:47 567  	    transaction_id,
17:17:47 568  	    trans_date,
17:17:47 569  	    disputed_amount,
17:17:47 570  	    disputed_amount_currency,
17:17:47 571  	    dispute_reason,
17:17:47 572  	    dispute_filing_date,
17:17:47 573  	    dispute_status,
17:17:47 574  	    dispute_case_id,
17:17:47 575  	    invoice_id,
17:17:47 576  	    create_date,
17:17:47 577  	    created_by
17:17:47 578  	  ) VALUES (
17:17:47 579  	    var_pp_dispute_id,
17:17:47 580  	    in_ext_source_log_id,
17:17:47 581  	    in_dispute_type,
17:17:47 582  	    in_claimant_name,
17:17:47 583  	    in_claimant_email,
17:17:47 584  	    in_transaction_id,
17:17:47 585  	    in_trans_date,
17:17:47 586  	    in_disputed_amount,
17:17:47 587  	    in_disputed_amount_currency,
17:17:47 588  	    in_dispute_reason,
17:17:47 589  	    in_dispute_filing_date,
17:17:47 590  	    in_dispute_status,
17:17:47 591  	    in_dispute_case_id,
17:17:47 592  	    in_invoice_id,
17:17:47 593  	    var_date,
17:17:47 594  	    in_created_by
17:17:47 595  	  );
17:17:47 596  
17:17:47 597  	out_pp_dispute_id := var_pp_dispute_id;
17:17:47 598  END CREATE_PP_DISPUTE;
17:17:47 599  
17:17:47 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
17:17:47 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
17:17:47 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
17:17:47 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
17:17:47 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
17:17:47 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
17:17:47 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
17:17:47 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
17:17:47 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
17:17:47 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
17:17:47 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
17:17:47 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
17:17:47 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
17:17:47 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
17:17:47 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
17:17:47 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
17:17:47 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
17:17:47 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
17:17:47 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
17:17:47 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
17:17:47 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
17:17:47 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
17:17:47 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
17:17:47 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
17:17:47 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
17:17:47 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
17:17:47 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
17:17:47 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
17:17:47 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
17:17:47 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
17:17:47 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
17:17:47 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
17:17:47 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
17:17:47 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
17:17:47 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
17:17:47 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
17:17:47 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
17:17:47 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
17:17:47 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
17:17:47 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
17:17:47 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
17:17:47 641  ) AS
17:17:47 642  -- VARIABLES
17:17:47 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
17:17:47 644  var_date DATE := SYSDATE;
17:17:47 645  BEGIN
17:17:47 646  	IF in_pp_trans_detail_id IS NULL THEN
17:17:47 647  	  SELECT
17:17:47 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
17:17:47 649  	  FROM DUAL;
17:17:47 650  	ELSE
17:17:47 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
17:17:47 652  	END IF;
17:17:47 653  	INSERT INTO
17:17:47 654  	  RCN_PP_TRANS_DETAIL (
17:17:47 655  	    id,
17:17:47 656  	    rcn_ext_source_log_id,
17:17:47 657  	    transaction_id,
17:17:47 658  	    invoice_id,
17:17:47 659  	    pp_ref_id,
17:17:47 660  	    trans_event_code,
17:17:47 661  	    trans_init_date,
17:17:47 662  	    trans_comp_date,
17:17:47 663  	    trans_deb_or_cred,
17:17:47 664  	    gross_trans_amount,
17:17:47 665  	    gross_trans_currency,
17:17:47 666  	    fee_deb_or_cred,
17:17:47 667  	    fee_amount,
17:17:47 668  	    fee_currency,
17:17:47 669  	    trans_status,
17:17:47 670  	    insurance_amount,
17:17:47 671  	    sales_tax_amount,
17:17:47 672  	    shipping_amount,
17:17:47 673  	    trans_subject,
17:17:47 674  	    trans_note,
17:17:47 675  	    payer_acct_id,
17:17:47 676  	    payer_addr_status,
17:17:47 677  	    item_name,
17:17:47 678  	    item_id,
17:17:47 679  	    option_1_name,
17:17:47 680  	    option_1_value,
17:17:47 681  	    option_2_name,
17:17:47 682  	    option_2_value,
17:17:47 683  	    auction_site,
17:17:47 684  	    auction_buyer_id,
17:17:47 685  	    auction_closing_date,
17:17:47 686  	    shipping_addr_line_1,
17:17:47 687  	    shipping_addr_line_2,
17:17:47 688  	    shipping_addr_city,
17:17:47 689  	    shipping_addr_state,
17:17:47 690  	    shipping_addr_zip,
17:17:47 691  	    shipping_addr_country,
17:17:47 692  	    custom_field,
17:17:47 693  	    create_date,
17:17:47 694  	    created_by
17:17:47 695  	  ) VALUES (
17:17:47 696  	    var_pp_trans_detail_id,
17:17:47 697  	    in_ext_source_log_id,
17:17:47 698  	    in_transaction_id,
17:17:47 699  	    in_invoice_id,
17:17:47 700  	    in_pp_ref_id,
17:17:47 701  	    in_trans_event_code,
17:17:47 702  	    in_trans_init_date,
17:17:47 703  	    in_trans_comp_date,
17:17:47 704  	    in_trans_deb_or_cred,
17:17:47 705  	    in_gross_trans_amount,
17:17:47 706  	    in_gross_trans_currency,
17:17:47 707  	    in_fee_deb_or_cred,
17:17:47 708  	    in_fee_amount,
17:17:47 709  	    in_fee_currency,
17:17:47 710  	    in_trans_status,
17:17:47 711  	    in_insurance_amount,
17:17:47 712  	    in_sales_tax_amount,
17:17:47 713  	    in_shipping_amount,
17:17:47 714  	    in_trans_subject,
17:17:47 715  	    in_trans_note,
17:17:47 716  	    in_payer_acct_id,
17:17:47 717  	    in_payer_addr_status,
17:17:47 718  	    in_item_name,
17:17:47 719  	    in_item_id,
17:17:47 720  	    in_option_1_name,
17:17:47 721  	    in_option_1_value,
17:17:47 722  	    in_option_2_name,
17:17:47 723  	    in_option_2_value,
17:17:47 724  	    in_auction_site,
17:17:47 725  	    in_auction_buyer_id,
17:17:47 726  	    in_auction_closing_date,
17:17:47 727  	    in_shipping_addr_line_1,
17:17:47 728  	    in_shipping_addr_line_2,
17:17:47 729  	    in_shipping_addr_city,
17:17:47 730  	    in_shipping_addr_state,
17:17:47 731  	    in_shipping_addr_zip,
17:17:47 732  	    in_shipping_addr_country,
17:17:47 733  	    in_custom_field,
17:17:47 734  	    var_date,
17:17:47 735  	    in_created_by
17:17:47 736  	  );
17:17:47 737  
17:17:47 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
17:17:47 739  END CREATE_PP_TRANS_DETAIL;
17:17:47 740  
17:17:47 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
17:17:47 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
17:17:47 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
17:17:47 744  ) AS
17:17:47 745  BEGIN
17:17:47 746  	DELETE FROM
17:17:47 747  	  RCN_EXT_SOURCE_LOG
17:17:47 748  	WHERE
17:17:47 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
17:17:47 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
17:17:47 751  END DELETE_EXT_SOURCE_LOG;
17:17:47 752  
17:17:47 753  PROCEDURE GET_EXT_SOURCE_LOG (
17:17:47 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
17:17:47 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
17:17:47 756  	out_result_set		 OUT SYS_REFCURSOR
17:17:47 757  ) AS
17:17:47 758  BEGIN
17:17:47 759  	OPEN out_result_set FOR
17:17:47 760  	SELECT * FROM
17:17:47 761  	  RCN_EXT_SOURCE_LOG
17:17:47 762  	WHERE
17:17:47 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
17:17:47 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
17:17:47 765  END GET_EXT_SOURCE_LOG;
17:17:47 766  
17:17:47 767  END PROCS_RECONCILIATION_CRU_V15;
17:17:47 768  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.06
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_SUBSCRIPTION(
17:17:47   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
17:17:47   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
17:17:47   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
17:17:47   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
17:17:47  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
17:17:47  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
17:17:47  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
17:17:47  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
17:17:47  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
17:17:47  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
17:17:47  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
17:17:47  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
17:17:47  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
17:17:47  19  ) AS
17:17:47  20  -- VARIABLES
17:17:47  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
17:17:47  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  23  var_date DATE := SYSDATE;
17:17:47  24  BEGIN
17:17:47  25  	IF in_subscription_id IS NULL THEN
17:17:47  26  	  SELECT
17:17:47  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
17:17:47  28  	  FROM DUAL;
17:17:47  29  	ELSE
17:17:47  30  	  var_new_subscription_id := in_subscription_id;
17:17:47  31  	END IF;
17:17:47  32  	INSERT INTO SUBSCRIPTION (
17:17:47  33  	  ID,
17:17:47  34  	  SUSPEND_DATE,
17:17:47  35  	  ACCOUNT_ID,
17:17:47  36  	  PURCHASE_DATE,
17:17:47  37  	  OFFER_CHAIN_ID,
17:17:47  38  	  TERMINATION_DATE,
17:17:47  39  	  DAYS_REMAINING_ADJUSTMENT,
17:17:47  40  	  SCT_ID,
17:17:47  41  	  CREATE_DATE,
17:17:47  42  	  CREATED_BY,
17:17:47  43  	  UPDATE_DATE,
17:17:47  44  	  UPDATED_BY,
17:17:47  45  	  INSTRUMENT_TYPE_ID,
17:17:47  46  	  INSTRUMENT_ID,
17:17:47  47  	  SUBSCRIPTION_STATUS_ID,
17:17:47  48  	  CANCELLATION_DATE,
17:17:47  49  	  REACTIVATION_DATE
17:17:47  50  	) VALUES (
17:17:47  51  	  var_new_subscription_id,
17:17:47  52  	  in_suspend_date,
17:17:47  53  	  in_account_id,
17:17:47  54  	  in_purchase_date,
17:17:47  55  	  in_offer_chain_id,
17:17:47  56  	  in_termination_date,
17:17:47  57  	  in_days_remainning_ajustment,
17:17:47  58  	  in_sct_id,
17:17:47  59  	  var_date,
17:17:47  60  	  in_created_by,
17:17:47  61  	  var_date,
17:17:47  62  	  in_created_by,
17:17:47  63  	  in_instrument_type_id,
17:17:47  64  	  in_instrument_id,
17:17:47  65  	  in_subscription_status_id,
17:17:47  66  	  in_cancelation_date,
17:17:47  67  	  in_reactivation_date
17:17:47  68  	);
17:17:47  69  
17:17:47  70  	out_subscription_id := var_new_subscription_id;
17:17:47  71  END CREATE_SUBSCRIPTION;
17:17:47  72  
17:17:47  73  /******************************************************************************/
17:17:47  74  
17:17:47  75  PROCEDURE UPDATE_SUBSCRIPTION(
17:17:47  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
17:17:47  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
17:17:47  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
17:17:47  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
17:17:47  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
17:17:47  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
17:17:47  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
17:17:47  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
17:17:47  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
17:17:47  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
17:17:47  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
17:17:47  88  ) AS
17:17:47  89  BEGIN
17:17:47  90  	-- Create history
17:17:47  91  	PROCS_HISTORY_V15.CREATE_SUBSCRIPTION_HISTORY(
17:17:47  92  	  in_subscription_id	       => in_subscription_id,
17:17:47  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  94  	);
17:17:47  95  
17:17:47  96  	UPDATE SUBSCRIPTION SET
17:17:47  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
17:17:47  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
17:17:47  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
17:17:47 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
17:17:47 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
17:17:47 102  	  UPDATE_DATE		    = SYSDATE,
17:17:47 103  	  UPDATED_BY		    = in_updated_by,
17:17:47 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
17:17:47 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
17:17:47 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
17:17:47 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
17:17:47 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
17:17:47 109  	WHERE
17:17:47 110  	  ID = in_subscription_id;
17:17:47 111  END UPDATE_SUBSCRIPTION;
17:17:47 112  
17:17:47 113  /******************************************************************************/
17:17:47 114  
17:17:47 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
17:17:47 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
17:17:47 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:47 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
17:17:47 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:47 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
17:17:47 121  ) AS
17:17:47 122  BEGIN
17:17:47 123  	IF inout_subscription_note_id IS NULL THEN
17:17:47 124  	  SELECT
17:17:47 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
17:17:47 126  	  FROM DUAL;
17:17:47 127  	END IF;
17:17:47 128  	INSERT INTO SUBSCRIPTION_NOTE (
17:17:47 129  	  ID,
17:17:47 130  	  AGENT_ID,
17:17:47 131  	  SUBSCRIPTION_ID,
17:17:47 132  	  NOTE,
17:17:47 133  	  CREATE_DATE,
17:17:47 134  	  CREATED_BY
17:17:47 135  	) VALUES (
17:17:47 136  	  inout_subscription_note_id,
17:17:47 137  	  in_agent_id,
17:17:47 138  	  in_subscription_id,
17:17:47 139  	  in_note,
17:17:47 140  	  SYSDATE,
17:17:47 141  	  in_created_by
17:17:47 142  	);
17:17:47 143  END CREATE_SUBSCRIPTION_NOTE;
17:17:47 144  
17:17:47 145  END PROCS_SUBSCRIPTION_CRU_V15;
17:17:47 146  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_TAX (
17:17:47   4  	inout_tax_id		 IN OUT NUMBER,
17:17:47   5  	in_tax_type_id		 IN NUMBER,
17:17:47   6  	in_calculated_amount	 IN NUMBER,
17:17:47   7  	in_created_by		 IN VARCHAR2,
17:17:47   8  	in_line_item_id 	 IN NUMBER,
17:17:47   9  	in_effective_rate	 IN VARCHAR2,
17:17:47  10  	in_taxable_amount	 IN NUMBER,
17:17:47  11  	in_tax_rule_id		 IN NUMBER,
17:17:47  12  	in_jurisdiction_level_id IN NUMBER,
17:17:47  13  	in_jurisdiction_name	 IN VARCHAR2,
17:17:47  14  	in_jurisdiction_id	 IN VARCHAR2,
17:17:47  15  	in_ext_tax_type 	 IN VARCHAR2,
17:17:47  16  	in_ext_result		 IN VARCHAR2,
17:17:47  17  	in_imposition_type	 IN VARCHAR2,
17:17:47  18  	in_imposition		 IN VARCHAR2
17:17:47  19  ) AS
17:17:47  20  var_date DATE := SYSDATE;
17:17:47  21  BEGIN
17:17:47  22  
17:17:47  23  	IF inout_tax_id IS NULL THEN
17:17:47  24  	  SELECT
17:17:47  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
17:17:47  26  	  FROM DUAL;
17:17:47  27  	END IF;
17:17:47  28  
17:17:47  29  	INSERT INTO TAX (
17:17:47  30  	  ID,
17:17:47  31  	  TAX_TYPE_ID,
17:17:47  32  	  CALCULATED_AMOUNT,
17:17:47  33  	  CREATE_DATE,
17:17:47  34  	  CREATED_BY,
17:17:47  35  	  LINE_ITEM_ID,
17:17:47  36  	  EFFECTIVE_RATE,
17:17:47  37  	  TAXABLE_AMOUNT,
17:17:47  38  	  TAX_RULE_ID,
17:17:47  39  	  JURISDICTION_LEVEL_ID,
17:17:47  40  	  JURISDICTION_NAME,
17:17:47  41  	  JURISDICTION_ID,
17:17:47  42  	  EXT_TAX_TYPE,
17:17:47  43  	  EXT_RESULT,
17:17:47  44  	  IMPOSITION_TYPE,
17:17:47  45  	  IMPOSITION
17:17:47  46  	) VALUES (
17:17:47  47  	  inout_tax_id,
17:17:47  48  	  in_tax_type_id,
17:17:47  49  	  in_calculated_amount,
17:17:47  50  	  var_date,
17:17:47  51  	  in_created_by,
17:17:47  52  	  in_line_item_id,
17:17:47  53  	  in_effective_rate,
17:17:47  54  	  in_taxable_amount,
17:17:47  55  	  in_tax_rule_id,
17:17:47  56  	  in_jurisdiction_level_id,
17:17:47  57  	  in_jurisdiction_name,
17:17:47  58  	  in_jurisdiction_id,
17:17:47  59  	  in_ext_tax_type,
17:17:47  60  	  in_ext_result,
17:17:47  61  	  in_imposition_type,
17:17:47  62  	  in_imposition
17:17:47  63  	);
17:17:47  64  
17:17:47  65  END CREATE_TAX;
17:17:47  66  
17:17:47  67  END PROCS_TAXES_CRU_V15;
17:17:47  68  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_TRANSACTION (
17:17:47   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
17:17:47   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
17:17:47   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
17:17:47   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
17:17:47   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
17:17:47   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
17:17:47  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:47  11  ) AS
17:17:47  12  -- VARIABLES
17:17:47  13  var_transaction_id TRANSACTION.ID%TYPE;
17:17:47  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:47  15  var_date DATE := SYSDATE;
17:17:47  16  BEGIN
17:17:47  17  	IF in_transaction_id IS NULL THEN
17:17:47  18  	  SELECT
17:17:47  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
17:17:47  20  	  FROM DUAL;
17:17:47  21  	ELSE
17:17:47  22  	  var_transaction_id := in_transaction_id;
17:17:47  23  	END IF;
17:17:47  24  	INSERT INTO
17:17:47  25  	  TRANSACTION (
17:17:47  26  	    ID,
17:17:47  27  	    TRANSACTION_STATUS_ID,
17:17:47  28  	    TRANSACTION_AMOUNT,
17:17:47  29  	    CREATE_DATE,
17:17:47  30  	    CREATED_BY,
17:17:47  31  	    UPDATE_DATE,
17:17:47  32  	    UPDATED_BY,
17:17:47  33  	    ORDER_ID,
17:17:47  34  	    IS_REFUND
17:17:47  35  	  ) VALUES (
17:17:47  36  	    var_transaction_id,
17:17:47  37  	    in_transaction_status_id,
17:17:47  38  	    in_transaction_amount,
17:17:47  39  	    var_date,
17:17:47  40  	    in_created_by,
17:17:47  41  	    var_date,
17:17:47  42  	    in_created_by,
17:17:47  43  	    in_order_id,
17:17:47  44  	    in_is_refund
17:17:47  45  	  );
17:17:47  46  
17:17:47  47  	out_transaction_id := var_transaction_id;
17:17:47  48  END CREATE_TRANSACTION;
17:17:47  49  
17:17:47  50  /*******************************************************************/
17:17:47  51  
17:17:47  52  PROCEDURE UPDATE_TRANSACTION (
17:17:47  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
17:17:47  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
17:17:47  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
17:17:47  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
17:17:47  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
17:17:47  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
17:17:47  59  ) AS
17:17:47  60  BEGIN
17:17:47  61  	-- Create history
17:17:47  62  	PROCS_HISTORY_V15.CREATE_TRANSACTION_HISTORY(
17:17:47  63  	  in_transaction_id	       => in_transaction_id,
17:17:47  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47  65  	);
17:17:47  66  	UPDATE
17:17:47  67  	  TRANSACTION
17:17:47  68  	SET
17:17:47  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
17:17:47  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
17:17:47  71  	  UPDATE_DATE		= SYSDATE,
17:17:47  72  	  UPDATED_BY		= in_updated_by,
17:17:47  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
17:17:47  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
17:17:47  75  	WHERE
17:17:47  76  	  ID = in_transaction_id;
17:17:47  77  END UPDATE_TRANSACTION;
17:17:47  78  
17:17:47  79  /*******************************************************************/
17:17:47  80  
17:17:47  81  PROCEDURE READ_TRANSACTION (
17:17:47  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47  83  	out_result_set	  OUT SYS_REFCURSOR
17:17:47  84  ) AS
17:17:47  85  BEGIN
17:17:47  86  	OPEN out_result_set FOR
17:17:47  87  	SELECT
17:17:47  88  	  ID,
17:17:47  89  	  TRANSACTION_STATUS_ID,
17:17:47  90  	  TRANSACTION_AMOUNT,
17:17:47  91  	  CREATE_DATE,
17:17:47  92  	  CREATED_BY,
17:17:47  93  	  UPDATE_DATE,
17:17:47  94  	  UPDATED_BY,
17:17:47  95  	  ORDER_ID,
17:17:47  96  	  IS_REFUND,
17:17:47  97  	  IS_SETTLED
17:17:47  98  	FROM
17:17:47  99  	  TRANSACTION
17:17:47 100  	WHERE
17:17:47 101  	  ID = in_transaction_id;
17:17:47 102  END READ_TRANSACTION;
17:17:47 103  
17:17:47 104  /*******************************************************************/
17:17:47 105  
17:17:47 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
17:17:47 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
17:17:47 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
17:17:47 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
17:17:47 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:47 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
17:17:47 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:47 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
17:17:47 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
17:17:47 115  ) AS
17:17:47 116  BEGIN
17:17:47 117  	IF inout_transaction_attempt_id IS NULL THEN
17:17:47 118  	  SELECT
17:17:47 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
17:17:47 120  	  FROM DUAL;
17:17:47 121  	END IF;
17:17:47 122  	INSERT INTO TRANSACTION_ATTEMPT (
17:17:47 123  	  ID,
17:17:47 124  	  TRANSACTION_ID,
17:17:47 125  	  EXTERNAL_STATUS_CODE,
17:17:47 126  	  EXTERNAL_STATUS_MESSAGE,
17:17:47 127  	  CREATE_DATE,
17:17:47 128  	  CREATED_BY,
17:17:47 129  	  EXTERNAL_TRANSACTION_ID,
17:17:47 130  	  TRANSACTION_START_TIME,
17:17:47 131  	  TRANSACTION_ATTEMPT_STATUS_ID
17:17:47 132  	) VALUES (
17:17:47 133  	  inout_transaction_attempt_id,
17:17:47 134  	  in_transaction_id,
17:17:47 135  	  in_external_status_code,
17:17:47 136  	  in_external_status_message,
17:17:47 137  	  SYSDATE,
17:17:47 138  	  in_created_by,
17:17:47 139  	  in_external_transaction_id,
17:17:47 140  	  in_transaction_start_time,
17:17:47 141  	  in_status_id
17:17:47 142  	);
17:17:47 143  END;
17:17:47 144  
17:17:47 145  /*******************************************************************/
17:17:47 146  
17:17:47 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
17:17:47 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
17:17:47 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
17:17:47 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:47 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
17:17:47 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
17:17:47 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
17:17:47 154  ) AS
17:17:47 155  BEGIN
17:17:47 156  	UPDATE
17:17:47 157  	  TRANSACTION_ATTEMPT
17:17:47 158  	SET
17:17:47 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
17:17:47 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
17:17:47 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
17:17:47 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
17:17:47 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
17:17:47 164  	WHERE
17:17:47 165  	  ID = in_transaction_attempt_id;
17:17:47 166  END;
17:17:47 167  
17:17:47 168  /*******************************************************************/
17:17:47 169  
17:17:47 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:47 171  /*
17:17:47 172  Throws exceptions:
17:17:47 173  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:47 174  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:47 175  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47 176  */
17:17:47 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:47 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:47 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:47 180  ) AS
17:17:47 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
17:17:47 182  -- EXCEPTIONS
17:17:47 183  BAD_TRANSACTION_ID EXCEPTION;
17:17:47 184  BEGIN
17:17:47 185  
17:17:47 186  	PROCS_HISTORY_V15.CREATE_TRANSACTION_HISTORY(
17:17:47 187  	  in_transaction_id	       => in_transaction_id,
17:17:47 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 189  	);
17:17:47 190  
17:17:47 191  	UPDATE
17:17:47 192  	  TRANSACTION
17:17:47 193  	SET
17:17:47 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
17:17:47 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
17:17:47 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
17:17:47 197  	WHERE
17:17:47 198  	  TRANSACTION.ID = in_transaction_id
17:17:47 199  	  AND TRANSACTION.ORDER_ID IS NULL;
17:17:47 200  
17:17:47 201  	IF SQL%ROWCOUNT = 0 THEN
17:17:47 202  	  RAISE BAD_TRANSACTION_ID;
17:17:47 203  	END IF;
17:17:47 204  EXCEPTION
17:17:47 205  WHEN BAD_TRANSACTION_ID THEN
17:17:47 206  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:47 207  	  SPROC_NAME, 'No such transaction');
17:17:47 208  END UPDATE_TRANSACTION_ORDER_ID;
17:17:47 209  
17:17:47 210  END PROCS_TRANSACTION_CRU_V15;
17:17:47 211  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_ADDRESS(
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   7  */
17:17:47   8  	  out_address_id	OUT NUMBER,
17:17:47   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:47  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:47  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:47  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:47  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:47  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
17:17:47  16  ) AS
17:17:47  17  -- VARIABLES
17:17:47  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
17:17:47  19  -- EXCEPTIONS
17:17:47  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:47  21  BEGIN
17:17:47  22  
17:17:47  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V15.CREATE_ADDRESS(
17:17:47  24  	  out_address_id      => out_address_id,
17:17:47  25  	  in_address_id       => null,
17:17:47  26  	  in_address1	      => in_address1,
17:17:47  27  	  in_address2	      => in_address2,
17:17:47  28  	  in_city	      => in_city,
17:17:47  29  	  in_state	      => in_state,
17:17:47  30  	  in_postal_code      => in_postal_code,
17:17:47  31  	  in_country	      => in_country,
17:17:47  32  	  in_created_by       => in_created_by
17:17:47  33  	);
17:17:47  34  
17:17:47  35  END CREATE_ADDRESS;
17:17:47  36  
17:17:47  37  PROCEDURE UPDATE_ADDRESS(
17:17:47  38  /*
17:17:47  39  Throws exceptions:
17:17:47  40  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  41  */
17:17:47  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
17:17:47  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
17:17:47  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
17:17:47  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
17:17:47  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
17:17:47  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:47  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
17:17:47  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
17:17:47  50  ) AS
17:17:47  51  BEGIN
17:17:47  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V15.UPDATE_ADDRESS(
17:17:47  53  	  in_address_id 	=> in_address_id,
17:17:47  54  	  in_address1		=> in_address1,
17:17:47  55  	  in_address2		=> in_address2,
17:17:47  56  	  in_city		=> in_city,
17:17:47  57  	  in_state		=> in_state,
17:17:47  58  	  in_postal_code	=> in_postal_code,
17:17:47  59  	  in_country		=> in_country,
17:17:47  60  	  in_updated_by 	=> in_updated_by
17:17:47  61  	);
17:17:47  62  END UPDATE_ADDRESS;
17:17:47  63  
17:17:47  64  PROCEDURE GET_ADDRESS (
17:17:47  65  /*
17:17:47  66  Throws exceptions:
17:17:47  67  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  68  */
17:17:47  69  	  in_id 		IN ADDRESS.ID%TYPE,
17:17:47  70  	  out_result_set	OUT SYS_REFCURSOR
17:17:47  71  ) AS
17:17:47  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
17:17:47  73  BEGIN
17:17:47  74  
17:17:47  75  OPEN out_result_set FOR
17:17:47  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
17:17:47  77  
17:17:47  78  END GET_ADDRESS;
17:17:47  79  
17:17:47  80  END PROCS_ADDRESS_V15;
17:17:47  81  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
17:17:47   4  	in_invoice_id		  IN NUMBER,
17:17:47   5  	in_adjustment_reason	  IN VARCHAR2,
17:17:47   6  	in_is_credit		  IN NUMBER,
17:17:47   7  	in_charge_id		  IN NUMBER,
17:17:47   8  	in_business_date	  IN DATE,
17:17:47   9  	in_created_by		  IN VARCHAR2,
17:17:47  10  	out_invoice_adjustment_id OUT NUMBER
17:17:47  11  ) AS
17:17:47  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
17:17:47  13  -- VARIABLES
17:17:47  14  var_current_date	    DATE := SYSDATE;
17:17:47  15  var_new_entity_id     NUMBER;
17:17:47  16  var_inv_adj_reason_id NUMBER;
17:17:47  17  -- EXCEPTIONS
17:17:47  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
17:17:47  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
17:17:47  20  BEGIN
17:17:47  21  
17:17:47  22  	IF in_is_credit != GLOBAL_CONSTANTS_V15.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:47  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
17:17:47  24  	END IF;
17:17:47  25  
17:17:47  26  	BEGIN
17:17:47  27  	  SELECT
17:17:47  28  	    ID into var_inv_adj_reason_id
17:17:47  29  	  FROM
17:17:47  30  	    INVOICE_ADJUSTMENT_REASON
17:17:47  31  	  WHERE
17:17:47  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
17:17:47  33  	  EXCEPTION
17:17:47  34  	    WHEN NO_DATA_FOUND THEN
17:17:47  35  	      RAISE DAB_ADJUSTMENT_REASON;
17:17:47  36  	END;
17:17:47  37  
17:17:47  38  	SELECT
17:17:47  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
17:17:47  40  	FROM
17:17:47  41  	  DUAL;
17:17:47  42  
17:17:47  43  	INSERT INTO INVOICE_ADJUSTMENT (
17:17:47  44  	  ID,
17:17:47  45  	  INVOICE_ID,
17:17:47  46  	  INVOICE_ADJUSTMENT_REASON_ID,
17:17:47  47  	  IS_CREDIT,
17:17:47  48  	  CHARGE_ID,
17:17:47  49  	  ADJUSTMENT_DATE,
17:17:47  50  	  CREATE_DATE,
17:17:47  51  	  CREATED_BY
17:17:47  52  	)
17:17:47  53  	VALUES (
17:17:47  54  	  var_new_entity_id,
17:17:47  55  	  in_invoice_id,
17:17:47  56  	  var_inv_adj_reason_id,
17:17:47  57  	  in_is_credit,
17:17:47  58  	  in_charge_id,
17:17:47  59  	  in_business_date,
17:17:47  60  	  var_current_date,
17:17:47  61  	  in_created_by
17:17:47  62  	);
17:17:47  63  
17:17:47  64  	out_invoice_adjustment_id := var_new_entity_id;
17:17:47  65  
17:17:47  66  EXCEPTION
17:17:47  67  WHEN BAD_IN_IS_CREDIT_VALUE THEN
17:17:47  68  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:47  69  	  SPROC_NAME, 'Bad in_is_credit value');
17:17:47  70  WHEN DAB_ADJUSTMENT_REASON THEN
17:17:47  71  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:47  72  	  SPROC_NAME, 'Bad adjustment reason');
17:17:47  73  WHEN OTHERS THEN
17:17:47  74  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47  75  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47  76  END CREATE_INVOICE_ADJUSTMENT;
17:17:47  77  
17:17:47  78  /******************************************************************************/
17:17:47  79  
17:17:47  80  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
17:17:47  81  	in_line_item_id 	    IN NUMBER,
17:17:47  82  	in_invoice_adjustment_id    IN NUMBER,
17:17:47  83  	in_amount		    IN NUMBER,
17:17:47  84  	in_tax			    IN NUMBER,
17:17:47  85  	in_discount		    IN NUMBER,
17:17:47  86  	in_created_by		    IN VARCHAR2,
17:17:47  87  	out_line_item_adjustment_id OUT NUMBER
17:17:47  88  ) AS
17:17:47  89  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
17:17:47  90  -- VARIABLES
17:17:47  91  var_current_date DATE := SYSDATE;
17:17:47  92  var_new_entity_id NUMBER;
17:17:47  93  BEGIN
17:17:47  94  
17:17:47  95  	SELECT
17:17:47  96  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
17:17:47  97  	FROM
17:17:47  98  	  DUAL;
17:17:47  99  
17:17:47 100  	INSERT INTO LINE_ITEM_ADJUSTMENT (
17:17:47 101  	  ID,
17:17:47 102  	  LINE_ITEM_ID,
17:17:47 103  	  INVOICE_ADJUSTMENT_ID,
17:17:47 104  	  AMOUNT,
17:17:47 105  	  TAX,
17:17:47 106  	  DISCOUNT,
17:17:47 107  	  CREATE_DATE,
17:17:47 108  	  CREATED_BY
17:17:47 109  	)
17:17:47 110  	VALUES (
17:17:47 111  	  var_new_entity_id,
17:17:47 112  	  in_line_item_id,
17:17:47 113  	  in_invoice_adjustment_id,
17:17:47 114  	  in_amount,
17:17:47 115  	  in_tax,
17:17:47 116  	  in_discount,
17:17:47 117  	  var_current_date,
17:17:47 118  	  in_created_by
17:17:47 119  	);
17:17:47 120  
17:17:47 121  	out_line_item_adjustment_id := var_new_entity_id;
17:17:47 122  
17:17:47 123  EXCEPTION
17:17:47 124  WHEN OTHERS THEN
17:17:47 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 127  END CREATE_LINE_ITEM_ADJUSTMENT;
17:17:47 128  
17:17:47 129  /******************************************************************************/
17:17:47 130  
17:17:47 131  PROCEDURE CREATE_TAX_ADJUSTMENT (
17:17:47 132  	in_tax_id		   IN NUMBER,
17:17:47 133  	in_line_item_adjustment_id IN NUMBER,
17:17:47 134  	in_amount		   IN NUMBER,
17:17:47 135  	in_created_by		   IN VARCHAR2,
17:17:47 136  	out_tax_adjustment_id	   OUT NUMBER
17:17:47 137  ) AS
17:17:47 138  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
17:17:47 139  -- VARIABLES
17:17:47 140  var_current_date DATE := SYSDATE;
17:17:47 141  var_new_entity_id NUMBER;
17:17:47 142  BEGIN
17:17:47 143  
17:17:47 144  	SELECT
17:17:47 145  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
17:17:47 146  	FROM
17:17:47 147  	  DUAL;
17:17:47 148  
17:17:47 149  	INSERT INTO TAX_ADJUSTMENT (
17:17:47 150  	  ID,
17:17:47 151  	  TAX_ID,
17:17:47 152  	  LINE_ITEM_ADJUSTMENT_ID,
17:17:47 153  	  AMOUNT,
17:17:47 154  	  CREATE_DATE,
17:17:47 155  	  CREATED_BY
17:17:47 156  	)
17:17:47 157  	VALUES (
17:17:47 158  	  var_new_entity_id,
17:17:47 159  	  in_tax_id,
17:17:47 160  	  in_line_item_adjustment_id,
17:17:47 161  	  in_amount,
17:17:47 162  	  var_current_date,
17:17:47 163  	  in_created_by
17:17:47 164  	);
17:17:47 165  
17:17:47 166  	out_tax_adjustment_id := var_new_entity_id;
17:17:47 167  
17:17:47 168  EXCEPTION
17:17:47 169  WHEN OTHERS THEN
17:17:47 170  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 171  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 172  END CREATE_TAX_ADJUSTMENT;
17:17:47 173  
17:17:47 174  /******************************************************************************/
17:17:47 175  
17:17:47 176  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
17:17:47 177  	in_discount_id		   NUMBER,
17:17:47 178  	in_line_item_id 	   NUMBER,
17:17:47 179  	in_line_item_adjustment_id IN NUMBER,
17:17:47 180  	in_amount		   IN NUMBER,
17:17:47 181  	in_created_by		   IN VARCHAR2,
17:17:47 182  	out_discount_li_id	   OUT NUMBER
17:17:47 183  ) AS
17:17:47 184  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
17:17:47 185  -- VARIABLES
17:17:47 186  var_current_date DATE := SYSDATE;
17:17:47 187  var_new_entity_id NUMBER;
17:17:47 188  BEGIN
17:17:47 189  
17:17:47 190  	SELECT
17:17:47 191  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
17:17:47 192  	FROM
17:17:47 193  	  DUAL;
17:17:47 194  
17:17:47 195  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
17:17:47 196  	  ID,
17:17:47 197  	  DISCOUNT_ID,
17:17:47 198  	  LINE_ITEM_ID,
17:17:47 199  	  LINE_ITEM_ADJUSTMENT_ID,
17:17:47 200  	  AMOUNT,
17:17:47 201  	  CREATE_DATE,
17:17:47 202  	  CREATED_BY
17:17:47 203  	)
17:17:47 204  	VALUES (
17:17:47 205  	  var_new_entity_id,
17:17:47 206  	  in_discount_id,
17:17:47 207  	  in_line_item_id,
17:17:47 208  	  in_line_item_adjustment_id,
17:17:47 209  	  in_amount,
17:17:47 210  	  var_current_date,
17:17:47 211  	  in_created_by
17:17:47 212  	);
17:17:47 213  
17:17:47 214  	out_discount_li_id := var_new_entity_id;
17:17:47 215  
17:17:47 216  EXCEPTION
17:17:47 217  WHEN OTHERS THEN
17:17:47 218  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:47 219  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:47 220  END CREATE_DISCOUNT_LI_ADJUSTMENT;
17:17:47 221  
17:17:47 222  END PROCS_ADJUSTMENTS_V15;
17:17:47 223  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE GET_SUB_ADX_INFO (
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   7  */
17:17:47   8  	out_result_set	    OUT SYS_REFCURSOR,
17:17:47   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
17:17:47  10  ) AS
17:17:47  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
17:17:47  12  BEGIN
17:17:47  13  OPEN out_result_set FOR
17:17:47  14  SELECT /*+ FIRST_ROWS(5) */
17:17:47  15  	s.offer_chain_id,
17:17:47  16  	s.create_date,
17:17:47  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
17:17:47  18  	ocmd.value,
17:17:47  19  	a.group_id,
17:17:47  20  	s.id subscription_id
17:17:47  21  FROM
17:17:47  22  	account a,
17:17:47  23  	subscription s,
17:17:47  24  	offer_chain_meta_data ocmd,
17:17:47  25  	group_account g,
17:17:47  26  	subscription_share ss,
17:17:47  27  	account a2
17:17:47  28  WHERE
17:17:47  29  	s.account_id = a.id and
17:17:47  30  	s.offer_chain_id = ocmd.offer_chain_id and
17:17:47  31  	g.id = ss.group_account_id and
17:17:47  32  	ss.borrower_account_id = a2.id and
17:17:47  33  	s.id = g.subscription_id and
17:17:47  34  	ocmd.name = 'ADX_BUNDLE' and
17:17:47  35  	a2.group_id = in_group_id and
17:17:47  36  	rownum < 5
17:17:47  37  union all
17:17:47  38  SELECT /*+ FIRST_ROWS(5) */
17:17:47  39  	s.offer_chain_id,
17:17:47  40  	s.create_date,
17:17:47  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
17:17:47  42  	ocmd.value,
17:17:47  43  	a.group_id,
17:17:47  44  	s.id subscription_id
17:17:47  45  FROM
17:17:47  46  	account a,
17:17:47  47  	subscription s,
17:17:47  48  	offer_chain_meta_data ocmd
17:17:47  49  WHERE
17:17:47  50  	s.account_id = a.id and
17:17:47  51  	s.offer_chain_id = ocmd.offer_chain_id and
17:17:47  52  	ocmd.name = 'ADX_BUNDLE' and
17:17:47  53  	a.group_id = in_group_id and
17:17:47  54  	rownum < 5
17:17:47  55  ;
17:17:47  56  
17:17:47  57  END GET_SUB_ADX_INFO;
17:17:47  58  
17:17:47  59  END PROCS_ADX_V15;
17:17:47  60  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.06
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V15" AS
17:17:47   2  
17:17:47   3  PROCEDURE CREATE_AMAZON_SUB(
17:17:47   4  /*
17:17:47   5  Throws exceptions:
17:17:47   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47   7  */
17:17:47   8  	  out_id	      OUT NUMBER,
17:17:47   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
17:17:47  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
17:17:47  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
17:17:47  12  ) AS
17:17:47  13  -- VARIABLES
17:17:47  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
17:17:47  15  -- EXCEPTIONS
17:17:47  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:47  17  BEGIN
17:17:47  18  
17:17:47  19  	CORE_OWNER.PROCS_AMAZON_CRU_V15.CREATE_AMAZON_SUB(
17:17:47  20  	  out_id	      =>  out_id,
17:17:47  21  	  in_subscription_id  =>  in_subscription_id,
17:17:47  22  	  in_amazon_id	      =>  in_amazon_id,
17:17:47  23  	  in_created_by       =>  in_created_by
17:17:47  24  	);
17:17:47  25  
17:17:47  26  END CREATE_AMAZON_SUB;
17:17:47  27  
17:17:47  28  PROCEDURE GET_ACTIVE_SUB_IDS (
17:17:47  29  /*
17:17:47  30  Throws exceptions:
17:17:47  31  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  32  */
17:17:47  33  	out_result_set	    OUT SYS_REFCURSOR,
17:17:47  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
17:17:47  35  ) AS
17:17:47  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
17:17:47  37  BEGIN
17:17:47  38  OPEN out_result_set FOR
17:17:47  39  SELECT s.id
17:17:47  40  FROM subscription s, amazon_sub am
17:17:47  41  WHERE
17:17:47  42  	s.id = am.subscription_id
17:17:47  43  	and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:47  44  	and am.amazon_id = in_amazon_id
17:17:47  45  ;
17:17:47  46  
17:17:47  47  END GET_ACTIVE_SUB_IDS;
17:17:47  48  
17:17:47  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
17:17:47  50  /*
17:17:47  51  Throws exceptions:
17:17:47  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:47  53  */
17:17:47  54  	out_result_set	    OUT SYS_REFCURSOR,
17:17:47  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
17:17:47  56  ) AS
17:17:47  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
17:17:47  58  BEGIN
17:17:47  59  OPEN out_result_set FOR
17:17:47  60  SELECT distinct a.group_id id
17:17:47  61  FROM subscription s, amazon_sub am, account a
17:17:47  62  WHERE
17:17:47  63  	s.id = am.subscription_id
17:17:47  64  	and a.id = s.account_id
17:17:47  65  	and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:47  66  	and am.amazon_id = in_amazon_id
17:17:47  67  ;
17:17:47  68  
17:17:47  69  END GET_ACTIVE_GROUP_IDS;
17:17:47  70  
17:17:47  71  END PROCS_AMAZON_V15;
17:17:47  72  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:47 SQL> 
17:17:47 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
17:17:47   2  
17:17:47   3  	/****************************************************************************/
17:17:47   4  
17:17:47   5  	PROCEDURE POPULATE_REQUEST_INFO(
17:17:47   6  	  in_hours_prior    IN	NUMBER,
17:17:47   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
17:17:47   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
17:17:47   9  	) AS
17:17:47  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
17:17:47  11  	var_start_date	    DATE := SYSDATE;
17:17:47  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
17:17:47  13  	var_request_file_id NUMBER := 0;
17:17:47  14  	var_license_count   NUMBER := 0;
17:17:47  15  	var_cc_update_count NUMBER := 0;
17:17:47  16  	BEGIN
17:17:47  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
17:17:47  18  	    INSERT INTO CC_REQUEST_FILE (ID,
17:17:47  19  					 FILE_NAME,
17:17:47  20  					 CC_REQUEST_FILE_STATUS,
17:17:47  21  					 CREATE_DATE,
17:17:47  22  					 CREATED_BY,
17:17:47  23  					 UPDATE_DATE,
17:17:47  24  					 UPDATED_BY)
17:17:47  25  					 VALUES (
17:17:47  26  					 var_request_file_id,
17:17:47  27  					 in_filename,
17:17:47  28  					 'NOT_CREATED',
17:17:47  29  					 var_start_date,
17:17:47  30  					 in_creator,
17:17:47  31  					 var_start_date,
17:17:47  32  					 in_creator);
17:17:47  33  
17:17:47  34  	   FOR record IN (SELECT
17:17:47  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
17:17:47  36  			  FROM
17:17:47  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
17:17:47  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
17:17:47  39  			  WHERE
17:17:47  40  			    s.INSTRUMENT_TYPE_ID	 = 1
17:17:47  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
17:17:47  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
17:17:47  43  			    AND l.LICENSE_STATUS_ID	 = 2
17:17:47  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
17:17:47  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
17:17:47  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
17:17:47  47  	   LOOP
17:17:47  48  	     var_license_count := 0;
17:17:47  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
17:17:47  50  
17:17:47  51  	     IF var_license_count = 0 THEN
17:17:47  52  		INSERT INTO CC_UPDATE (ID,
17:17:47  53  				       CREDIT_CARD_ID,
17:17:47  54  				       LICENSE_ID,
17:17:47  55  				       CC_UPDATE_STATUS,
17:17:47  56  				       CC_REQUEST_FILE_ID,
17:17:47  57  				       CREATE_DATE,
17:17:47  58  				       UPDATE_DATE,
17:17:47  59  				       CREATED_BY,
17:17:47  60  				       UPDATED_BY
17:17:47  61  				       ) VALUES (
17:17:47  62  				       CC_UPDATE_SEQ.NEXTVAL,
17:17:47  63  				       record.CREDIT_CARD_ID,
17:17:47  64  				       record.LICENSE_ID,
17:17:47  65  				       'NOT_ADDED_TO_FILE',
17:17:47  66  				       var_request_file_id,
17:17:47  67  				       var_start_date,
17:17:47  68  				       var_start_date,
17:17:47  69  				       in_creator,
17:17:47  70  				       in_creator
17:17:47  71  				       );
17:17:47  72  	     END IF;
17:17:47  73  	   END LOOP;
17:17:47  74  
17:17:47  75  	   SELECT COUNT(1) INTO var_cc_update_count
17:17:47  76  	   FROM CC_UPDATE
17:17:47  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
17:17:47  78  	   IF var_cc_update_count <= 0 THEN
17:17:47  79  	     UPDATE CC_REQUEST_FILE
17:17:47  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
17:17:47  81  	     WHERE ID = var_request_file_id;
17:17:47  82  	   END IF;
17:17:47  83  
17:17:47  84  	END POPULATE_REQUEST_INFO;
17:17:47  85  
17:17:47  86  	/****************************************************************************/
17:17:47  87  
17:17:47  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
17:17:47  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:47  90  	  in_start	     IN NUMBER,
17:17:47  91  	  in_end	     IN NUMBER,
17:17:47  92  	  out_result_set     OUT SYS_REFCURSOR
17:17:47  93  	) AS
17:17:47  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
17:17:47  95  	var_range_diff	    NUMBER := 0;
17:17:47  96  	var_upper_bond_diff NUMBER := 0;
17:17:47  97  	var_l_start	    NUMBER := 0;
17:17:47  98  	var_l_end	    NUMBER := 0;
17:17:47  99  	BEGIN
17:17:47 100  	  --Normalize the end points [START]
17:17:47 101  	  IF (in_start IS NULL OR in_start < 0) Then
17:17:47 102  	    var_l_start := 0;
17:17:47 103  	  ELSE
17:17:47 104  	    var_l_start := in_start;
17:17:47 105  	  END IF;
17:17:47 106  
17:17:47 107  	  IF (in_end IS NULL) Then
17:17:47 108  	    var_l_end := 500;
17:17:47 109  	  ELSE
17:17:47 110  	    var_l_end := in_end;
17:17:47 111  	  END IF;
17:17:47 112  
17:17:47 113  	  var_l_start := var_l_start + 1;
17:17:47 114  	  var_l_end   := var_l_end   + 1;
17:17:47 115  
17:17:47 116  	  var_range_diff  := var_l_end - var_l_start;
17:17:47 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
17:17:47 118  
17:17:47 119  	  IF (var_upper_bond_diff > 0) Then
17:17:47 120  	    var_l_end := var_l_end - var_upper_bond_diff;
17:17:47 121  	  END IF;
17:17:47 122  	  --Normalize the end points [END]
17:17:47 123  
17:17:47 124  	  OPEN out_result_set FOR
17:17:47 125  	    SELECT CHASE_PROFILE_ID FROM
17:17:47 126  	      (SELECT rownum rnum, q.* FROM
17:17:47 127  		 (SELECT
17:17:47 128  		    cc.CHASE_PROFILE_ID
17:17:47 129  		  FROM
17:17:47 130  		    CREDIT_CARD cc,
17:17:47 131  		    CC_UPDATE ccu
17:17:47 132  		  WHERE
17:17:47 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
17:17:47 134  		    AND ccu.CREDIT_CARD_ID = cc.id
17:17:47 135  		) Q
17:17:47 136  	      WHERE rownum <= var_l_end)
17:17:47 137  	    WHERE rnum >= var_l_Start;
17:17:47 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
17:17:47 139  
17:17:47 140  	/****************************************************************************/
17:17:47 141  
17:17:47 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
17:17:47 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
17:17:47 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
17:17:47 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
17:17:47 146  	)AS
17:17:47 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
17:17:47 148  	BEGIN
17:17:47 149  	  UPDATE CC_REQUEST_FILE
17:17:47 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
17:17:47 151  	      UPDATE_DATE = SYSDATE,
17:17:47 152  	      UPDATED_BY  = in_updated_by
17:17:47 153  	  WHERE ID = in_request_file_id;
17:17:47 154  	END UPDATE_REQUEST_FILE_STATUS;
17:17:47 155  
17:17:47 156  	/****************************************************************************/
17:17:47 157  
17:17:47 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
17:17:47 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:47 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:47 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
17:17:47 162  	) AS
17:17:47 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
17:17:47 164  	BEGIN
17:17:47 165  	  UPDATE CC_UPDATE
17:17:47 166  	  SET CC_UPDATE_STATUS = in_status,
17:17:47 167  	      UPDATE_DATE      = SYSDATE,
17:17:47 168  	      UPDATED_BY       = in_updated_by
17:17:47 169  	  WHERE
17:17:47 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
17:17:47 171  	END UPDATE_CC_REQUEST_STATUS;
17:17:47 172  
17:17:47 173  	/****************************************************************************/
17:17:47 174  
17:17:47 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
17:17:47 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
17:17:47 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
17:17:47 178  	  out_request_files   OUT SYS_REFCURSOR
17:17:47 179  	) AS
17:17:47 180  	var_older_than_hours NUMBER := in_older_than_hours;
17:17:47 181  	BEGIN
17:17:47 182  	 IF (var_older_than_hours IS NULL) THEN
17:17:47 183  	   var_older_than_hours := -288;
17:17:47 184  	 END IF;
17:17:47 185  
17:17:47 186  	 OPEN out_request_files FOR
17:17:47 187  	 SELECT
17:17:47 188  	   ID,
17:17:47 189  	   FILE_NAME
17:17:47 190  	 FROM
17:17:47 191  	   CC_REQUEST_FILE
17:17:47 192  	 WHERE
17:17:47 193  	   CC_REQUEST_FILE_STATUS = in_status
17:17:47 194  	 AND
17:17:47 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
17:17:47 196  	END REQUEST_FILES_BY_STATUS;
17:17:47 197  
17:17:47 198  	/****************************************************************************/
17:17:47 199  
17:17:47 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
17:17:47 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
17:17:47 202  	  out_count OUT NUMBER
17:17:47 203  	) AS
17:17:47 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
17:17:47 205  	BEGIN
17:17:47 206  	  SELECT COUNT(1) INTO out_count
17:17:47 207  	  FROM CC_UPDATE
17:17:47 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
17:17:47 209  	END COUNT_BY_REQUEST_FILE_ID;
17:17:47 210  
17:17:47 211  	/****************************************************************************/
17:17:47 212  
17:17:47 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
17:17:47 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
17:17:47 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
17:17:47 216  	  out_card_license     OUT SYS_REFCURSOR
17:17:47 217  	) AS
17:17:47 218  	BEGIN
17:17:47 219  	  OPEN out_card_license FOR
17:17:47 220  	  SELECT
17:17:47 221  	    cc.ID CREDIT_CARD_ID,
17:17:47 222  	    cc.CHASE_PROFILE_ID,
17:17:47 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
17:17:47 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
17:17:47 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
17:17:47 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
17:17:47 227  	    a.GROUP_ID,
17:17:47 228  	    u.LICENSE_ID,
17:17:47 229  	    u.ID CC_UPDATE_ID,
17:17:47 230  	    l.END_DATE LICENSE_END_DATE,
17:17:47 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
17:17:47 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
17:17:47 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
17:17:47 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
17:17:47 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
17:17:47 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
17:17:47 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
17:17:47 238  	  AND cc.ACCOUNT_ID = a.ID
17:17:47 239  	  AND u.LICENSE_ID = l.ID
17:17:47 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
17:17:47 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
17:17:47 242  	  ORDER BY cc.UPDATE_DATE DESC;
17:17:47 243  	END GET_CREDIT_CARD_LICENSE;
17:17:47 244  
17:17:47 245  	/****************************************************************************/
17:17:47 246  
17:17:47 247  	PROCEDURE UPDATE_CC_UPDATE(
17:17:47 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
17:17:47 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:47 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
17:17:47 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
17:17:47 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
17:17:47 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
17:17:47 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
17:17:47 255  	) AS
17:17:47 256  	BEGIN
17:17:47 257  	  UPDATE CC_UPDATE
17:17:47 258  	  SET CC_UPDATE_STATUS = in_status,
17:17:47 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
17:17:47 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
17:17:47 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
17:17:47 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
17:17:47 263  	  UPDATE_DATE = SYSDATE,
17:17:47 264  	  UPDATED_BY = in_updated_by
17:17:47 265  	  WHERE ID = in_id;
17:17:47 266  	END UPDATE_CC_UPDATE;
17:17:47 267  
17:17:47 268  	/****************************************************************************/
17:17:47 269  
17:17:47 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
17:17:47 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
17:17:47 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
17:17:47 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
17:17:47 274  	) AS
17:17:47 275  	BEGIN
17:17:47 276  	  UPDATE CC_UPDATE
17:17:47 277  	  SET CC_UPDATE_STATUS = in_status,
17:17:47 278  	  UPDATE_DATE = SYSDATE,
17:17:47 279  	  UPDATED_BY = in_updated_by
17:17:47 280  	  WHERE ID = in_id;
17:17:47 281  	END UPDATE_CC_UPDATE_STATUS;
17:17:47 282  
17:17:47 283  	/****************************************************************************/
17:17:47 284  
17:17:47 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
17:17:47 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
17:17:47 287  	  out_request_file     OUT SYS_REFCURSOR
17:17:47 288  	) AS
17:17:47 289  	BEGIN
17:17:47 290  	  OPEN out_request_file FOR
17:17:47 291  	  SELECT ID, FILE_NAME
17:17:47 292  	  FROM CC_REQUEST_FILE
17:17:47 293  	  WHERE FILE_NAME = in_request_filename;
17:17:47 294  	END GET_REQUEST_FILE_BY_FILENAME;
17:17:47 295  
17:17:47 296  	/****************************************************************************/
17:17:47 297  
17:17:47 298  	PROCEDURE SUSPEND_CREDIT_CARD (
17:17:47 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
17:17:47 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:47 301  	) AS
17:17:47 302  	BEGIN
17:17:47 303  	  -- Create history
17:17:47 304  	  PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
17:17:47 305  	      in_credit_card_id 	   => in_credit_card_id,
17:17:47 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 307  	  );
17:17:47 308  
17:17:47 309  	  UPDATE CREDIT_CARD
17:17:47 310  	  SET UPDATE_DATE = SYSDATE,
17:17:47 311  	  UPDATED_BY = in_updated_by,
17:17:47 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
17:17:47 313  	  WHERE ID = in_credit_card_id;
17:17:47 314  	END SUSPEND_CREDIT_CARD;
17:17:47 315  
17:17:47 316  	/****************************************************************************/
17:17:47 317  
17:17:47 318  	PROCEDURE UPDATE_CREDIT_CARD (
17:17:47 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
17:17:47 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:47 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
17:17:47 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:47 323  	) AS
17:17:47 324  	BEGIN
17:17:47 325  	  -- Create history
17:17:47 326  	  PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
17:17:47 327  	      in_credit_card_id 	   => in_credit_card_id,
17:17:47 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
17:17:47 329  	  );
17:17:47 330  
17:17:47 331  	  UPDATE CREDIT_CARD
17:17:47 332  	  SET UPDATE_DATE = SYSDATE,
17:17:47 333  	  UPDATED_BY = in_updated_by,
17:17:47 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
17:17:47 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
17:17:47 336  	  WHERE ID = in_credit_card_id;
17:17:47 337  	END UPDATE_CREDIT_CARD;
17:17:47 338  
17:17:47 339  	/****************************************************************************/
17:17:47 340  
17:17:47 341  	PROCEDURE COMPLETABLE_REQUESTS (
17:17:47 342  	  out_request_files OUT SYS_REFCURSOR
17:17:47 343  	) AS
17:17:47 344  	BEGIN
17:17:47 345  	  OPEN out_request_files FOR
17:17:47 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
17:17:47 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
17:17:47 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
17:17:47 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
17:17:47 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
17:17:47 351  	  MINUS
17:17:47 352  	  SELECT rf.ID, rf.FILE_NAME
17:17:47 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
17:17:47 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
17:17:47 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
17:17:47 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
17:17:47 357  	END COMPLETABLE_REQUESTS;
17:17:47 358  
17:17:47 359  	/****************************************************************************/
17:17:47 360  
17:17:47 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
17:17:47 362  	  in_max_hours_before_report IN  NUMBER,
17:17:47 363  	  out_request_files	     OUT SYS_REFCURSOR
17:17:47 364  	) AS
17:17:47 365  	BEGIN
17:17:47 366  	  OPEN out_request_files FOR
17:17:47 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
17:17:47 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
17:17:47 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
17:17:47 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
17:17:47 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
17:17:47 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
17:17:47 373  	  MINUS
17:17:47 374  	  SELECT rf.ID, rf.FILE_NAME
17:17:47 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
17:17:47 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
17:17:47 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
17:17:47 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
17:17:47 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
17:17:47 380  	END COMPLETABLE_REQUESTS_W_FAILS;
17:17:47 381  
17:17:47 382  END PROCS_CUPY;
17:17:47 383  .
17:17:47 SQL> /

Package body created.

Elapsed: 00:00:00.18
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE
17:17:48   2  PACKAGE BODY PROCS_ENTITLEMENT_V15 AS
17:17:48   3  
17:17:48   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
17:17:48   5  	  in_subscription_id IN NUMBER,
17:17:48   6  	  out_uri OUT VARCHAR2)
17:17:48   7  	AS
17:17:48   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
17:17:48   9  	  UNKNOWN_ERROR   EXCEPTION;
17:17:48  10  	BEGIN
17:17:48  11  	  SELECT
17:17:48  12  	    POMD.VALUE INTO out_uri
17:17:48  13  	  FROM
17:17:48  14  	     OFFER_PRODUCT_OFFERING OPO,
17:17:48  15  	     PRODUCT_OFFERING PO,
17:17:48  16  	     OFFER_OFFER_CHAIN OOC,
17:17:48  17  	     SUBSCRIPTION S,
17:17:48  18  	     LICENSE LL,
17:17:48  19  	     PRODUCT_OFFERING_META_DATA POMD
17:17:48  20  	  WHERE
17:17:48  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
17:17:48  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
17:17:48  23  	     S.ID = in_subscription_id AND
17:17:48  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
17:17:48  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
17:17:48  26  	     PO.CAPABILITY_ID = 1 AND
17:17:48  27  	     S.ID = LL.SUBSCRIPTION_ID AND
17:17:48  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
17:17:48  29  	     NAME = 'entitlement_uri' AND
17:17:48  30  	     rownum < 2;
17:17:48  31  	EXCEPTION
17:17:48  32  	  WHEN OTHERS THEN
17:17:48  33  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
17:17:48  36  
17:17:48  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
17:17:48  38  	  in_group_id	 IN  NUMBER,
17:17:48  39  	  out_result_set OUT SYS_REFCURSOR)
17:17:48  40  	AS
17:17:48  41  	  -- CONSTANTS
17:17:48  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
17:17:48  43  	  -- EXCEPTIONS
17:17:48  44  	  NOT_FOUND	  EXCEPTION;
17:17:48  45  	  UNKNOWN_ERROR   EXCEPTION;
17:17:48  46  	  -- VARIABLES
17:17:48  47  	  var_subs	  SYS_REFCURSOR;
17:17:48  48  	BEGIN
17:17:48  49  	  OPEN out_result_set FOR
17:17:48  50  
17:17:48  51  	SELECT
17:17:48  52  	  C.CODE NAME,
17:17:48  53  	  C.DESCRIPTION,
17:17:48  54  	  0 INHERITED,
17:17:48  55  	  C.SHAREABLE,
17:17:48  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
17:17:48  57  	FROM
17:17:48  58  	  SUBSCRIPTION SB
17:17:48  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
17:17:48  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
17:17:48  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
17:17:48  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
17:17:48  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
17:17:48  64  	WHERE
17:17:48  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
17:17:48  66  	  AND LIC.START_DATE <= SYSDATE
17:17:48  67  	  AND AC.GROUP_ID = in_group_id
17:17:48  68  	GROUP BY
17:17:48  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
17:17:48  70  UNION ALL
17:17:48  71  	SELECT
17:17:48  72  	  C.CODE NAME,
17:17:48  73  	  C.DESCRIPTION,
17:17:48  74  	  1 INHERITED,
17:17:48  75  	  C.SHAREABLE,
17:17:48  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
17:17:48  77  	FROM
17:17:48  78  	  ACCOUNT BORROWER,
17:17:48  79  	  SUBSCRIPTION S,
17:17:48  80  	  LICENSE LIC,
17:17:48  81  	  OFFER_PRODUCT_OFFERING OPO,
17:17:48  82  	  PRODUCT_OFFERING PO,
17:17:48  83  	  CAPABILITY C,
17:17:48  84  	  GROUP_ACCOUNT GA,
17:17:48  85  	  SUBSCRIPTION_SHARE SS
17:17:48  86  	WHERE
17:17:48  87  	  BORROWER.GROUP_ID = in_group_id
17:17:48  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
17:17:48  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
17:17:48  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
17:17:48  91  	  AND PO.CAPABILITY_ID = C.ID
17:17:48  92  	  AND GA.SUBSCRIPTION_ID = S.ID
17:17:48  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
17:17:48  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
17:17:48  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
17:17:48  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
17:17:48  97  	  AND C.SHAREABLE = 1
17:17:48  98  	GROUP BY
17:17:48  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
17:17:48 100  
17:17:48 101  	EXCEPTION
17:17:48 102  	  WHEN OTHERS THEN
17:17:48 103  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 105  	END GET_ALL_ENTITLEMENTS;
17:17:48 106  
17:17:48 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
17:17:48 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:48 109  	  out_result_set OUT SYS_REFCURSOR)
17:17:48 110  	AS
17:17:48 111  	  -- CONSTANTS
17:17:48 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
17:17:48 113  	  -- EXCEPTIONS
17:17:48 114  	  NOT_FOUND	  EXCEPTION;
17:17:48 115  	  UNKNOWN_ERROR   EXCEPTION;
17:17:48 116  	  -- VARIABLES
17:17:48 117  	  var_subs	  SYS_REFCURSOR;
17:17:48 118  	BEGIN
17:17:48 119  	  OPEN out_result_set FOR
17:17:48 120  
17:17:48 121  	      SELECT
17:17:48 122  		c.code NAME,
17:17:48 123  		C.DESCRIPTION,
17:17:48 124  		0 INHERITED,
17:17:48 125  		C.SHAREABLE,
17:17:48 126  		sysdate as EXPIRES
17:17:48 127  	      FROM
17:17:48 128  		offer_offer_chain ooc,
17:17:48 129  		offer o,
17:17:48 130  		offer_product_offering opo,
17:17:48 131  		product_offering po,
17:17:48 132  		capability c
17:17:48 133  	      WHERE
17:17:48 134  		o.id = ooc.offer_id AND
17:17:48 135  		opo.offer_id = o.id AND
17:17:48 136  		po.id = opo.product_offering_id AND
17:17:48 137  		c.id = po.capability_id AND
17:17:48 138  		c.id !=0 AND
17:17:48 139  		ooc.offer_chain_id =
17:17:48 140  		(SELECT
17:17:48 141  		    ocmd.offer_chain_id
17:17:48 142  		  FROM
17:17:48 143  		      offer_chain_meta_data ocmd
17:17:48 144  		  WHERE
17:17:48 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
17:17:48 146  		      ocmd.value = in_product_id AND
17:17:48 147  		      rownum < 2
17:17:48 148  		)
17:17:48 149  	      ;
17:17:48 150  
17:17:48 151  	EXCEPTION
17:17:48 152  	  WHEN OTHERS THEN
17:17:48 153  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 155  	END GET_ITUNES_ENTITLEMENTS;
17:17:48 156  
17:17:48 157  END PROCS_ENTITLEMENT_V15;
17:17:48 158  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE CREATE_ADDRESS_HISTORY(
17:17:48   4  	in_address_id		     IN NUMBER,
17:17:48   5  	in_system_activity_reason_id IN NUMBER
17:17:48   6  ) AS
17:17:48   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
17:17:48   8  -- VARIABLES
17:17:48   9  var_address1    ADDRESS.ADDRESS1%TYPE;
17:17:48  10  var_address2    ADDRESS.ADDRESS2%TYPE;
17:17:48  11  var_city	      ADDRESS.CITY%TYPE;
17:17:48  12  var_state       ADDRESS.STATE%TYPE;
17:17:48  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
17:17:48  14  var_country     ADDRESS.COUNTRY%TYPE;
17:17:48  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
17:17:48  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
17:17:48  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
17:17:48  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
17:17:48  19  -- EXCEPTIONS
17:17:48  20  BAD_ADDRESS_ID	     EXCEPTION;
17:17:48  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48  23  BEGIN
17:17:48  24  
17:17:48  25  	BEGIN
17:17:48  26  	  SELECT
17:17:48  27  	    ADDRESS.ADDRESS1,
17:17:48  28  	    ADDRESS.ADDRESS2,
17:17:48  29  	    ADDRESS.CITY,
17:17:48  30  	    ADDRESS.STATE,
17:17:48  31  	    ADDRESS.POSTAL_CODE,
17:17:48  32  	    ADDRESS.COUNTRY,
17:17:48  33  	    ADDRESS.CREATED_BY,
17:17:48  34  	    ADDRESS.CREATE_DATE,
17:17:48  35  	    ADDRESS.UPDATED_BY,
17:17:48  36  	    ADDRESS.UPDATE_DATE
17:17:48  37  	    into
17:17:48  38  	    var_address1,
17:17:48  39  	    var_address2,
17:17:48  40  	    var_city,
17:17:48  41  	    var_state,
17:17:48  42  	    var_postal_code,
17:17:48  43  	    var_country,
17:17:48  44  	    var_created_by,
17:17:48  45  	    var_create_date,
17:17:48  46  	    var_updated_by,
17:17:48  47  	    var_update_date
17:17:48  48  	  FROM
17:17:48  49  	    ADDRESS
17:17:48  50  	  WHERE
17:17:48  51  	    ADDRESS.ID = in_address_id;
17:17:48  52  	  EXCEPTION
17:17:48  53  	    WHEN NO_DATA_FOUND THEN
17:17:48  54  	      RAISE BAD_ADDRESS_ID;
17:17:48  55  	END;
17:17:48  56  
17:17:48  57  	BEGIN
17:17:48  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ADDRESS_HISTORY(
17:17:48  59  	    in_address_id,
17:17:48  60  	    in_system_activity_reason_id,
17:17:48  61  	    var_address1,
17:17:48  62  	    var_address2,
17:17:48  63  	    var_city,
17:17:48  64  	    var_state,
17:17:48  65  	    var_postal_code,
17:17:48  66  	    var_country,
17:17:48  67  	    var_created_by,
17:17:48  68  	    var_create_date,
17:17:48  69  	    var_updated_by,
17:17:48  70  	    var_update_date
17:17:48  71  	  );
17:17:48  72  	  EXCEPTION
17:17:48  73  	    WHEN OTHERS THEN
17:17:48  74  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48  75  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48  76  	END;
17:17:48  77  
17:17:48  78  EXCEPTION
17:17:48  79  WHEN BAD_ADDRESS_ID THEN
17:17:48  80  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48  81  	  SPROC_NAME, 'Bad recipientAddress id');
17:17:48  82  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48  83  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48  85  WHEN OTHERS THEN
17:17:48  86  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  88  END CREATE_ADDRESS_HISTORY;
17:17:48  89  
17:17:48  90  /********************************************************************/
17:17:48  91  
17:17:48  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
17:17:48  93  	in_account_id		     IN NUMBER,
17:17:48  94  	in_system_activity_reason_id IN NUMBER
17:17:48  95  ) AS
17:17:48  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
17:17:48  97  -- VARIABLES
17:17:48  98  var_account_status_id  NUMBER;
17:17:48  99  var_suspend_date	     DATE;
17:17:48 100  var_group_id	     NUMBER;
17:17:48 101  var_instrument_type_id NUMBER;
17:17:48 102  var_instrument_id      NUMBER;
17:17:48 103  var_updated_by	     VARCHAR2(255);
17:17:48 104  var_update_date	     DATE;
17:17:48 105  -- EXCEPTIONS
17:17:48 106  BAD_ACCOUNT_ID	     EXCEPTION;
17:17:48 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 109  BEGIN
17:17:48 110  
17:17:48 111  	BEGIN
17:17:48 112  	  SELECT
17:17:48 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
17:17:48 114  	    ACCOUNT.GROUP_ID,
17:17:48 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
17:17:48 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
17:17:48 117  	    ACCOUNT.UPDATED_BY,
17:17:48 118  	    ACCOUNT.UPDATE_DATE
17:17:48 119  	    into
17:17:48 120  	    var_account_status_id,
17:17:48 121  	    var_group_id,
17:17:48 122  	    var_instrument_type_id,
17:17:48 123  	    var_instrument_id,
17:17:48 124  	    var_updated_by,
17:17:48 125  	    var_update_date
17:17:48 126  	  FROM
17:17:48 127  	    ACCOUNT
17:17:48 128  	  WHERE
17:17:48 129  	    ACCOUNT.ID = in_account_id;
17:17:48 130  	  EXCEPTION
17:17:48 131  	    WHEN NO_DATA_FOUND THEN
17:17:48 132  	      RAISE BAD_ACCOUNT_ID;
17:17:48 133  	END;
17:17:48 134  
17:17:48 135  	BEGIN
17:17:48 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ACCOUNT_HISTORY(
17:17:48 137  	    in_account_id,
17:17:48 138  	    var_suspend_date,
17:17:48 139  	    var_group_id,
17:17:48 140  	    var_updated_by,
17:17:48 141  	    var_update_date,
17:17:48 142  	    in_system_activity_reason_id,
17:17:48 143  	    var_account_status_id,
17:17:48 144  	    var_instrument_type_id,
17:17:48 145  	    var_instrument_id
17:17:48 146  	  );
17:17:48 147  	  EXCEPTION
17:17:48 148  	    WHEN OTHERS THEN
17:17:48 149  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 150  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 151  	END;
17:17:48 152  
17:17:48 153  EXCEPTION
17:17:48 154  WHEN BAD_ACCOUNT_ID THEN
17:17:48 155  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 156  	  SPROC_NAME, 'Bad account id');
17:17:48 157  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 158  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 160  WHEN OTHERS THEN
17:17:48 161  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 163  END CREATE_ACCOUNT_HISTORY;
17:17:48 164  
17:17:48 165  /********************************************************************/
17:17:48 166  
17:17:48 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
17:17:48 168  /*
17:17:48 169  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 170  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 171  */
17:17:48 172  	in_subscription_id	     IN NUMBER,
17:17:48 173  	in_system_activity_reason_id IN NUMBER
17:17:48 174  ) AS
17:17:48 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
17:17:48 176  -- VARIABLES
17:17:48 177  var_account_id		    NUMBER;
17:17:48 178  var_purchase_date 	    DATE;
17:17:48 179  var_offer_chain_id	    NUMBER;
17:17:48 180  var_suspend_date		    DATE;
17:17:48 181  var_termination_date	    DATE;
17:17:48 182  var_days_ramaining_adjustment NUMBER;
17:17:48 183  var_sct_id		    NUMBER;
17:17:48 184  var_updated_by		    VARCHAR2(255);
17:17:48 185  var_update_date		    DATE;
17:17:48 186  -- EXCEPTIONS
17:17:48 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
17:17:48 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 190  BEGIN
17:17:48 191  
17:17:48 192  	BEGIN
17:17:48 193  	  SELECT
17:17:48 194  	    SUBSCRIPTION.account_id,
17:17:48 195  	    SUBSCRIPTION.PURCHASE_DATE,
17:17:48 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
17:17:48 197  	    SUBSCRIPTION.SUSPEND_DATE,
17:17:48 198  	    SUBSCRIPTION.TERMINATION_DATE,
17:17:48 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
17:17:48 200  	    SUBSCRIPTION.SCT_ID,
17:17:48 201  	    SUBSCRIPTION.UPDATED_BY,
17:17:48 202  	    SUBSCRIPTION.UPDATE_DATE
17:17:48 203  	    into
17:17:48 204  	    var_account_id,
17:17:48 205  	    var_purchase_date,
17:17:48 206  	    var_offer_chain_id,
17:17:48 207  	    var_suspend_date,
17:17:48 208  	    var_termination_date,
17:17:48 209  	    var_days_ramaining_adjustment,
17:17:48 210  	    var_sct_id,
17:17:48 211  	    var_updated_by,
17:17:48 212  	    var_update_date
17:17:48 213  	  FROM
17:17:48 214  	    SUBSCRIPTION
17:17:48 215  	  WHERE
17:17:48 216  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:48 217  	  EXCEPTION
17:17:48 218  	    WHEN NO_DATA_FOUND THEN
17:17:48 219  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:48 220  	END;
17:17:48 221  
17:17:48 222  	BEGIN
17:17:48 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_SUBSCRIPTION_HISTORY(
17:17:48 224  	    in_subscription_id,
17:17:48 225  	    var_account_id,
17:17:48 226  	    var_purchase_date,
17:17:48 227  	    var_offer_chain_id,
17:17:48 228  	    var_suspend_date,
17:17:48 229  	    var_termination_date,
17:17:48 230  	    var_days_ramaining_adjustment,
17:17:48 231  	    var_sct_id,
17:17:48 232  	    var_updated_by,
17:17:48 233  	    var_update_date,
17:17:48 234  	    in_system_activity_reason_id
17:17:48 235  	  );
17:17:48 236  	  EXCEPTION
17:17:48 237  	    WHEN OTHERS THEN
17:17:48 238  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 239  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 240  	END;
17:17:48 241  
17:17:48 242  EXCEPTION
17:17:48 243  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:48 244  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 245  	  SPROC_NAME, 'No such subscription');
17:17:48 246  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 247  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 249  WHEN OTHERS THEN
17:17:48 250  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 252  END CREATE_SUBSCRIPTION_HISTORY;
17:17:48 253  
17:17:48 254  /********************************************************************/
17:17:48 255  
17:17:48 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
17:17:48 257  	in_credit_card_id	      IN NUMBER,
17:17:48 258  	in_system_activity_reason_id  IN NUMBER
17:17:48 259  ) AS
17:17:48 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
17:17:48 261  -- VARIABLES
17:17:48 262  var_account_id		     NUMBER;
17:17:48 263  var_instrument_name	     VARCHAR2(255);
17:17:48 264  var_private_card_holder_name   VARCHAR2(256);
17:17:48 265  var_private_street_address     VARCHAR2(256);
17:17:48 266  var_private_street_address2    VARCHAR2(256);
17:17:48 267  var_state 		     VARCHAR2(50);
17:17:48 268  var_city			     VARCHAR2(50);
17:17:48 269  var_postal_code		     VARCHAR2(20);
17:17:48 270  var_country		     CHAR(2);
17:17:48 271  var_last_four_cc		     VARCHAR2(4);
17:17:48 272  var_expiration_date	     DATE;
17:17:48 273  var_credit_card_type_id	     NUMBER;
17:17:48 274  var_secret_token		     VARCHAR2(255);
17:17:48 275  var_chase_profile_id	     VARCHAR2(255);
17:17:48 276  var_credit_card_status_id      NUMBER;
17:17:48 277  var_updated_by		     VARCHAR2(255);
17:17:48 278  var_update_date		     DATE;
17:17:48 279  -- EXCEPTIONS
17:17:48 280  BAD_CREDIT_CARD_ID     EXCEPTION;
17:17:48 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 283  BEGIN
17:17:48 284  
17:17:48 285  	BEGIN
17:17:48 286  	  SELECT
17:17:48 287  	    ACCOUNT_ID,
17:17:48 288  	    INSTRUMENT_NAME,
17:17:48 289  	    PRIVATE_CARD_HOLDER_NAME,
17:17:48 290  	    PRIVATE_STREET_ADDRESS,
17:17:48 291  	    PRIVATE_STREET_ADDRESS2,
17:17:48 292  	    STATE,
17:17:48 293  	    CITY,
17:17:48 294  	    POSTAL_CODE,
17:17:48 295  	    COUNTRY,
17:17:48 296  	    LAST_FOUR_CC,
17:17:48 297  	    EXPIRATION_DATE,
17:17:48 298  	    CREDIT_CARD_TYPE_ID,
17:17:48 299  	    SECRET_TOKEN,
17:17:48 300  	    CHASE_PROFILE_ID,
17:17:48 301  	    CREDIT_CARD_STATUS_ID,
17:17:48 302  	    UPDATED_BY,
17:17:48 303  	    UPDATE_DATE
17:17:48 304  	    into
17:17:48 305  	    var_account_id,
17:17:48 306  	    var_instrument_name,
17:17:48 307  	    var_private_card_holder_name,
17:17:48 308  	    var_private_street_address,
17:17:48 309  	    var_private_street_address2,
17:17:48 310  	    var_state,
17:17:48 311  	    var_city,
17:17:48 312  	    var_postal_code,
17:17:48 313  	    var_country,
17:17:48 314  	    var_last_four_cc,
17:17:48 315  	    var_expiration_date,
17:17:48 316  	    var_credit_card_type_id,
17:17:48 317  	    var_secret_token,
17:17:48 318  	    var_chase_profile_id,
17:17:48 319  	    var_credit_card_status_id,
17:17:48 320  	    var_updated_by,
17:17:48 321  	    var_update_date
17:17:48 322  	  FROM
17:17:48 323  	    CREDIT_CARD
17:17:48 324  	  WHERE
17:17:48 325  	    CREDIT_CARD.ID = in_credit_card_id;
17:17:48 326  	  EXCEPTION
17:17:48 327  	    WHEN NO_DATA_FOUND THEN
17:17:48 328  	      RAISE BAD_CREDIT_CARD_ID;
17:17:48 329  	END;
17:17:48 330  
17:17:48 331  	BEGIN
17:17:48 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_CREDIT_CARD_HISTORY(
17:17:48 333  	    in_credit_card_id,
17:17:48 334  	    var_account_id,
17:17:48 335  	    var_instrument_name,
17:17:48 336  	    var_private_card_holder_name,
17:17:48 337  	    var_private_street_address,
17:17:48 338  	    var_private_street_address2,
17:17:48 339  	    var_state,
17:17:48 340  	    var_city,
17:17:48 341  	    var_postal_code,
17:17:48 342  	    var_country,
17:17:48 343  	    var_last_four_cc,
17:17:48 344  	    var_expiration_date,
17:17:48 345  	    var_credit_card_type_id,
17:17:48 346  	    var_secret_token,
17:17:48 347  	    var_chase_profile_id,
17:17:48 348  	    var_credit_card_status_id,
17:17:48 349  	    var_updated_by,
17:17:48 350  	    var_update_date,
17:17:48 351  	    in_system_activity_reason_id
17:17:48 352  	  );
17:17:48 353  	  EXCEPTION
17:17:48 354  	    WHEN OTHERS THEN
17:17:48 355  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 356  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 357  	END;
17:17:48 358  
17:17:48 359  EXCEPTION
17:17:48 360  WHEN BAD_CREDIT_CARD_ID THEN
17:17:48 361  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 362  	  SPROC_NAME, 'No such credit card');
17:17:48 363  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 364  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 366  WHEN OTHERS THEN
17:17:48 367  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 369  END CREATE_CREDIT_CARD_HISTORY;
17:17:48 370  
17:17:48 371  /********************************************************************/
17:17:48 372  
17:17:48 373  PROCEDURE CREATE_PAYPAL_HISTORY(
17:17:48 374  /*
17:17:48 375  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 376  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 377  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:48 378  */
17:17:48 379  	in_paypal_id		      IN NUMBER,
17:17:48 380  	in_system_activity_reason_id  IN NUMBER
17:17:48 381  ) AS
17:17:48 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
17:17:48 383  -- VARIABLES
17:17:48 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
17:17:48 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
17:17:48 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
17:17:48 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
17:17:48 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
17:17:48 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
17:17:48 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
17:17:48 391  var_state 		   PAYPAL.STATE%TYPE;
17:17:48 392  var_city			   PAYPAL.CITY%TYPE;
17:17:48 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
17:17:48 394  var_country		   PAYPAL.COUNTRY%TYPE;
17:17:48 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
17:17:48 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
17:17:48 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
17:17:48 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
17:17:48 399  -- EXCEPTION
17:17:48 400  BAD_PAYPAL_ID	  EXCEPTION;
17:17:48 401  CAN_NOT_ADD_HISTORY EXCEPTION;
17:17:48 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
17:17:48 403  BEGIN
17:17:48 404  
17:17:48 405  	BEGIN
17:17:48 406  	  SELECT
17:17:48 407  	    ACCOUNT_ID,
17:17:48 408  	    INSTRUMENT_NAME,
17:17:48 409  	    PRIVATE_EMAIL_ADDRESS,
17:17:48 410  	    UPDATE_DATE,
17:17:48 411  	    UPDATED_BY,
17:17:48 412  	    PAYPAL_STATUS_ID,
17:17:48 413  	    PRIVATE_STREET_ADDRESS,
17:17:48 414  	    PRIVATE_STREET_ADDRESS2,
17:17:48 415  	    STATE,
17:17:48 416  	    CITY,
17:17:48 417  	    POSTAL_CODE,
17:17:48 418  	    COUNTRY,
17:17:48 419  	    EXPIRATION_DATE,
17:17:48 420  	    SECRET_TOKEN
17:17:48 421  	  INTO
17:17:48 422  	    var_account_id,
17:17:48 423  	    var_instrument_name,
17:17:48 424  	    var_private_email_address,
17:17:48 425  	    var_update_date,
17:17:48 426  	    var_updated_by,
17:17:48 427  	    var_paypal_status_id,
17:17:48 428  	    var_paypal_prvt_street_addr,
17:17:48 429  	    var_paypal_prvt_street_addr2,
17:17:48 430  	    var_state,
17:17:48 431  	    var_city,
17:17:48 432  	    var_postal_code,
17:17:48 433  	    var_country,
17:17:48 434  	    var_expiration_date,
17:17:48 435  	    var_secret_token
17:17:48 436  	  FROM
17:17:48 437  	    PAYPAL
17:17:48 438  	  WHERE
17:17:48 439  	    ID = in_paypal_id;
17:17:48 440  	  EXCEPTION
17:17:48 441  	    WHEN NO_DATA_FOUND THEN
17:17:48 442  	      RAISE BAD_PAYPAL_ID;
17:17:48 443  	END;
17:17:48 444  
17:17:48 445  	BEGIN
17:17:48 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_PAYPAL_HISTORY(
17:17:48 447  	    in_paypal_id,
17:17:48 448  	    var_account_id,
17:17:48 449  	    var_instrument_name,
17:17:48 450  	    var_private_email_address,
17:17:48 451  	    var_updated_by,
17:17:48 452  	    var_update_date,
17:17:48 453  	    var_paypal_status_id,
17:17:48 454  	    var_paypal_prvt_street_addr,
17:17:48 455  	    var_paypal_prvt_street_addr2,
17:17:48 456  	    var_state,
17:17:48 457  	    var_city,
17:17:48 458  	    var_postal_code,
17:17:48 459  	    var_country,
17:17:48 460  	    var_expiration_date,
17:17:48 461  	    in_system_activity_reason_id,
17:17:48 462  	    var_secret_token
17:17:48 463  	  );
17:17:48 464  	  EXCEPTION
17:17:48 465  	    WHEN OTHERS THEN
17:17:48 466  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 467  	      RAISE CAN_NOT_ADD_HISTORY;
17:17:48 468  	END;
17:17:48 469  
17:17:48 470  EXCEPTION
17:17:48 471  WHEN BAD_PAYPAL_ID THEN
17:17:48 472  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 473  	  SPROC_NAME, 'No such paypal');
17:17:48 474  WHEN CAN_NOT_ADD_HISTORY THEN
17:17:48 475  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
17:17:48 477  WHEN OTHERS THEN
17:17:48 478  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 480  END CREATE_PAYPAL_HISTORY;
17:17:48 481  
17:17:48 482  /********************************************************************/
17:17:48 483  
17:17:48 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
17:17:48 485  	in_gift_certificate_id	      IN NUMBER,
17:17:48 486  	in_system_activity_reason_id  IN NUMBER
17:17:48 487  ) AS
17:17:48 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
17:17:48 489  -- VARIABLES
17:17:48 490  var_purchaser_group_id	     NUMBER;
17:17:48 491  var_purchase_invoice_id	     NUMBER;
17:17:48 492  var_offer_chain_id	     NUMBER;
17:17:48 493  var_expiration_date	     DATE;
17:17:48 494  var_purchase_date 	     DATE;
17:17:48 495  var_gift_certificate_status_id NUMBER;
17:17:48 496  var_code			     VARCHAR2(255);
17:17:48 497  var_recipient_name	     VARCHAR2(255);
17:17:48 498  var_gift_message		     VARCHAR2(500);
17:17:48 499  var_recipient_email	     VARCHAR2(255);
17:17:48 500  var_finalized_invoice_id	     NUMBER;
17:17:48 501  var_sender_email		     VARCHAR2(50);
17:17:48 502  var_sender_name		     VARCHAR2(50);
17:17:48 503  var_redemption_date	     DATE;
17:17:48 504  var_redeemer_group_id	     NUMBER;
17:17:48 505  var_cancelation_date	     DATE;
17:17:48 506  var_updated_by		     VARCHAR2(255);
17:17:48 507  var_update_date		     DATE;
17:17:48 508  var_recipient_address_id	     NUMBER;
17:17:48 509  var_redeemer_address_id	     NUMBER;
17:17:48 510  var_recipient_notify_date      DATE;
17:17:48 511  -- EXCEPTIONS
17:17:48 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
17:17:48 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
17:17:48 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:48 515  BEGIN
17:17:48 516  
17:17:48 517  	BEGIN
17:17:48 518  	  SELECT
17:17:48 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
17:17:48 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
17:17:48 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
17:17:48 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
17:17:48 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
17:17:48 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
17:17:48 525  	    GIFT_CERTIFICATE.CODE,
17:17:48 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
17:17:48 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
17:17:48 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
17:17:48 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
17:17:48 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
17:17:48 531  	    GIFT_CERTIFICATE.SENDER_NAME,
17:17:48 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
17:17:48 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
17:17:48 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
17:17:48 535  	    GIFT_CERTIFICATE.UPDATED_BY,
17:17:48 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
17:17:48 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
17:17:48 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
17:17:48 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
17:17:48 540  	    into
17:17:48 541  	    var_purchaser_group_id,
17:17:48 542  	    var_purchase_invoice_id,
17:17:48 543  	    var_offer_chain_id,
17:17:48 544  	    var_expiration_date,
17:17:48 545  	    var_purchase_date,
17:17:48 546  	    var_gift_certificate_status_id,
17:17:48 547  	    var_code,
17:17:48 548  	    var_recipient_name,
17:17:48 549  	    var_gift_message,
17:17:48 550  	    var_recipient_email,
17:17:48 551  	    var_finalized_invoice_id,
17:17:48 552  	    var_sender_email,
17:17:48 553  	    var_sender_name,
17:17:48 554  	    var_redemption_date,
17:17:48 555  	    var_redeemer_group_id,
17:17:48 556  	    var_cancelation_date,
17:17:48 557  	    var_updated_by,
17:17:48 558  	    var_update_date,
17:17:48 559  	    var_recipient_address_id,
17:17:48 560  	    var_redeemer_address_id,
17:17:48 561  	    var_recipient_notify_date
17:17:48 562  	  FROM
17:17:48 563  	    GIFT_CERTIFICATE
17:17:48 564  	  WHERE
17:17:48 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
17:17:48 566  	END;
17:17:48 567  
17:17:48 568  	BEGIN
17:17:48 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_GIFT_CERT_HISTORY(
17:17:48 570  	    in_gift_certificate_id,
17:17:48 571  	    var_purchaser_group_id,
17:17:48 572  	    var_purchase_invoice_id,
17:17:48 573  	    var_offer_chain_id,
17:17:48 574  	    var_expiration_date,
17:17:48 575  	    var_purchase_date,
17:17:48 576  	    var_gift_certificate_status_id,
17:17:48 577  	    var_code,
17:17:48 578  	    var_updated_by,
17:17:48 579  	    var_update_date,
17:17:48 580  	    in_system_activity_reason_id,
17:17:48 581  	    var_recipient_name,
17:17:48 582  	    var_gift_message,
17:17:48 583  	    var_recipient_email,
17:17:48 584  	    var_finalized_invoice_id,
17:17:48 585  	    var_sender_email,
17:17:48 586  	    var_sender_name,
17:17:48 587  	    var_redemption_date,
17:17:48 588  	    var_redeemer_group_id,
17:17:48 589  	    var_cancelation_date,
17:17:48 590  	    var_recipient_address_id,
17:17:48 591  	    var_redeemer_address_id,
17:17:48 592  	    var_recipient_notify_date
17:17:48 593  	  );
17:17:48 594  	  EXCEPTION
17:17:48 595  	    WHEN OTHERS THEN
17:17:48 596  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 597  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 598  	END;
17:17:48 599  
17:17:48 600  EXCEPTION
17:17:48 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
17:17:48 602  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 603  	  SPROC_NAME, 'No such gift certificate');
17:17:48 604  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 605  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 607  WHEN OTHERS THEN
17:17:48 608  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 610  END CREATE_GIFT_CERT_HISTORY;
17:17:48 611  
17:17:48 612  /********************************************************************/
17:17:48 613  
17:17:48 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
17:17:48 615  	in_transaction_id	     IN NUMBER,
17:17:48 616  	in_system_activity_reason_id IN NUMBER
17:17:48 617  ) AS
17:17:48 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
17:17:48 619  -- VARIABLES
17:17:48 620  var_transaction_status_id NUMBER;
17:17:48 621  var_transaction_amount	NUMBER(10,2);
17:17:48 622  var_updated_by		VARCHAR2(255);
17:17:48 623  var_update_date		DATE;
17:17:48 624  -- EXCEPTIONS
17:17:48 625  BAD_TRANSACTION_ID     EXCEPTION;
17:17:48 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 628  BEGIN
17:17:48 629  
17:17:48 630  	BEGIN
17:17:48 631  	  SELECT
17:17:48 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
17:17:48 633  	    TRANSACTION.TRANSACTION_AMOUNT,
17:17:48 634  	    TRANSACTION.UPDATED_BY,
17:17:48 635  	    TRANSACTION.UPDATE_DATE
17:17:48 636  	    into
17:17:48 637  	    var_transaction_status_id,
17:17:48 638  	    var_transaction_amount,
17:17:48 639  	    var_updated_by,
17:17:48 640  	    var_update_date
17:17:48 641  	  FROM
17:17:48 642  	    TRANSACTION
17:17:48 643  	  WHERE
17:17:48 644  	    TRANSACTION.ID = in_transaction_id;
17:17:48 645  	  EXCEPTION
17:17:48 646  	    WHEN NO_DATA_FOUND THEN
17:17:48 647  	      RAISE BAD_TRANSACTION_ID;
17:17:48 648  	END;
17:17:48 649  
17:17:48 650  	BEGIN
17:17:48 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_TRANSACTION_HISTORY(
17:17:48 652  	    in_transaction_id,
17:17:48 653  	    var_transaction_status_id,
17:17:48 654  	    var_transaction_amount,
17:17:48 655  	    var_updated_by,
17:17:48 656  	    var_update_date,
17:17:48 657  	    in_system_activity_reason_id
17:17:48 658  	  );
17:17:48 659  	  EXCEPTION
17:17:48 660  	    WHEN OTHERS THEN
17:17:48 661  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 662  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 663  	END;
17:17:48 664  
17:17:48 665  EXCEPTION
17:17:48 666  WHEN BAD_TRANSACTION_ID THEN
17:17:48 667  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 668  	  SPROC_NAME, 'No such transaction');
17:17:48 669  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 670  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 672  WHEN OTHERS THEN
17:17:48 673  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 675  END CREATE_TRANSACTION_HISTORY;
17:17:48 676  
17:17:48 677  /********************************************************************/
17:17:48 678  
17:17:48 679  PROCEDURE CREATE_INVOICE_HISTORY (
17:17:48 680  /*
17:17:48 681  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 682  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 683  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:48 684  */
17:17:48 685  	in_invoice_id		     IN NUMBER,
17:17:48 686  	in_system_activity_reason_id IN NUMBER
17:17:48 687  ) AS
17:17:48 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
17:17:48 689  -- VARIABLES
17:17:48 690  var_invoice_status_id NUMBER;
17:17:48 691  var_updated_by	    VARCHAR2(255);
17:17:48 692  var_update_date	    DATE;
17:17:48 693  -- EXCEPTIONS
17:17:48 694  BAD_INVOICE_ID	     EXCEPTION;
17:17:48 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 697  BEGIN
17:17:48 698  
17:17:48 699  	BEGIN
17:17:48 700  	  SELECT
17:17:48 701  	    INVOICE.INVOICE_STATUS_ID,
17:17:48 702  	    INVOICE.UPDATED_BY,
17:17:48 703  	    INVOICE.UPDATE_DATE
17:17:48 704  	    into
17:17:48 705  	    var_invoice_status_id,
17:17:48 706  	    var_updated_by,
17:17:48 707  	    var_update_date
17:17:48 708  	  FROM
17:17:48 709  	    INVOICE
17:17:48 710  	  WHERE
17:17:48 711  	    INVOICE.ID = in_invoice_id;
17:17:48 712  	  EXCEPTION
17:17:48 713  	    WHEN NO_DATA_FOUND THEN
17:17:48 714  	      RAISE BAD_INVOICE_ID;
17:17:48 715  	END;
17:17:48 716  
17:17:48 717  	BEGIN
17:17:48 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_INVOICE_HISTORY(
17:17:48 719  	    in_invoice_id,
17:17:48 720  	    var_invoice_status_id,
17:17:48 721  	    var_updated_by,
17:17:48 722  	    var_update_date,
17:17:48 723  	    in_system_activity_reason_id
17:17:48 724  	  );
17:17:48 725  	  EXCEPTION
17:17:48 726  	    WHEN OTHERS THEN
17:17:48 727  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 728  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 729  	END;
17:17:48 730  
17:17:48 731  EXCEPTION
17:17:48 732  WHEN BAD_INVOICE_ID THEN
17:17:48 733  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 734  	  SPROC_NAME, 'No such invoice');
17:17:48 735  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 736  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 738  WHEN OTHERS THEN
17:17:48 739  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 741  END CREATE_INVOICE_HISTORY;
17:17:48 742  
17:17:48 743  /********************************************************************/
17:17:48 744  
17:17:48 745  PROCEDURE CREATE_LICENSE_HISTORY (
17:17:48 746  /*
17:17:48 747  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 748  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 749  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:48 750  */
17:17:48 751  	in_license_id		     IN NUMBER,
17:17:48 752  	in_system_activity_reason_id IN NUMBER
17:17:48 753  ) AS
17:17:48 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
17:17:48 755  -- VARIABLES
17:17:48 756  var_license_status_id	    NUMBER;
17:17:48 757  var_needs_entitlements	    NUMBER;
17:17:48 758  var_start_date		    DATE;
17:17:48 759  var_offer_id		    NUMBER;
17:17:48 760  var_subscription_id	    NUMBER;
17:17:48 761  var_invoice_id		    NUMBER;
17:17:48 762  var_end_date		    DATE;
17:17:48 763  var_is_extension		    NUMBER;
17:17:48 764  var_current_offer_index	    NUMBER;
17:17:48 765  var_current_offer_recurr_num  NUMBER;
17:17:48 766  var_updated_by		    VARCHAR2(255);
17:17:48 767  var_update_date		    DATE;
17:17:48 768  var_entitlement_end_date	    DATE;
17:17:48 769  -- EXCEPTIONS
17:17:48 770  BAD_LICENSE_ID	     EXCEPTION;
17:17:48 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 773  BEGIN
17:17:48 774  
17:17:48 775  	BEGIN
17:17:48 776  	  SELECT
17:17:48 777  	    LICENSE.LICENSE_STATUS_ID,
17:17:48 778  	    LICENSE.NEEDS_ENTITLEMENTS,
17:17:48 779  	    LICENSE.START_DATE,
17:17:48 780  	    LICENSE.OFFER_ID,
17:17:48 781  	    LICENSE.SUBSCRIPTION_ID,
17:17:48 782  	    LICENSE.INVOICE_ID,
17:17:48 783  	    LICENSE.END_DATE,
17:17:48 784  	    LICENSE.IS_EXTENSION,
17:17:48 785  	    LICENSE.CURRENT_OFFER_INDEX,
17:17:48 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:48 787  	    LICENSE.UPDATED_BY,
17:17:48 788  	    LICENSE.UPDATE_DATE,
17:17:48 789  	    LICENSE.ENTITLEMENT_END_DATE
17:17:48 790  	    into
17:17:48 791  	    var_license_status_id,
17:17:48 792  	    var_needs_entitlements,
17:17:48 793  	    var_start_date,
17:17:48 794  	    var_offer_id,
17:17:48 795  	    var_subscription_id,
17:17:48 796  	    var_invoice_id,
17:17:48 797  	    var_end_date,
17:17:48 798  	    var_is_extension,
17:17:48 799  	    var_current_offer_index,
17:17:48 800  	    var_current_offer_recurr_num,
17:17:48 801  	    var_updated_by,
17:17:48 802  	    var_update_date,
17:17:48 803  	    var_entitlement_end_date
17:17:48 804  	  FROM
17:17:48 805  	    LICENSE
17:17:48 806  	  WHERE
17:17:48 807  	    LICENSE.ID = in_license_id;
17:17:48 808  	  EXCEPTION
17:17:48 809  	    WHEN NO_DATA_FOUND THEN
17:17:48 810  	      RAISE BAD_LICENSE_ID;
17:17:48 811  	END;
17:17:48 812  
17:17:48 813  	BEGIN
17:17:48 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_LICENSE_HISTORY(
17:17:48 815  	    in_license_id,
17:17:48 816  	    var_license_status_id,
17:17:48 817  	    var_needs_entitlements,
17:17:48 818  	    var_start_date,
17:17:48 819  	    var_offer_id,
17:17:48 820  	    var_subscription_id,
17:17:48 821  	    var_invoice_id,
17:17:48 822  	    var_end_date,
17:17:48 823  	    var_updated_by,
17:17:48 824  	    var_update_date,
17:17:48 825  	    var_is_extension,
17:17:48 826  	    var_current_offer_index,
17:17:48 827  	    var_current_offer_recurr_num,
17:17:48 828  	    in_system_activity_reason_id,
17:17:48 829  	    var_entitlement_end_date
17:17:48 830  	  );
17:17:48 831  	  EXCEPTION
17:17:48 832  	    WHEN OTHERS THEN
17:17:48 833  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 834  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 835  	END;
17:17:48 836  
17:17:48 837  EXCEPTION
17:17:48 838  WHEN BAD_LICENSE_ID THEN
17:17:48 839  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 840  	  SPROC_NAME, 'No such license');
17:17:48 841  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 842  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 844  WHEN OTHERS THEN
17:17:48 845  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 847  END CREATE_LICENSE_HISTORY;
17:17:48 848  
17:17:48 849  /********************************************************************/
17:17:48 850  
17:17:48 851  PROCEDURE CREATE_CHARGE_HISTORY (
17:17:48 852  /*
17:17:48 853  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 854  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 855  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:48 856  */
17:17:48 857  	in_charge_id		    IN NUMBER,
17:17:48 858  	in_system_activity_reason_id IN NUMBER
17:17:48 859  ) AS
17:17:48 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
17:17:48 861  -- VARIABLES
17:17:48 862  var_invoice_id	     NUMBER;
17:17:48 863  var_transaction_id     NUMBER;
17:17:48 864  var_instrument_type_id NUMBER;
17:17:48 865  var_instrument_id      NUMBER;
17:17:48 866  var_charge_amount      NUMBER;
17:17:48 867  var_charge_status_id   NUMBER;
17:17:48 868  var_updated_by	     VARCHAR2(255);
17:17:48 869  var_update_date	     DATE;
17:17:48 870  -- EXCEPTIONS
17:17:48 871  BAD_CHARGE_ID	     EXCEPTION;
17:17:48 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
17:17:48 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 874  BEGIN
17:17:48 875  
17:17:48 876  	BEGIN
17:17:48 877  	  SELECT
17:17:48 878  	    CHARGE.INVOICE_ID,
17:17:48 879  	    CHARGE.TRANSACTION_ID,
17:17:48 880  	    CHARGE.INSTRUMENT_TYPE_ID,
17:17:48 881  	    CHARGE.INSTRUMENT_ID,
17:17:48 882  	    CHARGE.CHARGE_AMOUNT,
17:17:48 883  	    CHARGE.CHARGE_STATUS_ID,
17:17:48 884  	    CHARGE.UPDATED_BY,
17:17:48 885  	    CHARGE.UPDATE_DATE
17:17:48 886  	    into
17:17:48 887  	    var_invoice_id,
17:17:48 888  	    var_transaction_id,
17:17:48 889  	    var_instrument_type_id,
17:17:48 890  	    var_instrument_id,
17:17:48 891  	    var_charge_amount,
17:17:48 892  	    var_charge_status_id,
17:17:48 893  	    var_updated_by,
17:17:48 894  	    var_update_date
17:17:48 895  	  FROM
17:17:48 896  	    CHARGE
17:17:48 897  	  WHERE
17:17:48 898  	    CHARGE.ID = in_charge_id;
17:17:48 899  	  EXCEPTION
17:17:48 900  	    WHEN NO_DATA_FOUND THEN
17:17:48 901  	      RAISE BAD_CHARGE_ID;
17:17:48 902  	END;
17:17:48 903  
17:17:48 904  	BEGIN
17:17:48 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_CHARGE_HISTORY (
17:17:48 906  	    in_charge_id,
17:17:48 907  	    var_invoice_id,
17:17:48 908  	    var_transaction_id,
17:17:48 909  	    var_instrument_type_id,
17:17:48 910  	    var_instrument_id,
17:17:48 911  	    var_charge_amount,
17:17:48 912  	    var_updated_by,
17:17:48 913  	    var_update_date,
17:17:48 914  	    var_charge_status_id,
17:17:48 915  	    in_system_activity_reason_id
17:17:48 916  	  );
17:17:48 917  	  EXCEPTION
17:17:48 918  	    WHEN OTHERS THEN
17:17:48 919  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 920  	      RAISE CAN_NOT_CREATE_HISTORY;
17:17:48 921  	END;
17:17:48 922  
17:17:48 923  EXCEPTION
17:17:48 924  WHEN BAD_CHARGE_ID THEN
17:17:48 925  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 926  	  SPROC_NAME, 'No such license');
17:17:48 927  WHEN CAN_NOT_CREATE_HISTORY THEN
17:17:48 928  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
17:17:48 930  WHEN OTHERS THEN
17:17:48 931  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 933  END CREATE_CHARGE_HISTORY;
17:17:48 934  
17:17:48 935  END PROCS_HISTORY_V15;
17:17:48 936  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.06
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   7  */
17:17:48   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:48   9  	out_result_set	    OUT SYS_REFCURSOR
17:17:48  10  ) AS
17:17:48  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
17:17:48  12  BEGIN
17:17:48  13  OPEN out_result_set FOR
17:17:48  14  	      SELECT
17:17:48  15  	      i.id as ITUNES_RECEIPT_ID,
17:17:48  16  	      s.id as SUBSCRIPTION_ID,
17:17:48  17  	      s.SUBSCRIPTION_STATUS_ID,
17:17:48  18  	      i.STATUS,
17:17:48  19  	      a.GROUP_ID
17:17:48  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
17:17:48  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
17:17:48  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
17:17:48  23  	      AND a.ID(+) = s.ACCOUNT_ID;
17:17:48  24  END ITUNES_RECEIPT_SUBSCRIPTION;
17:17:48  25  
17:17:48  26  
17:17:48  27  PROCEDURE CREATE_RECEIPT(
17:17:48  28  /*
17:17:48  29  Throws exceptions:
17:17:48  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48  31  */
17:17:48  32  	  out_id      OUT NUMBER,
17:17:48  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:48  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:48  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
17:17:48  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:48  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:48  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:48  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:48  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:48  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:48  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:48  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:48  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
17:17:48  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
17:17:48  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:48  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
17:17:48  48  ) AS
17:17:48  49  -- VARIABLES
17:17:48  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
17:17:48  51  -- EXCEPTIONS
17:17:48  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48  53  BEGIN
17:17:48  54  
17:17:48  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.CREATE_RECEIPT(
17:17:48  56  	  out_id	      =>  out_id,
17:17:48  57  	  in_subscription_id  =>  in_subscription_id,
17:17:48  58  	  in_receipt	      =>  in_receipt,
17:17:48  59  	  in_status	      =>  in_status,
17:17:48  60  	  in_quantity	      =>  in_quantity,
17:17:48  61  	  in_product_id       =>  in_product_id,
17:17:48  62  	  in_transaction_id   =>  in_transaction_id,
17:17:48  63  	  in_purchase_date    =>  in_purchase_date,
17:17:48  64  	  in_original_transaction_id  =>  in_original_transaction_id,
17:17:48  65  	  in_original_purchase_date => in_original_purchase_date,
17:17:48  66  	  in_app_item_id      =>  in_app_item_id,
17:17:48  67  	  in_version_external_id  =>  in_version_external_id,
17:17:48  68  	  in_bid	      =>  in_bid,
17:17:48  69  	  in_bvrs	      =>  in_bvrs,
17:17:48  70  	  in_expires_date     =>  in_expires_date,
17:17:48  71  	  in_created_by       =>  in_created_by
17:17:48  72  	);
17:17:48  73  
17:17:48  74  END CREATE_RECEIPT;
17:17:48  75  
17:17:48  76  PROCEDURE UPDATE_RECEIPT(
17:17:48  77  /*
17:17:48  78  Throws exceptions:
17:17:48  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48  80  */
17:17:48  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
17:17:48  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
17:17:48  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
17:17:48  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
17:17:48  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
17:17:48  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
17:17:48  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
17:17:48  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
17:17:48  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
17:17:48  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
17:17:48  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
17:17:48  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
17:17:48  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
17:17:48  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
17:17:48  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
17:17:48  96  	  in_is_expired       IN NUMBER
17:17:48  97  ) AS
17:17:48  98  CANCEL_DATE DATE;
17:17:48  99  BEGIN
17:17:48 100  	-- see if cancel date is already set
17:17:48 101  	BEGIN
17:17:48 102  	  SELECT
17:17:48 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
17:17:48 104  	  FROM
17:17:48 105  	    ITUNES_RECEIPT IR
17:17:48 106  	  WHERE
17:17:48 107  	    IR.ID = in_id;
17:17:48 108  	EXCEPTION
17:17:48 109  	  WHEN NO_DATA_FOUND THEN
17:17:48 110  	    CANCEL_DATE := NULL;
17:17:48 111  	END;
17:17:48 112  
17:17:48 113  	-- only update cancel date if it isn't already set and the receipt is expired
17:17:48 114  	IF in_is_expired = 1 THEN
17:17:48 115  	  IF CANCEL_DATE IS NULL THEN
17:17:48 116  	    CANCEL_DATE := SYSDATE;
17:17:48 117  	  END IF;
17:17:48 118  	ELSE
17:17:48 119  	  CANCEL_DATE := NULL;
17:17:48 120  	END IF;
17:17:48 121  
17:17:48 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.UPDATE_RECEIPT(
17:17:48 123  	  in_id => in_id,
17:17:48 124  	  in_receipt => in_receipt,
17:17:48 125  	  in_status => in_status,
17:17:48 126  	  in_quantity => in_quantity,
17:17:48 127  	  in_product_id => in_product_id,
17:17:48 128  	  in_transaction_id => in_transaction_id,
17:17:48 129  	  in_purchase_date => in_purchase_date,
17:17:48 130  	  in_original_transaction_id => in_original_transaction_id,
17:17:48 131  	  in_original_purchase_date => in_original_purchase_date,
17:17:48 132  	  in_app_item_id => in_app_item_id,
17:17:48 133  	  in_version_external_id => in_version_external_id,
17:17:48 134  	  in_bid => in_bid,
17:17:48 135  	  in_bvrs => in_bvrs,
17:17:48 136  	  in_expires_date => in_expires_date,
17:17:48 137  	  in_updated_by => in_updated_by,
17:17:48 138  	  in_cancel_date => CANCEL_DATE
17:17:48 139  	);
17:17:48 140  END UPDATE_RECEIPT;
17:17:48 141  
17:17:48 142  PROCEDURE LINK_ITUNES_RECEIPT(
17:17:48 143  /*
17:17:48 144  Throws exceptions:
17:17:48 145  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 146  */
17:17:48 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
17:17:48 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
17:17:48 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
17:17:48 150  ) AS
17:17:48 151  BEGIN
17:17:48 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.LINK_ITUNES_RECEIPT(
17:17:48 153  		      in_id => in_id,
17:17:48 154  		      in_subscription_id => in_subscription_id,
17:17:48 155  		      in_updated_by => in_updated_by
17:17:48 156  		      );
17:17:48 157  END LINK_ITUNES_RECEIPT;
17:17:48 158  
17:17:48 159  PROCEDURE MARK_RECEIPT_CHECKED(
17:17:48 160  /*
17:17:48 161  Throws exceptions:
17:17:48 162  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 163  */
17:17:48 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
17:17:48 165  ) AS
17:17:48 166  BEGIN
17:17:48 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.MARK_RECEIPT_CHECKED(
17:17:48 168  	  in_id => in_id
17:17:48 169  	);
17:17:48 170  END MARK_RECEIPT_CHECKED;
17:17:48 171  
17:17:48 172  PROCEDURE GET_ITUNES_RECEIPTS (
17:17:48 173  /*
17:17:48 174  Throws exceptions:
17:17:48 175  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 176  */
17:17:48 177  	out_result_set	    OUT SYS_REFCURSOR,
17:17:48 178  	in_row_number	    IN NUMBER DEFAULT 500
17:17:48 179  ) AS
17:17:48 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
17:17:48 181  BEGIN
17:17:48 182  OPEN out_result_set FOR
17:17:48 183  SELECT * FROM
17:17:48 184  (
17:17:48 185  	SELECT * FROM
17:17:48 186  	(
17:17:48 187  	  SELECT
17:17:48 188  	    IR.ID,
17:17:48 189  	    IR.SUBSCRIPTION_ID,
17:17:48 190  	    IR.RECEIPT,
17:17:48 191  	    IR.STATUS,
17:17:48 192  	    IR.QUANTITY,
17:17:48 193  	    IR.PRODUCT_ID,
17:17:48 194  	    IR.TRANSACTION_ID,
17:17:48 195  	    IR.PURCHASE_DATE,
17:17:48 196  	    IR.ORIGINAL_TRANSACTION_ID,
17:17:48 197  	    IR.ORIGINAL_PURCHASE_DATE,
17:17:48 198  	    IR.APP_ITEM_ID,
17:17:48 199  	    IR.VERSION_EXTERNAL_ID,
17:17:48 200  	    IR.BID,
17:17:48 201  	    IR.BVRS,
17:17:48 202  	    IR.EXPIRES_DATE,
17:17:48 203  	    IR.CREATE_DATe,
17:17:48 204  	    IR.CREATED_BY,
17:17:48 205  	    IR.UPDATE_DATE,
17:17:48 206  	    IR.UPDATED_BY,
17:17:48 207  	    IR.LAST_CHECK_DATE,
17:17:48 208  	    OC.VENDOR_SOURCE_ID
17:17:48 209  	  FROM
17:17:48 210  	    CORE_OWNER.ITUNES_RECEIPT IR
17:17:48 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
17:17:48 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
17:17:48 213  	  WHERE
17:17:48 214  	    NOT EXISTS
17:17:48 215  	    (
17:17:48 216  	      SELECT NULL
17:17:48 217  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:48 218  	      WHERE PROCESS_NAME = SPROC_NAME
17:17:48 219  		AND GENERIC_ID = IR.ID
17:17:48 220  	    ) AND
17:17:48 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
17:17:48 222  	    ROWNUM <= in_row_number*10
17:17:48 223  	)
17:17:48 224  	ORDER BY dbms_random.value
17:17:48 225  )
17:17:48 226  WHERE
17:17:48 227  	ROWNUM <= in_row_number;
17:17:48 228  
17:17:48 229  END GET_ITUNES_RECEIPTS;
17:17:48 230  
17:17:48 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
17:17:48 232  /*
17:17:48 233  Throws exceptions:
17:17:48 234  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 235  */
17:17:48 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
17:17:48 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
17:17:48 238  ) AS
17:17:48 239  BEGIN
17:17:48 240  
17:17:48 241  SELECT
17:17:48 242  	  oc.vendor_source_id
17:17:48 243  INTO
17:17:48 244  	  out_vendor_source_id
17:17:48 245  FROM
17:17:48 246  	  offer_chain_meta_data ocmd
17:17:48 247  JOIN
17:17:48 248  	  offer_chain oc
17:17:48 249  ON
17:17:48 250  	  ocmd.offer_chain_id = oc.id
17:17:48 251  WHERE
17:17:48 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
17:17:48 253  AND ocmd.value = in_itunes_pid
17:17:48 254  AND rownum <= 1;
17:17:48 255  
17:17:48 256  END GET_VENDOR_FROM_ITUNES_PID;
17:17:48 257  
17:17:48 258  END PROCS_ITUNES_RECEIPT_V15;
17:17:48 259  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE ADD_LINE_ITEMS(
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   8  */
17:17:48   9  	in_invoice_id IN NUMBER,
17:17:48  10  	in_offer_id   IN NUMBER,
17:17:48  11  	in_created_by IN VARCHAR2
17:17:48  12  ) AS
17:17:48  13  -- VARIABLES
17:17:48  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
17:17:48  15  temp_invoice_id NUMBER;
17:17:48  16  temp_offer_id   NUMBER;
17:17:48  17  
17:17:48  18  var_line_item_data SYS_REFCURSOR;
17:17:48  19  var_new_line_item_id NUMBER;
17:17:48  20  var_product_unit_price NUMBER (10,6);
17:17:48  21  var_product_offering_price NUMBER(10,6);
17:17:48  22  var_product_offering_oprice NUMBER(10,6);
17:17:48  23  var_product_quantity NUMBER;
17:17:48  24  var_product_offering_id NUMBER;
17:17:48  25  
17:17:48  26  var_line_item_price	  NUMBER(10,2);
17:17:48  27  var_discount_fixed_amount   NUMBER(10,6);
17:17:48  28  var_discount_percent_amount NUMBER(10,2);
17:17:48  29  
17:17:48  30  
17:17:48  31  -- EXCEPTIONS
17:17:48  32  BAD_INVOICE_ID EXCEPTION;
17:17:48  33  BAD_OFFER_ID EXCEPTION;
17:17:48  34  BAD_DISCOUNT EXCEPTION;
17:17:48  35  BEGIN
17:17:48  36  
17:17:48  37  	-- Check that given invoice exists
17:17:48  38  	BEGIN
17:17:48  39  	  SELECT
17:17:48  40  	    INVOICE.ID into temp_invoice_id
17:17:48  41  	  FROM
17:17:48  42  	    INVOICE
17:17:48  43  	  WHERE
17:17:48  44  	    INVOICE.ID = in_invoice_id;
17:17:48  45  
17:17:48  46  	  EXCEPTION
17:17:48  47  	    WHEN NO_DATA_FOUND THEN
17:17:48  48  	      RAISE BAD_INVOICE_ID;
17:17:48  49  	END;
17:17:48  50  
17:17:48  51  	-- Check that given offer exists
17:17:48  52  	BEGIN
17:17:48  53  	  SELECT
17:17:48  54  	    OFFER.ID into temp_offer_id
17:17:48  55  	  FROM
17:17:48  56  	    OFFER
17:17:48  57  	  WHERE
17:17:48  58  	    OFFER.ID = in_offer_id;
17:17:48  59  
17:17:48  60  	  EXCEPTION
17:17:48  61  	    WHEN NO_DATA_FOUND THEN
17:17:48  62  	      RAISE BAD_OFFER_ID;
17:17:48  63  	END;
17:17:48  64  
17:17:48  65  	-- Get product_offering data
17:17:48  66  	OPEN var_line_item_data FOR
17:17:48  67  	SELECT
17:17:48  68  	  PRODUCT_OFFERING.ID,
17:17:48  69  	  PRODUCT_OFFERING.UNIT_PRICE,
17:17:48  70  	  PRODUCT_OFFERING.QUANTITY
17:17:48  71  	FROM
17:17:48  72  	  OFFER_PRODUCT_OFFERING
17:17:48  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48  74  	WHERE
17:17:48  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
17:17:48  76  
17:17:48  77  	-- insert line items
17:17:48  78  	-- add discounts to line items
17:17:48  79  	LOOP
17:17:48  80  	  FETCH var_line_item_data INTO
17:17:48  81  	    var_product_offering_id,
17:17:48  82  	    var_product_unit_price,
17:17:48  83  	    var_product_quantity;
17:17:48  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
17:17:48  85  
17:17:48  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
17:17:48  87  	  var_product_offering_price := var_product_offering_oprice;
17:17:48  88  
17:17:48  89  	  -- Apply discounts to line_item
17:17:48  90  	  BEGIN
17:17:48  91  	    SELECT
17:17:48  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
17:17:48  93  	    FROM
17:17:48  94  	      DISCOUNT_PRODUCT_OFFERING
17:17:48  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
17:17:48  96  	    WHERE
17:17:48  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
17:17:48  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
17:17:48  99  	    EXCEPTION
17:17:48 100  	    WHEN NO_DATA_FOUND THEN
17:17:48 101  	      var_discount_fixed_amount := NULL;
17:17:48 102  	  END;
17:17:48 103  
17:17:48 104  	  BEGIN
17:17:48 105  	    SELECT
17:17:48 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
17:17:48 107  	    FROM
17:17:48 108  	      DISCOUNT_PRODUCT_OFFERING
17:17:48 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
17:17:48 110  	    WHERE
17:17:48 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
17:17:48 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
17:17:48 113  	    EXCEPTION
17:17:48 114  	    WHEN NO_DATA_FOUND THEN
17:17:48 115  	      var_discount_percent_amount := NULL;
17:17:48 116  	  END;
17:17:48 117  
17:17:48 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
17:17:48 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
17:17:48 120  	  END IF;
17:17:48 121  
17:17:48 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
17:17:48 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
17:17:48 124  	  END IF;
17:17:48 125  
17:17:48 126  	  var_line_item_price := PROCS_COMMON_V15.ROUND_10_6_TO_10_2(var_product_offering_price);
17:17:48 127  
17:17:48 128  	  IF (var_line_item_price < 0) THEN
17:17:48 129  	      RAISE BAD_DISCOUNT;
17:17:48 130  	  END IF;
17:17:48 131  
17:17:48 132  	  var_new_line_item_id := NULL;
17:17:48 133  	  PROCS_LINE_ITEMS_CRU_V15.CREATE_LINE_ITEM(
17:17:48 134  	    inout_line_item_id	=> var_new_line_item_id,
17:17:48 135  	    in_product_offer_id => var_product_offering_id,
17:17:48 136  	    in_invoice_id	=> in_invoice_id,
17:17:48 137  	    in_amount		=> var_line_item_price,
17:17:48 138  	    in_created_by	=> in_created_by,
17:17:48 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
17:17:48 140  	    in_taxes_amount	=> NULL
17:17:48 141  	  );
17:17:48 142  
17:17:48 143  	  FOR f_discount IN (
17:17:48 144  	    SELECT
17:17:48 145  	      DISCOUNT.ID
17:17:48 146  	    FROM
17:17:48 147  	      DISCOUNT_PRODUCT_OFFERING
17:17:48 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
17:17:48 149  	    WHERE
17:17:48 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
17:17:48 151  	  )
17:17:48 152  	  LOOP
17:17:48 153  	    PROCS_LINE_ITEMS_CRU_V15.CREATE_DISCOUNT_LINE_ITEM(
17:17:48 154  	      in_discount_id =>  f_discount.ID,
17:17:48 155  	      in_line_item_id => var_new_line_item_id
17:17:48 156  	    );
17:17:48 157  	  END LOOP;
17:17:48 158  	END LOOP;
17:17:48 159  
17:17:48 160  EXCEPTION
17:17:48 161  WHEN BAD_INVOICE_ID THEN
17:17:48 162  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 163  	  SPROC_NAME, 'No such license');
17:17:48 164  WHEN BAD_OFFER_ID THEN
17:17:48 165  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 166  	  SPROC_NAME, 'No such offer');
17:17:48 167  WHEN BAD_DISCOUNT THEN
17:17:48 168  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 169  	  SPROC_NAME, 'Bad Discount');
17:17:48 170  WHEN OTHERS THEN
17:17:48 171  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 173  END ADD_LINE_ITEMS;
17:17:48 174  
17:17:48 175  /******************************************************************************/
17:17:48 176  
17:17:48 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
17:17:48 178  	in_line_item_id    IN NUMBER,
17:17:48 179  	in_amount	   IN NUMBER,
17:17:48 180  	in_discount_amount IN NUMBER,
17:17:48 181  	in_taxes_amount    IN NUMBER
17:17:48 182  ) AS
17:17:48 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
17:17:48 184  -- VARIABLES
17:17:48 185  temp_line_item_id NUMBER;
17:17:48 186  -- EXCEPTIONS
17:17:48 187  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48 188  BEGIN
17:17:48 189  
17:17:48 190  	-- Check that line item exists
17:17:48 191  	BEGIN
17:17:48 192  	  SELECT
17:17:48 193  	    LINE_ITEM.ID into temp_line_item_id
17:17:48 194  	  FROM
17:17:48 195  	    LINE_ITEM
17:17:48 196  	  WHERE
17:17:48 197  	    LINE_ITEM.ID = in_line_item_id;
17:17:48 198  	  EXCEPTION
17:17:48 199  	    WHEN NO_DATA_FOUND THEN
17:17:48 200  	      RAISE BAD_LINE_ITEM_ID;
17:17:48 201  	END;
17:17:48 202  
17:17:48 203  	-- Update line item
17:17:48 204  	PROCS_LINE_ITEMS_CRU_V15.UPDATE_LINE_ITEM(
17:17:48 205  	  in_line_item_id    => in_line_item_id,
17:17:48 206  	  in_amount	     => in_amount,
17:17:48 207  	  in_discount_amount => in_discount_amount,
17:17:48 208  	  in_taxes_amount    => in_taxes_amount
17:17:48 209  	);
17:17:48 210  
17:17:48 211  EXCEPTION
17:17:48 212  WHEN BAD_LINE_ITEM_ID THEN
17:17:48 213  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 214  	  SPROC_NAME, 'No such line item');
17:17:48 215  WHEN OTHERS THEN
17:17:48 216  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 218  END UPDATE_LINE_ITEM_AMOUNT;
17:17:48 219  
17:17:48 220  /******************************************************************************/
17:17:48 221  
17:17:48 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:48 223  /*
17:17:48 224  Throws exceptions:
17:17:48 225  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 226  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 227  */
17:17:48 228  	in_invoice_id  IN NUMBER,
17:17:48 229  	out_result_set OUT SYS_REFCURSOR
17:17:48 230  ) AS
17:17:48 231  -- VARIABLES
17:17:48 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
17:17:48 233  temp_invoice_id NUMBER;
17:17:48 234  
17:17:48 235  -- EXCEPTIONS
17:17:48 236  BAD_INVOICE_ID EXCEPTION;
17:17:48 237  BEGIN
17:17:48 238  
17:17:48 239  	-- Check that given invoice exists
17:17:48 240  	BEGIN
17:17:48 241  	  SELECT
17:17:48 242  	    INVOICE.ID into temp_invoice_id
17:17:48 243  	  FROM
17:17:48 244  	    INVOICE
17:17:48 245  	  WHERE
17:17:48 246  	    INVOICE.ID = in_invoice_id;
17:17:48 247  	  EXCEPTION
17:17:48 248  	    WHEN NO_DATA_FOUND THEN
17:17:48 249  	      RAISE BAD_INVOICE_ID;
17:17:48 250  	END;
17:17:48 251  
17:17:48 252  	-- Select line items
17:17:48 253  	OPEN out_result_set FOR
17:17:48 254  	SELECT
17:17:48 255  	  LINE_ITEM.ID,
17:17:48 256  	  LINE_ITEM.AMOUNT,
17:17:48 257  	  LINE_ITEM.CREATE_DATE,
17:17:48 258  	  LINE_ITEM.CREATED_BY,
17:17:48 259  	  LINE_ITEM.INVOICE_ID,
17:17:48 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
17:17:48 261  	  LINE_ITEM.TAXES_AMOUNT,
17:17:48 262  	  LINE_ITEM.PRODUCT_OFFER_ID
17:17:48 263  	FROM
17:17:48 264  	  LINE_ITEM
17:17:48 265  	WHERE
17:17:48 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
17:17:48 267  
17:17:48 268  EXCEPTION
17:17:48 269  WHEN BAD_INVOICE_ID THEN
17:17:48 270  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 271  	  SPROC_NAME, 'No such invoice');
17:17:48 272  WHEN OTHERS THEN
17:17:48 273  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 275  END GET_INVOICE_LINE_ITEMS;
17:17:48 276  
17:17:48 277  /******************************************************************************/
17:17:48 278  
17:17:48 279  PROCEDURE GET_LINE_ITEM_TAXES (
17:17:48 280  /*
17:17:48 281  Throws exceptions:
17:17:48 282  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 283  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 284  */
17:17:48 285  	in_line_item_id IN  NUMBER,
17:17:48 286  	out_result_set	OUT SYS_REFCURSOR
17:17:48 287  ) AS
17:17:48 288  -- VARIABLES
17:17:48 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
17:17:48 290  temp_line_item_id NUMBER;
17:17:48 291  -- EXCEPTIONS
17:17:48 292  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48 293  BEGIN
17:17:48 294  
17:17:48 295  	-- Check that line item exists
17:17:48 296  	BEGIN
17:17:48 297  	  SELECT
17:17:48 298  	    LINE_ITEM.ID into temp_line_item_id
17:17:48 299  	  FROM
17:17:48 300  	    LINE_ITEM
17:17:48 301  	  WHERE
17:17:48 302  	    LINE_ITEM.ID = in_line_item_id;
17:17:48 303  	  EXCEPTION
17:17:48 304  	    WHEN NO_DATA_FOUND THEN
17:17:48 305  	      RAISE BAD_LINE_ITEM_ID;
17:17:48 306  	END;
17:17:48 307  
17:17:48 308  	-- Get all taxes for given line item
17:17:48 309  	OPEN out_result_set FOR
17:17:48 310  	SELECT
17:17:48 311  	  TAX.ID,
17:17:48 312  	  TAX.CALCULATED_AMOUNT,
17:17:48 313  	  TAX.CREATE_DATE,
17:17:48 314  	  TAX.CREATED_BY,
17:17:48 315  	  TAX.EFFECTIVE_RATE,
17:17:48 316  	  TAX.EXT_RESULT,
17:17:48 317  	  TAX.EXT_TAX_TYPE,
17:17:48 318  	  TAX.IMPOSITION,
17:17:48 319  	  TAX.IMPOSITION_TYPE,
17:17:48 320  	  TAX.JURISDICTION_ID,
17:17:48 321  	  TAX.JURISDICTION_LEVEL_ID,
17:17:48 322  	  TAX.JURISDICTION_NAME,
17:17:48 323  	  TAX.LINE_ITEM_ID,
17:17:48 324  	  TAX.TAX_RULE_ID,
17:17:48 325  	  TAX.TAX_TYPE_ID,
17:17:48 326  	  TAX.TAXABLE_AMOUNT
17:17:48 327  	FROM
17:17:48 328  	  TAX
17:17:48 329  	WHERE
17:17:48 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
17:17:48 331  
17:17:48 332  EXCEPTION
17:17:48 333  WHEN BAD_LINE_ITEM_ID THEN
17:17:48 334  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 335  	  SPROC_NAME, 'No such line item');
17:17:48 336  WHEN OTHERS THEN
17:17:48 337  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 339  END GET_LINE_ITEM_TAXES;
17:17:48 340  
17:17:48 341  -- norlov: #38770
17:17:48 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
17:17:48 343  /*
17:17:48 344  Throws exceptions:
17:17:48 345  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 346  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 347  */
17:17:48 348  	in_line_item_id IN  NUMBER,
17:17:48 349  	out_result_set	OUT SYS_REFCURSOR
17:17:48 350  ) AS
17:17:48 351  -- VARIABLES
17:17:48 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
17:17:48 353  temp_line_item_id NUMBER;
17:17:48 354  -- EXCEPTIONS
17:17:48 355  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48 356  BEGIN
17:17:48 357  
17:17:48 358  	-- Check that line item exists
17:17:48 359  	BEGIN
17:17:48 360  	  SELECT
17:17:48 361  	    LINE_ITEM.ID into temp_line_item_id
17:17:48 362  	  FROM
17:17:48 363  	    LINE_ITEM
17:17:48 364  	  WHERE
17:17:48 365  	    LINE_ITEM.ID = in_line_item_id;
17:17:48 366  	  EXCEPTION
17:17:48 367  	    WHEN NO_DATA_FOUND THEN
17:17:48 368  	      RAISE BAD_LINE_ITEM_ID;
17:17:48 369  	END;
17:17:48 370  
17:17:48 371  	-- Get all discounts for given line item
17:17:48 372  	OPEN out_result_set FOR
17:17:48 373  	SELECT
17:17:48 374  	  DISCOUNT.FIXED_AMOUNT,
17:17:48 375  	  DISCOUNT.NAME,
17:17:48 376  	  DISCOUNT.ID,
17:17:48 377  	  DISCOUNT.PERCENT_AMOUNT
17:17:48 378  	FROM
17:17:48 379  	  DISCOUNT_LINE_ITEM
17:17:48 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
17:17:48 381  	WHERE
17:17:48 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
17:17:48 383  
17:17:48 384  EXCEPTION
17:17:48 385  WHEN BAD_LINE_ITEM_ID THEN
17:17:48 386  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 387  	  SPROC_NAME, 'No such line item');
17:17:48 388  WHEN OTHERS THEN
17:17:48 389  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 391  END GET_LINE_ITEM_DISCOUNTS;
17:17:48 392  /******************************************************************************/
17:17:48 393  
17:17:48 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
17:17:48 395  /*
17:17:48 396  Throws exceptions:
17:17:48 397  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 398  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 399  */
17:17:48 400  	in_line_item_id     IN	NUMBER,
17:17:48 401  	out_amount	    OUT NUMBER
17:17:48 402  ) AS
17:17:48 403  -- VARIABLES
17:17:48 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
17:17:48 405  -- EXCEPTIONS
17:17:48 406  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48 407  BEGIN
17:17:48 408  
17:17:48 409  	BEGIN
17:17:48 410  	  SELECT
17:17:48 411  	    LINE_ITEM.AMOUNT into out_amount
17:17:48 412  	  FROM
17:17:48 413  	    LINE_ITEM
17:17:48 414  	  WHERE
17:17:48 415  	    LINE_ITEM.ID = in_line_item_id;
17:17:48 416  	  EXCEPTION
17:17:48 417  	    WHEN NO_DATA_FOUND THEN
17:17:48 418  	      RAISE BAD_LINE_ITEM_ID;
17:17:48 419  	END;
17:17:48 420  
17:17:48 421  EXCEPTION
17:17:48 422  WHEN BAD_LINE_ITEM_ID THEN
17:17:48 423  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 424  	  SPROC_NAME, 'No such line item');
17:17:48 425  WHEN OTHERS THEN
17:17:48 426  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 428  END CALCULATE_LINE_ITEM_AMOUNT;
17:17:48 429  
17:17:48 430  /******************************************************************************/
17:17:48 431  
17:17:48 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
17:17:48 433  /*
17:17:48 434  Throws exceptions:
17:17:48 435  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 436  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 437  */
17:17:48 438  	in_line_item_id     IN	NUMBER
17:17:48 439  ) RETURN NUMBER AS
17:17:48 440  var_invoice_amount NUMBER(10, 2);
17:17:48 441  BEGIN
17:17:48 442  	PROCS_LINE_ITEMS_V15.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
17:17:48 443  	RETURN var_invoice_amount;
17:17:48 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
17:17:48 445  
17:17:48 446  END PROCS_LINE_ITEMS_V15;
17:17:48 447  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V15" AS
17:17:48   2  
17:17:48   3  /*
17:17:48   4  PROCEDURE INITIALIZE_SYSTEM AS
17:17:48   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
17:17:48   6  -- VARIABLES
17:17:48   7  var_account_ids SYS_REFCURSOR;
17:17:48   8  var_account_id  NUMBER;
17:17:48   9  BEGIN
17:17:48  10  
17:17:48  11  	OPEN var_account_ids FOR
17:17:48  12  	SELECT
17:17:48  13  	  ACCOUNT.ID
17:17:48  14  	FROM
17:17:48  15  	  ACCOUNT;
17:17:48  16  
17:17:48  17  	LOOP
17:17:48  18  	  FETCH var_account_ids into var_account_id;
17:17:48  19  	  EXIT WHEN var_account_ids%NOTFOUND;
17:17:48  20  	  BEGIN
17:17:48  21  	    INITIALIZE_ACCOUNT(var_account_id);
17:17:48  22  	    EXCEPTION
17:17:48  23  	      WHEN OTHERS THEN
17:17:48  24  		NULL;
17:17:48  25  	  END;
17:17:48  26  	END LOOP;
17:17:48  27  
17:17:48  28  END INITIALIZE_SYSTEM;
17:17:48  29  
17:17:48  30  PROCEDURE INITIALIZE_ACCOUNT (
17:17:48  31  	in_account_id IN NUMBER
17:17:48  32  ) AS
17:17:48  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
17:17:48  34  -- EXCEPTIONS
17:17:48  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
17:17:48  36  BEGIN
17:17:48  37  
17:17:48  38  	BEGIN
17:17:48  39  	  INSERT INTO ACCOUNT_LOCK(
17:17:48  40  	    ACCOUNT_ID,
17:17:48  41  	    LOCK_KEY,
17:17:48  42  	    END_DATE,
17:17:48  43  	    CREATED_BY,
17:17:48  44  	    REASON
17:17:48  45  	  ) VALUES (
17:17:48  46  	    in_account_id,
17:17:48  47  	    'initialization key',
17:17:48  48  	    SYSDATE,
17:17:48  49  	    'system',
17:17:48  50  	    'initialization'
17:17:48  51  	  );
17:17:48  52  	  EXCEPTION
17:17:48  53  	    WHEN DUP_VAL_ON_INDEX THEN
17:17:48  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
17:17:48  55  	END;
17:17:48  56  
17:17:48  57  EXCEPTION
17:17:48  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
17:17:48  59  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:48  60  	  SPROC_NAME, 'Account already initialized');
17:17:48  61  WHEN OTHERS THEN
17:17:48  62  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  64  END;
17:17:48  65  
17:17:48  66  PROCEDURE INITIALIZE_GROUP (
17:17:48  67  	in_group_id IN NUMBER
17:17:48  68  ) AS
17:17:48  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
17:17:48  70  -- VARIABLES
17:17:48  71  var_account_id NUMBER;
17:17:48  72  -- EXCEPTIONS
17:17:48  73  BAD_GROUP_ID		EXCEPTION;
17:17:48  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
17:17:48  75  BEGIN
17:17:48  76  
17:17:48  77  	BEGIN
17:17:48  78  	  SELECT
17:17:48  79  	    ACCOUNT.ID into var_account_id
17:17:48  80  	  FROM
17:17:48  81  	    ACCOUNT
17:17:48  82  	  WHERE
17:17:48  83  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:48  84  	  EXCEPTION
17:17:48  85  	    WHEN NO_DATA_FOUND THEN
17:17:48  86  	     RAISE BAD_GROUP_ID;
17:17:48  87  	END;
17:17:48  88  
17:17:48  89  	BEGIN
17:17:48  90  	  INSERT INTO ACCOUNT_LOCK (
17:17:48  91  	    ACCOUNT_ID,
17:17:48  92  	    LOCK_KEY,
17:17:48  93  	    END_DATE,
17:17:48  94  	    CREATED_BY,
17:17:48  95  	    REASON
17:17:48  96  	  ) VALUES (
17:17:48  97  	    var_account_id,
17:17:48  98  	    'initialization key',
17:17:48  99  	    SYSDATE,
17:17:48 100  	    'system',
17:17:48 101  	    'initialization'
17:17:48 102  	  );
17:17:48 103  	  EXCEPTION
17:17:48 104  	    WHEN DUP_VAL_ON_INDEX THEN
17:17:48 105  	      RAISE GROUP_ALREADY_INITIALIZED;
17:17:48 106  	END;
17:17:48 107  
17:17:48 108  EXCEPTION
17:17:48 109  WHEN BAD_GROUP_ID THEN
17:17:48 110  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 111  	  SPROC_NAME, 'No such account with given group id');
17:17:48 112  WHEN GROUP_ALREADY_INITIALIZED THEN
17:17:48 113  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:48 114  	  SPROC_NAME, 'Group already initialized');
17:17:48 115  WHEN OTHERS THEN
17:17:48 116  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 118  END INITIALIZE_GROUP;
17:17:48 119  */
17:17:48 120  
17:17:48 121  PROCEDURE LOCK_ACCOUNT (
17:17:48 122  	in_group_id    IN NUMBER,
17:17:48 123  	in_lock_key    IN VARCHAR2,
17:17:48 124  	in_seconds_num IN NUMBER,
17:17:48 125  	in_created_by  IN VARCHAR2,
17:17:48 126  	in_reason      IN VARCHAR2
17:17:48 127  ) AS
17:17:48 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
17:17:48 129  -- CONSTANTS
17:17:48 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
17:17:48 131  -- VARIABLES
17:17:48 132  var_account_id NUMBER;
17:17:48 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:48 134  var_date		DATE := SYSDATE;
17:17:48 135  var_lock_end_date DATE;
17:17:48 136  -- EXCEPTIONS
17:17:48 137  BAD_GROUP_ID   EXCEPTION;
17:17:48 138  ALREADY_LOCKED EXCEPTION;
17:17:48 139  BEGIN
17:17:48 140  
17:17:48 141  	BEGIN
17:17:48 142  	  SELECT
17:17:48 143  	    ACCOUNT.ID into var_account_id
17:17:48 144  	  FROM
17:17:48 145  	    ACCOUNT
17:17:48 146  	  WHERE
17:17:48 147  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:48 148  	  EXCEPTION
17:17:48 149  	    WHEN NO_DATA_FOUND THEN
17:17:48 150  	      RAISE BAD_GROUP_ID;
17:17:48 151  	END;
17:17:48 152  
17:17:48 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
17:17:48 154  
17:17:48 155  	BEGIN
17:17:48 156  
17:17:48 157  	  INSERT INTO ACCOUNT_LOCK (
17:17:48 158  	    ACCOUNT_ID,
17:17:48 159  	    LOCK_KEY,
17:17:48 160  	    END_DATE,
17:17:48 161  	    CREATED_BY,
17:17:48 162  	    REASON
17:17:48 163  	  ) VALUES (
17:17:48 164  	    var_account_id,
17:17:48 165  	    in_lock_key,
17:17:48 166  	    var_lock_end_date,
17:17:48 167  	    in_created_by,
17:17:48 168  	    in_reason
17:17:48 169  	  );
17:17:48 170  
17:17:48 171  	  EXCEPTION
17:17:48 172  	    WHEN DUP_VAL_ON_INDEX THEN
17:17:48 173  	      -- This rows was created before... I will try to update it
17:17:48 174  	      BEGIN
17:17:48 175  
17:17:48 176  		UPDATE
17:17:48 177  		  ACCOUNT_LOCK
17:17:48 178  		SET
17:17:48 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
17:17:48 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
17:17:48 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
17:17:48 182  		  ACCOUNT_LOCK.REASON = in_reason
17:17:48 183  		WHERE
17:17:48 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
17:17:48 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
17:17:48 186  
17:17:48 187  		IF SQL%ROWCOUNT = 0 THEN
17:17:48 188  		  RAISE ALREADY_LOCKED;
17:17:48 189  		END IF;
17:17:48 190  
17:17:48 191  	      END;
17:17:48 192  	END;
17:17:48 193  
17:17:48 194  EXCEPTION
17:17:48 195  WHEN BAD_GROUP_ID THEN
17:17:48 196  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 197  	  SPROC_NAME, 'No such group id');
17:17:48 198  WHEN ALREADY_LOCKED THEN
17:17:48 199  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:48 200  	  SPROC_NAME, 'Account already locked');
17:17:48 201  WHEN OTHERS THEN
17:17:48 202  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 204  END LOCK_ACCOUNT;
17:17:48 205  
17:17:48 206  /******************************************************************************/
17:17:48 207  
17:17:48 208  PROCEDURE RELEASE_LOCK (
17:17:48 209  	in_group_id IN NUMBER,
17:17:48 210  	in_lock_key IN VARCHAR2
17:17:48 211  ) AS
17:17:48 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
17:17:48 213  -- VARIABLES
17:17:48 214  var_account_id NUMBER;
17:17:48 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
17:17:48 216  var_date DATE := SYSDATE;
17:17:48 217  -- EXCEPTIONS
17:17:48 218  BAD_GROUP_ID		EXCEPTION;
17:17:48 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
17:17:48 220  BEGIN
17:17:48 221  
17:17:48 222  	BEGIN
17:17:48 223  	  SELECT
17:17:48 224  	    ACCOUNT.ID into var_account_id
17:17:48 225  	  FROM
17:17:48 226  	    ACCOUNT
17:17:48 227  	  WHERE
17:17:48 228  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:48 229  	  EXCEPTION
17:17:48 230  	    WHEN NO_DATA_FOUND THEN
17:17:48 231  	      RAISE BAD_GROUP_ID;
17:17:48 232  	END;
17:17:48 233  
17:17:48 234  	UPDATE
17:17:48 235  	  ACCOUNT_LOCK
17:17:48 236  	SET
17:17:48 237  	  ACCOUNT_LOCK.END_DATE = var_date
17:17:48 238  	WHERE
17:17:48 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
17:17:48 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
17:17:48 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
17:17:48 242  
17:17:48 243  	IF SQL%ROWCOUNT = 0 THEN
17:17:48 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
17:17:48 245  	END IF;
17:17:48 246  
17:17:48 247  EXCEPTION
17:17:48 248  WHEN BAD_GROUP_ID THEN
17:17:48 249  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 250  	  SPROC_NAME, 'No such group id');
17:17:48 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
17:17:48 252  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:48 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
17:17:48 254  WHEN OTHERS THEN
17:17:48 255  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 256  	  SPROC_NAME, 'Unknown error');
17:17:48 257  END RELEASE_LOCK;
17:17:48 258  
17:17:48 259  END PROCS_LOCKING_V15;
17:17:48 260  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   8  */
17:17:48   9  	  in_offer_chain_id IN	 NUMBER,
17:17:48  10  	  out_result_set    OUT  SYS_REFCURSOR
17:17:48  11  ) AS
17:17:48  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
17:17:48  13  BEGIN
17:17:48  14  
17:17:48  15  	-- Get offer chain informations
17:17:48  16  	OPEN out_result_set FOR
17:17:48  17  	  SELECT
17:17:48  18  	    OC.ID,
17:17:48  19  	    OC.NAME,
17:17:48  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
17:17:48  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
17:17:48  22  	    OC.DESCRIPTION,
17:17:48  23  	    OC.IS_GIFT_CERTIFICATE,
17:17:48  24  	    OC.OFFER_CHAIN_STATUS_ID,
17:17:48  25  	    OC.PRODUCT_URI,
17:17:48  26  	    OC.BILLING_SOURCE_ID,
17:17:48  27  	    OC.VENDOR_SOURCE_ID,
17:17:48  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
17:17:48  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
17:17:48  30  	  FROM
17:17:48  31  	    OFFER_CHAIN OC
17:17:48  32  	  WHERE
17:17:48  33  	    OC.ID = in_offer_chain_id
17:17:48  34  	    AND ROWNUM <= 1;
17:17:48  35  
17:17:48  36  EXCEPTION
17:17:48  37  WHEN OTHERS THEN
17:17:48  38  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  40  END GET_OFFER_CHAIN_BY_ID;
17:17:48  41  
17:17:48  42  /******************************************************************************/
17:17:48  43  
17:17:48  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
17:17:48  45  /*
17:17:48  46  Throws exceptions:
17:17:48  47  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  48  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:48  49  */
17:17:48  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:48  51  	out_result_set	   OUT SYS_REFCURSOR
17:17:48  52  ) AS
17:17:48  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
17:17:48  54  -- EXCEPTIONS
17:17:48  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
17:17:48  56  BEGIN
17:17:48  57  
17:17:48  58  	IF (in_offer_chain_ids IS NULL) THEN
17:17:48  59  	  RAISE BAD_OFFER_CHAINS_IDS;
17:17:48  60  	END IF;
17:17:48  61  
17:17:48  62  	OPEN out_result_set FOR
17:17:48  63  	SELECT
17:17:48  64  	  OCH.ID,
17:17:48  65  	  OCH.NAME,
17:17:48  66  	  OCH.DESCRIPTION,
17:17:48  67  	  OCH.OFFER_CHAIN_STATUS_ID,
17:17:48  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
17:17:48  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
17:17:48  70  	  OCH.IS_GIFT_CERTIFICATE,
17:17:48  71  	  PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
17:17:48  72  	  PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
17:17:48  73  	  OCH.VENDOR_SOURCE_ID,
17:17:48  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
17:17:48  75  	FROM
17:17:48  76  	  OFFER_CHAIN OCH
17:17:48  77  	WHERE
17:17:48  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
17:17:48  79  
17:17:48  80  EXCEPTION
17:17:48  81  WHEN BAD_OFFER_CHAINS_IDS THEN
17:17:48  82  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48  83  	  SPROC_NAME, 'Invalid offer chains ids');
17:17:48  84  WHEN OTHERS THEN
17:17:48  85  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  87  END GET_OFFER_CHAINS_BY_IDS;
17:17:48  88  
17:17:48  89  /******************************************************************************/
17:17:48  90  
17:17:48  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
17:17:48  92  /*
17:17:48  93  Throws exceptions:
17:17:48  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  95  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:48  96  */
17:17:48  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:48  98  	out_result_set	   OUT SYS_REFCURSOR
17:17:48  99  ) AS
17:17:48 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
17:17:48 101  -- EXCEPTIONS
17:17:48 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
17:17:48 103  BEGIN
17:17:48 104  
17:17:48 105  	IF (in_offer_chain_ids IS NULL) THEN
17:17:48 106  	  RAISE BAD_OFFER_CHAINS_IDS;
17:17:48 107  	END IF;
17:17:48 108  
17:17:48 109  	OPEN out_result_set FOR
17:17:48 110  	SELECT
17:17:48 111  	  OOCH.OFFER_CHAIN_ID,
17:17:48 112  	  PO.PRODUCT_ID
17:17:48 113  	FROM
17:17:48 114  	  PRODUCT_OFFERING PO
17:17:48 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
17:17:48 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
17:17:48 117  	WHERE
17:17:48 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
17:17:48 119  
17:17:48 120  EXCEPTION
17:17:48 121  WHEN BAD_OFFER_CHAINS_IDS THEN
17:17:48 122  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 123  	  SPROC_NAME, 'Invalid offer chains ids');
17:17:48 124  WHEN OTHERS THEN
17:17:48 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 127  END GET_OFFER_CHAINS_PRODUCTS;
17:17:48 128  
17:17:48 129  /******************************************************************************/
17:17:48 130  
17:17:48 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
17:17:48 132  /*
17:17:48 133  Throws exceptions:
17:17:48 134  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 135  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:48 136  */
17:17:48 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:48 138  	out_result_set	   OUT SYS_REFCURSOR
17:17:48 139  ) AS
17:17:48 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
17:17:48 141  -- EXCEPTIONS
17:17:48 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
17:17:48 143  BEGIN
17:17:48 144  
17:17:48 145  	IF (in_offer_chain_ids IS NULL) THEN
17:17:48 146  	  RAISE BAD_OFFER_CHAINS_IDS;
17:17:48 147  	END IF;
17:17:48 148  
17:17:48 149  	OPEN out_result_set FOR
17:17:48 150  	SELECT
17:17:48 151  	  OOCH.OFFER_CHAIN_ID,
17:17:48 152  	  OOCH.OFFER_ID,
17:17:48 153  	  OOCH.INDEX_VALUE,
17:17:48 154  	  OOCH.NUM_RECURRENCES,
17:17:48 155  	  O.ENTITLEMENT_DURATION,
17:17:48 156  	  PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
17:17:48 157  	FROM
17:17:48 158  	  OFFER O
17:17:48 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
17:17:48 160  	WHERE
17:17:48 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
17:17:48 162  
17:17:48 163  EXCEPTION
17:17:48 164  WHEN BAD_OFFER_CHAINS_IDS THEN
17:17:48 165  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 166  	  SPROC_NAME, 'Invalid offer chains ids');
17:17:48 167  WHEN OTHERS THEN
17:17:48 168  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 170  END GET_OFFER_CHAINS_OFFERS;
17:17:48 171  
17:17:48 172  /******************************************************************************/
17:17:48 173  
17:17:48 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
17:17:48 175  /*
17:17:48 176  Throws exceptions (codes):
17:17:48 177  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 178  */
17:17:48 179  	in_product_id  IN  NUMBER,
17:17:48 180  	out_result_set OUT SYS_REFCURSOR
17:17:48 181  )AS
17:17:48 182  -- VARIBLES
17:17:48 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
17:17:48 184  temp_product_id NUMBER;
17:17:48 185  
17:17:48 186  -- EXCEPTIONS
17:17:48 187  BAD_PRODUCT_ID EXCEPTION;
17:17:48 188  BEGIN
17:17:48 189  
17:17:48 190  	-- Check that given product exists
17:17:48 191  	BEGIN
17:17:48 192  	  SELECT
17:17:48 193  	    PRODUCT.ID into temp_product_id
17:17:48 194  	  FROM
17:17:48 195  	    PRODUCT
17:17:48 196  	  WHERE
17:17:48 197  	    PRODUCT.ID = in_product_id;
17:17:48 198  	  EXCEPTION
17:17:48 199  	    WHEN NO_DATA_FOUND THEN
17:17:48 200  	      RAISE BAD_PRODUCT_ID;
17:17:48 201  	END;
17:17:48 202  
17:17:48 203  	-- Select all offer chains that contains given product
17:17:48 204  	OPEN out_result_set FOR
17:17:48 205  	SELECT
17:17:48 206  	  OFFER_CHAIN.ID,
17:17:48 207  	  OFFER_CHAIN.NAME,
17:17:48 208  	  OFFER_CHAIN.DESCRIPTION,
17:17:48 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
17:17:48 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
17:17:48 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
17:17:48 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
17:17:48 213  	FROM
17:17:48 214  	  OFFER_CHAIN
17:17:48 215  	WHERE
17:17:48 216  	  OFFER_CHAIN.ID IN (
17:17:48 217  	    SELECT DISTINCT
17:17:48 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
17:17:48 219  	    FROM
17:17:48 220  	      OFFER_OFFER_CHAIN
17:17:48 221  	    WHERE
17:17:48 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
17:17:48 223  		SELECT DISTINCT
17:17:48 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
17:17:48 225  		FROM
17:17:48 226  		  OFFER_PRODUCT_OFFERING
17:17:48 227  		WHERE
17:17:48 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
17:17:48 229  	      )
17:17:48 230  	  );
17:17:48 231  
17:17:48 232  EXCEPTION
17:17:48 233  WHEN BAD_PRODUCT_ID THEN
17:17:48 234  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 235  	  SPROC_NAME, 'No such product');
17:17:48 236  WHEN OTHERS THEN
17:17:48 237  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 239  END GET_OFFER_CHAINS_BY_PRODUCT;
17:17:48 240  
17:17:48 241  /******************************************************************************/
17:17:48 242  
17:17:48 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
17:17:48 244  /*
17:17:48 245  Throws exceptions (codes):
17:17:48 246  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 247  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 248  */
17:17:48 249  	in_offer_chain_id IN NUMBER,
17:17:48 250  	out_price	  OUT NUMBER
17:17:48 251  ) AS
17:17:48 252  -- VARIABLES
17:17:48 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
17:17:48 254  temp_offer_chain_id NUMBER;
17:17:48 255  
17:17:48 256  -- EXCEPTION
17:17:48 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
17:17:48 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
17:17:48 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
17:17:48 260  BEGIN
17:17:48 261  
17:17:48 262  	-- Check that given offer chain exists
17:17:48 263  	BEGIN
17:17:48 264  	  SELECT
17:17:48 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 266  	  FROM
17:17:48 267  	    OFFER_CHAIN
17:17:48 268  	  WHERE
17:17:48 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 270  
17:17:48 271  	  EXCEPTION
17:17:48 272  	  WHEN NO_DATA_FOUND THEN
17:17:48 273  	    RAISE BAD_OFFER_CHAIN_ID;
17:17:48 274  	END;
17:17:48 275  
17:17:48 276  	BEGIN
17:17:48 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
17:17:48 278  	  EXCEPTION
17:17:48 279  	    WHEN OTHERS THEN
17:17:48 280  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
17:17:48 282  	END;
17:17:48 283  
17:17:48 284  EXCEPTION
17:17:48 285  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 286  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 287  	  SPROC_NAME, 'Bad offer chain id');
17:17:48 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
17:17:48 289  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
17:17:48 291  WHEN OTHERS THEN
17:17:48 292  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 294  END GET_OFFER_CHAIN_PRICE;
17:17:48 295  
17:17:48 296  /******************************************************************************/
17:17:48 297  
17:17:48 298  PROCEDURE GET_FIRST_OFFER(
17:17:48 299  /*
17:17:48 300  Throws exceptions (codes):
17:17:48 301  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 302  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 303  */
17:17:48 304  	in_offer_chain_id IN  NUMBER,
17:17:48 305  	out_offer_id	  OUT NUMBER
17:17:48 306  ) AS
17:17:48 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
17:17:48 308  BEGIN
17:17:48 309  	-- Seect first offer in offer chain
17:17:48 310  	SELECT
17:17:48 311  	  OFFER_ID into out_offer_id
17:17:48 312  	FROM (
17:17:48 313  	  SELECT
17:17:48 314  	    OFFER_OFFER_CHAIN.OFFER_ID
17:17:48 315  	  FROM
17:17:48 316  	    OFFER_OFFER_CHAIN
17:17:48 317  	  WHERE
17:17:48 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 319  	  ORDER BY
17:17:48 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
17:17:48 321  	)
17:17:48 322  	WHERE
17:17:48 323  	  ROWNUM <= 1;
17:17:48 324  
17:17:48 325  EXCEPTION
17:17:48 326  WHEN NO_DATA_FOUND THEN
17:17:48 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 328  	  SPROC_NAME, 'No such offer chain');
17:17:48 329  WHEN OTHERS THEN
17:17:48 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 332  END GET_FIRST_OFFER;
17:17:48 333  
17:17:48 334  /******************************************************************************/
17:17:48 335  
17:17:48 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
17:17:48 337  /*
17:17:48 338  Throws exceptions (codes):
17:17:48 339  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 340  */
17:17:48 341  	out_result_set OUT SYS_REFCURSOR
17:17:48 342  ) AS
17:17:48 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
17:17:48 344  BEGIN
17:17:48 345  	OPEN out_result_set FOR
17:17:48 346  	SELECT
17:17:48 347  	  OFFER_CHAIN.ID,
17:17:48 348  	  OFFER_CHAIN.NAME,
17:17:48 349  	  OFFER_CHAIN.DESCRIPTION,
17:17:48 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
17:17:48 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
17:17:48 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
17:17:48 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
17:17:48 354  	  PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
17:17:48 355  	  PRODUCT_OFFERING.PRODUCT_ID
17:17:48 356  	FROM
17:17:48 357  	  OFFER_CHAIN,
17:17:48 358  	  OFFER_OFFER_CHAIN,
17:17:48 359  	  OFFER_PRODUCT_OFFERING,
17:17:48 360  	  PRODUCT_OFFERING
17:17:48 361  	WHERE
17:17:48 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
17:17:48 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
17:17:48 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE;
17:17:48 366  
17:17:48 367  EXCEPTION
17:17:48 368  WHEN OTHERS THEN
17:17:48 369  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 371  END GET_ACTIVE_OFFER_CHAINS;
17:17:48 372  
17:17:48 373  /******************************************************************************/
17:17:48 374  
17:17:48 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
17:17:48 376  /*
17:17:48 377  Throws exceptions (codes):
17:17:48 378  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 379  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 380  */
17:17:48 381  	in_offer_chain_id IN NUMBER,
17:17:48 382  	out_result_set	  OUT SYS_REFCURSOR
17:17:48 383  ) AS
17:17:48 384  -- VARIABLES
17:17:48 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
17:17:48 386  temp_offer_chain_id NUMBER;
17:17:48 387  
17:17:48 388  -- EXCEPTIONS
17:17:48 389  BAD_OFFER_CHAIN EXCEPTION;
17:17:48 390  BEGIN
17:17:48 391  
17:17:48 392  	-- Check that offer chain exists
17:17:48 393  	BEGIN
17:17:48 394  	  SELECT
17:17:48 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 396  	  FROM
17:17:48 397  	    OFFER_CHAIN
17:17:48 398  	  WHERE
17:17:48 399  	    OFFER_CHAIN.ID = in_offer_chain_id
17:17:48 400  	    AND ROWNUM <= 1;
17:17:48 401  
17:17:48 402  	  EXCEPTION
17:17:48 403  	    WHEN OTHERS THEN
17:17:48 404  	      RAISE BAD_OFFER_CHAIN;
17:17:48 405  	END;
17:17:48 406  
17:17:48 407  	-- Select all products for given offer chain
17:17:48 408  	OPEN out_result_set FOR
17:17:48 409  	SELECT DISTINCT
17:17:48 410  	  PRODUCT_OFFERING.PRODUCT_ID
17:17:48 411  	FROM
17:17:48 412  	  PRODUCT_OFFERING
17:17:48 413  	WHERE
17:17:48 414  	  PRODUCT_OFFERING.ID IN (
17:17:48 415  	    SELECT DISTINCT
17:17:48 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:48 417  	    FROM
17:17:48 418  	      OFFER_PRODUCT_OFFERING
17:17:48 419  	    WHERE
17:17:48 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:48 421  		SELECT
17:17:48 422  		  OFFER_OFFER_CHAIN.OFFER_ID
17:17:48 423  		FROM
17:17:48 424  		  OFFER_OFFER_CHAIN
17:17:48 425  		WHERE
17:17:48 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 427  	      )
17:17:48 428  	  );
17:17:48 429  
17:17:48 430  EXCEPTION
17:17:48 431  WHEN BAD_OFFER_CHAIN THEN
17:17:48 432  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 433  	  SPROC_NAME, 'No such offer chain');
17:17:48 434  WHEN OTHERS THEN
17:17:48 435  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 437  END GET_OFFER_CHAIN_PRODUCTS;
17:17:48 438  
17:17:48 439  /******************************************************************************/
17:17:48 440  
17:17:48 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
17:17:48 442  /*
17:17:48 443  Throws exceptions (codes):
17:17:48 444  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 445  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 446  */
17:17:48 447  	in_offer_chain_id	  IN NUMBER,
17:17:48 448  	in_offer_chain_start_date IN DATE
17:17:48 449  ) RETURN DATE AS
17:17:48 450  -- VARIABLES
17:17:48 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
17:17:48 452  temp_offer_chain_id    NUMBER;
17:17:48 453  var_offer_chain_length NUMBER;
17:17:48 454  var_offer_duration     VARCHAR2(30);
17:17:48 455  var_offer_recurrences  NUMBER;
17:17:48 456  var_end_date	     DATE;
17:17:48 457  
17:17:48 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
17:17:48 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
17:17:48 460  var_offer_years	    NUMBER;
17:17:48 461  var_offer_months	    NUMBER;
17:17:48 462  var_offer_days	    NUMBER;
17:17:48 463  var_infinity_offers_count NUMBER;
17:17:48 464  
17:17:48 465  var_offers_set SYS_REFCURSOR;
17:17:48 466  
17:17:48 467  -- EXCEPTIONS
17:17:48 468  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:48 469  BEGIN
17:17:48 470  
17:17:48 471  	var_end_date := in_offer_chain_start_date;
17:17:48 472  
17:17:48 473  	-- Check that offer chain exists
17:17:48 474  	BEGIN
17:17:48 475  	  SELECT
17:17:48 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 477  	  FROM
17:17:48 478  	    OFFER_CHAIN
17:17:48 479  	  WHERE
17:17:48 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 481  	  EXCEPTION
17:17:48 482  	    WHEN NO_DATA_FOUND
17:17:48 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
17:17:48 484  	END;
17:17:48 485  
17:17:48 486  	SELECT
17:17:48 487  	  COUNT(*) into var_infinity_offers_count
17:17:48 488  	FROM
17:17:48 489  	  OFFER_OFFER_CHAIN
17:17:48 490  	WHERE
17:17:48 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V15.OFFER_REC_INFINITY;
17:17:48 493  
17:17:48 494  	IF var_infinity_offers_count > 0 THEN
17:17:48 495  	  -- Offer chain contains offers with infinity num of recurrences
17:17:48 496  	  RETURN NULL;
17:17:48 497  	END IF;
17:17:48 498  
17:17:48 499  	-- Select offers durations
17:17:48 500  	OPEN var_offers_set FOR
17:17:48 501  	SELECT
17:17:48 502  	  OFFER.ENTITLEMENT_DURATION,
17:17:48 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
17:17:48 504  	FROM
17:17:48 505  	  OFFER_OFFER_CHAIN
17:17:48 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 507  	WHERE
17:17:48 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
17:17:48 509  
17:17:48 510  	-- Calculate sum of offers durations
17:17:48 511  	LOOP
17:17:48 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
17:17:48 513  	  EXIT WHEN var_offers_set%NOTFOUND;
17:17:48 514  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
17:17:48 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
17:17:48 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
17:17:48 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
17:17:48 518  	END LOOP;
17:17:48 519  
17:17:48 520  	RETURN var_end_date;
17:17:48 521  
17:17:48 522  EXCEPTION
17:17:48 523  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 524  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 525  	  SPROC_NAME, 'No such offer chain');
17:17:48 526  WHEN OTHERS THEN
17:17:48 527  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 529  END CALCULATE_OFFER_CHAIN_END_DATE;
17:17:48 530  
17:17:48 531  /******************************************************************************/
17:17:48 532  
17:17:48 533  FUNCTION CALCULATE_OFFER_AMOUNT (
17:17:48 534  	in_offer_id IN NUMBER
17:17:48 535  ) RETURN NUMBER AS
17:17:48 536  -- VARIABLES
17:17:48 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
17:17:48 538  temp_offer_id NUMBER;
17:17:48 539  
17:17:48 540  var_product_offering_set	    SYS_REFCURSOR;
17:17:48 541  var_product_offering_id	    NUMBER;
17:17:48 542  var_product_offering_price    NUMBER(10,6);
17:17:48 543  var_product_offering_t_amount NUMBER(10,6);
17:17:48 544  var_product_offering_quantity NUMBER;
17:17:48 545  
17:17:48 546  var_total_amount NUMBER(10,6);
17:17:48 547  var_final_amount NUMBER(10,2);
17:17:48 548  
17:17:48 549  var_percent_discount NUMBER(10,2);
17:17:48 550  var_fixed_discount NUMBER(10,6);
17:17:48 551  
17:17:48 552  -- EXCEPTIONS
17:17:48 553  BAD_OFFER_ID EXCEPTION;
17:17:48 554  BEGIN
17:17:48 555  
17:17:48 556  	BEGIN
17:17:48 557  	  SELECT
17:17:48 558  	    OFFER.ID into temp_offer_id
17:17:48 559  	  FROM
17:17:48 560  	    OFFER
17:17:48 561  	  WHERE
17:17:48 562  	    OFFER.ID = in_offer_id;
17:17:48 563  	  EXCEPTION
17:17:48 564  	    WHEN NO_DATA_FOUND THEN
17:17:48 565  	      RAISE BAD_OFFER_ID;
17:17:48 566  	END;
17:17:48 567  
17:17:48 568  	OPEN var_product_offering_set FOR
17:17:48 569  	SELECT
17:17:48 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
17:17:48 571  	  PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 572  	  PRODUCT_OFFERING.QUANTITY
17:17:48 573  	FROM
17:17:48 574  	  OFFER_PRODUCT_OFFERING
17:17:48 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48 576  	WHERE
17:17:48 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
17:17:48 578  
17:17:48 579  	var_total_amount := 0;
17:17:48 580  
17:17:48 581  	LOOP
17:17:48 582  	  FETCH var_product_offering_set into
17:17:48 583  	    var_product_offering_id,
17:17:48 584  	    var_product_offering_price,
17:17:48 585  	    var_product_offering_quantity;
17:17:48 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
17:17:48 587  
17:17:48 588  	  SELECT
17:17:48 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
17:17:48 590  	  FROM
17:17:48 591  	    DISCOUNT_PRODUCT_OFFERING
17:17:48 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
17:17:48 593  	  WHERE
17:17:48 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
17:17:48 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
17:17:48 596  
17:17:48 597  	  SELECT
17:17:48 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
17:17:48 599  	  FROM
17:17:48 600  	    DISCOUNT_PRODUCT_OFFERING
17:17:48 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
17:17:48 602  	  WHERE
17:17:48 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
17:17:48 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
17:17:48 605  
17:17:48 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
17:17:48 607  
17:17:48 608  	  IF var_percent_discount IS NOT NULL THEN
17:17:48 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
17:17:48 610  	  END IF;
17:17:48 611  
17:17:48 612  	  IF var_fixed_discount IS NOT NULL THEN
17:17:48 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
17:17:48 614  	  END IF;
17:17:48 615  
17:17:48 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
17:17:48 617  	END LOOP;
17:17:48 618  	var_final_amount := var_total_amount;
17:17:48 619  	RETURN var_final_amount;
17:17:48 620  
17:17:48 621  EXCEPTION
17:17:48 622  WHEN BAD_OFFER_ID THEN
17:17:48 623  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 624  	  SPROC_NAME, 'No such offer');
17:17:48 625  WHEN OTHERS THEN
17:17:48 626  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 628  END CALCULATE_OFFER_AMOUNT;
17:17:48 629  
17:17:48 630  /******************************************************************************/
17:17:48 631  
17:17:48 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
17:17:48 633  	in_offer_chain_id IN NUMBER
17:17:48 634  ) RETURN NUMBER AS
17:17:48 635  -- VARIABLES
17:17:48 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
17:17:48 637  temp_offer_chain_id    NUMBER;
17:17:48 638  var_first_offer_id     NUMBER;
17:17:48 639  -- EXCEPTIONS
17:17:48 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
17:17:48 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
17:17:48 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:48 643  BEGIN
17:17:48 644  
17:17:48 645  	BEGIN
17:17:48 646  	  SELECT
17:17:48 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 648  	  FROM
17:17:48 649  	    OFFER_CHAIN
17:17:48 650  	  WHERE
17:17:48 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 652  	  EXCEPTION
17:17:48 653  	    WHEN NO_DATA_FOUND THEN
17:17:48 654  	      RAISE BAD_OFFER_CHAIN_ID;
17:17:48 655  	END;
17:17:48 656  
17:17:48 657  	BEGIN
17:17:48 658  	  PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(
17:17:48 659  	    in_offer_chain_id => in_offer_chain_id,
17:17:48 660  	    out_offer_id      => var_first_offer_id
17:17:48 661  	  );
17:17:48 662  	  EXCEPTION
17:17:48 663  	    WHEN OTHERS THEN
17:17:48 664  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
17:17:48 666  	END;
17:17:48 667  
17:17:48 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
17:17:48 669  
17:17:48 670  EXCEPTION
17:17:48 671  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 672  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 673  	  SPROC_NAME, 'No such offer chain');
17:17:48 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
17:17:48 675  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
17:17:48 677  WHEN OTHERS THEN
17:17:48 678  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
17:17:48 681  
17:17:48 682  /******************************************************************************/
17:17:48 683  
17:17:48 684  FUNCTION GET_FIRST_OFFER_INDEX (
17:17:48 685  	in_offer_chain_id IN NUMBER
17:17:48 686  ) RETURN NUMBER AS
17:17:48 687  -- VARIABLES
17:17:48 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
17:17:48 689  var_first_offer_index NUMBER;
17:17:48 690  BEGIN
17:17:48 691  
17:17:48 692  	SELECT
17:17:48 693  	  INDEX_VALUE into var_first_offer_index
17:17:48 694  	FROM (
17:17:48 695  	  SELECT
17:17:48 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
17:17:48 697  	  FROM
17:17:48 698  	    OFFER_OFFER_CHAIN
17:17:48 699  	  WHERE
17:17:48 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 701  	  ORDER BY
17:17:48 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
17:17:48 703  	)
17:17:48 704  	WHERE
17:17:48 705  	  ROWNUM <= 1;
17:17:48 706  
17:17:48 707  	RETURN var_first_offer_index;
17:17:48 708  
17:17:48 709  EXCEPTION
17:17:48 710  WHEN NO_DATA_FOUND THEN
17:17:48 711  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 712  	  SPROC_NAME, 'No such offer chain');
17:17:48 713  WHEN OTHERS THEN
17:17:48 714  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 716  END GET_FIRST_OFFER_INDEX;
17:17:48 717  
17:17:48 718  /******************************************************************************/
17:17:48 719  
17:17:48 720  FUNCTION GET_NEXT_OFFER_INDEX (
17:17:48 721  /*
17:17:48 722  NULL, if not exists
17:17:48 723  */
17:17:48 724  	in_offer_chain_id	     IN NUMBER,
17:17:48 725  	in_offer_chain_current_index IN NUMBER
17:17:48 726  ) RETURN NUMBER AS
17:17:48 727  -- VARIABLES
17:17:48 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
17:17:48 729  temp_offer_chain_id	     NUMBER;
17:17:48 730  temp_offer_chain_current_index NUMBER;
17:17:48 731  var_result		     NUMBER;
17:17:48 732  -- EXCEPTIONS
17:17:48 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
17:17:48 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
17:17:48 735  BEGIN
17:17:48 736  
17:17:48 737  	-- Check that offer chain exists
17:17:48 738  	BEGIN
17:17:48 739  	  SELECT
17:17:48 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 741  	  FROM
17:17:48 742  	    OFFER_CHAIN
17:17:48 743  	  WHERE
17:17:48 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 745  	  EXCEPTION
17:17:48 746  	    WHEN NO_DATA_FOUND THEN
17:17:48 747  	      RAISE BAD_OFFER_CHAIN_ID;
17:17:48 748  	END;
17:17:48 749  
17:17:48 750  	-- Check that current offer index exists
17:17:48 751  	BEGIN
17:17:48 752  	  SELECT
17:17:48 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
17:17:48 754  	  FROM
17:17:48 755  	    OFFER_OFFER_CHAIN
17:17:48 756  	  WHERE
17:17:48 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
17:17:48 759  	    -- TODO: delete next line
17:17:48 760  	    AND ROWNUM <= 1;
17:17:48 761  	  EXCEPTION
17:17:48 762  	    WHEN NO_DATA_FOUND THEN
17:17:48 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
17:17:48 764  	END;
17:17:48 765  
17:17:48 766  	-- Get next offer index
17:17:48 767  	BEGIN
17:17:48 768  	  SELECT
17:17:48 769  	    INDEX_VALUE into var_result
17:17:48 770  	  FROM (
17:17:48 771  	    SELECT
17:17:48 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
17:17:48 773  	    FROM
17:17:48 774  	      OFFER_OFFER_CHAIN
17:17:48 775  	    WHERE
17:17:48 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
17:17:48 778  	    ORDER BY
17:17:48 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
17:17:48 780  	  )
17:17:48 781  	  WHERE
17:17:48 782  	    ROWNUM <= 1;
17:17:48 783  	  EXCEPTION
17:17:48 784  	    WHEN NO_DATA_FOUND THEN
17:17:48 785  	      var_result := NULL;
17:17:48 786  	END;
17:17:48 787  
17:17:48 788  	RETURN var_result;
17:17:48 789  
17:17:48 790  EXCEPTION
17:17:48 791  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 792  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 793  	  SPROC_NAME, 'No such offer chain');
17:17:48 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
17:17:48 795  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 796  	  SPROC_NAME, 'Bad current index value');
17:17:48 797  WHEN OTHERS THEN
17:17:48 798  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 800  END GET_NEXT_OFFER_INDEX;
17:17:48 801  
17:17:48 802  /******************************************************************************/
17:17:48 803  
17:17:48 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
17:17:48 805  	in_offer_chain_id	     IN NUMBER,
17:17:48 806  	in_offer_chain_current_index IN NUMBER,
17:17:48 807  	out_next_offer_index	     OUT NUMBER
17:17:48 808  ) AS
17:17:48 809  BEGIN
17:17:48 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
17:17:48 811  	  in_offer_chain_id,
17:17:48 812  	  in_offer_chain_current_index
17:17:48 813  	);
17:17:48 814  END P_GET_NEXT_OFFER_INDEX;
17:17:48 815  
17:17:48 816  /******************************************************************************/
17:17:48 817  
17:17:48 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
17:17:48 819  	in_license_id		     IN NUMBER,
17:17:48 820  	in_offer_chain_current_index IN NUMBER,
17:17:48 821  	out_next_offer_index	     OUT NUMBER
17:17:48 822  ) AS
17:17:48 823  -- VARIABLES
17:17:48 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
17:17:48 825  var_offer_chain_id NUMBER;
17:17:48 826  -- EXCEPTIONS
17:17:48 827  BAD_LICENSE_ID		   EXCEPTION;
17:17:48 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
17:17:48 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
17:17:48 830  BEGIN
17:17:48 831  
17:17:48 832  	BEGIN
17:17:48 833  	  SELECT
17:17:48 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
17:17:48 835  	  FROM
17:17:48 836  	    SUBSCRIPTION
17:17:48 837  	  WHERE
17:17:48 838  	    SUBSCRIPTION.ID = (
17:17:48 839  	      SELECT
17:17:48 840  		LICENSE.SUBSCRIPTION_ID
17:17:48 841  	      FROM
17:17:48 842  		LICENSE
17:17:48 843  	      WHERE
17:17:48 844  		LICENSE.ID = in_license_id
17:17:48 845  	    );
17:17:48 846  	  EXCEPTION
17:17:48 847  	    WHEN NO_DATA_FOUND THEN
17:17:48 848  	      RAISE BAD_LICENSE_ID;
17:17:48 849  	END;
17:17:48 850  
17:17:48 851  	BEGIN
17:17:48 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
17:17:48 853  	    var_offer_chain_id,
17:17:48 854  	    in_offer_chain_current_index
17:17:48 855  	  );
17:17:48 856  	  EXCEPTION
17:17:48 857  	    WHEN OTHERS THEN
17:17:48 858  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
17:17:48 860  	END;
17:17:48 861  
17:17:48 862  EXCEPTION
17:17:48 863  WHEN BAD_LICENSE_ID THEN
17:17:48 864  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 865  	  SPROC_NAME, 'No such license');
17:17:48 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
17:17:48 867  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
17:17:48 869  WHEN OTHERS THEN
17:17:48 870  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
17:17:48 873  
17:17:48 874  /******************************************************************************/
17:17:48 875  
17:17:48 876  FUNCTION IS_OFFER_INDEX_EXISTS (
17:17:48 877  /*
17:17:48 878  GLOBAL_CONSTANTS_V15.TRUE - exists
17:17:48 879  GLOBAL_CONSTANTS_V15.FALSE - not exists
17:17:48 880  */
17:17:48 881  	in_offer_chain_id	   IN NUMBER,
17:17:48 882  	in_offer_chain_offer_index IN NUMBER
17:17:48 883  ) RETURN NUMBER AS
17:17:48 884  -- VARIABLES
17:17:48 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
17:17:48 886  temp_count NUMBER;
17:17:48 887  BEGIN
17:17:48 888  
17:17:48 889  	SELECT
17:17:48 890  	  COUNT(*) into temp_count
17:17:48 891  	FROM
17:17:48 892  	  OFFER_OFFER_CHAIN
17:17:48 893  	WHERE
17:17:48 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
17:17:48 896  
17:17:48 897  	IF temp_count > 0 THEN
17:17:48 898  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 899  	ELSE
17:17:48 900  	  RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 901  	END IF;
17:17:48 902  
17:17:48 903  EXCEPTION
17:17:48 904  WHEN OTHERS THEN
17:17:48 905  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 907  END IS_OFFER_INDEX_EXISTS;
17:17:48 908  
17:17:48 909  /******************************************************************************/
17:17:48 910  
17:17:48 911  PROCEDURE GET_OFFER_LENGTH (
17:17:48 912  	in_offer_id IN NUMBER,
17:17:48 913  	out_years   OUT NUMBER,
17:17:48 914  	out_months  OUT NUMBER,
17:17:48 915  	out_days    OUT NUMBER
17:17:48 916  ) AS
17:17:48 917  -- VARIABLES
17:17:48 918  var_offer_duration VARCHAR2(30);
17:17:48 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
17:17:48 920  -- EXCEPTIONS
17:17:48 921  BAD_OFFER_ID	     EXCEPTION;
17:17:48 922  CAN_NOT_PARSE_DURATION EXCEPTION;
17:17:48 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:48 924  BEGIN
17:17:48 925  
17:17:48 926  	BEGIN
17:17:48 927  	  SELECT
17:17:48 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
17:17:48 929  	  FROM
17:17:48 930  	    OFFER
17:17:48 931  	  WHERE
17:17:48 932  	    OFFER.ID = in_offer_id;
17:17:48 933  	  EXCEPTION
17:17:48 934  	    WHEN NO_DATA_FOUND THEN
17:17:48 935  	      RAISE BAD_OFFER_ID;
17:17:48 936  	END;
17:17:48 937  
17:17:48 938  	BEGIN
17:17:48 939  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
17:17:48 940  	    var_offer_duration,
17:17:48 941  	    out_years,
17:17:48 942  	    out_months,
17:17:48 943  	    out_days
17:17:48 944  	  );
17:17:48 945  	  EXCEPTION
17:17:48 946  	    WHEN OTHERS THEN
17:17:48 947  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 948  	      RAISE CAN_NOT_PARSE_DURATION;
17:17:48 949  	END;
17:17:48 950  
17:17:48 951  EXCEPTION
17:17:48 952  WHEN BAD_OFFER_ID THEN
17:17:48 953  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 954  	  SPROC_NAME, 'No such offer');
17:17:48 955  WHEN CAN_NOT_PARSE_DURATION THEN
17:17:48 956  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
17:17:48 958  WHEN OTHERS THEN
17:17:48 959  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 961  END GET_OFFER_LENGTH;
17:17:48 962  
17:17:48 963  /******************************************************************************/
17:17:48 964  
17:17:48 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
17:17:48 966  	in_offer_id   IN NUMBER,
17:17:48 967  	in_start_date IN DATE DEFAULT SYSDATE,
17:17:48 968  	out_days      OUT NUMBER
17:17:48 969  ) AS
17:17:48 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
17:17:48 971  -- VARIABLES
17:17:48 972  var_offer_duration VARCHAR2(30);
17:17:48 973  var_offer_years	 NUMBER;
17:17:48 974  var_offer_months	 NUMBER;
17:17:48 975  var_offer_days	 NUMBER;
17:17:48 976  var_offer_end_date DATE;
17:17:48 977  -- EXCEPTIONS
17:17:48 978  BAD_OFFER_ID EXCEPTION;
17:17:48 979  BEGIN
17:17:48 980  
17:17:48 981  	BEGIN
17:17:48 982  	  SELECT
17:17:48 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
17:17:48 984  	  FROM
17:17:48 985  	    OFFER
17:17:48 986  	  WHERE
17:17:48 987  	    OFFER.ID = in_offer_id;
17:17:48 988  	  EXCEPTION
17:17:48 989  	    WHEN NO_DATA_FOUND THEN
17:17:48 990  	      RAISE BAD_OFFER_ID;
17:17:48 991  	END;
17:17:48 992  
17:17:48 993  	PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS (
17:17:48 994  	  var_offer_duration,
17:17:48 995  	  var_offer_years,
17:17:48 996  	  var_offer_months,
17:17:48 997  	  var_offer_days
17:17:48 998  	);
17:17:48 999  
17:17:48 1000  	 var_offer_end_date := ( ( in_start_date
17:17:48 1001  	   + GLOBAL_CONSTANTS_V15.ONE_DAY_INTERVAL * var_offer_days )
17:17:48 1002  	   + GLOBAL_CONSTANTS_V15.ONE_MONTH_INTERVAL * var_offer_months )
17:17:48 1003  	   + GLOBAL_CONSTANTS_V15.ONE_YEAR_INTERVAL * var_offer_years;
17:17:48 1004  
17:17:48 1005  	 out_days := var_offer_end_date - in_start_date;
17:17:48 1006  
17:17:48 1007  EXCEPTION
17:17:48 1008  WHEN BAD_OFFER_ID THEN
17:17:48 1009  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1010  	   SPROC_NAME, 'No such offer');
17:17:48 1011  WHEN OTHERS THEN
17:17:48 1012  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1014  END GET_OFFER_LENGTH_IN_DAYS;
17:17:48 1015  
17:17:48 1016  /******************************************************************************/
17:17:48 1017  
17:17:48 1018  PROCEDURE GET_OFFER_PRODUCTS (
17:17:48 1019  /*
17:17:48 1020  Throws exceptions (codes):
17:17:48 1021  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1022  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1023  */
17:17:48 1024  	 in_offer_id	IN NUMBER,
17:17:48 1025  	 out_result_set OUT SYS_REFCURSOR
17:17:48 1026  ) AS
17:17:48 1027  -- VARIABLES
17:17:48 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
17:17:48 1029  temp_offerr_id NUMBER;
17:17:48 1030  -- EXCEPTIONS
17:17:48 1031  BAD_OFFER_ID EXCEPTION;
17:17:48 1032  BEGIN
17:17:48 1033  
17:17:48 1034  	 BEGIN
17:17:48 1035  	   SELECT
17:17:48 1036  	     OFFER.ID into temp_offerr_id
17:17:48 1037  	   FROM
17:17:48 1038  	     OFFER
17:17:48 1039  	   WHERE
17:17:48 1040  	     OFFER.ID = in_offer_id;
17:17:48 1041  	   EXCEPTION
17:17:48 1042  	     WHEN NO_DATA_FOUND THEN
17:17:48 1043  	       RAISE BAD_OFFER_ID;
17:17:48 1044  	 END;
17:17:48 1045  
17:17:48 1046  	 OPEN out_result_set FOR
17:17:48 1047  	 SELECT DISTINCT
17:17:48 1048  	   PRODUCT.ID,
17:17:48 1049  	   PRODUCT.NAME
17:17:48 1050  	 FROM
17:17:48 1051  	   PRODUCT
17:17:48 1052  	 WHERE
17:17:48 1053  	   PRODUCT.ID IN (
17:17:48 1054  	       SELECT
17:17:48 1055  		 PRODUCT_OFFERING.PRODUCT_ID
17:17:48 1056  	       FROM
17:17:48 1057  		 OFFER_PRODUCT_OFFERING
17:17:48 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48 1059  	       WHERE
17:17:48 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
17:17:48 1061  	     );
17:17:48 1062  
17:17:48 1063  EXCEPTION
17:17:48 1064  WHEN BAD_OFFER_ID THEN
17:17:48 1065  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1066  	   SPROC_NAME, 'No such offer');
17:17:48 1067  WHEN OTHERS THEN
17:17:48 1068  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1070  END GET_OFFER_PRODUCTS;
17:17:48 1071  
17:17:48 1072  /******************************************************************************/
17:17:48 1073  
17:17:48 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
17:17:48 1075  /*
17:17:48 1076  Throws exceptions (codes):
17:17:48 1077  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1078  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1079  */
17:17:48 1080  	 in_offer_chain_id IN NUMBER,
17:17:48 1081  	 out_result_set    OUT SYS_REFCURSOR
17:17:48 1082  ) AS
17:17:48 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
17:17:48 1084  -- VARIABLES
17:17:48 1085  temp_offer_chain_id NUMBER;
17:17:48 1086  -- EXCEPTIONS
17:17:48 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:48 1088  BEGIN
17:17:48 1089  
17:17:48 1090  	 BEGIN
17:17:48 1091  	   SELECT
17:17:48 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 1093  	   FROM
17:17:48 1094  	     OFFER_CHAIN
17:17:48 1095  	   WHERE
17:17:48 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 1097  	   EXCEPTION
17:17:48 1098  	     WHEN NO_DATA_FOUND THEN
17:17:48 1099  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:48 1100  	 END;
17:17:48 1101  
17:17:48 1102  	 OPEN out_result_set FOR
17:17:48 1103  	 SELECT
17:17:48 1104  	   PRODUCT_OFFERING.ID,
17:17:48 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:48 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:48 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 1108  	   PRODUCT_OFFERING.QUANTITY,
17:17:48 1109  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:48 1110  	   PRODUCT_OFFERING.CREATED_BY,
17:17:48 1111  	   PRODUCT.NAME,
17:17:48 1112  	   PRODUCT.PRODUCT_URI,
17:17:48 1113  	   CAPABILITY.ID CAP_ID,
17:17:48 1114  	   CAPABILITY.CODE CAP_CODE,
17:17:48 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:48 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:48 1117  	 FROM
17:17:48 1118  	   PRODUCT_OFFERING
17:17:48 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
17:17:48 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:48 1121  	 WHERE
17:17:48 1122  	   PRODUCT_OFFERING.ID IN (
17:17:48 1123  	     SELECT DISTINCT
17:17:48 1124  	       PRODUCT_OFFERING_ID
17:17:48 1125  	     FROM
17:17:48 1126  	       OFFER_PRODUCT_OFFERING
17:17:48 1127  	     WHERE
17:17:48 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:48 1129  		 SELECT DISTINCT
17:17:48 1130  		   OFFER_ID
17:17:48 1131  		 FROM
17:17:48 1132  		   OFFER_OFFER_CHAIN
17:17:48 1133  		 WHERE
17:17:48 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1135  	       )
17:17:48 1136  	   );
17:17:48 1137  
17:17:48 1138  EXCEPTION
17:17:48 1139  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 1140  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1141  	   SPROC_NAME, 'Bad offer chain id');
17:17:48 1142  WHEN OTHERS THEN
17:17:48 1143  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
17:17:48 1146  
17:17:48 1147  /******************************************************************************/
17:17:48 1148  
17:17:48 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
17:17:48 1150  /*
17:17:48 1151  Throws exceptions (codes):
17:17:48 1152  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1153  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1154  Returns:
17:17:48 1155  GLOBAL_CONSTANTS_V15.TRUE if there are at least one same product
17:17:48 1156  GLOBAL_CONSTANTS_V15.FALSE else
17:17:48 1157  */
17:17:48 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
17:17:48 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
17:17:48 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:48 1161  ) RETURN NUMBER AS
17:17:48 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
17:17:48 1163  -- CONSTANTS
17:17:48 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
17:17:48 1165  -- VARIABLES
17:17:48 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
17:17:48 1167  var_same_products	SYS_REFCURSOR;
17:17:48 1168  var_same_product_id	NUMBER;
17:17:48 1169  same_product_count	NUMBER;
17:17:48 1170  var_product_eligibility_limit NUMBER;
17:17:48 1171  s_product_eligibility_limit   VARCHAR2(100);
17:17:48 1172  -- EXCEPTIONS
17:17:48 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
17:17:48 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
17:17:48 1175  BEGIN
17:17:48 1176  
17:17:48 1177  	 -- Check that first offer chain exists
17:17:48 1178  	 BEGIN
17:17:48 1179  	   SELECT
17:17:48 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 1181  	   FROM
17:17:48 1182  	     OFFER_CHAIN
17:17:48 1183  	   WHERE
17:17:48 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
17:17:48 1185  	   EXCEPTION
17:17:48 1186  	     WHEN NO_DATA_FOUND THEN
17:17:48 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
17:17:48 1188  	 END;
17:17:48 1189  
17:17:48 1190  	 -- Check that second offer chain exists
17:17:48 1191  	 BEGIN
17:17:48 1192  	   SELECT
17:17:48 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 1194  	   FROM
17:17:48 1195  	     OFFER_CHAIN
17:17:48 1196  	   WHERE
17:17:48 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
17:17:48 1198  	   EXCEPTION
17:17:48 1199  	     WHEN NO_DATA_FOUND THEN
17:17:48 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
17:17:48 1201  	 END;
17:17:48 1202  
17:17:48 1203  	 PROCS_OFFER_CHAIN_V15.GET_OFF_CHAINS_SAME_PRODUCTS(
17:17:48 1204  	   in_offer_chain_1 => in_offer_chain_1,
17:17:48 1205  	   in_offer_chain_2 => in_offer_chain_2,
17:17:48 1206  	   out_result_set   => var_same_products
17:17:48 1207  	 );
17:17:48 1208  
17:17:48 1209  	 LOOP
17:17:48 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
17:17:48 1211  	   EXIT WHEN var_same_products%NOTFOUND;
17:17:48 1212  
17:17:48 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:48 1214  	     -- Return false because this offer chains having same products
17:17:48 1215  	     RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 1216  	   ELSE
17:17:48 1217  
17:17:48 1218  	     -- Get eligibility rule for given product
17:17:48 1219  	     BEGIN
17:17:48 1220  	       SELECT
17:17:48 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
17:17:48 1222  	       FROM
17:17:48 1223  		 PRODUCT_ELIGIBILITY
17:17:48 1224  	       WHERE
17:17:48 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
17:17:48 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
17:17:48 1227  
17:17:48 1228  	       -- REVU: What should to be here? 1?
17:17:48 1229  	       EXCEPTION
17:17:48 1230  		 WHEN NO_DATA_FOUND THEN
17:17:48 1231  		   s_product_eligibility_limit := '1';
17:17:48 1232  	     END;
17:17:48 1233  
17:17:48 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V15.MAX_CONSURRENT_PRD_UNLIM THEN
17:17:48 1235  	       RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1236  	     END IF;
17:17:48 1237  
17:17:48 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
17:17:48 1239  
17:17:48 1240  	     -- Check for limit
17:17:48 1241  	     IF var_product_eligibility_limit < same_product_count THEN
17:17:48 1242  	       RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 1243  	     END IF;
17:17:48 1244  
17:17:48 1245  	   END IF;
17:17:48 1246  	 END LOOP;
17:17:48 1247  
17:17:48 1248  	 RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1249  
17:17:48 1250  EXCEPTION
17:17:48 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
17:17:48 1252  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1253  	   SPROC_NAME, 'First offer chain not found');
17:17:48 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
17:17:48 1255  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1256  	   SPROC_NAME, 'Second offer chain not found');
17:17:48 1257  WHEN OTHERS THEN
17:17:48 1258  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1260  END CHECK_FOR_SAME_PRODUCTS;
17:17:48 1261  
17:17:48 1262  /******************************************************************************/
17:17:48 1263  
17:17:48 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
17:17:48 1265  /*
17:17:48 1266  Throws exceptions (codes):
17:17:48 1267  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1268  Returns:
17:17:48 1269  GLOBAL_CONSTANTS_V15.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
17:17:48 1270  GLOBAL_CONSTANTS_V15.FALSE else
17:17:48 1271  */
17:17:48 1272  	 in_offer_chain_id IN NUMBER
17:17:48 1273  ) RETURN NUMBER AS
17:17:48 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
17:17:48 1275  -- VARIABLES
17:17:48 1276  var_is_cancelable_str VARCHAR2(1);
17:17:48 1277  var_is_cancelable     NUMBER;
17:17:48 1278  BEGIN
17:17:48 1279  
17:17:48 1280  	 BEGIN
17:17:48 1281  	   SELECT
17:17:48 1282  	     VALUE INTO var_is_cancelable_str
17:17:48 1283  	   FROM (
17:17:48 1284  	     SELECT
17:17:48 1285  	       VALUE, NAME
17:17:48 1286  	     FROM
17:17:48 1287  	       OFFER_CHAIN_META_DATA
17:17:48 1288  	     WHERE
17:17:48 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1290  	     )
17:17:48 1291  	   WHERE
17:17:48 1292  	     UPPER(NAME) = 'CANCELABLE';
17:17:48 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
17:17:48 1294  	   EXCEPTION
17:17:48 1295  	     WHEN NO_DATA_FOUND THEN
17:17:48 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1297  	 END;
17:17:48 1298  
17:17:48 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:48 1300  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1301  	 END IF;
17:17:48 1302  
17:17:48 1303  	 RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 1304  
17:17:48 1305  EXCEPTION
17:17:48 1306  WHEN OTHERS THEN
17:17:48 1307  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1309  END IS_OFFER_CHAIN_CANCELABLE;
17:17:48 1310  
17:17:48 1311  /******************************************************************************/
17:17:48 1312  
17:17:48 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
17:17:48 1314  /*
17:17:48 1315  Throws exceptions (codes):
17:17:48 1316  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1317  */
17:17:48 1318  	 in_offer_chain_id IN NUMBER
17:17:48 1319  ) RETURN NUMBER AS
17:17:48 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
17:17:48 1321  -- VARIABLES
17:17:48 1322  var_max_concurrent_subs_str VARCHAR2(100);
17:17:48 1323  var_max_concurrent_subs	   NUMBER;
17:17:48 1324  BEGIN
17:17:48 1325  
17:17:48 1326  	 BEGIN
17:17:48 1327  	   SELECT
17:17:48 1328  	     VALUE into var_max_concurrent_subs_str
17:17:48 1329  	   FROM
17:17:48 1330  	     (
17:17:48 1331  	       SELECT
17:17:48 1332  		 NAME,
17:17:48 1333  		 VALUE
17:17:48 1334  	       FROM
17:17:48 1335  		 OFFER_CHAIN_ELIGIBILITY
17:17:48 1336  	       WHERE
17:17:48 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1338  	     )
17:17:48 1339  	   WHERE
17:17:48 1340  	     NAME LIKE GLOBAL_CONSTANTS_V15.MAX_CONCURRENT_SUBS;
17:17:48 1341  
17:17:48 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V15.MAX_CONCURRENT_SUBS_UNLIM THEN
17:17:48 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V15.INFINITY;
17:17:48 1344  	   ELSE
17:17:48 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
17:17:48 1346  	   END IF;
17:17:48 1347  
17:17:48 1348  	   EXCEPTION
17:17:48 1349  	     WHEN NO_DATA_FOUND THEN
17:17:48 1350  	       var_max_concurrent_subs := 1;
17:17:48 1351  	 END;
17:17:48 1352  
17:17:48 1353  	 RETURN var_max_concurrent_subs;
17:17:48 1354  
17:17:48 1355  EXCEPTION
17:17:48 1356  WHEN OTHERS THEN
17:17:48 1357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
17:17:48 1360  
17:17:48 1361  /******************************************************************************/
17:17:48 1362  
17:17:48 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
17:17:48 1364  /*
17:17:48 1365  Throws exceptions (codes):
17:17:48 1366  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1367  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1368  */
17:17:48 1369  	 in_offer_chain_id   IN NUMBER,
17:17:48 1370  	 in_eligibility_name IN VARCHAR2,
17:17:48 1371  	 out_result_set      OUT SYS_REFCURSOR
17:17:48 1372  ) AS
17:17:48 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
17:17:48 1374  -- VARIABLES
17:17:48 1375  temp_offer_chain_id NUMBER;
17:17:48 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
17:17:48 1377  -- EXCEPTIONS
17:17:48 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:48 1379  BEGIN
17:17:48 1380  
17:17:48 1381  	 BEGIN
17:17:48 1382  	   SELECT
17:17:48 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 1384  	   FROM
17:17:48 1385  	     OFFER_CHAIN
17:17:48 1386  	   WHERE
17:17:48 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 1388  	   EXCEPTION
17:17:48 1389  	     WHEN NO_DATA_FOUND THEN
17:17:48 1390  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:48 1391  	 END;
17:17:48 1392  
17:17:48 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
17:17:48 1394  
17:17:48 1395  	 OPEN out_result_set FOR
17:17:48 1396  	 SELECT
17:17:48 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
17:17:48 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
17:17:48 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
17:17:48 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
17:17:48 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
17:17:48 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
17:17:48 1403  	 FROM
17:17:48 1404  	   OFFER_CHAIN_ELIGIBILITY
17:17:48 1405  	 WHERE
17:17:48 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
17:17:48 1408  
17:17:48 1409  EXCEPTION
17:17:48 1410  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 1411  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1412  	   SPROC_NAME, 'No such offer chain');
17:17:48 1413  WHEN OTHERS THEN
17:17:48 1414  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
17:17:48 1417  
17:17:48 1418  /******************************************************************************/
17:17:48 1419  
17:17:48 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
17:17:48 1421  /*
17:17:48 1422  Throws exceptions (codes):
17:17:48 1423  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1424  */
17:17:48 1425  	 in_offer_chain_ids  IN VARCHAR2,
17:17:48 1426  	 in_eligibility_name IN VARCHAR2,
17:17:48 1427  	 out_result_set      OUT SYS_REFCURSOR
17:17:48 1428  ) AS
17:17:48 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
17:17:48 1430  -- VARIABLES
17:17:48 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
17:17:48 1432  BEGIN
17:17:48 1433  
17:17:48 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
17:17:48 1435  
17:17:48 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
17:17:48 1437  
17:17:48 1438  	 open out_result_set for
17:17:48 1439  	 'SELECT
17:17:48 1440  	   ID,
17:17:48 1441  	   NAME,
17:17:48 1442  	   VALUE,
17:17:48 1443  	   OFFER_CHAIN_ID,
17:17:48 1444  	   CREATE_DATE,
17:17:48 1445  	   CREATED_BY
17:17:48 1446  	 FROM
17:17:48 1447  	   OFFER_CHAIN_ELIGIBILITY
17:17:48 1448  	 WHERE
17:17:48 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
17:17:48 1450  	   AND UPPER(NAME) = :1'
17:17:48 1451  	 using var_eligibility_name;
17:17:48 1452  
17:17:48 1453  EXCEPTION
17:17:48 1454  WHEN OTHERS THEN
17:17:48 1455  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
17:17:48 1458  
17:17:48 1459  /******************************************************************************/
17:17:48 1460  
17:17:48 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
17:17:48 1462  	 in_offer_chain_ids IN VARCHAR2,
17:17:48 1463  	 in_meta_data_name  IN VARCHAR2,
17:17:48 1464  	 out_result_set     OUT SYS_REFCURSOR
17:17:48 1465  ) AS
17:17:48 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
17:17:48 1467  -- VARIABLES
17:17:48 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
17:17:48 1469  BEGIN
17:17:48 1470  
17:17:48 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
17:17:48 1472  
17:17:48 1473  	 open out_result_set for
17:17:48 1474  	 'select
17:17:48 1475  	   ID,
17:17:48 1476  	   NAME,
17:17:48 1477  	   VALUE,
17:17:48 1478  	   OFFER_CHAIN_ID,
17:17:48 1479  	   CREATED_BY,
17:17:48 1480  	   CREATE_DATE
17:17:48 1481  	 from
17:17:48 1482  	   OFFER_CHAIN_META_DATA
17:17:48 1483  	 where
17:17:48 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
17:17:48 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
17:17:48 1486  	 using var_meta_data_name;
17:17:48 1487  
17:17:48 1488  EXCEPTION
17:17:48 1489  WHEN OTHERS THEN
17:17:48 1490  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1492  END GET_OFFER_CHAINS_META_DATA;
17:17:48 1493  
17:17:48 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:48 1495  /*
17:17:48 1496  Throws exceptions (codes):
17:17:48 1497  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1498  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1499  */
17:17:48 1500  	 in_offer_chain_id IN NUMBER,
17:17:48 1501  	 in_meta_data_name IN VARCHAR2,
17:17:48 1502  	 out_result_set    OUT SYS_REFCURSOR
17:17:48 1503  ) AS
17:17:48 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
17:17:48 1505  -- VARIABLES
17:17:48 1506  temp_offer_chain_id NUMBER;
17:17:48 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
17:17:48 1508  -- EXCEPTIONS
17:17:48 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:48 1510  BEGIN
17:17:48 1511  
17:17:48 1512  	 BEGIN
17:17:48 1513  	   SELECT
17:17:48 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
17:17:48 1515  	   FROM
17:17:48 1516  	     OFFER_CHAIN
17:17:48 1517  	   WHERE
17:17:48 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:48 1519  	   EXCEPTION
17:17:48 1520  	     WHEN NO_DATA_FOUND THEN
17:17:48 1521  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:48 1522  	 END;
17:17:48 1523  
17:17:48 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
17:17:48 1525  
17:17:48 1526  	 OPEN out_result_set FOR
17:17:48 1527  	 SELECT
17:17:48 1528  	   OFFER_CHAIN_META_DATA.ID,
17:17:48 1529  	   OFFER_CHAIN_META_DATA.NAME,
17:17:48 1530  	   OFFER_CHAIN_META_DATA.VALUE,
17:17:48 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
17:17:48 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
17:17:48 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
17:17:48 1534  	 FROM
17:17:48 1535  	   OFFER_CHAIN_META_DATA
17:17:48 1536  	 WHERE
17:17:48 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
17:17:48 1539  
17:17:48 1540  EXCEPTION
17:17:48 1541  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 1542  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1543  	   SPROC_NAME, 'No such offer chain');
17:17:48 1544  WHEN OTHERS THEN
17:17:48 1545  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1547  END GET_OFFER_CHAIN_META_DATA;
17:17:48 1548  
17:17:48 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
17:17:48 1550  /*
17:17:48 1551  Throws exceptions (codes):
17:17:48 1552  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1553  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1554  */
17:17:48 1555  	 in_offer_id	IN NUMBER,
17:17:48 1556  	 out_result_set OUT SYS_REFCURSOR
17:17:48 1557  ) AS
17:17:48 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
17:17:48 1559  -- VARIABLES
17:17:48 1560  temp_offer_id NUMBER;
17:17:48 1561  -- EXCEPTIONS
17:17:48 1562  BAD_OFFER_ID EXCEPTION;
17:17:48 1563  BEGIN
17:17:48 1564  
17:17:48 1565  	 BEGIN
17:17:48 1566  	   SELECT
17:17:48 1567  	     OFFER.ID into temp_offer_id
17:17:48 1568  	   FROM
17:17:48 1569  	     OFFER
17:17:48 1570  	   WHERE
17:17:48 1571  	     OFFER.ID = in_offer_id;
17:17:48 1572  	   EXCEPTION
17:17:48 1573  	     WHEN NO_DATA_FOUND THEN
17:17:48 1574  	       RAISE BAD_OFFER_ID;
17:17:48 1575  	 END;
17:17:48 1576  
17:17:48 1577  	 OPEN out_result_set FOR
17:17:48 1578  	 SELECT DISTINCT
17:17:48 1579  	   PRODUCT_OFFERING.ID,
17:17:48 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:48 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:48 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 1583  	   PRODUCT_OFFERING.QUANTITY,
17:17:48 1584  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:48 1585  	   PRODUCT_OFFERING.CREATED_BY,
17:17:48 1586  	   CAPABILITY.ID CAP_ID,
17:17:48 1587  	   CAPABILITY.CODE CAP_CODE,
17:17:48 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:48 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:48 1590  	 FROM
17:17:48 1591  	   OFFER_PRODUCT_OFFERING
17:17:48 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:48 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:48 1594  	 WHERE
17:17:48 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
17:17:48 1596  
17:17:48 1597  EXCEPTION
17:17:48 1598  WHEN BAD_OFFER_ID THEN
17:17:48 1599  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1600  	   SPROC_NAME, 'No such offer');
17:17:48 1601  WHEN OTHERS THEN
17:17:48 1602  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
17:17:48 1605  
17:17:48 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:48 1607  /*
17:17:48 1608  Throws exceptions (codes):
17:17:48 1609  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1610  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1611  */
17:17:48 1612  	 in_product_offering_id IN NUMBER,
17:17:48 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
17:17:48 1614  	 out_result_set 	OUT SYS_REFCURSOR
17:17:48 1615  ) AS
17:17:48 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
17:17:48 1617  -- VARIABLES
17:17:48 1618  temp_product_offering_id NUMBER;
17:17:48 1619  -- EXCEPTIONS
17:17:48 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
17:17:48 1621  BEGIN
17:17:48 1622  
17:17:48 1623  	 BEGIN
17:17:48 1624  	   SELECT
17:17:48 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
17:17:48 1626  	   FROM
17:17:48 1627  	     PRODUCT_OFFERING
17:17:48 1628  	   WHERE
17:17:48 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
17:17:48 1630  	   EXCEPTION
17:17:48 1631  	     WHEN NO_DATA_FOUND THEN
17:17:48 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
17:17:48 1633  	 END;
17:17:48 1634  
17:17:48 1635  	 OPEN out_result_set FOR
17:17:48 1636  	 SELECT
17:17:48 1637  	   PRODUCT_OFFERING_META_DATA.ID,
17:17:48 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
17:17:48 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
17:17:48 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
17:17:48 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
17:17:48 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
17:17:48 1643  	 FROM
17:17:48 1644  	   PRODUCT_OFFERING_META_DATA
17:17:48 1645  	 WHERE
17:17:48 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
17:17:48 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
17:17:48 1648  
17:17:48 1649  EXCEPTION
17:17:48 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
17:17:48 1651  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1652  	   SPROC_NAME, 'No such product offering');
17:17:48 1653  END GET_PRODUCT_OFFERING_META_DATA;
17:17:48 1654  
17:17:48 1655  /******************************************************************************/
17:17:48 1656  
17:17:48 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
17:17:48 1658  /*
17:17:48 1659  Throws exceptions (codes):
17:17:48 1660  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1661  */
17:17:48 1662  	 in_offer_chain_1 IN NUMBER,
17:17:48 1663  	 in_offer_chain_2 IN NUMBER,
17:17:48 1664  	 out_result_set   OUT SYS_REFCURSOR
17:17:48 1665  ) AS
17:17:48 1666  BEGIN
17:17:48 1667  
17:17:48 1668  	 OPEN out_result_set FOR
17:17:48 1669  	 SELECT
17:17:48 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
17:17:48 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
17:17:48 1672  	 FROM
17:17:48 1673  	   (
17:17:48 1674  	     SELECT
17:17:48 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
17:17:48 1676  	       COUNT(*) 		   as "COUNT_1"
17:17:48 1677  	     FROM
17:17:48 1678  	       (
17:17:48 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
17:17:48 1680  	       )
17:17:48 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
17:17:48 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48 1683  	     GROUP BY
17:17:48 1684  	       PRODUCT_OFFERING.PRODUCT_ID
17:17:48 1685  	   )
17:17:48 1686  	   INNER JOIN
17:17:48 1687  	   (
17:17:48 1688  	     SELECT
17:17:48 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
17:17:48 1690  	       COUNT(*) 		   as "COUNT_2"
17:17:48 1691  	     FROM
17:17:48 1692  	       (
17:17:48 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
17:17:48 1694  	       )
17:17:48 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
17:17:48 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48 1697  	     GROUP BY
17:17:48 1698  	       PRODUCT_OFFERING.PRODUCT_ID
17:17:48 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
17:17:48 1700  
17:17:48 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
17:17:48 1702  
17:17:48 1703  /******************************************************************************/
17:17:48 1704  
17:17:48 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
17:17:48 1706  	 in_offer_chain_id IN NUMBER,
17:17:48 1707  	 in_meta_data_name IN VARCHAR2,
17:17:48 1708  	 out_value	   OUT VARCHAR2
17:17:48 1709  ) AS
17:17:48 1710  BEGIN
17:17:48 1711  	 BEGIN
17:17:48 1712  	   SELECT
17:17:48 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
17:17:48 1714  	   FROM
17:17:48 1715  	     OFFER_CHAIN_META_DATA
17:17:48 1716  	   WHERE
17:17:48 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
17:17:48 1719  
17:17:48 1720  	   EXCEPTION
17:17:48 1721  	     WHEN NO_DATA_FOUND THEN
17:17:48 1722  	       out_value := NULL;
17:17:48 1723  	 END;
17:17:48 1724  END GET_OFFER_CHAIN_MD_VALUE;
17:17:48 1725  
17:17:48 1726  /******************************************************************************/
17:17:48 1727  
17:17:48 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
17:17:48 1729  	 in_offer_chain_id   IN NUMBER,
17:17:48 1730  	 in_eligibility_name IN VARCHAR2,
17:17:48 1731  	 out_value	     OUT VARCHAR2
17:17:48 1732  ) AS
17:17:48 1733  BEGIN
17:17:48 1734  	 BEGIN
17:17:48 1735  	   SELECT
17:17:48 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
17:17:48 1737  	   FROM
17:17:48 1738  	     OFFER_CHAIN_ELIGIBILITY
17:17:48 1739  	   WHERE
17:17:48 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
17:17:48 1742  
17:17:48 1743  	   EXCEPTION
17:17:48 1744  	     WHEN NO_DATA_FOUND THEN
17:17:48 1745  	       out_value := NULL;
17:17:48 1746  	 END;
17:17:48 1747  END GET_OFFER_CHAIN_EL_VALUE;
17:17:48 1748  
17:17:48 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
17:17:48 1750  	 in_offer_id	IN NUMBER,
17:17:48 1751  	 out_result_set OUT SYS_REFCURSOR
17:17:48 1752  ) AS
17:17:48 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
17:17:48 1754  -- VARIABLES
17:17:48 1755  temp_offer_id NUMBER;
17:17:48 1756  -- EXCEPTIONS
17:17:48 1757  BAD_OFFER_ID EXCEPTION;
17:17:48 1758  BEGIN
17:17:48 1759  
17:17:48 1760  	 BEGIN
17:17:48 1761  	   SELECT
17:17:48 1762  	     OFFER.ID into temp_offer_id
17:17:48 1763  	   FROM
17:17:48 1764  	     OFFER
17:17:48 1765  	   WHERE
17:17:48 1766  	     OFFER.ID = in_offer_id;
17:17:48 1767  	   EXCEPTION
17:17:48 1768  	     WHEN NO_DATA_FOUND THEN
17:17:48 1769  	       RAISE BAD_OFFER_ID;
17:17:48 1770  	 END;
17:17:48 1771  
17:17:48 1772  	 OPEN out_result_set FOR
17:17:48 1773  	 SELECT
17:17:48 1774  	   PRODUCT_OFFERING.ID,
17:17:48 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:48 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:48 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 1778  	   PRODUCT_OFFERING.QUANTITY,
17:17:48 1779  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:48 1780  	   PRODUCT_OFFERING.CREATED_BY,
17:17:48 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
17:17:48 1782  	 FROM
17:17:48 1783  	   PRODUCT_OFFERING
17:17:48 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:48 1785  	 WHERE
17:17:48 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
17:17:48 1787  
17:17:48 1788  EXCEPTION
17:17:48 1789  WHEN BAD_OFFER_ID THEN
17:17:48 1790  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1791  	   SPROC_NAME, 'No such offer');
17:17:48 1792  WHEN OTHERS THEN
17:17:48 1793  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1795  END GET_OFFER_PRODUCT_OFFERINGS;
17:17:48 1796  
17:17:48 1797  /******************************************************************************/
17:17:48 1798  
17:17:48 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
17:17:48 1800  	 in_meta_data_name  IN VARCHAR2,
17:17:48 1801  	 in_meta_data_value IN VARCHAR2,
17:17:48 1802  	 out_result_set     OUT SYS_REFCURSOR
17:17:48 1803  ) AS
17:17:48 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
17:17:48 1805  -- VARIABLES
17:17:48 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
17:17:48 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
17:17:48 1808  BEGIN
17:17:48 1809  
17:17:48 1810  	 OPEN out_result_set FOR
17:17:48 1811  	 SELECT
17:17:48 1812  	   och.ID,
17:17:48 1813  	   och.NAME,
17:17:48 1814  	   och.DESCRIPTION,
17:17:48 1815  	   och.OFFER_CHAIN_STATUS_ID,
17:17:48 1816  	   PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
17:17:48 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
17:17:48 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
17:17:48 1819  	   PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
17:17:48 1820  	   och.IS_GIFT_CERTIFICATE,
17:17:48 1821  	   'false' as comf_offer_chain, -- TODO
17:17:48 1822  	   po.PRODUCT_ID,
17:17:48 1823  	   och.GROUP_ACCOUNT_TYPE_ID
17:17:48 1824  	 FROM
17:17:48 1825  	   OFFER_CHAIN och,
17:17:48 1826  	   OFFER_OFFER_CHAIN ooch,
17:17:48 1827  	   OFFER_PRODUCT_OFFERING opo,
17:17:48 1828  	   PRODUCT_OFFERING po
17:17:48 1829  	 WHERE
17:17:48 1830  	   och.ID = ooch.OFFER_CHAIN_ID
17:17:48 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
17:17:48 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
17:17:48 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE
17:17:48 1834  	   and och.id in (
17:17:48 1835  	     SELECT DISTINCT
17:17:48 1836  	       och2.id
17:17:48 1837  	     from
17:17:48 1838  	       offer_chain och2
17:17:48 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
17:17:48 1840  	     where
17:17:48 1841  	       UPPER(ochmd.name) = v_meta_data_name
17:17:48 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
17:17:48 1843  	   );
17:17:48 1844  
17:17:48 1845  EXCEPTION
17:17:48 1846  WHEN OTHERS THEN
17:17:48 1847  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1849  END GET_OFFER_CHAINS_BY_META_DATA;
17:17:48 1850  
17:17:48 1851  /******************************************************************************/
17:17:48 1852  
17:17:48 1853  PROCEDURE GET_ALL_META_DATA (
17:17:48 1854  	 in_offer_chain_id IN NUMBER,
17:17:48 1855  	 out_result_set    OUT SYS_REFCURSOR
17:17:48 1856  ) AS
17:17:48 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
17:17:48 1858  -- Variables
17:17:48 1859  temp_offer_chain_id NUMBER;
17:17:48 1860  -- Exceptions
17:17:48 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:48 1862  BEGIN
17:17:48 1863  
17:17:48 1864  	 BEGIN
17:17:48 1865  	   SELECT
17:17:48 1866  	     OCH.ID into temp_offer_chain_id
17:17:48 1867  	   FROM
17:17:48 1868  	     OFFER_CHAIN OCH
17:17:48 1869  	   WHERE
17:17:48 1870  	     OCH.ID = in_offer_chain_id;
17:17:48 1871  	   EXCEPTION
17:17:48 1872  	     WHEN NO_DATA_FOUND THEN
17:17:48 1873  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:48 1874  	 END;
17:17:48 1875  
17:17:48 1876  	 OPEN out_result_set FOR
17:17:48 1877  	 SELECT
17:17:48 1878  	   OCHMD.ID,
17:17:48 1879  	   OCHMD.OFFER_CHAIN_ID,
17:17:48 1880  	   OCHMD.NAME,
17:17:48 1881  	   OCHMD.VALUE,
17:17:48 1882  	   OCHMD.CREATE_DATE,
17:17:48 1883  	   OCHMD.CREATED_BY
17:17:48 1884  	 FROM
17:17:48 1885  	   OFFER_CHAIN_META_DATA OCHMD
17:17:48 1886  	 WHERE
17:17:48 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
17:17:48 1888  
17:17:48 1889  EXCEPTION
17:17:48 1890  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:48 1891  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
17:17:48 1893  WHEN OTHERS THEN
17:17:48 1894  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1896  END GET_ALL_META_DATA;
17:17:48 1897  
17:17:48 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
17:17:48 1899  	 in_group_id	   IN NUMBER,
17:17:48 1900  	 in_offer_chain_id IN NUMBER,
17:17:48 1901  	 out_is_eligible   OUT NUMBER,
17:17:48 1902  	 out_concurrent_subscription_id OUT NUMBER
17:17:48 1903  ) AS
17:17:48 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
17:17:48 1905  -- Variables
17:17:48 1906  var_account_id  NUMBER;
17:17:48 1907  var_is_eligible NUMBER;
17:17:48 1908  var_is_gc       NUMBER;
17:17:48 1909  -- Exceptions
17:17:48 1910  BAD_GROUP_ID		   EXCEPTION;
17:17:48 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
17:17:48 1912  BAD_OC_ID		   EXCEPTION;
17:17:48 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
17:17:48 1914  BEGIN
17:17:48 1915  
17:17:48 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 1917  
17:17:48 1918  	 out_concurrent_subscription_id := NULL;
17:17:48 1919  
17:17:48 1920  	 BEGIN
17:17:48 1921  	   SELECT
17:17:48 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
17:17:48 1923  	   FROM
17:17:48 1924  	     OFFER_CHAIN OC
17:17:48 1925  	   WHERE
17:17:48 1926  	     OC.ID = in_offer_chain_id;
17:17:48 1927  	   EXCEPTION
17:17:48 1928  	     WHEN NO_DATA_FOUND THEN
17:17:48 1929  	       RAISE BAD_OC_ID;
17:17:48 1930  	 END;
17:17:48 1931  
17:17:48 1932  	 -- only check eligibility if this is not a gift certificate
17:17:48 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
17:17:48 1934  	   BEGIN
17:17:48 1935  	     SELECT
17:17:48 1936  	       A.ID into var_account_id
17:17:48 1937  	     FROM
17:17:48 1938  	       ACCOUNT A
17:17:48 1939  	     WHERE
17:17:48 1940  	       A.GROUP_ID = in_group_id;
17:17:48 1941  	     EXCEPTION
17:17:48 1942  	       WHEN NO_DATA_FOUND THEN
17:17:48 1943  		 RAISE BAD_GROUP_ID;
17:17:48 1944  	   END;
17:17:48 1945  
17:17:48 1946  
17:17:48 1947  	   FOR f_offer_chain IN (
17:17:48 1948  	       SELECT
17:17:48 1949  		 S.ID as SUBSCRIPTION_ID,
17:17:48 1950  		 S.OFFER_CHAIN_ID
17:17:48 1951  	       FROM
17:17:48 1952  		 SUBSCRIPTION S
17:17:48 1953  	       WHERE
17:17:48 1954  		 S.ACCOUNT_ID = var_account_id
17:17:48 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:48 1956  	   )
17:17:48 1957  	   LOOP
17:17:48 1958  	     BEGIN
17:17:48 1959  	       IF (
17:17:48 1960  		 PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(
17:17:48 1961  		   in_offer_chain_id,
17:17:48 1962  		   f_offer_chain.offer_chain_id,
17:17:48 1963  		   GLOBAL_CONSTANTS_V15.TRUE
17:17:48 1964  		 ) = GLOBAL_CONSTANTS_V15.TRUE
17:17:48 1965  	       ) THEN
17:17:48 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
17:17:48 1968  	       END IF;
17:17:48 1969  	       EXCEPTION
17:17:48 1970  		 WHEN OTHERS THEN
17:17:48 1971  		   EXCEPTION_MESSAGE := SQLERRM;
17:17:48 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
17:17:48 1973  	     END;
17:17:48 1974  	   END LOOP;
17:17:48 1975  	 END IF;
17:17:48 1976  	 out_is_eligible := var_is_eligible;
17:17:48 1977  
17:17:48 1978  EXCEPTION
17:17:48 1979  WHEN BAD_GROUP_ID THEN
17:17:48 1980  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
17:17:48 1982  WHEN BAD_OC_ID THEN
17:17:48 1983  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
17:17:48 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
17:17:48 1986  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
17:17:48 1988  WHEN OTHERS THEN
17:17:48 1989  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1991  END CHECK_PRODUCT_ELIGIBILITY;
17:17:48 1992  
17:17:48 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:48 1994  	 in_offer_chain_id	  IN NUMBER,
17:17:48 1995  	 in_action_name 	  IN VARCHAR2,
17:17:48 1996  	 out_notification_type_id OUT NUMBER
17:17:48 1997  ) AS
17:17:48 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
17:17:48 1999  -- Variables
17:17:48 2000  var_action_id NUMBER;
17:17:48 2001  -- Exceptions
17:17:48 2002  BAD_ACTION_NAME	      EXCEPTION;
17:17:48 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
17:17:48 2004  BEGIN
17:17:48 2005  
17:17:48 2006  	 BEGIN
17:17:48 2007  	   SELECT
17:17:48 2008  	     A.ID into var_action_id
17:17:48 2009  	   FROM
17:17:48 2010  	     ACTION A
17:17:48 2011  	   WHERE
17:17:48 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
17:17:48 2013  	   EXCEPTION
17:17:48 2014  	     WHEN NO_DATA_FOUND THEN
17:17:48 2015  	       RAISE BAD_ACTION_NAME;
17:17:48 2016  	     WHEN TOO_MANY_ROWS THEN
17:17:48 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
17:17:48 2018  	 END;
17:17:48 2019  
17:17:48 2020  	 SELECT
17:17:48 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
17:17:48 2022  	 FROM
17:17:48 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
17:17:48 2024  	 WHERE
17:17:48 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
17:17:48 2026  	   AND OCNT.ACTION_ID = var_action_id;
17:17:48 2027  
17:17:48 2028  EXCEPTION
17:17:48 2029  WHEN NO_DATA_FOUND THEN
17:17:48 2030  	 out_notification_type_id := NULL;
17:17:48 2031  WHEN BAD_ACTION_NAME THEN
17:17:48 2032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
17:17:48 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
17:17:48 2035  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
17:17:48 2037  WHEN OTHERS THEN
17:17:48 2038  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 2040  END GET_NOTIFICATION_TYPE_ID;
17:17:48 2041  
17:17:48 2042  END PROCS_OFFER_CHAIN_V15;
17:17:48 2043  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.14
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
17:17:48   2  AS
17:17:48   3  	  --------------------------------------------------------------------------------
17:17:48   4  PROCEDURE GATHER_SYNC_EVENTS
17:17:48   5  	  (
17:17:48   6  	      in_last_timestamp TIMESTAMP,
17:17:48   7  	      out_new_timestamp OUT TIMESTAMP)
17:17:48   8  IS
17:17:48   9  BEGIN
17:17:48  10  	  out_new_timestamp := systimestamp;
17:17:48  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
17:17:48  12  END;
17:17:48  13  	  --------------------------------------------------------------------------------
17:17:48  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
17:17:48  15  IS
17:17:48  16  BEGIN
17:17:48  17  	  INSERT
17:17:48  18  	  INTO
17:17:48  19  	      core_owner.polling_sync
17:17:48  20  	      (
17:17:48  21  		  account_id,
17:17:48  22  		  group_id,
17:17:48  23  		  event_type,
17:17:48  24  		  event_date
17:17:48  25  	      )
17:17:48  26  	  select id, group_id, event_type, event_date from (
17:17:48  27  	      SELECT
17:17:48  28  		  a.id,
17:17:48  29  		  a.group_id,
17:17:48  30  		  'I' event_type,
17:17:48  31  		  in_end_ts event_date,
17:17:48  32  		  max(cl.change_time) last_change_time
17:17:48  33  	      FROM
17:17:48  34  		  core_hist_owner.change_log cl,
17:17:48  35  		  core_owner.credit_card cc,
17:17:48  36  		  core_owner.account a
17:17:48  37  	      WHERE
17:17:48  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
17:17:48  39  	      AND cl.item = 'CREDIT_CARD'
17:17:48  40  	      AND cl.id = cc.id
17:17:48  41  	      AND cc.account_id = a.id
17:17:48  42  	      GROUP BY a.id, a.group_id
17:17:48  43  	      UNION ALL
17:17:48  44  	      SELECT
17:17:48  45  		  a.id,
17:17:48  46  		  a.group_id,
17:17:48  47  		  'I',
17:17:48  48  		  in_end_ts,
17:17:48  49  		  max(cl.change_time) last_change_time
17:17:48  50  	      FROM
17:17:48  51  		  core_hist_owner.change_log cl,
17:17:48  52  		  core_owner.paypal p,
17:17:48  53  		  core_owner.account a
17:17:48  54  	      WHERE
17:17:48  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
17:17:48  56  	      AND cl.item = 'PAYPAL'
17:17:48  57  	      AND cl.id = p.id
17:17:48  58  	      AND p.account_id = a.id
17:17:48  59  	      GROUP BY a.id, a.group_id
17:17:48  60  	      UNION ALL
17:17:48  61  	      SELECT
17:17:48  62  		  a.id,
17:17:48  63  		  a.group_id,
17:17:48  64  		  'S',
17:17:48  65  		  in_end_ts,
17:17:48  66  		  max(cl.change_time) last_change_time
17:17:48  67  	      FROM
17:17:48  68  		  core_hist_owner.change_log cl,
17:17:48  69  		  core_owner.subscription s,
17:17:48  70  		  core_owner.account a
17:17:48  71  	      WHERE
17:17:48  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
17:17:48  73  	      AND cl.item = 'SUBSCRIPTION'
17:17:48  74  	      AND cl.id = s.id
17:17:48  75  	      AND s.account_id = a.id
17:17:48  76  	      GROUP BY a.id, a.group_id
17:17:48  77  	      UNION ALL
17:17:48  78  	      SELECT
17:17:48  79  		  a.id,
17:17:48  80  		  a.group_id,
17:17:48  81  		  'G',
17:17:48  82  		  in_end_ts,
17:17:48  83  		  max(cl.change_time) last_change_time
17:17:48  84  	      FROM
17:17:48  85  		  core_hist_owner.change_log cl,
17:17:48  86  		  core_owner.gift_certificate gc,
17:17:48  87  		  core_owner.account a
17:17:48  88  	      WHERE
17:17:48  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
17:17:48  90  	      AND cl.item = 'GIFT_CERTIFICATE'
17:17:48  91  	      AND cl.id = gc.id
17:17:48  92  	      AND gc.purchaser_group_id = a.group_id
17:17:48  93  	      GROUP BY a.id, a.group_id
17:17:48  94  	  ) t
17:17:48  95  	  where not exists (
17:17:48  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
17:17:48  97  	      from polling_sync ps
17:17:48  98  	      where ps.account_id = t.id
17:17:48  99  		and ps.group_id = t.group_id
17:17:48 100  		and ps.event_type = t.event_type
17:17:48 101  		and ps.event_date >= t.last_change_time
17:17:48 102  	  )
17:17:48 103  	  ;
17:17:48 104  END;
17:17:48 105  --------------------------------------------------------------------------------
17:17:48 106  FUNCTION CREATE_NEW_TRANSFER_SET
17:17:48 107  	  (
17:17:48 108  	      in_set_maximum NUMBER)
17:17:48 109  	  RETURN core_owner.polling_sync.set_id%type
17:17:48 110  IS
17:17:48 111  	  pragma autonomous_transaction;
17:17:48 112  	  v_set_id core_owner.polling_sync.set_id%type;
17:17:48 113  BEGIN
17:17:48 114  	  SELECT
17:17:48 115  	      pollsync_setid_seq.nextval
17:17:48 116  	  INTO
17:17:48 117  	      v_set_id
17:17:48 118  	  FROM
17:17:48 119  	      dual;
17:17:48 120  	  update
17:17:48 121  	    core_owner.polling_sync ps
17:17:48 122  	  set
17:17:48 123  	    ps.set_id = v_set_id
17:17:48 124  	  where
17:17:48 125  	    ps.set_id IS NULL and
17:17:48 126  	    rownum <= in_set_maximum
17:17:48 127  	  ;
17:17:48 128  	  COMMIT;
17:17:48 129  	  RETURN v_set_id;
17:17:48 130  END;
17:17:48 131  --------------------------------------------------------------------------------
17:17:48 132  FUNCTION RETREIVE_TRANSFER_SET
17:17:48 133  	  (
17:17:48 134  	      in_set_id core_owner.polling_sync.set_id%type)
17:17:48 135  	  RETURN sys_refcursor
17:17:48 136  IS
17:17:48 137  	  v_refcursor sys_refcursor;
17:17:48 138  BEGIN
17:17:48 139  	  UPDATE
17:17:48 140  	      core_owner.polling_sync ps
17:17:48 141  	  SET
17:17:48 142  	      ps.last_send_date = sysdate,
17:17:48 143  	      ps.num_calls = ps.num_calls + 1
17:17:48 144  	  WHERE
17:17:48 145  	      ps.set_id = in_set_id ;
17:17:48 146  	  OPEN v_refcursor FOR
17:17:48 147  	  SELECT
17:17:48 148  	      ps.set_id,
17:17:48 149  	      ps.group_id,
17:17:48 150  	      ps.event_type,
17:17:48 151  	      ps.event_date
17:17:48 152  	  FROM
17:17:48 153  	      core_owner.polling_sync ps
17:17:48 154  	  WHERE
17:17:48 155  	      ps.set_id = in_set_id
17:17:48 156  	  AND ps.group_id IS NOT NULL ;
17:17:48 157  	  RETURN v_refcursor;
17:17:48 158  END;
17:17:48 159  --------------------------------------------------------------------------------
17:17:48 160  PROCEDURE GET_TRANSFER_SET
17:17:48 161  	  (
17:17:48 162  	      in_set_maximum NUMBER,
17:17:48 163  	      in_max_retries NUMBER,
17:17:48 164  	      out_refcursor OUT sys_refcursor)
17:17:48 165  IS
17:17:48 166  	  v_set_id core_owner.polling_sync.set_id%type;
17:17:48 167  BEGIN
17:17:48 168  	  /* Look for previously sent but unconfirmed sets and
17:17:48 169  	  send again until max_retries calls */
17:17:48 170  	  FOR x IN
17:17:48 171  	  (
17:17:48 172  	      SELECT
17:17:48 173  		  ps.set_id,
17:17:48 174  		  COUNT( *) set_size
17:17:48 175  	      FROM
17:17:48 176  		  core_owner.polling_sync ps
17:17:48 177  	      WHERE
17:17:48 178  		  ps.event_date > sysdate - 14
17:17:48 179  	      AND ps.confirm_date IS NULL
17:17:48 180  	      AND ps.last_send_date IS NOT NULL
17:17:48 181  	      AND ps.num_calls < in_max_retries
17:17:48 182  	      GROUP BY
17:17:48 183  		  ps.set_id
17:17:48 184  	      ORDER BY
17:17:48 185  		  ps.set_id
17:17:48 186  	  )
17:17:48 187  	  LOOP
17:17:48 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
17:17:48 189  	      RETURN;
17:17:48 190  	  END LOOP;
17:17:48 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
17:17:48 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
17:17:48 193  	  RETURN;
17:17:48 194  END;
17:17:48 195  --------------------------------------------------------------------------------
17:17:48 196  PROCEDURE CONFIRM_TRANSFER_SET
17:17:48 197  	  (
17:17:48 198  	      in_set_id core_owner.polling_sync.set_id%type)
17:17:48 199  IS
17:17:48 200  	  v_unconfirmable EXCEPTION;
17:17:48 201  BEGIN
17:17:48 202  	  UPDATE
17:17:48 203  	      core_owner.polling_sync ps
17:17:48 204  	  SET
17:17:48 205  	      ps.confirm_date = systimestamp
17:17:48 206  	  WHERE
17:17:48 207  	      ps.set_id = in_set_id
17:17:48 208  	  AND ps.confirm_date IS NULL ;
17:17:48 209  	  IF(sql%rowcount < 1) THEN
17:17:48 210  	      raise v_unconfirmable;
17:17:48 211  	  END IF;
17:17:48 212  END;
17:17:48 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
17:17:48 214  IS
17:17:48 215  BEGIN
17:17:48 216  	  UPDATE POLLING_SYNC_LASTRUN
17:17:48 217  	  SET last_run = current_timestamp;
17:17:48 218  	  IF ( sql%rowcount = 0 )
17:17:48 219  	  THEN
17:17:48 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
17:17:48 221  	  END if;
17:17:48 222  	  COMMIT;
17:17:48 223  END;
17:17:48 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
17:17:48 225  IS
17:17:48 226  BEGIN
17:17:48 227  	  SELECT LAST_RUN INTO ts
17:17:48 228  	  FROM POLLING_SYNC_LASTRUN
17:17:48 229  	  WHERE ROWNUM < 2;
17:17:48 230  EXCEPTION
17:17:48 231  	WHEN NO_DATA_FOUND
17:17:48 232  	THEN
17:17:48 233  	  ts := current_timestamp;
17:17:48 234  END;
17:17:48 235  END PROCS_POLLING_SYNC;
17:17:48 236  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.08
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE GET_PRODUCTS (
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   7  */
17:17:48   8  	in_status_id   IN  NUMBER,
17:17:48   9  	out_result_set OUT SYS_REFCURSOR
17:17:48  10  ) AS
17:17:48  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
17:17:48  12  BEGIN
17:17:48  13  	OPEN out_result_set FOR
17:17:48  14  	SELECT
17:17:48  15  	  PRODUCT.ID,
17:17:48  16  	  PRODUCT.NAME,
17:17:48  17  	  PRODUCT.UNIT_PRICE,
17:17:48  18  	  PRODUCT.PRODUCTION_COST,
17:17:48  19  	  PRODUCT.CREATE_DATE,
17:17:48  20  	  PRODUCT.CREATED_BY,
17:17:48  21  	  PRODUCT.PRODUCT_STATUS_ID,
17:17:48  22  	  PRODUCT.PRODUCT_URI
17:17:48  23  	FROM
17:17:48  24  	  PRODUCT
17:17:48  25   WHERE
17:17:48  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
17:17:48  27  EXCEPTION
17:17:48  28  WHEN OTHERS THEN
17:17:48  29  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  31  END GET_PRODUCTS;
17:17:48  32  
17:17:48  33  /******************************************************************************/
17:17:48  34  
17:17:48  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:48  36  	in_product_offering_id	IN NUMBER,
17:17:48  37  	out_result_set OUT SYS_REFCURSOR
17:17:48  38  ) AS
17:17:48  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
17:17:48  40  -- VARIABLES
17:17:48  41  temp_product_offering_id NUMBER;
17:17:48  42  -- EXCEPTIONS
17:17:48  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
17:17:48  44  BEGIN
17:17:48  45  
17:17:48  46  	-- Check that product offering exists
17:17:48  47  	BEGIN
17:17:48  48  	  SELECT
17:17:48  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
17:17:48  50  	  FROM
17:17:48  51  	    PRODUCT_OFFERING
17:17:48  52  	  WHERE
17:17:48  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
17:17:48  54  	  EXCEPTION
17:17:48  55  	    WHEN NO_DATA_FOUND THEN
17:17:48  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
17:17:48  57  	END;
17:17:48  58  
17:17:48  59  	OPEN out_result_set FOR
17:17:48  60  	SELECT
17:17:48  61  	  PRODUCT_OFFERING_META_DATA.ID,
17:17:48  62  	  PRODUCT_OFFERING_META_DATA.NAME,
17:17:48  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
17:17:48  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
17:17:48  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
17:17:48  66  	FROM
17:17:48  67  	  PRODUCT_OFFERING_META_DATA
17:17:48  68  	WHERE
17:17:48  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
17:17:48  70  
17:17:48  71  EXCEPTION
17:17:48  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
17:17:48  73  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48  74  	  SPROC_NAME, 'No such product offering id');
17:17:48  75  WHEN OTHERS THEN
17:17:48  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  78  END GET_PRODUCT_OFFERING_META_DATA;
17:17:48  79  
17:17:48  80  /******************************************************************************/
17:17:48  81  
17:17:48  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
17:17:48  83  /*
17:17:48  84  Throws exceptions:
17:17:48  85  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48  87  */
17:17:48  88  	in_product_id	    IN NUMBER,
17:17:48  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
17:17:48  90  	out_result_set	    OUT SYS_REFCURSOR
17:17:48  91  ) AS
17:17:48  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
17:17:48  93  -- VARIABLES
17:17:48  94  temp_product_id NUMBER;
17:17:48  95  -- EXCEPTIONS
17:17:48  96  BAD_PRODUCT_ID EXCEPTION;
17:17:48  97  BEGIN
17:17:48  98  
17:17:48  99  	BEGIN
17:17:48 100  	  SELECT
17:17:48 101  	    PRODUCT.ID into temp_product_id
17:17:48 102  	  FROM
17:17:48 103  	    PRODUCT
17:17:48 104  	  WHERE
17:17:48 105  	    PRODUCT.ID = in_product_id;
17:17:48 106  	  EXCEPTION
17:17:48 107  	    WHEN NO_DATA_FOUND THEN
17:17:48 108  	      RAISE BAD_PRODUCT_ID;
17:17:48 109  	END;
17:17:48 110  
17:17:48 111  	OPEN out_result_set FOR
17:17:48 112  	SELECT
17:17:48 113  	  PRODUCT_ELIGIBILITY.ID
17:17:48 114  	FROM
17:17:48 115  	  PRODUCT_ELIGIBILITY
17:17:48 116  	WHERE
17:17:48 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
17:17:48 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
17:17:48 119  
17:17:48 120  EXCEPTION
17:17:48 121  WHEN BAD_PRODUCT_ID THEN
17:17:48 122  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 123  	  SPROC_NAME, 'No such product');
17:17:48 124  WHEN OTHERS THEN
17:17:48 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
17:17:48 128  
17:17:48 129  /******************************************************************************/
17:17:48 130  
17:17:48 131  PROCEDURE GET_PRODUCT_BY_ID (
17:17:48 132  	in_product_id  IN NUMBER,
17:17:48 133  	out_result_set OUT SYS_REFCURSOR
17:17:48 134  ) AS
17:17:48 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
17:17:48 136  -- VARIABLES
17:17:48 137  temp_product_id NUMBER;
17:17:48 138  -- EXCEPTIONS
17:17:48 139  BAD_PRODUCT_ID EXCEPTION;
17:17:48 140  BEGIN
17:17:48 141  
17:17:48 142  	BEGIN
17:17:48 143  	  SELECT
17:17:48 144  	    PRODUCT.ID into temp_product_id
17:17:48 145  	  FROM
17:17:48 146  	    PRODUCT
17:17:48 147  	  WHERE
17:17:48 148  	    PRODUCT.ID = in_product_id;
17:17:48 149  	  EXCEPTION
17:17:48 150  	    WHEN NO_DATA_FOUND THEN
17:17:48 151  	      RAISE BAD_PRODUCT_ID;
17:17:48 152  	END;
17:17:48 153  
17:17:48 154  	OPEN out_result_set FOR
17:17:48 155  	SELECT
17:17:48 156  	  PRODUCT.ID,
17:17:48 157  	  PRODUCT.NAME,
17:17:48 158  	  PRODUCT.PRODUCT_STATUS_ID,
17:17:48 159  	  PRODUCT.PRODUCT_URI,
17:17:48 160  	  PRODUCT.PRODUCTION_COST,
17:17:48 161  	  PRODUCT.UNIT_PRICE,
17:17:48 162  	  PRODUCT.CREATE_DATE,
17:17:48 163  	  PRODUCT.CREATED_BY
17:17:48 164  	FROM
17:17:48 165  	  PRODUCT
17:17:48 166  	WHERE
17:17:48 167  	  PRODUCT.ID = in_product_id;
17:17:48 168  
17:17:48 169  EXCEPTION
17:17:48 170  WHEN BAD_PRODUCT_ID THEN
17:17:48 171  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 172  	  SPROC_NAME, 'No such product');
17:17:48 173  WHEN OTHERS THEN
17:17:48 174  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 176  END GET_PRODUCT_BY_ID;
17:17:48 177  
17:17:48 178  /******************************************************************************/
17:17:48 179  
17:17:48 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
17:17:48 181  	in_line_item_id IN NUMBER,
17:17:48 182  	out_result_set	OUT SYS_REFCURSOR
17:17:48 183  ) AS
17:17:48 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
17:17:48 185  -- VARIABLES
17:17:48 186  temp_line_item_id NUMBER;
17:17:48 187  -- EXCEPTIONS
17:17:48 188  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48 189  BEGIN
17:17:48 190  
17:17:48 191  	BEGIN
17:17:48 192  	  SELECT
17:17:48 193  	    LINE_ITEM.ID into temp_line_item_id
17:17:48 194  	  FROM
17:17:48 195  	    LINE_ITEM
17:17:48 196  	  WHERE
17:17:48 197  	    LINE_ITEM.ID = in_line_item_id;
17:17:48 198  	  EXCEPTION
17:17:48 199  	    WHEN NO_DATA_FOUND THEN
17:17:48 200  	      RAISE BAD_LINE_ITEM_ID;
17:17:48 201  	END;
17:17:48 202  
17:17:48 203  	OPEN out_result_set FOR
17:17:48 204  	SELECT
17:17:48 205  	  PRODUCT_OFFERING.ID,
17:17:48 206  	  PRODUCT_OFFERING.PRODUCT_ID,
17:17:48 207  	  PRODUCT_OFFERING.QUANTITY,
17:17:48 208  	  PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:48 210  	  PRODUCT_OFFERING.CREATE_DATE,
17:17:48 211  	  PRODUCT_OFFERING.CREATED_BY,
17:17:48 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
17:17:48 213  	  CAPABILITY.ID CAP_ID,
17:17:48 214  	  CAPABILITY.CODE CAP_CODE,
17:17:48 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:48 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:48 217  	FROM
17:17:48 218  	  PRODUCT_OFFERING
17:17:48 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
17:17:48 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:48 221  	WHERE
17:17:48 222  	  LINE_ITEM.ID = in_line_item_id;
17:17:48 223  
17:17:48 224  EXCEPTION
17:17:48 225  WHEN BAD_LINE_ITEM_ID THEN
17:17:48 226  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 227  	  SPROC_NAME, 'No such line item');
17:17:48 228  WHEN OTHERS THEN
17:17:48 229  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
17:17:48 232  
17:17:48 233  /******************************************************************************/
17:17:48 234  
17:17:48 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
17:17:48 236  	in_product_offering_id IN NUMBER,
17:17:48 237  	out_result_set	OUT SYS_REFCURSOR
17:17:48 238  ) AS
17:17:48 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
17:17:48 240  BEGIN
17:17:48 241  	OPEN out_result_set FOR
17:17:48 242  	SELECT
17:17:48 243  	  PRODUCT_OFFERING.ID,
17:17:48 244  	  PRODUCT_OFFERING.PRODUCT_ID,
17:17:48 245  	  PRODUCT_OFFERING.QUANTITY,
17:17:48 246  	  PRODUCT_OFFERING.UNIT_PRICE,
17:17:48 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:48 248  	  PRODUCT_OFFERING.CREATE_DATE,
17:17:48 249  	  PRODUCT_OFFERING.CREATED_BY,
17:17:48 250  	  CAPABILITY.ID CAP_ID,
17:17:48 251  	  CAPABILITY.CODE CAP_CODE,
17:17:48 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:48 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:48 254  	FROM
17:17:48 255  	  PRODUCT_OFFERING
17:17:48 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:48 257  	WHERE
17:17:48 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
17:17:48 259  
17:17:48 260  EXCEPTION
17:17:48 261  WHEN OTHERS THEN
17:17:48 262  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 264  END GET_PRD_OFFERING_BY_ID;
17:17:48 265  
17:17:48 266  /******************************************************************************/
17:17:48 267  
17:17:48 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
17:17:48 269  	in_product_offering_id IN NUMBER,
17:17:48 270  	out_result_set	       OUT SYS_REFCURSOR
17:17:48 271  ) AS
17:17:48 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
17:17:48 273  -- VARIABLES
17:17:48 274  temp_product_offering_id NUMBER;
17:17:48 275  -- EXCEPTIONS
17:17:48 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
17:17:48 277  BEGIN
17:17:48 278  
17:17:48 279  	BEGIN
17:17:48 280  	  SELECT
17:17:48 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
17:17:48 282  	  FROM
17:17:48 283  	    PRODUCT_OFFERING
17:17:48 284  	  WHERE
17:17:48 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
17:17:48 286  	  EXCEPTION
17:17:48 287  	    WHEN NO_DATA_FOUND THEN
17:17:48 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
17:17:48 289  	END;
17:17:48 290  
17:17:48 291  	OPEN out_result_set FOR
17:17:48 292  	SELECT
17:17:48 293  	  DISCOUNT.ID,
17:17:48 294  	  DISCOUNT.NAME,
17:17:48 295  	  DISCOUNT.FIXED_AMOUNT,
17:17:48 296  	  DISCOUNT.PERCENT_AMOUNT,
17:17:48 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
17:17:48 298  	  DISCOUNT.CREATE_DATE,
17:17:48 299  	  DISCOUNT.CREATED_BY,
17:17:48 300  	  DISCOUNT.DESCRIPTION
17:17:48 301  	FROM
17:17:48 302  	  DISCOUNT
17:17:48 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
17:17:48 304  	WHERE
17:17:48 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
17:17:48 306  
17:17:48 307  EXCEPTION
17:17:48 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
17:17:48 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 310  	  SPROC_NAME, 'No such product offering');
17:17:48 311  WHEN OTHERS THEN
17:17:48 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
17:17:48 315  
17:17:48 316  END PROCS_PRODUCT_V15;
17:17:48 317  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE
17:17:48   2  PACKAGE BODY PROCS_REPORTING AS
17:17:48   3  
17:17:48   4  ----
17:17:48   5  --------------------------------------------------------------------------------
17:17:48   6  ----
17:17:48   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48   8  	  is
17:17:48   9  	  begin
17:17:48  10  	      open out_cursor for
17:17:48  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
17:17:48  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
17:17:48  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
17:17:48  14  			,c.create_date, c.update_date
17:17:48  15  		  from charge c
17:17:48  16  		      ,charge_status cs
17:17:48  17  		      ,instrument_type it
17:17:48  18  		      ,ids
17:17:48  19  		  where c.id = ids.id
17:17:48  20  		    and c.charge_status_id = cs.id
17:17:48  21  		    and c.instrument_type_id = it.id
17:17:48  22  	      ;
17:17:48  23  	  end;
17:17:48  24  ----
17:17:48  25  --------------------------------------------------------------------------------
17:17:48  26  ----
17:17:48  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48  28  	  is
17:17:48  29  	  begin
17:17:48  30  	      open out_cursor for
17:17:48  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
17:17:48  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
17:17:48  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
17:17:48  35  		  from license l
17:17:48  36  		      ,license_status ls
17:17:48  37  		      ,ids
17:17:48  38  		  where l.id = ids.id
17:17:48  39  		    and l.license_status_id = ls.id
17:17:48  40  	      ;
17:17:48  41  	  end;
17:17:48  42  ----
17:17:48  43  --------------------------------------------------------------------------------
17:17:48  44  ----
17:17:48  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48  46  	  is
17:17:48  47  	  begin
17:17:48  48  	      open out_cursor for
17:17:48  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
17:17:48  50  		  select
17:17:48  51  		    i.id invoice_id,
17:17:48  52  		    i.create_date,
17:17:48  53  		    i.update_date,
17:17:48  54  		    i.invoice_status_id,
17:17:48  55  		    istat.value invoice_status,
17:17:48  56  		    NVL(
17:17:48  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
17:17:48  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
17:17:48  59  		    ) offer_chain_id
17:17:48  60  		  from	   invoice i
17:17:48  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
17:17:48  62  		      join ids			on ids.id = i.id
17:17:48  63  		  where 1 = 1
17:17:48  64  	      ;
17:17:48  65  	  end;
17:17:48  66  ----
17:17:48  67  --------------------------------------------------------------------------------
17:17:48  68  ----
17:17:48  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48  70  	  is
17:17:48  71  	  begin
17:17:48  72  	      open out_cursor for
17:17:48  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
17:17:48  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
17:17:48  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
17:17:48  76  		  from line_item li
17:17:48  77  		    , ids
17:17:48  78  		  where li.id = ids.id
17:17:48  79  	      ;
17:17:48  80  	  end;
17:17:48  81  ----
17:17:48  82  --------------------------------------------------------------------------------
17:17:48  83  ----
17:17:48  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48  85  	  is
17:17:48  86  	  begin
17:17:48  87  	      open out_cursor for
17:17:48  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
17:17:48  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
17:17:48  91  			,a.instrument_id, a.tax_exempt_id
17:17:48  92  			-- need system category??
17:17:48  93  		  from account a
17:17:48  94  		      ,account_status astat
17:17:48  95  		      ,instrument_type it
17:17:48  96  		      , ids
17:17:48  97  		  where a.id = ids.id
17:17:48  98  		    and astat.id = a.account_status_id
17:17:48  99  		    and a.instrument_type_id = it.id(+)
17:17:48 100  	      ;
17:17:48 101  	  end;
17:17:48 102  ----
17:17:48 103  --------------------------------------------------------------------------------
17:17:48 104  ----
17:17:48 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 106  	  is
17:17:48 107  	  begin
17:17:48 108  	      open out_cursor for
17:17:48 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
17:17:48 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
17:17:48 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
17:17:48 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
17:17:48 114  		  from subscription s
17:17:48 115  		      ,subscription_status ss
17:17:48 116  		      ,subscription_cancel_reason sct
17:17:48 117  		      ,instrument_type it
17:17:48 118  		      , ids
17:17:48 119  		  where s.id = ids.id
17:17:48 120  		    and ss.id = s.subscription_status_id
17:17:48 121  		    and s.instrument_type_id = it.id
17:17:48 122  		    and sct.id(+) = s.sct_id
17:17:48 123  	      ;
17:17:48 124  	  end;
17:17:48 125  ----
17:17:48 126  --------------------------------------------------------------------------------
17:17:48 127  ----
17:17:48 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 129  	  is
17:17:48 130  	  begin
17:17:48 131  	      open out_cursor for
17:17:48 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 133  		  select t.id transaction_id, t.transaction_amount
17:17:48 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
17:17:48 135  			,t.create_date, t.update_date, t.is_settled
17:17:48 136  		  from transaction t
17:17:48 137  		      ,transaction_status ts
17:17:48 138  		      , ids
17:17:48 139  		  where t.id = ids.id
17:17:48 140  		    and t.transaction_status_id = ts.id
17:17:48 141  	      ;
17:17:48 142  	  end;
17:17:48 143  ----
17:17:48 144  --------------------------------------------------------------------------------
17:17:48 145  ----
17:17:48 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 147  	  is
17:17:48 148  	  begin
17:17:48 149  	      open out_cursor for
17:17:48 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
17:17:48 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
17:17:48 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
17:17:48 154  			,oc.billing_source_id, bs.name billing_source_name
17:17:48 155  			,oc.is_seat_license,oc.group_account_type_id
17:17:48 156  		  from offer_chain oc
17:17:48 157  		      , offer_chain_status ocs
17:17:48 158  		      , ids
17:17:48 159  		      , vendor_source vs
17:17:48 160  		      , billing_source bs
17:17:48 161  		  where oc.id = ids.id
17:17:48 162  		    and oc.offer_chain_status_id = ocs.id
17:17:48 163  		    and oc.vendor_source_id = vs.id
17:17:48 164  		    and oc.billing_source_id = bs.id
17:17:48 165  	      ;
17:17:48 166  	  end;
17:17:48 167  ----
17:17:48 168  --------------------------------------------------------------------------------
17:17:48 169  ----
17:17:48 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 171  	  is
17:17:48 172  	  begin
17:17:48 173  	      open out_cursor for
17:17:48 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
17:17:48 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
17:17:48 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
17:17:48 177  		  from offer_offer_chain ooc
17:17:48 178  		  , ids
17:17:48 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
17:17:48 180  	      ;
17:17:48 181  	  end;
17:17:48 182  ----
17:17:48 183  --------------------------------------------------------------------------------
17:17:48 184  ----
17:17:48 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 186  	  is
17:17:48 187  	  begin
17:17:48 188  	      open out_cursor for
17:17:48 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
17:17:48 191  		  from offer o
17:17:48 192  		      ,offer_status os
17:17:48 193  		      , ids
17:17:48 194  		  where o.id = ids.id
17:17:48 195  		    and o.offer_status_id = os.id
17:17:48 196  	      ;
17:17:48 197  	  end;
17:17:48 198  ----
17:17:48 199  --------------------------------------------------------------------------------
17:17:48 200  ----
17:17:48 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 202  	  is
17:17:48 203  	  begin
17:17:48 204  	      open out_cursor for
17:17:48 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
17:17:48 207  			 ,gc.expiration_date, gc.purchase_date
17:17:48 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
17:17:48 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
17:17:48 210  			 ,recipient_address_id
17:17:48 211  			 ,redeemer_address_id
17:17:48 212  			 ,recipient_notify_date
17:17:48 213  			 ,recipient_name
17:17:48 214  			 ,redemption_date
17:17:48 215  			 ,recipient_email
17:17:48 216  		  from gift_certificate gc
17:17:48 217  		      ,gift_certificate_status gcs
17:17:48 218  		      , ids
17:17:48 219  		  where gc.id = ids.id
17:17:48 220  		    and gc.gift_certificate_status_id = gcs.id
17:17:48 221  	      ;
17:17:48 222  	  end;
17:17:48 223  ----
17:17:48 224  --------------------------------------------------------------------------------
17:17:48 225  ----
17:17:48 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 227  	  is
17:17:48 228  	  begin
17:17:48 229  	      open out_cursor for
17:17:48 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
17:17:48 232  		  from product_offering po
17:17:48 233  		  , ids
17:17:48 234  		  where po.id = ids.id
17:17:48 235  	      ;
17:17:48 236  	  end;
17:17:48 237  ----
17:17:48 238  --------------------------------------------------------------------------------
17:17:48 239  ----
17:17:48 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 241  	  is
17:17:48 242  	  begin
17:17:48 243  	      open out_cursor for
17:17:48 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
17:17:48 246  			,product_uri, p.create_date
17:17:48 247  		  from product p
17:17:48 248  		      ,product_status ps
17:17:48 249  		      , ids
17:17:48 250  		  where p.id = ids.id
17:17:48 251  		    and p.product_status_id = ps.id
17:17:48 252  	      ;
17:17:48 253  	  end;
17:17:48 254  ----
17:17:48 255  --------------------------------------------------------------------------------
17:17:48 256  ----
17:17:48 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 258  	  is
17:17:48 259  	  begin
17:17:48 260  	      open out_cursor for
17:17:48 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
17:17:48 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
17:17:48 263  		  from offer_product_offering opo
17:17:48 264  		  , ids
17:17:48 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
17:17:48 266  	      ;
17:17:48 267  	  end;
17:17:48 268  ----
17:17:48 269  --------------------------------------------------------------------------------
17:17:48 270  ----
17:17:48 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 272  	  is
17:17:48 273  	  begin
17:17:48 274  	      open out_cursor for
17:17:48 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
17:17:48 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
17:17:48 277  		  from discount_product_offering dpo
17:17:48 278  		  , ids
17:17:48 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
17:17:48 280  	      ;
17:17:48 281  	  end;
17:17:48 282  ----
17:17:48 283  --------------------------------------------------------------------------------
17:17:48 284  ----
17:17:48 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 286  	  is
17:17:48 287  	  begin
17:17:48 288  	      open out_cursor for
17:17:48 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
17:17:48 291  			,d.discount_type_id, dt.value discount_type, d.create_date
17:17:48 292  		  from discount d
17:17:48 293  		      ,discount_type dt
17:17:48 294  		      , ids
17:17:48 295  		  where d.id = ids.id
17:17:48 296  		    and d.discount_type_id = dt.id
17:17:48 297  	      ;
17:17:48 298  	  end;
17:17:48 299  ----
17:17:48 300  --------------------------------------------------------------------------------
17:17:48 301  ----
17:17:48 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 303  	  is
17:17:48 304  	  begin
17:17:48 305  	      open out_cursor for
17:17:48 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
17:17:48 308  		  from product_eligibility pg
17:17:48 309  		  , ids
17:17:48 310  		  where pg.id = ids.id
17:17:48 311  	      ;
17:17:48 312  	  end;
17:17:48 313  ----
17:17:48 314  --------------------------------------------------------------------------------
17:17:48 315  ----
17:17:48 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 317  	  is
17:17:48 318  	  begin
17:17:48 319  	      open out_cursor for
17:17:48 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
17:17:48 322  		  from offer_chain_eligibility oce
17:17:48 323  		  , ids
17:17:48 324  		  where oce.id = ids.id
17:17:48 325  	      ;
17:17:48 326  	  end;
17:17:48 327  ----
17:17:48 328  --------------------------------------------------------------------------------
17:17:48 329  ----
17:17:48 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 331  	  is
17:17:48 332  	  begin
17:17:48 333  	      open out_cursor for
17:17:48 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
17:17:48 336  		  from offer_chain_meta_data ocm
17:17:48 337  		  , ids
17:17:48 338  		  where ocm.id = ids.id
17:17:48 339  	      ;
17:17:48 340  	  end;
17:17:48 341  ----
17:17:48 342  --------------------------------------------------------------------------------
17:17:48 343  ----
17:17:48 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 345  	  is
17:17:48 346  	  begin
17:17:48 347  	      open out_cursor for
17:17:48 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
17:17:48 350  		  from product_offering_meta_data pom
17:17:48 351  		  , ids
17:17:48 352  		  where pom.id = ids.id
17:17:48 353  	      ;
17:17:48 354  	  end;
17:17:48 355  ----
17:17:48 356  --------------------------------------------------------------------------------
17:17:48 357  ----
17:17:48 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 359  	  is
17:17:48 360  	  begin
17:17:48 361  	      open out_cursor for
17:17:48 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
17:17:48 364  		  from subscription_meta_data sm
17:17:48 365  		  , ids
17:17:48 366  		  where sm.id = ids.id
17:17:48 367  	      ;
17:17:48 368  	  end;
17:17:48 369  ----
17:17:48 370  --------------------------------------------------------------------------------
17:17:48 371  ----
17:17:48 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 373  	  is
17:17:48 374  	  begin
17:17:48 375  	      open out_cursor for
17:17:48 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
17:17:48 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
17:17:48 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
17:17:48 380  		  from credit_card cc
17:17:48 381  		      ,credit_card_type cct
17:17:48 382  		      ,credit_card_status ccs
17:17:48 383  		      , ids
17:17:48 384  		  where cc.id = ids.id
17:17:48 385  		    and cc.credit_card_type_id = cct.id(+)
17:17:48 386  		    and cc.credit_card_status_id = ccs.id
17:17:48 387  	      ;
17:17:48 388  	  end;
17:17:48 389  ----
17:17:48 390  --------------------------------------------------------------------------------
17:17:48 391  ----
17:17:48 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 393  	  is
17:17:48 394  	  begin
17:17:48 395  	      open out_cursor for
17:17:48 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
17:17:48 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
17:17:48 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
17:17:48 400  			,ta.create_date
17:17:48 401  		  from transaction_attempt ta
17:17:48 402  		      ,transaction_attempt_status tas
17:17:48 403  		      , ids
17:17:48 404  		  where ta.id = ids.id
17:17:48 405  		    and ta.transaction_attempt_status_id = tas.id
17:17:48 406  	      ;
17:17:48 407  	  end;
17:17:48 408  ----
17:17:48 409  --------------------------------------------------------------------------------
17:17:48 410  ----
17:17:48 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 412  	  is
17:17:48 413  	  begin
17:17:48 414  	      open out_cursor for
17:17:48 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
17:17:48 417  			,ia.adjustment_date, ia.create_date
17:17:48 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
17:17:48 419  		  , ids
17:17:48 420  		  where ia.id = ids.id
17:17:48 421  		  and ir.id = ia.invoice_adjustment_reason_id
17:17:48 422  	      ;
17:17:48 423  	  end;
17:17:48 424  ----
17:17:48 425  --------------------------------------------------------------------------------
17:17:48 426  ----
17:17:48 427  
17:17:48 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 429  	  is
17:17:48 430  	  begin
17:17:48 431  	      open out_cursor for
17:17:48 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
17:17:48 434  		  from line_item_adjustment lia
17:17:48 435  		  , ids
17:17:48 436  		  where lia.id = ids.id
17:17:48 437  	      ;
17:17:48 438  	  end;
17:17:48 439  ----
17:17:48 440  --------------------------------------------------------------------------------
17:17:48 441  ----
17:17:48 442  
17:17:48 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 444  	  is
17:17:48 445  	  begin
17:17:48 446  	      open out_cursor for
17:17:48 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 448  		  select
17:17:48 449  		    tax.id tax_id,
17:17:48 450  		    ttype.code tax_type,
17:17:48 451  		    tax.calculated_amount,
17:17:48 452  		    tax.create_date,
17:17:48 453  		    tax.line_item_id,
17:17:48 454  		    tax.effective_rate,
17:17:48 455  		    tax.taxable_amount,
17:17:48 456  		    tax.tax_rule_id,
17:17:48 457  		    j.name jurisdiction_level,
17:17:48 458  		    tax.jurisdiction_name,
17:17:48 459  		    tax.jurisdiction_id,
17:17:48 460  		    tax.ext_tax_type,
17:17:48 461  		    tax.ext_result,
17:17:48 462  		    tax.imposition_type,
17:17:48 463  		    tax.imposition
17:17:48 464  		  from tax
17:17:48 465  		  , tax_type ttype
17:17:48 466  		  , jurisdiction_level j
17:17:48 467  		  , ids
17:17:48 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
17:17:48 469  	      ;
17:17:48 470  	  end;
17:17:48 471  ----
17:17:48 472  --------------------------------------------------------------------------------
17:17:48 473  ----
17:17:48 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
17:17:48 475  	  is
17:17:48 476  	  begin
17:17:48 477  	      open out_cursor for
17:17:48 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
17:17:48 479  		  select
17:17:48 480  		    tax.id tad_adjustment_id,
17:17:48 481  		    tax.tax_id tax_id,
17:17:48 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
17:17:48 483  		    tax.amount tax_amount,
17:17:48 484  		    tax.create_date create_date
17:17:48 485  		  from tax_adjustment tax
17:17:48 486  		  , ids
17:17:48 487  		  where tax.id = ids.id
17:17:48 488  	      ;
17:17:48 489  	  end;
17:17:48 490  ----
17:17:48 491  --------------------------------------------------------------------------------
17:17:48 492  ----
17:17:48 493  /**/
17:17:48 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 495  	  BEGIN
17:17:48 496  	    OPEN OUT_CURSOR FOR
17:17:48 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 498  	    SELECT
17:17:48 499  		t.id rcn_ext_source_log_id
17:17:48 500  	      , t.extraction_timestamp
17:17:48 501  	      , t.report_date
17:17:48 502  	      , t.report_generation_datetime
17:17:48 503  	      , t.record_type
17:17:48 504  	      , t.report_file_name
17:17:48 505  	      , t.create_date
17:17:48 506  	      , t.created_by
17:17:48 507  	    FROM rcn_ext_source_log t, ids
17:17:48 508  	    WHERE ids.id = t.id;
17:17:48 509  	  END;
17:17:48 510  
17:17:48 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 512  	  BEGIN
17:17:48 513  	    OPEN OUT_CURSOR FOR
17:17:48 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 515  	    SELECT
17:17:48 516  		t.id rcn_cpt_svc_chg_dtl_id
17:17:48 517  	      , t.rcn_ext_source_log_id
17:17:48 518  	      , t.record_type
17:17:48 519  	      , t.category
17:17:48 520  	      , t.sub_category
17:17:48 521  	      , t.entity_type
17:17:48 522  	      , t.entity_number
17:17:48 523  	      , t.funds_transfer_inst_number
17:17:48 524  	      , t.secure_ba_number
17:17:48 525  	      , t.settlement_currency
17:17:48 526  	      , t.fee_schedule
17:17:48 527  	      , t.mop
17:17:48 528  	      , t.interchange_qualification
17:17:48 529  	      , t.fee_type_description
17:17:48 530  	      , t.action_type
17:17:48 531  	      , t.unit_quantity
17:17:48 532  	      , t.unit_fee
17:17:48 533  	      , t.amount
17:17:48 534  	      , t.percentage_rate
17:17:48 535  	      , t.total_charge
17:17:48 536  	      , t.create_date
17:17:48 537  	      , t.created_by
17:17:48 538  	    FROM rcn_cpt_service_charge_detail t, ids
17:17:48 539  	    WHERE ids.id = t.id;
17:17:48 540  	  END;
17:17:48 541  ----
17:17:48 542  --------------------------------------------------------------------------------
17:17:48 543  ----
17:17:48 544  
17:17:48 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 546  	  BEGIN
17:17:48 547  	    OPEN OUT_CURSOR FOR
17:17:48 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 549  	    SELECT
17:17:48 550  		t.id rcn_cpt_excp_dtl_id
17:17:48 551  	      , t.rcn_ext_source_log_id
17:17:48 552  	      , t.record_type
17:17:48 553  	      , t.submission_date
17:17:48 554  	      , t.pid_number
17:17:48 555  	      , t.pid_short_name
17:17:48 556  	      , t.submission_number
17:17:48 557  	      , t.record_number
17:17:48 558  	      , t.entity_type
17:17:48 559  	      , t.entity_number
17:17:48 560  	      , t.presentment_currency
17:17:48 561  	      , t.merchant_order_number
17:17:48 562  	      , t.rdfi_number
17:17:48 563  	      , t.account_number
17:17:48 564  	      , t.expiration_date
17:17:48 565  	      , t.amount
17:17:48 566  	      , t.mop
17:17:48 567  	      , t.action_code
17:17:48 568  	      , t.auth_date
17:17:48 569  	      , t.auth_code
17:17:48 570  	      , t.auth_response_code
17:17:48 571  	      , t.trace_number
17:17:48 572  	      , t.consumer_country_code
17:17:48 573  	      , t.category
17:17:48 574  	      , t.mcc
17:17:48 575  	      , t.reject_code
17:17:48 576  	      , t.submission_status
17:17:48 577  	      , t.create_date
17:17:48 578  	      , t.created_by
17:17:48 579  	    FROM rcn_cpt_exception_detail t, ids
17:17:48 580  	    WHERE ids.id = t.id;
17:17:48 581  	  END;
17:17:48 582  ----
17:17:48 583  --------------------------------------------------------------------------------
17:17:48 584  ----
17:17:48 585  
17:17:48 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 587  	  BEGIN
17:17:48 588  	    OPEN OUT_CURSOR FOR
17:17:48 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 590  	      SELECT
17:17:48 591  		t.id rcn_cpt_deposit_dtl_id
17:17:48 592  	      , t.rcn_ext_source_log_id
17:17:48 593  	      , t.record_type
17:17:48 594  	      , t.submission_date
17:17:48 595  	      , t.pid_number
17:17:48 596  	      , t.pid_short_name
17:17:48 597  	      , t.submission_number
17:17:48 598  	      , t.record_number
17:17:48 599  	      , t.entity_type
17:17:48 600  	      , t.entity_number
17:17:48 601  	      , t.presentment_currency
17:17:48 602  	      , t.merchant_order_number
17:17:48 603  	      , t.rdfi_number
17:17:48 604  	      , t.account_number
17:17:48 605  	      , t.expiration_date
17:17:48 606  	      , t.amount
17:17:48 607  	      , t.mop
17:17:48 608  	      , t.action_code
17:17:48 609  	      , t.auth_date
17:17:48 610  	      , t.auth_code
17:17:48 611  	      , t.auth_response_code
17:17:48 612  	      , t.trace_number
17:17:48 613  	      , t.consumer_country_code
17:17:48 614  	      , t.mcc
17:17:48 615  	      , t.create_date
17:17:48 616  	      , t.created_by
17:17:48 617  	      , t.fee_code
17:17:48 618  	      , t.unit_fee
17:17:48 619  	      , t.percent_fee
17:17:48 620  	      , t.total_interchange_fee
17:17:48 621  	      , t.total_assessment_fee
17:17:48 622  	      , t.other_fee
17:17:48 623  	    FROM rcn_cpt_deposit_detail t, ids
17:17:48 624  	    WHERE ids.id = t.id;
17:17:48 625  	  END;
17:17:48 626  ----
17:17:48 627  --------------------------------------------------------------------------------
17:17:48 628  ----
17:17:48 629  
17:17:48 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 631  	  BEGIN
17:17:48 632  	    OPEN OUT_CURSOR FOR
17:17:48 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 634  	    SELECT
17:17:48 635  		t.id rcn_cpt_chgbk_act_dtl_id
17:17:48 636  	      , t.rcn_ext_source_log_id
17:17:48 637  	      , t.record_type
17:17:48 638  	      , t.entity_type
17:17:48 639  	      , t.entity_number
17:17:48 640  	      , t.chargeback_amount_issuer
17:17:48 641  	      , t.prev_partial_representment
17:17:48 642  	      , t.presentment_currency
17:17:48 643  	      , t.chargeback_category
17:17:48 644  	      , t.status_flag
17:17:48 645  	      , t.sequence_number
17:17:48 646  	      , t.merchant_order_number
17:17:48 647  	      , t.account_number
17:17:48 648  	      , t.reason_code
17:17:48 649  	      , t.transaction_date
17:17:48 650  	      , t.chargeback_date
17:17:48 651  	      , t.activity_date
17:17:48 652  	      , t.chargeback_amount_action
17:17:48 653  	      , t.fee_amount
17:17:48 654  	      , t.usage_code
17:17:48 655  	      , t.mop_code
17:17:48 656  	      , t.authorization_date
17:17:48 657  	      , t.chargeback_due_date
17:17:48 658  	      , t.create_date
17:17:48 659  	      , t.created_by
17:17:48 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
17:17:48 661  	    WHERE ids.id = t.id;
17:17:48 662  	  END;
17:17:48 663  ----
17:17:48 664  --------------------------------------------------------------------------------
17:17:48 665  ----
17:17:48 666  
17:17:48 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 668  	  BEGIN
17:17:48 669  	    OPEN OUT_CURSOR FOR
17:17:48 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 671  	    SELECT
17:17:48 672  		t.id rcn_pp_settlement_id
17:17:48 673  	      , t.rcn_ext_source_log_id
17:17:48 674  	      , t.transaction_id
17:17:48 675  	      , t.invoice_id
17:17:48 676  	      , t.pp_ref_id
17:17:48 677  	      , t.pp_ref_id_type
17:17:48 678  	      , t.trans_event_code
17:17:48 679  	      , t.trans_init_date
17:17:48 680  	      , t.trans_comp_date
17:17:48 681  	      , t.trans_deb_or_cred
17:17:48 682  	      , t.gross_trans_amount
17:17:48 683  	      , t.gross_trans_currency
17:17:48 684  	      , t.fee_deb_or_cred
17:17:48 685  	      , t.fee_amount
17:17:48 686  	      , t.fee_currency
17:17:48 687  	      , t.custom_field
17:17:48 688  	      , t.create_date
17:17:48 689  	      , t.created_by
17:17:48 690  	    FROM rcn_pp_settlement t, ids
17:17:48 691  	    WHERE ids.id = t.id;
17:17:48 692  	  END;
17:17:48 693  ----
17:17:48 694  --------------------------------------------------------------------------------
17:17:48 695  ----
17:17:48 696  
17:17:48 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 698  	  BEGIN
17:17:48 699  	    OPEN OUT_CURSOR FOR
17:17:48 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 701  	    SELECT
17:17:48 702  		t.id rcn_pp_dispute_id
17:17:48 703  	      , t.rcn_ext_source_log_id
17:17:48 704  	      , t.dispute_type
17:17:48 705  	      , t.claimant_name
17:17:48 706  	      , t.claimant_email
17:17:48 707  	      , t.transaction_id
17:17:48 708  	      , t.trans_date
17:17:48 709  	      , t.disputed_amount
17:17:48 710  	      , t.disputed_amount_currency
17:17:48 711  	      , t.dispute_reason
17:17:48 712  	      , t.dispute_filing_date
17:17:48 713  	      , t.dispute_status
17:17:48 714  	      , t.dispute_case_id
17:17:48 715  	      , t.invoice_id
17:17:48 716  	      , t.create_date
17:17:48 717  	      , t.created_by
17:17:48 718  	    FROM
17:17:48 719  	    rcn_pp_dispute t, ids
17:17:48 720  	    WHERE ids.id = t.id;
17:17:48 721  	  END;
17:17:48 722  ----
17:17:48 723  --------------------------------------------------------------------------------
17:17:48 724  ----
17:17:48 725  
17:17:48 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 727  	  BEGIN
17:17:48 728  	    OPEN OUT_CURSOR FOR
17:17:48 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 730  	    SELECT
17:17:48 731  		t.id rcn_pp_trans_dtl_id
17:17:48 732  	      , t.rcn_ext_source_log_id
17:17:48 733  	      , t.transaction_id
17:17:48 734  	      , t.invoice_id
17:17:48 735  	      , t.pp_ref_id
17:17:48 736  	      , t.trans_event_code
17:17:48 737  	      , t.trans_init_date
17:17:48 738  	      , t.trans_comp_date
17:17:48 739  	      , t.trans_deb_or_cred
17:17:48 740  	      , t.gross_trans_amount
17:17:48 741  	      , t.gross_trans_currency
17:17:48 742  	      , t.fee_deb_or_cred
17:17:48 743  	      , t.fee_amount
17:17:48 744  	      , t.fee_currency
17:17:48 745  	      , t.trans_status
17:17:48 746  	      , t.insurance_amount
17:17:48 747  	      , t.sales_tax_amount
17:17:48 748  	      , t.shipping_amount
17:17:48 749  	      , t.trans_subject
17:17:48 750  	      , t.trans_note
17:17:48 751  	      , t.payer_acct_id
17:17:48 752  	      , t.payer_addr_status
17:17:48 753  	      , t.item_name
17:17:48 754  	      , t.item_id
17:17:48 755  	      , t.option_1_name
17:17:48 756  	      , t.option_1_value
17:17:48 757  	      , t.option_2_name
17:17:48 758  	      , t.option_2_value
17:17:48 759  	      , t.auction_site
17:17:48 760  	      , t.auction_buyer_id
17:17:48 761  	      , t.auction_closing_date
17:17:48 762  	      , t.shipping_addr_line_1
17:17:48 763  	      , t.shipping_addr_line_2
17:17:48 764  	      , t.shipping_addr_city
17:17:48 765  	      , t.shipping_addr_state
17:17:48 766  	      , t.shipping_addr_zip
17:17:48 767  	      , t.shipping_addr_country
17:17:48 768  	      , t.custom_field
17:17:48 769  	      , t.create_date
17:17:48 770  	      , t.created_by
17:17:48 771  	    FROM rcn_pp_trans_detail t, ids
17:17:48 772  	    WHERE ids.id = t.id;
17:17:48 773  	  END;
17:17:48 774  ----
17:17:48 775  --------------------------------------------------------------------------------
17:17:48 776  ----
17:17:48 777  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 778  	  BEGIN
17:17:48 779  	    OPEN OUT_CURSOR FOR
17:17:48 780  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 781  	    SELECT
17:17:48 782  		t.ID PAYPAL_ID
17:17:48 783  	      , ACCOUNT_ID
17:17:48 784  	      , INSTRUMENT_NAME
17:17:48 785  	      , CREATE_DATE
17:17:48 786  	      , CREATED_BY
17:17:48 787  	      , UPDATE_DATE
17:17:48 788  	      , UPDATED_BY
17:17:48 789  	      , s.value PAYPAL_STATUS
17:17:48 790  	      , STATE
17:17:48 791  	      , CITY
17:17:48 792  	      , POSTAL_CODE
17:17:48 793  	      , COUNTRY
17:17:48 794  	      , EXPIRATION_DATE
17:17:48 795  	    FROM paypal t, paypal_status s, ids
17:17:48 796  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
17:17:48 797  	  END;
17:17:48 798  ----
17:17:48 799  --------------------------------------------------------------------------------
17:17:48 800  ----
17:17:48 801  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
17:17:48 802  	  BEGIN
17:17:48 803  	    OPEN OUT_CURSOR FOR
17:17:48 804  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
17:17:48 805  	    SELECT
17:17:48 806  	      a.id ADDRESS_ID,
17:17:48 807  	      address1,
17:17:48 808  	      address2,
17:17:48 809  	      city,
17:17:48 810  	      state,
17:17:48 811  	      postal_code,
17:17:48 812  	      country,
17:17:48 813  	      create_date,
17:17:48 814  	      created_by,
17:17:48 815  	      update_date,
17:17:48 816  	      updated_by
17:17:48 817  	    FROM address a, ids
17:17:48 818  	    WHERE ids.id = a.id;
17:17:48 819  	  END;
17:17:48 820  ----
17:17:48 821  --------------------------------------------------------------------------------
17:17:48 822  ----
17:17:48 823  /**/
17:17:48 824  END PROCS_REPORTING;
17:17:48 825  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.09
17:17:48 SQL> 
17:17:48 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
17:17:48   2  
17:17:48   3  ----
17:17:48   4  --------------------------------------------------------------------------------
17:17:48   5  ----
17:17:48   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
17:17:48   7  	      return line_item.amount%type
17:17:48   8  	  is
17:17:48   9  	      v_discount  line_item.amount%type := 0;
17:17:48  10  	  begin
17:17:48  11  	      for x in (
17:17:48  12  		  select d.id discount_id
17:17:48  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
17:17:48  14  		  from discount d
17:17:48  15  		      join discount_line_item dli	      on dli.discount_id = d.id
17:17:48  16  		      join discount_product_offering dop      on dop.discount_id = d.id
17:17:48  17  		      join product_offering po		      on po.id = dop.product_offering_id
17:17:48  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
17:17:48  19  		  where dli.line_item_id = in_line_item_id
17:17:48  20  	      )
17:17:48  21  	      loop
17:17:48  22  		  v_discount := v_discount + x.discount_amount;
17:17:48  23  	      end loop;
17:17:48  24  
17:17:48  25  	      return v_discount;
17:17:48  26  	  end;
17:17:48  27  ----
17:17:48  28  --------------------------------------------------------------------------------
17:17:48  29  ----
17:17:48  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
17:17:48  31  	      return line_item.amount%type
17:17:48  32  	  is
17:17:48  33  	      v_li_total  line_item.amount%type;
17:17:48  34  	      v_inv_total line_item.amount%type;
17:17:48  35  	      v_ref_total line_item.amount%type;
17:17:48  36  	  begin
17:17:48  37  
17:17:48  38  	      for li in (
17:17:48  39  		  select li.invoice_id, po.*
17:17:48  40  		  from line_item li
17:17:48  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
17:17:48  42  		  where li.id = in_line_item_id
17:17:48  43  	      )
17:17:48  44  	      loop
17:17:48  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
17:17:48  46  
17:17:48  47  		  v_inv_total := 0;
17:17:48  48  		  v_ref_total := 0;
17:17:48  49  		  for x in (
17:17:48  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
17:17:48  51  		      from charge c
17:17:48  52  		      where c.invoice_id = li.invoice_id
17:17:48  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
17:17:48  54  		  )
17:17:48  55  		  loop
17:17:48  56  		      if (x.type = 1) then
17:17:48  57  			  v_inv_total := x.total;
17:17:48  58  		      else
17:17:48  59  			  v_ref_total := x.total;
17:17:48  60  		      end if;
17:17:48  61  		  end loop;
17:17:48  62  
17:17:48  63  		  if (v_inv_total > 0) then
17:17:48  64  		      return (v_ref_total / v_inv_total) * v_li_total;
17:17:48  65  		  else
17:17:48  66  		      return 0;
17:17:48  67  		  end if;
17:17:48  68  
17:17:48  69  	      end loop;
17:17:48  70  
17:17:48  71  	      return 0;
17:17:48  72  	  end;
17:17:48  73  ----
17:17:48  74  --------------------------------------------------------------------------------
17:17:48  75  ----
17:17:48  76  	PROCEDURE EXTRACT_LINE_ITEMS(
17:17:48  77  	  in_lower_date_bound DATE,
17:17:48  78  	  in_upper_date_bound DATE,
17:17:48  79  	  out_lic_cur OUT sys_refcursor
17:17:48  80  	) AS
17:17:48  81  	BEGIN
17:17:48  82  	  OPEN out_lic_cur FOR
17:17:48  83  	  with liq as (
17:17:48  84  		SELECT li2.id
17:17:48  85  		      FROM
17:17:48  86  			   line_item li2
17:17:48  87  		      WHERE
17:17:48  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48  89  		UNION
17:17:48  90  		SELECT li2.id
17:17:48  91  		      FROM
17:17:48  92  			   line_item li2
17:17:48  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
17:17:48  94  		      WHERE
17:17:48  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48  96  		UNION
17:17:48  97  		SELECT li2.id
17:17:48  98  		      FROM
17:17:48  99  			   line_item li2
17:17:48 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
17:17:48 101  		      WHERE
17:17:48 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48 103  		UNION
17:17:48 104  		SELECT li2.id
17:17:48 105  		      FROM
17:17:48 106  			   line_item li2
17:17:48 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
17:17:48 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
17:17:48 109  		      WHERE
17:17:48 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48 111  		UNION
17:17:48 112  		SELECT li2.id
17:17:48 113  		      FROM
17:17:48 114  			   line_item li2
17:17:48 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
17:17:48 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
17:17:48 117  		      WHERE
17:17:48 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48 119  		UNION
17:17:48 120  		SELECT li2.id
17:17:48 121  		      FROM
17:17:48 122  			   line_item li2
17:17:48 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
17:17:48 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
17:17:48 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
17:17:48 126  		      WHERE
17:17:48 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48 128  	  )
17:17:48 129  	  SELECT distinct
17:17:48 130  	    line_item.id				 line_item_id
17:17:48 131  	  , product.name				 product_name
17:17:48 132  	  , product.unit_price				 product_unit_price
17:17:48 133  	  , product.production_cost			 product_production_cost
17:17:48 134  	  , offer_chain.name				 offer_chain_name
17:17:48 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
17:17:48 136  	  , gclicense.purchase_date			 subscription_start_date
17:17:48 137  	  , gclicense.start_date			 license_start_date
17:17:48 138  	  , gclicense.end_date				 license_end_date
17:17:48 139  	  , credit_card.city				 cc_city
17:17:48 140  	  , credit_card.state				 cc_state
17:17:48 141  	  , credit_card.postal_code			 cc_postal_code
17:17:48 142  	  , line_item.create_date			 line_item_purchase_date
17:17:48 143  	  , gclicense.account_regi_id
17:17:48 144  	  , product_offering.quantity			 purchase_quantity
17:17:48 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
17:17:48 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
17:17:48 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
17:17:48 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
17:17:48 149  	  , 0						 purchase_tax_amount
17:17:48 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
17:17:48 151  	  , invoice.id					 invoice_number
17:17:48 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
17:17:48 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
17:17:48 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
17:17:48 155  	  FROM
17:17:48 156  	       line_item
17:17:48 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
17:17:48 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
17:17:48 159  	  JOIN product				ON product.id	       = product_offering.product_id
17:17:48 160  	  join (
17:17:48 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
17:17:48 162  		      ,subscription.sct_id, license.start_date, license.end_date
17:17:48 163  		      ,account.group_id account_regi_id
17:17:48 164  		from	 license
17:17:48 165  		    join subscription ON subscription.id = license.subscription_id
17:17:48 166  		    join account      ON account.id	 = subscription.account_id
17:17:48 167  		union all
17:17:48 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
17:17:48 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
17:17:48 170  		      ,gc.purchaser_group_id account_regi_id
17:17:48 171  		from	 gift_certificate gc
17:17:48 172  		where
17:17:48 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
17:17:48 174  
17:17:48 175  	  ) gclicense
17:17:48 176  						on gclicense.invoice_id = invoice.id
17:17:48 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
17:17:48 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
17:17:48 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
17:17:48 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
17:17:48 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
17:17:48 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
17:17:48 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
17:17:48 184  	  join liq				on line_item.id 	= liq.id
17:17:48 185  	    ;
17:17:48 186  	END EXTRACT_LINE_ITEMS;
17:17:48 187  ----
17:17:48 188  --------------------------------------------------------------------------------
17:17:48 189  ----
17:17:48 190  END PROCS_REPORTING_1A;
17:17:48 191  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
17:17:48   2  
17:17:48   3  FUNCTION GET_PRODUCT_NAMES(
17:17:48   4  	in_offer_id IN NUMBER
17:17:48   5  ) RETURN VARCHAR2 AS
17:17:48   6  var_result_names VARCHAR2(1024);
17:17:48   7  BEGIN
17:17:48   8  
17:17:48   9  	var_result_names := NULL;
17:17:48  10  
17:17:48  11  	FOR f_product IN (
17:17:48  12  	  SELECT
17:17:48  13  	    PRODUCT.NAME
17:17:48  14  	  FROM
17:17:48  15  	    PRODUCT
17:17:48  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
17:17:48  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
17:17:48  18  	  WHERE
17:17:48  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
17:17:48  20  	)
17:17:48  21  	LOOP
17:17:48  22  
17:17:48  23  	  IF var_result_names IS NULL THEN
17:17:48  24  	    var_result_names := f_product.NAME;
17:17:48  25  	  ELSE
17:17:48  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
17:17:48  27  	  END IF;
17:17:48  28  
17:17:48  29  	END LOOP;
17:17:48  30  
17:17:48  31  	RETURN var_result_names;
17:17:48  32  
17:17:48  33  END GET_PRODUCT_NAMES;
17:17:48  34  
17:17:48  35  /******************************************************************************/
17:17:48  36  
17:17:48  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
17:17:48  38  	in_start_date  IN DATE,
17:17:48  39  	in_end_date    IN DATE,
17:17:48  40  	out_result_set OUT SYS_REFCURSOR
17:17:48  41  ) AS
17:17:48  42  -- CONSTANTS
17:17:48  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
17:17:48  44  BEGIN
17:17:48  45  
17:17:48  46  	OPEN out_result_set FOR
17:17:48  47  	SELECT
17:17:48  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
17:17:48  49  	  "Offer_Id",
17:17:48  50  	  "New_Purchases_Num",
17:17:48  51  	  "Number_Of_renewals",
17:17:48  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
17:17:48  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
17:17:48  54  	FROM (
17:17:48  55  	  SELECT
17:17:48  56  	    "Offer_Id",
17:17:48  57  	    "Number_Of_renewals",
17:17:48  58  	    "New_Purchases_Num"
17:17:48  59  	  FROM (
17:17:48  60  	    SELECT
17:17:48  61  	      OFFER.ID as "Offer_Id",
17:17:48  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
17:17:48  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
17:17:48  64  	    FROM
17:17:48  65  	      OFFER
17:17:48  66  	  )
17:17:48  67  	  WHERE
17:17:48  68  	    "New_Purchases_Num" > 0
17:17:48  69  	    OR "Number_Of_renewals" > 0
17:17:48  70  	);
17:17:48  71  
17:17:48  72  	/*
17:17:48  73  	OPEN out_result_set FOR
17:17:48  74  	SELECT
17:17:48  75  	  "Product_Names",
17:17:48  76  	  "Offer_Id",
17:17:48  77  	  "New_Purchases_Num",
17:17:48  78  	  "Number_Of_renewals",
17:17:48  79  	  "Total_Dollar_Value",
17:17:48  80  	  "Unique_Purchasers_num"
17:17:48  81  	FROM (
17:17:48  82  	  SELECT
17:17:48  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
17:17:48  84  	    offer.id as "Offer_Id",
17:17:48  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
17:17:48  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
17:17:48  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
17:17:48  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
17:17:48  89  	  FROM
17:17:48  90  	    OFFER
17:17:48  91  	)
17:17:48  92  	WHERE
17:17:48  93  	  "New_Purchases_Num" > 0
17:17:48  94  	  OR "Number_Of_renewals" > 0
17:17:48  95  	  OR "Total_Dollar_Value" > 0
17:17:48  96  	  OR "Unique_Purchasers_num" > 0;
17:17:48  97  	*/
17:17:48  98  
17:17:48  99  END GET_FULL_FLASH_REPORT_PURCH;
17:17:48 100  
17:17:48 101  /******************************************************************************/
17:17:48 102  
17:17:48 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
17:17:48 104  	in_offer_id	       IN NUMBER,
17:17:48 105  	in_start_date	       IN DATE,
17:17:48 106  	in_end_date	       IN DATE,
17:17:48 107  	out_new_purchasers_num OUT NUMBER,
17:17:48 108  	out_renewals_num       OUT NUMBER,
17:17:48 109  	out_product_names      OUT VARCHAR2,
17:17:48 110  	out_total_dollar_value OUT NUMBER,
17:17:48 111  	out_unique_purchasers  OUT NUMBER
17:17:48 112  ) AS
17:17:48 113  -- CONSTANTS
17:17:48 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
17:17:48 115  BEGIN
17:17:48 116  
17:17:48 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
17:17:48 118  
17:17:48 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
17:17:48 120  	  in_offer_id,
17:17:48 121  	  in_start_date,
17:17:48 122  	  in_end_date
17:17:48 123  	);
17:17:48 124  
17:17:48 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
17:17:48 126  	  in_offer_id,
17:17:48 127  	  in_start_date,
17:17:48 128  	  in_end_date
17:17:48 129  	);
17:17:48 130  
17:17:48 131  	out_renewals_num := FLR_RENEWALS_NUM(
17:17:48 132  	  in_offer_id,
17:17:48 133  	  in_start_date,
17:17:48 134  	  in_end_date
17:17:48 135  	);
17:17:48 136  
17:17:48 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
17:17:48 138  	  in_offer_id,
17:17:48 139  	  in_start_date,
17:17:48 140  	  in_end_date
17:17:48 141  	);
17:17:48 142  
17:17:48 143  END GET_FLASH_REPORT_PURCHASES;
17:17:48 144  
17:17:48 145  /******************************************************************************/
17:17:48 146  
17:17:48 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
17:17:48 148  	in_offer_id	       IN NUMBER,
17:17:48 149  	in_start_date	       IN DATE,
17:17:48 150  	in_end_date	       IN DATE
17:17:48 151  ) RETURN NUMBER AS
17:17:48 152  -- CONSTANTS
17:17:48 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
17:17:48 154  -- VARIABLES
17:17:48 155  var_new_purchases_num NUMBER;
17:17:48 156  BEGIN
17:17:48 157  	SELECT
17:17:48 158  	  COUNT(LICENSE.ID)
17:17:48 159  	  into
17:17:48 160  	  var_new_purchases_num
17:17:48 161  	FROM
17:17:48 162  	  LICENSE
17:17:48 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
17:17:48 164  	WHERE
17:17:48 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
17:17:48 166  	  AND LICENSE.OFFER_ID = in_offer_id
17:17:48 167  	  AND CHARGE.CHARGE_AMOUNT > 0
17:17:48 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
17:17:48 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
17:17:48 170  
17:17:48 171  	RETURN var_new_purchases_num;
17:17:48 172  END FLR_NEW_PURCHASERS_NUM;
17:17:48 173  
17:17:48 174  /******************************************************************************/
17:17:48 175  
17:17:48 176  FUNCTION FLR_RENEWALS_NUM (
17:17:48 177  	in_offer_id	       IN NUMBER,
17:17:48 178  	in_start_date	       IN DATE,
17:17:48 179  	in_end_date	       IN DATE
17:17:48 180  ) RETURN NUMBER AS
17:17:48 181  -- CONSTANTS
17:17:48 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
17:17:48 183  -- VARIABLES
17:17:48 184  var_renewals_num NUMBER;
17:17:48 185  BEGIN
17:17:48 186  	SELECT
17:17:48 187  	  COUNT(LICENSE.ID)
17:17:48 188  	  into
17:17:48 189  	  var_renewals_num
17:17:48 190  	FROM
17:17:48 191  	  LICENSE
17:17:48 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
17:17:48 193  	WHERE
17:17:48 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
17:17:48 195  	  AND LICENSE.OFFER_ID = in_offer_id
17:17:48 196  	  AND CHARGE.CHARGE_AMOUNT > 0
17:17:48 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
17:17:48 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
17:17:48 199  
17:17:48 200  	RETURN var_renewals_num;
17:17:48 201  END FLR_RENEWALS_NUM;
17:17:48 202  
17:17:48 203  /******************************************************************************/
17:17:48 204  
17:17:48 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
17:17:48 206  	in_offer_id	       IN NUMBER,
17:17:48 207  	in_start_date	       IN DATE,
17:17:48 208  	in_end_date	       IN DATE
17:17:48 209  ) RETURN NUMBER AS
17:17:48 210  var_dollar_value NUMBER(10,2);
17:17:48 211  BEGIN
17:17:48 212  	SELECT
17:17:48 213  	  SUM(CHARGE.CHARGE_AMOUNT)
17:17:48 214  	  into
17:17:48 215  	  var_dollar_value
17:17:48 216  	FROM
17:17:48 217  	  LICENSE
17:17:48 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
17:17:48 219  	WHERE
17:17:48 220  	  LICENSE.OFFER_ID = in_offer_id
17:17:48 221  	  AND CHARGE.CHARGE_AMOUNT > 0
17:17:48 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
17:17:48 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
17:17:48 224  
17:17:48 225  	RETURN var_dollar_value;
17:17:48 226  END FLR_TOTAL_DOLLAR_VALUE;
17:17:48 227  
17:17:48 228  /******************************************************************************/
17:17:48 229  
17:17:48 230  FUNCTION FLR_UNIQUE_PURCHASERS (
17:17:48 231  	in_offer_id	       IN NUMBER,
17:17:48 232  	in_start_date	       IN DATE,
17:17:48 233  	in_end_date	       IN DATE
17:17:48 234  ) RETURN NUMBER AS
17:17:48 235  -- CONSTANTS
17:17:48 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
17:17:48 237  -- VARIABLES
17:17:48 238  var_unique_purchasers NUMBER;
17:17:48 239  BEGIN
17:17:48 240  	SELECT
17:17:48 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
17:17:48 242  	FROM
17:17:48 243  	  LICENSE
17:17:48 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
17:17:48 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:48 246  	WHERE
17:17:48 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
17:17:48 248  	  AND LICENSE.OFFER_ID = in_offer_id
17:17:48 249  	  AND CHARGE.CHARGE_AMOUNT > 0
17:17:48 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
17:17:48 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
17:17:48 252  
17:17:48 253  	RETURN var_unique_purchasers;
17:17:48 254  END;
17:17:48 255  
17:17:48 256  END PROCS_REPORTS_V5;
17:17:48 257  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE INCREMENT_VERSION
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   7  */
17:17:48   8  AS
17:17:48   9  BEGIN
17:17:48  10  
17:17:48  11  	UPDATE SYS_VERSION SET version=version+1;
17:17:48  12  
17:17:48  13  END INCREMENT_VERSION;
17:17:48  14  
17:17:48  15  /*************************************************************/
17:17:48  16  
17:17:48  17  PROCEDURE CHECK_VERSION(
17:17:48  18  	  in_vers    IN NUMBER,
17:17:48  19  	  out_result OUT NUMBER
17:17:48  20  ) AS
17:17:48  21  	current_version NUMBER;
17:17:48  22  BEGIN
17:17:48  23  	SELECT version INTO current_version FROM SYS_VERSION;
17:17:48  24  	IF(current_version != in_vers) THEN
17:17:48  25  	  out_result := 1;
17:17:48  26  	ELSE
17:17:48  27  	  out_result := 0;
17:17:48  28  	END IF;
17:17:48  29  END CHECK_VERSION;
17:17:48  30  
17:17:48  31  END PROCS_SYSTEM_V15;
17:17:48  32  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE ADD_TAX (
17:17:48   4  	in_tax_type_id		 IN NUMBER,
17:17:48   5  	in_calculated_amount	 IN NUMBER,
17:17:48   6  	in_created_by		 IN VARCHAR2,
17:17:48   7  	in_line_item_id 	 IN NUMBER,
17:17:48   8  	in_effective_rate	 IN VARCHAR2,
17:17:48   9  	in_taxable_amount	 IN NUMBER,
17:17:48  10  	in_tax_rule_id		 IN NUMBER,
17:17:48  11  	in_jurisdiction_level_id IN NUMBER,
17:17:48  12  	in_jurisdiction_name	 IN VARCHAR2,
17:17:48  13  	in_jurisdiction_id	 IN VARCHAR2,
17:17:48  14  	in_ext_tax_type 	 IN VARCHAR2,
17:17:48  15  	in_ext_result		 IN VARCHAR2,
17:17:48  16  	in_imposition_type	 IN VARCHAR2,
17:17:48  17  	in_imposition		 IN VARCHAR2
17:17:48  18  ) AS
17:17:48  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
17:17:48  20  -- VARIABLES
17:17:48  21  var_new_tax_id	NUMBER;
17:17:48  22  temp_line_item_id NUMBER;
17:17:48  23  -- EXCEPTIONS
17:17:48  24  BAD_LINE_ITEM_ID EXCEPTION;
17:17:48  25  BEGIN
17:17:48  26  
17:17:48  27  	BEGIN
17:17:48  28  	  SELECT
17:17:48  29  	    LINE_ITEM.ID into temp_line_item_id
17:17:48  30  	  FROM
17:17:48  31  	    LINE_ITEM
17:17:48  32  	  WHERE
17:17:48  33  	    LINE_ITEM.ID = in_line_item_id;
17:17:48  34  	  EXCEPTION
17:17:48  35  	    WHEN NO_DATA_FOUND THEN
17:17:48  36  	      RAISE BAD_LINE_ITEM_ID;
17:17:48  37  	END;
17:17:48  38  
17:17:48  39  	var_new_tax_id := NULL;
17:17:48  40  
17:17:48  41  	PROCS_TAXES_CRU_V15.CREATE_TAX(
17:17:48  42  	  var_new_tax_id,
17:17:48  43  	  in_tax_type_id,
17:17:48  44  	  in_calculated_amount,
17:17:48  45  	  in_created_by,
17:17:48  46  	  in_line_item_id,
17:17:48  47  	  in_effective_rate,
17:17:48  48  	  in_taxable_amount,
17:17:48  49  	  in_tax_rule_id,
17:17:48  50  	  in_jurisdiction_level_id,
17:17:48  51  	  in_jurisdiction_name,
17:17:48  52  	  in_jurisdiction_id,
17:17:48  53  	  in_ext_tax_type,
17:17:48  54  	  in_ext_result,
17:17:48  55  	  in_imposition_type,
17:17:48  56  	  in_imposition
17:17:48  57  	);
17:17:48  58  
17:17:48  59  EXCEPTION
17:17:48  60  WHEN BAD_LINE_ITEM_ID THEN
17:17:48  61  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48  62  	  SPROC_NAME, 'No such line item');
17:17:48  63  WHEN OTHERS THEN
17:17:48  64  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  66  END ADD_TAX;
17:17:48  67  
17:17:48  68  /******************************************************************************/
17:17:48  69  
17:17:48  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
17:17:48  71  	in_country_code IN CHAR,
17:17:48  72  	in_check_date IN DATE,
17:17:48  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V15.FALSE
17:17:48  74  ) AS
17:17:48  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
17:17:48  76  -- VARIABLES
17:17:48  77  var_countries_count NUMBER;
17:17:48  78  var_result	  NUMBER;
17:17:48  79  BEGIN
17:17:48  80  
17:17:48  81  	SELECT
17:17:48  82  	  COUNT(1) into var_countries_count
17:17:48  83  	FROM
17:17:48  84  	  TAX_COUNTRY_EXCLUSION_LIST
17:17:48  85  	WHERE
17:17:48  86  	  country_code = in_country_code
17:17:48  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
17:17:48  88  	  AND (
17:17:48  89  	    end_date is null
17:17:48  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
17:17:48  91  	  );
17:17:48  92  
17:17:48  93  	IF var_countries_count > 1 THEN
17:17:48  94  	  -- [REVU] Should not happen. DB structure error
17:17:48  95  	  var_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:48  96  	ELSIF var_countries_count = 1 THEN
17:17:48  97  	  var_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:48  98  	ELSE
17:17:48  99  	  var_result := GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 100  	END IF;
17:17:48 101  
17:17:48 102  	out_is_founded := var_result;
17:17:48 103  
17:17:48 104  EXCEPTION
17:17:48 105  WHEN OTHERS THEN
17:17:48 106  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 108  END CHECK_COUNTRY_FOR_EXCLUSION;
17:17:48 109  
17:17:48 110  /******************************************************************************/
17:17:48 111  
17:17:48 112  PROCEDURE GET_TAX_CATEGORY (
17:17:48 113  	in_tax_category_id IN NUMBER,
17:17:48 114  	out_result_set	   OUT SYS_REFCURSOR
17:17:48 115  ) AS
17:17:48 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
17:17:48 117  BEGIN
17:17:48 118  
17:17:48 119  	OPEN out_result_set FOR
17:17:48 120  	SELECT
17:17:48 121  	  ID,
17:17:48 122  	  CODE,
17:17:48 123  	  DESCRIPTION
17:17:48 124  	FROM
17:17:48 125  	  TAX_CATEGORY
17:17:48 126  	WHERE
17:17:48 127  	  ID = in_tax_category_id;
17:17:48 128  
17:17:48 129  EXCEPTION
17:17:48 130  WHEN OTHERS THEN
17:17:48 131  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 133  END GET_TAX_CATEGORY;
17:17:48 134  
17:17:48 135  END PROCS_TAXES_V15;
17:17:48 136  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE CREATE_TRANSACTION (
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   8  */
17:17:48   9  	in_transaction_id  IN NUMBER,
17:17:48  10  	in_status_id	   IN NUMBER,
17:17:48  11  	in_amount	   IN NUMBER,
17:17:48  12  	in_created_by	   IN VARCHAR2,
17:17:48  13  	in_order_id	   IN VARCHAR2,
17:17:48  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE,
17:17:48  15  	out_transaction_id OUT NUMBER
17:17:48  16  ) AS
17:17:48  17  -- VARIABLES
17:17:48  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
17:17:48  19  var_transaction_count  NUMBER;
17:17:48  20  -- EXCEPTIONS
17:17:48  21  BAD_TRANSACTION_ID     EXCEPTION;
17:17:48  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48  23  BEGIN
17:17:48  24  
17:17:48  25  	IF in_transaction_id IS NOT NULL THEN
17:17:48  26  	  SELECT
17:17:48  27  	    COUNT(*) into var_transaction_count
17:17:48  28  	  FROM
17:17:48  29  	    TRANSACTION
17:17:48  30  	  WHERE
17:17:48  31  	    TRANSACTION.ID = in_transaction_id;
17:17:48  32  	  IF var_transaction_count > 0 THEN
17:17:48  33  	    RAISE BAD_TRANSACTION_ID;
17:17:48  34  	  END IF;
17:17:48  35  	END IF;
17:17:48  36  
17:17:48  37  	PROCS_TRANSACTION_CRU_V15.CREATE_TRANSACTION(
17:17:48  38  	  out_transaction_id	   => out_transaction_id,
17:17:48  39  	  in_transaction_id	   => in_transaction_id,
17:17:48  40  	  in_transaction_status_id => in_status_id,
17:17:48  41  	  in_transaction_amount    => in_amount,
17:17:48  42  	  in_created_by 	   => in_created_by,
17:17:48  43  	  in_order_id		   => in_order_id,
17:17:48  44  	  in_is_refund		   => in_is_refund
17:17:48  45  	);
17:17:48  46  
17:17:48  47  EXCEPTION
17:17:48  48  WHEN BAD_TRANSACTION_ID THEN
17:17:48  49  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:48  50  	  SPROC_NAME, 'Transaction with given id already exists');
17:17:48  51  WHEN OTHERS THEN
17:17:48  52  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48  54  END CREATE_TRANSACTION;
17:17:48  55  
17:17:48  56  /******************************************************************************/
17:17:48  57  
17:17:48  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
17:17:48  59  /*
17:17:48  60  Throws exceptions:
17:17:48  61  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48  63  */
17:17:48  64  	in_transaction_id	   IN NUMBER,
17:17:48  65  	in_trans_attempt_status    IN NUMBER,
17:17:48  66  	in_external_status_code    IN VARCHAR2,
17:17:48  67  	in_external_status_message IN VARCHAR2,
17:17:48  68  	in_created_by		   IN VARCHAR2,
17:17:48  69  	in_ext_transaction_id	   IN VARCHAR2,
17:17:48  70  	out_transaction_attempt_id OUT NUMBER
17:17:48  71  ) AS
17:17:48  72  -- VARIABLES
17:17:48  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
17:17:48  74  var_transaction_create_date DATE;
17:17:48  75  var_transaction_attempt_id  NUMBER;
17:17:48  76  
17:17:48  77  -- EXCEPTIONS
17:17:48  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
17:17:48  79  BAD_TRANSACTION_ID       EXCEPTION;
17:17:48  80  BEGIN
17:17:48  81  
17:17:48  82  	-- Check that transaction exists
17:17:48  83  	BEGIN
17:17:48  84  	  SELECT
17:17:48  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
17:17:48  86  	  FROM
17:17:48  87  	    TRANSACTION
17:17:48  88  	  WHERE
17:17:48  89  	    TRANSACTION.ID = in_transaction_id;
17:17:48  90  	  EXCEPTION
17:17:48  91  	    WHEN OTHERS THEN
17:17:48  92  	      RAISE BAD_TRANSACTION_ID;
17:17:48  93  	END;
17:17:48  94  
17:17:48  95  	-- Check that transaction status is correct
17:17:48  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
17:17:48  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:48  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
17:17:48  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
17:17:48 100  	END IF;
17:17:48 101  
17:17:48 102  	var_transaction_attempt_id := NULL;
17:17:48 103  	PROCS_TRANSACTION_CRU_V15.CREATE_TRANSACTION_ATTEMPT(
17:17:48 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
17:17:48 105  	  in_transaction_id	       => in_transaction_id,
17:17:48 106  	  in_external_status_code      => in_external_status_code,
17:17:48 107  	  in_external_status_message   => in_external_status_message,
17:17:48 108  	  in_created_by 	       => in_created_by,
17:17:48 109  	  in_external_transaction_id   => in_ext_transaction_id,
17:17:48 110  	  in_transaction_start_time    => var_transaction_create_date,
17:17:48 111  	  in_status_id		       => in_trans_attempt_status
17:17:48 112  	);
17:17:48 113  
17:17:48 114  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
17:17:48 115  	  in_transaction_id => in_transaction_id,
17:17:48 116  	  in_updated_by     => in_created_by
17:17:48 117  	);
17:17:48 118  
17:17:48 119  	out_transaction_attempt_id := var_transaction_attempt_id;
17:17:48 120  
17:17:48 121  EXCEPTION
17:17:48 122  WHEN BAD_TRANSACTION_ID THEN
17:17:48 123  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 124  	  SPROC_NAME, 'No such transaction');
17:17:48 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
17:17:48 126  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 127  	  SPROC_NAME, 'Bad transaction attempt status');
17:17:48 128  WHEN OTHERS THEN
17:17:48 129  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 131  END CREATE_TRANSACTION_ATTEMPT;
17:17:48 132  
17:17:48 133  /******************************************************************************/
17:17:48 134  
17:17:48 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
17:17:48 136  /*
17:17:48 137  Throws exceptions:
17:17:48 138  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 139  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 140  */
17:17:48 141  	in_transaction_id	 IN NUMBER,
17:17:48 142  	in_updated_by		 IN VARCHAR2,
17:17:48 143  	in_transaction_status_id IN NUMBER
17:17:48 144  ) AS
17:17:48 145  -- VARIABLES
17:17:48 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
17:17:48 147  temp_transaction_id NUMBER;
17:17:48 148  
17:17:48 149  -- EXCEPTIONS
17:17:48 150  BAD_TRANSACTION_ID     EXCEPTION;
17:17:48 151  BAD_TRANSACTION_STATUS EXCEPTION;
17:17:48 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 153  BEGIN
17:17:48 154  
17:17:48 155  	-- Check that transaction exists
17:17:48 156  	BEGIN
17:17:48 157  	  SELECT
17:17:48 158  	    TRANSACTION.ID into temp_transaction_id
17:17:48 159  	  FROM
17:17:48 160  	    TRANSACTION
17:17:48 161  	  WHERE
17:17:48 162  	    TRANSACTION.ID = in_transaction_id;
17:17:48 163  	  EXCEPTION
17:17:48 164  	    WHEN OTHERS THEN
17:17:48 165  	      RAISE BAD_TRANSACTION_ID;
17:17:48 166  	END;
17:17:48 167  
17:17:48 168  	-- Check that transaction status is correct
17:17:48 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_PENDING
17:17:48 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
17:17:48 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_CHARGEBACK
17:17:48 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_DECLINED THEN
17:17:48 173  	  RAISE BAD_TRANSACTION_STATUS;
17:17:48 174  	END IF;
17:17:48 175  
17:17:48 176  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
17:17:48 177  	  in_transaction_id	   => in_transaction_id,
17:17:48 178  	  in_updated_by 	   => in_updated_by,
17:17:48 179  	  in_transaction_status_id => in_transaction_status_id
17:17:48 180  	);
17:17:48 181  
17:17:48 182  EXCEPTION
17:17:48 183  WHEN BAD_TRANSACTION_ID THEN
17:17:48 184  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 185  	  SPROC_NAME, 'No such transaction');
17:17:48 186  WHEN BAD_TRANSACTION_STATUS THEN
17:17:48 187  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 188  	  SPROC_NAME, 'Bad transaction status');
17:17:48 189  WHEN OTHERS THEN
17:17:48 190  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 192  END UPDATE_TRANSACTION_STATUS;
17:17:48 193  
17:17:48 194  /******************************************************************************/
17:17:48 195  
17:17:48 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
17:17:48 197  /*
17:17:48 198  Throws exceptions:
17:17:48 199  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 200  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 201  */
17:17:48 202  	in_transaction_id	 IN NUMBER,
17:17:48 203  	in_updated_by		 IN VARCHAR2,
17:17:48 204  	in_is_settled		 IN NUMBER
17:17:48 205  ) AS
17:17:48 206  -- VARIABLES
17:17:48 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
17:17:48 208  temp_transaction_id NUMBER;
17:17:48 209  
17:17:48 210  -- EXCEPTIONS
17:17:48 211  BAD_TRANSACTION_ID     EXCEPTION;
17:17:48 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 213  BEGIN
17:17:48 214  
17:17:48 215  	-- Check that transaction exists
17:17:48 216  	BEGIN
17:17:48 217  	  SELECT
17:17:48 218  	    TRANSACTION.ID into temp_transaction_id
17:17:48 219  	  FROM
17:17:48 220  	    TRANSACTION
17:17:48 221  	  WHERE
17:17:48 222  	    TRANSACTION.ID = in_transaction_id;
17:17:48 223  	  EXCEPTION
17:17:48 224  	    WHEN OTHERS THEN
17:17:48 225  	      RAISE BAD_TRANSACTION_ID;
17:17:48 226  	END;
17:17:48 227  
17:17:48 228  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
17:17:48 229  	  in_transaction_id	   => in_transaction_id,
17:17:48 230  	  in_updated_by 	   => in_updated_by,
17:17:48 231  	  in_is_settled 	   => in_is_settled
17:17:48 232  	);
17:17:48 233  
17:17:48 234  EXCEPTION
17:17:48 235  WHEN BAD_TRANSACTION_ID THEN
17:17:48 236  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 237  	  SPROC_NAME, 'No such transaction');
17:17:48 238  WHEN OTHERS THEN
17:17:48 239  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 241  END UPDATE_TRANSACTION_SETTLED;
17:17:48 242  
17:17:48 243  /******************************************************************************/
17:17:48 244  
17:17:48 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
17:17:48 246  /*
17:17:48 247  Throws exceptions:
17:17:48 248  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 249  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 250  */
17:17:48 251  	in_transaction_attempt_id IN NUMBER,
17:17:48 252  	in_updated_by		  IN VARCHAR2
17:17:48 253  ) AS
17:17:48 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
17:17:48 255  -- VARIABLES
17:17:48 256  var_transaction_id NUMBER;
17:17:48 257  -- EXCEPTION
17:17:48 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
17:17:48 259  BEGIN
17:17:48 260  
17:17:48 261  	BEGIN
17:17:48 262  	  SELECT
17:17:48 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
17:17:48 264  	  FROM
17:17:48 265  	    TRANSACTION_ATTEMPT
17:17:48 266  	  WHERE
17:17:48 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
17:17:48 268  	  EXCEPTION
17:17:48 269  	    WHEN NO_DATA_FOUND THEN
17:17:48 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
17:17:48 271  	END;
17:17:48 272  
17:17:48 273  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
17:17:48 274  	  in_transaction_id => var_transaction_id,
17:17:48 275  	  in_updated_by     => in_updated_by
17:17:48 276  	);
17:17:48 277  
17:17:48 278  EXCEPTION
17:17:48 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
17:17:48 280  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 281  	  SPROC_NAME, 'No such transaction attempt');
17:17:48 282  WHEN OTHERS THEN
17:17:48 283  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
17:17:48 286  
17:17:48 287  /******************************************************************************/
17:17:48 288  
17:17:48 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
17:17:48 290  /*
17:17:48 291  Throws exceptions:
17:17:48 292  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 293  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 294  */
17:17:48 295  	in_transaction_attempt_id     IN NUMBER,
17:17:48 296  	in_transaction_attempt_status IN NUMBER
17:17:48 297  ) AS
17:17:48 298  -- VARIABLES
17:17:48 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
17:17:48 300  temp_transaction_attempt_id NUMBER;
17:17:48 301  
17:17:48 302  -- EXCEPTION
17:17:48 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
17:17:48 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
17:17:48 305  BEGIN
17:17:48 306  
17:17:48 307  	-- Check that transaction attempt exists
17:17:48 308  	BEGIN
17:17:48 309  	  SELECT
17:17:48 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
17:17:48 311  	  FROM
17:17:48 312  	    TRANSACTION_ATTEMPT
17:17:48 313  	  WHERE
17:17:48 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
17:17:48 315  	  EXCEPTION
17:17:48 316  	    WHEN NO_DATA_FOUND THEN
17:17:48 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
17:17:48 318  	END;
17:17:48 319  
17:17:48 320  	-- Check that transaction attempt is correct
17:17:48 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
17:17:48 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:48 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
17:17:48 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
17:17:48 325  	END IF;
17:17:48 326  
17:17:48 327  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ATTEMPT(
17:17:48 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
17:17:48 329  	  in_status_id		    => in_transaction_attempt_status
17:17:48 330  	);
17:17:48 331  
17:17:48 332  EXCEPTION
17:17:48 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
17:17:48 334  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 335  	  SPROC_NAME, 'No such transaction attempt');
17:17:48 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
17:17:48 337  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 338  	  SPROC_NAME, 'Bad transaction attempt status');
17:17:48 339  WHEN OTHERS THEN
17:17:48 340  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
17:17:48 343  
17:17:48 344  /******************************************************************************/
17:17:48 345  
17:17:48 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
17:17:48 347  /*
17:17:48 348  Throws exceptions:
17:17:48 349  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 350  */
17:17:48 351  	in_transaction_id	      IN NUMBER,
17:17:48 352  	in_transaction_attempt_status IN NUMBER,
17:17:48 353  	out_result_set		      OUT SYS_REFCURSOR
17:17:48 354  ) AS
17:17:48 355  -- VARIABLES
17:17:48 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
17:17:48 357  temp_transaction_id NUMBER;
17:17:48 358  -- EXCEPTIONS
17:17:48 359  BAD_TRANSACTION_ID       EXCEPTION;
17:17:48 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
17:17:48 361  BEGIN
17:17:48 362  
17:17:48 363  	-- Check that transaction exists
17:17:48 364  	BEGIN
17:17:48 365  	  SELECT
17:17:48 366  	    TRANSACTION.ID into temp_transaction_id
17:17:48 367  	  FROM
17:17:48 368  	    TRANSACTION
17:17:48 369  	  WHERE
17:17:48 370  	    TRANSACTION.ID = in_transaction_id;
17:17:48 371  	  EXCEPTION
17:17:48 372  	    WHEN OTHERS THEN
17:17:48 373  	      RAISE BAD_TRANSACTION_ID;
17:17:48 374  	END;
17:17:48 375  
17:17:48 376  	-- Check that transaction attempt status is correct
17:17:48 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
17:17:48 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:48 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
17:17:48 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
17:17:48 381  	END IF;
17:17:48 382  
17:17:48 383  	OPEN out_result_set FOR
17:17:48 384  	SELECT
17:17:48 385  	  TRANSACTION_ATTEMPT.ID,
17:17:48 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
17:17:48 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
17:17:48 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
17:17:48 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
17:17:48 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
17:17:48 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
17:17:48 392  	  TRANSACTION.TRANSACTION_AMOUNT,
17:17:48 393  	  TRANSACTION.ID as "TRANSACTION_ID",
17:17:48 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
17:17:48 395  	FROM
17:17:48 396  	  TRANSACTION_ATTEMPT
17:17:48 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
17:17:48 398  	WHERE
17:17:48 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
17:17:48 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
17:17:48 401  
17:17:48 402  EXCEPTION
17:17:48 403  WHEN BAD_TRANSACTION_ID THEN
17:17:48 404  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 405  	  SPROC_NAME, 'No such transaction');
17:17:48 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
17:17:48 407  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 408  	  SPROC_NAME, 'Bad transaction attempt status');
17:17:48 409  WHEN OTHERS THEN
17:17:48 410  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
17:17:48 413  
17:17:48 414  /******************************************************************************/
17:17:48 415  
17:17:48 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
17:17:48 417  /*
17:17:48 418  Throws exceptions:
17:17:48 419  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 420  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 421  */
17:17:48 422  	in_transaction_attempt_id IN NUMBER,
17:17:48 423  	in_ext_status_code	  IN VARCHAR2,
17:17:48 424  	in_ext_status_message	  IN VARCHAR2,
17:17:48 425  	in_ext_transaction_id	  IN VARCHAR2
17:17:48 426  ) AS
17:17:48 427  -- VARIABLES
17:17:48 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
17:17:48 429  temp_trans_attempt_count NUMBER;
17:17:48 430  -- EXCEPTIONS
17:17:48 431  BAD_ATTEMPT_ID EXCEPTION;
17:17:48 432  BEGIN
17:17:48 433  
17:17:48 434  	SELECT
17:17:48 435  	  COUNT(*) into temp_trans_attempt_count
17:17:48 436  	FROM
17:17:48 437  	  TRANSACTION_ATTEMPT
17:17:48 438  	WHERE
17:17:48 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
17:17:48 440  
17:17:48 441  	IF temp_trans_attempt_count = 0 THEN
17:17:48 442  	  RAISE BAD_ATTEMPT_ID;
17:17:48 443  	END IF;
17:17:48 444  
17:17:48 445  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ATTEMPT(
17:17:48 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
17:17:48 447  	  in_external_status_code    => in_ext_status_code,
17:17:48 448  	  in_external_status_message => in_ext_status_message,
17:17:48 449  	  in_external_transaction_id => in_ext_transaction_id
17:17:48 450  	);
17:17:48 451  
17:17:48 452  EXCEPTION
17:17:48 453  WHEN BAD_ATTEMPT_ID THEN
17:17:48 454  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 455  	  SPROC_NAME, 'No such attempt');
17:17:48 456  WHEN OTHERS THEN
17:17:48 457  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
17:17:48 460  
17:17:48 461  /******************************************************************************/
17:17:48 462  
17:17:48 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
17:17:48 464  /*
17:17:48 465  Throws exceptions:
17:17:48 466  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 467  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 468  */
17:17:48 469  	in_transaction_id IN  NUMBER,
17:17:48 470  	out_attempts_num  OUT NUMBER
17:17:48 471  ) AS
17:17:48 472  -- VARIABLES
17:17:48 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
17:17:48 474  temp_transaction_count NUMBER;
17:17:48 475  
17:17:48 476  -- EXCEPTIONS
17:17:48 477  BAD_TRANSACTION_ID EXCEPTION;
17:17:48 478  BEGIN
17:17:48 479  
17:17:48 480  	SELECT
17:17:48 481  	  COUNT(*) into temp_transaction_count
17:17:48 482  	FROM
17:17:48 483  	  TRANSACTION
17:17:48 484  	WHERE
17:17:48 485  	  TRANSACTION.ID = in_transaction_id;
17:17:48 486  
17:17:48 487  	IF temp_transaction_count = 0 THEN
17:17:48 488  	  RAISE BAD_TRANSACTION_ID;
17:17:48 489  	END IF;
17:17:48 490  
17:17:48 491  	SELECT
17:17:48 492  	  COUNT(*) into out_attempts_num
17:17:48 493  	FROM
17:17:48 494  	  TRANSACTION_ATTEMPT
17:17:48 495  	WHERE
17:17:48 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
17:17:48 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED;
17:17:48 498  
17:17:48 499  EXCEPTION
17:17:48 500  WHEN BAD_TRANSACTION_ID THEN
17:17:48 501  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 502  	  SPROC_NAME, 'No such transaction');
17:17:48 503  WHEN OTHERS THEN
17:17:48 504  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 506  END GET_FAILED_ATTEMPTS_NUMBER;
17:17:48 507  /******************************************************************************/
17:17:48 508  
17:17:48 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
17:17:48 510  /*
17:17:48 511  Throws exceptions:
17:17:48 512  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 513  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 514  */
17:17:48 515  	in_transaction_id IN  NUMBER,
17:17:48 516  	out_is_successfull  OUT NUMBER
17:17:48 517  ) AS
17:17:48 518  -- VARIABLES
17:17:48 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
17:17:48 520  temp_transaction_count NUMBER;
17:17:48 521  
17:17:48 522  -- EXCEPTIONS
17:17:48 523  BAD_TRANSACTION_ID EXCEPTION;
17:17:48 524  BEGIN
17:17:48 525  
17:17:48 526  	SELECT
17:17:48 527  	  COUNT(*) into temp_transaction_count
17:17:48 528  	FROM
17:17:48 529  	  TRANSACTION
17:17:48 530  	WHERE
17:17:48 531  	  TRANSACTION.ID = in_transaction_id;
17:17:48 532  
17:17:48 533  	IF temp_transaction_count = 0 THEN
17:17:48 534  	  RAISE BAD_TRANSACTION_ID;
17:17:48 535  	END IF;
17:17:48 536  
17:17:48 537  	SELECT
17:17:48 538  	  COUNT(*) into out_is_successfull
17:17:48 539  	FROM
17:17:48 540  	  TRANSACTION_ATTEMPT
17:17:48 541  	WHERE
17:17:48 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
17:17:48 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS;
17:17:48 544  
17:17:48 545  EXCEPTION
17:17:48 546  WHEN BAD_TRANSACTION_ID THEN
17:17:48 547  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 548  	  SPROC_NAME, 'No such transaction');
17:17:48 549  WHEN OTHERS THEN
17:17:48 550  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 552  END IS_TRANSACTION_SUCCESSFULL;
17:17:48 553  /******************************************************************************/
17:17:48 554  
17:17:48 555  PROCEDURE GET_TRANSACTION_AMOUNT (
17:17:48 556  /*
17:17:48 557  Throws exceptions:
17:17:48 558  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 559  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 560  */
17:17:48 561  	in_transaction_id      IN  NUMBER,
17:17:48 562  	out_transaction_amount OUT NUMBER
17:17:48 563  ) AS
17:17:48 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
17:17:48 565  BEGIN
17:17:48 566  
17:17:48 567  	SELECT
17:17:48 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
17:17:48 569  	FROM
17:17:48 570  	  TRANSACTION
17:17:48 571  	WHERE
17:17:48 572  	  TRANSACTION.ID = in_transaction_id;
17:17:48 573  
17:17:48 574  EXCEPTION
17:17:48 575  WHEN NO_DATA_FOUND THEN
17:17:48 576  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 577  	  SPROC_NAME, 'No such transaction');
17:17:48 578  WHEN OTHERS THEN
17:17:48 579  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 581  END GET_TRANSACTION_AMOUNT;
17:17:48 582  
17:17:48 583  /******************************************************************************/
17:17:48 584  
17:17:48 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
17:17:48 586  /*
17:17:48 587  Throws exceptions:
17:17:48 588  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 589  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 590  */
17:17:48 591  	in_charge_id   IN  NUMBER,
17:17:48 592  	out_result_set OUT SYS_REFCURSOR
17:17:48 593  ) AS
17:17:48 594  -- VARIABLES
17:17:48 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
17:17:48 596  temp_charge_id NUMBER;
17:17:48 597  -- EXCEPTIONS
17:17:48 598  BAD_CHARGE_ID EXCEPTION;
17:17:48 599  BEGIN
17:17:48 600  
17:17:48 601  	BEGIN
17:17:48 602  	  SELECT
17:17:48 603  	    CHARGE.ID into temp_charge_id
17:17:48 604  	  FROM
17:17:48 605  	    CHARGE
17:17:48 606  	  WHERE
17:17:48 607  	    CHARGE.ID = in_charge_id;
17:17:48 608  	  EXCEPTION
17:17:48 609  	    WHEN NO_DATA_FOUND THEN
17:17:48 610  	      RAISE BAD_CHARGE_ID;
17:17:48 611  	END;
17:17:48 612  
17:17:48 613  	OPEN out_result_set FOR
17:17:48 614  	SELECT DISTINCT
17:17:48 615  	  TRANSACTION.ID,
17:17:48 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
17:17:48 617  	  TRANSACTION.CREATE_DATE,
17:17:48 618  	  TRANSACTION.TRANSACTION_AMOUNT,
17:17:48 619  	  TRANSACTION.IS_REFUND,
17:17:48 620  	  TRANSACTION.ORDER_ID
17:17:48 621  	FROM
17:17:48 622  	  CHARGE INNER JOIN TRANSACTION ON
17:17:48 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:48 624  	WHERE
17:17:48 625  	  CHARGE.ID = in_charge_id;
17:17:48 626  
17:17:48 627  EXCEPTION
17:17:48 628  WHEN BAD_CHARGE_ID THEN
17:17:48 629  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 630  	  SPROC_NAME, 'No such charge');
17:17:48 631  WHEN OTHERS THEN
17:17:48 632  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
17:17:48 635  /******************************************************************************/
17:17:48 636  
17:17:48 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
17:17:48 638  /*
17:17:48 639  Throws exceptions:
17:17:48 640  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 641  */
17:17:48 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
17:17:48 643  	out_result_set OUT SYS_REFCURSOR
17:17:48 644  ) AS
17:17:48 645  -- VARIABLES
17:17:48 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
17:17:48 647  BEGIN
17:17:48 648  	OPEN out_result_set FOR
17:17:48 649  	SELECT DISTINCT
17:17:48 650  	  TRANSACTION.ID
17:17:48 651  	FROM
17:17:48 652  	  TRANSACTION
17:17:48 653  	WHERE
17:17:48 654  	  TRANSACTION.ORDER_ID = in_order_id;
17:17:48 655  
17:17:48 656  EXCEPTION
17:17:48 657  WHEN OTHERS THEN
17:17:48 658  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 660  END GET_TRANSACTION_BY_ORDER_ID;
17:17:48 661  /******************************************************************************/
17:17:48 662  
17:17:48 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
17:17:48 664  /*
17:17:48 665  Throws exceptions:
17:17:48 666  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 667  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 668  */
17:17:48 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
17:17:48 670  	out_result_set OUT SYS_REFCURSOR
17:17:48 671  ) AS
17:17:48 672  -- VARIABLES
17:17:48 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
17:17:48 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
17:17:48 675  -- EXCEPTIONS
17:17:48 676  BAD_ORDER_ID EXCEPTION;
17:17:48 677  BEGIN
17:17:48 678  
17:17:48 679  	--TODO BOO, REMOVE ME
17:17:48 680  	BEGIN
17:17:48 681  	  SELECT
17:17:48 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
17:17:48 683  	  FROM
17:17:48 684  	    TRANSACTION
17:17:48 685  	  WHERE
17:17:48 686  	    TRANSACTION.ORDER_ID = in_order_id;
17:17:48 687  	  EXCEPTION
17:17:48 688  	    WHEN NO_DATA_FOUND THEN
17:17:48 689  	      RAISE BAD_ORDER_ID;
17:17:48 690  	END;
17:17:48 691  
17:17:48 692  	OPEN out_result_set FOR
17:17:48 693  	SELECT c.ID CHARGE_ID,
17:17:48 694  	  c.CHARGE_AMOUNT,
17:17:48 695  	  c.CHARGE_STATUS_ID,
17:17:48 696  	  c.INSTRUMENT_ID,
17:17:48 697  	  c.INSTRUMENT_TYPE_ID,
17:17:48 698  	  c.INVOICE_ID,
17:17:48 699  	  t.ID TRANSACTION_ID,
17:17:48 700  	  t.IS_REFUND,
17:17:48 701  	  t.IS_SETTLED,
17:17:48 702  	  t.ORDER_ID,
17:17:48 703  	  t.TRANSACTION_AMOUNT,
17:17:48 704  	  t.TRANSACTION_STATUS_ID,
17:17:48 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
17:17:48 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
17:17:48 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
17:17:48 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
17:17:48 709  	FROM CHARGE c
17:17:48 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
17:17:48 711  	WHERE TRANSACTION_ID IN (
17:17:48 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
17:17:48 713  	);
17:17:48 714  
17:17:48 715  EXCEPTION
17:17:48 716  WHEN BAD_ORDER_ID THEN
17:17:48 717  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 718  	  SPROC_NAME, 'No such order');
17:17:48 719  WHEN OTHERS THEN
17:17:48 720  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 722  END GET_TRANSACTIONS_BY_ORDER_ID;
17:17:48 723  /******************************************************************************/
17:17:48 724  
17:17:48 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
17:17:48 726  /*
17:17:48 727  Throws exceptions:
17:17:48 728  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 729  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 730  */
17:17:48 731  	in_invoice_id	IN  NUMBER,
17:17:48 732  	out_result_set OUT SYS_REFCURSOR
17:17:48 733  ) AS
17:17:48 734  -- VARIABLES
17:17:48 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
17:17:48 736  temp_invoice_id NUMBER;
17:17:48 737  -- EXCEPTIONS
17:17:48 738  BAD_INVOICE_ID EXCEPTION;
17:17:48 739  BEGIN
17:17:48 740  
17:17:48 741  	BEGIN
17:17:48 742  	  SELECT
17:17:48 743  	    INVOICE.ID into temp_invoice_id
17:17:48 744  	  FROM
17:17:48 745  	    INVOICE
17:17:48 746  	  WHERE
17:17:48 747  	    INVOICE.ID = in_invoice_id;
17:17:48 748  	  EXCEPTION
17:17:48 749  	    WHEN NO_DATA_FOUND THEN
17:17:48 750  	      RAISE BAD_INVOICE_ID;
17:17:48 751  	END;
17:17:48 752  
17:17:48 753  	OPEN out_result_set FOR
17:17:48 754  	SELECT DISTINCT
17:17:48 755  	  TRANSACTION.ID,
17:17:48 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
17:17:48 757  	  TRANSACTION.CREATE_DATE,
17:17:48 758  	  TRANSACTION.UPDATE_DATE,
17:17:48 759  	  TRANSACTION.ORDER_ID,
17:17:48 760  	  TRANSACTION.TRANSACTION_AMOUNT
17:17:48 761  	FROM
17:17:48 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
17:17:48 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
17:17:48 764  	WHERE
17:17:48 765  	  INVOICE.ID = in_invoice_id
17:17:48 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V15.TRUE
17:17:48 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
17:17:48 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_CLOSED;
17:17:48 769  
17:17:48 770  EXCEPTION
17:17:48 771  WHEN BAD_INVOICE_ID THEN
17:17:48 772  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 773  	  SPROC_NAME, 'No such invoice');
17:17:48 774  WHEN OTHERS THEN
17:17:48 775  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
17:17:48 778  
17:17:48 779  /******************************************************************************/
17:17:48 780  
17:17:48 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
17:17:48 782  /*
17:17:48 783  Throws exceptions:
17:17:48 784  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 785  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 786  */
17:17:48 787  	in_transaction_id IN  NUMBER,
17:17:48 788  	out_result_set	  OUT SYS_REFCURSOR
17:17:48 789  ) AS
17:17:48 790  -- VARIABLES
17:17:48 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
17:17:48 792  temp_transaction_id NUMBER;
17:17:48 793  -- EXCEPTIONS
17:17:48 794  BAD_TRANSACTION_ID EXCEPTION;
17:17:48 795  BEGIN
17:17:48 796  
17:17:48 797  	BEGIN
17:17:48 798  	  SELECT
17:17:48 799  	    TRANSACTION.ID into temp_transaction_id
17:17:48 800  	  FROM
17:17:48 801  	    TRANSACTION
17:17:48 802  	  WHERE
17:17:48 803  	    TRANSACTION.ID = in_transaction_id;
17:17:48 804  	  EXCEPTION
17:17:48 805  	    WHEN NO_DATA_FOUND THEN
17:17:48 806  	      RAISE BAD_TRANSACTION_ID;
17:17:48 807  	END;
17:17:48 808  
17:17:48 809  	OPEN out_result_set FOR
17:17:48 810  	SELECT
17:17:48 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
17:17:48 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
17:17:48 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
17:17:48 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
17:17:48 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
17:17:48 816  	FROM
17:17:48 817  	  TRANSACTION_ATTEMPT
17:17:48 818  	WHERE
17:17:48 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
17:17:48 820  
17:17:48 821  EXCEPTION
17:17:48 822  WHEN BAD_TRANSACTION_ID THEN
17:17:48 823  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 824  	  SPROC_NAME, 'No such transaction');
17:17:48 825  WHEN OTHERS THEN
17:17:48 826  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 828  END GET_TRANSACTION_ATTEMPTS;
17:17:48 829  
17:17:48 830  /******************************************************************************/
17:17:48 831  
17:17:48 832  PROCEDURE RESERVE_TRANSACTION_ID (
17:17:48 833  /*
17:17:48 834  Throws exceptions:
17:17:48 835  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 836  */
17:17:48 837  	out_transaction_id OUT NUMBER
17:17:48 838  ) AS
17:17:48 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
17:17:48 840  BEGIN
17:17:48 841  	SELECT
17:17:48 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
17:17:48 843  	FROM DUAL;
17:17:48 844  EXCEPTION
17:17:48 845  WHEN OTHERS THEN
17:17:48 846  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 848  END RESERVE_TRANSACTION_ID;
17:17:48 849  
17:17:48 850  /******************************************************************************/
17:17:48 851  
17:17:48 852  PROCEDURE GET_TRANSACTION_BY_ID (
17:17:48 853  /*
17:17:48 854  Throws exceptions:
17:17:48 855  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 856  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 857  */
17:17:48 858  	in_transaction_id IN NUMBER,
17:17:48 859  	out_result_set	  OUT SYS_REFCURSOR
17:17:48 860  ) AS
17:17:48 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
17:17:48 862  -- VARIABLES
17:17:48 863  temp_transaction_id NUMBER;
17:17:48 864  -- EXCPTIONS
17:17:48 865  BAD_TRANSACTION_ID EXCEPTION;
17:17:48 866  BEGIN
17:17:48 867  	BEGIN
17:17:48 868  	  SELECT
17:17:48 869  	    TRANSACTION.ID into temp_transaction_id
17:17:48 870  	  FROM
17:17:48 871  	    TRANSACTION
17:17:48 872  	  WHERE
17:17:48 873  	    TRANSACTION.ID = in_transaction_id;
17:17:48 874  	  EXCEPTION
17:17:48 875  	    WHEN NO_DATA_FOUND THEN
17:17:48 876  	      RAISE BAD_TRANSACTION_ID;
17:17:48 877  	END;
17:17:48 878  
17:17:48 879  	PROCS_TRANSACTION_CRU_V15.READ_TRANSACTION(
17:17:48 880  	  in_transaction_id => in_transaction_id,
17:17:48 881  	  out_result_set    => out_result_set
17:17:48 882  	);
17:17:48 883  
17:17:48 884  EXCEPTION
17:17:48 885  WHEN NO_DATA_FOUND THEN
17:17:48 886  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 887  	  SPROC_NAME, 'No such transaction');
17:17:48 888  WHEN OTHERS THEN
17:17:48 889  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 891  END GET_TRANSACTION_BY_ID;
17:17:48 892  
17:17:48 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:48 894  /*
17:17:48 895  Throws exceptions:
17:17:48 896  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 897  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:48 898  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 899  */
17:17:48 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:48 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:48 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:48 903  ) AS
17:17:48 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
17:17:48 905  -- VARIABLES
17:17:48 906  temp_transaction_id TRANSACTION.ID%TYPE;
17:17:48 907  -- EXCEPTIONS
17:17:48 908  BAD_TRANSACTION_ID   EXCEPTION;
17:17:48 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
17:17:48 910  CRU_UNKNOWN_ERROR    EXCEPTION;
17:17:48 911  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:48 912  BEGIN
17:17:48 913  	BEGIN
17:17:48 914  	  SELECT
17:17:48 915  	    TRANSACTION.ID into temp_transaction_id
17:17:48 916  	  FROM
17:17:48 917  	    TRANSACTION
17:17:48 918  	  WHERE
17:17:48 919  	    TRANSACTION.ID = in_transaction_id;
17:17:48 920  	  EXCEPTION
17:17:48 921  	    WHEN NO_DATA_FOUND THEN
17:17:48 922  	      RAISE BAD_TRANSACTION_ID;
17:17:48 923  	END;
17:17:48 924  
17:17:48 925  	BEGIN
17:17:48 926  	  PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ORDER_ID(
17:17:48 927  	    in_transaction_id => in_transaction_id,
17:17:48 928  	    in_order_id       => in_order_id,
17:17:48 929  	    in_updated_by     => in_updated_by
17:17:48 930  	  );
17:17:48 931  	  EXCEPTION
17:17:48 932  	    WHEN OTHERS THEN
17:17:48 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V15.NOT_FOUND THEN
17:17:48 934  		RAISE ORDER_ID_IS_NOT_NULL;
17:17:48 935  	      ELSE
17:17:48 936  		EXCEPTION_MESSAGE := SQLERRM;
17:17:48 937  		RAISE CRU_UNKNOWN_ERROR;
17:17:48 938  	      END IF;
17:17:48 939  	END;
17:17:48 940  
17:17:48 941  EXCEPTION
17:17:48 942  WHEN BAD_TRANSACTION_ID THEN
17:17:48 943  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 944  	  SPROC_NAME, 'No such transaction');
17:17:48 945  WHEN ORDER_ID_IS_NOT_NULL THEN
17:17:48 946  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 947  	  SPROC_NAME, 'Order id is not null');
17:17:48 948  WHEN CRU_UNKNOWN_ERROR THEN
17:17:48 949  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:48 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
17:17:48 951  WHEN OTHERS THEN
17:17:48 952  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 954  END UPDATE_TRANSACTION_ORDER_ID;
17:17:48 955  
17:17:48 956  /******************************************************************************/
17:17:48 957  
17:17:48 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
17:17:48 959  	in_transaction_id IN NUMBER
17:17:48 960  ) RETURN NUMBER AS
17:17:48 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
17:17:48 962  -- Variables
17:17:48 963  var_tax_amount NUMBER(10,2);
17:17:48 964  BEGIN
17:17:48 965  
17:17:48 966  	SELECT
17:17:48 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
17:17:48 968  	FROM
17:17:48 969  	  LINE_ITEM LI
17:17:48 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
17:17:48 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
17:17:48 972  	WHERE
17:17:48 973  	  CH.TRANSACTION_ID = in_transaction_id;
17:17:48 974  
17:17:48 975  	IF var_tax_amount IS NULL THEN
17:17:48 976  	  var_tax_amount := 0;
17:17:48 977  	END IF;
17:17:48 978  
17:17:48 979  	RETURN var_tax_amount;
17:17:48 980  
17:17:48 981  END GET_TRANSACTION_TAX_AMOUNT;
17:17:48 982  
17:17:48 983  /******************************************************************************/
17:17:48 984  
17:17:48 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
17:17:48 986  	in_transaction_id IN NUMBER
17:17:48 987  ) RETURN NUMBER AS
17:17:48 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
17:17:48 989  -- Variables
17:17:48 990  var_intrl_tax_amount NUMBER(10, 2);
17:17:48 991  BEGIN
17:17:48 992  
17:17:48 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
17:17:48 994  	FROM
17:17:48 995  	  LINE_ITEM LI
17:17:48 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
17:17:48 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
17:17:48 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
17:17:48 999  	WHERE
17:17:48 1000  	   CH.TRANSACTION_ID = in_transaction_id
17:17:48 1001  	   AND T.TAX_TYPE_ID IN (
17:17:48 1002  	     SELECT GLOBAL_ENUMS_V15.TAX_TYPE_VAT FROM DUAL
17:17:48 1003  	   );
17:17:48 1004  
17:17:48 1005  	 IF var_intrl_tax_amount IS NULL THEN
17:17:48 1006  	   var_intrl_tax_amount := 0;
17:17:48 1007  	 END IF;
17:17:48 1008  
17:17:48 1009  	 RETURN var_intrl_tax_amount;
17:17:48 1010  
17:17:48 1011  END GET_TRANSACTION_INTRL_TAXES;
17:17:48 1012  
17:17:48 1013  /******************************************************************************/
17:17:48 1014  -- norlov: #38796
17:17:48 1015  PROCEDURE GET_TRANSACTIONS (
17:17:48 1016  /*
17:17:48 1017  Throws exceptions:
17:17:48 1018  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1019  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1020  */
17:17:48 1021  	 in_group_id	       IN  NUMBER,
17:17:48 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
17:17:48 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
17:17:48 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
17:17:48 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
17:17:48 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
17:17:48 1027  	 out_result_set        OUT SYS_REFCURSOR
17:17:48 1028  ) AS
17:17:48 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
17:17:48 1030  -- VARIABLES
17:17:48 1031  var_account_id ACCOUNT.ID%TYPE;
17:17:48 1032  statement VARCHAR2(2000);
17:17:48 1033  -- EXCEPTIONS
17:17:48 1034  BAD_GROUP_ID   EXCEPTION;
17:17:48 1035  BEGIN
17:17:48 1036  	-- check group id
17:17:48 1037  	BEGIN
17:17:48 1038  	   SELECT
17:17:48 1039  	     ACCOUNT.ID into var_account_id
17:17:48 1040  	   FROM
17:17:48 1041  	     ACCOUNT
17:17:48 1042  	   WHERE
17:17:48 1043  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:48 1044  	   EXCEPTION
17:17:48 1045  	     WHEN NO_DATA_FOUND THEN
17:17:48 1046  	       RAISE BAD_GROUP_ID;
17:17:48 1047  	 END;
17:17:48 1048  
17:17:48 1049  	 OPEN out_result_set FOR
17:17:48 1050  	 SELECT
17:17:48 1051  	   TRANSACTION.ID,
17:17:48 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
17:17:48 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
17:17:48 1054  	   TRANSACTION.CREATE_DATE,
17:17:48 1055  	   TRANSACTION.CREATED_BY,
17:17:48 1056  	   TRANSACTION.IS_REFUND,
17:17:48 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
17:17:48 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
17:17:48 1059  	 FROM
17:17:48 1060  	   TRANSACTION
17:17:48 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
17:17:48 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
17:17:48 1063  	 WHERE
17:17:48 1064  	   -- Filter by invoice ID
17:17:48 1065  	   (
17:17:48 1066  	     INVOICE.ID IN (
17:17:48 1067  	       -- Gift certificate invoices
17:17:48 1068  	       SELECT
17:17:48 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
17:17:48 1070  	       FROM
17:17:48 1071  		 GIFT_CERTIFICATE
17:17:48 1072  	       WHERE
17:17:48 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
17:17:48 1074  		 -- If subscription_id is set then return nothing
17:17:48 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
17:17:48 1076  	     )
17:17:48 1077  	     OR
17:17:48 1078  	     INVOICE.ID IN (
17:17:48 1079  	       SELECT
17:17:48 1080  		 LICENSE.INVOICE_ID
17:17:48 1081  	       FROM
17:17:48 1082  		 LICENSE
17:17:48 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:48 1084  	       WHERE
17:17:48 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:48 1086  		 -- Filter by subscription id
17:17:48 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
17:17:48 1088  	     )
17:17:48 1089  	   )
17:17:48 1090  	   -- Filter by invoice id
17:17:48 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
17:17:48 1092  	   -- Filter by start date
17:17:48 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
17:17:48 1094  	   -- Filter by end date
17:17:48 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
17:17:48 1096  	   -- Filter by transaction status
17:17:48 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
17:17:48 1098  
17:17:48 1099  /*
17:17:48 1100  
17:17:48 1101  statement :=  'select distinct '||CHR(10)
17:17:48 1102  || ' TRANSACTION.ID,'||CHR(10)
17:17:48 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
17:17:48 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
17:17:48 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
17:17:48 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
17:17:48 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
17:17:48 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
17:17:48 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
17:17:48 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
17:17:48 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
17:17:48 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
17:17:48 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
17:17:48 1114  
17:17:48 1115  IF (in_transaction_status IS NOT NULL) THEN
17:17:48 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
17:17:48 1117  END IF;
17:17:48 1118  
17:17:48 1119  IF (in_invoice_id IS NOT NULL) THEN
17:17:48 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
17:17:48 1121  END IF;
17:17:48 1122  
17:17:48 1123  IF (in_subscription_id IS NOT NULL) THEN
17:17:48 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
17:17:48 1125  END IF;
17:17:48 1126  
17:17:48 1127  IF (in_start_date IS NOT NULL) THEN
17:17:48 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
17:17:48 1129  END IF;
17:17:48 1130  
17:17:48 1131  IF (in_end_date IS NOT NULL) THEN
17:17:48 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
17:17:48 1133  END IF;
17:17:48 1134  dbms_output.put_line(statement);
17:17:48 1135  OPEN out_result_set FOR statement;
17:17:48 1136  
17:17:48 1137  */
17:17:48 1138  
17:17:48 1139  EXCEPTION
17:17:48 1140  WHEN BAD_GROUP_ID THEN
17:17:48 1141  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1142  	   SPROC_NAME, 'No such group');
17:17:48 1143  WHEN OTHERS THEN
17:17:48 1144  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1146  END GET_TRANSACTIONS;
17:17:48 1147  
17:17:48 1148  FUNCTION IS_TRANSACTION_COLLECTED (
17:17:48 1149  /*
17:17:48 1150  Throws:
17:17:48 1151  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1152  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1153  Returns:
17:17:48 1154  GLOBAL_CONST.TRUE if transaction collected,
17:17:48 1155  GLOBAL_CONST.FALSE else
17:17:48 1156  */
17:17:48 1157  	 in_transaction_id IN NUMBER
17:17:48 1158  ) RETURN NUMBER AS
17:17:48 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
17:17:48 1160  -- VARIABLES
17:17:48 1161  temp_transaction_id     NUMBER;
17:17:48 1162  var_success_attemps_num NUMBER;
17:17:48 1163  -- EXCEPTIONS
17:17:48 1164  BAD_TRANSACTION_ID EXCEPTION;
17:17:48 1165  BEGIN
17:17:48 1166  
17:17:48 1167  	 BEGIN
17:17:48 1168  	   SELECT
17:17:48 1169  	     TRANSACTION.ID into temp_transaction_id
17:17:48 1170  	   FROM
17:17:48 1171  	     TRANSACTION
17:17:48 1172  	   WHERE
17:17:48 1173  	     TRANSACTION.ID = in_transaction_id;
17:17:48 1174  	   EXCEPTION
17:17:48 1175  	     WHEN NO_DATA_FOUND THEN
17:17:48 1176  	       RAISE BAD_TRANSACTION_ID;
17:17:48 1177  	 END;
17:17:48 1178  
17:17:48 1179  	 SELECT
17:17:48 1180  	   COUNT(*) into var_success_attemps_num
17:17:48 1181  	 FROM
17:17:48 1182  	   TRANSACTION_ATTEMPT
17:17:48 1183  	 WHERE
17:17:48 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
17:17:48 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS FROM DUAL );
17:17:48 1186  
17:17:48 1187  	 IF var_success_attemps_num > 0 THEN
17:17:48 1188  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:48 1189  	 ELSE
17:17:48 1190  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:48 1191  	 END IF;
17:17:48 1192  
17:17:48 1193  EXCEPTION
17:17:48 1194  WHEN BAD_TRANSACTION_ID THEN
17:17:48 1195  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1196  	   SPROC_NAME, 'No such transaction');
17:17:48 1197  WHEN OTHERS THEN
17:17:48 1198  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1200  END IS_TRANSACTION_COLLECTED;
17:17:48 1201  
17:17:48 1202  
17:17:48 1203  /******************************************************************************/
17:17:48 1204  PROCEDURE GET_ATTEMPT_NUMBER (
17:17:48 1205  /*
17:17:48 1206  Throws exceptions:
17:17:48 1207  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 1208  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 1209  */
17:17:48 1210  	 in_charge_id	in  number,
17:17:48 1211  	 out_attempt_count OUT NUMBER
17:17:48 1212  ) AS
17:17:48 1213  -- VARIABLES
17:17:48 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
17:17:48 1215  temp_transaction_id NUMBER;
17:17:48 1216  -- EXCEPTIONS
17:17:48 1217  BAD_CHARGE_ID EXCEPTION;
17:17:48 1218  BEGIN
17:17:48 1219  
17:17:48 1220  	 BEGIN
17:17:48 1221  	   SELECT
17:17:48 1222  	     TRANSACTION_ID into temp_transaction_id
17:17:48 1223  	   FROM
17:17:48 1224  	     CHARGE
17:17:48 1225  	   WHERE
17:17:48 1226  	     CHARGE.ID = in_charge_id;
17:17:48 1227  	   EXCEPTION
17:17:48 1228  	     WHEN NO_DATA_FOUND THEN
17:17:48 1229  	       RAISE BAD_CHARGE_ID;
17:17:48 1230  	 END;
17:17:48 1231  
17:17:48 1232  	 select
17:17:48 1233  	   count(1)
17:17:48 1234  	 into
17:17:48 1235  	   out_attempt_count
17:17:48 1236  	 from
17:17:48 1237  	   transaction tr
17:17:48 1238  	 inner join
17:17:48 1239  	   transaction_attempt ta
17:17:48 1240  	 on (tr.id = ta.transaction_id)
17:17:48 1241  	 where
17:17:48 1242  	   tr.ID = temp_transaction_id;
17:17:48 1243  
17:17:48 1244  	 out_attempt_count := out_attempt_count + 1;
17:17:48 1245  
17:17:48 1246  EXCEPTION
17:17:48 1247  WHEN BAD_CHARGE_ID THEN
17:17:48 1248  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 1249  	   SPROC_NAME, 'No such charge');
17:17:48 1250  WHEN OTHERS THEN
17:17:48 1251  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 1253  end GET_ATTEMPT_NUMBER;
17:17:48 1254  /******************************************************************************/
17:17:48 1255  
17:17:48 1256  END PROCS_TRANSACTION_V15;
17:17:48 1257  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.08
17:17:48 SQL> 
17:17:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V15" AS
17:17:48   2  
17:17:48   3  PROCEDURE CREATE_LICENSE(
17:17:48   4  /*
17:17:48   5  Throws exceptions:
17:17:48   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48   8  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:48   9  */
17:17:48  10  	in_status_id		    IN NUMBER,
17:17:48  11  	in_needs_entitlements	    IN NUMBER,
17:17:48  12  	in_start_date		    IN DATE,
17:17:48  13  	in_end_date		    IN DATE,
17:17:48  14  	in_offer_id		    IN NUMBER,
17:17:48  15  	in_subscription_id	    IN NUMBER,
17:17:48  16  	in_invoice_id		    IN NUMBER,
17:17:48  17  	in_created_by		    IN VARCHAR2,
17:17:48  18  	in_is_extension 	    IN NUMBER,
17:17:48  19  	in_current_offer_index	    IN NUMBER,
17:17:48  20  	in_current_offer_recurr_num IN NUMBER,
17:17:48  21  	out_license_id		    OUT NUMBER
17:17:48  22  ) AS
17:17:48  23  -- VARIABLES
17:17:48  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
17:17:48  25  temp_offer_id	   NUMBER;
17:17:48  26  temp_subscription_id NUMBER;
17:17:48  27  temp_invoice_id	   NUMBER;
17:17:48  28  
17:17:48  29  var_new_license_id NUMBER;
17:17:48  30  var_offer_duration VARCHAR2(30);
17:17:48  31  
17:17:48  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
17:17:48  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
17:17:48  34  var_offer_years	    NUMBER;
17:17:48  35  var_offer_months	    NUMBER;
17:17:48  36  var_offer_days	    NUMBER;
17:17:48  37  
17:17:48  38  -- EXCEPTIONS
17:17:48  39  BAD_OFFER_ID	     EXCEPTION;
17:17:48  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
17:17:48  41  BAD_INVOICE_ID	     EXCEPTION;
17:17:48  42  BAD_OFFER_DURATION     EXCEPTION;
17:17:48  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48  44  BEGIN
17:17:48  45  
17:17:48  46  	-- TODO:
17:17:48  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
17:17:48  48  
17:17:48  49  	out_license_id := NULL;
17:17:48  50  
17:17:48  51  	-- get offer id and offer entitlement duration
17:17:48  52  	BEGIN
17:17:48  53  	  SELECT
17:17:48  54  	    OFFER.ID,
17:17:48  55  	    OFFER.ENTITLEMENT_DURATION
17:17:48  56  	    into
17:17:48  57  	    temp_offer_id,
17:17:48  58  	    var_offer_duration
17:17:48  59  	  FROM
17:17:48  60  	    OFFER
17:17:48  61  	  WHERE
17:17:48  62  	    OFFER.ID = in_offer_id;
17:17:48  63  	  EXCEPTION
17:17:48  64  	  WHEN NO_DATA_FOUND THEN
17:17:48  65  	    RAISE BAD_OFFER_ID;
17:17:48  66  	END;
17:17:48  67  
17:17:48  68  	-- Check that subscription exists
17:17:48  69  	BEGIN
17:17:48  70  	  SELECT
17:17:48  71  	    SUBSCRIPTION.ID into temp_subscription_id
17:17:48  72  	  FROM
17:17:48  73  	    SUBSCRIPTION
17:17:48  74  	  WHERE
17:17:48  75  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:48  76  	  EXCEPTION
17:17:48  77  	  WHEN NO_DATA_FOUND THEN
17:17:48  78  	    RAISE BAD_SUBSCRIPTION_ID;
17:17:48  79  	END;
17:17:48  80  
17:17:48  81  	-- Check that invoice exists
17:17:48  82  	BEGIN
17:17:48  83  	  SELECT
17:17:48  84  	    INVOICE.ID into temp_invoice_id
17:17:48  85  	  FROM
17:17:48  86  	    INVOICE
17:17:48  87  	  WHERE
17:17:48  88  	    INVOICE.ID = in_invoice_id;
17:17:48  89  	  EXCEPTION
17:17:48  90  	  WHEN NO_DATA_FOUND THEN
17:17:48  91  	    RAISE BAD_INVOICE_ID;
17:17:48  92  	END;
17:17:48  93  
17:17:48  94  	-- convert offer duration into intervals
17:17:48  95  	BEGIN
17:17:48  96  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
17:17:48  97  	    var_offer_duration,
17:17:48  98  	    var_offer_years,
17:17:48  99  	    var_offer_months,
17:17:48 100  	    var_offer_days);
17:17:48 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
17:17:48 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
17:17:48 103  	  EXCEPTION
17:17:48 104  	    WHEN OTHERS THEN
17:17:48 105  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 106  	      RAISE BAD_OFFER_DURATION;
17:17:48 107  	END;
17:17:48 108  
17:17:48 109  	-- insert new row into license table
17:17:48 110  	PROCS_LICENSE_CRU_V15.CREATE_LICENSE(
17:17:48 111  	  out_license_id	      => var_new_license_id,
17:17:48 112  	  in_license_status_id	      => in_status_id,
17:17:48 113  	  in_needs_entitlements       => in_needs_entitlements,
17:17:48 114  	  in_start_date 	      => in_start_date,
17:17:48 115  	  in_offer_id		      => in_offer_id,
17:17:48 116  	  in_subscription_id	      => in_subscription_id,
17:17:48 117  	  in_invoice_id 	      => in_invoice_id,
17:17:48 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
17:17:48 119  	  in_created_by 	      => in_created_by,
17:17:48 120  	  in_is_extension	      => in_is_extension,
17:17:48 121  	  in_current_offer_index      => in_current_offer_index,
17:17:48 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
17:17:48 123  	);
17:17:48 124  
17:17:48 125  	out_license_id := var_new_license_id;
17:17:48 126  
17:17:48 127  EXCEPTION
17:17:48 128  WHEN BAD_OFFER_DURATION THEN
17:17:48 129  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
17:17:48 131  WHEN BAD_OFFER_ID THEN
17:17:48 132  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 133  	  SPROC_NAME, 'No such offer');
17:17:48 134  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:48 135  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 136  	  SPROC_NAME, 'No such subscription');
17:17:48 137  WHEN BAD_INVOICE_ID THEN
17:17:48 138  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 139  	  SPROC_NAME, 'No such invoice');
17:17:48 140  WHEN OTHERS THEN
17:17:48 141  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 143  END;
17:17:48 144  
17:17:48 145  /******************************************************************************/
17:17:48 146  
17:17:48 147  PROCEDURE UPDATE_LICENSE_STATUS(
17:17:48 148  	  in_license_id     IN NUMBER,
17:17:48 149  	  in_license_status IN NUMBER,
17:17:48 150  	  in_updated_by     IN VARCHAR2,
17:17:48 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:48 152  ) AS
17:17:48 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
17:17:48 154  -- VARIABLES
17:17:48 155  temp_license_id NUMBER;
17:17:48 156  -- EXCEPTIONS
17:17:48 157  BAD_LICENSE_ID	     EXCEPTION;
17:17:48 158  BAD_LICENSE_STATUS     EXCEPTION;
17:17:48 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 160  BEGIN
17:17:48 161  
17:17:48 162  	BEGIN
17:17:48 163  	  SELECT
17:17:48 164  	    ID into temp_license_id
17:17:48 165  	  FROM
17:17:48 166  	    LICENSE
17:17:48 167  	  WHERE
17:17:48 168  	    LICENSE.ID = in_license_id;
17:17:48 169  	  EXCEPTION
17:17:48 170  	    WHEN NO_DATA_FOUND THEN
17:17:48 171  	      RAISE BAD_LICENSE_ID;
17:17:48 172  	END;
17:17:48 173  
17:17:48 174  	IF in_license_status != GLOBAL_STATUSES_V15.LICENSE_CLOSED
17:17:48 175  	   AND in_license_status != GLOBAL_STATUSES_V15.LICENSE_ACTIVE THEN
17:17:48 176  	  RAISE BAD_LICENSE_STATUS;
17:17:48 177  	END IF;
17:17:48 178  
17:17:48 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V15.TRUE) then
17:17:48 180  	  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:48 181  	    in_license_id	 => in_license_id,
17:17:48 182  	    in_updated_by	 => in_updated_by,
17:17:48 183  	    in_license_status_id => in_license_status,
17:17:48 184  	    in_entitlement_end_date	 => sysdate
17:17:48 185  	  );
17:17:48 186  	ELSE
17:17:48 187  	  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:48 188  	    in_license_id	 => in_license_id,
17:17:48 189  	    in_updated_by	 => in_updated_by,
17:17:48 190  	    in_license_status_id => in_license_status
17:17:48 191  	  );
17:17:48 192  	END IF;
17:17:48 193  
17:17:48 194  EXCEPTION
17:17:48 195  WHEN BAD_LICENSE_STATUS THEN
17:17:48 196  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 197  	  SPROC_NAME, 'Bad status id');
17:17:48 198  WHEN BAD_LICENSE_ID THEN
17:17:48 199  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 200  	  SPROC_NAME, 'No such license');
17:17:48 201  WHEN OTHERS THEN
17:17:48 202  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 204  END UPDATE_LICENSE_STATUS;
17:17:48 205  
17:17:48 206  /******************************************************************************/
17:17:48 207  
17:17:48 208  PROCEDURE GET_ENDING_LICENSES (
17:17:48 209  	in_hours_number IN NUMBER,
17:17:48 210  	out_result_set	OUT SYS_REFCURSOR
17:17:48 211  ) AS
17:17:48 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
17:17:48 213  -- VARIABLES
17:17:48 214  var_days		NUMBER;
17:17:48 215  var_hours 	NUMBER;
17:17:48 216  var_time_interval INTERVAL DAY (3) TO SECOND;
17:17:48 217  BEGIN
17:17:48 218  
17:17:48 219  	var_hours := mod(in_hours_number,24);
17:17:48 220  	var_days := (in_hours_number - var_hours) / 24;
17:17:48 221  	var_time_interval := var_days||' '||var_hours||':0:0';
17:17:48 222  
17:17:48 223  	OPEN out_result_set FOR
17:17:48 224  SELECT * FROM
17:17:48 225  (
17:17:48 226  	SELECT
17:17:48 227  	  LICENSE.ID,
17:17:48 228  	  LICENSE.CREATE_DATE,
17:17:48 229  	  LICENSE.CREATED_BY,
17:17:48 230  	  LICENSE.CURRENT_OFFER_INDEX,
17:17:48 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:48 232  	  LICENSE.END_DATE,
17:17:48 233  	  LICENSE.ENTITLEMENT_END_DATE,
17:17:48 234  	  LICENSE.INVOICE_ID,
17:17:48 235  	  LICENSE.IS_EXTENSION,
17:17:48 236  	  LICENSE.LICENSE_STATUS_ID,
17:17:48 237  	  LICENSE.OFFER_ID,
17:17:48 238  	  LICENSE.START_DATE,
17:17:48 239  	  LICENSE.SUBSCRIPTION_ID,
17:17:48 240  	  LICENSE.UPDATE_DATE,
17:17:48 241  	  LICENSE.UPDATED_BY
17:17:48 242  	FROM
17:17:48 243  	  LICENSE
17:17:48 244  	WHERE
17:17:48 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
17:17:48 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:48 247  	  AND NOT EXISTS
17:17:48 248  	  (
17:17:48 249  	    SELECT NULL
17:17:48 250  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:48 251  	    WHERE PROCESS_NAME = SPROC_NAME
17:17:48 252  	      AND GENERIC_ID = LICENSE.ID
17:17:48 253  	  )
17:17:48 254  	  AND ROWNUM <= 10000
17:17:48 255  	  ORDER BY dbms_random.value
17:17:48 256  ) WHERE
17:17:48 257  	  ROWNUM <= 1000
17:17:48 258  	  ;
17:17:48 259  EXCEPTION
17:17:48 260  WHEN OTHERS THEN
17:17:48 261  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 263  END GET_ENDING_LICENSES;
17:17:48 264  
17:17:48 265  
17:17:48 266  /******************************************************************************/
17:17:48 267  
17:17:48 268  PROCEDURE GET_ENDING_LICENSES_CC (
17:17:48 269  	in_hours_number IN NUMBER,
17:17:48 270  	out_result_set	OUT SYS_REFCURSOR,
17:17:48 271  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:48 272  ) AS
17:17:48 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
17:17:48 274  -- VARIABLES
17:17:48 275  var_days		NUMBER;
17:17:48 276  var_hours 	NUMBER;
17:17:48 277  var_time_interval INTERVAL DAY (3) TO SECOND;
17:17:48 278  BEGIN
17:17:48 279  
17:17:48 280  	var_hours := mod(in_hours_number,24);
17:17:48 281  	var_days := (in_hours_number - var_hours) / 24;
17:17:48 282  	var_time_interval := var_days||' '||var_hours||':0:0';
17:17:48 283  
17:17:48 284  	OPEN out_result_set FOR
17:17:48 285  SELECT * FROM
17:17:48 286  (
17:17:48 287  	SELECT
17:17:48 288  	  LICENSE.ID,
17:17:48 289  	  LICENSE.CREATE_DATE,
17:17:48 290  	  LICENSE.CREATED_BY,
17:17:48 291  	  LICENSE.CURRENT_OFFER_INDEX,
17:17:48 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:48 293  	  LICENSE.END_DATE,
17:17:48 294  	  LICENSE.ENTITLEMENT_END_DATE,
17:17:48 295  	  LICENSE.INVOICE_ID,
17:17:48 296  	  LICENSE.IS_EXTENSION,
17:17:48 297  	  LICENSE.LICENSE_STATUS_ID,
17:17:48 298  	  LICENSE.OFFER_ID,
17:17:48 299  	  LICENSE.START_DATE,
17:17:48 300  	  LICENSE.SUBSCRIPTION_ID,
17:17:48 301  	  LICENSE.UPDATE_DATE,
17:17:48 302  	  LICENSE.UPDATED_BY
17:17:48 303  	FROM
17:17:48 304  	  LICENSE
17:17:48 305  	WHERE
17:17:48 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
17:17:48 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:48 308  	  AND NOT EXISTS
17:17:48 309  	  (
17:17:48 310  	    SELECT NULL
17:17:48 311  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:48 312  	    WHERE PROCESS_NAME = in_process_name
17:17:48 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
17:17:48 314  	  )
17:17:48 315  	  AND ROWNUM <= 10000
17:17:48 316  	  ORDER BY dbms_random.value
17:17:48 317  ) WHERE
17:17:48 318  	  ROWNUM <= 1000
17:17:48 319  	  ;
17:17:48 320  EXCEPTION
17:17:48 321  WHEN OTHERS THEN
17:17:48 322  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 324  END GET_ENDING_LICENSES_CC;
17:17:48 325  
17:17:48 326  /******************************************************************************/
17:17:48 327  
17:17:48 328  PROCEDURE GET_RECURRING_OFFER (
17:17:48 329  	in_license_id  IN NUMBER,
17:17:48 330  	out_result_set OUT SYS_REFCURSOR
17:17:48 331  ) AS
17:17:48 332  -- VARIABLES
17:17:48 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
17:17:48 334  var_offer_chain_id	    NUMBER;
17:17:48 335  var_offer_id		    NUMBER;
17:17:48 336  var_offer_num_recurrences     NUMBER;
17:17:48 337  var_license_cur_offer_rec_num NUMBER;
17:17:48 338  var_offer_index		    NUMBER;
17:17:48 339  -- EXCEPTIONS
17:17:48 340  BAD_LICENSE_ID	     EXCEPTION;
17:17:48 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
17:17:48 342  BEGIN
17:17:48 343  
17:17:48 344  	BEGIN
17:17:48 345  	  SELECT
17:17:48 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
17:17:48 347  	    LICENSE.OFFER_ID,
17:17:48 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
17:17:48 349  	    into
17:17:48 350  	    var_offer_chain_id,
17:17:48 351  	    var_offer_id,
17:17:48 352  	    var_license_cur_offer_rec_num
17:17:48 353  	  FROM
17:17:48 354  	    LICENSE
17:17:48 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:48 356  	  WHERE
17:17:48 357  	    LICENSE.ID = in_license_id;
17:17:48 358  	  EXCEPTION
17:17:48 359  	    WHEN NO_DATA_FOUND THEN
17:17:48 360  	      RAISE BAD_LICENSE_ID;
17:17:48 361  	END;
17:17:48 362  
17:17:48 363  	BEGIN
17:17:48 364  	  SELECT
17:17:48 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
17:17:48 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
17:17:48 367  	    into
17:17:48 368  	    var_offer_num_recurrences,
17:17:48 369  	    var_offer_index
17:17:48 370  	  FROM
17:17:48 371  	    OFFER_OFFER_CHAIN
17:17:48 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 373  	  WHERE
17:17:48 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
17:17:48 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
17:17:48 376  	  EXCEPTION
17:17:48 377  	    WHEN NO_DATA_FOUND THEN
17:17:48 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
17:17:48 379  	END;
17:17:48 380  
17:17:48 381  	IF var_offer_num_recurrences = 0 THEN
17:17:48 382  	  --out_result_set := NULL;
17:17:48 383  	  -- TODO: Remove this hardcode
17:17:48 384  	  OPEN out_result_set FOR
17:17:48 385  	  SELECT
17:17:48 386  	    OFFER.ID,
17:17:48 387  	    OFFER.OFFER_STATUS_ID,
17:17:48 388  	    OFFER.ENTITLEMENT_DURATION,
17:17:48 389  	    OFFER.CREATED_BY,
17:17:48 390  	    OFFER.CREATE_DATE,
17:17:48 391  	    OFFER.UPDATED_BY,
17:17:48 392  	    OFFER.UPDATE_DATE,
17:17:48 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
17:17:48 394  	    var_offer_index as "OFFER_INDEX"
17:17:48 395  	  FROM
17:17:48 396  	    OFFER_OFFER_CHAIN
17:17:48 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 398  	  WHERE ROWNUM = 0;
17:17:48 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
17:17:48 400  	  --out_result_set := NULL;
17:17:48 401  	  -- TODO: Remove this hardcode
17:17:48 402  	  OPEN out_result_set FOR
17:17:48 403  	  SELECT
17:17:48 404  	    OFFER.ID,
17:17:48 405  	    OFFER.OFFER_STATUS_ID,
17:17:48 406  	    OFFER.ENTITLEMENT_DURATION,
17:17:48 407  	    OFFER.CREATED_BY,
17:17:48 408  	    OFFER.CREATE_DATE,
17:17:48 409  	    OFFER.UPDATED_BY,
17:17:48 410  	    OFFER.UPDATE_DATE,
17:17:48 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
17:17:48 412  	    var_offer_index as "OFFER_INDEX"
17:17:48 413  	  FROM
17:17:48 414  	    OFFER_OFFER_CHAIN
17:17:48 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 416  	  WHERE ROWNUM = 0;
17:17:48 417  	ELSE
17:17:48 418  	  OPEN out_result_set FOR
17:17:48 419  	  SELECT
17:17:48 420  	    OFFER.ID,
17:17:48 421  	    OFFER.OFFER_STATUS_ID,
17:17:48 422  	    OFFER.ENTITLEMENT_DURATION,
17:17:48 423  	    OFFER.CREATED_BY,
17:17:48 424  	    OFFER.CREATE_DATE,
17:17:48 425  	    OFFER.UPDATED_BY,
17:17:48 426  	    OFFER.UPDATE_DATE,
17:17:48 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
17:17:48 428  	    var_offer_index as "OFFER_INDEX"
17:17:48 429  	  FROM
17:17:48 430  	    OFFER
17:17:48 431  	  WHERE
17:17:48 432  	    OFFER.ID = var_offer_id;
17:17:48 433  	END IF;
17:17:48 434  
17:17:48 435  EXCEPTION
17:17:48 436  WHEN BAD_LICENSE_ID THEN
17:17:48 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 438  	  SPROC_NAME, 'No such license');
17:17:48 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
17:17:48 440  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
17:17:48 442  WHEN OTHERS THEN
17:17:48 443  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 445  END GET_RECURRING_OFFER;
17:17:48 446  
17:17:48 447  /******************************************************************************/
17:17:48 448  
17:17:48 449  PROCEDURE GET_NEXT_OFFER (
17:17:48 450  /*
17:17:48 451  Throws exceptions:
17:17:48 452  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:48 453  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:48 454  */
17:17:48 455  	in_license_id  IN NUMBER,
17:17:48 456  	out_result_set OUT SYS_REFCURSOR
17:17:48 457  ) AS
17:17:48 458  -- VARIABLES
17:17:48 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
17:17:48 460  var_offer_chain_id	NUMBER;
17:17:48 461  var_offer_id		NUMBER;
17:17:48 462  var_license_current_index NUMBER;
17:17:48 463  var_next_offer_index	NUMBER;
17:17:48 464  -- EXCEPTIONS
17:17:48 465  BAD_LICENSE_ID	      EXCEPTION;
17:17:48 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
17:17:48 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:48 468  BEGIN
17:17:48 469  
17:17:48 470  	BEGIN
17:17:48 471  	  SELECT
17:17:48 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
17:17:48 473  	    LICENSE.OFFER_ID,
17:17:48 474  	    LICENSE.CURRENT_OFFER_INDEX
17:17:48 475  	    into
17:17:48 476  	    var_offer_chain_id,
17:17:48 477  	    var_offer_id,
17:17:48 478  	    var_license_current_index
17:17:48 479  	  FROM
17:17:48 480  	    LICENSE
17:17:48 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:48 482  	  WHERE
17:17:48 483  	    LICENSE.ID = in_license_id;
17:17:48 484  	  EXCEPTION
17:17:48 485  	    WHEN NO_DATA_FOUND THEN
17:17:48 486  	      RAISE BAD_LICENSE_ID;
17:17:48 487  	END;
17:17:48 488  
17:17:48 489  	BEGIN
17:17:48 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX(
17:17:48 491  	    var_offer_chain_id,
17:17:48 492  	    var_license_current_index
17:17:48 493  	  );
17:17:48 494  	  EXCEPTION
17:17:48 495  	    WHEN OTHERS THEN
17:17:48 496  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:48 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
17:17:48 498  	END;
17:17:48 499  
17:17:48 500  	IF var_next_offer_index IS NULL THEN
17:17:48 501  	  -- RETURN NULL;
17:17:48 502  	  -- TODO: Remove this hardcode
17:17:48 503  	  OPEN out_result_set FOR
17:17:48 504  	  SELECT
17:17:48 505  	    OFFER.ID,
17:17:48 506  	    OFFER.OFFER_STATUS_ID,
17:17:48 507  	    OFFER.ENTITLEMENT_DURATION,
17:17:48 508  	    OFFER.CREATED_BY,
17:17:48 509  	    OFFER.CREATE_DATE,
17:17:48 510  	    OFFER.UPDATED_BY,
17:17:48 511  	    OFFER.UPDATE_DATE,
17:17:48 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
17:17:48 513  	  FROM
17:17:48 514  	    OFFER_OFFER_CHAIN
17:17:48 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 516  	  WHERE
17:17:48 517  	    1=2;
17:17:48 518  	ELSE
17:17:48 519  	  OPEN out_result_set FOR
17:17:48 520  	  SELECT
17:17:48 521  	    OFFER.ID,
17:17:48 522  	    OFFER.OFFER_STATUS_ID,
17:17:48 523  	    OFFER.ENTITLEMENT_DURATION,
17:17:48 524  	    OFFER.CREATED_BY,
17:17:48 525  	    OFFER.CREATE_DATE,
17:17:48 526  	    OFFER.UPDATED_BY,
17:17:48 527  	    OFFER.UPDATE_DATE,
17:17:48 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
17:17:48 529  	  FROM
17:17:48 530  	    OFFER_OFFER_CHAIN
17:17:48 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:48 532  	  WHERE
17:17:48 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
17:17:48 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
17:17:48 535  	END IF;
17:17:48 536  
17:17:48 537  EXCEPTION
17:17:48 538  WHEN BAD_LICENSE_ID THEN
17:17:48 539  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 540  	  SPROC_NAME, 'No such license');
17:17:48 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
17:17:48 542  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:48 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
17:17:48 544  WHEN OTHERS THEN
17:17:48 545  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 547  END GET_NEXT_OFFER;
17:17:48 548  
17:17:48 549  /******************************************************************************/
17:17:48 550  
17:17:48 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
17:17:48 552  	in_license_id IN NUMBER,
17:17:48 553  	out_group_id  OUT NUMBER
17:17:48 554  ) AS
17:17:48 555  -- VARIABLES
17:17:48 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
17:17:48 557  var_subscription_id NUMBER;
17:17:48 558  var_group_id	  NUMBER;
17:17:48 559  -- EXCEPTIONS
17:17:48 560  BAD_LICENSE_ID	   EXCEPTION;
17:17:48 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
17:17:48 562  BEGIN
17:17:48 563  
17:17:48 564  	-- Get subscription id
17:17:48 565  	BEGIN
17:17:48 566  	  SELECT
17:17:48 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
17:17:48 568  	  FROM
17:17:48 569  	    LICENSE
17:17:48 570  	  WHERE
17:17:48 571  	    LICENSE.ID = in_license_id;
17:17:48 572  	  EXCEPTION
17:17:48 573  	    WHEN NO_DATA_FOUND THEN
17:17:48 574  	      RAISE BAD_LICENSE_ID;
17:17:48 575  	END;
17:17:48 576  
17:17:48 577  	-- Get group id
17:17:48 578  	BEGIN
17:17:48 579  	  SELECT
17:17:48 580  	    ACCOUNT.GROUP_ID into var_group_id
17:17:48 581  	  FROM
17:17:48 582  	    SUBSCRIPTION
17:17:48 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:48 584  	  WHERE
17:17:48 585  	    SUBSCRIPTION.ID = var_subscription_id;
17:17:48 586  	  EXCEPTION
17:17:48 587  	    WHEN NO_DATA_FOUND THEN
17:17:48 588  	      RAISE CAN_NOT_GET_GROUP_ID;
17:17:48 589  	END;
17:17:48 590  
17:17:48 591  	out_group_id := var_group_id;
17:17:48 592  
17:17:48 593  EXCEPTION
17:17:48 594  WHEN BAD_LICENSE_ID THEN
17:17:48 595  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 596  	  SPROC_NAME, 'No such license');
17:17:48 597  WHEN CAN_NOT_GET_GROUP_ID THEN
17:17:48 598  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 599  	  SPROC_NAME, 'Could not get group id');
17:17:48 600  WHEN OTHERS THEN
17:17:48 601  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 603  END GET_GROUP_ID_BY_LICENSE_ID;
17:17:48 604  
17:17:48 605  /******************************************************************************/
17:17:48 606  
17:17:48 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
17:17:48 608  	out_result_set OUT SYS_REFCURSOR
17:17:48 609  ) AS
17:17:48 610  BEGIN
17:17:48 611  	OPEN out_result_set FOR
17:17:48 612  SELECT * FROM
17:17:48 613  (
17:17:48 614  	SELECT
17:17:48 615  	  LICENSE.ID,
17:17:48 616  	  LICENSE.INVOICE_ID,
17:17:48 617  	  LICENSE.IS_EXTENSION,
17:17:48 618  	  LICENSE.START_DATE,
17:17:48 619  	  LICENSE.END_DATE,
17:17:48 620  	  LICENSE.ENTITLEMENT_END_DATE,
17:17:48 621  	  LICENSE.CURRENT_OFFER_INDEX,
17:17:48 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:48 623  	  LICENSE.CREATE_DATE,
17:17:48 624  	  LICENSE.CREATED_BY,
17:17:48 625  	  LICENSE.LICENSE_STATUS_ID,
17:17:48 626  	  LICENSE.OFFER_ID,
17:17:48 627  	  LICENSE.SUBSCRIPTION_ID,
17:17:48 628  	  LICENSE.UPDATE_DATE,
17:17:48 629  	  LICENSE.UPDATED_BY,
17:17:48 630  	  LICENSE.NEEDS_ENTITLEMENTS
17:17:48 631  	FROM
17:17:48 632  	  LICENSE
17:17:48 633  	WHERE
17:17:48 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE
17:17:48 635  	AND ROWNUM <= 5000
17:17:48 636  	ORDER BY dbms_random.value
17:17:48 637  ) WHERE
17:17:48 638  	ROWNUM <= 500;
17:17:48 639  
17:17:48 640  END GET_NEED_ENTITLEMENTS_LICENSES;
17:17:48 641  
17:17:48 642  /******************************************************************************/
17:17:48 643  
17:17:48 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
17:17:48 645  	in_license_id	      IN NUMBER,
17:17:48 646  	in_needs_entitlements IN NUMBER,
17:17:48 647  	in_updated_by	      IN VARCHAR2
17:17:48 648  ) AS
17:17:48 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
17:17:48 650  -- VARIABLES
17:17:48 651  temp_license_id NUMBER;
17:17:48 652  -- EXCEPTIONS
17:17:48 653  BAD_LICENSE_ID	     EXCEPTION;
17:17:48 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
17:17:48 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 656  BEGIN
17:17:48 657  
17:17:48 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V15.TRUE
17:17:48 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:48 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
17:17:48 661  	END IF;
17:17:48 662  
17:17:48 663  	BEGIN
17:17:48 664  	  SELECT
17:17:48 665  	    LICENSE.ID into temp_license_id
17:17:48 666  	  FROM
17:17:48 667  	    LICENSE
17:17:48 668  	  WHERE
17:17:48 669  	    LICENSE.ID = in_license_id;
17:17:48 670  	  EXCEPTION
17:17:48 671  	    WHEN NO_DATA_FOUND THEN
17:17:48 672  	      RAISE BAD_LICENSE_ID;
17:17:48 673  	END;
17:17:48 674  
17:17:48 675  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:48 676  	  in_license_id 	=> in_license_id,
17:17:48 677  	  in_needs_entitlements => in_needs_entitlements,
17:17:48 678  	  in_updated_by 	=> in_updated_by
17:17:48 679  	);
17:17:48 680  
17:17:48 681  EXCEPTION
17:17:48 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
17:17:48 683  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:48 684  	  SPROC_NAME, 'Bad entitlements flag value');
17:17:48 685  WHEN BAD_LICENSE_ID THEN
17:17:48 686  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 687  	  SPROC_NAME, 'No such license');
17:17:48 688  WHEN OTHERS THEN
17:17:48 689  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
17:17:48 692  
17:17:48 693  
17:17:48 694  /******************************************************************************/
17:17:48 695  
17:17:48 696  PROCEDURE GET_ENDED_GC_LICENSES (
17:17:48 697  	out_result_set		OUT SYS_REFCURSOR,
17:17:48 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:48 699  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:48 700  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:48 701  ) AS
17:17:48 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
17:17:48 703  var_days		NUMBER;
17:17:48 704  var_hours 	NUMBER;
17:17:48 705  var_time_interval INTERVAL DAY (3) TO SECOND;
17:17:48 706  BEGIN
17:17:48 707  	var_hours := mod(in_hours_number,24);
17:17:48 708  	var_days := (in_hours_number - var_hours) / 24;
17:17:48 709  	var_time_interval := var_days||' '||var_hours||':0:0';
17:17:48 710  	OPEN out_result_set FOR
17:17:48 711  SELECT * FROM
17:17:48 712  (
17:17:48 713  	SELECT
17:17:48 714  	  l.ID,
17:17:48 715  	  l.CREATE_DATE,
17:17:48 716  	  l.CREATED_BY,
17:17:48 717  	  l.CURRENT_OFFER_INDEX,
17:17:48 718  	  l.CURRENT_OFFER_RECURR_NUM,
17:17:48 719  	  l.END_DATE,
17:17:48 720  	  l.ENTITLEMENT_END_DATE,
17:17:48 721  	  l.INVOICE_ID,
17:17:48 722  	  l.IS_EXTENSION,
17:17:48 723  	  l.LICENSE_STATUS_ID,
17:17:48 724  	  l.OFFER_ID,
17:17:48 725  	  l.START_DATE,
17:17:48 726  	  l.SUBSCRIPTION_ID,
17:17:48 727  	  l.UPDATE_DATE,
17:17:48 728  	  l.UPDATED_BY
17:17:48 729  	FROM
17:17:48 730  	  GIFT_CERTIFICATE gc
17:17:48 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
17:17:48 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
17:17:48 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
17:17:48 734  	WHERE
17:17:48 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:48 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
17:17:48 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
17:17:48 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
17:17:48 739  	  AND NOT EXISTS (
17:17:48 740  	    SELECT NULL
17:17:48 741  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:48 742  	    WHERE PROCESS_NAME = in_process_name
17:17:48 743  	      AND GENERIC_ID = l.ID
17:17:48 744  	  )
17:17:48 745  	  AND ROWNUM <= in_num_rows*10
17:17:48 746  	  ORDER BY dbms_random.value
17:17:48 747  ) WHERE
17:17:48 748  	  ROWNUM <= in_num_rows
17:17:48 749  	  GROUP BY SUBSCRIPTION_ID;
17:17:48 750  EXCEPTION
17:17:48 751  WHEN OTHERS THEN
17:17:48 752  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 754  END GET_ENDED_GC_LICENSES;
17:17:48 755  
17:17:48 756  PROCEDURE GET_LICENSE_BY_ID (
17:17:48 757  	in_license_id  IN NUMBER,
17:17:48 758  	out_result_set OUT SYS_REFCURSOR
17:17:48 759  ) AS
17:17:48 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
17:17:48 761  -- VARIABLES
17:17:48 762  temp_license_id NUMBER;
17:17:48 763  -- EXCEPTIONS
17:17:48 764  BAD_LICENSE_ID EXCEPTION;
17:17:48 765  BEGIN
17:17:48 766  
17:17:48 767  	BEGIN
17:17:48 768  	  SELECT
17:17:48 769  	    l.id into temp_license_id
17:17:48 770  	  FROM
17:17:48 771  	    license l
17:17:48 772  	  WHERE
17:17:48 773  	    l.id = in_license_id;
17:17:48 774  	  EXCEPTION
17:17:48 775  	    WHEN NO_DATA_FOUND THEN
17:17:48 776  	      RAISE BAD_LICENSE_ID;
17:17:48 777  	END;
17:17:48 778  
17:17:48 779  	OPEN out_result_set FOR
17:17:48 780  	SELECT
17:17:48 781  	  l.id,
17:17:48 782  	  l.license_status_id,
17:17:48 783  	  l.subscription_id,
17:17:48 784  	  l.invoice_id,
17:17:48 785  	  l.offer_id,
17:17:48 786  	  l.start_date,
17:17:48 787  	  l.end_date,
17:17:48 788  	  l.entitlement_end_date,
17:17:48 789  	  l.is_extension,
17:17:48 790  	  l.create_date,
17:17:48 791  	  l.created_by,
17:17:48 792  	  l.update_date,
17:17:48 793  	  l.updated_by,
17:17:48 794  	  l.current_offer_index,
17:17:48 795  	  l.current_offer_recurr_num,
17:17:48 796  	  l.needs_entitlements
17:17:48 797  	FROM
17:17:48 798  	  LICENSE l
17:17:48 799  	WHERE
17:17:48 800  	  l.id = in_license_id;
17:17:48 801  
17:17:48 802  EXCEPTION
17:17:48 803  WHEN BAD_LICENSE_ID THEN
17:17:48 804  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:48 805  	  SPROC_NAME, 'No such license');
17:17:48 806  WHEN OTHERS THEN
17:17:48 807  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 809  END GET_LICENSE_BY_ID;
17:17:48 810  
17:17:48 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
17:17:48 812  	in_subscription_id IN NUMBER,
17:17:48 813  	in_end_date IN DATE,
17:17:48 814  	in_updated_by IN VARCHAR2
17:17:48 815  ) AS
17:17:48 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
17:17:48 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:48 818  var_latest_lice NUMBER;
17:17:48 819  BEGIN
17:17:48 820  	SELECT max(id)
17:17:48 821  	INTO  var_latest_lice
17:17:48 822  	FROM LICENSE
17:17:48 823  	WHERE
17:17:48 824  	  subscription_id = in_subscription_id
17:17:48 825  	;
17:17:48 826  
17:17:48 827  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:48 828  	  in_license_id        => var_latest_lice,
17:17:48 829  	  in_updated_by        => in_updated_by,
17:17:48 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE,
17:17:48 831  	  in_end_date	       => in_end_date,
17:17:48 832  	  in_entitlement_end_date => in_end_date
17:17:48 833  	);
17:17:48 834  
17:17:48 835  EXCEPTION
17:17:48 836  WHEN NO_DATA_FOUND THEN
17:17:48 837  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
17:17:48 839  WHEN OTHERS THEN
17:17:48 840  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:48 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:48 842  END UP_LATEST_LICE_END_BY_SUBID;
17:17:48 843  
17:17:48 844  END PROCS_LICENSE_V15;
17:17:48 845  .
17:17:48 SQL> /

Package body created.

Elapsed: 00:00:00.06
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE CREATE_CHARGE(
17:17:49   4  /*
17:17:49   5  Throws exceptions:
17:17:49   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49   8  */
17:17:49   9  	in_invoice_id	      IN NUMBER,
17:17:49  10  	in_transaction_id     IN NUMBER,
17:17:49  11  	in_instrument_type_id IN NUMBER,
17:17:49  12  	in_instrument_id      IN NUMBER,
17:17:49  13  	in_charge_amount      IN NUMBER,
17:17:49  14  	in_created_by	      IN VARCHAR2,
17:17:49  15  	in_charge_status_id   IN NUMBER,
17:17:49  16  	out_charge_id	      OUT NUMBER
17:17:49  17  ) AS
17:17:49  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
17:17:49  19  -- VARIABLES
17:17:49  20  temp_invoice_id	  NUMBER;
17:17:49  21  temp_transaction_id NUMBER;
17:17:49  22  var_new_charge_id   NUMBER;
17:17:49  23  -- EXCEPTIONS
17:17:49  24  BAD_INVOICE_ID	     EXCEPTION;
17:17:49  25  BAD_TRANSACTION_ID     EXCEPTION;
17:17:49  26  BAD_PAYPAL_ID	     EXCEPTION;
17:17:49  27  BAD_CREDIT_CARD_ID     EXCEPTION;
17:17:49  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
17:17:49  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
17:17:49  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49  31  BEGIN
17:17:49  32  	-- Check that incoming data is correct
17:17:49  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49  35  	  RAISE BAD_INSTRUMENT_TYPE;
17:17:49  36  	END IF;
17:17:49  37  
17:17:49  38  	-- Check that status is correct
17:17:49  39  	IF in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
17:17:49  42  	  RAISE BAD_CHARGE_STATUS_ID;
17:17:49  43  	END IF;
17:17:49  44  
17:17:49  45  	-- Check that invoice exists
17:17:49  46  	BEGIN
17:17:49  47  	  SELECT
17:17:49  48  	    INVOICE.ID into temp_invoice_id
17:17:49  49  	  FROM
17:17:49  50  	    INVOICE
17:17:49  51  	  WHERE
17:17:49  52  	    INVOICE.ID = in_invoice_id;
17:17:49  53  	  EXCEPTION
17:17:49  54  	    WHEN NO_DATA_FOUND THEN
17:17:49  55  	      RAISE BAD_INVOICE_ID;
17:17:49  56  	END;
17:17:49  57  
17:17:49  58  	-- Check that transaction exists
17:17:49  59  	BEGIN
17:17:49  60  	  SELECT
17:17:49  61  	    TRANSACTION.ID into temp_transaction_id
17:17:49  62  	  FROM
17:17:49  63  	    TRANSACTION
17:17:49  64  	  WHERE
17:17:49  65  	    TRANSACTION.ID = in_transaction_id;
17:17:49  66  	  EXCEPTION
17:17:49  67  	    WHEN NO_DATA_FOUND THEN
17:17:49  68  	      RAISE BAD_TRANSACTION_ID;
17:17:49  69  	END;
17:17:49  70  
17:17:49  71  	-- Check that instrument exists
17:17:49  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49  73  	  IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49  74  	    RAISE BAD_CREDIT_CARD_ID;
17:17:49  75  	  END IF;
17:17:49  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49  77  	  IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49  78  	    RAISE BAD_PAYPAL_ID;
17:17:49  79  	  END IF;
17:17:49  80  	END IF;
17:17:49  81  
17:17:49  82  	-- Create new charge
17:17:49  83  	PROCS_CHARGE_CRU_V15.CREATE_CHARGE(
17:17:49  84  	  out_charge_id 	=> var_new_charge_id,
17:17:49  85  	  in_invoice_id 	=> in_invoice_id,
17:17:49  86  	  in_transaction_id	=> in_transaction_id,
17:17:49  87  	  in_instrument_type_id => in_instrument_type_id,
17:17:49  88  	  in_instrument_id	=> in_instrument_id,
17:17:49  89  	  in_charge_amount	=> in_charge_amount,
17:17:49  90  	  in_charge_status_id	=> in_charge_status_id,
17:17:49  91  	  in_created_by 	=> in_created_by
17:17:49  92  	);
17:17:49  93  
17:17:49  94  	out_charge_id := var_new_charge_id;
17:17:49  95  
17:17:49  96  EXCEPTION
17:17:49  97  WHEN BAD_CHARGE_STATUS_ID THEN
17:17:49  98  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
17:17:49 100  WHEN BAD_INSTRUMENT_TYPE THEN
17:17:49 101  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 102  	  PROCS_NAME, 'Bad instrument type id');
17:17:49 103  WHEN BAD_INVOICE_ID THEN
17:17:49 104  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 105  	  PROCS_NAME, 'No such invoice');
17:17:49 106  WHEN BAD_TRANSACTION_ID THEN
17:17:49 107  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 108  	  PROCS_NAME, 'No such transaction');
17:17:49 109  WHEN BAD_PAYPAL_ID THEN
17:17:49 110  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 111  	  PROCS_NAME, 'No such paypal');
17:17:49 112  WHEN BAD_CREDIT_CARD_ID THEN
17:17:49 113  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 114  	  PROCS_NAME, 'No such credit card');
17:17:49 115  WHEN OTHERS THEN
17:17:49 116  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
17:17:49 118  END CREATE_CHARGE;
17:17:49 119  
17:17:49 120  /********************************************************/
17:17:49 121  -- norlov #38562 :
17:17:49 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
17:17:49 123  /*
17:17:49 124  Throws exceptions:
17:17:49 125  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 126  */
17:17:49 127  	out_result_set	    OUT SYS_REFCURSOR,
17:17:49 128  	in_row_number	    IN NUMBER DEFAULT NULL
17:17:49 129  ) AS
17:17:49 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
17:17:49 131  -- COMSTANTS
17:17:49 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
17:17:49 133  -- VARIABLES
17:17:49 134  var_row_number NUMBER;
17:17:49 135  BEGIN
17:17:49 136  	IF in_row_number IS NULL THEN
17:17:49 137  	  var_row_number := DEFAULT_ROW_NUMBER;
17:17:49 138  	ELSE
17:17:49 139  	  var_row_number := in_row_number;
17:17:49 140  	END IF;
17:17:49 141  
17:17:49 142  	-- Select charges
17:17:49 143  	OPEN out_result_set FOR
17:17:49 144  SELECT * FROM
17:17:49 145  (
17:17:49 146  	SELECT
17:17:49 147  	  CHARGE.ID,
17:17:49 148  	  CHARGE.TRANSACTION_ID,
17:17:49 149  	  CHARGE.INSTRUMENT_ID,
17:17:49 150  	  CHARGE.INSTRUMENT_TYPE_ID,
17:17:49 151  	  CHARGE.CHARGE_AMOUNT,
17:17:49 152  	  CHARGE.CREATE_DATE,
17:17:49 153  	  CHARGE.CREATED_BY,
17:17:49 154  	  CHARGE.INVOICE_ID
17:17:49 155  	FROM
17:17:49 156  	  CHARGE
17:17:49 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 158  	WHERE
17:17:49 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
17:17:49 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V15.TRUE
17:17:49 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
17:17:49 162  	  AND NOT EXISTS
17:17:49 163  	  (
17:17:49 164  	    SELECT NULL
17:17:49 165  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:49 166  	    WHERE PROCESS_NAME = SPROC_NAME
17:17:49 167  	      AND GENERIC_ID = CHARGE.ID
17:17:49 168  	  )
17:17:49 169  	  AND ROWNUM <= var_row_number*10
17:17:49 170  	  ORDER BY dbms_random.value
17:17:49 171  ) WHERE
17:17:49 172  	  ROWNUM <= var_row_number;
17:17:49 173  
17:17:49 174  END GET_PENDING_REFUND_CHARGES;
17:17:49 175  /******************************************************************************/
17:17:49 176  
17:17:49 177  PROCEDURE GET_UNPROCESSED_CHARGES (
17:17:49 178  /*
17:17:49 179  Throws exceptions:
17:17:49 180  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 181  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 182  */
17:17:49 183  	in_invoice_id  IN NUMBER,
17:17:49 184  	out_result_set OUT SYS_REFCURSOR
17:17:49 185  ) AS
17:17:49 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
17:17:49 187  -- VARIABLES
17:17:49 188  temp_invoice_id NUMBER;
17:17:49 189  -- EXCEPTIONS
17:17:49 190  BAD_INVOICE_ID EXCEPTION;
17:17:49 191  BEGIN
17:17:49 192  
17:17:49 193  	-- Check that invoice exists
17:17:49 194  	BEGIN
17:17:49 195  	  SELECT
17:17:49 196  	    INVOICE.ID into temp_invoice_id
17:17:49 197  	  FROM
17:17:49 198  	    INVOICE
17:17:49 199  	  WHERE
17:17:49 200  	    INVOICE.ID = in_invoice_id;
17:17:49 201  	  EXCEPTION
17:17:49 202  	    WHEN NO_DATA_FOUND THEN
17:17:49 203  	      RAISE BAD_INVOICE_ID;
17:17:49 204  	END;
17:17:49 205  
17:17:49 206  	-- Select charges
17:17:49 207  	OPEN out_result_set FOR
17:17:49 208  	SELECT
17:17:49 209  	  CHARGE.ID,
17:17:49 210  	  CHARGE.TRANSACTION_ID,
17:17:49 211  	  CHARGE.INSTRUMENT_ID,
17:17:49 212  	  CHARGE.INSTRUMENT_TYPE_ID,
17:17:49 213  	  CHARGE.CHARGE_AMOUNT,
17:17:49 214  	  CHARGE.CREATE_DATE,
17:17:49 215  	  CHARGE.CREATED_BY,
17:17:49 216  	  CHARGE.INVOICE_ID
17:17:49 217  	FROM
17:17:49 218  	  CHARGE
17:17:49 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 220  	WHERE
17:17:49 221  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 223  	  AND
17:17:49 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
17:17:49 225  
17:17:49 226  EXCEPTION
17:17:49 227  WHEN BAD_INVOICE_ID THEN
17:17:49 228  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 229  	  SPROC_NAME, 'No such invoice');
17:17:49 230  WHEN OTHERS THEN
17:17:49 231  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 233  END GET_UNPROCESSED_CHARGES;
17:17:49 234  
17:17:49 235  /******************************************************************************/
17:17:49 236  
17:17:49 237  PROCEDURE GET_PROCESSED_CHARGES (
17:17:49 238  /*
17:17:49 239  Throws exceptions:
17:17:49 240  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 241  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 242  */
17:17:49 243  	in_invoice_id  IN NUMBER,
17:17:49 244  	out_result_set OUT SYS_REFCURSOR
17:17:49 245  ) AS
17:17:49 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
17:17:49 247  -- VARIABLES
17:17:49 248  temp_invoice_id NUMBER;
17:17:49 249  -- EXCEPTIONS
17:17:49 250  BAD_INVOICE_ID  EXCEPTION;
17:17:49 251  BEGIN
17:17:49 252  
17:17:49 253  	-- Check that invoice exists
17:17:49 254  	BEGIN
17:17:49 255  	  SELECT
17:17:49 256  	    INVOICE.ID into temp_invoice_id
17:17:49 257  	  FROM
17:17:49 258  	    INVOICE
17:17:49 259  	  WHERE
17:17:49 260  	    INVOICE.ID = in_invoice_id;
17:17:49 261  	  EXCEPTION
17:17:49 262  	    WHEN NO_DATA_FOUND THEN
17:17:49 263  	      RAISE BAD_INVOICE_ID;
17:17:49 264  	END;
17:17:49 265  
17:17:49 266  	-- Select charges
17:17:49 267  	OPEN out_result_set FOR
17:17:49 268  	SELECT /*+ STAR_TRANSFORMATION */
17:17:49 269  	  CHARGE.ID,
17:17:49 270  	  CHARGE.TRANSACTION_ID,
17:17:49 271  	  CHARGE.INSTRUMENT_ID,
17:17:49 272  	  CHARGE.INSTRUMENT_TYPE_ID,
17:17:49 273  	  CHARGE.CHARGE_AMOUNT,
17:17:49 274  	  CHARGE.CREATE_DATE,
17:17:49 275  	  CHARGE.CREATED_BY,
17:17:49 276  	  CHARGE.INVOICE_ID
17:17:49 277  	FROM
17:17:49 278  	  CHARGE
17:17:49 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 280  	WHERE
17:17:49 281  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_CLOSED;
17:17:49 284  
17:17:49 285  EXCEPTION
17:17:49 286  WHEN BAD_INVOICE_ID THEN
17:17:49 287  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 288  	  SPROC_NAME, 'No such invoice');
17:17:49 289  WHEN OTHERS THEN
17:17:49 290  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 292  END GET_PROCESSED_CHARGES;
17:17:49 293  
17:17:49 294  /******************************************************************************/
17:17:49 295  
17:17:49 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
17:17:49 297  /*
17:17:49 298  Throws exceptions:
17:17:49 299  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 300  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 301  */
17:17:49 302  	in_charge_id	    IN NUMBER,
17:17:49 303  	out_subscription_id OUT NUMBER
17:17:49 304  ) AS
17:17:49 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
17:17:49 306  -- VARIABLES
17:17:49 307  var_invoice_id	  NUMBER;
17:17:49 308  var_subscription_id NUMBER;
17:17:49 309  -- EXCEPTIONS
17:17:49 310  BAD_CHARGE_ID		EXCEPTION;
17:17:49 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
17:17:49 312  BEGIN
17:17:49 313  
17:17:49 314  	BEGIN
17:17:49 315  	  SELECT
17:17:49 316  	    CHARGE.INVOICE_ID into var_invoice_id
17:17:49 317  	  FROM
17:17:49 318  	    CHARGE
17:17:49 319  	  WHERE
17:17:49 320  	    CHARGE.ID = in_charge_id;
17:17:49 321  	  EXCEPTION
17:17:49 322  	    WHEN NO_DATA_FOUND THEN
17:17:49 323  	      RAISE BAD_CHARGE_ID;
17:17:49 324  	END;
17:17:49 325  
17:17:49 326  	BEGIN
17:17:49 327  	  SELECT
17:17:49 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
17:17:49 329  	  FROM
17:17:49 330  	    LICENSE
17:17:49 331  	  WHERE
17:17:49 332  	    LICENSE.INVOICE_ID = var_invoice_id
17:17:49 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
17:17:49 334  	  EXCEPTION
17:17:49 335  	    WHEN NO_DATA_FOUND THEN
17:17:49 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
17:17:49 337  	END;
17:17:49 338  
17:17:49 339  	out_subscription_id := var_subscription_id;
17:17:49 340  
17:17:49 341  EXCEPTION
17:17:49 342  WHEN BAD_CHARGE_ID THEN
17:17:49 343  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 344  	  SPROC_NAME, 'No such charge');
17:17:49 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
17:17:49 346  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 347  	  SPROC_NAME, 'Could not find subscription for given charge');
17:17:49 348  WHEN OTHERS THEN
17:17:49 349  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
17:17:49 352  
17:17:49 353  /******************************************************************************/
17:17:49 354  
17:17:49 355  PROCEDURE UPDATE_CHARGE_STATUS (
17:17:49 356  /*
17:17:49 357  Throws exceptions:
17:17:49 358  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 359  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 360  */
17:17:49 361  	in_charge_id	    IN CHARGE.ID%TYPE,
17:17:49 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:49 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
17:17:49 364  ) AS
17:17:49 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
17:17:49 366  -- EXCEPTIONS
17:17:49 367  BAD_CHARGE_ID	     EXCEPTION;
17:17:49 368  BAD_STATUS_ID	     EXCEPTION;
17:17:49 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 370  BEGIN
17:17:49 371  
17:17:49 372  	IF in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
17:17:49 375  	  RAISE BAD_STATUS_ID;
17:17:49 376  	END IF;
17:17:49 377  
17:17:49 378  	PROCS_CHARGE_CRU_V15.UPDATE_CHARGE(
17:17:49 379  	  in_charge_id	      => in_charge_id,
17:17:49 380  	  in_charge_status_id => in_charge_status_id,
17:17:49 381  	  in_updated_by       => in_updated_by
17:17:49 382  	);
17:17:49 383  
17:17:49 384  	IF SQL%ROWCOUNT = 0 THEN
17:17:49 385  	  RAISE BAD_CHARGE_ID;
17:17:49 386  	END IF;
17:17:49 387  
17:17:49 388  EXCEPTION
17:17:49 389  WHEN BAD_CHARGE_ID THEN
17:17:49 390  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 391  	  SPROC_NAME, 'No such charge');
17:17:49 392  WHEN BAD_STATUS_ID THEN
17:17:49 393  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 394  	  SPROC_NAME, 'Bad status id');
17:17:49 395  WHEN OTHERS THEN
17:17:49 396  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 398  END UPDATE_CHARGE_STATUS;
17:17:49 399  
17:17:49 400  FUNCTION IS_CHARGE_COLLECTED (
17:17:49 401  /*
17:17:49 402  Throws:
17:17:49 403  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 404  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 405  Returns:
17:17:49 406  GLOBAL_CONST.TRUE if transaction collected,
17:17:49 407  GLOBAL_CONST.FALSE else
17:17:49 408  */
17:17:49 409  	in_charge_id IN NUMBER
17:17:49 410  ) RETURN NUMBER AS
17:17:49 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
17:17:49 412  -- VARIABLES
17:17:49 413  var_transaction_id NUMBER;
17:17:49 414  is_transaction_collected NUMBER;
17:17:49 415  -- EXCEPTIONS
17:17:49 416  BAD_CHARGE_ID	       EXCEPTION;
17:17:49 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
17:17:49 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
17:17:49 419  BEGIN
17:17:49 420  
17:17:49 421  	BEGIN
17:17:49 422  	  SELECT
17:17:49 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
17:17:49 424  	  FROM
17:17:49 425  	    CHARGE
17:17:49 426  	  WHERE
17:17:49 427  	    CHARGE.ID = in_charge_id;
17:17:49 428  	  EXCEPTION
17:17:49 429  	    WHEN NO_DATA_FOUND THEN
17:17:49 430  	      RAISE BAD_CHARGE_ID;
17:17:49 431  	END;
17:17:49 432  
17:17:49 433  	BEGIN
17:17:49 434  	  is_transaction_collected := PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(var_transaction_id);
17:17:49 435  	  EXCEPTION
17:17:49 436  	    WHEN OTHERS THEN
17:17:49 437  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
17:17:49 439  	END;
17:17:49 440  
17:17:49 441  	RETURN is_transaction_collected;
17:17:49 442  
17:17:49 443  EXCEPTION
17:17:49 444  WHEN BAD_CHARGE_ID THEN
17:17:49 445  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 446  	  SPROC_NAME, 'No such charge');
17:17:49 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
17:17:49 448  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
17:17:49 450  WHEN OTHERS THEN
17:17:49 451  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 453  END;
17:17:49 454  
17:17:49 455  PROCEDURE GET_COLLECTED_CHARGES (
17:17:49 456  /*
17:17:49 457  Throws exceptions:
17:17:49 458  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 459  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 460  */
17:17:49 461  	in_invoice_id  IN NUMBER,
17:17:49 462  	out_result_set OUT SYS_REFCURSOR
17:17:49 463  ) AS
17:17:49 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
17:17:49 465  -- VARIABLES
17:17:49 466  temp_invoice_id NUMBER;
17:17:49 467  -- EXCEPTIONS
17:17:49 468  BAD_INVOICE_ID  EXCEPTION;
17:17:49 469  BEGIN
17:17:49 470  
17:17:49 471  	-- Check that invoice exists
17:17:49 472  	BEGIN
17:17:49 473  	  SELECT
17:17:49 474  	    INVOICE.ID into temp_invoice_id
17:17:49 475  	  FROM
17:17:49 476  	    INVOICE
17:17:49 477  	  WHERE
17:17:49 478  	    INVOICE.ID = in_invoice_id;
17:17:49 479  	  EXCEPTION
17:17:49 480  	    WHEN NO_DATA_FOUND THEN
17:17:49 481  	      RAISE BAD_INVOICE_ID;
17:17:49 482  	END;
17:17:49 483  
17:17:49 484  	-- Select charges
17:17:49 485  	OPEN out_result_set FOR
17:17:49 486  	SELECT
17:17:49 487  	  CHARGE.ID,
17:17:49 488  	  CHARGE.TRANSACTION_ID,
17:17:49 489  	  CHARGE.INSTRUMENT_ID,
17:17:49 490  	  CHARGE.INSTRUMENT_TYPE_ID,
17:17:49 491  	  CHARGE.CHARGE_AMOUNT,
17:17:49 492  	  CHARGE.CREATE_DATE,
17:17:49 493  	  CHARGE.CREATED_BY,
17:17:49 494  	  CHARGE.INVOICE_ID
17:17:49 495  	FROM
17:17:49 496  	  CHARGE
17:17:49 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 498  	WHERE
17:17:49 499  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
17:17:49 501  	  AND PROCS_CHARGE_V15.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 502  
17:17:49 503  EXCEPTION
17:17:49 504  WHEN BAD_INVOICE_ID THEN
17:17:49 505  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 506  	  SPROC_NAME, 'No such invoice');
17:17:49 507  WHEN OTHERS THEN
17:17:49 508  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 510  END GET_COLLECTED_CHARGES;
17:17:49 511  
17:17:49 512  END PROCS_CHARGE_V15;
17:17:49 513  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.05
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE START_SUBSCRIPTION_CREATION (
17:17:49   4  	in_group_id	      IN NUMBER,
17:17:49   5  	in_created_by	      IN VARCHAR2,
17:17:49   6  	in_offer_chain_id     IN NUMBER,
17:17:49   7  	in_instrument_type_id IN NUMBER,
17:17:49   8  	in_instrument_id      IN NUMBER,
17:17:49   9  	in_agent_id	      IN NUMBER,
17:17:49  10  	in_note 	      IN VARCHAR2,
17:17:49  11  	out_subscription_id   OUT NUMBER,
17:17:49  12  	out_invoice_id	      OUT NUMBER,
17:17:49  13  	out_new_license_id    OUT NUMBER,
17:17:49  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
17:17:49  15  ) AS
17:17:49  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
17:17:49  17  -- VARIABLES
17:17:49  18  var_account_id		 NUMBER;
17:17:49  19  var_account_status	 NUMBER;
17:17:49  20  var_offer_chain_status_id  NUMBER;
17:17:49  21  var_is_gift_certificate	 NUMBER;
17:17:49  22  var_is_for_redemption	 NUMBER;
17:17:49  23  var_same_offer_chains_num  NUMBER;
17:17:49  24  var_max_concurrent_subscrs NUMBER;
17:17:49  25  var_first_offer_id	 NUMBER;
17:17:49  26  var_new_invoice_id	 NUMBER;
17:17:49  27  var_new_subscription_id	 NUMBER;
17:17:49  28  var_date			 DATE := SYSDATE;
17:17:49  29  var_account_tax_exempt_id  VARCHAR2(255);
17:17:49  30  var_concur_subscription_id NUMBER;
17:17:49  31  -- EXCEPTIONS
17:17:49  32  BAD_GROUP_ID		    EXCEPTION;
17:17:49  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
17:17:49  34  BAD_OFFER_CHAIN		    EXCEPTION;
17:17:49  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
17:17:49  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
17:17:49  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
17:17:49  38  LIMIT_REACHED		    EXCEPTION;
17:17:49  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
17:17:49  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
17:17:49  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
17:17:49  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
17:17:49  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
17:17:49  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
17:17:49  45  
17:17:49  46  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49  47  BEGIN
17:17:49  48  
17:17:49  49  	-- Get account id and status
17:17:49  50  	BEGIN
17:17:49  51  	  SELECT
17:17:49  52  	    ACCOUNT.ID,
17:17:49  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
17:17:49  54  	    ACCOUNT.TAX_EXEMPT_ID
17:17:49  55  	    into
17:17:49  56  	    var_account_id,
17:17:49  57  	    var_account_status,
17:17:49  58  	    var_account_tax_exempt_id
17:17:49  59  	  FROM
17:17:49  60  	    ACCOUNT
17:17:49  61  	  WHERE
17:17:49  62  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49  63  	  EXCEPTION
17:17:49  64  	  WHEN NO_DATA_FOUND THEN
17:17:49  65  	    RAISE BAD_GROUP_ID;
17:17:49  66  	END;
17:17:49  67  
17:17:49  68  	-- Could not create subscription for disabled account
17:17:49  69  	IF var_account_status = GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
17:17:49  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
17:17:49  71  	END IF;
17:17:49  72  
17:17:49  73  	-- Get offer chain status
17:17:49  74  	BEGIN
17:17:49  75  	  SELECT
17:17:49  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
17:17:49  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
17:17:49  78  	    into
17:17:49  79  	    var_offer_chain_status_id,
17:17:49  80  	    var_is_gift_certificate
17:17:49  81  	  FROM
17:17:49  82  	    OFFER_CHAIN
17:17:49  83  	  WHERE
17:17:49  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:49  85  
17:17:49  86  	  EXCEPTION
17:17:49  87  	    WHEN NO_DATA_FOUND THEN
17:17:49  88  	      RAISE BAD_OFFER_CHAIN;
17:17:49  89  	END;
17:17:49  90  
17:17:49  91  	-- Could not subscribe to inactive/disabled offer chain
17:17:49  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
17:17:49  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
17:17:49  94  	END IF;
17:17:49  95  
17:17:49  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
17:17:49  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
17:17:49  99  	END IF;
17:17:49 100  
17:17:49 101  	-- check if the OC is for Redemption:
17:17:49 102  	SELECT
17:17:49 103  	  COUNT(*) into var_is_for_redemption
17:17:49 104  	FROM
17:17:49 105  	  OFFER_CHAIN_ELIGIBILITY
17:17:49 106  	WHERE
17:17:49 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
17:17:49 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
17:17:49 110  
17:17:49 111  	IF var_is_for_redemption > 0 THEN
17:17:49 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
17:17:49 113  	END IF;
17:17:49 114  
17:17:49 115  	SELECT
17:17:49 116  	  COUNT(*) into var_same_offer_chains_num
17:17:49 117  	FROM
17:17:49 118  	  SUBSCRIPTION
17:17:49 119  	WHERE
17:17:49 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
17:17:49 123  
17:17:49 124  	-- ELIGIBILITY LOGIC CHANGED TO:
17:17:49 125  	-- FOR EACH offer chain eligibility rule in OC:
17:17:49 126  	--   IF offer chain eligibility rule fails:
17:17:49 127  	--     deny purchase;
17:17:49 128  	--   END IF
17:17:49 129  	-- END FOR
17:17:49 130  	-- FOR EACH product eligibility rule in OC:
17:17:49 131  	--   IF product eligibilty rule fails:
17:17:49 132  	--     deny purchase;
17:17:49 133  	--   END IF
17:17:49 134  	-- END FOR
17:17:49 135  	-- allow purchase;
17:17:49 136  
17:17:49 137  	-- if user have any active existing subscriptions to the offer chain
17:17:49 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
17:17:49 139  	-- then deny purchase
17:17:49 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
17:17:49 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V15.INFINITY
17:17:49 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
17:17:49 143  	  -- Find first concurrent subscription id:
17:17:49 144  	  SELECT
17:17:49 145  	    ID into var_concur_subscription_id
17:17:49 146  	  FROM (
17:17:49 147  	    SELECT
17:17:49 148  	      ID
17:17:49 149  	    FROM
17:17:49 150  	      SUBSCRIPTION
17:17:49 151  	    WHERE
17:17:49 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 155  	    ORDER BY
17:17:49 156  	      ID
17:17:49 157  	  )
17:17:49 158  	  WHERE
17:17:49 159  	    ROWNUM <= 1;
17:17:49 160  	  RAISE LIMIT_REACHED;
17:17:49 161  	END IF;
17:17:49 162  
17:17:49 163  	-- if user does not have any active existing subscriptions to the offer chain
17:17:49 164  	-- and if product from the offer chain is already owned from another offer chain
17:17:49 165  	-- then deny purchase
17:17:49 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V15.FALSE) THEN
17:17:49 167  	  FOR f_account_offer_chains IN (
17:17:49 168  	    SELECT DISTINCT
17:17:49 169  	      OFFER_CHAIN_ID
17:17:49 170  	    FROM
17:17:49 171  	      SUBSCRIPTION
17:17:49 172  	    WHERE
17:17:49 173  	      ACCOUNT_ID = var_account_id
17:17:49 174  	      AND (
17:17:49 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED)
17:17:49 177  	  )
17:17:49 178  	  LOOP
17:17:49 179  	    IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(
17:17:49 180  	      in_offer_chain_1	       => in_offer_chain_id,
17:17:49 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
17:17:49 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V15.TRUE
17:17:49 183  	    ) = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 184  
17:17:49 185  	      -- Find first concurrent subscription id:
17:17:49 186  	      SELECT
17:17:49 187  		ID into var_concur_subscription_id
17:17:49 188  	      FROM (
17:17:49 189  		SELECT
17:17:49 190  		  ID
17:17:49 191  		FROM
17:17:49 192  		  SUBSCRIPTION
17:17:49 193  		WHERE
17:17:49 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
17:17:49 196  		  AND (
17:17:49 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 199  		  )
17:17:49 200  		ORDER BY
17:17:49 201  		  ID
17:17:49 202  	      )
17:17:49 203  	      WHERE
17:17:49 204  		ROWNUM <= 1;
17:17:49 205  
17:17:49 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
17:17:49 207  	    END IF;
17:17:49 208  	  END LOOP;
17:17:49 209  	END IF;
17:17:49 210  
17:17:49 211  	BEGIN
17:17:49 212  	  PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
17:17:49 213  	  EXCEPTION
17:17:49 214  	    WHEN OTHERS THEN
17:17:49 215  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
17:17:49 217  	END;
17:17:49 218  
17:17:49 219  	BEGIN
17:17:49 220  	  PROCS_INVOICE_V15.CREATE_INVOICE(
17:17:49 221  	    in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
17:17:49 222  	    in_created_by     => in_created_by,
17:17:49 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
17:17:49 224  	    out_invoice_id    => var_new_invoice_id
17:17:49 225  	  );
17:17:49 226  	  EXCEPTION
17:17:49 227  	    WHEN OTHERS THEN
17:17:49 228  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 229  	      RAISE CAN_NOT_CREATE_INVOICE;
17:17:49 230  	END;
17:17:49 231  
17:17:49 232  	BEGIN
17:17:49 233  	  PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
17:17:49 234  	    in_invoice_id => var_new_invoice_id,
17:17:49 235  	    in_offer_id   => var_first_offer_id,
17:17:49 236  	    in_created_by => in_created_by
17:17:49 237  	  );
17:17:49 238  	  EXCEPTION
17:17:49 239  	    WHEN OTHERS THEN
17:17:49 240  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
17:17:49 242  	END;
17:17:49 243  
17:17:49 244  	PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION(
17:17:49 245  	  out_subscription_id	    => var_new_subscription_id,
17:17:49 246  	  in_account_id 	    => var_account_id,
17:17:49 247  	  in_purchase_date	    => var_date,
17:17:49 248  	  in_offer_chain_id	    => in_offer_chain_id,
17:17:49 249  	  in_created_by 	    => in_created_by,
17:17:49 250  	  in_instrument_type_id     => in_instrument_type_id,
17:17:49 251  	  in_instrument_id	    => in_instrument_id,
17:17:49 252  	  in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 253  	);
17:17:49 254  
17:17:49 255  	BEGIN
17:17:49 256  	  PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:49 257  	    in_subscription_id => var_new_subscription_id,
17:17:49 258  	    in_agent_id        => in_agent_id,
17:17:49 259  	    in_note	       => in_note,
17:17:49 260  	    in_created_by      => in_created_by
17:17:49 261  	  );
17:17:49 262  	  EXCEPTION
17:17:49 263  	   WHEN OTHERS THEN
17:17:49 264  	     EXCEPTION_MESSAGE := SQLERRM;
17:17:49 265  	     RAISE CAN_NOT_CREATE_NOTE;
17:17:49 266  	END;
17:17:49 267  
17:17:49 268  	BEGIN
17:17:49 269  	  PROCS_LICENSE_V15.CREATE_LICENSE(
17:17:49 270  	    in_status_id		=> GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
17:17:49 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 272  	    in_start_date		=> var_date,
17:17:49 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
17:17:49 274  	    in_offer_id 		=> var_first_offer_id,
17:17:49 275  	    in_subscription_id		=> var_new_subscription_id,
17:17:49 276  	    in_invoice_id		=> var_new_invoice_id,
17:17:49 277  	    in_created_by		=> in_created_by,
17:17:49 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V15.FALSE,
17:17:49 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
17:17:49 280  	    in_current_offer_recurr_num => 1,
17:17:49 281  	    out_license_id		=> out_new_license_id
17:17:49 282  	  );
17:17:49 283  	  EXCEPTION
17:17:49 284  	    WHEN OTHERS THEN
17:17:49 285  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 286  	      RAISE CAN_NOT_CREATE_LICENSE;
17:17:49 287  	END;
17:17:49 288  
17:17:49 289  	out_subscription_id := var_new_subscription_id;
17:17:49 290  	out_invoice_id := var_new_invoice_id;
17:17:49 291  
17:17:49 292  EXCEPTION
17:17:49 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
17:17:49 294  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 295  	  SPROC_NAME, 'Offer chain is not active');
17:17:49 296  WHEN LIMIT_REACHED THEN
17:17:49 297  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
17:17:49 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
17:17:49 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
17:17:49 300  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
17:17:49 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
17:17:49 303  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
17:17:49 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
17:17:49 306  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
17:17:49 308  WHEN BAD_OFFER_CHAIN THEN
17:17:49 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 310  	  SPROC_NAME, 'No such offer chain');
17:17:49 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
17:17:49 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
17:17:49 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
17:17:49 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
17:17:49 315  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
17:17:49 317  WHEN CAN_NOT_CREATE_INVOICE THEN
17:17:49 318  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
17:17:49 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
17:17:49 321  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
17:17:49 323  WHEN CAN_NOT_CREATE_LICENSE THEN
17:17:49 324  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
17:17:49 326  WHEN BAD_GROUP_ID THEN
17:17:49 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 328  	  SPROC_NAME, 'Bad group id');
17:17:49 329  WHEN CAN_NOT_CREATE_NOTE THEN
17:17:49 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
17:17:49 332  WHEN OTHERS THEN
17:17:49 333  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 335  END START_SUBSCRIPTION_CREATION;
17:17:49 336  
17:17:49 337  /******************************************************************************/
17:17:49 338  
17:17:49 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
17:17:49 340  	in_subscription_id    IN NUMBER,
17:17:49 341  	in_invoice_id	      IN NUMBER,
17:17:49 342  	in_instrument_type_id IN NUMBER,
17:17:49 343  	in_instrument_id      IN NUMBER,
17:17:49 344  	in_created_by	      IN VARCHAR2
17:17:49 345  ) AS
17:17:49 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
17:17:49 347  -- VARIABLES
17:17:49 348  var_invoice_amount     NUMBER(10, 2);
17:17:49 349  var_new_transaction_id NUMBER;
17:17:49 350  var_new_charge_id      NUMBER;
17:17:49 351  -- EXCEPTIONS
17:17:49 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
17:17:49 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
17:17:49 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
17:17:49 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
17:17:49 356  
17:17:49 357  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 358  BEGIN
17:17:49 359  
17:17:49 360  	-- Calculate invoice amount ( + discounts, taxes)
17:17:49 361  	BEGIN
17:17:49 362  	  PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(
17:17:49 363  	    in_invoice_id => in_invoice_id,
17:17:49 364  	    out_amount	  => var_invoice_amount
17:17:49 365  	  );
17:17:49 366  	  EXCEPTION
17:17:49 367  	   WHEN OTHERS THEN
17:17:49 368  	     EXCEPTION_MESSAGE := SQLERRM;
17:17:49 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
17:17:49 370  	END;
17:17:49 371  
17:17:49 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT
17:17:49 373  	  AND var_invoice_amount > 0 THEN
17:17:49 374  	  RAISE CAN_NOT_USE_FCINSTR;
17:17:49 375  	END IF;
17:17:49 376  
17:17:49 377  	IF var_invoice_amount = 0 THEN
17:17:49 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
17:17:49 379  	  PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
17:17:49 380  	    in_invoice_id		   => in_invoice_id,
17:17:49 381  	    in_updated_by		   => in_created_by,
17:17:49 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V15.INVOICE_CLOSED
17:17:49 383  	  );
17:17:49 384  	ELSE
17:17:49 385  	  -- Create transaction and charge
17:17:49 386  	  BEGIN
17:17:49 387  	    PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 388  	      in_transaction_id  => NULL,
17:17:49 389  	      in_status_id	 => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
17:17:49 390  	      in_amount 	 => var_invoice_amount,
17:17:49 391  	      in_created_by	 => in_created_by,
17:17:49 392  	      in_order_id	 => NULL,
17:17:49 393  	      out_transaction_id => var_new_transaction_id
17:17:49 394  	    );
17:17:49 395  	    EXCEPTION
17:17:49 396  	      WHEN OTHERS THEN
17:17:49 397  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 399  	  END;
17:17:49 400  
17:17:49 401  	  BEGIN
17:17:49 402  	    PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 403  	      in_invoice_id	    => in_invoice_id,
17:17:49 404  	      in_transaction_id     => var_new_transaction_id,
17:17:49 405  	      in_instrument_type_id => in_instrument_type_id,
17:17:49 406  	      in_instrument_id	    => in_instrument_id,
17:17:49 407  	      in_charge_amount	    => var_invoice_amount,
17:17:49 408  	      in_created_by	    => in_created_by,
17:17:49 409  	      in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 410  	      out_charge_id	    => var_new_charge_id
17:17:49 411  	    );
17:17:49 412  	    EXCEPTION
17:17:49 413  	      WHEN OTHERS THEN
17:17:49 414  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 415  		RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 416  	  END;
17:17:49 417  	END IF;
17:17:49 418  
17:17:49 419  EXCEPTION
17:17:49 420  WHEN CAN_NOT_USE_FCINSTR THEN
17:17:49 421  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
17:17:49 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
17:17:49 424  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
17:17:49 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 427  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 429  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 430  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 432  WHEN OTHERS THEN
17:17:49 433  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 435  END FINALIZE_SUBSCRIPTION_CREATION;
17:17:49 436  
17:17:49 437  /******************************************************************************/
17:17:49 438  
17:17:49 439  PROCEDURE SUSPEND_SUBSCRIPTION(
17:17:49 440  /*
17:17:49 441  Throws exceptions:
17:17:49 442  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 443  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 444  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 445  */
17:17:49 446  	  in_subs_id	IN NUMBER,
17:17:49 447  	  in_updated_by IN VARCHAR2
17:17:49 448  ) AS
17:17:49 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
17:17:49 450  var_subscription_status_id  NUMBER;
17:17:49 451  var_license_id		  NUMBER;
17:17:49 452  var_offer_id		  NUMBER;
17:17:49 453  var_license_start_date	  DATE;
17:17:49 454  var_license_end_date	  DATE;
17:17:49 455  
17:17:49 456  var_entitlement_dupration   VARCHAR2(30);
17:17:49 457  var_d_entitlement_dupration NUMBER;
17:17:49 458  
17:17:49 459  var_ym_interval INTERVAL YEAR TO MONTH;
17:17:49 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
17:17:49 461  
17:17:49 462  -- EXCEPTIONS
17:17:49 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
17:17:49 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
17:17:49 465  NO_LICENSE_FOUND	      EXCEPTION;
17:17:49 466  NO_OFFER_FOUND	      EXCEPTION;
17:17:49 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:49 468  BEGIN
17:17:49 469  	-- TODO: Finish this prcedure (in Phase II)
17:17:49 470  
17:17:49 471  	-- Get subscription by id. FAULT if no such subscription.
17:17:49 472  	-- begin TX
17:17:49 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
17:17:49 474  	--   Set status to PROCESSED.
17:17:49 475  	--   updated record.
17:17:49 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
17:17:49 477  	--   new subscription status is SUSPENDED.
17:17:49 478  	--   suspend_date is now.
17:17:49 479  	--   update subscription record.
17:17:49 480  	-- end TX
17:17:49 481  
17:17:49 482  	BEGIN
17:17:49 483  	  SELECT
17:17:49 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
17:17:49 485  	  FROM
17:17:49 486  	    SUBSCRIPTION
17:17:49 487  	  WHERE
17:17:49 488  	    SUBSCRIPTION.ID = in_subs_id;
17:17:49 489  	  EXCEPTION
17:17:49 490  	  WHEN NO_DATA_FOUND THEN
17:17:49 491  	    RAISE BAD_SUBSCRIPTION_ID;
17:17:49 492  	END;
17:17:49 493  
17:17:49 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE THEN
17:17:49 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
17:17:49 496  	END IF;
17:17:49 497  
17:17:49 498  	BEGIN
17:17:49 499  	  SELECT
17:17:49 500  	    LICENSE.ID,
17:17:49 501  	    LICENSE.OFFER_ID,
17:17:49 502  	    LICENSE.START_DATE
17:17:49 503  	    into
17:17:49 504  	    var_license_id,
17:17:49 505  	    var_offer_id,
17:17:49 506  	    var_license_start_date
17:17:49 507  	  FROM
17:17:49 508  	    LICENSE
17:17:49 509  	  WHERE
17:17:49 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
17:17:49 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE;
17:17:49 512  	  EXCEPTION
17:17:49 513  	  WHEN NO_DATA_FOUND THEN
17:17:49 514  	    RAISE NO_LICENSE_FOUND;
17:17:49 515  	END;
17:17:49 516  
17:17:49 517  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:49 518  	  in_license_id        => var_license_id,
17:17:49 519  	  in_updated_by        => in_updated_by,
17:17:49 520  	  in_license_status_id => GLOBAL_STATUSES_V15.LICENSE_CLOSED
17:17:49 521  	);
17:17:49 522  
17:17:49 523  	BEGIN
17:17:49 524  	  SELECT
17:17:49 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
17:17:49 526  	  FROM
17:17:49 527  	    OFFER
17:17:49 528  	  WHERE
17:17:49 529  	    OFFER.ID = var_offer_id;
17:17:49 530  	  EXCEPTION
17:17:49 531  	  WHEN NO_DATA_FOUND THEN
17:17:49 532  	    RAISE NO_OFFER_FOUND;
17:17:49 533  	END;
17:17:49 534  
17:17:49 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
17:17:49 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
17:17:49 537  
17:17:49 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
17:17:49 539  
17:17:49 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
17:17:49 541  
17:17:49 542  	PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
17:17:49 543  	  in_subscription_id	       => in_subs_id,
17:17:49 544  	  in_updated_by 	       => in_updated_by,
17:17:49 545  	  in_suspend_date	       => SYSDATE,
17:17:49 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED,
17:17:49 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
17:17:49 548  	);
17:17:49 549  
17:17:49 550  EXCEPTION
17:17:49 551  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 552  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 553  	  SPROC_NAME, 'No such subscription');
17:17:49 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
17:17:49 555  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 556  	  SPROC_NAME, 'Subscription is not active');
17:17:49 557  WHEN NO_LICENSE_FOUND THEN
17:17:49 558  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
17:17:49 560  WHEN NO_OFFER_FOUND THEN
17:17:49 561  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
17:17:49 563  WHEN OTHERS THEN
17:17:49 564  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 566  END SUSPEND_SUBSCRIPTION;
17:17:49 567  
17:17:49 568  /******************************************************************************/
17:17:49 569  
17:17:49 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
17:17:49 571  	in_subscription_id IN  NUMBER,
17:17:49 572  	in_updated_by	   IN  VARCHAR2
17:17:49 573  ) AS
17:17:49 574  BEGIN
17:17:49 575  	-- TODO: finish this function (in Phase II)
17:17:49 576  	NULL;
17:17:49 577  END REACTIVATE_SUBSCRIPTION;
17:17:49 578  
17:17:49 579  /******************************************************************************/
17:17:49 580  
17:17:49 581  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:49 582  /*
17:17:49 583  Throws exceptions:
17:17:49 584  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 585  */
17:17:49 586  	  in_subscription_id  IN  NUMBER,
17:17:49 587  	  out_result_set      OUT SYS_REFCURSOR
17:17:49 588  ) AS
17:17:49 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
17:17:49 590  -- VARIABLES
17:17:49 591  temp_subscription_id NUMBER;
17:17:49 592  -- EXCEPTIONS
17:17:49 593  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 594  BEGIN
17:17:49 595  	-- Find subscription by id
17:17:49 596  	-- Return its details
17:17:49 597  
17:17:49 598  	BEGIN
17:17:49 599  	  SELECT
17:17:49 600  	    SUBSCRIPTION.ID into temp_subscription_id
17:17:49 601  	  FROM
17:17:49 602  	    SUBSCRIPTION
17:17:49 603  	  WHERE
17:17:49 604  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:49 605  	  EXCEPTION
17:17:49 606  	    WHEN NO_DATA_FOUND THEN
17:17:49 607  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:49 608  	END;
17:17:49 609  
17:17:49 610  	OPEN out_result_set FOR
17:17:49 611  	SELECT
17:17:49 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
17:17:49 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
17:17:49 614  	  SUBSCRIPTION.PURCHASE_DATE,
17:17:49 615  	  SUBSCRIPTION.SUSPEND_DATE,
17:17:49 616  	  SUBSCRIPTION.REACTIVATION_DATE,
17:17:49 617  	  SUBSCRIPTION.CANCELLATION_DATE,
17:17:49 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
17:17:49 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
17:17:49 620  	  OFFER_CHAIN.NAME,
17:17:49 621  	  OFFER_CHAIN.DESCRIPTION,
17:17:49 622  	  OFFER_CHAIN.PRODUCT_URI,
17:17:49 623  	  SUBSCRIPTION.INSTRUMENT_ID,
17:17:49 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
17:17:49 625  	  --PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
17:17:49 626  	  PROCS_SUBSCRIPTION_V15.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
17:17:49 627  	  PROCS_SUBSCRIPTION_V15.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
17:17:49 628  	  PROCS_SUBSCRIPTION_V15.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
17:17:49 629  	  PROCS_SUBSCRIPTION_V15.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
17:17:49 630  	  (
17:17:49 631  	    SELECT
17:17:49 632  	      ACCOUNT.GROUP_ID
17:17:49 633  	      FROM ACCOUNT
17:17:49 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
17:17:49 635  	  ) as "GROUP_ID",
17:17:49 636  	  (
17:17:49 637  	    SELECT
17:17:49 638  	      MAX(ENTITLEMENT_END_DATE)
17:17:49 639  	      FROM LICENSE
17:17:49 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 641  	  )
17:17:49 642  	  as "ENT_END_DATE",
17:17:49 643  	  (
17:17:49 644  	    SELECT
17:17:49 645  	      MIN(START_DATE)
17:17:49 646  	      FROM LICENSE
17:17:49 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 648  	  )
17:17:49 649  	  as "ENT_START_DATE",
17:17:49 650  	  PROCS_SUBSCRIPTION_V15.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
17:17:49 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
17:17:49 652  	  GROUP_ACCOUNT.ID GA_ID,
17:17:49 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
17:17:49 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
17:17:49 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
17:17:49 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
17:17:49 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
17:17:49 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
17:17:49 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
17:17:49 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
17:17:49 661  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
17:17:49 662  	  GROUP_ACCOUNT.IP GA_IP,
17:17:49 663  	  PROCS_SUBSCRIPTION_V15.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
17:17:49 664  	FROM
17:17:49 665  	  SUBSCRIPTION
17:17:49 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
17:17:49 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
17:17:49 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
17:17:49 670  	WHERE
17:17:49 671  	  SUBSCRIPTION.ID = in_subscription_id;
17:17:49 672  
17:17:49 673  EXCEPTION
17:17:49 674  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 675  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 676  	  SPROC_NAME, 'No such subscription');
17:17:49 677  WHEN OTHERS THEN
17:17:49 678  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 680  END GET_SUBSCRIPTION_INFO;
17:17:49 681  
17:17:49 682  /******************************************************************************/
17:17:49 683  
17:17:49 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
17:17:49 685  /*
17:17:49 686  Throws exceptions:
17:17:49 687  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 688  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 689  */
17:17:49 690  	in_subscription_id  IN	NUMBER,
17:17:49 691  	out_result_set	    OUT SYS_REFCURSOR
17:17:49 692  ) AS
17:17:49 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
17:17:49 694  temp_subscription_id NUMBER;
17:17:49 695  BEGIN
17:17:49 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
17:17:49 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
17:17:49 698  	--   for each license
17:17:49 699  	--     get associated invoice
17:17:49 700  	--     add to results list
17:17:49 701  	--   end loop
17:17:49 702  	-- end
17:17:49 703  
17:17:49 704  	SELECT
17:17:49 705  	  SUBSCRIPTION.ID into temp_subscription_id
17:17:49 706  	FROM
17:17:49 707  	  SUBSCRIPTION
17:17:49 708  	WHERE
17:17:49 709  	  SUBSCRIPTION.ID = in_subscription_id;
17:17:49 710  
17:17:49 711  	OPEN out_result_set FOR
17:17:49 712  	SELECT
17:17:49 713  	  INVOICE.ID,
17:17:49 714  	  INVOICE.INVOICE_STATUS_ID,
17:17:49 715  	  INVOICE.CREATE_DATE,
17:17:49 716  	  INVOICE.CREATED_BY,
17:17:49 717  	  INVOICE.UPDATE_DATE,
17:17:49 718  	  INVOICE.UPDATED_BY,
17:17:49 719  	  INVOICE.TAX_EXEMPT_ID
17:17:49 720  	FROM
17:17:49 721  	  LICENSE
17:17:49 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 723  	WHERE
17:17:49 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
17:17:49 725  
17:17:49 726  EXCEPTION
17:17:49 727  WHEN NO_DATA_FOUND THEN
17:17:49 728  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 729  	  SPROC_NAME, 'Could not find subscription with given ID');
17:17:49 730  WHEN OTHERS THEN
17:17:49 731  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 733  END GET_SUBSCRIPTION_INVOICES;
17:17:49 734  
17:17:49 735  /******************************************************************************/
17:17:49 736  
17:17:49 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
17:17:49 738  /*
17:17:49 739  Throws exceptions:
17:17:49 740  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 741  */
17:17:49 742  	in_subscription_id  IN	NUMBER,
17:17:49 743  	out_result_set	    OUT SYS_REFCURSOR
17:17:49 744  ) AS
17:17:49 745  -- VARIABLES
17:17:49 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
17:17:49 747  temp_subscription_id NUMBER;
17:17:49 748  -- EXCEPTIONS
17:17:49 749  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 750  BEGIN
17:17:49 751  
17:17:49 752  	-- Check that subscription exists
17:17:49 753  	BEGIN
17:17:49 754  	  SELECT
17:17:49 755  	    SUBSCRIPTION.ID into temp_subscription_id
17:17:49 756  	  FROM
17:17:49 757  	    SUBSCRIPTION
17:17:49 758  	  WHERE
17:17:49 759  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:49 760  	  EXCEPTION
17:17:49 761  	    WHEN NO_DATA_FOUND THEN
17:17:49 762  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:49 763  	END;
17:17:49 764  
17:17:49 765  	OPEN out_result_set FOR
17:17:49 766  	SELECT
17:17:49 767  	  SUBSCRIPTION_NOTE.NOTE,
17:17:49 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
17:17:49 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
17:17:49 770  	FROM
17:17:49 771  	  SUBSCRIPTION_NOTE
17:17:49 772  	WHERE
17:17:49 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
17:17:49 774  	ORDER BY
17:17:49 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
17:17:49 776  
17:17:49 777  EXCEPTION
17:17:49 778  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 779  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 780  	  SPROC_NAME, 'No such subscription');
17:17:49 781  WHEN OTHERS THEN
17:17:49 782  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 784  END GET_SUBSCRIPTION_NOTES;
17:17:49 785  
17:17:49 786  /******************************************************************************/
17:17:49 787  
17:17:49 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
17:17:49 789  /*
17:17:49 790  Throws exceptions:
17:17:49 791  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 792  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 793  */
17:17:49 794  	in_subscription_id IN  NUMBER,
17:17:49 795  	in_agent_id	   IN  NUMBER,
17:17:49 796  	in_note 	   IN  VARCHAR2,
17:17:49 797  	in_created_by	   IN  VARCHAR2
17:17:49 798  ) AS
17:17:49 799  -- VARIABLES
17:17:49 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
17:17:49 801  temp_subscription_id     NUMBER;
17:17:49 802  var_subscription_note_id NUMBER;
17:17:49 803  -- EXCEPTIONS
17:17:49 804  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 805  BEGIN
17:17:49 806  
17:17:49 807  	-- Check that subscription exists
17:17:49 808  	BEGIN
17:17:49 809  	  SELECT
17:17:49 810  	    SUBSCRIPTION.ID into temp_subscription_id
17:17:49 811  	  FROM
17:17:49 812  	    SUBSCRIPTION
17:17:49 813  	  WHERE
17:17:49 814  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:49 815  	  EXCEPTION
17:17:49 816  	    WHEN NO_DATA_FOUND THEN
17:17:49 817  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:49 818  	END;
17:17:49 819  
17:17:49 820  	PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION_NOTE(
17:17:49 821  	  inout_subscription_note_id => var_subscription_note_id,
17:17:49 822  	  in_agent_id		     => in_agent_id,
17:17:49 823  	  in_subscription_id	     => in_subscription_id,
17:17:49 824  	  in_note		     => in_note,
17:17:49 825  	  in_created_by 	     => in_created_by
17:17:49 826  	);
17:17:49 827  
17:17:49 828  EXCEPTION
17:17:49 829  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 830  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 831  	  SPROC_NAME, 'No such subscription');
17:17:49 832  WHEN OTHERS THEN
17:17:49 833  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 835  END ANNOTATE_SUBSCRIPTION;
17:17:49 836  
17:17:49 837  /******************************************************************************/
17:17:49 838  
17:17:49 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
17:17:49 840  /*
17:17:49 841  Throws exceptions:
17:17:49 842  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 843  */
17:17:49 844  	out_result_set OUT SYS_REFCURSOR
17:17:49 845  ) AS
17:17:49 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
17:17:49 847  BEGIN
17:17:49 848  
17:17:49 849  	OPEN out_result_set FOR
17:17:49 850  	SELECT
17:17:49 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
17:17:49 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
17:17:49 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
17:17:49 854  	FROM
17:17:49 855  	  SUBSCRIPTION_CANCEL_REASON
17:17:49 856  	WHERE
17:17:49 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCR_CANC_REASON_ACTIVE;
17:17:49 858  
17:17:49 859  EXCEPTION
17:17:49 860  WHEN OTHERS THEN
17:17:49 861  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 863  END GET_CANCELLING_SSCRPTN_REASONS;
17:17:49 864  
17:17:49 865  /******************************************************************************/
17:17:49 866  
17:17:49 867  FUNCTION GET_RENEWAL_DATE (
17:17:49 868  /*
17:17:49 869  Throws exceptions:
17:17:49 870  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 871  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 872  */
17:17:49 873  	in_subscription_id in NUMBER
17:17:49 874  ) RETURN DATE AS
17:17:49 875  -- VARIABLES
17:17:49 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
17:17:49 877  var_subscription_status NUMBER;
17:17:49 878  var_licenses_count      NUMBER;
17:17:49 879  var_license_end_date    DATE;
17:17:49 880  var_last_offer_id       NUMBER;
17:17:49 881  var_offer_chain_id      NUMBER;
17:17:49 882  var_last_license_id     NUMBER;
17:17:49 883  var_current_offer_index NUMBER;
17:17:49 884  var_current_offer_recurr_num NUMBER;
17:17:49 885  var_offer_recurr_num    NUMBER;
17:17:49 886  -- EXCEPTIONS
17:17:49 887  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 888  NO_LICENSES_FOUND EXCEPTION;
17:17:49 889  BEGIN
17:17:49 890  
17:17:49 891  	-- Get subscription id and offer chain id
17:17:49 892  	BEGIN
17:17:49 893  	  SELECT
17:17:49 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
17:17:49 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
17:17:49 896  	    into
17:17:49 897  	    var_subscription_status,
17:17:49 898  	    var_offer_chain_id
17:17:49 899  	  FROM
17:17:49 900  	    SUBSCRIPTION
17:17:49 901  	  WHERE
17:17:49 902  	    SUBSCRIPTION.ID = in_subscription_id;
17:17:49 903  	  EXCEPTION
17:17:49 904  	    WHEN NO_DATA_FOUND THEN
17:17:49 905  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:49 906  	END;
17:17:49 907  
17:17:49 908  	IF var_subscription_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE THEN
17:17:49 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
17:17:49 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
17:17:49 911  	  RETURN NULL;
17:17:49 912  	END IF;
17:17:49 913  
17:17:49 914  	BEGIN
17:17:49 915  	  SELECT
17:17:49 916  	    LICENSE_ID,
17:17:49 917  	    END_DATE,
17:17:49 918  	    OFFER_ID,
17:17:49 919  	    CURRENT_OFFER_INDEX,
17:17:49 920  	    CURRENT_OFFER_RECURR_NUM
17:17:49 921  	    into
17:17:49 922  	    var_last_license_id,
17:17:49 923  	    var_license_end_date,
17:17:49 924  	    var_last_offer_id,
17:17:49 925  	    var_current_offer_index,
17:17:49 926  	    var_current_offer_recurr_num
17:17:49 927  	  FROM
17:17:49 928  	    (
17:17:49 929  	      SELECT
17:17:49 930  		LICENSE.ID as "LICENSE_ID",
17:17:49 931  		LICENSE.END_DATE,
17:17:49 932  		LICENSE.OFFER_ID,
17:17:49 933  		LICENSE.CURRENT_OFFER_INDEX,
17:17:49 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
17:17:49 935  	      FROM
17:17:49 936  		LICENSE
17:17:49 937  	      WHERE
17:17:49 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
17:17:49 940  	      ORDER BY END_DATE DESC
17:17:49 941  	    )
17:17:49 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
17:17:49 943  	  WHERE
17:17:49 944  	    ROWNUM <= 1;
17:17:49 945  
17:17:49 946  	  EXCEPTION
17:17:49 947  	    WHEN NO_DATA_FOUND THEN
17:17:49 948  	      -- RAISE NO_LICENSES_FOUND;
17:17:49 949  	      RETURN NULL;
17:17:49 950  	END;
17:17:49 951  
17:17:49 952  	SELECT
17:17:49 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
17:17:49 954  	FROM
17:17:49 955  	  OFFER_OFFER_CHAIN
17:17:49 956  	WHERE
17:17:49 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
17:17:49 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
17:17:49 959  
17:17:49 960  	IF PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
17:17:49 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
17:17:49 962  	  -- There is no next offer for this subscription
17:17:49 963  	  RETURN NULL;
17:17:49 964  	END IF;
17:17:49 965  
17:17:49 966  	RETURN var_license_end_date;
17:17:49 967  
17:17:49 968  EXCEPTION
17:17:49 969  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 970  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 971  	  SPROC_NAME, 'No such subscription');
17:17:49 972  WHEN NO_LICENSES_FOUND THEN
17:17:49 973  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 974  	  SPROC_NAME, 'No licenses found');
17:17:49 975  WHEN OTHERS THEN
17:17:49 976  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 978  END GET_RENEWAL_DATE;
17:17:49 979  
17:17:49 980  /******************************************************************************/
17:17:49 981  
17:17:49 982  FUNCTION GET_RECENT_CHARGE (
17:17:49 983  /*
17:17:49 984  Throws exceptions:
17:17:49 985  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 986  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 987  */
17:17:49 988  	in_subscription_id IN NUMBER
17:17:49 989  ) RETURN NUMBER AS
17:17:49 990  -- VARIABLES
17:17:49 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
17:17:49 992  temp_subscription_id NUMBER;
17:17:49 993  var_recent_charge    NUMBER(10,2);
17:17:49 994  
17:17:49 995  -- EXCEPTIONS
17:17:49 996  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 997  BEGIN
17:17:49 998  
17:17:49 999  	BEGIN
17:17:49 1000  	   SELECT
17:17:49 1001  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 1002  	   FROM
17:17:49 1003  	     SUBSCRIPTION
17:17:49 1004  	   WHERE
17:17:49 1005  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1006  	   EXCEPTION
17:17:49 1007  	     WHEN NO_DATA_FOUND THEN
17:17:49 1008  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1009  	 END;
17:17:49 1010  
17:17:49 1011  	 BEGIN
17:17:49 1012  	   SELECT
17:17:49 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
17:17:49 1014  	   FROM
17:17:49 1015  	     LICENSE
17:17:49 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
17:17:49 1019  	   WHERE
17:17:49 1020  	     -- TODO: Review
17:17:49 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_PROCESSED
17:17:49 1022  	     -- AND
17:17:49 1023  	     SUBSCRIPTION.ID = in_subscription_id
17:17:49 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
17:17:49 1025  	     AND ROWNUM <= 1
17:17:49 1026  	   ORDER BY
17:17:49 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
17:17:49 1028  	   EXCEPTION
17:17:49 1029  	     WHEN NO_DATA_FOUND THEN
17:17:49 1030  	       var_recent_charge := 0;
17:17:49 1031  	 END;
17:17:49 1032  
17:17:49 1033  	 RETURN var_recent_charge;
17:17:49 1034  
17:17:49 1035  EXCEPTION
17:17:49 1036  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1037  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1038  	   SPROC_NAME, 'No such subscription');
17:17:49 1039  WHEN OTHERS THEN
17:17:49 1040  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1042  END GET_RECENT_CHARGE;
17:17:49 1043  
17:17:49 1044  /******************************************************************************/
17:17:49 1045  
17:17:49 1046  FUNCTION GET_BILLING_CYCLE (
17:17:49 1047  	 in_subscription_id IN NUMBER
17:17:49 1048  ) RETURN VARCHAR2 AS
17:17:49 1049  -- VARIABLES
17:17:49 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
17:17:49 1051  temp_subscription_id NUMBER;
17:17:49 1052  var_offer_duration   VARCHAR2(30);
17:17:49 1053  
17:17:49 1054  -- EXCEPTIONS
17:17:49 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 1056  BEGIN
17:17:49 1057  
17:17:49 1058  	 BEGIN
17:17:49 1059  	   SELECT
17:17:49 1060  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 1061  	   FROM
17:17:49 1062  	     SUBSCRIPTION
17:17:49 1063  	   WHERE
17:17:49 1064  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1065  	   EXCEPTION
17:17:49 1066  	     WHEN NO_DATA_FOUND THEN
17:17:49 1067  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1068  	 END;
17:17:49 1069  
17:17:49 1070  	 SELECT
17:17:49 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
17:17:49 1072  	 FROM
17:17:49 1073  	   LICENSE
17:17:49 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
17:17:49 1076  	 WHERE
17:17:49 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_PROCESSED
17:17:49 1078  	   --AND
17:17:49 1079  	   SUBSCRIPTION.ID = in_subscription_id
17:17:49 1080  	   AND ROWNUM <= 1
17:17:49 1081  	 ORDER BY
17:17:49 1082  	   LICENSE.ID ASC;
17:17:49 1083  
17:17:49 1084  	 RETURN var_offer_duration;
17:17:49 1085  
17:17:49 1086  EXCEPTION
17:17:49 1087  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1088  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1089  	   SPROC_NAME, 'No such subscription');
17:17:49 1090  WHEN OTHERS THEN
17:17:49 1091  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1093  END GET_BILLING_CYCLE;
17:17:49 1094  
17:17:49 1095  /******************************************************************************/
17:17:49 1096  
17:17:49 1097  PROCEDURE REFUND_SUBSCRIPTION (
17:17:49 1098  /*
17:17:49 1099  Throws exceptions:
17:17:49 1100  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1102  */
17:17:49 1103  	 in_subscription_id IN NUMBER,
17:17:49 1104  	 in_invoice_id	    IN NUMBER,
17:17:49 1105  	 in_refund_amount   IN NUMBER,
17:17:49 1106  	 in_note	    IN VARCHAR2,
17:17:49 1107  	 in_created_by	    IN VARCHAR2,
17:17:49 1108  	 out_charge_id	    OUT NUMBER
17:17:49 1109  ) AS
17:17:49 1110  -- VARIABLES
17:17:49 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
17:17:49 1112  var_invoice_status_id  NUMBER;
17:17:49 1113  var_account_id	      NUMBER;
17:17:49 1114  var_account_status_id  NUMBER;
17:17:49 1115  var_new_transaction_id NUMBER;
17:17:49 1116  var_instrument_type_id NUMBER;
17:17:49 1117  var_instrument_id      NUMBER;
17:17:49 1118  var_new_charge_id      NUMBER;
17:17:49 1119  var_invoice_amount     NUMBER(10,2);
17:17:49 1120  var_refunds_before     NUMBER(10,2);
17:17:49 1121  var_charges_amount     NUMBER(10,2);
17:17:49 1122  -- EXCEPTIONS
17:17:49 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
17:17:49 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
17:17:49 1125  BAD_INVOICE_ID		     EXCEPTION;
17:17:49 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
17:17:49 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
17:17:49 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
17:17:49 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
17:17:49 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
17:17:49 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
17:17:49 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
17:17:49 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
17:17:49 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
17:17:49 1135  BEGIN
17:17:49 1136  
17:17:49 1137  	 BEGIN
17:17:49 1138  	   SELECT
17:17:49 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
17:17:49 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
17:17:49 1141  	     SUBSCRIPTION.ACCOUNT_ID
17:17:49 1142  	     into
17:17:49 1143  	     var_instrument_id,
17:17:49 1144  	     var_instrument_type_id,
17:17:49 1145  	     var_account_id
17:17:49 1146  	   FROM
17:17:49 1147  	     SUBSCRIPTION
17:17:49 1148  	   WHERE
17:17:49 1149  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1150  	   EXCEPTION
17:17:49 1151  	     WHEN NO_DATA_FOUND THEN
17:17:49 1152  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1153  	 END;
17:17:49 1154  
17:17:49 1155  	 -- Check account status. It should not to be frozen
17:17:49 1156  	 SELECT
17:17:49 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
17:17:49 1158  	 FROM
17:17:49 1159  	   ACCOUNT
17:17:49 1160  	 WHERE
17:17:49 1161  	   ACCOUNT.ID = var_account_id;
17:17:49 1162  
17:17:49 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
17:17:49 1164  	   RAISE ACCOUNT_IS_FROZEN;
17:17:49 1165  	 END IF;
17:17:49 1166  
17:17:49 1167  	 BEGIN
17:17:49 1168  	   SELECT
17:17:49 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
17:17:49 1170  	   FROM
17:17:49 1171  	     INVOICE
17:17:49 1172  	   WHERE
17:17:49 1173  	     INVOICE.ID = in_invoice_id;
17:17:49 1174  	   EXCEPTION
17:17:49 1175  	     WHEN NO_DATA_FOUND THEN
17:17:49 1176  	       RAISE BAD_INVOICE_ID;
17:17:49 1177  	 END;
17:17:49 1178  
17:17:49 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
17:17:49 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
17:17:49 1181  	 END IF;
17:17:49 1182  
17:17:49 1183  	 BEGIN
17:17:49 1184  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
17:17:49 1185  	     in_invoice_id => in_invoice_id,
17:17:49 1186  	     out_amount    => var_invoice_amount
17:17:49 1187  	   );
17:17:49 1188  	   EXCEPTION
17:17:49 1189  	     WHEN OTHERS THEN
17:17:49 1190  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
17:17:49 1192  	 END;
17:17:49 1193  
17:17:49 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
17:17:49 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
17:17:49 1196  	 END IF;
17:17:49 1197  
17:17:49 1198  	 SELECT /*+ STAR_TRANSFORMATION */
17:17:49 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
17:17:49 1200  	 FROM
17:17:49 1201  	   CHARGE
17:17:49 1202  	 WHERE
17:17:49 1203  	   CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1204  	   AND (
17:17:49 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 1207  	   )
17:17:49 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
17:17:49 1209  
17:17:49 1210  	 -- Refunds are negative
17:17:49 1211  	 var_refunds_before := -var_refunds_before;
17:17:49 1212  
17:17:49 1213  	 var_charges_amount := 0;
17:17:49 1214  
17:17:49 1215  	 FOR f_processed_charges IN (
17:17:49 1216  	   SELECT
17:17:49 1217  	     CHARGE.CHARGE_AMOUNT
17:17:49 1218  	   FROM
17:17:49 1219  	     CHARGE
17:17:49 1220  	   WHERE
17:17:49 1221  	     CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
17:17:49 1223  	 )
17:17:49 1224  	 LOOP
17:17:49 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
17:17:49 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
17:17:49 1227  	   END IF;
17:17:49 1228  	 END LOOP;
17:17:49 1229  
17:17:49 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
17:17:49 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
17:17:49 1232  	 END IF;
17:17:49 1233  
17:17:49 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
17:17:49 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
17:17:49 1236  	 END IF;
17:17:49 1237  
17:17:49 1238  	 BEGIN
17:17:49 1239  	   PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 1240  	     in_transaction_id	=> NULL,
17:17:49 1241  	     in_status_id	=> GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
17:17:49 1242  	     in_amount		=> -in_refund_amount,
17:17:49 1243  	     in_created_by	=> in_created_by,
17:17:49 1244  	     in_order_id	=> NULL,
17:17:49 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1246  	     out_transaction_id => var_new_transaction_id
17:17:49 1247  	   );
17:17:49 1248  	   EXCEPTION
17:17:49 1249  	     WHEN OTHERS THEN
17:17:49 1250  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 1252  	 END;
17:17:49 1253  
17:17:49 1254  	 BEGIN
17:17:49 1255  	   PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 1256  	     in_invoice_id	   => in_invoice_id,
17:17:49 1257  	     in_transaction_id	   => var_new_transaction_id,
17:17:49 1258  	     in_instrument_type_id => var_instrument_type_id,
17:17:49 1259  	     in_instrument_id	   => var_instrument_id,
17:17:49 1260  	     in_charge_amount	   => -in_refund_amount,
17:17:49 1261  	     in_created_by	   => in_created_by,
17:17:49 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 1263  	     out_charge_id	   => var_new_charge_id
17:17:49 1264  	   );
17:17:49 1265  	   EXCEPTION
17:17:49 1266  	     WHEN OTHERS THEN
17:17:49 1267  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 1269  	 END;
17:17:49 1270  
17:17:49 1271  	 IF in_note IS NOT NULL THEN
17:17:49 1272  	   BEGIN
17:17:49 1273  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:49 1274  	       in_subscription_id => in_subscription_id,
17:17:49 1275  	       in_agent_id	  => 0, -- AGENT_ID??
17:17:49 1276  	       in_note		  => in_note,
17:17:49 1277  	       in_created_by	  => in_created_by
17:17:49 1278  	     );
17:17:49 1279  	     EXCEPTION
17:17:49 1280  	       WHEN OTHERS THEN
17:17:49 1281  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
17:17:49 1283  	   END;
17:17:49 1284  	 END IF;
17:17:49 1285  
17:17:49 1286  	 out_charge_id := var_new_charge_id;
17:17:49 1287  
17:17:49 1288  EXCEPTION
17:17:49 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
17:17:49 1290  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1291  	   SPROC_NAME, 'Invoice is not closed');
17:17:49 1292  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1293  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1294  	   SPROC_NAME, 'No such subscription');
17:17:49 1295  WHEN ACCOUNT_IS_FROZEN THEN
17:17:49 1296  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
17:17:49 1298  WHEN BAD_INVOICE_ID THEN
17:17:49 1299  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1300  	   SPROC_NAME, 'No such invoice');
17:17:49 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
17:17:49 1302  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
17:17:49 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
17:17:49 1305  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1306  	   SPROC_NAME, 'Refund is greater than amount');
17:17:49 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
17:17:49 1308  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
17:17:49 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
17:17:49 1311  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
17:17:49 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 1314  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 1317  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
17:17:49 1320  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
17:17:49 1322  WHEN OTHERS THEN
17:17:49 1323  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1325  END REFUND_SUBSCRIPTION;
17:17:49 1326  
17:17:49 1327  /******************************************************************************/
17:17:49 1328  
17:17:49 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
17:17:49 1330  /*
17:17:49 1331  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1332  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 1333  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1334  */
17:17:49 1335  	 in_subscription_id	 IN NUMBER,
17:17:49 1336  	 in_effective_start_date IN DATE,
17:17:49 1337  	 in_effective_end_date	 IN DATE,
17:17:49 1338  	 in_note		 IN VARCHAR2,
17:17:49 1339  	 in_updated_by		 IN VARCHAR2
17:17:49 1340  ) AS
17:17:49 1341  -- VARIABLES
17:17:49 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
17:17:49 1343  temp_subscription_id	    NUMBER;
17:17:49 1344  var_current_license_id	    NUMBER;
17:17:49 1345  var_current_license_start_date DATE;
17:17:49 1346  var_current_license_end_date DATE;
17:17:49 1347  var_current_offer_id	    NUMBER;
17:17:49 1348  var_current_invoice_id	    NUMBER;
17:17:49 1349  var_current_date 	    DATE;
17:17:49 1350  var_current_offer_index	    NUMBER;
17:17:49 1351  var_current_offer_recurr_num NUMBER;
17:17:49 1352  var_account_tax_exempt_id    VARCHAR2(255);
17:17:49 1353  
17:17:49 1354  var_free_invoice_id NUMBER;
17:17:49 1355  var_free_license_id NUMBER;
17:17:49 1356  var_new_license_id  NUMBER;
17:17:49 1357  var_ext_license_id  NUMBER;
17:17:49 1358  -- EXCEPTIONS
17:17:49 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
17:17:49 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
17:17:49 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
17:17:49 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
17:17:49 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
17:17:49 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
17:17:49 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
17:17:49 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
17:17:49 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
17:17:49 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
17:17:49 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
17:17:49 1370  BEGIN
17:17:49 1371  
17:17:49 1372  	 var_current_date := PROCS_COMMON_V15.NORMALIZE_DATE(SYSDATE);
17:17:49 1373  
17:17:49 1374  	 -- Check that subscription exists
17:17:49 1375  	 BEGIN
17:17:49 1376  	   SELECT
17:17:49 1377  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 1378  	   FROM
17:17:49 1379  	     SUBSCRIPTION
17:17:49 1380  	   WHERE
17:17:49 1381  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1382  	   EXCEPTION
17:17:49 1383  	     WHEN NO_DATA_FOUND THEN
17:17:49 1384  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1385  	 END;
17:17:49 1386  
17:17:49 1387  	 -- Get account tax exempt id
17:17:49 1388  	 SELECT DISTINCT
17:17:49 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
17:17:49 1390  	 FROM
17:17:49 1391  	   ACCOUNT
17:17:49 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 1393  	 WHERE
17:17:49 1394  	   SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1395  
17:17:49 1396  	 -- Select current data
17:17:49 1397  	 BEGIN
17:17:49 1398  	   SELECT
17:17:49 1399  	     LICENSE.ID,
17:17:49 1400  	     LICENSE.START_DATE,
17:17:49 1401  	     LICENSE.END_DATE,
17:17:49 1402  	     LICENSE.CURRENT_OFFER_INDEX,
17:17:49 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:49 1404  	     OFFER.ID,
17:17:49 1405  	     INVOICE.ID
17:17:49 1406  	   INTO
17:17:49 1407  	     var_current_license_id,
17:17:49 1408  	     var_current_license_start_date,
17:17:49 1409  	     var_current_license_end_date,
17:17:49 1410  	     var_current_offer_index,
17:17:49 1411  	     var_current_offer_recurr_num,
17:17:49 1412  	     var_current_offer_id,
17:17:49 1413  	     var_current_invoice_id
17:17:49 1414  	   FROM
17:17:49 1415  	     LICENSE
17:17:49 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
17:17:49 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 1419  	   WHERE
17:17:49 1420  	     SUBSCRIPTION.ID = in_subscription_id
17:17:49 1421  	     AND PROCS_COMMON_V15.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
17:17:49 1422  	     AND PROCS_COMMON_V15.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
17:17:49 1423  	     AND ROWNUM <= 1
17:17:49 1424  	   ORDER BY
17:17:49 1425  	     LICENSE.ID DESC;
17:17:49 1426  	   EXCEPTION
17:17:49 1427  	     WHEN NO_DATA_FOUND THEN
17:17:49 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
17:17:49 1429  	 END;
17:17:49 1430  
17:17:49 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
17:17:49 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
17:17:49 1433  	 END IF;
17:17:49 1434  
17:17:49 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
17:17:49 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
17:17:49 1437  	 END IF;
17:17:49 1438  
17:17:49 1439  	 IF in_effective_start_date > in_effective_end_date THEN
17:17:49 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
17:17:49 1441  	 END IF;
17:17:49 1442  
17:17:49 1443  	 -- Closing curent license
17:17:49 1444  	 BEGIN
17:17:49 1445  	   PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:49 1446  	     in_license_id	   => var_current_license_id,
17:17:49 1447  	     in_updated_by	   => in_updated_by,
17:17:49 1448  	     in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
17:17:49 1449  	     in_end_date	   => in_effective_start_date,
17:17:49 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE
17:17:49 1451  	   );
17:17:49 1452  	   EXCEPTION
17:17:49 1453  	     WHEN OTHERS THEN
17:17:49 1454  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
17:17:49 1456  	 END;
17:17:49 1457  
17:17:49 1458  	 -- Creating new "free" invoice
17:17:49 1459  	 BEGIN
17:17:49 1460  	   PROCS_INVOICE_V15.CREATE_INVOICE(
17:17:49 1461  	     in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_CLOSED,
17:17:49 1462  	     in_created_by     => in_updated_by,
17:17:49 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
17:17:49 1464  	     out_invoice_id    => var_free_invoice_id
17:17:49 1465  	   );
17:17:49 1466  	   EXCEPTION
17:17:49 1467  	     WHEN OTHERS THEN
17:17:49 1468  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
17:17:49 1470  	 END;
17:17:49 1471  
17:17:49 1472  	 -- Creating new "free" license
17:17:49 1473  	 BEGIN
17:17:49 1474  	   PROCS_LICENSE_V15.CREATE_LICENSE (
17:17:49 1475  	     in_status_id		 => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
17:17:49 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1477  	     in_start_date		 => in_effective_start_date,
17:17:49 1478  	     in_end_date		 => in_effective_end_date,
17:17:49 1479  	     in_offer_id		 => var_current_offer_id,
17:17:49 1480  	     in_subscription_id 	 => in_subscription_id,
17:17:49 1481  	     in_invoice_id		 => var_free_invoice_id,
17:17:49 1482  	     in_created_by		 => in_updated_by,
17:17:49 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1484  	     in_current_offer_index	 => var_current_offer_index,
17:17:49 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
17:17:49 1486  	     out_license_id		 => var_free_license_id
17:17:49 1487  	   );
17:17:49 1488  	   EXCEPTION
17:17:49 1489  	     WHEN OTHERS THEN
17:17:49 1490  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
17:17:49 1492  	 END;
17:17:49 1493  
17:17:49 1494  	 -- Creating new license
17:17:49 1495  	 IF PROCS_COMMON_V15.NORMALIZE_DATE(var_current_license_end_date) >
17:17:49 1496  	    PROCS_COMMON_V15.NORMALIZE_DATE(in_effective_start_date) THEN
17:17:49 1497  	   BEGIN
17:17:49 1498  	     PROCS_LICENSE_V15.CREATE_LICENSE (
17:17:49 1499  	       in_status_id		   => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
17:17:49 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1501  	       in_start_date		   => in_effective_end_date,
17:17:49 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
17:17:49 1503  	       in_offer_id		   => var_current_offer_id,
17:17:49 1504  	       in_subscription_id	   => in_subscription_id,
17:17:49 1505  	       in_invoice_id		   => var_current_invoice_id,
17:17:49 1506  	       in_created_by		   => in_updated_by,
17:17:49 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V15.FALSE,
17:17:49 1508  	       in_current_offer_index	   => var_current_offer_index,
17:17:49 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
17:17:49 1510  	       out_license_id		   => var_ext_license_id
17:17:49 1511  	     );
17:17:49 1512  	     EXCEPTION
17:17:49 1513  	       WHEN OTHERS THEN
17:17:49 1514  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
17:17:49 1516  	   END;
17:17:49 1517  	 END IF;
17:17:49 1518  
17:17:49 1519  	 -- Create new note for subscription
17:17:49 1520  	 BEGIN
17:17:49 1521  	   PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION (
17:17:49 1522  	     in_subscription_id => in_subscription_id,
17:17:49 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
17:17:49 1524  	     in_note		=> in_note,
17:17:49 1525  	     in_created_by	=> in_updated_by
17:17:49 1526  	   );
17:17:49 1527  	   EXCEPTION
17:17:49 1528  	     WHEN OTHERS THEN
17:17:49 1529  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
17:17:49 1531  	 END;
17:17:49 1532  
17:17:49 1533  EXCEPTION
17:17:49 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
17:17:49 1535  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
17:17:49 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
17:17:49 1538  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1539  	   SPROC_NAME, 'Extension start date is too far');
17:17:49 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
17:17:49 1541  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1542  	   SPROC_NAME, 'Extension start date is too small');
17:17:49 1543  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1544  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1545  	   SPROC_NAME, 'No such subscription');
17:17:49 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
17:17:49 1547  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
17:17:49 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
17:17:49 1550  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
17:17:49 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
17:17:49 1553  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
17:17:49 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
17:17:49 1556  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
17:17:49 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
17:17:49 1559  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
17:17:49 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
17:17:49 1562  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
17:17:49 1564  WHEN OTHERS THEN
17:17:49 1565  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1567  END ADD_SUBSCRIPTION_EXTENSION;
17:17:49 1568  
17:17:49 1569  /******************************************************************************/
17:17:49 1570  
17:17:49 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
17:17:49 1572  /*
17:17:49 1573  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1574  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 1575  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1576  Returns:
17:17:49 1577  NULL if it is impossible to calculate end date (for example,
17:17:49 1578  	 offer chain includes offer with infinity recurrences number)
17:17:49 1579  DATE else
17:17:49 1580  */
17:17:49 1581  	 in_subscription_id IN NUMBER
17:17:49 1582  ) RETURN DATE AS
17:17:49 1583  -- VARIABLES
17:17:49 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
17:17:49 1585  last_license_id		     NUMBER;
17:17:49 1586  last_license_end_date	     DATE;
17:17:49 1587  last_license_offer_id	     NUMBER;
17:17:49 1588  last_license_offer_index      NUMBER;
17:17:49 1589  last_license_offer_recurr_num NUMBER;
17:17:49 1590  var_last_license_id	     NUMBER;
17:17:49 1591  var_offer_chain_id	     NUMBER;
17:17:49 1592  var_current_offer_rec_number  NUMBER;
17:17:49 1593  var_next_offers_set	     SYS_REFCURSOR;
17:17:49 1594  var_next_offer_duration	     VARCHAR2(30);
17:17:49 1595  var_next_offer_recur	     NUMBER;
17:17:49 1596  var_infinity_offers_number    NUMBER;
17:17:49 1597  
17:17:49 1598  var_result_date DATE;
17:17:49 1599  
17:17:49 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
17:17:49 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
17:17:49 1602  var_offer_years	NUMBER;
17:17:49 1603  var_offer_months NUMBER;
17:17:49 1604  var_offer_days	NUMBER;
17:17:49 1605  
17:17:49 1606  -- EXCEPTIONS
17:17:49 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
17:17:49 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
17:17:49 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
17:17:49 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
17:17:49 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
17:17:49 1612  BEGIN
17:17:49 1613  
17:17:49 1614  	 BEGIN
17:17:49 1615  	   SELECT
17:17:49 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
17:17:49 1617  	   FROM
17:17:49 1618  	     SUBSCRIPTION
17:17:49 1619  	   WHERE
17:17:49 1620  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1621  	   EXCEPTION
17:17:49 1622  	     WHEN NO_DATA_FOUND THEN
17:17:49 1623  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1624  	 END;
17:17:49 1625  
17:17:49 1626  	 BEGIN
17:17:49 1627  	   SELECT
17:17:49 1628  	     ID into var_last_license_id
17:17:49 1629  	   FROM
17:17:49 1630  	     (
17:17:49 1631  	       SELECT
17:17:49 1632  		 LICENSE.ID
17:17:49 1633  	       FROM
17:17:49 1634  		 LICENSE
17:17:49 1635  	       WHERE
17:17:49 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
17:17:49 1637  	       ORDER BY
17:17:49 1638  		 LICENSE.END_DATE DESC
17:17:49 1639  	     )
17:17:49 1640  	   WHERE
17:17:49 1641  	     ROWNUM <= 1;
17:17:49 1642  	   EXCEPTION
17:17:49 1643  	     WHEN NO_DATA_FOUND THEN
17:17:49 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
17:17:49 1645  	 END;
17:17:49 1646  
17:17:49 1647  	 SELECT
17:17:49 1648  	   COUNT(*) into var_infinity_offers_number
17:17:49 1649  	 FROM
17:17:49 1650  	   OFFER_OFFER_CHAIN
17:17:49 1651  	 WHERE
17:17:49 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
17:17:49 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V15.OFFER_REC_INFINITY;
17:17:49 1654  
17:17:49 1655  	 IF var_infinity_offers_number > 0 THEN
17:17:49 1656  	   RETURN NULL;
17:17:49 1657  	 END IF;
17:17:49 1658  
17:17:49 1659  	 BEGIN
17:17:49 1660  	   SELECT
17:17:49 1661  	     LICENSE.ID,
17:17:49 1662  	     LICENSE.END_DATE,
17:17:49 1663  	     LICENSE.CURRENT_OFFER_INDEX,
17:17:49 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:49 1665  	     LICENSE.OFFER_ID
17:17:49 1666  	     into
17:17:49 1667  	     last_license_id,
17:17:49 1668  	     last_license_end_date,
17:17:49 1669  	     last_license_offer_index,
17:17:49 1670  	     last_license_offer_recurr_num,
17:17:49 1671  	     last_license_offer_id
17:17:49 1672  	   FROM
17:17:49 1673  	     LICENSE
17:17:49 1674  	   WHERE
17:17:49 1675  	     LICENSE.ID = var_last_license_id;
17:17:49 1676  	   EXCEPTION
17:17:49 1677  	     WHEN NO_DATA_FOUND THEN
17:17:49 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
17:17:49 1679  	 END;
17:17:49 1680  
17:17:49 1681  	 var_result_date := last_license_end_date;
17:17:49 1682  
17:17:49 1683  	 -- Find current recurrence number
17:17:49 1684  	 SELECT
17:17:49 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
17:17:49 1686  	 FROM
17:17:49 1687  	   OFFER_OFFER_CHAIN
17:17:49 1688  	 WHERE
17:17:49 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
17:17:49 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
17:17:49 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
17:17:49 1692  
17:17:49 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
17:17:49 1694  	   BEGIN
17:17:49 1695  	     PROCS_OFFER_CHAIN_V15.GET_OFFER_LENGTH(
17:17:49 1696  	       last_license_offer_id,
17:17:49 1697  	       var_offer_years,
17:17:49 1698  	       var_offer_months,
17:17:49 1699  	       var_offer_days
17:17:49 1700  	     );
17:17:49 1701  
17:17:49 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
17:17:49 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
17:17:49 1704  
17:17:49 1705  	     var_result_date := var_result_date
17:17:49 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
17:17:49 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
17:17:49 1708  	     EXCEPTION
17:17:49 1709  	       WHEN OTHERS THEN
17:17:49 1710  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
17:17:49 1712  	   END;
17:17:49 1713  	 END IF;
17:17:49 1714  
17:17:49 1715  	 OPEN var_next_offers_set FOR
17:17:49 1716  	 SELECT
17:17:49 1717  	   OFFER.ENTITLEMENT_DURATION,
17:17:49 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
17:17:49 1719  	 FROM
17:17:49 1720  	   OFFER_OFFER_CHAIN
17:17:49 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
17:17:49 1722  	 WHERE
17:17:49 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
17:17:49 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
17:17:49 1725  
17:17:49 1726  	 LOOP
17:17:49 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
17:17:49 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
17:17:49 1729  	   BEGIN
17:17:49 1730  	     PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
17:17:49 1731  	       var_next_offer_duration,
17:17:49 1732  	       var_offer_years,
17:17:49 1733  	       var_offer_months,
17:17:49 1734  	       var_offer_days
17:17:49 1735  	     );
17:17:49 1736  
17:17:49 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
17:17:49 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
17:17:49 1739  
17:17:49 1740  	     var_result_date := var_result_date
17:17:49 1741  	       + ( var_ym_interval * var_next_offer_recur )
17:17:49 1742  	       + ( var_ds_interval * var_next_offer_recur );
17:17:49 1743  	     EXCEPTION
17:17:49 1744  	       WHEN OTHERS THEN
17:17:49 1745  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
17:17:49 1747  	   END;
17:17:49 1748  	 END LOOP;
17:17:49 1749  
17:17:49 1750  	 RETURN var_result_date;
17:17:49 1751  
17:17:49 1752  EXCEPTION
17:17:49 1753  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1754  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1755  	   SPROC_NAME, 'No such subscription');
17:17:49 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
17:17:49 1757  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
17:17:49 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
17:17:49 1760  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
17:17:49 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
17:17:49 1763  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
17:17:49 1765  WHEN OTHERS THEN
17:17:49 1766  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
17:17:49 1768  END CALC_SUBSCRIPTION_END_DATE;
17:17:49 1769  
17:17:49 1770  /******************************************************************************/
17:17:49 1771  
17:17:49 1772  PROCEDURE HAS_FUTURE_LICENSE (
17:17:49 1773  /*
17:17:49 1774  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1775  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1776  --
17:17:49 1777  RETURNS:
17:17:49 1778  GLOBAL_CONSTANTS_V15.TRUE - if has,
17:17:49 1779  GLOBAL_CONSTANTS_V15.FALSE - else
17:17:49 1780  */
17:17:49 1781  	 in_license_id IN  NUMBER,
17:17:49 1782  	 out_result    OUT NUMBER
17:17:49 1783  ) AS
17:17:49 1784  -- VARIABLES
17:17:49 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
17:17:49 1786  var_subscription_id	 NUMBER;
17:17:49 1787  var_future_licenses_count NUMBER;
17:17:49 1788  -- EXCEPTIONS
17:17:49 1789  BAD_LICENSE_ID	    EXCEPTION;
17:17:49 1790  BEGIN
17:17:49 1791  
17:17:49 1792  	 BEGIN
17:17:49 1793  	   SELECT
17:17:49 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
17:17:49 1795  	   FROM
17:17:49 1796  	     LICENSE
17:17:49 1797  	   WHERE
17:17:49 1798  	     LICENSE.ID = in_license_id;
17:17:49 1799  	   EXCEPTION
17:17:49 1800  	     WHEN NO_DATA_FOUND THEN
17:17:49 1801  	       RAISE BAD_LICENSE_ID;
17:17:49 1802  	 END;
17:17:49 1803  
17:17:49 1804  	 SELECT
17:17:49 1805  	   COUNT(*) into var_future_licenses_count
17:17:49 1806  	 FROM
17:17:49 1807  	   LICENSE
17:17:49 1808  	 WHERE
17:17:49 1809  	   LICENSE.ID != in_license_id
17:17:49 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
17:17:49 1811  	   AND LICENSE.END_DATE > sysdate;
17:17:49 1812  
17:17:49 1813  	 IF var_future_licenses_count > 0 THEN
17:17:49 1814  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 1815  	 ELSE
17:17:49 1816  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 1817  	 END IF;
17:17:49 1818  
17:17:49 1819  EXCEPTION
17:17:49 1820  WHEN BAD_LICENSE_ID THEN
17:17:49 1821  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1822  	   SPROC_NAME, 'No such license');
17:17:49 1823  WHEN OTHERS THEN
17:17:49 1824  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1826  END HAS_FUTURE_LICENSE;
17:17:49 1827  
17:17:49 1828  /******************************************************************************/
17:17:49 1829  
17:17:49 1830  PROCEDURE CLOSE_SUBSCRIPTION (
17:17:49 1831  	 in_subscription_id IN NUMBER,
17:17:49 1832  	 in_updated_by	    IN VARCHAR2
17:17:49 1833  ) AS
17:17:49 1834  -- VARIABLES
17:17:49 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
17:17:49 1836  temp_subscription_id NUMBER;
17:17:49 1837  var_licenses_count   NUMBER;
17:17:49 1838  -- EXCEPTIONS
17:17:49 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
17:17:49 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
17:17:49 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 1842  BEGIN
17:17:49 1843  
17:17:49 1844  	 BEGIN
17:17:49 1845  	   SELECT
17:17:49 1846  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 1847  	   FROM
17:17:49 1848  	     SUBSCRIPTION
17:17:49 1849  	   WHERE
17:17:49 1850  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1851  	   EXCEPTION
17:17:49 1852  	     WHEN NO_DATA_FOUND THEN
17:17:49 1853  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1854  	 END;
17:17:49 1855  
17:17:49 1856  	 SELECT
17:17:49 1857  	   COUNT(*) into var_licenses_count
17:17:49 1858  	 FROM
17:17:49 1859  	   LICENSE
17:17:49 1860  	 WHERE
17:17:49 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
17:17:49 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE;
17:17:49 1863  
17:17:49 1864  	 IF var_licenses_count > 0 THEN
17:17:49 1865  	   RAISE ACTIVE_LICENSES_FOUND;
17:17:49 1866  	 END IF;
17:17:49 1867  
17:17:49 1868  	 PROCS_SUBSCRIPTION_V15.UPDATE_SUBSCRIPTION_STATUS(
17:17:49 1869  	   in_subscription_id	     => in_subscription_id,
17:17:49 1870  	   in_updated_by	     => in_updated_by,
17:17:49 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
17:17:49 1872  	 );
17:17:49 1873  
17:17:49 1874  EXCEPTION
17:17:49 1875  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1876  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1877  	   SPROC_NAME, 'No such subscription');
17:17:49 1878  WHEN ACTIVE_LICENSES_FOUND THEN
17:17:49 1879  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1880  	   SPROC_NAME, 'Active licenses found');
17:17:49 1881  WHEN OTHERS THEN
17:17:49 1882  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1884  END CLOSE_SUBSCRIPTION;
17:17:49 1885  
17:17:49 1886  /******************************************************************************/
17:17:49 1887  
17:17:49 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
17:17:49 1889  	 in_subscription_id IN NUMBER,
17:17:49 1890  	 out_group_id	    OUT NUMBER
17:17:49 1891  ) AS
17:17:49 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
17:17:49 1893  BEGIN
17:17:49 1894  	 SELECT
17:17:49 1895  	   ACCOUNT.GROUP_ID into out_group_id
17:17:49 1896  	 FROM
17:17:49 1897  	   SUBSCRIPTION
17:17:49 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 1899  	 WHERE
17:17:49 1900  	   SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1901  EXCEPTION
17:17:49 1902  WHEN NO_DATA_FOUND THEN
17:17:49 1903  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1904  	   SPROC_NAME, 'No such subscription');
17:17:49 1905  WHEN OTHERS THEN
17:17:49 1906  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
17:17:49 1909  
17:17:49 1910  /******************************************************************************/
17:17:49 1911  
17:17:49 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
17:17:49 1913  /*
17:17:49 1914  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1915  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1916  */
17:17:49 1917  	 in_subscription_id IN NUMBER,
17:17:49 1918  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 1919  ) AS
17:17:49 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
17:17:49 1921  -- VARIABLES
17:17:49 1922  var_offer_chain NUMBER;
17:17:49 1923  -- EXCEPTIONS
17:17:49 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 1925  BEGIN
17:17:49 1926  	 BEGIN
17:17:49 1927  	   SELECT
17:17:49 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
17:17:49 1929  	   FROM
17:17:49 1930  	     SUBSCRIPTION
17:17:49 1931  	   WHERE
17:17:49 1932  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 1933  	   EXCEPTION
17:17:49 1934  	     WHEN NO_DATA_FOUND THEN
17:17:49 1935  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 1936  	 END;
17:17:49 1937  
17:17:49 1938  	 OPEN out_result_set FOR
17:17:49 1939  	 SELECT DISTINCT
17:17:49 1940  	   PRODUCT.ID,
17:17:49 1941  	   PRODUCT.NAME
17:17:49 1942  	 FROM
17:17:49 1943  	   PRODUCT
17:17:49 1944  	 WHERE
17:17:49 1945  	   PRODUCT.ID IN (
17:17:49 1946  	     SELECT DISTINCT
17:17:49 1947  	       PRODUCT_OFFERING.PRODUCT_ID
17:17:49 1948  	     FROM
17:17:49 1949  	       PRODUCT_OFFERING
17:17:49 1950  	     WHERE
17:17:49 1951  	       PRODUCT_OFFERING.ID IN (
17:17:49 1952  		 SELECT DISTINCT
17:17:49 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:49 1954  		 FROM
17:17:49 1955  		   OFFER_PRODUCT_OFFERING
17:17:49 1956  		 WHERE
17:17:49 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:49 1958  		     SELECT DISTINCT
17:17:49 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
17:17:49 1960  		     FROM
17:17:49 1961  		       OFFER_OFFER_CHAIN
17:17:49 1962  		     WHERE
17:17:49 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
17:17:49 1964  		   )
17:17:49 1965  	       )
17:17:49 1966  	   );
17:17:49 1967  
17:17:49 1968  EXCEPTION
17:17:49 1969  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1970  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1971  	   SPROC_NAME, 'No such subscription');
17:17:49 1972  WHEN OTHERS THEN
17:17:49 1973  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1975  END GET_SUBSCRIPTION_PRODUCTS;
17:17:49 1976  
17:17:49 1977  /******************************************************************************/
17:17:49 1978  
17:17:49 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
17:17:49 1980  /*
17:17:49 1981  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1982  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1983  */
17:17:49 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
17:17:49 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
17:17:49 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:49 1987  ) AS
17:17:49 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
17:17:49 1989  -- VARIABLES
17:17:49 1990  temp_charge_id CHARGE.ID%TYPE;
17:17:49 1991  -- EXCEPTIONS
17:17:49 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
17:17:49 1993  BAD_STATUS_ID	      EXCEPTION;
17:17:49 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 1995  BEGIN
17:17:49 1996  
17:17:49 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED
17:17:49 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED THEN
17:17:49 2001  	   RAISE BAD_STATUS_ID;
17:17:49 2002  	 END IF;
17:17:49 2003  
17:17:49 2004  	 PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
17:17:49 2005  	   in_subscription_id	     => in_subscription_id,
17:17:49 2006  	   in_subscription_status_id => in_subscription_status_id,
17:17:49 2007  	   in_updated_by	     => in_updated_by
17:17:49 2008  	 );
17:17:49 2009  
17:17:49 2010  	 IF SQL%ROWCOUNT = 0 THEN
17:17:49 2011  	   RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2012  	 END IF;
17:17:49 2013  
17:17:49 2014  EXCEPTION
17:17:49 2015  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2016  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2017  	   SPROC_NAME, 'No such subscription');
17:17:49 2018  WHEN BAD_STATUS_ID THEN
17:17:49 2019  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2020  	   SPROC_NAME, 'Bad status id');
17:17:49 2021  WHEN OTHERS THEN
17:17:49 2022  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2024  END UPDATE_SUBSCRIPTION_STATUS;
17:17:49 2025  
17:17:49 2026  /******************************************************************************/
17:17:49 2027  
17:17:49 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
17:17:49 2029  /*
17:17:49 2030  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2031  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2032  */
17:17:49 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
17:17:49 2034  	 in_subscription_id IN NUMBER,
17:17:49 2035  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 2036  ) AS
17:17:49 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
17:17:49 2038  -- VARIABLES
17:17:49 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
17:17:49 2040  -- EXCEPTIONS
17:17:49 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2042  BEGIN
17:17:49 2043  
17:17:49 2044  	 BEGIN
17:17:49 2045  	   SELECT
17:17:49 2046  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 2047  	   FROM
17:17:49 2048  	     SUBSCRIPTION
17:17:49 2049  	   WHERE
17:17:49 2050  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 2051  	   EXCEPTION
17:17:49 2052  	     WHEN NO_DATA_FOUND THEN
17:17:49 2053  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2054  	 END;
17:17:49 2055  
17:17:49 2056  	 OPEN out_result_set FOR
17:17:49 2057  	 SELECT DISTINCT
17:17:49 2058  	   LICENSE.INVOICE_ID as "ID"
17:17:49 2059  	 FROM
17:17:49 2060  	   LICENSE
17:17:49 2061  	 WHERE
17:17:49 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
17:17:49 2064  
17:17:49 2065  EXCEPTION
17:17:49 2066  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2067  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2068  	   SPROC_NAME, 'No such subscription');
17:17:49 2069  WHEN OTHERS THEN
17:17:49 2070  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2072  END GET_ACTIVE_INVOICES_IDS;
17:17:49 2073  
17:17:49 2074  /******************************************************************************/
17:17:49 2075  
17:17:49 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
17:17:49 2077  /*
17:17:49 2078  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2079  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2080  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 2081  */
17:17:49 2082  	 in_invoice_id	      IN NUMBER,
17:17:49 2083  	 in_updated_by	      IN VARCHAR2,
17:17:49 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:49 2085  ) AS
17:17:49 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
17:17:49 2087  -- VARIABLES
17:17:49 2088  temp_invoice_id	      INVOICE.ID%TYPE;
17:17:49 2089  var_chargeback_amount  NUMBER(10,2);
17:17:49 2090  ver_refund_charge_id   NUMBER;
17:17:49 2091  -- EXCEPTIONS
17:17:49 2092  BAD_INVOICE_ID		    EXCEPTION;
17:17:49 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
17:17:49 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
17:17:49 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
17:17:49 2096  -- STUB
17:17:49 2097  var_now DATE;
17:17:49 2098  var_revoke NUMBER;
17:17:49 2099  var_refund NUMBER;
17:17:49 2100  var_billed NUMBER;
17:17:49 2101  BEGIN
17:17:49 2102  
17:17:49 2103  	 var_now := sysdate;
17:17:49 2104  
17:17:49 2105  	 -- Check that invoice exists
17:17:49 2106  	 BEGIN
17:17:49 2107  	   SELECT
17:17:49 2108  	     INVOICE.ID into temp_invoice_id
17:17:49 2109  	   FROM
17:17:49 2110  	     INVOICE
17:17:49 2111  	   WHERE
17:17:49 2112  	     INVOICE.ID = in_invoice_id;
17:17:49 2113  	   EXCEPTION
17:17:49 2114  	     WHEN NO_DATA_FOUND THEN
17:17:49 2115  	       RAISE BAD_INVOICE_ID;
17:17:49 2116  	 END;
17:17:49 2117  
17:17:49 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V15.FALSE, GLOBAL_CONSTANTS_V15.TRUE) into var_revoke
17:17:49 2119  	 from license l, subscription s, offer_chain oc
17:17:49 2120  	 where
17:17:49 2121  	   l.subscription_id = s.id and
17:17:49 2122  	   s.offer_chain_id = oc.id and
17:17:49 2123  	   l.invoice_id = in_invoice_id and
17:17:49 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V15.TRUE and
17:17:49 2125  	   rownum < 2;
17:17:49 2126  
17:17:49 2127  	 var_billed := PROCS_INVOICE_V15.IS_INVOICE_PAYING_STARTED(in_invoice_id);
17:17:49 2128  	 var_refund := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2129  
17:17:49 2130  	 -- Check that transaction for given invoice not started
17:17:49 2131  	 -- if refund enabled calculate and apply chargeback
17:17:49 2132  	 IF (
17:17:49 2133  	     var_billed = GLOBAL_CONSTANTS_V15.TRUE
17:17:49 2134  	   )THEN
17:17:49 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V15.TRUE) then
17:17:49 2136  	     -- If started then we need to calculate refund
17:17:49 2137  	     BEGIN
17:17:49 2138  	       PROCS_INVOICE_V15.CALCULATE_INVOICE_CHARGEBACK(
17:17:49 2139  		 in_invoice_id,
17:17:49 2140  		 var_now,
17:17:49 2141  		 var_chargeback_amount
17:17:49 2142  	       );
17:17:49 2143  	       EXCEPTION
17:17:49 2144  		 WHEN OTHERS THEN
17:17:49 2145  		   EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
17:17:49 2147  	     END;
17:17:49 2148  	     IF var_chargeback_amount > 0 THEN
17:17:49 2149  	       BEGIN
17:17:49 2150  		 PROCS_INVOICE_V15.APPLY_REFUND(
17:17:49 2151  		   in_invoice_id,
17:17:49 2152  		   var_chargeback_amount,
17:17:49 2153  		   in_updated_by,
17:17:49 2154  		   ver_refund_charge_id
17:17:49 2155  		 );
17:17:49 2156  		 EXCEPTION
17:17:49 2157  		   WHEN OTHERS THEN
17:17:49 2158  		     EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
17:17:49 2160  	       END;
17:17:49 2161  	       var_refund := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2162  	     END IF;
17:17:49 2163  	   end if;
17:17:49 2164  	 ELSE
17:17:49 2165  
17:17:49 2166  	   FOR f_transaction_to_close IN (
17:17:49 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 2168  	   )
17:17:49 2169  	   LOOP
17:17:49 2170  	     PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
17:17:49 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
17:17:49 2172  	       in_updated_by		=> in_updated_by,
17:17:49 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
17:17:49 2174  	     );
17:17:49 2175  	   END LOOP;
17:17:49 2176  	   -- Needs to close charges. No refund.
17:17:49 2177  	   FOR f_charge_to_close IN (
17:17:49 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 2179  	   )
17:17:49 2180  	   LOOP
17:17:49 2181  	     PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
17:17:49 2182  	       in_charge_id	   => f_charge_to_close.ID,
17:17:49 2183  	       in_updated_by	   => in_updated_by,
17:17:49 2184  	       in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
17:17:49 2185  	     );
17:17:49 2186  	   END LOOP;
17:17:49 2187  
17:17:49 2188  	   PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
17:17:49 2189  	     in_invoice_id		    => in_invoice_id,
17:17:49 2190  	     in_updated_by		    => in_updated_by,
17:17:49 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V15.INVOICE_CLOSED
17:17:49 2192  	   );
17:17:49 2193  
17:17:49 2194  	 END IF;
17:17:49 2195  	 -- update licenses
17:17:49 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V15.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V15.FALSE) THEN
17:17:49 2197  	   FOR f_license_to_cancel IN (
17:17:49 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2199  	   )
17:17:49 2200  	   LOOP
17:17:49 2201  	     PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:49 2202  	       in_license_id	     => f_license_to_cancel.ID,
17:17:49 2203  	       in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
17:17:49 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 2205  	       in_updated_by	     => in_updated_by,
17:17:49 2206  	       in_entitlement_end_date => var_now
17:17:49 2207  	     );
17:17:49 2208  	   END LOOP;
17:17:49 2209  	 ELSE
17:17:49 2210  	   FOR f_license_to_cancel IN (
17:17:49 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2212  	   )
17:17:49 2213  	   LOOP
17:17:49 2214  	     PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:49 2215  	       in_license_id	     => f_license_to_cancel.ID,
17:17:49 2216  	       in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
17:17:49 2217  	       in_updated_by	     => in_updated_by
17:17:49 2218  	     );
17:17:49 2219  	   END LOOP;
17:17:49 2220  	 END IF;
17:17:49 2221  
17:17:49 2222  
17:17:49 2223  EXCEPTION
17:17:49 2224  WHEN BAD_INVOICE_ID THEN
17:17:49 2225  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2226  	   SPROC_NAME, 'No such invoice');
17:17:49 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
17:17:49 2228  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
17:17:49 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
17:17:49 2231  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
17:17:49 2233  WHEN OTHERS THEN
17:17:49 2234  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2236  END CANCEL_SUBSCRIPTION_INVOICE;
17:17:49 2237  
17:17:49 2238  /******************************************************************************/
17:17:49 2239  
17:17:49 2240  PROCEDURE FINALIZE_CANCELATION (
17:17:49 2241  /*
17:17:49 2242  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2243  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2244  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 2245  */
17:17:49 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
17:17:49 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
17:17:49 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:49 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:49 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:49 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:49 2252  	 in_subscription_id    IN NUMBER,
17:17:49 2253  	 in_cancelation_reason IN VARCHAR2,
17:17:49 2254  	 in_cancelation_date   IN DATE,
17:17:49 2255  	 in_note	       IN VARCHAR2,
17:17:49 2256  	 in_agent_id	       IN NUMBER,
17:17:49 2257  	 in_updated_by	       IN VARCHAR2
17:17:49 2258  ) AS
17:17:49 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
17:17:49 2260  -- VARIABLES
17:17:49 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
17:17:49 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
17:17:49 2263  var_active_invoices_count NUMBER;
17:17:49 2264  -- EXCEPTIONS
17:17:49 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
17:17:49 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
17:17:49 2267  BAD_CANCELATION_REASON	   EXCEPTION;
17:17:49 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
17:17:49 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
17:17:49 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
17:17:49 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
17:17:49 2272  BEGIN
17:17:49 2273  
17:17:49 2274  	 -- Get current subscription status
17:17:49 2275  	 BEGIN
17:17:49 2276  	   SELECT
17:17:49 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
17:17:49 2278  	   FROM
17:17:49 2279  	     SUBSCRIPTION
17:17:49 2280  	   WHERE
17:17:49 2281  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 2282  	   EXCEPTION
17:17:49 2283  	     WHEN NO_DATA_FOUND THEN
17:17:49 2284  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2285  	 END;
17:17:49 2286  
17:17:49 2287  	 -- Check that subscription reason is correct
17:17:49 2288  	 BEGIN
17:17:49 2289  	   SELECT
17:17:49 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
17:17:49 2291  	   FROM
17:17:49 2292  	     SUBSCRIPTION_CANCEL_REASON
17:17:49 2293  	   WHERE
17:17:49 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
17:17:49 2295  	     AND ROWNUM <= 1;
17:17:49 2296  	   EXCEPTION
17:17:49 2297  	     WHEN NO_DATA_FOUND THEN
17:17:49 2298  	       RAISE BAD_CANCELATION_REASON;
17:17:49 2299  	 END;
17:17:49 2300  
17:17:49 2301  	 -- Check for invoices with active licenses
17:17:49 2302  	 SELECT
17:17:49 2303  	   COUNT(*) into var_active_invoices_count
17:17:49 2304  	 FROM
17:17:49 2305  	   LICENSE
17:17:49 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 2307  	 WHERE
17:17:49 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
17:17:49 2310  
17:17:49 2311  	 IF var_active_invoices_count > 0 THEN
17:17:49 2312  	   RAISE ACTIVE_INVOICES_FOUND;
17:17:49 2313  	 END IF;
17:17:49 2314  
17:17:49 2315  	 -- Check that subscription is active
17:17:49 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
17:17:49 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
17:17:49 2319  	 END IF;
17:17:49 2320  
17:17:49 2321  	 -- Update subscription data
17:17:49 2322  	 BEGIN
17:17:49 2323  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
17:17:49 2324  	     in_subscription_id        => in_subscription_id,
17:17:49 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED,
17:17:49 2326  	     in_cancelation_date       => in_cancelation_date,
17:17:49 2327  	     in_updated_by	       => in_updated_by,
17:17:49 2328  	     in_sct_id		       => var_sct_id
17:17:49 2329  	   );
17:17:49 2330  	   EXCEPTION
17:17:49 2331  	     WHEN OTHERS THEN
17:17:49 2332  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
17:17:49 2334  	 END;
17:17:49 2335  
17:17:49 2336  	 -- Annotate subscription
17:17:49 2337  	 IF in_note IS NOT NULL THEN
17:17:49 2338  	   BEGIN
17:17:49 2339  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:49 2340  	       in_subscription_id,
17:17:49 2341  	       in_agent_id,
17:17:49 2342  	       in_note,
17:17:49 2343  	       in_updated_by
17:17:49 2344  	     );
17:17:49 2345  	     EXCEPTION
17:17:49 2346  	      WHEN OTHERS THEN
17:17:49 2347  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2348  		RAISE CAN_NOT_CREATE_NOTE;
17:17:49 2349  	   END;
17:17:49 2350  	 END IF;
17:17:49 2351  
17:17:49 2352  EXCEPTION
17:17:49 2353  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2354  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2355  	   SPROC_NAME, 'No such subscription');
17:17:49 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
17:17:49 2357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2358  	   SPROC_NAME, 'Bad current subscription status');
17:17:49 2359  WHEN BAD_CANCELATION_REASON THEN
17:17:49 2360  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2361  	   SPROC_NAME, 'Bad cancellation reason');
17:17:49 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
17:17:49 2363  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
17:17:49 2365  WHEN ACTIVE_INVOICES_FOUND THEN
17:17:49 2366  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 2367  	   SPROC_NAME, 'Invoices with active licenses found');
17:17:49 2368  WHEN CAN_NOT_CREATE_NOTE THEN
17:17:49 2369  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
17:17:49 2371  WHEN OTHERS THEN
17:17:49 2372  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2374  END FINALIZE_CANCELATION;
17:17:49 2375  
17:17:49 2376  /******************************************************************************/
17:17:49 2377  
17:17:49 2378  PROCEDURE FINALIZE_FALSE_START (
17:17:49 2379  /*
17:17:49 2380  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2381  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2382  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 2383  */
17:17:49 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
17:17:49 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:49 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:49 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:49 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:49 2389  	 in_subscription_id    IN NUMBER,
17:17:49 2390  	 in_cancelation_date   IN DATE,
17:17:49 2391  	 in_note	       IN VARCHAR2,
17:17:49 2392  	 in_agent_id	       IN NUMBER,
17:17:49 2393  	 in_updated_by	       IN VARCHAR2
17:17:49 2394  ) AS
17:17:49 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
17:17:49 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
17:17:49 2397  -- VARIABLES
17:17:49 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
17:17:49 2399  var_active_invoices_count NUMBER;
17:17:49 2400  -- EXCEPTIONS
17:17:49 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
17:17:49 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
17:17:49 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
17:17:49 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
17:17:49 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
17:17:49 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
17:17:49 2407  BEGIN
17:17:49 2408  
17:17:49 2409  	 -- Get current subscription status
17:17:49 2410  	 BEGIN
17:17:49 2411  	   SELECT
17:17:49 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
17:17:49 2413  	   FROM
17:17:49 2414  	     SUBSCRIPTION
17:17:49 2415  	   WHERE
17:17:49 2416  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 2417  	   EXCEPTION
17:17:49 2418  	     WHEN NO_DATA_FOUND THEN
17:17:49 2419  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2420  	 END;
17:17:49 2421  
17:17:49 2422  	 -- Check for invoices with active licenses
17:17:49 2423  	 SELECT
17:17:49 2424  	   COUNT(*) into var_active_invoices_count
17:17:49 2425  	 FROM
17:17:49 2426  	   LICENSE
17:17:49 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 2428  	 WHERE
17:17:49 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
17:17:49 2431  
17:17:49 2432  	 IF var_active_invoices_count > 0 THEN
17:17:49 2433  	   RAISE ACTIVE_INVOICES_FOUND;
17:17:49 2434  	 END IF;
17:17:49 2435  
17:17:49 2436  	 -- Check that subscription is active
17:17:49 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
17:17:49 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
17:17:49 2440  	 END IF;
17:17:49 2441  
17:17:49 2442  	 -- Update subscription data
17:17:49 2443  	 BEGIN
17:17:49 2444  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
17:17:49 2445  	     in_subscription_id        => in_subscription_id,
17:17:49 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_FALSE_START,
17:17:49 2447  	     in_cancelation_date       => in_cancelation_date,
17:17:49 2448  	     in_updated_by	       => in_updated_by,
17:17:49 2449  	     in_sct_id		       => FALSE_START_REASON
17:17:49 2450  	   );
17:17:49 2451  	   EXCEPTION
17:17:49 2452  	     WHEN OTHERS THEN
17:17:49 2453  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
17:17:49 2455  	 END;
17:17:49 2456  
17:17:49 2457  	 -- Annotate subscription
17:17:49 2458  	 IF in_note IS NOT NULL THEN
17:17:49 2459  	   BEGIN
17:17:49 2460  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:49 2461  	       in_subscription_id,
17:17:49 2462  	       in_agent_id,
17:17:49 2463  	       in_note,
17:17:49 2464  	       in_updated_by
17:17:49 2465  	     );
17:17:49 2466  	     EXCEPTION
17:17:49 2467  	      WHEN OTHERS THEN
17:17:49 2468  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2469  		RAISE CAN_NOT_CREATE_NOTE;
17:17:49 2470  	   END;
17:17:49 2471  	 END IF;
17:17:49 2472  
17:17:49 2473  EXCEPTION
17:17:49 2474  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2475  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2476  	   SPROC_NAME, 'No such subscription');
17:17:49 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
17:17:49 2478  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2479  	   SPROC_NAME, 'Bad current subscription status');
17:17:49 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
17:17:49 2481  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
17:17:49 2483  WHEN ACTIVE_INVOICES_FOUND THEN
17:17:49 2484  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 2485  	   SPROC_NAME, 'Invoices with active licenses found');
17:17:49 2486  WHEN CAN_NOT_CREATE_NOTE THEN
17:17:49 2487  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
17:17:49 2489  WHEN OTHERS THEN
17:17:49 2490  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2492  END FINALIZE_FALSE_START;
17:17:49 2493  
17:17:49 2494  /******************************************************************************/
17:17:49 2495  
17:17:49 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
17:17:49 2497  	 in_subscription_id IN NUMBER
17:17:49 2498  ) RETURN NUMBER AS
17:17:49 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
17:17:49 2500  -- VARIABLES
17:17:49 2501  var_is_offer_chain_cancelable NUMBER;
17:17:49 2502  --64603
17:17:49 2503  var_end_date date;
17:17:49 2504  today_date date := current_date;
17:17:49 2505  offer_id number;
17:17:49 2506  -- EXCEPTIONS
17:17:49 2507  COULD_NOT_CHECK	   EXCEPTION;
17:17:49 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
17:17:49 2510  BEGIN
17:17:49 2511  
17:17:49 2512  	 BEGIN
17:17:49 2513  	   -- find offer_chain_id for given in_subscription_id
17:17:49 2514  	   SELECT OFFER_CHAIN_ID into offer_id
17:17:49 2515  	   FROM SUBSCRIPTION
17:17:49 2516  	   WHERE ID = in_subscription_id;
17:17:49 2517  	   EXCEPTION
17:17:49 2518  	     WHEN NO_DATA_FOUND THEN
17:17:49 2519  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2520  	     WHEN OTHERS THEN
17:17:49 2521  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 2522  	       RAISE COULD_NOT_CHECK;
17:17:49 2523  	 END;
17:17:49 2524  
17:17:49 2525  	 -- find if it was redeemed from a gift certificate
17:17:49 2526  	 BEGIN
17:17:49 2527  	   SELECT l.end_date INTO var_end_date
17:17:49 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
17:17:49 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
17:17:49 2530  	   AND l.subscription_id = in_subscription_id;
17:17:49 2531  
17:17:49 2532  	   -- if the license end_date is bigger than today, we are in the
17:17:49 2533  	   -- first period, so we cannot cancel; otherwise can cancel
17:17:49 2534  	   IF var_end_date > today_date THEN
17:17:49 2535  	       RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2536  	   ELSE
17:17:49 2537  	       RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2538  	   END IF;
17:17:49 2539  
17:17:49 2540  	   EXCEPTION
17:17:49 2541  	       -- not coming from a gift certificate,
17:17:49 2542  	       -- use old logic
17:17:49 2543  	       WHEN NO_DATA_FOUND THEN
17:17:49 2544  		   SELECT
17:17:49 2545  		       PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(offer_id)
17:17:49 2546  		       INTO var_is_offer_chain_cancelable
17:17:49 2547  		   FROM DUAL;
17:17:49 2548  		   RETURN var_is_offer_chain_cancelable;
17:17:49 2549  	 END;
17:17:49 2550  
17:17:49 2551  EXCEPTION
17:17:49 2552  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2553  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2554  	   SPROC_NAME, 'No such subscription');
17:17:49 2555  WHEN COULD_NOT_CHECK THEN
17:17:49 2556  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
17:17:49 2558  WHEN OTHERS THEN
17:17:49 2559  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2561  
17:17:49 2562  END IS_SUBSCRIPTION_CANCELABLE;
17:17:49 2563  /******************************************************************************/
17:17:49 2564  
17:17:49 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
17:17:49 2566  /*
17:17:49 2567  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2568  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2569  */
17:17:49 2570  	 in_subscription_id IN NUMBER,
17:17:49 2571  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 2572  ) AS
17:17:49 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
17:17:49 2574  -- VARIABLES
17:17:49 2575  var_offer NUMBER;
17:17:49 2576  -- EXCEPTIONS
17:17:49 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2578  BEGIN
17:17:49 2579  
17:17:49 2580  	 OPEN out_result_set FOR
17:17:49 2581  	 SELECT DISTINCT
17:17:49 2582  	   PRODUCT_OFFERING.ID,
17:17:49 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:49 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:49 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:49 2586  	   PRODUCT_OFFERING.QUANTITY,
17:17:49 2587  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:49 2588  	   PRODUCT_OFFERING.CREATED_BY,
17:17:49 2589  	   CAPABILITY.ID CAP_ID,
17:17:49 2590  	   CAPABILITY.CODE CAP_CODE,
17:17:49 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:49 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:49 2593  	 FROM
17:17:49 2594  	   OFFER_PRODUCT_OFFERING
17:17:49 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:49 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:49 2597  	 WHERE
17:17:49 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:49 2599  	     SELECT
17:17:49 2600  	       LICENSE.OFFER_ID
17:17:49 2601  	     FROM
17:17:49 2602  	       SUBSCRIPTION
17:17:49 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE
17:17:49 2604  	     WHERE
17:17:49 2605  	       SUBSCRIPTION.ID = in_subscription_id
17:17:49 2606  	   );
17:17:49 2607  
17:17:49 2608  EXCEPTION
17:17:49 2609  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2610  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2611  	   SPROC_NAME, 'No such subscription');
17:17:49 2612  WHEN OTHERS THEN
17:17:49 2613  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2615  END GET_SUBSCR_PROD_OFFERRINGS;
17:17:49 2616  
17:17:49 2617  
17:17:49 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
17:17:49 2619  /*
17:17:49 2620  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2621  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2622  */
17:17:49 2623  	 in_subscription_id IN NUMBER,
17:17:49 2624  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 2625  ) AS
17:17:49 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
17:17:49 2627  -- VARIABLES
17:17:49 2628  var_offer NUMBER;
17:17:49 2629  -- EXCEPTIONS
17:17:49 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2631  BEGIN
17:17:49 2632  
17:17:49 2633  	 OPEN out_result_set FOR
17:17:49 2634  	 SELECT DISTINCT
17:17:49 2635  	   PRODUCT_OFFERING.ID,
17:17:49 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:49 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:49 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:49 2639  	   PRODUCT_OFFERING.QUANTITY,
17:17:49 2640  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:49 2641  	   PRODUCT_OFFERING.CREATED_BY,
17:17:49 2642  	   CAPABILITY.ID CAP_ID,
17:17:49 2643  	   CAPABILITY.CODE CAP_CODE,
17:17:49 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:49 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:49 2646  	 FROM
17:17:49 2647  	   OFFER_PRODUCT_OFFERING
17:17:49 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:49 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:49 2650  	 WHERE
17:17:49 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:49 2652  	     SELECT
17:17:49 2653  	       LICENSE.OFFER_ID
17:17:49 2654  	     FROM
17:17:49 2655  	       SUBSCRIPTION
17:17:49 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 2657  	     WHERE
17:17:49 2658  	       SUBSCRIPTION.ID = in_subscription_id
17:17:49 2659  	   );
17:17:49 2660  
17:17:49 2661  EXCEPTION
17:17:49 2662  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2663  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2664  	   SPROC_NAME, 'No such subscription');
17:17:49 2665  WHEN OTHERS THEN
17:17:49 2666  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2668  END RETRIEVE_SUB_PROD_OFFER;
17:17:49 2669  /******************************************************************************/
17:17:49 2670  
17:17:49 2671  
17:17:49 2672  
17:17:49 2673  
17:17:49 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
17:17:49 2675  /*
17:17:49 2676  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2677  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2678  */
17:17:49 2679  	 in_subscription_id IN NUMBER,
17:17:49 2680  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 2681  ) AS
17:17:49 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
17:17:49 2683  -- VARIABLES
17:17:49 2684  var_offer_chain NUMBER;
17:17:49 2685  -- EXCEPTIONS
17:17:49 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2687  BEGIN
17:17:49 2688  	 BEGIN
17:17:49 2689  	   SELECT
17:17:49 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
17:17:49 2691  	   FROM
17:17:49 2692  	     SUBSCRIPTION
17:17:49 2693  	   WHERE
17:17:49 2694  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 2695  	   EXCEPTION
17:17:49 2696  	     WHEN NO_DATA_FOUND THEN
17:17:49 2697  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2698  	 END;
17:17:49 2699  
17:17:49 2700  	 OPEN out_result_set FOR
17:17:49 2701  	 SELECT DISTINCT
17:17:49 2702  	   po.ID po_id,
17:17:49 2703  	   po.PRODUCT_ID po_product_id,
17:17:49 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
17:17:49 2705  	   po.UNIT_PRICE po_unit_price,
17:17:49 2706  	   po.QUANTITY po_quantity,
17:17:49 2707  	   po.CREATE_DATE po_create_date,
17:17:49 2708  	   po.CREATED_BY po_created_by,
17:17:49 2709  	   l.ID l_id,
17:17:49 2710  	   l.license_status_id l_license_status_id,
17:17:49 2711  	   l.start_date l_start_date,
17:17:49 2712  	   l.offer_id l_offer_id,
17:17:49 2713  	   l.subscription_id l_subscription_id,
17:17:49 2714  	   l.invoice_id l_invoice_id,
17:17:49 2715  	   l.end_date l_end_date,
17:17:49 2716  	   l.entitlement_end_date l_entitlement_end_date,
17:17:49 2717  	   l.create_date l_create_date,
17:17:49 2718  	   l.created_by l_created_by,
17:17:49 2719  	   l.is_extension l_is_extension,
17:17:49 2720  	   l.current_offer_index l_current_offer_index,
17:17:49 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
17:17:49 2722  	   l.needs_entitlements l_needs_entitlements
17:17:49 2723  	 FROM
17:17:49 2724  	   OFFER_PRODUCT_OFFERING opo,
17:17:49 2725  	   PRODUCT_OFFERING po,
17:17:49 2726  	   SUBSCRIPTION s,
17:17:49 2727  	   LICENSE l
17:17:49 2728  	 WHERE
17:17:49 2729  	   opo.product_offering_id = po.id
17:17:49 2730  	   and po.id = l.offer_id
17:17:49 2731  	   and l.subscription_id = s.id
17:17:49 2732  	   and l.license_status_id = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 2733  	   and s.id = in_subscription_id
17:17:49 2734  	 ;
17:17:49 2735  EXCEPTION
17:17:49 2736  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2737  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2738  	   SPROC_NAME, 'No such subscription');
17:17:49 2739  WHEN OTHERS THEN
17:17:49 2740  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2742  END GET_SUBSCR_LIC_OFFER;
17:17:49 2743  
17:17:49 2744  /******************************************************************************/
17:17:49 2745  
17:17:49 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
17:17:49 2747  /*
17:17:49 2748  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2749  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2750  */
17:17:49 2751  	 in_subscription_id IN NUMBER,
17:17:49 2752  	 out_result	    OUT NUMBER
17:17:49 2753  ) AS
17:17:49 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
17:17:49 2755  -- VARIABLES
17:17:49 2756  temp_subscription_id NUMBER;
17:17:49 2757  var_local_result     NUMBER;
17:17:49 2758  -- EXCEPTIONS
17:17:49 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 2760  BEGIN
17:17:49 2761  
17:17:49 2762  	 -- Check that subscription exists
17:17:49 2763  	 BEGIN
17:17:49 2764  	   SELECT
17:17:49 2765  	     SUBSCRIPTION.ID into temp_subscription_id
17:17:49 2766  	   FROM
17:17:49 2767  	     SUBSCRIPTION
17:17:49 2768  	   WHERE
17:17:49 2769  	     SUBSCRIPTION.ID = in_subscription_id;
17:17:49 2770  	   EXCEPTION
17:17:49 2771  	     WHEN NO_DATA_FOUND THEN
17:17:49 2772  	       RAISE BAD_SUBSCRIPTION_ID;
17:17:49 2773  	 END;
17:17:49 2774  
17:17:49 2775  	 var_local_result := NULL;
17:17:49 2776  
17:17:49 2777  	 -- Check charges for each invoice associated with gived subscription
17:17:49 2778  	 FOR f_invoice IN (
17:17:49 2779  	   SELECT DISTINCT
17:17:49 2780  	     LICENSE.INVOICE_ID as "ID"
17:17:49 2781  	   FROM
17:17:49 2782  	     LICENSE
17:17:49 2783  	   WHERE
17:17:49 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
17:17:49 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.LICENSE_ACTIVE FROM DUAL )
17:17:49 2786  	 )
17:17:49 2787  	 LOOP
17:17:49 2788  
17:17:49 2789  	   -- Check each charge in invoice
17:17:49 2790  	   FOR f_charge IN (
17:17:49 2791  	     SELECT
17:17:49 2792  	       CHARGE.ID,
17:17:49 2793  	       CHARGE.CHARGE_STATUS_ID,
17:17:49 2794  	       CHARGE.CHARGE_AMOUNT
17:17:49 2795  	     FROM
17:17:49 2796  	       CHARGE
17:17:49 2797  	     WHERE
17:17:49 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
17:17:49 2799  	   )
17:17:49 2800  	   LOOP
17:17:49 2801  
17:17:49 2802  	     -- Charge amount < 0     => it is a refund
17:17:49 2803  	     -- Charge status is OPEN => means that it is not processed yet
17:17:49 2804  	     IF f_charge.CHARGE_AMOUNT < 0
17:17:49 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED THEN
17:17:49 2806  	       var_local_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2807  	     END IF;
17:17:49 2808  
17:17:49 2809  	   END LOOP;
17:17:49 2810  
17:17:49 2811  	 END LOOP;
17:17:49 2812  
17:17:49 2813  	 IF var_local_result IS NULL THEN
17:17:49 2814  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2815  	 ELSE
17:17:49 2816  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2817  	 END IF;
17:17:49 2818  
17:17:49 2819  EXCEPTION
17:17:49 2820  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 2821  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2822  	   SPROC_NAME, 'No such transaction id');
17:17:49 2823  WHEN OTHERS THEN
17:17:49 2824  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
17:17:49 2827  
17:17:49 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
17:17:49 2829  /*
17:17:49 2830  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2831  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2832  */
17:17:49 2833  	 in_group_id	    IN NUMBER,
17:17:49 2834  	 in_offer_chain_id  IN NUMBER,
17:17:49 2835  	 out_result	    OUT NUMBER
17:17:49 2836  ) AS
17:17:49 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
17:17:49 2838  -- VARIABLES
17:17:49 2839  temp_acct_id	    NUMBER;
17:17:49 2840  temp_oc_id	    NUMBER;
17:17:49 2841  -- EXCEPTIONS
17:17:49 2842  BAD_GROUP_ID EXCEPTION;
17:17:49 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:49 2844  BEGIN
17:17:49 2845  	 -- Check that group id exists
17:17:49 2846  	 BEGIN
17:17:49 2847  	   SELECT
17:17:49 2848  	     ACCOUNT.ID into temp_acct_id
17:17:49 2849  	   FROM
17:17:49 2850  	     ACCOUNT
17:17:49 2851  	   WHERE
17:17:49 2852  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 2853  	   EXCEPTION
17:17:49 2854  	     WHEN NO_DATA_FOUND THEN
17:17:49 2855  	       RAISE BAD_GROUP_ID;
17:17:49 2856  	 END;
17:17:49 2857  	 -- Check that offer chain id exists
17:17:49 2858  	 BEGIN
17:17:49 2859  	   SELECT
17:17:49 2860  	     OFFER_CHAIN.ID into temp_oc_id
17:17:49 2861  	   FROM
17:17:49 2862  	     OFFER_CHAIN
17:17:49 2863  	   WHERE
17:17:49 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:49 2865  	   EXCEPTION
17:17:49 2866  	     WHEN NO_DATA_FOUND THEN
17:17:49 2867  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:49 2868  	 END;
17:17:49 2869  	 SELECT
17:17:49 2870  	   COUNT(*) into out_result
17:17:49 2871  	 FROM
17:17:49 2872  	   SUBSCRIPTION
17:17:49 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 2874  	 WHERE
17:17:49 2875  	   ACCOUNT.GROUP_ID = in_group_id
17:17:49 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 2877  	   AND (
17:17:49 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 2879  	   );
17:17:49 2880  
17:17:49 2881  EXCEPTION
17:17:49 2882  WHEN BAD_GROUP_ID THEN
17:17:49 2883  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2884  	   SPROC_NAME, 'No such transaction id');
17:17:49 2885  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:49 2886  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2887  	   SPROC_NAME, 'No such offer chain id');
17:17:49 2888  WHEN OTHERS THEN
17:17:49 2889  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2890  	   sproc_name, 'Unknown error', sqlerrm);
17:17:49 2891  END GET_EXISTING_SUBSCR_NUMBER;
17:17:49 2892  
17:17:49 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
17:17:49 2894  /*
17:17:49 2895  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2896  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2897  */
17:17:49 2898  	 in_group_id	    IN NUMBER,
17:17:49 2899  	 in_offer_chain_id  IN NUMBER,
17:17:49 2900  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 2901  ) AS
17:17:49 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
17:17:49 2903  -- VARIABLES
17:17:49 2904  temp_acct_id	    NUMBER;
17:17:49 2905  temp_oc_id	    NUMBER;
17:17:49 2906  -- EXCEPTIONS
17:17:49 2907  BAD_GROUP_ID EXCEPTION;
17:17:49 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
17:17:49 2909  BEGIN
17:17:49 2910  
17:17:49 2911  	 -- Check that group id exists
17:17:49 2912  	 BEGIN
17:17:49 2913  	   SELECT
17:17:49 2914  	     ACCOUNT.ID into temp_acct_id
17:17:49 2915  	   FROM
17:17:49 2916  	     ACCOUNT
17:17:49 2917  	   WHERE
17:17:49 2918  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 2919  	   EXCEPTION
17:17:49 2920  	     WHEN NO_DATA_FOUND THEN
17:17:49 2921  	       RAISE BAD_GROUP_ID;
17:17:49 2922  	 END;
17:17:49 2923  	 -- Check that offer chain id exists
17:17:49 2924  	 BEGIN
17:17:49 2925  	   SELECT
17:17:49 2926  	     OFFER_CHAIN.ID into temp_oc_id
17:17:49 2927  	   FROM
17:17:49 2928  	     OFFER_CHAIN
17:17:49 2929  	   WHERE
17:17:49 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:49 2931  	   EXCEPTION
17:17:49 2932  	     WHEN NO_DATA_FOUND THEN
17:17:49 2933  	       RAISE BAD_OFFER_CHAIN_ID;
17:17:49 2934  	 END;
17:17:49 2935  
17:17:49 2936  	 OPEN out_result_set FOR
17:17:49 2937  	 SELECT
17:17:49 2938  	   SUBSCRIPTION.ID
17:17:49 2939  	 FROM
17:17:49 2940  	   SUBSCRIPTION
17:17:49 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 2942  	 WHERE
17:17:49 2943  	   ACCOUNT.GROUP_ID = in_group_id
17:17:49 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 2945  	   AND (
17:17:49 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 2947  	   );
17:17:49 2948  
17:17:49 2949  EXCEPTION
17:17:49 2950  WHEN BAD_GROUP_ID THEN
17:17:49 2951  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2952  	   SPROC_NAME, 'No such transaction id');
17:17:49 2953  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:49 2954  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2955  	   SPROC_NAME, 'No such offer chain id');
17:17:49 2956  WHEN OTHERS THEN
17:17:49 2957  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2958  	   sproc_name, 'Unknown error', sqlerrm);
17:17:49 2959  END GET_EXISTING_SUBSCR_IDS;
17:17:49 2960  
17:17:49 2961  PROCEDURE ADD_META_DATA (
17:17:49 2962  /*
17:17:49 2963  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 2964  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 2965  */
17:17:49 2966  	 in_subscription_id IN NUMBER,
17:17:49 2967  	 in_name	    IN VARCHAR2,
17:17:49 2968  	 in_value	    IN VARCHAR2,
17:17:49 2969  	 in_created_by	    IN VARCHAR2
17:17:49 2970  ) AS
17:17:49 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
17:17:49 2972  BEGIN
17:17:49 2973  
17:17:49 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
17:17:49 2975  	   ID,
17:17:49 2976  	   SUBSCRIPTION_ID,
17:17:49 2977  	   NAME,
17:17:49 2978  	   VALUE,
17:17:49 2979  	   CREATE_DATE,
17:17:49 2980  	   CREATED_BY
17:17:49 2981  	 ) VALUES (
17:17:49 2982  	   SUBMD_ID_SEQ.nextVal,
17:17:49 2983  	   in_subscription_id,
17:17:49 2984  	   in_name,
17:17:49 2985  	   in_value,
17:17:49 2986  	   sysdate,
17:17:49 2987  	   in_created_by
17:17:49 2988  	 );
17:17:49 2989  
17:17:49 2990  EXCEPTION
17:17:49 2991  WHEN OTHERS THEN
17:17:49 2992  	 IF SQLCODE = -2291 THEN
17:17:49 2993  	   PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2994  	     SPROC_NAME, 'No such subscription');
17:17:49 2995  	 ELSE
17:17:49 2996  	   PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
17:17:49 2998  	 END IF;
17:17:49 2999  END ADD_META_DATA;
17:17:49 3000  
17:17:49 3001  /******************************************************************************/
17:17:49 3002  
17:17:49 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
17:17:49 3004  /*
17:17:49 3005  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:49 3006  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 3007  */
17:17:49 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
17:17:49 3009  	 out_result_set       OUT SYS_REFCURSOR
17:17:49 3010  ) AS
17:17:49 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
17:17:49 3012  -- Exceptions
17:17:49 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
17:17:49 3014  BEGIN
17:17:49 3015  
17:17:49 3016  	 IF in_subscriptions_ids IS NULL THEN
17:17:49 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
17:17:49 3018  	 END IF;
17:17:49 3019  
17:17:49 3020  	 OPEN out_result_set FOR
17:17:49 3021  	 SELECT
17:17:49 3022  	   SMD.SUBSCRIPTION_ID,
17:17:49 3023  	   SMD.NAME,
17:17:49 3024  	   SMD.VALUE
17:17:49 3025  	 FROM
17:17:49 3026  	   SUBSCRIPTION_META_DATA SMD
17:17:49 3027  	 WHERE
17:17:49 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
17:17:49 3029  
17:17:49 3030  EXCEPTION
17:17:49 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
17:17:49 3032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
17:17:49 3034  WHEN OTHERS THEN
17:17:49 3035  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 3037  END GET_SUBSCRIPTIONS_META_DATA;
17:17:49 3038  
17:17:49 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
17:17:49 3040  /*
17:17:49 3041  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 3042  */
17:17:49 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
17:17:49 3044  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 3045  ) AS
17:17:49 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
17:17:49 3047  BEGIN
17:17:49 3048  	 OPEN out_result_set FOR
17:17:49 3049  	 SELECT subscription.id FROM
17:17:49 3050  	   subscription
17:17:49 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
17:17:49 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
17:17:49 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
17:17:49 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
17:17:49 3055  	 WHERE transaction.order_id = in_order_id;
17:17:49 3056  EXCEPTION
17:17:49 3057  WHEN OTHERS THEN
17:17:49 3058  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
17:17:49 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
17:17:49 3061  
17:17:49 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
17:17:49 3063  	(
17:17:49 3064  /*
17:17:49 3065  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 3066  */
17:17:49 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:49 3068  	 out_result_set      OUT SYS_REFCURSOR
17:17:49 3069  )
17:17:49 3070  AS
17:17:49 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
17:17:49 3072  BEGIN
17:17:49 3073  	 OPEN out_result_set FOR
17:17:49 3074  	 SELECT
17:17:49 3075  	   c.ID,
17:17:49 3076  	   c.TRANSACTION_ID,
17:17:49 3077  	   c.INSTRUMENT_ID,
17:17:49 3078  	   c.INSTRUMENT_TYPE_ID,
17:17:49 3079  	   c.CHARGE_AMOUNT,
17:17:49 3080  	   c.CREATE_DATE,
17:17:49 3081  	   c.CREATED_BY,
17:17:49 3082  	   c.INVOICE_ID
17:17:49 3083  	  FROM
17:17:49 3084  	   subscription s,
17:17:49 3085  	   license l,
17:17:49 3086  	   charge c
17:17:49 3087  	 WHERE
17:17:49 3088  	   s.id = l.subscription_id and
17:17:49 3089  	   l.invoice_id = c.invoice_id and
17:17:49 3090  	   c.charge_status_id = GLOBAL_STATUSES_V15.CHARGE_OPENED and
17:17:49 3091  	   exists (
17:17:49 3092  	     select null
17:17:49 3093  	     from transaction t
17:17:49 3094  	     where
17:17:49 3095  	       t.id = c.transaction_id
17:17:49 3096  	   ) and
17:17:49 3097  	   s.id = in_subscription_id;
17:17:49 3098  EXCEPTION
17:17:49 3099  WHEN OTHERS THEN
17:17:49 3100  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
17:17:49 3102  END GET_OPEN_CHARGES_BY_SUBID;
17:17:49 3103  
17:17:49 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
17:17:49 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
17:17:49 3106  ) RETURN NUMBER
17:17:49 3107  AS
17:17:49 3108  var_gift_certificate_id NUMBER;
17:17:49 3109  BEGIN
17:17:49 3110  	     SELECT id INTO var_gift_certificate_id
17:17:49 3111  	     FROM
17:17:49 3112  	       gift_certificate gc
17:17:49 3113  	     WHERE
17:17:49 3114  	       gc.finalized_invoice_id in (
17:17:49 3115  		 SELECT invoice_id
17:17:49 3116  		 FROM (
17:17:49 3117  		   SELECT l.invoice_id
17:17:49 3118  		   FROM
17:17:49 3119  		     license l
17:17:49 3120  		   WHERE
17:17:49 3121  		     l.subscription_id = in_subscription_id
17:17:49 3122  		   ORDER BY l.create_date asc
17:17:49 3123  		 )
17:17:49 3124  	       )
17:17:49 3125  	       and rownum <= 1;
17:17:49 3126  	     return var_gift_certificate_id;
17:17:49 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
17:17:49 3128  
17:17:49 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
17:17:49 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
17:17:49 3131  ) RETURN VARCHAR2
17:17:49 3132  AS
17:17:49 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
17:17:49 3134  BEGIN
17:17:49 3135  	     SELECT code INTO var_gift_certificate_code
17:17:49 3136  	     FROM
17:17:49 3137  	       gift_certificate gc
17:17:49 3138  	     WHERE
17:17:49 3139  	       gc.finalized_invoice_id in (
17:17:49 3140  		 SELECT invoice_id
17:17:49 3141  		 FROM (
17:17:49 3142  		   SELECT l.invoice_id
17:17:49 3143  		   FROM
17:17:49 3144  		     license l
17:17:49 3145  		   WHERE
17:17:49 3146  		     l.subscription_id = in_subscription_id
17:17:49 3147  		 )
17:17:49 3148  	       )
17:17:49 3149  	       and rownum <= 1;
17:17:49 3150  	     return var_gift_certificate_code;
17:17:49 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
17:17:49 3152  
17:17:49 3153  
17:17:49 3154  
17:17:49 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
17:17:49 3156  	 out_result_set      OUT SYS_REFCURSOR
17:17:49 3157  )
17:17:49 3158  AS
17:17:49 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
17:17:49 3160  BEGIN
17:17:49 3161  	 OPEN out_result_set FOR
17:17:49 3162  	       SELECT
17:17:49 3163  		   s.id,
17:17:49 3164  		   s.instrument_type_id,
17:17:49 3165  		   s.instrument_id,
17:17:49 3166  		   a.group_id,
17:17:49 3167  		   s.offer_chain_id
17:17:49 3168  	       FROM
17:17:49 3169  		   core_owner.subscription s,
17:17:49 3170  		   core_owner.account a
17:17:49 3171  	       WHERE
17:17:49 3172  		   a.id = s.account_id AND(
17:17:49 3173  		       s.offer_chain_id = 1745992781 OR
17:17:49 3174  		       s.offer_chain_id = 3902149773 OR
17:17:49 3175  		       s.offer_chain_id = 2240201337) AND
17:17:49 3176  		   NOT EXISTS
17:17:49 3177  		   (
17:17:49 3178  		       SELECT
17:17:49 3179  			   1
17:17:49 3180  		       FROM
17:17:49 3181  			   core_owner.subscription ss
17:17:49 3182  		       WHERE
17:17:49 3183  			   ss.account_id = a.id AND(
17:17:49 3184  			       ss.offer_chain_id = 2794122734 OR
17:17:49 3185  			       ss.offer_chain_id = 3564368005 OR
17:17:49 3186  			       ss.offer_chain_id = 757934392)) AND
17:17:49 3187  		   rownum < 5000;
17:17:49 3188  END GET_ACTIVE_MEU_SUBS;
17:17:49 3189  
17:17:49 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
17:17:49 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:49 3192  	 out_offer_id	     OUT NUMBER
17:17:49 3193  )
17:17:49 3194  AS
17:17:49 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
17:17:49 3196  BEGIN
17:17:49 3197  	 SELECT OFFER_ID INTO out_offer_id
17:17:49 3198  	 FROM LICENSE L,
17:17:49 3199  	 (
17:17:49 3200  	   SELECT MIN(ID) ID FROM LICENSE
17:17:49 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
17:17:49 3202  	   AND LICENSE_STATUS_ID = 2
17:17:49 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
17:17:49 3204  	 ) EARLIEST_ACTIVE_LICENSE
17:17:49 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
17:17:49 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
17:17:49 3207  
17:17:49 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
17:17:49 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
17:17:49 3210  	 out_license_id        OUT NUMBER
17:17:49 3211  )
17:17:49 3212  AS
17:17:49 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
17:17:49 3214  BEGIN
17:17:49 3215  	 SELECT MIN(ID) into out_license_id
17:17:49 3216  	 FROM LICENSE
17:17:49 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
17:17:49 3218  	 AND LICENSE_STATUS_ID = 2
17:17:49 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
17:17:49 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
17:17:49 3221  
17:17:49 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
17:17:49 3223  	 out_result_set      OUT SYS_REFCURSOR
17:17:49 3224  )
17:17:49 3225  AS
17:17:49 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
17:17:49 3227  BEGIN
17:17:49 3228  	 OPEN out_result_set FOR
17:17:49 3229  	   SELECT
17:17:49 3230  	     s.id
17:17:49 3231  	   FROM
17:17:49 3232  	     core_owner.transaction t
17:17:49 3233  	   INNER JOIN
17:17:49 3234  	     core_owner.charge c
17:17:49 3235  	   ON
17:17:49 3236  	     c.transaction_id = t.id
17:17:49 3237  	   INNER JOIN
17:17:49 3238  	     core_owner.invoice i
17:17:49 3239  	   ON
17:17:49 3240  	     i.id = c.invoice_id
17:17:49 3241  	   INNER JOIN
17:17:49 3242  	     core_owner.license l
17:17:49 3243  	   ON
17:17:49 3244  	     i.id = l.invoice_id
17:17:49 3245  	   INNER JOIN
17:17:49 3246  	     core_owner.subscription s
17:17:49 3247  	   ON
17:17:49 3248  	     l.subscription_id = s.id
17:17:49 3249  	   INNER JOIN
17:17:49 3250  	     core_owner.account a
17:17:49 3251  	   ON
17:17:49 3252  	     s.account_id = a.id
17:17:49 3253  	   JOIN
17:17:49 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
17:17:49 3255  	   ON
17:17:49 3256  	     t.order_id = ccad.merchant_order_number
17:17:49 3257  	   WHERE
17:17:49 3258  	     ccad.chargeback_category = 'RECD'
17:17:49 3259  	   AND s.subscription_status_id = 1;
17:17:49 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
17:17:49 3261  
17:17:49 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
17:17:49 3263  	 out_result_set      OUT SYS_REFCURSOR
17:17:49 3264  )
17:17:49 3265  AS
17:17:49 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
17:17:49 3267  BEGIN
17:17:49 3268  	 OPEN out_result_set FOR
17:17:49 3269  	   SELECT
17:17:49 3270  	     s.id
17:17:49 3271  	   FROM
17:17:49 3272  	     core_owner.transaction t
17:17:49 3273  	   INNER JOIN
17:17:49 3274  	     core_owner.charge c
17:17:49 3275  	   ON
17:17:49 3276  	     c.transaction_id = t.id
17:17:49 3277  	   INNER JOIN
17:17:49 3278  	     core_owner.invoice i
17:17:49 3279  	   ON
17:17:49 3280  	     i.id = c.invoice_id
17:17:49 3281  	   INNER JOIN
17:17:49 3282  	     core_owner.license l
17:17:49 3283  	   ON
17:17:49 3284  	     i.id = l.invoice_id
17:17:49 3285  	   INNER JOIN
17:17:49 3286  	     core_owner.subscription s
17:17:49 3287  	   ON
17:17:49 3288  	     l.subscription_id = s.id
17:17:49 3289  	   INNER JOIN
17:17:49 3290  	     core_owner.account a
17:17:49 3291  	   ON
17:17:49 3292  	     s.account_id = a.id
17:17:49 3293  	   INNER JOIN
17:17:49 3294  	     core_owner.rcn_pp_trans_detail ptd
17:17:49 3295  	   ON
17:17:49 3296  	     t.order_id = ptd.invoice_id
17:17:49 3297  	   WHERE
17:17:49 3298  	     ptd.trans_status = 'D'
17:17:49 3299  	   AND s.subscription_status_id = 1;
17:17:49 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
17:17:49 3301  
17:17:49 3302  END PROCS_SUBSCRIPTION_V15;
17:17:49 3303  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.25
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE IS_INVOICE_FOR_GC (
17:17:49   4  	in_invoice_id IN NUMBER,
17:17:49   5  	out_result    OUT NUMBER
17:17:49   6  ) AS
17:17:49   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
17:17:49   8  var_is_for_gc NUMBER;
17:17:49   9  BEGIN
17:17:49  10  	SELECT
17:17:49  11  	  count(1) into var_is_for_gc
17:17:49  12  	FROM GIFT_CERTIFICATE GC
17:17:49  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
17:17:49  14  
17:17:49  15  	IF var_is_for_gc > 0 THEN
17:17:49  16  	  out_result := 1;
17:17:49  17  	ELSE
17:17:49  18  	  out_result := 0;
17:17:49  19  	END IF;
17:17:49  20  END IS_INVOICE_FOR_GC;
17:17:49  21  
17:17:49  22  PROCEDURE CREATE_INVOICE(
17:17:49  23  /*
17:17:49  24  Throws exceptions:
17:17:49  25  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49  26  */
17:17:49  27  	  in_invoice_status IN NUMBER,
17:17:49  28  	  in_created_by     IN VARCHAR2,
17:17:49  29  	  in_tax_exempt_id  IN VARCHAR2,
17:17:49  30  	  out_invoice_id    OUT NUMBER
17:17:49  31  ) AS
17:17:49  32  -- VARIABLES
17:17:49  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
17:17:49  34  var_new_invoice_id NUMBER;
17:17:49  35  -- EXCEPTIONS
17:17:49  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49  37  BEGIN
17:17:49  38  
17:17:49  39  	PROCS_INVOICE_CRU_V15.CREATE_INVOICE(
17:17:49  40  	  out_invoice_id		 => var_new_invoice_id,
17:17:49  41  	  in_created_by 		 => in_created_by,
17:17:49  42  	  in_invoice_status_id		 => in_invoice_status,
17:17:49  43  	  in_tax_exempt_id		 => in_tax_exempt_id
17:17:49  44  	);
17:17:49  45  
17:17:49  46  	out_invoice_id := var_new_invoice_id;
17:17:49  47  
17:17:49  48  EXCEPTION
17:17:49  49  WHEN OTHERS THEN
17:17:49  50  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49  52  END CREATE_INVOICE;
17:17:49  53  
17:17:49  54  /************************************************************/
17:17:49  55  
17:17:49  56  PROCEDURE GET_PENDING_INVOICES (
17:17:49  57  /*
17:17:49  58  Throws exceptions:
17:17:49  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49  60  */
17:17:49  61  	out_result_set1      OUT SYS_REFCURSOR,
17:17:49  62  	out_result_set2      OUT SYS_REFCURSOR,
17:17:49  63  	out_result_set3      OUT SYS_REFCURSOR,
17:17:49  64  	in_row_number	     IN NUMBER DEFAULT NULL
17:17:49  65  ) AS
17:17:49  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
17:17:49  67  -- COMSTANTS
17:17:49  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
17:17:49  69  -- VARIABLES
17:17:49  70  var_row_number NUMBER;
17:17:49  71  BEGIN
17:17:49  72  
17:17:49  73  	IF in_row_number IS NULL THEN
17:17:49  74  	  var_row_number := DEFAULT_ROW_NUMBER;
17:17:49  75  	ELSE
17:17:49  76  	  var_row_number := in_row_number;
17:17:49  77  	END IF;
17:17:49  78  
17:17:49  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
17:17:49  80  	OPEN out_result_set1 FOR
17:17:49  81  SELECT * FROM
17:17:49  82  (
17:17:49  83  	SELECT
17:17:49  84  	  INVOICE.ID
17:17:49  85  	FROM
17:17:49  86  	  CHARGE
17:17:49  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
17:17:49  88  	WHERE
17:17:49  89  	  EXISTS(
17:17:49  90  	    SELECT NULL
17:17:49  91  	    FROM TRANSACTION
17:17:49  92  	    WHERE
17:17:49  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
17:17:49  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
17:17:49  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V15.TRUE
17:17:49  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
17:17:49  97  	  )
17:17:49  98  	  AND
17:17:49  99  	  NOT EXISTS(
17:17:49 100  	    SELECT NULL
17:17:49 101  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:49 102  	    WHERE PROCESS_NAME = SPROC_NAME
17:17:49 103  	      AND GENERIC_ID = INVOICE.ID
17:17:49 104  	  )
17:17:49 105  	  AND ROWNUM <= var_row_number*10
17:17:49 106  	  ORDER BY dbms_random.value
17:17:49 107  ) WHERE
17:17:49 108  	  ROWNUM <= var_row_number;
17:17:49 109  
17:17:49 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
17:17:49 111  	OPEN out_result_set2 FOR
17:17:49 112  	SELECT
17:17:49 113  	  INVOICE.ID
17:17:49 114  	FROM
17:17:49 115  	  INVOICE
17:17:49 116  	WHERE
17:17:49 117  	  1 = 2 AND
17:17:49 118  	  (
17:17:49 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V15.INVOICE_OPEN
17:17:49 120  	  )
17:17:49 121  	  AND NOT EXISTS(
17:17:49 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED AND ROWNUM <= 1
17:17:49 123  	  )
17:17:49 124  	  AND EXISTS (
17:17:49 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V15.CHARGE_OPENED AND ROWNUM <= 1
17:17:49 126  	  )
17:17:49 127  	  AND INVOICE.ID NOT IN
17:17:49 128  	    (
17:17:49 129  	      SELECT GENERIC_ID
17:17:49 130  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:49 131  	      WHERE
17:17:49 132  		PROCESS_NAME = SPROC_NAME
17:17:49 133  	    )
17:17:49 134  	  AND ROWNUM <= var_row_number;
17:17:49 135  
17:17:49 136  	-- Invoices not marked as CLOSED with no payments(charges).
17:17:49 137  	OPEN out_result_set3 FOR
17:17:49 138  	SELECT
17:17:49 139  	  INVOICE.ID
17:17:49 140  	FROM
17:17:49 141  	  INVOICE
17:17:49 142  	WHERE
17:17:49 143  	  1 = 2 AND
17:17:49 144  	  (
17:17:49 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V15.INVOICE_OPEN
17:17:49 146  	  )
17:17:49 147  	  AND NOT EXISTS (
17:17:49 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
17:17:49 149  	  )
17:17:49 150  	  AND INVOICE.ID NOT IN
17:17:49 151  	    (
17:17:49 152  	      SELECT GENERIC_ID
17:17:49 153  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:49 154  	      WHERE
17:17:49 155  		PROCESS_NAME = SPROC_NAME
17:17:49 156  	    )
17:17:49 157  	  AND ROWNUM <= var_row_number;
17:17:49 158  
17:17:49 159  EXCEPTION
17:17:49 160  WHEN OTHERS THEN
17:17:49 161  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 163  END GET_PENDING_INVOICES;
17:17:49 164  
17:17:49 165  /************************************************************/
17:17:49 166  
17:17:49 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
17:17:49 168  	in_invoice_id IN  NUMBER
17:17:49 169  ) RETURN NUMBER AS
17:17:49 170  var_amount NUMBER;
17:17:49 171  BEGIN
17:17:49 172  
17:17:49 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
17:17:49 174  	RETURN var_amount;
17:17:49 175  
17:17:49 176  END;
17:17:49 177  
17:17:49 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:49 179  /*
17:17:49 180  Throws exceptions:
17:17:49 181  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 182  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 183  */
17:17:49 184  	in_invoice_id IN  NUMBER,
17:17:49 185  	out_amount    OUT NUMBER
17:17:49 186  ) AS
17:17:49 187  -- VARIABLES
17:17:49 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
17:17:49 189  temp_invoice_id	     NUMBER;
17:17:49 190  var_total_amount	     NUMBER(10,6);
17:17:49 191  var_final_amount	     NUMBER(10,2);
17:17:49 192  var_line_item_amount   NUMBER(10,6);
17:17:49 193  
17:17:49 194  var_line_items_set     SYS_REFCURSOR;
17:17:49 195  var_line_item_id	     NUMBER;
17:17:49 196  var_line_item_quantity NUMBER;
17:17:49 197  var_line_item_price    NUMBER (10,2);
17:17:49 198  
17:17:49 199  var_discount_fixed_amount NUMBER (10,2);
17:17:49 200  var_discount_percent_amount NUMBER (10,2);
17:17:49 201  
17:17:49 202  -- EXCEPTIONS
17:17:49 203  BAD_INVOICE_ID		    EXCEPTION;
17:17:49 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
17:17:49 205  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 206  BEGIN
17:17:49 207  
17:17:49 208  	var_total_amount := 0;
17:17:49 209  
17:17:49 210  	-- Check that given invoice exists
17:17:49 211  	BEGIN
17:17:49 212  	  SELECT
17:17:49 213  	    INVOICE.ID into temp_invoice_id
17:17:49 214  	  FROM
17:17:49 215  	    INVOICE
17:17:49 216  	  WHERE
17:17:49 217  	    INVOICE.ID = in_invoice_id
17:17:49 218  	    AND ROWNUM <= 1;
17:17:49 219  	  EXCEPTION
17:17:49 220  	    WHEN NO_DATA_FOUND THEN
17:17:49 221  	      RAISE BAD_INVOICE_ID;
17:17:49 222  	END;
17:17:49 223  
17:17:49 224  	-- Calculate amount for each line item in invoice
17:17:49 225  	FOR f_line_item IN (
17:17:49 226  	  SELECT
17:17:49 227  	    LINE_ITEM.ID
17:17:49 228  	  FROM
17:17:49 229  	    LINE_ITEM
17:17:49 230  	  WHERE
17:17:49 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
17:17:49 232  	)
17:17:49 233  	LOOP
17:17:49 234  	  BEGIN
17:17:49 235  	    PROCS_LINE_ITEMS_V15.CALCULATE_LINE_ITEM_AMOUNT(
17:17:49 236  	      in_line_item_id => f_line_item.ID,
17:17:49 237  	      out_amount      => var_line_item_amount
17:17:49 238  	    );
17:17:49 239  	    var_total_amount := var_total_amount + var_line_item_amount;
17:17:49 240  	    EXCEPTION
17:17:49 241  	      WHEN OTHERS THEN
17:17:49 242  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
17:17:49 244  	  END;
17:17:49 245  	END LOOP;
17:17:49 246  	var_final_amount := var_total_amount;
17:17:49 247  	out_amount := var_final_amount;
17:17:49 248  
17:17:49 249  EXCEPTION
17:17:49 250  WHEN BAD_INVOICE_ID THEN
17:17:49 251  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 252  	  SPROC_NAME, 'No such invoice');
17:17:49 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
17:17:49 254  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
17:17:49 256  WHEN OTHERS THEN
17:17:49 257  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 259  END;
17:17:49 260  
17:17:49 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
17:17:49 262  /*
17:17:49 263  Throws exceptions:
17:17:49 264  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 265  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 266  */
17:17:49 267  	in_invoice_id  IN  NUMBER,
17:17:49 268  	out_account_id OUT NUMBER
17:17:49 269  ) AS
17:17:49 270  -- VARIABLES
17:17:49 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
17:17:49 272  temp_gc_account_id NUMBER;
17:17:49 273  temp_ss_account_id NUMBER;
17:17:49 274  temp_invoice_id	 NUMBER;
17:17:49 275  -- EXCEPTIONS
17:17:49 276  BAD_INVOICE_ID	   EXCEPTION;
17:17:49 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
17:17:49 278  BEGIN
17:17:49 279  
17:17:49 280  	-- Check that given invoice exists
17:17:49 281  	BEGIN
17:17:49 282  	  SELECT
17:17:49 283  	    INVOICE.ID into temp_invoice_id
17:17:49 284  	  FROM
17:17:49 285  	    INVOICE
17:17:49 286  	  WHERE
17:17:49 287  	    INVOICE.ID = in_invoice_id;
17:17:49 288  	  EXCEPTION
17:17:49 289  	    WHEN NO_DATA_FOUND THEN
17:17:49 290  	      RAISE BAD_INVOICE_ID;
17:17:49 291  	END;
17:17:49 292  
17:17:49 293  	-- Try to find gift certificate with given invoice
17:17:49 294  	BEGIN
17:17:49 295  	  SELECT
17:17:49 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
17:17:49 297  	  FROM
17:17:49 298  	    GIFT_CERTIFICATE
17:17:49 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
17:17:49 300  	  WHERE
17:17:49 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
17:17:49 302  	    AND ROWNUM <= 1;
17:17:49 303  	  EXCEPTION
17:17:49 304  	    WHEN NO_DATA_FOUND THEN
17:17:49 305  	      temp_gc_account_id := NULL;
17:17:49 306  	END;
17:17:49 307  
17:17:49 308  	-- check subscriptions for given invoice
17:17:49 309  	IF temp_gc_account_id IS NOT NULL THEN
17:17:49 310  	  out_account_id := temp_gc_account_id;
17:17:49 311  	ELSE
17:17:49 312  	  BEGIN
17:17:49 313  	    SELECT
17:17:49 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
17:17:49 315  	    FROM
17:17:49 316  	      LICENSE
17:17:49 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 319  	    WHERE
17:17:49 320  	      LICENSE.INVOICE_ID = in_invoice_id
17:17:49 321  	      AND ROWNUM <= 1;
17:17:49 322  	    EXCEPTION
17:17:49 323  	      WHEN NO_DATA_FOUND THEN
17:17:49 324  		temp_ss_account_id := NULL;
17:17:49 325  	  END;
17:17:49 326  	  IF temp_ss_account_id IS NULL THEN
17:17:49 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
17:17:49 328  	  ELSE
17:17:49 329  	    out_account_id := temp_ss_account_id;
17:17:49 330  	  END IF;
17:17:49 331  	END IF;
17:17:49 332  
17:17:49 333  EXCEPTION
17:17:49 334  WHEN BAD_INVOICE_ID THEN
17:17:49 335  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 336  	  SPROC_NAME, 'No such invoice');
17:17:49 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
17:17:49 338  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 339  	  SPROC_NAME, 'Could not find account by given invoice id');
17:17:49 340  WHEN OTHERS THEN
17:17:49 341  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 343  END GET_ACCOUNT_BY_INVOICE_ID;
17:17:49 344  
17:17:49 345  /*****************************************************************/
17:17:49 346  
17:17:49 347  PROCEDURE GET_INVOICE_DETAILS (
17:17:49 348  /*
17:17:49 349  Throws exceptions:
17:17:49 350  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 351  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 352  */
17:17:49 353  	in_invoice_id	   IN  NUMBER,
17:17:49 354  	out_group_id	   OUT NUMBER,
17:17:49 355  	out_status_id	   OUT NUMBER,
17:17:49 356  	out_line_items_set OUT SYS_REFCURSOR,
17:17:49 357  	out_pp_charges_set OUT SYS_REFCURSOR,
17:17:49 358  	out_cc_charges_set OUT SYS_REFCURSOR,
17:17:49 359  	out_gc_charges_set OUT SYS_REFCURSOR
17:17:49 360  ) AS
17:17:49 361  -- VARIABLES
17:17:49 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
17:17:49 363  
17:17:49 364  -- EXCEPTIONS
17:17:49 365  BAD_INVOICE_ID	     EXCEPTION;
17:17:49 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
17:17:49 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 368  BEGIN
17:17:49 369  
17:17:49 370  	-- get invoice status
17:17:49 371  	BEGIN
17:17:49 372  	  SELECT
17:17:49 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
17:17:49 374  	  FROM
17:17:49 375  	    INVOICE
17:17:49 376  	  WHERE
17:17:49 377  	    INVOICE.ID = in_invoice_id;
17:17:49 378  	  EXCEPTION
17:17:49 379  	    WHEN NO_DATA_FOUND THEN
17:17:49 380  	      RAISE BAD_INVOICE_ID;
17:17:49 381  	END;
17:17:49 382  
17:17:49 383  	-- get group id
17:17:49 384  	BEGIN
17:17:49 385  	  PROCS_INVOICE_V15.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
17:17:49 386  	  EXCEPTION
17:17:49 387  	    WHEN OTHERS THEN
17:17:49 388  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
17:17:49 390  	END;
17:17:49 391  
17:17:49 392  	-- get all line items for given invoice
17:17:49 393  	OPEN out_line_items_set FOR
17:17:49 394  	SELECT
17:17:49 395  	  LINE_ITEM.AMOUNT,
17:17:49 396  	  LINE_ITEM.ID,
17:17:49 397  	  LINE_ITEM.CREATED_BY,
17:17:49 398  	  LINE_ITEM.CREATE_DATE,
17:17:49 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
17:17:49 400  	  LINE_ITEM.TAXES_AMOUNT,
17:17:49 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
17:17:49 402  	  LINE_ITEM.INVOICE_ID
17:17:49 403  	FROM
17:17:49 404  	  LINE_ITEM
17:17:49 405  	WHERE
17:17:49 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
17:17:49 407  
17:17:49 408  	-- get all pp charges for given invoice
17:17:49 409  	OPEN out_pp_charges_set FOR
17:17:49 410  	SELECT
17:17:49 411  	  CHARGE.ID as "CHARGE_ID",
17:17:49 412  	  CHARGE_AMOUNT,
17:17:49 413  	  CHARGE.INSTRUMENT_ID,
17:17:49 414  	  CHARGE.CHARGE_STATUS_ID
17:17:49 415  	FROM
17:17:49 416  	  CHARGE
17:17:49 417  	WHERE
17:17:49 418  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL;
17:17:49 420  
17:17:49 421  	-- get all credir cards for given invoice
17:17:49 422  	OPEN out_cc_charges_set FOR
17:17:49 423  	SELECT
17:17:49 424  	  CHARGE.ID as "CHARGE_ID",
17:17:49 425  	  CHARGE.CHARGE_AMOUNT,
17:17:49 426  	  CHARGE.INSTRUMENT_ID,
17:17:49 427  	  CHARGE.CHARGE_STATUS_ID
17:17:49 428  	FROM
17:17:49 429  	  CHARGE
17:17:49 430  	WHERE
17:17:49 431  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD;
17:17:49 433  
17:17:49 434  	OPEN out_gc_charges_set FOR
17:17:49 435  	SELECT
17:17:49 436  	  CHARGE.ID as "CHARGE_ID",
17:17:49 437  	  CHARGE.CHARGE_AMOUNT,
17:17:49 438  	  CHARGE.INSTRUMENT_ID,
17:17:49 439  	  CHARGE.CHARGE_STATUS_ID
17:17:49 440  	FROM
17:17:49 441  	  CHARGE
17:17:49 442  	WHERE
17:17:49 443  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
17:17:49 445  
17:17:49 446  EXCEPTION
17:17:49 447  WHEN BAD_INVOICE_ID THEN
17:17:49 448  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 449  	  SPROC_NAME, 'No such invoice');
17:17:49 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
17:17:49 451  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
17:17:49 453  WHEN OTHERS THEN
17:17:49 454  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 456  END GET_INVOICE_DETAILS;
17:17:49 457  
17:17:49 458  /******************************************************/
17:17:49 459  -- norlov: #38796
17:17:49 460  PROCEDURE GET_TRANSACTION_INVOICE (
17:17:49 461  /*
17:17:49 462  Throws exceptions:
17:17:49 463  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 464  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 465  */
17:17:49 466  	in_transaction_id  IN  NUMBER,
17:17:49 467  	out_result_set	      OUT SYS_REFCURSOR
17:17:49 468  ) AS
17:17:49 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
17:17:49 470  -- VARIABLES
17:17:49 471  temp_transaction_id  NUMBER;
17:17:49 472  var_invoice_id	   NUMBER;
17:17:49 473  var_subscription_id  NUMBER;
17:17:49 474  var_offer_chain_id   NUMBER;
17:17:49 475  var_offer_chain_name VARCHAR2(255);
17:17:49 476  -- EXCEPTIONS
17:17:49 477  BAD_TRANSACTION_ID     EXCEPTION;
17:17:49 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 479  BEGIN
17:17:49 480   -- check if there is the transaction
17:17:49 481  	BEGIN
17:17:49 482  	  SELECT
17:17:49 483  	    TRANSACTION.ID into temp_transaction_id
17:17:49 484  	  FROM
17:17:49 485  	    TRANSACTION
17:17:49 486  	  WHERE
17:17:49 487  	    TRANSACTION.ID = in_transaction_id;
17:17:49 488  	  EXCEPTION
17:17:49 489  	    WHEN NO_DATA_FOUND THEN
17:17:49 490  	      RAISE BAD_TRANSACTION_ID;
17:17:49 491  	END;
17:17:49 492  
17:17:49 493  	-- Get invoice id
17:17:49 494  	SELECT DISTINCT
17:17:49 495  	  CHARGE.INVOICE_ID into var_invoice_id
17:17:49 496  	FROM
17:17:49 497  	  CHARGE
17:17:49 498  	WHERE
17:17:49 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
17:17:49 500  
17:17:49 501  	-- Get subscription id if exists
17:17:49 502  	BEGIN
17:17:49 503  	  SELECT DISTINCT
17:17:49 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
17:17:49 505  	  FROM
17:17:49 506  	    LICENSE
17:17:49 507  	  WHERE
17:17:49 508  	    LICENSE.INVOICE_ID = var_invoice_id;
17:17:49 509  	  EXCEPTION
17:17:49 510  	    WHEN NO_DATA_FOUND THEN
17:17:49 511  	      var_subscription_id := NULL;
17:17:49 512  	END;
17:17:49 513  
17:17:49 514  	IF var_subscription_id IS NOT NULL THEN
17:17:49 515  	  -- Fetch offer chain from subscription
17:17:49 516  	  SELECT
17:17:49 517  	    OFFER_CHAIN.ID,
17:17:49 518  	    OFFER_CHAIN.NAME
17:17:49 519  	    into
17:17:49 520  	    var_offer_chain_id,
17:17:49 521  	    var_offer_chain_name
17:17:49 522  	  FROM
17:17:49 523  	    OFFER_CHAIN
17:17:49 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 525  	  WHERE
17:17:49 526  	    SUBSCRIPTION.ID = var_subscription_id;
17:17:49 527  	ELSE
17:17:49 528  	  -- Fetch offer chain from GC
17:17:49 529  	  SELECT
17:17:49 530  	    OFFER_CHAIN.ID,
17:17:49 531  	    OFFER_CHAIN.NAME
17:17:49 532  	    into
17:17:49 533  	    var_offer_chain_id,
17:17:49 534  	    var_offer_chain_name
17:17:49 535  	  FROM
17:17:49 536  	    OFFER_CHAIN
17:17:49 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 538  	  WHERE
17:17:49 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
17:17:49 540  	END IF;
17:17:49 541  
17:17:49 542  	OPEN out_result_set FOR
17:17:49 543  	SELECT DISTINCT
17:17:49 544  	  var_invoice_id       AS "INVOICE_ID",
17:17:49 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
17:17:49 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
17:17:49 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
17:17:49 548  	FROM
17:17:49 549  	  DUAL;
17:17:49 550  
17:17:49 551  EXCEPTION
17:17:49 552  WHEN BAD_TRANSACTION_ID THEN
17:17:49 553  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 554  	  SPROC_NAME, 'No such transaction');
17:17:49 555  WHEN OTHERS THEN
17:17:49 556  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 558  END GET_TRANSACTION_INVOICE;
17:17:49 559  
17:17:49 560  /******************************************************/
17:17:49 561  
17:17:49 562  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:49 563  /*
17:17:49 564  Throws exceptions:
17:17:49 565  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 566  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 567  */
17:17:49 568  	in_invoice_id		       IN NUMBER,
17:17:49 569  	in_invoice_status_id	       IN NUMBER,
17:17:49 570  	in_updated_by		       IN VARCHAR2
17:17:49 571  ) AS
17:17:49 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
17:17:49 573  -- VARIABLES
17:17:49 574  temp_invoice_id NUMBER;
17:17:49 575  -- EXCEPTIONS
17:17:49 576  BAD_INVOICE_ID		      EXCEPTION;
17:17:49 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
17:17:49 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
17:17:49 579  BEGIN
17:17:49 580  
17:17:49 581  	-- Check if invoice exists
17:17:49 582  	BEGIN
17:17:49 583  	  SELECT
17:17:49 584  	    INVOICE.ID into temp_invoice_id
17:17:49 585  	  FROM
17:17:49 586  	    INVOICE
17:17:49 587  	  WHERE
17:17:49 588  	    INVOICE.ID = in_invoice_id;
17:17:49 589  	  EXCEPTION
17:17:49 590  	    WHEN NO_DATA_FOUND THEN
17:17:49 591  	      RAISE BAD_INVOICE_ID;
17:17:49 592  	END;
17:17:49 593  
17:17:49 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_OPEN
17:17:49 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
17:17:49 596  	  RAISE BAD_INVOICE_STATUS_ID;
17:17:49 597  	END IF;
17:17:49 598  
17:17:49 599  	PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
17:17:49 600  	  in_invoice_id 		 => in_invoice_id,
17:17:49 601  	  in_invoice_status_id		 => in_invoice_status_id,
17:17:49 602  	  in_updated_by 		 => in_updated_by
17:17:49 603  	);
17:17:49 604  
17:17:49 605  EXCEPTION
17:17:49 606  WHEN BAD_INVOICE_STATUS_ID THEN
17:17:49 607  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 608  	  SPROC_NAME, 'Bad invoice status id');
17:17:49 609  WHEN BAD_INVOICE_ID THEN
17:17:49 610  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 611  	  SPROC_NAME, 'No such invoice');
17:17:49 612  WHEN OTHERS THEN
17:17:49 613  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 615  END UPDATE_INVOICE_STATUS;
17:17:49 616  
17:17:49 617  /****************************************************************/
17:17:49 618  
17:17:49 619  FUNCTION IS_INVOICE_PAYING_STARTED (
17:17:49 620  /*
17:17:49 621  Throws exceptions:
17:17:49 622  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 623  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 624  */
17:17:49 625  	in_invoice_id IN NUMBER
17:17:49 626  ) RETURN NUMBER AS
17:17:49 627  -- VARIABLES
17:17:49 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
17:17:49 629  temp_invoice_id		 NUMBER;
17:17:49 630  var_processed_charges_num  NUMBER;
17:17:49 631  var_processed_transac_num  NUMBER;
17:17:49 632  var_success_attempts_num	 NUMBER;
17:17:49 633  var_is_gc 		 NUMBER;
17:17:49 634  -- EXCEPTIONS
17:17:49 635  BAD_INVOICE_ID EXCEPTION;
17:17:49 636  BEGIN
17:17:49 637  
17:17:49 638  	-- Check that invoice exists
17:17:49 639  	BEGIN
17:17:49 640  	  SELECT
17:17:49 641  	    INVOICE.ID into temp_invoice_id
17:17:49 642  	  FROM
17:17:49 643  	    INVOICE
17:17:49 644  	  WHERE
17:17:49 645  	    INVOICE.ID = in_invoice_id;
17:17:49 646  	  EXCEPTION
17:17:49 647  	   WHEN NO_DATA_FOUND THEN
17:17:49 648  	     RAISE BAD_INVOICE_ID;
17:17:49 649  	END;
17:17:49 650  
17:17:49 651  	-- Check that there are tansaction attempts with status success
17:17:49 652  	SELECT
17:17:49 653  	  COUNT(1) into var_success_attempts_num
17:17:49 654  	FROM
17:17:49 655  	  TRANSACTION_ATTEMPT ta,
17:17:49 656  	  TRANSACTION t,
17:17:49 657  	  CHARGE c
17:17:49 658  	WHERE
17:17:49 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS and
17:17:49 660  	  ta.transaction_id = t.id and
17:17:49 661  	  c.transaction_id = t.id and
17:17:49 662  	  t.is_refund = GLOBAL_CONSTANTS_V15.FALSE and
17:17:49 663  	  c.invoice_id = in_invoice_id
17:17:49 664  	;
17:17:49 665  
17:17:49 666  	IF var_success_attempts_num > 0 THEN
17:17:49 667  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 668  	END IF;
17:17:49 669  
17:17:49 670  	SELECT
17:17:49 671  	  COUNT(1) into var_success_attempts_num
17:17:49 672  	FROM
17:17:49 673  	  TRANSACTION t,
17:17:49 674  	  CHARGE c
17:17:49 675  	WHERE
17:17:49 676  	  c.transaction_id = t.id and
17:17:49 677  	  t.is_refund = GLOBAL_CONSTANTS_V15.FALSE and
17:17:49 678  	  t.is_settled = GLOBAL_CONSTANTS_V15.TRUE and
17:17:49 679  	  c.invoice_id = in_invoice_id
17:17:49 680  	;
17:17:49 681  
17:17:49 682  	IF var_success_attempts_num > 0 THEN
17:17:49 683  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 684  	END IF;
17:17:49 685  
17:17:49 686  	SELECT
17:17:49 687  	  COUNT(1) into var_is_gc
17:17:49 688  	FROM
17:17:49 689  	  gift_certificate gc
17:17:49 690  	WHERE
17:17:49 691  	  gc.finalized_invoice_id = in_invoice_id
17:17:49 692  	;
17:17:49 693  
17:17:49 694  	IF var_is_gc > 0 THEN
17:17:49 695  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 696  	END IF;
17:17:49 697  
17:17:49 698  	RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 699  
17:17:49 700  EXCEPTION
17:17:49 701  WHEN BAD_INVOICE_ID THEN
17:17:49 702  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 703  	  SPROC_NAME, 'No such invoice');
17:17:49 704  WHEN OTHERS THEN
17:17:49 705  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 707  END IS_INVOICE_PAYING_STARTED;
17:17:49 708  
17:17:49 709  /******************************************************************************/
17:17:49 710  
17:17:49 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
17:17:49 712  	in_invoice_id  IN NUMBER,
17:17:49 713  	out_is_started OUT NUMBER
17:17:49 714  ) AS
17:17:49 715  BEGIN
17:17:49 716  	-- Just a wrapper
17:17:49 717  	out_is_started := PROCS_INVOICE_V15.IS_INVOICE_PAYING_STARTED(in_invoice_id);
17:17:49 718  END P_IS_INVOICE_PAYING_STARTED;
17:17:49 719  
17:17:49 720  /******************************************************************************/
17:17:49 721  
17:17:49 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
17:17:49 723  	in_invoice_id	      IN NUMBER,
17:17:49 724  	in_chargeback_date    IN DATE,
17:17:49 725  	out_chargeback_amount OUT NUMBER
17:17:49 726  ) AS
17:17:49 727  -- VARIABLES
17:17:49 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
17:17:49 729  var_chargeback_date    DATE;
17:17:49 730  temp_invoice_id	     NUMBER;
17:17:49 731  var_licenses_number    NUMBER;
17:17:49 732  var_invoice_start_date DATE;
17:17:49 733  var_invoice_end_date   DATE;
17:17:49 734  var_offer_id	     NUMBER;
17:17:49 735  var_offer_days_interval NUMBER;
17:17:49 736  var_license_days_used  NUMBER;
17:17:49 737  var_invoice_amount     NUMBER(10,2);
17:17:49 738  var_offer_chain_id     NUMBER;
17:17:49 739  var_offer_chain_meta_data_val VARCHAR2(1024);
17:17:49 740  var_offer_chain_full_refund   NUMBER;
17:17:49 741  var_offer_chain_prorated_ref  NUMBER;
17:17:49 742  var_chargeback_calculated NUMBER;
17:17:49 743  var_max_invoice_refund	NUMBER;
17:17:49 744  -- EXCEPTIONS
17:17:49 745  BAD_INVOICE_ID		  EXCEPTION;
17:17:49 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
17:17:49 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
17:17:49 748  BEGIN
17:17:49 749  
17:17:49 750  	IF in_chargeback_date IS NULL THEN
17:17:49 751  	  var_chargeback_date := PROCS_COMMON_V15.NORMALIZE_DATE(current_date);
17:17:49 752  	ELSE
17:17:49 753  	  var_chargeback_date := PROCS_COMMON_V15.NORMALIZE_DATE(in_chargeback_date);
17:17:49 754  	END IF;
17:17:49 755  
17:17:49 756  	-- Check that invoice exists
17:17:49 757  	BEGIN
17:17:49 758  	  SELECT
17:17:49 759  	    INVOICE.ID into temp_invoice_id
17:17:49 760  	  FROM
17:17:49 761  	    INVOICE
17:17:49 762  	  WHERE
17:17:49 763  	    INVOICE.ID = in_invoice_id;
17:17:49 764  	  EXCEPTION
17:17:49 765  	    WHEN NO_DATA_FOUND THEN
17:17:49 766  	      RAISE BAD_INVOICE_ID;
17:17:49 767  	END;
17:17:49 768  
17:17:49 769  	-- Check that invoice has at least one license
17:17:49 770  	SELECT
17:17:49 771  	  COUNT(*) into var_licenses_number
17:17:49 772  	FROM
17:17:49 773  	  LICENSE
17:17:49 774  	WHERE
17:17:49 775  	  LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 776  
17:17:49 777  	IF var_licenses_number = 0 THEN
17:17:49 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
17:17:49 779  	END IF;
17:17:49 780  
17:17:49 781  	SELECT
17:17:49 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
17:17:49 783  	FROM
17:17:49 784  	  LICENSE
17:17:49 785  	WHERE
17:17:49 786  	  LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 787  
17:17:49 788  	var_invoice_start_date := PROCS_COMMON_V15.NORMALIZE_DATE(var_invoice_start_date);
17:17:49 789  
17:17:49 790  	SELECT DISTINCT
17:17:49 791  	  LICENSE.OFFER_ID into var_offer_id
17:17:49 792  	FROM
17:17:49 793  	  LICENSE
17:17:49 794  	WHERE
17:17:49 795  	  LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 796  
17:17:49 797  	SELECT
17:17:49 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
17:17:49 799  	FROM
17:17:49 800  	  LICENSE
17:17:49 801  	WHERE
17:17:49 802  	  LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 803  
17:17:49 804  	-- All licenses for given invoice should point into the same offer
17:17:49 805  
17:17:49 806  	PROCS_OFFER_CHAIN_V15.GET_OFFER_LENGTH_IN_DAYS(
17:17:49 807  	  in_offer_id	=> var_offer_id,
17:17:49 808  	  in_start_date => var_invoice_start_date,
17:17:49 809  	  out_days	=> var_offer_days_interval
17:17:49 810  	);
17:17:49 811  
17:17:49 812  	IF var_offer_days_interval = 0 THEN
17:17:49 813  	  RAISE OFFER_LENGTH_IS_ZERO;
17:17:49 814  	END IF;
17:17:49 815  
17:17:49 816  	PROCS_INVOICE_V15.GET_INVOICE_DAYS_USED_NUMBER(
17:17:49 817  	  in_invoice_id      => in_invoice_id,
17:17:49 818  	  in_chargeback_date => var_chargeback_date,
17:17:49 819  	  out_days_num	     => var_license_days_used
17:17:49 820  	);
17:17:49 821  
17:17:49 822  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(
17:17:49 823  	  in_invoice_id => in_invoice_id,
17:17:49 824  	  out_amount	=> var_invoice_amount
17:17:49 825  	);
17:17:49 826  
17:17:49 827  	-- 39437
17:17:49 828  	-- Get offer chain id by invoice id
17:17:49 829  	SELECT DISTINCT
17:17:49 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
17:17:49 831  	FROM
17:17:49 832  	  SUBSCRIPTION
17:17:49 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 834  	WHERE
17:17:49 835  	  LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 836  
17:17:49 837  	-- Get offer chain's meta data full amount value
17:17:49 838  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
17:17:49 839  	  in_offer_chain_id => var_offer_chain_id,
17:17:49 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V15.OFFER_CHAIN_FULL_REFUND,
17:17:49 841  	  out_value	    => var_offer_chain_meta_data_val
17:17:49 842  	);
17:17:49 843  	IF var_offer_chain_meta_data_val IS NULL THEN
17:17:49 844  	  var_offer_chain_full_refund := NULL;
17:17:49 845  	ELSE
17:17:49 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
17:17:49 847  	END IF;
17:17:49 848  
17:17:49 849  	-- Get offer chain's meta data prorated amount value
17:17:49 850  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
17:17:49 851  	  in_offer_chain_id => var_offer_chain_id,
17:17:49 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V15.OFFER_CHAIN_PRORATED_REFUND,
17:17:49 853  	  out_value	    => var_offer_chain_meta_data_val
17:17:49 854  	);
17:17:49 855  	IF var_offer_chain_meta_data_val IS NULL THEN
17:17:49 856  	  var_offer_chain_prorated_ref := NULL;
17:17:49 857  	ELSE
17:17:49 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
17:17:49 859  	END IF;
17:17:49 860  
17:17:49 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 862  
17:17:49 863  	IF var_offer_chain_full_refund IS NOT NULL
17:17:49 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
17:17:49 866  	    out_chargeback_amount := var_invoice_amount;
17:17:49 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 868  	  END IF;
17:17:49 869  	END IF;
17:17:49 870  
17:17:49 871  	IF var_offer_chain_prorated_ref IS NOT NULL
17:17:49 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
17:17:49 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
17:17:49 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 876  	  END IF;
17:17:49 877  	END IF;
17:17:49 878  
17:17:49 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 880  	  PROCS_INVOICE_V15.GET_MAX_REFUND(
17:17:49 881  	    in_invoice_id => in_invoice_id,
17:17:49 882  	    out_amount	  => var_max_invoice_refund
17:17:49 883  	  );
17:17:49 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
17:17:49 885  	    out_chargeback_amount := var_max_invoice_refund;
17:17:49 886  	  END IF;
17:17:49 887  	END IF;
17:17:49 888  
17:17:49 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 890  	  out_chargeback_amount := 0;
17:17:49 891  	END IF;
17:17:49 892  
17:17:49 893  EXCEPTION
17:17:49 894  WHEN BAD_INVOICE_ID THEN
17:17:49 895  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 896  	  SPROC_NAME, 'No such invoice');
17:17:49 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
17:17:49 898  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 899  	  SPROC_NAME, 'No licenses found');
17:17:49 900  WHEN OFFER_LENGTH_IS_ZERO THEN
17:17:49 901  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 902  	  SPROC_NAME, 'Offer length is zero');
17:17:49 903  WHEN OTHERS THEN
17:17:49 904  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 906  END CALCULATE_INVOICE_CHARGEBACK;
17:17:49 907  
17:17:49 908  /********************************************************************/
17:17:49 909  
17:17:49 910  PROCEDURE APPLY_REFUND (
17:17:49 911  	in_invoice_id	     IN NUMBER,
17:17:49 912  	in_chargeback_amount IN NUMBER,
17:17:49 913  	in_created_by	     IN VARCHAR2,
17:17:49 914  	out_charge_id	     OUT NUMBER
17:17:49 915  ) AS
17:17:49 916  -- VARIABLES
17:17:49 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
17:17:49 918  temp_invoice_id		 NUMBER;
17:17:49 919  var_total_charges_amount	 NUMBER(10,2);
17:17:49 920  var_charge_amount_to_apply NUMBER(10,2);
17:17:49 921  var_transaction_id	 NUMBER;
17:17:49 922  var_instrument_type_id	 NUMBER;
17:17:49 923  var_instrument_id 	 NUMBER;
17:17:49 924  var_charge_id		 NUMBER;
17:17:49 925  -- EXCEPTIONS
17:17:49 926  BAD_INVOICE_ID		 EXCEPTION;
17:17:49 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
17:17:49 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
17:17:49 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
17:17:49 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
17:17:49 931  BEGIN
17:17:49 932  
17:17:49 933  	BEGIN
17:17:49 934  	  SELECT
17:17:49 935  	    INVOICE.ID into temp_invoice_id
17:17:49 936  	  FROM
17:17:49 937  	    INVOICE
17:17:49 938  	  WHERE
17:17:49 939  	    INVOICE.ID = in_invoice_id;
17:17:49 940  	  EXCEPTION
17:17:49 941  	    WHEN NO_DATA_FOUND THEN
17:17:49 942  	      RAISE BAD_INVOICE_ID;
17:17:49 943  	END;
17:17:49 944  
17:17:49 945  	SELECT
17:17:49 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
17:17:49 947  	FROM
17:17:49 948  	  CHARGE
17:17:49 949  	WHERE
17:17:49 950  	  CHARGE.INVOICE_ID = in_invoice_id
17:17:49 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
17:17:49 953  
17:17:49 954  	-- FIXME: Maybe whe should throw exception here?
17:17:49 955  	IF var_total_charges_amount < in_chargeback_amount THEN
17:17:49 956  	  var_charge_amount_to_apply := var_total_charges_amount;
17:17:49 957  	ELSE
17:17:49 958  	  var_charge_amount_to_apply := in_chargeback_amount;
17:17:49 959  	END IF;
17:17:49 960  
17:17:49 961  	BEGIN
17:17:49 962  	  PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 963  	    in_transaction_id  => NULL,
17:17:49 964  	    in_status_id       => GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
17:17:49 965  	    in_amount	       => -var_charge_amount_to_apply,
17:17:49 966  	    in_created_by      => in_created_by,
17:17:49 967  	    in_order_id        => NULL,
17:17:49 968  	    in_is_refund       => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 969  	    out_transaction_id => var_transaction_id
17:17:49 970  	  );
17:17:49 971  	  EXCEPTION
17:17:49 972  	    WHEN OTHERS THEN
17:17:49 973  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 975  	END;
17:17:49 976  
17:17:49 977  	BEGIN
17:17:49 978  	  SELECT
17:17:49 979  	    C.INSTRUMENT_TYPE_ID,
17:17:49 980  	    C.INSTRUMENT_ID
17:17:49 981  	    into
17:17:49 982  	    var_instrument_type_id,
17:17:49 983  	    var_instrument_id
17:17:49 984  	  FROM
17:17:49 985  	    CHARGE C,
17:17:49 986  	    TRANSACTION_ATTEMPT TA,
17:17:49 987  	    TRANSACTION T
17:17:49 988  	  WHERE
17:17:49 989  	    C.INVOICE_ID = in_invoice_id and
17:17:49 990  	    C.TRANSACTION_ID = T.ID and
17:17:49 991  	    TA.TRANSACTION_ID = T.ID and
17:17:49 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS and
17:17:49 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V15.FALSE and
17:17:49 994  	    T.TRANSACTION_AMOUNT >= 0 and
17:17:49 995  	    rownum < 2;
17:17:49 996  	EXCEPTION
17:17:49 997  	    WHEN NO_DATA_FOUND THEN
17:17:49 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
17:17:49 999  	END;
17:17:49 1000  	 BEGIN
17:17:49 1001  	   PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 1002  	     in_invoice_id	   => in_invoice_id,
17:17:49 1003  	     in_transaction_id	   => var_transaction_id,
17:17:49 1004  	     in_instrument_type_id => var_instrument_type_id,
17:17:49 1005  	     in_instrument_id	   => var_instrument_id,
17:17:49 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
17:17:49 1007  	     in_created_by	   => in_created_by,
17:17:49 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 1009  	     out_charge_id	   => var_charge_id
17:17:49 1010  	   );
17:17:49 1011  	   EXCEPTION
17:17:49 1012  	     WHEN OTHERS THEN
17:17:49 1013  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 1015  	 END;
17:17:49 1016  
17:17:49 1017  	 out_charge_id := var_charge_id;
17:17:49 1018  
17:17:49 1019  EXCEPTION
17:17:49 1020  WHEN BAD_INVOICE_ID THEN
17:17:49 1021  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1022  	   SPROC_NAME, 'No such invoice');
17:17:49 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 1024  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
17:17:49 1027  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1028  	   SPROC_NAME, 'Could not find financial instrument');
17:17:49 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 1030  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 1032  WHEN OTHERS THEN
17:17:49 1033  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1035  END APPLY_REFUND;
17:17:49 1036  
17:17:49 1037  /******************************************************************************/
17:17:49 1038  
17:17:49 1039  PROCEDURE GET_MAX_REFUND (
17:17:49 1040  	 in_invoice_id IN NUMBER,
17:17:49 1041  	 out_amount    OUT NUMBER
17:17:49 1042  ) AS
17:17:49 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
17:17:49 1044  -- VARIABLES
17:17:49 1045  temp_invoice_id	       NUMBER;
17:17:49 1046  var_invoice_refunds_sum NUMBER(10,2);
17:17:49 1047  var_invoice_charges_sum NUMBER(10,2);
17:17:49 1048  -- EXCEPTIONS
17:17:49 1049  BAD_INVOICE_ID EXCEPTION;
17:17:49 1050  BEGIN
17:17:49 1051  
17:17:49 1052  	 BEGIN
17:17:49 1053  	   SELECT
17:17:49 1054  	     INVOICE.ID into temp_invoice_id
17:17:49 1055  	   FROM
17:17:49 1056  	     INVOICE
17:17:49 1057  	   WHERE
17:17:49 1058  	     INVOICE.ID = in_invoice_id;
17:17:49 1059  	   EXCEPTION
17:17:49 1060  	     WHEN NO_DATA_FOUND THEN
17:17:49 1061  	       RAISE BAD_INVOICE_ID;
17:17:49 1062  	 END;
17:17:49 1063  
17:17:49 1064  	 var_invoice_refunds_sum := 0;
17:17:49 1065  	 var_invoice_charges_sum := 0;
17:17:49 1066  
17:17:49 1067  	 FOR f_charge IN (
17:17:49 1068  	   SELECT
17:17:49 1069  	     CHARGE.ID,
17:17:49 1070  	     CHARGE.CHARGE_STATUS_ID,
17:17:49 1071  	     CHARGE.CHARGE_AMOUNT,
17:17:49 1072  	     CHARGE.TRANSACTION_ID
17:17:49 1073  	   FROM
17:17:49 1074  	     CHARGE
17:17:49 1075  	   WHERE
17:17:49 1076  	     CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1077  	 )
17:17:49 1078  	 LOOP
17:17:49 1079  	   -- If charge.status = canceled then continue
17:17:49 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
17:17:49 1081  
17:17:49 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
17:17:49 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 1084  		  AND PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 1085  		 -- Transaction collected
17:17:49 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
17:17:49 1087  	       ELSE
17:17:49 1088  		 -- Transaction is not collected. Do nothing
17:17:49 1089  		 NULL;
17:17:49 1090  	       END IF;
17:17:49 1091  	     ELSE
17:17:49 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 1093  		  AND PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 1094  		 -- If charge is processed transaction is not collected then do nothing
17:17:49 1095  		 NULL;
17:17:49 1096  	       ELSE
17:17:49 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
17:17:49 1098  	       END IF;
17:17:49 1099  	     END IF;
17:17:49 1100  
17:17:49 1101  	   END IF;
17:17:49 1102  	 END LOOP;
17:17:49 1103  
17:17:49 1104  	 -- Refunds are negative
17:17:49 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
17:17:49 1106  
17:17:49 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
17:17:49 1108  
17:17:49 1109  EXCEPTION
17:17:49 1110  WHEN BAD_INVOICE_ID THEN
17:17:49 1111  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1112  	   SPROC_NAME, 'No such invoice');
17:17:49 1113  WHEN OTHERS THEN
17:17:49 1114  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1116  END GET_MAX_REFUND;
17:17:49 1117  
17:17:49 1118  /******************************************************************************/
17:17:49 1119  
17:17:49 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
17:17:49 1121  	 in_invoice_id	     IN NUMBER,
17:17:49 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
17:17:49 1123  	 out_days_num	     OUT NUMBER
17:17:49 1124  ) AS
17:17:49 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
17:17:49 1126  -- VARIABLES
17:17:49 1127  temp_invoice_id	      NUMBER;
17:17:49 1128  var_license_start_date DATE;
17:17:49 1129  var_license_end_date   DATE;
17:17:49 1130  var_chargeback_date    DATE;
17:17:49 1131  var_invoice_days_used  NUMBER;
17:17:49 1132  -- EXCEPTIONS
17:17:49 1133  BAD_INVOICE_ID EXCEPTION;
17:17:49 1134  BEGIN
17:17:49 1135  
17:17:49 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
17:17:49 1137  
17:17:49 1138  	 BEGIN
17:17:49 1139  	   SELECT
17:17:49 1140  	     INVOICE.ID into temp_invoice_id
17:17:49 1141  	   FROM
17:17:49 1142  	     INVOICE
17:17:49 1143  	   WHERE
17:17:49 1144  	     INVOICE.ID = in_invoice_id;
17:17:49 1145  	   EXCEPTION
17:17:49 1146  	     WHEN NO_DATA_FOUND THEN
17:17:49 1147  	       RAISE BAD_INVOICE_ID;
17:17:49 1148  	 END;
17:17:49 1149  
17:17:49 1150  	 var_invoice_days_used := 0;
17:17:49 1151  
17:17:49 1152  	 FOR f_license IN (
17:17:49 1153  	   SELECT
17:17:49 1154  	     LICENSE.START_DATE,
17:17:49 1155  	     LICENSE.END_DATE
17:17:49 1156  	   FROM
17:17:49 1157  	     LICENSE
17:17:49 1158  	   WHERE
17:17:49 1159  	     LICENSE.INVOICE_ID = in_invoice_id
17:17:49 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V15.FALSE
17:17:49 1161  	 )
17:17:49 1162  	 LOOP
17:17:49 1163  	   var_license_start_date := PROCS_COMMON_V15.NORMALIZE_DATE(f_license.START_DATE);
17:17:49 1164  	   var_license_end_date := PROCS_COMMON_V15.NORMALIZE_DATE(f_license.END_DATE);
17:17:49 1165  
17:17:49 1166  	   IF var_license_start_date <= var_chargeback_date THEN
17:17:49 1167  	     IF var_license_end_date <= var_chargeback_date THEN
17:17:49 1168  	       -- License is passed
17:17:49 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
17:17:49 1170  	     ELSE
17:17:49 1171  	       -- This is current license
17:17:49 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
17:17:49 1173  	     END IF;
17:17:49 1174  	   ELSE
17:17:49 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
17:17:49 1176  	     NULL;
17:17:49 1177  	   END IF;
17:17:49 1178  	 END LOOP;
17:17:49 1179  
17:17:49 1180  	 out_days_num := var_invoice_days_used;
17:17:49 1181  
17:17:49 1182  EXCEPTION
17:17:49 1183  WHEN BAD_INVOICE_ID THEN
17:17:49 1184  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1185  	   SPROC_NAME, 'No such invoice');
17:17:49 1186  WHEN OTHERS THEN
17:17:49 1187  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1189  END GET_INVOICE_DAYS_USED_NUMBER;
17:17:49 1190  
17:17:49 1191  /******************************************************************************/
17:17:49 1192  
17:17:49 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:49 1194  	 in_invoice_id	IN NUMBER,
17:17:49 1195  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1196  ) AS
17:17:49 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
17:17:49 1198  -- VARIABLES
17:17:49 1199  temp_invoice_id NUMBER;
17:17:49 1200  -- EXCEPTIONS
17:17:49 1201  BAD_INVOICE_ID EXCEPTION;
17:17:49 1202  BEGIN
17:17:49 1203  
17:17:49 1204  	 BEGIN
17:17:49 1205  	   SELECT
17:17:49 1206  	     INVOICE.ID into temp_invoice_id
17:17:49 1207  	   FROM
17:17:49 1208  	     INVOICE
17:17:49 1209  	   WHERE
17:17:49 1210  	     INVOICE.ID = in_invoice_id;
17:17:49 1211  	   EXCEPTION
17:17:49 1212  	     WHEN NO_DATA_FOUND THEN
17:17:49 1213  	       RAISE BAD_INVOICE_ID;
17:17:49 1214  	 END;
17:17:49 1215  
17:17:49 1216  	 OPEN out_result_set FOR
17:17:49 1217  	 SELECT
17:17:49 1218  	   LINE_ITEM.ID,
17:17:49 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
17:17:49 1220  	   LINE_ITEM.INVOICE_ID,
17:17:49 1221  	   LINE_ITEM.AMOUNT,
17:17:49 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
17:17:49 1223  	   LINE_ITEM.TAXES_AMOUNT,
17:17:49 1224  	   LINE_ITEM.CREATE_DATE,
17:17:49 1225  	   LINE_ITEM.CREATED_BY
17:17:49 1226  	 FROM
17:17:49 1227  	   LINE_ITEM
17:17:49 1228  	 WHERE
17:17:49 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
17:17:49 1230  
17:17:49 1231  EXCEPTION
17:17:49 1232  WHEN BAD_INVOICE_ID THEN
17:17:49 1233  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1234  	   SPROC_NAME, 'No such invoice');
17:17:49 1235  WHEN OTHERS THEN
17:17:49 1236  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1238  END GET_INVOICE_LINE_ITEMS;
17:17:49 1239  
17:17:49 1240  /******************************************************************************/
17:17:49 1241  
17:17:49 1242  PROCEDURE GET_INVOICE_LICENSES (
17:17:49 1243  	 in_invoice_id	IN NUMBER,
17:17:49 1244  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1245  ) AS
17:17:49 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
17:17:49 1247  -- VARIABLES
17:17:49 1248  temp_invoice_id NUMBER;
17:17:49 1249  -- EXCEPTIONS
17:17:49 1250  BAD_INVOICE_ID EXCEPTION;
17:17:49 1251  BEGIN
17:17:49 1252  
17:17:49 1253  	 BEGIN
17:17:49 1254  	   SELECT
17:17:49 1255  	     INVOICE.ID into temp_invoice_id
17:17:49 1256  	   FROM
17:17:49 1257  	     INVOICE
17:17:49 1258  	   WHERE
17:17:49 1259  	     INVOICE.ID = in_invoice_id;
17:17:49 1260  	   EXCEPTION
17:17:49 1261  	     WHEN NO_DATA_FOUND THEN
17:17:49 1262  	       RAISE BAD_INVOICE_ID;
17:17:49 1263  	 END;
17:17:49 1264  
17:17:49 1265  	 OPEN out_result_set FOR
17:17:49 1266  	 SELECT
17:17:49 1267  	   LICENSE.ID,
17:17:49 1268  	   LICENSE.INVOICE_ID,
17:17:49 1269  	   LICENSE.CREATE_DATE,
17:17:49 1270  	   LICENSE.CREATED_BY,
17:17:49 1271  	   LICENSE.CURRENT_OFFER_INDEX,
17:17:49 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
17:17:49 1273  	   LICENSE.END_DATE,
17:17:49 1274  	   LICENSE.ENTITLEMENT_END_DATE,
17:17:49 1275  	   LICENSE.IS_EXTENSION,
17:17:49 1276  	   LICENSE.LICENSE_STATUS_ID,
17:17:49 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
17:17:49 1278  	   LICENSE.OFFER_ID,
17:17:49 1279  	   LICENSE.START_DATE,
17:17:49 1280  	   LICENSE.SUBSCRIPTION_ID,
17:17:49 1281  	   LICENSE.UPDATE_DATE,
17:17:49 1282  	   LICENSE.UPDATED_BY
17:17:49 1283  	 FROM
17:17:49 1284  	   LICENSE
17:17:49 1285  	 WHERE
17:17:49 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 1287  
17:17:49 1288  EXCEPTION
17:17:49 1289  WHEN BAD_INVOICE_ID THEN
17:17:49 1290  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1291  	   SPROC_NAME, 'No such invoice');
17:17:49 1292  WHEN OTHERS THEN
17:17:49 1293  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1294  	   SPROC_NAME, 'Unknown error');
17:17:49 1295  END GET_INVOICE_LICENSES;
17:17:49 1296  
17:17:49 1297  /******************************************************************************/
17:17:49 1298  
17:17:49 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
17:17:49 1300  	 in_invoice_id	    IN NUMBER,
17:17:49 1301  	 out_offer_chain_id OUT NUMBER
17:17:49 1302  ) AS
17:17:49 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
17:17:49 1304  -- VARIABLES
17:17:49 1305  temp_invoice_id NUMBER;
17:17:49 1306  -- EXCEPTIONS
17:17:49 1307  BAD_INVOICE_ID EXCEPTION;
17:17:49 1308  BEGIN
17:17:49 1309  
17:17:49 1310  	 BEGIN
17:17:49 1311  	   SELECT
17:17:49 1312  	     INVOICE.ID into temp_invoice_id
17:17:49 1313  	   FROM
17:17:49 1314  	     INVOICE
17:17:49 1315  	   WHERE
17:17:49 1316  	     INVOICE.ID = in_invoice_id;
17:17:49 1317  	   EXCEPTION
17:17:49 1318  	     WHEN NO_DATA_FOUND THEN
17:17:49 1319  	       RAISE BAD_INVOICE_ID;
17:17:49 1320  	 END;
17:17:49 1321  
17:17:49 1322  	 BEGIN
17:17:49 1323  	   SELECT DISTINCT
17:17:49 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
17:17:49 1325  	   FROM
17:17:49 1326  	     LICENSE
17:17:49 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1328  	   WHERE
17:17:49 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 1330  	   EXCEPTION
17:17:49 1331  	     WHEN NO_DATA_FOUND THEN
17:17:49 1332  	       out_offer_chain_id := NULL;
17:17:49 1333  	 END;
17:17:49 1334  
17:17:49 1335  EXCEPTION
17:17:49 1336  WHEN BAD_INVOICE_ID THEN
17:17:49 1337  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1338  	   SPROC_NAME, 'No such invoice');
17:17:49 1339  WHEN OTHERS THEN
17:17:49 1340  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
17:17:49 1343  
17:17:49 1344  /******************************************************************************/
17:17:49 1345  
17:17:49 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
17:17:49 1347  -- Closing invoice without refund
17:17:49 1348  	 in_invoice_id IN NUMBER,
17:17:49 1349  	 in_updated_by IN VARCHAR2
17:17:49 1350  ) AS
17:17:49 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
17:17:49 1352  -- VARIABLES
17:17:49 1353  temp_invoice_id NUMBER;
17:17:49 1354  -- EXCEPTIONS
17:17:49 1355  BAD_INVOICE_ID EXCEPTION;
17:17:49 1356  BEGIN
17:17:49 1357  
17:17:49 1358  	 BEGIN
17:17:49 1359  	   SELECT
17:17:49 1360  	     INVOICE.ID into temp_invoice_id
17:17:49 1361  	   FROM
17:17:49 1362  	     INVOICE
17:17:49 1363  	   WHERE
17:17:49 1364  	     INVOICE.ID = in_invoice_id;
17:17:49 1365  	   EXCEPTION
17:17:49 1366  	     WHEN NO_DATA_FOUND THEN
17:17:49 1367  	       RAISE BAD_INVOICE_ID;
17:17:49 1368  	 END;
17:17:49 1369  
17:17:49 1370  	 -- Needs to close charges. No refund.
17:17:49 1371  	 FOR f_charge_to_close IN (
17:17:49 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1373  	 )
17:17:49 1374  	 LOOP
17:17:49 1375  	   PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
17:17:49 1376  	     in_charge_id	 => f_charge_to_close.ID,
17:17:49 1377  	     in_updated_by	 => in_updated_by,
17:17:49 1378  	     in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
17:17:49 1379  	   );
17:17:49 1380  	 END LOOP;
17:17:49 1381  
17:17:49 1382  	 --FOR f_license_to_cancel IN (
17:17:49 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
17:17:49 1384  	 --)
17:17:49 1385  	 --LOOP
17:17:49 1386  	 --  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
17:17:49 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
17:17:49 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
17:17:49 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V15.FALSE,
17:17:49 1390  	 --    in_updated_by	     => in_updated_by
17:17:49 1391  	 --  );
17:17:49 1392  	 --END LOOP;
17:17:49 1393  
17:17:49 1394  	 PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
17:17:49 1395  	   in_invoice_id		  => in_invoice_id,
17:17:49 1396  	   in_updated_by		  => in_updated_by,
17:17:49 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V15.INVOICE_CLOSED
17:17:49 1398  	 );
17:17:49 1399  
17:17:49 1400  	 FOR f_transaction_to_close IN (
17:17:49 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1402  	 )
17:17:49 1403  	 LOOP
17:17:49 1404  	   PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
17:17:49 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
17:17:49 1406  	     in_updated_by	      => in_updated_by,
17:17:49 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
17:17:49 1408  	   );
17:17:49 1409  	 END LOOP;
17:17:49 1410  
17:17:49 1411  EXCEPTION
17:17:49 1412  WHEN BAD_INVOICE_ID THEN
17:17:49 1413  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1414  	   SPROC_NAME, 'No such invoice');
17:17:49 1415  WHEN OTHERS THEN
17:17:49 1416  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
17:17:49 1419  
17:17:49 1420  /******************************************************************************/
17:17:49 1421  
17:17:49 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
17:17:49 1423  	 in_invoice_id	     IN NUMBER,
17:17:49 1424  	 out_subscription_id OUT NUMBER
17:17:49 1425  ) AS
17:17:49 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
17:17:49 1427  -- VARIABLES
17:17:49 1428  temp_invoice_id NUMBER;
17:17:49 1429  -- EXCEPTIONS
17:17:49 1430  BAD_INVOICE_ID		 EXCEPTION;
17:17:49 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
17:17:49 1432  BEGIN
17:17:49 1433  
17:17:49 1434  	 BEGIN
17:17:49 1435  	   SELECT
17:17:49 1436  	     INVOICE.ID into temp_invoice_id
17:17:49 1437  	   FROM
17:17:49 1438  	     INVOICE
17:17:49 1439  	   WHERE
17:17:49 1440  	     INVOICE.ID = in_invoice_id;
17:17:49 1441  	   EXCEPTION
17:17:49 1442  	     WHEN NO_DATA_FOUND THEN
17:17:49 1443  	       RAISE BAD_INVOICE_ID;
17:17:49 1444  	 END;
17:17:49 1445  
17:17:49 1446  	 BEGIN
17:17:49 1447  	   SELECT DISTINCT
17:17:49 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
17:17:49 1449  	   FROM
17:17:49 1450  	     LICENSE
17:17:49 1451  	   WHERE
17:17:49 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 1453  	   EXCEPTION
17:17:49 1454  	     WHEN NO_DATA_FOUND THEN
17:17:49 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
17:17:49 1456  	 END;
17:17:49 1457  
17:17:49 1458  EXCEPTION
17:17:49 1459  WHEN BAD_INVOICE_ID THEN
17:17:49 1460  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1461  	   SPROC_NAME, 'No such invoice');
17:17:49 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
17:17:49 1463  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
17:17:49 1465  WHEN OTHERS THEN
17:17:49 1466  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
17:17:49 1469  
17:17:49 1470  /******************************************************************************/
17:17:49 1471  
17:17:49 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
17:17:49 1473  /*
17:17:49 1474  Throws exceptions:
17:17:49 1475  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1476  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1477  Return:
17:17:49 1478  	 GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
17:17:49 1479  	 GLOBAL_CONSTANTS_V15.FALSE else
17:17:49 1480  */
17:17:49 1481  	 in_invoice_id	   IN NUMBER,
17:17:49 1482  	 out_is_tax_exempt OUT NUMBER
17:17:49 1483  ) AS
17:17:49 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
17:17:49 1485  -- VARIABLES
17:17:49 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
17:17:49 1487  -- EXCEPTIONS
17:17:49 1488  BAD_INVOICE_ID EXCEPTION;
17:17:49 1489  BEGIN
17:17:49 1490  
17:17:49 1491  	 BEGIN
17:17:49 1492  	   SELECT
17:17:49 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
17:17:49 1494  	   FROM
17:17:49 1495  	     INVOICE
17:17:49 1496  	   WHERE
17:17:49 1497  	     INVOICE.ID = in_invoice_id;
17:17:49 1498  	   EXCEPTION
17:17:49 1499  	     WHEN NO_DATA_FOUND THEN
17:17:49 1500  	       RAISE BAD_INVOICE_ID;
17:17:49 1501  	 END;
17:17:49 1502  
17:17:49 1503  	 IF var_is_tax_exempt IS NULL THEN
17:17:49 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 1505  	 ELSE
17:17:49 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 1507  	 END IF;
17:17:49 1508  
17:17:49 1509  EXCEPTION
17:17:49 1510  WHEN BAD_INVOICE_ID THEN
17:17:49 1511  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1512  	   SPROC_NAME, 'No such invoice');
17:17:49 1513  WHEN OTHERS THEN
17:17:49 1514  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1516  END IS_INVOICE_TAX_EXEMPT;
17:17:49 1517  
17:17:49 1518  /******************************************************************************/
17:17:49 1519  
17:17:49 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
17:17:49 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
17:17:49 1522  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1523  ) AS
17:17:49 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
17:17:49 1525  -- VARIABLE
17:17:49 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
17:17:49 1527  -- EXCEPTIONS
17:17:49 1528  BAD_ORDER_ID EXCEPTION;
17:17:49 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
17:17:49 1530  BEGIN
17:17:49 1531  
17:17:49 1532  	 OPEN out_result_set FOR
17:17:49 1533  	   SELECT DISTINCT
17:17:49 1534  	     CHARGE.INVOICE_ID
17:17:49 1535  	   FROM
17:17:49 1536  	     CHARGE
17:17:49 1537  	   INNER JOIN
17:17:49 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
17:17:49 1539  	   WHERE
17:17:49 1540  	     TRANSACTION.ORDER_ID = in_order_id;
17:17:49 1541  
17:17:49 1542  EXCEPTION
17:17:49 1543  WHEN BAD_ORDER_ID THEN
17:17:49 1544  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1545  	   SPROC_NAME, 'No such transaction');
17:17:49 1546  WHEN CAN_NOT_FIND_INVOICE THEN
17:17:49 1547  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
17:17:49 1549  WHEN OTHERS THEN
17:17:49 1550  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
17:17:49 1553  
17:17:49 1554  /******************************************************************************/
17:17:49 1555  
17:17:49 1556  PROCEDURE GET_INVOICE_BY_ID (
17:17:49 1557  	 in_invoice_id	IN NUMBER,
17:17:49 1558  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1559  ) AS
17:17:49 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
17:17:49 1561  -- VARIABLE
17:17:49 1562  temp_invoice_id NUMBER;
17:17:49 1563  -- EXCEPTIONS
17:17:49 1564  BAD_INVOCIE_ID EXCEPTION;
17:17:49 1565  BEGIN
17:17:49 1566  
17:17:49 1567  	 BEGIN
17:17:49 1568  	   SELECT
17:17:49 1569  	     INVOICE.ID into temp_invoice_id
17:17:49 1570  	   FROM
17:17:49 1571  	     INVOICE
17:17:49 1572  	   WHERE
17:17:49 1573  	     INVOICE.ID = in_invoice_id;
17:17:49 1574  	   EXCEPTION
17:17:49 1575  	     WHEN NO_DATA_FOUND THEN
17:17:49 1576  	       RAISE BAD_INVOCIE_ID;
17:17:49 1577  	 END;
17:17:49 1578  
17:17:49 1579  	 OPEN out_result_set FOR
17:17:49 1580  	 SELECT
17:17:49 1581  	   INVOICE.ID,
17:17:49 1582  	   INVOICE.INVOICE_STATUS_ID,
17:17:49 1583  	   INVOICE.TAX_EXEMPT_ID,
17:17:49 1584  	   INVOICE.UPDATE_DATE,
17:17:49 1585  	   INVOICE.UPDATED_BY,
17:17:49 1586  	   INVOICE.CREATE_DATE,
17:17:49 1587  	   INVOICE.CREATED_BY
17:17:49 1588  	 FROM
17:17:49 1589  	   INVOICE
17:17:49 1590  	 WHERE
17:17:49 1591  	   INVOICE.ID = in_invoice_id;
17:17:49 1592  
17:17:49 1593  EXCEPTION
17:17:49 1594  WHEN BAD_INVOCIE_ID THEN
17:17:49 1595  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1596  	   SPROC_NAME, 'No such invoice');
17:17:49 1597  WHEN OTHERS THEN
17:17:49 1598  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1600  END GET_INVOICE_BY_ID;
17:17:49 1601  
17:17:49 1602  /******************************************************************************/
17:17:49 1603  
17:17:49 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
17:17:49 1605  	 in_invoice_id		       IN NUMBER,
17:17:49 1606  	 out_is_tax_calculation_needed OUT NUMBER
17:17:49 1607  ) AS
17:17:49 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
17:17:49 1609  BEGIN
17:17:49 1610  
17:17:49 1611  	 SELECT
17:17:49 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
17:17:49 1613  	 FROM
17:17:49 1614  	   INVOICE I
17:17:49 1615  	 WHERE
17:17:49 1616  	   I.ID = in_invoice_id;
17:17:49 1617  
17:17:49 1618  EXCEPTION
17:17:49 1619  WHEN NO_DATA_FOUND THEN
17:17:49 1620  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1621  	   SPROC_NAME, 'No such invoice');
17:17:49 1622  WHEN OTHERS THEN
17:17:49 1623  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1625  END GET_IS_TAX_CALCULATION_NEEDED;
17:17:49 1626  
17:17:49 1627  /******************************************************************************/
17:17:49 1628  
17:17:49 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
17:17:49 1630  	 in_invoice_id		      IN NUMBER,
17:17:49 1631  	 in_updated_by		      IN VARCHAR2,
17:17:49 1632  	 in_is_tax_calculation_needed IN NUMBER
17:17:49 1633  ) AS
17:17:49 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
17:17:49 1635  -- VARIABLES
17:17:49 1636  temp_invoice_id	      NUMBER;
17:17:49 1637  -- EXCEPTIONS
17:17:49 1638  BAD_INVOICE_ID	      EXCEPTION;
17:17:49 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
17:17:49 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 1641  BEGIN
17:17:49 1642  
17:17:49 1643  	 BEGIN
17:17:49 1644  	   SELECT
17:17:49 1645  	     i.id into temp_invoice_id
17:17:49 1646  	   FROM
17:17:49 1647  	     invoice i
17:17:49 1648  	   WHERE
17:17:49 1649  	     i.id = in_invoice_id;
17:17:49 1650  	   EXCEPTION
17:17:49 1651  	     WHEN NO_DATA_FOUND THEN
17:17:49 1652  	       RAISE BAD_INVOICE_ID;
17:17:49 1653  	 END;
17:17:49 1654  
17:17:49 1655  	 BEGIN
17:17:49 1656  	   PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
17:17:49 1657  	     in_invoice_id => in_invoice_id,
17:17:49 1658  	     in_updated_by => in_updated_by,
17:17:49 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
17:17:49 1660  	   );
17:17:49 1661  	   EXCEPTION
17:17:49 1662  	     WHEN OTHERS THEN
17:17:49 1663  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
17:17:49 1665  	 END;
17:17:49 1666  
17:17:49 1667  EXCEPTION
17:17:49 1668  WHEN BAD_INVOICE_ID THEN
17:17:49 1669  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1670  	   SPROC_NAME, 'No such invoice');
17:17:49 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
17:17:49 1672  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
17:17:49 1674  WHEN OTHERS THEN
17:17:49 1675  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1677  END SET_IS_TAX_CALCULATION_NEEDED;
17:17:49 1678  
17:17:49 1679  /******************************************************************************/
17:17:49 1680  
17:17:49 1681  PROCEDURE REFUND_INVOICE (
17:17:49 1682  	 in_invoice_id	    IN NUMBER,
17:17:49 1683  	 in_refund_amount   IN NUMBER,
17:17:49 1684  	 in_note	    IN VARCHAR2,
17:17:49 1685  	 in_created_by	    IN VARCHAR2,
17:17:49 1686  	 out_charge_id	    OUT NUMBER
17:17:49 1687  ) AS
17:17:49 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
17:17:49 1689  -- VARIABLES
17:17:49 1690  var_invoice_status_id  NUMBER;
17:17:49 1691  var_subscription_id    NUMBER;
17:17:49 1692  var_account_id	      NUMBER;
17:17:49 1693  var_group_id	      NUMBER;
17:17:49 1694  var_account_status_id  NUMBER;
17:17:49 1695  var_new_transaction_id NUMBER;
17:17:49 1696  var_instrument_type_id NUMBER;
17:17:49 1697  var_instrument_id      NUMBER;
17:17:49 1698  var_new_charge_id      NUMBER;
17:17:49 1699  var_invoice_amount     NUMBER(10,2);
17:17:49 1700  var_refunds_before     NUMBER(10,2);
17:17:49 1701  var_charges_amount     NUMBER(10,2);
17:17:49 1702  -- EXCEPTIONS
17:17:49 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
17:17:49 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
17:17:49 1705  BAD_INVOICE_ID		     EXCEPTION;
17:17:49 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
17:17:49 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
17:17:49 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
17:17:49 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
17:17:49 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
17:17:49 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
17:17:49 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
17:17:49 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
17:17:49 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
17:17:49 1715  BEGIN
17:17:49 1716  
17:17:49 1717  	 BEGIN
17:17:49 1718  	   SELECT
17:17:49 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
17:17:49 1720  	   FROM
17:17:49 1721  	     INVOICE
17:17:49 1722  	   WHERE
17:17:49 1723  	     INVOICE.ID = in_invoice_id;
17:17:49 1724  	   EXCEPTION
17:17:49 1725  	     WHEN NO_DATA_FOUND THEN
17:17:49 1726  	       RAISE BAD_INVOICE_ID;
17:17:49 1727  	 END;
17:17:49 1728  
17:17:49 1729  	 -- Get instrument and subscription id if exists
17:17:49 1730  	 BEGIN
17:17:49 1731  	   SELECT
17:17:49 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
17:17:49 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
17:17:49 1734  	     SUBSCRIPTION.ACCOUNT_ID,
17:17:49 1735  	     SUBSCRIPTION.ID
17:17:49 1736  	     into
17:17:49 1737  	     var_instrument_id,
17:17:49 1738  	     var_instrument_type_id,
17:17:49 1739  	     var_account_id,
17:17:49 1740  	     var_subscription_id
17:17:49 1741  	   FROM
17:17:49 1742  	     SUBSCRIPTION
17:17:49 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
17:17:49 1744  	   WHERE
17:17:49 1745  	     LICENSE.INVOICE_ID = in_invoice_id
17:17:49 1746  	     AND ROWNUM <= 1;
17:17:49 1747  	   EXCEPTION
17:17:49 1748  	     WHEN NO_DATA_FOUND THEN
17:17:49 1749  	       BEGIN
17:17:49 1750  
17:17:49 1751  		 var_subscription_id := NULL;
17:17:49 1752  
17:17:49 1753  		 SELECT
17:17:49 1754  		   CHARGE.INSTRUMENT_ID,
17:17:49 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
17:17:49 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
17:17:49 1757  		   into
17:17:49 1758  		   var_instrument_id,
17:17:49 1759  		   var_instrument_type_id,
17:17:49 1760  		   var_group_id
17:17:49 1761  		 FROM
17:17:49 1762  		   INVOICE
17:17:49 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
17:17:49 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
17:17:49 1765  		 WHERE
17:17:49 1766  		   INVOICE.ID = in_invoice_id
17:17:49 1767  		   AND ROWNUM <= 1;
17:17:49 1768  
17:17:49 1769  		 SELECT
17:17:49 1770  		   ACCOUNT.ID into var_account_id
17:17:49 1771  		 FROM
17:17:49 1772  		   ACCOUNT
17:17:49 1773  		 WHERE
17:17:49 1774  		   ACCOUNT.GROUP_ID = var_group_id;
17:17:49 1775  
17:17:49 1776  		 EXCEPTION
17:17:49 1777  		   WHEN NO_DATA_FOUND THEN
17:17:49 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
17:17:49 1779  	       END;
17:17:49 1780  	 END;
17:17:49 1781  
17:17:49 1782  	 -- Check account status. It should not to be frozen
17:17:49 1783  	 SELECT
17:17:49 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
17:17:49 1785  	 FROM
17:17:49 1786  	   ACCOUNT
17:17:49 1787  	 WHERE
17:17:49 1788  	   ACCOUNT.ID = var_account_id;
17:17:49 1789  
17:17:49 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
17:17:49 1791  	   RAISE ACCOUNT_IS_FROZEN;
17:17:49 1792  	 END IF;
17:17:49 1793  
17:17:49 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
17:17:49 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
17:17:49 1796  	 END IF;
17:17:49 1797  
17:17:49 1798  	 BEGIN
17:17:49 1799  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
17:17:49 1800  	     in_invoice_id => in_invoice_id,
17:17:49 1801  	     out_amount    => var_invoice_amount
17:17:49 1802  	   );
17:17:49 1803  	   EXCEPTION
17:17:49 1804  	     WHEN OTHERS THEN
17:17:49 1805  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
17:17:49 1807  	 END;
17:17:49 1808  
17:17:49 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
17:17:49 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
17:17:49 1811  	 END IF;
17:17:49 1812  
17:17:49 1813  	 SELECT /*+ STAR_TRANSFORMATION */
17:17:49 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
17:17:49 1815  	 FROM
17:17:49 1816  	   CHARGE
17:17:49 1817  	 WHERE
17:17:49 1818  	   CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1819  	   AND (
17:17:49 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 1821  	     OR (
17:17:49 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
17:17:49 1823  	       AND EXISTS (
17:17:49 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:49 1825  	       )
17:17:49 1826  	     )
17:17:49 1827  	   )
17:17:49 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
17:17:49 1829  
17:17:49 1830  	 -- Refunds are negative
17:17:49 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
17:17:49 1832  	 var_refunds_before := 0 - var_refunds_before;
17:17:49 1833  
17:17:49 1834  	 var_charges_amount := 0;
17:17:49 1835  
17:17:49 1836  	 FOR f_processed_charges IN (
17:17:49 1837  	   SELECT
17:17:49 1838  	     CHARGE.CHARGE_AMOUNT
17:17:49 1839  	   FROM
17:17:49 1840  	     CHARGE
17:17:49 1841  	   WHERE
17:17:49 1842  	     CHARGE.INVOICE_ID = in_invoice_id
17:17:49 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
17:17:49 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
17:17:49 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS)
17:17:49 1846  	 )
17:17:49 1847  	 LOOP
17:17:49 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
17:17:49 1849  	 END LOOP;
17:17:49 1850  
17:17:49 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
17:17:49 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
17:17:49 1853  	 END IF;
17:17:49 1854  
17:17:49 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
17:17:49 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
17:17:49 1857  	 END IF;
17:17:49 1858  
17:17:49 1859  	 BEGIN
17:17:49 1860  	   PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 1861  	     in_transaction_id	=> NULL,
17:17:49 1862  	     in_status_id	=> GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
17:17:49 1863  	     in_amount		=> -in_refund_amount,
17:17:49 1864  	     in_created_by	=> in_created_by,
17:17:49 1865  	     in_order_id	=> NULL,
17:17:49 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1867  	     out_transaction_id => var_new_transaction_id
17:17:49 1868  	   );
17:17:49 1869  	   EXCEPTION
17:17:49 1870  	     WHEN OTHERS THEN
17:17:49 1871  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 1873  	 END;
17:17:49 1874  
17:17:49 1875  	 BEGIN
17:17:49 1876  	   PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 1877  	     in_invoice_id	   => in_invoice_id,
17:17:49 1878  	     in_transaction_id	   => var_new_transaction_id,
17:17:49 1879  	     in_instrument_type_id => var_instrument_type_id,
17:17:49 1880  	     in_instrument_id	   => var_instrument_id,
17:17:49 1881  	     in_charge_amount	   => -in_refund_amount,
17:17:49 1882  	     in_created_by	   => in_created_by,
17:17:49 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 1884  	     out_charge_id	   => var_new_charge_id
17:17:49 1885  	   );
17:17:49 1886  	   EXCEPTION
17:17:49 1887  	     WHEN OTHERS THEN
17:17:49 1888  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 1890  	 END;
17:17:49 1891  
17:17:49 1892  	 out_charge_id := var_new_charge_id;
17:17:49 1893  
17:17:49 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
17:17:49 1895  	   BEGIN
17:17:49 1896  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
17:17:49 1897  	       in_subscription_id => var_subscription_id,
17:17:49 1898  	       in_agent_id	  => 0, -- AGENT_ID??
17:17:49 1899  	       in_note		  => in_note,
17:17:49 1900  	       in_created_by	  => in_created_by
17:17:49 1901  	     );
17:17:49 1902  	     EXCEPTION
17:17:49 1903  	       WHEN OTHERS THEN
17:17:49 1904  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
17:17:49 1906  	   END;
17:17:49 1907  	 END IF;
17:17:49 1908  
17:17:49 1909  EXCEPTION
17:17:49 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
17:17:49 1911  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
17:17:49 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
17:17:49 1914  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1915  	   SPROC_NAME, 'Invoice is not closed');
17:17:49 1916  WHEN ACCOUNT_IS_FROZEN THEN
17:17:49 1917  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
17:17:49 1919  WHEN BAD_INVOICE_ID THEN
17:17:49 1920  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1921  	   SPROC_NAME, 'No such invoice');
17:17:49 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
17:17:49 1923  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
17:17:49 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
17:17:49 1926  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1927  	   SPROC_NAME, 'Refund is greater than amount');
17:17:49 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
17:17:49 1929  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
17:17:49 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
17:17:49 1932  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
17:17:49 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 1935  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 1938  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
17:17:49 1941  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
17:17:49 1943  WHEN OTHERS THEN
17:17:49 1944  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1946  END REFUND_INVOICE;
17:17:49 1947  
17:17:49 1948  /******************************************************************************/
17:17:49 1949  
17:17:49 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
17:17:49 1951  	 in_invoice_id		     IN NUMBER,
17:17:49 1952  	 out_order_id		     OUT VARCHAR2,
17:17:49 1953  	 out_external_transaction_id OUT VARCHAR2
17:17:49 1954  ) AS
17:17:49 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
17:17:49 1956  -- VARIABLES
17:17:49 1957  temp_invoice_id number;
17:17:49 1958  cnt_matched_instr number := 0;
17:17:49 1959  -- EXCEPTIONS
17:17:49 1960  BAD_INVOICE_ID EXCEPTION;
17:17:49 1961  BEGIN
17:17:49 1962  
17:17:49 1963  	 BEGIN
17:17:49 1964  	   SELECT
17:17:49 1965  	     i.id into temp_invoice_id
17:17:49 1966  	   from
17:17:49 1967  	     invoice i
17:17:49 1968  	   where
17:17:49 1969  	     i.id = in_invoice_id;
17:17:49 1970  	   EXCEPTION
17:17:49 1971  	     WHEN NO_DATA_FOUND THEN
17:17:49 1972  	       RAISE BAD_INVOICE_ID;
17:17:49 1973  	 END;
17:17:49 1974  
17:17:49 1975  	 select
17:17:49 1976  	   count(1) into cnt_matched_instr
17:17:49 1977  	 from
17:17:49 1978  	   charge ch
17:17:49 1979  	 inner join
17:17:49 1980  	   subscription s
17:17:49 1981  	 on
17:17:49 1982  	   s.instrument_id = ch.instrument_id
17:17:49 1983  	 where
17:17:49 1984  	   ch.invoice_id = in_invoice_id;
17:17:49 1985  
17:17:49 1986  	 if cnt_matched_instr = 0 then
17:17:49 1987  	   out_external_transaction_id := null;
17:17:49 1988  	   out_order_id := null;
17:17:49 1989  	   return;
17:17:49 1990  	 end if;
17:17:49 1991  
17:17:49 1992  	 SELECT
17:17:49 1993  	   t.order_id,
17:17:49 1994  	   ta.external_transaction_id
17:17:49 1995  	   into
17:17:49 1996  	   out_order_id,
17:17:49 1997  	   out_external_transaction_id
17:17:49 1998  	 from
17:17:49 1999  	   charge ch
17:17:49 2000  	   inner join transaction t on ch.transaction_id = t.id
17:17:49 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
17:17:49 2002  	 where
17:17:49 2003  	   ch.invoice_id = in_invoice_id
17:17:49 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:49 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
17:17:49 2006  
17:17:49 2007  EXCEPTION
17:17:49 2008  WHEN BAD_INVOICE_ID THEN
17:17:49 2009  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2010  	   SPROC_NAME, 'No such invoice');
17:17:49 2011  WHEN NO_DATA_FOUND THEN
17:17:49 2012  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2013  	   SPROC_NAME, 'No payment data found');
17:17:49 2014  WHEN OTHERS THEN
17:17:49 2015  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
17:17:49 2018  
17:17:49 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
17:17:49 2020  	 in_invoice_id IN NUMBER,
17:17:49 2021  	 out_is_revoke OUT NUMBER
17:17:49 2022  ) AS
17:17:49 2023  BEGIN
17:17:49 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V15.FALSE, GLOBAL_CONSTANTS_V15.TRUE)
17:17:49 2025  	   into out_is_revoke
17:17:49 2026  	 FROM
17:17:49 2027  	   offer_chain oc,
17:17:49 2028  	   subscription s,
17:17:49 2029  	   license l,
17:17:49 2030  	   invoice i
17:17:49 2031  	 where
17:17:49 2032  	   oc.id = s.offer_chain_id and
17:17:49 2033  	   s.id = l.subscription_id and
17:17:49 2034  	   l.invoice_id = i.id and
17:17:49 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V15.TRUE and
17:17:49 2036  	   i.id = in_invoice_id and
17:17:49 2037  	   rownum < 2
17:17:49 2038  	 ;
17:17:49 2039  END IS_REVOKE_ENTITLEMENTS;
17:17:49 2040  
17:17:49 2041  END PROCS_INVOICE_V15;
17:17:49 2042  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.13
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
17:17:49   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:49   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
17:17:49   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
17:17:49   7  AS
17:17:49   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
17:17:49   9  BEGIN
17:17:49  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
17:17:49  11  	  PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE (
17:17:49  12  	    in_gift_certificate_id	  => rec.Id,
17:17:49  13  	    in_gift_certificate_status_id => in_status_id,
17:17:49  14  	    in_updated_by		  => in_updater
17:17:49  15  	  );
17:17:49  16  	END LOOP;
17:17:49  17  END UPDATE_GC_STATUS_BY_INVOICE;
17:17:49  18  
17:17:49  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
17:17:49  20  	in_invoice_id		     IN NUMBER,
17:17:49  21  	out_is_invoice_for_redeem_gc OUT NUMBER
17:17:49  22  ) AS
17:17:49  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
17:17:49  24  var_is_for_gc NUMBER;
17:17:49  25  BEGIN
17:17:49  26  	SELECT
17:17:49  27  	  count(1) into var_is_for_gc
17:17:49  28  	FROM GIFT_CERTIFICATE GC
17:17:49  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
17:17:49  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
17:17:49  31  
17:17:49  32  	IF var_is_for_gc > 0 THEN
17:17:49  33  	  out_is_invoice_for_redeem_gc := 1;
17:17:49  34  	ELSE
17:17:49  35  	  out_is_invoice_for_redeem_gc := 0;
17:17:49  36  	END IF;
17:17:49  37  END IS_INVOICE_FOR_REDEEMED_GC;
17:17:49  38  
17:17:49  39  PROCEDURE GET_UNREDEEMED_GCS (
17:17:49  40  	out_result_set		OUT SYS_REFCURSOR,
17:17:49  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:49  42  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:49  43  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:49  44  ) AS
17:17:49  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
17:17:49  46  BEGIN
17:17:49  47  	OPEN out_result_set FOR
17:17:49  48  SELECT * FROM
17:17:49  49  (
17:17:49  50  	SELECT
17:17:49  51  	  gc.EXPIRATION_DATE,
17:17:49  52  	  ch.name,
17:17:49  53  	  ch.id offer_chain_id,
17:17:49  54  	  gc.sender_email,
17:17:49  55  	  gc.sender_name,
17:17:49  56  	  gc.recipient_email,
17:17:49  57  	  gc.recipient_name,
17:17:49  58  	  gc.purchase_date,
17:17:49  59  	  gc.redemption_date,
17:17:49  60  	  gc.purchaser_group_id,
17:17:49  61  	  gc.redeemer_group_id,
17:17:49  62  	  gc.code,
17:17:49  63  	  gc.gift_message,
17:17:49  64  	  gc.recipient_notify_date,
17:17:49  65  	  gc.id
17:17:49  66  	FROM
17:17:49  67  	  GIFT_CERTIFICATE gc,
17:17:49  68  	  OFFER_CHAIN ch
17:17:49  69  	WHERE
17:17:49  70  	  ch.id = gc.offer_chain_id
17:17:49  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
17:17:49  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
17:17:49  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
17:17:49  74  	  AND gc.redeemer_group_id is null
17:17:49  75  	  AND NOT EXISTS(
17:17:49  76  	    SELECT NULL
17:17:49  77  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
17:17:49  78  	    WHERE PROCESS_NAME = in_process_name
17:17:49  79  	      AND GENERIC_ID = gc.id
17:17:49  80  	  ) AND EXISTS(
17:17:49  81  	    SELECT NULL
17:17:49  82  	    FROM
17:17:49  83  	      charge c,
17:17:49  84  	      transaction_attempt ta,
17:17:49  85  	      transaction t
17:17:49  86  	    WHERE
17:17:49  87  	      c.invoice_id = gc.purchase_invoice_id and
17:17:49  88  	      c.transaction_id = t.id and
17:17:49  89  	      t.id = ta.transaction_id and
17:17:49  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
17:17:49  91  	  ) AND NOT EXISTS (
17:17:49  92  	    SELECT NULL
17:17:49  93  	    FROM
17:17:49  94  	      charge c,
17:17:49  95  	      transaction t
17:17:49  96  	    WHERE
17:17:49  97  	      c.invoice_id = gc.purchase_invoice_id and
17:17:49  98  	      c.transaction_id = t.id and
17:17:49  99  	      t.is_refund = GLOBAL_CONSTANTS_V15.TRUE
17:17:49 100  	  )
17:17:49 101  	  AND ROWNUM <= in_num_rows*10
17:17:49 102  	  ORDER BY dbms_random.value
17:17:49 103  ) WHERE
17:17:49 104  	  ROWNUM <= in_num_rows;
17:17:49 105  EXCEPTION
17:17:49 106  WHEN OTHERS THEN
17:17:49 107  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 109  END GET_UNREDEEMED_GCS;
17:17:49 110  
17:17:49 111  PROCEDURE ADD_CREDIT_CARD (
17:17:49 112  /*
17:17:49 113  Throws exceptions:
17:17:49 114  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 115  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 116  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 117  */
17:17:49 118  	in_group_id		  IN NUMBER,
17:17:49 119  	in_updated_by		  IN VARCHAR2,
17:17:49 120  	in_instrument_name	  IN VARCHAR2,
17:17:49 121  	in_card_holder_name	  IN VARCHAR2,
17:17:49 122  	in_street_address	  IN VARCHAR2,
17:17:49 123  	in_street_address2	  IN VARCHAR2,
17:17:49 124  	in_state		  IN VARCHAR2,
17:17:49 125  	in_city 		  IN VARCHAR2,
17:17:49 126  	in_postal_code		  IN VARCHAR2,
17:17:49 127  	in_country		  IN CHAR,
17:17:49 128  	in_last_four_cc 	  IN VARCHAR2,
17:17:49 129  	in_expiration_date	  IN DATE,
17:17:49 130  	in_credit_card_type_id	  IN NUMBER,
17:17:49 131  	in_token		  IN VARCHAR2,
17:17:49 132  	in_chase_profile_id	  IN VARCHAR2,
17:17:49 133  	in_credit_card_status_id  IN NUMBER,
17:17:49 134  	in_private_first_name	  IN VARCHAR2,
17:17:49 135  	in_private_last_name	  IN VARCHAR2,
17:17:49 136  	out_credit_card_id	  OUT NUMBER
17:17:49 137  ) AS
17:17:49 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
17:17:49 139  -- VARIABLES
17:17:49 140  var_account_id	      NUMBER;
17:17:49 141  var_account_status      NUMBER;
17:17:49 142  var_credit_card_id      NUMBER;
17:17:49 143  temp_old_credit_card_id NUMBER;
17:17:49 144  -- EXCEPTIONS
17:17:49 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
17:17:49 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
17:17:49 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
17:17:49 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
17:17:49 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
17:17:49 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
17:17:49 151  var_charges_set		SYS_REFCURSOR;
17:17:49 152  var_charge_id		NUMBER;
17:17:49 153  var_charge_invoice_id	NUMBER;
17:17:49 154  var_charge_transaction_id NUMBER;
17:17:49 155  var_charge_amount 	NUMBER(10,2);
17:17:49 156  temp_out_charge_id	NUMBER;
17:17:49 157  temp_out_transaction_id	NUMBER;
17:17:49 158  var_order_id			VARCHAR2(1024);
17:17:49 159  BEGIN
17:17:49 160  
17:17:49 161  	-- Get account id
17:17:49 162  	-- Get account status
17:17:49 163  	SELECT
17:17:49 164  	  ACCOUNT.ID,
17:17:49 165  	  ACCOUNT.ACCOUNT_STATUS_ID
17:17:49 166  	  into
17:17:49 167  	  var_account_id,
17:17:49 168  	  var_account_status
17:17:49 169  	FROM
17:17:49 170  	  ACCOUNT
17:17:49 171  	WHERE
17:17:49 172  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 173  
17:17:49 174  	SELECT
17:17:49 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
17:17:49 176  	FROM DUAL;
17:17:49 177  
17:17:49 178  	-- Insert new row in CREDIT_CARD table
17:17:49 179  	PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_CREDIT_CARD(
17:17:49 180  	  out_credit_card_id	      => var_credit_card_id,
17:17:49 181  	  in_account_id 	      => var_account_id,
17:17:49 182  	  in_instrument_name	      => in_instrument_name,
17:17:49 183  	  in_private_card_holder_name => in_card_holder_name,
17:17:49 184  	  in_private_street_address   => in_street_address,
17:17:49 185  	  in_private_street_address2  => in_street_address2,
17:17:49 186  	  in_state		      => in_state,
17:17:49 187  	  in_city		      => in_city,
17:17:49 188  	  in_postal_code	      => in_postal_code,
17:17:49 189  	  in_country		      => in_country,
17:17:49 190  	  in_last_four_cc	      => in_last_four_cc,
17:17:49 191  	  in_expiration_date	      => in_expiration_date,
17:17:49 192  	  in_credit_card_type_id      => in_credit_card_type_id,
17:17:49 193  	  in_secret_token	      => in_token,
17:17:49 194  	  in_chase_profile_id	      => in_chase_profile_id,
17:17:49 195  	  in_created_by 	      => in_updated_by,
17:17:49 196  	  in_credit_card_status_id    => in_credit_card_status_id,
17:17:49 197  	  in_private_first_name       => in_private_first_name,
17:17:49 198  	  in_private_last_name	      => in_private_last_name
17:17:49 199  	);
17:17:49 200  
17:17:49 201  	out_credit_card_id := var_credit_card_id;
17:17:49 202  
17:17:49 203  EXCEPTION
17:17:49 204  WHEN NO_DATA_FOUND THEN
17:17:49 205  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 206  	  SPROC_NAME, 'No such account');
17:17:49 207  WHEN BAD_OLD_CREDIT_CARD THEN
17:17:49 208  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 209  	  SPROC_NAME, 'Bad old credit card id');
17:17:49 210  WHEN BAD_IS_DEFAULT_VALUE THEN
17:17:49 211  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 212  	  SPROC_NAME, 'Bad is_default value');
17:17:49 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
17:17:49 214  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
17:17:49 216  WHEN BAD_ACCOUNT_STATUS THEN
17:17:49 217  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 218  	  SPROC_NAME, 'Account is not active');
17:17:49 219  WHEN OTHERS THEN
17:17:49 220  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 222  END ADD_CREDIT_CARD;
17:17:49 223  
17:17:49 224  /******************************************************************************/
17:17:49 225  
17:17:49 226  PROCEDURE ADD_PAYPAL (
17:17:49 227  /*
17:17:49 228  Throws exceptions:
17:17:49 229  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 230  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 231  */
17:17:49 232  	in_group_id			IN NUMBER,
17:17:49 233  	in_instrument_name		IN VARCHAR2,
17:17:49 234  	in_private_email_address	IN VARCHAR2,
17:17:49 235  	in_created_by			IN VARCHAR2,
17:17:49 236  	in_paypal_status_id		IN NUMBER,
17:17:49 237  	in_paypal_prvt_street_address	IN VARCHAR2,
17:17:49 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
17:17:49 239  	in_state			IN VARCHAR2,
17:17:49 240  	in_city 			IN VARCHAR2,
17:17:49 241  	in_postal_code			IN VARCHAR2,
17:17:49 242  	in_country			IN CHAR,
17:17:49 243  	in_expiration_date		IN DATE,
17:17:49 244  	in_secret_token 		IN VARCHAR2,
17:17:49 245  	out_paypal_id			OUT NUMBER
17:17:49 246  ) AS
17:17:49 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
17:17:49 248  var_paypal_id NUMBER;
17:17:49 249  var_account_id  NUMBER;
17:17:49 250  -- EXCEPTIONS
17:17:49 251  BAD_GROUP_ID	    EXCEPTION;
17:17:49 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
17:17:49 253  BAD_PAYPAL_STATUS     EXCEPTION;
17:17:49 254  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 255  BEGIN
17:17:49 256  
17:17:49 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
17:17:49 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
17:17:49 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
17:17:49 260  	  RAISE BAD_PAYPAL_STATUS;
17:17:49 261  	END IF;
17:17:49 262  
17:17:49 263  	BEGIN
17:17:49 264  	  SELECT
17:17:49 265  	    a.id into var_account_id
17:17:49 266  	  from
17:17:49 267  	    account a
17:17:49 268  	  where
17:17:49 269  	    a.group_id = in_group_id;
17:17:49 270  	  EXCEPTION
17:17:49 271  	    WHEN NO_DATA_FOUND THEN
17:17:49 272  	      RAISE BAD_GROUP_ID;
17:17:49 273  	END;
17:17:49 274  
17:17:49 275  	BEGIN
17:17:49 276  	  PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_PAYPAL(
17:17:49 277  	    out_paypal_id		   => var_paypal_id,
17:17:49 278  	    in_paypal_id		   => NULL,
17:17:49 279  	    in_account_id		   => var_account_id,
17:17:49 280  	    in_instrument_name		   => in_instrument_name,
17:17:49 281  	    in_private_email_address	   => in_private_email_address,
17:17:49 282  	    in_created_by		   => in_created_by,
17:17:49 283  	    in_paypal_status_id 	   => in_paypal_status_id,
17:17:49 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
17:17:49 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
17:17:49 286  	    in_state			   => in_state,
17:17:49 287  	    in_city			   => in_city,
17:17:49 288  	    in_postal_code		   => in_postal_code,
17:17:49 289  	    in_country			   => in_country,
17:17:49 290  	    in_expiration_date		   => in_expiration_date,
17:17:49 291  	    in_secret_token		   => in_secret_token
17:17:49 292  	  );
17:17:49 293  	  EXCEPTION
17:17:49 294  	    WHEN OTHERS THEN
17:17:49 295  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
17:17:49 297  	END;
17:17:49 298  
17:17:49 299  	out_paypal_id := var_paypal_id;
17:17:49 300  
17:17:49 301  EXCEPTION
17:17:49 302  WHEN BAD_GROUP_ID THEN
17:17:49 303  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 304  	  SPROC_NAME, 'No such group id');
17:17:49 305  WHEN BAD_PAYPAL_STATUS THEN
17:17:49 306  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 307  	  SPROC_NAME, 'Bad paypal status');
17:17:49 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
17:17:49 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
17:17:49 311  WHEN OTHERS THEN
17:17:49 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 314  END ADD_PAYPAL;
17:17:49 315  
17:17:49 316  /******************************************************************************/
17:17:49 317  
17:17:49 318  PROCEDURE DISABLE_CREDIT_CARD (
17:17:49 319  /*
17:17:49 320  Throws exceptions:
17:17:49 321  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 322  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 323  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 324  */
17:17:49 325  	in_credit_card_id IN NUMBER,
17:17:49 326  	in_updated_by	  IN VARCHAR2
17:17:49 327  ) AS
17:17:49 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
17:17:49 329  -- VARIBLES
17:17:49 330  var_account_id		     NUMBER;
17:17:49 331  var_group_id		     NUMBER;
17:17:49 332  var_credit_card_status	     NUMBER;
17:17:49 333  var_pending_transactions_num   NUMBER;
17:17:49 334  var_pending_invoices_num	     NUMBER;
17:17:49 335  current_def_instrument_type_id NUMBER;
17:17:49 336  current_def_instrument_id      NUMBER;
17:17:49 337  -- EXCEPTIONS
17:17:49 338  BAD_CC_STATUS		   EXCEPTION;
17:17:49 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
17:17:49 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
17:17:49 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
17:17:49 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
17:17:49 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
17:17:49 344  BEGIN
17:17:49 345  
17:17:49 346  	-- Get credit card status
17:17:49 347  	-- Get account id
17:17:49 348  	SELECT
17:17:49 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
17:17:49 350  	  CREDIT_CARD.ACCOUNT_ID
17:17:49 351  	  into
17:17:49 352  	  var_credit_card_status,
17:17:49 353  	  var_account_id
17:17:49 354  	FROM
17:17:49 355  	  CREDIT_CARD
17:17:49 356  	WHERE
17:17:49 357  	  CREDIT_CARD.ID = in_credit_card_id;
17:17:49 358  
17:17:49 359  	-- Check that we can disable this credit card (STUB)
17:17:49 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
17:17:49 362  	END IF;
17:17:49 363  
17:17:49 364  	-- Get account id
17:17:49 365  	SELECT
17:17:49 366  	  ACCOUNT.GROUP_ID into var_group_id
17:17:49 367  	FROM
17:17:49 368  	  ACCOUNT
17:17:49 369  	WHERE
17:17:49 370  	  ACCOUNT.ID = var_account_id;
17:17:49 371  
17:17:49 372  	-- Card should to be active
17:17:49 373  	IF var_credit_card_status != GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE THEN
17:17:49 374  	  RAISE BAD_CC_STATUS;
17:17:49 375  	END IF;
17:17:49 376  
17:17:49 377  	-- Looking for pending transactions associated with given credit card
17:17:49 378  	SELECT
17:17:49 379  	  COUNT(*) into var_pending_invoices_num
17:17:49 380  	FROM
17:17:49 381  	  CHARGE
17:17:49 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 383  	WHERE
17:17:49 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
17:17:49 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
17:17:49 387  
17:17:49 388  	IF var_pending_invoices_num > 0 THEN
17:17:49 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
17:17:49 390  	END IF;
17:17:49 391  
17:17:49 392  	-- Getting current default financial instrument
17:17:49 393  	BEGIN
17:17:49 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 395  	    in_group_id 	   => var_group_id,
17:17:49 396  	    out_instrument_type_id => current_def_instrument_type_id,
17:17:49 397  	    out_instrument_id	   => current_def_instrument_id
17:17:49 398  	  );
17:17:49 399  	  EXCEPTION
17:17:49 400  	    WHEN OTHERS THEN
17:17:49 401  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
17:17:49 403  	END;
17:17:49 404  
17:17:49 405  	-- Checking that credit card is not default
17:17:49 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49 407  	  AND current_def_instrument_id = in_credit_card_id THEN
17:17:49 408  	  BEGIN
17:17:49 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
17:17:49 410  	      in_group_id => var_group_id
17:17:49 411  	    );
17:17:49 412  	  EXCEPTION
17:17:49 413  	    WHEN OTHERS THEN
17:17:49 414  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
17:17:49 416  	  END;
17:17:49 417  	END IF;
17:17:49 418  
17:17:49 419  	-- Update credit card status
17:17:49 420  	PROCS_FIN_INSTRUMENTS_V15.UPDATE_CREDIT_CARD_STATUS(
17:17:49 421  	  in_credit_card_id	   => in_credit_card_id,
17:17:49 422  	  in_updated_by 	   => in_updated_by,
17:17:49 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
17:17:49 424  	);
17:17:49 425  
17:17:49 426  EXCEPTION
17:17:49 427  WHEN NO_DATA_FOUND THEN
17:17:49 428  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 429  	  SPROC_NAME, 'No such credit card');
17:17:49 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
17:17:49 431  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
17:17:49 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
17:17:49 434  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
17:17:49 436  WHEN BAD_CC_STATUS THEN
17:17:49 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 438  	  SPROC_NAME, 'Credit card is not active');
17:17:49 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
17:17:49 440  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
17:17:49 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
17:17:49 443  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
17:17:49 445  WHEN OTHERS THEN
17:17:49 446  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 448  END DISABLE_CREDIT_CARD;
17:17:49 449  
17:17:49 450  /******************************************************************************/
17:17:49 451  
17:17:49 452  PROCEDURE DISABLE_PAYPAL (
17:17:49 453  /*
17:17:49 454  Throws exceptions:
17:17:49 455  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 456  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 457  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:49 458  */
17:17:49 459  	in_paypal_id  IN NUMBER,
17:17:49 460  	in_updated_by IN VARCHAR2
17:17:49 461  ) AS
17:17:49 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
17:17:49 463  -- VARIABLES
17:17:49 464  var_paypal_status_id NUMBER;
17:17:49 465  var_account_id	   NUMBER;
17:17:49 466  var_group_id	   NUMBER;
17:17:49 467  var_pending_invoices_num NUMBER;
17:17:49 468  current_def_instrument_type_id NUMBER;
17:17:49 469  current_def_instrument_id NUMBER;
17:17:49 470  -- EXCEPTIONS
17:17:49 471  BAD_PAYPAL_ID EXCEPTION;
17:17:49 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
17:17:49 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
17:17:49 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
17:17:49 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
17:17:49 476  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 477  BEGIN
17:17:49 478  
17:17:49 479  	-- Get Paypal status
17:17:49 480  	-- Get account
17:17:49 481  	BEGIN
17:17:49 482  	  SELECT
17:17:49 483  	    PAYPAL.PAYPAL_STATUS_ID,
17:17:49 484  	    PAYPAL.ACCOUNT_ID
17:17:49 485  	    into
17:17:49 486  	    var_paypal_status_id,
17:17:49 487  	    var_account_id
17:17:49 488  	  FROM
17:17:49 489  	    PAYPAL
17:17:49 490  	  WHERE
17:17:49 491  	    PAYPAL.ID = in_paypal_id;
17:17:49 492  	  EXCEPTION
17:17:49 493  	    WHEN NO_DATA_FOUND THEN
17:17:49 494  	      RAISE BAD_PAYPAL_ID;
17:17:49 495  	END;
17:17:49 496  
17:17:49 497  	-- Get group id
17:17:49 498  	SELECT
17:17:49 499  	  ACCOUNT.GROUP_ID into var_group_id
17:17:49 500  	FROM
17:17:49 501  	  ACCOUNT
17:17:49 502  	WHERE
17:17:49 503  	  ACCOUNT.ID = var_account_id;
17:17:49 504  
17:17:49 505  	-- Card should not be disabled
17:17:49 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V15.PAYPAL_INACTIVE THEN
17:17:49 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
17:17:49 508  	END IF;
17:17:49 509  
17:17:49 510  	-- Looking for pending transactions associated with given credit card
17:17:49 511  	SELECT
17:17:49 512  	  COUNT(*) into var_pending_invoices_num
17:17:49 513  	FROM
17:17:49 514  	  CHARGE
17:17:49 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
17:17:49 516  	WHERE
17:17:49 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
17:17:49 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
17:17:49 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
17:17:49 520  
17:17:49 521  	IF var_pending_invoices_num > 0 THEN
17:17:49 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
17:17:49 523  	END IF;
17:17:49 524  
17:17:49 525  	-- Getting current default financial instrument
17:17:49 526  	BEGIN
17:17:49 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 528  	    in_group_id 	   => var_group_id,
17:17:49 529  	    out_instrument_type_id => current_def_instrument_type_id,
17:17:49 530  	    out_instrument_id	   => current_def_instrument_id
17:17:49 531  	  );
17:17:49 532  	  EXCEPTION
17:17:49 533  	    WHEN OTHERS THEN
17:17:49 534  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
17:17:49 536  	END;
17:17:49 537  
17:17:49 538  	-- Checking that credit card is not default
17:17:49 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
17:17:49 540  	  AND current_def_instrument_id = in_paypal_id THEN
17:17:49 541  	  BEGIN
17:17:49 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
17:17:49 543  	      in_group_id => var_group_id
17:17:49 544  	    );
17:17:49 545  	  EXCEPTION
17:17:49 546  	    WHEN OTHERS THEN
17:17:49 547  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
17:17:49 549  	  END;
17:17:49 550  	END IF;
17:17:49 551  
17:17:49 552  	PROCS_FIN_INSTRUMENTS_V15.UPDATE_PAYPAL_STATUS(
17:17:49 553  	  in_paypal_id	      => in_paypal_id,
17:17:49 554  	  in_updated_by       => in_updated_by,
17:17:49 555  	  in_paypal_status_id => GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
17:17:49 556  	);
17:17:49 557  
17:17:49 558  EXCEPTION
17:17:49 559  WHEN BAD_PAYPAL_ID THEN
17:17:49 560  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 561  	  SPROC_NAME, 'No such paypal');
17:17:49 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
17:17:49 563  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 564  	  SPROC_NAME, 'Paypal already inactive');
17:17:49 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
17:17:49 566  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
17:17:49 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
17:17:49 569  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
17:17:49 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
17:17:49 572  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
17:17:49 574  WHEN OTHERS THEN
17:17:49 575  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 577  END DISABLE_PAYPAL;
17:17:49 578  
17:17:49 579  /******************************************************************************/
17:17:49 580  
17:17:49 581  PROCEDURE UPDATE_CREDIT_CARD (
17:17:49 582  /*
17:17:49 583  Throws exceptions:
17:17:49 584  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 585  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 586  */
17:17:49 587  	in_credit_card_id	  IN NUMBER,
17:17:49 588  	in_updated_by		  IN VARCHAR2,
17:17:49 589  	in_instrument_name	  IN VARCHAR2,
17:17:49 590  	in_is_default		  IN NUMBER
17:17:49 591  ) AS
17:17:49 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
17:17:49 593  -- VARIABLES
17:17:49 594  var_account_id NUMBER;
17:17:49 595  var_group_id   NUMBER;
17:17:49 596  temp_cc_rownum NUMBER;
17:17:49 597  current_def_instrument_type_id NUMBER;
17:17:49 598  current_def_instrument_id      NUMBER;
17:17:49 599  -- EXCEPTION
17:17:49 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
17:17:49 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
17:17:49 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
17:17:49 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
17:17:49 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
17:17:49 605  BEGIN
17:17:49 606  
17:17:49 607  	-- Get account id
17:17:49 608  	SELECT
17:17:49 609  	  CREDIT_CARD.ACCOUNT_ID
17:17:49 610  	  into
17:17:49 611  	  var_account_id
17:17:49 612  	FROM
17:17:49 613  	  CREDIT_CARD
17:17:49 614  	WHERE
17:17:49 615  	  CREDIT_CARD.ID = in_credit_card_id;
17:17:49 616  
17:17:49 617  	-- Get group id
17:17:49 618  	SELECT
17:17:49 619  	  ACCOUNT.GROUP_ID into var_group_id
17:17:49 620  	FROM
17:17:49 621  	  ACCOUNT
17:17:49 622  	WHERE
17:17:49 623  	  ACCOUNT.ID = var_account_id;
17:17:49 624  
17:17:49 625  	-- Check that passed data is correct
17:17:49 626  	IF in_is_default != GLOBAL_CONSTANTS_V15.TRUE
17:17:49 627  	  AND in_is_default != GLOBAL_CONSTANTS_V15.FALSE
17:17:49 628  	  AND in_is_default IS NOT NULL THEN
17:17:49 629  	  RAISE BAD_IS_DEFAULT_VALUE;
17:17:49 630  	END IF;
17:17:49 631  
17:17:49 632  	-- Update credit card
17:17:49 633  	IF in_instrument_name IS NOT NULL THEN
17:17:49 634  	  PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_CREDIT_CARD(
17:17:49 635  	    in_credit_card_id  => in_credit_card_id,
17:17:49 636  	    in_updated_by      => in_updated_by,
17:17:49 637  	    in_instrument_name => in_instrument_name
17:17:49 638  	  );
17:17:49 639  	END IF;
17:17:49 640  
17:17:49 641  	-- Set default financial instrument
17:17:49 642  	IF in_is_default = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 643  	  BEGIN
17:17:49 644  	    PROCS_FIN_INSTRUMENTS_V15.SET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 645  	      in_group_id	    => var_group_id,
17:17:49 646  	      in_instrument_type_id => GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD,
17:17:49 647  	      in_instrument_id	    => in_credit_card_id,
17:17:49 648  	      in_updated_by	    => in_updated_by
17:17:49 649  	    );
17:17:49 650  	    EXCEPTION
17:17:49 651  	      WHEN OTHERS THEN
17:17:49 652  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
17:17:49 654  	  END;
17:17:49 655  	END IF;
17:17:49 656  
17:17:49 657  	-- Set default financial instrument
17:17:49 658  	IF in_is_default = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 659  	  BEGIN
17:17:49 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 661  	      in_group_id	     => var_group_id,
17:17:49 662  	      out_instrument_type_id => current_def_instrument_type_id,
17:17:49 663  	      out_instrument_id      => current_def_instrument_id
17:17:49 664  	    );
17:17:49 665  	  EXCEPTION
17:17:49 666  	    WHEN OTHERS THEN
17:17:49 667  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
17:17:49 669  	  END;
17:17:49 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49 671  	    AND current_def_instrument_id = in_credit_card_id THEN
17:17:49 672  	    BEGIN
17:17:49 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
17:17:49 674  		in_group_id => var_group_id
17:17:49 675  	      );
17:17:49 676  	      EXCEPTION
17:17:49 677  		WHEN OTHERS THEN
17:17:49 678  		  EXCEPTION_MESSAGE := SQLERRM;
17:17:49 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
17:17:49 680  	    END;
17:17:49 681  	  END IF;
17:17:49 682  	END IF;
17:17:49 683  
17:17:49 684  EXCEPTION
17:17:49 685  WHEN NO_DATA_FOUND THEN
17:17:49 686  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 687  	  SPROC_NAME, 'No such credit card');
17:17:49 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
17:17:49 689  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
17:17:49 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
17:17:49 692  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
17:17:49 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
17:17:49 695  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
17:17:49 697  WHEN OTHERS THEN
17:17:49 698  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 700  END UPDATE_CREDIT_CARD;
17:17:49 701  
17:17:49 702  /******************************************************************************/
17:17:49 703  
17:17:49 704  PROCEDURE START_GC_PURCHASING (
17:17:49 705  	in_group_id		  IN NUMBER,
17:17:49 706  	in_offer_chain_id	  IN VARCHAR2,
17:17:49 707  	in_gift_certificate_code  IN  VARCHAR2,
17:17:49 708  	in_created_by		  IN  VARCHAR2,
17:17:49 709  	in_recipient_name	  IN  VARCHAR2,
17:17:49 710  	in_recipient_email	  IN  VARCHAR2,
17:17:49 711  	in_recipient_address_id   IN NUMBER,
17:17:49 712  	in_recipient_notify_date  IN DATE,
17:17:49 713  	in_sender_name		  IN VARCHAR2,
17:17:49 714  	in_sender_email 	  IN VARCHAR2,
17:17:49 715  	in_gift_message 	  IN  VARCHAR2,
17:17:49 716  	in_expiration_date	  IN DATE,
17:17:49 717  	out_gift_certificate_id   OUT NUMBER,
17:17:49 718  	out_invoice_id		  OUT NUMBER
17:17:49 719  ) AS
17:17:49 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
17:17:49 721  -- VARIABLES
17:17:49 722  var_account_id		NUMBER;
17:17:49 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
17:17:49 724  var_och_is_gc		NUMBER;
17:17:49 725  var_offer_chain_status_id NUMBER;
17:17:49 726  var_is_for_redemption	NUMBER;
17:17:49 727  var_new_invoice_id	NUMBER;
17:17:49 728  var_gift_cert_id		NUMBER;
17:17:49 729  var_account_tax_exempt_id VARCHAR2(255);
17:17:49 730  -- EXCEPTIONS
17:17:49 731  BAD_GROUP_ID		    EXCEPTION;
17:17:49 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
17:17:49 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
17:17:49 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
17:17:49 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
17:17:49 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
17:17:49 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
17:17:49 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
17:17:49 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
17:17:49 740  
17:17:49 741  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 742  BEGIN
17:17:49 743  	-- Get account id
17:17:49 744  	BEGIN
17:17:49 745  	  SELECT
17:17:49 746  	    ACCOUNT.ID,
17:17:49 747  	    ACCOUNT.TAX_EXEMPT_ID
17:17:49 748  	    into
17:17:49 749  	    var_account_id,
17:17:49 750  	    var_account_tax_exempt_id
17:17:49 751  	  FROM
17:17:49 752  	    ACCOUNT
17:17:49 753  	  WHERE
17:17:49 754  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 755  	  EXCEPTION
17:17:49 756  	  WHEN NO_DATA_FOUND THEN
17:17:49 757  	    RAISE BAD_GROUP_ID;
17:17:49 758  	END;
17:17:49 759  
17:17:49 760  	-- Check for the same code
17:17:49 761  	BEGIN
17:17:49 762  	  SELECT
17:17:49 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
17:17:49 764  	  FROM
17:17:49 765  	    GIFT_CERTIFICATE
17:17:49 766  	  WHERE
17:17:49 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
17:17:49 768  
17:17:49 769  	  RAISE GC_CODE_ALREADY_EXISTS;
17:17:49 770  
17:17:49 771  	  EXCEPTION
17:17:49 772  	    WHEN NO_DATA_FOUND THEN
17:17:49 773  	      NULL;
17:17:49 774  	END;
17:17:49 775  
17:17:49 776  	-- Get offer chain flag "is_gift_certificate"
17:17:49 777  	BEGIN
17:17:49 778  	  SELECT
17:17:49 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
17:17:49 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
17:17:49 781  	    into
17:17:49 782  	    var_och_is_gc,
17:17:49 783  	    var_offer_chain_status_id
17:17:49 784  	  FROM
17:17:49 785  	    OFFER_CHAIN
17:17:49 786  	  WHERE
17:17:49 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
17:17:49 788  	  EXCEPTION
17:17:49 789  	  WHEN NO_DATA_FOUND THEN
17:17:49 790  	    RAISE BAD_OFFER_CHAIN_ID;
17:17:49 791  	END;
17:17:49 792  
17:17:49 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V15.TRUE
17:17:49 794  	  OR var_och_is_gc IS NULL THEN
17:17:49 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
17:17:49 796  	END IF;
17:17:49 797  
17:17:49 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
17:17:49 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
17:17:49 800  	END IF;
17:17:49 801  
17:17:49 802  	-- norlov: #38151 check if the OC is for Redemption:
17:17:49 803  	SELECT
17:17:49 804  	  COUNT(*) into var_is_for_redemption
17:17:49 805  	FROM
17:17:49 806  	  OFFER_CHAIN_ELIGIBILITY
17:17:49 807  	WHERE
17:17:49 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
17:17:49 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
17:17:49 811  
17:17:49 812  	IF var_is_for_redemption > 0 THEN
17:17:49 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
17:17:49 814  	END IF;
17:17:49 815  
17:17:49 816  	-- Create new invoice
17:17:49 817  	BEGIN
17:17:49 818  	  PROCS_INVOICE_V15.CREATE_INVOICE(
17:17:49 819  	    in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
17:17:49 820  	    in_created_by     => in_created_by,
17:17:49 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
17:17:49 822  	    out_invoice_id    => var_new_invoice_id
17:17:49 823  	  );
17:17:49 824  	  EXCEPTION
17:17:49 825  	    WHEN OTHERS THEN
17:17:49 826  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 827  	      RAISE CAN_NOT_CREATE_INVOICE;
17:17:49 828  	END;
17:17:49 829  
17:17:49 830  	-- Add line items for new invoice
17:17:49 831  	BEGIN
17:17:49 832  	  FOR f_offer_data IN (
17:17:49 833  	    SELECT
17:17:49 834  	      OFFER_ID,
17:17:49 835  	      NUM_RECURRENCES
17:17:49 836  	    FROM
17:17:49 837  	      OFFER_OFFER_CHAIN
17:17:49 838  	    WHERE
17:17:49 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 840  	  )
17:17:49 841  	  LOOP
17:17:49 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
17:17:49 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
17:17:49 844  	    END IF;
17:17:49 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
17:17:49 846  	    LOOP
17:17:49 847  	      PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
17:17:49 848  		in_invoice_id => var_new_invoice_id,
17:17:49 849  		in_offer_id   => f_offer_data.OFFER_ID,
17:17:49 850  		in_created_by => in_created_by
17:17:49 851  	      );
17:17:49 852  	    END LOOP;
17:17:49 853  	  END LOOP;
17:17:49 854  
17:17:49 855  	  EXCEPTION
17:17:49 856  	    WHEN OTHERS THEN
17:17:49 857  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
17:17:49 859  	END;
17:17:49 860  
17:17:49 861  	PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_GIFT_CERTIFICATE(
17:17:49 862  	  out_gift_certificate_id	=> var_gift_cert_id,
17:17:49 863  	  in_purchaser_group_id 	=> in_group_id,
17:17:49 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
17:17:49 865  	  in_offer_chain_id		=> in_offer_chain_id,
17:17:49 866  	  in_expiration_date		=> in_expiration_date,
17:17:49 867  	  in_purchase_date		=> SYSDATE,
17:17:49 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE,
17:17:49 869  	  in_code			=> in_gift_certificate_code,
17:17:49 870  	  in_created_by 		=> in_created_by,
17:17:49 871  	  in_recipient_name		=> in_recipient_name,
17:17:49 872  	  in_gift_message		=> in_gift_message,
17:17:49 873  	  in_recipient_email		=> in_recipient_email,
17:17:49 874  	  in_sender_email		=> in_sender_email,
17:17:49 875  	  in_sender_name		=> in_sender_name,
17:17:49 876  	  in_recipient_address_id	=> in_recipient_address_id,
17:17:49 877  	  in_recipient_notify_date	=> in_recipient_notify_date
17:17:49 878  	);
17:17:49 879  
17:17:49 880  	out_gift_certificate_id := var_gift_cert_id;
17:17:49 881  	out_invoice_id := var_new_invoice_id;
17:17:49 882  
17:17:49 883  EXCEPTION
17:17:49 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
17:17:49 885  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 886  	  SPROC_NAME, 'Offer chain is not active');
17:17:49 887  WHEN GC_CODE_ALREADY_EXISTS THEN
17:17:49 888  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:49 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
17:17:49 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
17:17:49 891  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
17:17:49 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
17:17:49 894  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
17:17:49 896  WHEN CAN_NOT_CREATE_INVOICE THEN
17:17:49 897  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
17:17:49 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
17:17:49 900  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
17:17:49 902  WHEN BAD_GROUP_ID THEN
17:17:49 903  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 904  	  SPROC_NAME, 'No such group id');
17:17:49 905  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:49 906  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 907  	  SPROC_NAME, 'No such offer chain');
17:17:49 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
17:17:49 909  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
17:17:49 911  WHEN OTHERS THEN
17:17:49 912  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 914  END START_GC_PURCHASING;
17:17:49 915  
17:17:49 916  /******************************************************************************/
17:17:49 917  
17:17:49 918  PROCEDURE FINALIZE_GC_PURCHASING (
17:17:49 919  	in_invoice_id	      IN NUMBER,
17:17:49 920  	in_created_by	      IN VARCHAR2,
17:17:49 921  	in_instrument_id      IN NUMBER,
17:17:49 922  	in_instrument_type_id IN NUMBER,
17:17:49 923  	in_order_id	      IN VARCHAR2,
17:17:49 924  	in_transaction_id     IN NUMBER,
17:17:49 925  	out_charge_amount     OUT NUMBER
17:17:49 926  ) AS
17:17:49 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
17:17:49 928  -- VARIABLES
17:17:49 929  temp_transaction_id_count NUMBER;
17:17:49 930  var_invoice_amount	NUMBER(10,2);
17:17:49 931  var_transaction_id	NUMBER;
17:17:49 932  var_new_charge_id 	NUMBER;
17:17:49 933  -- EXCEPTIONS
17:17:49 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
17:17:49 935  BAD_PAYPAL_ID		  EXCEPTION;
17:17:49 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
17:17:49 937  TRANSACTION_EXISTS	  EXCEPTION;
17:17:49 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
17:17:49 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
17:17:49 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
17:17:49 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
17:17:49 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
17:17:49 943  BEGIN
17:17:49 944  
17:17:49 945  	-- Check that instrument exists
17:17:49 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 948  	    RAISE BAD_CREDIT_CARD_ID;
17:17:49 949  	  END IF;
17:17:49 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 952  	    RAISE BAD_PAYPAL_ID;
17:17:49 953  	  END IF;
17:17:49 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
17:17:49 955  	  NULL;
17:17:49 956  	ELSE
17:17:49 957  	  RAISE BAD_INSTRUMENT_TYPE;
17:17:49 958  	END IF;
17:17:49 959  
17:17:49 960  	-- Check that transaction with given id do not exists
17:17:49 961  	SELECT
17:17:49 962  	  COUNT(*) into temp_transaction_id_count
17:17:49 963  	FROM
17:17:49 964  	  TRANSACTION
17:17:49 965  	WHERE
17:17:49 966  	  TRANSACTION.ID = in_transaction_id;
17:17:49 967  
17:17:49 968  	IF temp_transaction_id_count > 0 THEN
17:17:49 969  	  RAISE TRANSACTION_EXISTS;
17:17:49 970  	END IF;
17:17:49 971  
17:17:49 972  	-- Calculate new invoice amount
17:17:49 973  	BEGIN
17:17:49 974  	  PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
17:17:49 975  	  EXCEPTION
17:17:49 976  	    WHEN OTHERS THEN
17:17:49 977  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
17:17:49 979  	END;
17:17:49 980  
17:17:49 981  	IF var_invoice_amount > 0
17:17:49 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
17:17:49 983  	  RAISE CAN_NOT_USE_FCINSTR;
17:17:49 984  	END IF;
17:17:49 985  
17:17:49 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
17:17:49 987  	IF var_invoice_amount = 0 THEN
17:17:49 988  	  PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
17:17:49 989  	    in_invoice_id		   => in_invoice_id,
17:17:49 990  	    in_updated_by		   => in_created_by,
17:17:49 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V15.INVOICE_CLOSED
17:17:49 992  	  );
17:17:49 993  	END IF;
17:17:49 994  
17:17:49 995  	IF var_invoice_amount > 0 THEN
17:17:49 996  	  -- Create transaction
17:17:49 997  	  BEGIN
17:17:49 998  	    PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 999  	      in_transaction_id  => in_transaction_id,
17:17:49 1000  	       in_status_id	  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
17:17:49 1001  	       in_amount	  => var_invoice_amount,
17:17:49 1002  	       in_created_by	  => in_created_by,
17:17:49 1003  	       in_order_id	  => in_order_id,
17:17:49 1004  	       out_transaction_id => var_transaction_id
17:17:49 1005  	     );
17:17:49 1006  	     EXCEPTION
17:17:49 1007  	       WHEN OTHERS THEN
17:17:49 1008  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 1010  	   END;
17:17:49 1011  
17:17:49 1012  	   -- Create charge
17:17:49 1013  	   BEGIN
17:17:49 1014  	     PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 1015  	       in_invoice_id	     => in_invoice_id,
17:17:49 1016  	       in_transaction_id     => var_transaction_id,
17:17:49 1017  	       in_instrument_type_id => in_instrument_type_id,
17:17:49 1018  	       in_instrument_id      => in_instrument_id,
17:17:49 1019  	       in_charge_amount      => var_invoice_amount,
17:17:49 1020  	       in_created_by	     => in_created_by,
17:17:49 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 1022  	       out_charge_id	     => var_new_charge_id
17:17:49 1023  	     );
17:17:49 1024  	     out_charge_amount := var_invoice_amount;
17:17:49 1025  	     EXCEPTION
17:17:49 1026  	       WHEN OTHERS THEN
17:17:49 1027  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 1029  	   END;
17:17:49 1030  	 ELSE
17:17:49 1031  	   out_charge_amount := 0;
17:17:49 1032  	 END IF;
17:17:49 1033  
17:17:49 1034  EXCEPTION
17:17:49 1035  WHEN CAN_NOT_USE_FCINSTR THEN
17:17:49 1036  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
17:17:49 1038  WHEN BAD_CREDIT_CARD_ID THEN
17:17:49 1039  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1040  	   SPROC_NAME, 'Bad credit card id');
17:17:49 1041  WHEN BAD_PAYPAL_ID THEN
17:17:49 1042  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1043  	   SPROC_NAME, 'Bad paypal id');
17:17:49 1044  WHEN BAD_INSTRUMENT_TYPE THEN
17:17:49 1045  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1046  	   SPROC_NAME, 'Bad instrument type');
17:17:49 1047  WHEN TRANSACTION_EXISTS THEN
17:17:49 1048  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:49 1049  	   SPROC_NAME, 'Transaction with given id already exists');
17:17:49 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 1051  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 1054  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
17:17:49 1057  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
17:17:49 1059  WHEN OTHERS THEN
17:17:49 1060  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1062  END FINALIZE_GC_PURCHASING;
17:17:49 1063  
17:17:49 1064  /******************************************************************************/
17:17:49 1065  
17:17:49 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
17:17:49 1067  	 in_group_id		   IN NUMBER,
17:17:49 1068  	 in_offer_chain_id	   IN VARCHAR2,
17:17:49 1069  	 in_gift_certificate_code  IN VARCHAR2,
17:17:49 1070  	 in_created_by		   IN VARCHAR2,
17:17:49 1071  	 in_recipient_name	   IN VARCHAR2,
17:17:49 1072  	 in_recipient_email	   IN VARCHAR2,
17:17:49 1073  	 in_sender_name 	   IN VARCHAR2,
17:17:49 1074  	 in_sender_email	   IN VARCHAR2,
17:17:49 1075  	 in_gift_message	   IN VARCHAR2,
17:17:49 1076  	 in_instrument_id	   IN NUMBER,
17:17:49 1077  	 in_instrument_type_id	   IN NUMBER,
17:17:49 1078  	 in_expiration_date	   IN DATE,
17:17:49 1079  	 in_order_id		   IN VARCHAR2,
17:17:49 1080  	 in_transaction_id	   IN NUMBER
17:17:49 1081  ) AS
17:17:49 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
17:17:49 1083  -- VARIABLES
17:17:49 1084  var_gift_cert_id   NUMBER;
17:17:49 1085  var_account_id	  NUMBER;
17:17:49 1086  var_invoice_amount NUMBER (10,2);
17:17:49 1087  var_new_invoice_id NUMBER;
17:17:49 1088  var_new_charge_id  NUMBER;
17:17:49 1089  var_och_is_gc	  NUMBER;
17:17:49 1090  var_offer_chain_status_id NUMBER;
17:17:49 1091  var_is_for_redemption	 NUMBER;
17:17:49 1092  var_account_tax_exempt_id VARCHAR2(255);
17:17:49 1093  
17:17:49 1094  temp_transaction_id_count NUMBER;
17:17:49 1095  var_transaction_id	 NUMBER;
17:17:49 1096  temp_gc_code VARCHAR2(255);
17:17:49 1097  
17:17:49 1098  var_invoice_status_id NUMBER;
17:17:49 1099  -- EXCEPTIONS
17:17:49 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
17:17:49 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
17:17:49 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
17:17:49 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
17:17:49 1104  BAD_GROUP_ID			   EXCEPTION;
17:17:49 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
17:17:49 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
17:17:49 1107  TRANSACTION_EXISTS		   EXCEPTION;
17:17:49 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
17:17:49 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
17:17:49 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
17:17:49 1111  BAD_PAYPAL_ID			   EXCEPTION;
17:17:49 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
17:17:49 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
17:17:49 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
17:17:49 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
17:17:49 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
17:17:49 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
17:17:49 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
17:17:49 1119  BEGIN
17:17:49 1120  
17:17:49 1121  	 -- Get account id
17:17:49 1122  	 BEGIN
17:17:49 1123  	   SELECT
17:17:49 1124  	     ACCOUNT.ID,
17:17:49 1125  	     ACCOUNT.TAX_EXEMPT_ID
17:17:49 1126  	     into
17:17:49 1127  	     var_account_id,
17:17:49 1128  	     var_account_tax_exempt_id
17:17:49 1129  	   FROM
17:17:49 1130  	     ACCOUNT
17:17:49 1131  	   WHERE
17:17:49 1132  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1133  	   EXCEPTION
17:17:49 1134  	   WHEN NO_DATA_FOUND THEN
17:17:49 1135  	     RAISE BAD_GROUP_ID;
17:17:49 1136  	 END;
17:17:49 1137  
17:17:49 1138  	 -- Check that instrument exists
17:17:49 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 1141  	     RAISE BAD_CREDIT_CARD_ID;
17:17:49 1142  	   END IF;
17:17:49 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 1145  	     RAISE BAD_PAYPAL_ID;
17:17:49 1146  	   END IF;
17:17:49 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
17:17:49 1148  	   NULL;
17:17:49 1149  	 ELSE
17:17:49 1150  	   RAISE BAD_INSTRUMENT_TYPE;
17:17:49 1151  	 END IF;
17:17:49 1152  
17:17:49 1153  	 -- Check for the same code
17:17:49 1154  	 BEGIN
17:17:49 1155  	   SELECT
17:17:49 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
17:17:49 1157  	   FROM
17:17:49 1158  	     GIFT_CERTIFICATE
17:17:49 1159  	   WHERE
17:17:49 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
17:17:49 1161  
17:17:49 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
17:17:49 1163  
17:17:49 1164  	   EXCEPTION
17:17:49 1165  	     WHEN NO_DATA_FOUND THEN
17:17:49 1166  	       NULL;
17:17:49 1167  	 END;
17:17:49 1168  
17:17:49 1169  	 -- Get offer chain flag "is_gift_certificate"
17:17:49 1170  	 BEGIN
17:17:49 1171  	   SELECT
17:17:49 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
17:17:49 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
17:17:49 1174  	     into
17:17:49 1175  	     var_och_is_gc,
17:17:49 1176  	     var_offer_chain_status_id
17:17:49 1177  	   FROM
17:17:49 1178  	     OFFER_CHAIN
17:17:49 1179  	   WHERE
17:17:49 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
17:17:49 1181  	   EXCEPTION
17:17:49 1182  	   WHEN NO_DATA_FOUND THEN
17:17:49 1183  	     RAISE BAD_OFFER_CHAIN_ID;
17:17:49 1184  	 END;
17:17:49 1185  
17:17:49 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V15.TRUE
17:17:49 1187  	   OR var_och_is_gc IS NULL THEN
17:17:49 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
17:17:49 1189  	 END IF;
17:17:49 1190  
17:17:49 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
17:17:49 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
17:17:49 1193  	 END IF;
17:17:49 1194  
17:17:49 1195  	 -- norlov: #38151 check if the OC is for Redemption:
17:17:49 1196  	 SELECT
17:17:49 1197  	   COUNT(*) into var_is_for_redemption
17:17:49 1198  	 FROM
17:17:49 1199  	   OFFER_CHAIN_ELIGIBILITY
17:17:49 1200  	 WHERE
17:17:49 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
17:17:49 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
17:17:49 1204  
17:17:49 1205  	 IF var_is_for_redemption > 0 THEN
17:17:49 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
17:17:49 1207  	 END IF;
17:17:49 1208  
17:17:49 1209  	 -- Check that transaction with given id do not exists
17:17:49 1210  	 SELECT
17:17:49 1211  	   COUNT(*) into temp_transaction_id_count
17:17:49 1212  	 FROM
17:17:49 1213  	   TRANSACTION
17:17:49 1214  	 WHERE
17:17:49 1215  	   TRANSACTION.ID = in_transaction_id;
17:17:49 1216  
17:17:49 1217  	 IF temp_transaction_id_count > 0 THEN
17:17:49 1218  	   RAISE TRANSACTION_EXISTS;
17:17:49 1219  	 END IF;
17:17:49 1220  
17:17:49 1221  	 -- Create new invoice
17:17:49 1222  	 BEGIN
17:17:49 1223  	   PROCS_INVOICE_V15.CREATE_INVOICE(
17:17:49 1224  	     in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
17:17:49 1225  	     in_created_by     => in_created_by,
17:17:49 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
17:17:49 1227  	     out_invoice_id    => var_new_invoice_id
17:17:49 1228  	   );
17:17:49 1229  	   EXCEPTION
17:17:49 1230  	     WHEN OTHERS THEN
17:17:49 1231  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
17:17:49 1233  	 END;
17:17:49 1234  
17:17:49 1235  	 -- Add line items for new invoice
17:17:49 1236  	 BEGIN
17:17:49 1237  	   FOR f_offer_data IN (
17:17:49 1238  	     SELECT
17:17:49 1239  	       OFFER_ID,
17:17:49 1240  	       NUM_RECURRENCES
17:17:49 1241  	     FROM
17:17:49 1242  	       OFFER_OFFER_CHAIN
17:17:49 1243  	     WHERE
17:17:49 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
17:17:49 1245  	   )
17:17:49 1246  	   LOOP
17:17:49 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
17:17:49 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
17:17:49 1249  	     END IF;
17:17:49 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
17:17:49 1251  	     LOOP
17:17:49 1252  	       PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
17:17:49 1253  		 in_invoice_id => var_new_invoice_id,
17:17:49 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
17:17:49 1255  		 in_created_by => in_created_by
17:17:49 1256  	       );
17:17:49 1257  	     END LOOP;
17:17:49 1258  	   END LOOP;
17:17:49 1259  
17:17:49 1260  	   EXCEPTION
17:17:49 1261  	     WHEN OTHERS THEN
17:17:49 1262  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
17:17:49 1264  	 END;
17:17:49 1265  
17:17:49 1266  	 -- Calculate new invoice amount
17:17:49 1267  	 BEGIN
17:17:49 1268  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
17:17:49 1269  	   EXCEPTION
17:17:49 1270  	     WHEN OTHERS THEN
17:17:49 1271  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
17:17:49 1273  	 END;
17:17:49 1274  
17:17:49 1275  	 IF var_invoice_amount > 0
17:17:49 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
17:17:49 1277  	   RAISE CAN_NOT_USE_FCINSTR;
17:17:49 1278  	 END IF;
17:17:49 1279  
17:17:49 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
17:17:49 1281  	 IF var_invoice_amount = 0 THEN
17:17:49 1282  	   PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
17:17:49 1283  	     in_invoice_id		    => var_new_invoice_id,
17:17:49 1284  	     in_updated_by		    => in_created_by,
17:17:49 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V15.INVOICE_CLOSED
17:17:49 1286  	   );
17:17:49 1287  	 END IF;
17:17:49 1288  
17:17:49 1289  	 IF var_invoice_amount > 0 THEN
17:17:49 1290  	   -- Create transaction
17:17:49 1291  	   BEGIN
17:17:49 1292  	     PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:49 1293  	       in_transaction_id  => in_transaction_id,
17:17:49 1294  	       in_status_id	  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
17:17:49 1295  	       in_amount	  => var_invoice_amount,
17:17:49 1296  	       in_created_by	  => in_created_by,
17:17:49 1297  	       in_order_id	  => in_order_id,
17:17:49 1298  	       out_transaction_id => var_transaction_id
17:17:49 1299  	     );
17:17:49 1300  	     EXCEPTION
17:17:49 1301  	       WHEN OTHERS THEN
17:17:49 1302  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
17:17:49 1304  	   END;
17:17:49 1305  
17:17:49 1306  	   -- Create charge
17:17:49 1307  	   BEGIN
17:17:49 1308  	     PROCS_CHARGE_V15.CREATE_CHARGE(
17:17:49 1309  	       in_invoice_id	     => var_new_invoice_id,
17:17:49 1310  	       in_transaction_id     => var_transaction_id,
17:17:49 1311  	       in_instrument_type_id => in_instrument_type_id,
17:17:49 1312  	       in_instrument_id      => in_instrument_id,
17:17:49 1313  	       in_charge_amount      => var_invoice_amount,
17:17:49 1314  	       in_created_by	     => in_created_by,
17:17:49 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 1316  	       out_charge_id	     => var_new_charge_id
17:17:49 1317  	     );
17:17:49 1318  	     EXCEPTION
17:17:49 1319  	       WHEN OTHERS THEN
17:17:49 1320  		 EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
17:17:49 1322  	   END;
17:17:49 1323  	 END IF;
17:17:49 1324  
17:17:49 1325  	 -- Create new row in GIFT_CERTIFICATE table
17:17:49 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_GIFT_CERTIFICATE(
17:17:49 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
17:17:49 1328  	   in_purchaser_group_id	 => in_group_id,
17:17:49 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
17:17:49 1330  	   in_offer_chain_id		 => in_offer_chain_id,
17:17:49 1331  	   in_expiration_date		 => in_expiration_date,
17:17:49 1332  	   in_purchase_date		 => SYSDATE,
17:17:49 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE,
17:17:49 1334  	   in_code			 => in_gift_certificate_code,
17:17:49 1335  	   in_created_by		 => in_created_by,
17:17:49 1336  	   in_recipient_name		 => in_recipient_name,
17:17:49 1337  	   in_gift_message		 => in_gift_message,
17:17:49 1338  	   in_recipient_email		 => in_recipient_email,
17:17:49 1339  	   in_sender_email		 => in_sender_email,
17:17:49 1340  	   in_sender_name		 => in_sender_name
17:17:49 1341  	 );
17:17:49 1342  
17:17:49 1343  EXCEPTION
17:17:49 1344  WHEN CAN_NOT_USE_FCINSTR THEN
17:17:49 1345  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
17:17:49 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
17:17:49 1348  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1349  	   SPROC_NAME, 'Offer chain is not active');
17:17:49 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
17:17:49 1351  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
17:17:49 1353  WHEN BAD_CREDIT_CARD_ID THEN
17:17:49 1354  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1355  	   SPROC_NAME, 'Bad credit card id');
17:17:49 1356  WHEN BAD_PAYPAL_ID THEN
17:17:49 1357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1358  	   SPROC_NAME, 'Bad paypal id');
17:17:49 1359  WHEN BAD_INSTRUMENT_TYPE THEN
17:17:49 1360  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1361  	   SPROC_NAME, 'Bad instrument type');
17:17:49 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
17:17:49 1363  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:49 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
17:17:49 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
17:17:49 1366  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
17:17:49 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
17:17:49 1369  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
17:17:49 1371  WHEN TRANSACTION_EXISTS THEN
17:17:49 1372  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:49 1373  	   SPROC_NAME, 'Transaction with given id already exists');
17:17:49 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
17:17:49 1375  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
17:17:49 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
17:17:49 1378  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
17:17:49 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
17:17:49 1381  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
17:17:49 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
17:17:49 1384  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
17:17:49 1386  WHEN BAD_GROUP_ID THEN
17:17:49 1387  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1388  	   SPROC_NAME, 'No such group id');
17:17:49 1389  WHEN BAD_OFFER_CHAIN_ID THEN
17:17:49 1390  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1391  	   SPROC_NAME, 'No such offer chain');
17:17:49 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
17:17:49 1393  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
17:17:49 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
17:17:49 1396  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
17:17:49 1398  WHEN OTHERS THEN
17:17:49 1399  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1401  END PURCHASE_GIFT_CERTIFICATE;
17:17:49 1402  
17:17:49 1403  /******************************************************************************/
17:17:49 1404  
17:17:49 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
17:17:49 1406  	 in_group_id			 IN NUMBER,
17:17:49 1407  	 in_gift_certificate_code	 IN VARCHAR2,
17:17:49 1408  	 in_created_by			 IN VARCHAR2,
17:17:49 1409  	 in_redeemer_address_id 	 IN NUMBER,
17:17:49 1410  	 in_fin_instrument_id		 IN NUMBER,
17:17:49 1411  	 in_fin_instrument_type_id	 IN NUMBER,
17:17:49 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
17:17:49 1413  	 out_subscription_id		 OUT NUMBER,
17:17:49 1414  	 out_license_id 		 OUT NUMBER
17:17:49 1415  ) AS
17:17:49 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
17:17:49 1417  -- VARIABLES
17:17:49 1418  var_gift_certificate_id NUMBER;
17:17:49 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
17:17:49 1420  var_purchased_oc_id     NUMBER;
17:17:49 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
17:17:49 1422  var_offer_duration      VARCHAR2(30);
17:17:49 1423  var_invoice_id	       NUMBER;
17:17:49 1424  var_succ_purch_attempts_num NUMBER;
17:17:49 1425  var_subscription_id     NUMBER;
17:17:49 1426  var_license_id	       NUMBER;
17:17:49 1427  var_account_id	       NUMBER;
17:17:49 1428  var_gc_status_id        NUMBER;
17:17:49 1429  var_gc_charges_amount   NUMBER;
17:17:49 1430  var_gc_expiration_date  DATE;
17:17:49 1431  var_gc_redeemer_group_id NUMBER;
17:17:49 1432  var_gc_purchase_invoice_id NUMBER;
17:17:49 1433  var_gc_purchase_inv_status_id NUMBER;
17:17:49 1434  var_offer_index		     NUMBER;
17:17:49 1435  var_purchaser_group_id	     NUMBER;
17:17:49 1436  temp_license_id		     NUMBER;
17:17:49 1437  var_same_offer_chains_num     NUMBER;
17:17:49 1438  var_max_concurrent_subscrs    NUMBER;
17:17:49 1439  var_account_tax_exempt_id     VARCHAR2(255);
17:17:49 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
17:17:49 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
17:17:49 1442  var_first_offer_id	  NUMBER;
17:17:49 1443  var_date 	     DATE := SYSDATE;
17:17:49 1444  
17:17:49 1445  var_offers SYS_REFCURSOR;
17:17:49 1446  
17:17:49 1447  -- EXCEPTIONS
17:17:49 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
17:17:49 1449  BAD_GROUP_ID		      EXCEPTION;
17:17:49 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
17:17:49 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
17:17:49 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
17:17:49 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
17:17:49 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
17:17:49 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
17:17:49 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
17:17:49 1457  LIMIT_REACHED		      EXCEPTION;
17:17:49 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
17:17:49 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
17:17:49 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
17:17:49 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
17:17:49 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
17:17:49 1463  BEGIN
17:17:49 1464  
17:17:49 1465  	 -- Get account id
17:17:49 1466  	 BEGIN
17:17:49 1467  	   SELECT
17:17:49 1468  	     ACCOUNT.ID,
17:17:49 1469  	     ACCOUNT.TAX_EXEMPT_ID
17:17:49 1470  	     into
17:17:49 1471  	     var_account_id,
17:17:49 1472  	     var_account_tax_exempt_id
17:17:49 1473  	   FROM
17:17:49 1474  	     ACCOUNT
17:17:49 1475  	   WHERE
17:17:49 1476  	     ACCOUNT.GROUP_ID = in_group_id
17:17:49 1477  	     AND ROWNUM <= 1;
17:17:49 1478  
17:17:49 1479  	   EXCEPTION
17:17:49 1480  	   WHEN NO_DATA_FOUND THEN
17:17:49 1481  	     RAISE BAD_GROUP_ID;
17:17:49 1482  	 END;
17:17:49 1483  
17:17:49 1484  	 -- Get gift certificate data
17:17:49 1485  	 BEGIN
17:17:49 1486  	   SELECT
17:17:49 1487  	     GIFT_CERTIFICATE.ID,
17:17:49 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
17:17:49 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
17:17:49 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
17:17:49 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
17:17:49 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
17:17:49 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
17:17:49 1494  	     into
17:17:49 1495  	     var_gift_certificate_id,
17:17:49 1496  	     var_purchased_oc_id,
17:17:49 1497  	     var_gc_status_id,
17:17:49 1498  	     var_purchaser_group_id,
17:17:49 1499  	     var_gc_expiration_date,
17:17:49 1500  	     var_gc_redeemer_group_id,
17:17:49 1501  	     var_gc_purchase_invoice_id
17:17:49 1502  	   FROM
17:17:49 1503  	     GIFT_CERTIFICATE
17:17:49 1504  	   WHERE
17:17:49 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
17:17:49 1506  	     AND ROWNUM <= 1;
17:17:49 1507  
17:17:49 1508  	   EXCEPTION
17:17:49 1509  	   WHEN NO_DATA_FOUND THEN
17:17:49 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
17:17:49 1511  	 END;
17:17:49 1512  
17:17:49 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
17:17:49 1514  	 -- but in that case a redemption offer chain id should always be passed in
17:17:49 1515  	 IF var_oc_id_to_redeem IS NULL THEN
17:17:49 1516  	   BEGIN
17:17:49 1517  	     SELECT
17:17:49 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
17:17:49 1519  	       into
17:17:49 1520  	       var_oc_id_to_redeem
17:17:49 1521  	     FROM
17:17:49 1522  	       OFFER_CHAIN_META_DATA
17:17:49 1523  	     WHERE
17:17:49 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
17:17:49 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V15.REDEMPTION_OC_ID
17:17:49 1526  	       AND ROWNUM = 1;
17:17:49 1527  -- requested by ticket so (but above is correct for the actual migrated data):
17:17:49 1528  --  SELECT
17:17:49 1529  --      OFFER_CHAIN.ID
17:17:49 1530  --      into
17:17:49 1531  --      var_oc_id_to_redeem
17:17:49 1532  --    FROM
17:17:49 1533  --      OFFER_CHAIN
17:17:49 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
17:17:49 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
17:17:49 1536  --    WHERE
17:17:49 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
17:17:49 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET
17:17:49 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V15.REDEMPTION_OC_ID
17:17:49 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
17:17:49 1543  --      AND ROWNUM = 1;
17:17:49 1544  
17:17:49 1545  	     EXCEPTION
17:17:49 1546  	     WHEN NO_DATA_FOUND THEN
17:17:49 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
17:17:49 1548  	   END;
17:17:49 1549  	 END IF;
17:17:49 1550  
17:17:49 1551  	 -- Check that purchase invoice for this GC was closed
17:17:49 1552  	 SELECT
17:17:49 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
17:17:49 1554  	 FROM
17:17:49 1555  	   INVOICE
17:17:49 1556  	 WHERE
17:17:49 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
17:17:49 1558  
17:17:49 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
17:17:49 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
17:17:49 1561  	 END IF;
17:17:49 1562  
17:17:49 1563  	 -- Check that this invoice was successfully processed by billing
17:17:49 1564  	 SELECT
17:17:49 1565  	   COUNT(1) into var_succ_purch_attempts_num
17:17:49 1566  	 FROM
17:17:49 1567  	   TRANSACTION_ATTEMPT TA
17:17:49 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
17:17:49 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
17:17:49 1570  	 WHERE
17:17:49 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
17:17:49 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS;
17:17:49 1573  
17:17:49 1574  	 IF var_succ_purch_attempts_num = 0 THEN
17:17:49 1575  	   SELECT
17:17:49 1576  	     COUNT(1) into var_succ_purch_attempts_num
17:17:49 1577  	   FROM
17:17:49 1578  	     DUAL
17:17:49 1579  	   WHERE
17:17:49 1580  	     PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
17:17:49 1581  	 END IF;
17:17:49 1582  
17:17:49 1583  	 IF var_succ_purch_attempts_num = 0 THEN
17:17:49 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
17:17:49 1585  	 END IF;
17:17:49 1586  
17:17:49 1587  	 -- Check limit for gc's offer chain
17:17:49 1588  	 SELECT
17:17:49 1589  	   COUNT(*) into var_same_offer_chains_num
17:17:49 1590  	 FROM
17:17:49 1591  	   SUBSCRIPTION
17:17:49 1592  	 WHERE
17:17:49 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
17:17:49 1595  	   AND (
17:17:49 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 1597  	     -- TODO: Does we need next line?
17:17:49 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 1599  	   );
17:17:49 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
17:17:49 1601  --  IF PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
17:17:49 1602  --    RAISE LIMIT_REACHED;
17:17:49 1603  --  END IF;
17:17:49 1604  IF var_same_offer_chains_num = 0 THEN
17:17:49 1605  	   -- if user does not have any active existing subscriptions to the offer chain
17:17:49 1606  	   -- and if product from the offer chain is already owned from another offer chain
17:17:49 1607  	   -- then deny purchase
17:17:49 1608  	   FOR f_account_offer_chains IN (
17:17:49 1609  	     SELECT DISTINCT
17:17:49 1610  	       OFFER_CHAIN_ID
17:17:49 1611  	     FROM
17:17:49 1612  	       SUBSCRIPTION
17:17:49 1613  	     WHERE
17:17:49 1614  	       ACCOUNT_ID = var_account_id
17:17:49 1615  	       AND (
17:17:49 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED)
17:17:49 1618  	   )
17:17:49 1619  	   LOOP
17:17:49 1620  	     IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
17:17:49 1622  	     END IF;
17:17:49 1623  	   END LOOP;
17:17:49 1624  	 ELSE
17:17:49 1625  
17:17:49 1626  	   -- if user have any active existing subscriptions to the offer chain
17:17:49 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
17:17:49 1628  	   -- then deny purchase
17:17:49 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
17:17:49 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V15.INFINITY
17:17:49 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
17:17:49 1632  	     RAISE LIMIT_REACHED;
17:17:49 1633  	   END IF;
17:17:49 1634  	 END IF;
17:17:49 1635  -- norlov: END OF TODO
17:17:49 1636  
17:17:49 1637  
17:17:49 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
17:17:49 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
17:17:49 1640  	 END IF;
17:17:49 1641  
17:17:49 1642  	 IF var_gc_expiration_date < sysdate THEN
17:17:49 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
17:17:49 1644  	 END IF;
17:17:49 1645  
17:17:49 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_REFUNDED THEN
17:17:49 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
17:17:49 1648  	 END IF;
17:17:49 1649  
17:17:49 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED THEN
17:17:49 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
17:17:49 1652  	 END IF;
17:17:49 1653  
17:17:49 1654  	 -- Check that user did not subscribed to same product already
17:17:49 1655  	 -- norlov: get rid of this since there is already the check?
17:17:49 1656  	 FOR f_user_offer_chain IN (
17:17:49 1657  	   SELECT DISTINCT
17:17:49 1658  	     OFFER_CHAIN_ID
17:17:49 1659  	   FROM
17:17:49 1660  	     SUBSCRIPTION
17:17:49 1661  	   WHERE
17:17:49 1662  	     ACCOUNT_ID=var_account_id
17:17:49 1663  	     AND (
17:17:49 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 1666  	     )
17:17:49 1667  	 )
17:17:49 1668  	 LOOP
17:17:49 1669  	   IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V15.TRUE THEN
17:17:49 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
17:17:49 1671  	   END IF;
17:17:49 1672  	 END LOOP;
17:17:49 1673  
17:17:49 1674  	 -- Check for gift certificate amount
17:17:49 1675  	 SELECT
17:17:49 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
17:17:49 1677  	 FROM
17:17:49 1678  	   CHARGE
17:17:49 1679  	 WHERE
17:17:49 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
17:17:49 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
17:17:49 1682  
17:17:49 1683  	 -- Create new invoice
17:17:49 1684  	 PROCS_INVOICE_V15.CREATE_INVOICE(
17:17:49 1685  	   out_invoice_id    => var_invoice_id,
17:17:49 1686  	   in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_CLOSED,
17:17:49 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
17:17:49 1688  	   in_created_by     => in_created_by
17:17:49 1689  	 );
17:17:49 1690  
17:17:49 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
17:17:49 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
17:17:49 1693  	 IF var_fin_instrument_id is null THEN
17:17:49 1694  	   var_fin_instrument_id := var_gift_certificate_id;
17:17:49 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
17:17:49 1696  	 END IF;
17:17:49 1697  
17:17:49 1698  	 -- Insert new row into subscription table
17:17:49 1699  	 PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION(
17:17:49 1700  	   out_subscription_id	     => var_subscription_id,
17:17:49 1701  	   in_account_id	     => var_account_id,
17:17:49 1702  	   in_purchase_date	     => var_date,
17:17:49 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
17:17:49 1704  	   in_created_by	     => in_created_by,
17:17:49 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
17:17:49 1706  	   in_instrument_id	     => var_fin_instrument_id,
17:17:49 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 1708  	 );
17:17:49 1709  
17:17:49 1710  	 out_subscription_id := var_subscription_id;
17:17:49 1711  
17:17:49 1712  	 BEGIN
17:17:49 1713  	   PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
17:17:49 1714  	   EXCEPTION
17:17:49 1715  	     WHEN OTHERS THEN
17:17:49 1716  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
17:17:49 1718  	 END;
17:17:49 1719  
17:17:49 1720  	 BEGIN
17:17:49 1721  	   PROCS_LICENSE_V15.CREATE_LICENSE (
17:17:49 1722  	     out_license_id		 => out_license_id,
17:17:49 1723  	     in_status_id		 => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
17:17:49 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V15.TRUE,
17:17:49 1725  	     in_start_date		 => var_date,
17:17:49 1726  	     in_offer_id		 => var_first_offer_id,
17:17:49 1727  	     in_subscription_id 	 => var_subscription_id,
17:17:49 1728  	     in_invoice_id		 => var_invoice_id,
17:17:49 1729  	     in_created_by		 => in_created_by,
17:17:49 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
17:17:49 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V15.FALSE,
17:17:49 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
17:17:49 1733  	     in_current_offer_recurr_num => 1
17:17:49 1734  	   );
17:17:49 1735  
17:17:49 1736  	   EXCEPTION
17:17:49 1737  	     WHEN OTHERS THEN
17:17:49 1738  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
17:17:49 1740  	 END;
17:17:49 1741  
17:17:49 1742  	 -- Update original gift certificate
17:17:49 1743  	 BEGIN
17:17:49 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE(
17:17:49 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
17:17:49 1746  	     in_updated_by		   => in_created_by,
17:17:49 1747  	     in_redeemer_group_id	   => in_group_id,
17:17:49 1748  	     in_finalized_invoice_id	   => var_invoice_id,
17:17:49 1749  	     in_redemption_date 	   => var_date,
17:17:49 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
17:17:49 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED
17:17:49 1752  	   );
17:17:49 1753  	   EXCEPTION
17:17:49 1754  	     WHEN OTHERS THEN
17:17:49 1755  	       EXCEPTION_MESSAGE := SQLERRM;
17:17:49 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
17:17:49 1757  	 END;
17:17:49 1758  
17:17:49 1759  EXCEPTION
17:17:49 1760  WHEN LIMIT_REACHED THEN
17:17:49 1761  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
17:17:49 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
17:17:49 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
17:17:49 1764  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
17:17:49 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
17:17:49 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
17:17:49 1767  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
17:17:49 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
17:17:49 1770  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1771  	   SPROC_NAME, 'Gift certificate expired');
17:17:49 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
17:17:49 1773  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1774  	   SPROC_NAME, 'Gift certificate is finalized');
17:17:49 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
17:17:49 1776  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
17:17:49 1778  WHEN BAD_GROUP_ID THEN
17:17:49 1779  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1780  	   SPROC_NAME, 'No such account with given group id');
17:17:49 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
17:17:49 1782  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
17:17:49 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
17:17:49 1785  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1786  	   SPROC_NAME, 'No such gift certificate code');
17:17:49 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
17:17:49 1788  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
17:17:49 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
17:17:49 1791  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
17:17:49 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
17:17:49 1794  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
17:17:49 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
17:17:49 1797  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
17:17:49 1799  WHEN OTHERS THEN
17:17:49 1800  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1802  END;
17:17:49 1803  
17:17:49 1804  /******************************************************************************/
17:17:49 1805  
17:17:49 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
17:17:49 1807  /*
17:17:49 1808  Throws exceptions:
17:17:49 1809  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1810  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1811  */
17:17:49 1812  	 in_code	IN VARCHAR,
17:17:49 1813  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1814  ) AS
17:17:49 1815  -- VARIABLES
17:17:49 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
17:17:49 1817  temp_gift_certificate_id NUMBER;
17:17:49 1818  -- EXCEPTIONS
17:17:49 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
17:17:49 1820  BEGIN
17:17:49 1821  
17:17:49 1822  	 BEGIN
17:17:49 1823  	   SELECT
17:17:49 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
17:17:49 1825  	   FROM
17:17:49 1826  	     GIFT_CERTIFICATE
17:17:49 1827  	   WHERE
17:17:49 1828  	     GIFT_CERTIFICATE.CODE = in_code;
17:17:49 1829  	   EXCEPTION
17:17:49 1830  	     WHEN NO_DATA_FOUND THEN
17:17:49 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
17:17:49 1832  	 END;
17:17:49 1833  
17:17:49 1834  	 -- Select all gift certificates with given code
17:17:49 1835  	 OPEN out_result_set FOR
17:17:49 1836  	 SELECT
17:17:49 1837  	   gc.EXPIRATION_DATE,
17:17:49 1838  	   ch.name,
17:17:49 1839  	   ch.id,
17:17:49 1840  	   gc.sender_email,
17:17:49 1841  	   gc.sender_name,
17:17:49 1842  	   gc.recipient_email,
17:17:49 1843  	   gc.recipient_name,
17:17:49 1844  	   gc.purchase_date,
17:17:49 1845  	   gc.redemption_date,
17:17:49 1846  	   gc.purchaser_group_id,
17:17:49 1847  	   gc.redeemer_group_id,
17:17:49 1848  	   gc.gift_message,
17:17:49 1849  	   ocmd.value redemption_offer_chain_ids,
17:17:49 1850  	   s.offer_chain_id redeemed_offer_chain_id,
17:17:49 1851  	   gc.recipient_notify_date,
17:17:49 1852  	   gc.gift_certificate_status_id,
17:17:49 1853  	   gc.purchase_invoice_id,
17:17:49 1854  	   gc.finalized_invoice_id
17:17:49 1855  	 FROM
17:17:49 1856  	   GIFT_CERTIFICATE gc
17:17:49 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
17:17:49 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
17:17:49 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
17:17:49 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
17:17:49 1861  	 WHERE
17:17:49 1862  	   gc.code = in_code;
17:17:49 1863  
17:17:49 1864  EXCEPTION
17:17:49 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
17:17:49 1866  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1867  	   SPROC_NAME, 'No such gift certificate');
17:17:49 1868  WHEN OTHERS THEN
17:17:49 1869  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
17:17:49 1871  END;
17:17:49 1872  
17:17:49 1873  /******************************************************************************/
17:17:49 1874  
17:17:49 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
17:17:49 1876  /*
17:17:49 1877  Throws exceptions:
17:17:49 1878  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1879  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1880  */
17:17:49 1881  	 in_gift_certificate_id IN NUMBER,
17:17:49 1882  	 out_result_set 	OUT SYS_REFCURSOR
17:17:49 1883  ) AS
17:17:49 1884  -- VARIABLES
17:17:49 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
17:17:49 1886  temp_gift_certificate_id NUMBER;
17:17:49 1887  -- EXCEPTIONS
17:17:49 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
17:17:49 1889  BEGIN
17:17:49 1890  
17:17:49 1891  	 BEGIN
17:17:49 1892  	   SELECT
17:17:49 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
17:17:49 1894  	   FROM
17:17:49 1895  	     GIFT_CERTIFICATE
17:17:49 1896  	   WHERE
17:17:49 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
17:17:49 1898  	   EXCEPTION
17:17:49 1899  	     WHEN NO_DATA_FOUND THEN
17:17:49 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
17:17:49 1901  	 END;
17:17:49 1902  
17:17:49 1903  	 -- Select all gift certificates with given code
17:17:49 1904  	 OPEN out_result_set FOR
17:17:49 1905  	 SELECT
17:17:49 1906  	   gc.EXPIRATION_DATE,
17:17:49 1907  	   ch.name,
17:17:49 1908  	   ch.id,
17:17:49 1909  	   gc.sender_email,
17:17:49 1910  	   gc.sender_name,
17:17:49 1911  	   gc.recipient_email,
17:17:49 1912  	   gc.recipient_name,
17:17:49 1913  	   gc.purchase_date,
17:17:49 1914  	   gc.redemption_date,
17:17:49 1915  	   gc.purchaser_group_id,
17:17:49 1916  	   gc.redeemer_group_id,
17:17:49 1917  	   gc.code,
17:17:49 1918  	   gc.gift_message,
17:17:49 1919  	   gc.recipient_notify_date
17:17:49 1920  	 FROM
17:17:49 1921  	   GIFT_CERTIFICATE gc
17:17:49 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
17:17:49 1923  	 WHERE
17:17:49 1924  	   gc.id = in_gift_certificate_id;
17:17:49 1925  
17:17:49 1926  EXCEPTION
17:17:49 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
17:17:49 1928  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1929  	   SPROC_NAME, 'No such gift certificate');
17:17:49 1930  WHEN OTHERS THEN
17:17:49 1931  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
17:17:49 1933  END GET_GIFT_CERTIFICATE_BY_ID;
17:17:49 1934  
17:17:49 1935  /******************************************************************************/
17:17:49 1936  
17:17:49 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
17:17:49 1938  	 in_group_id		IN  NUMBER,
17:17:49 1939  	 out_instrument_type_id OUT NUMBER,
17:17:49 1940  	 out_instrument_id	OUT NUMBER
17:17:49 1941  ) AS
17:17:49 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
17:17:49 1943  BEGIN
17:17:49 1944  
17:17:49 1945  	 SELECT
17:17:49 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
17:17:49 1947  	   ACCOUNT.INSTRUMENT_ID
17:17:49 1948  	   into
17:17:49 1949  	   out_instrument_type_id,
17:17:49 1950  	   out_instrument_id
17:17:49 1951  	 FROM
17:17:49 1952  	   ACCOUNT
17:17:49 1953  	 WHERE
17:17:49 1954  	   ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1955  
17:17:49 1956  EXCEPTION
17:17:49 1957  WHEN NO_DATA_FOUND THEN
17:17:49 1958  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1959  	   SPROC_NAME, 'Bad group id');
17:17:49 1960  WHEN OTHERS THEN
17:17:49 1961  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
17:17:49 1964  
17:17:49 1965  /******************************************************************************/
17:17:49 1966  
17:17:49 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
17:17:49 1968  	 in_group_id	       IN NUMBER,
17:17:49 1969  	 in_instrument_type_id IN NUMBER,
17:17:49 1970  	 in_instrument_id      IN NUMBER,
17:17:49 1971  	 in_updated_by	       IN VARCHAR2
17:17:49 1972  ) AS
17:17:49 1973  -- VARIABLES
17:17:49 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
17:17:49 1975  var_account_id	      NUMBER;
17:17:49 1976  -- EXCEPTIONS
17:17:49 1977  BAD_GROUP_ID	      EXCEPTION;
17:17:49 1978  BAD_CREDIT_CARD	      EXCEPTION;
17:17:49 1979  BAD_PAYPAL	      EXCEPTION;
17:17:49 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
17:17:49 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 1982  BEGIN
17:17:49 1983  
17:17:49 1984  	 -- get account id
17:17:49 1985  	 BEGIN
17:17:49 1986  	   SELECT
17:17:49 1987  	     ACCOUNT.ID into var_account_id
17:17:49 1988  	   FROM
17:17:49 1989  	     ACCOUNT
17:17:49 1990  	   WHERE
17:17:49 1991  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1992  	   EXCEPTION
17:17:49 1993  	     WHEN NO_DATA_FOUND THEN
17:17:49 1994  	       RAISE BAD_GROUP_ID;
17:17:49 1995  	 END;
17:17:49 1996  
17:17:49 1997  	 -- Chech that given instrument exists
17:17:49 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2000  	     RAISE BAD_CREDIT_CARD;
17:17:49 2001  	   END IF;
17:17:49 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2004  	     RAISE BAD_PAYPAL;
17:17:49 2005  	   END IF;
17:17:49 2006  	 ELSE
17:17:49 2007  	   RAISE BAD_INSTRUMENT_TYPE;
17:17:49 2008  	 END IF;
17:17:49 2009  
17:17:49 2010  	 -- update account information
17:17:49 2011  	 PROCS_ACCOUNT_CRU_V15.UPDATE_ACCOUNT(
17:17:49 2012  	   in_account_id	 => var_account_id,
17:17:49 2013  	   in_updated_by	 => in_updated_by,
17:17:49 2014  	   in_instrument_type_id => in_instrument_type_id,
17:17:49 2015  	   in_instrument_id	 => in_instrument_id
17:17:49 2016  	 );
17:17:49 2017  
17:17:49 2018  EXCEPTION
17:17:49 2019  WHEN BAD_GROUP_ID THEN
17:17:49 2020  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2021  	   SPROC_NAME, 'No such account');
17:17:49 2022  WHEN BAD_CREDIT_CARD THEN
17:17:49 2023  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
17:17:49 2025  WHEN BAD_PAYPAL THEN
17:17:49 2026  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
17:17:49 2028  WHEN BAD_INSTRUMENT_TYPE THEN
17:17:49 2029  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2030  	   SPROC_NAME, 'Bad instrument type id');
17:17:49 2031  WHEN OTHERS THEN
17:17:49 2032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
17:17:49 2035  
17:17:49 2036  /******************************************************************************/
17:17:49 2037  
17:17:49 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
17:17:49 2039  	 in_group_id IN NUMBER
17:17:49 2040  ) AS
17:17:49 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
17:17:49 2042  -- VARIABLES
17:17:49 2043  var_account_id NUMBER;
17:17:49 2044  -- EXCEPTIONS
17:17:49 2045  BAD_GROUP_ID	 EXCEPTION;
17:17:49 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
17:17:49 2047  BEGIN
17:17:49 2048  
17:17:49 2049  	 BEGIN
17:17:49 2050  	   SELECT
17:17:49 2051  	     ACCOUNT.ID into var_account_id
17:17:49 2052  	   FROM
17:17:49 2053  	     ACCOUNT
17:17:49 2054  	   WHERE
17:17:49 2055  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 2056  	   EXCEPTION
17:17:49 2057  	     WHEN NO_DATA_FOUND THEN
17:17:49 2058  	       RAISE BAD_GROUP_ID;
17:17:49 2059  	 END;
17:17:49 2060  
17:17:49 2061  	 PROCS_ACCOUNT_CRU_V15.UPDATE_DEF_FIN_INSTRUMENT(
17:17:49 2062  	   in_account_id => var_account_id,
17:17:49 2063  	   in_instrument_type_id => NULL,
17:17:49 2064  	   in_instrument_id => NULL,
17:17:49 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
17:17:49 2066  	 );
17:17:49 2067  
17:17:49 2068  EXCEPTION
17:17:49 2069  WHEN BAD_GROUP_ID THEN
17:17:49 2070  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2071  	   SPROC_NAME, 'No such group id');
17:17:49 2072  WHEN OTHERS THEN
17:17:49 2073  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
17:17:49 2076  
17:17:49 2077  /******************************************************************************/
17:17:49 2078  
17:17:49 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:49 2080  	 in_credit_card_id IN  NUMBER,
17:17:49 2081  	 out_result_set    OUT SYS_REFCURSOR
17:17:49 2082  ) AS
17:17:49 2083  -- VARIABLES
17:17:49 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
17:17:49 2085  temp_cc_count NUMBER;
17:17:49 2086  
17:17:49 2087  -- EXCEPTIONS
17:17:49 2088  BAD_CREDIT_CARD_ID EXCEPTION;
17:17:49 2089  BEGIN
17:17:49 2090  
17:17:49 2091  	 -- Check that credit card exists
17:17:49 2092  	 SELECT
17:17:49 2093  	   COUNT(*) into temp_cc_count
17:17:49 2094  	 FROM
17:17:49 2095  	   CREDIT_CARD
17:17:49 2096  	 WHERE
17:17:49 2097  	   CREDIT_CARD.ID = in_credit_card_id;
17:17:49 2098  	 IF temp_cc_count = 0 THEN
17:17:49 2099  	   RAISE BAD_CREDIT_CARD_ID;
17:17:49 2100  	 END IF;
17:17:49 2101  
17:17:49 2102  	 -- Get data
17:17:49 2103  	 OPEN out_result_set FOR
17:17:49 2104  	 SELECT
17:17:49 2105  	   CREDIT_CARD.ID,
17:17:49 2106  	   CREDIT_CARD.ACCOUNT_ID,
17:17:49 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
17:17:49 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
17:17:49 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
17:17:49 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
17:17:49 2111  	   CREDIT_CARD.STATE,
17:17:49 2112  	   CREDIT_CARD.CITY,
17:17:49 2113  	   CREDIT_CARD.POSTAL_CODE,
17:17:49 2114  	   CREDIT_CARD.COUNTRY,
17:17:49 2115  	   CREDIT_CARD.LAST_FOUR_CC,
17:17:49 2116  	   CREDIT_CARD.EXPIRATION_DATE,
17:17:49 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
17:17:49 2118  	   CREDIT_CARD.SECRET_TOKEN,
17:17:49 2119  	   CREDIT_CARD.CREATE_DATE,
17:17:49 2120  	   CREDIT_CARD.CREATED_BY,
17:17:49 2121  	   CREDIT_CARD.UPDATE_DATE,
17:17:49 2122  	   CREDIT_CARD.UPDATED_BY,
17:17:49 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
17:17:49 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
17:17:49 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
17:17:49 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
17:17:49 2127  	 FROM
17:17:49 2128  	   CREDIT_CARD
17:17:49 2129  	 WHERE
17:17:49 2130  	   CREDIT_CARD.ID = in_credit_card_id;
17:17:49 2131  
17:17:49 2132  EXCEPTION
17:17:49 2133  WHEN BAD_CREDIT_CARD_ID THEN
17:17:49 2134  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2135  	   SPROC_NAME, 'No such credit card');
17:17:49 2136  WHEN OTHERS THEN
17:17:49 2137  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2139  END GET_CREDIT_CARD_BY_ID;
17:17:49 2140  
17:17:49 2141  /******************************************************************************/
17:17:49 2142  
17:17:49 2143  PROCEDURE GET_PAYPAL_BY_ID (
17:17:49 2144  	 in_paypal_id	IN  NUMBER,
17:17:49 2145  	 out_result_set OUT SYS_REFCURSOR
17:17:49 2146  ) AS
17:17:49 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
17:17:49 2148  -- VARIABLES
17:17:49 2149  temp_pp_count NUMBER;
17:17:49 2150  -- EXCEPTIONS
17:17:49 2151  BAD_PAYPAL_ID EXCEPTION;
17:17:49 2152  BEGIN
17:17:49 2153  
17:17:49 2154  	 -- Check that credit card exists
17:17:49 2155  	 SELECT
17:17:49 2156  	   COUNT(*) into temp_pp_count
17:17:49 2157  	 FROM
17:17:49 2158  	   PAYPAL
17:17:49 2159  	 WHERE
17:17:49 2160  	   PAYPAL.ID = in_paypal_id;
17:17:49 2161  	 IF temp_pp_count = 0 THEN
17:17:49 2162  	   RAISE BAD_PAYPAL_ID;
17:17:49 2163  	 END IF;
17:17:49 2164  
17:17:49 2165  	 OPEN out_result_set FOR
17:17:49 2166  	 SELECT
17:17:49 2167  	   ID,
17:17:49 2168  	   ACCOUNT_ID,
17:17:49 2169  	   INSTRUMENT_NAME,
17:17:49 2170  	   PRIVATE_EMAIL_ADDRESS,
17:17:49 2171  	   CREATE_DATE,
17:17:49 2172  	   CREATED_BY,
17:17:49 2173  	   UPDATE_DATE,
17:17:49 2174  	   UPDATED_BY,
17:17:49 2175  	   PAYPAL_STATUS_ID,
17:17:49 2176  	   PRIVATE_STREET_ADDRESS,
17:17:49 2177  	   PRIVATE_STREET_ADDRESS2,
17:17:49 2178  	   STATE,
17:17:49 2179  	   CITY,
17:17:49 2180  	   POSTAL_CODE,
17:17:49 2181  	   COUNTRY,
17:17:49 2182  	   EXPIRATION_DATE,
17:17:49 2183  	   SECRET_TOKEN
17:17:49 2184  	 FROM
17:17:49 2185  	   PAYPAL
17:17:49 2186  	 WHERE
17:17:49 2187  	   ID = in_paypal_id;
17:17:49 2188  
17:17:49 2189  EXCEPTION
17:17:49 2190  WHEN BAD_PAYPAL_ID THEN
17:17:49 2191  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2192  	   SPROC_NAME, 'No such paypal');
17:17:49 2193  WHEN OTHERS THEN
17:17:49 2194  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2196  END GET_PAYPAL_BY_ID;
17:17:49 2197  
17:17:49 2198  /******************************************************************************/
17:17:49 2199  
17:17:49 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
17:17:49 2201  /*
17:17:49 2202  	 Returns GLOBAL_CONSTANTS_V15.TRUE if system can disable credit card
17:17:49 2203  	 GLOBAL_CONSTANTS_V15.FALSE else
17:17:49 2204  */
17:17:49 2205  	 in_credit_card_id NUMBER
17:17:49 2206  ) RETURN NUMBER AS
17:17:49 2207  BEGIN
17:17:49 2208  	 -- STUB
17:17:49 2209  	 RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2210  END F_CAN_DISABLE_CREDIT_CARD;
17:17:49 2211  
17:17:49 2212  /******************************************************************************/
17:17:49 2213  
17:17:49 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
17:17:49 2215  	 in_group_id	IN NUMBER,
17:17:49 2216  	 out_result_set OUT SYS_REFCURSOR
17:17:49 2217  ) AS
17:17:49 2218  -- VARIABLES
17:17:49 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
17:17:49 2220  var_account_id NUMBER;
17:17:49 2221  -- EXCEPTIONS
17:17:49 2222  BAD_GROUP_ID EXCEPTION;
17:17:49 2223  BEGIN
17:17:49 2224  
17:17:49 2225  	 BEGIN
17:17:49 2226  	   SELECT
17:17:49 2227  	     ACCOUNT.ID into var_account_id
17:17:49 2228  	   FROM
17:17:49 2229  	     ACCOUNT
17:17:49 2230  	   WHERE
17:17:49 2231  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 2232  	   EXCEPTION
17:17:49 2233  	     WHEN NO_DATA_FOUND THEN
17:17:49 2234  	       RAISE BAD_GROUP_ID;
17:17:49 2235  	 END;
17:17:49 2236  
17:17:49 2237  	 OPEN out_result_set FOR
17:17:49 2238  	 SELECT
17:17:49 2239  	   GIFT_CERTIFICATE.CODE,
17:17:49 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
17:17:49 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
17:17:49 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
17:17:49 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
17:17:49 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
17:17:49 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
17:17:49 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
17:17:49 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
17:17:49 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
17:17:49 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
17:17:49 2250  	 FROM
17:17:49 2251  	   GIFT_CERTIFICATE
17:17:49 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 2253  	 WHERE
17:17:49 2254  	   ROWNUM <= 100 AND
17:17:49 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
17:17:49 2256  
17:17:49 2257  EXCEPTION
17:17:49 2258  WHEN BAD_GROUP_ID THEN
17:17:49 2259  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2260  	   SPROC_NAME, 'No such group id');
17:17:49 2261  WHEN OTHERS THEN
17:17:49 2262  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2264  END GET_PURCHASED_GCERTIFICATES;
17:17:49 2265  
17:17:49 2266  /******************************************************************************/
17:17:49 2267  
17:17:49 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
17:17:49 2269  	 in_gift_certificate_id IN NUMBER,
17:17:49 2270  	 in_charge_id		IN NUMBER,
17:17:49 2271  	 out_result		OUT NUMBER
17:17:49 2272  ) AS
17:17:49 2273  -- VARIABLES
17:17:49 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
17:17:49 2275  var_invoice_id	    NUMBER;
17:17:49 2276  var_offer_chain_id   NUMBER;
17:17:49 2277  var_offer_chain_s_id NUMBER;
17:17:49 2278  -- EXCEPTIONS
17:17:49 2279  BAD_CHARGE_ID		 EXCEPTION;
17:17:49 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
17:17:49 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
17:17:49 2282  BEGIN
17:17:49 2283  
17:17:49 2284  	 BEGIN
17:17:49 2285  	   SELECT
17:17:49 2286  	     CHARGE.INVOICE_ID into var_invoice_id
17:17:49 2287  	   FROM
17:17:49 2288  	     CHARGE
17:17:49 2289  	   WHERE
17:17:49 2290  	     CHARGE.ID = in_charge_id;
17:17:49 2291  	   EXCEPTION
17:17:49 2292  	     WHEN NO_DATA_FOUND THEN
17:17:49 2293  	       RAISE BAD_CHARGE_ID;
17:17:49 2294  	 END;
17:17:49 2295  
17:17:49 2296  	 BEGIN
17:17:49 2297  	   SELECT
17:17:49 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
17:17:49 2299  	   FROM
17:17:49 2300  	     GIFT_CERTIFICATE
17:17:49 2301  	   WHERE
17:17:49 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
17:17:49 2303  	   EXCEPTION
17:17:49 2304  	     WHEN NO_DATA_FOUND THEN
17:17:49 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
17:17:49 2306  	 END;
17:17:49 2307  
17:17:49 2308  	 BEGIN
17:17:49 2309  	   SELECT
17:17:49 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
17:17:49 2311  	   FROM
17:17:49 2312  	     SUBSCRIPTION
17:17:49 2313  	   WHERE
17:17:49 2314  	     SUBSCRIPTION.ID IN (
17:17:49 2315  	       SELECT DISTINCT
17:17:49 2316  		 LICENSE.SUBSCRIPTION_ID
17:17:49 2317  	       FROM
17:17:49 2318  		 LICENSE
17:17:49 2319  	       WHERE
17:17:49 2320  		 LICENSE.INVOICE_ID = var_invoice_id
17:17:49 2321  	     );
17:17:49 2322  	   EXCEPTION
17:17:49 2323  	     WHEN NO_DATA_FOUND THEN
17:17:49 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
17:17:49 2325  	 END;
17:17:49 2326  
17:17:49 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
17:17:49 2328  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2329  	 ELSE
17:17:49 2330  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2331  	 END IF;
17:17:49 2332  
17:17:49 2333  EXCEPTION
17:17:49 2334  WHEN BAD_CHARGE_ID THEN
17:17:49 2335  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2336  	   SPROC_NAME, 'No such charge');
17:17:49 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
17:17:49 2338  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2339  	   SPROC_NAME, 'No such gift certificate');
17:17:49 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
17:17:49 2341  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
17:17:49 2343  WHEN OTHERS THEN
17:17:49 2344  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2346  END IS_GCERT_FOR_PROPER_OFFER;
17:17:49 2347  
17:17:49 2348  /******************************************************************************/
17:17:49 2349  
17:17:49 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
17:17:49 2351  /*
17:17:49 2352  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
17:17:49 2353  GLOBAL_CONSTANTS_V15.FALSE - else
17:17:49 2354  */
17:17:49 2355  	 in_credit_card_id IN NUMBER
17:17:49 2356  ) RETURN NUMBER AS
17:17:49 2357  -- VARIABLES
17:17:49 2358  var_cc_count NUMBER;
17:17:49 2359  BEGIN
17:17:49 2360  	 SELECT
17:17:49 2361  	   COUNT(*) into var_cc_count
17:17:49 2362  	 FROM
17:17:49 2363  	   CREDIT_CARD
17:17:49 2364  	 WHERE
17:17:49 2365  	   CREDIT_CARD.ID = in_credit_card_id;
17:17:49 2366  
17:17:49 2367  	 IF var_cc_count = 0 THEN
17:17:49 2368  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2369  	 ELSE
17:17:49 2370  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2371  	 END IF;
17:17:49 2372  
17:17:49 2373  END IS_CREDIT_CARD_EXISTS;
17:17:49 2374  
17:17:49 2375  /******************************************************************************/
17:17:49 2376  
17:17:49 2377  FUNCTION IS_PAYPAL_EXISTS (
17:17:49 2378  /*
17:17:49 2379  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
17:17:49 2380  GLOBAL_CONSTANTS_V15.FALSE - else
17:17:49 2381  */
17:17:49 2382  	 in_paypal_id IN NUMBER
17:17:49 2383  ) RETURN NUMBER AS
17:17:49 2384  -- VARIABLES
17:17:49 2385  var_pp_count NUMBER;
17:17:49 2386  BEGIN
17:17:49 2387  	 SELECT
17:17:49 2388  	   COUNT(*) into var_pp_count
17:17:49 2389  	 FROM
17:17:49 2390  	   PAYPAL
17:17:49 2391  	 WHERE
17:17:49 2392  	   PAYPAL.ID = in_paypal_id;
17:17:49 2393  
17:17:49 2394  	 IF var_pp_count = 0 THEN
17:17:49 2395  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2396  	 ELSE
17:17:49 2397  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2398  	 END IF;
17:17:49 2399  
17:17:49 2400  END IS_PAYPAL_EXISTS;
17:17:49 2401  
17:17:49 2402  /******************************************************************************/
17:17:49 2403  
17:17:49 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
17:17:49 2405  /*
17:17:49 2406  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
17:17:49 2407  GLOBAL_CONSTANTS_V15.FALSE - else
17:17:49 2408  */
17:17:49 2409  	 in_gift_certificate_id IN NUMBER
17:17:49 2410  ) RETURN NUMBER AS
17:17:49 2411  -- VARIABLES
17:17:49 2412  var_gc_count NUMBER;
17:17:49 2413  BEGIN
17:17:49 2414  	 SELECT
17:17:49 2415  	   COUNT(*) into var_gc_count
17:17:49 2416  	 FROM
17:17:49 2417  	   GIFT_CERTIFICATE
17:17:49 2418  	 WHERE
17:17:49 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
17:17:49 2420  
17:17:49 2421  	 IF var_gc_count = 0 THEN
17:17:49 2422  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 2423  	 ELSE
17:17:49 2424  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 2425  	 END IF;
17:17:49 2426  
17:17:49 2427  END IS_GIFT_CERTIFICATE_EXISTS;
17:17:49 2428  
17:17:49 2429  /******************************************************************************/
17:17:49 2430  
17:17:49 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
17:17:49 2432  	 in_credit_card_id IN NUMBER,
17:17:49 2433  	 out_group_id	   OUT NUMBER
17:17:49 2434  ) AS
17:17:49 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
17:17:49 2436  BEGIN
17:17:49 2437  	 SELECT
17:17:49 2438  	   ACCOUNT.GROUP_ID into out_group_id
17:17:49 2439  	 FROM
17:17:49 2440  	   CREDIT_CARD
17:17:49 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
17:17:49 2442  	 WHERE
17:17:49 2443  	   CREDIT_CARD.ID = in_credit_card_id;
17:17:49 2444  EXCEPTION
17:17:49 2445  WHEN NO_DATA_FOUND THEN
17:17:49 2446  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2447  	   SPROC_NAME, 'No such credit card');
17:17:49 2448  WHEN OTHERS THEN
17:17:49 2449  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
17:17:49 2452  
17:17:49 2453  /******************************************************************************/
17:17:49 2454  
17:17:49 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
17:17:49 2456  	 in_paypal_id IN NUMBER,
17:17:49 2457  	 out_group_id OUT NUMBER
17:17:49 2458  ) AS
17:17:49 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
17:17:49 2460  BEGIN
17:17:49 2461  	 SELECT
17:17:49 2462  	   ACCOUNT.GROUP_ID into out_group_id
17:17:49 2463  	 FROM
17:17:49 2464  	   PAYPAL
17:17:49 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
17:17:49 2466  	 WHERE
17:17:49 2467  	   PAYPAL.ID = in_paypal_id;
17:17:49 2468  EXCEPTION
17:17:49 2469  WHEN NO_DATA_FOUND THEN
17:17:49 2470  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2471  	   SPROC_NAME, 'No such paypal');
17:17:49 2472  WHEN OTHERS THEN
17:17:49 2473  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
17:17:49 2476  
17:17:49 2477  /******************************************************************************/
17:17:49 2478  
17:17:49 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
17:17:49 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
17:17:49 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
17:17:49 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
17:17:49 2483  ) AS
17:17:49 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
17:17:49 2485  -- EXCEPTIONS
17:17:49 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
17:17:49 2487  BAD_STATUS_ID	      EXCEPTION;
17:17:49 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 2489  BEGIN
17:17:49 2490  
17:17:49 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
17:17:49 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_INVALID
17:17:49 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
17:17:49 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_EXPIRED THEN
17:17:49 2495  	   RAISE BAD_STATUS_ID;
17:17:49 2496  	 END IF;
17:17:49 2497  
17:17:49 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_CREDIT_CARD(
17:17:49 2499  	   in_credit_card_id	    => in_credit_card_id,
17:17:49 2500  	   in_updated_by	    => in_updated_by,
17:17:49 2501  	   in_credit_card_status_id => in_credit_card_status_id
17:17:49 2502  	 );
17:17:49 2503  
17:17:49 2504  	 IF SQL%ROWCOUNT = 0 THEN
17:17:49 2505  	   RAISE BAD_CREDIT_CARD_ID;
17:17:49 2506  	 END IF;
17:17:49 2507  
17:17:49 2508  EXCEPTION
17:17:49 2509  WHEN BAD_CREDIT_CARD_ID THEN
17:17:49 2510  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2511  	   SPROC_NAME, 'No such credit card');
17:17:49 2512  WHEN BAD_STATUS_ID THEN
17:17:49 2513  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2514  	   SPROC_NAME, 'Bad credit card status id');
17:17:49 2515  WHEN OTHERS THEN
17:17:49 2516  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2518  END UPDATE_CREDIT_CARD_STATUS;
17:17:49 2519  
17:17:49 2520  /******************************************************************************/
17:17:49 2521  
17:17:49 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
17:17:49 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
17:17:49 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
17:17:49 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
17:17:49 2526  ) AS
17:17:49 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
17:17:49 2528  -- EXCEPTIONS
17:17:49 2529  BAD_PAYPAL_ID	      EXCEPTION;
17:17:49 2530  BAD_STATUS_ID	      EXCEPTION;
17:17:49 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 2532  BEGIN
17:17:49 2533  
17:17:49 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
17:17:49 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
17:17:49 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
17:17:49 2537  	   RAISE BAD_STATUS_ID;
17:17:49 2538  	 END IF;
17:17:49 2539  
17:17:49 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_PAYPAL(
17:17:49 2541  	   in_paypal_id        => in_paypal_id,
17:17:49 2542  	   in_paypal_status_id => in_paypal_status_id,
17:17:49 2543  	   in_updated_by       => in_updated_by
17:17:49 2544  	 );
17:17:49 2545  
17:17:49 2546  	 IF SQL%ROWCOUNT = 0 THEN
17:17:49 2547  	   RAISE BAD_PAYPAL_ID;
17:17:49 2548  	 END IF;
17:17:49 2549  
17:17:49 2550  EXCEPTION
17:17:49 2551  WHEN BAD_PAYPAL_ID THEN
17:17:49 2552  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2553  	   SPROC_NAME, 'No such paypal');
17:17:49 2554  WHEN BAD_STATUS_ID THEN
17:17:49 2555  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2556  	   SPROC_NAME, 'Bad paypal status id');
17:17:49 2557  WHEN OTHERS THEN
17:17:49 2558  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2560  END UPDATE_PAYPAL_STATUS;
17:17:49 2561  
17:17:49 2562  /******************************************************************************/
17:17:49 2563  
17:17:49 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
17:17:49 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
17:17:49 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
17:17:49 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
17:17:49 2568  ) AS
17:17:49 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
17:17:49 2570  -- EXCEPTIONS
17:17:49 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
17:17:49 2572  BAD_STATUS_ID	       EXCEPTION;
17:17:49 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
17:17:49 2574  BEGIN
17:17:49 2575  
17:17:49 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
17:17:49 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED THEN
17:17:49 2578  	   RAISE BAD_STATUS_ID;
17:17:49 2579  	 END IF;
17:17:49 2580  
17:17:49 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE(
17:17:49 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
17:17:49 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
17:17:49 2584  	   in_updated_by		 => in_updated_by
17:17:49 2585  	 );
17:17:49 2586  
17:17:49 2587  	 IF SQL%ROWCOUNT = 0 THEN
17:17:49 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
17:17:49 2589  	 END IF;
17:17:49 2590  
17:17:49 2591  EXCEPTION
17:17:49 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
17:17:49 2593  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2594  	   SPROC_NAME, 'No such gift certificate');
17:17:49 2595  WHEN BAD_STATUS_ID THEN
17:17:49 2596  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2597  	   SPROC_NAME, 'Bad paypal status id');
17:17:49 2598  WHEN OTHERS THEN
17:17:49 2599  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
17:17:49 2602  
17:17:49 2603  /******************************************************************************/
17:17:49 2604  
17:17:49 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:49 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:49 2607  	 out_result_set OUT SYS_REFCURSOR
17:17:49 2608  ) AS
17:17:49 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
17:17:49 2610  -- VARIABLES
17:17:49 2611  temp_invoice_id NUMBER;
17:17:49 2612  -- EXCEPTIONS
17:17:49 2613  BAD_INVOICE_ID EXCEPTION;
17:17:49 2614  BEGIN
17:17:49 2615  
17:17:49 2616  	 BEGIN
17:17:49 2617  	   SELECT
17:17:49 2618  	     I.ID into temp_invoice_id
17:17:49 2619  	   FROM
17:17:49 2620  	     INVOICE I
17:17:49 2621  	   WHERE
17:17:49 2622  	     I.ID = in_invoice_id;
17:17:49 2623  	   EXCEPTION
17:17:49 2624  	     WHEN NO_DATA_FOUND THEN
17:17:49 2625  	       RAISE BAD_INVOICE_ID;
17:17:49 2626  	 END;
17:17:49 2627  
17:17:49 2628  	 OPEN out_result_set FOR
17:17:49 2629  	   SELECT
17:17:49 2630  	     gc.EXPIRATION_DATE,
17:17:49 2631  	     ch.name,
17:17:49 2632  	     ch.id offer_chain_id,
17:17:49 2633  	     gc.sender_email,
17:17:49 2634  	     gc.sender_name,
17:17:49 2635  	     gc.recipient_email,
17:17:49 2636  	     gc.recipient_name,
17:17:49 2637  	     gc.purchase_date,
17:17:49 2638  	     gc.redemption_date,
17:17:49 2639  	     gc.purchaser_group_id,
17:17:49 2640  	     gc.redeemer_group_id,
17:17:49 2641  	     gc.code,
17:17:49 2642  	     gc.gift_message,
17:17:49 2643  	     gc.recipient_notify_date,
17:17:49 2644  	     gc.id
17:17:49 2645  	   FROM
17:17:49 2646  	     GIFT_CERTIFICATE gc
17:17:49 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
17:17:49 2648  	   WHERE
17:17:49 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
17:17:49 2650  
17:17:49 2651  EXCEPTION
17:17:49 2652  WHEN BAD_INVOICE_ID THEN
17:17:49 2653  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2654  	   SPROC_NAME, 'No such invoice');
17:17:49 2655  WHEN OTHERS THEN
17:17:49 2656  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2658  END GET_GC_BY_PURCH_INVOICE_ID;
17:17:49 2659  
17:17:49 2660  
17:17:49 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
17:17:49 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:49 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
17:17:49 2664  ) AS
17:17:49 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
17:17:49 2666  -- VARIABLES
17:17:49 2667  temp_invoice_id NUMBER;
17:17:49 2668  -- EXCEPTIONS
17:17:49 2669  BAD_INVOICE_ID EXCEPTION;
17:17:49 2670  BEGIN
17:17:49 2671  
17:17:49 2672  	 BEGIN
17:17:49 2673  	   SELECT
17:17:49 2674  	     I.ID into temp_invoice_id
17:17:49 2675  	   FROM
17:17:49 2676  	     INVOICE I
17:17:49 2677  	   WHERE
17:17:49 2678  	     I.ID = in_invoice_id;
17:17:49 2679  	   EXCEPTION
17:17:49 2680  	     WHEN NO_DATA_FOUND THEN
17:17:49 2681  	       RAISE BAD_INVOICE_ID;
17:17:49 2682  	 END;
17:17:49 2683  
17:17:49 2684  	 BEGIN
17:17:49 2685  	   SELECT
17:17:49 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
17:17:49 2687  	   FROM
17:17:49 2688  	     GIFT_CERTIFICATE
17:17:49 2689  	   WHERE
17:17:49 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
17:17:49 2691  	   EXCEPTION
17:17:49 2692  	     WHEN NO_DATA_FOUND THEN
17:17:49 2693  	       out_gift_certificate_id := NULL;
17:17:49 2694  	 END;
17:17:49 2695  
17:17:49 2696  EXCEPTION
17:17:49 2697  WHEN BAD_INVOICE_ID THEN
17:17:49 2698  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2699  	   SPROC_NAME, 'No such invoice');
17:17:49 2700  WHEN OTHERS THEN
17:17:49 2701  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
17:17:49 2704  
17:17:49 2705  /******************************************************************************/
17:17:49 2706  
17:17:49 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
17:17:49 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
17:17:49 2709  	 in_old_fin_instrument_id   IN NUMBER,
17:17:49 2710  	 in_old_fin_instrument_type IN NUMBER,
17:17:49 2711  	 in_new_fin_instrument_id   IN NUMBER,
17:17:49 2712  	 in_new_fin_instrument_type IN NUMBER,
17:17:49 2713  	 in_updated_by		    IN VARCHAR2
17:17:49 2714  ) AS
17:17:49 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
17:17:49 2716  -- variables
17:17:49 2717  temp_out_transaction_id NUMBER;
17:17:49 2718  temp_out_charge_id      NUMBER;
17:17:49 2719  var_accounts_count      NUMBER;
17:17:49 2720  -- EXCEPTIONS
17:17:49 2721  BAD_OLD_CC   EXCEPTION;
17:17:49 2722  BAD_OLD_PP   EXCEPTION;
17:17:49 2723  BAD_OLD_TYPE EXCEPTION;
17:17:49 2724  BAD_NEW_CC   EXCEPTION;
17:17:49 2725  BAD_NEW_PP   EXCEPTION;
17:17:49 2726  BAD_NEW_TYPE EXCEPTION;
17:17:49 2727  DIFFERENT_OWNERS EXCEPTION;
17:17:49 2728  BEGIN
17:17:49 2729  
17:17:49 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 2731  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2732  	     -- throw exception: bad old credit card
17:17:49 2733  	     RAISE BAD_OLD_CC;
17:17:49 2734  	   END IF;
17:17:49 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 2736  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2737  	     -- throw exception: bad old paypal
17:17:49 2738  	     RAISE BAD_OLD_PP;
17:17:49 2739  	   END IF;
17:17:49 2740  	 ELSE
17:17:49 2741  	   -- throw exception: bad instrument type
17:17:49 2742  	   RAISE BAD_OLD_TYPE;
17:17:49 2743  	 END IF;
17:17:49 2744  
17:17:49 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 2746  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2747  	     -- throw exception: bad new credit card
17:17:49 2748  	     RAISE BAD_NEW_CC;
17:17:49 2749  	   END IF;
17:17:49 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 2751  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 2752  	     -- throw exception: bad new paypal
17:17:49 2753  	     RAISE BAD_NEW_PP;
17:17:49 2754  	   END IF;
17:17:49 2755  	 ELSE
17:17:49 2756  	   -- throw exception: bad new instrument type
17:17:49 2757  	   RAISE BAD_NEW_TYPE;
17:17:49 2758  	 END IF;
17:17:49 2759  
17:17:49 2760  	 -- Check that owner of both instruments - same man
17:17:49 2761  
17:17:49 2762  	 SELECT count(1) into var_accounts_count FROM (
17:17:49 2763  	   SELECT
17:17:49 2764  	     CC.ACCOUNT_ID
17:17:49 2765  	   FROM
17:17:49 2766  	     CREDIT_CARD CC
17:17:49 2767  	   WHERE
17:17:49 2768  	     (
17:17:49 2769  	       CC.ID = in_old_fin_instrument_id
17:17:49 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49 2771  	     )
17:17:49 2772  	     OR
17:17:49 2773  	     (
17:17:49 2774  	       CC.ID = in_new_fin_instrument_id
17:17:49 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
17:17:49 2776  	     )
17:17:49 2777  	   UNION
17:17:49 2778  	   SELECT
17:17:49 2779  	     PP.ACCOUNT_ID
17:17:49 2780  	   FROM
17:17:49 2781  	     PAYPAL PP
17:17:49 2782  	   WHERE
17:17:49 2783  	     (
17:17:49 2784  	       PP.ID = in_old_fin_instrument_id
17:17:49 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
17:17:49 2786  	     )
17:17:49 2787  	     OR
17:17:49 2788  	     (
17:17:49 2789  	       PP.ID = in_new_fin_instrument_id
17:17:49 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
17:17:49 2791  	     )
17:17:49 2792  	 )
17:17:49 2793  	 WHERE
17:17:49 2794  	   account_id IS NOT NULL;
17:17:49 2795  
17:17:49 2796  	 IF (var_accounts_count > 1) THEN
17:17:49 2797  	   -- Throw exception: different owners of instruments
17:17:49 2798  	   RAISE DIFFERENT_OWNERS;
17:17:49 2799  	 END IF;
17:17:49 2800  
17:17:49 2801  	 FOR f_sub IN (
17:17:49 2802  	   select
17:17:49 2803  	     s.id
17:17:49 2804  	   FROM
17:17:49 2805  	     subscription s
17:17:49 2806  	   WHERE
17:17:49 2807  	     (
17:17:49 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE OR
17:17:49 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 2810  	     )
17:17:49 2811  	     AND
17:17:49 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
17:17:49 2813  	     s.instrument_id = in_old_fin_instrument_id
17:17:49 2814  	 ) LOOP
17:17:49 2815  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
17:17:49 2816  	     in_subscription_id => f_sub.id,
17:17:49 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
17:17:49 2818  	     in_instrument_id => in_new_fin_instrument_id,
17:17:49 2819  	     in_updated_by => in_updated_by
17:17:49 2820  	   );
17:17:49 2821  	 END LOOP;
17:17:49 2822  
17:17:49 2823  	 FOR f_open_charge IN (
17:17:49 2824  	   select
17:17:49 2825  	     ch.id,
17:17:49 2826  	     ch.invoice_id,
17:17:49 2827  	     ch.transaction_id,
17:17:49 2828  	     ch.charge_amount
17:17:49 2829  	   FROM
17:17:49 2830  	     charge ch
17:17:49 2831  	   WHERE
17:17:49 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
17:17:49 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
17:17:49 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V15.CHARGE_OPENED
17:17:49 2835  	 ) LOOP
17:17:49 2836  
17:17:49 2837  	   FOR f_pending_transaction IN (
17:17:49 2838  	     select
17:17:49 2839  	       id, transaction_amount, order_id, is_refund
17:17:49 2840  	     from
17:17:49 2841  	       transaction
17:17:49 2842  	     where
17:17:49 2843  	       id = f_open_charge.transaction_id
17:17:49 2844  	       and transaction_status_id = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
17:17:49 2845  	   ) LOOP
17:17:49 2846  	     PROCS_TRANSACTION_V15.CREATE_TRANSACTION (
17:17:49 2847  	       in_transaction_id => NULL,
17:17:49 2848  	       in_status_id  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
17:17:49 2849  	       in_amount     => f_pending_transaction.transaction_amount,
17:17:49 2850  	       in_created_by => in_updated_by,
17:17:49 2851  	       in_order_id   => null,
17:17:49 2852  	       in_is_refund  => f_pending_transaction.is_refund,
17:17:49 2853  	       out_transaction_id => temp_out_transaction_id
17:17:49 2854  	     );
17:17:49 2855  
17:17:49 2856  	     PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
17:17:49 2857  	       in_transaction_id => f_pending_transaction.id,
17:17:49 2858  	       in_updated_by	 => in_updated_by,
17:17:49 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
17:17:49 2860  	     );
17:17:49 2861  
17:17:49 2862  	     -- Create new charge
17:17:49 2863  	     PROCS_CHARGE_V15.CREATE_CHARGE (
17:17:49 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
17:17:49 2865  	       in_transaction_id     => temp_out_transaction_id,
17:17:49 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
17:17:49 2867  	       in_instrument_id      => in_new_fin_instrument_id,
17:17:49 2868  	       in_charge_amount      => f_open_charge.charge_amount,
17:17:49 2869  	       in_created_by	     => in_updated_by,
17:17:49 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
17:17:49 2871  	       out_charge_id	     => temp_out_charge_id
17:17:49 2872  	     );
17:17:49 2873  	     -- Cancel old charge
17:17:49 2874  	     PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
17:17:49 2875  	       in_charge_id	   => f_open_charge.id,
17:17:49 2876  	       in_updated_by	   => in_updated_by,
17:17:49 2877  	       in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
17:17:49 2878  	     );
17:17:49 2879  	   END LOOP;
17:17:49 2880  	 END LOOP;
17:17:49 2881  
17:17:49 2882  EXCEPTION
17:17:49 2883  WHEN BAD_OLD_CC THEN
17:17:49 2884  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2885  	   SPROC_NAME, 'Trying to switch from non existing credit card');
17:17:49 2886  WHEN BAD_OLD_PP THEN
17:17:49 2887  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2888  	   SPROC_NAME, 'Trying to switch from non existing paypal');
17:17:49 2889  WHEN BAD_OLD_TYPE THEN
17:17:49 2890  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2891  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
17:17:49 2892  WHEN BAD_NEW_CC THEN
17:17:49 2893  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2894  	   SPROC_NAME, 'Trying to switch to non existing credit card');
17:17:49 2895  WHEN BAD_NEW_PP THEN
17:17:49 2896  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2897  	   SPROC_NAME, 'Trying to switch to non existing paypal');
17:17:49 2898  WHEN BAD_NEW_TYPE THEN
17:17:49 2899  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 2900  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
17:17:49 2901  WHEN DIFFERENT_OWNERS THEN
17:17:49 2902  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 2903  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
17:17:49 2904  WHEN OTHERS THEN
17:17:49 2905  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 2906  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 2907  END SWITCH_FINANCIAL_INSTRUMENT;
17:17:49 2908  
17:17:49 2909  END PROCS_FIN_INSTRUMENTS_V15;
17:17:49 2910  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.24
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
17:17:49   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:49   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
17:17:49   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:49   7  ) AS
17:17:49   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
17:17:49   9  BEGIN
17:17:49  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_SUBSCRIPTION_SHARE (
17:17:49  11  	  in_id 		=> in_sub_share_id,
17:17:49  12  	  in_needs_entitlements => in_need_entitlements,
17:17:49  13  	  in_updated_by 	=> in_updater
17:17:49  14  	);
17:17:49  15  END UPDATE_SS_NEED_ENTITLEMENTS;
17:17:49  16  
17:17:49  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
17:17:49  18  	out_result_set OUT SYS_REFCURSOR
17:17:49  19  ) AS
17:17:49  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
17:17:49  21  BEGIN
17:17:49  22  	OPEN out_result_set FOR
17:17:49  23  	SELECT * FROM (
17:17:49  24  	  SELECT DISTINCT
17:17:49  25  	    ga.Subscription_Id,
17:17:49  26  	    A.Group_Id Borrower_Group_Id,
17:17:49  27  	    L.Offer_Id,
17:17:49  28  	    ss.id Subscription_Share_id
17:17:49  29  	  FROM
17:17:49  30  	    Subscription_Share Ss,
17:17:49  31  	    Group_Account Ga,
17:17:49  32  	    Account A,
17:17:49  33  	    License l
17:17:49  34  	  WHERE
17:17:49  35  	    Ss.Group_Account_Id        = ga.id
17:17:49  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V15.TRUE
17:17:49  37  	    AND Ss.Borrower_Account_Id = A.Id
17:17:49  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
17:17:49  39  	    AND ROWNUM <= 5000
17:17:49  40  	  ORDER BY dbms_random.value
17:17:49  41  ) WHERE
17:17:49  42  	ROWNUM <= 1000;
17:17:49  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
17:17:49  44  
17:17:49  45  PROCEDURE EXPIRE_SUB_SHARE(
17:17:49  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:49  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:49  48  ) AS
17:17:49  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
17:17:49  50  BEGIN
17:17:49  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_SUBSCRIPTION_SHARE (
17:17:49  52  	  in_id 	=> in_sub_share_id,
17:17:49  53  	  in_end_date	=> SYSDATE,
17:17:49  54  	  in_updated_by => in_updater,
17:17:49  55  	  in_needs_entitlements => 1
17:17:49  56  	);
17:17:49  57  END EXPIRE_SUB_SHARE;
17:17:49  58  
17:17:49  59  PROCEDURE EXPIRE_ALL_SHARES (
17:17:49  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
17:17:49  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:49  62  ) AS
17:17:49  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
17:17:49  64  BEGIN
17:17:49  65  	UPDATE SUBSCRIPTION_SHARE SET
17:17:49  66  	  END_DATE = SYSDATE,
17:17:49  67  	  UPDATED_BY = in_updated_by,
17:17:49  68  	  UPDATE_DATE = SYSDATE
17:17:49  69  	WHERE
17:17:49  70  	  GROUP_ACCOUNT_ID = in_group_account_id
17:17:49  71  	AND
17:17:49  72  	  SYSDATE < END_DATE;
17:17:49  73  EXCEPTION
17:17:49  74  	WHEN OTHERS THEN
17:17:49  75  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
17:17:49  77  END EXPIRE_ALL_SHARES;
17:17:49  78  
17:17:49  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
17:17:49  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
17:17:49  81  	in_start	 IN  NUMBER,
17:17:49  82  	in_end		 IN  NUMBER,
17:17:49  83  	in_expired	 IN  NUMBER,
17:17:49  84  	out_result_set	 OUT SYS_REFCURSOR,
17:17:49  85  	out_shares_count OUT NUMBER
17:17:49  86  ) AS
17:17:49  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
17:17:49  88  range_diff NUMBER := 0;
17:17:49  89  upper_bond_diff NUMBER := 0;
17:17:49  90  l_start NUMBER := 0;
17:17:49  91  l_end   NUMBER := 0;
17:17:49  92  BEGIN
17:17:49  93  	--Normalize the end points [START]
17:17:49  94  	IF (in_start IS NULL OR in_start < 0) Then
17:17:49  95  	  l_start := 0;
17:17:49  96  	ELSE
17:17:49  97  	  l_start := in_start;
17:17:49  98  	END IF;
17:17:49  99  
17:17:49 100  	IF (in_end IS NULL) Then
17:17:49 101  	  l_end := 11;
17:17:49 102  	ELSE
17:17:49 103  	  l_end := in_end;
17:17:49 104  	END IF;
17:17:49 105  
17:17:49 106  	l_start := l_start + 1;
17:17:49 107  	l_end	:= l_end   + 1;
17:17:49 108  
17:17:49 109  	range_diff := l_end - l_start;
17:17:49 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
17:17:49 111  
17:17:49 112  	IF (upper_bond_diff > 0) Then
17:17:49 113  	  l_end := l_end - upper_bond_diff;
17:17:49 114  	END IF;
17:17:49 115  	--Normalize the end points [END]
17:17:49 116  
17:17:49 117  	BEGIN
17:17:49 118  	  SELECT
17:17:49 119  	    COUNT(1) INTO out_shares_count
17:17:49 120  	  FROM
17:17:49 121  	    GROUP_ACCOUNT ga,
17:17:49 122  	    SUBSCRIPTION_SHARE ss,
17:17:49 123  	    ACCOUNT a
17:17:49 124  	  WHERE
17:17:49 125  	    a.GROUP_ID		= in_group_id AND
17:17:49 126  	    a.Id		= ss.borrower_account_id And
17:17:49 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
17:17:49 128  	END;
17:17:49 129  
17:17:49 130  	IF in_expired > 0 THEN
17:17:49 131  	BEGIN
17:17:49 132  	    OPEN out_result_set FOR
17:17:49 133  	    SELECT
17:17:49 134  	      *
17:17:49 135  	    FROM
17:17:49 136  	      (SELECT rownum rnum, q.*
17:17:49 137  	       FROM
17:17:49 138  		(SELECT
17:17:49 139  		   ga.SUBSCRIPTION_ID,
17:17:49 140  		   ss.START_DATE,
17:17:49 141  		   ss.END_DATE,
17:17:49 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
17:17:49 143  		 FROM
17:17:49 144  		   GROUP_ACCOUNT ga,
17:17:49 145  		   SUBSCRIPTION_SHARE ss,
17:17:49 146  		   ACCOUNT a,
17:17:49 147  		   SUBSCRIPTION s,
17:17:49 148  		   ACCOUNT a2
17:17:49 149  		 WHERE
17:17:49 150  		   a.GROUP_ID	       = in_group_id AND
17:17:49 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
17:17:49 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
17:17:49 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
17:17:49 154  		   s.ACCOUNT_ID        = a2.ID
17:17:49 155  		) Q
17:17:49 156  	      WHERE rownum <= l_end)
17:17:49 157  	    WHERE rnum >= l_Start;
17:17:49 158  	END;
17:17:49 159  	ELSE
17:17:49 160  	BEGIN
17:17:49 161  	    OPEN out_result_set FOR
17:17:49 162  	    SELECT
17:17:49 163  	      *
17:17:49 164  	    FROM
17:17:49 165  	      (SELECT rownum rnum, q.*
17:17:49 166  	       FROM
17:17:49 167  		(SELECT
17:17:49 168  		   ga.SUBSCRIPTION_ID,
17:17:49 169  		   ss.START_DATE,
17:17:49 170  		   ss.END_DATE,
17:17:49 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
17:17:49 172  		 FROM
17:17:49 173  		   GROUP_ACCOUNT ga,
17:17:49 174  		   SUBSCRIPTION_SHARE ss,
17:17:49 175  		   ACCOUNT a,
17:17:49 176  		   SUBSCRIPTION s,
17:17:49 177  		   ACCOUNT a2
17:17:49 178  		 WHERE
17:17:49 179  		   a.GROUP_ID	       = in_group_id AND
17:17:49 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
17:17:49 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
17:17:49 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
17:17:49 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
17:17:49 184  		   s.ACCOUNT_ID        = a2.ID
17:17:49 185  		) Q
17:17:49 186  	      WHERE rownum <= l_end)
17:17:49 187  	    WHERE rnum >= l_start;
17:17:49 188  	  END;
17:17:49 189  	END IF;
17:17:49 190  EXCEPTION
17:17:49 191  WHEN NO_DATA_FOUND THEN
17:17:49 192  	NULL;
17:17:49 193  WHEN OTHERS THEN
17:17:49 194  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
17:17:49 196  END SUB_SHARE_BY_GROUP_ID;
17:17:49 197  
17:17:49 198  PROCEDURE IS_VALID_IP_ADDRESS (
17:17:49 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:49 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:49 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:49 202  	out_is_valid	    OUT NUMBER
17:17:49 203  ) AS
17:17:49 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
17:17:49 205  BEGIN
17:17:49 206  	SELECT
17:17:49 207  	  COUNT(1) INTO out_is_valid
17:17:49 208  	FROM
17:17:49 209  	  GROUP_ACCOUNT_IP_RANGE,
17:17:49 210  	  GROUP_ACCOUNT,
17:17:49 211  	  SUBSCRIPTION,
17:17:49 212  	  OFFER_CHAIN
17:17:49 213  	WHERE
17:17:49 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
17:17:49 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
17:17:49 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
17:17:49 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
17:17:49 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 219  	 (
17:17:49 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
17:17:49 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
17:17:49 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
17:17:49 223  	 ) AND
17:17:49 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE;
17:17:49 225  EXCEPTION
17:17:49 226  WHEN OTHERS THEN
17:17:49 227  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
17:17:49 229  END IS_VALID_IP_ADDRESS;
17:17:49 230  
17:17:49 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
17:17:49 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:49 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:49 234  	out_is_valid	    OUT NUMBER
17:17:49 235  ) AS
17:17:49 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
17:17:49 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
17:17:49 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
17:17:49 239  BEGIN
17:17:49 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
17:17:49 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
17:17:49 242  
17:17:49 243  	SELECT
17:17:49 244  	  COUNT(1) INTO out_is_valid
17:17:49 245  	FROM
17:17:49 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
17:17:49 247  	  GROUP_ACCOUNT ga,
17:17:49 248  	  SUBSCRIPTION s,
17:17:49 249  	  OFFER_CHAIN oc
17:17:49 250  	WHERE
17:17:49 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
17:17:49 252  	  ga.SUBSCRIPTION_ID = s.ID AND
17:17:49 253  	  s.OFFER_CHAIN_ID = oc.ID AND
17:17:49 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
17:17:49 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
17:17:49 257  	  gaed.IS_ACTIVE = 1;
17:17:49 258  EXCEPTION
17:17:49 259  WHEN OTHERS THEN
17:17:49 260  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
17:17:49 262  END IS_VALID_EMAIL_DOMAIN;
17:17:49 263  
17:17:49 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
17:17:49 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
17:17:49 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
17:17:49 267  	out_Result_Set	       OUT Sys_Refcursor
17:17:49 268  ) AS
17:17:49 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
17:17:49 270  BEGIN
17:17:49 271  	BEGIN
17:17:49 272  	   OPEN out_result_set FOR
17:17:49 273  	   SELECT
17:17:49 274  	      ss.ID,
17:17:49 275  	      ss.GROUP_ACCOUNT_ID,
17:17:49 276  	      ss.BORROWER_ACCOUNT_ID,
17:17:49 277  	      ss.IP_ADDRESS,
17:17:49 278  	      ss.START_DATE,
17:17:49 279  	      ss.END_DATE,
17:17:49 280  	      ss.CREATED_BY,
17:17:49 281  	      ss.CREATE_DATE,
17:17:49 282  	      ss.UPDATED_BY,
17:17:49 283  	      ss.UPDATE_DATE,
17:17:49 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
17:17:49 285  	   FROM
17:17:49 286  	     SUBSCRIPTION_SHARE ss,
17:17:49 287  	     ACCOUNT a
17:17:49 288  	   WHERE
17:17:49 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
17:17:49 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
17:17:49 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
17:17:49 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
17:17:49 293  	END;
17:17:49 294  EXCEPTION
17:17:49 295  WHEN OTHERS THEN
17:17:49 296  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
17:17:49 298  END GET_SUBSCRIPTION_SHARE;
17:17:49 299  
17:17:49 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
17:17:49 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
17:17:49 302  	out_result_set	   OUT SYS_REFCURSOR
17:17:49 303  ) As
17:17:49 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
17:17:49 305  BEGIN
17:17:49 306  OPEN out_result_set FOR
17:17:49 307  	SELECT
17:17:49 308  	  ID,
17:17:49 309  	  SUBSCRIPTION_ID,
17:17:49 310  	  GROUP_NAME,
17:17:49 311  	  FIRST_NAME,
17:17:49 312  	  LAST_NAME,
17:17:49 313  	  EMAIL,
17:17:49 314  	  PHONE,
17:17:49 315  	  ORGANIZATION_TYPE,
17:17:49 316  	  SEATS,
17:17:49 317  	  SEAT_TTL_IN_HOURS,
17:17:49 318  	  CREATE_DATE,
17:17:49 319  	  CREATED_BY,
17:17:49 320  	  UPDATE_DATE,
17:17:49 321  	  UPDATED_BY
17:17:49 322  	FROM
17:17:49 323  	  GROUP_ACCOUNT
17:17:49 324  	Where
17:17:49 325  	  Subscription_Id = in_subscription_id;
17:17:49 326  EXCEPTION
17:17:49 327  WHEN OTHERS THEN
17:17:49 328  	Procs_Common_V15.Throw_Exception(APP_EXCEPTION_CODES_V15.Unknown_Error,
17:17:49 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 330  
17:17:49 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
17:17:49 332  
17:17:49 333  PROCEDURE CREATE_GROUP_ACCOUNT (
17:17:49 334  	in_subscription_id	 IN NUMBER,
17:17:49 335  	in_group_name		 IN VARCHAR2,
17:17:49 336  	in_first_name		 IN VARCHAR2,
17:17:49 337  	in_last_name		 IN VARCHAR2,
17:17:49 338  	in_email		 IN VARCHAR2,
17:17:49 339  	in_phone		 IN VARCHAR2,
17:17:49 340  	in_organization_type	 IN VARCHAR2,
17:17:49 341  	in_seats		 IN NUMBER,
17:17:49 342  	in_seat_ttl_in_hours	 IN NUMBER,
17:17:49 343  	in_ip			 IN NUMBER,
17:17:49 344  	in_created_by		 IN VARCHAR2
17:17:49 345  ) AS
17:17:49 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
17:17:49 347  BEGIN
17:17:49 348  
17:17:49 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.CREATE_GROUP_ACCOUNT(
17:17:49 350  	  in_subscription_id => in_subscription_id,
17:17:49 351  	  in_group_name => in_group_name,
17:17:49 352  	  in_first_name => in_first_name,
17:17:49 353  	  in_last_name => in_last_name,
17:17:49 354  	  in_email => in_email,
17:17:49 355  	  in_phone => in_phone,
17:17:49 356  	  in_organization_type => in_organization_type,
17:17:49 357  	  in_seats => in_seats,
17:17:49 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
17:17:49 359  	  in_ip => in_ip,
17:17:49 360  	  in_created_by => in_created_by
17:17:49 361  	);
17:17:49 362  
17:17:49 363  END CREATE_GROUP_ACCOUNT;
17:17:49 364  
17:17:49 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
17:17:49 366  	in_group_account_id IN NUMBER,
17:17:49 367  	in_start	    IN NUMBER,
17:17:49 368  	in_end		    IN NUMBER,
17:17:49 369  	out_Result_Set	    OUT Sys_Refcursor
17:17:49 370  ) AS
17:17:49 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
17:17:49 372  range_diff NUMBER := 0;
17:17:49 373  upper_bond_diff NUMBER := 0;
17:17:49 374  l_start NUMBER := 0;
17:17:49 375  l_end   NUMBER := 0;
17:17:49 376  BEGIN
17:17:49 377  	-- Normalize the end points [START]
17:17:49 378  	IF (in_start IS NULL OR in_start < 0) Then
17:17:49 379  	  l_start := 0;
17:17:49 380  	ELSE
17:17:49 381  	  l_start := in_start;
17:17:49 382  	END IF;
17:17:49 383  
17:17:49 384  	IF (in_end IS NULL) Then
17:17:49 385  	  l_end := 11;
17:17:49 386  	ELSE
17:17:49 387  	  l_end := in_end;
17:17:49 388  	END IF;
17:17:49 389  
17:17:49 390  	l_start := l_start + 1;
17:17:49 391  	l_end	:= l_end   + 1;
17:17:49 392  
17:17:49 393  	range_diff := l_end - l_start;
17:17:49 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
17:17:49 395  
17:17:49 396  	IF (upper_bond_diff > 0) Then
17:17:49 397  	  l_end := l_end - upper_bond_diff;
17:17:49 398  	END IF;
17:17:49 399  	-- Normalize the end points [END]
17:17:49 400  
17:17:49 401  	BEGIN
17:17:49 402  	   OPEN out_result_set FOR
17:17:49 403  	   SELECT *
17:17:49 404  	   FROM
17:17:49 405  	     (SELECT rownum rnum, Q.*
17:17:49 406  	      FROM
17:17:49 407  	       (SELECT
17:17:49 408  		  ss.ID,
17:17:49 409  		  ss.GROUP_ACCOUNT_ID,
17:17:49 410  		  ss.BORROWER_ACCOUNT_ID,
17:17:49 411  		  ss.IP_ADDRESS,
17:17:49 412  		  ss.START_DATE,
17:17:49 413  		  ss.END_DATE,
17:17:49 414  		  ss.CREATED_BY,
17:17:49 415  		  ss.CREATE_DATE,
17:17:49 416  		  ss.UPDATED_BY,
17:17:49 417  		  ss.UPDATE_DATE,
17:17:49 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
17:17:49 419  		FROM
17:17:49 420  		  SUBSCRIPTION_SHARE ss,
17:17:49 421  		  ACCOUNT a,
17:17:49 422  		  LICENSE l,
17:17:49 423  		  GROUP_ACCOUNT ga
17:17:49 424  		WHERE
17:17:49 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
17:17:49 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
17:17:49 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
17:17:49 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
17:17:49 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
17:17:49 431  	      ) Q
17:17:49 432  	    WHERE rownum <= l_end)
17:17:49 433  	  WHERE rnum >= l_start;
17:17:49 434  	END;
17:17:49 435  EXCEPTION
17:17:49 436  WHEN OTHERS THEN
17:17:49 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
17:17:49 439  END GET_SUBSCRIPTION_SHARES;
17:17:49 440  
17:17:49 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
17:17:49 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:49 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:49 444  	out_result_set	      OUT SYS_REFCURSOR
17:17:49 445  ) AS
17:17:49 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
17:17:49 447  BEGIN
17:17:49 448  	BEGIN
17:17:49 449  	  OPEN out_result_set FOR
17:17:49 450  	  SELECT
17:17:49 451  	    ID,
17:17:49 452  	    SUBSCRIPTION_ID,
17:17:49 453  	    GROUP_NAME,
17:17:49 454  	    FIRST_NAME,
17:17:49 455  	    LAST_NAME,
17:17:49 456  	    EMAIL,
17:17:49 457  	    PHONE,
17:17:49 458  	    ORGANIZATION_TYPE,
17:17:49 459  	    SEATS,
17:17:49 460  	    SEAT_TTL_IN_HOURS,
17:17:49 461  	    CREATE_DATE,
17:17:49 462  	    CREATED_BY,
17:17:49 463  	    UPDATE_DATE,
17:17:49 464  	    UPDATED_BY
17:17:49 465  	  FROM
17:17:49 466  	    GROUP_ACCOUNT
17:17:49 467  	  WHERE
17:17:49 468  	    ID IN (
17:17:49 469  	      SELECT
17:17:49 470  		GROUP_ACCOUNT_ID
17:17:49 471  	      FROM
17:17:49 472  		GROUP_ACCOUNT_IP_RANGE,
17:17:49 473  		GROUP_ACCOUNT,
17:17:49 474  		SUBSCRIPTION,
17:17:49 475  		OFFER_CHAIN
17:17:49 476  	      WHERE
17:17:49 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
17:17:49 478  	      AND
17:17:49 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
17:17:49 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
17:17:49 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
17:17:49 482  	      AND
17:17:49 483  		(
17:17:49 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
17:17:49 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
17:17:49 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
17:17:49 487  		)
17:17:49 488  	      AND
17:17:49 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
17:17:49 490  	    );
17:17:49 491  	  END;
17:17:49 492  EXCEPTION
17:17:49 493  WHEN OTHERS THEN
17:17:49 494  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 496  END GET_GROUP_ACCOUNT_BY_IP;
17:17:49 497  
17:17:49 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
17:17:49 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:49 500  	out_result_set	    OUT SYS_REFCURSOR
17:17:49 501  ) AS
17:17:49 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
17:17:49 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
17:17:49 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
17:17:49 505  BEGIN
17:17:49 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
17:17:49 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
17:17:49 508  	BEGIN
17:17:49 509  	  OPEN out_result_set FOR
17:17:49 510  	  SELECT
17:17:49 511  	    ID,
17:17:49 512  	    SUBSCRIPTION_ID,
17:17:49 513  	    GROUP_NAME,
17:17:49 514  	    FIRST_NAME,
17:17:49 515  	    LAST_NAME,
17:17:49 516  	    EMAIL,
17:17:49 517  	    PHONE,
17:17:49 518  	    ORGANIZATION_TYPE,
17:17:49 519  	    SEATS,
17:17:49 520  	    SEAT_TTL_IN_HOURS,
17:17:49 521  	    CREATE_DATE,
17:17:49 522  	    CREATED_BY,
17:17:49 523  	    UPDATE_DATE,
17:17:49 524  	    UPDATED_BY
17:17:49 525  	  FROM
17:17:49 526  	    GROUP_ACCOUNT
17:17:49 527  	  WHERE
17:17:49 528  	    ID IN (
17:17:49 529  	      SELECT
17:17:49 530  		GROUP_ACCOUNT_ID
17:17:49 531  	      FROM
17:17:49 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
17:17:49 533  		GROUP_ACCOUNT ga,
17:17:49 534  		SUBSCRIPTION s,
17:17:49 535  		OFFER_CHAIN oc
17:17:49 536  	      WHERE
17:17:49 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
17:17:49 538  		ga.SUBSCRIPTION_ID = s.ID AND
17:17:49 539  		s.OFFER_CHAIN_ID = oc.ID AND
17:17:49 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
17:17:49 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
17:17:49 542  		gaed.IS_ACTIVE = 1
17:17:49 543  	    );
17:17:49 544  	  END;
17:17:49 545  EXCEPTION
17:17:49 546  WHEN OTHERS THEN
17:17:49 547  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
17:17:49 550  
17:17:49 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
17:17:49 552  	in_group_account_id   IN NUMBER,
17:17:49 553  	in_start	      IN NUMBER,
17:17:49 554  	in_end		      IN NUMBER,
17:17:49 555  	in_status	      IN NUMBER,
17:17:49 556  	out_record_count      OUT NUMBER,
17:17:49 557  	out_result_set	      OUT SYS_REFCURSOR
17:17:49 558  ) AS
17:17:49 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
17:17:49 560  range_diff NUMBER := 0;
17:17:49 561  upper_bond_diff NUMBER := 0;
17:17:49 562  l_start NUMBER := 0;
17:17:49 563  l_end   NUMBER := 0;
17:17:49 564  BEGIN
17:17:49 565  	--Normalize the end points [START]
17:17:49 566  	IF (in_start IS NULL OR in_start < 0) Then
17:17:49 567  	  l_start := 0;
17:17:49 568  	ELSE
17:17:49 569  	  l_start := in_start;
17:17:49 570  	END IF;
17:17:49 571  
17:17:49 572  	IF (in_end IS NULL) Then
17:17:49 573  	  l_end := 11;
17:17:49 574  	ELSE
17:17:49 575  	  l_end := in_end;
17:17:49 576  	END IF;
17:17:49 577  
17:17:49 578  	l_start := l_start + 1;
17:17:49 579  	l_end	:= l_end   + 1;
17:17:49 580  
17:17:49 581  	range_diff := l_end - l_start;
17:17:49 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
17:17:49 583  
17:17:49 584  	IF (upper_bond_diff > 0) Then
17:17:49 585  	  l_end := l_end - upper_bond_diff;
17:17:49 586  	END IF;
17:17:49 587  	--Normalize the end points [END]
17:17:49 588  
17:17:49 589  	--Total count of records [START]
17:17:49 590  	SELECT
17:17:49 591  	  COUNT(1) INTO out_record_count
17:17:49 592  	FROM
17:17:49 593  	  GROUP_ACCOUNT_IP_RANGE
17:17:49 594  	WHERE
17:17:49 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
17:17:49 597  	--Total count of records [END]
17:17:49 598  
17:17:49 599  	OPEN out_result_set FOR
17:17:49 600  	SELECT
17:17:49 601  	  *
17:17:49 602  	FROM
17:17:49 603  	  (SELECT rownum rnum, q.*
17:17:49 604  	   FROM
17:17:49 605  	    (SELECT
17:17:49 606  	       ID,
17:17:49 607  	       GROUP_ACCOUNT_ID,
17:17:49 608  	       MINIMUM_IP_STRING,
17:17:49 609  	       MAXIMUM_IP_STRING,
17:17:49 610  	       GROUP_ACC_IP_RNG_STATUS_ID
17:17:49 611  	     FROM
17:17:49 612  	       GROUP_ACCOUNT_IP_RANGE
17:17:49 613  	     WHERE
17:17:49 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 615  	       (in_status IS NULL OR
17:17:49 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
17:17:49 617  	    ) Q
17:17:49 618  	  WHERE rownum <= l_end)
17:17:49 619  	WHERE rnum >= l_Start;
17:17:49 620  EXCEPTION
17:17:49 621  WHEN OTHERS THEN
17:17:49 622  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
17:17:49 624  END GET_GROUP_ACCOUNT_IP_RANGES;
17:17:49 625  
17:17:49 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
17:17:49 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:49 628  	in_start	      IN NUMBER,
17:17:49 629  	in_end		      IN NUMBER,
17:17:49 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
17:17:49 631  	out_record_count      OUT NUMBER,
17:17:49 632  	out_result_set	      OUT SYS_REFCURSOR
17:17:49 633  ) AS
17:17:49 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
17:17:49 635  range_diff NUMBER := 0;
17:17:49 636  upper_bond_diff NUMBER := 0;
17:17:49 637  l_start NUMBER := 0;
17:17:49 638  l_end   NUMBER := 0;
17:17:49 639  BEGIN
17:17:49 640  	--Normalize the end points [START]
17:17:49 641  	IF (in_start IS NULL OR in_start < 0) Then
17:17:49 642  	  l_start := 0;
17:17:49 643  	ELSE
17:17:49 644  	  l_start := in_start;
17:17:49 645  	END IF;
17:17:49 646  
17:17:49 647  	IF (in_end IS NULL) Then
17:17:49 648  	  l_end := 11;
17:17:49 649  	ELSE
17:17:49 650  	  l_end := in_end;
17:17:49 651  	END IF;
17:17:49 652  
17:17:49 653  	l_start := l_start + 1;
17:17:49 654  	l_end	:= l_end   + 1;
17:17:49 655  
17:17:49 656  	range_diff := l_end - l_start;
17:17:49 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
17:17:49 658  
17:17:49 659  	IF (upper_bond_diff > 0) Then
17:17:49 660  	  l_end := l_end - upper_bond_diff;
17:17:49 661  	END IF;
17:17:49 662  	--Normalize the end points [END]
17:17:49 663  
17:17:49 664  	--Total count of records [START]
17:17:49 665  	SELECT
17:17:49 666  	  COUNT(1) INTO out_record_count
17:17:49 667  	FROM
17:17:49 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
17:17:49 669  	WHERE
17:17:49 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
17:17:49 672  	--Total count of records [END]
17:17:49 673  
17:17:49 674  	OPEN out_result_set FOR
17:17:49 675  	SELECT
17:17:49 676  	  *
17:17:49 677  	FROM
17:17:49 678  	  (SELECT rownum rnum, q.*
17:17:49 679  	   FROM
17:17:49 680  	    (SELECT
17:17:49 681  	      ID,
17:17:49 682  	      GROUP_ACCOUNT_ID,
17:17:49 683  	      EMAIL_DOMAIN,
17:17:49 684  	      IS_ACTIVE
17:17:49 685  	     FROM
17:17:49 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
17:17:49 687  	     WHERE
17:17:49 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 689  	       (in_status IS NULL OR
17:17:49 690  		IS_ACTIVE = in_status)
17:17:49 691  	    ) Q
17:17:49 692  	  WHERE rownum <= l_end)
17:17:49 693  	WHERE rnum >= l_Start;
17:17:49 694  
17:17:49 695  EXCEPTION
17:17:49 696  WHEN OTHERS THEN
17:17:49 697  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
17:17:49 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
17:17:49 700  
17:17:49 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
17:17:49 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:49 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:49 704  ) AS
17:17:49 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
17:17:49 706  BEGIN
17:17:49 707  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
17:17:49 708  	    in_group_account_id => in_group_account_id,
17:17:49 709  	    in_updated_by => in_updated_by
17:17:49 710  	  );
17:17:49 711  EXCEPTION
17:17:49 712  WHEN OTHERS THEN
17:17:49 713  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
17:17:49 716  
17:17:49 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
17:17:49 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
17:17:49 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
17:17:49 720  ) AS
17:17:49 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
17:17:49 722  BEGIN
17:17:49 723  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_EMAIL_DOMAIN_BY_ID(
17:17:49 724  	    in_id => in_id,
17:17:49 725  	    in_updated_by => in_updated_by
17:17:49 726  	  );
17:17:49 727  EXCEPTION
17:17:49 728  WHEN OTHERS THEN
17:17:49 729  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
17:17:49 732  
17:17:49 733  PROCEDURE ADD_EMAIL_DOMAIN (
17:17:49 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
17:17:49 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
17:17:49 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
17:17:49 737  ) AS
17:17:49 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
17:17:49 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
17:17:49 740  var_is_dupe NUMBER(1);
17:17:49 741  var_group_account_count NUMBER := 0;
17:17:49 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
17:17:49 743  NOT_GL EXCEPTION;
17:17:49 744  DUPE EXCEPTION;
17:17:49 745  BEGIN
17:17:49 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
17:17:49 747  	  FROM
17:17:49 748  	    GROUP_ACCOUNT,
17:17:49 749  	    SUBSCRIPTION,
17:17:49 750  	    OFFER_CHAIN
17:17:49 751  	  WHERE
17:17:49 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
17:17:49 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
17:17:49 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 755  	  ;
17:17:49 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
17:17:49 757  	    RAISE NOT_GL;
17:17:49 758  	  END IF;
17:17:49 759  
17:17:49 760  	  --check if email domain already exists
17:17:49 761  	  SELECT count(1) into var_group_account_count
17:17:49 762  	  FROM
17:17:49 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
17:17:49 764  	  WHERE
17:17:49 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
17:17:49 766  	      EMAIL_DOMAIN = in_email_domain
17:17:49 767  	  ;
17:17:49 768  
17:17:49 769  	  IF(var_group_account_count > 0) THEN
17:17:49 770  	      SELECT ID into var_id
17:17:49 771  	      FROM
17:17:49 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
17:17:49 773  	      WHERE
17:17:49 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
17:17:49 775  		  EMAIL_DOMAIN = in_email_domain AND
17:17:49 776  		  rownum <= 1;
17:17:49 777  	      PROCS_GROUP_ACCOUNT_CRU_V15.ENABLE_EMAIL_DOMAIN_BY_ID(
17:17:49 778  		  in_id => var_id,
17:17:49 779  		  in_updated_by => in_created_by
17:17:49 780  		  );
17:17:49 781  	  ELSE
17:17:49 782  	      PROCS_GROUP_ACCOUNT_CRU_V15.ADD_EMAIL_DOMAIN(
17:17:49 783  		  in_group_account_id => in_group_account_id,
17:17:49 784  		  in_email_domain => in_email_domain,
17:17:49 785  		      in_is_active => GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT,
17:17:49 786  		  in_created_by => in_created_by
17:17:49 787  	      );
17:17:49 788  	  END IF;
17:17:49 789  
17:17:49 790  EXCEPTION
17:17:49 791  WHEN NOT_GL THEN
17:17:49 792  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
17:17:49 794  WHEN OTHERS THEN
17:17:49 795  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 797  END ADD_EMAIL_DOMAIN;
17:17:49 798  
17:17:49 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
17:17:49 800  	in_group_account_id    IN NUMBER,
17:17:49 801  	in_borrower_account_id IN NUMBER,
17:17:49 802  	in_ip_address	       IN VARCHAR2,
17:17:49 803  	in_email_domain        IN VARCHAR2,
17:17:49 804  	in_created_by	       IN VARCHAR2
17:17:49 805  ) AS
17:17:49 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
17:17:49 807  ga_ttl_in_hours NUMBER := NULL;
17:17:49 808  start_date DATE := NULL;
17:17:49 809  end_date DATE := NULL;
17:17:49 810  BEGIN
17:17:49 811  	start_date := sysdate;
17:17:49 812  	end_date   := GLOBAL_CONSTANTS_V15.MAX_DATE;
17:17:49 813  
17:17:49 814  	BEGIN
17:17:49 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
17:17:49 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
17:17:49 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
17:17:49 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
17:17:49 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
17:17:49 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
17:17:49 821  	EXCEPTION
17:17:49 822  	  WHEN no_data_found THEN
17:17:49 823  	    ga_ttl_in_hours := NULL;
17:17:49 824  	END;
17:17:49 825  
17:17:49 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
17:17:49 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
17:17:49 828  	END IF;
17:17:49 829  
17:17:49 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.CREATE_SUBSCRIPTION_SHARE(
17:17:49 831  	  in_group_account_id => in_group_account_id,
17:17:49 832  	  in_borrower_account_id => in_borrower_account_id,
17:17:49 833  	  in_ip_address => in_ip_address,
17:17:49 834  	  in_email_domain => in_email_domain,
17:17:49 835  	  in_start_date => start_date,
17:17:49 836  	  in_end_date => end_date,
17:17:49 837  	  in_created_by => in_created_by
17:17:49 838  	);
17:17:49 839  END CREATE_SUBSCRIPTION_SHARE;
17:17:49 840  
17:17:49 841  
17:17:49 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
17:17:49 843  	in_group_account_id   IN NUMBER,
17:17:49 844  	out_occupied_seats   OUT NUMBER
17:17:49 845  ) AS
17:17:49 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
17:17:49 847  BEGIN
17:17:49 848  	SELECT
17:17:49 849  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
17:17:49 850  	FROM dual;
17:17:49 851  EXCEPTION
17:17:49 852  WHEN OTHERS THEN
17:17:49 853  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
17:17:49 856  
17:17:49 857  
17:17:49 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
17:17:49 859  	in_group_account_id   IN NUMBER
17:17:49 860  ) RETURN NUMBER IS
17:17:49 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
17:17:49 862  num_seats NUMBER;
17:17:49 863  BEGIN
17:17:49 864  	SELECT
17:17:49 865  	  COUNT(1) INTO num_seats
17:17:49 866  	FROM
17:17:49 867  	  SUBSCRIPTION_SHARE
17:17:49 868  	WHERE
17:17:49 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
17:17:49 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
17:17:49 871  	RETURN num_seats;
17:17:49 872  EXCEPTION
17:17:49 873  WHEN OTHERS THEN
17:17:49 874  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
17:17:49 877  
17:17:49 878  -- *********************************************************************
17:17:49 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
17:17:49 880  -- *********************************************************************
17:17:49 881  -- I'm debating if this should be in a different package, but right now
17:17:49 882  -- I'm too lazy to move this else where.
17:17:49 883  -- *********************************************************************
17:17:49 884  
17:17:49 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
17:17:49 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:49 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:49 888  ) AS
17:17:49 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
17:17:49 890  BEGIN
17:17:49 891  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_IP_RANGES_BY_GA_ID(
17:17:49 892  	    in_group_account_id => in_group_account_id,
17:17:49 893  	    in_updated_by => in_updated_by
17:17:49 894  	  );
17:17:49 895  EXCEPTION
17:17:49 896  WHEN OTHERS THEN
17:17:49 897  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 899  END DISABLE_IP_RANGES_BY_GA_ID;
17:17:49 900  
17:17:49 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
17:17:49 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
17:17:49 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
17:17:49 904  ) AS
17:17:49 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
17:17:49 906  BEGIN
17:17:49 907  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_IP_RANGE_BY_ID(
17:17:49 908  	    in_id => in_id,
17:17:49 909  	    in_updated_by => in_updated_by
17:17:49 910  	  );
17:17:49 911  EXCEPTION
17:17:49 912  WHEN OTHERS THEN
17:17:49 913  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 915  END DISABLE_IP_RANGE_BY_ID;
17:17:49 916  
17:17:49 917  PROCEDURE ADD_IP_RANGE (
17:17:49 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
17:17:49 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
17:17:49 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
17:17:49 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
17:17:49 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
17:17:49 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
17:17:49 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
17:17:49 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
17:17:49 926  ) AS
17:17:49 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
17:17:49 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
17:17:49 929  var_is_dupe NUMBER(1);
17:17:49 930  NOT_GL EXCEPTION;
17:17:49 931  DUPE EXCEPTION;
17:17:49 932  BEGIN
17:17:49 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
17:17:49 934  	  FROM
17:17:49 935  	    GROUP_ACCOUNT,
17:17:49 936  	    SUBSCRIPTION,
17:17:49 937  	    OFFER_CHAIN
17:17:49 938  	  WHERE
17:17:49 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
17:17:49 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
17:17:49 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 942  	  ;
17:17:49 943  	  IF(var_ga_type != 'GL') THEN
17:17:49 944  	    RAISE NOT_GL;
17:17:49 945  	  END IF;
17:17:49 946  
17:17:49 947  	  PROCS_GROUP_ACCOUNT_CRU_V15.ADD_IP_RANGE(
17:17:49 948  	    in_group_account_id => in_group_account_id,
17:17:49 949  	    in_minimum_ip_string => in_minimum_ip_string,
17:17:49 950  	    in_minimum_ip_low => in_minimum_ip_low,
17:17:49 951  	    in_minimum_ip_high => in_minimum_ip_high,
17:17:49 952  	    in_maximum_ip_string => in_maximum_ip_string,
17:17:49 953  	    in_maximum_ip_low => in_maximum_ip_low,
17:17:49 954  	    in_maximum_ip_high => in_maximum_ip_high,
17:17:49 955  	    in_created_by => in_created_by
17:17:49 956  	  );
17:17:49 957  
17:17:49 958  	  -- Check for overlapping ip address range after insert.  Note that if another
17:17:49 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
17:17:49 960  	  SELECT count(1) into var_is_dupe
17:17:49 961  	  FROM
17:17:49 962  	    GROUP_ACCOUNT_IP_RANGE
17:17:49 963  	  WHERE
17:17:49 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE AND
17:17:49 965  		((
17:17:49 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
17:17:49 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
17:17:49 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
17:17:49 969  		) OR
17:17:49 970  
17:17:49 971  		(
17:17:49 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
17:17:49 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
17:17:49 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
17:17:49 975  		)) AND
17:17:49 976  	    ROWNUM < 3;
17:17:49 977  
17:17:49 978  	  If(var_is_dupe > 1) THEN
17:17:49 979  	    RAISE DUPE;
17:17:49 980  	  END IF;
17:17:49 981  EXCEPTION
17:17:49 982  WHEN NOT_GL THEN
17:17:49 983  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
17:17:49 985  WHEN DUPE THEN
17:17:49 986  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
17:17:49 988  WHEN OTHERS THEN
17:17:49 989  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 991  END ADD_IP_RANGE;
17:17:49 992  
17:17:49 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
17:17:49 994  	in_group_account_id IN NUMBER,
17:17:49 995  	out_group_id OUT NUMBER
17:17:49 996  ) AS
17:17:49 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
17:17:49 998  BEGIN
17:17:49 999  	SELECT
17:17:49 1000  	   a.group_id into out_group_id
17:17:49 1001  	 FROM
17:17:49 1002  	   account a,
17:17:49 1003  	   subscription s,
17:17:49 1004  	   group_account ga
17:17:49 1005  	 WHERE
17:17:49 1006  	   a.id = s.account_id and
17:17:49 1007  	   s.id = ga.subscription_id and
17:17:49 1008  	   ga.id = in_group_account_id and
17:17:49 1009  	   rownum < 2
17:17:49 1010  	 ;
17:17:49 1011  EXCEPTION
17:17:49 1012  WHEN NO_DATA_FOUND THEN
17:17:49 1013  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1014  	   SPROC_NAME, 'Bad group_account_id');
17:17:49 1015  WHEN OTHERS THEN
17:17:49 1016  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
17:17:49 1019  
17:17:49 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
17:17:49 1021  	 in_group_account_ip_range_id IN NUMBER,
17:17:49 1022  	 out_group_id OUT NUMBER
17:17:49 1023  ) AS
17:17:49 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
17:17:49 1025  BEGIN
17:17:49 1026  	 SELECT
17:17:49 1027  	   a.group_id into out_group_id
17:17:49 1028  	 FROM
17:17:49 1029  	   account a,
17:17:49 1030  	   subscription s,
17:17:49 1031  	   group_account ga,
17:17:49 1032  	   group_account_ip_range ir
17:17:49 1033  	 WHERE
17:17:49 1034  	   a.id = s.account_id and
17:17:49 1035  	   s.id = ga.subscription_id and
17:17:49 1036  	   ga.id = ir.group_account_id and
17:17:49 1037  	   ir.id = in_group_account_ip_range_id and
17:17:49 1038  	   rownum < 2
17:17:49 1039  	 ;
17:17:49 1040  EXCEPTION
17:17:49 1041  WHEN NO_DATA_FOUND THEN
17:17:49 1042  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
17:17:49 1044  WHEN OTHERS THEN
17:17:49 1045  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
17:17:49 1048  
17:17:49 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
17:17:49 1050  	 in_group_account_email_dom_id IN NUMBER,
17:17:49 1051  	 out_group_id OUT NUMBER
17:17:49 1052  ) AS
17:17:49 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
17:17:49 1054  BEGIN
17:17:49 1055  	 SELECT
17:17:49 1056  	   a.group_id into out_group_id
17:17:49 1057  	 FROM
17:17:49 1058  	   account a,
17:17:49 1059  	   subscription s,
17:17:49 1060  	   group_account ga,
17:17:49 1061  	   group_account_email_domain ir
17:17:49 1062  	 WHERE
17:17:49 1063  	   a.id = s.account_id and
17:17:49 1064  	   s.id = ga.subscription_id and
17:17:49 1065  	   ga.id = ir.group_account_id and
17:17:49 1066  	   ir.id = in_group_account_email_dom_id and
17:17:49 1067  	   rownum < 2
17:17:49 1068  	 ;
17:17:49 1069  EXCEPTION
17:17:49 1070  WHEN NO_DATA_FOUND THEN
17:17:49 1071  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
17:17:49 1073  WHEN OTHERS THEN
17:17:49 1074  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
17:17:49 1077  
17:17:49 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
17:17:49 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
17:17:49 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
17:17:49 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
17:17:49 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
17:17:49 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
17:17:49 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
17:17:49 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:49 1086  ) AS
17:17:49 1087  BEGIN
17:17:49 1088  	 PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_GROUP_ACCOUNT(
17:17:49 1089  	   in_group_account_id => in_group_account_id,
17:17:49 1090  	   in_group_name => in_group_name,
17:17:49 1091  	   in_first_name => in_first_name,
17:17:49 1092  	   in_last_name => in_last_name,
17:17:49 1093  	   in_email => in_email,
17:17:49 1094  	   in_phone => in_phone,
17:17:49 1095  	   in_updated_by => in_updated_by
17:17:49 1096  	 );
17:17:49 1097  END UPDATE_GROUP_ACCOUNT;
17:17:49 1098  
17:17:49 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
17:17:49 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
17:17:49 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
17:17:49 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
17:17:49 1103  ) AS
17:17:49 1104  BEGIN
17:17:49 1105  	 PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_GROUP_ACCOUNT_SEATS(
17:17:49 1106  	   in_group_account_id => in_group_account_id,
17:17:49 1107  	   in_seats => in_seats,
17:17:49 1108  	   in_updated_by => in_updated_by
17:17:49 1109  	 );
17:17:49 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
17:17:49 1111  
17:17:49 1112  END PROCS_GROUP_ACCOUNT_V15;
17:17:49 1113  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.08
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V15" AS
17:17:49   2  
17:17:49   3  PROCEDURE TEST_CLEAR_ALL IS
17:17:49   4  BEGIN
17:17:49   5  	DELETE FROM TAX_ADJUSTMENT;
17:17:49   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
17:17:49   7  	DELETE FROM INVOICE_ADJUSTMENT;
17:17:49   8  	DELETE FROM LICENSE;
17:17:49   9  	DELETE FROM OFFER_OFFER_CHAIN;
17:17:49  10  	delete from offer_product_offering;
17:17:49  11  	delete from tax;
17:17:49  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
17:17:49  13  	delete from discount_line_item; -- ?
17:17:49  14  	delete from discount; -- ?
17:17:49  15  	DELETE FROM LINE_ITEM;
17:17:49  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
17:17:49  17  	DELETE FROM PRODUCT_OFFERING;
17:17:49  18  	DELETE FROM PRODUCT;
17:17:49  19  	DELETE FROM INVOICE_NOTE;
17:17:49  20  	DELETE FROM GIFT_CERTIFICATE;
17:17:49  21  	DELETE FROM OFFER;
17:17:49  22  	DELETE FROM OFFER_CHAIN_META_DATA;
17:17:49  23  	DELETE FROM SUBSCRIPTION_NOTE;
17:17:49  24  	DELETE FROM SUBSCRIPTION_META_DATA;
17:17:49  25  	DELETE FROM SUBSCRIPTION;
17:17:49  26  	DELETE FROM CREDIT_CARD;
17:17:49  27  	DELETE FROM FLAGGED_ACCOUNTS;
17:17:49  28  	DELETE FROM ACCOUNT_NOTE;
17:17:49  29  	DELETE FROM ACCOUNT_LOCK;
17:17:49  30  	DELETE FROM ACCOUNT;
17:17:49  31  	DELETE FROM CHARGE;
17:17:49  32  	DELETE FROM TRANSACTION_ATTEMPT;
17:17:49  33  	DELETE FROM CHARGEBACK;
17:17:49  34  	DELETE FROM TRANSACTION;
17:17:49  35  	DELETE FROM INVOICE_NOTE;
17:17:49  36  	DELETE FROM INVOICE;
17:17:49  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
17:17:49  38  	DELETE FROM OFFER_CHAIN;
17:17:49  39  END TEST_CLEAR_ALL;
17:17:49  40  
17:17:49  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
17:17:49  42  BEGIN
17:17:49  43  	DELETE FROM OFFER_OFFER_CHAIN;
17:17:49  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
17:17:49  45  	DELETE FROM TAX;
17:17:49  46  	DELETE FROM PRODUCT_OFFERING;
17:17:49  47  	DELETE FROM PRODUCT;
17:17:49  48  	DELETE FROM OFFER;
17:17:49  49  	DELETE FROM OFFER_CHAIN_META_DATA;
17:17:49  50  	DELETE FROM OFFER_CHAIN;
17:17:49  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
17:17:49  52  END;
17:17:49  53  
17:17:49  54  /******************************************/
17:17:49  55  
17:17:49  56  PROCEDURE TEST_GET_ACCOUNT (
17:17:49  57  	in_group_id	IN NUMBER,
17:17:49  58  	out_result_set	OUT SYS_REFCURSOR
17:17:49  59  ) AS
17:17:49  60  BEGIN
17:17:49  61  
17:17:49  62  	OPEN out_result_set FOR
17:17:49  63  	SELECT *
17:17:49  64  	FROM
17:17:49  65  	  ACCOUNT
17:17:49  66  	WHERE
17:17:49  67  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49  68  
17:17:49  69  END TEST_GET_ACCOUNT;
17:17:49  70  
17:17:49  71  /*******************************************/
17:17:49  72  
17:17:49  73  PROCEDURE TEST_GET_SUBSCRIPTION (
17:17:49  74  	in_subscription_id IN NUMBER,
17:17:49  75  	out_result_set	   OUT SYS_REFCURSOR
17:17:49  76  ) AS
17:17:49  77  BEGIN
17:17:49  78  	OPEN out_result_set FOR
17:17:49  79  	SELECT *
17:17:49  80  	FROM
17:17:49  81  	  SUBSCRIPTION
17:17:49  82  	WHERE
17:17:49  83  	  SUBSCRIPTION.ID = in_subscription_id;
17:17:49  84  
17:17:49  85  END TEST_GET_SUBSCRIPTION;
17:17:49  86  
17:17:49  87  /***************************************************/
17:17:49  88  
17:17:49  89  PROCEDURE TEST_DELETE_INVOICE (
17:17:49  90  	in_invoice_id IN NUMBER
17:17:49  91  ) AS
17:17:49  92  var_line_item_id_set SYS_REFCURSOR;
17:17:49  93  var_line_item_id	   NUMBER;
17:17:49  94  
17:17:49  95  var_charge_id_set  SYS_REFCURSOR;
17:17:49  96  var_charge_id	 NUMBER;
17:17:49  97  var_transaction_id NUMBER;
17:17:49  98  BEGIN
17:17:49  99  	-- GET ACCOUNT'S LINE_ITEMS
17:17:49 100  	OPEN var_line_item_id_set FOR
17:17:49 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
17:17:49 102  	LOOP
17:17:49 103  	  FETCH var_line_item_id_set into var_line_item_id;
17:17:49 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
17:17:49 105  
17:17:49 106  	  -- DELETE ADJUSTMENTS
17:17:49 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
17:17:49 108  	  LOOP
17:17:49 109  
17:17:49 110  	    -- DELETE DISCOUNT ADJUSTMENTS
17:17:49 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
17:17:49 112  
17:17:49 113  	    -- DELETE TAX ADJUSTMENTS
17:17:49 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
17:17:49 115  	  END LOOP;
17:17:49 116  
17:17:49 117  	  -- DELETE LINE ITEM ADJUSTMENTS
17:17:49 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
17:17:49 119  
17:17:49 120  	  -- DELETE DISCOUNT_LINE_ITEM
17:17:49 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
17:17:49 122  
17:17:49 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
17:17:49 124  
17:17:49 125  	  -- DELETE LINE ITEM
17:17:49 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
17:17:49 127  
17:17:49 128  	END LOOP;
17:17:49 129  
17:17:49 130  	-- DELETE INVOICE ADJUSTMENTS
17:17:49 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
17:17:49 132  
17:17:49 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
17:17:49 134  	OPEN var_charge_id_set FOR
17:17:49 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
17:17:49 136  	LOOP
17:17:49 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
17:17:49 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
17:17:49 139  	  -- DELETE CHARGEBACK
17:17:49 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
17:17:49 141  
17:17:49 142  	  -- DELETE TRANSACTION ATTEMP
17:17:49 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
17:17:49 144  
17:17:49 145  	  -- DELETE CHARGE
17:17:49 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
17:17:49 147  
17:17:49 148  	  -- DELETE TRANSACTION
17:17:49 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
17:17:49 150  	END LOOP;
17:17:49 151  
17:17:49 152  	-- DELETE INVOICE NOTES
17:17:49 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
17:17:49 154  
17:17:49 155  	-- DELETE INVOICE
17:17:49 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
17:17:49 157  END;
17:17:49 158  
17:17:49 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
17:17:49 160  	in_group_id IN NUMBER
17:17:49 161  ) AS
17:17:49 162  -- VARIABLES
17:17:49 163  var_account_id NUMBER;
17:17:49 164  
17:17:49 165  -- CURSORS
17:17:49 166  var_subscription_id_set SYS_REFCURSOR;
17:17:49 167  var_subscription_id     NUMBER;
17:17:49 168  
17:17:49 169  var_license_id_set SYS_REFCURSOR;
17:17:49 170  var_license_id	 NUMBER;
17:17:49 171  var_invoice_id	 NUMBER;
17:17:49 172  
17:17:49 173  var_gift_certificate_id_set SYS_REFCURSOR;
17:17:49 174  var_gift_certificate_id	  NUMBER;
17:17:49 175  var_gc_purchase_invoice_id  NUMBER;
17:17:49 176  BEGIN
17:17:49 177  
17:17:49 178   /*FOR f_account in (
17:17:49 179  	  select id from account where group_id = in_group_id
17:17:49 180  	)
17:17:49 181  	loop
17:17:49 182  
17:17:49 183  	  -- delete account
17:17:49 184  	  delete from account where id = f_account.id;
17:17:49 185  
17:17:49 186  	end loop;*/
17:17:49 187  
17:17:49 188  	BEGIN
17:17:49 189  	  SELECT
17:17:49 190  	    ACCOUNT.ID into var_account_id
17:17:49 191  	  FROM
17:17:49 192  	    ACCOUNT
17:17:49 193  	  WHERE
17:17:49 194  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 195  	  EXCEPTION
17:17:49 196  	    WHEN NO_DATA_FOUND THEN
17:17:49 197  	      -- Nothing to do
17:17:49 198  	      RETURN;
17:17:49 199  	END;
17:17:49 200  
17:17:49 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
17:17:49 202  	OPEN var_subscription_id_set FOR
17:17:49 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
17:17:49 204  	LOOP
17:17:49 205  	  FETCH var_subscription_id_set into var_subscription_id;
17:17:49 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
17:17:49 207  
17:17:49 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
17:17:49 209  	  OPEN var_license_id_set FOR
17:17:49 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
17:17:49 211  	  LOOP
17:17:49 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
17:17:49 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
17:17:49 214  
17:17:49 215  
17:17:49 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
17:17:49 217  	    OPEN var_gift_certificate_id_set FOR
17:17:49 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
17:17:49 219  	    LOOP
17:17:49 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
17:17:49 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
17:17:49 222  
17:17:49 223  	      -- DELETE GIFT_CERTIFICATE
17:17:49 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
17:17:49 225  
17:17:49 226  	      -- DELETE LICENSE
17:17:49 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
17:17:49 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
17:17:49 229  	      END IF;
17:17:49 230  
17:17:49 231  	    END LOOP;
17:17:49 232  
17:17:49 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
17:17:49 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
17:17:49 235  
17:17:49 236  	    -- DELETE LICENSE
17:17:49 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
17:17:49 238  
17:17:49 239  	    -- DELETE INVOICE
17:17:49 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
17:17:49 241  	      TEST_DELETE_INVOICE(var_invoice_id);
17:17:49 242  	    END IF;
17:17:49 243  	  END LOOP;
17:17:49 244  
17:17:49 245  	  -- DELETE SUBSCRIPTION_NOTE
17:17:49 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
17:17:49 247  
17:17:49 248  	  -- DELETE SUBSCRIPTION META_DATA
17:17:49 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
17:17:49 250  
17:17:49 251  	  -- DELETE SUBSCRIPTION
17:17:49 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
17:17:49 253  	END LOOP;
17:17:49 254  
17:17:49 255  	-- DELETE CREDIT_CARDS
17:17:49 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
17:17:49 257  
17:17:49 258  	-- DELETE PAYPAL
17:17:49 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
17:17:49 260  
17:17:49 261  	-- DELETE FLAGS
17:17:49 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
17:17:49 263  
17:17:49 264  	-- DELETE ACCOUNT NOTES
17:17:49 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
17:17:49 266  
17:17:49 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
17:17:49 268  	OPEN var_gift_certificate_id_set FOR
17:17:49 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
17:17:49 270  	LOOP
17:17:49 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
17:17:49 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
17:17:49 273  
17:17:49 274  	  -- DELETE GIFT CERTIFICATE
17:17:49 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
17:17:49 276  
17:17:49 277  	  -- DELETE INVOICE
17:17:49 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
17:17:49 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
17:17:49 280  	  END IF;
17:17:49 281  	END LOOP;
17:17:49 282  
17:17:49 283  	-- DELETE LOCKS
17:17:49 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
17:17:49 285  
17:17:49 286  	-- DELETE ACCOUNT
17:17:49 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
17:17:49 288  
17:17:49 289  END TEST_DELETE_USER_ACCOUNT;
17:17:49 290  
17:17:49 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
17:17:49 292  	in_start_group_id IN NUMBER,
17:17:49 293  	in_end_group_id   IN NUMBER
17:17:49 294  ) IS
17:17:49 295   gid ACCOUNT.GROUP_ID%TYPE;
17:17:49 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
17:17:49 297  BEGIN
17:17:49 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
17:17:49 299  	/*
17:17:49 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
17:17:49 301  	LOOP
17:17:49 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
17:17:49 303  	END LOOP;*/
17:17:49 304  	OPEN c(in_start_group_id, in_end_group_id);
17:17:49 305  	WHILE c%ISOPEN LOOP
17:17:49 306  	  FETCH c INTO gid;
17:17:49 307  	  IF c%NOTFOUND THEN
17:17:49 308  	   CLOSE c;
17:17:49 309  	  END IF;
17:17:49 310  	  TEST_DELETE_USER_ACCOUNT(gid);
17:17:49 311  	END LOOP;
17:17:49 312  END;
17:17:49 313  
17:17:49 314  /**********************************************************/
17:17:49 315  
17:17:49 316  FUNCTION TEST_IS_INVOICE_EXISTS(
17:17:49 317  /*
17:17:49 318  1 - exists
17:17:49 319  0 - not exists
17:17:49 320  */
17:17:49 321  	in_invoice_id IN NUMBER
17:17:49 322  ) RETURN NUMBER AS
17:17:49 323  var_invoice_count NUMBER;
17:17:49 324  BEGIN
17:17:49 325  	SELECT
17:17:49 326  	  COUNT(*) into var_invoice_count
17:17:49 327  	FROM
17:17:49 328  	  INVOICE
17:17:49 329  	WHERE
17:17:49 330  	  INVOICE.ID = in_invoice_id;
17:17:49 331  	IF var_invoice_count = 0 THEN
17:17:49 332  	  RETURN 0;
17:17:49 333  	ELSE
17:17:49 334  	  RETURN 1;
17:17:49 335  	END IF;
17:17:49 336  END;
17:17:49 337  
17:17:49 338  PROCEDURE TEST_GET_INVOICE_INFO (
17:17:49 339  	in_invoice_id  IN NUMBER,
17:17:49 340  	out_result_set OUT SYS_REFCURSOR
17:17:49 341  ) AS
17:17:49 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
17:17:49 343  BEGIN
17:17:49 344  
17:17:49 345  	 OPEN out_result_set FOR SELECT
17:17:49 346  	    in_invoice_id AS "INVOICE_ID",
17:17:49 347  	    INVOICE.INVOICE_STATUS_ID,
17:17:49 348  	    PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
17:17:49 349  	    CHARGE.ID AS "CHARGE_ID",
17:17:49 350  	    CHARGE.CHARGE_AMOUNT,
17:17:49 351  	    CHARGE.TRANSACTION_ID,
17:17:49 352  	    TRANSACTION.TRANSACTION_STATUS_ID
17:17:49 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
17:17:49 354  
17:17:49 355  END TEST_GET_INVOICE_INFO;
17:17:49 356  
17:17:49 357  /******************************************************************************/
17:17:49 358  
17:17:49 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
17:17:49 360  	in_offer_chain_id in number
17:17:49 361  ) as
17:17:49 362  begin
17:17:49 363  
17:17:49 364  	for v_offer_chain in (
17:17:49 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
17:17:49 366  	)
17:17:49 367  	loop
17:17:49 368  
17:17:49 369  	  for v_offer in (
17:17:49 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
17:17:49 371  	  )
17:17:49 372  	  loop
17:17:49 373  
17:17:49 374  	    for v_product_offering in (
17:17:49 375  	      select
17:17:49 376  		product_offering.id,
17:17:49 377  		product_offering.product_id
17:17:49 378  	      from
17:17:49 379  		offer_product_offering
17:17:49 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
17:17:49 381  	      where offer_product_offering.offer_id = v_offer.id
17:17:49 382  	    )
17:17:49 383  	    loop
17:17:49 384  
17:17:49 385  	      -- delete product eligibility
17:17:49 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
17:17:49 387  
17:17:49 388  	      -- delete meta data
17:17:49 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
17:17:49 390  
17:17:49 391  	      -- delete product
17:17:49 392  	      delete from product where id = v_product_offering.product_id;
17:17:49 393  
17:17:49 394  	      -- delete product_offering
17:17:49 395  	      delete from product_offering where id = v_product_offering.id;
17:17:49 396  
17:17:49 397  	    end loop;
17:17:49 398  
17:17:49 399  	    -- delete data from offer_product_offering table
17:17:49 400  	    delete from offer_product_offering where offer_id = v_offer.id;
17:17:49 401  
17:17:49 402  	    -- delete data from offer_offer_chain table
17:17:49 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
17:17:49 404  
17:17:49 405  	    -- delete offer
17:17:49 406  	    delete from offer where id = v_offer.id;
17:17:49 407  
17:17:49 408  	  end loop;
17:17:49 409  
17:17:49 410  	  -- delete offer_chain_eligibility
17:17:49 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
17:17:49 412  
17:17:49 413  	  -- delete metadata
17:17:49 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
17:17:49 415  
17:17:49 416  	  -- delete offer chain
17:17:49 417  	  delete from offer_chain where id = v_offer_chain.id;
17:17:49 418  
17:17:49 419  	end loop;
17:17:49 420  
17:17:49 421  end;
17:17:49 422  
17:17:49 423  END PROCS_TEST_V15;
17:17:49 424  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.06
17:17:49 SQL> 
17:17:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V15" AS
17:17:49   2  
17:17:49   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
17:17:49   4  
17:17:49   5  PROCEDURE ANNOTATE_ACCOUNT (
17:17:49   6  /*
17:17:49   7  Throws exceptions:
17:17:49   8  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49   9  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49  10  */
17:17:49  11  	in_group_id   IN  NUMBER,
17:17:49  12  	in_agent_id   IN  NUMBER,
17:17:49  13  	in_note       IN  VARCHAR2,
17:17:49  14  	in_created_by IN  VARCHAR2
17:17:49  15  ) AS
17:17:49  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
17:17:49  17  -- VARIABLES
17:17:49  18  var_account_id	  NUMBER;
17:17:49  19  var_account_note_id NUMBER;
17:17:49  20  -- EXCEPTIONS
17:17:49  21  BAD_ACCOUNT_ID EXCEPTION;
17:17:49  22  BEGIN
17:17:49  23  
17:17:49  24  	-- Get account id
17:17:49  25  	BEGIN
17:17:49  26  	  SELECT
17:17:49  27  	    ACCOUNT.ID into var_account_id
17:17:49  28  	  FROM
17:17:49  29  	    ACCOUNT
17:17:49  30  	  WHERE
17:17:49  31  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49  32  	  EXCEPTION
17:17:49  33  	    WHEN NO_DATA_FOUND THEN
17:17:49  34  	      RAISE BAD_ACCOUNT_ID;
17:17:49  35  	END;
17:17:49  36  
17:17:49  37  	-- Insert new row into ACCOUNT_NOTE table
17:17:49  38  	PROCS_ACCOUNT_CRU_V15.CREATE_ACCOUNT_NOTE(
17:17:49  39  	  inout_account_note_id => var_account_note_id,
17:17:49  40  	  in_agent_id		=> in_agent_id,
17:17:49  41  	  in_account_id 	=> var_account_id,
17:17:49  42  	  in_note		=> in_note,
17:17:49  43  	  in_created_by 	=> in_created_by
17:17:49  44  	);
17:17:49  45  
17:17:49  46  EXCEPTION
17:17:49  47  WHEN BAD_ACCOUNT_ID THEN
17:17:49  48  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49  49  	  SPROC_NAME, 'No such group id');
17:17:49  50  WHEN OTHERS THEN
17:17:49  51  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49  53  END ANNOTATE_ACCOUNT;
17:17:49  54  
17:17:49  55  /******************************************************************************/
17:17:49  56  
17:17:49  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
17:17:49  58  /*
17:17:49  59  Throws exceptions:
17:17:49  60  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49  61  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49  62  */
17:17:49  63  	in_group_id IN	NUMBER,
17:17:49  64  	out_exists  OUT NUMBER
17:17:49  65  ) AS
17:17:49  66  -- VARIABLES
17:17:49  67  var_found_id  NUMBER;
17:17:49  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
17:17:49  69  BEGIN
17:17:49  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
17:17:49  71  	out_exists := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49  72  EXCEPTION
17:17:49  73  WHEN NO_DATA_FOUND THEN
17:17:49  74  	out_exists := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49  75  WHEN OTHERS THEN
17:17:49  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49  78  END ASSERT_ACCOUNT_EXISTS;
17:17:49  79  
17:17:49  80  /******************************************************************************/
17:17:49  81  
17:17:49  82  PROCEDURE DISABLE_ACCOUNT (
17:17:49  83  /*
17:17:49  84  Throws exceptions:
17:17:49  85  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49  87  */
17:17:49  88  	in_group_id   IN NUMBER,
17:17:49  89  	in_updated_by IN VARCHAR2,
17:17:49  90  	in_note       IN VARCHAR2,
17:17:49  91  	in_agent_id   IN NUMBER
17:17:49  92  ) AS
17:17:49  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
17:17:49  94  var_account_id	      NUMBER;
17:17:49  95  current_account_status  NUMBER;
17:17:49  96  
17:17:49  97  var_active_subscriptions_num NUMBER;
17:17:49  98  var_pending_invoices_num	   NUMBER;
17:17:49  99  
17:17:49 100  -- EXCEPTIONS
17:17:49 101  BAD_ACOUNT_ID		EXCEPTION;
17:17:49 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
17:17:49 103  PENDING_INVOICES_FOUND	EXCEPTION;
17:17:49 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
17:17:49 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
17:17:49 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
17:17:49 107  BEGIN
17:17:49 108  
17:17:49 109  	-- Get account's status and id
17:17:49 110  	BEGIN
17:17:49 111  	  SELECT
17:17:49 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
17:17:49 113  	    ACCOUNT.ID
17:17:49 114  	  INTO
17:17:49 115  	    current_account_status,
17:17:49 116  	    var_account_id
17:17:49 117  	  FROM ACCOUNT
17:17:49 118  	  WHERE
17:17:49 119  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 120  	  EXCEPTION
17:17:49 121  	    WHEN NO_DATA_FOUND THEN
17:17:49 122  	      RAISE BAD_ACOUNT_ID;
17:17:49 123  	END;
17:17:49 124  
17:17:49 125  	-- For now, we can disable account whenever
17:17:49 126  	IF current_account_status = GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
17:17:49 127  	  RAISE BAD_CURRENT_ACC_STATUS;
17:17:49 128  	END IF;
17:17:49 129  
17:17:49 130  	-- Checks for out outstanding balances
17:17:49 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
17:17:49 132  	SELECT
17:17:49 133  	  COUNT(*) into var_pending_invoices_num
17:17:49 134  	FROM
17:17:49 135  	  LICENSE
17:17:49 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 138  	WHERE
17:17:49 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.INVOICE_OPEN FROM DUAL );
17:17:49 141  
17:17:49 142  	IF var_pending_invoices_num > 0 THEN
17:17:49 143  	  RAISE PENDING_INVOICES_FOUND;
17:17:49 144  	END IF;
17:17:49 145  
17:17:49 146  	SELECT
17:17:49 147  	  COUNT(*) into var_active_subscriptions_num
17:17:49 148  	FROM
17:17:49 149  	  SUBSCRIPTION
17:17:49 150  	WHERE
17:17:49 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 152  	  AND (
17:17:49 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 155  	  );
17:17:49 156  
17:17:49 157  	IF var_active_subscriptions_num > 0 THEN
17:17:49 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
17:17:49 159  	END IF;
17:17:49 160  
17:17:49 161  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
17:17:49 162  	  in_account_id        => var_account_id,
17:17:49 163  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_DISABLED,
17:17:49 164  	  in_updated_by        => in_updated_by
17:17:49 165  	);
17:17:49 166  
17:17:49 167  	-- Annotate account
17:17:49 168  	IF in_note IS NOT NULL THEN
17:17:49 169  	  BEGIN
17:17:49 170  	    PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
17:17:49 171  	      in_group_id   => in_group_id,
17:17:49 172  	      in_agent_id   => in_agent_id,
17:17:49 173  	      in_note	    => in_note,
17:17:49 174  	      in_created_by => in_updated_by
17:17:49 175  	    );
17:17:49 176  	    EXCEPTION
17:17:49 177  	      WHEN OTHERS THEN
17:17:49 178  		EXCEPTION_MESSAGE := SQLERRM;
17:17:49 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
17:17:49 180  	  END;
17:17:49 181  	END IF;
17:17:49 182  
17:17:49 183  EXCEPTION
17:17:49 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
17:17:49 185  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
17:17:49 187  WHEN BAD_CURRENT_ACC_STATUS THEN
17:17:49 188  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
17:17:49 190  WHEN PENDING_INVOICES_FOUND THEN
17:17:49 191  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
17:17:49 193  WHEN BAD_ACOUNT_ID THEN
17:17:49 194  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 195  	  SPROC_NAME, 'No such account');
17:17:49 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
17:17:49 197  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
17:17:49 199  WHEN OTHERS THEN
17:17:49 200  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 202  END DISABLE_ACCOUNT;
17:17:49 203  
17:17:49 204  /******************************************************************************/
17:17:49 205  
17:17:49 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
17:17:49 207  /*
17:17:49 208  Throws exceptions:
17:17:49 209  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 210  APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR
17:17:49 211  */
17:17:49 212  	  in_created_by IN VARCHAR2,
17:17:49 213  	  in_group_id	IN NUMBER
17:17:49 214  ) AS
17:17:49 215  -- VARIABLES
17:17:49 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
17:17:49 217  new_account_id  NUMBER;
17:17:49 218  temp_group_id   NUMBER;
17:17:49 219  -- EXCEPTIONS
17:17:49 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
17:17:49 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 222  BEGIN
17:17:49 223  	-- Check if account already exists
17:17:49 224  	BEGIN
17:17:49 225  	  SELECT
17:17:49 226  	    ACCOUNT.GROUP_ID into temp_group_id
17:17:49 227  	  FROM
17:17:49 228  	    ACCOUNT
17:17:49 229  	  WHERE
17:17:49 230  	    ACCOUNT.GROUP_ID = in_group_id
17:17:49 231  	    AND ROWNUM <= 1;
17:17:49 232  
17:17:49 233  	  IF SQL%ROWCOUNT = 1 THEN
17:17:49 234  	    RAISE GROUP_EXISTS_EXCEPTION;
17:17:49 235  	  END IF;
17:17:49 236  
17:17:49 237  	  EXCEPTION
17:17:49 238  	    WHEN NO_DATA_FOUND THEN
17:17:49 239  	      NULL;
17:17:49 240  	END;
17:17:49 241  
17:17:49 242  	-- Insert new row into ACCOUNT table
17:17:49 243  	PROCS_ACCOUNT_CRU_V15.CREATE_ACCOUNT(
17:17:49 244  	  out_account_id	=> new_account_id,
17:17:49 245  	  in_account_status_id	=> GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE,
17:17:49 246  	  in_group_id		=> in_group_id,
17:17:49 247  	  in_created_by 	=> in_created_by,
17:17:49 248  	  in_system_category_id => GLOBAL_ENUMS_V15.SYSTEM_CATEGORY_LIVE
17:17:49 249  	);
17:17:49 250  
17:17:49 251  EXCEPTION
17:17:49 252  WHEN GROUP_EXISTS_EXCEPTION THEN
17:17:49 253  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
17:17:49 254  	  SPROC_NAME, 'Group already exists');
17:17:49 255  WHEN OTHERS THEN
17:17:49 256  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 258  END CREATE_ACTIVE_ACCOUNT;
17:17:49 259  
17:17:49 260  /******************************************************************************/
17:17:49 261  
17:17:49 262  PROCEDURE REACTIVATE_ACCOUNT (
17:17:49 263  /*
17:17:49 264  Throws exceptions:
17:17:49 265  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 266  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 267  */
17:17:49 268  	in_group_id   IN NUMBER,
17:17:49 269  	in_updated_by IN VARCHAR2,
17:17:49 270  	in_note       IN VARCHAR2,
17:17:49 271  	in_agent_id   IN NUMBER
17:17:49 272  ) AS
17:17:49 273  -- VARIABLES
17:17:49 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
17:17:49 275  var_account_id	      NUMBER;
17:17:49 276  current_account_status  NUMBER;
17:17:49 277  
17:17:49 278  -- EXCEPTIONS
17:17:49 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
17:17:49 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
17:17:49 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 282  BEGIN
17:17:49 283  	-- Get account id, status
17:17:49 284  	SELECT
17:17:49 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
17:17:49 286  	  ACCOUNT.ID
17:17:49 287  	INTO
17:17:49 288  	  current_account_status,
17:17:49 289  	  var_account_id
17:17:49 290  	FROM ACCOUNT
17:17:49 291  	WHERE
17:17:49 292  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 293  
17:17:49 294  	IF current_account_status != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
17:17:49 295  	  RAISE BAD_CURRENT_ACC_STATUS;
17:17:49 296  	END IF;
17:17:49 297  
17:17:49 298  	-- Change account status
17:17:49 299  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
17:17:49 300  	  in_account_id        => var_account_id,
17:17:49 301  	  in_updated_by        => in_updated_by,
17:17:49 302  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
17:17:49 303  	);
17:17:49 304  
17:17:49 305  	-- Add note
17:17:49 306  	BEGIN
17:17:49 307  	  PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
17:17:49 308  	    in_group_id   => in_group_id,
17:17:49 309  	    in_agent_id   => in_agent_id,
17:17:49 310  	    in_note	  => in_note,
17:17:49 311  	    in_created_by => in_updated_by
17:17:49 312  	  );
17:17:49 313  	  EXCEPTION
17:17:49 314  	    WHEN OTHERS THEN
17:17:49 315  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 316  	      RAISE CAN_NOT_CREATE_NOTE;
17:17:49 317  	END;
17:17:49 318  
17:17:49 319  EXCEPTION
17:17:49 320  WHEN BAD_CURRENT_ACC_STATUS THEN
17:17:49 321  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 322  	  SPROC_NAME, 'Current account status is not "frozen"');
17:17:49 323  WHEN NO_DATA_FOUND THEN
17:17:49 324  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 325  	  SPROC_NAME, 'Could not find account with given group ID');
17:17:49 326  WHEN CAN_NOT_CREATE_NOTE THEN
17:17:49 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 328  	  SPROC_NAME, 'Could not annotate account');
17:17:49 329  WHEN OTHERS THEN
17:17:49 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 332  END REACTIVATE_ACCOUNT;
17:17:49 333  
17:17:49 334  /******************************************************************************/
17:17:49 335  
17:17:49 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
17:17:49 337  /*
17:17:49 338  IN:
17:17:49 339  instr_status:
17:17:49 340  1 - get active instruments only (default)
17:17:49 341  0 - get inactive instruments only
17:17:49 342  
17:17:49 343  Throws exceptions:
17:17:49 344  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 345  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 346  */
17:17:49 347  	in_group_id	  IN NUMBER,
17:17:49 348  	out_result_cc_set OUT SYS_REFCURSOR,
17:17:49 349  	out_default_id	  OUT NUMBER,
17:17:49 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
17:17:49 351  ) AS
17:17:49 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
17:17:49 353  var_account_id		 NUMBER;
17:17:49 354  var_def_instrument_type_id NUMBER;
17:17:49 355  var_def_instrument_id	 NUMBER;
17:17:49 356  temp_cc_status_id 	 NUMBER;
17:17:49 357  
17:17:49 358  -- Exceptions
17:17:49 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
17:17:49 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
17:17:49 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
17:17:49 362  BEGIN
17:17:49 363  
17:17:49 364  	-- Get group id
17:17:49 365  	SELECT
17:17:49 366  	  ACCOUNT.ID INTO var_account_id
17:17:49 367  	FROM
17:17:49 368  	  ACCOUNT
17:17:49 369  	WHERE
17:17:49 370  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 371  
17:17:49 372  	-- Check that incoming parameter is correct
17:17:49 373  	BEGIN
17:17:49 374  	  SELECT
17:17:49 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
17:17:49 376  	  FROM
17:17:49 377  	    CREDIT_CARD_STATUS
17:17:49 378  	  WHERE
17:17:49 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
17:17:49 380  	  EXCEPTION
17:17:49 381  	    WHEN NO_DATA_FOUND THEN
17:17:49 382  	      RAISE WRONG_INSTR_EXCEPTION;
17:17:49 383  	END;
17:17:49 384  
17:17:49 385  	-- Select all crdit cards for given account
17:17:49 386  	OPEN out_result_cc_set FOR
17:17:49 387  	SELECT
17:17:49 388  	  CREDIT_CARD.ID,
17:17:49 389  	  CREDIT_CARD.ACCOUNT_ID,
17:17:49 390  	  CREDIT_CARD.INSTRUMENT_NAME,
17:17:49 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
17:17:49 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
17:17:49 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
17:17:49 394  	  CREDIT_CARD.STATE,
17:17:49 395  	  CREDIT_CARD.CITY,
17:17:49 396  	  CREDIT_CARD.POSTAL_CODE,
17:17:49 397  	  CREDIT_CARD.COUNTRY,
17:17:49 398  	  CREDIT_CARD.LAST_FOUR_CC,
17:17:49 399  	  CREDIT_CARD.EXPIRATION_DATE,
17:17:49 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
17:17:49 401  	  CREDIT_CARD.SECRET_TOKEN,
17:17:49 402  	  CREDIT_CARD.CREATE_DATE,
17:17:49 403  	  CREDIT_CARD.CREATED_BY,
17:17:49 404  	  CREDIT_CARD.UPDATE_DATE,
17:17:49 405  	  CREDIT_CARD.UPDATED_BY,
17:17:49 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
17:17:49 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
17:17:49 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
17:17:49 409  	FROM
17:17:49 410  	  CREDIT_CARD
17:17:49 411  	WHERE
17:17:49 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
17:17:49 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
17:17:49 414  
17:17:49 415  	-- Get default credit card if exists
17:17:49 416  	BEGIN
17:17:49 417  	  PROCS_FIN_INSTRUMENTS_V15.GET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 418  	    in_group_id 	   => in_group_id,
17:17:49 419  	    out_instrument_type_id => var_def_instrument_type_id,
17:17:49 420  	    out_instrument_id	   => var_def_instrument_id
17:17:49 421  	  );
17:17:49 422  	  EXCEPTION
17:17:49 423  	    WHEN OTHERS THEN
17:17:49 424  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
17:17:49 426  	END;
17:17:49 427  
17:17:49 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
17:17:49 429  	  out_default_id := var_def_instrument_id;
17:17:49 430  	ELSE
17:17:49 431  	  out_default_id := 0;
17:17:49 432  	END IF;
17:17:49 433  
17:17:49 434  EXCEPTION
17:17:49 435  WHEN NO_DATA_FOUND THEN
17:17:49 436  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 437  	  SPROC_NAME, 'No such account');
17:17:49 438  WHEN WRONG_INSTR_EXCEPTION THEN
17:17:49 439  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 440  	  SPROC_NAME, 'Wrong instrument status');
17:17:49 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
17:17:49 442  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
17:17:49 444  WHEN OTHERS THEN
17:17:49 445  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 447  END GET_ACCOUNT_CREDIT_CARDS;
17:17:49 448  
17:17:49 449  /******************************************************************************/
17:17:49 450  
17:17:49 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
17:17:49 452  /*
17:17:49 453  IN:
17:17:49 454  instr_status:
17:17:49 455  GLOBAL_CONSTANTS_V15.TRUE - get active instruments only (default)
17:17:49 456  GLOBAL_CONSTANTS_V15.FALSE - get inactive instruments only
17:17:49 457  
17:17:49 458  Throws exceptions:
17:17:49 459  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 460  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 461  */
17:17:49 462  	in_group_id	  IN NUMBER,
17:17:49 463  	out_result_gc_set OUT SYS_REFCURSOR,
17:17:49 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
17:17:49 465  ) AS
17:17:49 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
17:17:49 467  var_account_id NUMBER;
17:17:49 468  
17:17:49 469  -- Exceptions
17:17:49 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
17:17:49 471  BEGIN
17:17:49 472  
17:17:49 473  	-- Get account id
17:17:49 474  	SELECT
17:17:49 475  	  ACCOUNT.ID INTO var_account_id
17:17:49 476  	FROM
17:17:49 477  	  ACCOUNT
17:17:49 478  	WHERE
17:17:49 479  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 480  
17:17:49 481  	-- Check that incoming data is correct
17:17:49 482  	IF in_instr_status != GLOBAL_CONSTANTS_V15.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V15.FALSE THEN
17:17:49 483  	  RAISE WRONG_INSTR_EXCEPTION;
17:17:49 484  	END IF;
17:17:49 485  
17:17:49 486  	OPEN out_result_gc_set FOR
17:17:49 487  	SELECT
17:17:49 488  	  GIFT_CERTIFICATE.ID,
17:17:49 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
17:17:49 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
17:17:49 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
17:17:49 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
17:17:49 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
17:17:49 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
17:17:49 495  	  GIFT_CERTIFICATE.CODE,
17:17:49 496  	  GIFT_CERTIFICATE.CREATE_DATE,
17:17:49 497  	  GIFT_CERTIFICATE.CREATED_BY,
17:17:49 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
17:17:49 499  	  GIFT_CERTIFICATE.UPDATED_BY,
17:17:49 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
17:17:49 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
17:17:49 502  	  GIFT_CERTIFICATE.SENDER_NAME,
17:17:49 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
17:17:49 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
17:17:49 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
17:17:49 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
17:17:49 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
17:17:49 508  	FROM
17:17:49 509  	  GIFT_CERTIFICATE
17:17:49 510  	WHERE
17:17:49 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
17:17:49 512  	  AND (
17:17:49 513  		( in_instr_status = GLOBAL_CONSTANTS_V15.TRUE AND
17:17:49 514  		  (
17:17:49 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
17:17:49 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
17:17:49 517  		  )
17:17:49 518  		)
17:17:49 519  		OR
17:17:49 520  		(
17:17:49 521  		  in_instr_status = GLOBAL_CONSTANTS_V15.FALSE AND
17:17:49 522  		  (
17:17:49 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
17:17:49 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
17:17:49 525  		  )
17:17:49 526  		)
17:17:49 527  	      );
17:17:49 528  
17:17:49 529  EXCEPTION
17:17:49 530  WHEN NO_DATA_FOUND THEN
17:17:49 531  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 532  	  SPROC_NAME, 'Can not find account with given group id');
17:17:49 533  WHEN WRONG_INSTR_EXCEPTION THEN
17:17:49 534  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 535  	  SPROC_NAME, 'Wrong gift certificate type');
17:17:49 536  WHEN OTHERS THEN
17:17:49 537  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
17:17:49 540  
17:17:49 541  /******************************************************************************/
17:17:49 542  
17:17:49 543  PROCEDURE GET_ACCOUNT_INFO  (
17:17:49 544  /*
17:17:49 545  Throws exceptions:
17:17:49 546  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 547  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 548  */
17:17:49 549  	  in_group_id	    IN	NUMBER,
17:17:49 550  	  out_account_info  OUT SYS_REFCURSOR
17:17:49 551  ) AS
17:17:49 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
17:17:49 553  var_account_id  NUMBER;
17:17:49 554  BEGIN
17:17:49 555  
17:17:49 556  	-- Get account id
17:17:49 557  	SELECT
17:17:49 558  	  ACCOUNT.ID INTO var_account_id
17:17:49 559  	FROM
17:17:49 560  	  ACCOUNT
17:17:49 561  	WHERE
17:17:49 562  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 563  
17:17:49 564  	-- Get account info
17:17:49 565  	OPEN out_account_info FOR
17:17:49 566  	  SELECT
17:17:49 567  	    ACCOUNT.ACCOUNT_STATUS_ID
17:17:49 568  	  FROM ACCOUNT
17:17:49 569  	  WHERE
17:17:49 570  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 571  
17:17:49 572  EXCEPTION
17:17:49 573  WHEN NO_DATA_FOUND THEN
17:17:49 574  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 575  	  SPROC_NAME, 'No such account');
17:17:49 576  WHEN OTHERS THEN
17:17:49 577  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
17:17:49 579  END GET_ACCOUNT_INFO;
17:17:49 580  
17:17:49 581  /******************************************************************************/
17:17:49 582  
17:17:49 583  PROCEDURE GET_ACCOUNT_NOTES (
17:17:49 584  /*
17:17:49 585  Throws exceptions:
17:17:49 586  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 587  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 588  */
17:17:49 589  	  in_group_id	 IN  NUMBER,
17:17:49 590  	  out_result_set OUT SYS_REFCURSOR
17:17:49 591  ) AS
17:17:49 592  -- VARIABLES
17:17:49 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
17:17:49 594  var_account_id NUMBER;
17:17:49 595  -- EXCEPTIONS
17:17:49 596  BAD_ACCOUNT_ID EXCEPTION;
17:17:49 597  BEGIN
17:17:49 598  
17:17:49 599  	-- Check that account is exists
17:17:49 600  	BEGIN
17:17:49 601  	  SELECT
17:17:49 602  	    ACCOUNT.ID into var_account_id
17:17:49 603  	  FROM
17:17:49 604  	    ACCOUNT
17:17:49 605  	  WHERE
17:17:49 606  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 607  	  EXCEPTION
17:17:49 608  	    WHEN NO_DATA_FOUND THEN
17:17:49 609  	      RAISE BAD_ACCOUNT_ID;
17:17:49 610  	END;
17:17:49 611  
17:17:49 612  	-- Get account notes
17:17:49 613  	OPEN out_result_set FOR
17:17:49 614  	SELECT
17:17:49 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
17:17:49 616  	  ACCOUNT_NOTE.AGENT_ID,
17:17:49 617  	  ACCOUNT_NOTE.CREATE_DATE,
17:17:49 618  	  ACCOUNT_NOTE.CREATED_BY,
17:17:49 619  	  ACCOUNT_NOTE.ID,
17:17:49 620  	  ACCOUNT_NOTE.NOTE
17:17:49 621  	FROM
17:17:49 622  	  ACCOUNT_NOTE
17:17:49 623  	WHERE
17:17:49 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
17:17:49 625  	ORDER BY
17:17:49 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
17:17:49 627  
17:17:49 628  EXCEPTION
17:17:49 629  WHEN BAD_ACCOUNT_ID THEN
17:17:49 630  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 631  	  SPROC_NAME, 'No such account');
17:17:49 632  WHEN OTHERS THEN
17:17:49 633  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 635  END GET_ACCOUNT_NOTES;
17:17:49 636  
17:17:49 637  /******************************************************************************/
17:17:49 638  
17:17:49 639  PROCEDURE GET_ACCOUNT_PAYPALS(
17:17:49 640  /*
17:17:49 641  IN:
17:17:49 642  instr_status:
17:17:49 643  1 - get active instruments only (default)
17:17:49 644  0 - get inactive instruments only
17:17:49 645  
17:17:49 646  Throws exceptions:
17:17:49 647  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 648  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 649  */
17:17:49 650  	in_group_id	  IN  NUMBER,
17:17:49 651  	out_result_pp_set OUT SYS_REFCURSOR,
17:17:49 652  	out_default_id	  OUT NUMBER,
17:17:49 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
17:17:49 654  ) AS
17:17:49 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
17:17:49 656  -- VARIABLES
17:17:49 657  var_account_id NUMBER;
17:17:49 658  var_def_instrument_type_id NUMBER;
17:17:49 659  var_def_instrument_id	 NUMBER;
17:17:49 660  -- EXCEPTIONS
17:17:49 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
17:17:49 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
17:17:49 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
17:17:49 664  BEGIN
17:17:49 665  
17:17:49 666  	-- Get account id
17:17:49 667  	SELECT
17:17:49 668  	  ACCOUNT.ID INTO var_account_id
17:17:49 669  	FROM
17:17:49 670  	  ACCOUNT
17:17:49 671  	WHERE
17:17:49 672  	  ACCOUNT.GROUP_ID = in_group_id;
17:17:49 673  
17:17:49 674  	-- Check that all passed agruments are valid
17:17:49 675  	IF in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
17:17:49 676  	  AND in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
17:17:49 677  	  AND in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
17:17:49 678  	  RAISE WRONG_INSTR_EXCEPTION;
17:17:49 679  	END IF;
17:17:49 680  
17:17:49 681  	-- Retreiving information about paypals
17:17:49 682  	OPEN out_result_pp_set FOR
17:17:49 683  	SELECT
17:17:49 684  	  PAYPAL.ID,
17:17:49 685  	  PAYPAL.ACCOUNT_ID,
17:17:49 686  	  PAYPAL.INSTRUMENT_NAME,
17:17:49 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
17:17:49 688  	  PAYPAL.CREATE_DATE,
17:17:49 689  	  PAYPAL.CREATED_BY,
17:17:49 690  	  PAYPAL.UPDATE_DATE,
17:17:49 691  	  PAYPAL.UPDATED_BY,
17:17:49 692  	  PAYPAL.PAYPAL_STATUS_ID,
17:17:49 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
17:17:49 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
17:17:49 695  	  PAYPAL.STATE,
17:17:49 696  	  PAYPAL.CITY,
17:17:49 697  	  PAYPAL.POSTAL_CODE,
17:17:49 698  	  PAYPAL.COUNTRY,
17:17:49 699  	  PAYPAL.EXPIRATION_DATE,
17:17:49 700  	  PAYPAL.SECRET_TOKEN
17:17:49 701  	FROM
17:17:49 702  	  PAYPAL
17:17:49 703  	WHERE
17:17:49 704  	  PAYPAL.ACCOUNT_ID = var_account_id
17:17:49 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
17:17:49 706  
17:17:49 707  	-- Get default credit card if exists
17:17:49 708  	BEGIN
17:17:49 709  	  PROCS_FIN_INSTRUMENTS_V15.GET_DEF_FINANCIAL_INSTRUMENT(
17:17:49 710  	    in_group_id 	   => in_group_id,
17:17:49 711  	    out_instrument_type_id => var_def_instrument_type_id,
17:17:49 712  	    out_instrument_id	   => var_def_instrument_id
17:17:49 713  	  );
17:17:49 714  	  EXCEPTION
17:17:49 715  	    WHEN OTHERS THEN
17:17:49 716  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
17:17:49 718  	END;
17:17:49 719  
17:17:49 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
17:17:49 721  	  out_default_id := var_def_instrument_id;
17:17:49 722  	ELSE
17:17:49 723  	  out_default_id := 0;
17:17:49 724  	END IF;
17:17:49 725  
17:17:49 726  EXCEPTION
17:17:49 727  WHEN NO_DATA_FOUND THEN
17:17:49 728  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 729  	  SPROC_NAME, 'Could not find account with given group id');
17:17:49 730  WHEN WRONG_INSTR_EXCEPTION THEN
17:17:49 731  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 732  	  SPROC_NAME, 'Bad paypal status id');
17:17:49 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
17:17:49 734  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
17:17:49 736  WHEN OTHERS THEN
17:17:49 737  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 739  END GET_ACCOUNT_PAYPALS;
17:17:49 740  
17:17:49 741  /******************************************************************************/
17:17:49 742  
17:17:49 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
17:17:49 744  /*
17:17:49 745  Throws exceptions:
17:17:49 746  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 747  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 748  */
17:17:49 749  	  in_group_id	 IN  NUMBER,
17:17:49 750  	  in_start_date  IN DATE,
17:17:49 751  	  in_end_date	 IN DATE,
17:17:49 752  	  in_status	 IN NUMBER,
17:17:49 753  	  in_group_account_type IN VARCHAR2,
17:17:49 754  	  out_result_set OUT SYS_REFCURSOR
17:17:49 755  ) AS
17:17:49 756  -- VARIABLES
17:17:49 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
17:17:49 758  var_account_id NUMBER;
17:17:49 759  -- EXCEPTIONS
17:17:49 760  BAD_GROUP_ID	      EXCEPTION;
17:17:49 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
17:17:49 762  BEGIN
17:17:49 763  	-- Check that all passed data is correct
17:17:49 764  	IF in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
17:17:49 765  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
17:17:49 766  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED
17:17:49 767  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
17:17:49 768  	THEN
17:17:49 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
17:17:49 770  	END IF;
17:17:49 771  
17:17:49 772  	-- Get account id
17:17:49 773  	BEGIN
17:17:49 774  	  SELECT
17:17:49 775  	    ACCOUNT.ID INTO var_account_id
17:17:49 776  	  FROM
17:17:49 777  	    ACCOUNT
17:17:49 778  	  WHERE
17:17:49 779  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 780  	  EXCEPTION
17:17:49 781  	    WHEN NO_DATA_FOUND THEN
17:17:49 782  	      RAISE BAD_GROUP_ID;
17:17:49 783  	END;
17:17:49 784  
17:17:49 785  	-- Get information about account subscriptions
17:17:49 786  	OPEN out_result_set FOR
17:17:49 787  	SELECT
17:17:49 788  	  in_group_id AS "GROUP_ID",
17:17:49 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
17:17:49 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
17:17:49 791  	  SUBSCRIPTION.PURCHASE_DATE,
17:17:49 792  	  SUBSCRIPTION.SUSPEND_DATE,
17:17:49 793  	  SUBSCRIPTION.REACTIVATION_DATE,
17:17:49 794  	  SUBSCRIPTION.CANCELLATION_DATE,
17:17:49 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
17:17:49 796  	  SUBSCRIPTION.INSTRUMENT_ID,
17:17:49 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
17:17:49 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
17:17:49 799  	  OFFER_CHAIN.NAME,
17:17:49 800  	  OFFER_CHAIN.DESCRIPTION,
17:17:49 801  	  OFFER_CHAIN.PRODUCT_URI,
17:17:49 802  	  PROCS_SUBSCRIPTION_V15.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
17:17:49 803  	  PROCS_SUBSCRIPTION_V15.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
17:17:49 804  	  PROCS_SUBSCRIPTION_V15.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
17:17:49 805  	  PROCS_SUBSCRIPTION_V15.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
17:17:49 806  	  PROCS_SUBSCRIPTION_V15.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
17:17:49 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
17:17:49 808  	  (
17:17:49 809  	    SELECT
17:17:49 810  	      MAX(ENTITLEMENT_END_DATE)
17:17:49 811  	      FROM LICENSE
17:17:49 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 813  	  )
17:17:49 814  	  as "ENT_END_DATE",
17:17:49 815  	  (
17:17:49 816  	    SELECT
17:17:49 817  	      MIN(START_DATE)
17:17:49 818  	      FROM LICENSE
17:17:49 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 820  	  )
17:17:49 821  	  as "ENT_START_DATE",
17:17:49 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
17:17:49 823  	  GROUP_ACCOUNT.ID GA_ID,
17:17:49 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
17:17:49 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
17:17:49 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
17:17:49 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
17:17:49 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
17:17:49 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
17:17:49 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
17:17:49 831  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
17:17:49 832  	  GROUP_ACCOUNT.IP GA_IP,
17:17:49 833  	  PROCS_SUBSCRIPTION_V15.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
17:17:49 834  	FROM
17:17:49 835  	  SUBSCRIPTION
17:17:49 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
17:17:49 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
17:17:49 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
17:17:49 840  	WHERE
17:17:49 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
17:17:49 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
17:17:49 844  	  AND PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
17:17:49 845  	  AND PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
17:17:49 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
17:17:49 847  
17:17:49 848  EXCEPTION
17:17:49 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
17:17:49 850  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 851  	  SPROC_NAME, 'Bad subscription status');
17:17:49 852  WHEN BAD_GROUP_ID THEN
17:17:49 853  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 854  	  SPROC_NAME, 'Can not find account with given group id');
17:17:49 855  WHEN OTHERS THEN
17:17:49 856  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 858  END GET_ACCOUNT_SUBSCRIPTIONS;
17:17:49 859  
17:17:49 860  /******************************************************************************/
17:17:49 861  
17:17:49 862  PROCEDURE FREEZE_ACCOUNT (
17:17:49 863  /*
17:17:49 864  Throws exceptions:
17:17:49 865  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 866  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 867  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 868  */
17:17:49 869  	in_group_id   IN NUMBER,
17:17:49 870  	in_updated_by IN VARCHAR2,
17:17:49 871  	in_note       IN VARCHAR2,
17:17:49 872  	in_agent_id   IN NUMBER
17:17:49 873  ) AS
17:17:49 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
17:17:49 875  -- VARIABLES
17:17:49 876  var_account_id	    NUMBER;
17:17:49 877  var_account_status_id NUMBER;
17:17:49 878  -- EXCEPTIONS
17:17:49 879  BAD_GROUP_ID	    EXCEPTION;
17:17:49 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
17:17:49 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
17:17:49 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
17:17:49 883  BEGIN
17:17:49 884  
17:17:49 885  	-- Get account status, account id
17:17:49 886  	BEGIN
17:17:49 887  	  SELECT
17:17:49 888  	    ACCOUNT.ID,
17:17:49 889  	    ACCOUNT.ACCOUNT_STATUS_ID
17:17:49 890  	    into
17:17:49 891  	    var_account_id,
17:17:49 892  	    var_account_status_id
17:17:49 893  	  FROM
17:17:49 894  	    ACCOUNT
17:17:49 895  	  WHERE
17:17:49 896  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 897  	  EXCEPTION
17:17:49 898  	    WHEN NO_DATA_FOUND THEN
17:17:49 899  	      RAISE BAD_GROUP_ID;
17:17:49 900  	END;
17:17:49 901  
17:17:49 902  	-- We can freeze only ACTIVE accounts
17:17:49 903  	IF var_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
17:17:49 904  	  AND var_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
17:17:49 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
17:17:49 906  	END IF;
17:17:49 907  
17:17:49 908  	-- Set account status
17:17:49 909  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
17:17:49 910  	  in_account_id        => var_account_id,
17:17:49 911  	  in_updated_by        => in_updated_by,
17:17:49 912  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_FROZEN
17:17:49 913  	);
17:17:49 914  
17:17:49 915  	-- Annotate account
17:17:49 916  	BEGIN
17:17:49 917  	  PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
17:17:49 918  	    in_group_id   => in_group_id,
17:17:49 919  	    in_agent_id   => in_agent_id,
17:17:49 920  	    in_note	  => in_note,
17:17:49 921  	    in_created_by => in_updated_by
17:17:49 922  	  );
17:17:49 923  	  EXCEPTION
17:17:49 924  	    WHEN OTHERS THEN
17:17:49 925  	      EXCEPTION_MESSAGE := SQLERRM;
17:17:49 926  	      RAISE CAN_NOT_CREATE_NOTE;
17:17:49 927  	END;
17:17:49 928  
17:17:49 929  EXCEPTION
17:17:49 930  WHEN BAD_GROUP_ID THEN
17:17:49 931  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 932  	  SPROC_NAME, 'No such group id');
17:17:49 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
17:17:49 934  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
17:17:49 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
17:17:49 936  WHEN CAN_NOT_CREATE_NOTE THEN
17:17:49 937  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
17:17:49 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
17:17:49 939  WHEN OTHERS THEN
17:17:49 940  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 942  END FREEZE_ACCOUNT;
17:17:49 943  
17:17:49 944  /******************************************************************************/
17:17:49 945  
17:17:49 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
17:17:49 947  /*
17:17:49 948  Throws exceptions:
17:17:49 949  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 950  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 951  */
17:17:49 952  	in_group_id	   IN  NUMBER,
17:17:49 953  	in_subscription_id IN NUMBER,
17:17:49 954  	out_result_set	   OUT SYS_REFCURSOR
17:17:49 955  ) AS
17:17:49 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
17:17:49 957  -- VARIABLES
17:17:49 958  var_account_id	   NUMBER;
17:17:49 959  temp_subscription_id NUMBER;
17:17:49 960  -- EXCEPTIONS
17:17:49 961  BAD_GROUP_ID	  EXCEPTION;
17:17:49 962  BAD_SUBSCRIPTION_ID EXCEPTION;
17:17:49 963  BEGIN
17:17:49 964  	-- Get account id
17:17:49 965  	BEGIN
17:17:49 966  	  SELECT
17:17:49 967  	    ACCOUNT.ID into var_account_id
17:17:49 968  	  FROM
17:17:49 969  	    ACCOUNT
17:17:49 970  	  WHERE
17:17:49 971  	    ACCOUNT.GROUP_ID = in_group_id;
17:17:49 972  	  EXCEPTION
17:17:49 973  	    WHEN NO_DATA_FOUND THEN
17:17:49 974  	      RAISE BAD_GROUP_ID;
17:17:49 975  	END;
17:17:49 976  
17:17:49 977  	-- Check that subscription exists
17:17:49 978  	BEGIN
17:17:49 979  	  IF in_subscription_id IS NOT NULL THEN
17:17:49 980  	    SELECT
17:17:49 981  	      SUBSCRIPTION.ID into temp_subscription_id
17:17:49 982  	    FROM
17:17:49 983  	      SUBSCRIPTION
17:17:49 984  	    WHERE
17:17:49 985  	      SUBSCRIPTION.ID = in_subscription_id;
17:17:49 986  	  END IF;
17:17:49 987  	  EXCEPTION
17:17:49 988  	    WHEN NO_DATA_FOUND THEN
17:17:49 989  	      RAISE BAD_SUBSCRIPTION_ID;
17:17:49 990  	END;
17:17:49 991  
17:17:49 992  	OPEN out_result_set FOR
17:17:49 993  	SELECT DISTINCT
17:17:49 994  	  INVOICE.ID as "INVOICE_ID",
17:17:49 995  	  INVOICE.CREATE_DATE,
17:17:49 996  	  INVOICE.INVOICE_STATUS_ID,
17:17:49 997  	  PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
17:17:49 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
17:17:49 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
17:17:49 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
17:17:49 1001  	   NULL as "GC_CODE",
17:17:49 1002  	   NULL as "GC_ID"
17:17:49 1003  	 FROM
17:17:49 1004  	   LICENSE
17:17:49 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
17:17:49 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 1008  	 WHERE
17:17:49 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
17:17:49 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
17:17:49 1012  
17:17:49 1013  EXCEPTION
17:17:49 1014  WHEN BAD_GROUP_ID THEN
17:17:49 1015  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1016  	   SPROC_NAME, 'No such account');
17:17:49 1017  WHEN BAD_SUBSCRIPTION_ID THEN
17:17:49 1018  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1019  	   SPROC_NAME, 'No such subscription');
17:17:49 1020  WHEN OTHERS THEN
17:17:49 1021  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
17:17:49 1024  
17:17:49 1025  /******************************************************************************/
17:17:49 1026  
17:17:49 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
17:17:49 1028  /*
17:17:49 1029  Throws exceptions:
17:17:49 1030  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1031  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1032  */
17:17:49 1033  	 in_group_id	IN  NUMBER,
17:17:49 1034  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1035  ) AS
17:17:49 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
17:17:49 1037  -- VARIABLES
17:17:49 1038  var_account_id NUMBER;
17:17:49 1039  -- EXCEPTIONS
17:17:49 1040  BAD_GROUP_ID EXCEPTION;
17:17:49 1041  BEGIN
17:17:49 1042  	 -- Get account id
17:17:49 1043  	 BEGIN
17:17:49 1044  	   SELECT
17:17:49 1045  	     ACCOUNT.ID into var_account_id
17:17:49 1046  	   FROM
17:17:49 1047  	     ACCOUNT
17:17:49 1048  	   WHERE
17:17:49 1049  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1050  	   EXCEPTION
17:17:49 1051  	     WHEN NO_DATA_FOUND THEN
17:17:49 1052  	       RAISE BAD_GROUP_ID;
17:17:49 1053  	 END;
17:17:49 1054  
17:17:49 1055  	 -- Get invoices
17:17:49 1056  	 OPEN out_result_set FOR
17:17:49 1057  	 SELECT DISTINCT
17:17:49 1058  	   INVOICE.ID as "INVOICE_ID",
17:17:49 1059  	   INVOICE.CREATE_DATE,
17:17:49 1060  	   INVOICE.INVOICE_STATUS_ID,
17:17:49 1061  	   PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
17:17:49 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
17:17:49 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
17:17:49 1064  	   NULL as "SUBSCRIPTION_ID",
17:17:49 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
17:17:49 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
17:17:49 1067  	 FROM
17:17:49 1068  	   GIFT_CERTIFICATE
17:17:49 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
17:17:49 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 1071  	 WHERE
17:17:49 1072  	   ROWNUM <= 100 AND
17:17:49 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
17:17:49 1074  
17:17:49 1075  EXCEPTION
17:17:49 1076  WHEN BAD_GROUP_ID THEN
17:17:49 1077  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1078  	   SPROC_NAME, 'No such account');
17:17:49 1079  WHEN OTHERS THEN
17:17:49 1080  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1082  END GET_ACCOUNT_GC_INVOICES;
17:17:49 1083  
17:17:49 1084  /******************************************************************************/
17:17:49 1085  -- norlov: #38580
17:17:49 1086  PROCEDURE GET_GC_INVOICE (
17:17:49 1087  /*
17:17:49 1088  Throws exceptions:
17:17:49 1089  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1090  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1091  */
17:17:49 1092  	 in_group_id	IN  NUMBER,
17:17:49 1093  	 in_gc_code	IN  VARCHAR2,
17:17:49 1094  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1095  ) AS
17:17:49 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
17:17:49 1097  -- VARIABLES
17:17:49 1098  var_account_id NUMBER;
17:17:49 1099  -- EXCEPTIONS
17:17:49 1100  BAD_GROUP_ID EXCEPTION;
17:17:49 1101  BEGIN
17:17:49 1102  	 -- Get account id
17:17:49 1103  	 BEGIN
17:17:49 1104  	   SELECT
17:17:49 1105  	     ACCOUNT.ID into var_account_id
17:17:49 1106  	   FROM
17:17:49 1107  	     ACCOUNT
17:17:49 1108  	   WHERE
17:17:49 1109  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1110  	   EXCEPTION
17:17:49 1111  	     WHEN NO_DATA_FOUND THEN
17:17:49 1112  	       RAISE BAD_GROUP_ID;
17:17:49 1113  	 END;
17:17:49 1114  
17:17:49 1115  	 -- Get invoice for the GC
17:17:49 1116  	 OPEN out_result_set FOR
17:17:49 1117  	 SELECT DISTINCT
17:17:49 1118  	   INVOICE.ID as "INVOICE_ID",
17:17:49 1119  	   INVOICE.CREATE_DATE,
17:17:49 1120  	   INVOICE.INVOICE_STATUS_ID,
17:17:49 1121  	   PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
17:17:49 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
17:17:49 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
17:17:49 1124  	   NULL as "SUBSCRIPTION_ID",
17:17:49 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
17:17:49 1126  	 FROM
17:17:49 1127  	   GIFT_CERTIFICATE
17:17:49 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
17:17:49 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
17:17:49 1130  	 WHERE
17:17:49 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
17:17:49 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
17:17:49 1133  
17:17:49 1134  EXCEPTION
17:17:49 1135  WHEN BAD_GROUP_ID THEN
17:17:49 1136  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1137  	   SPROC_NAME, 'No such account');
17:17:49 1138  WHEN OTHERS THEN
17:17:49 1139  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1141  END GET_GC_INVOICE;
17:17:49 1142  /******************************************************************************/
17:17:49 1143  
17:17:49 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
17:17:49 1145  /*
17:17:49 1146  Throws exceptions:
17:17:49 1147  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1148  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1149  */
17:17:49 1150  	 in_group_id	IN  NUMBER,
17:17:49 1151  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1152  ) AS
17:17:49 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
17:17:49 1154  -- VARIABLES
17:17:49 1155  var_account_id NUMBER;
17:17:49 1156  -- EXCEPTIONS
17:17:49 1157  BAD_GROUP_ID EXCEPTION;
17:17:49 1158  BEGIN
17:17:49 1159  	 -- Get account id
17:17:49 1160  	 BEGIN
17:17:49 1161  	   SELECT
17:17:49 1162  	     ACCOUNT.ID into var_account_id
17:17:49 1163  	   FROM
17:17:49 1164  	     ACCOUNT
17:17:49 1165  	   WHERE
17:17:49 1166  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1167  	   EXCEPTION
17:17:49 1168  	     WHEN NO_DATA_FOUND THEN
17:17:49 1169  	       RAISE BAD_GROUP_ID;
17:17:49 1170  	 END;
17:17:49 1171  
17:17:49 1172  	 OPEN out_result_set FOR
17:17:49 1173  	 SELECT DISTINCT
17:17:49 1174  	   PRODUCT.ID,
17:17:49 1175  	   PRODUCT.NAME
17:17:49 1176  	 FROM
17:17:49 1177  	   PRODUCT
17:17:49 1178  	 WHERE
17:17:49 1179  	   PRODUCT.ID IN (
17:17:49 1180  	     SELECT DISTINCT
17:17:49 1181  	       PRODUCT_OFFERING.PRODUCT_ID
17:17:49 1182  	     FROM
17:17:49 1183  	       PRODUCT_OFFERING
17:17:49 1184  	     WHERE
17:17:49 1185  	       PRODUCT_OFFERING.ID IN (
17:17:49 1186  		 SELECT DISTINCT
17:17:49 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:49 1188  		 FROM
17:17:49 1189  		   OFFER_PRODUCT_OFFERING
17:17:49 1190  		 WHERE
17:17:49 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:49 1192  		     SELECT DISTINCT
17:17:49 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
17:17:49 1194  		     FROM
17:17:49 1195  		       OFFER_OFFER_CHAIN
17:17:49 1196  		     WHERE
17:17:49 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
17:17:49 1198  			 SELECT DISTINCT
17:17:49 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
17:17:49 1200  			 FROM
17:17:49 1201  			   SUBSCRIPTION
17:17:49 1202  			 WHERE
17:17:49 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 1204  		       )
17:17:49 1205  		   )
17:17:49 1206  	       )
17:17:49 1207  	   );
17:17:49 1208  
17:17:49 1209  EXCEPTION
17:17:49 1210  WHEN BAD_GROUP_ID THEN
17:17:49 1211  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1212  	   SPROC_NAME, 'No such account');
17:17:49 1213  WHEN OTHERS THEN
17:17:49 1214  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1216  END GET_ACCOUNT_PRODUCTS;
17:17:49 1217  
17:17:49 1218  /******************************************************************************/
17:17:49 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
17:17:49 1220  /*
17:17:49 1221  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:49 1222  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1223  */
17:17:49 1224  	 in_group_id IN NUMBER,
17:17:49 1225  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 1226  ) AS
17:17:49 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
17:17:49 1228  -- VARIABLES
17:17:49 1229  var_account_id NUMBER;
17:17:49 1230  -- EXCEPTIONS
17:17:49 1231  BAD_GROUP_ID EXCEPTION;
17:17:49 1232  BEGIN
17:17:49 1233  	  -- Get account id
17:17:49 1234  	 BEGIN
17:17:49 1235  	   SELECT
17:17:49 1236  	     ACCOUNT.ID into var_account_id
17:17:49 1237  	   FROM
17:17:49 1238  	     ACCOUNT
17:17:49 1239  	   WHERE
17:17:49 1240  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1241  	   EXCEPTION
17:17:49 1242  	     WHEN NO_DATA_FOUND THEN
17:17:49 1243  	       RAISE BAD_GROUP_ID;
17:17:49 1244  	 END;
17:17:49 1245  
17:17:49 1246  	 OPEN out_result_set FOR
17:17:49 1247  	 SELECT DISTINCT
17:17:49 1248  	   PRODUCT_OFFERING.ID,
17:17:49 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
17:17:49 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
17:17:49 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
17:17:49 1252  	   PRODUCT_OFFERING.QUANTITY,
17:17:49 1253  	   PRODUCT_OFFERING.CREATE_DATE,
17:17:49 1254  	   PRODUCT_OFFERING.CREATED_BY,
17:17:49 1255  	   CAPABILITY.ID CAP_ID,
17:17:49 1256  	   CAPABILITY.CODE CAP_CODE,
17:17:49 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
17:17:49 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
17:17:49 1259  	 FROM
17:17:49 1260  	   OFFER_PRODUCT_OFFERING
17:17:49 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
17:17:49 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
17:17:49 1263  	 WHERE
17:17:49 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
17:17:49 1265  	     SELECT DISTINCT
17:17:49 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
17:17:49 1267  	     FROM
17:17:49 1268  	       OFFER_OFFER_CHAIN
17:17:49 1269  	     WHERE
17:17:49 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
17:17:49 1271  		 SELECT DISTINCT
17:17:49 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
17:17:49 1273  		 FROM
17:17:49 1274  		   SUBSCRIPTION
17:17:49 1275  		 WHERE
17:17:49 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 1277  	       )
17:17:49 1278  	   );
17:17:49 1279  
17:17:49 1280  EXCEPTION
17:17:49 1281  WHEN BAD_GROUP_ID THEN
17:17:49 1282  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1283  	   SPROC_NAME, 'No such account');
17:17:49 1284  WHEN OTHERS THEN
17:17:49 1285  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
17:17:49 1288  
17:17:49 1289  /******************************************************************************/
17:17:49 1290  
17:17:49 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
17:17:49 1292  /*
17:17:49 1293  Throws exceptions:
17:17:49 1294  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1295  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1296  */
17:17:49 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
17:17:49 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
17:17:49 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
17:17:49 1300  ) AS
17:17:49 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
17:17:49 1302  -- EXCEPTIONS
17:17:49 1303  BAD_ACCOUNT_ID	      EXCEPTION;
17:17:49 1304  BAD_STATUS_ID	      EXCEPTION;
17:17:49 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
17:17:49 1306  BEGIN
17:17:49 1307  
17:17:49 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
17:17:49 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN
17:17:49 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
17:17:49 1311  	   RAISE BAD_STATUS_ID;
17:17:49 1312  	 END IF;
17:17:49 1313  
17:17:49 1314  	 PROCS_ACCOUNT_CRU_V15.UPDATE_ACCOUNT(
17:17:49 1315  	   in_account_id	=> in_account_id,
17:17:49 1316  	   in_account_status_id => in_account_status_id,
17:17:49 1317  	   in_updated_by	=> in_updated_by
17:17:49 1318  	 );
17:17:49 1319  
17:17:49 1320  	 IF SQL%ROWCOUNT = 0 THEN
17:17:49 1321  	   RAISE BAD_ACCOUNT_ID;
17:17:49 1322  	 END IF;
17:17:49 1323  
17:17:49 1324  EXCEPTION
17:17:49 1325  WHEN BAD_ACCOUNT_ID THEN
17:17:49 1326  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1327  	   SPROC_NAME, 'No such account');
17:17:49 1328  WHEN BAD_STATUS_ID THEN
17:17:49 1329  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1330  	   SPROC_NAME, 'Bad status id');
17:17:49 1331  WHEN OTHERS THEN
17:17:49 1332  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1334  END UPDATE_ACCOUNT_STATUS;
17:17:49 1335  
17:17:49 1336  /******************************************************************************/
17:17:49 1337  
17:17:49 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
17:17:49 1339  /*
17:17:49 1340  Throws exceptions:
17:17:49 1341  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1342  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1343  */
17:17:49 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
17:17:49 1345  	 out_licenses_num OUT NUMBER
17:17:49 1346  ) AS
17:17:49 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
17:17:49 1348  -- VARIABLES
17:17:49 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
17:17:49 1350  -- EXCEPTIONS
17:17:49 1351  BAD_ACCOUNT_ID EXCEPTION;
17:17:49 1352  BEGIN
17:17:49 1353  
17:17:49 1354  	 BEGIN
17:17:49 1355  	   SELECT
17:17:49 1356  	     ACCOUNT.ID into var_account_id
17:17:49 1357  	   FROM
17:17:49 1358  	     ACCOUNT
17:17:49 1359  	   WHERE
17:17:49 1360  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1361  	   EXCEPTION
17:17:49 1362  	     WHEN NO_DATA_FOUND THEN
17:17:49 1363  	       RAISE BAD_ACCOUNT_ID;
17:17:49 1364  	 END;
17:17:49 1365  
17:17:49 1366  	 SELECT
17:17:49 1367  	   COUNT(LICENSE.ID) into out_licenses_num
17:17:49 1368  	 FROM
17:17:49 1369  	   LICENSE
17:17:49 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1371  	 WHERE
17:17:49 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
17:17:49 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 1374  
17:17:49 1375  EXCEPTION
17:17:49 1376  WHEN BAD_ACCOUNT_ID THEN
17:17:49 1377  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1378  	   SPROC_NAME, 'No such group id');
17:17:49 1379  WHEN OTHERS THEN
17:17:49 1380  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
17:17:49 1383  
17:17:49 1384  /******************************************************************************/
17:17:49 1385  
17:17:49 1386  PROCEDURE SET_TAX_EXEMPT (
17:17:49 1387  /*
17:17:49 1388  Throws exceptions:
17:17:49 1389  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1390  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1391  */
17:17:49 1392  	 in_group_id  IN NUMBER,
17:17:49 1393  	 in_exempt_id IN VARCHAR2
17:17:49 1394  ) AS
17:17:49 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
17:17:49 1396  -- VARIABLES
17:17:49 1397  var_account_id NUMBER;
17:17:49 1398  -- EXCEPTIONS
17:17:49 1399  BAD_GROUP_ID EXCEPTION;
17:17:49 1400  BEGIN
17:17:49 1401  
17:17:49 1402  	 BEGIN
17:17:49 1403  	   SELECT
17:17:49 1404  	     ACCOUNT.ID into var_account_id
17:17:49 1405  	   FROM
17:17:49 1406  	     ACCOUNT
17:17:49 1407  	   WHERE
17:17:49 1408  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1409  	   EXCEPTION
17:17:49 1410  	     WHEN NO_DATA_FOUND THEN
17:17:49 1411  	       RAISE BAD_GROUP_ID;
17:17:49 1412  	 END;
17:17:49 1413  
17:17:49 1414  	 UPDATE
17:17:49 1415  	   ACCOUNT
17:17:49 1416  	 SET
17:17:49 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
17:17:49 1418  	 WHERE
17:17:49 1419  	   ACCOUNT.ID = var_account_id;
17:17:49 1420  
17:17:49 1421  EXCEPTION
17:17:49 1422  WHEN BAD_GROUP_ID THEN
17:17:49 1423  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1424  	   SPROC_NAME, 'No such group id');
17:17:49 1425  WHEN OTHERS THEN
17:17:49 1426  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1428  END SET_TAX_EXEMPT;
17:17:49 1429  
17:17:49 1430  /******************************************************************************/
17:17:49 1431  
17:17:49 1432  PROCEDURE IS_TAX_EXEMPT (
17:17:49 1433  /*
17:17:49 1434  Throws exceptions:
17:17:49 1435  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1436  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1437  Return:
17:17:49 1438  	 GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
17:17:49 1439  	 GLOBAL_CONSTANTS_V15.FALSE else
17:17:49 1440  */
17:17:49 1441  	 in_group_id	   IN NUMBER,
17:17:49 1442  	 out_is_tax_exempt OUT NUMBER
17:17:49 1443  ) AS
17:17:49 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
17:17:49 1445  -- VARIABLES
17:17:49 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
17:17:49 1447  -- EXCEPTIONS
17:17:49 1448  BAD_GROUP_ID EXCEPTION;
17:17:49 1449  BEGIN
17:17:49 1450  
17:17:49 1451  	 BEGIN
17:17:49 1452  	   SELECT
17:17:49 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
17:17:49 1454  	   FROM
17:17:49 1455  	     ACCOUNT
17:17:49 1456  	   WHERE
17:17:49 1457  	     ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1458  	   EXCEPTION
17:17:49 1459  	     WHEN NO_DATA_FOUND THEN
17:17:49 1460  	       RAISE BAD_GROUP_ID;
17:17:49 1461  	 END;
17:17:49 1462  
17:17:49 1463  	 IF var_is_tax_exempt IS NULL THEN
17:17:49 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.FALSE;
17:17:49 1465  	 ELSE
17:17:49 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.TRUE;
17:17:49 1467  	 END IF;
17:17:49 1468  
17:17:49 1469  EXCEPTION
17:17:49 1470  WHEN BAD_GROUP_ID THEN
17:17:49 1471  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1472  	   SPROC_NAME, 'No such group id');
17:17:49 1473  WHEN OTHERS THEN
17:17:49 1474  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1476  END IS_TAX_EXEMPT;
17:17:49 1477  
17:17:49 1478  /******************************************************************************/
17:17:49 1479  
17:17:49 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
17:17:49 1481  /*
17:17:49 1482  Throws exceptions:
17:17:49 1483  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1484  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1485  */
17:17:49 1486  	 in_account_id IN NUMBER,
17:17:49 1487  	 out_group_id  OUT NUMBER
17:17:49 1488  ) AS
17:17:49 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
17:17:49 1490  BEGIN
17:17:49 1491  
17:17:49 1492  	 SELECT
17:17:49 1493  	   ACCOUNT.GROUP_ID into out_group_id
17:17:49 1494  	 FROM
17:17:49 1495  	   ACCOUNT
17:17:49 1496  	 WHERE
17:17:49 1497  	   ACCOUNT.ID = in_account_id;
17:17:49 1498  
17:17:49 1499  EXCEPTION
17:17:49 1500  WHEN NO_DATA_FOUND THEN
17:17:49 1501  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1502  	   SPROC_NAME, 'No such account');
17:17:49 1503  WHEN OTHERS THEN
17:17:49 1504  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1505  	   SPROC_NAME, 'Unknown error');
17:17:49 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
17:17:49 1507  
17:17:49 1508  /******************************************************************************/
17:17:49 1509  
17:17:49 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:49 1511  /*
17:17:49 1512  Throws exceptions:
17:17:49 1513  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1514  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1515  */
17:17:49 1516  	 in_group_id IN NUMBER,
17:17:49 1517  	 out_account_id  OUT NUMBER
17:17:49 1518  ) AS
17:17:49 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
17:17:49 1520  BEGIN
17:17:49 1521  
17:17:49 1522  	 SELECT
17:17:49 1523  	   ACCOUNT.ID into out_account_id
17:17:49 1524  	 FROM
17:17:49 1525  	   ACCOUNT
17:17:49 1526  	 WHERE
17:17:49 1527  	   ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1528  
17:17:49 1529  EXCEPTION
17:17:49 1530  WHEN NO_DATA_FOUND THEN
17:17:49 1531  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1532  	   SPROC_NAME, 'No such account');
17:17:49 1533  WHEN OTHERS THEN
17:17:49 1534  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1535  	   SPROC_NAME, 'Unknown error');
17:17:49 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
17:17:49 1537  
17:17:49 1538  /******************************************************************************/
17:17:49 1539  
17:17:49 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
17:17:49 1541  /*
17:17:49 1542  This procedure is using for LOCKING only
17:17:49 1543  
17:17:49 1544  Throws exceptions:
17:17:49 1545  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1546  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1547  */
17:17:49 1548  	 in_invoice_id IN NUMBER,
17:17:49 1549  	 out_group_ids OUT SYS_REFCURSOR
17:17:49 1550  ) AS
17:17:49 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
17:17:49 1552  -- VARIABLES
17:17:49 1553  temp_invoice_id		 NUMBER;
17:17:49 1554  var_subscrib_group_id	 NUMBER;
17:17:49 1555  var_gc_purchaser_group_id NUMBER;
17:17:49 1556  var_gc_redeemer_group_id  NUMBER;
17:17:49 1557  -- EXCEPTIONS
17:17:49 1558  BAD_INVOICE_ID	    EXCEPTION;
17:17:49 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
17:17:49 1560  BEGIN
17:17:49 1561  
17:17:49 1562  	 BEGIN
17:17:49 1563  	   SELECT
17:17:49 1564  	     INVOICE.ID into temp_invoice_id
17:17:49 1565  	   FROM
17:17:49 1566  	     INVOICE
17:17:49 1567  	   WHERE
17:17:49 1568  	     INVOICE.ID = in_invoice_id;
17:17:49 1569  	   EXCEPTION
17:17:49 1570  	     WHEN NO_DATA_FOUND THEN
17:17:49 1571  	       RAISE BAD_INVOICE_ID;
17:17:49 1572  	 END;
17:17:49 1573  
17:17:49 1574  	 BEGIN
17:17:49 1575  	   SELECT DISTINCT
17:17:49 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
17:17:49 1577  	   FROM
17:17:49 1578  	     ACCOUNT
17:17:49 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
17:17:49 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
17:17:49 1581  	   WHERE
17:17:49 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
17:17:49 1583  	   EXCEPTION
17:17:49 1584  	     WHEN NO_DATA_FOUND THEN
17:17:49 1585  	       var_subscrib_group_id := NULL;
17:17:49 1586  	 END;
17:17:49 1587  
17:17:49 1588  	 IF var_subscrib_group_id IS NULL THEN
17:17:49 1589  	   BEGIN
17:17:49 1590  	     SELECT
17:17:49 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
17:17:49 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
17:17:49 1593  	       into
17:17:49 1594  	       var_gc_purchaser_group_id,
17:17:49 1595  	       var_gc_redeemer_group_id
17:17:49 1596  	     FROM
17:17:49 1597  	       GIFT_CERTIFICATE
17:17:49 1598  	     WHERE
17:17:49 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
17:17:49 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
17:17:49 1601  	     EXCEPTION
17:17:49 1602  	       WHEN NO_DATA_FOUND THEN
17:17:49 1603  		 var_gc_purchaser_group_id := NULL;
17:17:49 1604  		 var_gc_redeemer_group_id  := NULL;
17:17:49 1605  	   END;
17:17:49 1606  	 END IF;
17:17:49 1607  
17:17:49 1608  	 IF var_subscrib_group_id IS NULL
17:17:49 1609  	   AND var_gc_purchaser_group_id IS NULL
17:17:49 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
17:17:49 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
17:17:49 1612  	 END IF;
17:17:49 1613  
17:17:49 1614  	 OPEN out_group_ids FOR
17:17:49 1615  	 SELECT GROUP_ID FROM (
17:17:49 1616  	   SELECT
17:17:49 1617  	     var_subscrib_group_id as "GROUP_ID"
17:17:49 1618  	   FROM
17:17:49 1619  	     DUAL
17:17:49 1620  	   UNION
17:17:49 1621  	   SELECT
17:17:49 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
17:17:49 1623  	   FROM
17:17:49 1624  	     DUAL
17:17:49 1625  	   UNION
17:17:49 1626  	   SELECT
17:17:49 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
17:17:49 1628  	   FROM
17:17:49 1629  	     DUAL
17:17:49 1630  	 )
17:17:49 1631  	 WHERE
17:17:49 1632  	   GROUP_ID IS NOT NULL;
17:17:49 1633  
17:17:49 1634  EXCEPTION
17:17:49 1635  WHEN BAD_INVOICE_ID THEN
17:17:49 1636  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1637  	   SPROC_NAME, 'No such invoice');
17:17:49 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
17:17:49 1639  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1640  	   SPROC_NAME, 'Could not find account for given invoice');
17:17:49 1641  WHEN OTHERS THEN
17:17:49 1642  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
17:17:49 1645  
17:17:49 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
17:17:49 1647  /*
17:17:49 1648  Throws exceptions:
17:17:49 1649  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1650  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1651  */
17:17:49 1652  	 in_group_id	   IN NUMBER,
17:17:49 1653  	 out_tax_exempt_id OUT VARCHAR2
17:17:49 1654  ) AS
17:17:49 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
17:17:49 1656  -- VARIABLES
17:17:49 1657  -- EXCEPTIONS
17:17:49 1658  BEGIN
17:17:49 1659  
17:17:49 1660  	 SELECT
17:17:49 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
17:17:49 1662  	 FROM
17:17:49 1663  	   ACCOUNT
17:17:49 1664  	 WHERE
17:17:49 1665  	   ACCOUNT.GROUP_ID = in_group_id;
17:17:49 1666  
17:17:49 1667  EXCEPTION
17:17:49 1668  WHEN NO_DATA_FOUND THEN
17:17:49 1669  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1670  	   SPROC_NAME, 'No such account');
17:17:49 1671  WHEN OTHERS THEN
17:17:49 1672  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
17:17:49 1675  
17:17:49 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
17:17:49 1677  /*
17:17:49 1678  Throws exceptions:
17:17:49 1679  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1680  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1681  
17:17:49 1682  Result has two columns:
17:17:49 1683  subscription_id and offer_chain_id
17:17:49 1684  */
17:17:49 1685  	 in_group_id	IN NUMBER,
17:17:49 1686  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1687  ) AS
17:17:49 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
17:17:49 1689  -- Variables
17:17:49 1690  var_account_id NUMBER;
17:17:49 1691  -- Exceptions
17:17:49 1692  BAD_GROUP_ID   EXCEPTION;
17:17:49 1693  BEGIN
17:17:49 1694  
17:17:49 1695  	 BEGIN
17:17:49 1696  	   SELECT
17:17:49 1697  	     ID into var_account_id
17:17:49 1698  	   FROM
17:17:49 1699  	     ACCOUNT
17:17:49 1700  	   WHERE
17:17:49 1701  	     GROUP_ID = in_group_id;
17:17:49 1702  	   EXCEPTION
17:17:49 1703  	     WHEN NO_DATA_FOUND THEN
17:17:49 1704  	       RAISE BAD_GROUP_ID;
17:17:49 1705  	 END;
17:17:49 1706  
17:17:49 1707  	 OPEN out_result_set FOR
17:17:49 1708  	 SELECT
17:17:49 1709  	   S.ID as SUBSCRIPTION_ID,
17:17:49 1710  	   OCHMD.OFFER_CHAIN_ID
17:17:49 1711  	 FROM
17:17:49 1712  	   SUBSCRIPTION S
17:17:49 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
17:17:49 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V15.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
17:17:49 1715  	 WHERE
17:17:49 1716  	   S.ACCOUNT_ID = var_account_id;
17:17:49 1717  
17:17:49 1718  EXCEPTION
17:17:49 1719  WHEN BAD_GROUP_ID THEN
17:17:49 1720  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1721  	   SPROC_NAME, 'No such account');
17:17:49 1722  WHEN OTHERS THEN
17:17:49 1723  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
17:17:49 1726  
17:17:49 1727  /******************************************************************************/
17:17:49 1728  
17:17:49 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
17:17:49 1730  /*
17:17:49 1731  Throws exceptions:
17:17:49 1732  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1733  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:49 1734  
17:17:49 1735  Result has two columns:
17:17:49 1736  subscription_id and offer_chain_id
17:17:49 1737  */
17:17:49 1738  	 in_group_id	    IN NUMBER,
17:17:49 1739  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 1740  ) AS
17:17:49 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
17:17:49 1742  -- VARIABLES
17:17:49 1743  var_account_id NUMBER;
17:17:49 1744  -- EXCEPTIONS
17:17:49 1745  BAD_GROUP_ID EXCEPTION;
17:17:49 1746  BEGIN
17:17:49 1747  
17:17:49 1748  	 BEGIN
17:17:49 1749  	   SELECT
17:17:49 1750  	     A.ID INTO var_account_id
17:17:49 1751  	   FROM
17:17:49 1752  	     ACCOUNT A
17:17:49 1753  	   WHERE
17:17:49 1754  	     A.GROUP_ID = in_group_id;
17:17:49 1755  	   EXCEPTION
17:17:49 1756  	     WHEN NO_DATA_FOUND THEN
17:17:49 1757  	       RAISE BAD_GROUP_ID;
17:17:49 1758  	 END;
17:17:49 1759  
17:17:49 1760  	 OPEN out_result_set FOR
17:17:49 1761  	 SELECT
17:17:49 1762  	   S.ID
17:17:49 1763  	 FROM
17:17:49 1764  	   SUBSCRIPTION S
17:17:49 1765  	 WHERE
17:17:49 1766  	   S.ACCOUNT_ID = var_account_id
17:17:49 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
17:17:49 1768  
17:17:49 1769  EXCEPTION
17:17:49 1770  WHEN BAD_GROUP_ID THEN
17:17:49 1771  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1772  	   SPROC_NAME, 'No such account');
17:17:49 1773  WHEN OTHERS THEN
17:17:49 1774  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1776  END GET_USR_ALL_SBSCR_IDS;
17:17:49 1777  
17:17:49 1778  /******************************************************************************/
17:17:49 1779  
17:17:49 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
17:17:49 1781  /*
17:17:49 1782  Throws exceptions:
17:17:49 1783  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1784  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1785  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:49 1786  
17:17:49 1787  Result has two columns:
17:17:49 1788  subscription_id and offer_chain_id
17:17:49 1789  */
17:17:49 1790  	 in_group_id	    IN NUMBER,
17:17:49 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
17:17:49 1792  	 out_result_set     OUT SYS_REFCURSOR
17:17:49 1793  ) AS
17:17:49 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
17:17:49 1795  -- VARIABLES
17:17:49 1796  var_account_id NUMBER;
17:17:49 1797  -- EXCEPTIONS
17:17:49 1798  BAD_GROUP_ID	   EXCEPTION;
17:17:49 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
17:17:49 1800  BEGIN
17:17:49 1801  
17:17:49 1802  	 IF in_offer_chain_ids IS NULL THEN
17:17:49 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
17:17:49 1804  	 END IF;
17:17:49 1805  
17:17:49 1806  	 BEGIN
17:17:49 1807  	   SELECT
17:17:49 1808  	     A.ID INTO var_account_id
17:17:49 1809  	   FROM
17:17:49 1810  	     ACCOUNT A
17:17:49 1811  	   WHERE
17:17:49 1812  	     A.GROUP_ID = in_group_id;
17:17:49 1813  	   EXCEPTION
17:17:49 1814  	     WHEN NO_DATA_FOUND THEN
17:17:49 1815  	       RAISE BAD_GROUP_ID;
17:17:49 1816  	 END;
17:17:49 1817  
17:17:49 1818  	 OPEN out_result_set FOR
17:17:49 1819  	 SELECT
17:17:49 1820  	   S.ID
17:17:49 1821  	 FROM
17:17:49 1822  	   SUBSCRIPTION S
17:17:49 1823  	 WHERE
17:17:49 1824  	   S.ACCOUNT_ID = var_account_id
17:17:49 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
17:17:49 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
17:17:49 1827  
17:17:49 1828  EXCEPTION
17:17:49 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
17:17:49 1830  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
17:17:49 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
17:17:49 1832  WHEN BAD_GROUP_ID THEN
17:17:49 1833  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:49 1834  	   SPROC_NAME, 'No such account');
17:17:49 1835  WHEN OTHERS THEN
17:17:49 1836  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
17:17:49 1839  
17:17:49 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
17:17:49 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
17:17:49 1842  	 in_expiration_date IN DATE,
17:17:49 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
17:17:49 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
17:17:49 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
17:17:49 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
17:17:49 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
17:17:49 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
17:17:49 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
17:17:49 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
17:17:49 1851  	 out_result_set OUT SYS_REFCURSOR
17:17:49 1852  ) AS
17:17:49 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
17:17:49 1854  BEGIN
17:17:49 1855  
17:17:49 1856  	 OPEN out_result_set FOR
17:17:49 1857  	     SELECT
17:17:49 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
17:17:49 1859  	     FROM
17:17:49 1860  	       account a,
17:17:49 1861  	       credit_card cc
17:17:49 1862  	     WHERE
17:17:49 1863  	       cc.expiration_date = in_expiration_date and
17:17:49 1864  	       cc.last_four_cc = in_last_four_cc and
17:17:49 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
17:17:49 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
17:17:49 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
17:17:49 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
17:17:49 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
17:17:49 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
17:17:49 1871  	       a.id = cc.account_id and
17:17:49 1872  	       rownum >= in_lower_bound and
17:17:49 1873  	       rownum <= in_upper_bound
17:17:49 1874  	   ;
17:17:49 1875  
17:17:49 1876  EXCEPTION
17:17:49 1877  WHEN OTHERS THEN
17:17:49 1878  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
17:17:49 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
17:17:49 1880  END GET_GROUP_IDS_BY_CC_INFO;
17:17:49 1881  
17:17:49 1882  END PROCS_ACCOUNT_V15;
17:17:49 1883  .
17:17:49 SQL> /

Package body created.

Elapsed: 00:00:00.12
17:17:50 SQL> 
17:17:50 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V15" AS
17:17:50   2  
17:17:50   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:50   4  /*
17:17:50   5  Throws exceptions:
17:17:50   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50   8  */
17:17:50   9  	  in_offer_chain_id IN	 NUMBER,
17:17:50  10  	  out_result_set    OUT  SYS_REFCURSOR
17:17:50  11  ) AS
17:17:50  12  BEGIN
17:17:50  13  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_BY_ID (
17:17:50  14  	  in_offer_chain_id => in_offer_chain_id,
17:17:50  15  	  out_result_set => out_result_set
17:17:50  16  	);
17:17:50  17  END GET_OFFER_CHAIN_BY_ID;
17:17:50  18  
17:17:50  19  PROCEDURE GET_PENDING_INVOICES (
17:17:50  20  /*
17:17:50  21  Throws exceptions:
17:17:50  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  23  */
17:17:50  24  	out_result_set1      OUT SYS_REFCURSOR,
17:17:50  25  	out_result_set2      OUT SYS_REFCURSOR,
17:17:50  26  	out_result_set3      OUT SYS_REFCURSOR,
17:17:50  27  	in_row_number	     IN NUMBER DEFAULT NULL
17:17:50  28  ) AS
17:17:50  29  BEGIN
17:17:50  30  	PROCS_INVOICE_V15.GET_PENDING_INVOICES(
17:17:50  31  	  out_result_set1,
17:17:50  32  	  out_result_set2,
17:17:50  33  	  out_result_set3,
17:17:50  34  	  in_row_number
17:17:50  35  	);
17:17:50  36  END GET_PENDING_INVOICES;
17:17:50  37  
17:17:50  38  /********************************************************/
17:17:50  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
17:17:50  40  /*
17:17:50  41  Throws exceptions:
17:17:50  42  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  43  */
17:17:50  44  	out_result_set	    OUT SYS_REFCURSOR,
17:17:50  45  	in_row_number	    IN NUMBER DEFAULT NULL
17:17:50  46  ) AS
17:17:50  47  BEGIN
17:17:50  48  	PROCS_CHARGE_V15.GET_PENDING_REFUND_CHARGES(
17:17:50  49  	  out_result_set,
17:17:50  50  	  in_row_number
17:17:50  51  	);
17:17:50  52  END GET_PENDING_REFUND_CHARGES;
17:17:50  53  /********************************************************/
17:17:50  54  
17:17:50  55  PROCEDURE GET_UNPROCESSED_CHARGES (
17:17:50  56  /*
17:17:50  57  Throws exceptions:
17:17:50  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  60  */
17:17:50  61  	in_invoice_id  IN NUMBER,
17:17:50  62  	out_result_set OUT SYS_REFCURSOR
17:17:50  63  ) AS
17:17:50  64  BEGIN
17:17:50  65  	PROCS_CHARGE_V15.GET_UNPROCESSED_CHARGES(
17:17:50  66  	  in_invoice_id,
17:17:50  67  	  out_result_set
17:17:50  68  	);
17:17:50  69  END GET_UNPROCESSED_CHARGES;
17:17:50  70  
17:17:50  71  /********************************************************/
17:17:50  72  
17:17:50  73  PROCEDURE GET_PROCESSED_CHARGES (
17:17:50  74  /*
17:17:50  75  Throws exceptions:
17:17:50  76  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50  77  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  78  */
17:17:50  79  	in_invoice_id  IN NUMBER,
17:17:50  80  	out_result_set OUT SYS_REFCURSOR
17:17:50  81  ) AS
17:17:50  82  BEGIN
17:17:50  83  	PROCS_CHARGE_V15.GET_PROCESSED_CHARGES(
17:17:50  84  	  in_invoice_id,
17:17:50  85  	  out_result_set
17:17:50  86  	);
17:17:50  87  END GET_PROCESSED_CHARGES;
17:17:50  88  
17:17:50  89  /********************************************************/
17:17:50  90  
17:17:50  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
17:17:50  92  /*
17:17:50  93  Throws exceptions:
17:17:50  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  95  */
17:17:50  96  	in_transaction_id	      IN NUMBER,
17:17:50  97  	in_transaction_attempt_status IN NUMBER,
17:17:50  98  	out_result_set		      OUT SYS_REFCURSOR
17:17:50  99  ) AS
17:17:50 100  BEGIN
17:17:50 101  	PROCS_TRANSACTION_V15.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
17:17:50 102  	  in_transaction_id,
17:17:50 103  	  in_transaction_attempt_status,
17:17:50 104  	  out_result_set
17:17:50 105  	);
17:17:50 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
17:17:50 107  
17:17:50 108  /********************************************************/
17:17:50 109  
17:17:50 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
17:17:50 111  /*
17:17:50 112  Throws exceptions:
17:17:50 113  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 114  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 115  */
17:17:50 116  	in_transaction_attempt_id     IN NUMBER,
17:17:50 117  	in_transaction_attempt_status IN NUMBER
17:17:50 118  ) AS
17:17:50 119  BEGIN
17:17:50 120  	PROCS_TRANSACTION_V15.UPDATE_TRNSCTN_ATTEMPT_STATUS(
17:17:50 121  	   in_transaction_attempt_id,
17:17:50 122  	   in_transaction_attempt_status
17:17:50 123  	);
17:17:50 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
17:17:50 125  
17:17:50 126  /********************************************************/
17:17:50 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
17:17:50 128  /*
17:17:50 129  Throws exceptions:
17:17:50 130  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 131  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 132  */
17:17:50 133  	in_invoice_id	IN  NUMBER,
17:17:50 134  	out_result_set OUT SYS_REFCURSOR
17:17:50 135  ) AS
17:17:50 136  BEGIN
17:17:50 137  	PROCS_TRANSACTION_V15.GET_CLOSED_REFUNDS_BY_INVOICE(
17:17:50 138  	   in_invoice_id,
17:17:50 139  	   out_result_set
17:17:50 140  	);
17:17:50 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
17:17:50 142  
17:17:50 143  /********************************************************/
17:17:50 144  
17:17:50 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
17:17:50 146  /*
17:17:50 147  Throws exceptions:
17:17:50 148  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 149  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 150  */
17:17:50 151  	in_transaction_attempt_id IN NUMBER,
17:17:50 152  	in_updated_by		  IN VARCHAR2
17:17:50 153  ) AS
17:17:50 154  BEGIN
17:17:50 155  	PROCS_TRANSACTION_V15.UPDATE_TRNSCTN_ATTEMPT_TIME(
17:17:50 156  	  in_transaction_attempt_id,
17:17:50 157  	  in_updated_by
17:17:50 158  	);
17:17:50 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
17:17:50 160  
17:17:50 161  /********************************************************/
17:17:50 162  
17:17:50 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
17:17:50 164  /*
17:17:50 165  Throws exceptions:
17:17:50 166  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 167  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 168  */
17:17:50 169  	in_transaction_id	   IN NUMBER,
17:17:50 170  	in_trans_attempt_status    IN NUMBER,
17:17:50 171  	in_external_status_code    IN VARCHAR2,
17:17:50 172  	in_external_status_message IN VARCHAR2,
17:17:50 173  	in_created_by		   IN VARCHAR2,
17:17:50 174  	in_ext_transaction_id	   IN VARCHAR2,
17:17:50 175  	out_transaction_attempt_id OUT NUMBER
17:17:50 176  ) AS
17:17:50 177  BEGIN
17:17:50 178  	PROCS_TRANSACTION_V15.CREATE_TRANSACTION_ATTEMPT(
17:17:50 179  	  in_transaction_id,
17:17:50 180  	  in_trans_attempt_status,
17:17:50 181  	  in_external_status_code,
17:17:50 182  	  in_external_status_message,
17:17:50 183  	  in_created_by,
17:17:50 184  	  in_ext_transaction_id,
17:17:50 185  	  out_transaction_attempt_id
17:17:50 186  	);
17:17:50 187  END CREATE_TRANSACTION_ATTEMPT;
17:17:50 188  
17:17:50 189  /********************************************************/
17:17:50 190  
17:17:50 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
17:17:50 192  /*
17:17:50 193  Throws exceptions:
17:17:50 194  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 195  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 196  */
17:17:50 197  	in_transaction_attempt_id IN NUMBER,
17:17:50 198  	in_ext_status_code	  IN VARCHAR2,
17:17:50 199  	in_ext_status_message	  IN VARCHAR2,
17:17:50 200  	in_ext_transaction_id	  IN VARCHAR2
17:17:50 201  ) AS
17:17:50 202  BEGIN
17:17:50 203  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_ATTEMPT_INF(
17:17:50 204  	  in_transaction_attempt_id,
17:17:50 205  	  in_ext_status_code,
17:17:50 206  	  in_ext_status_message,
17:17:50 207  	  in_ext_transaction_id
17:17:50 208  	);
17:17:50 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
17:17:50 210  
17:17:50 211  /********************************************************/
17:17:50 212  
17:17:50 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
17:17:50 214  /*
17:17:50 215  Throws exceptions:
17:17:50 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 218  */
17:17:50 219  	in_transaction_id	 IN NUMBER,
17:17:50 220  	in_updated_by		 IN VARCHAR2,
17:17:50 221  	in_transaction_status_id IN NUMBER
17:17:50 222  ) AS
17:17:50 223  BEGIN
17:17:50 224  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
17:17:50 225  	  in_transaction_id,
17:17:50 226  	  in_updated_by,
17:17:50 227  	  in_transaction_status_id
17:17:50 228  	);
17:17:50 229  END UPDATE_TRANSACTION_STATUS;
17:17:50 230  
17:17:50 231  /********************************************************/
17:17:50 232  
17:17:50 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
17:17:50 234  /*
17:17:50 235  Throws exceptions:
17:17:50 236  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 237  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 238  */
17:17:50 239  	in_transaction_id IN  NUMBER,
17:17:50 240  	out_attempts_num  OUT NUMBER
17:17:50 241  ) AS
17:17:50 242  BEGIN
17:17:50 243  	PROCS_TRANSACTION_V15.GET_FAILED_ATTEMPTS_NUMBER(
17:17:50 244  	  in_transaction_id,
17:17:50 245  	  out_attempts_num
17:17:50 246  	);
17:17:50 247  END GET_FAILED_ATTEMPTS_NUMBER;
17:17:50 248  
17:17:50 249  /********************************************************/
17:17:50 250  
17:17:50 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
17:17:50 252  /*
17:17:50 253  Throws exceptions:
17:17:50 254  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 255  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 256  */
17:17:50 257  	in_transaction_id IN  NUMBER,
17:17:50 258  	out_is_successfull  OUT NUMBER
17:17:50 259  ) AS
17:17:50 260  BEGIN
17:17:50 261  	PROCS_TRANSACTION_V15.IS_TRANSACTION_SUCCESSFULL(
17:17:50 262  	  in_transaction_id,
17:17:50 263  	  out_is_successfull
17:17:50 264  	);
17:17:50 265  END IS_TRANSACTION_SUCCESSFULL;
17:17:50 266  /********************************************************/
17:17:50 267  
17:17:50 268  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:50 269  /*
17:17:50 270  Throws exceptions:
17:17:50 271  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 272  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 273  */
17:17:50 274  	in_invoice_id		       IN NUMBER,
17:17:50 275  	in_invoice_status_id	       IN NUMBER,
17:17:50 276  	in_updated_by		       IN VARCHAR2
17:17:50 277  ) AS
17:17:50 278  BEGIN
17:17:50 279  	PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
17:17:50 280  	  in_invoice_id,
17:17:50 281  	  in_invoice_status_id,
17:17:50 282  	  in_updated_by
17:17:50 283  	);
17:17:50 284  END UPDATE_INVOICE_STATUS;
17:17:50 285  
17:17:50 286  /********************************************************/
17:17:50 287  
17:17:50 288  PROCEDURE SUSPEND_SUBSCRIPTION(
17:17:50 289  /*
17:17:50 290  Throws exceptions:
17:17:50 291  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 292  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:50 293  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 294  */
17:17:50 295  	  in_subs_id	IN NUMBER ,
17:17:50 296  	  in_updated_by IN VARCHAR2
17:17:50 297  ) AS
17:17:50 298  BEGIN
17:17:50 299  	PROCS_SUBSCRIPTION_V15.SUSPEND_SUBSCRIPTION(
17:17:50 300  	  in_subs_id,
17:17:50 301  	  in_updated_by
17:17:50 302  	);
17:17:50 303  END SUSPEND_SUBSCRIPTION;
17:17:50 304  
17:17:50 305  /********************************************************/
17:17:50 306  
17:17:50 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:50 308  /*
17:17:50 309  Throws exceptions:
17:17:50 310  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 312  */
17:17:50 313  	in_credit_card_id IN  NUMBER,
17:17:50 314  	out_result_set	  OUT SYS_REFCURSOR
17:17:50 315  ) AS
17:17:50 316  BEGIN
17:17:50 317  	PROCS_FIN_INSTRUMENTS_V15.GET_CREDIT_CARD_BY_ID(
17:17:50 318  	  in_credit_card_id,
17:17:50 319  	  out_result_set
17:17:50 320  	);
17:17:50 321  END GET_CREDIT_CARD_BY_ID;
17:17:50 322  
17:17:50 323  /*********************************************************/
17:17:50 324  
17:17:50 325  PROCEDURE GET_TRANSACTION_AMOUNT (
17:17:50 326  /*
17:17:50 327  Throws exceptions:
17:17:50 328  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 329  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 330  */
17:17:50 331  	in_transaction_id      IN  NUMBER,
17:17:50 332  	out_transaction_amount OUT NUMBER
17:17:50 333  ) AS
17:17:50 334  BEGIN
17:17:50 335  	PROCS_TRANSACTION_V15.GET_TRANSACTION_AMOUNT(
17:17:50 336  	  in_transaction_id,
17:17:50 337  	  out_transaction_amount
17:17:50 338  	);
17:17:50 339  END GET_TRANSACTION_AMOUNT;
17:17:50 340  
17:17:50 341  /***********************************************************/
17:17:50 342  
17:17:50 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
17:17:50 344  /*
17:17:50 345  Throws exceptions:
17:17:50 346  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 347  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 348  */
17:17:50 349  	in_invoice_id  IN  NUMBER,
17:17:50 350  	out_account_id OUT NUMBER
17:17:50 351  ) AS
17:17:50 352  BEGIN
17:17:50 353  	PROCS_INVOICE_V15.GET_ACCOUNT_BY_INVOICE_ID(
17:17:50 354  	  in_invoice_id,
17:17:50 355  	  out_account_id
17:17:50 356  	);
17:17:50 357  END GET_ACCOUNT_BY_INVOICE_ID;
17:17:50 358  
17:17:50 359  /************************************************************/
17:17:50 360  
17:17:50 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
17:17:50 362  /*
17:17:50 363  Throws exceptions:
17:17:50 364  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:50 365  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 366  */
17:17:50 367  	in_gift_certificate_id IN NUMBER,
17:17:50 368  	out_result_set	       OUT SYS_REFCURSOR
17:17:50 369  ) AS
17:17:50 370  BEGIN
17:17:50 371  	PROCS_FIN_INSTRUMENTS_V15.GET_GIFT_CERTIFICATE_BY_ID (
17:17:50 372  	  in_gift_certificate_id,
17:17:50 373  	  out_result_set
17:17:50 374  	);
17:17:50 375  END GET_GIFT_CERTIFICATE_BY_ID;
17:17:50 376  
17:17:50 377  /**************************************************************/
17:17:50 378  
17:17:50 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
17:17:50 380  /*
17:17:50 381  Throws exceptions:
17:17:50 382  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 383  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 384  */
17:17:50 385  	in_charge_id	    IN NUMBER,
17:17:50 386  	out_subscription_id OUT NUMBER
17:17:50 387  ) AS
17:17:50 388  BEGIN
17:17:50 389  	PROCS_CHARGE_V15.GET_SUBSCR_ID_BY_CHARGE_ID(
17:17:50 390  	  in_charge_id,
17:17:50 391  	  out_subscription_id
17:17:50 392  	);
17:17:50 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
17:17:50 394  
17:17:50 395  /**************************************************************/
17:17:50 396  
17:17:50 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
17:17:50 398  /*
17:17:50 399  Throws exceptions:
17:17:50 400  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 401  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 402  */
17:17:50 403  	in_gift_certificate_id IN NUMBER,
17:17:50 404  	in_charge_id	       IN NUMBER,
17:17:50 405  	out_result	       OUT NUMBER
17:17:50 406  ) AS
17:17:50 407  BEGIN
17:17:50 408  	PROCS_FIN_INSTRUMENTS_V15.IS_GCERT_FOR_PROPER_OFFER (
17:17:50 409  	  in_gift_certificate_id,
17:17:50 410  	  in_charge_id,
17:17:50 411  	  out_result
17:17:50 412  	);
17:17:50 413  END IS_GCERT_FOR_PROPER_OFFER;
17:17:50 414  
17:17:50 415  /**************************************************************/
17:17:50 416  
17:17:50 417  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:50 418  /*
17:17:50 419  Throws exceptions:
17:17:50 420  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 421  */
17:17:50 422  	  in_subscription_id IN  NUMBER,
17:17:50 423  	  out_result_set      OUT SYS_REFCURSOR
17:17:50 424  ) AS
17:17:50 425  BEGIN
17:17:50 426  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTION_INFO (
17:17:50 427  	  in_subscription_id,
17:17:50 428  	  out_result_set
17:17:50 429  	);
17:17:50 430  END GET_SUBSCRIPTION_INFO;
17:17:50 431  
17:17:50 432  /****************************************************************/
17:17:50 433  
17:17:50 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:50 435  /*
17:17:50 436  Throws exceptions:
17:17:50 437  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 438  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 439  */
17:17:50 440  	in_invoice_id IN  NUMBER,
17:17:50 441  	out_amount    OUT NUMBER
17:17:50 442  ) AS
17:17:50 443  BEGIN
17:17:50 444  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
17:17:50 445  	  in_invoice_id,
17:17:50 446  	  out_amount
17:17:50 447  	);
17:17:50 448  END CALCULATE_INVOICE_AMOUNT;
17:17:50 449  
17:17:50 450  /****************************************************************/
17:17:50 451  
17:17:50 452  PROCEDURE GET_TRANSACTION_BY_ID (
17:17:50 453  /*
17:17:50 454  Throws exceptions:
17:17:50 455  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 456  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 457  */
17:17:50 458  	in_transaction_id IN NUMBER,
17:17:50 459  	out_result_set	  OUT SYS_REFCURSOR
17:17:50 460  ) AS
17:17:50 461  BEGIN
17:17:50 462  	PROCS_TRANSACTION_V15.GET_TRANSACTION_BY_ID(
17:17:50 463  	  in_transaction_id,
17:17:50 464  	  out_result_set
17:17:50 465  	);
17:17:50 466  END GET_TRANSACTION_BY_ID;
17:17:50 467  
17:17:50 468  /****************************************************************/
17:17:50 469  
17:17:50 470  PROCEDURE UPDATE_CHARGE_STATUS (
17:17:50 471  /*
17:17:50 472  Throws exceptions:
17:17:50 473  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 474  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 475  */
17:17:50 476  	in_charge_id	    IN CHARGE.ID%TYPE,
17:17:50 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
17:17:50 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
17:17:50 479  ) AS
17:17:50 480  BEGIN
17:17:50 481  	PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
17:17:50 482  	  in_charge_id,
17:17:50 483  	  in_charge_status_id,
17:17:50 484  	  in_updated_by
17:17:50 485  	);
17:17:50 486  END UPDATE_CHARGE_STATUS;
17:17:50 487  
17:17:50 488  /****************************************************************/
17:17:50 489  
17:17:50 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:50 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:50 492  	out_result_set OUT SYS_REFCURSOR
17:17:50 493  ) AS
17:17:50 494  BEGIN
17:17:50 495  	PROCS_FIN_INSTRUMENTS_V15.GET_GC_BY_PURCH_INVOICE_ID(
17:17:50 496  	  in_invoice_id,
17:17:50 497  	  out_result_set
17:17:50 498  	);
17:17:50 499  END GET_GC_BY_PURCH_INVOICE_ID;
17:17:50 500  
17:17:50 501  /****************************************************************/
17:17:50 502  
17:17:50 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
17:17:50 504  /*
17:17:50 505  Throws exceptions:
17:17:50 506  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 507  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
17:17:50 508  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 509  */
17:17:50 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
17:17:50 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
17:17:50 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
17:17:50 513  ) AS
17:17:50 514  BEGIN
17:17:50 515  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_ORDER_ID(
17:17:50 516  	  in_transaction_id,
17:17:50 517  	  in_order_id,
17:17:50 518  	  in_updated_by
17:17:50 519  	);
17:17:50 520  END UPDATE_TRANSACTION_ORDER_ID;
17:17:50 521  
17:17:50 522  /****************************************************************/
17:17:50 523  
17:17:50 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
17:17:50 525  /*
17:17:50 526  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 527  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 528  */
17:17:50 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
17:17:50 530  	in_subscription_id IN NUMBER,
17:17:50 531  	out_result_set	   OUT SYS_REFCURSOR
17:17:50 532  ) AS
17:17:50 533  BEGIN
17:17:50 534  	PROCS_SUBSCRIPTION_V15.GET_ACTIVE_INVOICES_IDS(
17:17:50 535  	  in_subscription_id,
17:17:50 536  	  out_result_set
17:17:50 537  	);
17:17:50 538  END GET_ACTIVE_INVOICES_IDS;
17:17:50 539  
17:17:50 540  /****************************************************************/
17:17:50 541  
17:17:50 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
17:17:50 543  /*
17:17:50 544  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 545  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 546  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:50 547  */
17:17:50 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
17:17:50 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
17:17:50 550  -- norlov: in_refundable	      IN refund enabled
17:17:50 551  	in_invoice_id	     IN NUMBER,
17:17:50 552  	in_updated_by	     IN VARCHAR2,
17:17:50 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
17:17:50 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
17:17:50 555  ) AS
17:17:50 556  BEGIN
17:17:50 557  	PROCS_SUBSCRIPTION_V15.CANCEL_SUBSCRIPTION_INVOICE(
17:17:50 558  	  in_invoice_id,
17:17:50 559  	  in_updated_by,
17:17:50 560  	  in_refundable
17:17:50 561  	);
17:17:50 562  END CANCEL_SUBSCRIPTION_INVOICE;
17:17:50 563  
17:17:50 564  /****************************************************************/
17:17:50 565  
17:17:50 566  PROCEDURE FINALIZE_CANCELATION (
17:17:50 567  /*
17:17:50 568  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 569  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 570  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:50 571  */
17:17:50 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
17:17:50 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
17:17:50 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
17:17:50 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
17:17:50 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
17:17:50 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
17:17:50 578  	in_subscription_id    IN NUMBER,
17:17:50 579  	in_cancelation_reason IN VARCHAR2,
17:17:50 580  	in_cancelation_date   IN DATE,
17:17:50 581  	in_note 	      IN VARCHAR2,
17:17:50 582  	in_agent_id	      IN NUMBER,
17:17:50 583  	in_updated_by	      IN VARCHAR2
17:17:50 584  ) AS
17:17:50 585  BEGIN
17:17:50 586  	PROCS_SUBSCRIPTION_V15.FINALIZE_CANCELATION(
17:17:50 587  	  in_subscription_id,
17:17:50 588  	  in_cancelation_reason,
17:17:50 589  	  in_cancelation_date,
17:17:50 590  	  in_note,
17:17:50 591  	  in_agent_id,
17:17:50 592  	  in_updated_by
17:17:50 593  	);
17:17:50 594  END FINALIZE_CANCELATION;
17:17:50 595  
17:17:50 596  /****************************************************************/
17:17:50 597  
17:17:50 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
17:17:50 599  /*
17:17:50 600  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 601  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 602  */
17:17:50 603  	in_subscription_id IN NUMBER,
17:17:50 604  	out_result_set	   OUT SYS_REFCURSOR
17:17:50 605  ) AS
17:17:50 606  BEGIN
17:17:50 607  	PROCS_SUBSCRIPTION_V15.GET_SUBSCR_PROD_OFFERRINGS(
17:17:50 608  	  in_subscription_id,
17:17:50 609  	  out_result_set
17:17:50 610  	);
17:17:50 611  END GET_SUBSCR_PROD_OFFERRINGS;
17:17:50 612  
17:17:50 613  /****************************************************************/
17:17:50 614  
17:17:50 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:50 616  /*
17:17:50 617  Throws exceptions (codes):
17:17:50 618  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 619  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 620  */
17:17:50 621  	in_offer_chain_id IN NUMBER,
17:17:50 622  	in_meta_data_name IN VARCHAR2,
17:17:50 623  	out_result_set	  OUT SYS_REFCURSOR
17:17:50 624  )AS
17:17:50 625  BEGIN
17:17:50 626  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_META_DATA(
17:17:50 627  	  in_offer_chain_id,
17:17:50 628  	  in_meta_data_name,
17:17:50 629  	  out_result_set
17:17:50 630  	);
17:17:50 631  END GET_OFFER_CHAIN_META_DATA;
17:17:50 632  
17:17:50 633  /****************************************************************/
17:17:50 634  
17:17:50 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:50 636  /*
17:17:50 637  Throws exceptions (codes):
17:17:50 638  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 639  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 640  */
17:17:50 641  	in_product_offering_id IN NUMBER,
17:17:50 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
17:17:50 643  	out_result_set	       OUT SYS_REFCURSOR
17:17:50 644  )AS
17:17:50 645  BEGIN
17:17:50 646  	PROCS_OFFER_CHAIN_V15.GET_PRODUCT_OFFERING_META_DATA(
17:17:50 647  	  in_product_offering_id,
17:17:50 648  	  in_meta_data_name,
17:17:50 649  	  out_result_set
17:17:50 650  	);
17:17:50 651  END GET_PRODUCT_OFFERING_META_DATA;
17:17:50 652  
17:17:50 653  /****************************************************************/
17:17:50 654  
17:17:50 655  PROCEDURE READ_ACCOUNT (
17:17:50 656  	in_account_id  IN ACCOUNT.ID%TYPE,
17:17:50 657  	out_result_set OUT SYS_REFCURSOR
17:17:50 658  )AS
17:17:50 659  BEGIN
17:17:50 660  	PROCS_ACCOUNT_CRU_V15.READ_ACCOUNT(
17:17:50 661  	  in_account_id,
17:17:50 662  	  out_result_set
17:17:50 663  	);
17:17:50 664  END READ_ACCOUNT;
17:17:50 665  
17:17:50 666  /****************************************************************/
17:17:50 667  
17:17:50 668  PROCEDURE GET_COLLECTED_CHARGES (
17:17:50 669  /*
17:17:50 670  Throws exceptions:
17:17:50 671  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 672  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 673  */
17:17:50 674  	in_invoice_id  IN NUMBER,
17:17:50 675  	out_result_set OUT SYS_REFCURSOR
17:17:50 676  ) AS
17:17:50 677  BEGIN
17:17:50 678  	PROCS_CHARGE_V15.GET_COLLECTED_CHARGES(
17:17:50 679  	  in_invoice_id,
17:17:50 680  	  out_result_set
17:17:50 681  	);
17:17:50 682  END GET_COLLECTED_CHARGES;
17:17:50 683  
17:17:50 684  /****************************************************************/
17:17:50 685  
17:17:50 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
17:17:50 687  /*
17:17:50 688  Throws exceptions:
17:17:50 689  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:50 690  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 691  */
17:17:50 692  	in_invoice_id IN NUMBER,
17:17:50 693  	out_group_ids OUT SYS_REFCURSOR
17:17:50 694  ) AS
17:17:50 695  BEGIN
17:17:50 696  
17:17:50 697  	PROCS_ACCOUNT_V15.GET_GROUPS_ID_BY_INVOICE_ID(
17:17:50 698  	  in_invoice_id,
17:17:50 699  	  out_group_ids
17:17:50 700  	);
17:17:50 701  
17:17:50 702  END GET_GROUPS_ID_BY_INVOICE_ID;
17:17:50 703  
17:17:50 704  /****************************************************************/
17:17:50 705  
17:17:50 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:50 707  /*
17:17:50 708  Throws exceptions:
17:17:50 709  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:50 710  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 711  */
17:17:50 712  	in_group_id IN NUMBER,
17:17:50 713  	out_account_id	OUT NUMBER
17:17:50 714  ) AS
17:17:50 715  BEGIN
17:17:50 716  
17:17:50 717  	PROCS_ACCOUNT_V15.GET_ACCOUNT_ID_BY_GROUP_ID(
17:17:50 718  	  in_group_id,
17:17:50 719  	  out_account_id
17:17:50 720  	);
17:17:50 721  
17:17:50 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
17:17:50 723  
17:17:50 724  /****************************************************************/
17:17:50 725  
17:17:50 726  PROCEDURE LOCK_ACCOUNT (
17:17:50 727  	in_group_id    IN NUMBER,
17:17:50 728  	in_lock_key    IN VARCHAR2,
17:17:50 729  	in_seconds_num IN NUMBER,
17:17:50 730  	in_created_by  IN VARCHAR2,
17:17:50 731  	in_reason      IN VARCHAR2
17:17:50 732  ) AS
17:17:50 733  BEGIN
17:17:50 734  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
17:17:50 735  	  in_group_id,
17:17:50 736  	  in_lock_key,
17:17:50 737  	  in_seconds_num,
17:17:50 738  	  in_created_by,
17:17:50 739  	  in_reason
17:17:50 740  	);
17:17:50 741  END LOCK_ACCOUNT;
17:17:50 742  
17:17:50 743  /****************************************************************/
17:17:50 744  
17:17:50 745  PROCEDURE RELEASE_LOCK (
17:17:50 746  	in_group_id IN NUMBER,
17:17:50 747  	in_lock_key IN VARCHAR2
17:17:50 748  ) AS
17:17:50 749  BEGIN
17:17:50 750  	PROCS_LOCKING_V15.RELEASE_LOCK(
17:17:50 751  	  in_group_id,
17:17:50 752  	  in_lock_key
17:17:50 753  	);
17:17:50 754  END RELEASE_LOCK;
17:17:50 755  
17:17:50 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
17:17:50 757  	in_invoice_id		    IN NUMBER,
17:17:50 758  	out_order_id		    OUT VARCHAR2,
17:17:50 759  	out_external_transaction_id OUT VARCHAR2
17:17:50 760  ) AS
17:17:50 761  BEGIN
17:17:50 762  	PROCS_INVOICE_V15.GET_PAYMENT_INFO_BY_INVOICE_ID(
17:17:50 763  	  in_invoice_id,
17:17:50 764  	  out_order_id,
17:17:50 765  	  out_external_transaction_id
17:17:50 766  	);
17:17:50 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
17:17:50 768  
17:17:50 769  /******************************************************************************/
17:17:50 770  
17:17:50 771  PROCEDURE GET_PAYPAL_BY_ID (
17:17:50 772  	in_paypal_id   IN  NUMBER,
17:17:50 773  	out_result_set OUT SYS_REFCURSOR
17:17:50 774  ) AS
17:17:50 775  BEGIN
17:17:50 776  	PROCS_FIN_INSTRUMENTS_V15.GET_PAYPAL_BY_ID(
17:17:50 777  	  in_paypal_id,
17:17:50 778  	  out_result_set
17:17:50 779  	);
17:17:50 780  END GET_PAYPAL_BY_ID;
17:17:50 781  
17:17:50 782  PROCEDURE GET_ATTEMPT_NUMBER (
17:17:50 783  /*
17:17:50 784  Throws exceptions:
17:17:50 785  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 786  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 787  */
17:17:50 788  	in_charge_id   in  number,
17:17:50 789  	out_attempt_count out number
17:17:50 790  ) as
17:17:50 791  begin
17:17:50 792  	PROCS_TRANSACTION_V15.GET_ATTEMPT_NUMBER(
17:17:50 793  	  in_charge_id,
17:17:50 794  	  out_attempt_count
17:17:50 795  	);
17:17:50 796  end get_attempt_number;
17:17:50 797  
17:17:50 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:50 799  	in_offer_chain_id	 IN NUMBER,
17:17:50 800  	in_action_name		 IN VARCHAR2,
17:17:50 801  	out_notification_type_id out number
17:17:50 802  ) as
17:17:50 803  begin
17:17:50 804  	PROCS_OFFER_CHAIN_V15.GET_NOTIFICATION_TYPE_ID(
17:17:50 805  	  in_offer_chain_id,
17:17:50 806  	  in_action_name,
17:17:50 807  	  out_notification_type_id
17:17:50 808  	);
17:17:50 809  end GET_NOTIFICATION_TYPE_ID;
17:17:50 810  
17:17:50 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
17:17:50 812  /*
17:17:50 813  Throws exceptions:
17:17:50 814  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 815  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 816  */
17:17:50 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:50 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
17:17:50 819  ) AS
17:17:50 820  BEGIN
17:17:50 821  PROCS_FIN_INSTRUMENTS_V15.GET_GC_ID_BY_PURCH_INVOICE_ID(
17:17:50 822  in_invoice_id,
17:17:50 823  out_gift_certificate_id
17:17:50 824  );
17:17:50 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
17:17:50 826  
17:17:50 827  END PUBLIC_PROCS_BILLING_V15;
17:17:50 828  .
17:17:50 SQL> /

Package body created.

Elapsed: 00:00:00.04
17:17:50 SQL> 
17:17:50 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V15" AS
17:17:50   2  
17:17:50   3  PROCEDURE LOCK_ACCOUNT (
17:17:50   4  	in_group_id    IN NUMBER,
17:17:50   5  	in_lock_key    IN VARCHAR2,
17:17:50   6  	in_seconds_num IN NUMBER,
17:17:50   7  	in_created_by  IN VARCHAR2,
17:17:50   8  	in_reason      IN VARCHAR2
17:17:50   9  ) AS
17:17:50  10  BEGIN
17:17:50  11  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
17:17:50  12  	  in_group_id,
17:17:50  13  	  in_lock_key,
17:17:50  14  	  in_seconds_num,
17:17:50  15  	  in_created_by,
17:17:50  16  	  in_reason
17:17:50  17  	);
17:17:50  18  END LOCK_ACCOUNT;
17:17:50  19  
17:17:50  20  /******************************************************************************/
17:17:50  21  
17:17:50  22  PROCEDURE RELEASE_LOCK (
17:17:50  23  	in_group_id IN NUMBER,
17:17:50  24  	in_lock_key IN VARCHAR2
17:17:50  25  ) AS
17:17:50  26  BEGIN
17:17:50  27  	PROCS_LOCKING_V15.RELEASE_LOCK(
17:17:50  28  	  in_group_id,
17:17:50  29  	  in_lock_key
17:17:50  30  	);
17:17:50  31  END RELEASE_LOCK;
17:17:50  32  
17:17:50  33  END PUBLIC_PROCS_NOTIFICATION_V15;
17:17:50  34  .
17:17:50 SQL> /

Package body created.

Elapsed: 00:00:00.02
17:17:50 SQL> 
17:17:50 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V15" AS
17:17:50   2  
17:17:50   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
17:17:50   4  	out_result_set OUT SYS_REFCURSOR
17:17:50   5  ) AS
17:17:50   6  BEGIN
17:17:50   7  	PROCS_GROUP_ACCOUNT_V15.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
17:17:50   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
17:17:50   9  
17:17:50  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
17:17:50  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
17:17:50  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
17:17:50  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
17:17:50  14  ) AS
17:17:50  15  BEGIN
17:17:50  16  	PROCS_GROUP_ACCOUNT_V15.UPDATE_SS_NEED_ENTITLEMENTS(
17:17:50  17  	  in_sub_share_id => in_sub_share_id,
17:17:50  18  	  in_need_entitlements => in_need_entitlements,
17:17:50  19  	  in_updater => in_updater
17:17:50  20  	);
17:17:50  21  END UPDATE_SS_NEED_ENTITLEMENTS;
17:17:50  22  
17:17:50  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
17:17:50  24  /*
17:17:50  25  Throws exceptions:
17:17:50  26  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50  27  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  28  */
17:17:50  29  	  in_offer_chain_id IN	 NUMBER,
17:17:50  30  	  out_result_set    OUT  SYS_REFCURSOR
17:17:50  31  ) AS
17:17:50  32  BEGIN
17:17:50  33  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_BY_ID (
17:17:50  34  	  in_offer_chain_id => in_offer_chain_id,
17:17:50  35  	  out_result_set => out_result_set
17:17:50  36  	);
17:17:50  37  END GET_OFFER_CHAIN_BY_ID;
17:17:50  38  
17:17:50  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
17:17:50  40  /*
17:17:50  41  Throws exceptions (codes):
17:17:50  42  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50  43  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  44  */
17:17:50  45  	in_offer_chain_id IN NUMBER,
17:17:50  46  	in_meta_data_name IN VARCHAR2,
17:17:50  47  	out_result_set	  OUT SYS_REFCURSOR
17:17:50  48  )AS
17:17:50  49  BEGIN
17:17:50  50  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_META_DATA(
17:17:50  51  	  in_offer_chain_id,
17:17:50  52  	  in_meta_data_name,
17:17:50  53  	  out_result_set
17:17:50  54  	);
17:17:50  55  END GET_OFFER_CHAIN_META_DATA;
17:17:50  56  
17:17:50  57  PROCEDURE GET_ENDING_LICENSES (
17:17:50  58  /*
17:17:50  59  Throws exceptions:
17:17:50  60  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  61  */
17:17:50  62  	in_hours_number IN NUMBER,
17:17:50  63  	out_result_set OUT SYS_REFCURSOR
17:17:50  64  ) AS
17:17:50  65  BEGIN
17:17:50  66  	PROCS_LICENSE_V15.GET_ENDING_LICENSES(in_hours_number,out_result_set);
17:17:50  67  END GET_ENDING_LICENSES;
17:17:50  68  
17:17:50  69  PROCEDURE GET_ENDING_LICENSES_CC (
17:17:50  70  /*
17:17:50  71  Throws exceptions:
17:17:50  72  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  73  */
17:17:50  74  	in_hours_number IN NUMBER,
17:17:50  75  	out_result_set OUT SYS_REFCURSOR,
17:17:50  76  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:50  77  ) AS
17:17:50  78  BEGIN
17:17:50  79  	PROCS_LICENSE_V15.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
17:17:50  80  END GET_ENDING_LICENSES_CC;
17:17:50  81  
17:17:50  82  /*******************************************************/
17:17:50  83  
17:17:50  84  PROCEDURE GET_RECURRING_OFFER (
17:17:50  85  /*
17:17:50  86  Throws exceptions:
17:17:50  87  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50  88  */
17:17:50  89  	in_license_id  IN NUMBER,
17:17:50  90  	out_result_set OUT SYS_REFCURSOR
17:17:50  91  ) AS
17:17:50  92  BEGIN
17:17:50  93  	PROCS_LICENSE_V15.GET_RECURRING_OFFER (
17:17:50  94  	  in_license_id,
17:17:50  95  	  out_result_set
17:17:50  96  	);
17:17:50  97  END GET_RECURRING_OFFER;
17:17:50  98  
17:17:50  99  /********************************************************/
17:17:50 100  
17:17:50 101  PROCEDURE GET_NEXT_OFFER (
17:17:50 102  /*
17:17:50 103  Throws exceptions:
17:17:50 104  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 105  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:50 106  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 107  */
17:17:50 108  	in_license_id  IN NUMBER,
17:17:50 109  	out_result_set OUT SYS_REFCURSOR
17:17:50 110  ) AS
17:17:50 111  BEGIN
17:17:50 112  	PROCS_LICENSE_V15.GET_NEXT_OFFER (
17:17:50 113  	  in_license_id,
17:17:50 114  	  out_result_set
17:17:50 115  	);
17:17:50 116  END GET_NEXT_OFFER;
17:17:50 117  
17:17:50 118  /*********************************************************/
17:17:50 119  
17:17:50 120  PROCEDURE UPDATE_LICENSE_STATUS(
17:17:50 121  /*
17:17:50 122  Throws exceptions:
17:17:50 123  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 124  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 125  */
17:17:50 126  	  in_license_id     IN NUMBER,
17:17:50 127  	  in_license_status IN NUMBER,
17:17:50 128  	  in_updated_by     IN VARCHAR2
17:17:50 129  ) AS
17:17:50 130  BEGIN
17:17:50 131  	PROCS_LICENSE_V15.UPDATE_LICENSE_STATUS (
17:17:50 132  	  in_license_id,
17:17:50 133  	  in_license_status,
17:17:50 134  	  in_updated_by
17:17:50 135  	);
17:17:50 136  END UPDATE_LICENSE_STATUS;
17:17:50 137  
17:17:50 138  /**********************************************************/
17:17:50 139  
17:17:50 140  PROCEDURE UPDATE_INVOICE_STATUS (
17:17:50 141  /*
17:17:50 142  Throws exceptions:
17:17:50 143  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 144  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 145  */
17:17:50 146  	in_invoice_id		       IN NUMBER,
17:17:50 147  	in_invoice_status_id	       IN NUMBER,
17:17:50 148  	in_updated_by		       IN VARCHAR2
17:17:50 149  ) AS
17:17:50 150  BEGIN
17:17:50 151  	PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
17:17:50 152  	  in_invoice_id,
17:17:50 153  	  in_invoice_status_id,
17:17:50 154  	  in_updated_by
17:17:50 155  	);
17:17:50 156  END UPDATE_INVOICE_STATUS;
17:17:50 157  
17:17:50 158  /***********************************************************/
17:17:50 159  
17:17:50 160  PROCEDURE CREATE_LICENSE(
17:17:50 161  /*
17:17:50 162  Throws exceptions:
17:17:50 163  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 164  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 165  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
17:17:50 166  */
17:17:50 167  	in_status_id		    IN NUMBER,
17:17:50 168  	in_needs_entitlements	    IN NUMBER,
17:17:50 169  	in_start_date		    IN DATE,
17:17:50 170  	in_end_date		    IN DATE,
17:17:50 171  	in_offer_id		    IN NUMBER,
17:17:50 172  	in_subscription_id	    IN NUMBER,
17:17:50 173  	in_invoice_id		    IN NUMBER,
17:17:50 174  	in_created_by		    IN VARCHAR2,
17:17:50 175  	in_is_extension 	    IN NUMBER,
17:17:50 176  	in_current_offer_index	    IN NUMBER,
17:17:50 177  	in_current_offer_recurr_num IN NUMBER,
17:17:50 178  	out_license_id		    OUT NUMBER
17:17:50 179  ) AS
17:17:50 180  BEGIN
17:17:50 181  	PROCS_LICENSE_V15.CREATE_LICENSE (
17:17:50 182  	  in_status_id,
17:17:50 183  	  in_needs_entitlements,
17:17:50 184  	  in_start_date,
17:17:50 185  	  in_end_date,
17:17:50 186  	  in_offer_id,
17:17:50 187  	  in_subscription_id,
17:17:50 188  	  in_invoice_id,
17:17:50 189  	  in_created_by,
17:17:50 190  	  in_is_extension,
17:17:50 191  	  in_current_offer_index,
17:17:50 192  	  in_current_offer_recurr_num,
17:17:50 193  	  out_license_id
17:17:50 194  	);
17:17:50 195  END CREATE_LICENSE;
17:17:50 196  
17:17:50 197  /******************************************************/
17:17:50 198  
17:17:50 199  PROCEDURE CREATE_INVOICE(
17:17:50 200  /*
17:17:50 201  Throws exceptions:
17:17:50 202  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 203  */
17:17:50 204  	  in_invoice_status IN NUMBER,
17:17:50 205  	  in_created_by     IN VARCHAR2,
17:17:50 206  	  in_tax_exempt_id  IN VARCHAR2,
17:17:50 207  	  out_invoice_id    OUT NUMBER
17:17:50 208  ) AS
17:17:50 209  BEGIN
17:17:50 210  	PROCS_INVOICE_V15.CREATE_INVOICE (
17:17:50 211  	  in_invoice_status,
17:17:50 212  	  in_created_by,
17:17:50 213  	  in_tax_exempt_id,
17:17:50 214  	  out_invoice_id
17:17:50 215  	);
17:17:50 216  END CREATE_INVOICE;
17:17:50 217  
17:17:50 218  /*******************************************************/
17:17:50 219  
17:17:50 220  PROCEDURE CREATE_CHARGE(
17:17:50 221  /*
17:17:50 222  Throws exceptions:
17:17:50 223  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 224  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 225  */
17:17:50 226  	in_invoice_id	      IN NUMBER,
17:17:50 227  	in_transaction_id     IN NUMBER,
17:17:50 228  	in_instrument_type_id IN NUMBER,
17:17:50 229  	in_instrument_id      IN NUMBER,
17:17:50 230  	in_charge_amount      IN NUMBER,
17:17:50 231  	in_created_by	      IN VARCHAR2,
17:17:50 232  	in_charge_status_id   IN NUMBER,
17:17:50 233  	out_charge_id	      OUT NUMBER
17:17:50 234  ) AS
17:17:50 235  BEGIN
17:17:50 236  	PROCS_CHARGE_V15.CREATE_CHARGE (
17:17:50 237  	  in_invoice_id,
17:17:50 238  	  in_transaction_id,
17:17:50 239  	  in_instrument_type_id,
17:17:50 240  	  in_instrument_id,
17:17:50 241  	  in_charge_amount,
17:17:50 242  	  in_created_by,
17:17:50 243  	  in_charge_status_id,
17:17:50 244  	  out_charge_id
17:17:50 245  	);
17:17:50 246  END CREATE_CHARGE;
17:17:50 247  
17:17:50 248  /**********************************************************/
17:17:50 249  
17:17:50 250  PROCEDURE HAS_FUTURE_LICENSE (
17:17:50 251  /*
17:17:50 252  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 253  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 254  --
17:17:50 255  RETURNS:
17:17:50 256  1 - if has,
17:17:50 257  0 - else
17:17:50 258  */
17:17:50 259  	in_license_id IN NUMBER,
17:17:50 260  	out_result	   OUT NUMBER
17:17:50 261  ) AS
17:17:50 262  BEGIN
17:17:50 263  	PROCS_SUBSCRIPTION_V15.HAS_FUTURE_LICENSE (
17:17:50 264  	  in_license_id,
17:17:50 265  	  out_result
17:17:50 266  	);
17:17:50 267  END HAS_FUTURE_LICENSE;
17:17:50 268  
17:17:50 269  /***********************************************************/
17:17:50 270  
17:17:50 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
17:17:50 272  /*
17:17:50 273  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 274  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 275  */
17:17:50 276  	in_license_id IN NUMBER,
17:17:50 277  	out_group_id  OUT NUMBER
17:17:50 278  ) AS
17:17:50 279  BEGIN
17:17:50 280  	PROCS_LICENSE_V15.GET_GROUP_ID_BY_LICENSE_ID (
17:17:50 281  	  in_license_id,
17:17:50 282  	  out_group_id
17:17:50 283  	);
17:17:50 284  END GET_GROUP_ID_BY_LICENSE_ID;
17:17:50 285  
17:17:50 286  /**********************************************************/
17:17:50 287  
17:17:50 288  PROCEDURE GET_OFFER_PRODUCTS (
17:17:50 289  /*
17:17:50 290  Throws exceptions (codes):
17:17:50 291  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 292  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 293  */
17:17:50 294  	in_offer_id    IN NUMBER,
17:17:50 295  	out_result_set OUT SYS_REFCURSOR
17:17:50 296  ) AS
17:17:50 297  BEGIN
17:17:50 298  	PROCS_OFFER_CHAIN_V15.GET_OFFER_PRODUCTS (
17:17:50 299  	  in_offer_id,
17:17:50 300  	  out_result_set
17:17:50 301  	);
17:17:50 302  END GET_OFFER_PRODUCTS;
17:17:50 303  
17:17:50 304  /***********************************************************/
17:17:50 305  
17:17:50 306  PROCEDURE CREATE_TRANSACTION (
17:17:50 307  /*
17:17:50 308  Throws exceptions:
17:17:50 309  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 310  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 311  */
17:17:50 312  	in_transaction_id  IN NUMBER,
17:17:50 313  	in_status_id	   IN NUMBER,
17:17:50 314  	in_amount	   IN NUMBER,
17:17:50 315  	in_created_by	   IN VARCHAR2,
17:17:50 316  	in_order_id	   IN VARCHAR2,
17:17:50 317  	out_transaction_id OUT NUMBER
17:17:50 318  ) AS
17:17:50 319  BEGIN
17:17:50 320  	PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
17:17:50 321  	  in_transaction_id,
17:17:50 322  	  in_status_id,
17:17:50 323  	  in_amount,
17:17:50 324  	  in_created_by,
17:17:50 325  	  in_order_id,
17:17:50 326  	  GLOBAL_CONSTANTS_V15.FALSE, -- is_refund should be false in renewal
17:17:50 327  	  out_transaction_id
17:17:50 328  	);
17:17:50 329  END CREATE_TRANSACTION;
17:17:50 330  
17:17:50 331  /************************************************************/
17:17:50 332  
17:17:50 333  PROCEDURE ADD_LINE_ITEMS(
17:17:50 334  /*
17:17:50 335  Throws exceptions:
17:17:50 336  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 337  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 338  */
17:17:50 339  	in_invoice_id IN NUMBER,
17:17:50 340  	in_offer_id   IN NUMBER,
17:17:50 341  	in_created_by IN VARCHAR2
17:17:50 342  ) AS
17:17:50 343  BEGIN
17:17:50 344  	PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
17:17:50 345  	  in_invoice_id,
17:17:50 346  	  in_offer_id,
17:17:50 347  	  in_created_by
17:17:50 348  	);
17:17:50 349  END ADD_LINE_ITEMS;
17:17:50 350  
17:17:50 351  /************************************************************/
17:17:50 352  
17:17:50 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
17:17:50 354  /*
17:17:50 355  Throws exceptions:
17:17:50 356  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 357  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 358  */
17:17:50 359  	in_invoice_id IN  NUMBER,
17:17:50 360  	out_amount    OUT NUMBER
17:17:50 361  ) AS
17:17:50 362  BEGIN
17:17:50 363  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
17:17:50 364  	  in_invoice_id,
17:17:50 365  	  out_amount
17:17:50 366  	);
17:17:50 367  END CALCULATE_INVOICE_AMOUNT;
17:17:50 368  
17:17:50 369  /*************************************************************/
17:17:50 370  
17:17:50 371  PROCEDURE RESERVE_TRANSACTION_ID (
17:17:50 372  /*
17:17:50 373  Throws exceptions:
17:17:50 374  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 375  */
17:17:50 376  	out_transaction_id OUT NUMBER
17:17:50 377  ) AS
17:17:50 378  BEGIN
17:17:50 379  	PROCS_TRANSACTION_V15.RESERVE_TRANSACTION_ID (
17:17:50 380  	  out_transaction_id
17:17:50 381  	);
17:17:50 382  END RESERVE_TRANSACTION_ID;
17:17:50 383  
17:17:50 384  /***************************************************************/
17:17:50 385  
17:17:50 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
17:17:50 387  	in_offer_chain_id	     IN NUMBER,
17:17:50 388  	in_offer_chain_current_index IN NUMBER,
17:17:50 389  	out_next_offer_index	     OUT NUMBER
17:17:50 390  ) AS
17:17:50 391  BEGIN
17:17:50 392  	PROCS_OFFER_CHAIN_V15.P_GET_NEXT_OFFER_INDEX(
17:17:50 393  	  in_offer_chain_id,
17:17:50 394  	  in_offer_chain_current_index,
17:17:50 395  	  out_next_offer_index
17:17:50 396  	);
17:17:50 397  END P_GET_NEXT_OFFER_INDEX;
17:17:50 398  
17:17:50 399  /***************************************************************/
17:17:50 400  
17:17:50 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
17:17:50 402  	in_license_id		     IN NUMBER,
17:17:50 403  	in_offer_chain_current_index IN NUMBER,
17:17:50 404  	out_next_offer_index	     OUT NUMBER
17:17:50 405  ) AS
17:17:50 406  BEGIN
17:17:50 407  	PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX_BY_LCNS(
17:17:50 408  	  in_license_id,
17:17:50 409  	  in_offer_chain_current_index,
17:17:50 410  	  out_next_offer_index
17:17:50 411  	);
17:17:50 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
17:17:50 413  
17:17:50 414  /******************************************************************/
17:17:50 415  
17:17:50 416  PROCEDURE GET_SUBSCRIPTION_INFO (
17:17:50 417  /*
17:17:50 418  Throws exceptions:
17:17:50 419  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 420  */
17:17:50 421  	  in_subscription_id IN  NUMBER,
17:17:50 422  	  out_result_set      OUT SYS_REFCURSOR
17:17:50 423  ) AS
17:17:50 424  BEGIN
17:17:50 425  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTION_INFO(
17:17:50 426  	  in_subscription_id,
17:17:50 427  	  out_result_set
17:17:50 428  	);
17:17:50 429  END GET_SUBSCRIPTION_INFO;
17:17:50 430  
17:17:50 431  /*******************************************************************/
17:17:50 432  
17:17:50 433  PROCEDURE CLOSE_SUBSCRIPTION (
17:17:50 434  	in_subscription_id IN NUMBER,
17:17:50 435  	in_updated_by	   IN VARCHAR2
17:17:50 436  ) AS
17:17:50 437  BEGIN
17:17:50 438  	PROCS_SUBSCRIPTION_V15.CLOSE_SUBSCRIPTION(
17:17:50 439  	  in_subscription_id,
17:17:50 440  	  in_updated_by
17:17:50 441  	);
17:17:50 442  END CLOSE_SUBSCRIPTION;
17:17:50 443  
17:17:50 444  /*******************************************************************/
17:17:50 445  
17:17:50 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
17:17:50 447  	out_result_set OUT SYS_REFCURSOR
17:17:50 448  ) AS
17:17:50 449  BEGIN
17:17:50 450  	PROCS_LICENSE_V15.GET_NEED_ENTITLEMENTS_LICENSES(
17:17:50 451  	  out_result_set
17:17:50 452  	);
17:17:50 453  END GET_NEED_ENTITLEMENTS_LICENSES;
17:17:50 454  
17:17:50 455  /*******************************************************************/
17:17:50 456  
17:17:50 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
17:17:50 458  	in_license_id	      IN NUMBER,
17:17:50 459  	in_needs_entitlements IN NUMBER,
17:17:50 460  	in_updated_by	      IN VARCHAR2
17:17:50 461  ) AS
17:17:50 462  BEGIN
17:17:50 463  	PROCS_LICENSE_V15.UPDATE_NEED_ENTITLEMENTS_FLAG(
17:17:50 464  	  in_license_id,
17:17:50 465  	  in_needs_entitlements,
17:17:50 466  	  in_updated_by
17:17:50 467  	);
17:17:50 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
17:17:50 469  
17:17:50 470  /*******************************************************/
17:17:50 471  
17:17:50 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
17:17:50 473  /*
17:17:50 474  Throws exceptions (codes):
17:17:50 475  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 476  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 477  */
17:17:50 478  	in_offer_id    IN NUMBER,
17:17:50 479  	out_result_set OUT SYS_REFCURSOR
17:17:50 480  ) AS
17:17:50 481  BEGIN
17:17:50 482  	PROCS_OFFER_CHAIN_V15.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
17:17:50 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
17:17:50 484  
17:17:50 485  /*******************************************************/
17:17:50 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
17:17:50 487  /*
17:17:50 488  Throws exceptions (codes):
17:17:50 489  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 490  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 491  */
17:17:50 492  	in_product_offering_id IN NUMBER,
17:17:50 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
17:17:50 494  	out_result_set	       OUT SYS_REFCURSOR
17:17:50 495  ) AS
17:17:50 496  BEGIN
17:17:50 497  	PROCS_OFFER_CHAIN_V15.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
17:17:50 498  END GET_PRODUCT_OFFERING_META_DATA;
17:17:50 499  
17:17:50 500  /*******************************************************/
17:17:50 501  
17:17:50 502  PROCEDURE LOCK_ACCOUNT (
17:17:50 503  	in_group_id    IN NUMBER,
17:17:50 504  	in_lock_key    IN VARCHAR2,
17:17:50 505  	in_seconds_num IN NUMBER,
17:17:50 506  	in_created_by  IN VARCHAR2,
17:17:50 507  	in_reason      IN VARCHAR2
17:17:50 508  ) AS
17:17:50 509  BEGIN
17:17:50 510  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
17:17:50 511  	  in_group_id,
17:17:50 512  	  in_lock_key,
17:17:50 513  	  in_seconds_num,
17:17:50 514  	  in_created_by,
17:17:50 515  	  in_reason
17:17:50 516  	);
17:17:50 517  END LOCK_ACCOUNT;
17:17:50 518  
17:17:50 519  /****************************************************************/
17:17:50 520  
17:17:50 521  PROCEDURE RELEASE_LOCK (
17:17:50 522  	in_group_id IN NUMBER,
17:17:50 523  	in_lock_key IN VARCHAR2
17:17:50 524  ) AS
17:17:50 525  BEGIN
17:17:50 526  	PROCS_LOCKING_V15.RELEASE_LOCK(
17:17:50 527  	  in_group_id,
17:17:50 528  	  in_lock_key
17:17:50 529  	);
17:17:50 530  END RELEASE_LOCK;
17:17:50 531  
17:17:50 532  /******************************************************************************/
17:17:50 533  
17:17:50 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
17:17:50 535  	in_invoice_id  IN NUMBER,
17:17:50 536  	out_result_set OUT SYS_REFCURSOR
17:17:50 537  ) AS
17:17:50 538  BEGIN
17:17:50 539  	PROCS_INVOICE_V15.GET_INVOICE_LINE_ITEMS(
17:17:50 540  	  in_invoice_id,
17:17:50 541  	  out_result_set
17:17:50 542  	);
17:17:50 543  END GET_INVOICE_LINE_ITEMS;
17:17:50 544  
17:17:50 545  /******************************************************************************/
17:17:50 546  
17:17:50 547  PROCEDURE ADD_TAX (
17:17:50 548  	in_tax_type_id		 IN NUMBER,
17:17:50 549  	in_calculated_amount	 IN NUMBER,
17:17:50 550  	in_created_by		 IN VARCHAR2,
17:17:50 551  	in_line_item_id 	 IN NUMBER,
17:17:50 552  	in_effective_rate	 IN VARCHAR2,
17:17:50 553  	in_taxable_amount	 IN NUMBER,
17:17:50 554  	in_tax_rule_id		 IN NUMBER,
17:17:50 555  	in_jurisdiction_level_id IN NUMBER,
17:17:50 556  	in_jurisdiction_name	 IN VARCHAR2,
17:17:50 557  	in_jurisdiction_id	 IN VARCHAR2,
17:17:50 558  	in_ext_tax_type 	 IN VARCHAR2,
17:17:50 559  	in_ext_result		 IN VARCHAR2,
17:17:50 560  	in_imposition_type	 IN VARCHAR2,
17:17:50 561  	in_imposition		 IN VARCHAR2
17:17:50 562  ) AS
17:17:50 563  BEGIN
17:17:50 564  	PROCS_TAXES_V15.ADD_TAX(
17:17:50 565  	  in_tax_type_id,
17:17:50 566  	  in_calculated_amount,
17:17:50 567  	  in_created_by,
17:17:50 568  	  in_line_item_id,
17:17:50 569  	  in_effective_rate,
17:17:50 570  	  in_taxable_amount,
17:17:50 571  	  in_tax_rule_id,
17:17:50 572  	  in_jurisdiction_level_id,
17:17:50 573  	  in_jurisdiction_name,
17:17:50 574  	  in_jurisdiction_id,
17:17:50 575  	  in_ext_tax_type,
17:17:50 576  	  in_ext_result,
17:17:50 577  	  in_imposition_type,
17:17:50 578  	  in_imposition
17:17:50 579  	);
17:17:50 580  END ADD_TAX;
17:17:50 581  
17:17:50 582  /******************************************************************************/
17:17:50 583  
17:17:50 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
17:17:50 585  	in_credit_card_id IN  NUMBER,
17:17:50 586  	out_result_set	  OUT SYS_REFCURSOR
17:17:50 587  ) AS
17:17:50 588  BEGIN
17:17:50 589  	PROCS_FIN_INSTRUMENTS_V15.GET_CREDIT_CARD_BY_ID(
17:17:50 590  	  in_credit_card_id,
17:17:50 591  	  out_result_set
17:17:50 592  	);
17:17:50 593  END GET_CREDIT_CARD_BY_ID;
17:17:50 594  
17:17:50 595  /******************************************************************************/
17:17:50 596  
17:17:50 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
17:17:50 598  	in_line_item_id IN NUMBER,
17:17:50 599  	out_result_set	OUT SYS_REFCURSOR
17:17:50 600  ) AS
17:17:50 601  BEGIN
17:17:50 602  	PROCS_PRODUCT_V15.GET_PRD_OFFERING_BY_LINE_IT_ID(
17:17:50 603  	  in_line_item_id,
17:17:50 604  	  out_result_set
17:17:50 605  	);
17:17:50 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
17:17:50 607  
17:17:50 608  /******************************************************************************/
17:17:50 609  
17:17:50 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
17:17:50 611  /*
17:17:50 612  Throws exceptions:
17:17:50 613  APP_EXCEPTION_CODES_V15.NOT_FOUND,
17:17:50 614  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 615  */
17:17:50 616  	in_group_id IN NUMBER,
17:17:50 617  	out_account_id	OUT NUMBER
17:17:50 618  ) AS
17:17:50 619  BEGIN
17:17:50 620  	PROCS_ACCOUNT_V15.GET_ACCOUNT_ID_BY_GROUP_ID(
17:17:50 621  	  in_group_id,
17:17:50 622  	  out_account_id
17:17:50 623  	);
17:17:50 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
17:17:50 625  
17:17:50 626  /******************************************************************************/
17:17:50 627  
17:17:50 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
17:17:50 629  /*
17:17:50 630  Throws exceptions:
17:17:50 631  APP_EXCEPTION_CODES_V15.NOT_FOUND
17:17:50 632  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 633  */
17:17:50 634  	in_line_item_id IN  NUMBER,
17:17:50 635  	out_result_set	OUT SYS_REFCURSOR
17:17:50 636  ) AS
17:17:50 637  BEGIN
17:17:50 638  	PROCS_LINE_ITEMS_V15.GET_LINE_ITEM_DISCOUNTS(
17:17:50 639  	  in_line_item_id,
17:17:50 640  	  out_result_set
17:17:50 641  	);
17:17:50 642  END GET_LINE_ITEM_DISCOUNTS;
17:17:50 643  
17:17:50 644  /******************************************************************************/
17:17:50 645  
17:17:50 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
17:17:50 647  	in_line_item_id    IN NUMBER,
17:17:50 648  	in_amount	   IN NUMBER,
17:17:50 649  	in_discount_amount IN NUMBER,
17:17:50 650  	in_taxes_amount    IN NUMBER
17:17:50 651  ) AS
17:17:50 652  BEGIN
17:17:50 653  	PROCS_LINE_ITEMS_V15.UPDATE_LINE_ITEM_AMOUNT(
17:17:50 654  	  in_line_item_id,
17:17:50 655  	  in_amount,
17:17:50 656  	  in_discount_amount,
17:17:50 657  	  in_taxes_amount
17:17:50 658  	);
17:17:50 659  END UPDATE_LINE_ITEM_AMOUNT;
17:17:50 660  
17:17:50 661  /******************************************************************************/
17:17:50 662  
17:17:50 663  PROCEDURE GET_PAYPAL_BY_ID (
17:17:50 664  	in_paypal_id   IN  NUMBER,
17:17:50 665  	out_result_set OUT SYS_REFCURSOR
17:17:50 666  ) AS
17:17:50 667  BEGIN
17:17:50 668  	PROCS_FIN_INSTRUMENTS_V15.GET_PAYPAL_BY_ID(
17:17:50 669  	  in_paypal_id,
17:17:50 670  	  out_result_set
17:17:50 671  	);
17:17:50 672  END GET_PAYPAL_BY_ID;
17:17:50 673  
17:17:50 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
17:17:50 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
17:17:50 676  	out_result_set OUT SYS_REFCURSOR
17:17:50 677  ) AS
17:17:50 678  BEGIN
17:17:50 679  	PROCS_FIN_INSTRUMENTS_V15.GET_GC_BY_PURCH_INVOICE_ID (
17:17:50 680  	  in_invoice_id,
17:17:50 681  	  out_result_set
17:17:50 682  	);
17:17:50 683  END GET_GC_BY_PURCH_INVOICE_ID;
17:17:50 684  
17:17:50 685  PROCEDURE GET_LICENSE_BY_ID (
17:17:50 686  	in_license_id  IN NUMBER,
17:17:50 687  	out_result_set OUT SYS_REFCURSOR
17:17:50 688  ) AS
17:17:50 689  BEGIN
17:17:50 690  	PROCS_LICENSE_V15.GET_LICENSE_BY_ID (
17:17:50 691  	  in_license_id,
17:17:50 692  	  out_result_set
17:17:50 693  	);
17:17:50 694  END GET_LICENSE_BY_ID;
17:17:50 695  
17:17:50 696  /******************************************************************************/
17:17:50 697  
17:17:50 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
17:17:50 699  	in_offer_chain_id	 IN NUMBER,
17:17:50 700  	in_action_name		 IN VARCHAR2,
17:17:50 701  	out_notification_type_id OUT NUMBER
17:17:50 702  ) AS
17:17:50 703  BEGIN
17:17:50 704  	PROCS_OFFER_CHAIN_V15.GET_NOTIFICATION_TYPE_ID(
17:17:50 705  	  in_offer_chain_id,
17:17:50 706  	  in_action_name,
17:17:50 707  	  out_notification_type_id
17:17:50 708  	);
17:17:50 709  END GET_NOTIFICATION_TYPE_ID;
17:17:50 710  
17:17:50 711  /******************************************************************************/
17:17:50 712  
17:17:50 713  PROCEDURE GET_ALL_OCH_META_DATA (
17:17:50 714  	in_offer_chain_id IN NUMBER,
17:17:50 715  	out_result_set	  OUT SYS_REFCURSOR
17:17:50 716  ) AS
17:17:50 717  BEGIN
17:17:50 718  	PROCS_OFFER_CHAIN_V15.GET_ALL_META_DATA (
17:17:50 719  	  in_offer_chain_id,
17:17:50 720  	  out_result_set
17:17:50 721  	);
17:17:50 722  END GET_ALL_OCH_META_DATA;
17:17:50 723  
17:17:50 724  /******************************************************************************/
17:17:50 725  
17:17:50 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
17:17:50 727  /*
17:17:50 728  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
17:17:50 729  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
17:17:50 730  */
17:17:50 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
17:17:50 732  	out_result_set	     OUT SYS_REFCURSOR
17:17:50 733  ) AS
17:17:50 734  BEGIN
17:17:50 735  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTIONS_META_DATA(
17:17:50 736  	  in_subscriptions_ids,
17:17:50 737  	  out_result_set
17:17:50 738  	);
17:17:50 739  END GET_SUBSCRIPTIONS_META_DATA;
17:17:50 740  
17:17:50 741  PROCEDURE GET_UNREDEEMED_GCS (
17:17:50 742  	out_result_set		OUT SYS_REFCURSOR,
17:17:50 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
17:17:50 744  	in_num_rows		IN NUMBER DEFAULT 10000,
17:17:50 745  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
17:17:50 746  ) AS
17:17:50 747  BEGIN
17:17:50 748  	PROCS_FIN_INSTRUMENTS_V15.GET_UNREDEEMED_GCS(
17:17:50 749  	  out_result_set => out_result_set,
17:17:50 750  	  in_hours_number => in_hours_number,
17:17:50 751  	  in_num_rows => in_num_rows,
17:17:50 752  	  in_process_name => in_process_name
17:17:50 753  	);
17:17:50 754  END GET_UNREDEEMED_GCS;
17:17:50 755  
17:17:50 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
17:17:50 757  	in_offer_chain_id IN NUMBER,
17:17:50 758  	in_meta_data_name IN VARCHAR2,
17:17:50 759  	out_value	  OUT VARCHAR2
17:17:50 760  ) AS
17:17:50 761  BEGIN
17:17:50 762  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
17:17:50 763  	  in_offer_chain_id => in_offer_chain_id,
17:17:50 764  	  in_meta_data_name => in_meta_data_name,
17:17:50 765  	  out_value => out_value
17:17:50 766  	);
17:17:50 767  END GET_OFFER_CHAIN_MD_VALUE;
17:17:50 768  
17:17:50 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
17:17:50 770  	out_result_set	    OUT SYS_REFCURSOR
17:17:50 771  )
17:17:50 772  AS
17:17:50 773  BEGIN
17:17:50 774  	PROCS_SUBSCRIPTION_V15.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
17:17:50 775  	  out_result_set => out_result_set
17:17:50 776  	);
17:17:50 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
17:17:50 778  
17:17:50 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
17:17:50 780  	out_result_set	    OUT SYS_REFCURSOR
17:17:50 781  )
17:17:50 782  AS
17:17:50 783  BEGIN
17:17:50 784  	PROCS_SUBSCRIPTION_V15.GET_ACT_SUBS_W_PP_CHARGEBACKS(
17:17:50 785  	  out_result_set => out_result_set
17:17:50 786  	);
17:17:50 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
17:17:50 788  
17:17:50 789  END PUBLIC_PROCS_RENEWAL_V15;
17:17:50 790  .
17:17:50 SQL> /

Package body created.

Elapsed: 00:00:00.08
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_TEST_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V15 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V15 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V15 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> 
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.03
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> 
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
17:17:50 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
17:17:50 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
17:17:50 SQL> spool off;


Subject: Nomad upgrade success: ECST@rac01.stg.sea1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: steven.nedlin@nytimes.com
Nomad upgrade operation success. 
        
        Details
        -------
        DB Hostname: rac01.stg.sea1.nytimes.com
        SID: ECST
        Schema: core_owner
        Migration: 13.1-release-1.10.0-all
        SVN Revision: 9677
        Duration: 5