11:21:54 SQL> @/dbbackups/ECPR/migrations/core_owner/13.1-release-1.10.0-all/upgrade.sql
11:21:54 SQL> --------------------------------------------------------------------------------
11:21:54 SQL> -- DDL for package PROCS_ACCOUNT_CRU
11:21:54 SQL> --------------------------------------------------------------------------------
11:21:54 SQL> 
11:21:54 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V15" AS
11:21:54   2  
11:21:54   3  PROCEDURE CREATE_ACCOUNT (
11:21:54   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
11:21:54   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
11:21:54   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:54   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
11:21:54   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
11:21:54   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
11:21:54  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:54  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
11:21:54  12  );
11:21:54  13  
11:21:54  14  PROCEDURE UPDATE_ACCOUNT (
11:21:54  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
11:21:54  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
11:21:54  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:54  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
11:21:54  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
11:21:54  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:54  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
11:21:54  22  );
11:21:54  23  
11:21:54  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
11:21:54  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
11:21:54  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
11:21:54  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
11:21:54  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
11:21:54  29  );
11:21:54  30  
11:21:54  31  PROCEDURE READ_ACCOUNT (
11:21:54  32  	in_account_id  IN ACCOUNT.ID%TYPE,
11:21:54  33  	out_result_set OUT SYS_REFCURSOR
11:21:54  34  );
11:21:54  35  
11:21:54  36  PROCEDURE CREATE_ACCOUNT_NOTE (
11:21:54  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
11:21:54  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
11:21:54  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
11:21:54  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
11:21:54  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
11:21:54  42  );
11:21:54  43  
11:21:54  44  END PROCS_ACCOUNT_CRU_V15;
11:21:54  45  .
11:21:54 SQL> /

Package created.

Elapsed: 00:00:00.05
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_ACCOUNT
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE ANNOTATE_ACCOUNT (
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   8  */
11:21:55   9  	in_group_id   IN  NUMBER,
11:21:55  10  	in_agent_id   IN  NUMBER,
11:21:55  11  	in_note       IN  VARCHAR2,
11:21:55  12  	in_created_by IN  VARCHAR2
11:21:55  13  );
11:21:55  14  
11:21:55  15  PROCEDURE ASSERT_ACCOUNT_EXISTS (
11:21:55  16  /*
11:21:55  17  Throws exceptions:
11:21:55  18  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  19  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  20  */
11:21:55  21  	in_group_id IN	NUMBER,
11:21:55  22  	out_exists  OUT NUMBER
11:21:55  23  );
11:21:55  24  
11:21:55  25  PROCEDURE DISABLE_ACCOUNT (
11:21:55  26  /*
11:21:55  27  Throws exceptions:
11:21:55  28  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:55  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  30  */
11:21:55  31  	in_group_id   IN NUMBER,
11:21:55  32  	in_updated_by IN VARCHAR2,
11:21:55  33  	in_note       IN VARCHAR2,
11:21:55  34  	in_agent_id   IN NUMBER
11:21:55  35  );
11:21:55  36  
11:21:55  37  PROCEDURE CREATE_ACTIVE_ACCOUNT(
11:21:55  38  /*
11:21:55  39  Throws exceptions:
11:21:55  40  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:55  41  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  42  */
11:21:55  43  	in_created_by	       IN VARCHAR2,
11:21:55  44  	in_group_id	       IN NUMBER
11:21:55  45  );
11:21:55  46  
11:21:55  47  PROCEDURE REACTIVATE_ACCOUNT (
11:21:55  48  /*
11:21:55  49  Throws exceptions:
11:21:55  50  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:55  51  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  52  */
11:21:55  53  	in_group_id	  IN NUMBER,
11:21:55  54  	in_updated_by	  IN VARCHAR2,
11:21:55  55  	in_note 	  IN VARCHAR2,
11:21:55  56  	in_agent_id	  IN NUMBER
11:21:55  57  );
11:21:55  58  
11:21:55  59  /*
11:21:55  60  
11:21:55  61  THERE ARE NO ACCOUNT STATUS "SUSPENDED"
11:21:55  62  Waiting for new instructions.
11:21:55  63  
11:21:55  64  PROCEDURE SUSPEND_ACCOUNT (
11:21:55  65  /*
11:21:55  66  Throws exceptions:
11:21:55  67  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:55  68  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  69  
11:21:55  70  	  in_group_id	 IN  NUMBER,
11:21:55  71  	  in_updated_by  IN  VARCHAR2
11:21:55  72  )
11:21:55  73  */
11:21:55  74  
11:21:55  75  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
11:21:55  76  /*
11:21:55  77  IN:
11:21:55  78  instr_status:
11:21:55  79  1 - get active instruments only (default)
11:21:55  80  0 - get inactive instruments only
11:21:55  81  
11:21:55  82  Throws exceptions:
11:21:55  83  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  85  */
11:21:55  86  	in_group_id	  IN NUMBER,
11:21:55  87  	out_result_cc_set OUT SYS_REFCURSOR,
11:21:55  88  	out_default_id	  OUT NUMBER,
11:21:55  89  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
11:21:55  90  );
11:21:55  91  
11:21:55  92  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
11:21:55  93  /*
11:21:55  94  IN:
11:21:55  95  instr_status:
11:21:55  96  GLOBAL_CONSTANTS_V15.TRUE - get active instruments only (default)
11:21:55  97  GLOBAL_CONSTANTS_V15.FALSE - get inactive instruments only
11:21:55  98  
11:21:55  99  Throws exceptions:
11:21:55 100  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 102  */
11:21:55 103  	in_group_id	  IN NUMBER,
11:21:55 104  	out_result_gc_set OUT SYS_REFCURSOR,
11:21:55 105  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
11:21:55 106  );
11:21:55 107  
11:21:55 108  PROCEDURE GET_ACCOUNT_INFO  (
11:21:55 109  /*
11:21:55 110  Throws exceptions:
11:21:55 111  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 112  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 113  */
11:21:55 114  	  in_group_id	    IN	NUMBER,
11:21:55 115  	  out_account_info  OUT SYS_REFCURSOR
11:21:55 116  );
11:21:55 117  
11:21:55 118  PROCEDURE GET_ACCOUNT_NOTES (
11:21:55 119  /*
11:21:55 120  Throws exceptions:
11:21:55 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 122  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 123  */
11:21:55 124  	  in_group_id	 IN  NUMBER,
11:21:55 125  	  out_result_set OUT SYS_REFCURSOR
11:21:55 126  );
11:21:55 127  
11:21:55 128  PROCEDURE GET_ACCOUNT_PAYPALS(
11:21:55 129  /*
11:21:55 130  IN:
11:21:55 131  instr_status:
11:21:55 132  1 - get active instruments only (default)
11:21:55 133  0 - get inactive instruments only
11:21:55 134  
11:21:55 135  Throws exceptions:
11:21:55 136  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 137  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 138  */
11:21:55 139  	in_group_id	  IN NUMBER,
11:21:55 140  	out_result_pp_set OUT SYS_REFCURSOR,
11:21:55 141  	out_default_id	  OUT NUMBER,
11:21:55 142  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
11:21:55 143  );
11:21:55 144  
11:21:55 145  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
11:21:55 146  /*
11:21:55 147  Throws exceptions:
11:21:55 148  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 149  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:55 150  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 151  */
11:21:55 152  	  in_group_id	 IN  NUMBER,
11:21:55 153  	  in_start_date  IN DATE,
11:21:55 154  	  in_end_date	 IN DATE,
11:21:55 155  	  in_status	 IN NUMBER,
11:21:55 156  	  in_group_account_type IN VARCHAR2,
11:21:55 157  	  out_result_set  OUT SYS_REFCURSOR
11:21:55 158  );
11:21:55 159  
11:21:55 160  PROCEDURE FREEZE_ACCOUNT (
11:21:55 161  /*
11:21:55 162  Throws exceptions:
11:21:55 163  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 164  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 165  */
11:21:55 166  	in_group_id   IN NUMBER,
11:21:55 167  	in_updated_by IN VARCHAR2,
11:21:55 168  	in_note       IN VARCHAR2,
11:21:55 169  	in_agent_id   IN NUMBER
11:21:55 170  );
11:21:55 171  
11:21:55 172  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
11:21:55 173  /*
11:21:55 174  Throws exceptions:
11:21:55 175  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 176  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 177  */
11:21:55 178  	in_group_id	   IN  NUMBER,
11:21:55 179  	in_subscription_id IN NUMBER,
11:21:55 180  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 181  );
11:21:55 182  
11:21:55 183  PROCEDURE GET_ACCOUNT_GC_INVOICES (
11:21:55 184  /*
11:21:55 185  Throws exceptions:
11:21:55 186  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 188  */
11:21:55 189  	in_group_id    IN  NUMBER,
11:21:55 190  	out_result_set OUT SYS_REFCURSOR
11:21:55 191  );
11:21:55 192  
11:21:55 193  PROCEDURE GET_GC_INVOICE (
11:21:55 194  /*
11:21:55 195  Throws exceptions:
11:21:55 196  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 198  */
11:21:55 199  	in_group_id    IN  NUMBER,
11:21:55 200  	in_gc_code     IN  VARCHAR2,
11:21:55 201  	out_result_set OUT SYS_REFCURSOR
11:21:55 202  );
11:21:55 203  
11:21:55 204  PROCEDURE GET_ACCOUNT_PRODUCTS (
11:21:55 205  /*
11:21:55 206  Throws exceptions:
11:21:55 207  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 208  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 209  */
11:21:55 210  	in_group_id    IN  NUMBER,
11:21:55 211  	out_result_set OUT SYS_REFCURSOR
11:21:55 212  );
11:21:55 213  
11:21:55 214  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
11:21:55 215  /*
11:21:55 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 218  */
11:21:55 219  	in_group_id IN NUMBER,
11:21:55 220  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 221  );
11:21:55 222  
11:21:55 223  PROCEDURE UPDATE_ACCOUNT_STATUS (
11:21:55 224  /*
11:21:55 225  Throws exceptions:
11:21:55 226  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 227  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 228  */
11:21:55 229  	in_account_id	     IN ACCOUNT.ID%TYPE,
11:21:55 230  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
11:21:55 231  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
11:21:55 232  );
11:21:55 233  
11:21:55 234  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
11:21:55 235  /*
11:21:55 236  Throws exceptions:
11:21:55 237  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 239  */
11:21:55 240  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
11:21:55 241  	out_licenses_num OUT NUMBER
11:21:55 242  );
11:21:55 243  
11:21:55 244  PROCEDURE SET_TAX_EXEMPT (
11:21:55 245  /*
11:21:55 246  Throws exceptions:
11:21:55 247  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 248  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 249  */
11:21:55 250  	in_group_id  IN NUMBER,
11:21:55 251  	in_exempt_id IN VARCHAR2
11:21:55 252  );
11:21:55 253  
11:21:55 254  PROCEDURE IS_TAX_EXEMPT (
11:21:55 255  /*
11:21:55 256  Throws exceptions:
11:21:55 257  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 258  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 259  Return:
11:21:55 260  	GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
11:21:55 261  	GLOBAL_CONSTANTS_V15.FALSE else
11:21:55 262  */
11:21:55 263  	in_group_id	  IN NUMBER,
11:21:55 264  	out_is_tax_exempt OUT NUMBER
11:21:55 265  );
11:21:55 266  
11:21:55 267  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
11:21:55 268  /*
11:21:55 269  Throws exceptions:
11:21:55 270  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 271  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 272  */
11:21:55 273  	in_account_id IN NUMBER,
11:21:55 274  	out_group_id  OUT NUMBER
11:21:55 275  );
11:21:55 276  
11:21:55 277  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:55 278  /*
11:21:55 279  Throws exceptions:
11:21:55 280  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 281  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 282  */
11:21:55 283  	in_group_id IN NUMBER,
11:21:55 284  	out_account_id	OUT NUMBER
11:21:55 285  );
11:21:55 286  
11:21:55 287  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
11:21:55 288  /*
11:21:55 289  Throws exceptions:
11:21:55 290  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 291  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 292  */
11:21:55 293  	in_invoice_id IN NUMBER,
11:21:55 294  	out_group_ids OUT SYS_REFCURSOR
11:21:55 295  );
11:21:55 296  
11:21:55 297  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
11:21:55 298  /*
11:21:55 299  Throws exceptions:
11:21:55 300  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 301  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 302  */
11:21:55 303  	in_group_id	  IN NUMBER,
11:21:55 304  	out_tax_exempt_id OUT VARCHAR2
11:21:55 305  );
11:21:55 306  
11:21:55 307  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
11:21:55 308  /*
11:21:55 309  Throws exceptions:
11:21:55 310  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 312  
11:21:55 313  Result has two columns:
11:21:55 314  subscription_id and offer_chain_id
11:21:55 315  */
11:21:55 316  	in_group_id    IN NUMBER,
11:21:55 317  	out_result_set OUT SYS_REFCURSOR
11:21:55 318  );
11:21:55 319  
11:21:55 320  PROCEDURE GET_USR_ALL_SBSCR_IDS (
11:21:55 321  /*
11:21:55 322  Throws exceptions:
11:21:55 323  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 324  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 325  
11:21:55 326  Result has two columns:
11:21:55 327  subscription_id and offer_chain_id
11:21:55 328  */
11:21:55 329  	in_group_id	   IN NUMBER,
11:21:55 330  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 331  );
11:21:55 332  
11:21:55 333  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
11:21:55 334  /*
11:21:55 335  Throws exceptions:
11:21:55 336  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 337  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55 338  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:55 339  
11:21:55 340  Result has two columns:
11:21:55 341  subscription_id and offer_chain_id
11:21:55 342  */
11:21:55 343  	in_group_id	   IN NUMBER,
11:21:55 344  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:55 345  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 346  );
11:21:55 347  
11:21:55 348  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
11:21:55 349  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:55 350  	in_expiration_date IN DATE,
11:21:55 351  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
11:21:55 352  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55 353  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
11:21:55 354  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
11:21:55 355  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
11:21:55 356  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
11:21:55 357  	in_lower_bound IN NUMBER DEFAULT 1,
11:21:55 358  	in_upper_bound IN NUMBER DEFAULT 11,
11:21:55 359  	out_result_set OUT SYS_REFCURSOR
11:21:55 360  );
11:21:55 361  
11:21:55 362  END PROCS_ACCOUNT_V15;
11:21:55 363  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.18
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_ADDRESS_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_ADDRESS(
11:21:55   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
11:21:55   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
11:21:55   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:55   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:55   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:55   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:55  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:55  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
11:21:55  13  );
11:21:55  14  
11:21:55  15  PROCEDURE UPDATE_ADDRESS(
11:21:55  16  	in_address_id	      IN ADDRESS.ID%TYPE,
11:21:55  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:55  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:55  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:55  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:55  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:55  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
11:21:55  24  );
11:21:55  25  
11:21:55  26  END PROCS_ADDRESS_CRU_V15;
11:21:55  27  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_ADDRESS(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  */
11:21:55   8  	  out_address_id	OUT NUMBER,
11:21:55   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:55  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:55  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:55  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:55  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:55  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
11:21:55  16  );
11:21:55  17  
11:21:55  18  PROCEDURE UPDATE_ADDRESS(
11:21:55  19  /*
11:21:55  20  Throws exceptions:
11:21:55  21  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  22  */
11:21:55  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
11:21:55  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:55  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:55  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:55  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:55  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:55  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
11:21:55  31  );
11:21:55  32  
11:21:55  33  PROCEDURE GET_ADDRESS (
11:21:55  34  /*
11:21:55  35  Throws exceptions:
11:21:55  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  37  */
11:21:55  38  	  in_id 		IN ADDRESS.ID%TYPE,
11:21:55  39  	  out_result_set	OUT SYS_REFCURSOR
11:21:55  40  );
11:21:55  41  
11:21:55  42  END PROCS_ADDRESS_V15;
11:21:55  43  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_ADJUSTMENTS
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
11:21:55   4  	in_invoice_id		  IN NUMBER,
11:21:55   5  	in_adjustment_reason	  IN VARCHAR2,
11:21:55   6  	in_is_credit		  IN NUMBER,
11:21:55   7  	in_charge_id		  IN NUMBER,
11:21:55   8  	in_business_date	  IN DATE,
11:21:55   9  	in_created_by		  IN VARCHAR2,
11:21:55  10  	out_invoice_adjustment_id OUT NUMBER
11:21:55  11  );
11:21:55  12  
11:21:55  13  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
11:21:55  14  	in_line_item_id 	    IN NUMBER,
11:21:55  15  	in_invoice_adjustment_id    IN NUMBER,
11:21:55  16  	in_amount		    IN NUMBER,
11:21:55  17  	in_tax			    IN NUMBER,
11:21:55  18  	in_discount		    IN NUMBER,
11:21:55  19  	in_created_by		    IN VARCHAR2,
11:21:55  20  	out_line_item_adjustment_id OUT NUMBER
11:21:55  21  );
11:21:55  22  
11:21:55  23  PROCEDURE CREATE_TAX_ADJUSTMENT (
11:21:55  24  	in_tax_id		   IN NUMBER,
11:21:55  25  	in_line_item_adjustment_id IN NUMBER,
11:21:55  26  	in_amount		   IN NUMBER,
11:21:55  27  	in_created_by		   IN VARCHAR2,
11:21:55  28  	out_tax_adjustment_id	   OUT NUMBER
11:21:55  29  );
11:21:55  30  
11:21:55  31  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
11:21:55  32  	in_discount_id		   NUMBER,
11:21:55  33  	in_line_item_id 	   NUMBER,
11:21:55  34  	in_line_item_adjustment_id IN NUMBER,
11:21:55  35  	in_amount		   IN NUMBER,
11:21:55  36  	in_created_by		   IN VARCHAR2,
11:21:55  37  	out_discount_li_id	   OUT NUMBER
11:21:55  38  );
11:21:55  39  
11:21:55  40  END PROCS_ADJUSTMENTS_V15;
11:21:55  41  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE GET_SUB_ADX_INFO (
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  */
11:21:55   8  	out_result_set	    OUT SYS_REFCURSOR,
11:21:55   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
11:21:55  10  );
11:21:55  11  
11:21:55  12  END PROCS_ADX_V15;
11:21:55  13  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_AMAZON_SUB(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  */
11:21:55   8  	  out_id	      OUT NUMBER,
11:21:55   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
11:21:55  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
11:21:55  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
11:21:55  12  );
11:21:55  13  
11:21:55  14  END PROCS_AMAZON_CRU_V15;
11:21:55  15  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_AMAZON_SUB(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  */
11:21:55   8  	  out_id	      OUT NUMBER,
11:21:55   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
11:21:55  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
11:21:55  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
11:21:55  12  );
11:21:55  13  
11:21:55  14  PROCEDURE GET_ACTIVE_SUB_IDS (
11:21:55  15  /*
11:21:55  16  Throws exceptions:
11:21:55  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  18  */
11:21:55  19  	out_result_set	    OUT SYS_REFCURSOR,
11:21:55  20  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
11:21:55  21  );
11:21:55  22  
11:21:55  23  PROCEDURE GET_ACTIVE_GROUP_IDS (
11:21:55  24  /*
11:21:55  25  Throws exceptions:
11:21:55  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  27  */
11:21:55  28  	out_result_set	    OUT SYS_REFCURSOR,
11:21:55  29  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
11:21:55  30  );
11:21:55  31  
11:21:55  32  END PROCS_AMAZON_V15;
11:21:55  33  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_CHARGE_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_CHARGE(
11:21:55   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
11:21:55   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
11:21:55   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
11:21:55   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:55   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
11:21:55   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
11:21:55  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
11:21:55  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:55  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
11:21:55  13  );
11:21:55  14  
11:21:55  15  PROCEDURE UPDATE_CHARGE(
11:21:55  16  	in_charge_id	      IN CHARGE.ID%TYPE,
11:21:55  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:55  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
11:21:55  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
11:21:55  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
11:21:55  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
11:21:55  22  );
11:21:55  23  
11:21:55  24  END PROCS_CHARGE_CRU_V15;
11:21:55  25  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_CHARGE
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_CHARGE(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   8  */
11:21:55   9  	in_invoice_id	      IN NUMBER,
11:21:55  10  	in_transaction_id     IN NUMBER,
11:21:55  11  	in_instrument_type_id IN NUMBER,
11:21:55  12  	in_instrument_id      IN NUMBER,
11:21:55  13  	in_charge_amount      IN NUMBER,
11:21:55  14  	in_created_by	      IN VARCHAR2,
11:21:55  15  	in_charge_status_id   IN NUMBER,
11:21:55  16  	out_charge_id	      OUT NUMBER
11:21:55  17  );
11:21:55  18  
11:21:55  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
11:21:55  20  /*
11:21:55  21  Throws exceptions:
11:21:55  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  23  */
11:21:55  24  	out_result_set	    OUT SYS_REFCURSOR,
11:21:55  25  	in_row_number	    IN NUMBER DEFAULT NULL
11:21:55  26  );
11:21:55  27  
11:21:55  28  PROCEDURE GET_UNPROCESSED_CHARGES (
11:21:55  29  /*
11:21:55  30  Throws exceptions:
11:21:55  31  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  32  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  33  */
11:21:55  34  	in_invoice_id  IN NUMBER,
11:21:55  35  	out_result_set OUT SYS_REFCURSOR
11:21:55  36  );
11:21:55  37  
11:21:55  38  PROCEDURE GET_PROCESSED_CHARGES (
11:21:55  39  /*
11:21:55  40  Throws exceptions:
11:21:55  41  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  42  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  43  */
11:21:55  44  	in_invoice_id  IN NUMBER,
11:21:55  45  	out_result_set OUT SYS_REFCURSOR
11:21:55  46  );
11:21:55  47  
11:21:55  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
11:21:55  49  /*
11:21:55  50  Throws exceptions:
11:21:55  51  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  53  */
11:21:55  54  	in_charge_id	    IN NUMBER,
11:21:55  55  	out_subscription_id OUT NUMBER
11:21:55  56  );
11:21:55  57  
11:21:55  58  PROCEDURE UPDATE_CHARGE_STATUS (
11:21:55  59  /*
11:21:55  60  Throws exceptions:
11:21:55  61  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  63  */
11:21:55  64  	in_charge_id	    IN CHARGE.ID%TYPE,
11:21:55  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:55  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
11:21:55  67  );
11:21:55  68  
11:21:55  69  FUNCTION IS_CHARGE_COLLECTED (
11:21:55  70  /*
11:21:55  71  Throws:
11:21:55  72  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  74  Returns:
11:21:55  75  GLOBAL_CONST.TRUE if transaction collected,
11:21:55  76  GLOBAL_CONST.FALSE else
11:21:55  77  */
11:21:55  78  	in_charge_id IN NUMBER
11:21:55  79  ) RETURN NUMBER;
11:21:55  80  
11:21:55  81  PROCEDURE GET_COLLECTED_CHARGES (
11:21:55  82  /*
11:21:55  83  Throws exceptions:
11:21:55  84  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  85  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  86  */
11:21:55  87  	in_invoice_id  IN NUMBER,
11:21:55  88  	out_result_set OUT SYS_REFCURSOR
11:21:55  89  );
11:21:55  90  
11:21:55  91  END PROCS_CHARGE_V15;
11:21:55  92  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
11:21:55   2  
11:21:55   3  	PROCEDURE POPULATE_REQUEST_INFO(
11:21:55   4  	  in_hours_prior    IN	NUMBER,
11:21:55   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
11:21:55   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
11:21:55   7  	);
11:21:55   8  
11:21:55   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
11:21:55  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:55  11  	  in_start	     IN NUMBER,
11:21:55  12  	  in_end	     IN NUMBER,
11:21:55  13  	  out_result_set     OUT SYS_REFCURSOR
11:21:55  14  	);
11:21:55  15  
11:21:55  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
11:21:55  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
11:21:55  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
11:21:55  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
11:21:55  20  	);
11:21:55  21  
11:21:55  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
11:21:55  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:55  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:55  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
11:21:55  26  	);
11:21:55  27  
11:21:55  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
11:21:55  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
11:21:55  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
11:21:55  31  	  out_request_files   OUT SYS_REFCURSOR
11:21:55  32  	);
11:21:55  33  
11:21:55  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
11:21:55  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:55  36  	  out_count OUT NUMBER
11:21:55  37  	);
11:21:55  38  
11:21:55  39  	PROCEDURE GET_CREDIT_CARD_LICENSE (
11:21:55  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
11:21:55  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
11:21:55  42  	  out_card_license     OUT SYS_REFCURSOR
11:21:55  43  	);
11:21:55  44  
11:21:55  45  	PROCEDURE UPDATE_CC_UPDATE(
11:21:55  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
11:21:55  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:55  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
11:21:55  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
11:21:55  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
11:21:55  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:55  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
11:21:55  53  	);
11:21:55  54  
11:21:55  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
11:21:55  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
11:21:55  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:55  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
11:21:55  59  	);
11:21:55  60  
11:21:55  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
11:21:55  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
11:21:55  63  	  out_request_file     OUT SYS_REFCURSOR
11:21:55  64  	);
11:21:55  65  
11:21:55  66  	PROCEDURE SUSPEND_CREDIT_CARD (
11:21:55  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
11:21:55  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:55  69  	);
11:21:55  70  
11:21:55  71  	PROCEDURE UPDATE_CREDIT_CARD (
11:21:55  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
11:21:55  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:55  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
11:21:55  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:55  76  	);
11:21:55  77  
11:21:55  78  	PROCEDURE COMPLETABLE_REQUESTS (
11:21:55  79  	  out_request_files OUT SYS_REFCURSOR
11:21:55  80  	);
11:21:55  81  
11:21:55  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
11:21:55  83  	  in_max_hours_before_report IN  NUMBER,
11:21:55  84  	  out_request_files	     OUT SYS_REFCURSOR
11:21:55  85  	);
11:21:55  86  
11:21:55  87  END PROCS_CUPY;
11:21:55  88  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE
11:21:55   2  PACKAGE PROCS_ENTITLEMENT_V15 AS
11:21:55   3  
11:21:55   4  PROCEDURE GET_ALL_ENTITLEMENTS(
11:21:55   5  	in_group_id IN NUMBER,
11:21:55   6  	out_result_set OUT SYS_REFCURSOR);
11:21:55   7  
11:21:55   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
11:21:55   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:55  10  	out_result_set OUT SYS_REFCURSOR);
11:21:55  11  
11:21:55  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
11:21:55  13  	in_subscription_id IN NUMBER,
11:21:55  14  	out_uri OUT VARCHAR2);
11:21:55  15  
11:21:55  16  END PROCS_ENTITLEMENT_V15;
11:21:55  17  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_CREDIT_CARD(
11:21:55   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
11:21:55   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
11:21:55   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
11:21:55   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
11:21:55   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
11:21:55   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
11:21:55  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
11:21:55  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
11:21:55  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
11:21:55  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
11:21:55  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
11:21:55  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:55  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
11:21:55  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
11:21:55  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
11:21:55  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
11:21:55  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
11:21:55  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
11:21:55  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
11:21:55  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
11:21:55  24  );
11:21:55  25  
11:21:55  26  PROCEDURE UPDATE_CREDIT_CARD(
11:21:55  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
11:21:55  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:55  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
11:21:55  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:55  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
11:21:55  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
11:21:55  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
11:21:55  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
11:21:55  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
11:21:55  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:55  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
11:21:55  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
11:21:55  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
11:21:55  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
11:21:55  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
11:21:55  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
11:21:55  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
11:21:55  45  );
11:21:55  46  
11:21:55  47  PROCEDURE CREATE_PAYPAL(
11:21:55  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
11:21:55  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
11:21:55  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
11:21:55  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:55  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
11:21:55  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
11:21:55  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
11:21:55  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
11:21:55  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
11:21:55  57  	in_state			IN PAYPAL.STATE%TYPE,
11:21:55  58  	in_city 			IN PAYPAL.CITY%TYPE,
11:21:55  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
11:21:55  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
11:21:55  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
11:21:55  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
11:21:55  63  );
11:21:55  64  
11:21:55  65  PROCEDURE UPDATE_PAYPAL(
11:21:55  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
11:21:55  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:55  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
11:21:55  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
11:21:55  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
11:21:55  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:55  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:55  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
11:21:55  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
11:21:55  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:55  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
11:21:55  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:55  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
11:21:55  79  );
11:21:55  80  
11:21:55  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
11:21:55  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
11:21:55  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
11:21:55  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
11:21:55  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:55  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
11:21:55  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:55  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
11:21:55  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
11:21:55  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
11:21:55  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
11:21:55  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
11:21:55  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
11:21:55  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
11:21:55  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
11:21:55  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
11:21:55  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
11:21:55  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
11:21:55  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
11:21:55 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
11:21:55 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:55 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
11:21:55 103  );
11:21:55 104  
11:21:55 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
11:21:55 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
11:21:55 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:55 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
11:21:55 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
11:21:55 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
11:21:55 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
11:21:55 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
11:21:55 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
11:21:55 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
11:21:55 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
11:21:55 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
11:21:55 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
11:21:55 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
11:21:55 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
11:21:55 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:55 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:55 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
11:21:55 123  );
11:21:55 124  
11:21:55 125  END PROCS_FIN_INSTRUMENTS_CRU_V15;
11:21:55 126  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
11:21:55   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:55   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
11:21:55   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
11:21:55   7  );
11:21:55   8  
11:21:55   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
11:21:55  10  	in_invoice_id		     IN NUMBER,
11:21:55  11  	out_is_invoice_for_redeem_gc OUT NUMBER
11:21:55  12  );
11:21:55  13  
11:21:55  14  PROCEDURE GET_UNREDEEMED_GCS (
11:21:55  15  	out_result_set		OUT SYS_REFCURSOR,
11:21:55  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:55  17  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:55  18  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:55  19  );
11:21:55  20  
11:21:55  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
11:21:55  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:55  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
11:21:55  24  );
11:21:55  25  
11:21:55  26  PROCEDURE ADD_CREDIT_CARD (
11:21:55  27  /*
11:21:55  28  Throws exceptions:
11:21:55  29  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  31  */
11:21:55  32  	in_group_id		  IN NUMBER,
11:21:55  33  	in_updated_by		  IN VARCHAR2,
11:21:55  34  	in_instrument_name	  IN VARCHAR2,
11:21:55  35  	in_card_holder_name	  IN VARCHAR2,
11:21:55  36  	in_street_address	  IN VARCHAR2,
11:21:55  37  	in_street_address2	  IN VARCHAR2,
11:21:55  38  	in_state		  IN VARCHAR2,
11:21:55  39  	in_city 		  IN VARCHAR2,
11:21:55  40  	in_postal_code		  IN VARCHAR2,
11:21:55  41  	in_country		  IN CHAR,
11:21:55  42  	in_last_four_cc 	  IN VARCHAR2,
11:21:55  43  	in_expiration_date	  IN DATE,
11:21:55  44  	in_credit_card_type_id	  IN NUMBER,
11:21:55  45  	in_token		  IN VARCHAR2,
11:21:55  46  	in_chase_profile_id	  IN VARCHAR2,
11:21:55  47  	in_credit_card_status_id  IN NUMBER,
11:21:55  48  	in_private_first_name	  IN VARCHAR2,
11:21:55  49  	in_private_last_name	  IN VARCHAR2,
11:21:55  50  	out_credit_card_id	  OUT NUMBER
11:21:55  51  );
11:21:55  52  
11:21:55  53  /******************************************************************************/
11:21:55  54  
11:21:55  55  PROCEDURE ADD_PAYPAL (
11:21:55  56  /*
11:21:55  57  Throws exceptions:
11:21:55  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  60  */
11:21:55  61  	in_group_id			IN NUMBER,
11:21:55  62  	in_instrument_name		IN VARCHAR2,
11:21:55  63  	in_private_email_address	IN VARCHAR2,
11:21:55  64  	in_created_by			IN VARCHAR2,
11:21:55  65  	in_paypal_status_id		IN NUMBER,
11:21:55  66  	in_paypal_prvt_street_address	IN VARCHAR2,
11:21:55  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
11:21:55  68  	in_state			IN VARCHAR2,
11:21:55  69  	in_city 			IN VARCHAR2,
11:21:55  70  	in_postal_code			IN VARCHAR2,
11:21:55  71  	in_country			IN CHAR,
11:21:55  72  	in_expiration_date		IN DATE,
11:21:55  73  	in_secret_token 		IN VARCHAR2,
11:21:55  74  	out_paypal_id			OUT NUMBER
11:21:55  75  );
11:21:55  76  
11:21:55  77  /********************************************/
11:21:55  78  
11:21:55  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
11:21:55  80  /*
11:21:55  81  Throws exceptions:
11:21:55  82  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55  83  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  84  */
11:21:55  85  	in_code       IN VARCHAR,
11:21:55  86  	out_result_set OUT SYS_REFCURSOR
11:21:55  87  );
11:21:55  88  
11:21:55  89  /********************************************/
11:21:55  90  
11:21:55  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
11:21:55  92  /*
11:21:55  93  Throws exceptions:
11:21:55  94  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55  95  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  96  */
11:21:55  97  	in_gift_certificate_id IN NUMBER,
11:21:55  98  	out_result_set	       OUT SYS_REFCURSOR
11:21:55  99  );
11:21:55 100  
11:21:55 101  /********************************************/
11:21:55 102  
11:21:55 103  PROCEDURE DISABLE_CREDIT_CARD (
11:21:55 104  /*
11:21:55 105  Throws exceptions:
11:21:55 106  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 107  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 108  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55 109  */
11:21:55 110  	in_credit_card_id IN NUMBER,
11:21:55 111  	in_updated_by	  IN VARCHAR2
11:21:55 112  );
11:21:55 113  
11:21:55 114  /********************************************/
11:21:55 115  
11:21:55 116  PROCEDURE DISABLE_PAYPAL (
11:21:55 117  /*
11:21:55 118  Throws exceptions:
11:21:55 119  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 120  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 121  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55 122  */
11:21:55 123  	in_paypal_id  IN NUMBER,
11:21:55 124  	in_updated_by IN VARCHAR2
11:21:55 125  );
11:21:55 126  
11:21:55 127  /********************************************/
11:21:55 128  
11:21:55 129  PROCEDURE UPDATE_CREDIT_CARD (
11:21:55 130  /*
11:21:55 131  Throws exceptions:
11:21:55 132  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 133  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 134  */
11:21:55 135  	in_credit_card_id	  IN NUMBER,
11:21:55 136  	in_updated_by		  IN VARCHAR2,
11:21:55 137  	in_instrument_name	  IN VARCHAR2,
11:21:55 138  	in_is_default		  IN NUMBER
11:21:55 139  );
11:21:55 140  
11:21:55 141  /********************************************/
11:21:55 142  
11:21:55 143  PROCEDURE START_GC_PURCHASING (
11:21:55 144  	in_group_id		  IN NUMBER,
11:21:55 145  	in_offer_chain_id	  IN VARCHAR2,
11:21:55 146  	in_gift_certificate_code  IN  VARCHAR2,
11:21:55 147  	in_created_by		  IN  VARCHAR2,
11:21:55 148  	in_recipient_name	  IN  VARCHAR2,
11:21:55 149  	in_recipient_email	  IN  VARCHAR2,
11:21:55 150  	in_recipient_address_id   IN NUMBER,
11:21:55 151  	in_recipient_notify_date  IN DATE,
11:21:55 152  	in_sender_name		  IN VARCHAR2,
11:21:55 153  	in_sender_email 	  IN VARCHAR2,
11:21:55 154  	in_gift_message 	  IN  VARCHAR2,
11:21:55 155  	in_expiration_date	  IN DATE,
11:21:55 156  	out_gift_certificate_id   OUT NUMBER,
11:21:55 157  	out_invoice_id		  OUT NUMBER
11:21:55 158  );
11:21:55 159  
11:21:55 160  PROCEDURE FINALIZE_GC_PURCHASING (
11:21:55 161  	in_invoice_id	      IN NUMBER,
11:21:55 162  	in_created_by	      IN VARCHAR2,
11:21:55 163  	in_instrument_id      IN NUMBER,
11:21:55 164  	in_instrument_type_id IN NUMBER,
11:21:55 165  	in_order_id	      IN VARCHAR2,
11:21:55 166  	in_transaction_id     IN NUMBER,
11:21:55 167  	out_charge_amount     OUT NUMBER
11:21:55 168  );
11:21:55 169  
11:21:55 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
11:21:55 171  	in_group_id	  IN NUMBER,
11:21:55 172  	in_offer_chain_id IN VARCHAR2,
11:21:55 173  	in_gift_certificate_code  IN  VARCHAR2,
11:21:55 174  	in_created_by IN  VARCHAR2,
11:21:55 175  	in_recipient_name IN  VARCHAR2,
11:21:55 176  	in_recipient_email IN  VARCHAR2,
11:21:55 177  	in_sender_name IN VARCHAR2,
11:21:55 178  	in_sender_email IN VARCHAR2,
11:21:55 179  	in_gift_message IN  VARCHAR2,
11:21:55 180  	in_instrument_id  IN  NUMBER,
11:21:55 181  	in_instrument_type_id IN NUMBER,
11:21:55 182  	in_expiration_date IN DATE,
11:21:55 183  	in_order_id IN VARCHAR2,
11:21:55 184  	in_transaction_id IN NUMBER
11:21:55 185  );
11:21:55 186  
11:21:55 187  /*********************************************/
11:21:55 188  
11:21:55 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
11:21:55 190  	in_group_id			IN NUMBER,
11:21:55 191  	in_gift_certificate_code	IN VARCHAR2,
11:21:55 192  	in_created_by			IN VARCHAR2,
11:21:55 193  	in_redeemer_address_id		IN NUMBER,
11:21:55 194  	in_fin_instrument_id		IN NUMBER,
11:21:55 195  	in_fin_instrument_type_id	IN NUMBER,
11:21:55 196  	in_redemption_offer_chain_id	IN NUMBER,
11:21:55 197  	out_subscription_id		OUT NUMBER,
11:21:55 198  	out_license_id			OUT NUMBER
11:21:55 199  );
11:21:55 200  
11:21:55 201  /********************************************/
11:21:55 202  
11:21:55 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
11:21:55 204  	in_group_id	       IN  NUMBER,
11:21:55 205  	out_instrument_type_id OUT NUMBER,
11:21:55 206  	out_instrument_id      OUT NUMBER
11:21:55 207  );
11:21:55 208  
11:21:55 209  /************************************************/
11:21:55 210  
11:21:55 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
11:21:55 212  	in_group_id	      IN NUMBER,
11:21:55 213  	in_instrument_type_id IN NUMBER,
11:21:55 214  	in_instrument_id      IN NUMBER,
11:21:55 215  	in_updated_by	      IN VARCHAR2
11:21:55 216  );
11:21:55 217  
11:21:55 218  /***************************************************/
11:21:55 219  
11:21:55 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
11:21:55 221  	in_group_id	      IN NUMBER
11:21:55 222  );
11:21:55 223  
11:21:55 224  /****************************************************/
11:21:55 225  
11:21:55 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:55 227  	in_credit_card_id IN  NUMBER,
11:21:55 228  	out_result_set	  OUT SYS_REFCURSOR
11:21:55 229  );
11:21:55 230  
11:21:55 231  /****************************************************/
11:21:55 232  
11:21:55 233  PROCEDURE GET_PAYPAL_BY_ID (
11:21:55 234  	in_paypal_id   IN  NUMBER,
11:21:55 235  	out_result_set OUT SYS_REFCURSOR
11:21:55 236  );
11:21:55 237  
11:21:55 238  /***********************************************/
11:21:55 239  
11:21:55 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
11:21:55 241  	in_credit_card_id NUMBER
11:21:55 242  ) RETURN NUMBER;
11:21:55 243  
11:21:55 244  /*************************************************/
11:21:55 245  
11:21:55 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
11:21:55 247  	in_group_id    IN NUMBER,
11:21:55 248  	out_result_set OUT SYS_REFCURSOR
11:21:55 249  );
11:21:55 250  
11:21:55 251  /*************************************************/
11:21:55 252  
11:21:55 253  -- isGiftCertificateForProperOffer
11:21:55 254  
11:21:55 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
11:21:55 256  	in_gift_certificate_id IN NUMBER,
11:21:55 257  	in_charge_id	       IN NUMBER,
11:21:55 258  	out_result	       OUT NUMBER
11:21:55 259  );
11:21:55 260  
11:21:55 261  FUNCTION IS_CREDIT_CARD_EXISTS (
11:21:55 262  /*
11:21:55 263  1 - if instrument exists
11:21:55 264  0 - else
11:21:55 265  */
11:21:55 266  	in_credit_card_id IN NUMBER
11:21:55 267  ) RETURN NUMBER;
11:21:55 268  
11:21:55 269  FUNCTION IS_PAYPAL_EXISTS (
11:21:55 270  /*
11:21:55 271  1 - if instrument exists
11:21:55 272  0 - else
11:21:55 273  */
11:21:55 274  	in_paypal_id IN NUMBER
11:21:55 275  ) RETURN NUMBER;
11:21:55 276  
11:21:55 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
11:21:55 278  /*
11:21:55 279  1 - if instrument exists
11:21:55 280  0 - else
11:21:55 281  */
11:21:55 282  	in_gift_certificate_id IN NUMBER
11:21:55 283  ) RETURN NUMBER;
11:21:55 284  
11:21:55 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
11:21:55 286  	in_credit_card_id IN NUMBER,
11:21:55 287  	out_group_id	  OUT NUMBER
11:21:55 288  );
11:21:55 289  
11:21:55 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
11:21:55 291  	in_paypal_id IN NUMBER,
11:21:55 292  	out_group_id	  OUT NUMBER
11:21:55 293  );
11:21:55 294  
11:21:55 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
11:21:55 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
11:21:55 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
11:21:55 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:55 299  );
11:21:55 300  
11:21:55 301  PROCEDURE UPDATE_PAYPAL_STATUS (
11:21:55 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
11:21:55 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
11:21:55 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
11:21:55 305  );
11:21:55 306  
11:21:55 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
11:21:55 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
11:21:55 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
11:21:55 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
11:21:55 311  );
11:21:55 312  
11:21:55 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:55 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:55 315  	out_result_set OUT SYS_REFCURSOR
11:21:55 316  );
11:21:55 317  
11:21:55 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
11:21:55 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
11:21:55 320  	in_old_fin_instrument_id   IN NUMBER,
11:21:55 321  	in_old_fin_instrument_type IN NUMBER,
11:21:55 322  	in_new_fin_instrument_id   IN NUMBER,
11:21:55 323  	in_new_fin_instrument_type IN NUMBER,
11:21:55 324  	in_updated_by		   IN VARCHAR2
11:21:55 325  );
11:21:55 326  
11:21:55 327  END PROCS_FIN_INSTRUMENTS_V15;
11:21:55 328  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.05
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
11:21:55   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:55   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
11:21:55   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
11:21:55   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
11:21:55   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
11:21:55   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
11:21:55  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
11:21:55  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:55  12  );
11:21:55  13  
11:21:55  14  PROCEDURE CREATE_GROUP_ACCOUNT (
11:21:55  15  	in_subscription_id	 IN NUMBER,
11:21:55  16  	in_group_name		 IN VARCHAR2,
11:21:55  17  	in_first_name		 IN VARCHAR2,
11:21:55  18  	in_last_name		 IN VARCHAR2,
11:21:55  19  	in_email		 IN VARCHAR2,
11:21:55  20  	in_phone		 IN VARCHAR2,
11:21:55  21  	in_organization_type	 IN VARCHAR2,
11:21:55  22  	in_seats		 IN NUMBER,
11:21:55  23  	in_seat_ttl_in_hours	 IN NUMBER,
11:21:55  24  	in_ip			 IN NUMBER,
11:21:55  25  	in_created_by		 IN VARCHAR2
11:21:55  26  );
11:21:55  27  
11:21:55  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
11:21:55  29  	in_group_account_id    IN NUMBER,
11:21:55  30  	in_borrower_account_id IN NUMBER,
11:21:55  31  	in_ip_address	       IN VARCHAR2,
11:21:55  32  	in_email_domain        IN VARCHAR2,
11:21:55  33  	in_start_date	       IN DATE,
11:21:55  34  	in_end_date	       IN DATE,
11:21:55  35  	in_created_by	       IN VARCHAR2
11:21:55  36  );
11:21:55  37  
11:21:55  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
11:21:55  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:55  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:55  41  );
11:21:55  42  
11:21:55  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
11:21:55  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
11:21:55  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:55  46  );
11:21:55  47  
11:21:55  48  PROCEDURE ADD_IP_RANGE (
11:21:55  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:55  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
11:21:55  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:55  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:55  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
11:21:55  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
11:21:55  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
11:21:55  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
11:21:55  57  );
11:21:55  58  
11:21:55  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
11:21:55  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:55  62  );
11:21:55  63  
11:21:55  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
11:21:55  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:55  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:55  67  );
11:21:55  68  
11:21:55  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
11:21:55  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:55  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:55  72  );
11:21:55  73  
11:21:55  74  PROCEDURE ADD_EMAIL_DOMAIN (
11:21:55  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:55  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
11:21:55  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
11:21:55  79  );
11:21:55  80  
11:21:55  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
11:21:55  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:55  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
11:21:55  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
11:21:55  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
11:21:55  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
11:21:55  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
11:21:55  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:55  89  );
11:21:55  90  
11:21:55  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
11:21:55  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:55  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
11:21:55  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:55  95  );
11:21:55  96  END PROCS_GROUP_ACCOUNT_CRU_V15;
11:21:55  97  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V15" As
11:21:55   2  
11:21:55   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
11:21:55   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:55   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
11:21:55   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:55   7  );
11:21:55   8  
11:21:55   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
11:21:55  10  	out_result_set OUT SYS_REFCURSOR
11:21:55  11  );
11:21:55  12  
11:21:55  13  PROCEDURE EXPIRE_SUB_SHARE (
11:21:55  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:55  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:55  16  );
11:21:55  17  
11:21:55  18  PROCEDURE EXPIRE_ALL_SHARES (
11:21:55  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
11:21:55  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:55  21  );
11:21:55  22  
11:21:55  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
11:21:55  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
11:21:55  25  	in_start	 IN  NUMBER,
11:21:55  26  	in_end		 IN  NUMBER,
11:21:55  27  	in_expired	 IN  NUMBER,
11:21:55  28  	out_result_set	 OUT SYS_REFCURSOR,
11:21:55  29  	out_shares_count OUT NUMBER
11:21:55  30  );
11:21:55  31  
11:21:55  32  PROCEDURE IS_VALID_IP_ADDRESS (
11:21:55  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:55  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:55  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:55  36  	out_is_valid	    OUT NUMBER
11:21:55  37  );
11:21:55  38  
11:21:55  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
11:21:55  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:55  42  	out_is_valid	    OUT NUMBER
11:21:55  43  );
11:21:55  44  
11:21:55  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
11:21:55  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
11:21:55  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
11:21:55  48  	Out_Result_Set	       Out Sys_Refcursor
11:21:55  49  );
11:21:55  50  
11:21:55  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
11:21:55  52  	in_group_account_id IN NUMBER,
11:21:55  53  	in_start	    IN NUMBER,
11:21:55  54  	in_end		    IN NUMBER,
11:21:55  55  	Out_Result_Set	    OUT Sys_Refcursor
11:21:55  56  );
11:21:55  57  
11:21:55  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
11:21:55  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
11:21:55  60  	Out_Result_Set	   Out Sys_Refcursor
11:21:55  61  );
11:21:55  62  
11:21:55  63  PROCEDURE CREATE_GROUP_ACCOUNT (
11:21:55  64  	in_subscription_id	 IN NUMBER,
11:21:55  65  	in_group_name		 IN VARCHAR2,
11:21:55  66  	in_first_name		 IN VARCHAR2,
11:21:55  67  	in_last_name		 IN VARCHAR2,
11:21:55  68  	in_email		 IN VARCHAR2,
11:21:55  69  	in_phone		 IN VARCHAR2,
11:21:55  70  	in_organization_type	 IN VARCHAR2,
11:21:55  71  	in_seats		 IN NUMBER,
11:21:55  72  	in_seat_ttl_in_hours	 IN NUMBER,
11:21:55  73  	in_ip			 IN NUMBER,
11:21:55  74  	in_created_by		 IN VARCHAR2
11:21:55  75  );
11:21:55  76  
11:21:55  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
11:21:55  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:55  79  	out_result_set	    OUT SYS_REFCURSOR
11:21:55  80  );
11:21:55  81  
11:21:55  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
11:21:55  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:55  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:55  85  	out_result_set	    OUT SYS_REFCURSOR
11:21:55  86  );
11:21:55  87  
11:21:55  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
11:21:55  89  	in_group_account_id   IN NUMBER,
11:21:55  90  	in_start	      IN NUMBER,
11:21:55  91  	in_end		      IN NUMBER,
11:21:55  92  	in_status	      IN NUMBER,
11:21:55  93  	out_record_count      OUT NUMBER,
11:21:55  94  	out_result_set	      OUT SYS_REFCURSOR
11:21:55  95  );
11:21:55  96  
11:21:55  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
11:21:55  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55  99  	in_start	      IN NUMBER,
11:21:55 100  	in_end		      IN NUMBER,
11:21:55 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
11:21:55 102  	out_record_count      OUT NUMBER,
11:21:55 103  	out_result_set	      OUT SYS_REFCURSOR
11:21:55 104  );
11:21:55 105  
11:21:55 106  PROCEDURE ADD_EMAIL_DOMAIN (
11:21:55 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:55 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
11:21:55 110  );
11:21:55 111  
11:21:55 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
11:21:55 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:55 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:55 115  );
11:21:55 116  
11:21:55 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
11:21:55 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:55 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:55 120  );
11:21:55 121  
11:21:55 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
11:21:55 123  	in_group_account_id    IN NUMBER,
11:21:55 124  	in_borrower_account_id IN NUMBER,
11:21:55 125  	in_ip_address	       IN VARCHAR2,
11:21:55 126  	in_email_domain        IN VARCHAR2,
11:21:55 127  	in_created_by	       IN VARCHAR2
11:21:55 128  );
11:21:55 129  
11:21:55 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
11:21:55 131  	in_group_account_id   IN NUMBER,
11:21:55 132  	out_occupied_seats   OUT NUMBER
11:21:55 133  );
11:21:55 134  
11:21:55 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
11:21:55 136  	in_group_account_id   IN NUMBER
11:21:55 137  ) RETURN NUMBER;
11:21:55 138  
11:21:55 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
11:21:55 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:55 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:55 142  );
11:21:55 143  
11:21:55 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
11:21:55 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
11:21:55 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:55 147  );
11:21:55 148  
11:21:55 149  PROCEDURE ADD_IP_RANGE (
11:21:55 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:55 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
11:21:55 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:55 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:55 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
11:21:55 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
11:21:55 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
11:21:55 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
11:21:55 158  );
11:21:55 159  
11:21:55 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
11:21:55 161  	in_group_account_id IN NUMBER,
11:21:55 162  	out_group_id OUT NUMBER
11:21:55 163  );
11:21:55 164  
11:21:55 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
11:21:55 166  	in_group_account_ip_range_id IN NUMBER,
11:21:55 167  	out_group_id OUT NUMBER
11:21:55 168  );
11:21:55 169  
11:21:55 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
11:21:55 171  	in_group_account_email_dom_id IN NUMBER,
11:21:55 172  	out_group_id OUT NUMBER
11:21:55 173  );
11:21:55 174  
11:21:55 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
11:21:55 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:55 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
11:21:55 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
11:21:55 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
11:21:55 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
11:21:55 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
11:21:55 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:55 183  );
11:21:55 184  
11:21:55 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
11:21:55 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:55 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
11:21:55 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:55 189  );
11:21:55 190  
11:21:55 191  END PROCS_GROUP_ACCOUNT_V15;
11:21:55 192  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_HISTORY
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_ADDRESS_HISTORY(
11:21:55   4  /*
11:21:55   5  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55   8  */
11:21:55   9  	in_address_id		     IN NUMBER,
11:21:55  10  	in_system_activity_reason_id IN NUMBER
11:21:55  11  );
11:21:55  12  
11:21:55  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
11:21:55  14  /*
11:21:55  15  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  17  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  18  */
11:21:55  19  	in_account_id		     IN NUMBER,
11:21:55  20  	in_system_activity_reason_id IN NUMBER
11:21:55  21  );
11:21:55  22  
11:21:55  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
11:21:55  24  /*
11:21:55  25  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  27  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  28  */
11:21:55  29  	in_subscription_id	     IN NUMBER,
11:21:55  30  	in_system_activity_reason_id IN NUMBER
11:21:55  31  );
11:21:55  32  
11:21:55  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
11:21:55  34  /*
11:21:55  35  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  37  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  38  */
11:21:55  39  	in_credit_card_id	      IN NUMBER,
11:21:55  40  	in_system_activity_reason_id  IN  NUMBER
11:21:55  41  );
11:21:55  42  
11:21:55  43  PROCEDURE CREATE_PAYPAL_HISTORY(
11:21:55  44  /*
11:21:55  45  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  46  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  47  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  48  */
11:21:55  49  	in_paypal_id		      IN NUMBER,
11:21:55  50  	in_system_activity_reason_id  IN NUMBER
11:21:55  51  );
11:21:55  52  
11:21:55  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
11:21:55  54  /*
11:21:55  55  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  56  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  57  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  58  */
11:21:55  59  	in_gift_certificate_id	      IN NUMBER,
11:21:55  60  	in_system_activity_reason_id  IN  NUMBER
11:21:55  61  );
11:21:55  62  
11:21:55  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
11:21:55  64  /*
11:21:55  65  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  67  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  68  */
11:21:55  69  	in_transaction_id	     IN NUMBER,
11:21:55  70  	in_system_activity_reason_id IN NUMBER
11:21:55  71  );
11:21:55  72  
11:21:55  73  PROCEDURE CREATE_INVOICE_HISTORY (
11:21:55  74  /*
11:21:55  75  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  76  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  77  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  78  */
11:21:55  79  	in_invoice_id		     IN NUMBER,
11:21:55  80  	in_system_activity_reason_id IN NUMBER
11:21:55  81  );
11:21:55  82  
11:21:55  83  PROCEDURE CREATE_LICENSE_HISTORY (
11:21:55  84  /*
11:21:55  85  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  87  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  88  */
11:21:55  89  	in_license_id		     IN NUMBER,
11:21:55  90  	in_system_activity_reason_id IN NUMBER
11:21:55  91  );
11:21:55  92  
11:21:55  93  PROCEDURE CREATE_CHARGE_HISTORY (
11:21:55  94  /*
11:21:55  95  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  96  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  97  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55  98  */
11:21:55  99  	in_charge_id		    IN NUMBER,
11:21:55 100  	in_system_activity_reason_id IN NUMBER
11:21:55 101  );
11:21:55 102  
11:21:55 103  END PROCS_HISTORY_V15;
11:21:55 104  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_INVOICE_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_INVOICE (
11:21:55   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
11:21:55   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
11:21:55   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
11:21:55   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
11:21:55   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
11:21:55   9  );
11:21:55  10  
11:21:55  11  PROCEDURE UPDATE_INVOICE (
11:21:55  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
11:21:55  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
11:21:55  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
11:21:55  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
11:21:55  16  );
11:21:55  17  
11:21:55  18  END PROCS_INVOICE_CRU_V15;
11:21:55  19  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.01
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_INVOICE
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE IS_INVOICE_FOR_GC (
11:21:55   4  	in_invoice_id  IN NUMBER,
11:21:55   5  	out_result     OUT NUMBER
11:21:55   6  );
11:21:55   7  
11:21:55   8  PROCEDURE CREATE_INVOICE(
11:21:55   9  /*
11:21:55  10  Throws exceptions:
11:21:55  11  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  12  */
11:21:55  13  	  in_invoice_status IN NUMBER,
11:21:55  14  	  in_created_by     IN VARCHAR2,
11:21:55  15  	  in_tax_exempt_id  IN VARCHAR2,
11:21:55  16  	  out_invoice_id    OUT NUMBER
11:21:55  17  );
11:21:55  18  
11:21:55  19  PROCEDURE GET_PENDING_INVOICES (
11:21:55  20  /*
11:21:55  21  Throws exceptions:
11:21:55  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  23  */
11:21:55  24  	out_result_set1      OUT SYS_REFCURSOR,
11:21:55  25  	out_result_set2      OUT SYS_REFCURSOR,
11:21:55  26  	out_result_set3      OUT SYS_REFCURSOR,
11:21:55  27  	in_row_number	     IN NUMBER DEFAULT NULL
11:21:55  28  );
11:21:55  29  
11:21:55  30  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:55  31  /*
11:21:55  32  Throws exceptions:
11:21:55  33  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  34  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  35  */
11:21:55  36  	in_invoice_id IN  NUMBER,
11:21:55  37  	out_amount    OUT NUMBER
11:21:55  38  );
11:21:55  39  
11:21:55  40  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
11:21:55  41  	in_invoice_id IN  NUMBER
11:21:55  42  ) RETURN NUMBER;
11:21:55  43  
11:21:55  44  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
11:21:55  45  /*
11:21:55  46  Throws exceptions:
11:21:55  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  49  */
11:21:55  50  	in_invoice_id  IN  NUMBER,
11:21:55  51  	out_account_id OUT NUMBER
11:21:55  52  );
11:21:55  53  
11:21:55  54  PROCEDURE GET_INVOICE_DETAILS (
11:21:55  55  /*
11:21:55  56  Throws exceptions:
11:21:55  57  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  58  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  59  */
11:21:55  60  	in_invoice_id	   IN  NUMBER,
11:21:55  61  	out_group_id	   OUT NUMBER,
11:21:55  62  	out_status_id	   OUT NUMBER,
11:21:55  63  	out_line_items_set OUT SYS_REFCURSOR,
11:21:55  64  	out_pp_charges_set OUT SYS_REFCURSOR,
11:21:55  65  	out_cc_charges_set OUT SYS_REFCURSOR,
11:21:55  66  	out_gc_charges_set OUT SYS_REFCURSOR
11:21:55  67  );
11:21:55  68  -- norlov: #38796
11:21:55  69  PROCEDURE GET_TRANSACTION_INVOICE (
11:21:55  70  /*
11:21:55  71  Throws exceptions:
11:21:55  72  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  74  */
11:21:55  75  	in_transaction_id  IN  NUMBER,
11:21:55  76  	out_result_set	      OUT SYS_REFCURSOR
11:21:55  77  );
11:21:55  78  
11:21:55  79  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:55  80  /*
11:21:55  81  Throws exceptions:
11:21:55  82  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  83  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  84  */
11:21:55  85  	in_invoice_id		       IN NUMBER,
11:21:55  86  	in_invoice_status_id	       IN NUMBER,
11:21:55  87  	in_updated_by		       IN VARCHAR2
11:21:55  88  );
11:21:55  89  
11:21:55  90  FUNCTION IS_INVOICE_PAYING_STARTED (
11:21:55  91  /*
11:21:55  92  Throws exceptions:
11:21:55  93  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  95  */
11:21:55  96  	in_invoice_id IN NUMBER
11:21:55  97  ) RETURN NUMBER;
11:21:55  98  
11:21:55  99  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
11:21:55 100  	in_invoice_id  IN NUMBER,
11:21:55 101  	out_is_started OUT NUMBER
11:21:55 102  );
11:21:55 103  
11:21:55 104  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
11:21:55 105  	in_invoice_id	      IN NUMBER,
11:21:55 106  	in_chargeback_date    IN DATE,
11:21:55 107  	out_chargeback_amount OUT NUMBER
11:21:55 108  );
11:21:55 109  
11:21:55 110  PROCEDURE APPLY_REFUND (
11:21:55 111  	in_invoice_id	     IN NUMBER,
11:21:55 112  	in_chargeback_amount IN NUMBER,
11:21:55 113  	in_created_by	     IN VARCHAR2,
11:21:55 114  	out_charge_id	     OUT NUMBER
11:21:55 115  );
11:21:55 116  
11:21:55 117  PROCEDURE GET_MAX_REFUND (
11:21:55 118  	in_invoice_id IN NUMBER,
11:21:55 119  	out_amount    OUT NUMBER
11:21:55 120  );
11:21:55 121  
11:21:55 122  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
11:21:55 123  	in_invoice_id	    IN NUMBER,
11:21:55 124  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
11:21:55 125  	out_days_num	    OUT NUMBER
11:21:55 126  );
11:21:55 127  
11:21:55 128  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:55 129  	in_invoice_id  IN NUMBER,
11:21:55 130  	out_result_set OUT SYS_REFCURSOR
11:21:55 131  );
11:21:55 132  
11:21:55 133  PROCEDURE GET_INVOICE_LICENSES (
11:21:55 134  	in_invoice_id  IN NUMBER,
11:21:55 135  	out_result_set OUT SYS_REFCURSOR
11:21:55 136  );
11:21:55 137  
11:21:55 138  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
11:21:55 139  	in_invoice_id	   IN NUMBER,
11:21:55 140  	out_offer_chain_id OUT NUMBER
11:21:55 141  );
11:21:55 142  
11:21:55 143  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
11:21:55 144  -- Closing invoice without refund
11:21:55 145  	in_invoice_id IN NUMBER,
11:21:55 146  	in_updated_by IN VARCHAR2
11:21:55 147  );
11:21:55 148  
11:21:55 149  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
11:21:55 150  	in_invoice_id	    IN NUMBER,
11:21:55 151  	out_subscription_id OUT NUMBER
11:21:55 152  );
11:21:55 153  
11:21:55 154  PROCEDURE IS_INVOICE_TAX_EXEMPT (
11:21:55 155  /*
11:21:55 156  Throws exceptions:
11:21:55 157  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:55 158  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 159  Return:
11:21:55 160  	GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
11:21:55 161  	GLOBAL_CONSTANTS_V15.FALSE else
11:21:55 162  */
11:21:55 163  	in_invoice_id	  IN NUMBER,
11:21:55 164  	out_is_tax_exempt OUT NUMBER
11:21:55 165  );
11:21:55 166  
11:21:55 167  PROCEDURE GET_INVOICE_BY_ID (
11:21:55 168  	in_invoice_id  IN NUMBER,
11:21:55 169  	out_result_set OUT SYS_REFCURSOR
11:21:55 170  );
11:21:55 171  
11:21:55 172  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
11:21:55 173  	in_invoice_id		      IN NUMBER,
11:21:55 174  	out_is_tax_calculation_needed OUT NUMBER
11:21:55 175  );
11:21:55 176  
11:21:55 177  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
11:21:55 178  	in_invoice_id		     IN NUMBER,
11:21:55 179  	in_updated_by		     IN VARCHAR2,
11:21:55 180  	in_is_tax_calculation_needed IN NUMBER
11:21:55 181  );
11:21:55 182  
11:21:55 183  PROCEDURE REFUND_INVOICE (
11:21:55 184  	in_invoice_id	   IN NUMBER,
11:21:55 185  	in_refund_amount   IN NUMBER,
11:21:55 186  	in_note 	   IN VARCHAR2,
11:21:55 187  	in_created_by	   IN VARCHAR2,
11:21:55 188  	out_charge_id	   OUT NUMBER
11:21:55 189  );
11:21:55 190  
11:21:55 191  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
11:21:55 192  	in_invoice_id		    IN NUMBER,
11:21:55 193  	out_order_id		    OUT VARCHAR2,
11:21:55 194  	out_external_transaction_id OUT VARCHAR2
11:21:55 195  );
11:21:55 196  
11:21:55 197  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
11:21:55 198  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
11:21:55 199  	out_result_set OUT SYS_REFCURSOR
11:21:55 200  );
11:21:55 201  
11:21:55 202  PROCEDURE IS_REVOKE_ENTITLEMENTS(
11:21:55 203  	in_invoice_id IN NUMBER,
11:21:55 204  	out_is_revoke OUT NUMBER
11:21:55 205  );
11:21:55 206  
11:21:55 207  END PROCS_INVOICE_V15;
11:21:55 208  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> /*
11:21:55 SQL> CREATE TABLE ITUNES_RECEIPT (
11:21:55 SQL> 	id NUMBER NOT NULL ENABLE,
11:21:55 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
11:21:55 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
11:21:55 SQL> 	status NUMBER,
11:21:55 SQL> 	quantity NUMBER,
11:21:55 SQL> 	product_id VARCHAR(1024),
11:21:55 SQL> 	transaction_id VARCHAR(1024),
11:21:55 SQL> 	purchase_date TIMESTAMP,
11:21:55 SQL> 	original_transaction_id VARCHAR(1024),
11:21:55 SQL> 	original_purchase_date TIMESTAMP,
11:21:55 SQL> 	app_item_id VARCHAR(1024),
11:21:55 SQL> 	version_external_id NUMBER,
11:21:55 SQL> 	bid VARCHAR(1024),
11:21:55 SQL> 	bvrs VARCHAR(255),
11:21:55 SQL> 	expires_date TIMESTAMP,
11:21:55 SQL> 	create_date DATE NOT NULL,
11:21:55 SQL> 	created_by VARCHAR(255) NOT NULL,
11:21:55 SQL> 	update_date DATE NOT NULL,
11:21:55 SQL> 	updated_by VARCHAR(255) NOT NULL,
11:21:55 SQL> 	last_check_date DATE NOT NULL,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
11:21:55 SQL> )
11:21:55 SQL> TABLESPACE CORE;
11:21:55 SQL> */
11:21:55 SQL> 
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_RECEIPT(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  */
11:21:55   8  	  out_id	      OUT NUMBER,
11:21:55   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:55  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:55  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
11:21:55  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:55  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:55  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:55  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:55  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:55  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:55  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:55  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:55  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
11:21:55  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
11:21:55  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:55  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
11:21:55  24  );
11:21:55  25  
11:21:55  26  PROCEDURE UPDATE_RECEIPT(
11:21:55  27  /*
11:21:55  28  Throws exceptions:
11:21:55  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  30  */
11:21:55  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
11:21:55  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:55  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
11:21:55  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:55  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:55  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:55  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:55  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:55  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:55  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:55  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:55  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
11:21:55  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
11:21:55  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:55  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
11:21:55  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
11:21:55  47  );
11:21:55  48  
11:21:55  49  PROCEDURE LINK_ITUNES_RECEIPT(
11:21:55  50  /*
11:21:55  51  Throws exceptions:
11:21:55  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  53  */
11:21:55  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
11:21:55  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:55  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
11:21:55  57  );
11:21:55  58  
11:21:55  59  PROCEDURE MARK_RECEIPT_CHECKED(
11:21:55  60  /*
11:21:55  61  Throws exceptions:
11:21:55  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  63  */
11:21:55  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
11:21:55  65  );
11:21:55  66  
11:21:55  67  END PROCS_ITUNES_RECEIPT_CRU_V15;
11:21:55  68  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> /*
11:21:55 SQL> CREATE TABLE ITUNES_RECEIPT (
11:21:55 SQL> 	id NUMBER NOT NULL ENABLE,
11:21:55 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
11:21:55 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
11:21:55 SQL> 	status NUMBER,
11:21:55 SQL> 	quantity NUMBER,
11:21:55 SQL> 	product_id VARCHAR(1024),
11:21:55 SQL> 	transaction_id VARCHAR(1024),
11:21:55 SQL> 	purchase_date TIMESTAMP,
11:21:55 SQL> 	original_transaction_id VARCHAR(1024),
11:21:55 SQL> 	original_purchase_date TIMESTAMP,
11:21:55 SQL> 	app_item_id VARCHAR(1024),
11:21:55 SQL> 	version_external_id NUMBER,
11:21:55 SQL> 	bid VARCHAR(1024),
11:21:55 SQL> 	bvrs VARCHAR(255),
11:21:55 SQL> 	expires_date TIMESTAMP,
11:21:55 SQL> 	create_date DATE NOT NULL,
11:21:55 SQL> 	created_by VARCHAR(255) NOT NULL,
11:21:55 SQL> 	update_date DATE NOT NULL,
11:21:55 SQL> 	updated_by VARCHAR(255) NOT NULL,
11:21:55 SQL> 	last_check_date DATE NOT NULL,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
11:21:55 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
11:21:55 SQL> )
11:21:55 SQL> TABLESPACE CORE;
11:21:55 SQL> */
11:21:55 SQL> 
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
11:21:55   4  	      /*
11:21:55   5  	      Throws exceptions:
11:21:55   6  	      APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   7  	      */
11:21:55   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:55   9  	      out_result_set	  OUT SYS_REFCURSOR
11:21:55  10  );
11:21:55  11  
11:21:55  12  PROCEDURE CREATE_RECEIPT(
11:21:55  13  /*
11:21:55  14  Throws exceptions:
11:21:55  15  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  16  */
11:21:55  17  	  out_id	      OUT NUMBER,
11:21:55  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:55  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:55  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
11:21:55  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:55  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:55  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:55  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:55  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:55  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:55  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:55  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:55  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
11:21:55  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
11:21:55  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:55  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
11:21:55  33  );
11:21:55  34  
11:21:55  35  PROCEDURE UPDATE_RECEIPT(
11:21:55  36  /*
11:21:55  37  Throws exceptions:
11:21:55  38  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  39  */
11:21:55  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
11:21:55  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:55  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
11:21:55  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:55  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:55  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:55  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:55  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:55  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:55  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:55  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:55  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
11:21:55  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
11:21:55  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:55  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
11:21:55  55  	  in_is_expired       IN NUMBER
11:21:55  56  );
11:21:55  57  
11:21:55  58  PROCEDURE LINK_ITUNES_RECEIPT(
11:21:55  59  /*
11:21:55  60  Throws exceptions:
11:21:55  61  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  62  */
11:21:55  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
11:21:55  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:55  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
11:21:55  66  );
11:21:55  67  
11:21:55  68  PROCEDURE MARK_RECEIPT_CHECKED(
11:21:55  69  /*
11:21:55  70  Throws exceptions:
11:21:55  71  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  72  */
11:21:55  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
11:21:55  74  );
11:21:55  75  
11:21:55  76  PROCEDURE GET_ITUNES_RECEIPTS (
11:21:55  77  /*
11:21:55  78  Throws exceptions:
11:21:55  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  80  */
11:21:55  81  	out_result_set	    OUT SYS_REFCURSOR,
11:21:55  82  	in_row_number	    IN NUMBER DEFAULT 500
11:21:55  83  );
11:21:55  84  
11:21:55  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
11:21:55  86  /*
11:21:55  87  Throws exceptions:
11:21:55  88  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  89  */
11:21:55  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
11:21:55  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
11:21:55  92  );
11:21:55  93  
11:21:55  94  END PROCS_ITUNES_RECEIPT_V15;
11:21:55  95  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_LICENSE_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_LICENSE(
11:21:55   4  	out_license_id		    OUT LICENSE.ID%TYPE,
11:21:55   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
11:21:55   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
11:21:55   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
11:21:55   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
11:21:55   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
11:21:55  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
11:21:55  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
11:21:55  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
11:21:55  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
11:21:55  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
11:21:55  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
11:21:55  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
11:21:55  17  );
11:21:55  18  
11:21:55  19  PROCEDURE UPDATE_LICENSE (
11:21:55  20  	in_license_id		    IN LICENSE.ID%TYPE,
11:21:55  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
11:21:55  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
11:21:55  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
11:21:55  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
11:21:55  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
11:21:55  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
11:21:55  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
11:21:55  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
11:21:55  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
11:21:55  30  );
11:21:55  31  
11:21:55  32  END PROCS_LICENSE_CRU_V15;
11:21:55  33  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_LICENSE
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_LICENSE(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   8  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:55   9  */
11:21:55  10  	in_status_id		    IN NUMBER,
11:21:55  11  	in_needs_entitlements	    IN NUMBER,
11:21:55  12  	in_start_date		    IN DATE,
11:21:55  13  	in_end_date		    IN DATE,
11:21:55  14  	in_offer_id		    IN NUMBER,
11:21:55  15  	in_subscription_id	    IN NUMBER,
11:21:55  16  	in_invoice_id		    IN NUMBER,
11:21:55  17  	in_created_by		    IN VARCHAR2,
11:21:55  18  	in_is_extension 	    IN NUMBER,
11:21:55  19  	in_current_offer_index	    IN NUMBER,
11:21:55  20  	in_current_offer_recurr_num IN NUMBER,
11:21:55  21  	out_license_id		    OUT NUMBER
11:21:55  22  );
11:21:55  23  
11:21:55  24  /*********************************************/
11:21:55  25  
11:21:55  26  PROCEDURE UPDATE_LICENSE_STATUS(
11:21:55  27  /*
11:21:55  28  Throws exceptions:
11:21:55  29  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  31  */
11:21:55  32  	  in_license_id     IN NUMBER,
11:21:55  33  	  in_license_status IN NUMBER,
11:21:55  34  	  in_updated_by     IN VARCHAR2,
11:21:55  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:55  36  );
11:21:55  37  
11:21:55  38  /*********************************************/
11:21:55  39  
11:21:55  40  PROCEDURE GET_ENDING_LICENSES (
11:21:55  41  	in_hours_number IN NUMBER,
11:21:55  42  	out_result_set OUT SYS_REFCURSOR
11:21:55  43  );
11:21:55  44  
11:21:55  45  /*********************************************/
11:21:55  46  
11:21:55  47  PROCEDURE GET_ENDING_LICENSES_CC (
11:21:55  48  	in_hours_number IN NUMBER,
11:21:55  49  	out_result_set OUT SYS_REFCURSOR,
11:21:55  50  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:55  51  );
11:21:55  52  
11:21:55  53  /**********************************************/
11:21:55  54  
11:21:55  55  PROCEDURE GET_RECURRING_OFFER (
11:21:55  56  	in_license_id  IN NUMBER,
11:21:55  57  	out_result_set OUT SYS_REFCURSOR
11:21:55  58  );
11:21:55  59  
11:21:55  60  /**********************************************/
11:21:55  61  
11:21:55  62  PROCEDURE GET_NEXT_OFFER (
11:21:55  63  	in_license_id  IN NUMBER,
11:21:55  64  	out_result_set OUT SYS_REFCURSOR
11:21:55  65  );
11:21:55  66  
11:21:55  67  /**********************************************/
11:21:55  68  
11:21:55  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
11:21:55  70  	in_license_id IN NUMBER,
11:21:55  71  	out_group_id  OUT NUMBER
11:21:55  72  );
11:21:55  73  
11:21:55  74  /**************************************************/
11:21:55  75  
11:21:55  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
11:21:55  77  	out_result_set OUT SYS_REFCURSOR
11:21:55  78  );
11:21:55  79  
11:21:55  80  /**************************************************/
11:21:55  81  
11:21:55  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
11:21:55  83  	in_license_id	      IN NUMBER,
11:21:55  84  	in_needs_entitlements IN NUMBER,
11:21:55  85  	in_updated_by	      IN VARCHAR2
11:21:55  86  );
11:21:55  87  
11:21:55  88  PROCEDURE GET_ENDED_GC_LICENSES (
11:21:55  89  	out_result_set		OUT SYS_REFCURSOR,
11:21:55  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:55  91  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:55  92  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:55  93  );
11:21:55  94  
11:21:55  95  PROCEDURE GET_LICENSE_BY_ID (
11:21:55  96  
11:21:55  97  	in_license_id  IN NUMBER,
11:21:55  98  
11:21:55  99  	out_result_set OUT SYS_REFCURSOR
11:21:55 100  
11:21:55 101  );
11:21:55 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
11:21:55 103  	in_subscription_id IN NUMBER,
11:21:55 104  	in_end_date IN DATE,
11:21:55 105  	in_updated_by IN VARCHAR2
11:21:55 106  );
11:21:55 107  END PROCS_LICENSE_V15;
11:21:55 108  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE CREATE_LINE_ITEM (
11:21:55   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
11:21:55   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
11:21:55   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
11:21:55   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
11:21:55   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
11:21:55   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
11:21:55  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
11:21:55  11  );
11:21:55  12  
11:21:55  13  PROCEDURE UPDATE_LINE_ITEM (
11:21:55  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
11:21:55  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
11:21:55  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
11:21:55  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
11:21:55  18  );
11:21:55  19  
11:21:55  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
11:21:55  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
11:21:55  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
11:21:55  23  );
11:21:55  24  
11:21:55  25  END PROCS_LINE_ITEMS_CRU_V15;
11:21:55  26  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_LINE_ITEMS
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE ADD_LINE_ITEMS(
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   8  */
11:21:55   9  	in_invoice_id IN NUMBER,
11:21:55  10  	in_offer_id   IN NUMBER,
11:21:55  11  	in_created_by IN VARCHAR2
11:21:55  12  );
11:21:55  13  
11:21:55  14  /****************************************************/
11:21:55  15  
11:21:55  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
11:21:55  17  	in_line_item_id    IN NUMBER,
11:21:55  18  	in_amount	   IN NUMBER,
11:21:55  19  	in_discount_amount IN NUMBER,
11:21:55  20  	in_taxes_amount    IN NUMBER
11:21:55  21  );
11:21:55  22  
11:21:55  23  /****************************************************/
11:21:55  24  
11:21:55  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:55  26  /*
11:21:55  27  Throws exceptions:
11:21:55  28  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  29  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  30  */
11:21:55  31  	in_invoice_id  IN NUMBER,
11:21:55  32  	out_result_set OUT SYS_REFCURSOR
11:21:55  33  );
11:21:55  34  
11:21:55  35  /****************************************************/
11:21:55  36  
11:21:55  37  PROCEDURE GET_LINE_ITEM_TAXES (
11:21:55  38  /*
11:21:55  39  Throws exceptions:
11:21:55  40  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  41  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  42  */
11:21:55  43  	in_line_item_id IN  NUMBER,
11:21:55  44  	out_result_set	OUT SYS_REFCURSOR
11:21:55  45  );
11:21:55  46  /****************************************************/
11:21:55  47  
11:21:55  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
11:21:55  49  /*
11:21:55  50  Throws exceptions:
11:21:55  51  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  53  */
11:21:55  54  	in_line_item_id IN  NUMBER,
11:21:55  55  	out_result_set	OUT SYS_REFCURSOR
11:21:55  56  );
11:21:55  57  
11:21:55  58  /****************************************************/
11:21:55  59  
11:21:55  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
11:21:55  61  /*
11:21:55  62  Throws exceptions:
11:21:55  63  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  64  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  65  */
11:21:55  66  	in_line_item_id     IN	NUMBER,
11:21:55  67  	out_amount	    OUT NUMBER
11:21:55  68  );
11:21:55  69  
11:21:55  70  /****************************************************/
11:21:55  71  
11:21:55  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
11:21:55  73  /*
11:21:55  74  Throws exceptions:
11:21:55  75  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  76  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  77  */
11:21:55  78  	in_line_item_id     IN	NUMBER
11:21:55  79  ) RETURN NUMBER;
11:21:55  80  
11:21:55  81  END PROCS_LINE_ITEMS_V15;
11:21:55  82  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.05
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_LOCKING
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V15" AS
11:21:55   2  
11:21:55   3  /*
11:21:55   4  Removed by Sergey
11:21:55   5  10.12.2010
11:21:55   6  PROCEDURE INITIALIZE_SYSTEM;
11:21:55   7  
11:21:55   8  PROCEDURE INITIALIZE_ACCOUNT (
11:21:55   9  	in_account_id IN NUMBER
11:21:55  10  );
11:21:55  11  
11:21:55  12  PROCEDURE INITIALIZE_GROUP (
11:21:55  13  	in_group_id IN NUMBER
11:21:55  14  );
11:21:55  15  */
11:21:55  16  
11:21:55  17  PROCEDURE LOCK_ACCOUNT (
11:21:55  18  	in_group_id    IN NUMBER,
11:21:55  19  	in_lock_key    IN VARCHAR2,
11:21:55  20  	in_seconds_num IN NUMBER,
11:21:55  21  	in_created_by  IN VARCHAR2,
11:21:55  22  	in_reason      IN VARCHAR2
11:21:55  23  );
11:21:55  24  
11:21:55  25  PROCEDURE RELEASE_LOCK (
11:21:55  26  	in_group_id IN NUMBER,
11:21:55  27  	in_lock_key IN VARCHAR2
11:21:55  28  );
11:21:55  29  
11:21:55  30  END PROCS_LOCKING_V15;
11:21:55  31  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.01
11:21:55 SQL> 
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> -- DDL for package PROCS_OFFER_CHAIN
11:21:55 SQL> --------------------------------------------------------------------------------
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V15" AS
11:21:55   2  
11:21:55   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:55   4  /*
11:21:55   5  Throws exceptions:
11:21:55   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55   8  */
11:21:55   9  	  in_offer_chain_id IN	 NUMBER,
11:21:55  10  	  out_result_set    OUT  SYS_REFCURSOR
11:21:55  11  );
11:21:55  12  
11:21:55  13  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
11:21:55  14  /*
11:21:55  15  Throws exceptions:
11:21:55  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  17  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:55  18  */
11:21:55  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:55  20  	out_result_set	   OUT SYS_REFCURSOR
11:21:55  21  );
11:21:55  22  
11:21:55  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
11:21:55  24  /*
11:21:55  25  Throws exceptions:
11:21:55  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  27  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:55  28  */
11:21:55  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:55  30  	out_result_set	   OUT SYS_REFCURSOR
11:21:55  31  );
11:21:55  32  
11:21:55  33  PROCEDURE GET_OFFER_CHAINS_OFFERS (
11:21:55  34  /*
11:21:55  35  Throws exceptions:
11:21:55  36  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:55  37  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:55  38  */
11:21:55  39  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:55  40  	out_result_set	   OUT SYS_REFCURSOR
11:21:55  41  );
11:21:55  42  
11:21:55  43  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
11:21:55  44  /*
11:21:55  45  Throws exceptions (codes):
11:21:55  46  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  47  */
11:21:55  48  	in_product_id  IN  NUMBER,
11:21:55  49  	out_result_set OUT SYS_REFCURSOR
11:21:55  50  );
11:21:55  51  
11:21:55  52  PROCEDURE GET_OFFER_CHAIN_PRICE (
11:21:55  53  /*
11:21:55  54  Throws exceptions (codes):
11:21:55  55  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  56  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  57  */
11:21:55  58  	in_offer_chain_id IN NUMBER,
11:21:55  59  	out_price	  OUT NUMBER
11:21:55  60  );
11:21:55  61  
11:21:55  62  PROCEDURE GET_FIRST_OFFER(
11:21:55  63  /*
11:21:55  64  Throws exceptions (codes):
11:21:55  65  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  67  */
11:21:55  68  	in_offer_chain_id IN  NUMBER,
11:21:55  69  	out_offer_id	  OUT NUMBER
11:21:55  70  );
11:21:55  71  
11:21:55  72  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
11:21:55  73  /*
11:21:55  74  Throws exceptions (codes):
11:21:55  75  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  76  */
11:21:55  77  	out_result_set OUT SYS_REFCURSOR
11:21:55  78  );
11:21:55  79  
11:21:55  80  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
11:21:55  81  /*
11:21:55  82  Throws exceptions (codes):
11:21:55  83  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  85  */
11:21:55  86  	in_offer_chain_id IN NUMBER,
11:21:55  87  	out_result_set	  OUT SYS_REFCURSOR
11:21:55  88  );
11:21:55  89  
11:21:55  90  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
11:21:55  91  /*
11:21:55  92  Throws exceptions (codes):
11:21:55  93  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55  95  */
11:21:55  96  	in_offer_chain_id	  IN NUMBER,
11:21:55  97  	in_offer_chain_start_date IN DATE
11:21:55  98  ) RETURN DATE;
11:21:55  99  
11:21:55 100  FUNCTION CALCULATE_OFFER_AMOUNT (
11:21:55 101  	in_offer_id IN NUMBER
11:21:55 102  ) RETURN NUMBER;
11:21:55 103  
11:21:55 104  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
11:21:55 105  	in_offer_chain_id IN NUMBER
11:21:55 106  ) RETURN NUMBER;
11:21:55 107  
11:21:55 108  FUNCTION GET_FIRST_OFFER_INDEX (
11:21:55 109  	in_offer_chain_id IN NUMBER
11:21:55 110  ) RETURN NUMBER;
11:21:55 111  
11:21:55 112  FUNCTION GET_NEXT_OFFER_INDEX (
11:21:55 113  /*
11:21:55 114  NULL, if not exists
11:21:55 115  */
11:21:55 116  	in_offer_chain_id	     IN NUMBER,
11:21:55 117  	in_offer_chain_current_index IN NUMBER
11:21:55 118  ) RETURN NUMBER;
11:21:55 119  
11:21:55 120  PROCEDURE P_GET_NEXT_OFFER_INDEX (
11:21:55 121  	in_offer_chain_id	     IN NUMBER,
11:21:55 122  	in_offer_chain_current_index IN NUMBER,
11:21:55 123  	out_next_offer_index	     OUT NUMBER
11:21:55 124  );
11:21:55 125  
11:21:55 126  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
11:21:55 127  	in_license_id		     IN NUMBER,
11:21:55 128  	in_offer_chain_current_index IN NUMBER,
11:21:55 129  	out_next_offer_index	     OUT NUMBER
11:21:55 130  );
11:21:55 131  
11:21:55 132  FUNCTION IS_OFFER_INDEX_EXISTS (
11:21:55 133  /*
11:21:55 134  1 - exists
11:21:55 135  0 - not exists
11:21:55 136  */
11:21:55 137  	in_offer_chain_id	   IN NUMBER,
11:21:55 138  	in_offer_chain_offer_index IN NUMBER
11:21:55 139  ) RETURN NUMBER;
11:21:55 140  
11:21:55 141  PROCEDURE GET_OFFER_LENGTH (
11:21:55 142  	in_offer_id IN NUMBER,
11:21:55 143  	out_years   OUT NUMBER,
11:21:55 144  	out_months  OUT NUMBER,
11:21:55 145  	out_days    OUT NUMBER
11:21:55 146  );
11:21:55 147  
11:21:55 148  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
11:21:55 149  	in_offer_id   IN NUMBER,
11:21:55 150  	in_start_date IN DATE DEFAULT SYSDATE,
11:21:55 151  	out_days      OUT NUMBER
11:21:55 152  );
11:21:55 153  
11:21:55 154  PROCEDURE GET_OFFER_PRODUCTS (
11:21:55 155  /*
11:21:55 156  Throws exceptions (codes):
11:21:55 157  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 158  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 159  */
11:21:55 160  	in_offer_id    IN NUMBER,
11:21:55 161  	out_result_set OUT SYS_REFCURSOR
11:21:55 162  );
11:21:55 163  
11:21:55 164  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
11:21:55 165  /*
11:21:55 166  Throws exceptions (codes):
11:21:55 167  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 168  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 169  */
11:21:55 170  	in_offer_chain_id IN NUMBER,
11:21:55 171  	out_result_set	  OUT SYS_REFCURSOR
11:21:55 172  );
11:21:55 173  
11:21:55 174  FUNCTION CHECK_FOR_SAME_PRODUCTS (
11:21:55 175  /*
11:21:55 176  Throws exceptions (codes):
11:21:55 177  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 178  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 179  Returns:
11:21:55 180  GLOBAL_CONSTANTS_V15.TRUE if there are at least one same product
11:21:55 181  GLOBAL_CONSTANTS_V15.FALSE else
11:21:55 182  */
11:21:55 183  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
11:21:55 184  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
11:21:55 185  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:55 186  ) RETURN NUMBER;
11:21:55 187  
11:21:55 188  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
11:21:55 189  /*
11:21:55 190  Throws exceptions (codes):
11:21:55 191  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 192  Returns:
11:21:55 193  GLOBAL_CONSTANTS_V15.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
11:21:55 194  GLOBAL_CONSTANTS_V15.FALSE else
11:21:55 195  */
11:21:55 196  	in_offer_chain_id IN NUMBER
11:21:55 197  ) RETURN NUMBER;
11:21:55 198  
11:21:55 199  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
11:21:55 200  /*
11:21:55 201  Throws exceptions (codes):
11:21:55 202  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 203  */
11:21:55 204  	in_offer_chain_id IN NUMBER
11:21:55 205  ) RETURN NUMBER;
11:21:55 206  
11:21:55 207  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
11:21:55 208  /*
11:21:55 209  Throws exceptions (codes):
11:21:55 210  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 211  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 212  */
11:21:55 213  	in_offer_chain_id   IN NUMBER,
11:21:55 214  	in_eligibility_name IN VARCHAR2,
11:21:55 215  	out_result_set	    OUT SYS_REFCURSOR
11:21:55 216  );
11:21:55 217  
11:21:55 218  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
11:21:55 219  /*
11:21:55 220  Throws exceptions (codes):
11:21:55 221  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 222  */
11:21:55 223  	in_offer_chain_ids  IN VARCHAR2,
11:21:55 224  	in_eligibility_name IN VARCHAR2,
11:21:55 225  	out_result_set	    OUT SYS_REFCURSOR
11:21:55 226  );
11:21:55 227  
11:21:55 228  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:55 229  /*
11:21:55 230  Throws exceptions (codes):
11:21:55 231  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 232  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 233  */
11:21:55 234  	in_offer_chain_id IN NUMBER,
11:21:55 235  	in_meta_data_name IN VARCHAR2,
11:21:55 236  	out_result_set	  OUT SYS_REFCURSOR
11:21:55 237  );
11:21:55 238  
11:21:55 239  PROCEDURE GET_OFFER_CHAINS_META_DATA (
11:21:55 240  /*
11:21:55 241  Throws exceptions (codes):
11:21:55 242  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 243  */
11:21:55 244  	in_offer_chain_ids IN VARCHAR2,
11:21:55 245  	in_meta_data_name  IN VARCHAR2,
11:21:55 246  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 247  );
11:21:55 248  
11:21:55 249  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
11:21:55 250  /*
11:21:55 251  Throws exceptions (codes):
11:21:55 252  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 253  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 254  */
11:21:55 255  	in_offer_id    IN NUMBER,
11:21:55 256  	out_result_set OUT SYS_REFCURSOR
11:21:55 257  );
11:21:55 258  
11:21:55 259  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:55 260  /*
11:21:55 261  Throws exceptions (codes):
11:21:55 262  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:55 263  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 264  */
11:21:55 265  	in_product_offering_id IN NUMBER,
11:21:55 266  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
11:21:55 267  	out_result_set	       OUT SYS_REFCURSOR
11:21:55 268  );
11:21:55 269  
11:21:55 270  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
11:21:55 271  /*
11:21:55 272  Throws exceptions (codes):
11:21:55 273  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:55 274  */
11:21:55 275  	in_offer_chain_1 IN NUMBER,
11:21:55 276  	in_offer_chain_2 IN NUMBER,
11:21:55 277  	out_result_set	OUT SYS_REFCURSOR
11:21:55 278  );
11:21:55 279  
11:21:55 280  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
11:21:55 281  	in_offer_chain_id IN NUMBER,
11:21:55 282  	in_meta_data_name IN VARCHAR2,
11:21:55 283  	out_value	  OUT VARCHAR2
11:21:55 284  );
11:21:55 285  
11:21:55 286  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
11:21:55 287  	in_offer_chain_id   IN NUMBER,
11:21:55 288  	in_eligibility_name IN VARCHAR2,
11:21:55 289  	out_value	    OUT VARCHAR2
11:21:55 290  );
11:21:55 291  
11:21:55 292  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
11:21:55 293  	in_offer_id    IN NUMBER,
11:21:55 294  	out_result_set OUT SYS_REFCURSOR
11:21:55 295  );
11:21:55 296  
11:21:55 297  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
11:21:55 298  	in_meta_data_name  IN VARCHAR2,
11:21:55 299  	in_meta_data_value IN VARCHAR2,
11:21:55 300  	out_result_set	   OUT SYS_REFCURSOR
11:21:55 301  );
11:21:55 302  
11:21:55 303  PROCEDURE GET_ALL_META_DATA (
11:21:55 304  	in_offer_chain_id IN NUMBER,
11:21:55 305  	out_result_set	  OUT SYS_REFCURSOR
11:21:55 306  );
11:21:55 307  
11:21:55 308  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
11:21:55 309  	in_group_id	  IN NUMBER,
11:21:55 310  	in_offer_chain_id IN NUMBER,
11:21:55 311  	out_is_eligible   OUT NUMBER,
11:21:55 312  	out_concurrent_subscription_id OUT NUMBER
11:21:55 313  );
11:21:55 314  
11:21:55 315  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:55 316  	in_offer_chain_id	 IN NUMBER,
11:21:55 317  	in_action_name		 IN VARCHAR2,
11:21:55 318  	out_notification_type_id OUT NUMBER
11:21:55 319  );
11:21:55 320  
11:21:55 321  END PROCS_OFFER_CHAIN_V15;
11:21:55 322  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:55 SQL> 
11:21:55 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
11:21:55   2  AS
11:21:55   3  
11:21:55   4  ----
11:21:55   5  --------------------------------------------------------------------------------
11:21:55   6  ----
11:21:55   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
11:21:55   8  	      returned from the previous call and store the result for the
11:21:55   9  	      next call.
11:21:55  10  	     This method will identify and create new Sync Events from trigger activity data */
11:21:55  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
11:21:55  12  ----
11:21:55  13  --------------------------------------------------------------------------------
11:21:55  14  ----
11:21:55  15  	  /* Internal logic call may need to be used to fix poller data */
11:21:55  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
11:21:55  17  ----
11:21:55  18  --------------------------------------------------------------------------------
11:21:55  19  ----
11:21:55  20  	  /* User request for sync events. Params should be hard-coded in the application
11:21:55  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
11:21:55  22  	      skipped. Last read time is logged.
11:21:55  23  	     Params:
11:21:55  24  		  set_maximum: Size of each transfer set
11:21:55  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
11:21:55  26  	     Returns:
11:21:55  27  		  set_id: Transfer set id, duplicated for all entries
11:21:55  28  		  group_id: regi_id value
11:21:55  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
11:21:55  30  	  */
11:21:55  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
11:21:55  32  ----
11:21:55  33  --------------------------------------------------------------------------------
11:21:55  34  ----
11:21:55  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
11:21:55  36  	      single confirmation per transfer set.
11:21:55  37  	  */
11:21:55  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
11:21:55  39  ----
11:21:55  40  --------------------------------------------------------------------------------
11:21:55  41  ----
11:21:55  42  	  procedure SET_LAST_RUN(ts in timestamp);
11:21:55  43  	  procedure GET_LAST_RUN(ts out timestamp);
11:21:55  44  END PROCS_POLLING_SYNC;
11:21:55  45  .
11:21:55 SQL> /

Package created.

Elapsed: 00:00:00.06
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_PRODUCT
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE GET_PRODUCTS (
11:21:56   4  /*
11:21:56   5  Throws exceptions:
11:21:56   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56   7  */
11:21:56   8  	in_status_id   IN  NUMBER,
11:21:56   9  	out_result_set OUT SYS_REFCURSOR
11:21:56  10  );
11:21:56  11  
11:21:56  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:56  13  /*
11:21:56  14  Throws exceptions:
11:21:56  15  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  16  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  17  */
11:21:56  18  	in_product_offering_id	IN NUMBER,
11:21:56  19  	out_result_set OUT SYS_REFCURSOR
11:21:56  20  );
11:21:56  21  
11:21:56  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
11:21:56  23  /*
11:21:56  24  Throws exceptions:
11:21:56  25  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  27  */
11:21:56  28  	in_product_id	    IN NUMBER,
11:21:56  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
11:21:56  30  	out_result_set	    OUT SYS_REFCURSOR
11:21:56  31  );
11:21:56  32  
11:21:56  33  PROCEDURE GET_PRODUCT_BY_ID (
11:21:56  34  	in_product_id  IN NUMBER,
11:21:56  35  	out_result_set OUT SYS_REFCURSOR
11:21:56  36  );
11:21:56  37  
11:21:56  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
11:21:56  39  	in_line_item_id IN NUMBER,
11:21:56  40  	out_result_set	OUT SYS_REFCURSOR
11:21:56  41  );
11:21:56  42  
11:21:56  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
11:21:56  44  	in_product_offering_id IN NUMBER,
11:21:56  45  	out_result_set	OUT SYS_REFCURSOR
11:21:56  46  );
11:21:56  47  
11:21:56  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
11:21:56  49  	in_product_offering_id IN NUMBER,
11:21:56  50  	out_result_set	       OUT SYS_REFCURSOR
11:21:56  51  );
11:21:56  52  
11:21:56  53  END PROCS_PRODUCT_V15;
11:21:56  54  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
11:21:56   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
11:21:56   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
11:21:56   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
11:21:56   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
11:21:56  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
11:21:56  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
11:21:56  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:56  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
11:21:56  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
11:21:56  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
11:21:56  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:56  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:56  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
11:21:56  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
11:21:56  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
11:21:56  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
11:21:56  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
11:21:56  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
11:21:56  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
11:21:56  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
11:21:56  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
11:21:56  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
11:21:56  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
11:21:56  29  );
11:21:56  30  
11:21:56  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
11:21:56  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
11:21:56  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
11:21:56  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
11:21:56  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
11:21:56  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
11:21:56  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
11:21:56  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
11:21:56  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
11:21:56  40  );
11:21:56  41  
11:21:56  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
11:21:56  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
11:21:56  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
11:21:56  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
11:21:56  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
11:21:56  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
11:21:56  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
11:21:56  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
11:21:56  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
11:21:56  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
11:21:56  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
11:21:56  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
11:21:56  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
11:21:56  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
11:21:56  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
11:21:56  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
11:21:56  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
11:21:56  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
11:21:56  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
11:21:56  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
11:21:56  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
11:21:56  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
11:21:56  65  );
11:21:56  66  
11:21:56  67  PROCEDURE CREATE_CPT_EXCEPTION (
11:21:56  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
11:21:56  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
11:21:56  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
11:21:56  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
11:21:56  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
11:21:56  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
11:21:56  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
11:21:56  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
11:21:56  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
11:21:56  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
11:21:56  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:56  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:56  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
11:21:56  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:56  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
11:21:56  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
11:21:56  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
11:21:56  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
11:21:56  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
11:21:56  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
11:21:56  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
11:21:56  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
11:21:56  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
11:21:56  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
11:21:56  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
11:21:56  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
11:21:56  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
11:21:56  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
11:21:56  97  );
11:21:56  98  
11:21:56  99  PROCEDURE CREATE_CPT_DEPOSIT (
11:21:56 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
11:21:56 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
11:21:56 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
11:21:56 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
11:21:56 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
11:21:56 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
11:21:56 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
11:21:56 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
11:21:56 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
11:21:56 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
11:21:56 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:56 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:56 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
11:21:56 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:56 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
11:21:56 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
11:21:56 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
11:21:56 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
11:21:56 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
11:21:56 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
11:21:56 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
11:21:56 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
11:21:56 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
11:21:56 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
11:21:56 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
11:21:56 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
11:21:56 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
11:21:56 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
11:21:56 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
11:21:56 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
11:21:56 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
11:21:56 132  );
11:21:56 133  
11:21:56 134  PROCEDURE CREATE_PP_SETTLEMENT (
11:21:56 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
11:21:56 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
11:21:56 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
11:21:56 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
11:21:56 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
11:21:56 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
11:21:56 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
11:21:56 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
11:21:56 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
11:21:56 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
11:21:56 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
11:21:56 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
11:21:56 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
11:21:56 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
11:21:56 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
11:21:56 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
11:21:56 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
11:21:56 153  );
11:21:56 154  
11:21:56 155  PROCEDURE CREATE_PP_DISPUTE (
11:21:56 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
11:21:56 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
11:21:56 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
11:21:56 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
11:21:56 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
11:21:56 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
11:21:56 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
11:21:56 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
11:21:56 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
11:21:56 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
11:21:56 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
11:21:56 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
11:21:56 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
11:21:56 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
11:21:56 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
11:21:56 172  );
11:21:56 173  
11:21:56 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
11:21:56 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
11:21:56 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
11:21:56 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:56 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
11:21:56 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
11:21:56 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
11:21:56 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
11:21:56 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
11:21:56 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
11:21:56 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
11:21:56 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
11:21:56 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
11:21:56 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
11:21:56 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
11:21:56 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
11:21:56 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
11:21:56 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
11:21:56 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
11:21:56 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
11:21:56 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
11:21:56 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
11:21:56 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
11:21:56 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
11:21:56 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
11:21:56 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
11:21:56 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
11:21:56 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
11:21:56 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
11:21:56 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
11:21:56 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
11:21:56 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
11:21:56 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
11:21:56 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
11:21:56 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
11:21:56 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
11:21:56 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
11:21:56 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
11:21:56 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
11:21:56 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
11:21:56 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
11:21:56 215  );
11:21:56 216  
11:21:56 217  PROCEDURE GET_EXT_SOURCE_LOG (
11:21:56 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
11:21:56 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
11:21:56 220  	out_result_set		 OUT SYS_REFCURSOR
11:21:56 221  );
11:21:56 222  
11:21:56 223  END PROCS_RECONCILIATION_CRU_V15;
11:21:56 224  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.08
11:21:56 SQL> 
11:21:56 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
11:21:56 SQL> 
11:21:56 SQL> whenever sqlerror exit failure
11:21:56 SQL> 
11:21:56 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
11:21:56   2  
11:21:56   3  ----
11:21:56   4  --------------------------------------------------------------------------------
11:21:56   5  ----
11:21:56   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
11:21:56   7  	      return line_item.amount%type;
11:21:56   8  ----
11:21:56   9  --------------------------------------------------------------------------------
11:21:56  10  ----
11:21:56  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
11:21:56  12  	      return line_item.amount%type;
11:21:56  13  ----
11:21:56  14  --------------------------------------------------------------------------------
11:21:56  15  ----
11:21:56  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
11:21:56  17  	      in_lower_date_bound DATE,
11:21:56  18  	      in_upper_date_bound DATE,
11:21:56  19  	      out_lic_cur OUT sys_refcursor
11:21:56  20  	  );
11:21:56  21  ----
11:21:56  22  --------------------------------------------------------------------------------
11:21:56  23  ----
11:21:56  24  END PROCS_REPORTING_1A;
11:21:56  25  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.11
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
11:21:56   2  
11:21:56   3  ----
11:21:56   4  --------------------------------------------------------------------------------
11:21:56   5  ----
11:21:56   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56   7  ----
11:21:56   8  --------------------------------------------------------------------------------
11:21:56   9  ----
11:21:56  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  11  ----
11:21:56  12  --------------------------------------------------------------------------------
11:21:56  13  ----
11:21:56  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  15  ----
11:21:56  16  --------------------------------------------------------------------------------
11:21:56  17  ----
11:21:56  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  19  ----
11:21:56  20  --------------------------------------------------------------------------------
11:21:56  21  ----
11:21:56  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  23  ----
11:21:56  24  --------------------------------------------------------------------------------
11:21:56  25  ----
11:21:56  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  27  ----
11:21:56  28  --------------------------------------------------------------------------------
11:21:56  29  ----
11:21:56  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  31  ----
11:21:56  32  --------------------------------------------------------------------------------
11:21:56  33  ----
11:21:56  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  35  ----
11:21:56  36  --------------------------------------------------------------------------------
11:21:56  37  ----
11:21:56  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  39  ----
11:21:56  40  --------------------------------------------------------------------------------
11:21:56  41  ----
11:21:56  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  43  ----
11:21:56  44  --------------------------------------------------------------------------------
11:21:56  45  ----
11:21:56  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  47  ----
11:21:56  48  --------------------------------------------------------------------------------
11:21:56  49  ----
11:21:56  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  51  ----
11:21:56  52  --------------------------------------------------------------------------------
11:21:56  53  ----
11:21:56  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  55  ----
11:21:56  56  --------------------------------------------------------------------------------
11:21:56  57  ----
11:21:56  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  59  ----
11:21:56  60  --------------------------------------------------------------------------------
11:21:56  61  ----
11:21:56  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  63  ----
11:21:56  64  --------------------------------------------------------------------------------
11:21:56  65  ----
11:21:56  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  67  ----
11:21:56  68  --------------------------------------------------------------------------------
11:21:56  69  ----
11:21:56  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  71  ----
11:21:56  72  --------------------------------------------------------------------------------
11:21:56  73  ----
11:21:56  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  75  ----
11:21:56  76  --------------------------------------------------------------------------------
11:21:56  77  ----
11:21:56  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  79  ----
11:21:56  80  --------------------------------------------------------------------------------
11:21:56  81  ----
11:21:56  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  83  ----
11:21:56  84  --------------------------------------------------------------------------------
11:21:56  85  ----
11:21:56  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  87  ----
11:21:56  88  --------------------------------------------------------------------------------
11:21:56  89  ----
11:21:56  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  91  ----
11:21:56  92  --------------------------------------------------------------------------------
11:21:56  93  ----
11:21:56  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  95  ----
11:21:56  96  --------------------------------------------------------------------------------
11:21:56  97  ----
11:21:56  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56  99  ----
11:21:56 100  --------------------------------------------------------------------------------
11:21:56 101  ----
11:21:56 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 103  ----
11:21:56 104  --------------------------------------------------------------------------------
11:21:56 105  ----
11:21:56 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 107  ----
11:21:56 108  --------------------------------------------------------------------------------
11:21:56 109  ----
11:21:56 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 111  ----
11:21:56 112  --------------------------------------------------------------------------------
11:21:56 113  ----
11:21:56 114  /**/
11:21:56 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 116  ----
11:21:56 117  --------------------------------------------------------------------------------
11:21:56 118  ----
11:21:56 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 120  ----
11:21:56 121  --------------------------------------------------------------------------------
11:21:56 122  ----
11:21:56 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 124  ----
11:21:56 125  --------------------------------------------------------------------------------
11:21:56 126  ----
11:21:56 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 128  ----
11:21:56 129  --------------------------------------------------------------------------------
11:21:56 130  ----
11:21:56 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 132  ----
11:21:56 133  --------------------------------------------------------------------------------
11:21:56 134  ----
11:21:56 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 136  ----
11:21:56 137  --------------------------------------------------------------------------------
11:21:56 138  ----
11:21:56 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 140  ----
11:21:56 141  --------------------------------------------------------------------------------
11:21:56 142  ----
11:21:56 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 144  ----
11:21:56 145  --------------------------------------------------------------------------------
11:21:56 146  ----
11:21:56 147  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 148  ----
11:21:56 149  --------------------------------------------------------------------------------
11:21:56 150  ----
11:21:56 151  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
11:21:56 152  ----
11:21:56 153  --------------------------------------------------------------------------------
11:21:56 154  ----
11:21:56 155  /**/
11:21:56 156  END PROCS_REPORTING;
11:21:56 157  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.06
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_REPORTS
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
11:21:56   2  
11:21:56   3  FUNCTION GET_PRODUCT_NAMES(
11:21:56   4  	in_offer_id IN NUMBER
11:21:56   5  ) RETURN VARCHAR2;
11:21:56   6  
11:21:56   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
11:21:56   8  	in_start_date  IN DATE,
11:21:56   9  	in_end_date    IN DATE,
11:21:56  10  	out_result_set OUT SYS_REFCURSOR
11:21:56  11  );
11:21:56  12  
11:21:56  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
11:21:56  14  	in_offer_id	       IN NUMBER,
11:21:56  15  	in_start_date	       IN DATE,
11:21:56  16  	in_end_date	       IN DATE,
11:21:56  17  	out_new_purchasers_num OUT NUMBER,
11:21:56  18  	out_renewals_num       OUT NUMBER,
11:21:56  19  	out_product_names      OUT VARCHAR2,
11:21:56  20  	out_total_dollar_value OUT NUMBER,
11:21:56  21  	out_unique_purchasers  OUT NUMBER
11:21:56  22  );
11:21:56  23  
11:21:56  24  /*
11:21:56  25  FUNCTIONS FOR THE FLASH REPORT
11:21:56  26  */
11:21:56  27  
11:21:56  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
11:21:56  29  	in_offer_id	       IN NUMBER,
11:21:56  30  	in_start_date	       IN DATE,
11:21:56  31  	in_end_date	       IN DATE
11:21:56  32  ) RETURN NUMBER;
11:21:56  33  
11:21:56  34  FUNCTION FLR_RENEWALS_NUM (
11:21:56  35  	in_offer_id	       IN NUMBER,
11:21:56  36  	in_start_date	       IN DATE,
11:21:56  37  	in_end_date	       IN DATE
11:21:56  38  ) RETURN NUMBER;
11:21:56  39  
11:21:56  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
11:21:56  41  	in_offer_id	       IN NUMBER,
11:21:56  42  	in_start_date	       IN DATE,
11:21:56  43  	in_end_date	       IN DATE
11:21:56  44  ) RETURN NUMBER;
11:21:56  45  
11:21:56  46  FUNCTION FLR_UNIQUE_PURCHASERS (
11:21:56  47  	in_offer_id	       IN NUMBER,
11:21:56  48  	in_start_date	       IN DATE,
11:21:56  49  	in_end_date	       IN DATE
11:21:56  50  ) RETURN NUMBER;
11:21:56  51  
11:21:56  52  END PROCS_REPORTS_V5;
11:21:56  53  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_SUBSCRIPTION(
11:21:56   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
11:21:56   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:56   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
11:21:56   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
11:21:56   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
11:21:56  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
11:21:56  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
11:21:56  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
11:21:56  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
11:21:56  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
11:21:56  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
11:21:56  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
11:21:56  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
11:21:56  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
11:21:56  19  );
11:21:56  20  
11:21:56  21  PROCEDURE UPDATE_SUBSCRIPTION(
11:21:56  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
11:21:56  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:56  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
11:21:56  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
11:21:56  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
11:21:56  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
11:21:56  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
11:21:56  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:56  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
11:21:56  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
11:21:56  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
11:21:56  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
11:21:56  34  );
11:21:56  35  
11:21:56  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
11:21:56  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
11:21:56  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:56  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
11:21:56  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:56  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
11:21:56  42  );
11:21:56  43  
11:21:56  44  END PROCS_SUBSCRIPTION_CRU_V15;
11:21:56  45  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_SUBSCRIPTION
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE START_SUBSCRIPTION_CREATION (
11:21:56   4  	in_group_id	      IN NUMBER,
11:21:56   5  	in_created_by	      IN VARCHAR2,
11:21:56   6  	in_offer_chain_id     IN NUMBER,
11:21:56   7  	in_instrument_type_id IN NUMBER,
11:21:56   8  	in_instrument_id      IN NUMBER,
11:21:56   9  	in_agent_id	      IN NUMBER,
11:21:56  10  	in_note 	      IN VARCHAR2,
11:21:56  11  	out_subscription_id   OUT NUMBER,
11:21:56  12  	out_invoice_id	      OUT NUMBER,
11:21:56  13  	out_new_license_id    OUT NUMBER,
11:21:56  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
11:21:56  15  );
11:21:56  16  
11:21:56  17  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
11:21:56  18  	in_subscription_id    IN NUMBER,
11:21:56  19  	in_invoice_id	      IN NUMBER,
11:21:56  20  	in_instrument_type_id IN NUMBER,
11:21:56  21  	in_instrument_id      IN NUMBER,
11:21:56  22  	in_created_by	      IN VARCHAR2
11:21:56  23  );
11:21:56  24  
11:21:56  25  PROCEDURE SUSPEND_SUBSCRIPTION(
11:21:56  26  /*
11:21:56  27  Throws exceptions:
11:21:56  28  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  29  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  31  */
11:21:56  32  	  in_subs_id	IN NUMBER ,
11:21:56  33  	  in_updated_by IN VARCHAR2
11:21:56  34  );
11:21:56  35  
11:21:56  36  PROCEDURE REACTIVATE_SUBSCRIPTION (
11:21:56  37  	in_subscription_id IN  NUMBER,
11:21:56  38  	in_updated_by	   IN  VARCHAR2
11:21:56  39  );
11:21:56  40  
11:21:56  41  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:56  42  /*
11:21:56  43  Throws exceptions:
11:21:56  44  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  45  */
11:21:56  46  	  in_subscription_id IN  NUMBER,
11:21:56  47  	  out_result_set      OUT SYS_REFCURSOR
11:21:56  48  );
11:21:56  49  
11:21:56  50  PROCEDURE GET_SUBSCRIPTION_INVOICES (
11:21:56  51  /*
11:21:56  52  Throws exceptions:
11:21:56  53  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56  54  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  55  */
11:21:56  56  	in_subscription_id  IN	NUMBER,
11:21:56  57  	out_result_set	    OUT SYS_REFCURSOR
11:21:56  58  );
11:21:56  59  
11:21:56  60  PROCEDURE GET_SUBSCRIPTION_NOTES (
11:21:56  61  /*
11:21:56  62  Throws exceptions:
11:21:56  63  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  64  */
11:21:56  65  	in_subscription_id  IN	NUMBER,
11:21:56  66  	out_result_set	    OUT SYS_REFCURSOR
11:21:56  67  );
11:21:56  68  
11:21:56  69  PROCEDURE ANNOTATE_SUBSCRIPTION (
11:21:56  70  /*
11:21:56  71  Throws exceptions:
11:21:56  72  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56  73  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  74  */
11:21:56  75  	in_subscription_id IN  NUMBER,
11:21:56  76  	in_agent_id	   IN  NUMBER,
11:21:56  77  	in_note 	   IN  VARCHAR2,
11:21:56  78  	in_created_by	   IN  VARCHAR2
11:21:56  79  );
11:21:56  80  
11:21:56  81  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
11:21:56  82  /*
11:21:56  83  Throws exceptions:
11:21:56  84  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  85  */
11:21:56  86  	out_result_set OUT SYS_REFCURSOR
11:21:56  87  );
11:21:56  88  
11:21:56  89  FUNCTION GET_RENEWAL_DATE (
11:21:56  90  /*
11:21:56  91  Throws exceptions:
11:21:56  92  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  93  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  94  */
11:21:56  95  	in_subscription_id in NUMBER
11:21:56  96  ) RETURN DATE;
11:21:56  97  
11:21:56  98  FUNCTION GET_RECENT_CHARGE (
11:21:56  99  /*
11:21:56 100  Throws exceptions:
11:21:56 101  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 102  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 103  */
11:21:56 104  	in_subscription_id IN NUMBER
11:21:56 105  ) RETURN NUMBER;
11:21:56 106  
11:21:56 107  FUNCTION GET_BILLING_CYCLE (
11:21:56 108  /*
11:21:56 109  Throws exceptions:
11:21:56 110  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 111  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 112  */
11:21:56 113  	in_subscription_id IN NUMBER
11:21:56 114  ) RETURN VARCHAR2;
11:21:56 115  
11:21:56 116  PROCEDURE REFUND_SUBSCRIPTION (
11:21:56 117  /*
11:21:56 118  Throws exceptions:
11:21:56 119  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 120  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 121  */
11:21:56 122  	in_subscription_id IN NUMBER,
11:21:56 123  	in_invoice_id	   IN NUMBER,
11:21:56 124  	in_refund_amount   IN NUMBER,
11:21:56 125  	in_note 	   IN VARCHAR2,
11:21:56 126  	in_created_by	   IN VARCHAR2,
11:21:56 127  	out_charge_id	   OUT NUMBER
11:21:56 128  );
11:21:56 129  
11:21:56 130  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
11:21:56 131  /*
11:21:56 132  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 133  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 134  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 135  */
11:21:56 136  	in_subscription_id	IN NUMBER,
11:21:56 137  	in_effective_start_date IN DATE,
11:21:56 138  	in_effective_end_date	IN DATE,
11:21:56 139  	in_note 		IN VARCHAR2,
11:21:56 140  	in_updated_by		IN VARCHAR2
11:21:56 141  );
11:21:56 142  
11:21:56 143  FUNCTION CALC_SUBSCRIPTION_END_DATE (
11:21:56 144  /*
11:21:56 145  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 146  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 147  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 148  Returns:
11:21:56 149  NULL if it is impossible to calculate end date (for example,
11:21:56 150  	offer chain includes offer with infinity recurrences number)
11:21:56 151  DATE else
11:21:56 152  */
11:21:56 153  	in_subscription_id IN NUMBER
11:21:56 154  ) RETURN DATE;
11:21:56 155  
11:21:56 156  PROCEDURE HAS_FUTURE_LICENSE (
11:21:56 157  /*
11:21:56 158  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 159  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 160  */
11:21:56 161  	in_license_id IN  NUMBER,
11:21:56 162  	out_result    OUT NUMBER
11:21:56 163  );
11:21:56 164  
11:21:56 165  PROCEDURE CLOSE_SUBSCRIPTION (
11:21:56 166  	in_subscription_id IN NUMBER,
11:21:56 167  	in_updated_by	   IN VARCHAR2
11:21:56 168  );
11:21:56 169  
11:21:56 170  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
11:21:56 171  	in_subscription_id IN NUMBER,
11:21:56 172  	out_group_id	   OUT NUMBER
11:21:56 173  );
11:21:56 174  
11:21:56 175  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
11:21:56 176  /*
11:21:56 177  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 178  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 179  */
11:21:56 180  	in_subscription_id IN NUMBER,
11:21:56 181  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 182  );
11:21:56 183  
11:21:56 184  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
11:21:56 185  /*
11:21:56 186  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 188  */
11:21:56 189  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
11:21:56 190  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
11:21:56 191  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:56 192  );
11:21:56 193  
11:21:56 194  PROCEDURE GET_ACTIVE_INVOICES_IDS (
11:21:56 195  /*
11:21:56 196  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 198  */
11:21:56 199  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
11:21:56 200  	in_subscription_id IN NUMBER,
11:21:56 201  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 202  );
11:21:56 203  
11:21:56 204  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
11:21:56 205  /*
11:21:56 206  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 207  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 208  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 209  */
11:21:56 210  	in_invoice_id	     IN NUMBER,
11:21:56 211  	in_updated_by	     IN VARCHAR2,
11:21:56 212  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:56 213  );
11:21:56 214  
11:21:56 215  PROCEDURE FINALIZE_CANCELATION (
11:21:56 216  /*
11:21:56 217  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 218  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 219  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 220  */
11:21:56 221  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
11:21:56 222  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
11:21:56 223  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:56 224  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:56 225  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:56 226  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:56 227  	in_subscription_id    IN NUMBER,
11:21:56 228  	in_cancelation_reason IN VARCHAR2,
11:21:56 229  	in_cancelation_date   IN DATE,
11:21:56 230  	in_note 	      IN VARCHAR2,
11:21:56 231  	in_agent_id	      IN NUMBER,
11:21:56 232  	in_updated_by	      IN VARCHAR2
11:21:56 233  );
11:21:56 234  
11:21:56 235  PROCEDURE FINALIZE_FALSE_START (
11:21:56 236  /*
11:21:56 237  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 239  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 240  */
11:21:56 241  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
11:21:56 242  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:56 243  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:56 244  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:56 245  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:56 246  	in_subscription_id    IN NUMBER,
11:21:56 247  	in_cancelation_date   IN DATE,
11:21:56 248  	in_note 	      IN VARCHAR2,
11:21:56 249  	in_agent_id	      IN NUMBER,
11:21:56 250  	in_updated_by	      IN VARCHAR2
11:21:56 251  );
11:21:56 252  
11:21:56 253  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
11:21:56 254  	in_subscription_id IN NUMBER
11:21:56 255  ) RETURN NUMBER;
11:21:56 256  
11:21:56 257  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
11:21:56 258  /*
11:21:56 259  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 260  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 261  */
11:21:56 262  	in_subscription_id IN NUMBER,
11:21:56 263  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 264  );
11:21:56 265  
11:21:56 266  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
11:21:56 267  /*
11:21:56 268  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 269  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 270  */
11:21:56 271  	in_subscription_id IN NUMBER,
11:21:56 272  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 273  );
11:21:56 274  
11:21:56 275  PROCEDURE GET_SUBSCR_LIC_OFFER (
11:21:56 276  /*
11:21:56 277  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 278  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 279  */
11:21:56 280  	in_subscription_id IN NUMBER,
11:21:56 281  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 282  );
11:21:56 283  
11:21:56 284  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
11:21:56 285  /*
11:21:56 286  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 287  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 288  */
11:21:56 289  	in_subscription_id IN NUMBER,
11:21:56 290  	out_result	   OUT NUMBER
11:21:56 291  );
11:21:56 292  
11:21:56 293  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
11:21:56 294  /*
11:21:56 295  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 296  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 297  */
11:21:56 298  	in_group_id	   IN NUMBER,
11:21:56 299  	in_offer_chain_id  IN NUMBER,
11:21:56 300  	out_result	   out number
11:21:56 301  );
11:21:56 302  
11:21:56 303  PROCEDURE GET_EXISTING_SUBSCR_IDS (
11:21:56 304  /*
11:21:56 305  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 306  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 307  */
11:21:56 308  	in_group_id	   IN NUMBER,
11:21:56 309  	in_offer_chain_id  IN NUMBER,
11:21:56 310  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 311  );
11:21:56 312  
11:21:56 313  PROCEDURE ADD_META_DATA (
11:21:56 314  /*
11:21:56 315  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 316  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 317  */
11:21:56 318  	in_subscription_id IN NUMBER,
11:21:56 319  	in_name 	   IN VARCHAR2,
11:21:56 320  	in_value	   IN VARCHAR2,
11:21:56 321  	in_created_by	   IN VARCHAR2
11:21:56 322  );
11:21:56 323  
11:21:56 324  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
11:21:56 325  /*
11:21:56 326  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:56 327  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 328  */
11:21:56 329  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
11:21:56 330  	out_result_set	     OUT SYS_REFCURSOR
11:21:56 331  );
11:21:56 332  
11:21:56 333  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
11:21:56 334  /*
11:21:56 335  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 336  */
11:21:56 337  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
11:21:56 338  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 339  );
11:21:56 340  
11:21:56 341  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
11:21:56 342   (
11:21:56 343  /*
11:21:56 344  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 345  */
11:21:56 346  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:56 347  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 348  );
11:21:56 349  
11:21:56 350  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
11:21:56 351  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
11:21:56 352  ) RETURN NUMBER;
11:21:56 353  
11:21:56 354  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
11:21:56 355  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
11:21:56 356  ) RETURN VARCHAR2;
11:21:56 357  
11:21:56 358  
11:21:56 359  
11:21:56 360  PROCEDURE GET_ACTIVE_MEU_SUBS (
11:21:56 361  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 362  );
11:21:56 363  
11:21:56 364  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
11:21:56 365  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:56 366  	out_offer_id	    OUT NUMBER
11:21:56 367  );
11:21:56 368  
11:21:56 369  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
11:21:56 370  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:56 371  	out_license_id	    OUT NUMBER
11:21:56 372  );
11:21:56 373  
11:21:56 374  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
11:21:56 375  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 376  );
11:21:56 377  
11:21:56 378  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
11:21:56 379  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 380  );
11:21:56 381  
11:21:56 382  END PROCS_SUBSCRIPTION_V15;
11:21:56 383  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.04
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_SYSTEM
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE INCREMENT_VERSION;
11:21:56   4  
11:21:56   5  PROCEDURE CHECK_VERSION(
11:21:56   6  	  in_vers    IN NUMBER,
11:21:56   7  	  out_result OUT NUMBER
11:21:56   8  );
11:21:56   9  
11:21:56  10  END PROCS_SYSTEM_V15;
11:21:56  11  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_TAXES_CRU
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_TAX (
11:21:56   4  	inout_tax_id		 IN OUT NUMBER,
11:21:56   5  	in_tax_type_id		 IN NUMBER,
11:21:56   6  	in_calculated_amount	 IN NUMBER,
11:21:56   7  	in_created_by		 IN VARCHAR2,
11:21:56   8  	in_line_item_id 	 IN NUMBER,
11:21:56   9  	in_effective_rate	 IN VARCHAR2,
11:21:56  10  	in_taxable_amount	 IN NUMBER,
11:21:56  11  	in_tax_rule_id		 IN NUMBER,
11:21:56  12  	in_jurisdiction_level_id IN NUMBER,
11:21:56  13  	in_jurisdiction_name	 IN VARCHAR2,
11:21:56  14  	in_jurisdiction_id	 IN VARCHAR2,
11:21:56  15  	in_ext_tax_type 	 IN VARCHAR2,
11:21:56  16  	in_ext_result		 IN VARCHAR2,
11:21:56  17  	in_imposition_type	 IN VARCHAR2,
11:21:56  18  	in_imposition		 IN VARCHAR2
11:21:56  19  );
11:21:56  20  
11:21:56  21  END PROCS_TAXES_CRU_V15;
11:21:56  22  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_TAXES
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE ADD_TAX (
11:21:56   4  	in_tax_type_id		 IN NUMBER,
11:21:56   5  	in_calculated_amount	 IN NUMBER,
11:21:56   6  	in_created_by		 IN VARCHAR2,
11:21:56   7  	in_line_item_id 	 IN NUMBER,
11:21:56   8  	in_effective_rate	 IN VARCHAR2,
11:21:56   9  	in_taxable_amount	 IN NUMBER,
11:21:56  10  	in_tax_rule_id		 IN NUMBER,
11:21:56  11  	in_jurisdiction_level_id IN NUMBER,
11:21:56  12  	in_jurisdiction_name	 IN VARCHAR2,
11:21:56  13  	in_jurisdiction_id	 IN VARCHAR2,
11:21:56  14  	in_ext_tax_type 	 IN VARCHAR2,
11:21:56  15  	in_ext_result		 IN VARCHAR2,
11:21:56  16  	in_imposition_type	 IN VARCHAR2,
11:21:56  17  	in_imposition		 IN VARCHAR2
11:21:56  18  );
11:21:56  19  
11:21:56  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
11:21:56  21  	in_country_code IN CHAR,
11:21:56  22  	in_check_date IN DATE,
11:21:56  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V15.FALSE
11:21:56  24  );
11:21:56  25  
11:21:56  26  PROCEDURE GET_TAX_CATEGORY (
11:21:56  27  	in_tax_category_id IN NUMBER,
11:21:56  28  	out_result_set	   OUT SYS_REFCURSOR
11:21:56  29  );
11:21:56  30  
11:21:56  31  END PROCS_TAXES_V15;
11:21:56  32  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_TEST
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE TEST_CLEAR_ALL;
11:21:56   4  PROCEDURE TEST_CLEAR_PRODUCTS;
11:21:56   5  
11:21:56   6  /********************************************/
11:21:56   7  
11:21:56   8  PROCEDURE TEST_GET_ACCOUNT (
11:21:56   9  	in_group_id	IN NUMBER,
11:21:56  10  	out_result_set	OUT SYS_REFCURSOR
11:21:56  11  );
11:21:56  12  
11:21:56  13  /********************************************/
11:21:56  14  
11:21:56  15  PROCEDURE TEST_GET_SUBSCRIPTION (
11:21:56  16  	in_subscription_id IN NUMBER,
11:21:56  17  	out_result_set	   OUT SYS_REFCURSOR
11:21:56  18  );
11:21:56  19  
11:21:56  20  /*********************************************/
11:21:56  21  
11:21:56  22  PROCEDURE TEST_DELETE_INVOICE (
11:21:56  23  	in_invoice_id IN NUMBER
11:21:56  24  );
11:21:56  25  
11:21:56  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
11:21:56  27  	in_group_id IN NUMBER
11:21:56  28  );
11:21:56  29  
11:21:56  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
11:21:56  31  	in_start_group_id IN NUMBER,
11:21:56  32  	in_end_group_id   IN NUMBER
11:21:56  33  );
11:21:56  34  
11:21:56  35  /**********************************************/
11:21:56  36  
11:21:56  37  FUNCTION TEST_IS_INVOICE_EXISTS(
11:21:56  38  /*
11:21:56  39  1 - exists
11:21:56  40  0 - not exists
11:21:56  41  */
11:21:56  42  	in_invoice_id IN NUMBER
11:21:56  43  ) RETURN NUMBER;
11:21:56  44  
11:21:56  45  PROCEDURE TEST_GET_INVOICE_INFO (
11:21:56  46  	in_invoice_id  IN NUMBER,
11:21:56  47  	out_result_set OUT SYS_REFCURSOR
11:21:56  48  );
11:21:56  49  
11:21:56  50  /******************************************************************************/
11:21:56  51  
11:21:56  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
11:21:56  53  	in_offer_chain_id in number
11:21:56  54  );
11:21:56  55  
11:21:56  56  END PROCS_TEST_V15;
11:21:56  57  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_TRANSACTION_CRU
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_TRANSACTION (
11:21:56   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
11:21:56   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
11:21:56   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
11:21:56   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
11:21:56   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
11:21:56  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:56  11  );
11:21:56  12  
11:21:56  13  PROCEDURE UPDATE_TRANSACTION (
11:21:56  14  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
11:21:56  15  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
11:21:56  16  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
11:21:56  17  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
11:21:56  18  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
11:21:56  19  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
11:21:56  20  );
11:21:56  21  
11:21:56  22  PROCEDURE READ_TRANSACTION (
11:21:56  23  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:56  24  	out_result_set	  OUT SYS_REFCURSOR
11:21:56  25  );
11:21:56  26  
11:21:56  27  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
11:21:56  28  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
11:21:56  29  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
11:21:56  30  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
11:21:56  31  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:56  32  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
11:21:56  33  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:56  34  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
11:21:56  35  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
11:21:56  36  );
11:21:56  37  
11:21:56  38  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:56  39  /*
11:21:56  40  Throws exceptions:
11:21:56  41  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  42  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:56  43  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  44  */
11:21:56  45  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:56  46  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:56  47  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:56  48  );
11:21:56  49  
11:21:56  50  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
11:21:56  51  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
11:21:56  52  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
11:21:56  53  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:56  54  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:56  55  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
11:21:56  56  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
11:21:56  57  );
11:21:56  58  
11:21:56  59  END PROCS_TRANSACTION_CRU_V15;
11:21:56  60  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PROCS_TRANSACTION
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_TRANSACTION (
11:21:56   4  /*
11:21:56   5  Throws exceptions:
11:21:56   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56   8  */
11:21:56   9  	in_transaction_id  IN NUMBER,
11:21:56  10  	in_status_id	   IN NUMBER,
11:21:56  11  	in_amount	   IN NUMBER,
11:21:56  12  	in_created_by	   IN VARCHAR2,
11:21:56  13  	in_order_id	   IN VARCHAR2,
11:21:56  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE,
11:21:56  15  	out_transaction_id OUT NUMBER
11:21:56  16  );
11:21:56  17  
11:21:56  18  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
11:21:56  19  /*
11:21:56  20  Throws exceptions:
11:21:56  21  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  23  */
11:21:56  24  	in_transaction_id	   IN NUMBER,
11:21:56  25  	in_trans_attempt_status    IN NUMBER,
11:21:56  26  	in_external_status_code    IN VARCHAR2,
11:21:56  27  	in_external_status_message IN VARCHAR2,
11:21:56  28  	in_created_by		   IN VARCHAR2,
11:21:56  29  	in_ext_transaction_id	   IN VARCHAR2,
11:21:56  30  	out_transaction_attempt_id OUT NUMBER
11:21:56  31  );
11:21:56  32  
11:21:56  33  PROCEDURE UPDATE_TRANSACTION_STATUS (
11:21:56  34  /*
11:21:56  35  Throws exceptions:
11:21:56  36  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  37  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  38  */
11:21:56  39  	in_transaction_id	 IN NUMBER,
11:21:56  40  	in_updated_by		 IN VARCHAR2,
11:21:56  41  	in_transaction_status_id IN NUMBER
11:21:56  42  );
11:21:56  43  
11:21:56  44  PROCEDURE UPDATE_TRANSACTION_SETTLED (
11:21:56  45  /*
11:21:56  46  Throws exceptions:
11:21:56  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  49  */
11:21:56  50  	in_transaction_id	 IN NUMBER,
11:21:56  51  	in_updated_by		 IN VARCHAR2,
11:21:56  52  	in_is_settled		 IN NUMBER
11:21:56  53  );
11:21:56  54  
11:21:56  55  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
11:21:56  56  /*
11:21:56  57  Throws exceptions:
11:21:56  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  60  */
11:21:56  61  	in_transaction_attempt_id IN NUMBER,
11:21:56  62  	in_updated_by		  IN VARCHAR2
11:21:56  63  );
11:21:56  64  
11:21:56  65  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
11:21:56  66  /*
11:21:56  67  Throws exceptions:
11:21:56  68  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  69  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  70  */
11:21:56  71  	in_transaction_attempt_id     IN NUMBER,
11:21:56  72  	in_transaction_attempt_status IN NUMBER
11:21:56  73  );
11:21:56  74  
11:21:56  75  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
11:21:56  76  /*
11:21:56  77  Throws exceptions:
11:21:56  78  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  79  */
11:21:56  80  	in_transaction_id	      IN NUMBER,
11:21:56  81  	in_transaction_attempt_status IN NUMBER,
11:21:56  82  	out_result_set		      OUT SYS_REFCURSOR
11:21:56  83  );
11:21:56  84  
11:21:56  85  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
11:21:56  86  /*
11:21:56  87  Throws exceptions:
11:21:56  88  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  89  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  90  */
11:21:56  91  	in_transaction_attempt_id IN NUMBER,
11:21:56  92  	in_ext_status_code	  IN VARCHAR2,
11:21:56  93  	in_ext_status_message	  IN VARCHAR2,
11:21:56  94  	in_ext_transaction_id	  IN VARCHAR2
11:21:56  95  );
11:21:56  96  
11:21:56  97  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
11:21:56  98  /*
11:21:56  99  Throws exceptions:
11:21:56 100  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 102  */
11:21:56 103  	in_transaction_id IN  NUMBER,
11:21:56 104  	out_attempts_num  OUT NUMBER
11:21:56 105  );
11:21:56 106  
11:21:56 107  PROCEDURE GET_TRANSACTION_AMOUNT (
11:21:56 108  /*
11:21:56 109  Throws exceptions:
11:21:56 110  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 111  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 112  */
11:21:56 113  	in_transaction_id      IN  NUMBER,
11:21:56 114  	out_transaction_amount OUT NUMBER
11:21:56 115  );
11:21:56 116  
11:21:56 117  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
11:21:56 118  /*
11:21:56 119  Throws exceptions:
11:21:56 120  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 122  */
11:21:56 123  	in_charge_id   IN  NUMBER,
11:21:56 124  	out_result_set OUT SYS_REFCURSOR
11:21:56 125  );
11:21:56 126  
11:21:56 127  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
11:21:56 128  /*
11:21:56 129  Throws exceptions:
11:21:56 130  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 131  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 132  */
11:21:56 133  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
11:21:56 134  	out_result_set OUT SYS_REFCURSOR
11:21:56 135  );
11:21:56 136  
11:21:56 137  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
11:21:56 138  /*
11:21:56 139  Throws exceptions:
11:21:56 140  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 141  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 142  */
11:21:56 143  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
11:21:56 144  	out_result_set OUT SYS_REFCURSOR
11:21:56 145  );
11:21:56 146  
11:21:56 147  PROCEDURE GET_TRANSACTION_ATTEMPTS (
11:21:56 148  /*
11:21:56 149  Throws exceptions:
11:21:56 150  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 151  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 152  */
11:21:56 153  	in_transaction_id IN  NUMBER,
11:21:56 154  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 155  );
11:21:56 156  
11:21:56 157  PROCEDURE RESERVE_TRANSACTION_ID (
11:21:56 158  /*
11:21:56 159  Throws exceptions:
11:21:56 160  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 161  */
11:21:56 162  	out_transaction_id OUT NUMBER
11:21:56 163  );
11:21:56 164  
11:21:56 165  PROCEDURE GET_TRANSACTION_BY_ID (
11:21:56 166  /*
11:21:56 167  Throws exceptions:
11:21:56 168  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 169  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 170  */
11:21:56 171  	in_transaction_id IN NUMBER,
11:21:56 172  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 173  );
11:21:56 174  
11:21:56 175  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:56 176  /*
11:21:56 177  Throws exceptions:
11:21:56 178  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 179  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:56 180  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 181  */
11:21:56 182  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:56 183  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:56 184  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:56 185  );
11:21:56 186  
11:21:56 187  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
11:21:56 188  /*
11:21:56 189  Throws exceptions:
11:21:56 190  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 191  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 192  */
11:21:56 193  	in_invoice_id	IN  NUMBER,
11:21:56 194  	out_result_set OUT SYS_REFCURSOR
11:21:56 195  );
11:21:56 196  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
11:21:56 197  /*
11:21:56 198  Throws exceptions:
11:21:56 199  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 200  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 201  */
11:21:56 202  	in_transaction_id IN  NUMBER,
11:21:56 203  	out_is_successfull  OUT NUMBER
11:21:56 204  );
11:21:56 205  
11:21:56 206  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
11:21:56 207  	in_transaction_id IN NUMBER
11:21:56 208  ) RETURN NUMBER;
11:21:56 209  
11:21:56 210  FUNCTION GET_TRANSACTION_INTRL_TAXES (
11:21:56 211  	in_transaction_id IN NUMBER
11:21:56 212  ) RETURN NUMBER;
11:21:56 213  
11:21:56 214  -- norlov: #38796
11:21:56 215  PROCEDURE GET_TRANSACTIONS (
11:21:56 216  /*
11:21:56 217  Throws exceptions:
11:21:56 218  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 219  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 220  */
11:21:56 221  	in_group_id	      IN  NUMBER,
11:21:56 222  	in_invoice_id	      IN NUMBER DEFAULT NULL,
11:21:56 223  	in_subscription_id    IN NUMBER DEFAULT NULL,
11:21:56 224  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
11:21:56 225  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
11:21:56 226  	in_transaction_status IN NUMBER DEFAULT NULL,
11:21:56 227  	out_result_set	      OUT SYS_REFCURSOR
11:21:56 228  );
11:21:56 229  
11:21:56 230  FUNCTION IS_TRANSACTION_COLLECTED (
11:21:56 231  /*
11:21:56 232  Throws:
11:21:56 233  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 234  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 235  Returns:
11:21:56 236  GLOBAL_CONST.TRUE if transaction collected,
11:21:56 237  GLOBAL_CONST.FALSE else
11:21:56 238  */
11:21:56 239  	in_transaction_id IN NUMBER
11:21:56 240  ) RETURN NUMBER;
11:21:56 241  
11:21:56 242  PROCEDURE GET_ATTEMPT_NUMBER (
11:21:56 243  /*
11:21:56 244  Throws exceptions:
11:21:56 245  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 246  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 247  */
11:21:56 248  	in_charge_id   in  number,
11:21:56 249  	out_attempt_count out number
11:21:56 250  );
11:21:56 251  
11:21:56 252  END PROCS_TRANSACTION_V15;
11:21:56 253  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.03
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PUBLIC_PROCS_BILLING
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:56   4  /*
11:21:56   5  Throws exceptions:
11:21:56   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56   8  */
11:21:56   9  	  in_offer_chain_id IN	 NUMBER,
11:21:56  10  	  out_result_set    OUT  SYS_REFCURSOR
11:21:56  11  );
11:21:56  12  
11:21:56  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
11:21:56  14  /*
11:21:56  15  Throws exceptions:
11:21:56  16  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  18  */
11:21:56  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:56  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
11:21:56  21  );
11:21:56  22  
11:21:56  23  PROCEDURE GET_PENDING_INVOICES (
11:21:56  24  /*
11:21:56  25  Throws exceptions:
11:21:56  26  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  27  */
11:21:56  28  	out_result_set1      OUT SYS_REFCURSOR,
11:21:56  29  	out_result_set2      OUT SYS_REFCURSOR,
11:21:56  30  	out_result_set3      OUT SYS_REFCURSOR,
11:21:56  31  	in_row_number	     IN NUMBER DEFAULT NULL
11:21:56  32  );
11:21:56  33  
11:21:56  34  PROCEDURE GET_PENDING_REFUND_CHARGES (
11:21:56  35  /*
11:21:56  36  Throws exceptions:
11:21:56  37  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  38  */
11:21:56  39  	out_result_set	    OUT SYS_REFCURSOR,
11:21:56  40  	in_row_number	    IN NUMBER DEFAULT NULL
11:21:56  41  );
11:21:56  42  
11:21:56  43  PROCEDURE GET_UNPROCESSED_CHARGES (
11:21:56  44  /*
11:21:56  45  Throws exceptions:
11:21:56  46  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  47  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  48  */
11:21:56  49  	in_invoice_id  IN NUMBER,
11:21:56  50  	out_result_set OUT SYS_REFCURSOR
11:21:56  51  );
11:21:56  52  
11:21:56  53  PROCEDURE GET_PROCESSED_CHARGES (
11:21:56  54  /*
11:21:56  55  Throws exceptions:
11:21:56  56  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  57  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  58  */
11:21:56  59  	in_invoice_id  IN NUMBER,
11:21:56  60  	out_result_set OUT SYS_REFCURSOR
11:21:56  61  );
11:21:56  62  
11:21:56  63  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
11:21:56  64  /*
11:21:56  65  Throws exceptions:
11:21:56  66  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  67  */
11:21:56  68  	in_transaction_id	      IN NUMBER,
11:21:56  69  	in_transaction_attempt_status IN NUMBER,
11:21:56  70  	out_result_set		      OUT SYS_REFCURSOR
11:21:56  71  );
11:21:56  72  
11:21:56  73  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
11:21:56  74  /*
11:21:56  75  Throws exceptions:
11:21:56  76  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  77  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  78  */
11:21:56  79  	in_transaction_attempt_id     IN NUMBER,
11:21:56  80  	in_transaction_attempt_status IN NUMBER
11:21:56  81  );
11:21:56  82  
11:21:56  83  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
11:21:56  84  /*
11:21:56  85  Throws exceptions:
11:21:56  86  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  87  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  88  */
11:21:56  89  	in_transaction_attempt_id IN NUMBER,
11:21:56  90  	in_updated_by		  IN VARCHAR2
11:21:56  91  );
11:21:56  92  
11:21:56  93  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
11:21:56  94  /*
11:21:56  95  Throws exceptions:
11:21:56  96  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  97  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  98  */
11:21:56  99  	in_transaction_id	   IN NUMBER,
11:21:56 100  	in_trans_attempt_status    IN NUMBER,
11:21:56 101  	in_external_status_code    IN VARCHAR2,
11:21:56 102  	in_external_status_message IN VARCHAR2,
11:21:56 103  	in_created_by		   IN VARCHAR2,
11:21:56 104  	in_ext_transaction_id	   IN VARCHAR2,
11:21:56 105  	out_transaction_attempt_id OUT NUMBER
11:21:56 106  );
11:21:56 107  
11:21:56 108  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
11:21:56 109  /*
11:21:56 110  Throws exceptions:
11:21:56 111  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 112  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 113  */
11:21:56 114  	in_transaction_attempt_id IN NUMBER,
11:21:56 115  	in_ext_status_code	  IN VARCHAR2,
11:21:56 116  	in_ext_status_message	  IN VARCHAR2,
11:21:56 117  	in_ext_transaction_id	  IN VARCHAR2
11:21:56 118  );
11:21:56 119  
11:21:56 120  PROCEDURE UPDATE_TRANSACTION_STATUS (
11:21:56 121  /*
11:21:56 122  Throws exceptions:
11:21:56 123  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 124  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 125  */
11:21:56 126  	in_transaction_id	 IN NUMBER,
11:21:56 127  	in_updated_by		 IN VARCHAR2,
11:21:56 128  	in_transaction_status_id IN NUMBER
11:21:56 129  );
11:21:56 130  
11:21:56 131  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
11:21:56 132  /*
11:21:56 133  Throws exceptions:
11:21:56 134  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 135  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 136  */
11:21:56 137  	in_transaction_id IN  NUMBER,
11:21:56 138  	out_attempts_num  OUT NUMBER
11:21:56 139  );
11:21:56 140  
11:21:56 141  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
11:21:56 142  /*
11:21:56 143  Throws exceptions:
11:21:56 144  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 145  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 146  */
11:21:56 147  	in_transaction_id IN  NUMBER,
11:21:56 148  	out_is_successfull  OUT NUMBER
11:21:56 149  );
11:21:56 150  
11:21:56 151  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:56 152  /*
11:21:56 153  Throws exceptions:
11:21:56 154  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 155  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 156  */
11:21:56 157  	in_invoice_id		       IN NUMBER,
11:21:56 158  	in_invoice_status_id	       IN NUMBER,
11:21:56 159  	in_updated_by		       IN VARCHAR2
11:21:56 160  );
11:21:56 161  
11:21:56 162  PROCEDURE SUSPEND_SUBSCRIPTION(
11:21:56 163  /*
11:21:56 164  Throws exceptions:
11:21:56 165  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 166  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 167  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 168  */
11:21:56 169  	  in_subs_id	IN NUMBER ,
11:21:56 170  	  in_updated_by IN VARCHAR2
11:21:56 171  );
11:21:56 172  
11:21:56 173  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:56 174  /*
11:21:56 175  Throws exceptions:
11:21:56 176  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 177  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 178  */
11:21:56 179  	in_credit_card_id IN  NUMBER,
11:21:56 180  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 181  );
11:21:56 182  
11:21:56 183  PROCEDURE GET_TRANSACTION_AMOUNT (
11:21:56 184  /*
11:21:56 185  Throws exceptions:
11:21:56 186  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 187  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 188  */
11:21:56 189  	in_transaction_id      IN  NUMBER,
11:21:56 190  	out_transaction_amount OUT NUMBER
11:21:56 191  );
11:21:56 192  
11:21:56 193  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
11:21:56 194  /*
11:21:56 195  Throws exceptions:
11:21:56 196  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 197  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 198  */
11:21:56 199  	in_invoice_id  IN  NUMBER,
11:21:56 200  	out_account_id OUT NUMBER
11:21:56 201  );
11:21:56 202  
11:21:56 203  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
11:21:56 204  /*
11:21:56 205  Throws exceptions:
11:21:56 206  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 207  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 208  */
11:21:56 209  	in_gift_certificate_id IN NUMBER,
11:21:56 210  	out_result_set	       OUT SYS_REFCURSOR
11:21:56 211  );
11:21:56 212  
11:21:56 213  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
11:21:56 214  /*
11:21:56 215  Throws exceptions:
11:21:56 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 218  */
11:21:56 219  	in_charge_id	    IN NUMBER,
11:21:56 220  	out_subscription_id OUT NUMBER
11:21:56 221  );
11:21:56 222  
11:21:56 223  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
11:21:56 224  /*
11:21:56 225  Throws exceptions:
11:21:56 226  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 227  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 228  */
11:21:56 229  	in_gift_certificate_id IN NUMBER,
11:21:56 230  	in_charge_id	       IN NUMBER,
11:21:56 231  	out_result	       OUT NUMBER
11:21:56 232  );
11:21:56 233  
11:21:56 234  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:56 235  /*
11:21:56 236  Throws exceptions:
11:21:56 237  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 238  */
11:21:56 239  	  in_subscription_id IN  NUMBER,
11:21:56 240  	  out_result_set      OUT SYS_REFCURSOR
11:21:56 241  );
11:21:56 242  
11:21:56 243  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:56 244  /*
11:21:56 245  Throws exceptions:
11:21:56 246  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 247  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 248  */
11:21:56 249  	in_invoice_id IN  NUMBER,
11:21:56 250  	out_amount    OUT NUMBER
11:21:56 251  );
11:21:56 252  
11:21:56 253  PROCEDURE GET_TRANSACTION_BY_ID (
11:21:56 254  /*
11:21:56 255  Throws exceptions:
11:21:56 256  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 257  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 258  */
11:21:56 259  	in_transaction_id IN NUMBER,
11:21:56 260  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 261  );
11:21:56 262  
11:21:56 263  PROCEDURE UPDATE_CHARGE_STATUS (
11:21:56 264  /*
11:21:56 265  Throws exceptions:
11:21:56 266  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 267  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 268  */
11:21:56 269  	in_charge_id	    IN CHARGE.ID%TYPE,
11:21:56 270  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:56 271  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
11:21:56 272  );
11:21:56 273  
11:21:56 274  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:56 275  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:56 276  	out_result_set OUT SYS_REFCURSOR
11:21:56 277  );
11:21:56 278  
11:21:56 279  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:56 280  /*
11:21:56 281  Throws exceptions:
11:21:56 282  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 283  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:56 284  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 285  */
11:21:56 286  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:56 287  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:56 288  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:56 289  );
11:21:56 290  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
11:21:56 291  /*
11:21:56 292  Throws exceptions:
11:21:56 293  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 294  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 295  */
11:21:56 296  	in_invoice_id	IN  NUMBER,
11:21:56 297  	out_result_set OUT SYS_REFCURSOR
11:21:56 298  );
11:21:56 299  PROCEDURE GET_ACTIVE_INVOICES_IDS (
11:21:56 300  /*
11:21:56 301  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 302  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 303  */
11:21:56 304  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
11:21:56 305  	in_subscription_id IN NUMBER,
11:21:56 306  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 307  );
11:21:56 308  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
11:21:56 309  /*
11:21:56 310  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 312  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 313  */
11:21:56 314  --  in_invoice_id        IN INVOICE.ID%TYPE,
11:21:56 315  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
11:21:56 316  -- norlov: in_refundable	      IN refund enabled
11:21:56 317  	in_invoice_id	     IN NUMBER,
11:21:56 318  	in_updated_by	     IN VARCHAR2,
11:21:56 319  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:56 320  --  in_cancellation_date IN DATE DEFAULT current_timestamp
11:21:56 321  );
11:21:56 322  
11:21:56 323  PROCEDURE FINALIZE_CANCELATION (
11:21:56 324  /*
11:21:56 325  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 326  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 327  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 328  */
11:21:56 329  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
11:21:56 330  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
11:21:56 331  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:56 332  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:56 333  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:56 334  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:56 335  	in_subscription_id    IN NUMBER,
11:21:56 336  	in_cancelation_reason IN VARCHAR2,
11:21:56 337  	in_cancelation_date   IN DATE,
11:21:56 338  	in_note 	      IN VARCHAR2,
11:21:56 339  	in_agent_id	      IN NUMBER,
11:21:56 340  	in_updated_by	      IN VARCHAR2
11:21:56 341  );
11:21:56 342  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
11:21:56 343  /*
11:21:56 344  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 345  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 346  */
11:21:56 347  	in_subscription_id IN NUMBER,
11:21:56 348  	out_result_set	   OUT SYS_REFCURSOR
11:21:56 349  );
11:21:56 350  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:56 351  /*
11:21:56 352  Throws exceptions (codes):
11:21:56 353  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 354  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 355  */
11:21:56 356  	in_offer_chain_id IN NUMBER,
11:21:56 357  	in_meta_data_name IN VARCHAR2,
11:21:56 358  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 359  );
11:21:56 360  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:56 361  /*
11:21:56 362  Throws exceptions (codes):
11:21:56 363  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 364  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 365  */
11:21:56 366  	in_product_offering_id IN NUMBER,
11:21:56 367  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
11:21:56 368  	out_result_set	       OUT SYS_REFCURSOR
11:21:56 369  );
11:21:56 370  PROCEDURE READ_ACCOUNT (
11:21:56 371  	in_account_id  IN ACCOUNT.ID%TYPE,
11:21:56 372  	out_result_set OUT SYS_REFCURSOR
11:21:56 373  );
11:21:56 374  
11:21:56 375  PROCEDURE GET_COLLECTED_CHARGES (
11:21:56 376  /*
11:21:56 377  Throws exceptions:
11:21:56 378  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 379  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 380  */
11:21:56 381  	in_invoice_id  IN NUMBER,
11:21:56 382  	out_result_set OUT SYS_REFCURSOR
11:21:56 383  );
11:21:56 384  
11:21:56 385  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
11:21:56 386  /*
11:21:56 387  Throws exceptions:
11:21:56 388  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 389  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 390  */
11:21:56 391  	in_invoice_id IN NUMBER,
11:21:56 392  	out_group_ids OUT SYS_REFCURSOR
11:21:56 393  );
11:21:56 394  
11:21:56 395  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:56 396  /*
11:21:56 397  Throws exceptions:
11:21:56 398  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 399  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 400  */
11:21:56 401  	in_group_id IN NUMBER,
11:21:56 402  	out_account_id	OUT NUMBER
11:21:56 403  );
11:21:56 404  
11:21:56 405  PROCEDURE LOCK_ACCOUNT (
11:21:56 406  	in_group_id    IN NUMBER,
11:21:56 407  	in_lock_key    IN VARCHAR2,
11:21:56 408  	in_seconds_num IN NUMBER,
11:21:56 409  	in_created_by  IN VARCHAR2,
11:21:56 410  	in_reason      IN VARCHAR2
11:21:56 411  );
11:21:56 412  
11:21:56 413  PROCEDURE RELEASE_LOCK (
11:21:56 414  	in_group_id IN NUMBER,
11:21:56 415  	in_lock_key IN VARCHAR2
11:21:56 416  );
11:21:56 417  
11:21:56 418  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
11:21:56 419  	in_invoice_id		    IN NUMBER,
11:21:56 420  	out_order_id		    OUT VARCHAR2,
11:21:56 421  	out_external_transaction_id OUT VARCHAR2
11:21:56 422  );
11:21:56 423  
11:21:56 424  PROCEDURE GET_PAYPAL_BY_ID (
11:21:56 425  	in_paypal_id   IN  NUMBER,
11:21:56 426  	out_result_set OUT SYS_REFCURSOR
11:21:56 427  );
11:21:56 428  
11:21:56 429  PROCEDURE GET_ATTEMPT_NUMBER (
11:21:56 430  /*
11:21:56 431  Throws exceptions:
11:21:56 432  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 433  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 434  */
11:21:56 435  	in_charge_id   in  number,
11:21:56 436  	out_attempt_count out number
11:21:56 437  );
11:21:56 438  
11:21:56 439  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:56 440  	in_offer_chain_id	 IN NUMBER,
11:21:56 441  	in_action_name		 IN VARCHAR2,
11:21:56 442  	out_notification_type_id out number
11:21:56 443  );
11:21:56 444  
11:21:56 445  END PUBLIC_PROCS_BILLING_V15;
11:21:56 446  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.05
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE LOCK_ACCOUNT (
11:21:56   4  	in_group_id    IN NUMBER,
11:21:56   5  	in_lock_key    IN VARCHAR2,
11:21:56   6  	in_seconds_num IN NUMBER,
11:21:56   7  	in_created_by  IN VARCHAR2,
11:21:56   8  	in_reason      IN VARCHAR2
11:21:56   9  );
11:21:56  10  
11:21:56  11  PROCEDURE RELEASE_LOCK (
11:21:56  12  	in_group_id IN NUMBER,
11:21:56  13  	in_lock_key IN VARCHAR2
11:21:56  14  );
11:21:56  15  
11:21:56  16  END PUBLIC_PROCS_NOTIFICATION_V15;
11:21:56  17  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.01
11:21:56 SQL> 
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
11:21:56 SQL> --------------------------------------------------------------------------------
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
11:21:56   4  	out_result_set OUT SYS_REFCURSOR
11:21:56   5  );
11:21:56   6  
11:21:56   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
11:21:56   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:56   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
11:21:56  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:56  11  );
11:21:56  12  
11:21:56  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:56  14  /*
11:21:56  15  Throws exceptions:
11:21:56  16  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  17  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  18  */
11:21:56  19  	  in_offer_chain_id IN	 NUMBER,
11:21:56  20  	  out_result_set    OUT  SYS_REFCURSOR
11:21:56  21  );
11:21:56  22  
11:21:56  23  PROCEDURE GET_UNREDEEMED_GCS (
11:21:56  24  	out_result_set		OUT SYS_REFCURSOR,
11:21:56  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:56  26  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:56  27  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:56  28  );
11:21:56  29  
11:21:56  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
11:21:56  31  /*
11:21:56  32  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:56  33  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  34  */
11:21:56  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
11:21:56  36  	out_result_set	     OUT SYS_REFCURSOR
11:21:56  37  );
11:21:56  38  
11:21:56  39  PROCEDURE GET_ALL_OCH_META_DATA (
11:21:56  40  	in_offer_chain_id IN NUMBER,
11:21:56  41  	out_result_set	  OUT SYS_REFCURSOR
11:21:56  42  );
11:21:56  43  
11:21:56  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:56  45  /*
11:21:56  46  Throws exceptions (codes):
11:21:56  47  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  48  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  49  */
11:21:56  50  	in_offer_chain_id IN NUMBER,
11:21:56  51  	in_meta_data_name IN VARCHAR2,
11:21:56  52  	out_result_set	  OUT SYS_REFCURSOR
11:21:56  53  );
11:21:56  54  
11:21:56  55  PROCEDURE GET_ENDING_LICENSES (
11:21:56  56  /*
11:21:56  57  Throws exceptions:
11:21:56  58  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  59  */
11:21:56  60  	in_hours_number IN NUMBER,
11:21:56  61  	out_result_set OUT SYS_REFCURSOR
11:21:56  62  );
11:21:56  63  
11:21:56  64  PROCEDURE GET_ENDING_LICENSES_CC (
11:21:56  65  /*
11:21:56  66  Throws exceptions:
11:21:56  67  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  68  */
11:21:56  69  	in_hours_number IN NUMBER,
11:21:56  70  	out_result_set OUT SYS_REFCURSOR,
11:21:56  71  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:56  72  );
11:21:56  73  
11:21:56  74  /************************************************/
11:21:56  75  
11:21:56  76  PROCEDURE GET_RECURRING_OFFER (
11:21:56  77  /*
11:21:56  78  Throws exceptions:
11:21:56  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  80  */
11:21:56  81  	in_license_id  IN NUMBER,
11:21:56  82  	out_result_set OUT SYS_REFCURSOR
11:21:56  83  );
11:21:56  84  
11:21:56  85  /*************************************************/
11:21:56  86  
11:21:56  87  PROCEDURE GET_NEXT_OFFER (
11:21:56  88  /*
11:21:56  89  Throws exceptions:
11:21:56  90  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56  91  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56  92  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56  93  */
11:21:56  94  	in_license_id  IN NUMBER,
11:21:56  95  	out_result_set OUT SYS_REFCURSOR
11:21:56  96  );
11:21:56  97  
11:21:56  98  /**************************************************/
11:21:56  99  
11:21:56 100  PROCEDURE UPDATE_LICENSE_STATUS(
11:21:56 101  /*
11:21:56 102  Throws exceptions:
11:21:56 103  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 104  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 105  */
11:21:56 106  	  in_license_id     IN NUMBER,
11:21:56 107  	  in_license_status IN NUMBER,
11:21:56 108  	  in_updated_by     IN VARCHAR2
11:21:56 109  );
11:21:56 110  
11:21:56 111  /***************************************************/
11:21:56 112  
11:21:56 113  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:56 114  /*
11:21:56 115  Throws exceptions:
11:21:56 116  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 117  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 118  */
11:21:56 119  	in_invoice_id		       IN NUMBER,
11:21:56 120  	in_invoice_status_id	       IN NUMBER,
11:21:56 121  	in_updated_by		       IN VARCHAR2
11:21:56 122  );
11:21:56 123  
11:21:56 124  /***************************************************/
11:21:56 125  
11:21:56 126  PROCEDURE CREATE_LICENSE(
11:21:56 127  /*
11:21:56 128  Throws exceptions:
11:21:56 129  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 130  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 131  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:56 132  */
11:21:56 133  	in_status_id		    IN NUMBER,
11:21:56 134  	in_needs_entitlements	    IN NUMBER,
11:21:56 135  	in_start_date		    IN DATE,
11:21:56 136  	in_end_date		    IN DATE,
11:21:56 137  	in_offer_id		    IN NUMBER,
11:21:56 138  	in_subscription_id	    IN NUMBER,
11:21:56 139  	in_invoice_id		    IN NUMBER,
11:21:56 140  	in_created_by		    IN VARCHAR2,
11:21:56 141  	in_is_extension 	    IN NUMBER,
11:21:56 142  	in_current_offer_index	    IN NUMBER,
11:21:56 143  	in_current_offer_recurr_num IN NUMBER,
11:21:56 144  	out_license_id		    OUT NUMBER
11:21:56 145  );
11:21:56 146  
11:21:56 147  /**************************************************/
11:21:56 148  
11:21:56 149  PROCEDURE CREATE_INVOICE(
11:21:56 150  /*
11:21:56 151  Throws exceptions:
11:21:56 152  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 153  */
11:21:56 154  	  in_invoice_status IN NUMBER,
11:21:56 155  	  in_created_by     IN VARCHAR2,
11:21:56 156  	  in_tax_exempt_id  IN VARCHAR2,
11:21:56 157  	  out_invoice_id    OUT NUMBER
11:21:56 158  );
11:21:56 159  
11:21:56 160  /*****************************************************/
11:21:56 161  
11:21:56 162  PROCEDURE CREATE_CHARGE(
11:21:56 163  /*
11:21:56 164  Throws exceptions:
11:21:56 165  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 166  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 167  */
11:21:56 168  	in_invoice_id	      IN NUMBER,
11:21:56 169  	in_transaction_id     IN NUMBER,
11:21:56 170  	in_instrument_type_id IN NUMBER,
11:21:56 171  	in_instrument_id      IN NUMBER,
11:21:56 172  	in_charge_amount      IN NUMBER,
11:21:56 173  	in_created_by	      IN VARCHAR2,
11:21:56 174  	in_charge_status_id   IN NUMBER,
11:21:56 175  	out_charge_id	      OUT NUMBER
11:21:56 176  );
11:21:56 177  
11:21:56 178  /*****************************************************/
11:21:56 179  
11:21:56 180  PROCEDURE HAS_FUTURE_LICENSE (
11:21:56 181  /*
11:21:56 182  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 183  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 184  --
11:21:56 185  RETURNS:
11:21:56 186  1 - if has,
11:21:56 187  0 - else
11:21:56 188  */
11:21:56 189  	in_license_id IN NUMBER,
11:21:56 190  	out_result	   OUT NUMBER
11:21:56 191  );
11:21:56 192  
11:21:56 193  /*****************************************************/
11:21:56 194  
11:21:56 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
11:21:56 196  /*
11:21:56 197  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 198  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 199  */
11:21:56 200  	in_license_id IN NUMBER,
11:21:56 201  	out_group_id  OUT NUMBER
11:21:56 202  );
11:21:56 203  
11:21:56 204  /*****************************************************/
11:21:56 205  
11:21:56 206  PROCEDURE GET_OFFER_PRODUCTS (
11:21:56 207  /*
11:21:56 208  Throws exceptions (codes):
11:21:56 209  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 210  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 211  */
11:21:56 212  	in_offer_id    IN NUMBER,
11:21:56 213  	out_result_set OUT SYS_REFCURSOR
11:21:56 214  );
11:21:56 215  
11:21:56 216  /*******************************************************/
11:21:56 217  
11:21:56 218  PROCEDURE CREATE_TRANSACTION (
11:21:56 219  /*
11:21:56 220  Throws exceptions:
11:21:56 221  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 222  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 223  */
11:21:56 224  	in_transaction_id  IN NUMBER,
11:21:56 225  	in_status_id	   IN NUMBER,
11:21:56 226  	in_amount	   IN NUMBER,
11:21:56 227  	in_created_by	   IN VARCHAR2,
11:21:56 228  	in_order_id	   IN VARCHAR2,
11:21:56 229  	out_transaction_id OUT NUMBER
11:21:56 230  );
11:21:56 231  
11:21:56 232  /*********************************************************/
11:21:56 233  
11:21:56 234  PROCEDURE ADD_LINE_ITEMS(
11:21:56 235  /*
11:21:56 236  Throws exceptions:
11:21:56 237  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 238  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 239  */
11:21:56 240  	in_invoice_id IN NUMBER,
11:21:56 241  	in_offer_id   IN NUMBER,
11:21:56 242  	in_created_by IN VARCHAR2
11:21:56 243  );
11:21:56 244  
11:21:56 245  /**********************************************************/
11:21:56 246  
11:21:56 247  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:56 248  /*
11:21:56 249  Throws exceptions:
11:21:56 250  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 251  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 252  */
11:21:56 253  	in_invoice_id IN  NUMBER,
11:21:56 254  	out_amount    OUT NUMBER
11:21:56 255  );
11:21:56 256  
11:21:56 257  /*********************************************************/
11:21:56 258  
11:21:56 259  PROCEDURE RESERVE_TRANSACTION_ID (
11:21:56 260  /*
11:21:56 261  Throws exceptions:
11:21:56 262  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 263  */
11:21:56 264  	out_transaction_id OUT NUMBER
11:21:56 265  );
11:21:56 266  
11:21:56 267  /**********************************************************/
11:21:56 268  
11:21:56 269  PROCEDURE P_GET_NEXT_OFFER_INDEX (
11:21:56 270  	in_offer_chain_id	     IN NUMBER,
11:21:56 271  	in_offer_chain_current_index IN NUMBER,
11:21:56 272  	out_next_offer_index	     OUT NUMBER
11:21:56 273  );
11:21:56 274  
11:21:56 275  /***********************************************************/
11:21:56 276  
11:21:56 277  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
11:21:56 278  	in_license_id		     IN NUMBER,
11:21:56 279  	in_offer_chain_current_index IN NUMBER,
11:21:56 280  	out_next_offer_index	     OUT NUMBER
11:21:56 281  );
11:21:56 282  
11:21:56 283  /**********************************************************/
11:21:56 284  
11:21:56 285  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:56 286  /*
11:21:56 287  Throws exceptions:
11:21:56 288  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 289  */
11:21:56 290  	  in_subscription_id IN  NUMBER,
11:21:56 291  	  out_result_set      OUT SYS_REFCURSOR
11:21:56 292  );
11:21:56 293  
11:21:56 294  /***********************************************************/
11:21:56 295  
11:21:56 296  PROCEDURE CLOSE_SUBSCRIPTION (
11:21:56 297  	in_subscription_id IN NUMBER,
11:21:56 298  	in_updated_by	   IN VARCHAR2
11:21:56 299  );
11:21:56 300  
11:21:56 301  /***********************************************************/
11:21:56 302  
11:21:56 303  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
11:21:56 304  	out_result_set OUT SYS_REFCURSOR
11:21:56 305  );
11:21:56 306  
11:21:56 307  /***********************************************************/
11:21:56 308  
11:21:56 309  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
11:21:56 310  	in_license_id	      IN NUMBER,
11:21:56 311  	in_needs_entitlements IN NUMBER,
11:21:56 312  	in_updated_by	      IN VARCHAR2
11:21:56 313  );
11:21:56 314  /***********************************************************/
11:21:56 315  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
11:21:56 316  	in_offer_id    IN NUMBER,
11:21:56 317  	out_result_set OUT SYS_REFCURSOR
11:21:56 318  );
11:21:56 319  /***********************************************************/
11:21:56 320  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:56 321  	in_product_offering_id IN NUMBER,
11:21:56 322  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
11:21:56 323  	out_result_set	       OUT SYS_REFCURSOR
11:21:56 324  );
11:21:56 325  
11:21:56 326  PROCEDURE LOCK_ACCOUNT (
11:21:56 327  	in_group_id    IN NUMBER,
11:21:56 328  	in_lock_key    IN VARCHAR2,
11:21:56 329  	in_seconds_num IN NUMBER,
11:21:56 330  	in_created_by  IN VARCHAR2,
11:21:56 331  	in_reason      IN VARCHAR2
11:21:56 332  );
11:21:56 333  
11:21:56 334  PROCEDURE RELEASE_LOCK (
11:21:56 335  	in_group_id IN NUMBER,
11:21:56 336  	in_lock_key IN VARCHAR2
11:21:56 337  );
11:21:56 338  
11:21:56 339  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:56 340  	in_invoice_id  IN NUMBER,
11:21:56 341  	out_result_set OUT SYS_REFCURSOR
11:21:56 342  );
11:21:56 343  
11:21:56 344  PROCEDURE ADD_TAX (
11:21:56 345  	in_tax_type_id		 IN NUMBER,
11:21:56 346  	in_calculated_amount	 IN NUMBER,
11:21:56 347  	in_created_by		 IN VARCHAR2,
11:21:56 348  	in_line_item_id 	 IN NUMBER,
11:21:56 349  	in_effective_rate	 IN VARCHAR2,
11:21:56 350  	in_taxable_amount	 IN NUMBER,
11:21:56 351  	in_tax_rule_id		 IN NUMBER,
11:21:56 352  	in_jurisdiction_level_id IN NUMBER,
11:21:56 353  	in_jurisdiction_name	 IN VARCHAR2,
11:21:56 354  	in_jurisdiction_id	 IN VARCHAR2,
11:21:56 355  	in_ext_tax_type 	 IN VARCHAR2,
11:21:56 356  	in_ext_result		 IN VARCHAR2,
11:21:56 357  	in_imposition_type	 IN VARCHAR2,
11:21:56 358  	in_imposition		 IN VARCHAR2
11:21:56 359  );
11:21:56 360  
11:21:56 361  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:56 362  	in_credit_card_id IN  NUMBER,
11:21:56 363  	out_result_set	  OUT SYS_REFCURSOR
11:21:56 364  );
11:21:56 365  
11:21:56 366  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
11:21:56 367  	in_line_item_id IN NUMBER,
11:21:56 368  	out_result_set	OUT SYS_REFCURSOR
11:21:56 369  );
11:21:56 370  
11:21:56 371  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:56 372  /*
11:21:56 373  Throws exceptions:
11:21:56 374  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 375  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 376  */
11:21:56 377  	in_group_id IN NUMBER,
11:21:56 378  	out_account_id	OUT NUMBER
11:21:56 379  );
11:21:56 380  
11:21:56 381  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
11:21:56 382  /*
11:21:56 383  Throws exceptions:
11:21:56 384  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:56 385  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 386  */
11:21:56 387  	in_line_item_id IN  NUMBER,
11:21:56 388  	out_result_set	OUT SYS_REFCURSOR
11:21:56 389  );
11:21:56 390  
11:21:56 391  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
11:21:56 392  	in_line_item_id    IN NUMBER,
11:21:56 393  	in_amount	   IN NUMBER,
11:21:56 394  	in_discount_amount IN NUMBER,
11:21:56 395  	in_taxes_amount    IN NUMBER
11:21:56 396  );
11:21:56 397  
11:21:56 398  PROCEDURE GET_PAYPAL_BY_ID (
11:21:56 399  	in_paypal_id   IN  NUMBER,
11:21:56 400  	out_result_set OUT SYS_REFCURSOR
11:21:56 401  );
11:21:56 402  
11:21:56 403  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:56 404  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:56 405  	out_result_set OUT SYS_REFCURSOR
11:21:56 406  );
11:21:56 407  
11:21:56 408  PROCEDURE GET_LICENSE_BY_ID (
11:21:56 409  	in_license_id  IN NUMBER,
11:21:56 410  	out_result_set OUT SYS_REFCURSOR
11:21:56 411  );
11:21:56 412  
11:21:56 413  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:56 414  	in_offer_chain_id	 IN NUMBER,
11:21:56 415  	in_action_name		 IN VARCHAR2,
11:21:56 416  	out_notification_type_id OUT NUMBER
11:21:56 417  );
11:21:56 418  
11:21:56 419  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
11:21:56 420  	in_offer_chain_id IN NUMBER,
11:21:56 421  	in_meta_data_name IN VARCHAR2,
11:21:56 422  	out_value	  OUT VARCHAR2
11:21:56 423  );
11:21:56 424  
11:21:56 425  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
11:21:56 426  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 427  );
11:21:56 428  
11:21:56 429  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
11:21:56 430  	out_result_set	    OUT SYS_REFCURSOR
11:21:56 431  );
11:21:56 432  
11:21:56 433  END PUBLIC_PROCS_RENEWAL_V15;
11:21:56 434  .
11:21:56 SQL> /

Package created.

Elapsed: 00:00:00.05
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_ACCOUNT (
11:21:56   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
11:21:56   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
11:21:56   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:56   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
11:21:56   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
11:21:56   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
11:21:56  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:56  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
11:21:56  12  ) AS
11:21:56  13  -- VARIABLES
11:21:56  14  var_new_account_id ACCOUNT.ID%TYPE;
11:21:56  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56  16  var_date DATE := SYSDATE;
11:21:56  17  BEGIN
11:21:56  18  	SELECT
11:21:56  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
11:21:56  20  	FROM DUAL;
11:21:56  21  	INSERT INTO ACCOUNT (
11:21:56  22  	  ID,
11:21:56  23  	  ACCOUNT_STATUS_ID,
11:21:56  24  	  SUSPEND_DATE,
11:21:56  25  	  GROUP_ID,
11:21:56  26  	  CREATE_DATE,
11:21:56  27  	  CREATED_BY,
11:21:56  28  	  UPDATE_DATE,
11:21:56  29  	  UPDATED_BY,
11:21:56  30  	  SYSTEM_CATEGORY_ID,
11:21:56  31  	  INSTRUMENT_TYPE_ID,
11:21:56  32  	  INSTRUMENT_ID,
11:21:56  33  	  TAX_EXEMPT_ID
11:21:56  34  	) VALUES (
11:21:56  35  	  var_new_account_id,
11:21:56  36  	  in_account_status_id,
11:21:56  37  	  in_suspend_date,
11:21:56  38  	  in_group_id,
11:21:56  39  	  var_date,
11:21:56  40  	  in_created_by,
11:21:56  41  	  var_date,
11:21:56  42  	  in_created_by,
11:21:56  43  	  in_system_category_id,
11:21:56  44  	  in_instrument_type_id,
11:21:56  45  	  in_instrument_id,
11:21:56  46  	  NULL
11:21:56  47  	);
11:21:56  48  
11:21:56  49  	out_account_id := var_new_account_id;
11:21:56  50  END CREATE_ACCOUNT;
11:21:56  51  
11:21:56  52  /*************************************************************/
11:21:56  53  
11:21:56  54  PROCEDURE UPDATE_ACCOUNT (
11:21:56  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
11:21:56  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
11:21:56  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:56  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
11:21:56  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
11:21:56  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:56  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
11:21:56  62  ) AS
11:21:56  63  BEGIN
11:21:56  64  
11:21:56  65  	-- CREATE HISTORY
11:21:56  66  	PROCS_HISTORY_V15.CREATE_ACCOUNT_HISTORY(
11:21:56  67  	  in_account_id 	       => in_account_id,
11:21:56  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56  69  	);
11:21:56  70  
11:21:56  71  	UPDATE ACCOUNT SET
11:21:56  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
11:21:56  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
11:21:56  74  	  UPDATED_BY	     = in_updated_by,
11:21:56  75  	  UPDATE_DATE	     = SYSDATE,
11:21:56  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
11:21:56  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
11:21:56  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
11:21:56  79  	WHERE
11:21:56  80  	  ACCOUNT.ID = in_account_id;
11:21:56  81  
11:21:56  82  END UPDATE_ACCOUNT;
11:21:56  83  
11:21:56  84  /*************************************************************/
11:21:56  85  
11:21:56  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
11:21:56  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
11:21:56  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
11:21:56  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
11:21:56  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
11:21:56  91  ) AS
11:21:56  92  BEGIN
11:21:56  93  
11:21:56  94  	-- CREATE HISTORY
11:21:56  95  	PROCS_HISTORY_V15.CREATE_ACCOUNT_HISTORY(
11:21:56  96  	  in_account_id 	       => in_account_id,
11:21:56  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56  98  	);
11:21:56  99  
11:21:56 100  	UPDATE ACCOUNT SET
11:21:56 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
11:21:56 102  	  INSTRUMENT_ID      = in_instrument_id
11:21:56 103  	WHERE
11:21:56 104  	  ACCOUNT.ID = in_account_id;
11:21:56 105  
11:21:56 106  END;
11:21:56 107  
11:21:56 108  /*************************************************************/
11:21:56 109  
11:21:56 110  PROCEDURE READ_ACCOUNT (
11:21:56 111  	in_account_id  IN ACCOUNT.ID%TYPE,
11:21:56 112  	out_result_set OUT SYS_REFCURSOR
11:21:56 113  ) AS
11:21:56 114  BEGIN
11:21:56 115  	OPEN out_result_set FOR
11:21:56 116  	SELECT
11:21:56 117  	  ACCOUNT_STATUS_ID,
11:21:56 118  	  SUSPEND_DATE,
11:21:56 119  	  GROUP_ID
11:21:56 120  	FROM
11:21:56 121  	  ACCOUNT
11:21:56 122  	WHERE
11:21:56 123  	  ID = in_account_id;
11:21:56 124  END READ_ACCOUNT;
11:21:56 125  
11:21:56 126  /*************************************************************/
11:21:56 127  
11:21:56 128  PROCEDURE CREATE_ACCOUNT_NOTE (
11:21:56 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
11:21:56 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
11:21:56 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
11:21:56 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
11:21:56 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
11:21:56 134  ) AS
11:21:56 135  BEGIN
11:21:56 136  	IF inout_account_note_id IS NULL THEN
11:21:56 137  	  SELECT
11:21:56 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
11:21:56 139  	  FROM DUAL;
11:21:56 140  	END IF;
11:21:56 141  	INSERT INTO ACCOUNT_NOTE(
11:21:56 142  	  ID,
11:21:56 143  	  AGENT_ID,
11:21:56 144  	  ACCOUNT_ID,
11:21:56 145  	  NOTE,
11:21:56 146  	  CREATE_DATE,
11:21:56 147  	  CREATED_BY
11:21:56 148  	) VALUES (
11:21:56 149  	  inout_account_note_id,
11:21:56 150  	  in_agent_id,
11:21:56 151  	  in_account_id,
11:21:56 152  	  in_note,
11:21:56 153  	  SYSDATE,
11:21:56 154  	  in_created_by
11:21:56 155  	);
11:21:56 156  END CREATE_ACCOUNT_NOTE;
11:21:56 157  
11:21:56 158  END PROCS_ACCOUNT_CRU_V15;
11:21:56 159  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_ADDRESS(
11:21:56   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
11:21:56   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:56   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:56   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:56   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:56  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:56  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:56  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
11:21:56  13  ) AS
11:21:56  14  -- VARIABLES
11:21:56  15  var_address_id ADDRESS.ID%TYPE;
11:21:56  16  var_date DATE := SYSDATE;
11:21:56  17  BEGIN
11:21:56  18  	IF in_address_id IS NULL THEN
11:21:56  19  	  SELECT
11:21:56  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
11:21:56  21  	  FROM DUAL;
11:21:56  22  	ELSE
11:21:56  23  	  var_address_id := in_address_id;
11:21:56  24  	END IF;
11:21:56  25  	INSERT INTO
11:21:56  26  	  ADDRESS (
11:21:56  27  	    ID,
11:21:56  28  	    ADDRESS1,
11:21:56  29  	    ADDRESS2,
11:21:56  30  	    CITY,
11:21:56  31  	    STATE,
11:21:56  32  	    POSTAL_CODE,
11:21:56  33  	    COUNTRY,
11:21:56  34  	    CREATE_DATE,
11:21:56  35  	    CREATED_BY,
11:21:56  36  	    UPDATE_DATE,
11:21:56  37  	    UPDATED_BY
11:21:56  38  	  ) VALUES (
11:21:56  39  	    var_address_id,
11:21:56  40  	    in_address1,
11:21:56  41  	    in_address2,
11:21:56  42  	    in_city,
11:21:56  43  	    in_state,
11:21:56  44  	    in_postal_code,
11:21:56  45  	    in_country,
11:21:56  46  	    var_date,
11:21:56  47  	    in_created_by,
11:21:56  48  	    var_date,
11:21:56  49  	    in_created_by
11:21:56  50  	  );
11:21:56  51  
11:21:56  52  	out_address_id := var_address_id;
11:21:56  53  END CREATE_ADDRESS;
11:21:56  54  
11:21:56  55  PROCEDURE UPDATE_ADDRESS(
11:21:56  56  	in_address_id	      IN ADDRESS.ID%TYPE,
11:21:56  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:56  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:56  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:56  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:56  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:56  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:56  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
11:21:56  64  ) AS
11:21:56  65  BEGIN
11:21:56  66  
11:21:56  67  	-- Create history
11:21:56  68  	PROCS_HISTORY_V15.CREATE_ADDRESS_HISTORY(
11:21:56  69  	  in_address_id 		=> in_address_id,
11:21:56  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56  71  	);
11:21:56  72  
11:21:56  73  	UPDATE
11:21:56  74  	  ADDRESS
11:21:56  75  	SET
11:21:56  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
11:21:56  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
11:21:56  78  	  CITY = NVL(in_city, CITY),
11:21:56  79  	  STATE = NVL(in_state, STATE),
11:21:56  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
11:21:56  81  	  COUNTRY = NVL(in_country, COUNTRY),
11:21:56  82  	  UPDATE_DATE = SYSDATE,
11:21:56  83  	  UPDATED_BY = in_updated_by
11:21:56  84  	WHERE
11:21:56  85  	  ID = in_address_id;
11:21:56  86  
11:21:56  87  END UPDATE_ADDRESS;
11:21:56  88  
11:21:56  89  END PROCS_ADDRESS_CRU_V15;
11:21:56  90  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_AMAZON_SUB(
11:21:56   4  /*
11:21:56   5  Throws exceptions:
11:21:56   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56   7  */
11:21:56   8  	  out_id	      OUT NUMBER,
11:21:56   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
11:21:56  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
11:21:56  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
11:21:56  12  ) AS
11:21:56  13  -- VARIABLES
11:21:56  14  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
11:21:56  15  var_current_date	DATE;
11:21:56  16  var_count 	NUMBER;
11:21:56  17  AMAZON_SUB_USED	EXCEPTION;
11:21:56  18  BEGIN
11:21:56  19  
11:21:56  20  	SELECT COUNT(1) INTO var_count
11:21:56  21  	FROM SUBSCRIPTION s, AMAZON_SUB am
11:21:56  22  	WHERE
11:21:56  23  	  am.AMAZON_ID = in_amazon_id
11:21:56  24  	  and am.subscription_id = s.id
11:21:56  25  	  and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
11:21:56  26  
11:21:56  27  	if var_count > 0 then
11:21:56  28  	  raise AMAZON_SUB_USED;
11:21:56  29  	end if;
11:21:56  30  
11:21:56  31  	SELECT
11:21:56  32  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
11:21:56  33  	INTO
11:21:56  34  	  out_id
11:21:56  35  	FROM
11:21:56  36  	  dual
11:21:56  37  	;
11:21:56  38  
11:21:56  39  	SELECT
11:21:56  40  	  sysdate
11:21:56  41  	INTO
11:21:56  42  	  var_current_date
11:21:56  43  	FROM
11:21:56  44  	  dual
11:21:56  45  	;
11:21:56  46  
11:21:56  47  	INSERT INTO CORE_OWNER.AMAZON_SUB
11:21:56  48  	(
11:21:56  49  	  id,
11:21:56  50  	  subscription_id,
11:21:56  51  	  amazon_id,
11:21:56  52  	  create_date,
11:21:56  53  	  created_by,
11:21:56  54  	  update_date,
11:21:56  55  	  updated_by
11:21:56  56  	)
11:21:56  57  	VALUES
11:21:56  58  	(
11:21:56  59  	  out_id,
11:21:56  60  	  in_subscription_id,
11:21:56  61  	  in_amazon_id,
11:21:56  62  	  var_current_date,
11:21:56  63  	  in_created_by,
11:21:56  64  	  var_current_date,
11:21:56  65  	  in_created_by
11:21:56  66  	);
11:21:56  67  
11:21:56  68  EXCEPTION
11:21:56  69  WHEN AMAZON_SUB_USED THEN
11:21:56  70  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56  71  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
11:21:56  72  WHEN DUP_VAL_ON_INDEX THEN
11:21:56  73  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56  74  	  SPROC_NAME, 'Duplicate value', SQLERRM);
11:21:56  75  WHEN OTHERS THEN
11:21:56  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56  78  END CREATE_AMAZON_SUB;
11:21:56  79  
11:21:56  80  END PROCS_AMAZON_CRU_V15;
11:21:56  81  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_CHARGE(
11:21:56   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
11:21:56   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
11:21:56   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:56   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
11:21:56   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
11:21:56  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
11:21:56  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:56  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
11:21:56  13  ) AS
11:21:56  14  -- VARIABLES
11:21:56  15  var_charge_id CHARGE.ID%TYPE;
11:21:56  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56  17  var_date DATE := SYSDATE;
11:21:56  18  BEGIN
11:21:56  19  	IF in_charge_id IS NULL THEN
11:21:56  20  	  SELECT
11:21:56  21  	    CRG_ID_SEQ.nextVal into var_charge_id
11:21:56  22  	  FROM DUAL;
11:21:56  23  	ELSE
11:21:56  24  	  var_charge_id := in_charge_id;
11:21:56  25  	END IF;
11:21:56  26  	INSERT INTO
11:21:56  27  	  CHARGE (
11:21:56  28  	    ID,
11:21:56  29  	    INVOICE_ID,
11:21:56  30  	    TRANSACTION_ID,
11:21:56  31  	    INSTRUMENT_TYPE_ID,
11:21:56  32  	    INSTRUMENT_ID,
11:21:56  33  	    CHARGE_AMOUNT,
11:21:56  34  	    CHARGE_STATUS_ID,
11:21:56  35  	    CREATE_DATE,
11:21:56  36  	    CREATED_BY,
11:21:56  37  	    UPDATE_DATE,
11:21:56  38  	    UPDATED_BY
11:21:56  39  	  ) VALUES (
11:21:56  40  	    var_charge_id,
11:21:56  41  	    in_invoice_id,
11:21:56  42  	    in_transaction_id,
11:21:56  43  	    in_instrument_type_id,
11:21:56  44  	    in_instrument_id,
11:21:56  45  	    in_charge_amount,
11:21:56  46  	    in_charge_status_id,
11:21:56  47  	    var_date,
11:21:56  48  	    in_created_by,
11:21:56  49  	    var_date,
11:21:56  50  	    in_created_by
11:21:56  51  	  );
11:21:56  52  
11:21:56  53  	out_charge_id := var_charge_id;
11:21:56  54  END CREATE_CHARGE;
11:21:56  55  
11:21:56  56  PROCEDURE UPDATE_CHARGE(
11:21:56  57  	in_charge_id	      IN CHARGE.ID%TYPE,
11:21:56  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:56  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
11:21:56  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
11:21:56  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
11:21:56  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
11:21:56  63  ) AS
11:21:56  64  BEGIN
11:21:56  65  
11:21:56  66  	-- Create history
11:21:56  67  	PROCS_HISTORY_V15.CREATE_CHARGE_HISTORY(
11:21:56  68  	  in_charge_id		       => in_charge_id,
11:21:56  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56  70  	);
11:21:56  71  
11:21:56  72  	UPDATE
11:21:56  73  	  CHARGE
11:21:56  74  	SET
11:21:56  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
11:21:56  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
11:21:56  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
11:21:56  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
11:21:56  79  	  UPDATE_DATE	     = SYSDATE,
11:21:56  80  	  UPDATED_BY	     = in_updated_by
11:21:56  81  	WHERE
11:21:56  82  	  ID = in_charge_id;
11:21:56  83  
11:21:56  84  END UPDATE_CHARGE;
11:21:56  85  
11:21:56  86  END PROCS_CHARGE_CRU_V15;
11:21:56  87  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_CREDIT_CARD(
11:21:56   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
11:21:56   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
11:21:56   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
11:21:56   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
11:21:56   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
11:21:56  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
11:21:56  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
11:21:56  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
11:21:56  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
11:21:56  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
11:21:56  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:56  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
11:21:56  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
11:21:56  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
11:21:56  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
11:21:56  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
11:21:56  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
11:21:56  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
11:21:56  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
11:21:56  24  ) AS
11:21:56  25  -- VARIABLES
11:21:56  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
11:21:56  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56  28  var_date DATE := SYSDATE;
11:21:56  29  BEGIN
11:21:56  30  	IF in_credit_card_id IS NULL THEN
11:21:56  31  	  SELECT
11:21:56  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
11:21:56  33  	  FROM DUAL;
11:21:56  34  	ELSE
11:21:56  35  	  var_credit_card_id := in_credit_card_id;
11:21:56  36  	END IF;
11:21:56  37  	INSERT INTO CREDIT_CARD(
11:21:56  38  	    ID,
11:21:56  39  	    ACCOUNT_ID,
11:21:56  40  	    INSTRUMENT_NAME,
11:21:56  41  	    PRIVATE_CARD_HOLDER_NAME,
11:21:56  42  	    PRIVATE_STREET_ADDRESS,
11:21:56  43  	    PRIVATE_STREET_ADDRESS2,
11:21:56  44  	    STATE,
11:21:56  45  	    CITY,
11:21:56  46  	    POSTAL_CODE,
11:21:56  47  	    COUNTRY,
11:21:56  48  	    LAST_FOUR_CC,
11:21:56  49  	    EXPIRATION_DATE,
11:21:56  50  	    CREDIT_CARD_TYPE_ID,
11:21:56  51  	    SECRET_TOKEN,
11:21:56  52  	    CHASE_PROFILE_ID,
11:21:56  53  	    CREATE_DATE,
11:21:56  54  	    CREATED_BY,
11:21:56  55  	    UPDATE_DATE,
11:21:56  56  	    UPDATED_BY,
11:21:56  57  	    CREDIT_CARD_STATUS_ID,
11:21:56  58  	    PRIVATE_FIRST_NAME,
11:21:56  59  	    PRIVATE_LAST_NAME
11:21:56  60  	  ) VALUES (
11:21:56  61  	    var_credit_card_id,
11:21:56  62  	    in_account_id,
11:21:56  63  	    in_instrument_name,
11:21:56  64  	    in_private_card_holder_name,
11:21:56  65  	    in_private_street_address,
11:21:56  66  	    in_private_street_address2,
11:21:56  67  	    in_state,
11:21:56  68  	    in_city,
11:21:56  69  	    in_postal_code,
11:21:56  70  	    in_country,
11:21:56  71  	    in_last_four_cc,
11:21:56  72  	    in_expiration_date,
11:21:56  73  	    in_credit_card_type_id,
11:21:56  74  	    in_secret_token,
11:21:56  75  	    in_chase_profile_id,
11:21:56  76  	    var_date,
11:21:56  77  	    in_created_by,
11:21:56  78  	    var_date,
11:21:56  79  	    in_created_by,
11:21:56  80  	    in_credit_card_status_id,
11:21:56  81  	    in_private_first_name,
11:21:56  82  	    in_private_last_name
11:21:56  83  	  );
11:21:56  84  
11:21:56  85  	out_credit_card_id := var_credit_card_id;
11:21:56  86  END CREATE_CREDIT_CARD;
11:21:56  87  
11:21:56  88  /******************************************************************************/
11:21:56  89  
11:21:56  90  PROCEDURE UPDATE_CREDIT_CARD(
11:21:56  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
11:21:56  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:56  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
11:21:56  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:56  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
11:21:56  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
11:21:56  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
11:21:56  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:56  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
11:21:56 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
11:21:56 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:56 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
11:21:56 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
11:21:56 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
11:21:56 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
11:21:56 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
11:21:56 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
11:21:56 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
11:21:56 109  ) AS
11:21:56 110  BEGIN
11:21:56 111  
11:21:56 112  	-- Create history
11:21:56 113  	PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
11:21:56 114  	  in_credit_card_id	       => in_credit_card_id,
11:21:56 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56 116  	);
11:21:56 117  
11:21:56 118  	UPDATE CREDIT_CARD SET
11:21:56 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
11:21:56 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
11:21:56 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
11:21:56 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
11:21:56 123  	  STATE 		   = NVL(in_state, STATE),
11:21:56 124  	  CITY			   = NVL(in_city, CITY),
11:21:56 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
11:21:56 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
11:21:56 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
11:21:56 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
11:21:56 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
11:21:56 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
11:21:56 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
11:21:56 132  	  UPDATE_DATE		   = SYSDATE,
11:21:56 133  	  UPDATED_BY		   = in_updated_by,
11:21:56 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
11:21:56 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
11:21:56 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
11:21:56 137  	WHERE
11:21:56 138  	  ID = in_credit_card_id;
11:21:56 139  
11:21:56 140  END UPDATE_CREDIT_CARD;
11:21:56 141  
11:21:56 142  /******************************************************************************/
11:21:56 143  
11:21:56 144  PROCEDURE CREATE_PAYPAL(
11:21:56 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
11:21:56 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
11:21:56 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
11:21:56 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:56 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
11:21:56 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
11:21:56 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
11:21:56 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
11:21:56 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
11:21:56 154  	in_state			IN PAYPAL.STATE%TYPE,
11:21:56 155  	in_city 			IN PAYPAL.CITY%TYPE,
11:21:56 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
11:21:56 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
11:21:56 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
11:21:56 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
11:21:56 160  ) AS
11:21:56 161  -- VARIABLES
11:21:56 162  var_paypal_id PAYPAL.ID%TYPE;
11:21:56 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56 164  var_date DATE := SYSDATE;
11:21:56 165  BEGIN
11:21:56 166  	IF in_paypal_id IS NULL THEN
11:21:56 167  	  SELECT
11:21:56 168  	    PP_ID_SEQ.nextVal into var_paypal_id
11:21:56 169  	  FROM DUAL;
11:21:56 170  	ELSE
11:21:56 171  	  var_paypal_id := in_paypal_id;
11:21:56 172  	END IF;
11:21:56 173  	INSERT INTO PAYPAL(
11:21:56 174  	    ID,
11:21:56 175  	    ACCOUNT_ID,
11:21:56 176  	    INSTRUMENT_NAME,
11:21:56 177  	    PRIVATE_EMAIL_ADDRESS,
11:21:56 178  	    CREATE_DATE,
11:21:56 179  	    CREATED_BY,
11:21:56 180  	    UPDATE_DATE,
11:21:56 181  	    UPDATED_BY,
11:21:56 182  	    PAYPAL_STATUS_ID,
11:21:56 183  	    PRIVATE_STREET_ADDRESS,
11:21:56 184  	    PRIVATE_STREET_ADDRESS2,
11:21:56 185  	    STATE,
11:21:56 186  	    CITY,
11:21:56 187  	    POSTAL_CODE,
11:21:56 188  	    COUNTRY,
11:21:56 189  	    EXPIRATION_DATE,
11:21:56 190  	    SECRET_TOKEN
11:21:56 191  	  ) VALUES (
11:21:56 192  	    var_paypal_id,
11:21:56 193  	    in_account_id,
11:21:56 194  	    in_instrument_name,
11:21:56 195  	    in_private_email_address,
11:21:56 196  	    var_date,
11:21:56 197  	    in_created_by,
11:21:56 198  	    var_date,
11:21:56 199  	    in_created_by,
11:21:56 200  	    in_paypal_status_id,
11:21:56 201  	    in_paypal_prvt_street_address,
11:21:56 202  	    in_paypal_prvt_street_address2,
11:21:56 203  	    in_state,
11:21:56 204  	    in_city,
11:21:56 205  	    in_postal_code,
11:21:56 206  	    in_country,
11:21:56 207  	    in_expiration_date,
11:21:56 208  	    in_secret_token
11:21:56 209  	  );
11:21:56 210  	out_paypal_id := var_paypal_id;
11:21:56 211  END CREATE_PAYPAL;
11:21:56 212  
11:21:56 213  /******************************************************************************/
11:21:56 214  
11:21:56 215  PROCEDURE UPDATE_PAYPAL(
11:21:56 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
11:21:56 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
11:21:56 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
11:21:56 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
11:21:56 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
11:21:56 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:56 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
11:21:56 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
11:21:56 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
11:21:56 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:56 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
11:21:56 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:56 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
11:21:56 229  ) AS
11:21:56 230  BEGIN
11:21:56 231  	-- Create history
11:21:56 232  	PROCS_HISTORY_V15.CREATE_PAYPAL_HISTORY(
11:21:56 233  	  in_paypal_id		       => in_paypal_id,
11:21:56 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56 235  	);
11:21:56 236  
11:21:56 237  	UPDATE PAYPAL SET
11:21:56 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
11:21:56 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
11:21:56 240  	  UPDATE_DATE	   = SYSDATE,
11:21:56 241  	  UPDATED_BY	   = in_updated_by,
11:21:56 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
11:21:56 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
11:21:56 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
11:21:56 245  	  STATE 		  = NVL(in_state, STATE),
11:21:56 246  	  CITY			  = NVL(in_city, CITY),
11:21:56 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
11:21:56 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
11:21:56 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
11:21:56 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
11:21:56 251  	WHERE
11:21:56 252  	  ID = in_paypal_id;
11:21:56 253  END UPDATE_PAYPAL;
11:21:56 254  
11:21:56 255  /******************************************************************************/
11:21:56 256  
11:21:56 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
11:21:56 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
11:21:56 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
11:21:56 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
11:21:56 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:56 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
11:21:56 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:56 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
11:21:56 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
11:21:56 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
11:21:56 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
11:21:56 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
11:21:56 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
11:21:56 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
11:21:56 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
11:21:56 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
11:21:56 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
11:21:56 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
11:21:56 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
11:21:56 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
11:21:56 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:56 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
11:21:56 279  ) AS
11:21:56 280  -- VARIABLES
11:21:56 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
11:21:56 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56 283  var_date DATE := SYSDATE;
11:21:56 284  BEGIN
11:21:56 285  	IF in_gift_certificate_id IS NULL THEN
11:21:56 286  	  SELECT
11:21:56 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
11:21:56 288  	  FROM DUAL;
11:21:56 289  	ELSE
11:21:56 290  	  var_gift_certificate_id := in_gift_certificate_id;
11:21:56 291  	END IF;
11:21:56 292  	INSERT INTO GIFT_CERTIFICATE (
11:21:56 293  	    ID,
11:21:56 294  	    PURCHASER_GROUP_ID,
11:21:56 295  	    PURCHASE_INVOICE_ID,
11:21:56 296  	    OFFER_CHAIN_ID,
11:21:56 297  	    EXPIRATION_DATE,
11:21:56 298  	    PURCHASE_DATE,
11:21:56 299  	    GIFT_CERTIFICATE_STATUS_ID,
11:21:56 300  	    CODE,
11:21:56 301  	    CREATE_DATE,
11:21:56 302  	    CREATED_BY,
11:21:56 303  	    UPDATE_DATE,
11:21:56 304  	    UPDATED_BY,
11:21:56 305  	    RECIPIENT_NAME,
11:21:56 306  	    GIFT_MESSAGE,
11:21:56 307  	    RECIPIENT_EMAIL,
11:21:56 308  	    FINALIZED_INVOICE_ID,
11:21:56 309  	    SENDER_EMAIL,
11:21:56 310  	    SENDER_NAME,
11:21:56 311  	    REDEMPTION_DATE,
11:21:56 312  	    CANCELATION_DATE,
11:21:56 313  	    REDEEMER_GROUP_ID,
11:21:56 314  	    RECIPIENT_ADDRESS_ID,
11:21:56 315  	    RECIPIENT_NOTIFY_DATE
11:21:56 316  	  ) VALUES(
11:21:56 317  	    var_gift_certificate_id,
11:21:56 318  	    in_purchaser_group_id,
11:21:56 319  	    in_purchaser_invoice_id,
11:21:56 320  	    in_offer_chain_id,
11:21:56 321  	    in_expiration_date,
11:21:56 322  	    in_purchase_date,
11:21:56 323  	    in_gift_certificate_status_id,
11:21:56 324  	    in_code,
11:21:56 325  	    var_date,
11:21:56 326  	    in_created_by,
11:21:56 327  	    var_date,
11:21:56 328  	    in_created_by,
11:21:56 329  	    in_recipient_name,
11:21:56 330  	    in_gift_message,
11:21:56 331  	    in_recipient_email,
11:21:56 332  	    in_finalized_invoice_id,
11:21:56 333  	    in_sender_email,
11:21:56 334  	    in_sender_name,
11:21:56 335  	    in_redemption_date,
11:21:56 336  	    in_cancelation_date,
11:21:56 337  	    in_redeemer_group_id,
11:21:56 338  	    in_recipient_address_id,
11:21:56 339  	    in_recipient_notify_date
11:21:56 340  	  );
11:21:56 341  
11:21:56 342  	out_gift_certificate_id := var_gift_certificate_id;
11:21:56 343  END CREATE_GIFT_CERTIFICATE;
11:21:56 344  
11:21:56 345  /******************************************************************************/
11:21:56 346  
11:21:56 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
11:21:56 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
11:21:56 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
11:21:56 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
11:21:56 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
11:21:56 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
11:21:56 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
11:21:56 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
11:21:56 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
11:21:56 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
11:21:56 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
11:21:56 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
11:21:56 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
11:21:56 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
11:21:56 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
11:21:56 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:56 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
11:21:56 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
11:21:56 365  ) AS
11:21:56 366  BEGIN
11:21:56 367  
11:21:56 368  	-- Create history
11:21:56 369  	PROCS_HISTORY_V15.CREATE_GIFT_CERT_HISTORY(
11:21:56 370  	  in_gift_certificate_id       => in_gift_certificate_id,
11:21:56 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56 372  	);
11:21:56 373  
11:21:56 374  	UPDATE GIFT_CERTIFICATE SET
11:21:56 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
11:21:56 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
11:21:56 377  	  CODE			     = NVL(in_code, CODE),
11:21:56 378  	  UPDATE_DATE		     = SYSDATE,
11:21:56 379  	  UPDATED_BY		     = in_updated_by,
11:21:56 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
11:21:56 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
11:21:56 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
11:21:56 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
11:21:56 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
11:21:56 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
11:21:56 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
11:21:56 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
11:21:56 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
11:21:56 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
11:21:56 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
11:21:56 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
11:21:56 392  	WHERE
11:21:56 393  	  ID = in_gift_certificate_id;
11:21:56 394  
11:21:56 395  END UPDATE_GIFT_CERTIFICATE;
11:21:56 396  
11:21:56 397  END PROCS_FIN_INSTRUMENTS_CRU_V15;
11:21:56 398  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
11:21:56   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:56   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
11:21:56   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
11:21:56   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
11:21:56   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
11:21:56   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
11:21:56  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
11:21:56  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:56  12  ) AS
11:21:56  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
11:21:56  14  BEGIN
11:21:56  15  	UPDATE SUBSCRIPTION_SHARE SET
11:21:56  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
11:21:56  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
11:21:56  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
11:21:56  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
11:21:56  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
11:21:56  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
11:21:56  22  	  UPDATED_BY	       = in_updated_by,
11:21:56  23  	  UPDATE_DATE	       = SYSDATE
11:21:56  24  	WHERE
11:21:56  25  	  SUBSCRIPTION_SHARE.ID = in_id;
11:21:56  26  EXCEPTION
11:21:56  27  	WHEN OTHERS THEN
11:21:56  28  	  Procs_Common_V15.Throw_Exception(APP_EXCEPTION_CODES_V15.Internal_Error,
11:21:56  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
11:21:56  30  END UPDATE_SUBSCRIPTION_SHARE;
11:21:56  31  
11:21:56  32  PROCEDURE CREATE_GROUP_ACCOUNT (
11:21:56  33  	in_subscription_id	 IN NUMBER,
11:21:56  34  	in_group_name		 IN VARCHAR2,
11:21:56  35  	in_first_name		 IN VARCHAR2,
11:21:56  36  	in_last_name		 IN VARCHAR2,
11:21:56  37  	in_email		 IN VARCHAR2,
11:21:56  38  	in_phone		 IN VARCHAR2,
11:21:56  39  	in_organization_type	 IN VARCHAR2,
11:21:56  40  	in_seats		 IN NUMBER,
11:21:56  41  	in_seat_ttl_in_hours	 IN NUMBER,
11:21:56  42  	in_ip			 IN NUMBER,
11:21:56  43  	in_created_by		 IN VARCHAR2
11:21:56  44  ) AS
11:21:56  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
11:21:56  46  var_now DATE;
11:21:56  47  BEGIN
11:21:56  48  
11:21:56  49  	SELECT
11:21:56  50  	  SYSDATE INTO var_now
11:21:56  51  	FROM dual;
11:21:56  52  
11:21:56  53  	INSERT INTO GROUP_ACCOUNT (
11:21:56  54  	  id,
11:21:56  55  	  subscription_id,
11:21:56  56  	  group_name,
11:21:56  57  	  first_name,
11:21:56  58  	  last_name,
11:21:56  59  	  email,
11:21:56  60  	  phone,
11:21:56  61  	  organization_type,
11:21:56  62  	  seats,
11:21:56  63  	  seat_ttl_in_hours,
11:21:56  64  	  ip,
11:21:56  65  	  create_date,
11:21:56  66  	  created_by,
11:21:56  67  	  update_date,
11:21:56  68  	  updated_by
11:21:56  69  	) VALUES (
11:21:56  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
11:21:56  71  	  in_subscription_id,
11:21:56  72  	  in_group_name,
11:21:56  73  	  in_first_name,
11:21:56  74  	  in_last_name,
11:21:56  75  	  in_email,
11:21:56  76  	  in_phone,
11:21:56  77  	  in_organization_type,
11:21:56  78  	  in_seats,
11:21:56  79  	  in_seat_ttl_in_hours,
11:21:56  80  	  in_ip,
11:21:56  81  	  var_now,
11:21:56  82  	  in_created_by,
11:21:56  83  	  var_now,
11:21:56  84  	  in_created_by
11:21:56  85  	);
11:21:56  86  
11:21:56  87  EXCEPTION
11:21:56  88  	WHEN PROGRAM_ERROR THEN
11:21:56  89  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:56  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
11:21:56  91  	WHEN OTHERS THEN
11:21:56  92  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
11:21:56  94  END CREATE_GROUP_ACCOUNT;
11:21:56  95  
11:21:56  96  
11:21:56  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
11:21:56  98  	in_group_account_id    IN NUMBER,
11:21:56  99  	in_borrower_account_id IN NUMBER,
11:21:56 100  	in_ip_address	       IN VARCHAR2,
11:21:56 101  	in_email_domain        IN VARCHAR2,
11:21:56 102  	in_start_date	       IN DATE,
11:21:56 103  	in_end_date	       IN DATE,
11:21:56 104  	in_created_by	       IN VARCHAR2
11:21:56 105  ) AS
11:21:56 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
11:21:56 107  var_now DATE;
11:21:56 108  BEGIN
11:21:56 109  
11:21:56 110  	SELECT
11:21:56 111  	  SYSDATE INTO var_now
11:21:56 112  	FROM dual;
11:21:56 113  
11:21:56 114  	INSERT INTO SUBSCRIPTION_SHARE (
11:21:56 115  	  id,
11:21:56 116  	  group_account_id,
11:21:56 117  	  borrower_account_id,
11:21:56 118  	  ip_address,
11:21:56 119  	  email_domain,
11:21:56 120  	  start_date,
11:21:56 121  	  end_date,
11:21:56 122  	  create_date,
11:21:56 123  	  created_by,
11:21:56 124  	  update_date,
11:21:56 125  	  updated_by
11:21:56 126  	) VALUES (
11:21:56 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
11:21:56 128  	  in_group_account_id,
11:21:56 129  	  in_borrower_account_id,
11:21:56 130  	  in_ip_address,
11:21:56 131  	  in_email_domain,
11:21:56 132  	  in_start_date,
11:21:56 133  	  in_end_date,
11:21:56 134  	  var_now,
11:21:56 135  	  in_created_by,
11:21:56 136  	  var_now,
11:21:56 137  	  in_created_by
11:21:56 138  	);
11:21:56 139  
11:21:56 140  EXCEPTION
11:21:56 141  	WHEN PROGRAM_ERROR THEN
11:21:56 142  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:56 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
11:21:56 144  END CREATE_SUBSCRIPTION_SHARE;
11:21:56 145  
11:21:56 146  -- Eh, I don't like the cru packages at all
11:21:56 147  -- the idea of code reuse in PL/SQL is still lost on me
11:21:56 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
11:21:56 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:56 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:56 151  ) AS
11:21:56 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
11:21:56 153  BEGIN
11:21:56 154  	update
11:21:56 155  	  GROUP_ACCOUNT_IP_RANGE IR
11:21:56 156  	set
11:21:56 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_INACTIVE,
11:21:56 158  	  IR.UPDATED_BY = in_updated_by,
11:21:56 159  	  IR.UPDATE_DATE = sysdate
11:21:56 160  	where
11:21:56 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
11:21:56 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
11:21:56 163  	;
11:21:56 164  EXCEPTION
11:21:56 165  WHEN OTHERS THEN
11:21:56 166  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 168  END DISABLE_IP_RANGES_BY_GA_ID;
11:21:56 169  
11:21:56 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
11:21:56 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
11:21:56 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:56 173  ) AS
11:21:56 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
11:21:56 175  BEGIN
11:21:56 176  	update
11:21:56 177  	  GROUP_ACCOUNT_IP_RANGE IR
11:21:56 178  	set
11:21:56 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_INACTIVE,
11:21:56 180  	  IR.UPDATED_BY = in_updated_by,
11:21:56 181  	  IR.UPDATE_DATE = sysdate
11:21:56 182  	where
11:21:56 183  	  IR.ID = in_id and
11:21:56 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
11:21:56 185  	;
11:21:56 186  raise no_data_found;
11:21:56 187  EXCEPTION
11:21:56 188  WHEN OTHERS THEN
11:21:56 189  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
11:21:56 191  END DISABLE_IP_RANGE_BY_ID;
11:21:56 192  
11:21:56 193  PROCEDURE ADD_IP_RANGE (
11:21:56 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:56 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
11:21:56 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:56 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:56 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
11:21:56 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
11:21:56 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
11:21:56 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
11:21:56 202  ) AS
11:21:56 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
11:21:56 204  BEGIN
11:21:56 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
11:21:56 206  	    ID,
11:21:56 207  	    GROUP_ACCOUNT_ID,
11:21:56 208  	    MINIMUM_IP_STRING,
11:21:56 209  	    MINIMUM_IP_LOW,
11:21:56 210  	    MINIMUM_IP_HIGH,
11:21:56 211  	    MAXIMUM_IP_STRING,
11:21:56 212  	    MAXIMUM_IP_LOW,
11:21:56 213  	    MAXIMUM_IP_HIGH,
11:21:56 214  	    CREATED_BY,
11:21:56 215  	    CREATE_DATE,
11:21:56 216  	    UPDATED_BY,
11:21:56 217  	    UPDATE_DATE,
11:21:56 218  	    GROUP_ACC_IP_RNG_STATUS_ID
11:21:56 219  	  )
11:21:56 220  	  VALUES (
11:21:56 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
11:21:56 222  	    in_group_account_id,
11:21:56 223  	    in_minimum_ip_string,
11:21:56 224  	    in_minimum_ip_low,
11:21:56 225  	    in_minimum_ip_high,
11:21:56 226  	    in_maximum_ip_string,
11:21:56 227  	    in_maximum_ip_low,
11:21:56 228  	    in_maximum_ip_high,
11:21:56 229  	    in_created_by,
11:21:56 230  	    sysdate,
11:21:56 231  	    in_created_by,
11:21:56 232  	    sysdate,
11:21:56 233  	    GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
11:21:56 234  	  );
11:21:56 235  EXCEPTION
11:21:56 236  WHEN OTHERS THEN
11:21:56 237  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 239  END ADD_IP_RANGE;
11:21:56 240  
11:21:56 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
11:21:56 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:56 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:56 244  ) AS
11:21:56 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
11:21:56 246  BEGIN
11:21:56 247  	update
11:21:56 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
11:21:56 249  	set
11:21:56 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT,
11:21:56 251  	  ED.UPDATED_BY = in_updated_by,
11:21:56 252  	  ED.UPDATE_DATE = sysdate
11:21:56 253  	where
11:21:56 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
11:21:56 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT
11:21:56 256  	;
11:21:56 257  EXCEPTION
11:21:56 258  WHEN OTHERS THEN
11:21:56 259  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
11:21:56 262  
11:21:56 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
11:21:56 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:56 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:56 266  ) AS
11:21:56 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
11:21:56 268  BEGIN
11:21:56 269  	update
11:21:56 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
11:21:56 271  	set
11:21:56 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT,
11:21:56 273  	  ED.UPDATED_BY = in_updated_by,
11:21:56 274  	  ED.UPDATE_DATE = sysdate
11:21:56 275  	where
11:21:56 276  	  ED.ID = in_id and
11:21:56 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT
11:21:56 278  	;
11:21:56 279  EXCEPTION
11:21:56 280  WHEN OTHERS THEN
11:21:56 281  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
11:21:56 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
11:21:56 284  
11:21:56 285  
11:21:56 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
11:21:56 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:56 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:56 289  ) AS
11:21:56 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
11:21:56 291  BEGIN
11:21:56 292  	update
11:21:56 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
11:21:56 294  	set
11:21:56 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT,
11:21:56 296  	  ED.UPDATED_BY = in_updated_by,
11:21:56 297  	  ED.UPDATE_DATE = sysdate
11:21:56 298  	where
11:21:56 299  	  ED.ID = in_id and
11:21:56 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_INACT
11:21:56 301  	;
11:21:56 302  EXCEPTION
11:21:56 303  WHEN OTHERS THEN
11:21:56 304  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
11:21:56 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
11:21:56 307  
11:21:56 308  
11:21:56 309  PROCEDURE ADD_EMAIL_DOMAIN (
11:21:56 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:56 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:56 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
11:21:56 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
11:21:56 314  ) AS
11:21:56 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
11:21:56 316  BEGIN
11:21:56 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
11:21:56 318  	    ID,
11:21:56 319  	    GROUP_ACCOUNT_ID,
11:21:56 320  	    EMAIL_DOMAIN,
11:21:56 321  		IS_ACTIVE,
11:21:56 322  	    CREATED_BY,
11:21:56 323  	    CREATE_DATE,
11:21:56 324  	    UPDATED_BY,
11:21:56 325  	    UPDATE_DATE
11:21:56 326  	  )
11:21:56 327  	  VALUES (
11:21:56 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
11:21:56 329  	    in_group_account_id,
11:21:56 330  		in_email_domain,
11:21:56 331  		in_is_active,
11:21:56 332  		in_created_by,
11:21:56 333  	    sysdate,
11:21:56 334  	    in_created_by,
11:21:56 335  	    sysdate
11:21:56 336  	  );
11:21:56 337  EXCEPTION
11:21:56 338  WHEN DUP_VAL_ON_INDEX THEN
11:21:56 339  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:56 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
11:21:56 341  WHEN OTHERS THEN
11:21:56 342  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
11:21:56 344  END ADD_EMAIL_DOMAIN;
11:21:56 345  
11:21:56 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
11:21:56 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:56 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
11:21:56 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
11:21:56 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
11:21:56 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
11:21:56 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
11:21:56 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:56 354  ) AS
11:21:56 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
11:21:56 356  BEGIN
11:21:56 357  	update
11:21:56 358  	  group_account
11:21:56 359  	set
11:21:56 360  	  group_name = nvl(in_group_name, group_name),
11:21:56 361  	  first_name = nvl(in_first_name, first_name),
11:21:56 362  	  last_name = nvl(in_last_name, last_name),
11:21:56 363  	  email = nvl(in_email, email),
11:21:56 364  	  phone = nvl(in_phone, phone),
11:21:56 365  	  updated_by = in_updated_by,
11:21:56 366  	  update_date = sysdate
11:21:56 367  	where
11:21:56 368  	  id = in_group_account_id;
11:21:56 369  
11:21:56 370  	if(sql%rowcount = 0) then
11:21:56 371  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
11:21:56 373  	end if;
11:21:56 374  EXCEPTION
11:21:56 375  	WHEN OTHERS THEN
11:21:56 376  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:56 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
11:21:56 378  END UPDATE_GROUP_ACCOUNT;
11:21:56 379  
11:21:56 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
11:21:56 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
11:21:56 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
11:21:56 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:56 384  ) AS
11:21:56 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
11:21:56 386  var_subscription_id NUMBER;
11:21:56 387  var_seats NUMBER;
11:21:56 388  BEGIN
11:21:56 389  	select subscription_id, seats into var_subscription_id, var_seats
11:21:56 390  	from group_account
11:21:56 391  	where id = in_group_account_id;
11:21:56 392  
11:21:56 393  	update
11:21:56 394  	  group_account
11:21:56 395  	set
11:21:56 396  	  seats = in_seats,
11:21:56 397  	  updated_by = in_updated_by,
11:21:56 398  	  update_date = sysdate
11:21:56 399  	where
11:21:56 400  	  id = in_group_account_id;
11:21:56 401  
11:21:56 402  	if(sql%rowcount = 0) then
11:21:56 403  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
11:21:56 405  	end if;
11:21:56 406  
11:21:56 407  	PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:56 408  	  in_subscription_id => var_subscription_id,
11:21:56 409  	  in_agent_id	     => 0,
11:21:56 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
11:21:56 411  	  in_created_by      => in_updated_by
11:21:56 412  	);
11:21:56 413  EXCEPTION
11:21:56 414  	WHEN NO_DATA_FOUND THEN
11:21:56 415  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:56 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
11:21:56 417  	WHEN OTHERS THEN
11:21:56 418  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:56 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
11:21:56 420  END UPDATE_GROUP_ACCOUNT_SEATS;
11:21:56 421  
11:21:56 422  END PROCS_GROUP_ACCOUNT_CRU_V15;
11:21:56 423  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_INVOICE (
11:21:56   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
11:21:56   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
11:21:56   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
11:21:56   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
11:21:56   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
11:21:56   9  ) AS
11:21:56  10  -- VARIABLES
11:21:56  11  var_invoice_id INVOICE.ID%TYPE;
11:21:56  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:56  13  var_date DATE := SYSDATE;
11:21:56  14  BEGIN
11:21:56  15  	IF in_invoice_id IS NULL THEN
11:21:56  16  	  SELECT
11:21:56  17  	    INV_ID_SEQ.nextVal into var_invoice_id
11:21:56  18  	  FROM DUAL;
11:21:56  19  	ELSE
11:21:56  20  	  var_invoice_id := in_invoice_id;
11:21:56  21  	END IF;
11:21:56  22  	INSERT INTO
11:21:56  23  	  INVOICE (
11:21:56  24  	    ID,
11:21:56  25  	    INVOICE_STATUS_ID,
11:21:56  26  	    CREATE_DATE,
11:21:56  27  	    CREATED_BY,
11:21:56  28  	    UPDATE_DATE,
11:21:56  29  	    UPDATED_BY,
11:21:56  30  	    TAX_EXEMPT_ID,
11:21:56  31  	    IS_TAX_CALCULATION_NEEDED
11:21:56  32  	  ) VALUES (
11:21:56  33  	    var_invoice_id,
11:21:56  34  	    in_invoice_status_id,
11:21:56  35  	    var_date,
11:21:56  36  	    in_created_by,
11:21:56  37  	    var_date,
11:21:56  38  	    in_created_by,
11:21:56  39  	    in_tax_exempt_id,
11:21:56  40  	    0 -- DEFAULT VALUE
11:21:56  41  	  );
11:21:56  42  
11:21:56  43  	out_invoice_id := var_invoice_id;
11:21:56  44  END;
11:21:56  45  
11:21:56  46  /*****************************************************************/
11:21:56  47  
11:21:56  48  PROCEDURE UPDATE_INVOICE (
11:21:56  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
11:21:56  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
11:21:56  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
11:21:56  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
11:21:56  53  ) AS
11:21:56  54  BEGIN
11:21:56  55  	-- Create history
11:21:56  56  	PROCS_HISTORY_V15.CREATE_INVOICE_HISTORY(
11:21:56  57  	  in_invoice_id 	       => in_invoice_id,
11:21:56  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:56  59  	);
11:21:56  60  
11:21:56  61  	UPDATE
11:21:56  62  	  INVOICE
11:21:56  63  	SET
11:21:56  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
11:21:56  65  	  UPDATE_DATE		    = SYSDATE,
11:21:56  66  	  UPDATED_BY		    = in_updated_by,
11:21:56  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
11:21:56  68  	WHERE
11:21:56  69  	  ID = in_invoice_id;
11:21:56  70  END;
11:21:56  71  
11:21:56  72  END PROCS_INVOICE_CRU_V15;
11:21:56  73  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:56 SQL> 
11:21:56 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V15" AS
11:21:56   2  
11:21:56   3  PROCEDURE CREATE_RECEIPT(
11:21:56   4  /*
11:21:56   5  Throws exceptions:
11:21:56   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56   7  */
11:21:56   8  	  out_id	      OUT NUMBER,
11:21:56   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:56  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:56  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
11:21:56  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:56  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:56  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:56  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:56  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:56  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:56  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:56  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:56  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
11:21:56  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
11:21:56  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:56  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
11:21:56  24  ) AS
11:21:56  25  -- VARIABLES
11:21:56  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
11:21:56  27  var_current_date	    DATE;
11:21:56  28  var_count 	    NUMBER;
11:21:56  29  ITUNES_ORG_TNX_USED   EXCEPTION;
11:21:56  30  BEGIN
11:21:56  31  	SELECT COUNT(1) into var_count
11:21:56  32  	FROM
11:21:56  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
11:21:56  34  	WHERE
11:21:56  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
11:21:56  36  	  IR.SUBSCRIPTION_ID = S.ID AND
11:21:56  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
11:21:56  38  
11:21:56  39  	if var_count > 0 then
11:21:56  40  	  raise ITUNES_ORG_TNX_USED;
11:21:56  41  	end if;
11:21:56  42  
11:21:56  43  	SELECT
11:21:56  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
11:21:56  45  	INTO
11:21:56  46  	  out_id
11:21:56  47  	FROM
11:21:56  48  	  dual
11:21:56  49  	;
11:21:56  50  
11:21:56  51  	SELECT
11:21:56  52  	  sysdate
11:21:56  53  	INTO
11:21:56  54  	  var_current_date
11:21:56  55  	FROM
11:21:56  56  	  dual
11:21:56  57  	;
11:21:56  58  
11:21:56  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
11:21:56  60  	(
11:21:56  61  	  id,
11:21:56  62  	  subscription_id,
11:21:56  63  	  receipt,
11:21:56  64  	  status,
11:21:56  65  	  quantity,
11:21:56  66  	  product_id,
11:21:56  67  	  transaction_id,
11:21:56  68  	  purchase_date,
11:21:56  69  	  original_transaction_id,
11:21:56  70  	  original_purchase_date,
11:21:56  71  	  app_item_id,
11:21:56  72  	  version_external_id,
11:21:56  73  	  bid,
11:21:56  74  	  bvrs,
11:21:56  75  	  expires_date,
11:21:56  76  	  create_date,
11:21:56  77  	  created_by,
11:21:56  78  	  update_date,
11:21:56  79  	  updated_by,
11:21:56  80  	  last_check_date
11:21:56  81  	)
11:21:56  82  	VALUES
11:21:56  83  	(
11:21:56  84  	  out_id,
11:21:56  85  	  in_subscription_id,
11:21:56  86  	  in_receipt,
11:21:56  87  	  in_status,
11:21:56  88  	  in_quantity,
11:21:56  89  	  in_product_id,
11:21:56  90  	  in_transaction_id,
11:21:56  91  	  in_purchase_date,
11:21:56  92  	  in_original_transaction_id,
11:21:56  93  	  in_original_purchase_date,
11:21:56  94  	  in_app_item_id,
11:21:56  95  	  in_version_external_id,
11:21:56  96  	  in_bid,
11:21:56  97  	  in_bvrs,
11:21:56  98  	  in_expires_date,
11:21:56  99  	  var_current_date,
11:21:56 100  	  in_created_by,
11:21:56 101  	  var_current_date,
11:21:56 102  	  in_created_by,
11:21:56 103  	  var_current_date
11:21:56 104  	);
11:21:56 105  
11:21:56 106  EXCEPTION
11:21:56 107  WHEN ITUNES_ORG_TNX_USED THEN
11:21:56 108  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
11:21:56 110  WHEN DUP_VAL_ON_INDEX THEN
11:21:56 111  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
11:21:56 113  WHEN OTHERS THEN
11:21:56 114  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 116  END CREATE_RECEIPT;
11:21:56 117  
11:21:56 118  PROCEDURE UPDATE_RECEIPT(
11:21:56 119  /*
11:21:56 120  Throws exceptions:
11:21:56 121  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 122  */
11:21:56 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
11:21:56 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:56 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
11:21:56 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:56 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:56 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:56 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:56 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:56 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:56 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:56 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:56 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
11:21:56 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
11:21:56 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:56 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
11:21:56 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
11:21:56 139  ) AS
11:21:56 140  -- VARIABLES
11:21:56 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
11:21:56 142  var_current_date	    DATE;
11:21:56 143  BEGIN
11:21:56 144  
11:21:56 145  	SELECT
11:21:56 146  	  sysdate
11:21:56 147  	INTO
11:21:56 148  	  var_current_date
11:21:56 149  	FROM
11:21:56 150  	  dual
11:21:56 151  	;
11:21:56 152  
11:21:56 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
11:21:56 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ITUNES_RECEIPT_HISTORY
11:21:56 155  	  (
11:21:56 156  	      rec.id,
11:21:56 157  	      rec.subscription_id,
11:21:56 158  	      rec.receipt,
11:21:56 159  	      rec.status,
11:21:56 160  	      rec.quantity,
11:21:56 161  	      rec.product_id,
11:21:56 162  	      rec.transaction_id,
11:21:56 163  	      rec.purchase_date,
11:21:56 164  	      rec.original_transaction_id,
11:21:56 165  	      rec.original_purchase_date,
11:21:56 166  	      rec.app_item_id,
11:21:56 167  	      rec.version_external_id,
11:21:56 168  	      rec.bid,
11:21:56 169  	      rec.bvrs,
11:21:56 170  	      rec.expires_date,
11:21:56 171  	      rec.create_date,
11:21:56 172  	      rec.created_by,
11:21:56 173  	      rec.update_date,
11:21:56 174  	      rec.updated_by,
11:21:56 175  	      rec.last_check_date,
11:21:56 176  	      rec.cancel_date
11:21:56 177  	  );
11:21:56 178  	END LOOP;
11:21:56 179  
11:21:56 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
11:21:56 181  	SET
11:21:56 182  	  receipt = in_receipt,
11:21:56 183  	  status = in_status,
11:21:56 184  	  quantity = in_quantity,
11:21:56 185  	  product_id = in_product_id,
11:21:56 186  	  transaction_id = in_transaction_id,
11:21:56 187  	  purchase_date = in_purchase_date,
11:21:56 188  	  original_transaction_id = in_original_transaction_id,
11:21:56 189  	  original_purchase_date = in_original_purchase_date,
11:21:56 190  	  app_item_id = in_app_item_id,
11:21:56 191  	  version_external_id = in_version_external_id,
11:21:56 192  	  bid = in_bid,
11:21:56 193  	  bvrs = in_bvrs,
11:21:56 194  	  expires_date = in_expires_date,
11:21:56 195  	  update_date = var_current_date,
11:21:56 196  	  updated_by = in_updated_by,
11:21:56 197  	  last_check_date = var_current_date,
11:21:56 198  	  cancel_date = in_cancel_date
11:21:56 199  	WHERE
11:21:56 200  	  id = in_id
11:21:56 201  	;
11:21:56 202  
11:21:56 203  EXCEPTION
11:21:56 204  WHEN DUP_VAL_ON_INDEX THEN
11:21:56 205  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
11:21:56 207  WHEN OTHERS THEN
11:21:56 208  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 210  
11:21:56 211  END UPDATE_RECEIPT;
11:21:56 212  
11:21:56 213  PROCEDURE LINK_ITUNES_RECEIPT(
11:21:56 214  /*
11:21:56 215  Throws exceptions:
11:21:56 216  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 217  */
11:21:56 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
11:21:56 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:56 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
11:21:56 221  ) AS
11:21:56 222  -- VARIABLES
11:21:56 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
11:21:56 224  var_current_date	    DATE;
11:21:56 225  BEGIN
11:21:56 226  
11:21:56 227  	      SELECT
11:21:56 228  	  sysdate
11:21:56 229  	      INTO
11:21:56 230  	  var_current_date
11:21:56 231  	      FROM
11:21:56 232  	  dual
11:21:56 233  	      ;
11:21:56 234  
11:21:56 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
11:21:56 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ITUNES_RECEIPT_HISTORY
11:21:56 237  	      (
11:21:56 238  	    rec.id,
11:21:56 239  	    rec.subscription_id,
11:21:56 240  	    rec.receipt,
11:21:56 241  	    rec.status,
11:21:56 242  	    rec.quantity,
11:21:56 243  	    rec.product_id,
11:21:56 244  	    rec.transaction_id,
11:21:56 245  	    rec.purchase_date,
11:21:56 246  	    rec.original_transaction_id,
11:21:56 247  	    rec.original_purchase_date,
11:21:56 248  	    rec.app_item_id,
11:21:56 249  	    rec.version_external_id,
11:21:56 250  	    rec.bid,
11:21:56 251  	    rec.bvrs,
11:21:56 252  	    rec.expires_date,
11:21:56 253  	    rec.create_date,
11:21:56 254  	    rec.created_by,
11:21:56 255  	    rec.update_date,
11:21:56 256  	    rec.updated_by,
11:21:56 257  	    rec.last_check_date,
11:21:56 258  	    rec.cancel_date
11:21:56 259  	      );
11:21:56 260  	      END LOOP;
11:21:56 261  
11:21:56 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
11:21:56 263  		SET
11:21:56 264  		      subscription_id = in_subscription_id,
11:21:56 265  		      update_date = var_current_date,
11:21:56 266  	      updated_by = in_updated_by,
11:21:56 267  	      last_check_date = var_current_date
11:21:56 268  	      WHERE
11:21:56 269  		  id = in_id
11:21:56 270  	      ;
11:21:56 271  
11:21:56 272  	      EXCEPTION
11:21:56 273  	      WHEN DUP_VAL_ON_INDEX THEN
11:21:56 274  		PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:56 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
11:21:56 276  	      WHEN OTHERS THEN
11:21:56 277  		PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 279  END LINK_ITUNES_RECEIPT;
11:21:56 280  
11:21:56 281  
11:21:56 282  PROCEDURE MARK_RECEIPT_CHECKED(
11:21:56 283  /*
11:21:56 284  Throws exceptions:
11:21:56 285  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:56 286  */
11:21:56 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
11:21:56 288  ) AS
11:21:56 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
11:21:56 290  BEGIN
11:21:56 291  	UPDATE
11:21:56 292  	  CORE_OWNER.ITUNES_RECEIPT
11:21:56 293  	SET
11:21:56 294  	  last_check_date = sysdate
11:21:56 295  	WHERE
11:21:56 296  	  id = in_id
11:21:56 297  	;
11:21:56 298  EXCEPTION
11:21:56 299  WHEN OTHERS THEN
11:21:56 300  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:56 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:56 302  END MARK_RECEIPT_CHECKED;
11:21:56 303  
11:21:56 304  END PROCS_ITUNES_RECEIPT_CRU_V15;
11:21:56 305  .
11:21:56 SQL> /

Package body created.

Elapsed: 00:00:00.08
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_LICENSE(
11:21:57   4  	out_license_id		    OUT LICENSE.ID%TYPE,
11:21:57   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
11:21:57   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
11:21:57   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
11:21:57   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
11:21:57   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
11:21:57  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
11:21:57  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
11:21:57  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
11:21:57  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
11:21:57  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
11:21:57  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
11:21:57  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
11:21:57  17  ) AS
11:21:57  18  -- VARIABLES
11:21:57  19  var_license_id LICENSE.ID%TYPE;
11:21:57  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:57  21  var_date DATE := SYSDATE;
11:21:57  22  BEGIN
11:21:57  23  	IF in_license_id IS NULL THEN
11:21:57  24  	  SELECT
11:21:57  25  	    LCN_ID_SEQ.nextVal into var_license_id
11:21:57  26  	  FROM DUAL;
11:21:57  27  	ELSE
11:21:57  28  	  var_license_id := in_license_id;
11:21:57  29  	END IF;
11:21:57  30  	INSERT INTO
11:21:57  31  	  LICENSE (
11:21:57  32  	    ID,
11:21:57  33  	    LICENSE_STATUS_ID,
11:21:57  34  	    NEEDS_ENTITLEMENTS,
11:21:57  35  	    START_DATE,
11:21:57  36  	    OFFER_ID,
11:21:57  37  	    SUBSCRIPTION_ID,
11:21:57  38  	    INVOICE_ID,
11:21:57  39  	    END_DATE,
11:21:57  40  	    CREATE_DATE,
11:21:57  41  	    CREATED_BY,
11:21:57  42  	    UPDATE_DATE,
11:21:57  43  	    UPDATED_BY,
11:21:57  44  	    IS_EXTENSION,
11:21:57  45  	    CURRENT_OFFER_INDEX,
11:21:57  46  	    CURRENT_OFFER_RECURR_NUM,
11:21:57  47  	    ENTITLEMENT_END_DATE
11:21:57  48  	  ) VALUES (
11:21:57  49  	    var_license_id,
11:21:57  50  	    in_license_status_id,
11:21:57  51  	    in_needs_entitlements,
11:21:57  52  	    in_start_date,
11:21:57  53  	    in_offer_id,
11:21:57  54  	    in_subscription_id,
11:21:57  55  	    in_invoice_id,
11:21:57  56  	    in_end_date,
11:21:57  57  	    var_date,
11:21:57  58  	    in_created_by,
11:21:57  59  	    var_date,
11:21:57  60  	    in_created_by,
11:21:57  61  	    in_is_extension,
11:21:57  62  	    in_current_offer_index,
11:21:57  63  	    in_current_offer_recurr_num,
11:21:57  64  	    in_end_date
11:21:57  65  	  );
11:21:57  66  
11:21:57  67  	out_license_id := var_license_id;
11:21:57  68  END CREATE_LICENSE;
11:21:57  69  
11:21:57  70  /********************************************************************/
11:21:57  71  
11:21:57  72  PROCEDURE UPDATE_LICENSE (
11:21:57  73  	in_license_id		    IN LICENSE.ID%TYPE,
11:21:57  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
11:21:57  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
11:21:57  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
11:21:57  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
11:21:57  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
11:21:57  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
11:21:57  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
11:21:57  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
11:21:57  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL
11:21:57  83  ) AS
11:21:57  84  BEGIN
11:21:57  85  	-- Create history
11:21:57  86  	PROCS_HISTORY_V15.CREATE_LICENSE_HISTORY(
11:21:57  87  	  in_license_id 	       => in_license_id,
11:21:57  88  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57  89  	);
11:21:57  90  
11:21:57  91  	UPDATE
11:21:57  92  	  LICENSE
11:21:57  93  	SET
11:21:57  94  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
11:21:57  95  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
11:21:57  96  	  START_DATE		   = NVL(in_start_date, START_DATE),
11:21:57  97  	  END_DATE		   = NVL(in_end_date, END_DATE),
11:21:57  98  	  UPDATE_DATE		   = SYSDATE,
11:21:57  99  	  UPDATED_BY		   = in_updated_by,
11:21:57 100  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
11:21:57 101  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
11:21:57 102  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
11:21:57 103  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE)
11:21:57 104  	WHERE
11:21:57 105  	  LICENSE.ID = in_license_id;
11:21:57 106  END UPDATE_LICENSE;
11:21:57 107  
11:21:57 108  END PROCS_LICENSE_CRU_V15;
11:21:57 109  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_LINE_ITEM (
11:21:57   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
11:21:57   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
11:21:57   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
11:21:57   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
11:21:57   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
11:21:57   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
11:21:57  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
11:21:57  11  ) AS
11:21:57  12  BEGIN
11:21:57  13  	IF inout_line_item_id IS NULL THEN
11:21:57  14  	  SELECT
11:21:57  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
11:21:57  16  	  FROM DUAL;
11:21:57  17  	END IF;
11:21:57  18  	INSERT INTO LINE_ITEM (
11:21:57  19  	  ID,
11:21:57  20  	  PRODUCT_OFFER_ID,
11:21:57  21  	  INVOICE_ID,
11:21:57  22  	  AMOUNT,
11:21:57  23  	  QUANTITY,
11:21:57  24  	  CREATE_DATE,
11:21:57  25  	  CREATED_BY,
11:21:57  26  	  DISCOUNT_AMOUNT,
11:21:57  27  	  TAXES_AMOUNT
11:21:57  28  	) VALUES (
11:21:57  29  	  inout_line_item_id,
11:21:57  30  	  in_product_offer_id,
11:21:57  31  	  in_invoice_id,
11:21:57  32  	  in_amount,
11:21:57  33  	  1, -- [REVU]: Deprecated. Ignore this field
11:21:57  34  	  SYSDATE,
11:21:57  35  	  in_created_by,
11:21:57  36  	  in_discount_amount,
11:21:57  37  	  in_taxes_amount
11:21:57  38  	);
11:21:57  39  END CREATE_LINE_ITEM;
11:21:57  40  
11:21:57  41  /******************************************************************************/
11:21:57  42  
11:21:57  43  PROCEDURE UPDATE_LINE_ITEM (
11:21:57  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
11:21:57  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
11:21:57  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
11:21:57  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
11:21:57  48  ) AS
11:21:57  49  BEGIN
11:21:57  50  	UPDATE
11:21:57  51  	  LINE_ITEM
11:21:57  52  	SET
11:21:57  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
11:21:57  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
11:21:57  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
11:21:57  56  	WHERE
11:21:57  57  	  LINE_ITEM.ID = in_line_item_id;
11:21:57  58  END UPDATE_LINE_ITEM;
11:21:57  59  
11:21:57  60  /******************************************************************************/
11:21:57  61  
11:21:57  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
11:21:57  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
11:21:57  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
11:21:57  65  ) AS
11:21:57  66  BEGIN
11:21:57  67  	INSERT INTO DISCOUNT_LINE_ITEM(
11:21:57  68  	  DISCOUNT_ID,
11:21:57  69  	  LINE_ITEM_ID
11:21:57  70  	) VALUES (
11:21:57  71  	  in_discount_id,
11:21:57  72  	  in_line_item_id
11:21:57  73  	);
11:21:57  74  END CREATE_DISCOUNT_LINE_ITEM;
11:21:57  75  
11:21:57  76  END PROCS_LINE_ITEMS_CRU_V15;
11:21:57  77  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.03
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
11:21:57   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
11:21:57   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
11:21:57   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
11:21:57   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
11:21:57   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
11:21:57  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
11:21:57  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
11:21:57  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:57  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
11:21:57  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
11:21:57  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
11:21:57  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:57  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:57  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
11:21:57  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
11:21:57  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
11:21:57  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
11:21:57  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
11:21:57  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
11:21:57  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
11:21:57  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
11:21:57  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
11:21:57  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
11:21:57  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
11:21:57  29  ) AS
11:21:57  30  -- VARIABLES
11:21:57  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
11:21:57  32  var_date DATE := SYSDATE;
11:21:57  33  BEGIN
11:21:57  34  	IF in_cpt_chargeback_act_id IS NULL THEN
11:21:57  35  	  SELECT
11:21:57  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
11:21:57  37  	  FROM DUAL;
11:21:57  38  	ELSE
11:21:57  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
11:21:57  40  	END IF;
11:21:57  41  	INSERT INTO
11:21:57  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
11:21:57  43  	    id,
11:21:57  44  	    rcn_ext_source_log_id,
11:21:57  45  	    record_type,
11:21:57  46  	    entity_type,
11:21:57  47  	    entity_number,
11:21:57  48  	    chargeback_amount_issuer,
11:21:57  49  	    prev_partial_representment,
11:21:57  50  	    presentment_currency,
11:21:57  51  	    chargeback_category,
11:21:57  52  	    status_flag,
11:21:57  53  	    sequence_number,
11:21:57  54  	    merchant_order_number,
11:21:57  55  	    account_number,
11:21:57  56  	    reason_code,
11:21:57  57  	    transaction_date,
11:21:57  58  	    chargeback_date,
11:21:57  59  	    activity_date,
11:21:57  60  	    chargeback_amount_action,
11:21:57  61  	    fee_amount,
11:21:57  62  	    usage_code,
11:21:57  63  	    mop_code,
11:21:57  64  	    authorization_date,
11:21:57  65  	    chargeback_due_date,
11:21:57  66  	    create_date,
11:21:57  67  	    created_by
11:21:57  68  	  ) VALUES (
11:21:57  69  	    var_cpt_chargeback_act_id,
11:21:57  70  	    in_ext_source_log_id,
11:21:57  71  	    in_record_type,
11:21:57  72  	    in_entity_type,
11:21:57  73  	    in_entity_number,
11:21:57  74  	    in_chargeback_amount_issuer,
11:21:57  75  	    in_prev_partial_repres,
11:21:57  76  	    in_presentment_currency,
11:21:57  77  	    in_chargeback_category,
11:21:57  78  	    in_status_flag,
11:21:57  79  	    in_sequence_number,
11:21:57  80  	    in_merchant_order_number,
11:21:57  81  	    in_account_number,
11:21:57  82  	    in_reason_code,
11:21:57  83  	    in_transaction_date,
11:21:57  84  	    in_chargeback_date,
11:21:57  85  	    in_activity_date,
11:21:57  86  	    in_chargeback_amount_action,
11:21:57  87  	    in_fee_amount,
11:21:57  88  	    in_usage_code,
11:21:57  89  	    in_mop_code,
11:21:57  90  	    in_authorization_date,
11:21:57  91  	    in_chargeback_due_date,
11:21:57  92  	    var_date,
11:21:57  93  	    in_created_by
11:21:57  94  	  );
11:21:57  95  
11:21:57  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
11:21:57  97  END CREATE_CPT_CHARGEBACK_ACT;
11:21:57  98  
11:21:57  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
11:21:57 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
11:21:57 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
11:21:57 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
11:21:57 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
11:21:57 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
11:21:57 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
11:21:57 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
11:21:57 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
11:21:57 108  ) AS
11:21:57 109  -- VARIABLES
11:21:57 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
11:21:57 111  var_date DATE := SYSDATE;
11:21:57 112  BEGIN
11:21:57 113  	IF in_ext_source_log_id IS NULL THEN
11:21:57 114  	  SELECT
11:21:57 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
11:21:57 116  	  FROM DUAL;
11:21:57 117  	ELSE
11:21:57 118  	  var_ext_source_log_id := in_ext_source_log_id;
11:21:57 119  	END IF;
11:21:57 120  	INSERT INTO
11:21:57 121  	  RCN_EXT_SOURCE_LOG (
11:21:57 122  	    id,
11:21:57 123  	    extraction_timestamp,
11:21:57 124  	    report_date,
11:21:57 125  	    report_generation_datetime,
11:21:57 126  	    record_type,
11:21:57 127  	    report_file_name,
11:21:57 128  	    create_date,
11:21:57 129  	    created_by
11:21:57 130  	  ) VALUES (
11:21:57 131  	    var_ext_source_log_id,
11:21:57 132  	    in_extraction_timestamp,
11:21:57 133  	    in_report_date,
11:21:57 134  	    in_report_gen_datetime,
11:21:57 135  	    in_record_type,
11:21:57 136  	    in_report_file_name,
11:21:57 137  	    var_date,
11:21:57 138  	    in_created_by
11:21:57 139  	  );
11:21:57 140  
11:21:57 141  	out_ext_source_log_id := var_ext_source_log_id;
11:21:57 142  END CREATE_EXT_SOURCE_LOG;
11:21:57 143  
11:21:57 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
11:21:57 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
11:21:57 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
11:21:57 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
11:21:57 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
11:21:57 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
11:21:57 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
11:21:57 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
11:21:57 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
11:21:57 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
11:21:57 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
11:21:57 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
11:21:57 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
11:21:57 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
11:21:57 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
11:21:57 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
11:21:57 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
11:21:57 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
11:21:57 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
11:21:57 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
11:21:57 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
11:21:57 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
11:21:57 167  ) AS
11:21:57 168  -- VARIABLES
11:21:57 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
11:21:57 170  var_date DATE := SYSDATE;
11:21:57 171  BEGIN
11:21:57 172  	IF in_cpt_service_charge_id IS NULL THEN
11:21:57 173  	  SELECT
11:21:57 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
11:21:57 175  	  FROM DUAL;
11:21:57 176  	ELSE
11:21:57 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
11:21:57 178  	END IF;
11:21:57 179  	INSERT INTO
11:21:57 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
11:21:57 181  	    id,
11:21:57 182  	    rcn_ext_source_log_id,
11:21:57 183  	    record_type,
11:21:57 184  	    category,
11:21:57 185  	    sub_category,
11:21:57 186  	    entity_type,
11:21:57 187  	    entity_number,
11:21:57 188  	    funds_transfer_inst_number,
11:21:57 189  	    secure_ba_number,
11:21:57 190  	    settlement_currency,
11:21:57 191  	    fee_schedule,
11:21:57 192  	    mop,
11:21:57 193  	    interchange_qualification,
11:21:57 194  	    fee_type_description,
11:21:57 195  	    action_type,
11:21:57 196  	    unit_quantity,
11:21:57 197  	    unit_fee,
11:21:57 198  	    amount,
11:21:57 199  	    percentage_rate,
11:21:57 200  	    total_charge,
11:21:57 201  	    create_date,
11:21:57 202  	    created_by
11:21:57 203  	  ) VALUES (
11:21:57 204  	    var_cpt_service_charge_id,
11:21:57 205  	    in_ext_source_log_id,
11:21:57 206  	    in_record_type,
11:21:57 207  	    in_category,
11:21:57 208  	    in_sub_category,
11:21:57 209  	    in_entity_type,
11:21:57 210  	    in_entity_number,
11:21:57 211  	    in_funds_trans_inst_number,
11:21:57 212  	    in_secure_ba_number,
11:21:57 213  	    in_settlement_currency,
11:21:57 214  	    in_fee_schedule,
11:21:57 215  	    in_mop,
11:21:57 216  	    in_interchange_qual,
11:21:57 217  	    in_fee_type_description,
11:21:57 218  	    in_action_type,
11:21:57 219  	    in_unit_quantity,
11:21:57 220  	    in_unit_fee,
11:21:57 221  	    in_amount,
11:21:57 222  	    in_percentage_rate,
11:21:57 223  	    in_total_charge,
11:21:57 224  	    var_date,
11:21:57 225  	    in_created_by
11:21:57 226  	  );
11:21:57 227  
11:21:57 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
11:21:57 229  END CREATE_CPT_SERVICE_CHARGE;
11:21:57 230  
11:21:57 231  PROCEDURE CREATE_CPT_EXCEPTION (
11:21:57 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
11:21:57 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
11:21:57 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
11:21:57 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
11:21:57 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
11:21:57 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
11:21:57 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
11:21:57 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
11:21:57 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
11:21:57 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
11:21:57 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:57 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:57 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
11:21:57 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:57 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
11:21:57 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
11:21:57 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
11:21:57 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
11:21:57 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
11:21:57 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
11:21:57 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
11:21:57 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
11:21:57 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
11:21:57 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
11:21:57 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
11:21:57 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
11:21:57 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
11:21:57 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
11:21:57 261  ) AS
11:21:57 262  -- VARIABLES
11:21:57 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
11:21:57 264  var_date DATE := SYSDATE;
11:21:57 265  BEGIN
11:21:57 266  	IF in_cpt_exception_id IS NULL THEN
11:21:57 267  	  SELECT
11:21:57 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
11:21:57 269  	  FROM DUAL;
11:21:57 270  	ELSE
11:21:57 271  	  var_cpt_exception_id := in_cpt_exception_id;
11:21:57 272  	END IF;
11:21:57 273  	INSERT INTO
11:21:57 274  	  RCN_CPT_EXCEPTION_DETAIL (
11:21:57 275  	    id,
11:21:57 276  	    rcn_ext_source_log_id,
11:21:57 277  	    record_type,
11:21:57 278  	    submission_date,
11:21:57 279  	    pid_number,
11:21:57 280  	    pid_short_name,
11:21:57 281  	    submission_number,
11:21:57 282  	    record_number,
11:21:57 283  	    entity_type,
11:21:57 284  	    entity_number,
11:21:57 285  	    presentment_currency,
11:21:57 286  	    merchant_order_number,
11:21:57 287  	    rdfi_number,
11:21:57 288  	    account_number,
11:21:57 289  	    expiration_date,
11:21:57 290  	    amount,
11:21:57 291  	    mop,
11:21:57 292  	    action_code,
11:21:57 293  	    auth_date,
11:21:57 294  	    auth_code,
11:21:57 295  	    auth_response_code,
11:21:57 296  	    trace_number,
11:21:57 297  	    consumer_country_code,
11:21:57 298  	    category,
11:21:57 299  	    mcc,
11:21:57 300  	    reject_code,
11:21:57 301  	    submission_status,
11:21:57 302  	    create_date,
11:21:57 303  	    created_by
11:21:57 304  	  ) VALUES (
11:21:57 305  	    var_cpt_exception_id,
11:21:57 306  	    in_ext_source_log_id,
11:21:57 307  	    in_record_type,
11:21:57 308  	    in_submission_date,
11:21:57 309  	    in_pid_number,
11:21:57 310  	    in_pid_short_name,
11:21:57 311  	    in_submission_number,
11:21:57 312  	    in_record_number,
11:21:57 313  	    in_entity_type,
11:21:57 314  	    in_entity_number,
11:21:57 315  	    in_presentment_currency,
11:21:57 316  	    in_merchant_order_number,
11:21:57 317  	    in_rdfi_number,
11:21:57 318  	    in_account_number,
11:21:57 319  	    in_expiration_date,
11:21:57 320  	    in_amount,
11:21:57 321  	    in_mop,
11:21:57 322  	    in_action_code,
11:21:57 323  	    in_auth_date,
11:21:57 324  	    in_auth_code,
11:21:57 325  	    in_auth_response_code,
11:21:57 326  	    in_trace_number,
11:21:57 327  	    in_consumer_country_code,
11:21:57 328  	    in_category,
11:21:57 329  	    in_mcc,
11:21:57 330  	    in_reject_code,
11:21:57 331  	    in_submission_status,
11:21:57 332  	    var_date,
11:21:57 333  	    in_created_by
11:21:57 334  	  );
11:21:57 335  
11:21:57 336  	out_cpt_exception_id := var_cpt_exception_id;
11:21:57 337  END CREATE_CPT_EXCEPTION;
11:21:57 338  
11:21:57 339  PROCEDURE CREATE_CPT_DEPOSIT (
11:21:57 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
11:21:57 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
11:21:57 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
11:21:57 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
11:21:57 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
11:21:57 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
11:21:57 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
11:21:57 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
11:21:57 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
11:21:57 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
11:21:57 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
11:21:57 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
11:21:57 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
11:21:57 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
11:21:57 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
11:21:57 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
11:21:57 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
11:21:57 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
11:21:57 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
11:21:57 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
11:21:57 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
11:21:57 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
11:21:57 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
11:21:57 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
11:21:57 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
11:21:57 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
11:21:57 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
11:21:57 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
11:21:57 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
11:21:57 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
11:21:57 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
11:21:57 372  ) AS
11:21:57 373  -- VARIABLES
11:21:57 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
11:21:57 375  var_date DATE := SYSDATE;
11:21:57 376  BEGIN
11:21:57 377  	IF in_cpt_deposit_id IS NULL THEN
11:21:57 378  	  SELECT
11:21:57 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
11:21:57 380  	  FROM DUAL;
11:21:57 381  	ELSE
11:21:57 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
11:21:57 383  	END IF;
11:21:57 384  	INSERT INTO
11:21:57 385  	  RCN_CPT_DEPOSIT_DETAIL (
11:21:57 386  	    id,
11:21:57 387  	    rcn_ext_source_log_id,
11:21:57 388  	    record_type,
11:21:57 389  	    submission_date,
11:21:57 390  	    pid_number,
11:21:57 391  	    pid_short_name,
11:21:57 392  	    submission_number,
11:21:57 393  	    record_number,
11:21:57 394  	    entity_type,
11:21:57 395  	    entity_number,
11:21:57 396  	    presentment_currency,
11:21:57 397  	    merchant_order_number,
11:21:57 398  	    rdfi_number,
11:21:57 399  	    account_number,
11:21:57 400  	    expiration_date,
11:21:57 401  	    amount,
11:21:57 402  	    mop,
11:21:57 403  	    action_code,
11:21:57 404  	    auth_date,
11:21:57 405  	    auth_code,
11:21:57 406  	    auth_response_code,
11:21:57 407  	    trace_number,
11:21:57 408  	    consumer_country_code,
11:21:57 409  	    mcc,
11:21:57 410  	    fee_code,
11:21:57 411  	    unit_fee,
11:21:57 412  	    percent_fee,
11:21:57 413  	    total_interchange_fee,
11:21:57 414  	    total_assessment_fee,
11:21:57 415  	    other_fee,
11:21:57 416  	    create_date,
11:21:57 417  	    created_by
11:21:57 418  	  ) VALUES (
11:21:57 419  	    var_cpt_deposit_id,
11:21:57 420  	    in_ext_source_log_id,
11:21:57 421  	    in_record_type,
11:21:57 422  	    in_submission_date,
11:21:57 423  	    in_pid_number,
11:21:57 424  	    in_pid_short_name,
11:21:57 425  	    in_submission_number,
11:21:57 426  	    in_record_number,
11:21:57 427  	    in_entity_type,
11:21:57 428  	    in_entity_number,
11:21:57 429  	    in_presentment_currency,
11:21:57 430  	    in_merchant_order_number,
11:21:57 431  	    in_rdfi_number,
11:21:57 432  	    in_account_number,
11:21:57 433  	    in_expiration_date,
11:21:57 434  	    in_amount,
11:21:57 435  	    in_mop,
11:21:57 436  	    in_action_code,
11:21:57 437  	    in_auth_date,
11:21:57 438  	    in_auth_code,
11:21:57 439  	    in_auth_response_code,
11:21:57 440  	    in_trace_number,
11:21:57 441  	    in_consumer_country_code,
11:21:57 442  	    in_mcc,
11:21:57 443  	    in_fee_code,
11:21:57 444  	    in_unit_fee,
11:21:57 445  	    in_percent_fee,
11:21:57 446  	    in_total_interchange_fee,
11:21:57 447  	    in_total_assessment_fee,
11:21:57 448  	    in_other_fee,
11:21:57 449  	    var_date,
11:21:57 450  	    in_created_by
11:21:57 451  	  );
11:21:57 452  
11:21:57 453  	out_cpt_deposit_id := var_cpt_deposit_id;
11:21:57 454  END CREATE_CPT_DEPOSIT;
11:21:57 455  
11:21:57 456  PROCEDURE CREATE_PP_SETTLEMENT (
11:21:57 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
11:21:57 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
11:21:57 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
11:21:57 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
11:21:57 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
11:21:57 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
11:21:57 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
11:21:57 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
11:21:57 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
11:21:57 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
11:21:57 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
11:21:57 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
11:21:57 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
11:21:57 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
11:21:57 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
11:21:57 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
11:21:57 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
11:21:57 475  ) AS
11:21:57 476  -- VARIABLES
11:21:57 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
11:21:57 478  var_date DATE := SYSDATE;
11:21:57 479  BEGIN
11:21:57 480  	IF in_pp_settlement_id IS NULL THEN
11:21:57 481  	  SELECT
11:21:57 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
11:21:57 483  	  FROM DUAL;
11:21:57 484  	ELSE
11:21:57 485  	  var_pp_settlement_id := in_pp_settlement_id;
11:21:57 486  	END IF;
11:21:57 487  	INSERT INTO
11:21:57 488  	  RCN_PP_SETTLEMENT (
11:21:57 489  	    id,
11:21:57 490  	    rcn_ext_source_log_id,
11:21:57 491  	    transaction_id,
11:21:57 492  	    invoice_id,
11:21:57 493  	    pp_ref_id,
11:21:57 494  	    pp_ref_id_type,
11:21:57 495  	    trans_event_code,
11:21:57 496  	    trans_init_date,
11:21:57 497  	    trans_comp_date,
11:21:57 498  	    trans_deb_or_cred,
11:21:57 499  	    gross_trans_amount,
11:21:57 500  	    gross_trans_currency,
11:21:57 501  	    fee_deb_or_cred,
11:21:57 502  	    fee_amount,
11:21:57 503  	    fee_currency,
11:21:57 504  	    custom_field,
11:21:57 505  	    create_date,
11:21:57 506  	    created_by
11:21:57 507  	  ) VALUES (
11:21:57 508  	    var_pp_settlement_id,
11:21:57 509  	    in_ext_source_log_id,
11:21:57 510  	    in_transaction_id,
11:21:57 511  	    in_invoice_id,
11:21:57 512  	    in_pp_ref_id,
11:21:57 513  	    in_pp_ref_id_type,
11:21:57 514  	    in_trans_event_code,
11:21:57 515  	    in_trans_init_date,
11:21:57 516  	    in_trans_comp_date,
11:21:57 517  	    in_trans_deb_or_cred,
11:21:57 518  	    in_gross_trans_amount,
11:21:57 519  	    in_gross_trans_currency,
11:21:57 520  	    in_fee_deb_or_cred,
11:21:57 521  	    in_fee_amount,
11:21:57 522  	    in_fee_currency,
11:21:57 523  	    in_custom_field,
11:21:57 524  	    var_date,
11:21:57 525  	    in_created_by
11:21:57 526  	  );
11:21:57 527  
11:21:57 528  	out_pp_settlement_id := var_pp_settlement_id;
11:21:57 529  END CREATE_PP_SETTLEMENT;
11:21:57 530  
11:21:57 531  PROCEDURE CREATE_PP_DISPUTE (
11:21:57 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
11:21:57 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
11:21:57 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
11:21:57 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
11:21:57 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
11:21:57 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
11:21:57 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
11:21:57 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
11:21:57 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
11:21:57 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
11:21:57 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
11:21:57 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
11:21:57 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
11:21:57 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
11:21:57 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
11:21:57 548  ) AS
11:21:57 549  -- VARIABLES
11:21:57 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
11:21:57 551  var_date DATE := SYSDATE;
11:21:57 552  BEGIN
11:21:57 553  	IF in_pp_dispute_id IS NULL THEN
11:21:57 554  	  SELECT
11:21:57 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
11:21:57 556  	  FROM DUAL;
11:21:57 557  	ELSE
11:21:57 558  	  var_pp_dispute_id := in_pp_dispute_id;
11:21:57 559  	END IF;
11:21:57 560  	INSERT INTO
11:21:57 561  	  RCN_PP_DISPUTE (
11:21:57 562  	    id,
11:21:57 563  	    rcn_ext_source_log_id,
11:21:57 564  	    dispute_type,
11:21:57 565  	    claimant_name,
11:21:57 566  	    claimant_email,
11:21:57 567  	    transaction_id,
11:21:57 568  	    trans_date,
11:21:57 569  	    disputed_amount,
11:21:57 570  	    disputed_amount_currency,
11:21:57 571  	    dispute_reason,
11:21:57 572  	    dispute_filing_date,
11:21:57 573  	    dispute_status,
11:21:57 574  	    dispute_case_id,
11:21:57 575  	    invoice_id,
11:21:57 576  	    create_date,
11:21:57 577  	    created_by
11:21:57 578  	  ) VALUES (
11:21:57 579  	    var_pp_dispute_id,
11:21:57 580  	    in_ext_source_log_id,
11:21:57 581  	    in_dispute_type,
11:21:57 582  	    in_claimant_name,
11:21:57 583  	    in_claimant_email,
11:21:57 584  	    in_transaction_id,
11:21:57 585  	    in_trans_date,
11:21:57 586  	    in_disputed_amount,
11:21:57 587  	    in_disputed_amount_currency,
11:21:57 588  	    in_dispute_reason,
11:21:57 589  	    in_dispute_filing_date,
11:21:57 590  	    in_dispute_status,
11:21:57 591  	    in_dispute_case_id,
11:21:57 592  	    in_invoice_id,
11:21:57 593  	    var_date,
11:21:57 594  	    in_created_by
11:21:57 595  	  );
11:21:57 596  
11:21:57 597  	out_pp_dispute_id := var_pp_dispute_id;
11:21:57 598  END CREATE_PP_DISPUTE;
11:21:57 599  
11:21:57 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
11:21:57 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
11:21:57 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
11:21:57 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
11:21:57 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
11:21:57 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
11:21:57 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
11:21:57 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
11:21:57 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
11:21:57 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
11:21:57 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
11:21:57 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
11:21:57 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
11:21:57 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
11:21:57 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
11:21:57 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
11:21:57 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
11:21:57 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
11:21:57 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
11:21:57 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
11:21:57 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
11:21:57 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
11:21:57 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
11:21:57 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
11:21:57 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
11:21:57 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
11:21:57 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
11:21:57 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
11:21:57 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
11:21:57 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
11:21:57 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
11:21:57 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
11:21:57 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
11:21:57 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
11:21:57 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
11:21:57 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
11:21:57 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
11:21:57 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
11:21:57 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
11:21:57 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
11:21:57 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
11:21:57 641  ) AS
11:21:57 642  -- VARIABLES
11:21:57 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
11:21:57 644  var_date DATE := SYSDATE;
11:21:57 645  BEGIN
11:21:57 646  	IF in_pp_trans_detail_id IS NULL THEN
11:21:57 647  	  SELECT
11:21:57 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
11:21:57 649  	  FROM DUAL;
11:21:57 650  	ELSE
11:21:57 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
11:21:57 652  	END IF;
11:21:57 653  	INSERT INTO
11:21:57 654  	  RCN_PP_TRANS_DETAIL (
11:21:57 655  	    id,
11:21:57 656  	    rcn_ext_source_log_id,
11:21:57 657  	    transaction_id,
11:21:57 658  	    invoice_id,
11:21:57 659  	    pp_ref_id,
11:21:57 660  	    trans_event_code,
11:21:57 661  	    trans_init_date,
11:21:57 662  	    trans_comp_date,
11:21:57 663  	    trans_deb_or_cred,
11:21:57 664  	    gross_trans_amount,
11:21:57 665  	    gross_trans_currency,
11:21:57 666  	    fee_deb_or_cred,
11:21:57 667  	    fee_amount,
11:21:57 668  	    fee_currency,
11:21:57 669  	    trans_status,
11:21:57 670  	    insurance_amount,
11:21:57 671  	    sales_tax_amount,
11:21:57 672  	    shipping_amount,
11:21:57 673  	    trans_subject,
11:21:57 674  	    trans_note,
11:21:57 675  	    payer_acct_id,
11:21:57 676  	    payer_addr_status,
11:21:57 677  	    item_name,
11:21:57 678  	    item_id,
11:21:57 679  	    option_1_name,
11:21:57 680  	    option_1_value,
11:21:57 681  	    option_2_name,
11:21:57 682  	    option_2_value,
11:21:57 683  	    auction_site,
11:21:57 684  	    auction_buyer_id,
11:21:57 685  	    auction_closing_date,
11:21:57 686  	    shipping_addr_line_1,
11:21:57 687  	    shipping_addr_line_2,
11:21:57 688  	    shipping_addr_city,
11:21:57 689  	    shipping_addr_state,
11:21:57 690  	    shipping_addr_zip,
11:21:57 691  	    shipping_addr_country,
11:21:57 692  	    custom_field,
11:21:57 693  	    create_date,
11:21:57 694  	    created_by
11:21:57 695  	  ) VALUES (
11:21:57 696  	    var_pp_trans_detail_id,
11:21:57 697  	    in_ext_source_log_id,
11:21:57 698  	    in_transaction_id,
11:21:57 699  	    in_invoice_id,
11:21:57 700  	    in_pp_ref_id,
11:21:57 701  	    in_trans_event_code,
11:21:57 702  	    in_trans_init_date,
11:21:57 703  	    in_trans_comp_date,
11:21:57 704  	    in_trans_deb_or_cred,
11:21:57 705  	    in_gross_trans_amount,
11:21:57 706  	    in_gross_trans_currency,
11:21:57 707  	    in_fee_deb_or_cred,
11:21:57 708  	    in_fee_amount,
11:21:57 709  	    in_fee_currency,
11:21:57 710  	    in_trans_status,
11:21:57 711  	    in_insurance_amount,
11:21:57 712  	    in_sales_tax_amount,
11:21:57 713  	    in_shipping_amount,
11:21:57 714  	    in_trans_subject,
11:21:57 715  	    in_trans_note,
11:21:57 716  	    in_payer_acct_id,
11:21:57 717  	    in_payer_addr_status,
11:21:57 718  	    in_item_name,
11:21:57 719  	    in_item_id,
11:21:57 720  	    in_option_1_name,
11:21:57 721  	    in_option_1_value,
11:21:57 722  	    in_option_2_name,
11:21:57 723  	    in_option_2_value,
11:21:57 724  	    in_auction_site,
11:21:57 725  	    in_auction_buyer_id,
11:21:57 726  	    in_auction_closing_date,
11:21:57 727  	    in_shipping_addr_line_1,
11:21:57 728  	    in_shipping_addr_line_2,
11:21:57 729  	    in_shipping_addr_city,
11:21:57 730  	    in_shipping_addr_state,
11:21:57 731  	    in_shipping_addr_zip,
11:21:57 732  	    in_shipping_addr_country,
11:21:57 733  	    in_custom_field,
11:21:57 734  	    var_date,
11:21:57 735  	    in_created_by
11:21:57 736  	  );
11:21:57 737  
11:21:57 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
11:21:57 739  END CREATE_PP_TRANS_DETAIL;
11:21:57 740  
11:21:57 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
11:21:57 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
11:21:57 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
11:21:57 744  ) AS
11:21:57 745  BEGIN
11:21:57 746  	DELETE FROM
11:21:57 747  	  RCN_EXT_SOURCE_LOG
11:21:57 748  	WHERE
11:21:57 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
11:21:57 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
11:21:57 751  END DELETE_EXT_SOURCE_LOG;
11:21:57 752  
11:21:57 753  PROCEDURE GET_EXT_SOURCE_LOG (
11:21:57 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
11:21:57 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
11:21:57 756  	out_result_set		 OUT SYS_REFCURSOR
11:21:57 757  ) AS
11:21:57 758  BEGIN
11:21:57 759  	OPEN out_result_set FOR
11:21:57 760  	SELECT * FROM
11:21:57 761  	  RCN_EXT_SOURCE_LOG
11:21:57 762  	WHERE
11:21:57 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
11:21:57 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
11:21:57 765  END GET_EXT_SOURCE_LOG;
11:21:57 766  
11:21:57 767  END PROCS_RECONCILIATION_CRU_V15;
11:21:57 768  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_SUBSCRIPTION(
11:21:57   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
11:21:57   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
11:21:57   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:57   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
11:21:57   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
11:21:57   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
11:21:57  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
11:21:57  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
11:21:57  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
11:21:57  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
11:21:57  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
11:21:57  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
11:21:57  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
11:21:57  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
11:21:57  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
11:21:57  19  ) AS
11:21:57  20  -- VARIABLES
11:21:57  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
11:21:57  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:57  23  var_date DATE := SYSDATE;
11:21:57  24  BEGIN
11:21:57  25  	IF in_subscription_id IS NULL THEN
11:21:57  26  	  SELECT
11:21:57  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
11:21:57  28  	  FROM DUAL;
11:21:57  29  	ELSE
11:21:57  30  	  var_new_subscription_id := in_subscription_id;
11:21:57  31  	END IF;
11:21:57  32  	INSERT INTO SUBSCRIPTION (
11:21:57  33  	  ID,
11:21:57  34  	  SUSPEND_DATE,
11:21:57  35  	  ACCOUNT_ID,
11:21:57  36  	  PURCHASE_DATE,
11:21:57  37  	  OFFER_CHAIN_ID,
11:21:57  38  	  TERMINATION_DATE,
11:21:57  39  	  DAYS_REMAINING_ADJUSTMENT,
11:21:57  40  	  SCT_ID,
11:21:57  41  	  CREATE_DATE,
11:21:57  42  	  CREATED_BY,
11:21:57  43  	  UPDATE_DATE,
11:21:57  44  	  UPDATED_BY,
11:21:57  45  	  INSTRUMENT_TYPE_ID,
11:21:57  46  	  INSTRUMENT_ID,
11:21:57  47  	  SUBSCRIPTION_STATUS_ID,
11:21:57  48  	  CANCELLATION_DATE,
11:21:57  49  	  REACTIVATION_DATE
11:21:57  50  	) VALUES (
11:21:57  51  	  var_new_subscription_id,
11:21:57  52  	  in_suspend_date,
11:21:57  53  	  in_account_id,
11:21:57  54  	  in_purchase_date,
11:21:57  55  	  in_offer_chain_id,
11:21:57  56  	  in_termination_date,
11:21:57  57  	  in_days_remainning_ajustment,
11:21:57  58  	  in_sct_id,
11:21:57  59  	  var_date,
11:21:57  60  	  in_created_by,
11:21:57  61  	  var_date,
11:21:57  62  	  in_created_by,
11:21:57  63  	  in_instrument_type_id,
11:21:57  64  	  in_instrument_id,
11:21:57  65  	  in_subscription_status_id,
11:21:57  66  	  in_cancelation_date,
11:21:57  67  	  in_reactivation_date
11:21:57  68  	);
11:21:57  69  
11:21:57  70  	out_subscription_id := var_new_subscription_id;
11:21:57  71  END CREATE_SUBSCRIPTION;
11:21:57  72  
11:21:57  73  /******************************************************************************/
11:21:57  74  
11:21:57  75  PROCEDURE UPDATE_SUBSCRIPTION(
11:21:57  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
11:21:57  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
11:21:57  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
11:21:57  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
11:21:57  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
11:21:57  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
11:21:57  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
11:21:57  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
11:21:57  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
11:21:57  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
11:21:57  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
11:21:57  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
11:21:57  88  ) AS
11:21:57  89  BEGIN
11:21:57  90  	-- Create history
11:21:57  91  	PROCS_HISTORY_V15.CREATE_SUBSCRIPTION_HISTORY(
11:21:57  92  	  in_subscription_id	       => in_subscription_id,
11:21:57  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57  94  	);
11:21:57  95  
11:21:57  96  	UPDATE SUBSCRIPTION SET
11:21:57  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
11:21:57  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
11:21:57  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
11:21:57 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
11:21:57 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
11:21:57 102  	  UPDATE_DATE		    = SYSDATE,
11:21:57 103  	  UPDATED_BY		    = in_updated_by,
11:21:57 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
11:21:57 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
11:21:57 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
11:21:57 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
11:21:57 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
11:21:57 109  	WHERE
11:21:57 110  	  ID = in_subscription_id;
11:21:57 111  END UPDATE_SUBSCRIPTION;
11:21:57 112  
11:21:57 113  /******************************************************************************/
11:21:57 114  
11:21:57 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
11:21:57 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
11:21:57 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:57 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
11:21:57 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:57 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
11:21:57 121  ) AS
11:21:57 122  BEGIN
11:21:57 123  	IF inout_subscription_note_id IS NULL THEN
11:21:57 124  	  SELECT
11:21:57 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
11:21:57 126  	  FROM DUAL;
11:21:57 127  	END IF;
11:21:57 128  	INSERT INTO SUBSCRIPTION_NOTE (
11:21:57 129  	  ID,
11:21:57 130  	  AGENT_ID,
11:21:57 131  	  SUBSCRIPTION_ID,
11:21:57 132  	  NOTE,
11:21:57 133  	  CREATE_DATE,
11:21:57 134  	  CREATED_BY
11:21:57 135  	) VALUES (
11:21:57 136  	  inout_subscription_note_id,
11:21:57 137  	  in_agent_id,
11:21:57 138  	  in_subscription_id,
11:21:57 139  	  in_note,
11:21:57 140  	  SYSDATE,
11:21:57 141  	  in_created_by
11:21:57 142  	);
11:21:57 143  END CREATE_SUBSCRIPTION_NOTE;
11:21:57 144  
11:21:57 145  END PROCS_SUBSCRIPTION_CRU_V15;
11:21:57 146  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_TAX (
11:21:57   4  	inout_tax_id		 IN OUT NUMBER,
11:21:57   5  	in_tax_type_id		 IN NUMBER,
11:21:57   6  	in_calculated_amount	 IN NUMBER,
11:21:57   7  	in_created_by		 IN VARCHAR2,
11:21:57   8  	in_line_item_id 	 IN NUMBER,
11:21:57   9  	in_effective_rate	 IN VARCHAR2,
11:21:57  10  	in_taxable_amount	 IN NUMBER,
11:21:57  11  	in_tax_rule_id		 IN NUMBER,
11:21:57  12  	in_jurisdiction_level_id IN NUMBER,
11:21:57  13  	in_jurisdiction_name	 IN VARCHAR2,
11:21:57  14  	in_jurisdiction_id	 IN VARCHAR2,
11:21:57  15  	in_ext_tax_type 	 IN VARCHAR2,
11:21:57  16  	in_ext_result		 IN VARCHAR2,
11:21:57  17  	in_imposition_type	 IN VARCHAR2,
11:21:57  18  	in_imposition		 IN VARCHAR2
11:21:57  19  ) AS
11:21:57  20  var_date DATE := SYSDATE;
11:21:57  21  BEGIN
11:21:57  22  
11:21:57  23  	IF inout_tax_id IS NULL THEN
11:21:57  24  	  SELECT
11:21:57  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
11:21:57  26  	  FROM DUAL;
11:21:57  27  	END IF;
11:21:57  28  
11:21:57  29  	INSERT INTO TAX (
11:21:57  30  	  ID,
11:21:57  31  	  TAX_TYPE_ID,
11:21:57  32  	  CALCULATED_AMOUNT,
11:21:57  33  	  CREATE_DATE,
11:21:57  34  	  CREATED_BY,
11:21:57  35  	  LINE_ITEM_ID,
11:21:57  36  	  EFFECTIVE_RATE,
11:21:57  37  	  TAXABLE_AMOUNT,
11:21:57  38  	  TAX_RULE_ID,
11:21:57  39  	  JURISDICTION_LEVEL_ID,
11:21:57  40  	  JURISDICTION_NAME,
11:21:57  41  	  JURISDICTION_ID,
11:21:57  42  	  EXT_TAX_TYPE,
11:21:57  43  	  EXT_RESULT,
11:21:57  44  	  IMPOSITION_TYPE,
11:21:57  45  	  IMPOSITION
11:21:57  46  	) VALUES (
11:21:57  47  	  inout_tax_id,
11:21:57  48  	  in_tax_type_id,
11:21:57  49  	  in_calculated_amount,
11:21:57  50  	  var_date,
11:21:57  51  	  in_created_by,
11:21:57  52  	  in_line_item_id,
11:21:57  53  	  in_effective_rate,
11:21:57  54  	  in_taxable_amount,
11:21:57  55  	  in_tax_rule_id,
11:21:57  56  	  in_jurisdiction_level_id,
11:21:57  57  	  in_jurisdiction_name,
11:21:57  58  	  in_jurisdiction_id,
11:21:57  59  	  in_ext_tax_type,
11:21:57  60  	  in_ext_result,
11:21:57  61  	  in_imposition_type,
11:21:57  62  	  in_imposition
11:21:57  63  	);
11:21:57  64  
11:21:57  65  END CREATE_TAX;
11:21:57  66  
11:21:57  67  END PROCS_TAXES_CRU_V15;
11:21:57  68  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_TRANSACTION (
11:21:57   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
11:21:57   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
11:21:57   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
11:21:57   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
11:21:57   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
11:21:57   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
11:21:57  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:57  11  ) AS
11:21:57  12  -- VARIABLES
11:21:57  13  var_transaction_id TRANSACTION.ID%TYPE;
11:21:57  14  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:57  15  var_date DATE := SYSDATE;
11:21:57  16  BEGIN
11:21:57  17  	IF in_transaction_id IS NULL THEN
11:21:57  18  	  SELECT
11:21:57  19  	    TRN_ID_SEQ.nextVal into var_transaction_id
11:21:57  20  	  FROM DUAL;
11:21:57  21  	ELSE
11:21:57  22  	  var_transaction_id := in_transaction_id;
11:21:57  23  	END IF;
11:21:57  24  	INSERT INTO
11:21:57  25  	  TRANSACTION (
11:21:57  26  	    ID,
11:21:57  27  	    TRANSACTION_STATUS_ID,
11:21:57  28  	    TRANSACTION_AMOUNT,
11:21:57  29  	    CREATE_DATE,
11:21:57  30  	    CREATED_BY,
11:21:57  31  	    UPDATE_DATE,
11:21:57  32  	    UPDATED_BY,
11:21:57  33  	    ORDER_ID,
11:21:57  34  	    IS_REFUND
11:21:57  35  	  ) VALUES (
11:21:57  36  	    var_transaction_id,
11:21:57  37  	    in_transaction_status_id,
11:21:57  38  	    in_transaction_amount,
11:21:57  39  	    var_date,
11:21:57  40  	    in_created_by,
11:21:57  41  	    var_date,
11:21:57  42  	    in_created_by,
11:21:57  43  	    in_order_id,
11:21:57  44  	    in_is_refund
11:21:57  45  	  );
11:21:57  46  
11:21:57  47  	out_transaction_id := var_transaction_id;
11:21:57  48  END CREATE_TRANSACTION;
11:21:57  49  
11:21:57  50  /*******************************************************************/
11:21:57  51  
11:21:57  52  PROCEDURE UPDATE_TRANSACTION (
11:21:57  53  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
11:21:57  54  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
11:21:57  55  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
11:21:57  56  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
11:21:57  57  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
11:21:57  58  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
11:21:57  59  ) AS
11:21:57  60  BEGIN
11:21:57  61  	-- Create history
11:21:57  62  	PROCS_HISTORY_V15.CREATE_TRANSACTION_HISTORY(
11:21:57  63  	  in_transaction_id	       => in_transaction_id,
11:21:57  64  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57  65  	);
11:21:57  66  	UPDATE
11:21:57  67  	  TRANSACTION
11:21:57  68  	SET
11:21:57  69  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
11:21:57  70  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
11:21:57  71  	  UPDATE_DATE		= SYSDATE,
11:21:57  72  	  UPDATED_BY		= in_updated_by,
11:21:57  73  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
11:21:57  74  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
11:21:57  75  	WHERE
11:21:57  76  	  ID = in_transaction_id;
11:21:57  77  END UPDATE_TRANSACTION;
11:21:57  78  
11:21:57  79  /*******************************************************************/
11:21:57  80  
11:21:57  81  PROCEDURE READ_TRANSACTION (
11:21:57  82  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:57  83  	out_result_set	  OUT SYS_REFCURSOR
11:21:57  84  ) AS
11:21:57  85  BEGIN
11:21:57  86  	OPEN out_result_set FOR
11:21:57  87  	SELECT
11:21:57  88  	  ID,
11:21:57  89  	  TRANSACTION_STATUS_ID,
11:21:57  90  	  TRANSACTION_AMOUNT,
11:21:57  91  	  CREATE_DATE,
11:21:57  92  	  CREATED_BY,
11:21:57  93  	  UPDATE_DATE,
11:21:57  94  	  UPDATED_BY,
11:21:57  95  	  ORDER_ID,
11:21:57  96  	  IS_REFUND,
11:21:57  97  	  IS_SETTLED
11:21:57  98  	FROM
11:21:57  99  	  TRANSACTION
11:21:57 100  	WHERE
11:21:57 101  	  ID = in_transaction_id;
11:21:57 102  END READ_TRANSACTION;
11:21:57 103  
11:21:57 104  /*******************************************************************/
11:21:57 105  
11:21:57 106  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
11:21:57 107  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
11:21:57 108  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
11:21:57 109  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
11:21:57 110  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:57 111  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
11:21:57 112  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:57 113  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
11:21:57 114  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
11:21:57 115  ) AS
11:21:57 116  BEGIN
11:21:57 117  	IF inout_transaction_attempt_id IS NULL THEN
11:21:57 118  	  SELECT
11:21:57 119  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
11:21:57 120  	  FROM DUAL;
11:21:57 121  	END IF;
11:21:57 122  	INSERT INTO TRANSACTION_ATTEMPT (
11:21:57 123  	  ID,
11:21:57 124  	  TRANSACTION_ID,
11:21:57 125  	  EXTERNAL_STATUS_CODE,
11:21:57 126  	  EXTERNAL_STATUS_MESSAGE,
11:21:57 127  	  CREATE_DATE,
11:21:57 128  	  CREATED_BY,
11:21:57 129  	  EXTERNAL_TRANSACTION_ID,
11:21:57 130  	  TRANSACTION_START_TIME,
11:21:57 131  	  TRANSACTION_ATTEMPT_STATUS_ID
11:21:57 132  	) VALUES (
11:21:57 133  	  inout_transaction_attempt_id,
11:21:57 134  	  in_transaction_id,
11:21:57 135  	  in_external_status_code,
11:21:57 136  	  in_external_status_message,
11:21:57 137  	  SYSDATE,
11:21:57 138  	  in_created_by,
11:21:57 139  	  in_external_transaction_id,
11:21:57 140  	  in_transaction_start_time,
11:21:57 141  	  in_status_id
11:21:57 142  	);
11:21:57 143  END;
11:21:57 144  
11:21:57 145  /*******************************************************************/
11:21:57 146  
11:21:57 147  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
11:21:57 148  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
11:21:57 149  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
11:21:57 150  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:57 151  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
11:21:57 152  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
11:21:57 153  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
11:21:57 154  ) AS
11:21:57 155  BEGIN
11:21:57 156  	UPDATE
11:21:57 157  	  TRANSACTION_ATTEMPT
11:21:57 158  	SET
11:21:57 159  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
11:21:57 160  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
11:21:57 161  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
11:21:57 162  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
11:21:57 163  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
11:21:57 164  	WHERE
11:21:57 165  	  ID = in_transaction_attempt_id;
11:21:57 166  END;
11:21:57 167  
11:21:57 168  /*******************************************************************/
11:21:57 169  
11:21:57 170  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:57 171  /*
11:21:57 172  Throws exceptions:
11:21:57 173  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 174  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:57 175  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 176  */
11:21:57 177  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:57 178  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:57 179  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:57 180  ) AS
11:21:57 181  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
11:21:57 182  -- EXCEPTIONS
11:21:57 183  BAD_TRANSACTION_ID EXCEPTION;
11:21:57 184  BEGIN
11:21:57 185  
11:21:57 186  	PROCS_HISTORY_V15.CREATE_TRANSACTION_HISTORY(
11:21:57 187  	  in_transaction_id	       => in_transaction_id,
11:21:57 188  	  in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57 189  	);
11:21:57 190  
11:21:57 191  	UPDATE
11:21:57 192  	  TRANSACTION
11:21:57 193  	SET
11:21:57 194  	  TRANSACTION.ORDER_ID	 = in_order_id,
11:21:57 195  	  TRANSACTION.UPDATED_BY = in_updated_by,
11:21:57 196  	  TRANSACTION.UPDATE_DATE= SYSDATE
11:21:57 197  	WHERE
11:21:57 198  	  TRANSACTION.ID = in_transaction_id
11:21:57 199  	  AND TRANSACTION.ORDER_ID IS NULL;
11:21:57 200  
11:21:57 201  	IF SQL%ROWCOUNT = 0 THEN
11:21:57 202  	  RAISE BAD_TRANSACTION_ID;
11:21:57 203  	END IF;
11:21:57 204  EXCEPTION
11:21:57 205  WHEN BAD_TRANSACTION_ID THEN
11:21:57 206  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 207  	  SPROC_NAME, 'No such transaction');
11:21:57 208  END UPDATE_TRANSACTION_ORDER_ID;
11:21:57 209  
11:21:57 210  END PROCS_TRANSACTION_CRU_V15;
11:21:57 211  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.03
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_ADDRESS(
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   7  */
11:21:57   8  	  out_address_id	OUT NUMBER,
11:21:57   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:57  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:57  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:57  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:57  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:57  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:57  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
11:21:57  16  ) AS
11:21:57  17  -- VARIABLES
11:21:57  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
11:21:57  19  -- EXCEPTIONS
11:21:57  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57  21  BEGIN
11:21:57  22  
11:21:57  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V15.CREATE_ADDRESS(
11:21:57  24  	  out_address_id      => out_address_id,
11:21:57  25  	  in_address_id       => null,
11:21:57  26  	  in_address1	      => in_address1,
11:21:57  27  	  in_address2	      => in_address2,
11:21:57  28  	  in_city	      => in_city,
11:21:57  29  	  in_state	      => in_state,
11:21:57  30  	  in_postal_code      => in_postal_code,
11:21:57  31  	  in_country	      => in_country,
11:21:57  32  	  in_created_by       => in_created_by
11:21:57  33  	);
11:21:57  34  
11:21:57  35  END CREATE_ADDRESS;
11:21:57  36  
11:21:57  37  PROCEDURE UPDATE_ADDRESS(
11:21:57  38  /*
11:21:57  39  Throws exceptions:
11:21:57  40  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  41  */
11:21:57  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
11:21:57  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
11:21:57  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
11:21:57  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
11:21:57  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
11:21:57  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:57  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
11:21:57  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
11:21:57  50  ) AS
11:21:57  51  BEGIN
11:21:57  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V15.UPDATE_ADDRESS(
11:21:57  53  	  in_address_id 	=> in_address_id,
11:21:57  54  	  in_address1		=> in_address1,
11:21:57  55  	  in_address2		=> in_address2,
11:21:57  56  	  in_city		=> in_city,
11:21:57  57  	  in_state		=> in_state,
11:21:57  58  	  in_postal_code	=> in_postal_code,
11:21:57  59  	  in_country		=> in_country,
11:21:57  60  	  in_updated_by 	=> in_updated_by
11:21:57  61  	);
11:21:57  62  END UPDATE_ADDRESS;
11:21:57  63  
11:21:57  64  PROCEDURE GET_ADDRESS (
11:21:57  65  /*
11:21:57  66  Throws exceptions:
11:21:57  67  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  68  */
11:21:57  69  	  in_id 		IN ADDRESS.ID%TYPE,
11:21:57  70  	  out_result_set	OUT SYS_REFCURSOR
11:21:57  71  ) AS
11:21:57  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
11:21:57  73  BEGIN
11:21:57  74  
11:21:57  75  OPEN out_result_set FOR
11:21:57  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
11:21:57  77  
11:21:57  78  END GET_ADDRESS;
11:21:57  79  
11:21:57  80  END PROCS_ADDRESS_V15;
11:21:57  81  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.01
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
11:21:57   4  	in_invoice_id		  IN NUMBER,
11:21:57   5  	in_adjustment_reason	  IN VARCHAR2,
11:21:57   6  	in_is_credit		  IN NUMBER,
11:21:57   7  	in_charge_id		  IN NUMBER,
11:21:57   8  	in_business_date	  IN DATE,
11:21:57   9  	in_created_by		  IN VARCHAR2,
11:21:57  10  	out_invoice_adjustment_id OUT NUMBER
11:21:57  11  ) AS
11:21:57  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
11:21:57  13  -- VARIABLES
11:21:57  14  var_current_date	    DATE := SYSDATE;
11:21:57  15  var_new_entity_id     NUMBER;
11:21:57  16  var_inv_adj_reason_id NUMBER;
11:21:57  17  -- EXCEPTIONS
11:21:57  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
11:21:57  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
11:21:57  20  BEGIN
11:21:57  21  
11:21:57  22  	IF in_is_credit != GLOBAL_CONSTANTS_V15.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:57  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
11:21:57  24  	END IF;
11:21:57  25  
11:21:57  26  	BEGIN
11:21:57  27  	  SELECT
11:21:57  28  	    ID into var_inv_adj_reason_id
11:21:57  29  	  FROM
11:21:57  30  	    INVOICE_ADJUSTMENT_REASON
11:21:57  31  	  WHERE
11:21:57  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
11:21:57  33  	  EXCEPTION
11:21:57  34  	    WHEN NO_DATA_FOUND THEN
11:21:57  35  	      RAISE DAB_ADJUSTMENT_REASON;
11:21:57  36  	END;
11:21:57  37  
11:21:57  38  	SELECT
11:21:57  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
11:21:57  40  	FROM
11:21:57  41  	  DUAL;
11:21:57  42  
11:21:57  43  	INSERT INTO INVOICE_ADJUSTMENT (
11:21:57  44  	  ID,
11:21:57  45  	  INVOICE_ID,
11:21:57  46  	  INVOICE_ADJUSTMENT_REASON_ID,
11:21:57  47  	  IS_CREDIT,
11:21:57  48  	  CHARGE_ID,
11:21:57  49  	  ADJUSTMENT_DATE,
11:21:57  50  	  CREATE_DATE,
11:21:57  51  	  CREATED_BY
11:21:57  52  	)
11:21:57  53  	VALUES (
11:21:57  54  	  var_new_entity_id,
11:21:57  55  	  in_invoice_id,
11:21:57  56  	  var_inv_adj_reason_id,
11:21:57  57  	  in_is_credit,
11:21:57  58  	  in_charge_id,
11:21:57  59  	  in_business_date,
11:21:57  60  	  var_current_date,
11:21:57  61  	  in_created_by
11:21:57  62  	);
11:21:57  63  
11:21:57  64  	out_invoice_adjustment_id := var_new_entity_id;
11:21:57  65  
11:21:57  66  EXCEPTION
11:21:57  67  WHEN BAD_IN_IS_CREDIT_VALUE THEN
11:21:57  68  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57  69  	  SPROC_NAME, 'Bad in_is_credit value');
11:21:57  70  WHEN DAB_ADJUSTMENT_REASON THEN
11:21:57  71  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57  72  	  SPROC_NAME, 'Bad adjustment reason');
11:21:57  73  WHEN OTHERS THEN
11:21:57  74  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  75  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  76  END CREATE_INVOICE_ADJUSTMENT;
11:21:57  77  
11:21:57  78  /******************************************************************************/
11:21:57  79  
11:21:57  80  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
11:21:57  81  	in_line_item_id 	    IN NUMBER,
11:21:57  82  	in_invoice_adjustment_id    IN NUMBER,
11:21:57  83  	in_amount		    IN NUMBER,
11:21:57  84  	in_tax			    IN NUMBER,
11:21:57  85  	in_discount		    IN NUMBER,
11:21:57  86  	in_created_by		    IN VARCHAR2,
11:21:57  87  	out_line_item_adjustment_id OUT NUMBER
11:21:57  88  ) AS
11:21:57  89  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
11:21:57  90  -- VARIABLES
11:21:57  91  var_current_date DATE := SYSDATE;
11:21:57  92  var_new_entity_id NUMBER;
11:21:57  93  BEGIN
11:21:57  94  
11:21:57  95  	SELECT
11:21:57  96  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
11:21:57  97  	FROM
11:21:57  98  	  DUAL;
11:21:57  99  
11:21:57 100  	INSERT INTO LINE_ITEM_ADJUSTMENT (
11:21:57 101  	  ID,
11:21:57 102  	  LINE_ITEM_ID,
11:21:57 103  	  INVOICE_ADJUSTMENT_ID,
11:21:57 104  	  AMOUNT,
11:21:57 105  	  TAX,
11:21:57 106  	  DISCOUNT,
11:21:57 107  	  CREATE_DATE,
11:21:57 108  	  CREATED_BY
11:21:57 109  	)
11:21:57 110  	VALUES (
11:21:57 111  	  var_new_entity_id,
11:21:57 112  	  in_line_item_id,
11:21:57 113  	  in_invoice_adjustment_id,
11:21:57 114  	  in_amount,
11:21:57 115  	  in_tax,
11:21:57 116  	  in_discount,
11:21:57 117  	  var_current_date,
11:21:57 118  	  in_created_by
11:21:57 119  	);
11:21:57 120  
11:21:57 121  	out_line_item_adjustment_id := var_new_entity_id;
11:21:57 122  
11:21:57 123  EXCEPTION
11:21:57 124  WHEN OTHERS THEN
11:21:57 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 127  END CREATE_LINE_ITEM_ADJUSTMENT;
11:21:57 128  
11:21:57 129  /******************************************************************************/
11:21:57 130  
11:21:57 131  PROCEDURE CREATE_TAX_ADJUSTMENT (
11:21:57 132  	in_tax_id		   IN NUMBER,
11:21:57 133  	in_line_item_adjustment_id IN NUMBER,
11:21:57 134  	in_amount		   IN NUMBER,
11:21:57 135  	in_created_by		   IN VARCHAR2,
11:21:57 136  	out_tax_adjustment_id	   OUT NUMBER
11:21:57 137  ) AS
11:21:57 138  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
11:21:57 139  -- VARIABLES
11:21:57 140  var_current_date DATE := SYSDATE;
11:21:57 141  var_new_entity_id NUMBER;
11:21:57 142  BEGIN
11:21:57 143  
11:21:57 144  	SELECT
11:21:57 145  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
11:21:57 146  	FROM
11:21:57 147  	  DUAL;
11:21:57 148  
11:21:57 149  	INSERT INTO TAX_ADJUSTMENT (
11:21:57 150  	  ID,
11:21:57 151  	  TAX_ID,
11:21:57 152  	  LINE_ITEM_ADJUSTMENT_ID,
11:21:57 153  	  AMOUNT,
11:21:57 154  	  CREATE_DATE,
11:21:57 155  	  CREATED_BY
11:21:57 156  	)
11:21:57 157  	VALUES (
11:21:57 158  	  var_new_entity_id,
11:21:57 159  	  in_tax_id,
11:21:57 160  	  in_line_item_adjustment_id,
11:21:57 161  	  in_amount,
11:21:57 162  	  var_current_date,
11:21:57 163  	  in_created_by
11:21:57 164  	);
11:21:57 165  
11:21:57 166  	out_tax_adjustment_id := var_new_entity_id;
11:21:57 167  
11:21:57 168  EXCEPTION
11:21:57 169  WHEN OTHERS THEN
11:21:57 170  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 171  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 172  END CREATE_TAX_ADJUSTMENT;
11:21:57 173  
11:21:57 174  /******************************************************************************/
11:21:57 175  
11:21:57 176  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
11:21:57 177  	in_discount_id		   NUMBER,
11:21:57 178  	in_line_item_id 	   NUMBER,
11:21:57 179  	in_line_item_adjustment_id IN NUMBER,
11:21:57 180  	in_amount		   IN NUMBER,
11:21:57 181  	in_created_by		   IN VARCHAR2,
11:21:57 182  	out_discount_li_id	   OUT NUMBER
11:21:57 183  ) AS
11:21:57 184  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
11:21:57 185  -- VARIABLES
11:21:57 186  var_current_date DATE := SYSDATE;
11:21:57 187  var_new_entity_id NUMBER;
11:21:57 188  BEGIN
11:21:57 189  
11:21:57 190  	SELECT
11:21:57 191  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
11:21:57 192  	FROM
11:21:57 193  	  DUAL;
11:21:57 194  
11:21:57 195  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
11:21:57 196  	  ID,
11:21:57 197  	  DISCOUNT_ID,
11:21:57 198  	  LINE_ITEM_ID,
11:21:57 199  	  LINE_ITEM_ADJUSTMENT_ID,
11:21:57 200  	  AMOUNT,
11:21:57 201  	  CREATE_DATE,
11:21:57 202  	  CREATED_BY
11:21:57 203  	)
11:21:57 204  	VALUES (
11:21:57 205  	  var_new_entity_id,
11:21:57 206  	  in_discount_id,
11:21:57 207  	  in_line_item_id,
11:21:57 208  	  in_line_item_adjustment_id,
11:21:57 209  	  in_amount,
11:21:57 210  	  var_current_date,
11:21:57 211  	  in_created_by
11:21:57 212  	);
11:21:57 213  
11:21:57 214  	out_discount_li_id := var_new_entity_id;
11:21:57 215  
11:21:57 216  EXCEPTION
11:21:57 217  WHEN OTHERS THEN
11:21:57 218  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 219  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 220  END CREATE_DISCOUNT_LI_ADJUSTMENT;
11:21:57 221  
11:21:57 222  END PROCS_ADJUSTMENTS_V15;
11:21:57 223  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE GET_SUB_ADX_INFO (
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   7  */
11:21:57   8  	out_result_set	    OUT SYS_REFCURSOR,
11:21:57   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
11:21:57  10  ) AS
11:21:57  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
11:21:57  12  BEGIN
11:21:57  13  OPEN out_result_set FOR
11:21:57  14  SELECT /*+ FIRST_ROWS(5) */
11:21:57  15  	s.offer_chain_id,
11:21:57  16  	s.create_date,
11:21:57  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
11:21:57  18  	ocmd.value,
11:21:57  19  	a.group_id,
11:21:57  20  	s.id subscription_id
11:21:57  21  FROM
11:21:57  22  	account a,
11:21:57  23  	subscription s,
11:21:57  24  	offer_chain_meta_data ocmd,
11:21:57  25  	group_account g,
11:21:57  26  	subscription_share ss,
11:21:57  27  	account a2
11:21:57  28  WHERE
11:21:57  29  	s.account_id = a.id and
11:21:57  30  	s.offer_chain_id = ocmd.offer_chain_id and
11:21:57  31  	g.id = ss.group_account_id and
11:21:57  32  	ss.borrower_account_id = a2.id and
11:21:57  33  	s.id = g.subscription_id and
11:21:57  34  	ocmd.name = 'ADX_BUNDLE' and
11:21:57  35  	a2.group_id = in_group_id and
11:21:57  36  	rownum < 5
11:21:57  37  union all
11:21:57  38  SELECT /*+ FIRST_ROWS(5) */
11:21:57  39  	s.offer_chain_id,
11:21:57  40  	s.create_date,
11:21:57  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
11:21:57  42  	ocmd.value,
11:21:57  43  	a.group_id,
11:21:57  44  	s.id subscription_id
11:21:57  45  FROM
11:21:57  46  	account a,
11:21:57  47  	subscription s,
11:21:57  48  	offer_chain_meta_data ocmd
11:21:57  49  WHERE
11:21:57  50  	s.account_id = a.id and
11:21:57  51  	s.offer_chain_id = ocmd.offer_chain_id and
11:21:57  52  	ocmd.name = 'ADX_BUNDLE' and
11:21:57  53  	a.group_id = in_group_id and
11:21:57  54  	rownum < 5
11:21:57  55  ;
11:21:57  56  
11:21:57  57  END GET_SUB_ADX_INFO;
11:21:57  58  
11:21:57  59  END PROCS_ADX_V15;
11:21:57  60  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_AMAZON_SUB(
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   7  */
11:21:57   8  	  out_id	      OUT NUMBER,
11:21:57   9  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
11:21:57  10  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
11:21:57  11  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
11:21:57  12  ) AS
11:21:57  13  -- VARIABLES
11:21:57  14  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
11:21:57  15  -- EXCEPTIONS
11:21:57  16  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57  17  BEGIN
11:21:57  18  
11:21:57  19  	CORE_OWNER.PROCS_AMAZON_CRU_V15.CREATE_AMAZON_SUB(
11:21:57  20  	  out_id	      =>  out_id,
11:21:57  21  	  in_subscription_id  =>  in_subscription_id,
11:21:57  22  	  in_amazon_id	      =>  in_amazon_id,
11:21:57  23  	  in_created_by       =>  in_created_by
11:21:57  24  	);
11:21:57  25  
11:21:57  26  END CREATE_AMAZON_SUB;
11:21:57  27  
11:21:57  28  PROCEDURE GET_ACTIVE_SUB_IDS (
11:21:57  29  /*
11:21:57  30  Throws exceptions:
11:21:57  31  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  32  */
11:21:57  33  	out_result_set	    OUT SYS_REFCURSOR,
11:21:57  34  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
11:21:57  35  ) AS
11:21:57  36  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
11:21:57  37  BEGIN
11:21:57  38  OPEN out_result_set FOR
11:21:57  39  SELECT s.id
11:21:57  40  FROM subscription s, amazon_sub am
11:21:57  41  WHERE
11:21:57  42  	s.id = am.subscription_id
11:21:57  43  	and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:57  44  	and am.amazon_id = in_amazon_id
11:21:57  45  ;
11:21:57  46  
11:21:57  47  END GET_ACTIVE_SUB_IDS;
11:21:57  48  
11:21:57  49  PROCEDURE GET_ACTIVE_GROUP_IDS (
11:21:57  50  /*
11:21:57  51  Throws exceptions:
11:21:57  52  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  53  */
11:21:57  54  	out_result_set	    OUT SYS_REFCURSOR,
11:21:57  55  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
11:21:57  56  ) AS
11:21:57  57  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
11:21:57  58  BEGIN
11:21:57  59  OPEN out_result_set FOR
11:21:57  60  SELECT distinct a.group_id id
11:21:57  61  FROM subscription s, amazon_sub am, account a
11:21:57  62  WHERE
11:21:57  63  	s.id = am.subscription_id
11:21:57  64  	and a.id = s.account_id
11:21:57  65  	and s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:57  66  	and am.amazon_id = in_amazon_id
11:21:57  67  ;
11:21:57  68  
11:21:57  69  END GET_ACTIVE_GROUP_IDS;
11:21:57  70  
11:21:57  71  END PROCS_AMAZON_V15;
11:21:57  72  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
11:21:57   2  
11:21:57   3  	/****************************************************************************/
11:21:57   4  
11:21:57   5  	PROCEDURE POPULATE_REQUEST_INFO(
11:21:57   6  	  in_hours_prior    IN	NUMBER,
11:21:57   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
11:21:57   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
11:21:57   9  	) AS
11:21:57  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
11:21:57  11  	var_start_date	    DATE := SYSDATE;
11:21:57  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
11:21:57  13  	var_request_file_id NUMBER := 0;
11:21:57  14  	var_license_count   NUMBER := 0;
11:21:57  15  	var_cc_update_count NUMBER := 0;
11:21:57  16  	BEGIN
11:21:57  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
11:21:57  18  	    INSERT INTO CC_REQUEST_FILE (ID,
11:21:57  19  					 FILE_NAME,
11:21:57  20  					 CC_REQUEST_FILE_STATUS,
11:21:57  21  					 CREATE_DATE,
11:21:57  22  					 CREATED_BY,
11:21:57  23  					 UPDATE_DATE,
11:21:57  24  					 UPDATED_BY)
11:21:57  25  					 VALUES (
11:21:57  26  					 var_request_file_id,
11:21:57  27  					 in_filename,
11:21:57  28  					 'NOT_CREATED',
11:21:57  29  					 var_start_date,
11:21:57  30  					 in_creator,
11:21:57  31  					 var_start_date,
11:21:57  32  					 in_creator);
11:21:57  33  
11:21:57  34  	   FOR record IN (SELECT
11:21:57  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
11:21:57  36  			  FROM
11:21:57  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
11:21:57  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
11:21:57  39  			  WHERE
11:21:57  40  			    s.INSTRUMENT_TYPE_ID	 = 1
11:21:57  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
11:21:57  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
11:21:57  43  			    AND l.LICENSE_STATUS_ID	 = 2
11:21:57  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
11:21:57  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
11:21:57  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
11:21:57  47  	   LOOP
11:21:57  48  	     var_license_count := 0;
11:21:57  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
11:21:57  50  
11:21:57  51  	     IF var_license_count = 0 THEN
11:21:57  52  		INSERT INTO CC_UPDATE (ID,
11:21:57  53  				       CREDIT_CARD_ID,
11:21:57  54  				       LICENSE_ID,
11:21:57  55  				       CC_UPDATE_STATUS,
11:21:57  56  				       CC_REQUEST_FILE_ID,
11:21:57  57  				       CREATE_DATE,
11:21:57  58  				       UPDATE_DATE,
11:21:57  59  				       CREATED_BY,
11:21:57  60  				       UPDATED_BY
11:21:57  61  				       ) VALUES (
11:21:57  62  				       CC_UPDATE_SEQ.NEXTVAL,
11:21:57  63  				       record.CREDIT_CARD_ID,
11:21:57  64  				       record.LICENSE_ID,
11:21:57  65  				       'NOT_ADDED_TO_FILE',
11:21:57  66  				       var_request_file_id,
11:21:57  67  				       var_start_date,
11:21:57  68  				       var_start_date,
11:21:57  69  				       in_creator,
11:21:57  70  				       in_creator
11:21:57  71  				       );
11:21:57  72  	     END IF;
11:21:57  73  	   END LOOP;
11:21:57  74  
11:21:57  75  	   SELECT COUNT(1) INTO var_cc_update_count
11:21:57  76  	   FROM CC_UPDATE
11:21:57  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
11:21:57  78  	   IF var_cc_update_count <= 0 THEN
11:21:57  79  	     UPDATE CC_REQUEST_FILE
11:21:57  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
11:21:57  81  	     WHERE ID = var_request_file_id;
11:21:57  82  	   END IF;
11:21:57  83  
11:21:57  84  	END POPULATE_REQUEST_INFO;
11:21:57  85  
11:21:57  86  	/****************************************************************************/
11:21:57  87  
11:21:57  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
11:21:57  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:57  90  	  in_start	     IN NUMBER,
11:21:57  91  	  in_end	     IN NUMBER,
11:21:57  92  	  out_result_set     OUT SYS_REFCURSOR
11:21:57  93  	) AS
11:21:57  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
11:21:57  95  	var_range_diff	    NUMBER := 0;
11:21:57  96  	var_upper_bond_diff NUMBER := 0;
11:21:57  97  	var_l_start	    NUMBER := 0;
11:21:57  98  	var_l_end	    NUMBER := 0;
11:21:57  99  	BEGIN
11:21:57 100  	  --Normalize the end points [START]
11:21:57 101  	  IF (in_start IS NULL OR in_start < 0) Then
11:21:57 102  	    var_l_start := 0;
11:21:57 103  	  ELSE
11:21:57 104  	    var_l_start := in_start;
11:21:57 105  	  END IF;
11:21:57 106  
11:21:57 107  	  IF (in_end IS NULL) Then
11:21:57 108  	    var_l_end := 500;
11:21:57 109  	  ELSE
11:21:57 110  	    var_l_end := in_end;
11:21:57 111  	  END IF;
11:21:57 112  
11:21:57 113  	  var_l_start := var_l_start + 1;
11:21:57 114  	  var_l_end   := var_l_end   + 1;
11:21:57 115  
11:21:57 116  	  var_range_diff  := var_l_end - var_l_start;
11:21:57 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
11:21:57 118  
11:21:57 119  	  IF (var_upper_bond_diff > 0) Then
11:21:57 120  	    var_l_end := var_l_end - var_upper_bond_diff;
11:21:57 121  	  END IF;
11:21:57 122  	  --Normalize the end points [END]
11:21:57 123  
11:21:57 124  	  OPEN out_result_set FOR
11:21:57 125  	    SELECT CHASE_PROFILE_ID FROM
11:21:57 126  	      (SELECT rownum rnum, q.* FROM
11:21:57 127  		 (SELECT
11:21:57 128  		    cc.CHASE_PROFILE_ID
11:21:57 129  		  FROM
11:21:57 130  		    CREDIT_CARD cc,
11:21:57 131  		    CC_UPDATE ccu
11:21:57 132  		  WHERE
11:21:57 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
11:21:57 134  		    AND ccu.CREDIT_CARD_ID = cc.id
11:21:57 135  		) Q
11:21:57 136  	      WHERE rownum <= var_l_end)
11:21:57 137  	    WHERE rnum >= var_l_Start;
11:21:57 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
11:21:57 139  
11:21:57 140  	/****************************************************************************/
11:21:57 141  
11:21:57 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
11:21:57 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
11:21:57 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
11:21:57 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
11:21:57 146  	)AS
11:21:57 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
11:21:57 148  	BEGIN
11:21:57 149  	  UPDATE CC_REQUEST_FILE
11:21:57 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
11:21:57 151  	      UPDATE_DATE = SYSDATE,
11:21:57 152  	      UPDATED_BY  = in_updated_by
11:21:57 153  	  WHERE ID = in_request_file_id;
11:21:57 154  	END UPDATE_REQUEST_FILE_STATUS;
11:21:57 155  
11:21:57 156  	/****************************************************************************/
11:21:57 157  
11:21:57 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
11:21:57 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:57 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:57 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
11:21:57 162  	) AS
11:21:57 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
11:21:57 164  	BEGIN
11:21:57 165  	  UPDATE CC_UPDATE
11:21:57 166  	  SET CC_UPDATE_STATUS = in_status,
11:21:57 167  	      UPDATE_DATE      = SYSDATE,
11:21:57 168  	      UPDATED_BY       = in_updated_by
11:21:57 169  	  WHERE
11:21:57 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
11:21:57 171  	END UPDATE_CC_REQUEST_STATUS;
11:21:57 172  
11:21:57 173  	/****************************************************************************/
11:21:57 174  
11:21:57 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
11:21:57 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
11:21:57 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
11:21:57 178  	  out_request_files   OUT SYS_REFCURSOR
11:21:57 179  	) AS
11:21:57 180  	var_older_than_hours NUMBER := in_older_than_hours;
11:21:57 181  	BEGIN
11:21:57 182  	 IF (var_older_than_hours IS NULL) THEN
11:21:57 183  	   var_older_than_hours := -288;
11:21:57 184  	 END IF;
11:21:57 185  
11:21:57 186  	 OPEN out_request_files FOR
11:21:57 187  	 SELECT
11:21:57 188  	   ID,
11:21:57 189  	   FILE_NAME
11:21:57 190  	 FROM
11:21:57 191  	   CC_REQUEST_FILE
11:21:57 192  	 WHERE
11:21:57 193  	   CC_REQUEST_FILE_STATUS = in_status
11:21:57 194  	 AND
11:21:57 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
11:21:57 196  	END REQUEST_FILES_BY_STATUS;
11:21:57 197  
11:21:57 198  	/****************************************************************************/
11:21:57 199  
11:21:57 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
11:21:57 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
11:21:57 202  	  out_count OUT NUMBER
11:21:57 203  	) AS
11:21:57 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
11:21:57 205  	BEGIN
11:21:57 206  	  SELECT COUNT(1) INTO out_count
11:21:57 207  	  FROM CC_UPDATE
11:21:57 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
11:21:57 209  	END COUNT_BY_REQUEST_FILE_ID;
11:21:57 210  
11:21:57 211  	/****************************************************************************/
11:21:57 212  
11:21:57 213  	PROCEDURE GET_CREDIT_CARD_LICENSE (
11:21:57 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
11:21:57 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
11:21:57 216  	  out_card_license     OUT SYS_REFCURSOR
11:21:57 217  	) AS
11:21:57 218  	BEGIN
11:21:57 219  	  OPEN out_card_license FOR
11:21:57 220  	  SELECT
11:21:57 221  	    cc.ID CREDIT_CARD_ID,
11:21:57 222  	    cc.CHASE_PROFILE_ID,
11:21:57 223  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
11:21:57 224  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
11:21:57 225  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
11:21:57 226  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
11:21:57 227  	    a.GROUP_ID,
11:21:57 228  	    u.LICENSE_ID,
11:21:57 229  	    u.ID CC_UPDATE_ID,
11:21:57 230  	    l.END_DATE LICENSE_END_DATE,
11:21:57 231  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
11:21:57 232  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf, ACCOUNT a, LICENSE l
11:21:57 233  	  WHERE cc.ID = u.CREDIT_CARD_ID
11:21:57 234  	  AND u.CC_REQUEST_FILE_ID = rf.ID
11:21:57 235  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
11:21:57 236  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
11:21:57 237  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
11:21:57 238  	  AND cc.ACCOUNT_ID = a.ID
11:21:57 239  	  AND u.LICENSE_ID = l.ID
11:21:57 240  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
11:21:57 241  	  AND SYSDATE BETWEEN l.START_DATE and l.END_DATE
11:21:57 242  	  ORDER BY cc.UPDATE_DATE DESC;
11:21:57 243  	END GET_CREDIT_CARD_LICENSE;
11:21:57 244  
11:21:57 245  	/****************************************************************************/
11:21:57 246  
11:21:57 247  	PROCEDURE UPDATE_CC_UPDATE(
11:21:57 248  	  in_id 	     IN CC_UPDATE.ID%TYPE,
11:21:57 249  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:57 250  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
11:21:57 251  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
11:21:57 252  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
11:21:57 253  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
11:21:57 254  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
11:21:57 255  	) AS
11:21:57 256  	BEGIN
11:21:57 257  	  UPDATE CC_UPDATE
11:21:57 258  	  SET CC_UPDATE_STATUS = in_status,
11:21:57 259  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
11:21:57 260  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
11:21:57 261  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
11:21:57 262  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
11:21:57 263  	  UPDATE_DATE = SYSDATE,
11:21:57 264  	  UPDATED_BY = in_updated_by
11:21:57 265  	  WHERE ID = in_id;
11:21:57 266  	END UPDATE_CC_UPDATE;
11:21:57 267  
11:21:57 268  	/****************************************************************************/
11:21:57 269  
11:21:57 270  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
11:21:57 271  	  in_id 	IN CC_UPDATE.ID%TYPE,
11:21:57 272  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
11:21:57 273  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
11:21:57 274  	) AS
11:21:57 275  	BEGIN
11:21:57 276  	  UPDATE CC_UPDATE
11:21:57 277  	  SET CC_UPDATE_STATUS = in_status,
11:21:57 278  	  UPDATE_DATE = SYSDATE,
11:21:57 279  	  UPDATED_BY = in_updated_by
11:21:57 280  	  WHERE ID = in_id;
11:21:57 281  	END UPDATE_CC_UPDATE_STATUS;
11:21:57 282  
11:21:57 283  	/****************************************************************************/
11:21:57 284  
11:21:57 285  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
11:21:57 286  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
11:21:57 287  	  out_request_file     OUT SYS_REFCURSOR
11:21:57 288  	) AS
11:21:57 289  	BEGIN
11:21:57 290  	  OPEN out_request_file FOR
11:21:57 291  	  SELECT ID, FILE_NAME
11:21:57 292  	  FROM CC_REQUEST_FILE
11:21:57 293  	  WHERE FILE_NAME = in_request_filename;
11:21:57 294  	END GET_REQUEST_FILE_BY_FILENAME;
11:21:57 295  
11:21:57 296  	/****************************************************************************/
11:21:57 297  
11:21:57 298  	PROCEDURE SUSPEND_CREDIT_CARD (
11:21:57 299  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
11:21:57 300  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:57 301  	) AS
11:21:57 302  	BEGIN
11:21:57 303  	  -- Create history
11:21:57 304  	  PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
11:21:57 305  	      in_credit_card_id 	   => in_credit_card_id,
11:21:57 306  	      in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57 307  	  );
11:21:57 308  
11:21:57 309  	  UPDATE CREDIT_CARD
11:21:57 310  	  SET UPDATE_DATE = SYSDATE,
11:21:57 311  	  UPDATED_BY = in_updated_by,
11:21:57 312  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
11:21:57 313  	  WHERE ID = in_credit_card_id;
11:21:57 314  	END SUSPEND_CREDIT_CARD;
11:21:57 315  
11:21:57 316  	/****************************************************************************/
11:21:57 317  
11:21:57 318  	PROCEDURE UPDATE_CREDIT_CARD (
11:21:57 319  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
11:21:57 320  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:57 321  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
11:21:57 322  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:57 323  	) AS
11:21:57 324  	BEGIN
11:21:57 325  	  -- Create history
11:21:57 326  	  PROCS_HISTORY_V15.CREATE_CREDIT_CARD_HISTORY(
11:21:57 327  	      in_credit_card_id 	   => in_credit_card_id,
11:21:57 328  	      in_system_activity_reason_id => GLOBAL_ENUMS_V15.SAC_SYSTEM_APPLIED_RULE
11:21:57 329  	  );
11:21:57 330  
11:21:57 331  	  UPDATE CREDIT_CARD
11:21:57 332  	  SET UPDATE_DATE = SYSDATE,
11:21:57 333  	  UPDATED_BY = in_updated_by,
11:21:57 334  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
11:21:57 335  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
11:21:57 336  	  WHERE ID = in_credit_card_id;
11:21:57 337  	END UPDATE_CREDIT_CARD;
11:21:57 338  
11:21:57 339  	/****************************************************************************/
11:21:57 340  
11:21:57 341  	PROCEDURE COMPLETABLE_REQUESTS (
11:21:57 342  	  out_request_files OUT SYS_REFCURSOR
11:21:57 343  	) AS
11:21:57 344  	BEGIN
11:21:57 345  	  OPEN out_request_files FOR
11:21:57 346  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
11:21:57 347  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
11:21:57 348  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
11:21:57 349  	  AND rf.ID = u.CC_REQUEST_FILE_ID
11:21:57 350  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
11:21:57 351  	  MINUS
11:21:57 352  	  SELECT rf.ID, rf.FILE_NAME
11:21:57 353  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
11:21:57 354  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
11:21:57 355  	  AND rf.ID = u.CC_REQUEST_FILE_ID
11:21:57 356  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
11:21:57 357  	END COMPLETABLE_REQUESTS;
11:21:57 358  
11:21:57 359  	/****************************************************************************/
11:21:57 360  
11:21:57 361  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
11:21:57 362  	  in_max_hours_before_report IN  NUMBER,
11:21:57 363  	  out_request_files	     OUT SYS_REFCURSOR
11:21:57 364  	) AS
11:21:57 365  	BEGIN
11:21:57 366  	  OPEN out_request_files FOR
11:21:57 367  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
11:21:57 368  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
11:21:57 369  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
11:21:57 370  	  AND rf.ID = u.CC_REQUEST_FILE_ID
11:21:57 371  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
11:21:57 372  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
11:21:57 373  	  MINUS
11:21:57 374  	  SELECT rf.ID, rf.FILE_NAME
11:21:57 375  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
11:21:57 376  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
11:21:57 377  	  AND rf.ID = u.CC_REQUEST_FILE_ID
11:21:57 378  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
11:21:57 379  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
11:21:57 380  	END COMPLETABLE_REQUESTS_W_FAILS;
11:21:57 381  
11:21:57 382  END PROCS_CUPY;
11:21:57 383  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.35
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE
11:21:57   2  PACKAGE BODY PROCS_ENTITLEMENT_V15 AS
11:21:57   3  
11:21:57   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
11:21:57   5  	  in_subscription_id IN NUMBER,
11:21:57   6  	  out_uri OUT VARCHAR2)
11:21:57   7  	AS
11:21:57   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
11:21:57   9  	  UNKNOWN_ERROR   EXCEPTION;
11:21:57  10  	BEGIN
11:21:57  11  	  SELECT
11:21:57  12  	    POMD.VALUE INTO out_uri
11:21:57  13  	  FROM
11:21:57  14  	     OFFER_PRODUCT_OFFERING OPO,
11:21:57  15  	     PRODUCT_OFFERING PO,
11:21:57  16  	     OFFER_OFFER_CHAIN OOC,
11:21:57  17  	     SUBSCRIPTION S,
11:21:57  18  	     LICENSE LL,
11:21:57  19  	     PRODUCT_OFFERING_META_DATA POMD
11:21:57  20  	  WHERE
11:21:57  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
11:21:57  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
11:21:57  23  	     S.ID = in_subscription_id AND
11:21:57  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
11:21:57  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
11:21:57  26  	     PO.CAPABILITY_ID = 1 AND
11:21:57  27  	     S.ID = LL.SUBSCRIPTION_ID AND
11:21:57  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
11:21:57  29  	     NAME = 'entitlement_uri' AND
11:21:57  30  	     rownum < 2;
11:21:57  31  	EXCEPTION
11:21:57  32  	  WHEN OTHERS THEN
11:21:57  33  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
11:21:57  36  
11:21:57  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
11:21:57  38  	  in_group_id	 IN  NUMBER,
11:21:57  39  	  out_result_set OUT SYS_REFCURSOR)
11:21:57  40  	AS
11:21:57  41  	  -- CONSTANTS
11:21:57  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
11:21:57  43  	  -- EXCEPTIONS
11:21:57  44  	  NOT_FOUND	  EXCEPTION;
11:21:57  45  	  UNKNOWN_ERROR   EXCEPTION;
11:21:57  46  	  -- VARIABLES
11:21:57  47  	  var_subs	  SYS_REFCURSOR;
11:21:57  48  	BEGIN
11:21:57  49  	  OPEN out_result_set FOR
11:21:57  50  
11:21:57  51  	SELECT
11:21:57  52  	  C.CODE NAME,
11:21:57  53  	  C.DESCRIPTION,
11:21:57  54  	  0 INHERITED,
11:21:57  55  	  C.SHAREABLE,
11:21:57  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
11:21:57  57  	FROM
11:21:57  58  	  SUBSCRIPTION SB
11:21:57  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
11:21:57  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
11:21:57  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
11:21:57  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
11:21:57  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
11:21:57  64  	WHERE
11:21:57  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
11:21:57  66  	  AND LIC.START_DATE <= SYSDATE
11:21:57  67  	  AND AC.GROUP_ID = in_group_id
11:21:57  68  	GROUP BY
11:21:57  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
11:21:57  70  UNION ALL
11:21:57  71  	SELECT
11:21:57  72  	  C.CODE NAME,
11:21:57  73  	  C.DESCRIPTION,
11:21:57  74  	  1 INHERITED,
11:21:57  75  	  C.SHAREABLE,
11:21:57  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
11:21:57  77  	FROM
11:21:57  78  	  ACCOUNT BORROWER,
11:21:57  79  	  SUBSCRIPTION S,
11:21:57  80  	  LICENSE LIC,
11:21:57  81  	  OFFER_PRODUCT_OFFERING OPO,
11:21:57  82  	  PRODUCT_OFFERING PO,
11:21:57  83  	  CAPABILITY C,
11:21:57  84  	  GROUP_ACCOUNT GA,
11:21:57  85  	  SUBSCRIPTION_SHARE SS
11:21:57  86  	WHERE
11:21:57  87  	  BORROWER.GROUP_ID = in_group_id
11:21:57  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
11:21:57  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
11:21:57  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
11:21:57  91  	  AND PO.CAPABILITY_ID = C.ID
11:21:57  92  	  AND GA.SUBSCRIPTION_ID = S.ID
11:21:57  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
11:21:57  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
11:21:57  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
11:21:57  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
11:21:57  97  	  AND C.SHAREABLE = 1
11:21:57  98  	GROUP BY
11:21:57  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
11:21:57 100  
11:21:57 101  	EXCEPTION
11:21:57 102  	  WHEN OTHERS THEN
11:21:57 103  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 105  	END GET_ALL_ENTITLEMENTS;
11:21:57 106  
11:21:57 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
11:21:57 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:57 109  	  out_result_set OUT SYS_REFCURSOR)
11:21:57 110  	AS
11:21:57 111  	  -- CONSTANTS
11:21:57 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
11:21:57 113  	  -- EXCEPTIONS
11:21:57 114  	  NOT_FOUND	  EXCEPTION;
11:21:57 115  	  UNKNOWN_ERROR   EXCEPTION;
11:21:57 116  	  -- VARIABLES
11:21:57 117  	  var_subs	  SYS_REFCURSOR;
11:21:57 118  	BEGIN
11:21:57 119  	  OPEN out_result_set FOR
11:21:57 120  
11:21:57 121  	      SELECT
11:21:57 122  		c.code NAME,
11:21:57 123  		C.DESCRIPTION,
11:21:57 124  		0 INHERITED,
11:21:57 125  		C.SHAREABLE,
11:21:57 126  		sysdate as EXPIRES
11:21:57 127  	      FROM
11:21:57 128  		offer_offer_chain ooc,
11:21:57 129  		offer o,
11:21:57 130  		offer_product_offering opo,
11:21:57 131  		product_offering po,
11:21:57 132  		capability c
11:21:57 133  	      WHERE
11:21:57 134  		o.id = ooc.offer_id AND
11:21:57 135  		opo.offer_id = o.id AND
11:21:57 136  		po.id = opo.product_offering_id AND
11:21:57 137  		c.id = po.capability_id AND
11:21:57 138  		c.id !=0 AND
11:21:57 139  		ooc.offer_chain_id =
11:21:57 140  		(SELECT
11:21:57 141  		    ocmd.offer_chain_id
11:21:57 142  		  FROM
11:21:57 143  		      offer_chain_meta_data ocmd
11:21:57 144  		  WHERE
11:21:57 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
11:21:57 146  		      ocmd.value = in_product_id AND
11:21:57 147  		      rownum < 2
11:21:57 148  		)
11:21:57 149  	      ;
11:21:57 150  
11:21:57 151  	EXCEPTION
11:21:57 152  	  WHEN OTHERS THEN
11:21:57 153  	    PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 155  	END GET_ITUNES_ENTITLEMENTS;
11:21:57 156  
11:21:57 157  END PROCS_ENTITLEMENT_V15;
11:21:57 158  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.06
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE CREATE_ADDRESS_HISTORY(
11:21:57   4  	in_address_id		     IN NUMBER,
11:21:57   5  	in_system_activity_reason_id IN NUMBER
11:21:57   6  ) AS
11:21:57   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
11:21:57   8  -- VARIABLES
11:21:57   9  var_address1    ADDRESS.ADDRESS1%TYPE;
11:21:57  10  var_address2    ADDRESS.ADDRESS2%TYPE;
11:21:57  11  var_city	      ADDRESS.CITY%TYPE;
11:21:57  12  var_state       ADDRESS.STATE%TYPE;
11:21:57  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
11:21:57  14  var_country     ADDRESS.COUNTRY%TYPE;
11:21:57  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
11:21:57  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
11:21:57  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
11:21:57  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
11:21:57  19  -- EXCEPTIONS
11:21:57  20  BAD_ADDRESS_ID	     EXCEPTION;
11:21:57  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57  23  BEGIN
11:21:57  24  
11:21:57  25  	BEGIN
11:21:57  26  	  SELECT
11:21:57  27  	    ADDRESS.ADDRESS1,
11:21:57  28  	    ADDRESS.ADDRESS2,
11:21:57  29  	    ADDRESS.CITY,
11:21:57  30  	    ADDRESS.STATE,
11:21:57  31  	    ADDRESS.POSTAL_CODE,
11:21:57  32  	    ADDRESS.COUNTRY,
11:21:57  33  	    ADDRESS.CREATED_BY,
11:21:57  34  	    ADDRESS.CREATE_DATE,
11:21:57  35  	    ADDRESS.UPDATED_BY,
11:21:57  36  	    ADDRESS.UPDATE_DATE
11:21:57  37  	    into
11:21:57  38  	    var_address1,
11:21:57  39  	    var_address2,
11:21:57  40  	    var_city,
11:21:57  41  	    var_state,
11:21:57  42  	    var_postal_code,
11:21:57  43  	    var_country,
11:21:57  44  	    var_created_by,
11:21:57  45  	    var_create_date,
11:21:57  46  	    var_updated_by,
11:21:57  47  	    var_update_date
11:21:57  48  	  FROM
11:21:57  49  	    ADDRESS
11:21:57  50  	  WHERE
11:21:57  51  	    ADDRESS.ID = in_address_id;
11:21:57  52  	  EXCEPTION
11:21:57  53  	    WHEN NO_DATA_FOUND THEN
11:21:57  54  	      RAISE BAD_ADDRESS_ID;
11:21:57  55  	END;
11:21:57  56  
11:21:57  57  	BEGIN
11:21:57  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ADDRESS_HISTORY(
11:21:57  59  	    in_address_id,
11:21:57  60  	    in_system_activity_reason_id,
11:21:57  61  	    var_address1,
11:21:57  62  	    var_address2,
11:21:57  63  	    var_city,
11:21:57  64  	    var_state,
11:21:57  65  	    var_postal_code,
11:21:57  66  	    var_country,
11:21:57  67  	    var_created_by,
11:21:57  68  	    var_create_date,
11:21:57  69  	    var_updated_by,
11:21:57  70  	    var_update_date
11:21:57  71  	  );
11:21:57  72  	  EXCEPTION
11:21:57  73  	    WHEN OTHERS THEN
11:21:57  74  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57  75  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57  76  	END;
11:21:57  77  
11:21:57  78  EXCEPTION
11:21:57  79  WHEN BAD_ADDRESS_ID THEN
11:21:57  80  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57  81  	  SPROC_NAME, 'Bad recipientAddress id');
11:21:57  82  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57  83  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57  85  WHEN OTHERS THEN
11:21:57  86  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  88  END CREATE_ADDRESS_HISTORY;
11:21:57  89  
11:21:57  90  /********************************************************************/
11:21:57  91  
11:21:57  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
11:21:57  93  	in_account_id		     IN NUMBER,
11:21:57  94  	in_system_activity_reason_id IN NUMBER
11:21:57  95  ) AS
11:21:57  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
11:21:57  97  -- VARIABLES
11:21:57  98  var_account_status_id  NUMBER;
11:21:57  99  var_suspend_date	     DATE;
11:21:57 100  var_group_id	     NUMBER;
11:21:57 101  var_instrument_type_id NUMBER;
11:21:57 102  var_instrument_id      NUMBER;
11:21:57 103  var_updated_by	     VARCHAR2(255);
11:21:57 104  var_update_date	     DATE;
11:21:57 105  -- EXCEPTIONS
11:21:57 106  BAD_ACCOUNT_ID	     EXCEPTION;
11:21:57 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 109  BEGIN
11:21:57 110  
11:21:57 111  	BEGIN
11:21:57 112  	  SELECT
11:21:57 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
11:21:57 114  	    ACCOUNT.GROUP_ID,
11:21:57 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
11:21:57 116  	    ACCOUNT.INSTRUMENT_TYPE_ID,
11:21:57 117  	    ACCOUNT.UPDATED_BY,
11:21:57 118  	    ACCOUNT.UPDATE_DATE
11:21:57 119  	    into
11:21:57 120  	    var_account_status_id,
11:21:57 121  	    var_group_id,
11:21:57 122  	    var_instrument_type_id,
11:21:57 123  	    var_instrument_id,
11:21:57 124  	    var_updated_by,
11:21:57 125  	    var_update_date
11:21:57 126  	  FROM
11:21:57 127  	    ACCOUNT
11:21:57 128  	  WHERE
11:21:57 129  	    ACCOUNT.ID = in_account_id;
11:21:57 130  	  EXCEPTION
11:21:57 131  	    WHEN NO_DATA_FOUND THEN
11:21:57 132  	      RAISE BAD_ACCOUNT_ID;
11:21:57 133  	END;
11:21:57 134  
11:21:57 135  	BEGIN
11:21:57 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_ACCOUNT_HISTORY(
11:21:57 137  	    in_account_id,
11:21:57 138  	    var_suspend_date,
11:21:57 139  	    var_group_id,
11:21:57 140  	    var_updated_by,
11:21:57 141  	    var_update_date,
11:21:57 142  	    in_system_activity_reason_id,
11:21:57 143  	    var_account_status_id,
11:21:57 144  	    var_instrument_type_id,
11:21:57 145  	    var_instrument_id
11:21:57 146  	  );
11:21:57 147  	  EXCEPTION
11:21:57 148  	    WHEN OTHERS THEN
11:21:57 149  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 150  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 151  	END;
11:21:57 152  
11:21:57 153  EXCEPTION
11:21:57 154  WHEN BAD_ACCOUNT_ID THEN
11:21:57 155  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 156  	  SPROC_NAME, 'Bad account id');
11:21:57 157  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 158  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 160  WHEN OTHERS THEN
11:21:57 161  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 163  END CREATE_ACCOUNT_HISTORY;
11:21:57 164  
11:21:57 165  /********************************************************************/
11:21:57 166  
11:21:57 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
11:21:57 168  /*
11:21:57 169  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 170  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 171  */
11:21:57 172  	in_subscription_id	     IN NUMBER,
11:21:57 173  	in_system_activity_reason_id IN NUMBER
11:21:57 174  ) AS
11:21:57 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
11:21:57 176  -- VARIABLES
11:21:57 177  var_account_id		    NUMBER;
11:21:57 178  var_purchase_date 	    DATE;
11:21:57 179  var_offer_chain_id	    NUMBER;
11:21:57 180  var_suspend_date		    DATE;
11:21:57 181  var_termination_date	    DATE;
11:21:57 182  var_days_ramaining_adjustment NUMBER;
11:21:57 183  var_sct_id		    NUMBER;
11:21:57 184  var_updated_by		    VARCHAR2(255);
11:21:57 185  var_update_date		    DATE;
11:21:57 186  -- EXCEPTIONS
11:21:57 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
11:21:57 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 190  BEGIN
11:21:57 191  
11:21:57 192  	BEGIN
11:21:57 193  	  SELECT
11:21:57 194  	    SUBSCRIPTION.account_id,
11:21:57 195  	    SUBSCRIPTION.PURCHASE_DATE,
11:21:57 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
11:21:57 197  	    SUBSCRIPTION.SUSPEND_DATE,
11:21:57 198  	    SUBSCRIPTION.TERMINATION_DATE,
11:21:57 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
11:21:57 200  	    SUBSCRIPTION.SCT_ID,
11:21:57 201  	    SUBSCRIPTION.UPDATED_BY,
11:21:57 202  	    SUBSCRIPTION.UPDATE_DATE
11:21:57 203  	    into
11:21:57 204  	    var_account_id,
11:21:57 205  	    var_purchase_date,
11:21:57 206  	    var_offer_chain_id,
11:21:57 207  	    var_suspend_date,
11:21:57 208  	    var_termination_date,
11:21:57 209  	    var_days_ramaining_adjustment,
11:21:57 210  	    var_sct_id,
11:21:57 211  	    var_updated_by,
11:21:57 212  	    var_update_date
11:21:57 213  	  FROM
11:21:57 214  	    SUBSCRIPTION
11:21:57 215  	  WHERE
11:21:57 216  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:57 217  	  EXCEPTION
11:21:57 218  	    WHEN NO_DATA_FOUND THEN
11:21:57 219  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:57 220  	END;
11:21:57 221  
11:21:57 222  	BEGIN
11:21:57 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_SUBSCRIPTION_HISTORY(
11:21:57 224  	    in_subscription_id,
11:21:57 225  	    var_account_id,
11:21:57 226  	    var_purchase_date,
11:21:57 227  	    var_offer_chain_id,
11:21:57 228  	    var_suspend_date,
11:21:57 229  	    var_termination_date,
11:21:57 230  	    var_days_ramaining_adjustment,
11:21:57 231  	    var_sct_id,
11:21:57 232  	    var_updated_by,
11:21:57 233  	    var_update_date,
11:21:57 234  	    in_system_activity_reason_id
11:21:57 235  	  );
11:21:57 236  	  EXCEPTION
11:21:57 237  	    WHEN OTHERS THEN
11:21:57 238  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 239  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 240  	END;
11:21:57 241  
11:21:57 242  EXCEPTION
11:21:57 243  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:57 244  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 245  	  SPROC_NAME, 'No such subscription');
11:21:57 246  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 247  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 249  WHEN OTHERS THEN
11:21:57 250  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 252  END CREATE_SUBSCRIPTION_HISTORY;
11:21:57 253  
11:21:57 254  /********************************************************************/
11:21:57 255  
11:21:57 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
11:21:57 257  	in_credit_card_id	      IN NUMBER,
11:21:57 258  	in_system_activity_reason_id  IN NUMBER
11:21:57 259  ) AS
11:21:57 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
11:21:57 261  -- VARIABLES
11:21:57 262  var_account_id		     NUMBER;
11:21:57 263  var_instrument_name	     VARCHAR2(255);
11:21:57 264  var_private_card_holder_name   VARCHAR2(256);
11:21:57 265  var_private_street_address     VARCHAR2(256);
11:21:57 266  var_private_street_address2    VARCHAR2(256);
11:21:57 267  var_state 		     VARCHAR2(50);
11:21:57 268  var_city			     VARCHAR2(50);
11:21:57 269  var_postal_code		     VARCHAR2(20);
11:21:57 270  var_country		     CHAR(2);
11:21:57 271  var_last_four_cc		     VARCHAR2(4);
11:21:57 272  var_expiration_date	     DATE;
11:21:57 273  var_credit_card_type_id	     NUMBER;
11:21:57 274  var_secret_token		     VARCHAR2(255);
11:21:57 275  var_chase_profile_id	     VARCHAR2(255);
11:21:57 276  var_credit_card_status_id      NUMBER;
11:21:57 277  var_updated_by		     VARCHAR2(255);
11:21:57 278  var_update_date		     DATE;
11:21:57 279  -- EXCEPTIONS
11:21:57 280  BAD_CREDIT_CARD_ID     EXCEPTION;
11:21:57 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 283  BEGIN
11:21:57 284  
11:21:57 285  	BEGIN
11:21:57 286  	  SELECT
11:21:57 287  	    ACCOUNT_ID,
11:21:57 288  	    INSTRUMENT_NAME,
11:21:57 289  	    PRIVATE_CARD_HOLDER_NAME,
11:21:57 290  	    PRIVATE_STREET_ADDRESS,
11:21:57 291  	    PRIVATE_STREET_ADDRESS2,
11:21:57 292  	    STATE,
11:21:57 293  	    CITY,
11:21:57 294  	    POSTAL_CODE,
11:21:57 295  	    COUNTRY,
11:21:57 296  	    LAST_FOUR_CC,
11:21:57 297  	    EXPIRATION_DATE,
11:21:57 298  	    CREDIT_CARD_TYPE_ID,
11:21:57 299  	    SECRET_TOKEN,
11:21:57 300  	    CHASE_PROFILE_ID,
11:21:57 301  	    CREDIT_CARD_STATUS_ID,
11:21:57 302  	    UPDATED_BY,
11:21:57 303  	    UPDATE_DATE
11:21:57 304  	    into
11:21:57 305  	    var_account_id,
11:21:57 306  	    var_instrument_name,
11:21:57 307  	    var_private_card_holder_name,
11:21:57 308  	    var_private_street_address,
11:21:57 309  	    var_private_street_address2,
11:21:57 310  	    var_state,
11:21:57 311  	    var_city,
11:21:57 312  	    var_postal_code,
11:21:57 313  	    var_country,
11:21:57 314  	    var_last_four_cc,
11:21:57 315  	    var_expiration_date,
11:21:57 316  	    var_credit_card_type_id,
11:21:57 317  	    var_secret_token,
11:21:57 318  	    var_chase_profile_id,
11:21:57 319  	    var_credit_card_status_id,
11:21:57 320  	    var_updated_by,
11:21:57 321  	    var_update_date
11:21:57 322  	  FROM
11:21:57 323  	    CREDIT_CARD
11:21:57 324  	  WHERE
11:21:57 325  	    CREDIT_CARD.ID = in_credit_card_id;
11:21:57 326  	  EXCEPTION
11:21:57 327  	    WHEN NO_DATA_FOUND THEN
11:21:57 328  	      RAISE BAD_CREDIT_CARD_ID;
11:21:57 329  	END;
11:21:57 330  
11:21:57 331  	BEGIN
11:21:57 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_CREDIT_CARD_HISTORY(
11:21:57 333  	    in_credit_card_id,
11:21:57 334  	    var_account_id,
11:21:57 335  	    var_instrument_name,
11:21:57 336  	    var_private_card_holder_name,
11:21:57 337  	    var_private_street_address,
11:21:57 338  	    var_private_street_address2,
11:21:57 339  	    var_state,
11:21:57 340  	    var_city,
11:21:57 341  	    var_postal_code,
11:21:57 342  	    var_country,
11:21:57 343  	    var_last_four_cc,
11:21:57 344  	    var_expiration_date,
11:21:57 345  	    var_credit_card_type_id,
11:21:57 346  	    var_secret_token,
11:21:57 347  	    var_chase_profile_id,
11:21:57 348  	    var_credit_card_status_id,
11:21:57 349  	    var_updated_by,
11:21:57 350  	    var_update_date,
11:21:57 351  	    in_system_activity_reason_id
11:21:57 352  	  );
11:21:57 353  	  EXCEPTION
11:21:57 354  	    WHEN OTHERS THEN
11:21:57 355  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 356  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 357  	END;
11:21:57 358  
11:21:57 359  EXCEPTION
11:21:57 360  WHEN BAD_CREDIT_CARD_ID THEN
11:21:57 361  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 362  	  SPROC_NAME, 'No such credit card');
11:21:57 363  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 364  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 366  WHEN OTHERS THEN
11:21:57 367  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 369  END CREATE_CREDIT_CARD_HISTORY;
11:21:57 370  
11:21:57 371  /********************************************************************/
11:21:57 372  
11:21:57 373  PROCEDURE CREATE_PAYPAL_HISTORY(
11:21:57 374  /*
11:21:57 375  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 376  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 377  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:57 378  */
11:21:57 379  	in_paypal_id		      IN NUMBER,
11:21:57 380  	in_system_activity_reason_id  IN NUMBER
11:21:57 381  ) AS
11:21:57 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
11:21:57 383  -- VARIABLES
11:21:57 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
11:21:57 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
11:21:57 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
11:21:57 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
11:21:57 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
11:21:57 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
11:21:57 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
11:21:57 391  var_state 		   PAYPAL.STATE%TYPE;
11:21:57 392  var_city			   PAYPAL.CITY%TYPE;
11:21:57 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
11:21:57 394  var_country		   PAYPAL.COUNTRY%TYPE;
11:21:57 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
11:21:57 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
11:21:57 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
11:21:57 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
11:21:57 399  -- EXCEPTION
11:21:57 400  BAD_PAYPAL_ID	  EXCEPTION;
11:21:57 401  CAN_NOT_ADD_HISTORY EXCEPTION;
11:21:57 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
11:21:57 403  BEGIN
11:21:57 404  
11:21:57 405  	BEGIN
11:21:57 406  	  SELECT
11:21:57 407  	    ACCOUNT_ID,
11:21:57 408  	    INSTRUMENT_NAME,
11:21:57 409  	    PRIVATE_EMAIL_ADDRESS,
11:21:57 410  	    UPDATE_DATE,
11:21:57 411  	    UPDATED_BY,
11:21:57 412  	    PAYPAL_STATUS_ID,
11:21:57 413  	    PRIVATE_STREET_ADDRESS,
11:21:57 414  	    PRIVATE_STREET_ADDRESS2,
11:21:57 415  	    STATE,
11:21:57 416  	    CITY,
11:21:57 417  	    POSTAL_CODE,
11:21:57 418  	    COUNTRY,
11:21:57 419  	    EXPIRATION_DATE,
11:21:57 420  	    SECRET_TOKEN
11:21:57 421  	  INTO
11:21:57 422  	    var_account_id,
11:21:57 423  	    var_instrument_name,
11:21:57 424  	    var_private_email_address,
11:21:57 425  	    var_update_date,
11:21:57 426  	    var_updated_by,
11:21:57 427  	    var_paypal_status_id,
11:21:57 428  	    var_paypal_prvt_street_addr,
11:21:57 429  	    var_paypal_prvt_street_addr2,
11:21:57 430  	    var_state,
11:21:57 431  	    var_city,
11:21:57 432  	    var_postal_code,
11:21:57 433  	    var_country,
11:21:57 434  	    var_expiration_date,
11:21:57 435  	    var_secret_token
11:21:57 436  	  FROM
11:21:57 437  	    PAYPAL
11:21:57 438  	  WHERE
11:21:57 439  	    ID = in_paypal_id;
11:21:57 440  	  EXCEPTION
11:21:57 441  	    WHEN NO_DATA_FOUND THEN
11:21:57 442  	      RAISE BAD_PAYPAL_ID;
11:21:57 443  	END;
11:21:57 444  
11:21:57 445  	BEGIN
11:21:57 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_PAYPAL_HISTORY(
11:21:57 447  	    in_paypal_id,
11:21:57 448  	    var_account_id,
11:21:57 449  	    var_instrument_name,
11:21:57 450  	    var_private_email_address,
11:21:57 451  	    var_updated_by,
11:21:57 452  	    var_update_date,
11:21:57 453  	    var_paypal_status_id,
11:21:57 454  	    var_paypal_prvt_street_addr,
11:21:57 455  	    var_paypal_prvt_street_addr2,
11:21:57 456  	    var_state,
11:21:57 457  	    var_city,
11:21:57 458  	    var_postal_code,
11:21:57 459  	    var_country,
11:21:57 460  	    var_expiration_date,
11:21:57 461  	    in_system_activity_reason_id,
11:21:57 462  	    var_secret_token
11:21:57 463  	  );
11:21:57 464  	  EXCEPTION
11:21:57 465  	    WHEN OTHERS THEN
11:21:57 466  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 467  	      RAISE CAN_NOT_ADD_HISTORY;
11:21:57 468  	END;
11:21:57 469  
11:21:57 470  EXCEPTION
11:21:57 471  WHEN BAD_PAYPAL_ID THEN
11:21:57 472  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 473  	  SPROC_NAME, 'No such paypal');
11:21:57 474  WHEN CAN_NOT_ADD_HISTORY THEN
11:21:57 475  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
11:21:57 477  WHEN OTHERS THEN
11:21:57 478  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 480  END CREATE_PAYPAL_HISTORY;
11:21:57 481  
11:21:57 482  /********************************************************************/
11:21:57 483  
11:21:57 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
11:21:57 485  	in_gift_certificate_id	      IN NUMBER,
11:21:57 486  	in_system_activity_reason_id  IN NUMBER
11:21:57 487  ) AS
11:21:57 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
11:21:57 489  -- VARIABLES
11:21:57 490  var_purchaser_group_id	     NUMBER;
11:21:57 491  var_purchase_invoice_id	     NUMBER;
11:21:57 492  var_offer_chain_id	     NUMBER;
11:21:57 493  var_expiration_date	     DATE;
11:21:57 494  var_purchase_date 	     DATE;
11:21:57 495  var_gift_certificate_status_id NUMBER;
11:21:57 496  var_code			     VARCHAR2(255);
11:21:57 497  var_recipient_name	     VARCHAR2(255);
11:21:57 498  var_gift_message		     VARCHAR2(500);
11:21:57 499  var_recipient_email	     VARCHAR2(255);
11:21:57 500  var_finalized_invoice_id	     NUMBER;
11:21:57 501  var_sender_email		     VARCHAR2(50);
11:21:57 502  var_sender_name		     VARCHAR2(50);
11:21:57 503  var_redemption_date	     DATE;
11:21:57 504  var_redeemer_group_id	     NUMBER;
11:21:57 505  var_cancelation_date	     DATE;
11:21:57 506  var_updated_by		     VARCHAR2(255);
11:21:57 507  var_update_date		     DATE;
11:21:57 508  var_recipient_address_id	     NUMBER;
11:21:57 509  var_redeemer_address_id	     NUMBER;
11:21:57 510  var_recipient_notify_date      DATE;
11:21:57 511  -- EXCEPTIONS
11:21:57 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
11:21:57 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
11:21:57 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:57 515  BEGIN
11:21:57 516  
11:21:57 517  	BEGIN
11:21:57 518  	  SELECT
11:21:57 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
11:21:57 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
11:21:57 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
11:21:57 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
11:21:57 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
11:21:57 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
11:21:57 525  	    GIFT_CERTIFICATE.CODE,
11:21:57 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
11:21:57 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
11:21:57 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
11:21:57 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
11:21:57 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
11:21:57 531  	    GIFT_CERTIFICATE.SENDER_NAME,
11:21:57 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
11:21:57 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
11:21:57 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
11:21:57 535  	    GIFT_CERTIFICATE.UPDATED_BY,
11:21:57 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
11:21:57 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
11:21:57 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
11:21:57 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
11:21:57 540  	    into
11:21:57 541  	    var_purchaser_group_id,
11:21:57 542  	    var_purchase_invoice_id,
11:21:57 543  	    var_offer_chain_id,
11:21:57 544  	    var_expiration_date,
11:21:57 545  	    var_purchase_date,
11:21:57 546  	    var_gift_certificate_status_id,
11:21:57 547  	    var_code,
11:21:57 548  	    var_recipient_name,
11:21:57 549  	    var_gift_message,
11:21:57 550  	    var_recipient_email,
11:21:57 551  	    var_finalized_invoice_id,
11:21:57 552  	    var_sender_email,
11:21:57 553  	    var_sender_name,
11:21:57 554  	    var_redemption_date,
11:21:57 555  	    var_redeemer_group_id,
11:21:57 556  	    var_cancelation_date,
11:21:57 557  	    var_updated_by,
11:21:57 558  	    var_update_date,
11:21:57 559  	    var_recipient_address_id,
11:21:57 560  	    var_redeemer_address_id,
11:21:57 561  	    var_recipient_notify_date
11:21:57 562  	  FROM
11:21:57 563  	    GIFT_CERTIFICATE
11:21:57 564  	  WHERE
11:21:57 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
11:21:57 566  	END;
11:21:57 567  
11:21:57 568  	BEGIN
11:21:57 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_GIFT_CERT_HISTORY(
11:21:57 570  	    in_gift_certificate_id,
11:21:57 571  	    var_purchaser_group_id,
11:21:57 572  	    var_purchase_invoice_id,
11:21:57 573  	    var_offer_chain_id,
11:21:57 574  	    var_expiration_date,
11:21:57 575  	    var_purchase_date,
11:21:57 576  	    var_gift_certificate_status_id,
11:21:57 577  	    var_code,
11:21:57 578  	    var_updated_by,
11:21:57 579  	    var_update_date,
11:21:57 580  	    in_system_activity_reason_id,
11:21:57 581  	    var_recipient_name,
11:21:57 582  	    var_gift_message,
11:21:57 583  	    var_recipient_email,
11:21:57 584  	    var_finalized_invoice_id,
11:21:57 585  	    var_sender_email,
11:21:57 586  	    var_sender_name,
11:21:57 587  	    var_redemption_date,
11:21:57 588  	    var_redeemer_group_id,
11:21:57 589  	    var_cancelation_date,
11:21:57 590  	    var_recipient_address_id,
11:21:57 591  	    var_redeemer_address_id,
11:21:57 592  	    var_recipient_notify_date
11:21:57 593  	  );
11:21:57 594  	  EXCEPTION
11:21:57 595  	    WHEN OTHERS THEN
11:21:57 596  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 597  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 598  	END;
11:21:57 599  
11:21:57 600  EXCEPTION
11:21:57 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
11:21:57 602  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 603  	  SPROC_NAME, 'No such gift certificate');
11:21:57 604  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 605  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 607  WHEN OTHERS THEN
11:21:57 608  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 610  END CREATE_GIFT_CERT_HISTORY;
11:21:57 611  
11:21:57 612  /********************************************************************/
11:21:57 613  
11:21:57 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
11:21:57 615  	in_transaction_id	     IN NUMBER,
11:21:57 616  	in_system_activity_reason_id IN NUMBER
11:21:57 617  ) AS
11:21:57 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
11:21:57 619  -- VARIABLES
11:21:57 620  var_transaction_status_id NUMBER;
11:21:57 621  var_transaction_amount	NUMBER(10,2);
11:21:57 622  var_updated_by		VARCHAR2(255);
11:21:57 623  var_update_date		DATE;
11:21:57 624  -- EXCEPTIONS
11:21:57 625  BAD_TRANSACTION_ID     EXCEPTION;
11:21:57 626  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 627  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 628  BEGIN
11:21:57 629  
11:21:57 630  	BEGIN
11:21:57 631  	  SELECT
11:21:57 632  	    TRANSACTION.TRANSACTION_STATUS_ID,
11:21:57 633  	    TRANSACTION.TRANSACTION_AMOUNT,
11:21:57 634  	    TRANSACTION.UPDATED_BY,
11:21:57 635  	    TRANSACTION.UPDATE_DATE
11:21:57 636  	    into
11:21:57 637  	    var_transaction_status_id,
11:21:57 638  	    var_transaction_amount,
11:21:57 639  	    var_updated_by,
11:21:57 640  	    var_update_date
11:21:57 641  	  FROM
11:21:57 642  	    TRANSACTION
11:21:57 643  	  WHERE
11:21:57 644  	    TRANSACTION.ID = in_transaction_id;
11:21:57 645  	  EXCEPTION
11:21:57 646  	    WHEN NO_DATA_FOUND THEN
11:21:57 647  	      RAISE BAD_TRANSACTION_ID;
11:21:57 648  	END;
11:21:57 649  
11:21:57 650  	BEGIN
11:21:57 651  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_TRANSACTION_HISTORY(
11:21:57 652  	    in_transaction_id,
11:21:57 653  	    var_transaction_status_id,
11:21:57 654  	    var_transaction_amount,
11:21:57 655  	    var_updated_by,
11:21:57 656  	    var_update_date,
11:21:57 657  	    in_system_activity_reason_id
11:21:57 658  	  );
11:21:57 659  	  EXCEPTION
11:21:57 660  	    WHEN OTHERS THEN
11:21:57 661  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 662  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 663  	END;
11:21:57 664  
11:21:57 665  EXCEPTION
11:21:57 666  WHEN BAD_TRANSACTION_ID THEN
11:21:57 667  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 668  	  SPROC_NAME, 'No such transaction');
11:21:57 669  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 670  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 671  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 672  WHEN OTHERS THEN
11:21:57 673  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 674  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 675  END CREATE_TRANSACTION_HISTORY;
11:21:57 676  
11:21:57 677  /********************************************************************/
11:21:57 678  
11:21:57 679  PROCEDURE CREATE_INVOICE_HISTORY (
11:21:57 680  /*
11:21:57 681  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 682  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 683  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:57 684  */
11:21:57 685  	in_invoice_id		     IN NUMBER,
11:21:57 686  	in_system_activity_reason_id IN NUMBER
11:21:57 687  ) AS
11:21:57 688  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
11:21:57 689  -- VARIABLES
11:21:57 690  var_invoice_status_id NUMBER;
11:21:57 691  var_updated_by	    VARCHAR2(255);
11:21:57 692  var_update_date	    DATE;
11:21:57 693  -- EXCEPTIONS
11:21:57 694  BAD_INVOICE_ID	     EXCEPTION;
11:21:57 695  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 696  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 697  BEGIN
11:21:57 698  
11:21:57 699  	BEGIN
11:21:57 700  	  SELECT
11:21:57 701  	    INVOICE.INVOICE_STATUS_ID,
11:21:57 702  	    INVOICE.UPDATED_BY,
11:21:57 703  	    INVOICE.UPDATE_DATE
11:21:57 704  	    into
11:21:57 705  	    var_invoice_status_id,
11:21:57 706  	    var_updated_by,
11:21:57 707  	    var_update_date
11:21:57 708  	  FROM
11:21:57 709  	    INVOICE
11:21:57 710  	  WHERE
11:21:57 711  	    INVOICE.ID = in_invoice_id;
11:21:57 712  	  EXCEPTION
11:21:57 713  	    WHEN NO_DATA_FOUND THEN
11:21:57 714  	      RAISE BAD_INVOICE_ID;
11:21:57 715  	END;
11:21:57 716  
11:21:57 717  	BEGIN
11:21:57 718  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_INVOICE_HISTORY(
11:21:57 719  	    in_invoice_id,
11:21:57 720  	    var_invoice_status_id,
11:21:57 721  	    var_updated_by,
11:21:57 722  	    var_update_date,
11:21:57 723  	    in_system_activity_reason_id
11:21:57 724  	  );
11:21:57 725  	  EXCEPTION
11:21:57 726  	    WHEN OTHERS THEN
11:21:57 727  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 728  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 729  	END;
11:21:57 730  
11:21:57 731  EXCEPTION
11:21:57 732  WHEN BAD_INVOICE_ID THEN
11:21:57 733  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 734  	  SPROC_NAME, 'No such invoice');
11:21:57 735  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 736  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 737  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 738  WHEN OTHERS THEN
11:21:57 739  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 740  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 741  END CREATE_INVOICE_HISTORY;
11:21:57 742  
11:21:57 743  /********************************************************************/
11:21:57 744  
11:21:57 745  PROCEDURE CREATE_LICENSE_HISTORY (
11:21:57 746  /*
11:21:57 747  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 748  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 749  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:57 750  */
11:21:57 751  	in_license_id		     IN NUMBER,
11:21:57 752  	in_system_activity_reason_id IN NUMBER
11:21:57 753  ) AS
11:21:57 754  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
11:21:57 755  -- VARIABLES
11:21:57 756  var_license_status_id	    NUMBER;
11:21:57 757  var_needs_entitlements	    NUMBER;
11:21:57 758  var_start_date		    DATE;
11:21:57 759  var_offer_id		    NUMBER;
11:21:57 760  var_subscription_id	    NUMBER;
11:21:57 761  var_invoice_id		    NUMBER;
11:21:57 762  var_end_date		    DATE;
11:21:57 763  var_is_extension		    NUMBER;
11:21:57 764  var_current_offer_index	    NUMBER;
11:21:57 765  var_current_offer_recurr_num  NUMBER;
11:21:57 766  var_updated_by		    VARCHAR2(255);
11:21:57 767  var_update_date		    DATE;
11:21:57 768  var_entitlement_end_date	    DATE;
11:21:57 769  -- EXCEPTIONS
11:21:57 770  BAD_LICENSE_ID	     EXCEPTION;
11:21:57 771  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 772  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 773  BEGIN
11:21:57 774  
11:21:57 775  	BEGIN
11:21:57 776  	  SELECT
11:21:57 777  	    LICENSE.LICENSE_STATUS_ID,
11:21:57 778  	    LICENSE.NEEDS_ENTITLEMENTS,
11:21:57 779  	    LICENSE.START_DATE,
11:21:57 780  	    LICENSE.OFFER_ID,
11:21:57 781  	    LICENSE.SUBSCRIPTION_ID,
11:21:57 782  	    LICENSE.INVOICE_ID,
11:21:57 783  	    LICENSE.END_DATE,
11:21:57 784  	    LICENSE.IS_EXTENSION,
11:21:57 785  	    LICENSE.CURRENT_OFFER_INDEX,
11:21:57 786  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:57 787  	    LICENSE.UPDATED_BY,
11:21:57 788  	    LICENSE.UPDATE_DATE,
11:21:57 789  	    LICENSE.ENTITLEMENT_END_DATE
11:21:57 790  	    into
11:21:57 791  	    var_license_status_id,
11:21:57 792  	    var_needs_entitlements,
11:21:57 793  	    var_start_date,
11:21:57 794  	    var_offer_id,
11:21:57 795  	    var_subscription_id,
11:21:57 796  	    var_invoice_id,
11:21:57 797  	    var_end_date,
11:21:57 798  	    var_is_extension,
11:21:57 799  	    var_current_offer_index,
11:21:57 800  	    var_current_offer_recurr_num,
11:21:57 801  	    var_updated_by,
11:21:57 802  	    var_update_date,
11:21:57 803  	    var_entitlement_end_date
11:21:57 804  	  FROM
11:21:57 805  	    LICENSE
11:21:57 806  	  WHERE
11:21:57 807  	    LICENSE.ID = in_license_id;
11:21:57 808  	  EXCEPTION
11:21:57 809  	    WHEN NO_DATA_FOUND THEN
11:21:57 810  	      RAISE BAD_LICENSE_ID;
11:21:57 811  	END;
11:21:57 812  
11:21:57 813  	BEGIN
11:21:57 814  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_LICENSE_HISTORY(
11:21:57 815  	    in_license_id,
11:21:57 816  	    var_license_status_id,
11:21:57 817  	    var_needs_entitlements,
11:21:57 818  	    var_start_date,
11:21:57 819  	    var_offer_id,
11:21:57 820  	    var_subscription_id,
11:21:57 821  	    var_invoice_id,
11:21:57 822  	    var_end_date,
11:21:57 823  	    var_updated_by,
11:21:57 824  	    var_update_date,
11:21:57 825  	    var_is_extension,
11:21:57 826  	    var_current_offer_index,
11:21:57 827  	    var_current_offer_recurr_num,
11:21:57 828  	    in_system_activity_reason_id,
11:21:57 829  	    var_entitlement_end_date
11:21:57 830  	  );
11:21:57 831  	  EXCEPTION
11:21:57 832  	    WHEN OTHERS THEN
11:21:57 833  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 834  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 835  	END;
11:21:57 836  
11:21:57 837  EXCEPTION
11:21:57 838  WHEN BAD_LICENSE_ID THEN
11:21:57 839  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 840  	  SPROC_NAME, 'No such license');
11:21:57 841  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 842  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 843  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 844  WHEN OTHERS THEN
11:21:57 845  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 846  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 847  END CREATE_LICENSE_HISTORY;
11:21:57 848  
11:21:57 849  /********************************************************************/
11:21:57 850  
11:21:57 851  PROCEDURE CREATE_CHARGE_HISTORY (
11:21:57 852  /*
11:21:57 853  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 854  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 855  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:57 856  */
11:21:57 857  	in_charge_id		    IN NUMBER,
11:21:57 858  	in_system_activity_reason_id IN NUMBER
11:21:57 859  ) AS
11:21:57 860  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
11:21:57 861  -- VARIABLES
11:21:57 862  var_invoice_id	     NUMBER;
11:21:57 863  var_transaction_id     NUMBER;
11:21:57 864  var_instrument_type_id NUMBER;
11:21:57 865  var_instrument_id      NUMBER;
11:21:57 866  var_charge_amount      NUMBER;
11:21:57 867  var_charge_status_id   NUMBER;
11:21:57 868  var_updated_by	     VARCHAR2(255);
11:21:57 869  var_update_date	     DATE;
11:21:57 870  -- EXCEPTIONS
11:21:57 871  BAD_CHARGE_ID	     EXCEPTION;
11:21:57 872  CAN_NOT_CREATE_HISTORY EXCEPTION;
11:21:57 873  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57 874  BEGIN
11:21:57 875  
11:21:57 876  	BEGIN
11:21:57 877  	  SELECT
11:21:57 878  	    CHARGE.INVOICE_ID,
11:21:57 879  	    CHARGE.TRANSACTION_ID,
11:21:57 880  	    CHARGE.INSTRUMENT_TYPE_ID,
11:21:57 881  	    CHARGE.INSTRUMENT_ID,
11:21:57 882  	    CHARGE.CHARGE_AMOUNT,
11:21:57 883  	    CHARGE.CHARGE_STATUS_ID,
11:21:57 884  	    CHARGE.UPDATED_BY,
11:21:57 885  	    CHARGE.UPDATE_DATE
11:21:57 886  	    into
11:21:57 887  	    var_invoice_id,
11:21:57 888  	    var_transaction_id,
11:21:57 889  	    var_instrument_type_id,
11:21:57 890  	    var_instrument_id,
11:21:57 891  	    var_charge_amount,
11:21:57 892  	    var_charge_status_id,
11:21:57 893  	    var_updated_by,
11:21:57 894  	    var_update_date
11:21:57 895  	  FROM
11:21:57 896  	    CHARGE
11:21:57 897  	  WHERE
11:21:57 898  	    CHARGE.ID = in_charge_id;
11:21:57 899  	  EXCEPTION
11:21:57 900  	    WHEN NO_DATA_FOUND THEN
11:21:57 901  	      RAISE BAD_CHARGE_ID;
11:21:57 902  	END;
11:21:57 903  
11:21:57 904  	BEGIN
11:21:57 905  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V15.CREATE_CHARGE_HISTORY (
11:21:57 906  	    in_charge_id,
11:21:57 907  	    var_invoice_id,
11:21:57 908  	    var_transaction_id,
11:21:57 909  	    var_instrument_type_id,
11:21:57 910  	    var_instrument_id,
11:21:57 911  	    var_charge_amount,
11:21:57 912  	    var_updated_by,
11:21:57 913  	    var_update_date,
11:21:57 914  	    var_charge_status_id,
11:21:57 915  	    in_system_activity_reason_id
11:21:57 916  	  );
11:21:57 917  	  EXCEPTION
11:21:57 918  	    WHEN OTHERS THEN
11:21:57 919  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 920  	      RAISE CAN_NOT_CREATE_HISTORY;
11:21:57 921  	END;
11:21:57 922  
11:21:57 923  EXCEPTION
11:21:57 924  WHEN BAD_CHARGE_ID THEN
11:21:57 925  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 926  	  SPROC_NAME, 'No such license');
11:21:57 927  WHEN CAN_NOT_CREATE_HISTORY THEN
11:21:57 928  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 929  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
11:21:57 930  WHEN OTHERS THEN
11:21:57 931  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 932  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 933  END CREATE_CHARGE_HISTORY;
11:21:57 934  
11:21:57 935  END PROCS_HISTORY_V15;
11:21:57 936  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   7  */
11:21:57   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:57   9  	out_result_set	    OUT SYS_REFCURSOR
11:21:57  10  ) AS
11:21:57  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
11:21:57  12  BEGIN
11:21:57  13  OPEN out_result_set FOR
11:21:57  14  	      SELECT
11:21:57  15  	      i.id as ITUNES_RECEIPT_ID,
11:21:57  16  	      s.id as SUBSCRIPTION_ID,
11:21:57  17  	      s.SUBSCRIPTION_STATUS_ID,
11:21:57  18  	      i.STATUS,
11:21:57  19  	      a.GROUP_ID
11:21:57  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
11:21:57  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
11:21:57  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
11:21:57  23  	      AND a.ID(+) = s.ACCOUNT_ID;
11:21:57  24  END ITUNES_RECEIPT_SUBSCRIPTION;
11:21:57  25  
11:21:57  26  
11:21:57  27  PROCEDURE CREATE_RECEIPT(
11:21:57  28  /*
11:21:57  29  Throws exceptions:
11:21:57  30  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  31  */
11:21:57  32  	  out_id      OUT NUMBER,
11:21:57  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:57  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:57  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
11:21:57  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:57  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:57  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:57  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:57  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:57  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:57  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:57  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:57  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
11:21:57  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
11:21:57  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:57  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
11:21:57  48  ) AS
11:21:57  49  -- VARIABLES
11:21:57  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
11:21:57  51  -- EXCEPTIONS
11:21:57  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:57  53  BEGIN
11:21:57  54  
11:21:57  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.CREATE_RECEIPT(
11:21:57  56  	  out_id	      =>  out_id,
11:21:57  57  	  in_subscription_id  =>  in_subscription_id,
11:21:57  58  	  in_receipt	      =>  in_receipt,
11:21:57  59  	  in_status	      =>  in_status,
11:21:57  60  	  in_quantity	      =>  in_quantity,
11:21:57  61  	  in_product_id       =>  in_product_id,
11:21:57  62  	  in_transaction_id   =>  in_transaction_id,
11:21:57  63  	  in_purchase_date    =>  in_purchase_date,
11:21:57  64  	  in_original_transaction_id  =>  in_original_transaction_id,
11:21:57  65  	  in_original_purchase_date => in_original_purchase_date,
11:21:57  66  	  in_app_item_id      =>  in_app_item_id,
11:21:57  67  	  in_version_external_id  =>  in_version_external_id,
11:21:57  68  	  in_bid	      =>  in_bid,
11:21:57  69  	  in_bvrs	      =>  in_bvrs,
11:21:57  70  	  in_expires_date     =>  in_expires_date,
11:21:57  71  	  in_created_by       =>  in_created_by
11:21:57  72  	);
11:21:57  73  
11:21:57  74  END CREATE_RECEIPT;
11:21:57  75  
11:21:57  76  PROCEDURE UPDATE_RECEIPT(
11:21:57  77  /*
11:21:57  78  Throws exceptions:
11:21:57  79  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57  80  */
11:21:57  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
11:21:57  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
11:21:57  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
11:21:57  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
11:21:57  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
11:21:57  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
11:21:57  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
11:21:57  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
11:21:57  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
11:21:57  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
11:21:57  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
11:21:57  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
11:21:57  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
11:21:57  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
11:21:57  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
11:21:57  96  	  in_is_expired       IN NUMBER
11:21:57  97  ) AS
11:21:57  98  CANCEL_DATE DATE;
11:21:57  99  BEGIN
11:21:57 100  	-- see if cancel date is already set
11:21:57 101  	BEGIN
11:21:57 102  	  SELECT
11:21:57 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
11:21:57 104  	  FROM
11:21:57 105  	    ITUNES_RECEIPT IR
11:21:57 106  	  WHERE
11:21:57 107  	    IR.ID = in_id;
11:21:57 108  	EXCEPTION
11:21:57 109  	  WHEN NO_DATA_FOUND THEN
11:21:57 110  	    CANCEL_DATE := NULL;
11:21:57 111  	END;
11:21:57 112  
11:21:57 113  	-- only update cancel date if it isn't already set and the receipt is expired
11:21:57 114  	IF in_is_expired = 1 THEN
11:21:57 115  	  IF CANCEL_DATE IS NULL THEN
11:21:57 116  	    CANCEL_DATE := SYSDATE;
11:21:57 117  	  END IF;
11:21:57 118  	ELSE
11:21:57 119  	  CANCEL_DATE := NULL;
11:21:57 120  	END IF;
11:21:57 121  
11:21:57 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.UPDATE_RECEIPT(
11:21:57 123  	  in_id => in_id,
11:21:57 124  	  in_receipt => in_receipt,
11:21:57 125  	  in_status => in_status,
11:21:57 126  	  in_quantity => in_quantity,
11:21:57 127  	  in_product_id => in_product_id,
11:21:57 128  	  in_transaction_id => in_transaction_id,
11:21:57 129  	  in_purchase_date => in_purchase_date,
11:21:57 130  	  in_original_transaction_id => in_original_transaction_id,
11:21:57 131  	  in_original_purchase_date => in_original_purchase_date,
11:21:57 132  	  in_app_item_id => in_app_item_id,
11:21:57 133  	  in_version_external_id => in_version_external_id,
11:21:57 134  	  in_bid => in_bid,
11:21:57 135  	  in_bvrs => in_bvrs,
11:21:57 136  	  in_expires_date => in_expires_date,
11:21:57 137  	  in_updated_by => in_updated_by,
11:21:57 138  	  in_cancel_date => CANCEL_DATE
11:21:57 139  	);
11:21:57 140  END UPDATE_RECEIPT;
11:21:57 141  
11:21:57 142  PROCEDURE LINK_ITUNES_RECEIPT(
11:21:57 143  /*
11:21:57 144  Throws exceptions:
11:21:57 145  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 146  */
11:21:57 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
11:21:57 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
11:21:57 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
11:21:57 150  ) AS
11:21:57 151  BEGIN
11:21:57 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.LINK_ITUNES_RECEIPT(
11:21:57 153  		      in_id => in_id,
11:21:57 154  		      in_subscription_id => in_subscription_id,
11:21:57 155  		      in_updated_by => in_updated_by
11:21:57 156  		      );
11:21:57 157  END LINK_ITUNES_RECEIPT;
11:21:57 158  
11:21:57 159  PROCEDURE MARK_RECEIPT_CHECKED(
11:21:57 160  /*
11:21:57 161  Throws exceptions:
11:21:57 162  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 163  */
11:21:57 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
11:21:57 165  ) AS
11:21:57 166  BEGIN
11:21:57 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V15.MARK_RECEIPT_CHECKED(
11:21:57 168  	  in_id => in_id
11:21:57 169  	);
11:21:57 170  END MARK_RECEIPT_CHECKED;
11:21:57 171  
11:21:57 172  PROCEDURE GET_ITUNES_RECEIPTS (
11:21:57 173  /*
11:21:57 174  Throws exceptions:
11:21:57 175  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 176  */
11:21:57 177  	out_result_set	    OUT SYS_REFCURSOR,
11:21:57 178  	in_row_number	    IN NUMBER DEFAULT 500
11:21:57 179  ) AS
11:21:57 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
11:21:57 181  BEGIN
11:21:57 182  OPEN out_result_set FOR
11:21:57 183  SELECT * FROM
11:21:57 184  (
11:21:57 185  	SELECT * FROM
11:21:57 186  	(
11:21:57 187  	  SELECT
11:21:57 188  	    IR.ID,
11:21:57 189  	    IR.SUBSCRIPTION_ID,
11:21:57 190  	    IR.RECEIPT,
11:21:57 191  	    IR.STATUS,
11:21:57 192  	    IR.QUANTITY,
11:21:57 193  	    IR.PRODUCT_ID,
11:21:57 194  	    IR.TRANSACTION_ID,
11:21:57 195  	    IR.PURCHASE_DATE,
11:21:57 196  	    IR.ORIGINAL_TRANSACTION_ID,
11:21:57 197  	    IR.ORIGINAL_PURCHASE_DATE,
11:21:57 198  	    IR.APP_ITEM_ID,
11:21:57 199  	    IR.VERSION_EXTERNAL_ID,
11:21:57 200  	    IR.BID,
11:21:57 201  	    IR.BVRS,
11:21:57 202  	    IR.EXPIRES_DATE,
11:21:57 203  	    IR.CREATE_DATe,
11:21:57 204  	    IR.CREATED_BY,
11:21:57 205  	    IR.UPDATE_DATE,
11:21:57 206  	    IR.UPDATED_BY,
11:21:57 207  	    IR.LAST_CHECK_DATE,
11:21:57 208  	    OC.VENDOR_SOURCE_ID
11:21:57 209  	  FROM
11:21:57 210  	    CORE_OWNER.ITUNES_RECEIPT IR
11:21:57 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
11:21:57 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
11:21:57 213  	  WHERE
11:21:57 214  	    NOT EXISTS
11:21:57 215  	    (
11:21:57 216  	      SELECT NULL
11:21:57 217  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:57 218  	      WHERE PROCESS_NAME = SPROC_NAME
11:21:57 219  		AND GENERIC_ID = IR.ID
11:21:57 220  	    ) AND
11:21:57 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
11:21:57 222  	    ROWNUM <= in_row_number*10
11:21:57 223  	)
11:21:57 224  	ORDER BY dbms_random.value
11:21:57 225  )
11:21:57 226  WHERE
11:21:57 227  	ROWNUM <= in_row_number;
11:21:57 228  
11:21:57 229  END GET_ITUNES_RECEIPTS;
11:21:57 230  
11:21:57 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
11:21:57 232  /*
11:21:57 233  Throws exceptions:
11:21:57 234  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 235  */
11:21:57 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
11:21:57 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
11:21:57 238  ) AS
11:21:57 239  BEGIN
11:21:57 240  
11:21:57 241  SELECT
11:21:57 242  	  oc.vendor_source_id
11:21:57 243  INTO
11:21:57 244  	  out_vendor_source_id
11:21:57 245  FROM
11:21:57 246  	  offer_chain_meta_data ocmd
11:21:57 247  JOIN
11:21:57 248  	  offer_chain oc
11:21:57 249  ON
11:21:57 250  	  ocmd.offer_chain_id = oc.id
11:21:57 251  WHERE
11:21:57 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
11:21:57 253  AND ocmd.value = in_itunes_pid
11:21:57 254  AND rownum <= 1;
11:21:57 255  
11:21:57 256  END GET_VENDOR_FROM_ITUNES_PID;
11:21:57 257  
11:21:57 258  END PROCS_ITUNES_RECEIPT_V15;
11:21:57 259  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE ADD_LINE_ITEMS(
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   8  */
11:21:57   9  	in_invoice_id IN NUMBER,
11:21:57  10  	in_offer_id   IN NUMBER,
11:21:57  11  	in_created_by IN VARCHAR2
11:21:57  12  ) AS
11:21:57  13  -- VARIABLES
11:21:57  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
11:21:57  15  temp_invoice_id NUMBER;
11:21:57  16  temp_offer_id   NUMBER;
11:21:57  17  
11:21:57  18  var_line_item_data SYS_REFCURSOR;
11:21:57  19  var_new_line_item_id NUMBER;
11:21:57  20  var_product_unit_price NUMBER (10,6);
11:21:57  21  var_product_offering_price NUMBER(10,6);
11:21:57  22  var_product_offering_oprice NUMBER(10,6);
11:21:57  23  var_product_quantity NUMBER;
11:21:57  24  var_product_offering_id NUMBER;
11:21:57  25  
11:21:57  26  var_line_item_price	  NUMBER(10,2);
11:21:57  27  var_discount_fixed_amount   NUMBER(10,6);
11:21:57  28  var_discount_percent_amount NUMBER(10,2);
11:21:57  29  
11:21:57  30  
11:21:57  31  -- EXCEPTIONS
11:21:57  32  BAD_INVOICE_ID EXCEPTION;
11:21:57  33  BAD_OFFER_ID EXCEPTION;
11:21:57  34  BAD_DISCOUNT EXCEPTION;
11:21:57  35  BEGIN
11:21:57  36  
11:21:57  37  	-- Check that given invoice exists
11:21:57  38  	BEGIN
11:21:57  39  	  SELECT
11:21:57  40  	    INVOICE.ID into temp_invoice_id
11:21:57  41  	  FROM
11:21:57  42  	    INVOICE
11:21:57  43  	  WHERE
11:21:57  44  	    INVOICE.ID = in_invoice_id;
11:21:57  45  
11:21:57  46  	  EXCEPTION
11:21:57  47  	    WHEN NO_DATA_FOUND THEN
11:21:57  48  	      RAISE BAD_INVOICE_ID;
11:21:57  49  	END;
11:21:57  50  
11:21:57  51  	-- Check that given offer exists
11:21:57  52  	BEGIN
11:21:57  53  	  SELECT
11:21:57  54  	    OFFER.ID into temp_offer_id
11:21:57  55  	  FROM
11:21:57  56  	    OFFER
11:21:57  57  	  WHERE
11:21:57  58  	    OFFER.ID = in_offer_id;
11:21:57  59  
11:21:57  60  	  EXCEPTION
11:21:57  61  	    WHEN NO_DATA_FOUND THEN
11:21:57  62  	      RAISE BAD_OFFER_ID;
11:21:57  63  	END;
11:21:57  64  
11:21:57  65  	-- Get product_offering data
11:21:57  66  	OPEN var_line_item_data FOR
11:21:57  67  	SELECT
11:21:57  68  	  PRODUCT_OFFERING.ID,
11:21:57  69  	  PRODUCT_OFFERING.UNIT_PRICE,
11:21:57  70  	  PRODUCT_OFFERING.QUANTITY
11:21:57  71  	FROM
11:21:57  72  	  OFFER_PRODUCT_OFFERING
11:21:57  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57  74  	WHERE
11:21:57  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
11:21:57  76  
11:21:57  77  	-- insert line items
11:21:57  78  	-- add discounts to line items
11:21:57  79  	LOOP
11:21:57  80  	  FETCH var_line_item_data INTO
11:21:57  81  	    var_product_offering_id,
11:21:57  82  	    var_product_unit_price,
11:21:57  83  	    var_product_quantity;
11:21:57  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
11:21:57  85  
11:21:57  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
11:21:57  87  	  var_product_offering_price := var_product_offering_oprice;
11:21:57  88  
11:21:57  89  	  -- Apply discounts to line_item
11:21:57  90  	  BEGIN
11:21:57  91  	    SELECT
11:21:57  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
11:21:57  93  	    FROM
11:21:57  94  	      DISCOUNT_PRODUCT_OFFERING
11:21:57  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
11:21:57  96  	    WHERE
11:21:57  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
11:21:57  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
11:21:57  99  	    EXCEPTION
11:21:57 100  	    WHEN NO_DATA_FOUND THEN
11:21:57 101  	      var_discount_fixed_amount := NULL;
11:21:57 102  	  END;
11:21:57 103  
11:21:57 104  	  BEGIN
11:21:57 105  	    SELECT
11:21:57 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
11:21:57 107  	    FROM
11:21:57 108  	      DISCOUNT_PRODUCT_OFFERING
11:21:57 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
11:21:57 110  	    WHERE
11:21:57 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
11:21:57 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
11:21:57 113  	    EXCEPTION
11:21:57 114  	    WHEN NO_DATA_FOUND THEN
11:21:57 115  	      var_discount_percent_amount := NULL;
11:21:57 116  	  END;
11:21:57 117  
11:21:57 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
11:21:57 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
11:21:57 120  	  END IF;
11:21:57 121  
11:21:57 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
11:21:57 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
11:21:57 124  	  END IF;
11:21:57 125  
11:21:57 126  	  var_line_item_price := PROCS_COMMON_V15.ROUND_10_6_TO_10_2(var_product_offering_price);
11:21:57 127  
11:21:57 128  	  IF (var_line_item_price < 0) THEN
11:21:57 129  	      RAISE BAD_DISCOUNT;
11:21:57 130  	  END IF;
11:21:57 131  
11:21:57 132  	  var_new_line_item_id := NULL;
11:21:57 133  	  PROCS_LINE_ITEMS_CRU_V15.CREATE_LINE_ITEM(
11:21:57 134  	    inout_line_item_id	=> var_new_line_item_id,
11:21:57 135  	    in_product_offer_id => var_product_offering_id,
11:21:57 136  	    in_invoice_id	=> in_invoice_id,
11:21:57 137  	    in_amount		=> var_line_item_price,
11:21:57 138  	    in_created_by	=> in_created_by,
11:21:57 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
11:21:57 140  	    in_taxes_amount	=> NULL
11:21:57 141  	  );
11:21:57 142  
11:21:57 143  	  FOR f_discount IN (
11:21:57 144  	    SELECT
11:21:57 145  	      DISCOUNT.ID
11:21:57 146  	    FROM
11:21:57 147  	      DISCOUNT_PRODUCT_OFFERING
11:21:57 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
11:21:57 149  	    WHERE
11:21:57 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
11:21:57 151  	  )
11:21:57 152  	  LOOP
11:21:57 153  	    PROCS_LINE_ITEMS_CRU_V15.CREATE_DISCOUNT_LINE_ITEM(
11:21:57 154  	      in_discount_id =>  f_discount.ID,
11:21:57 155  	      in_line_item_id => var_new_line_item_id
11:21:57 156  	    );
11:21:57 157  	  END LOOP;
11:21:57 158  	END LOOP;
11:21:57 159  
11:21:57 160  EXCEPTION
11:21:57 161  WHEN BAD_INVOICE_ID THEN
11:21:57 162  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 163  	  SPROC_NAME, 'No such license');
11:21:57 164  WHEN BAD_OFFER_ID THEN
11:21:57 165  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 166  	  SPROC_NAME, 'No such offer');
11:21:57 167  WHEN BAD_DISCOUNT THEN
11:21:57 168  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 169  	  SPROC_NAME, 'Bad Discount');
11:21:57 170  WHEN OTHERS THEN
11:21:57 171  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 173  END ADD_LINE_ITEMS;
11:21:57 174  
11:21:57 175  /******************************************************************************/
11:21:57 176  
11:21:57 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
11:21:57 178  	in_line_item_id    IN NUMBER,
11:21:57 179  	in_amount	   IN NUMBER,
11:21:57 180  	in_discount_amount IN NUMBER,
11:21:57 181  	in_taxes_amount    IN NUMBER
11:21:57 182  ) AS
11:21:57 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
11:21:57 184  -- VARIABLES
11:21:57 185  temp_line_item_id NUMBER;
11:21:57 186  -- EXCEPTIONS
11:21:57 187  BAD_LINE_ITEM_ID EXCEPTION;
11:21:57 188  BEGIN
11:21:57 189  
11:21:57 190  	-- Check that line item exists
11:21:57 191  	BEGIN
11:21:57 192  	  SELECT
11:21:57 193  	    LINE_ITEM.ID into temp_line_item_id
11:21:57 194  	  FROM
11:21:57 195  	    LINE_ITEM
11:21:57 196  	  WHERE
11:21:57 197  	    LINE_ITEM.ID = in_line_item_id;
11:21:57 198  	  EXCEPTION
11:21:57 199  	    WHEN NO_DATA_FOUND THEN
11:21:57 200  	      RAISE BAD_LINE_ITEM_ID;
11:21:57 201  	END;
11:21:57 202  
11:21:57 203  	-- Update line item
11:21:57 204  	PROCS_LINE_ITEMS_CRU_V15.UPDATE_LINE_ITEM(
11:21:57 205  	  in_line_item_id    => in_line_item_id,
11:21:57 206  	  in_amount	     => in_amount,
11:21:57 207  	  in_discount_amount => in_discount_amount,
11:21:57 208  	  in_taxes_amount    => in_taxes_amount
11:21:57 209  	);
11:21:57 210  
11:21:57 211  EXCEPTION
11:21:57 212  WHEN BAD_LINE_ITEM_ID THEN
11:21:57 213  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 214  	  SPROC_NAME, 'No such line item');
11:21:57 215  WHEN OTHERS THEN
11:21:57 216  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 218  END UPDATE_LINE_ITEM_AMOUNT;
11:21:57 219  
11:21:57 220  /******************************************************************************/
11:21:57 221  
11:21:57 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:57 223  /*
11:21:57 224  Throws exceptions:
11:21:57 225  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 226  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 227  */
11:21:57 228  	in_invoice_id  IN NUMBER,
11:21:57 229  	out_result_set OUT SYS_REFCURSOR
11:21:57 230  ) AS
11:21:57 231  -- VARIABLES
11:21:57 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
11:21:57 233  temp_invoice_id NUMBER;
11:21:57 234  
11:21:57 235  -- EXCEPTIONS
11:21:57 236  BAD_INVOICE_ID EXCEPTION;
11:21:57 237  BEGIN
11:21:57 238  
11:21:57 239  	-- Check that given invoice exists
11:21:57 240  	BEGIN
11:21:57 241  	  SELECT
11:21:57 242  	    INVOICE.ID into temp_invoice_id
11:21:57 243  	  FROM
11:21:57 244  	    INVOICE
11:21:57 245  	  WHERE
11:21:57 246  	    INVOICE.ID = in_invoice_id;
11:21:57 247  	  EXCEPTION
11:21:57 248  	    WHEN NO_DATA_FOUND THEN
11:21:57 249  	      RAISE BAD_INVOICE_ID;
11:21:57 250  	END;
11:21:57 251  
11:21:57 252  	-- Select line items
11:21:57 253  	OPEN out_result_set FOR
11:21:57 254  	SELECT
11:21:57 255  	  LINE_ITEM.ID,
11:21:57 256  	  LINE_ITEM.AMOUNT,
11:21:57 257  	  LINE_ITEM.CREATE_DATE,
11:21:57 258  	  LINE_ITEM.CREATED_BY,
11:21:57 259  	  LINE_ITEM.INVOICE_ID,
11:21:57 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
11:21:57 261  	  LINE_ITEM.TAXES_AMOUNT,
11:21:57 262  	  LINE_ITEM.PRODUCT_OFFER_ID
11:21:57 263  	FROM
11:21:57 264  	  LINE_ITEM
11:21:57 265  	WHERE
11:21:57 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
11:21:57 267  
11:21:57 268  EXCEPTION
11:21:57 269  WHEN BAD_INVOICE_ID THEN
11:21:57 270  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 271  	  SPROC_NAME, 'No such invoice');
11:21:57 272  WHEN OTHERS THEN
11:21:57 273  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 275  END GET_INVOICE_LINE_ITEMS;
11:21:57 276  
11:21:57 277  /******************************************************************************/
11:21:57 278  
11:21:57 279  PROCEDURE GET_LINE_ITEM_TAXES (
11:21:57 280  /*
11:21:57 281  Throws exceptions:
11:21:57 282  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 283  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 284  */
11:21:57 285  	in_line_item_id IN  NUMBER,
11:21:57 286  	out_result_set	OUT SYS_REFCURSOR
11:21:57 287  ) AS
11:21:57 288  -- VARIABLES
11:21:57 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
11:21:57 290  temp_line_item_id NUMBER;
11:21:57 291  -- EXCEPTIONS
11:21:57 292  BAD_LINE_ITEM_ID EXCEPTION;
11:21:57 293  BEGIN
11:21:57 294  
11:21:57 295  	-- Check that line item exists
11:21:57 296  	BEGIN
11:21:57 297  	  SELECT
11:21:57 298  	    LINE_ITEM.ID into temp_line_item_id
11:21:57 299  	  FROM
11:21:57 300  	    LINE_ITEM
11:21:57 301  	  WHERE
11:21:57 302  	    LINE_ITEM.ID = in_line_item_id;
11:21:57 303  	  EXCEPTION
11:21:57 304  	    WHEN NO_DATA_FOUND THEN
11:21:57 305  	      RAISE BAD_LINE_ITEM_ID;
11:21:57 306  	END;
11:21:57 307  
11:21:57 308  	-- Get all taxes for given line item
11:21:57 309  	OPEN out_result_set FOR
11:21:57 310  	SELECT
11:21:57 311  	  TAX.ID,
11:21:57 312  	  TAX.CALCULATED_AMOUNT,
11:21:57 313  	  TAX.CREATE_DATE,
11:21:57 314  	  TAX.CREATED_BY,
11:21:57 315  	  TAX.EFFECTIVE_RATE,
11:21:57 316  	  TAX.EXT_RESULT,
11:21:57 317  	  TAX.EXT_TAX_TYPE,
11:21:57 318  	  TAX.IMPOSITION,
11:21:57 319  	  TAX.IMPOSITION_TYPE,
11:21:57 320  	  TAX.JURISDICTION_ID,
11:21:57 321  	  TAX.JURISDICTION_LEVEL_ID,
11:21:57 322  	  TAX.JURISDICTION_NAME,
11:21:57 323  	  TAX.LINE_ITEM_ID,
11:21:57 324  	  TAX.TAX_RULE_ID,
11:21:57 325  	  TAX.TAX_TYPE_ID,
11:21:57 326  	  TAX.TAXABLE_AMOUNT
11:21:57 327  	FROM
11:21:57 328  	  TAX
11:21:57 329  	WHERE
11:21:57 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
11:21:57 331  
11:21:57 332  EXCEPTION
11:21:57 333  WHEN BAD_LINE_ITEM_ID THEN
11:21:57 334  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 335  	  SPROC_NAME, 'No such line item');
11:21:57 336  WHEN OTHERS THEN
11:21:57 337  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 339  END GET_LINE_ITEM_TAXES;
11:21:57 340  
11:21:57 341  -- norlov: #38770
11:21:57 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
11:21:57 343  /*
11:21:57 344  Throws exceptions:
11:21:57 345  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 346  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 347  */
11:21:57 348  	in_line_item_id IN  NUMBER,
11:21:57 349  	out_result_set	OUT SYS_REFCURSOR
11:21:57 350  ) AS
11:21:57 351  -- VARIABLES
11:21:57 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
11:21:57 353  temp_line_item_id NUMBER;
11:21:57 354  -- EXCEPTIONS
11:21:57 355  BAD_LINE_ITEM_ID EXCEPTION;
11:21:57 356  BEGIN
11:21:57 357  
11:21:57 358  	-- Check that line item exists
11:21:57 359  	BEGIN
11:21:57 360  	  SELECT
11:21:57 361  	    LINE_ITEM.ID into temp_line_item_id
11:21:57 362  	  FROM
11:21:57 363  	    LINE_ITEM
11:21:57 364  	  WHERE
11:21:57 365  	    LINE_ITEM.ID = in_line_item_id;
11:21:57 366  	  EXCEPTION
11:21:57 367  	    WHEN NO_DATA_FOUND THEN
11:21:57 368  	      RAISE BAD_LINE_ITEM_ID;
11:21:57 369  	END;
11:21:57 370  
11:21:57 371  	-- Get all discounts for given line item
11:21:57 372  	OPEN out_result_set FOR
11:21:57 373  	SELECT
11:21:57 374  	  DISCOUNT.FIXED_AMOUNT,
11:21:57 375  	  DISCOUNT.NAME,
11:21:57 376  	  DISCOUNT.ID,
11:21:57 377  	  DISCOUNT.PERCENT_AMOUNT
11:21:57 378  	FROM
11:21:57 379  	  DISCOUNT_LINE_ITEM
11:21:57 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
11:21:57 381  	WHERE
11:21:57 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
11:21:57 383  
11:21:57 384  EXCEPTION
11:21:57 385  WHEN BAD_LINE_ITEM_ID THEN
11:21:57 386  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 387  	  SPROC_NAME, 'No such line item');
11:21:57 388  WHEN OTHERS THEN
11:21:57 389  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 391  END GET_LINE_ITEM_DISCOUNTS;
11:21:57 392  /******************************************************************************/
11:21:57 393  
11:21:57 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
11:21:57 395  /*
11:21:57 396  Throws exceptions:
11:21:57 397  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 398  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 399  */
11:21:57 400  	in_line_item_id     IN	NUMBER,
11:21:57 401  	out_amount	    OUT NUMBER
11:21:57 402  ) AS
11:21:57 403  -- VARIABLES
11:21:57 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
11:21:57 405  -- EXCEPTIONS
11:21:57 406  BAD_LINE_ITEM_ID EXCEPTION;
11:21:57 407  BEGIN
11:21:57 408  
11:21:57 409  	BEGIN
11:21:57 410  	  SELECT
11:21:57 411  	    LINE_ITEM.AMOUNT into out_amount
11:21:57 412  	  FROM
11:21:57 413  	    LINE_ITEM
11:21:57 414  	  WHERE
11:21:57 415  	    LINE_ITEM.ID = in_line_item_id;
11:21:57 416  	  EXCEPTION
11:21:57 417  	    WHEN NO_DATA_FOUND THEN
11:21:57 418  	      RAISE BAD_LINE_ITEM_ID;
11:21:57 419  	END;
11:21:57 420  
11:21:57 421  EXCEPTION
11:21:57 422  WHEN BAD_LINE_ITEM_ID THEN
11:21:57 423  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 424  	  SPROC_NAME, 'No such line item');
11:21:57 425  WHEN OTHERS THEN
11:21:57 426  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 428  END CALCULATE_LINE_ITEM_AMOUNT;
11:21:57 429  
11:21:57 430  /******************************************************************************/
11:21:57 431  
11:21:57 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
11:21:57 433  /*
11:21:57 434  Throws exceptions:
11:21:57 435  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 436  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 437  */
11:21:57 438  	in_line_item_id     IN	NUMBER
11:21:57 439  ) RETURN NUMBER AS
11:21:57 440  var_invoice_amount NUMBER(10, 2);
11:21:57 441  BEGIN
11:21:57 442  	PROCS_LINE_ITEMS_V15.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
11:21:57 443  	RETURN var_invoice_amount;
11:21:57 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
11:21:57 445  
11:21:57 446  END PROCS_LINE_ITEMS_V15;
11:21:57 447  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V15" AS
11:21:57   2  
11:21:57   3  /*
11:21:57   4  PROCEDURE INITIALIZE_SYSTEM AS
11:21:57   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
11:21:57   6  -- VARIABLES
11:21:57   7  var_account_ids SYS_REFCURSOR;
11:21:57   8  var_account_id  NUMBER;
11:21:57   9  BEGIN
11:21:57  10  
11:21:57  11  	OPEN var_account_ids FOR
11:21:57  12  	SELECT
11:21:57  13  	  ACCOUNT.ID
11:21:57  14  	FROM
11:21:57  15  	  ACCOUNT;
11:21:57  16  
11:21:57  17  	LOOP
11:21:57  18  	  FETCH var_account_ids into var_account_id;
11:21:57  19  	  EXIT WHEN var_account_ids%NOTFOUND;
11:21:57  20  	  BEGIN
11:21:57  21  	    INITIALIZE_ACCOUNT(var_account_id);
11:21:57  22  	    EXCEPTION
11:21:57  23  	      WHEN OTHERS THEN
11:21:57  24  		NULL;
11:21:57  25  	  END;
11:21:57  26  	END LOOP;
11:21:57  27  
11:21:57  28  END INITIALIZE_SYSTEM;
11:21:57  29  
11:21:57  30  PROCEDURE INITIALIZE_ACCOUNT (
11:21:57  31  	in_account_id IN NUMBER
11:21:57  32  ) AS
11:21:57  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
11:21:57  34  -- EXCEPTIONS
11:21:57  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
11:21:57  36  BEGIN
11:21:57  37  
11:21:57  38  	BEGIN
11:21:57  39  	  INSERT INTO ACCOUNT_LOCK(
11:21:57  40  	    ACCOUNT_ID,
11:21:57  41  	    LOCK_KEY,
11:21:57  42  	    END_DATE,
11:21:57  43  	    CREATED_BY,
11:21:57  44  	    REASON
11:21:57  45  	  ) VALUES (
11:21:57  46  	    in_account_id,
11:21:57  47  	    'initialization key',
11:21:57  48  	    SYSDATE,
11:21:57  49  	    'system',
11:21:57  50  	    'initialization'
11:21:57  51  	  );
11:21:57  52  	  EXCEPTION
11:21:57  53  	    WHEN DUP_VAL_ON_INDEX THEN
11:21:57  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
11:21:57  55  	END;
11:21:57  56  
11:21:57  57  EXCEPTION
11:21:57  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
11:21:57  59  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:57  60  	  SPROC_NAME, 'Account already initialized');
11:21:57  61  WHEN OTHERS THEN
11:21:57  62  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  64  END;
11:21:57  65  
11:21:57  66  PROCEDURE INITIALIZE_GROUP (
11:21:57  67  	in_group_id IN NUMBER
11:21:57  68  ) AS
11:21:57  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
11:21:57  70  -- VARIABLES
11:21:57  71  var_account_id NUMBER;
11:21:57  72  -- EXCEPTIONS
11:21:57  73  BAD_GROUP_ID		EXCEPTION;
11:21:57  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
11:21:57  75  BEGIN
11:21:57  76  
11:21:57  77  	BEGIN
11:21:57  78  	  SELECT
11:21:57  79  	    ACCOUNT.ID into var_account_id
11:21:57  80  	  FROM
11:21:57  81  	    ACCOUNT
11:21:57  82  	  WHERE
11:21:57  83  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:57  84  	  EXCEPTION
11:21:57  85  	    WHEN NO_DATA_FOUND THEN
11:21:57  86  	     RAISE BAD_GROUP_ID;
11:21:57  87  	END;
11:21:57  88  
11:21:57  89  	BEGIN
11:21:57  90  	  INSERT INTO ACCOUNT_LOCK (
11:21:57  91  	    ACCOUNT_ID,
11:21:57  92  	    LOCK_KEY,
11:21:57  93  	    END_DATE,
11:21:57  94  	    CREATED_BY,
11:21:57  95  	    REASON
11:21:57  96  	  ) VALUES (
11:21:57  97  	    var_account_id,
11:21:57  98  	    'initialization key',
11:21:57  99  	    SYSDATE,
11:21:57 100  	    'system',
11:21:57 101  	    'initialization'
11:21:57 102  	  );
11:21:57 103  	  EXCEPTION
11:21:57 104  	    WHEN DUP_VAL_ON_INDEX THEN
11:21:57 105  	      RAISE GROUP_ALREADY_INITIALIZED;
11:21:57 106  	END;
11:21:57 107  
11:21:57 108  EXCEPTION
11:21:57 109  WHEN BAD_GROUP_ID THEN
11:21:57 110  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 111  	  SPROC_NAME, 'No such account with given group id');
11:21:57 112  WHEN GROUP_ALREADY_INITIALIZED THEN
11:21:57 113  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:57 114  	  SPROC_NAME, 'Group already initialized');
11:21:57 115  WHEN OTHERS THEN
11:21:57 116  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 118  END INITIALIZE_GROUP;
11:21:57 119  */
11:21:57 120  
11:21:57 121  PROCEDURE LOCK_ACCOUNT (
11:21:57 122  	in_group_id    IN NUMBER,
11:21:57 123  	in_lock_key    IN VARCHAR2,
11:21:57 124  	in_seconds_num IN NUMBER,
11:21:57 125  	in_created_by  IN VARCHAR2,
11:21:57 126  	in_reason      IN VARCHAR2
11:21:57 127  ) AS
11:21:57 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
11:21:57 129  -- CONSTANTS
11:21:57 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
11:21:57 131  -- VARIABLES
11:21:57 132  var_account_id NUMBER;
11:21:57 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:57 134  var_date		DATE := SYSDATE;
11:21:57 135  var_lock_end_date DATE;
11:21:57 136  -- EXCEPTIONS
11:21:57 137  BAD_GROUP_ID   EXCEPTION;
11:21:57 138  ALREADY_LOCKED EXCEPTION;
11:21:57 139  BEGIN
11:21:57 140  
11:21:57 141  	BEGIN
11:21:57 142  	  SELECT
11:21:57 143  	    ACCOUNT.ID into var_account_id
11:21:57 144  	  FROM
11:21:57 145  	    ACCOUNT
11:21:57 146  	  WHERE
11:21:57 147  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:57 148  	  EXCEPTION
11:21:57 149  	    WHEN NO_DATA_FOUND THEN
11:21:57 150  	      RAISE BAD_GROUP_ID;
11:21:57 151  	END;
11:21:57 152  
11:21:57 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
11:21:57 154  
11:21:57 155  	BEGIN
11:21:57 156  
11:21:57 157  	  INSERT INTO ACCOUNT_LOCK (
11:21:57 158  	    ACCOUNT_ID,
11:21:57 159  	    LOCK_KEY,
11:21:57 160  	    END_DATE,
11:21:57 161  	    CREATED_BY,
11:21:57 162  	    REASON
11:21:57 163  	  ) VALUES (
11:21:57 164  	    var_account_id,
11:21:57 165  	    in_lock_key,
11:21:57 166  	    var_lock_end_date,
11:21:57 167  	    in_created_by,
11:21:57 168  	    in_reason
11:21:57 169  	  );
11:21:57 170  
11:21:57 171  	  EXCEPTION
11:21:57 172  	    WHEN DUP_VAL_ON_INDEX THEN
11:21:57 173  	      -- This rows was created before... I will try to update it
11:21:57 174  	      BEGIN
11:21:57 175  
11:21:57 176  		UPDATE
11:21:57 177  		  ACCOUNT_LOCK
11:21:57 178  		SET
11:21:57 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
11:21:57 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
11:21:57 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
11:21:57 182  		  ACCOUNT_LOCK.REASON = in_reason
11:21:57 183  		WHERE
11:21:57 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
11:21:57 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
11:21:57 186  
11:21:57 187  		IF SQL%ROWCOUNT = 0 THEN
11:21:57 188  		  RAISE ALREADY_LOCKED;
11:21:57 189  		END IF;
11:21:57 190  
11:21:57 191  	      END;
11:21:57 192  	END;
11:21:57 193  
11:21:57 194  EXCEPTION
11:21:57 195  WHEN BAD_GROUP_ID THEN
11:21:57 196  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 197  	  SPROC_NAME, 'No such group id');
11:21:57 198  WHEN ALREADY_LOCKED THEN
11:21:57 199  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:57 200  	  SPROC_NAME, 'Account already locked');
11:21:57 201  WHEN OTHERS THEN
11:21:57 202  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 204  END LOCK_ACCOUNT;
11:21:57 205  
11:21:57 206  /******************************************************************************/
11:21:57 207  
11:21:57 208  PROCEDURE RELEASE_LOCK (
11:21:57 209  	in_group_id IN NUMBER,
11:21:57 210  	in_lock_key IN VARCHAR2
11:21:57 211  ) AS
11:21:57 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
11:21:57 213  -- VARIABLES
11:21:57 214  var_account_id NUMBER;
11:21:57 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
11:21:57 216  var_date DATE := SYSDATE;
11:21:57 217  -- EXCEPTIONS
11:21:57 218  BAD_GROUP_ID		EXCEPTION;
11:21:57 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
11:21:57 220  BEGIN
11:21:57 221  
11:21:57 222  	BEGIN
11:21:57 223  	  SELECT
11:21:57 224  	    ACCOUNT.ID into var_account_id
11:21:57 225  	  FROM
11:21:57 226  	    ACCOUNT
11:21:57 227  	  WHERE
11:21:57 228  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:57 229  	  EXCEPTION
11:21:57 230  	    WHEN NO_DATA_FOUND THEN
11:21:57 231  	      RAISE BAD_GROUP_ID;
11:21:57 232  	END;
11:21:57 233  
11:21:57 234  	UPDATE
11:21:57 235  	  ACCOUNT_LOCK
11:21:57 236  	SET
11:21:57 237  	  ACCOUNT_LOCK.END_DATE = var_date
11:21:57 238  	WHERE
11:21:57 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
11:21:57 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
11:21:57 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
11:21:57 242  
11:21:57 243  	IF SQL%ROWCOUNT = 0 THEN
11:21:57 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
11:21:57 245  	END IF;
11:21:57 246  
11:21:57 247  EXCEPTION
11:21:57 248  WHEN BAD_GROUP_ID THEN
11:21:57 249  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 250  	  SPROC_NAME, 'No such group id');
11:21:57 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
11:21:57 252  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:57 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
11:21:57 254  WHEN OTHERS THEN
11:21:57 255  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 256  	  SPROC_NAME, 'Unknown error');
11:21:57 257  END RELEASE_LOCK;
11:21:57 258  
11:21:57 259  END PROCS_LOCKING_V15;
11:21:57 260  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:57 SQL> 
11:21:57 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V15" AS
11:21:57   2  
11:21:57   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:57   4  /*
11:21:57   5  Throws exceptions:
11:21:57   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57   8  */
11:21:57   9  	  in_offer_chain_id IN	 NUMBER,
11:21:57  10  	  out_result_set    OUT  SYS_REFCURSOR
11:21:57  11  ) AS
11:21:57  12  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_BY_ID';
11:21:57  13  BEGIN
11:21:57  14  
11:21:57  15  	-- Get offer chain informations
11:21:57  16  	OPEN out_result_set FOR
11:21:57  17  	  SELECT
11:21:57  18  	    OC.ID,
11:21:57  19  	    OC.NAME,
11:21:57  20  	    OC.ADOPTABILITY_WINDOW_START_DATE,
11:21:57  21  	    OC.ADOPTABILITY_WINDOW_END_DATE,
11:21:57  22  	    OC.DESCRIPTION,
11:21:57  23  	    OC.IS_GIFT_CERTIFICATE,
11:21:57  24  	    OC.OFFER_CHAIN_STATUS_ID,
11:21:57  25  	    OC.PRODUCT_URI,
11:21:57  26  	    OC.BILLING_SOURCE_ID,
11:21:57  27  	    OC.VENDOR_SOURCE_ID,
11:21:57  28  	    OC.GROUP_ACCOUNT_TYPE_ID,
11:21:57  29  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
11:21:57  30  	  FROM
11:21:57  31  	    OFFER_CHAIN OC
11:21:57  32  	  WHERE
11:21:57  33  	    OC.ID = in_offer_chain_id
11:21:57  34  	    AND ROWNUM <= 1;
11:21:57  35  
11:21:57  36  EXCEPTION
11:21:57  37  WHEN OTHERS THEN
11:21:57  38  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  39  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  40  END GET_OFFER_CHAIN_BY_ID;
11:21:57  41  
11:21:57  42  /******************************************************************************/
11:21:57  43  
11:21:57  44  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
11:21:57  45  /*
11:21:57  46  Throws exceptions:
11:21:57  47  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  48  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:57  49  */
11:21:57  50  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:57  51  	out_result_set	   OUT SYS_REFCURSOR
11:21:57  52  ) AS
11:21:57  53  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
11:21:57  54  -- EXCEPTIONS
11:21:57  55  BAD_OFFER_CHAINS_IDS EXCEPTION;
11:21:57  56  BEGIN
11:21:57  57  
11:21:57  58  	IF (in_offer_chain_ids IS NULL) THEN
11:21:57  59  	  RAISE BAD_OFFER_CHAINS_IDS;
11:21:57  60  	END IF;
11:21:57  61  
11:21:57  62  	OPEN out_result_set FOR
11:21:57  63  	SELECT
11:21:57  64  	  OCH.ID,
11:21:57  65  	  OCH.NAME,
11:21:57  66  	  OCH.DESCRIPTION,
11:21:57  67  	  OCH.OFFER_CHAIN_STATUS_ID,
11:21:57  68  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
11:21:57  69  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
11:21:57  70  	  OCH.IS_GIFT_CERTIFICATE,
11:21:57  71  	  PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
11:21:57  72  	  PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
11:21:57  73  	  OCH.VENDOR_SOURCE_ID,
11:21:57  74  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
11:21:57  75  	FROM
11:21:57  76  	  OFFER_CHAIN OCH
11:21:57  77  	WHERE
11:21:57  78  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
11:21:57  79  
11:21:57  80  EXCEPTION
11:21:57  81  WHEN BAD_OFFER_CHAINS_IDS THEN
11:21:57  82  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57  83  	  SPROC_NAME, 'Invalid offer chains ids');
11:21:57  84  WHEN OTHERS THEN
11:21:57  85  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  86  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57  87  END GET_OFFER_CHAINS_BY_IDS;
11:21:57  88  
11:21:57  89  /******************************************************************************/
11:21:57  90  
11:21:57  91  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
11:21:57  92  /*
11:21:57  93  Throws exceptions:
11:21:57  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57  95  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:57  96  */
11:21:57  97  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:57  98  	out_result_set	   OUT SYS_REFCURSOR
11:21:57  99  ) AS
11:21:57 100  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
11:21:57 101  -- EXCEPTIONS
11:21:57 102  BAD_OFFER_CHAINS_IDS EXCEPTION;
11:21:57 103  BEGIN
11:21:57 104  
11:21:57 105  	IF (in_offer_chain_ids IS NULL) THEN
11:21:57 106  	  RAISE BAD_OFFER_CHAINS_IDS;
11:21:57 107  	END IF;
11:21:57 108  
11:21:57 109  	OPEN out_result_set FOR
11:21:57 110  	SELECT
11:21:57 111  	  OOCH.OFFER_CHAIN_ID,
11:21:57 112  	  PO.PRODUCT_ID
11:21:57 113  	FROM
11:21:57 114  	  PRODUCT_OFFERING PO
11:21:57 115  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
11:21:57 116  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
11:21:57 117  	WHERE
11:21:57 118  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
11:21:57 119  
11:21:57 120  EXCEPTION
11:21:57 121  WHEN BAD_OFFER_CHAINS_IDS THEN
11:21:57 122  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57 123  	  SPROC_NAME, 'Invalid offer chains ids');
11:21:57 124  WHEN OTHERS THEN
11:21:57 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 127  END GET_OFFER_CHAINS_PRODUCTS;
11:21:57 128  
11:21:57 129  /******************************************************************************/
11:21:57 130  
11:21:57 131  PROCEDURE GET_OFFER_CHAINS_OFFERS (
11:21:57 132  /*
11:21:57 133  Throws exceptions:
11:21:57 134  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 135  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:57 136  */
11:21:57 137  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:57 138  	out_result_set	   OUT SYS_REFCURSOR
11:21:57 139  ) AS
11:21:57 140  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
11:21:57 141  -- EXCEPTIONS
11:21:57 142  BAD_OFFER_CHAINS_IDS EXCEPTION;
11:21:57 143  BEGIN
11:21:57 144  
11:21:57 145  	IF (in_offer_chain_ids IS NULL) THEN
11:21:57 146  	  RAISE BAD_OFFER_CHAINS_IDS;
11:21:57 147  	END IF;
11:21:57 148  
11:21:57 149  	OPEN out_result_set FOR
11:21:57 150  	SELECT
11:21:57 151  	  OOCH.OFFER_CHAIN_ID,
11:21:57 152  	  OOCH.OFFER_ID,
11:21:57 153  	  OOCH.INDEX_VALUE,
11:21:57 154  	  OOCH.NUM_RECURRENCES,
11:21:57 155  	  O.ENTITLEMENT_DURATION,
11:21:57 156  	  PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
11:21:57 157  	FROM
11:21:57 158  	  OFFER O
11:21:57 159  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
11:21:57 160  	WHERE
11:21:57 161  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
11:21:57 162  
11:21:57 163  EXCEPTION
11:21:57 164  WHEN BAD_OFFER_CHAINS_IDS THEN
11:21:57 165  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57 166  	  SPROC_NAME, 'Invalid offer chains ids');
11:21:57 167  WHEN OTHERS THEN
11:21:57 168  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 169  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 170  END GET_OFFER_CHAINS_OFFERS;
11:21:57 171  
11:21:57 172  /******************************************************************************/
11:21:57 173  
11:21:57 174  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
11:21:57 175  /*
11:21:57 176  Throws exceptions (codes):
11:21:57 177  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 178  */
11:21:57 179  	in_product_id  IN  NUMBER,
11:21:57 180  	out_result_set OUT SYS_REFCURSOR
11:21:57 181  )AS
11:21:57 182  -- VARIBLES
11:21:57 183  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
11:21:57 184  temp_product_id NUMBER;
11:21:57 185  
11:21:57 186  -- EXCEPTIONS
11:21:57 187  BAD_PRODUCT_ID EXCEPTION;
11:21:57 188  BEGIN
11:21:57 189  
11:21:57 190  	-- Check that given product exists
11:21:57 191  	BEGIN
11:21:57 192  	  SELECT
11:21:57 193  	    PRODUCT.ID into temp_product_id
11:21:57 194  	  FROM
11:21:57 195  	    PRODUCT
11:21:57 196  	  WHERE
11:21:57 197  	    PRODUCT.ID = in_product_id;
11:21:57 198  	  EXCEPTION
11:21:57 199  	    WHEN NO_DATA_FOUND THEN
11:21:57 200  	      RAISE BAD_PRODUCT_ID;
11:21:57 201  	END;
11:21:57 202  
11:21:57 203  	-- Select all offer chains that contains given product
11:21:57 204  	OPEN out_result_set FOR
11:21:57 205  	SELECT
11:21:57 206  	  OFFER_CHAIN.ID,
11:21:57 207  	  OFFER_CHAIN.NAME,
11:21:57 208  	  OFFER_CHAIN.DESCRIPTION,
11:21:57 209  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
11:21:57 210  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
11:21:57 211  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
11:21:57 212  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
11:21:57 213  	FROM
11:21:57 214  	  OFFER_CHAIN
11:21:57 215  	WHERE
11:21:57 216  	  OFFER_CHAIN.ID IN (
11:21:57 217  	    SELECT DISTINCT
11:21:57 218  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
11:21:57 219  	    FROM
11:21:57 220  	      OFFER_OFFER_CHAIN
11:21:57 221  	    WHERE
11:21:57 222  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
11:21:57 223  		SELECT DISTINCT
11:21:57 224  		  OFFER_PRODUCT_OFFERING.OFFER_ID
11:21:57 225  		FROM
11:21:57 226  		  OFFER_PRODUCT_OFFERING
11:21:57 227  		WHERE
11:21:57 228  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
11:21:57 229  	      )
11:21:57 230  	  );
11:21:57 231  
11:21:57 232  EXCEPTION
11:21:57 233  WHEN BAD_PRODUCT_ID THEN
11:21:57 234  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 235  	  SPROC_NAME, 'No such product');
11:21:57 236  WHEN OTHERS THEN
11:21:57 237  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 239  END GET_OFFER_CHAINS_BY_PRODUCT;
11:21:57 240  
11:21:57 241  /******************************************************************************/
11:21:57 242  
11:21:57 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
11:21:57 244  /*
11:21:57 245  Throws exceptions (codes):
11:21:57 246  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 247  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 248  */
11:21:57 249  	in_offer_chain_id IN NUMBER,
11:21:57 250  	out_price	  OUT NUMBER
11:21:57 251  ) AS
11:21:57 252  -- VARIABLES
11:21:57 253  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
11:21:57 254  temp_offer_chain_id NUMBER;
11:21:57 255  
11:21:57 256  -- EXCEPTION
11:21:57 257  BAD_OFFER_CHAIN_ID       EXCEPTION;
11:21:57 258  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
11:21:57 259  EXCEPTION_MESSAGE        VARCHAR2(1024);
11:21:57 260  BEGIN
11:21:57 261  
11:21:57 262  	-- Check that given offer chain exists
11:21:57 263  	BEGIN
11:21:57 264  	  SELECT
11:21:57 265  	    OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 266  	  FROM
11:21:57 267  	    OFFER_CHAIN
11:21:57 268  	  WHERE
11:21:57 269  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 270  
11:21:57 271  	  EXCEPTION
11:21:57 272  	  WHEN NO_DATA_FOUND THEN
11:21:57 273  	    RAISE BAD_OFFER_CHAIN_ID;
11:21:57 274  	END;
11:21:57 275  
11:21:57 276  	BEGIN
11:21:57 277  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
11:21:57 278  	  EXCEPTION
11:21:57 279  	    WHEN OTHERS THEN
11:21:57 280  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 281  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
11:21:57 282  	END;
11:21:57 283  
11:21:57 284  EXCEPTION
11:21:57 285  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 286  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 287  	  SPROC_NAME, 'Bad offer chain id');
11:21:57 288  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
11:21:57 289  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 290  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
11:21:57 291  WHEN OTHERS THEN
11:21:57 292  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 293  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 294  END GET_OFFER_CHAIN_PRICE;
11:21:57 295  
11:21:57 296  /******************************************************************************/
11:21:57 297  
11:21:57 298  PROCEDURE GET_FIRST_OFFER(
11:21:57 299  /*
11:21:57 300  Throws exceptions (codes):
11:21:57 301  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 302  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 303  */
11:21:57 304  	in_offer_chain_id IN  NUMBER,
11:21:57 305  	out_offer_id	  OUT NUMBER
11:21:57 306  ) AS
11:21:57 307  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
11:21:57 308  BEGIN
11:21:57 309  	-- Seect first offer in offer chain
11:21:57 310  	SELECT
11:21:57 311  	  OFFER_ID into out_offer_id
11:21:57 312  	FROM (
11:21:57 313  	  SELECT
11:21:57 314  	    OFFER_OFFER_CHAIN.OFFER_ID
11:21:57 315  	  FROM
11:21:57 316  	    OFFER_OFFER_CHAIN
11:21:57 317  	  WHERE
11:21:57 318  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 319  	  ORDER BY
11:21:57 320  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
11:21:57 321  	)
11:21:57 322  	WHERE
11:21:57 323  	  ROWNUM <= 1;
11:21:57 324  
11:21:57 325  EXCEPTION
11:21:57 326  WHEN NO_DATA_FOUND THEN
11:21:57 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 328  	  SPROC_NAME, 'No such offer chain');
11:21:57 329  WHEN OTHERS THEN
11:21:57 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 332  END GET_FIRST_OFFER;
11:21:57 333  
11:21:57 334  /******************************************************************************/
11:21:57 335  
11:21:57 336  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
11:21:57 337  /*
11:21:57 338  Throws exceptions (codes):
11:21:57 339  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 340  */
11:21:57 341  	out_result_set OUT SYS_REFCURSOR
11:21:57 342  ) AS
11:21:57 343  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
11:21:57 344  BEGIN
11:21:57 345  	OPEN out_result_set FOR
11:21:57 346  	SELECT
11:21:57 347  	  OFFER_CHAIN.ID,
11:21:57 348  	  OFFER_CHAIN.NAME,
11:21:57 349  	  OFFER_CHAIN.DESCRIPTION,
11:21:57 350  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
11:21:57 351  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
11:21:57 352  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
11:21:57 353  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
11:21:57 354  	  PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
11:21:57 355  	  PRODUCT_OFFERING.PRODUCT_ID
11:21:57 356  	FROM
11:21:57 357  	  OFFER_CHAIN,
11:21:57 358  	  OFFER_OFFER_CHAIN,
11:21:57 359  	  OFFER_PRODUCT_OFFERING,
11:21:57 360  	  PRODUCT_OFFERING
11:21:57 361  	WHERE
11:21:57 362  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
11:21:57 363  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
11:21:57 364  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57 365  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE;
11:21:57 366  
11:21:57 367  EXCEPTION
11:21:57 368  WHEN OTHERS THEN
11:21:57 369  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 370  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 371  END GET_ACTIVE_OFFER_CHAINS;
11:21:57 372  
11:21:57 373  /******************************************************************************/
11:21:57 374  
11:21:57 375  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
11:21:57 376  /*
11:21:57 377  Throws exceptions (codes):
11:21:57 378  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 379  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 380  */
11:21:57 381  	in_offer_chain_id IN NUMBER,
11:21:57 382  	out_result_set	  OUT SYS_REFCURSOR
11:21:57 383  ) AS
11:21:57 384  -- VARIABLES
11:21:57 385  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
11:21:57 386  temp_offer_chain_id NUMBER;
11:21:57 387  
11:21:57 388  -- EXCEPTIONS
11:21:57 389  BAD_OFFER_CHAIN EXCEPTION;
11:21:57 390  BEGIN
11:21:57 391  
11:21:57 392  	-- Check that offer chain exists
11:21:57 393  	BEGIN
11:21:57 394  	  SELECT
11:21:57 395  	    OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 396  	  FROM
11:21:57 397  	    OFFER_CHAIN
11:21:57 398  	  WHERE
11:21:57 399  	    OFFER_CHAIN.ID = in_offer_chain_id
11:21:57 400  	    AND ROWNUM <= 1;
11:21:57 401  
11:21:57 402  	  EXCEPTION
11:21:57 403  	    WHEN OTHERS THEN
11:21:57 404  	      RAISE BAD_OFFER_CHAIN;
11:21:57 405  	END;
11:21:57 406  
11:21:57 407  	-- Select all products for given offer chain
11:21:57 408  	OPEN out_result_set FOR
11:21:57 409  	SELECT DISTINCT
11:21:57 410  	  PRODUCT_OFFERING.PRODUCT_ID
11:21:57 411  	FROM
11:21:57 412  	  PRODUCT_OFFERING
11:21:57 413  	WHERE
11:21:57 414  	  PRODUCT_OFFERING.ID IN (
11:21:57 415  	    SELECT DISTINCT
11:21:57 416  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:57 417  	    FROM
11:21:57 418  	      OFFER_PRODUCT_OFFERING
11:21:57 419  	    WHERE
11:21:57 420  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:57 421  		SELECT
11:21:57 422  		  OFFER_OFFER_CHAIN.OFFER_ID
11:21:57 423  		FROM
11:21:57 424  		  OFFER_OFFER_CHAIN
11:21:57 425  		WHERE
11:21:57 426  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 427  	      )
11:21:57 428  	  );
11:21:57 429  
11:21:57 430  EXCEPTION
11:21:57 431  WHEN BAD_OFFER_CHAIN THEN
11:21:57 432  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 433  	  SPROC_NAME, 'No such offer chain');
11:21:57 434  WHEN OTHERS THEN
11:21:57 435  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 436  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 437  END GET_OFFER_CHAIN_PRODUCTS;
11:21:57 438  
11:21:57 439  /******************************************************************************/
11:21:57 440  
11:21:57 441  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
11:21:57 442  /*
11:21:57 443  Throws exceptions (codes):
11:21:57 444  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 445  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 446  */
11:21:57 447  	in_offer_chain_id	  IN NUMBER,
11:21:57 448  	in_offer_chain_start_date IN DATE
11:21:57 449  ) RETURN DATE AS
11:21:57 450  -- VARIABLES
11:21:57 451  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
11:21:57 452  temp_offer_chain_id    NUMBER;
11:21:57 453  var_offer_chain_length NUMBER;
11:21:57 454  var_offer_duration     VARCHAR2(30);
11:21:57 455  var_offer_recurrences  NUMBER;
11:21:57 456  var_end_date	     DATE;
11:21:57 457  
11:21:57 458  var_offer_ym_interval INTERVAL YEAR TO MONTH;
11:21:57 459  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
11:21:57 460  var_offer_years	    NUMBER;
11:21:57 461  var_offer_months	    NUMBER;
11:21:57 462  var_offer_days	    NUMBER;
11:21:57 463  var_infinity_offers_count NUMBER;
11:21:57 464  
11:21:57 465  var_offers_set SYS_REFCURSOR;
11:21:57 466  
11:21:57 467  -- EXCEPTIONS
11:21:57 468  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:57 469  BEGIN
11:21:57 470  
11:21:57 471  	var_end_date := in_offer_chain_start_date;
11:21:57 472  
11:21:57 473  	-- Check that offer chain exists
11:21:57 474  	BEGIN
11:21:57 475  	  SELECT
11:21:57 476  	    OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 477  	  FROM
11:21:57 478  	    OFFER_CHAIN
11:21:57 479  	  WHERE
11:21:57 480  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 481  	  EXCEPTION
11:21:57 482  	    WHEN NO_DATA_FOUND
11:21:57 483  	      THEN RAISE BAD_OFFER_CHAIN_ID;
11:21:57 484  	END;
11:21:57 485  
11:21:57 486  	SELECT
11:21:57 487  	  COUNT(*) into var_infinity_offers_count
11:21:57 488  	FROM
11:21:57 489  	  OFFER_OFFER_CHAIN
11:21:57 490  	WHERE
11:21:57 491  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 492  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V15.OFFER_REC_INFINITY;
11:21:57 493  
11:21:57 494  	IF var_infinity_offers_count > 0 THEN
11:21:57 495  	  -- Offer chain contains offers with infinity num of recurrences
11:21:57 496  	  RETURN NULL;
11:21:57 497  	END IF;
11:21:57 498  
11:21:57 499  	-- Select offers durations
11:21:57 500  	OPEN var_offers_set FOR
11:21:57 501  	SELECT
11:21:57 502  	  OFFER.ENTITLEMENT_DURATION,
11:21:57 503  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
11:21:57 504  	FROM
11:21:57 505  	  OFFER_OFFER_CHAIN
11:21:57 506  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:57 507  	WHERE
11:21:57 508  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
11:21:57 509  
11:21:57 510  	-- Calculate sum of offers durations
11:21:57 511  	LOOP
11:21:57 512  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
11:21:57 513  	  EXIT WHEN var_offers_set%NOTFOUND;
11:21:57 514  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
11:21:57 515  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
11:21:57 516  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
11:21:57 517  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
11:21:57 518  	END LOOP;
11:21:57 519  
11:21:57 520  	RETURN var_end_date;
11:21:57 521  
11:21:57 522  EXCEPTION
11:21:57 523  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 524  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 525  	  SPROC_NAME, 'No such offer chain');
11:21:57 526  WHEN OTHERS THEN
11:21:57 527  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 528  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 529  END CALCULATE_OFFER_CHAIN_END_DATE;
11:21:57 530  
11:21:57 531  /******************************************************************************/
11:21:57 532  
11:21:57 533  FUNCTION CALCULATE_OFFER_AMOUNT (
11:21:57 534  	in_offer_id IN NUMBER
11:21:57 535  ) RETURN NUMBER AS
11:21:57 536  -- VARIABLES
11:21:57 537  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
11:21:57 538  temp_offer_id NUMBER;
11:21:57 539  
11:21:57 540  var_product_offering_set	    SYS_REFCURSOR;
11:21:57 541  var_product_offering_id	    NUMBER;
11:21:57 542  var_product_offering_price    NUMBER(10,6);
11:21:57 543  var_product_offering_t_amount NUMBER(10,6);
11:21:57 544  var_product_offering_quantity NUMBER;
11:21:57 545  
11:21:57 546  var_total_amount NUMBER(10,6);
11:21:57 547  var_final_amount NUMBER(10,2);
11:21:57 548  
11:21:57 549  var_percent_discount NUMBER(10,2);
11:21:57 550  var_fixed_discount NUMBER(10,6);
11:21:57 551  
11:21:57 552  -- EXCEPTIONS
11:21:57 553  BAD_OFFER_ID EXCEPTION;
11:21:57 554  BEGIN
11:21:57 555  
11:21:57 556  	BEGIN
11:21:57 557  	  SELECT
11:21:57 558  	    OFFER.ID into temp_offer_id
11:21:57 559  	  FROM
11:21:57 560  	    OFFER
11:21:57 561  	  WHERE
11:21:57 562  	    OFFER.ID = in_offer_id;
11:21:57 563  	  EXCEPTION
11:21:57 564  	    WHEN NO_DATA_FOUND THEN
11:21:57 565  	      RAISE BAD_OFFER_ID;
11:21:57 566  	END;
11:21:57 567  
11:21:57 568  	OPEN var_product_offering_set FOR
11:21:57 569  	SELECT
11:21:57 570  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
11:21:57 571  	  PRODUCT_OFFERING.UNIT_PRICE,
11:21:57 572  	  PRODUCT_OFFERING.QUANTITY
11:21:57 573  	FROM
11:21:57 574  	  OFFER_PRODUCT_OFFERING
11:21:57 575  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57 576  	WHERE
11:21:57 577  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
11:21:57 578  
11:21:57 579  	var_total_amount := 0;
11:21:57 580  
11:21:57 581  	LOOP
11:21:57 582  	  FETCH var_product_offering_set into
11:21:57 583  	    var_product_offering_id,
11:21:57 584  	    var_product_offering_price,
11:21:57 585  	    var_product_offering_quantity;
11:21:57 586  	  EXIT WHEN var_product_offering_set%NOTFOUND;
11:21:57 587  
11:21:57 588  	  SELECT
11:21:57 589  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
11:21:57 590  	  FROM
11:21:57 591  	    DISCOUNT_PRODUCT_OFFERING
11:21:57 592  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
11:21:57 593  	  WHERE
11:21:57 594  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
11:21:57 595  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
11:21:57 596  
11:21:57 597  	  SELECT
11:21:57 598  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
11:21:57 599  	  FROM
11:21:57 600  	    DISCOUNT_PRODUCT_OFFERING
11:21:57 601  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
11:21:57 602  	  WHERE
11:21:57 603  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
11:21:57 604  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
11:21:57 605  
11:21:57 606  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
11:21:57 607  
11:21:57 608  	  IF var_percent_discount IS NOT NULL THEN
11:21:57 609  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
11:21:57 610  	  END IF;
11:21:57 611  
11:21:57 612  	  IF var_fixed_discount IS NOT NULL THEN
11:21:57 613  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
11:21:57 614  	  END IF;
11:21:57 615  
11:21:57 616  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
11:21:57 617  	END LOOP;
11:21:57 618  	var_final_amount := var_total_amount;
11:21:57 619  	RETURN var_final_amount;
11:21:57 620  
11:21:57 621  EXCEPTION
11:21:57 622  WHEN BAD_OFFER_ID THEN
11:21:57 623  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 624  	  SPROC_NAME, 'No such offer');
11:21:57 625  WHEN OTHERS THEN
11:21:57 626  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 627  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 628  END CALCULATE_OFFER_AMOUNT;
11:21:57 629  
11:21:57 630  /******************************************************************************/
11:21:57 631  
11:21:57 632  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
11:21:57 633  	in_offer_chain_id IN NUMBER
11:21:57 634  ) RETURN NUMBER AS
11:21:57 635  -- VARIABLES
11:21:57 636  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
11:21:57 637  temp_offer_chain_id    NUMBER;
11:21:57 638  var_first_offer_id     NUMBER;
11:21:57 639  -- EXCEPTIONS
11:21:57 640  BAD_OFFER_CHAIN_ID      EXCEPTION;
11:21:57 641  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
11:21:57 642  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:57 643  BEGIN
11:21:57 644  
11:21:57 645  	BEGIN
11:21:57 646  	  SELECT
11:21:57 647  	    OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 648  	  FROM
11:21:57 649  	    OFFER_CHAIN
11:21:57 650  	  WHERE
11:21:57 651  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 652  	  EXCEPTION
11:21:57 653  	    WHEN NO_DATA_FOUND THEN
11:21:57 654  	      RAISE BAD_OFFER_CHAIN_ID;
11:21:57 655  	END;
11:21:57 656  
11:21:57 657  	BEGIN
11:21:57 658  	  PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(
11:21:57 659  	    in_offer_chain_id => in_offer_chain_id,
11:21:57 660  	    out_offer_id      => var_first_offer_id
11:21:57 661  	  );
11:21:57 662  	  EXCEPTION
11:21:57 663  	    WHEN OTHERS THEN
11:21:57 664  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 665  	      RAISE CAN_NOT_GET_FIRST_OFFER;
11:21:57 666  	END;
11:21:57 667  
11:21:57 668  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
11:21:57 669  
11:21:57 670  EXCEPTION
11:21:57 671  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 672  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 673  	  SPROC_NAME, 'No such offer chain');
11:21:57 674  WHEN CAN_NOT_GET_FIRST_OFFER THEN
11:21:57 675  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 676  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
11:21:57 677  WHEN OTHERS THEN
11:21:57 678  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 680  END CALCULATE_OFFER_CHAIN_AMOUNT;
11:21:57 681  
11:21:57 682  /******************************************************************************/
11:21:57 683  
11:21:57 684  FUNCTION GET_FIRST_OFFER_INDEX (
11:21:57 685  	in_offer_chain_id IN NUMBER
11:21:57 686  ) RETURN NUMBER AS
11:21:57 687  -- VARIABLES
11:21:57 688  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
11:21:57 689  var_first_offer_index NUMBER;
11:21:57 690  BEGIN
11:21:57 691  
11:21:57 692  	SELECT
11:21:57 693  	  INDEX_VALUE into var_first_offer_index
11:21:57 694  	FROM (
11:21:57 695  	  SELECT
11:21:57 696  	    OFFER_OFFER_CHAIN.INDEX_VALUE
11:21:57 697  	  FROM
11:21:57 698  	    OFFER_OFFER_CHAIN
11:21:57 699  	  WHERE
11:21:57 700  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 701  	  ORDER BY
11:21:57 702  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
11:21:57 703  	)
11:21:57 704  	WHERE
11:21:57 705  	  ROWNUM <= 1;
11:21:57 706  
11:21:57 707  	RETURN var_first_offer_index;
11:21:57 708  
11:21:57 709  EXCEPTION
11:21:57 710  WHEN NO_DATA_FOUND THEN
11:21:57 711  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 712  	  SPROC_NAME, 'No such offer chain');
11:21:57 713  WHEN OTHERS THEN
11:21:57 714  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 715  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 716  END GET_FIRST_OFFER_INDEX;
11:21:57 717  
11:21:57 718  /******************************************************************************/
11:21:57 719  
11:21:57 720  FUNCTION GET_NEXT_OFFER_INDEX (
11:21:57 721  /*
11:21:57 722  NULL, if not exists
11:21:57 723  */
11:21:57 724  	in_offer_chain_id	     IN NUMBER,
11:21:57 725  	in_offer_chain_current_index IN NUMBER
11:21:57 726  ) RETURN NUMBER AS
11:21:57 727  -- VARIABLES
11:21:57 728  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
11:21:57 729  temp_offer_chain_id	     NUMBER;
11:21:57 730  temp_offer_chain_current_index NUMBER;
11:21:57 731  var_result		     NUMBER;
11:21:57 732  -- EXCEPTIONS
11:21:57 733  BAD_OFFER_CHAIN_ID      EXCEPTION;
11:21:57 734  BAD_CURRENT_INDEX_VALUE EXCEPTION;
11:21:57 735  BEGIN
11:21:57 736  
11:21:57 737  	-- Check that offer chain exists
11:21:57 738  	BEGIN
11:21:57 739  	  SELECT
11:21:57 740  	    OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 741  	  FROM
11:21:57 742  	    OFFER_CHAIN
11:21:57 743  	  WHERE
11:21:57 744  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 745  	  EXCEPTION
11:21:57 746  	    WHEN NO_DATA_FOUND THEN
11:21:57 747  	      RAISE BAD_OFFER_CHAIN_ID;
11:21:57 748  	END;
11:21:57 749  
11:21:57 750  	-- Check that current offer index exists
11:21:57 751  	BEGIN
11:21:57 752  	  SELECT
11:21:57 753  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
11:21:57 754  	  FROM
11:21:57 755  	    OFFER_OFFER_CHAIN
11:21:57 756  	  WHERE
11:21:57 757  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 758  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
11:21:57 759  	    -- TODO: delete next line
11:21:57 760  	    AND ROWNUM <= 1;
11:21:57 761  	  EXCEPTION
11:21:57 762  	    WHEN NO_DATA_FOUND THEN
11:21:57 763  	      RAISE BAD_CURRENT_INDEX_VALUE;
11:21:57 764  	END;
11:21:57 765  
11:21:57 766  	-- Get next offer index
11:21:57 767  	BEGIN
11:21:57 768  	  SELECT
11:21:57 769  	    INDEX_VALUE into var_result
11:21:57 770  	  FROM (
11:21:57 771  	    SELECT
11:21:57 772  	      OFFER_OFFER_CHAIN.INDEX_VALUE
11:21:57 773  	    FROM
11:21:57 774  	      OFFER_OFFER_CHAIN
11:21:57 775  	    WHERE
11:21:57 776  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 777  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
11:21:57 778  	    ORDER BY
11:21:57 779  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
11:21:57 780  	  )
11:21:57 781  	  WHERE
11:21:57 782  	    ROWNUM <= 1;
11:21:57 783  	  EXCEPTION
11:21:57 784  	    WHEN NO_DATA_FOUND THEN
11:21:57 785  	      var_result := NULL;
11:21:57 786  	END;
11:21:57 787  
11:21:57 788  	RETURN var_result;
11:21:57 789  
11:21:57 790  EXCEPTION
11:21:57 791  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 792  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 793  	  SPROC_NAME, 'No such offer chain');
11:21:57 794  WHEN BAD_CURRENT_INDEX_VALUE THEN
11:21:57 795  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 796  	  SPROC_NAME, 'Bad current index value');
11:21:57 797  WHEN OTHERS THEN
11:21:57 798  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 799  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 800  END GET_NEXT_OFFER_INDEX;
11:21:57 801  
11:21:57 802  /******************************************************************************/
11:21:57 803  
11:21:57 804  PROCEDURE P_GET_NEXT_OFFER_INDEX (
11:21:57 805  	in_offer_chain_id	     IN NUMBER,
11:21:57 806  	in_offer_chain_current_index IN NUMBER,
11:21:57 807  	out_next_offer_index	     OUT NUMBER
11:21:57 808  ) AS
11:21:57 809  BEGIN
11:21:57 810  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
11:21:57 811  	  in_offer_chain_id,
11:21:57 812  	  in_offer_chain_current_index
11:21:57 813  	);
11:21:57 814  END P_GET_NEXT_OFFER_INDEX;
11:21:57 815  
11:21:57 816  /******************************************************************************/
11:21:57 817  
11:21:57 818  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
11:21:57 819  	in_license_id		     IN NUMBER,
11:21:57 820  	in_offer_chain_current_index IN NUMBER,
11:21:57 821  	out_next_offer_index	     OUT NUMBER
11:21:57 822  ) AS
11:21:57 823  -- VARIABLES
11:21:57 824  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
11:21:57 825  var_offer_chain_id NUMBER;
11:21:57 826  -- EXCEPTIONS
11:21:57 827  BAD_LICENSE_ID		   EXCEPTION;
11:21:57 828  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
11:21:57 829  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
11:21:57 830  BEGIN
11:21:57 831  
11:21:57 832  	BEGIN
11:21:57 833  	  SELECT
11:21:57 834  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
11:21:57 835  	  FROM
11:21:57 836  	    SUBSCRIPTION
11:21:57 837  	  WHERE
11:21:57 838  	    SUBSCRIPTION.ID = (
11:21:57 839  	      SELECT
11:21:57 840  		LICENSE.SUBSCRIPTION_ID
11:21:57 841  	      FROM
11:21:57 842  		LICENSE
11:21:57 843  	      WHERE
11:21:57 844  		LICENSE.ID = in_license_id
11:21:57 845  	    );
11:21:57 846  	  EXCEPTION
11:21:57 847  	    WHEN NO_DATA_FOUND THEN
11:21:57 848  	      RAISE BAD_LICENSE_ID;
11:21:57 849  	END;
11:21:57 850  
11:21:57 851  	BEGIN
11:21:57 852  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
11:21:57 853  	    var_offer_chain_id,
11:21:57 854  	    in_offer_chain_current_index
11:21:57 855  	  );
11:21:57 856  	  EXCEPTION
11:21:57 857  	    WHEN OTHERS THEN
11:21:57 858  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 859  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
11:21:57 860  	END;
11:21:57 861  
11:21:57 862  EXCEPTION
11:21:57 863  WHEN BAD_LICENSE_ID THEN
11:21:57 864  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 865  	  SPROC_NAME, 'No such license');
11:21:57 866  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
11:21:57 867  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 868  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
11:21:57 869  WHEN OTHERS THEN
11:21:57 870  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 871  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 872  END GET_NEXT_OFFER_INDEX_BY_LCNS;
11:21:57 873  
11:21:57 874  /******************************************************************************/
11:21:57 875  
11:21:57 876  FUNCTION IS_OFFER_INDEX_EXISTS (
11:21:57 877  /*
11:21:57 878  GLOBAL_CONSTANTS_V15.TRUE - exists
11:21:57 879  GLOBAL_CONSTANTS_V15.FALSE - not exists
11:21:57 880  */
11:21:57 881  	in_offer_chain_id	   IN NUMBER,
11:21:57 882  	in_offer_chain_offer_index IN NUMBER
11:21:57 883  ) RETURN NUMBER AS
11:21:57 884  -- VARIABLES
11:21:57 885  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
11:21:57 886  temp_count NUMBER;
11:21:57 887  BEGIN
11:21:57 888  
11:21:57 889  	SELECT
11:21:57 890  	  COUNT(*) into temp_count
11:21:57 891  	FROM
11:21:57 892  	  OFFER_OFFER_CHAIN
11:21:57 893  	WHERE
11:21:57 894  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 895  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
11:21:57 896  
11:21:57 897  	IF temp_count > 0 THEN
11:21:57 898  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:57 899  	ELSE
11:21:57 900  	  RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 901  	END IF;
11:21:57 902  
11:21:57 903  EXCEPTION
11:21:57 904  WHEN OTHERS THEN
11:21:57 905  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 906  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 907  END IS_OFFER_INDEX_EXISTS;
11:21:57 908  
11:21:57 909  /******************************************************************************/
11:21:57 910  
11:21:57 911  PROCEDURE GET_OFFER_LENGTH (
11:21:57 912  	in_offer_id IN NUMBER,
11:21:57 913  	out_years   OUT NUMBER,
11:21:57 914  	out_months  OUT NUMBER,
11:21:57 915  	out_days    OUT NUMBER
11:21:57 916  ) AS
11:21:57 917  -- VARIABLES
11:21:57 918  var_offer_duration VARCHAR2(30);
11:21:57 919  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
11:21:57 920  -- EXCEPTIONS
11:21:57 921  BAD_OFFER_ID	     EXCEPTION;
11:21:57 922  CAN_NOT_PARSE_DURATION EXCEPTION;
11:21:57 923  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:57 924  BEGIN
11:21:57 925  
11:21:57 926  	BEGIN
11:21:57 927  	  SELECT
11:21:57 928  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
11:21:57 929  	  FROM
11:21:57 930  	    OFFER
11:21:57 931  	  WHERE
11:21:57 932  	    OFFER.ID = in_offer_id;
11:21:57 933  	  EXCEPTION
11:21:57 934  	    WHEN NO_DATA_FOUND THEN
11:21:57 935  	      RAISE BAD_OFFER_ID;
11:21:57 936  	END;
11:21:57 937  
11:21:57 938  	BEGIN
11:21:57 939  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
11:21:57 940  	    var_offer_duration,
11:21:57 941  	    out_years,
11:21:57 942  	    out_months,
11:21:57 943  	    out_days
11:21:57 944  	  );
11:21:57 945  	  EXCEPTION
11:21:57 946  	    WHEN OTHERS THEN
11:21:57 947  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:57 948  	      RAISE CAN_NOT_PARSE_DURATION;
11:21:57 949  	END;
11:21:57 950  
11:21:57 951  EXCEPTION
11:21:57 952  WHEN BAD_OFFER_ID THEN
11:21:57 953  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 954  	  SPROC_NAME, 'No such offer');
11:21:57 955  WHEN CAN_NOT_PARSE_DURATION THEN
11:21:57 956  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 957  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
11:21:57 958  WHEN OTHERS THEN
11:21:57 959  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 961  END GET_OFFER_LENGTH;
11:21:57 962  
11:21:57 963  /******************************************************************************/
11:21:57 964  
11:21:57 965  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
11:21:57 966  	in_offer_id   IN NUMBER,
11:21:57 967  	in_start_date IN DATE DEFAULT SYSDATE,
11:21:57 968  	out_days      OUT NUMBER
11:21:57 969  ) AS
11:21:57 970  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
11:21:57 971  -- VARIABLES
11:21:57 972  var_offer_duration VARCHAR2(30);
11:21:57 973  var_offer_years	 NUMBER;
11:21:57 974  var_offer_months	 NUMBER;
11:21:57 975  var_offer_days	 NUMBER;
11:21:57 976  var_offer_end_date DATE;
11:21:57 977  -- EXCEPTIONS
11:21:57 978  BAD_OFFER_ID EXCEPTION;
11:21:57 979  BEGIN
11:21:57 980  
11:21:57 981  	BEGIN
11:21:57 982  	  SELECT
11:21:57 983  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
11:21:57 984  	  FROM
11:21:57 985  	    OFFER
11:21:57 986  	  WHERE
11:21:57 987  	    OFFER.ID = in_offer_id;
11:21:57 988  	  EXCEPTION
11:21:57 989  	    WHEN NO_DATA_FOUND THEN
11:21:57 990  	      RAISE BAD_OFFER_ID;
11:21:57 991  	END;
11:21:57 992  
11:21:57 993  	PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS (
11:21:57 994  	  var_offer_duration,
11:21:57 995  	  var_offer_years,
11:21:57 996  	  var_offer_months,
11:21:57 997  	  var_offer_days
11:21:57 998  	);
11:21:57 999  
11:21:57 1000  	 var_offer_end_date := ( ( in_start_date
11:21:57 1001  	   + GLOBAL_CONSTANTS_V15.ONE_DAY_INTERVAL * var_offer_days )
11:21:57 1002  	   + GLOBAL_CONSTANTS_V15.ONE_MONTH_INTERVAL * var_offer_months )
11:21:57 1003  	   + GLOBAL_CONSTANTS_V15.ONE_YEAR_INTERVAL * var_offer_years;
11:21:57 1004  
11:21:57 1005  	 out_days := var_offer_end_date - in_start_date;
11:21:57 1006  
11:21:57 1007  EXCEPTION
11:21:57 1008  WHEN BAD_OFFER_ID THEN
11:21:57 1009  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1010  	   SPROC_NAME, 'No such offer');
11:21:57 1011  WHEN OTHERS THEN
11:21:57 1012  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1013  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1014  END GET_OFFER_LENGTH_IN_DAYS;
11:21:57 1015  
11:21:57 1016  /******************************************************************************/
11:21:57 1017  
11:21:57 1018  PROCEDURE GET_OFFER_PRODUCTS (
11:21:57 1019  /*
11:21:57 1020  Throws exceptions (codes):
11:21:57 1021  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1022  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1023  */
11:21:57 1024  	 in_offer_id	IN NUMBER,
11:21:57 1025  	 out_result_set OUT SYS_REFCURSOR
11:21:57 1026  ) AS
11:21:57 1027  -- VARIABLES
11:21:57 1028  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
11:21:57 1029  temp_offerr_id NUMBER;
11:21:57 1030  -- EXCEPTIONS
11:21:57 1031  BAD_OFFER_ID EXCEPTION;
11:21:57 1032  BEGIN
11:21:57 1033  
11:21:57 1034  	 BEGIN
11:21:57 1035  	   SELECT
11:21:57 1036  	     OFFER.ID into temp_offerr_id
11:21:57 1037  	   FROM
11:21:57 1038  	     OFFER
11:21:57 1039  	   WHERE
11:21:57 1040  	     OFFER.ID = in_offer_id;
11:21:57 1041  	   EXCEPTION
11:21:57 1042  	     WHEN NO_DATA_FOUND THEN
11:21:57 1043  	       RAISE BAD_OFFER_ID;
11:21:57 1044  	 END;
11:21:57 1045  
11:21:57 1046  	 OPEN out_result_set FOR
11:21:57 1047  	 SELECT DISTINCT
11:21:57 1048  	   PRODUCT.ID,
11:21:57 1049  	   PRODUCT.NAME
11:21:57 1050  	 FROM
11:21:57 1051  	   PRODUCT
11:21:57 1052  	 WHERE
11:21:57 1053  	   PRODUCT.ID IN (
11:21:57 1054  	       SELECT
11:21:57 1055  		 PRODUCT_OFFERING.PRODUCT_ID
11:21:57 1056  	       FROM
11:21:57 1057  		 OFFER_PRODUCT_OFFERING
11:21:57 1058  		 INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57 1059  	       WHERE
11:21:57 1060  		 OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
11:21:57 1061  	     );
11:21:57 1062  
11:21:57 1063  EXCEPTION
11:21:57 1064  WHEN BAD_OFFER_ID THEN
11:21:57 1065  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1066  	   SPROC_NAME, 'No such offer');
11:21:57 1067  WHEN OTHERS THEN
11:21:57 1068  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1070  END GET_OFFER_PRODUCTS;
11:21:57 1071  
11:21:57 1072  /******************************************************************************/
11:21:57 1073  
11:21:57 1074  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
11:21:57 1075  /*
11:21:57 1076  Throws exceptions (codes):
11:21:57 1077  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1078  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1079  */
11:21:57 1080  	 in_offer_chain_id IN NUMBER,
11:21:57 1081  	 out_result_set    OUT SYS_REFCURSOR
11:21:57 1082  ) AS
11:21:57 1083  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
11:21:57 1084  -- VARIABLES
11:21:57 1085  temp_offer_chain_id NUMBER;
11:21:57 1086  -- EXCEPTIONS
11:21:57 1087  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:57 1088  BEGIN
11:21:57 1089  
11:21:57 1090  	 BEGIN
11:21:57 1091  	   SELECT
11:21:57 1092  	     OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 1093  	   FROM
11:21:57 1094  	     OFFER_CHAIN
11:21:57 1095  	   WHERE
11:21:57 1096  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 1097  	   EXCEPTION
11:21:57 1098  	     WHEN NO_DATA_FOUND THEN
11:21:57 1099  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:57 1100  	 END;
11:21:57 1101  
11:21:57 1102  	 OPEN out_result_set FOR
11:21:57 1103  	 SELECT
11:21:57 1104  	   PRODUCT_OFFERING.ID,
11:21:57 1105  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:57 1106  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:57 1107  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:57 1108  	   PRODUCT_OFFERING.QUANTITY,
11:21:57 1109  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:57 1110  	   PRODUCT_OFFERING.CREATED_BY,
11:21:57 1111  	   PRODUCT.NAME,
11:21:57 1112  	   PRODUCT.PRODUCT_URI,
11:21:57 1113  	   CAPABILITY.ID CAP_ID,
11:21:57 1114  	   CAPABILITY.CODE CAP_CODE,
11:21:57 1115  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:57 1116  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:57 1117  	 FROM
11:21:57 1118  	   PRODUCT_OFFERING
11:21:57 1119  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
11:21:57 1120  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:57 1121  	 WHERE
11:21:57 1122  	   PRODUCT_OFFERING.ID IN (
11:21:57 1123  	     SELECT DISTINCT
11:21:57 1124  	       PRODUCT_OFFERING_ID
11:21:57 1125  	     FROM
11:21:57 1126  	       OFFER_PRODUCT_OFFERING
11:21:57 1127  	     WHERE
11:21:57 1128  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:57 1129  		 SELECT DISTINCT
11:21:57 1130  		   OFFER_ID
11:21:57 1131  		 FROM
11:21:57 1132  		   OFFER_OFFER_CHAIN
11:21:57 1133  		 WHERE
11:21:57 1134  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1135  	       )
11:21:57 1136  	   );
11:21:57 1137  
11:21:57 1138  EXCEPTION
11:21:57 1139  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 1140  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1141  	   SPROC_NAME, 'Bad offer chain id');
11:21:57 1142  WHEN OTHERS THEN
11:21:57 1143  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1144  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1145  END GET_OFFER_CHAIN_PROD_OFFERINGS;
11:21:57 1146  
11:21:57 1147  /******************************************************************************/
11:21:57 1148  
11:21:57 1149  FUNCTION CHECK_FOR_SAME_PRODUCTS (
11:21:57 1150  /*
11:21:57 1151  Throws exceptions (codes):
11:21:57 1152  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1153  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1154  Returns:
11:21:57 1155  GLOBAL_CONSTANTS_V15.TRUE if there are at least one same product
11:21:57 1156  GLOBAL_CONSTANTS_V15.FALSE else
11:21:57 1157  */
11:21:57 1158  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
11:21:57 1159  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
11:21:57 1160  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:57 1161  ) RETURN NUMBER AS
11:21:57 1162  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
11:21:57 1163  -- CONSTANTS
11:21:57 1164  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
11:21:57 1165  -- VARIABLES
11:21:57 1166  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
11:21:57 1167  var_same_products	SYS_REFCURSOR;
11:21:57 1168  var_same_product_id	NUMBER;
11:21:57 1169  same_product_count	NUMBER;
11:21:57 1170  var_product_eligibility_limit NUMBER;
11:21:57 1171  s_product_eligibility_limit   VARCHAR2(100);
11:21:57 1172  -- EXCEPTIONS
11:21:57 1173  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
11:21:57 1174  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
11:21:57 1175  BEGIN
11:21:57 1176  
11:21:57 1177  	 -- Check that first offer chain exists
11:21:57 1178  	 BEGIN
11:21:57 1179  	   SELECT
11:21:57 1180  	     OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 1181  	   FROM
11:21:57 1182  	     OFFER_CHAIN
11:21:57 1183  	   WHERE
11:21:57 1184  	     OFFER_CHAIN.ID = in_offer_chain_1;
11:21:57 1185  	   EXCEPTION
11:21:57 1186  	     WHEN NO_DATA_FOUND THEN
11:21:57 1187  	       RAISE BAD_FIRST_OFFER_CHAIN;
11:21:57 1188  	 END;
11:21:57 1189  
11:21:57 1190  	 -- Check that second offer chain exists
11:21:57 1191  	 BEGIN
11:21:57 1192  	   SELECT
11:21:57 1193  	     OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 1194  	   FROM
11:21:57 1195  	     OFFER_CHAIN
11:21:57 1196  	   WHERE
11:21:57 1197  	     OFFER_CHAIN.ID = in_offer_chain_2;
11:21:57 1198  	   EXCEPTION
11:21:57 1199  	     WHEN NO_DATA_FOUND THEN
11:21:57 1200  	       RAISE BAD_SECOND_OFFER_CHAIN;
11:21:57 1201  	 END;
11:21:57 1202  
11:21:57 1203  	 PROCS_OFFER_CHAIN_V15.GET_OFF_CHAINS_SAME_PRODUCTS(
11:21:57 1204  	   in_offer_chain_1 => in_offer_chain_1,
11:21:57 1205  	   in_offer_chain_2 => in_offer_chain_2,
11:21:57 1206  	   out_result_set   => var_same_products
11:21:57 1207  	 );
11:21:57 1208  
11:21:57 1209  	 LOOP
11:21:57 1210  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
11:21:57 1211  	   EXIT WHEN var_same_products%NOTFOUND;
11:21:57 1212  
11:21:57 1213  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:57 1214  	     -- Return false because this offer chains having same products
11:21:57 1215  	     RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:57 1216  	   ELSE
11:21:57 1217  
11:21:57 1218  	     -- Get eligibility rule for given product
11:21:57 1219  	     BEGIN
11:21:57 1220  	       SELECT
11:21:57 1221  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
11:21:57 1222  	       FROM
11:21:57 1223  		 PRODUCT_ELIGIBILITY
11:21:57 1224  	       WHERE
11:21:57 1225  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
11:21:57 1226  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
11:21:57 1227  
11:21:57 1228  	       -- REVU: What should to be here? 1?
11:21:57 1229  	       EXCEPTION
11:21:57 1230  		 WHEN NO_DATA_FOUND THEN
11:21:57 1231  		   s_product_eligibility_limit := '1';
11:21:57 1232  	     END;
11:21:57 1233  
11:21:57 1234  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V15.MAX_CONSURRENT_PRD_UNLIM THEN
11:21:57 1235  	       RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 1236  	     END IF;
11:21:57 1237  
11:21:57 1238  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
11:21:57 1239  
11:21:57 1240  	     -- Check for limit
11:21:57 1241  	     IF var_product_eligibility_limit < same_product_count THEN
11:21:57 1242  	       RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:57 1243  	     END IF;
11:21:57 1244  
11:21:57 1245  	   END IF;
11:21:57 1246  	 END LOOP;
11:21:57 1247  
11:21:57 1248  	 RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 1249  
11:21:57 1250  EXCEPTION
11:21:57 1251  WHEN BAD_FIRST_OFFER_CHAIN THEN
11:21:57 1252  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1253  	   SPROC_NAME, 'First offer chain not found');
11:21:57 1254  WHEN BAD_SECOND_OFFER_CHAIN THEN
11:21:57 1255  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1256  	   SPROC_NAME, 'Second offer chain not found');
11:21:57 1257  WHEN OTHERS THEN
11:21:57 1258  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1259  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1260  END CHECK_FOR_SAME_PRODUCTS;
11:21:57 1261  
11:21:57 1262  /******************************************************************************/
11:21:57 1263  
11:21:57 1264  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
11:21:57 1265  /*
11:21:57 1266  Throws exceptions (codes):
11:21:57 1267  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1268  Returns:
11:21:57 1269  GLOBAL_CONSTANTS_V15.TRUE cancelation key is 1 (in OFFER_CHAIN_META_DATA)
11:21:57 1270  GLOBAL_CONSTANTS_V15.FALSE else
11:21:57 1271  */
11:21:57 1272  	 in_offer_chain_id IN NUMBER
11:21:57 1273  ) RETURN NUMBER AS
11:21:57 1274  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
11:21:57 1275  -- VARIABLES
11:21:57 1276  var_is_cancelable_str VARCHAR2(1);
11:21:57 1277  var_is_cancelable     NUMBER;
11:21:57 1278  BEGIN
11:21:57 1279  
11:21:57 1280  	 BEGIN
11:21:57 1281  	   SELECT
11:21:57 1282  	     VALUE INTO var_is_cancelable_str
11:21:57 1283  	   FROM (
11:21:57 1284  	     SELECT
11:21:57 1285  	       VALUE, NAME
11:21:57 1286  	     FROM
11:21:57 1287  	       OFFER_CHAIN_META_DATA
11:21:57 1288  	     WHERE
11:21:57 1289  	       OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1290  	     )
11:21:57 1291  	   WHERE
11:21:57 1292  	     UPPER(NAME) = 'CANCELABLE';
11:21:57 1293  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
11:21:57 1294  	   EXCEPTION
11:21:57 1295  	     WHEN NO_DATA_FOUND THEN
11:21:57 1296  	       var_is_cancelable := GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 1297  	 END;
11:21:57 1298  
11:21:57 1299  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:57 1300  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 1301  	 END IF;
11:21:57 1302  
11:21:57 1303  	 RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:57 1304  
11:21:57 1305  EXCEPTION
11:21:57 1306  WHEN OTHERS THEN
11:21:57 1307  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1308  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1309  END IS_OFFER_CHAIN_CANCELABLE;
11:21:57 1310  
11:21:57 1311  /******************************************************************************/
11:21:57 1312  
11:21:57 1313  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
11:21:57 1314  /*
11:21:57 1315  Throws exceptions (codes):
11:21:57 1316  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1317  */
11:21:57 1318  	 in_offer_chain_id IN NUMBER
11:21:57 1319  ) RETURN NUMBER AS
11:21:57 1320  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
11:21:57 1321  -- VARIABLES
11:21:57 1322  var_max_concurrent_subs_str VARCHAR2(100);
11:21:57 1323  var_max_concurrent_subs	   NUMBER;
11:21:57 1324  BEGIN
11:21:57 1325  
11:21:57 1326  	 BEGIN
11:21:57 1327  	   SELECT
11:21:57 1328  	     VALUE into var_max_concurrent_subs_str
11:21:57 1329  	   FROM
11:21:57 1330  	     (
11:21:57 1331  	       SELECT
11:21:57 1332  		 NAME,
11:21:57 1333  		 VALUE
11:21:57 1334  	       FROM
11:21:57 1335  		 OFFER_CHAIN_ELIGIBILITY
11:21:57 1336  	       WHERE
11:21:57 1337  		 OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1338  	     )
11:21:57 1339  	   WHERE
11:21:57 1340  	     NAME LIKE GLOBAL_CONSTANTS_V15.MAX_CONCURRENT_SUBS;
11:21:57 1341  
11:21:57 1342  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V15.MAX_CONCURRENT_SUBS_UNLIM THEN
11:21:57 1343  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V15.INFINITY;
11:21:57 1344  	   ELSE
11:21:57 1345  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
11:21:57 1346  	   END IF;
11:21:57 1347  
11:21:57 1348  	   EXCEPTION
11:21:57 1349  	     WHEN NO_DATA_FOUND THEN
11:21:57 1350  	       var_max_concurrent_subs := 1;
11:21:57 1351  	 END;
11:21:57 1352  
11:21:57 1353  	 RETURN var_max_concurrent_subs;
11:21:57 1354  
11:21:57 1355  EXCEPTION
11:21:57 1356  WHEN OTHERS THEN
11:21:57 1357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1358  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1359  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
11:21:57 1360  
11:21:57 1361  /******************************************************************************/
11:21:57 1362  
11:21:57 1363  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
11:21:57 1364  /*
11:21:57 1365  Throws exceptions (codes):
11:21:57 1366  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1367  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1368  */
11:21:57 1369  	 in_offer_chain_id   IN NUMBER,
11:21:57 1370  	 in_eligibility_name IN VARCHAR2,
11:21:57 1371  	 out_result_set      OUT SYS_REFCURSOR
11:21:57 1372  ) AS
11:21:57 1373  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
11:21:57 1374  -- VARIABLES
11:21:57 1375  temp_offer_chain_id NUMBER;
11:21:57 1376  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
11:21:57 1377  -- EXCEPTIONS
11:21:57 1378  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:57 1379  BEGIN
11:21:57 1380  
11:21:57 1381  	 BEGIN
11:21:57 1382  	   SELECT
11:21:57 1383  	     OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 1384  	   FROM
11:21:57 1385  	     OFFER_CHAIN
11:21:57 1386  	   WHERE
11:21:57 1387  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 1388  	   EXCEPTION
11:21:57 1389  	     WHEN NO_DATA_FOUND THEN
11:21:57 1390  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:57 1391  	 END;
11:21:57 1392  
11:21:57 1393  	 var_eligibility_name := UPPER(in_eligibility_name);
11:21:57 1394  
11:21:57 1395  	 OPEN out_result_set FOR
11:21:57 1396  	 SELECT
11:21:57 1397  	   OFFER_CHAIN_ELIGIBILITY.ID,
11:21:57 1398  	   OFFER_CHAIN_ELIGIBILITY.NAME,
11:21:57 1399  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
11:21:57 1400  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
11:21:57 1401  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
11:21:57 1402  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
11:21:57 1403  	 FROM
11:21:57 1404  	   OFFER_CHAIN_ELIGIBILITY
11:21:57 1405  	 WHERE
11:21:57 1406  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1407  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
11:21:57 1408  
11:21:57 1409  EXCEPTION
11:21:57 1410  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 1411  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1412  	   SPROC_NAME, 'No such offer chain');
11:21:57 1413  WHEN OTHERS THEN
11:21:57 1414  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1415  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1416  END GET_OFFER_CHAIN_ELIGIBILITY;
11:21:57 1417  
11:21:57 1418  /******************************************************************************/
11:21:57 1419  
11:21:57 1420  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
11:21:57 1421  /*
11:21:57 1422  Throws exceptions (codes):
11:21:57 1423  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1424  */
11:21:57 1425  	 in_offer_chain_ids  IN VARCHAR2,
11:21:57 1426  	 in_eligibility_name IN VARCHAR2,
11:21:57 1427  	 out_result_set      OUT SYS_REFCURSOR
11:21:57 1428  ) AS
11:21:57 1429  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
11:21:57 1430  -- VARIABLES
11:21:57 1431  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
11:21:57 1432  BEGIN
11:21:57 1433  
11:21:57 1434  	 var_eligibility_name := UPPER(in_eligibility_name);
11:21:57 1435  
11:21:57 1436  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
11:21:57 1437  
11:21:57 1438  	 open out_result_set for
11:21:57 1439  	 'SELECT
11:21:57 1440  	   ID,
11:21:57 1441  	   NAME,
11:21:57 1442  	   VALUE,
11:21:57 1443  	   OFFER_CHAIN_ID,
11:21:57 1444  	   CREATE_DATE,
11:21:57 1445  	   CREATED_BY
11:21:57 1446  	 FROM
11:21:57 1447  	   OFFER_CHAIN_ELIGIBILITY
11:21:57 1448  	 WHERE
11:21:57 1449  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
11:21:57 1450  	   AND UPPER(NAME) = :1'
11:21:57 1451  	 using var_eligibility_name;
11:21:57 1452  
11:21:57 1453  EXCEPTION
11:21:57 1454  WHEN OTHERS THEN
11:21:57 1455  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1456  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1457  END GET_OFFER_CHAINS_ELIGIBILITY;
11:21:57 1458  
11:21:57 1459  /******************************************************************************/
11:21:57 1460  
11:21:57 1461  PROCEDURE GET_OFFER_CHAINS_META_DATA (
11:21:57 1462  	 in_offer_chain_ids IN VARCHAR2,
11:21:57 1463  	 in_meta_data_name  IN VARCHAR2,
11:21:57 1464  	 out_result_set     OUT SYS_REFCURSOR
11:21:57 1465  ) AS
11:21:57 1466  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
11:21:57 1467  -- VARIABLES
11:21:57 1468  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
11:21:57 1469  BEGIN
11:21:57 1470  
11:21:57 1471  	 var_meta_data_name := UPPER(in_meta_data_name);
11:21:57 1472  
11:21:57 1473  	 open out_result_set for
11:21:57 1474  	 'select
11:21:57 1475  	   ID,
11:21:57 1476  	   NAME,
11:21:57 1477  	   VALUE,
11:21:57 1478  	   OFFER_CHAIN_ID,
11:21:57 1479  	   CREATED_BY,
11:21:57 1480  	   CREATE_DATE
11:21:57 1481  	 from
11:21:57 1482  	   OFFER_CHAIN_META_DATA
11:21:57 1483  	 where
11:21:57 1484  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
11:21:57 1485  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
11:21:57 1486  	 using var_meta_data_name;
11:21:57 1487  
11:21:57 1488  EXCEPTION
11:21:57 1489  WHEN OTHERS THEN
11:21:57 1490  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1491  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1492  END GET_OFFER_CHAINS_META_DATA;
11:21:57 1493  
11:21:57 1494  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:57 1495  /*
11:21:57 1496  Throws exceptions (codes):
11:21:57 1497  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1498  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1499  */
11:21:57 1500  	 in_offer_chain_id IN NUMBER,
11:21:57 1501  	 in_meta_data_name IN VARCHAR2,
11:21:57 1502  	 out_result_set    OUT SYS_REFCURSOR
11:21:57 1503  ) AS
11:21:57 1504  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
11:21:57 1505  -- VARIABLES
11:21:57 1506  temp_offer_chain_id NUMBER;
11:21:57 1507  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
11:21:57 1508  -- EXCEPTIONS
11:21:57 1509  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:57 1510  BEGIN
11:21:57 1511  
11:21:57 1512  	 BEGIN
11:21:57 1513  	   SELECT
11:21:57 1514  	     OFFER_CHAIN.ID into temp_offer_chain_id
11:21:57 1515  	   FROM
11:21:57 1516  	     OFFER_CHAIN
11:21:57 1517  	   WHERE
11:21:57 1518  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:57 1519  	   EXCEPTION
11:21:57 1520  	     WHEN NO_DATA_FOUND THEN
11:21:57 1521  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:57 1522  	 END;
11:21:57 1523  
11:21:57 1524  	 var_meta_data_name := UPPER(in_meta_data_name);
11:21:57 1525  
11:21:57 1526  	 OPEN out_result_set FOR
11:21:57 1527  	 SELECT
11:21:57 1528  	   OFFER_CHAIN_META_DATA.ID,
11:21:57 1529  	   OFFER_CHAIN_META_DATA.NAME,
11:21:57 1530  	   OFFER_CHAIN_META_DATA.VALUE,
11:21:57 1531  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
11:21:57 1532  	   OFFER_CHAIN_META_DATA.CREATED_BY,
11:21:57 1533  	   OFFER_CHAIN_META_DATA.CREATE_DATE
11:21:57 1534  	 FROM
11:21:57 1535  	   OFFER_CHAIN_META_DATA
11:21:57 1536  	 WHERE
11:21:57 1537  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1538  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
11:21:57 1539  
11:21:57 1540  EXCEPTION
11:21:57 1541  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 1542  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1543  	   SPROC_NAME, 'No such offer chain');
11:21:57 1544  WHEN OTHERS THEN
11:21:57 1545  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1546  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1547  END GET_OFFER_CHAIN_META_DATA;
11:21:57 1548  
11:21:57 1549  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
11:21:57 1550  /*
11:21:57 1551  Throws exceptions (codes):
11:21:57 1552  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1553  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1554  */
11:21:57 1555  	 in_offer_id	IN NUMBER,
11:21:57 1556  	 out_result_set OUT SYS_REFCURSOR
11:21:57 1557  ) AS
11:21:57 1558  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
11:21:57 1559  -- VARIABLES
11:21:57 1560  temp_offer_id NUMBER;
11:21:57 1561  -- EXCEPTIONS
11:21:57 1562  BAD_OFFER_ID EXCEPTION;
11:21:57 1563  BEGIN
11:21:57 1564  
11:21:57 1565  	 BEGIN
11:21:57 1566  	   SELECT
11:21:57 1567  	     OFFER.ID into temp_offer_id
11:21:57 1568  	   FROM
11:21:57 1569  	     OFFER
11:21:57 1570  	   WHERE
11:21:57 1571  	     OFFER.ID = in_offer_id;
11:21:57 1572  	   EXCEPTION
11:21:57 1573  	     WHEN NO_DATA_FOUND THEN
11:21:57 1574  	       RAISE BAD_OFFER_ID;
11:21:57 1575  	 END;
11:21:57 1576  
11:21:57 1577  	 OPEN out_result_set FOR
11:21:57 1578  	 SELECT DISTINCT
11:21:57 1579  	   PRODUCT_OFFERING.ID,
11:21:57 1580  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:57 1581  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:57 1582  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:57 1583  	   PRODUCT_OFFERING.QUANTITY,
11:21:57 1584  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:57 1585  	   PRODUCT_OFFERING.CREATED_BY,
11:21:57 1586  	   CAPABILITY.ID CAP_ID,
11:21:57 1587  	   CAPABILITY.CODE CAP_CODE,
11:21:57 1588  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:57 1589  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:57 1590  	 FROM
11:21:57 1591  	   OFFER_PRODUCT_OFFERING
11:21:57 1592  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:57 1593  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:57 1594  	 WHERE
11:21:57 1595  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
11:21:57 1596  
11:21:57 1597  EXCEPTION
11:21:57 1598  WHEN BAD_OFFER_ID THEN
11:21:57 1599  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1600  	   SPROC_NAME, 'No such offer');
11:21:57 1601  WHEN OTHERS THEN
11:21:57 1602  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1603  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1604  END GET_PROD_OFFERINGS_BY_OFFER_ID;
11:21:57 1605  
11:21:57 1606  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:57 1607  /*
11:21:57 1608  Throws exceptions (codes):
11:21:57 1609  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:57 1610  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1611  */
11:21:57 1612  	 in_product_offering_id IN NUMBER,
11:21:57 1613  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
11:21:57 1614  	 out_result_set 	OUT SYS_REFCURSOR
11:21:57 1615  ) AS
11:21:57 1616  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
11:21:57 1617  -- VARIABLES
11:21:57 1618  temp_product_offering_id NUMBER;
11:21:57 1619  -- EXCEPTIONS
11:21:57 1620  BAD_PRODUCT_OFFERING_ID EXCEPTION;
11:21:57 1621  BEGIN
11:21:57 1622  
11:21:57 1623  	 BEGIN
11:21:57 1624  	   SELECT
11:21:57 1625  	     PRODUCT_OFFERING.ID into temp_product_offering_id
11:21:57 1626  	   FROM
11:21:57 1627  	     PRODUCT_OFFERING
11:21:57 1628  	   WHERE
11:21:57 1629  	     PRODUCT_OFFERING.ID = in_product_offering_id;
11:21:57 1630  	   EXCEPTION
11:21:57 1631  	     WHEN NO_DATA_FOUND THEN
11:21:57 1632  	       RAISE BAD_PRODUCT_OFFERING_ID;
11:21:57 1633  	 END;
11:21:57 1634  
11:21:57 1635  	 OPEN out_result_set FOR
11:21:57 1636  	 SELECT
11:21:57 1637  	   PRODUCT_OFFERING_META_DATA.ID,
11:21:57 1638  	   PRODUCT_OFFERING_META_DATA.NAME,
11:21:57 1639  	   PRODUCT_OFFERING_META_DATA.VALUE,
11:21:57 1640  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
11:21:57 1641  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
11:21:57 1642  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
11:21:57 1643  	 FROM
11:21:57 1644  	   PRODUCT_OFFERING_META_DATA
11:21:57 1645  	 WHERE
11:21:57 1646  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
11:21:57 1647  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
11:21:57 1648  
11:21:57 1649  EXCEPTION
11:21:57 1650  WHEN BAD_PRODUCT_OFFERING_ID THEN
11:21:57 1651  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1652  	   SPROC_NAME, 'No such product offering');
11:21:57 1653  END GET_PRODUCT_OFFERING_META_DATA;
11:21:57 1654  
11:21:57 1655  /******************************************************************************/
11:21:57 1656  
11:21:57 1657  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
11:21:57 1658  /*
11:21:57 1659  Throws exceptions (codes):
11:21:57 1660  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:57 1661  */
11:21:57 1662  	 in_offer_chain_1 IN NUMBER,
11:21:57 1663  	 in_offer_chain_2 IN NUMBER,
11:21:57 1664  	 out_result_set   OUT SYS_REFCURSOR
11:21:57 1665  ) AS
11:21:57 1666  BEGIN
11:21:57 1667  
11:21:57 1668  	 OPEN out_result_set FOR
11:21:57 1669  	 SELECT
11:21:57 1670  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
11:21:57 1671  	   COUNT_1 + COUNT_2	    AS "COUNT"
11:21:57 1672  	 FROM
11:21:57 1673  	   (
11:21:57 1674  	     SELECT
11:21:57 1675  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
11:21:57 1676  	       COUNT(*) 		   as "COUNT_1"
11:21:57 1677  	     FROM
11:21:57 1678  	       (
11:21:57 1679  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
11:21:57 1680  	       )
11:21:57 1681  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
11:21:57 1682  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57 1683  	     GROUP BY
11:21:57 1684  	       PRODUCT_OFFERING.PRODUCT_ID
11:21:57 1685  	   )
11:21:57 1686  	   INNER JOIN
11:21:57 1687  	   (
11:21:57 1688  	     SELECT
11:21:57 1689  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
11:21:57 1690  	       COUNT(*) 		   as "COUNT_2"
11:21:57 1691  	     FROM
11:21:57 1692  	       (
11:21:57 1693  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
11:21:57 1694  	       )
11:21:57 1695  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
11:21:57 1696  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:57 1697  	     GROUP BY
11:21:57 1698  	       PRODUCT_OFFERING.PRODUCT_ID
11:21:57 1699  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
11:21:57 1700  
11:21:57 1701  END GET_OFF_CHAINS_SAME_PRODUCTS;
11:21:57 1702  
11:21:57 1703  /******************************************************************************/
11:21:57 1704  
11:21:57 1705  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
11:21:57 1706  	 in_offer_chain_id IN NUMBER,
11:21:57 1707  	 in_meta_data_name IN VARCHAR2,
11:21:57 1708  	 out_value	   OUT VARCHAR2
11:21:57 1709  ) AS
11:21:57 1710  BEGIN
11:21:57 1711  	 BEGIN
11:21:57 1712  	   SELECT
11:21:57 1713  	     OFFER_CHAIN_META_DATA.VALUE into out_value
11:21:57 1714  	   FROM
11:21:57 1715  	     OFFER_CHAIN_META_DATA
11:21:57 1716  	   WHERE
11:21:57 1717  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1718  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
11:21:57 1719  
11:21:57 1720  	   EXCEPTION
11:21:57 1721  	     WHEN NO_DATA_FOUND THEN
11:21:57 1722  	       out_value := NULL;
11:21:57 1723  	 END;
11:21:57 1724  END GET_OFFER_CHAIN_MD_VALUE;
11:21:57 1725  
11:21:57 1726  /******************************************************************************/
11:21:57 1727  
11:21:57 1728  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
11:21:57 1729  	 in_offer_chain_id   IN NUMBER,
11:21:57 1730  	 in_eligibility_name IN VARCHAR2,
11:21:57 1731  	 out_value	     OUT VARCHAR2
11:21:57 1732  ) AS
11:21:57 1733  BEGIN
11:21:57 1734  	 BEGIN
11:21:57 1735  	   SELECT
11:21:57 1736  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
11:21:57 1737  	   FROM
11:21:57 1738  	     OFFER_CHAIN_ELIGIBILITY
11:21:57 1739  	   WHERE
11:21:57 1740  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 1741  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
11:21:57 1742  
11:21:57 1743  	   EXCEPTION
11:21:57 1744  	     WHEN NO_DATA_FOUND THEN
11:21:57 1745  	       out_value := NULL;
11:21:57 1746  	 END;
11:21:57 1747  END GET_OFFER_CHAIN_EL_VALUE;
11:21:57 1748  
11:21:57 1749  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
11:21:57 1750  	 in_offer_id	IN NUMBER,
11:21:57 1751  	 out_result_set OUT SYS_REFCURSOR
11:21:57 1752  ) AS
11:21:57 1753  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
11:21:57 1754  -- VARIABLES
11:21:57 1755  temp_offer_id NUMBER;
11:21:57 1756  -- EXCEPTIONS
11:21:57 1757  BAD_OFFER_ID EXCEPTION;
11:21:57 1758  BEGIN
11:21:57 1759  
11:21:57 1760  	 BEGIN
11:21:57 1761  	   SELECT
11:21:57 1762  	     OFFER.ID into temp_offer_id
11:21:57 1763  	   FROM
11:21:57 1764  	     OFFER
11:21:57 1765  	   WHERE
11:21:57 1766  	     OFFER.ID = in_offer_id;
11:21:57 1767  	   EXCEPTION
11:21:57 1768  	     WHEN NO_DATA_FOUND THEN
11:21:57 1769  	       RAISE BAD_OFFER_ID;
11:21:57 1770  	 END;
11:21:57 1771  
11:21:57 1772  	 OPEN out_result_set FOR
11:21:57 1773  	 SELECT
11:21:57 1774  	   PRODUCT_OFFERING.ID,
11:21:57 1775  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:57 1776  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:57 1777  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:57 1778  	   PRODUCT_OFFERING.QUANTITY,
11:21:57 1779  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:57 1780  	   PRODUCT_OFFERING.CREATED_BY,
11:21:57 1781  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
11:21:57 1782  	 FROM
11:21:57 1783  	   PRODUCT_OFFERING
11:21:57 1784  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:57 1785  	 WHERE
11:21:57 1786  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
11:21:57 1787  
11:21:57 1788  EXCEPTION
11:21:57 1789  WHEN BAD_OFFER_ID THEN
11:21:57 1790  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1791  	   SPROC_NAME, 'No such offer');
11:21:57 1792  WHEN OTHERS THEN
11:21:57 1793  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1794  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1795  END GET_OFFER_PRODUCT_OFFERINGS;
11:21:57 1796  
11:21:57 1797  /******************************************************************************/
11:21:57 1798  
11:21:57 1799  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
11:21:57 1800  	 in_meta_data_name  IN VARCHAR2,
11:21:57 1801  	 in_meta_data_value IN VARCHAR2,
11:21:57 1802  	 out_result_set     OUT SYS_REFCURSOR
11:21:57 1803  ) AS
11:21:57 1804  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
11:21:57 1805  -- VARIABLES
11:21:57 1806  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
11:21:57 1807  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
11:21:57 1808  BEGIN
11:21:57 1809  
11:21:57 1810  	 OPEN out_result_set FOR
11:21:57 1811  	 SELECT
11:21:57 1812  	   och.ID,
11:21:57 1813  	   och.NAME,
11:21:57 1814  	   och.DESCRIPTION,
11:21:57 1815  	   och.OFFER_CHAIN_STATUS_ID,
11:21:57 1816  	   PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
11:21:57 1817  	   och.ADOPTABILITY_WINDOW_START_DATE,
11:21:57 1818  	   och.ADOPTABILITY_WINDOW_END_DATE,
11:21:57 1819  	   PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
11:21:57 1820  	   och.IS_GIFT_CERTIFICATE,
11:21:57 1821  	   'false' as comf_offer_chain, -- TODO
11:21:57 1822  	   po.PRODUCT_ID,
11:21:57 1823  	   och.GROUP_ACCOUNT_TYPE_ID
11:21:57 1824  	 FROM
11:21:57 1825  	   OFFER_CHAIN och,
11:21:57 1826  	   OFFER_OFFER_CHAIN ooch,
11:21:57 1827  	   OFFER_PRODUCT_OFFERING opo,
11:21:57 1828  	   PRODUCT_OFFERING po
11:21:57 1829  	 WHERE
11:21:57 1830  	   och.ID = ooch.OFFER_CHAIN_ID
11:21:57 1831  	   and ooch.OFFER_ID = opo.OFFER_ID
11:21:57 1832  	   and opo.PRODUCT_OFFERING_ID = po.ID
11:21:57 1833  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE
11:21:57 1834  	   and och.id in (
11:21:57 1835  	     SELECT DISTINCT
11:21:57 1836  	       och2.id
11:21:57 1837  	     from
11:21:57 1838  	       offer_chain och2
11:21:57 1839  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
11:21:57 1840  	     where
11:21:57 1841  	       UPPER(ochmd.name) = v_meta_data_name
11:21:57 1842  	       AND UPPER(ochmd.value) = v_meta_data_value
11:21:57 1843  	   );
11:21:57 1844  
11:21:57 1845  EXCEPTION
11:21:57 1846  WHEN OTHERS THEN
11:21:57 1847  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1848  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1849  END GET_OFFER_CHAINS_BY_META_DATA;
11:21:57 1850  
11:21:57 1851  /******************************************************************************/
11:21:57 1852  
11:21:57 1853  PROCEDURE GET_ALL_META_DATA (
11:21:57 1854  	 in_offer_chain_id IN NUMBER,
11:21:57 1855  	 out_result_set    OUT SYS_REFCURSOR
11:21:57 1856  ) AS
11:21:57 1857  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
11:21:57 1858  -- Variables
11:21:57 1859  temp_offer_chain_id NUMBER;
11:21:57 1860  -- Exceptions
11:21:57 1861  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:57 1862  BEGIN
11:21:57 1863  
11:21:57 1864  	 BEGIN
11:21:57 1865  	   SELECT
11:21:57 1866  	     OCH.ID into temp_offer_chain_id
11:21:57 1867  	   FROM
11:21:57 1868  	     OFFER_CHAIN OCH
11:21:57 1869  	   WHERE
11:21:57 1870  	     OCH.ID = in_offer_chain_id;
11:21:57 1871  	   EXCEPTION
11:21:57 1872  	     WHEN NO_DATA_FOUND THEN
11:21:57 1873  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:57 1874  	 END;
11:21:57 1875  
11:21:57 1876  	 OPEN out_result_set FOR
11:21:57 1877  	 SELECT
11:21:57 1878  	   OCHMD.ID,
11:21:57 1879  	   OCHMD.OFFER_CHAIN_ID,
11:21:57 1880  	   OCHMD.NAME,
11:21:57 1881  	   OCHMD.VALUE,
11:21:57 1882  	   OCHMD.CREATE_DATE,
11:21:57 1883  	   OCHMD.CREATED_BY
11:21:57 1884  	 FROM
11:21:57 1885  	   OFFER_CHAIN_META_DATA OCHMD
11:21:57 1886  	 WHERE
11:21:57 1887  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
11:21:57 1888  
11:21:57 1889  EXCEPTION
11:21:57 1890  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:57 1891  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1892  	   SPROC_NAME, 'No such offer chain', SQLERRM);
11:21:57 1893  WHEN OTHERS THEN
11:21:57 1894  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1895  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1896  END GET_ALL_META_DATA;
11:21:57 1897  
11:21:57 1898  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
11:21:57 1899  	 in_group_id	   IN NUMBER,
11:21:57 1900  	 in_offer_chain_id IN NUMBER,
11:21:57 1901  	 out_is_eligible   OUT NUMBER,
11:21:57 1902  	 out_concurrent_subscription_id OUT NUMBER
11:21:57 1903  ) AS
11:21:57 1904  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
11:21:57 1905  -- Variables
11:21:57 1906  var_account_id  NUMBER;
11:21:57 1907  var_is_eligible NUMBER;
11:21:57 1908  var_is_gc       NUMBER;
11:21:57 1909  -- Exceptions
11:21:57 1910  BAD_GROUP_ID		   EXCEPTION;
11:21:57 1911  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
11:21:57 1912  BAD_OC_ID		   EXCEPTION;
11:21:57 1913  EXCEPTION_MESSAGE	   VARCHAR(1024);
11:21:57 1914  BEGIN
11:21:57 1915  
11:21:57 1916  	 var_is_eligible := GLOBAL_CONSTANTS_V15.TRUE;
11:21:57 1917  
11:21:57 1918  	 out_concurrent_subscription_id := NULL;
11:21:57 1919  
11:21:57 1920  	 BEGIN
11:21:57 1921  	   SELECT
11:21:57 1922  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
11:21:57 1923  	   FROM
11:21:57 1924  	     OFFER_CHAIN OC
11:21:57 1925  	   WHERE
11:21:57 1926  	     OC.ID = in_offer_chain_id;
11:21:57 1927  	   EXCEPTION
11:21:57 1928  	     WHEN NO_DATA_FOUND THEN
11:21:57 1929  	       RAISE BAD_OC_ID;
11:21:57 1930  	 END;
11:21:57 1931  
11:21:57 1932  	 -- only check eligibility if this is not a gift certificate
11:21:57 1933  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
11:21:57 1934  	   BEGIN
11:21:57 1935  	     SELECT
11:21:57 1936  	       A.ID into var_account_id
11:21:57 1937  	     FROM
11:21:57 1938  	       ACCOUNT A
11:21:57 1939  	     WHERE
11:21:57 1940  	       A.GROUP_ID = in_group_id;
11:21:57 1941  	     EXCEPTION
11:21:57 1942  	       WHEN NO_DATA_FOUND THEN
11:21:57 1943  		 RAISE BAD_GROUP_ID;
11:21:57 1944  	   END;
11:21:57 1945  
11:21:57 1946  
11:21:57 1947  	   FOR f_offer_chain IN (
11:21:57 1948  	       SELECT
11:21:57 1949  		 S.ID as SUBSCRIPTION_ID,
11:21:57 1950  		 S.OFFER_CHAIN_ID
11:21:57 1951  	       FROM
11:21:57 1952  		 SUBSCRIPTION S
11:21:57 1953  	       WHERE
11:21:57 1954  		 S.ACCOUNT_ID = var_account_id
11:21:57 1955  		 AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:57 1956  	   )
11:21:57 1957  	   LOOP
11:21:57 1958  	     BEGIN
11:21:57 1959  	       IF (
11:21:57 1960  		 PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(
11:21:57 1961  		   in_offer_chain_id,
11:21:57 1962  		   f_offer_chain.offer_chain_id,
11:21:57 1963  		   GLOBAL_CONSTANTS_V15.TRUE
11:21:57 1964  		 ) = GLOBAL_CONSTANTS_V15.TRUE
11:21:57 1965  	       ) THEN
11:21:57 1966  		 var_is_eligible := GLOBAL_CONSTANTS_V15.FALSE;
11:21:57 1967  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
11:21:57 1968  	       END IF;
11:21:57 1969  	       EXCEPTION
11:21:57 1970  		 WHEN OTHERS THEN
11:21:57 1971  		   EXCEPTION_MESSAGE := SQLERRM;
11:21:57 1972  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
11:21:57 1973  	     END;
11:21:57 1974  	   END LOOP;
11:21:57 1975  	 END IF;
11:21:57 1976  	 out_is_eligible := var_is_eligible;
11:21:57 1977  
11:21:57 1978  EXCEPTION
11:21:57 1979  WHEN BAD_GROUP_ID THEN
11:21:57 1980  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1981  	   SPROC_NAME, 'No such offer chain', SQLERRM);
11:21:57 1982  WHEN BAD_OC_ID THEN
11:21:57 1983  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:57 1984  	   SPROC_NAME, 'No such offer chain', SQLERRM);
11:21:57 1985  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
11:21:57 1986  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 1987  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
11:21:57 1988  WHEN OTHERS THEN
11:21:57 1989  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 1990  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 1991  END CHECK_PRODUCT_ELIGIBILITY;
11:21:57 1992  
11:21:57 1993  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:57 1994  	 in_offer_chain_id	  IN NUMBER,
11:21:57 1995  	 in_action_name 	  IN VARCHAR2,
11:21:57 1996  	 out_notification_type_id OUT NUMBER
11:21:57 1997  ) AS
11:21:57 1998  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
11:21:57 1999  -- Variables
11:21:57 2000  var_action_id NUMBER;
11:21:57 2001  -- Exceptions
11:21:57 2002  BAD_ACTION_NAME	      EXCEPTION;
11:21:57 2003  MULTIPLY_ACTIONS_FOUND EXCEPTION;
11:21:57 2004  BEGIN
11:21:57 2005  
11:21:57 2006  	 BEGIN
11:21:57 2007  	   SELECT
11:21:57 2008  	     A.ID into var_action_id
11:21:57 2009  	   FROM
11:21:57 2010  	     ACTION A
11:21:57 2011  	   WHERE
11:21:57 2012  	     UPPER(A.NAME) = UPPER(in_action_name);
11:21:57 2013  	   EXCEPTION
11:21:57 2014  	     WHEN NO_DATA_FOUND THEN
11:21:57 2015  	       RAISE BAD_ACTION_NAME;
11:21:57 2016  	     WHEN TOO_MANY_ROWS THEN
11:21:57 2017  	       RAISE MULTIPLY_ACTIONS_FOUND;
11:21:57 2018  	 END;
11:21:57 2019  
11:21:57 2020  	 SELECT
11:21:57 2021  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
11:21:57 2022  	 FROM
11:21:57 2023  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
11:21:57 2024  	 WHERE
11:21:57 2025  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
11:21:57 2026  	   AND OCNT.ACTION_ID = var_action_id;
11:21:57 2027  
11:21:57 2028  EXCEPTION
11:21:57 2029  WHEN NO_DATA_FOUND THEN
11:21:57 2030  	 out_notification_type_id := NULL;
11:21:57 2031  WHEN BAD_ACTION_NAME THEN
11:21:57 2032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:57 2033  	   SPROC_NAME, 'Bad action name', SQLERRM);
11:21:57 2034  WHEN MULTIPLY_ACTIONS_FOUND THEN
11:21:57 2035  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:57 2036  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
11:21:57 2037  WHEN OTHERS THEN
11:21:57 2038  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:57 2039  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:57 2040  END GET_NOTIFICATION_TYPE_ID;
11:21:57 2041  
11:21:57 2042  END PROCS_OFFER_CHAIN_V15;
11:21:57 2043  .
11:21:57 SQL> /

Package body created.

Elapsed: 00:00:00.15
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
11:21:58   2  AS
11:21:58   3  	  --------------------------------------------------------------------------------
11:21:58   4  PROCEDURE GATHER_SYNC_EVENTS
11:21:58   5  	  (
11:21:58   6  	      in_last_timestamp TIMESTAMP,
11:21:58   7  	      out_new_timestamp OUT TIMESTAMP)
11:21:58   8  IS
11:21:58   9  BEGIN
11:21:58  10  	  out_new_timestamp := systimestamp;
11:21:58  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
11:21:58  12  END;
11:21:58  13  	  --------------------------------------------------------------------------------
11:21:58  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
11:21:58  15  IS
11:21:58  16  BEGIN
11:21:58  17  	  INSERT
11:21:58  18  	  INTO
11:21:58  19  	      core_owner.polling_sync
11:21:58  20  	      (
11:21:58  21  		  account_id,
11:21:58  22  		  group_id,
11:21:58  23  		  event_type,
11:21:58  24  		  event_date
11:21:58  25  	      )
11:21:58  26  	  select id, group_id, event_type, event_date from (
11:21:58  27  	      SELECT
11:21:58  28  		  a.id,
11:21:58  29  		  a.group_id,
11:21:58  30  		  'I' event_type,
11:21:58  31  		  in_end_ts event_date,
11:21:58  32  		  max(cl.change_time) last_change_time
11:21:58  33  	      FROM
11:21:58  34  		  core_hist_owner.change_log cl,
11:21:58  35  		  core_owner.credit_card cc,
11:21:58  36  		  core_owner.account a
11:21:58  37  	      WHERE
11:21:58  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
11:21:58  39  	      AND cl.item = 'CREDIT_CARD'
11:21:58  40  	      AND cl.id = cc.id
11:21:58  41  	      AND cc.account_id = a.id
11:21:58  42  	      GROUP BY a.id, a.group_id
11:21:58  43  	      UNION ALL
11:21:58  44  	      SELECT
11:21:58  45  		  a.id,
11:21:58  46  		  a.group_id,
11:21:58  47  		  'I',
11:21:58  48  		  in_end_ts,
11:21:58  49  		  max(cl.change_time) last_change_time
11:21:58  50  	      FROM
11:21:58  51  		  core_hist_owner.change_log cl,
11:21:58  52  		  core_owner.paypal p,
11:21:58  53  		  core_owner.account a
11:21:58  54  	      WHERE
11:21:58  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
11:21:58  56  	      AND cl.item = 'PAYPAL'
11:21:58  57  	      AND cl.id = p.id
11:21:58  58  	      AND p.account_id = a.id
11:21:58  59  	      GROUP BY a.id, a.group_id
11:21:58  60  	      UNION ALL
11:21:58  61  	      SELECT
11:21:58  62  		  a.id,
11:21:58  63  		  a.group_id,
11:21:58  64  		  'S',
11:21:58  65  		  in_end_ts,
11:21:58  66  		  max(cl.change_time) last_change_time
11:21:58  67  	      FROM
11:21:58  68  		  core_hist_owner.change_log cl,
11:21:58  69  		  core_owner.subscription s,
11:21:58  70  		  core_owner.account a
11:21:58  71  	      WHERE
11:21:58  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
11:21:58  73  	      AND cl.item = 'SUBSCRIPTION'
11:21:58  74  	      AND cl.id = s.id
11:21:58  75  	      AND s.account_id = a.id
11:21:58  76  	      GROUP BY a.id, a.group_id
11:21:58  77  	      UNION ALL
11:21:58  78  	      SELECT
11:21:58  79  		  a.id,
11:21:58  80  		  a.group_id,
11:21:58  81  		  'G',
11:21:58  82  		  in_end_ts,
11:21:58  83  		  max(cl.change_time) last_change_time
11:21:58  84  	      FROM
11:21:58  85  		  core_hist_owner.change_log cl,
11:21:58  86  		  core_owner.gift_certificate gc,
11:21:58  87  		  core_owner.account a
11:21:58  88  	      WHERE
11:21:58  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
11:21:58  90  	      AND cl.item = 'GIFT_CERTIFICATE'
11:21:58  91  	      AND cl.id = gc.id
11:21:58  92  	      AND gc.purchaser_group_id = a.group_id
11:21:58  93  	      GROUP BY a.id, a.group_id
11:21:58  94  	  ) t
11:21:58  95  	  where not exists (
11:21:58  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
11:21:58  97  	      from polling_sync ps
11:21:58  98  	      where ps.account_id = t.id
11:21:58  99  		and ps.group_id = t.group_id
11:21:58 100  		and ps.event_type = t.event_type
11:21:58 101  		and ps.event_date >= t.last_change_time
11:21:58 102  	  )
11:21:58 103  	  ;
11:21:58 104  END;
11:21:58 105  --------------------------------------------------------------------------------
11:21:58 106  FUNCTION CREATE_NEW_TRANSFER_SET
11:21:58 107  	  (
11:21:58 108  	      in_set_maximum NUMBER)
11:21:58 109  	  RETURN core_owner.polling_sync.set_id%type
11:21:58 110  IS
11:21:58 111  	  pragma autonomous_transaction;
11:21:58 112  	  v_set_id core_owner.polling_sync.set_id%type;
11:21:58 113  BEGIN
11:21:58 114  	  SELECT
11:21:58 115  	      pollsync_setid_seq.nextval
11:21:58 116  	  INTO
11:21:58 117  	      v_set_id
11:21:58 118  	  FROM
11:21:58 119  	      dual;
11:21:58 120  	  update
11:21:58 121  	    core_owner.polling_sync ps
11:21:58 122  	  set
11:21:58 123  	    ps.set_id = v_set_id
11:21:58 124  	  where
11:21:58 125  	    ps.set_id IS NULL and
11:21:58 126  	    rownum <= in_set_maximum
11:21:58 127  	  ;
11:21:58 128  	  COMMIT;
11:21:58 129  	  RETURN v_set_id;
11:21:58 130  END;
11:21:58 131  --------------------------------------------------------------------------------
11:21:58 132  FUNCTION RETREIVE_TRANSFER_SET
11:21:58 133  	  (
11:21:58 134  	      in_set_id core_owner.polling_sync.set_id%type)
11:21:58 135  	  RETURN sys_refcursor
11:21:58 136  IS
11:21:58 137  	  v_refcursor sys_refcursor;
11:21:58 138  BEGIN
11:21:58 139  	  UPDATE
11:21:58 140  	      core_owner.polling_sync ps
11:21:58 141  	  SET
11:21:58 142  	      ps.last_send_date = sysdate,
11:21:58 143  	      ps.num_calls = ps.num_calls + 1
11:21:58 144  	  WHERE
11:21:58 145  	      ps.set_id = in_set_id ;
11:21:58 146  	  OPEN v_refcursor FOR
11:21:58 147  	  SELECT
11:21:58 148  	      ps.set_id,
11:21:58 149  	      ps.group_id,
11:21:58 150  	      ps.event_type,
11:21:58 151  	      ps.event_date
11:21:58 152  	  FROM
11:21:58 153  	      core_owner.polling_sync ps
11:21:58 154  	  WHERE
11:21:58 155  	      ps.set_id = in_set_id
11:21:58 156  	  AND ps.group_id IS NOT NULL ;
11:21:58 157  	  RETURN v_refcursor;
11:21:58 158  END;
11:21:58 159  --------------------------------------------------------------------------------
11:21:58 160  PROCEDURE GET_TRANSFER_SET
11:21:58 161  	  (
11:21:58 162  	      in_set_maximum NUMBER,
11:21:58 163  	      in_max_retries NUMBER,
11:21:58 164  	      out_refcursor OUT sys_refcursor)
11:21:58 165  IS
11:21:58 166  	  v_set_id core_owner.polling_sync.set_id%type;
11:21:58 167  BEGIN
11:21:58 168  	  /* Look for previously sent but unconfirmed sets and
11:21:58 169  	  send again until max_retries calls */
11:21:58 170  	  FOR x IN
11:21:58 171  	  (
11:21:58 172  	      SELECT
11:21:58 173  		  ps.set_id,
11:21:58 174  		  COUNT( *) set_size
11:21:58 175  	      FROM
11:21:58 176  		  core_owner.polling_sync ps
11:21:58 177  	      WHERE
11:21:58 178  		  ps.event_date > sysdate - 14
11:21:58 179  	      AND ps.confirm_date IS NULL
11:21:58 180  	      AND ps.last_send_date IS NOT NULL
11:21:58 181  	      AND ps.num_calls < in_max_retries
11:21:58 182  	      GROUP BY
11:21:58 183  		  ps.set_id
11:21:58 184  	      ORDER BY
11:21:58 185  		  ps.set_id
11:21:58 186  	  )
11:21:58 187  	  LOOP
11:21:58 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
11:21:58 189  	      RETURN;
11:21:58 190  	  END LOOP;
11:21:58 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
11:21:58 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
11:21:58 193  	  RETURN;
11:21:58 194  END;
11:21:58 195  --------------------------------------------------------------------------------
11:21:58 196  PROCEDURE CONFIRM_TRANSFER_SET
11:21:58 197  	  (
11:21:58 198  	      in_set_id core_owner.polling_sync.set_id%type)
11:21:58 199  IS
11:21:58 200  	  v_unconfirmable EXCEPTION;
11:21:58 201  BEGIN
11:21:58 202  	  UPDATE
11:21:58 203  	      core_owner.polling_sync ps
11:21:58 204  	  SET
11:21:58 205  	      ps.confirm_date = systimestamp
11:21:58 206  	  WHERE
11:21:58 207  	      ps.set_id = in_set_id
11:21:58 208  	  AND ps.confirm_date IS NULL ;
11:21:58 209  	  IF(sql%rowcount < 1) THEN
11:21:58 210  	      raise v_unconfirmable;
11:21:58 211  	  END IF;
11:21:58 212  END;
11:21:58 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
11:21:58 214  IS
11:21:58 215  BEGIN
11:21:58 216  	  UPDATE POLLING_SYNC_LASTRUN
11:21:58 217  	  SET last_run = current_timestamp;
11:21:58 218  	  IF ( sql%rowcount = 0 )
11:21:58 219  	  THEN
11:21:58 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
11:21:58 221  	  END if;
11:21:58 222  	  COMMIT;
11:21:58 223  END;
11:21:58 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
11:21:58 225  IS
11:21:58 226  BEGIN
11:21:58 227  	  SELECT LAST_RUN INTO ts
11:21:58 228  	  FROM POLLING_SYNC_LASTRUN
11:21:58 229  	  WHERE ROWNUM < 2;
11:21:58 230  EXCEPTION
11:21:58 231  	WHEN NO_DATA_FOUND
11:21:58 232  	THEN
11:21:58 233  	  ts := current_timestamp;
11:21:58 234  END;
11:21:58 235  END PROCS_POLLING_SYNC;
11:21:58 236  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE GET_PRODUCTS (
11:21:58   4  /*
11:21:58   5  Throws exceptions:
11:21:58   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58   7  */
11:21:58   8  	in_status_id   IN  NUMBER,
11:21:58   9  	out_result_set OUT SYS_REFCURSOR
11:21:58  10  ) AS
11:21:58  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
11:21:58  12  BEGIN
11:21:58  13  	OPEN out_result_set FOR
11:21:58  14  	SELECT
11:21:58  15  	  PRODUCT.ID,
11:21:58  16  	  PRODUCT.NAME,
11:21:58  17  	  PRODUCT.UNIT_PRICE,
11:21:58  18  	  PRODUCT.PRODUCTION_COST,
11:21:58  19  	  PRODUCT.CREATE_DATE,
11:21:58  20  	  PRODUCT.CREATED_BY,
11:21:58  21  	  PRODUCT.PRODUCT_STATUS_ID,
11:21:58  22  	  PRODUCT.PRODUCT_URI
11:21:58  23  	FROM
11:21:58  24  	  PRODUCT
11:21:58  25   WHERE
11:21:58  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
11:21:58  27  EXCEPTION
11:21:58  28  WHEN OTHERS THEN
11:21:58  29  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58  31  END GET_PRODUCTS;
11:21:58  32  
11:21:58  33  /******************************************************************************/
11:21:58  34  
11:21:58  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:58  36  	in_product_offering_id	IN NUMBER,
11:21:58  37  	out_result_set OUT SYS_REFCURSOR
11:21:58  38  ) AS
11:21:58  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
11:21:58  40  -- VARIABLES
11:21:58  41  temp_product_offering_id NUMBER;
11:21:58  42  -- EXCEPTIONS
11:21:58  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
11:21:58  44  BEGIN
11:21:58  45  
11:21:58  46  	-- Check that product offering exists
11:21:58  47  	BEGIN
11:21:58  48  	  SELECT
11:21:58  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
11:21:58  50  	  FROM
11:21:58  51  	    PRODUCT_OFFERING
11:21:58  52  	  WHERE
11:21:58  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
11:21:58  54  	  EXCEPTION
11:21:58  55  	    WHEN NO_DATA_FOUND THEN
11:21:58  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
11:21:58  57  	END;
11:21:58  58  
11:21:58  59  	OPEN out_result_set FOR
11:21:58  60  	SELECT
11:21:58  61  	  PRODUCT_OFFERING_META_DATA.ID,
11:21:58  62  	  PRODUCT_OFFERING_META_DATA.NAME,
11:21:58  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
11:21:58  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
11:21:58  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
11:21:58  66  	FROM
11:21:58  67  	  PRODUCT_OFFERING_META_DATA
11:21:58  68  	WHERE
11:21:58  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
11:21:58  70  
11:21:58  71  EXCEPTION
11:21:58  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
11:21:58  73  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58  74  	  SPROC_NAME, 'No such product offering id');
11:21:58  75  WHEN OTHERS THEN
11:21:58  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58  78  END GET_PRODUCT_OFFERING_META_DATA;
11:21:58  79  
11:21:58  80  /******************************************************************************/
11:21:58  81  
11:21:58  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
11:21:58  83  /*
11:21:58  84  Throws exceptions:
11:21:58  85  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58  87  */
11:21:58  88  	in_product_id	    IN NUMBER,
11:21:58  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
11:21:58  90  	out_result_set	    OUT SYS_REFCURSOR
11:21:58  91  ) AS
11:21:58  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
11:21:58  93  -- VARIABLES
11:21:58  94  temp_product_id NUMBER;
11:21:58  95  -- EXCEPTIONS
11:21:58  96  BAD_PRODUCT_ID EXCEPTION;
11:21:58  97  BEGIN
11:21:58  98  
11:21:58  99  	BEGIN
11:21:58 100  	  SELECT
11:21:58 101  	    PRODUCT.ID into temp_product_id
11:21:58 102  	  FROM
11:21:58 103  	    PRODUCT
11:21:58 104  	  WHERE
11:21:58 105  	    PRODUCT.ID = in_product_id;
11:21:58 106  	  EXCEPTION
11:21:58 107  	    WHEN NO_DATA_FOUND THEN
11:21:58 108  	      RAISE BAD_PRODUCT_ID;
11:21:58 109  	END;
11:21:58 110  
11:21:58 111  	OPEN out_result_set FOR
11:21:58 112  	SELECT
11:21:58 113  	  PRODUCT_ELIGIBILITY.ID
11:21:58 114  	FROM
11:21:58 115  	  PRODUCT_ELIGIBILITY
11:21:58 116  	WHERE
11:21:58 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
11:21:58 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
11:21:58 119  
11:21:58 120  EXCEPTION
11:21:58 121  WHEN BAD_PRODUCT_ID THEN
11:21:58 122  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 123  	  SPROC_NAME, 'No such product');
11:21:58 124  WHEN OTHERS THEN
11:21:58 125  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
11:21:58 128  
11:21:58 129  /******************************************************************************/
11:21:58 130  
11:21:58 131  PROCEDURE GET_PRODUCT_BY_ID (
11:21:58 132  	in_product_id  IN NUMBER,
11:21:58 133  	out_result_set OUT SYS_REFCURSOR
11:21:58 134  ) AS
11:21:58 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
11:21:58 136  -- VARIABLES
11:21:58 137  temp_product_id NUMBER;
11:21:58 138  -- EXCEPTIONS
11:21:58 139  BAD_PRODUCT_ID EXCEPTION;
11:21:58 140  BEGIN
11:21:58 141  
11:21:58 142  	BEGIN
11:21:58 143  	  SELECT
11:21:58 144  	    PRODUCT.ID into temp_product_id
11:21:58 145  	  FROM
11:21:58 146  	    PRODUCT
11:21:58 147  	  WHERE
11:21:58 148  	    PRODUCT.ID = in_product_id;
11:21:58 149  	  EXCEPTION
11:21:58 150  	    WHEN NO_DATA_FOUND THEN
11:21:58 151  	      RAISE BAD_PRODUCT_ID;
11:21:58 152  	END;
11:21:58 153  
11:21:58 154  	OPEN out_result_set FOR
11:21:58 155  	SELECT
11:21:58 156  	  PRODUCT.ID,
11:21:58 157  	  PRODUCT.NAME,
11:21:58 158  	  PRODUCT.PRODUCT_STATUS_ID,
11:21:58 159  	  PRODUCT.PRODUCT_URI,
11:21:58 160  	  PRODUCT.PRODUCTION_COST,
11:21:58 161  	  PRODUCT.UNIT_PRICE,
11:21:58 162  	  PRODUCT.CREATE_DATE,
11:21:58 163  	  PRODUCT.CREATED_BY
11:21:58 164  	FROM
11:21:58 165  	  PRODUCT
11:21:58 166  	WHERE
11:21:58 167  	  PRODUCT.ID = in_product_id;
11:21:58 168  
11:21:58 169  EXCEPTION
11:21:58 170  WHEN BAD_PRODUCT_ID THEN
11:21:58 171  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 172  	  SPROC_NAME, 'No such product');
11:21:58 173  WHEN OTHERS THEN
11:21:58 174  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 176  END GET_PRODUCT_BY_ID;
11:21:58 177  
11:21:58 178  /******************************************************************************/
11:21:58 179  
11:21:58 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
11:21:58 181  	in_line_item_id IN NUMBER,
11:21:58 182  	out_result_set	OUT SYS_REFCURSOR
11:21:58 183  ) AS
11:21:58 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
11:21:58 185  -- VARIABLES
11:21:58 186  temp_line_item_id NUMBER;
11:21:58 187  -- EXCEPTIONS
11:21:58 188  BAD_LINE_ITEM_ID EXCEPTION;
11:21:58 189  BEGIN
11:21:58 190  
11:21:58 191  	BEGIN
11:21:58 192  	  SELECT
11:21:58 193  	    LINE_ITEM.ID into temp_line_item_id
11:21:58 194  	  FROM
11:21:58 195  	    LINE_ITEM
11:21:58 196  	  WHERE
11:21:58 197  	    LINE_ITEM.ID = in_line_item_id;
11:21:58 198  	  EXCEPTION
11:21:58 199  	    WHEN NO_DATA_FOUND THEN
11:21:58 200  	      RAISE BAD_LINE_ITEM_ID;
11:21:58 201  	END;
11:21:58 202  
11:21:58 203  	OPEN out_result_set FOR
11:21:58 204  	SELECT
11:21:58 205  	  PRODUCT_OFFERING.ID,
11:21:58 206  	  PRODUCT_OFFERING.PRODUCT_ID,
11:21:58 207  	  PRODUCT_OFFERING.QUANTITY,
11:21:58 208  	  PRODUCT_OFFERING.UNIT_PRICE,
11:21:58 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:58 210  	  PRODUCT_OFFERING.CREATE_DATE,
11:21:58 211  	  PRODUCT_OFFERING.CREATED_BY,
11:21:58 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
11:21:58 213  	  CAPABILITY.ID CAP_ID,
11:21:58 214  	  CAPABILITY.CODE CAP_CODE,
11:21:58 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:58 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:58 217  	FROM
11:21:58 218  	  PRODUCT_OFFERING
11:21:58 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
11:21:58 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:58 221  	WHERE
11:21:58 222  	  LINE_ITEM.ID = in_line_item_id;
11:21:58 223  
11:21:58 224  EXCEPTION
11:21:58 225  WHEN BAD_LINE_ITEM_ID THEN
11:21:58 226  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 227  	  SPROC_NAME, 'No such line item');
11:21:58 228  WHEN OTHERS THEN
11:21:58 229  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
11:21:58 232  
11:21:58 233  /******************************************************************************/
11:21:58 234  
11:21:58 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
11:21:58 236  	in_product_offering_id IN NUMBER,
11:21:58 237  	out_result_set	OUT SYS_REFCURSOR
11:21:58 238  ) AS
11:21:58 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
11:21:58 240  BEGIN
11:21:58 241  	OPEN out_result_set FOR
11:21:58 242  	SELECT
11:21:58 243  	  PRODUCT_OFFERING.ID,
11:21:58 244  	  PRODUCT_OFFERING.PRODUCT_ID,
11:21:58 245  	  PRODUCT_OFFERING.QUANTITY,
11:21:58 246  	  PRODUCT_OFFERING.UNIT_PRICE,
11:21:58 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:58 248  	  PRODUCT_OFFERING.CREATE_DATE,
11:21:58 249  	  PRODUCT_OFFERING.CREATED_BY,
11:21:58 250  	  CAPABILITY.ID CAP_ID,
11:21:58 251  	  CAPABILITY.CODE CAP_CODE,
11:21:58 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:58 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:58 254  	FROM
11:21:58 255  	  PRODUCT_OFFERING
11:21:58 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:58 257  	WHERE
11:21:58 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
11:21:58 259  
11:21:58 260  EXCEPTION
11:21:58 261  WHEN OTHERS THEN
11:21:58 262  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 264  END GET_PRD_OFFERING_BY_ID;
11:21:58 265  
11:21:58 266  /******************************************************************************/
11:21:58 267  
11:21:58 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
11:21:58 269  	in_product_offering_id IN NUMBER,
11:21:58 270  	out_result_set	       OUT SYS_REFCURSOR
11:21:58 271  ) AS
11:21:58 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
11:21:58 273  -- VARIABLES
11:21:58 274  temp_product_offering_id NUMBER;
11:21:58 275  -- EXCEPTIONS
11:21:58 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
11:21:58 277  BEGIN
11:21:58 278  
11:21:58 279  	BEGIN
11:21:58 280  	  SELECT
11:21:58 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
11:21:58 282  	  FROM
11:21:58 283  	    PRODUCT_OFFERING
11:21:58 284  	  WHERE
11:21:58 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
11:21:58 286  	  EXCEPTION
11:21:58 287  	    WHEN NO_DATA_FOUND THEN
11:21:58 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
11:21:58 289  	END;
11:21:58 290  
11:21:58 291  	OPEN out_result_set FOR
11:21:58 292  	SELECT
11:21:58 293  	  DISCOUNT.ID,
11:21:58 294  	  DISCOUNT.NAME,
11:21:58 295  	  DISCOUNT.FIXED_AMOUNT,
11:21:58 296  	  DISCOUNT.PERCENT_AMOUNT,
11:21:58 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
11:21:58 298  	  DISCOUNT.CREATE_DATE,
11:21:58 299  	  DISCOUNT.CREATED_BY,
11:21:58 300  	  DISCOUNT.DESCRIPTION
11:21:58 301  	FROM
11:21:58 302  	  DISCOUNT
11:21:58 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
11:21:58 304  	WHERE
11:21:58 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
11:21:58 306  
11:21:58 307  EXCEPTION
11:21:58 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
11:21:58 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 310  	  SPROC_NAME, 'No such product offering');
11:21:58 311  WHEN OTHERS THEN
11:21:58 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
11:21:58 315  
11:21:58 316  END PROCS_PRODUCT_V15;
11:21:58 317  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE
11:21:58   2  PACKAGE BODY PROCS_REPORTING AS
11:21:58   3  
11:21:58   4  ----
11:21:58   5  --------------------------------------------------------------------------------
11:21:58   6  ----
11:21:58   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58   8  	  is
11:21:58   9  	  begin
11:21:58  10  	      open out_cursor for
11:21:58  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
11:21:58  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
11:21:58  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
11:21:58  14  			,c.create_date, c.update_date
11:21:58  15  		  from charge c
11:21:58  16  		      ,charge_status cs
11:21:58  17  		      ,instrument_type it
11:21:58  18  		      ,ids
11:21:58  19  		  where c.id = ids.id
11:21:58  20  		    and c.charge_status_id = cs.id
11:21:58  21  		    and c.instrument_type_id = it.id
11:21:58  22  	      ;
11:21:58  23  	  end;
11:21:58  24  ----
11:21:58  25  --------------------------------------------------------------------------------
11:21:58  26  ----
11:21:58  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58  28  	  is
11:21:58  29  	  begin
11:21:58  30  	      open out_cursor for
11:21:58  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
11:21:58  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
11:21:58  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date
11:21:58  35  		  from license l
11:21:58  36  		      ,license_status ls
11:21:58  37  		      ,ids
11:21:58  38  		  where l.id = ids.id
11:21:58  39  		    and l.license_status_id = ls.id
11:21:58  40  	      ;
11:21:58  41  	  end;
11:21:58  42  ----
11:21:58  43  --------------------------------------------------------------------------------
11:21:58  44  ----
11:21:58  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58  46  	  is
11:21:58  47  	  begin
11:21:58  48  	      open out_cursor for
11:21:58  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
11:21:58  50  		  select
11:21:58  51  		    i.id invoice_id,
11:21:58  52  		    i.create_date,
11:21:58  53  		    i.update_date,
11:21:58  54  		    i.invoice_status_id,
11:21:58  55  		    istat.value invoice_status,
11:21:58  56  		    NVL(
11:21:58  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
11:21:58  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
11:21:58  59  		    ) offer_chain_id
11:21:58  60  		  from	   invoice i
11:21:58  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
11:21:58  62  		      join ids			on ids.id = i.id
11:21:58  63  		  where 1 = 1
11:21:58  64  	      ;
11:21:58  65  	  end;
11:21:58  66  ----
11:21:58  67  --------------------------------------------------------------------------------
11:21:58  68  ----
11:21:58  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58  70  	  is
11:21:58  71  	  begin
11:21:58  72  	      open out_cursor for
11:21:58  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
11:21:58  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
11:21:58  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
11:21:58  76  		  from line_item li
11:21:58  77  		    , ids
11:21:58  78  		  where li.id = ids.id
11:21:58  79  	      ;
11:21:58  80  	  end;
11:21:58  81  ----
11:21:58  82  --------------------------------------------------------------------------------
11:21:58  83  ----
11:21:58  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58  85  	  is
11:21:58  86  	  begin
11:21:58  87  	      open out_cursor for
11:21:58  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
11:21:58  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
11:21:58  91  			,a.instrument_id, a.tax_exempt_id
11:21:58  92  			-- need system category??
11:21:58  93  		  from account a
11:21:58  94  		      ,account_status astat
11:21:58  95  		      ,instrument_type it
11:21:58  96  		      , ids
11:21:58  97  		  where a.id = ids.id
11:21:58  98  		    and astat.id = a.account_status_id
11:21:58  99  		    and a.instrument_type_id = it.id(+)
11:21:58 100  	      ;
11:21:58 101  	  end;
11:21:58 102  ----
11:21:58 103  --------------------------------------------------------------------------------
11:21:58 104  ----
11:21:58 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 106  	  is
11:21:58 107  	  begin
11:21:58 108  	      open out_cursor for
11:21:58 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
11:21:58 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
11:21:58 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
11:21:58 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
11:21:58 114  		  from subscription s
11:21:58 115  		      ,subscription_status ss
11:21:58 116  		      ,subscription_cancel_reason sct
11:21:58 117  		      ,instrument_type it
11:21:58 118  		      , ids
11:21:58 119  		  where s.id = ids.id
11:21:58 120  		    and ss.id = s.subscription_status_id
11:21:58 121  		    and s.instrument_type_id = it.id
11:21:58 122  		    and sct.id(+) = s.sct_id
11:21:58 123  	      ;
11:21:58 124  	  end;
11:21:58 125  ----
11:21:58 126  --------------------------------------------------------------------------------
11:21:58 127  ----
11:21:58 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 129  	  is
11:21:58 130  	  begin
11:21:58 131  	      open out_cursor for
11:21:58 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 133  		  select t.id transaction_id, t.transaction_amount
11:21:58 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
11:21:58 135  			,t.create_date, t.update_date, t.is_settled
11:21:58 136  		  from transaction t
11:21:58 137  		      ,transaction_status ts
11:21:58 138  		      , ids
11:21:58 139  		  where t.id = ids.id
11:21:58 140  		    and t.transaction_status_id = ts.id
11:21:58 141  	      ;
11:21:58 142  	  end;
11:21:58 143  ----
11:21:58 144  --------------------------------------------------------------------------------
11:21:58 145  ----
11:21:58 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 147  	  is
11:21:58 148  	  begin
11:21:58 149  	      open out_cursor for
11:21:58 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
11:21:58 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
11:21:58 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
11:21:58 154  			,oc.billing_source_id, bs.name billing_source_name
11:21:58 155  			,oc.is_seat_license,oc.group_account_type_id
11:21:58 156  		  from offer_chain oc
11:21:58 157  		      , offer_chain_status ocs
11:21:58 158  		      , ids
11:21:58 159  		      , vendor_source vs
11:21:58 160  		      , billing_source bs
11:21:58 161  		  where oc.id = ids.id
11:21:58 162  		    and oc.offer_chain_status_id = ocs.id
11:21:58 163  		    and oc.vendor_source_id = vs.id
11:21:58 164  		    and oc.billing_source_id = bs.id
11:21:58 165  	      ;
11:21:58 166  	  end;
11:21:58 167  ----
11:21:58 168  --------------------------------------------------------------------------------
11:21:58 169  ----
11:21:58 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 171  	  is
11:21:58 172  	  begin
11:21:58 173  	      open out_cursor for
11:21:58 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
11:21:58 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
11:21:58 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
11:21:58 177  		  from offer_offer_chain ooc
11:21:58 178  		  , ids
11:21:58 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
11:21:58 180  	      ;
11:21:58 181  	  end;
11:21:58 182  ----
11:21:58 183  --------------------------------------------------------------------------------
11:21:58 184  ----
11:21:58 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 186  	  is
11:21:58 187  	  begin
11:21:58 188  	      open out_cursor for
11:21:58 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
11:21:58 191  		  from offer o
11:21:58 192  		      ,offer_status os
11:21:58 193  		      , ids
11:21:58 194  		  where o.id = ids.id
11:21:58 195  		    and o.offer_status_id = os.id
11:21:58 196  	      ;
11:21:58 197  	  end;
11:21:58 198  ----
11:21:58 199  --------------------------------------------------------------------------------
11:21:58 200  ----
11:21:58 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 202  	  is
11:21:58 203  	  begin
11:21:58 204  	      open out_cursor for
11:21:58 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
11:21:58 207  			 ,gc.expiration_date, gc.purchase_date
11:21:58 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
11:21:58 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
11:21:58 210  			 ,recipient_address_id
11:21:58 211  			 ,redeemer_address_id
11:21:58 212  			 ,recipient_notify_date
11:21:58 213  			 ,recipient_name
11:21:58 214  			 ,redemption_date
11:21:58 215  			 ,recipient_email
11:21:58 216  		  from gift_certificate gc
11:21:58 217  		      ,gift_certificate_status gcs
11:21:58 218  		      , ids
11:21:58 219  		  where gc.id = ids.id
11:21:58 220  		    and gc.gift_certificate_status_id = gcs.id
11:21:58 221  	      ;
11:21:58 222  	  end;
11:21:58 223  ----
11:21:58 224  --------------------------------------------------------------------------------
11:21:58 225  ----
11:21:58 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 227  	  is
11:21:58 228  	  begin
11:21:58 229  	      open out_cursor for
11:21:58 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
11:21:58 232  		  from product_offering po
11:21:58 233  		  , ids
11:21:58 234  		  where po.id = ids.id
11:21:58 235  	      ;
11:21:58 236  	  end;
11:21:58 237  ----
11:21:58 238  --------------------------------------------------------------------------------
11:21:58 239  ----
11:21:58 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 241  	  is
11:21:58 242  	  begin
11:21:58 243  	      open out_cursor for
11:21:58 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
11:21:58 246  			,product_uri, p.create_date
11:21:58 247  		  from product p
11:21:58 248  		      ,product_status ps
11:21:58 249  		      , ids
11:21:58 250  		  where p.id = ids.id
11:21:58 251  		    and p.product_status_id = ps.id
11:21:58 252  	      ;
11:21:58 253  	  end;
11:21:58 254  ----
11:21:58 255  --------------------------------------------------------------------------------
11:21:58 256  ----
11:21:58 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 258  	  is
11:21:58 259  	  begin
11:21:58 260  	      open out_cursor for
11:21:58 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
11:21:58 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
11:21:58 263  		  from offer_product_offering opo
11:21:58 264  		  , ids
11:21:58 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
11:21:58 266  	      ;
11:21:58 267  	  end;
11:21:58 268  ----
11:21:58 269  --------------------------------------------------------------------------------
11:21:58 270  ----
11:21:58 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 272  	  is
11:21:58 273  	  begin
11:21:58 274  	      open out_cursor for
11:21:58 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
11:21:58 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
11:21:58 277  		  from discount_product_offering dpo
11:21:58 278  		  , ids
11:21:58 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
11:21:58 280  	      ;
11:21:58 281  	  end;
11:21:58 282  ----
11:21:58 283  --------------------------------------------------------------------------------
11:21:58 284  ----
11:21:58 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 286  	  is
11:21:58 287  	  begin
11:21:58 288  	      open out_cursor for
11:21:58 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
11:21:58 291  			,d.discount_type_id, dt.value discount_type, d.create_date
11:21:58 292  		  from discount d
11:21:58 293  		      ,discount_type dt
11:21:58 294  		      , ids
11:21:58 295  		  where d.id = ids.id
11:21:58 296  		    and d.discount_type_id = dt.id
11:21:58 297  	      ;
11:21:58 298  	  end;
11:21:58 299  ----
11:21:58 300  --------------------------------------------------------------------------------
11:21:58 301  ----
11:21:58 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 303  	  is
11:21:58 304  	  begin
11:21:58 305  	      open out_cursor for
11:21:58 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
11:21:58 308  		  from product_eligibility pg
11:21:58 309  		  , ids
11:21:58 310  		  where pg.id = ids.id
11:21:58 311  	      ;
11:21:58 312  	  end;
11:21:58 313  ----
11:21:58 314  --------------------------------------------------------------------------------
11:21:58 315  ----
11:21:58 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 317  	  is
11:21:58 318  	  begin
11:21:58 319  	      open out_cursor for
11:21:58 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
11:21:58 322  		  from offer_chain_eligibility oce
11:21:58 323  		  , ids
11:21:58 324  		  where oce.id = ids.id
11:21:58 325  	      ;
11:21:58 326  	  end;
11:21:58 327  ----
11:21:58 328  --------------------------------------------------------------------------------
11:21:58 329  ----
11:21:58 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 331  	  is
11:21:58 332  	  begin
11:21:58 333  	      open out_cursor for
11:21:58 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
11:21:58 336  		  from offer_chain_meta_data ocm
11:21:58 337  		  , ids
11:21:58 338  		  where ocm.id = ids.id
11:21:58 339  	      ;
11:21:58 340  	  end;
11:21:58 341  ----
11:21:58 342  --------------------------------------------------------------------------------
11:21:58 343  ----
11:21:58 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 345  	  is
11:21:58 346  	  begin
11:21:58 347  	      open out_cursor for
11:21:58 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
11:21:58 350  		  from product_offering_meta_data pom
11:21:58 351  		  , ids
11:21:58 352  		  where pom.id = ids.id
11:21:58 353  	      ;
11:21:58 354  	  end;
11:21:58 355  ----
11:21:58 356  --------------------------------------------------------------------------------
11:21:58 357  ----
11:21:58 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 359  	  is
11:21:58 360  	  begin
11:21:58 361  	      open out_cursor for
11:21:58 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
11:21:58 364  		  from subscription_meta_data sm
11:21:58 365  		  , ids
11:21:58 366  		  where sm.id = ids.id
11:21:58 367  	      ;
11:21:58 368  	  end;
11:21:58 369  ----
11:21:58 370  --------------------------------------------------------------------------------
11:21:58 371  ----
11:21:58 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 373  	  is
11:21:58 374  	  begin
11:21:58 375  	      open out_cursor for
11:21:58 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
11:21:58 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
11:21:58 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
11:21:58 380  		  from credit_card cc
11:21:58 381  		      ,credit_card_type cct
11:21:58 382  		      ,credit_card_status ccs
11:21:58 383  		      , ids
11:21:58 384  		  where cc.id = ids.id
11:21:58 385  		    and cc.credit_card_type_id = cct.id(+)
11:21:58 386  		    and cc.credit_card_status_id = ccs.id
11:21:58 387  	      ;
11:21:58 388  	  end;
11:21:58 389  ----
11:21:58 390  --------------------------------------------------------------------------------
11:21:58 391  ----
11:21:58 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 393  	  is
11:21:58 394  	  begin
11:21:58 395  	      open out_cursor for
11:21:58 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
11:21:58 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
11:21:58 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
11:21:58 400  			,ta.create_date
11:21:58 401  		  from transaction_attempt ta
11:21:58 402  		      ,transaction_attempt_status tas
11:21:58 403  		      , ids
11:21:58 404  		  where ta.id = ids.id
11:21:58 405  		    and ta.transaction_attempt_status_id = tas.id
11:21:58 406  	      ;
11:21:58 407  	  end;
11:21:58 408  ----
11:21:58 409  --------------------------------------------------------------------------------
11:21:58 410  ----
11:21:58 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 412  	  is
11:21:58 413  	  begin
11:21:58 414  	      open out_cursor for
11:21:58 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
11:21:58 417  			,ia.adjustment_date, ia.create_date
11:21:58 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
11:21:58 419  		  , ids
11:21:58 420  		  where ia.id = ids.id
11:21:58 421  		  and ir.id = ia.invoice_adjustment_reason_id
11:21:58 422  	      ;
11:21:58 423  	  end;
11:21:58 424  ----
11:21:58 425  --------------------------------------------------------------------------------
11:21:58 426  ----
11:21:58 427  
11:21:58 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 429  	  is
11:21:58 430  	  begin
11:21:58 431  	      open out_cursor for
11:21:58 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
11:21:58 434  		  from line_item_adjustment lia
11:21:58 435  		  , ids
11:21:58 436  		  where lia.id = ids.id
11:21:58 437  	      ;
11:21:58 438  	  end;
11:21:58 439  ----
11:21:58 440  --------------------------------------------------------------------------------
11:21:58 441  ----
11:21:58 442  
11:21:58 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 444  	  is
11:21:58 445  	  begin
11:21:58 446  	      open out_cursor for
11:21:58 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 448  		  select
11:21:58 449  		    tax.id tax_id,
11:21:58 450  		    ttype.code tax_type,
11:21:58 451  		    tax.calculated_amount,
11:21:58 452  		    tax.create_date,
11:21:58 453  		    tax.line_item_id,
11:21:58 454  		    tax.effective_rate,
11:21:58 455  		    tax.taxable_amount,
11:21:58 456  		    tax.tax_rule_id,
11:21:58 457  		    j.name jurisdiction_level,
11:21:58 458  		    tax.jurisdiction_name,
11:21:58 459  		    tax.jurisdiction_id,
11:21:58 460  		    tax.ext_tax_type,
11:21:58 461  		    tax.ext_result,
11:21:58 462  		    tax.imposition_type,
11:21:58 463  		    tax.imposition
11:21:58 464  		  from tax
11:21:58 465  		  , tax_type ttype
11:21:58 466  		  , jurisdiction_level j
11:21:58 467  		  , ids
11:21:58 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
11:21:58 469  	      ;
11:21:58 470  	  end;
11:21:58 471  ----
11:21:58 472  --------------------------------------------------------------------------------
11:21:58 473  ----
11:21:58 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
11:21:58 475  	  is
11:21:58 476  	  begin
11:21:58 477  	      open out_cursor for
11:21:58 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
11:21:58 479  		  select
11:21:58 480  		    tax.id tad_adjustment_id,
11:21:58 481  		    tax.tax_id tax_id,
11:21:58 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
11:21:58 483  		    tax.amount tax_amount,
11:21:58 484  		    tax.create_date create_date
11:21:58 485  		  from tax_adjustment tax
11:21:58 486  		  , ids
11:21:58 487  		  where tax.id = ids.id
11:21:58 488  	      ;
11:21:58 489  	  end;
11:21:58 490  ----
11:21:58 491  --------------------------------------------------------------------------------
11:21:58 492  ----
11:21:58 493  /**/
11:21:58 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 495  	  BEGIN
11:21:58 496  	    OPEN OUT_CURSOR FOR
11:21:58 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 498  	    SELECT
11:21:58 499  		t.id rcn_ext_source_log_id
11:21:58 500  	      , t.extraction_timestamp
11:21:58 501  	      , t.report_date
11:21:58 502  	      , t.report_generation_datetime
11:21:58 503  	      , t.record_type
11:21:58 504  	      , t.report_file_name
11:21:58 505  	      , t.create_date
11:21:58 506  	      , t.created_by
11:21:58 507  	    FROM rcn_ext_source_log t, ids
11:21:58 508  	    WHERE ids.id = t.id;
11:21:58 509  	  END;
11:21:58 510  
11:21:58 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 512  	  BEGIN
11:21:58 513  	    OPEN OUT_CURSOR FOR
11:21:58 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 515  	    SELECT
11:21:58 516  		t.id rcn_cpt_svc_chg_dtl_id
11:21:58 517  	      , t.rcn_ext_source_log_id
11:21:58 518  	      , t.record_type
11:21:58 519  	      , t.category
11:21:58 520  	      , t.sub_category
11:21:58 521  	      , t.entity_type
11:21:58 522  	      , t.entity_number
11:21:58 523  	      , t.funds_transfer_inst_number
11:21:58 524  	      , t.secure_ba_number
11:21:58 525  	      , t.settlement_currency
11:21:58 526  	      , t.fee_schedule
11:21:58 527  	      , t.mop
11:21:58 528  	      , t.interchange_qualification
11:21:58 529  	      , t.fee_type_description
11:21:58 530  	      , t.action_type
11:21:58 531  	      , t.unit_quantity
11:21:58 532  	      , t.unit_fee
11:21:58 533  	      , t.amount
11:21:58 534  	      , t.percentage_rate
11:21:58 535  	      , t.total_charge
11:21:58 536  	      , t.create_date
11:21:58 537  	      , t.created_by
11:21:58 538  	    FROM rcn_cpt_service_charge_detail t, ids
11:21:58 539  	    WHERE ids.id = t.id;
11:21:58 540  	  END;
11:21:58 541  ----
11:21:58 542  --------------------------------------------------------------------------------
11:21:58 543  ----
11:21:58 544  
11:21:58 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 546  	  BEGIN
11:21:58 547  	    OPEN OUT_CURSOR FOR
11:21:58 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 549  	    SELECT
11:21:58 550  		t.id rcn_cpt_excp_dtl_id
11:21:58 551  	      , t.rcn_ext_source_log_id
11:21:58 552  	      , t.record_type
11:21:58 553  	      , t.submission_date
11:21:58 554  	      , t.pid_number
11:21:58 555  	      , t.pid_short_name
11:21:58 556  	      , t.submission_number
11:21:58 557  	      , t.record_number
11:21:58 558  	      , t.entity_type
11:21:58 559  	      , t.entity_number
11:21:58 560  	      , t.presentment_currency
11:21:58 561  	      , t.merchant_order_number
11:21:58 562  	      , t.rdfi_number
11:21:58 563  	      , t.account_number
11:21:58 564  	      , t.expiration_date
11:21:58 565  	      , t.amount
11:21:58 566  	      , t.mop
11:21:58 567  	      , t.action_code
11:21:58 568  	      , t.auth_date
11:21:58 569  	      , t.auth_code
11:21:58 570  	      , t.auth_response_code
11:21:58 571  	      , t.trace_number
11:21:58 572  	      , t.consumer_country_code
11:21:58 573  	      , t.category
11:21:58 574  	      , t.mcc
11:21:58 575  	      , t.reject_code
11:21:58 576  	      , t.submission_status
11:21:58 577  	      , t.create_date
11:21:58 578  	      , t.created_by
11:21:58 579  	    FROM rcn_cpt_exception_detail t, ids
11:21:58 580  	    WHERE ids.id = t.id;
11:21:58 581  	  END;
11:21:58 582  ----
11:21:58 583  --------------------------------------------------------------------------------
11:21:58 584  ----
11:21:58 585  
11:21:58 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 587  	  BEGIN
11:21:58 588  	    OPEN OUT_CURSOR FOR
11:21:58 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 590  	      SELECT
11:21:58 591  		t.id rcn_cpt_deposit_dtl_id
11:21:58 592  	      , t.rcn_ext_source_log_id
11:21:58 593  	      , t.record_type
11:21:58 594  	      , t.submission_date
11:21:58 595  	      , t.pid_number
11:21:58 596  	      , t.pid_short_name
11:21:58 597  	      , t.submission_number
11:21:58 598  	      , t.record_number
11:21:58 599  	      , t.entity_type
11:21:58 600  	      , t.entity_number
11:21:58 601  	      , t.presentment_currency
11:21:58 602  	      , t.merchant_order_number
11:21:58 603  	      , t.rdfi_number
11:21:58 604  	      , t.account_number
11:21:58 605  	      , t.expiration_date
11:21:58 606  	      , t.amount
11:21:58 607  	      , t.mop
11:21:58 608  	      , t.action_code
11:21:58 609  	      , t.auth_date
11:21:58 610  	      , t.auth_code
11:21:58 611  	      , t.auth_response_code
11:21:58 612  	      , t.trace_number
11:21:58 613  	      , t.consumer_country_code
11:21:58 614  	      , t.mcc
11:21:58 615  	      , t.create_date
11:21:58 616  	      , t.created_by
11:21:58 617  	      , t.fee_code
11:21:58 618  	      , t.unit_fee
11:21:58 619  	      , t.percent_fee
11:21:58 620  	      , t.total_interchange_fee
11:21:58 621  	      , t.total_assessment_fee
11:21:58 622  	      , t.other_fee
11:21:58 623  	    FROM rcn_cpt_deposit_detail t, ids
11:21:58 624  	    WHERE ids.id = t.id;
11:21:58 625  	  END;
11:21:58 626  ----
11:21:58 627  --------------------------------------------------------------------------------
11:21:58 628  ----
11:21:58 629  
11:21:58 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 631  	  BEGIN
11:21:58 632  	    OPEN OUT_CURSOR FOR
11:21:58 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 634  	    SELECT
11:21:58 635  		t.id rcn_cpt_chgbk_act_dtl_id
11:21:58 636  	      , t.rcn_ext_source_log_id
11:21:58 637  	      , t.record_type
11:21:58 638  	      , t.entity_type
11:21:58 639  	      , t.entity_number
11:21:58 640  	      , t.chargeback_amount_issuer
11:21:58 641  	      , t.prev_partial_representment
11:21:58 642  	      , t.presentment_currency
11:21:58 643  	      , t.chargeback_category
11:21:58 644  	      , t.status_flag
11:21:58 645  	      , t.sequence_number
11:21:58 646  	      , t.merchant_order_number
11:21:58 647  	      , t.account_number
11:21:58 648  	      , t.reason_code
11:21:58 649  	      , t.transaction_date
11:21:58 650  	      , t.chargeback_date
11:21:58 651  	      , t.activity_date
11:21:58 652  	      , t.chargeback_amount_action
11:21:58 653  	      , t.fee_amount
11:21:58 654  	      , t.usage_code
11:21:58 655  	      , t.mop_code
11:21:58 656  	      , t.authorization_date
11:21:58 657  	      , t.chargeback_due_date
11:21:58 658  	      , t.create_date
11:21:58 659  	      , t.created_by
11:21:58 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
11:21:58 661  	    WHERE ids.id = t.id;
11:21:58 662  	  END;
11:21:58 663  ----
11:21:58 664  --------------------------------------------------------------------------------
11:21:58 665  ----
11:21:58 666  
11:21:58 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 668  	  BEGIN
11:21:58 669  	    OPEN OUT_CURSOR FOR
11:21:58 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 671  	    SELECT
11:21:58 672  		t.id rcn_pp_settlement_id
11:21:58 673  	      , t.rcn_ext_source_log_id
11:21:58 674  	      , t.transaction_id
11:21:58 675  	      , t.invoice_id
11:21:58 676  	      , t.pp_ref_id
11:21:58 677  	      , t.pp_ref_id_type
11:21:58 678  	      , t.trans_event_code
11:21:58 679  	      , t.trans_init_date
11:21:58 680  	      , t.trans_comp_date
11:21:58 681  	      , t.trans_deb_or_cred
11:21:58 682  	      , t.gross_trans_amount
11:21:58 683  	      , t.gross_trans_currency
11:21:58 684  	      , t.fee_deb_or_cred
11:21:58 685  	      , t.fee_amount
11:21:58 686  	      , t.fee_currency
11:21:58 687  	      , t.custom_field
11:21:58 688  	      , t.create_date
11:21:58 689  	      , t.created_by
11:21:58 690  	    FROM rcn_pp_settlement t, ids
11:21:58 691  	    WHERE ids.id = t.id;
11:21:58 692  	  END;
11:21:58 693  ----
11:21:58 694  --------------------------------------------------------------------------------
11:21:58 695  ----
11:21:58 696  
11:21:58 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 698  	  BEGIN
11:21:58 699  	    OPEN OUT_CURSOR FOR
11:21:58 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 701  	    SELECT
11:21:58 702  		t.id rcn_pp_dispute_id
11:21:58 703  	      , t.rcn_ext_source_log_id
11:21:58 704  	      , t.dispute_type
11:21:58 705  	      , t.claimant_name
11:21:58 706  	      , t.claimant_email
11:21:58 707  	      , t.transaction_id
11:21:58 708  	      , t.trans_date
11:21:58 709  	      , t.disputed_amount
11:21:58 710  	      , t.disputed_amount_currency
11:21:58 711  	      , t.dispute_reason
11:21:58 712  	      , t.dispute_filing_date
11:21:58 713  	      , t.dispute_status
11:21:58 714  	      , t.dispute_case_id
11:21:58 715  	      , t.invoice_id
11:21:58 716  	      , t.create_date
11:21:58 717  	      , t.created_by
11:21:58 718  	    FROM
11:21:58 719  	    rcn_pp_dispute t, ids
11:21:58 720  	    WHERE ids.id = t.id;
11:21:58 721  	  END;
11:21:58 722  ----
11:21:58 723  --------------------------------------------------------------------------------
11:21:58 724  ----
11:21:58 725  
11:21:58 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 727  	  BEGIN
11:21:58 728  	    OPEN OUT_CURSOR FOR
11:21:58 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 730  	    SELECT
11:21:58 731  		t.id rcn_pp_trans_dtl_id
11:21:58 732  	      , t.rcn_ext_source_log_id
11:21:58 733  	      , t.transaction_id
11:21:58 734  	      , t.invoice_id
11:21:58 735  	      , t.pp_ref_id
11:21:58 736  	      , t.trans_event_code
11:21:58 737  	      , t.trans_init_date
11:21:58 738  	      , t.trans_comp_date
11:21:58 739  	      , t.trans_deb_or_cred
11:21:58 740  	      , t.gross_trans_amount
11:21:58 741  	      , t.gross_trans_currency
11:21:58 742  	      , t.fee_deb_or_cred
11:21:58 743  	      , t.fee_amount
11:21:58 744  	      , t.fee_currency
11:21:58 745  	      , t.trans_status
11:21:58 746  	      , t.insurance_amount
11:21:58 747  	      , t.sales_tax_amount
11:21:58 748  	      , t.shipping_amount
11:21:58 749  	      , t.trans_subject
11:21:58 750  	      , t.trans_note
11:21:58 751  	      , t.payer_acct_id
11:21:58 752  	      , t.payer_addr_status
11:21:58 753  	      , t.item_name
11:21:58 754  	      , t.item_id
11:21:58 755  	      , t.option_1_name
11:21:58 756  	      , t.option_1_value
11:21:58 757  	      , t.option_2_name
11:21:58 758  	      , t.option_2_value
11:21:58 759  	      , t.auction_site
11:21:58 760  	      , t.auction_buyer_id
11:21:58 761  	      , t.auction_closing_date
11:21:58 762  	      , t.shipping_addr_line_1
11:21:58 763  	      , t.shipping_addr_line_2
11:21:58 764  	      , t.shipping_addr_city
11:21:58 765  	      , t.shipping_addr_state
11:21:58 766  	      , t.shipping_addr_zip
11:21:58 767  	      , t.shipping_addr_country
11:21:58 768  	      , t.custom_field
11:21:58 769  	      , t.create_date
11:21:58 770  	      , t.created_by
11:21:58 771  	    FROM rcn_pp_trans_detail t, ids
11:21:58 772  	    WHERE ids.id = t.id;
11:21:58 773  	  END;
11:21:58 774  ----
11:21:58 775  --------------------------------------------------------------------------------
11:21:58 776  ----
11:21:58 777  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 778  	  BEGIN
11:21:58 779  	    OPEN OUT_CURSOR FOR
11:21:58 780  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 781  	    SELECT
11:21:58 782  		t.ID PAYPAL_ID
11:21:58 783  	      , ACCOUNT_ID
11:21:58 784  	      , INSTRUMENT_NAME
11:21:58 785  	      , CREATE_DATE
11:21:58 786  	      , CREATED_BY
11:21:58 787  	      , UPDATE_DATE
11:21:58 788  	      , UPDATED_BY
11:21:58 789  	      , s.value PAYPAL_STATUS
11:21:58 790  	      , STATE
11:21:58 791  	      , CITY
11:21:58 792  	      , POSTAL_CODE
11:21:58 793  	      , COUNTRY
11:21:58 794  	      , EXPIRATION_DATE
11:21:58 795  	    FROM paypal t, paypal_status s, ids
11:21:58 796  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
11:21:58 797  	  END;
11:21:58 798  ----
11:21:58 799  --------------------------------------------------------------------------------
11:21:58 800  ----
11:21:58 801  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
11:21:58 802  	  BEGIN
11:21:58 803  	    OPEN OUT_CURSOR FOR
11:21:58 804  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
11:21:58 805  	    SELECT
11:21:58 806  	      a.id ADDRESS_ID,
11:21:58 807  	      address1,
11:21:58 808  	      address2,
11:21:58 809  	      city,
11:21:58 810  	      state,
11:21:58 811  	      postal_code,
11:21:58 812  	      country,
11:21:58 813  	      create_date,
11:21:58 814  	      created_by,
11:21:58 815  	      update_date,
11:21:58 816  	      updated_by
11:21:58 817  	    FROM address a, ids
11:21:58 818  	    WHERE ids.id = a.id;
11:21:58 819  	  END;
11:21:58 820  ----
11:21:58 821  --------------------------------------------------------------------------------
11:21:58 822  ----
11:21:58 823  /**/
11:21:58 824  END PROCS_REPORTING;
11:21:58 825  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.10
11:21:58 SQL> 
11:21:58 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
11:21:58   2  
11:21:58   3  ----
11:21:58   4  --------------------------------------------------------------------------------
11:21:58   5  ----
11:21:58   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
11:21:58   7  	      return line_item.amount%type
11:21:58   8  	  is
11:21:58   9  	      v_discount  line_item.amount%type := 0;
11:21:58  10  	  begin
11:21:58  11  	      for x in (
11:21:58  12  		  select d.id discount_id
11:21:58  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
11:21:58  14  		  from discount d
11:21:58  15  		      join discount_line_item dli	      on dli.discount_id = d.id
11:21:58  16  		      join discount_product_offering dop      on dop.discount_id = d.id
11:21:58  17  		      join product_offering po		      on po.id = dop.product_offering_id
11:21:58  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
11:21:58  19  		  where dli.line_item_id = in_line_item_id
11:21:58  20  	      )
11:21:58  21  	      loop
11:21:58  22  		  v_discount := v_discount + x.discount_amount;
11:21:58  23  	      end loop;
11:21:58  24  
11:21:58  25  	      return v_discount;
11:21:58  26  	  end;
11:21:58  27  ----
11:21:58  28  --------------------------------------------------------------------------------
11:21:58  29  ----
11:21:58  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
11:21:58  31  	      return line_item.amount%type
11:21:58  32  	  is
11:21:58  33  	      v_li_total  line_item.amount%type;
11:21:58  34  	      v_inv_total line_item.amount%type;
11:21:58  35  	      v_ref_total line_item.amount%type;
11:21:58  36  	  begin
11:21:58  37  
11:21:58  38  	      for li in (
11:21:58  39  		  select li.invoice_id, po.*
11:21:58  40  		  from line_item li
11:21:58  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
11:21:58  42  		  where li.id = in_line_item_id
11:21:58  43  	      )
11:21:58  44  	      loop
11:21:58  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
11:21:58  46  
11:21:58  47  		  v_inv_total := 0;
11:21:58  48  		  v_ref_total := 0;
11:21:58  49  		  for x in (
11:21:58  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
11:21:58  51  		      from charge c
11:21:58  52  		      where c.invoice_id = li.invoice_id
11:21:58  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
11:21:58  54  		  )
11:21:58  55  		  loop
11:21:58  56  		      if (x.type = 1) then
11:21:58  57  			  v_inv_total := x.total;
11:21:58  58  		      else
11:21:58  59  			  v_ref_total := x.total;
11:21:58  60  		      end if;
11:21:58  61  		  end loop;
11:21:58  62  
11:21:58  63  		  if (v_inv_total > 0) then
11:21:58  64  		      return (v_ref_total / v_inv_total) * v_li_total;
11:21:58  65  		  else
11:21:58  66  		      return 0;
11:21:58  67  		  end if;
11:21:58  68  
11:21:58  69  	      end loop;
11:21:58  70  
11:21:58  71  	      return 0;
11:21:58  72  	  end;
11:21:58  73  ----
11:21:58  74  --------------------------------------------------------------------------------
11:21:58  75  ----
11:21:58  76  	PROCEDURE EXTRACT_LINE_ITEMS(
11:21:58  77  	  in_lower_date_bound DATE,
11:21:58  78  	  in_upper_date_bound DATE,
11:21:58  79  	  out_lic_cur OUT sys_refcursor
11:21:58  80  	) AS
11:21:58  81  	BEGIN
11:21:58  82  	  OPEN out_lic_cur FOR
11:21:58  83  	  with liq as (
11:21:58  84  		SELECT li2.id
11:21:58  85  		      FROM
11:21:58  86  			   line_item li2
11:21:58  87  		      WHERE
11:21:58  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58  89  		UNION
11:21:58  90  		SELECT li2.id
11:21:58  91  		      FROM
11:21:58  92  			   line_item li2
11:21:58  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
11:21:58  94  		      WHERE
11:21:58  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58  96  		UNION
11:21:58  97  		SELECT li2.id
11:21:58  98  		      FROM
11:21:58  99  			   line_item li2
11:21:58 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
11:21:58 101  		      WHERE
11:21:58 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58 103  		UNION
11:21:58 104  		SELECT li2.id
11:21:58 105  		      FROM
11:21:58 106  			   line_item li2
11:21:58 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
11:21:58 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
11:21:58 109  		      WHERE
11:21:58 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58 111  		UNION
11:21:58 112  		SELECT li2.id
11:21:58 113  		      FROM
11:21:58 114  			   line_item li2
11:21:58 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
11:21:58 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
11:21:58 117  		      WHERE
11:21:58 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58 119  		UNION
11:21:58 120  		SELECT li2.id
11:21:58 121  		      FROM
11:21:58 122  			   line_item li2
11:21:58 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
11:21:58 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
11:21:58 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
11:21:58 126  		      WHERE
11:21:58 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58 128  	  )
11:21:58 129  	  SELECT distinct
11:21:58 130  	    line_item.id				 line_item_id
11:21:58 131  	  , product.name				 product_name
11:21:58 132  	  , product.unit_price				 product_unit_price
11:21:58 133  	  , product.production_cost			 product_production_cost
11:21:58 134  	  , offer_chain.name				 offer_chain_name
11:21:58 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
11:21:58 136  	  , gclicense.purchase_date			 subscription_start_date
11:21:58 137  	  , gclicense.start_date			 license_start_date
11:21:58 138  	  , gclicense.end_date				 license_end_date
11:21:58 139  	  , credit_card.city				 cc_city
11:21:58 140  	  , credit_card.state				 cc_state
11:21:58 141  	  , credit_card.postal_code			 cc_postal_code
11:21:58 142  	  , line_item.create_date			 line_item_purchase_date
11:21:58 143  	  , gclicense.account_regi_id
11:21:58 144  	  , product_offering.quantity			 purchase_quantity
11:21:58 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
11:21:58 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
11:21:58 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
11:21:58 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
11:21:58 149  	  , 0						 purchase_tax_amount
11:21:58 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
11:21:58 151  	  , invoice.id					 invoice_number
11:21:58 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
11:21:58 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
11:21:58 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
11:21:58 155  	  FROM
11:21:58 156  	       line_item
11:21:58 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
11:21:58 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
11:21:58 159  	  JOIN product				ON product.id	       = product_offering.product_id
11:21:58 160  	  join (
11:21:58 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
11:21:58 162  		      ,subscription.sct_id, license.start_date, license.end_date
11:21:58 163  		      ,account.group_id account_regi_id
11:21:58 164  		from	 license
11:21:58 165  		    join subscription ON subscription.id = license.subscription_id
11:21:58 166  		    join account      ON account.id	 = subscription.account_id
11:21:58 167  		union all
11:21:58 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
11:21:58 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
11:21:58 170  		      ,gc.purchaser_group_id account_regi_id
11:21:58 171  		from	 gift_certificate gc
11:21:58 172  		where
11:21:58 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
11:21:58 174  
11:21:58 175  	  ) gclicense
11:21:58 176  						on gclicense.invoice_id = invoice.id
11:21:58 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
11:21:58 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
11:21:58 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
11:21:58 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
11:21:58 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
11:21:58 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
11:21:58 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
11:21:58 184  	  join liq				on line_item.id 	= liq.id
11:21:58 185  	    ;
11:21:58 186  	END EXTRACT_LINE_ITEMS;
11:21:58 187  ----
11:21:58 188  --------------------------------------------------------------------------------
11:21:58 189  ----
11:21:58 190  END PROCS_REPORTING_1A;
11:21:58 191  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.03
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
11:21:58   2  
11:21:58   3  FUNCTION GET_PRODUCT_NAMES(
11:21:58   4  	in_offer_id IN NUMBER
11:21:58   5  ) RETURN VARCHAR2 AS
11:21:58   6  var_result_names VARCHAR2(1024);
11:21:58   7  BEGIN
11:21:58   8  
11:21:58   9  	var_result_names := NULL;
11:21:58  10  
11:21:58  11  	FOR f_product IN (
11:21:58  12  	  SELECT
11:21:58  13  	    PRODUCT.NAME
11:21:58  14  	  FROM
11:21:58  15  	    PRODUCT
11:21:58  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
11:21:58  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
11:21:58  18  	  WHERE
11:21:58  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
11:21:58  20  	)
11:21:58  21  	LOOP
11:21:58  22  
11:21:58  23  	  IF var_result_names IS NULL THEN
11:21:58  24  	    var_result_names := f_product.NAME;
11:21:58  25  	  ELSE
11:21:58  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
11:21:58  27  	  END IF;
11:21:58  28  
11:21:58  29  	END LOOP;
11:21:58  30  
11:21:58  31  	RETURN var_result_names;
11:21:58  32  
11:21:58  33  END GET_PRODUCT_NAMES;
11:21:58  34  
11:21:58  35  /******************************************************************************/
11:21:58  36  
11:21:58  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
11:21:58  38  	in_start_date  IN DATE,
11:21:58  39  	in_end_date    IN DATE,
11:21:58  40  	out_result_set OUT SYS_REFCURSOR
11:21:58  41  ) AS
11:21:58  42  -- CONSTANTS
11:21:58  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
11:21:58  44  BEGIN
11:21:58  45  
11:21:58  46  	OPEN out_result_set FOR
11:21:58  47  	SELECT
11:21:58  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
11:21:58  49  	  "Offer_Id",
11:21:58  50  	  "New_Purchases_Num",
11:21:58  51  	  "Number_Of_renewals",
11:21:58  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
11:21:58  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
11:21:58  54  	FROM (
11:21:58  55  	  SELECT
11:21:58  56  	    "Offer_Id",
11:21:58  57  	    "Number_Of_renewals",
11:21:58  58  	    "New_Purchases_Num"
11:21:58  59  	  FROM (
11:21:58  60  	    SELECT
11:21:58  61  	      OFFER.ID as "Offer_Id",
11:21:58  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
11:21:58  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
11:21:58  64  	    FROM
11:21:58  65  	      OFFER
11:21:58  66  	  )
11:21:58  67  	  WHERE
11:21:58  68  	    "New_Purchases_Num" > 0
11:21:58  69  	    OR "Number_Of_renewals" > 0
11:21:58  70  	);
11:21:58  71  
11:21:58  72  	/*
11:21:58  73  	OPEN out_result_set FOR
11:21:58  74  	SELECT
11:21:58  75  	  "Product_Names",
11:21:58  76  	  "Offer_Id",
11:21:58  77  	  "New_Purchases_Num",
11:21:58  78  	  "Number_Of_renewals",
11:21:58  79  	  "Total_Dollar_Value",
11:21:58  80  	  "Unique_Purchasers_num"
11:21:58  81  	FROM (
11:21:58  82  	  SELECT
11:21:58  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
11:21:58  84  	    offer.id as "Offer_Id",
11:21:58  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
11:21:58  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
11:21:58  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
11:21:58  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
11:21:58  89  	  FROM
11:21:58  90  	    OFFER
11:21:58  91  	)
11:21:58  92  	WHERE
11:21:58  93  	  "New_Purchases_Num" > 0
11:21:58  94  	  OR "Number_Of_renewals" > 0
11:21:58  95  	  OR "Total_Dollar_Value" > 0
11:21:58  96  	  OR "Unique_Purchasers_num" > 0;
11:21:58  97  	*/
11:21:58  98  
11:21:58  99  END GET_FULL_FLASH_REPORT_PURCH;
11:21:58 100  
11:21:58 101  /******************************************************************************/
11:21:58 102  
11:21:58 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
11:21:58 104  	in_offer_id	       IN NUMBER,
11:21:58 105  	in_start_date	       IN DATE,
11:21:58 106  	in_end_date	       IN DATE,
11:21:58 107  	out_new_purchasers_num OUT NUMBER,
11:21:58 108  	out_renewals_num       OUT NUMBER,
11:21:58 109  	out_product_names      OUT VARCHAR2,
11:21:58 110  	out_total_dollar_value OUT NUMBER,
11:21:58 111  	out_unique_purchasers  OUT NUMBER
11:21:58 112  ) AS
11:21:58 113  -- CONSTANTS
11:21:58 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
11:21:58 115  BEGIN
11:21:58 116  
11:21:58 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
11:21:58 118  
11:21:58 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
11:21:58 120  	  in_offer_id,
11:21:58 121  	  in_start_date,
11:21:58 122  	  in_end_date
11:21:58 123  	);
11:21:58 124  
11:21:58 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
11:21:58 126  	  in_offer_id,
11:21:58 127  	  in_start_date,
11:21:58 128  	  in_end_date
11:21:58 129  	);
11:21:58 130  
11:21:58 131  	out_renewals_num := FLR_RENEWALS_NUM(
11:21:58 132  	  in_offer_id,
11:21:58 133  	  in_start_date,
11:21:58 134  	  in_end_date
11:21:58 135  	);
11:21:58 136  
11:21:58 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
11:21:58 138  	  in_offer_id,
11:21:58 139  	  in_start_date,
11:21:58 140  	  in_end_date
11:21:58 141  	);
11:21:58 142  
11:21:58 143  END GET_FLASH_REPORT_PURCHASES;
11:21:58 144  
11:21:58 145  /******************************************************************************/
11:21:58 146  
11:21:58 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
11:21:58 148  	in_offer_id	       IN NUMBER,
11:21:58 149  	in_start_date	       IN DATE,
11:21:58 150  	in_end_date	       IN DATE
11:21:58 151  ) RETURN NUMBER AS
11:21:58 152  -- CONSTANTS
11:21:58 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
11:21:58 154  -- VARIABLES
11:21:58 155  var_new_purchases_num NUMBER;
11:21:58 156  BEGIN
11:21:58 157  	SELECT
11:21:58 158  	  COUNT(LICENSE.ID)
11:21:58 159  	  into
11:21:58 160  	  var_new_purchases_num
11:21:58 161  	FROM
11:21:58 162  	  LICENSE
11:21:58 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
11:21:58 164  	WHERE
11:21:58 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
11:21:58 166  	  AND LICENSE.OFFER_ID = in_offer_id
11:21:58 167  	  AND CHARGE.CHARGE_AMOUNT > 0
11:21:58 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
11:21:58 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
11:21:58 170  
11:21:58 171  	RETURN var_new_purchases_num;
11:21:58 172  END FLR_NEW_PURCHASERS_NUM;
11:21:58 173  
11:21:58 174  /******************************************************************************/
11:21:58 175  
11:21:58 176  FUNCTION FLR_RENEWALS_NUM (
11:21:58 177  	in_offer_id	       IN NUMBER,
11:21:58 178  	in_start_date	       IN DATE,
11:21:58 179  	in_end_date	       IN DATE
11:21:58 180  ) RETURN NUMBER AS
11:21:58 181  -- CONSTANTS
11:21:58 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
11:21:58 183  -- VARIABLES
11:21:58 184  var_renewals_num NUMBER;
11:21:58 185  BEGIN
11:21:58 186  	SELECT
11:21:58 187  	  COUNT(LICENSE.ID)
11:21:58 188  	  into
11:21:58 189  	  var_renewals_num
11:21:58 190  	FROM
11:21:58 191  	  LICENSE
11:21:58 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
11:21:58 193  	WHERE
11:21:58 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
11:21:58 195  	  AND LICENSE.OFFER_ID = in_offer_id
11:21:58 196  	  AND CHARGE.CHARGE_AMOUNT > 0
11:21:58 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
11:21:58 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
11:21:58 199  
11:21:58 200  	RETURN var_renewals_num;
11:21:58 201  END FLR_RENEWALS_NUM;
11:21:58 202  
11:21:58 203  /******************************************************************************/
11:21:58 204  
11:21:58 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
11:21:58 206  	in_offer_id	       IN NUMBER,
11:21:58 207  	in_start_date	       IN DATE,
11:21:58 208  	in_end_date	       IN DATE
11:21:58 209  ) RETURN NUMBER AS
11:21:58 210  var_dollar_value NUMBER(10,2);
11:21:58 211  BEGIN
11:21:58 212  	SELECT
11:21:58 213  	  SUM(CHARGE.CHARGE_AMOUNT)
11:21:58 214  	  into
11:21:58 215  	  var_dollar_value
11:21:58 216  	FROM
11:21:58 217  	  LICENSE
11:21:58 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
11:21:58 219  	WHERE
11:21:58 220  	  LICENSE.OFFER_ID = in_offer_id
11:21:58 221  	  AND CHARGE.CHARGE_AMOUNT > 0
11:21:58 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
11:21:58 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
11:21:58 224  
11:21:58 225  	RETURN var_dollar_value;
11:21:58 226  END FLR_TOTAL_DOLLAR_VALUE;
11:21:58 227  
11:21:58 228  /******************************************************************************/
11:21:58 229  
11:21:58 230  FUNCTION FLR_UNIQUE_PURCHASERS (
11:21:58 231  	in_offer_id	       IN NUMBER,
11:21:58 232  	in_start_date	       IN DATE,
11:21:58 233  	in_end_date	       IN DATE
11:21:58 234  ) RETURN NUMBER AS
11:21:58 235  -- CONSTANTS
11:21:58 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
11:21:58 237  -- VARIABLES
11:21:58 238  var_unique_purchasers NUMBER;
11:21:58 239  BEGIN
11:21:58 240  	SELECT
11:21:58 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
11:21:58 242  	FROM
11:21:58 243  	  LICENSE
11:21:58 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
11:21:58 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 246  	WHERE
11:21:58 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
11:21:58 248  	  AND LICENSE.OFFER_ID = in_offer_id
11:21:58 249  	  AND CHARGE.CHARGE_AMOUNT > 0
11:21:58 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
11:21:58 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
11:21:58 252  
11:21:58 253  	RETURN var_unique_purchasers;
11:21:58 254  END;
11:21:58 255  
11:21:58 256  END PROCS_REPORTS_V5;
11:21:58 257  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE INCREMENT_VERSION
11:21:58   4  /*
11:21:58   5  Throws exceptions:
11:21:58   6  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58   7  */
11:21:58   8  AS
11:21:58   9  BEGIN
11:21:58  10  
11:21:58  11  	UPDATE SYS_VERSION SET version=version+1;
11:21:58  12  
11:21:58  13  END INCREMENT_VERSION;
11:21:58  14  
11:21:58  15  /*************************************************************/
11:21:58  16  
11:21:58  17  PROCEDURE CHECK_VERSION(
11:21:58  18  	  in_vers    IN NUMBER,
11:21:58  19  	  out_result OUT NUMBER
11:21:58  20  ) AS
11:21:58  21  	current_version NUMBER;
11:21:58  22  BEGIN
11:21:58  23  	SELECT version INTO current_version FROM SYS_VERSION;
11:21:58  24  	IF(current_version != in_vers) THEN
11:21:58  25  	  out_result := 1;
11:21:58  26  	ELSE
11:21:58  27  	  out_result := 0;
11:21:58  28  	END IF;
11:21:58  29  END CHECK_VERSION;
11:21:58  30  
11:21:58  31  END PROCS_SYSTEM_V15;
11:21:58  32  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE ADD_TAX (
11:21:58   4  	in_tax_type_id		 IN NUMBER,
11:21:58   5  	in_calculated_amount	 IN NUMBER,
11:21:58   6  	in_created_by		 IN VARCHAR2,
11:21:58   7  	in_line_item_id 	 IN NUMBER,
11:21:58   8  	in_effective_rate	 IN VARCHAR2,
11:21:58   9  	in_taxable_amount	 IN NUMBER,
11:21:58  10  	in_tax_rule_id		 IN NUMBER,
11:21:58  11  	in_jurisdiction_level_id IN NUMBER,
11:21:58  12  	in_jurisdiction_name	 IN VARCHAR2,
11:21:58  13  	in_jurisdiction_id	 IN VARCHAR2,
11:21:58  14  	in_ext_tax_type 	 IN VARCHAR2,
11:21:58  15  	in_ext_result		 IN VARCHAR2,
11:21:58  16  	in_imposition_type	 IN VARCHAR2,
11:21:58  17  	in_imposition		 IN VARCHAR2
11:21:58  18  ) AS
11:21:58  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
11:21:58  20  -- VARIABLES
11:21:58  21  var_new_tax_id	NUMBER;
11:21:58  22  temp_line_item_id NUMBER;
11:21:58  23  -- EXCEPTIONS
11:21:58  24  BAD_LINE_ITEM_ID EXCEPTION;
11:21:58  25  BEGIN
11:21:58  26  
11:21:58  27  	BEGIN
11:21:58  28  	  SELECT
11:21:58  29  	    LINE_ITEM.ID into temp_line_item_id
11:21:58  30  	  FROM
11:21:58  31  	    LINE_ITEM
11:21:58  32  	  WHERE
11:21:58  33  	    LINE_ITEM.ID = in_line_item_id;
11:21:58  34  	  EXCEPTION
11:21:58  35  	    WHEN NO_DATA_FOUND THEN
11:21:58  36  	      RAISE BAD_LINE_ITEM_ID;
11:21:58  37  	END;
11:21:58  38  
11:21:58  39  	var_new_tax_id := NULL;
11:21:58  40  
11:21:58  41  	PROCS_TAXES_CRU_V15.CREATE_TAX(
11:21:58  42  	  var_new_tax_id,
11:21:58  43  	  in_tax_type_id,
11:21:58  44  	  in_calculated_amount,
11:21:58  45  	  in_created_by,
11:21:58  46  	  in_line_item_id,
11:21:58  47  	  in_effective_rate,
11:21:58  48  	  in_taxable_amount,
11:21:58  49  	  in_tax_rule_id,
11:21:58  50  	  in_jurisdiction_level_id,
11:21:58  51  	  in_jurisdiction_name,
11:21:58  52  	  in_jurisdiction_id,
11:21:58  53  	  in_ext_tax_type,
11:21:58  54  	  in_ext_result,
11:21:58  55  	  in_imposition_type,
11:21:58  56  	  in_imposition
11:21:58  57  	);
11:21:58  58  
11:21:58  59  EXCEPTION
11:21:58  60  WHEN BAD_LINE_ITEM_ID THEN
11:21:58  61  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58  62  	  SPROC_NAME, 'No such line item');
11:21:58  63  WHEN OTHERS THEN
11:21:58  64  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58  66  END ADD_TAX;
11:21:58  67  
11:21:58  68  /******************************************************************************/
11:21:58  69  
11:21:58  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
11:21:58  71  	in_country_code IN CHAR,
11:21:58  72  	in_check_date IN DATE,
11:21:58  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V15.FALSE
11:21:58  74  ) AS
11:21:58  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
11:21:58  76  -- VARIABLES
11:21:58  77  var_countries_count NUMBER;
11:21:58  78  var_result	  NUMBER;
11:21:58  79  BEGIN
11:21:58  80  
11:21:58  81  	SELECT
11:21:58  82  	  COUNT(1) into var_countries_count
11:21:58  83  	FROM
11:21:58  84  	  TAX_COUNTRY_EXCLUSION_LIST
11:21:58  85  	WHERE
11:21:58  86  	  country_code = in_country_code
11:21:58  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
11:21:58  88  	  AND (
11:21:58  89  	    end_date is null
11:21:58  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
11:21:58  91  	  );
11:21:58  92  
11:21:58  93  	IF var_countries_count > 1 THEN
11:21:58  94  	  -- [REVU] Should not happen. DB structure error
11:21:58  95  	  var_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58  96  	ELSIF var_countries_count = 1 THEN
11:21:58  97  	  var_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58  98  	ELSE
11:21:58  99  	  var_result := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 100  	END IF;
11:21:58 101  
11:21:58 102  	out_is_founded := var_result;
11:21:58 103  
11:21:58 104  EXCEPTION
11:21:58 105  WHEN OTHERS THEN
11:21:58 106  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 108  END CHECK_COUNTRY_FOR_EXCLUSION;
11:21:58 109  
11:21:58 110  /******************************************************************************/
11:21:58 111  
11:21:58 112  PROCEDURE GET_TAX_CATEGORY (
11:21:58 113  	in_tax_category_id IN NUMBER,
11:21:58 114  	out_result_set	   OUT SYS_REFCURSOR
11:21:58 115  ) AS
11:21:58 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
11:21:58 117  BEGIN
11:21:58 118  
11:21:58 119  	OPEN out_result_set FOR
11:21:58 120  	SELECT
11:21:58 121  	  ID,
11:21:58 122  	  CODE,
11:21:58 123  	  DESCRIPTION
11:21:58 124  	FROM
11:21:58 125  	  TAX_CATEGORY
11:21:58 126  	WHERE
11:21:58 127  	  ID = in_tax_category_id;
11:21:58 128  
11:21:58 129  EXCEPTION
11:21:58 130  WHEN OTHERS THEN
11:21:58 131  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 133  END GET_TAX_CATEGORY;
11:21:58 134  
11:21:58 135  END PROCS_TAXES_V15;
11:21:58 136  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.03
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE CREATE_TRANSACTION (
11:21:58   4  /*
11:21:58   5  Throws exceptions:
11:21:58   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58   8  */
11:21:58   9  	in_transaction_id  IN NUMBER,
11:21:58  10  	in_status_id	   IN NUMBER,
11:21:58  11  	in_amount	   IN NUMBER,
11:21:58  12  	in_created_by	   IN VARCHAR2,
11:21:58  13  	in_order_id	   IN VARCHAR2,
11:21:58  14  	in_is_refund	   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE,
11:21:58  15  	out_transaction_id OUT NUMBER
11:21:58  16  ) AS
11:21:58  17  -- VARIABLES
11:21:58  18  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
11:21:58  19  var_transaction_count  NUMBER;
11:21:58  20  -- EXCEPTIONS
11:21:58  21  BAD_TRANSACTION_ID     EXCEPTION;
11:21:58  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58  23  BEGIN
11:21:58  24  
11:21:58  25  	IF in_transaction_id IS NOT NULL THEN
11:21:58  26  	  SELECT
11:21:58  27  	    COUNT(*) into var_transaction_count
11:21:58  28  	  FROM
11:21:58  29  	    TRANSACTION
11:21:58  30  	  WHERE
11:21:58  31  	    TRANSACTION.ID = in_transaction_id;
11:21:58  32  	  IF var_transaction_count > 0 THEN
11:21:58  33  	    RAISE BAD_TRANSACTION_ID;
11:21:58  34  	  END IF;
11:21:58  35  	END IF;
11:21:58  36  
11:21:58  37  	PROCS_TRANSACTION_CRU_V15.CREATE_TRANSACTION(
11:21:58  38  	  out_transaction_id	   => out_transaction_id,
11:21:58  39  	  in_transaction_id	   => in_transaction_id,
11:21:58  40  	  in_transaction_status_id => in_status_id,
11:21:58  41  	  in_transaction_amount    => in_amount,
11:21:58  42  	  in_created_by 	   => in_created_by,
11:21:58  43  	  in_order_id		   => in_order_id,
11:21:58  44  	  in_is_refund		   => in_is_refund
11:21:58  45  	);
11:21:58  46  
11:21:58  47  EXCEPTION
11:21:58  48  WHEN BAD_TRANSACTION_ID THEN
11:21:58  49  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:58  50  	  SPROC_NAME, 'Transaction with given id already exists');
11:21:58  51  WHEN OTHERS THEN
11:21:58  52  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58  53  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58  54  END CREATE_TRANSACTION;
11:21:58  55  
11:21:58  56  /******************************************************************************/
11:21:58  57  
11:21:58  58  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
11:21:58  59  /*
11:21:58  60  Throws exceptions:
11:21:58  61  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58  62  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58  63  */
11:21:58  64  	in_transaction_id	   IN NUMBER,
11:21:58  65  	in_trans_attempt_status    IN NUMBER,
11:21:58  66  	in_external_status_code    IN VARCHAR2,
11:21:58  67  	in_external_status_message IN VARCHAR2,
11:21:58  68  	in_created_by		   IN VARCHAR2,
11:21:58  69  	in_ext_transaction_id	   IN VARCHAR2,
11:21:58  70  	out_transaction_attempt_id OUT NUMBER
11:21:58  71  ) AS
11:21:58  72  -- VARIABLES
11:21:58  73  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
11:21:58  74  var_transaction_create_date DATE;
11:21:58  75  var_transaction_attempt_id  NUMBER;
11:21:58  76  
11:21:58  77  -- EXCEPTIONS
11:21:58  78  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
11:21:58  79  BAD_TRANSACTION_ID       EXCEPTION;
11:21:58  80  BEGIN
11:21:58  81  
11:21:58  82  	-- Check that transaction exists
11:21:58  83  	BEGIN
11:21:58  84  	  SELECT
11:21:58  85  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
11:21:58  86  	  FROM
11:21:58  87  	    TRANSACTION
11:21:58  88  	  WHERE
11:21:58  89  	    TRANSACTION.ID = in_transaction_id;
11:21:58  90  	  EXCEPTION
11:21:58  91  	    WHEN OTHERS THEN
11:21:58  92  	      RAISE BAD_TRANSACTION_ID;
11:21:58  93  	END;
11:21:58  94  
11:21:58  95  	-- Check that transaction status is correct
11:21:58  96  	IF in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
11:21:58  97  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:58  98  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
11:21:58  99  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
11:21:58 100  	END IF;
11:21:58 101  
11:21:58 102  	var_transaction_attempt_id := NULL;
11:21:58 103  	PROCS_TRANSACTION_CRU_V15.CREATE_TRANSACTION_ATTEMPT(
11:21:58 104  	  inout_transaction_attempt_id => var_transaction_attempt_id,
11:21:58 105  	  in_transaction_id	       => in_transaction_id,
11:21:58 106  	  in_external_status_code      => in_external_status_code,
11:21:58 107  	  in_external_status_message   => in_external_status_message,
11:21:58 108  	  in_created_by 	       => in_created_by,
11:21:58 109  	  in_external_transaction_id   => in_ext_transaction_id,
11:21:58 110  	  in_transaction_start_time    => var_transaction_create_date,
11:21:58 111  	  in_status_id		       => in_trans_attempt_status
11:21:58 112  	);
11:21:58 113  
11:21:58 114  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
11:21:58 115  	  in_transaction_id => in_transaction_id,
11:21:58 116  	  in_updated_by     => in_created_by
11:21:58 117  	);
11:21:58 118  
11:21:58 119  	out_transaction_attempt_id := var_transaction_attempt_id;
11:21:58 120  
11:21:58 121  EXCEPTION
11:21:58 122  WHEN BAD_TRANSACTION_ID THEN
11:21:58 123  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 124  	  SPROC_NAME, 'No such transaction');
11:21:58 125  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
11:21:58 126  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 127  	  SPROC_NAME, 'Bad transaction attempt status');
11:21:58 128  WHEN OTHERS THEN
11:21:58 129  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 130  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 131  END CREATE_TRANSACTION_ATTEMPT;
11:21:58 132  
11:21:58 133  /******************************************************************************/
11:21:58 134  
11:21:58 135  PROCEDURE UPDATE_TRANSACTION_STATUS (
11:21:58 136  /*
11:21:58 137  Throws exceptions:
11:21:58 138  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 139  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 140  */
11:21:58 141  	in_transaction_id	 IN NUMBER,
11:21:58 142  	in_updated_by		 IN VARCHAR2,
11:21:58 143  	in_transaction_status_id IN NUMBER
11:21:58 144  ) AS
11:21:58 145  -- VARIABLES
11:21:58 146  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
11:21:58 147  temp_transaction_id NUMBER;
11:21:58 148  
11:21:58 149  -- EXCEPTIONS
11:21:58 150  BAD_TRANSACTION_ID     EXCEPTION;
11:21:58 151  BAD_TRANSACTION_STATUS EXCEPTION;
11:21:58 152  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 153  BEGIN
11:21:58 154  
11:21:58 155  	-- Check that transaction exists
11:21:58 156  	BEGIN
11:21:58 157  	  SELECT
11:21:58 158  	    TRANSACTION.ID into temp_transaction_id
11:21:58 159  	  FROM
11:21:58 160  	    TRANSACTION
11:21:58 161  	  WHERE
11:21:58 162  	    TRANSACTION.ID = in_transaction_id;
11:21:58 163  	  EXCEPTION
11:21:58 164  	    WHEN OTHERS THEN
11:21:58 165  	      RAISE BAD_TRANSACTION_ID;
11:21:58 166  	END;
11:21:58 167  
11:21:58 168  	-- Check that transaction status is correct
11:21:58 169  	IF    in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_PENDING
11:21:58 170  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
11:21:58 171  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_CHARGEBACK
11:21:58 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V15.TRANSACTION_DECLINED THEN
11:21:58 173  	  RAISE BAD_TRANSACTION_STATUS;
11:21:58 174  	END IF;
11:21:58 175  
11:21:58 176  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
11:21:58 177  	  in_transaction_id	   => in_transaction_id,
11:21:58 178  	  in_updated_by 	   => in_updated_by,
11:21:58 179  	  in_transaction_status_id => in_transaction_status_id
11:21:58 180  	);
11:21:58 181  
11:21:58 182  EXCEPTION
11:21:58 183  WHEN BAD_TRANSACTION_ID THEN
11:21:58 184  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 185  	  SPROC_NAME, 'No such transaction');
11:21:58 186  WHEN BAD_TRANSACTION_STATUS THEN
11:21:58 187  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 188  	  SPROC_NAME, 'Bad transaction status');
11:21:58 189  WHEN OTHERS THEN
11:21:58 190  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 191  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 192  END UPDATE_TRANSACTION_STATUS;
11:21:58 193  
11:21:58 194  /******************************************************************************/
11:21:58 195  
11:21:58 196  PROCEDURE UPDATE_TRANSACTION_SETTLED (
11:21:58 197  /*
11:21:58 198  Throws exceptions:
11:21:58 199  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 200  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 201  */
11:21:58 202  	in_transaction_id	 IN NUMBER,
11:21:58 203  	in_updated_by		 IN VARCHAR2,
11:21:58 204  	in_is_settled		 IN NUMBER
11:21:58 205  ) AS
11:21:58 206  -- VARIABLES
11:21:58 207  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
11:21:58 208  temp_transaction_id NUMBER;
11:21:58 209  
11:21:58 210  -- EXCEPTIONS
11:21:58 211  BAD_TRANSACTION_ID     EXCEPTION;
11:21:58 212  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 213  BEGIN
11:21:58 214  
11:21:58 215  	-- Check that transaction exists
11:21:58 216  	BEGIN
11:21:58 217  	  SELECT
11:21:58 218  	    TRANSACTION.ID into temp_transaction_id
11:21:58 219  	  FROM
11:21:58 220  	    TRANSACTION
11:21:58 221  	  WHERE
11:21:58 222  	    TRANSACTION.ID = in_transaction_id;
11:21:58 223  	  EXCEPTION
11:21:58 224  	    WHEN OTHERS THEN
11:21:58 225  	      RAISE BAD_TRANSACTION_ID;
11:21:58 226  	END;
11:21:58 227  
11:21:58 228  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
11:21:58 229  	  in_transaction_id	   => in_transaction_id,
11:21:58 230  	  in_updated_by 	   => in_updated_by,
11:21:58 231  	  in_is_settled 	   => in_is_settled
11:21:58 232  	);
11:21:58 233  
11:21:58 234  EXCEPTION
11:21:58 235  WHEN BAD_TRANSACTION_ID THEN
11:21:58 236  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 237  	  SPROC_NAME, 'No such transaction');
11:21:58 238  WHEN OTHERS THEN
11:21:58 239  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 241  END UPDATE_TRANSACTION_SETTLED;
11:21:58 242  
11:21:58 243  /******************************************************************************/
11:21:58 244  
11:21:58 245  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
11:21:58 246  /*
11:21:58 247  Throws exceptions:
11:21:58 248  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 249  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 250  */
11:21:58 251  	in_transaction_attempt_id IN NUMBER,
11:21:58 252  	in_updated_by		  IN VARCHAR2
11:21:58 253  ) AS
11:21:58 254  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
11:21:58 255  -- VARIABLES
11:21:58 256  var_transaction_id NUMBER;
11:21:58 257  -- EXCEPTION
11:21:58 258  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
11:21:58 259  BEGIN
11:21:58 260  
11:21:58 261  	BEGIN
11:21:58 262  	  SELECT
11:21:58 263  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
11:21:58 264  	  FROM
11:21:58 265  	    TRANSACTION_ATTEMPT
11:21:58 266  	  WHERE
11:21:58 267  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
11:21:58 268  	  EXCEPTION
11:21:58 269  	    WHEN NO_DATA_FOUND THEN
11:21:58 270  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
11:21:58 271  	END;
11:21:58 272  
11:21:58 273  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION(
11:21:58 274  	  in_transaction_id => var_transaction_id,
11:21:58 275  	  in_updated_by     => in_updated_by
11:21:58 276  	);
11:21:58 277  
11:21:58 278  EXCEPTION
11:21:58 279  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
11:21:58 280  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 281  	  SPROC_NAME, 'No such transaction attempt');
11:21:58 282  WHEN OTHERS THEN
11:21:58 283  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 284  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 285  END UPDATE_TRNSCTN_ATTEMPT_TIME;
11:21:58 286  
11:21:58 287  /******************************************************************************/
11:21:58 288  
11:21:58 289  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
11:21:58 290  /*
11:21:58 291  Throws exceptions:
11:21:58 292  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 293  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 294  */
11:21:58 295  	in_transaction_attempt_id     IN NUMBER,
11:21:58 296  	in_transaction_attempt_status IN NUMBER
11:21:58 297  ) AS
11:21:58 298  -- VARIABLES
11:21:58 299  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
11:21:58 300  temp_transaction_attempt_id NUMBER;
11:21:58 301  
11:21:58 302  -- EXCEPTION
11:21:58 303  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
11:21:58 304  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
11:21:58 305  BEGIN
11:21:58 306  
11:21:58 307  	-- Check that transaction attempt exists
11:21:58 308  	BEGIN
11:21:58 309  	  SELECT
11:21:58 310  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
11:21:58 311  	  FROM
11:21:58 312  	    TRANSACTION_ATTEMPT
11:21:58 313  	  WHERE
11:21:58 314  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
11:21:58 315  	  EXCEPTION
11:21:58 316  	    WHEN NO_DATA_FOUND THEN
11:21:58 317  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
11:21:58 318  	END;
11:21:58 319  
11:21:58 320  	-- Check that transaction attempt is correct
11:21:58 321  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
11:21:58 322  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:58 323  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
11:21:58 324  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
11:21:58 325  	END IF;
11:21:58 326  
11:21:58 327  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ATTEMPT(
11:21:58 328  	  in_transaction_attempt_id => in_transaction_attempt_id,
11:21:58 329  	  in_status_id		    => in_transaction_attempt_status
11:21:58 330  	);
11:21:58 331  
11:21:58 332  EXCEPTION
11:21:58 333  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
11:21:58 334  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 335  	  SPROC_NAME, 'No such transaction attempt');
11:21:58 336  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
11:21:58 337  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 338  	  SPROC_NAME, 'Bad transaction attempt status');
11:21:58 339  WHEN OTHERS THEN
11:21:58 340  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 341  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 342  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
11:21:58 343  
11:21:58 344  /******************************************************************************/
11:21:58 345  
11:21:58 346  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
11:21:58 347  /*
11:21:58 348  Throws exceptions:
11:21:58 349  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 350  */
11:21:58 351  	in_transaction_id	      IN NUMBER,
11:21:58 352  	in_transaction_attempt_status IN NUMBER,
11:21:58 353  	out_result_set		      OUT SYS_REFCURSOR
11:21:58 354  ) AS
11:21:58 355  -- VARIABLES
11:21:58 356  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
11:21:58 357  temp_transaction_id NUMBER;
11:21:58 358  -- EXCEPTIONS
11:21:58 359  BAD_TRANSACTION_ID       EXCEPTION;
11:21:58 360  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
11:21:58 361  BEGIN
11:21:58 362  
11:21:58 363  	-- Check that transaction exists
11:21:58 364  	BEGIN
11:21:58 365  	  SELECT
11:21:58 366  	    TRANSACTION.ID into temp_transaction_id
11:21:58 367  	  FROM
11:21:58 368  	    TRANSACTION
11:21:58 369  	  WHERE
11:21:58 370  	    TRANSACTION.ID = in_transaction_id;
11:21:58 371  	  EXCEPTION
11:21:58 372  	    WHEN OTHERS THEN
11:21:58 373  	      RAISE BAD_TRANSACTION_ID;
11:21:58 374  	END;
11:21:58 375  
11:21:58 376  	-- Check that transaction attempt status is correct
11:21:58 377  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_IN_PROGRESS
11:21:58 378  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:58 379  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED THEN
11:21:58 380  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
11:21:58 381  	END IF;
11:21:58 382  
11:21:58 383  	OPEN out_result_set FOR
11:21:58 384  	SELECT
11:21:58 385  	  TRANSACTION_ATTEMPT.ID,
11:21:58 386  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
11:21:58 387  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
11:21:58 388  	  TRANSACTION_ATTEMPT.CREATE_DATE,
11:21:58 389  	  TRANSACTION_ATTEMPT.CREATED_BY,
11:21:58 390  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
11:21:58 391  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
11:21:58 392  	  TRANSACTION.TRANSACTION_AMOUNT,
11:21:58 393  	  TRANSACTION.ID as "TRANSACTION_ID",
11:21:58 394  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
11:21:58 395  	FROM
11:21:58 396  	  TRANSACTION_ATTEMPT
11:21:58 397  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
11:21:58 398  	WHERE
11:21:58 399  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
11:21:58 400  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
11:21:58 401  
11:21:58 402  EXCEPTION
11:21:58 403  WHEN BAD_TRANSACTION_ID THEN
11:21:58 404  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 405  	  SPROC_NAME, 'No such transaction');
11:21:58 406  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
11:21:58 407  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 408  	  SPROC_NAME, 'Bad transaction attempt status');
11:21:58 409  WHEN OTHERS THEN
11:21:58 410  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 412  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
11:21:58 413  
11:21:58 414  /******************************************************************************/
11:21:58 415  
11:21:58 416  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
11:21:58 417  /*
11:21:58 418  Throws exceptions:
11:21:58 419  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 420  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 421  */
11:21:58 422  	in_transaction_attempt_id IN NUMBER,
11:21:58 423  	in_ext_status_code	  IN VARCHAR2,
11:21:58 424  	in_ext_status_message	  IN VARCHAR2,
11:21:58 425  	in_ext_transaction_id	  IN VARCHAR2
11:21:58 426  ) AS
11:21:58 427  -- VARIABLES
11:21:58 428  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
11:21:58 429  temp_trans_attempt_count NUMBER;
11:21:58 430  -- EXCEPTIONS
11:21:58 431  BAD_ATTEMPT_ID EXCEPTION;
11:21:58 432  BEGIN
11:21:58 433  
11:21:58 434  	SELECT
11:21:58 435  	  COUNT(*) into temp_trans_attempt_count
11:21:58 436  	FROM
11:21:58 437  	  TRANSACTION_ATTEMPT
11:21:58 438  	WHERE
11:21:58 439  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
11:21:58 440  
11:21:58 441  	IF temp_trans_attempt_count = 0 THEN
11:21:58 442  	  RAISE BAD_ATTEMPT_ID;
11:21:58 443  	END IF;
11:21:58 444  
11:21:58 445  	PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ATTEMPT(
11:21:58 446  	  in_transaction_attempt_id  => in_transaction_attempt_id,
11:21:58 447  	  in_external_status_code    => in_ext_status_code,
11:21:58 448  	  in_external_status_message => in_ext_status_message,
11:21:58 449  	  in_external_transaction_id => in_ext_transaction_id
11:21:58 450  	);
11:21:58 451  
11:21:58 452  EXCEPTION
11:21:58 453  WHEN BAD_ATTEMPT_ID THEN
11:21:58 454  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 455  	  SPROC_NAME, 'No such attempt');
11:21:58 456  WHEN OTHERS THEN
11:21:58 457  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 458  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 459  END UPDATE_TRANSACTION_ATTEMPT_INF;
11:21:58 460  
11:21:58 461  /******************************************************************************/
11:21:58 462  
11:21:58 463  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
11:21:58 464  /*
11:21:58 465  Throws exceptions:
11:21:58 466  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 467  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 468  */
11:21:58 469  	in_transaction_id IN  NUMBER,
11:21:58 470  	out_attempts_num  OUT NUMBER
11:21:58 471  ) AS
11:21:58 472  -- VARIABLES
11:21:58 473  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
11:21:58 474  temp_transaction_count NUMBER;
11:21:58 475  
11:21:58 476  -- EXCEPTIONS
11:21:58 477  BAD_TRANSACTION_ID EXCEPTION;
11:21:58 478  BEGIN
11:21:58 479  
11:21:58 480  	SELECT
11:21:58 481  	  COUNT(*) into temp_transaction_count
11:21:58 482  	FROM
11:21:58 483  	  TRANSACTION
11:21:58 484  	WHERE
11:21:58 485  	  TRANSACTION.ID = in_transaction_id;
11:21:58 486  
11:21:58 487  	IF temp_transaction_count = 0 THEN
11:21:58 488  	  RAISE BAD_TRANSACTION_ID;
11:21:58 489  	END IF;
11:21:58 490  
11:21:58 491  	SELECT
11:21:58 492  	  COUNT(*) into out_attempts_num
11:21:58 493  	FROM
11:21:58 494  	  TRANSACTION_ATTEMPT
11:21:58 495  	WHERE
11:21:58 496  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
11:21:58 497  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_FAILED;
11:21:58 498  
11:21:58 499  EXCEPTION
11:21:58 500  WHEN BAD_TRANSACTION_ID THEN
11:21:58 501  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 502  	  SPROC_NAME, 'No such transaction');
11:21:58 503  WHEN OTHERS THEN
11:21:58 504  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 505  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 506  END GET_FAILED_ATTEMPTS_NUMBER;
11:21:58 507  /******************************************************************************/
11:21:58 508  
11:21:58 509  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
11:21:58 510  /*
11:21:58 511  Throws exceptions:
11:21:58 512  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 513  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 514  */
11:21:58 515  	in_transaction_id IN  NUMBER,
11:21:58 516  	out_is_successfull  OUT NUMBER
11:21:58 517  ) AS
11:21:58 518  -- VARIABLES
11:21:58 519  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
11:21:58 520  temp_transaction_count NUMBER;
11:21:58 521  
11:21:58 522  -- EXCEPTIONS
11:21:58 523  BAD_TRANSACTION_ID EXCEPTION;
11:21:58 524  BEGIN
11:21:58 525  
11:21:58 526  	SELECT
11:21:58 527  	  COUNT(*) into temp_transaction_count
11:21:58 528  	FROM
11:21:58 529  	  TRANSACTION
11:21:58 530  	WHERE
11:21:58 531  	  TRANSACTION.ID = in_transaction_id;
11:21:58 532  
11:21:58 533  	IF temp_transaction_count = 0 THEN
11:21:58 534  	  RAISE BAD_TRANSACTION_ID;
11:21:58 535  	END IF;
11:21:58 536  
11:21:58 537  	SELECT
11:21:58 538  	  COUNT(*) into out_is_successfull
11:21:58 539  	FROM
11:21:58 540  	  TRANSACTION_ATTEMPT
11:21:58 541  	WHERE
11:21:58 542  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
11:21:58 543  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS;
11:21:58 544  
11:21:58 545  EXCEPTION
11:21:58 546  WHEN BAD_TRANSACTION_ID THEN
11:21:58 547  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 548  	  SPROC_NAME, 'No such transaction');
11:21:58 549  WHEN OTHERS THEN
11:21:58 550  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 551  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 552  END IS_TRANSACTION_SUCCESSFULL;
11:21:58 553  /******************************************************************************/
11:21:58 554  
11:21:58 555  PROCEDURE GET_TRANSACTION_AMOUNT (
11:21:58 556  /*
11:21:58 557  Throws exceptions:
11:21:58 558  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 559  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 560  */
11:21:58 561  	in_transaction_id      IN  NUMBER,
11:21:58 562  	out_transaction_amount OUT NUMBER
11:21:58 563  ) AS
11:21:58 564  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
11:21:58 565  BEGIN
11:21:58 566  
11:21:58 567  	SELECT
11:21:58 568  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
11:21:58 569  	FROM
11:21:58 570  	  TRANSACTION
11:21:58 571  	WHERE
11:21:58 572  	  TRANSACTION.ID = in_transaction_id;
11:21:58 573  
11:21:58 574  EXCEPTION
11:21:58 575  WHEN NO_DATA_FOUND THEN
11:21:58 576  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 577  	  SPROC_NAME, 'No such transaction');
11:21:58 578  WHEN OTHERS THEN
11:21:58 579  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 580  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 581  END GET_TRANSACTION_AMOUNT;
11:21:58 582  
11:21:58 583  /******************************************************************************/
11:21:58 584  
11:21:58 585  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
11:21:58 586  /*
11:21:58 587  Throws exceptions:
11:21:58 588  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 589  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 590  */
11:21:58 591  	in_charge_id   IN  NUMBER,
11:21:58 592  	out_result_set OUT SYS_REFCURSOR
11:21:58 593  ) AS
11:21:58 594  -- VARIABLES
11:21:58 595  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
11:21:58 596  temp_charge_id NUMBER;
11:21:58 597  -- EXCEPTIONS
11:21:58 598  BAD_CHARGE_ID EXCEPTION;
11:21:58 599  BEGIN
11:21:58 600  
11:21:58 601  	BEGIN
11:21:58 602  	  SELECT
11:21:58 603  	    CHARGE.ID into temp_charge_id
11:21:58 604  	  FROM
11:21:58 605  	    CHARGE
11:21:58 606  	  WHERE
11:21:58 607  	    CHARGE.ID = in_charge_id;
11:21:58 608  	  EXCEPTION
11:21:58 609  	    WHEN NO_DATA_FOUND THEN
11:21:58 610  	      RAISE BAD_CHARGE_ID;
11:21:58 611  	END;
11:21:58 612  
11:21:58 613  	OPEN out_result_set FOR
11:21:58 614  	SELECT DISTINCT
11:21:58 615  	  TRANSACTION.ID,
11:21:58 616  	  TRANSACTION.TRANSACTION_STATUS_ID,
11:21:58 617  	  TRANSACTION.CREATE_DATE,
11:21:58 618  	  TRANSACTION.TRANSACTION_AMOUNT,
11:21:58 619  	  TRANSACTION.IS_REFUND,
11:21:58 620  	  TRANSACTION.ORDER_ID
11:21:58 621  	FROM
11:21:58 622  	  CHARGE INNER JOIN TRANSACTION ON
11:21:58 623  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:58 624  	WHERE
11:21:58 625  	  CHARGE.ID = in_charge_id;
11:21:58 626  
11:21:58 627  EXCEPTION
11:21:58 628  WHEN BAD_CHARGE_ID THEN
11:21:58 629  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 630  	  SPROC_NAME, 'No such charge');
11:21:58 631  WHEN OTHERS THEN
11:21:58 632  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 633  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 634  END GET_TRANSACTIONS_BY_CHARGE_ID;
11:21:58 635  /******************************************************************************/
11:21:58 636  
11:21:58 637  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
11:21:58 638  /*
11:21:58 639  Throws exceptions:
11:21:58 640  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 641  */
11:21:58 642  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
11:21:58 643  	out_result_set OUT SYS_REFCURSOR
11:21:58 644  ) AS
11:21:58 645  -- VARIABLES
11:21:58 646  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
11:21:58 647  BEGIN
11:21:58 648  	OPEN out_result_set FOR
11:21:58 649  	SELECT DISTINCT
11:21:58 650  	  TRANSACTION.ID
11:21:58 651  	FROM
11:21:58 652  	  TRANSACTION
11:21:58 653  	WHERE
11:21:58 654  	  TRANSACTION.ORDER_ID = in_order_id;
11:21:58 655  
11:21:58 656  EXCEPTION
11:21:58 657  WHEN OTHERS THEN
11:21:58 658  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 659  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 660  END GET_TRANSACTION_BY_ORDER_ID;
11:21:58 661  /******************************************************************************/
11:21:58 662  
11:21:58 663  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
11:21:58 664  /*
11:21:58 665  Throws exceptions:
11:21:58 666  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 667  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 668  */
11:21:58 669  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
11:21:58 670  	out_result_set OUT SYS_REFCURSOR
11:21:58 671  ) AS
11:21:58 672  -- VARIABLES
11:21:58 673  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
11:21:58 674  temp_order_id TRANSACTION.ORDER_ID%TYPE;
11:21:58 675  -- EXCEPTIONS
11:21:58 676  BAD_ORDER_ID EXCEPTION;
11:21:58 677  BEGIN
11:21:58 678  
11:21:58 679  	--TODO BOO, REMOVE ME
11:21:58 680  	BEGIN
11:21:58 681  	  SELECT
11:21:58 682  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
11:21:58 683  	  FROM
11:21:58 684  	    TRANSACTION
11:21:58 685  	  WHERE
11:21:58 686  	    TRANSACTION.ORDER_ID = in_order_id;
11:21:58 687  	  EXCEPTION
11:21:58 688  	    WHEN NO_DATA_FOUND THEN
11:21:58 689  	      RAISE BAD_ORDER_ID;
11:21:58 690  	END;
11:21:58 691  
11:21:58 692  	OPEN out_result_set FOR
11:21:58 693  	SELECT c.ID CHARGE_ID,
11:21:58 694  	  c.CHARGE_AMOUNT,
11:21:58 695  	  c.CHARGE_STATUS_ID,
11:21:58 696  	  c.INSTRUMENT_ID,
11:21:58 697  	  c.INSTRUMENT_TYPE_ID,
11:21:58 698  	  c.INVOICE_ID,
11:21:58 699  	  t.ID TRANSACTION_ID,
11:21:58 700  	  t.IS_REFUND,
11:21:58 701  	  t.IS_SETTLED,
11:21:58 702  	  t.ORDER_ID,
11:21:58 703  	  t.TRANSACTION_AMOUNT,
11:21:58 704  	  t.TRANSACTION_STATUS_ID,
11:21:58 705  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
11:21:58 706  	  t.CREATED_BY TRANSACTION_CREATED_BY,
11:21:58 707  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
11:21:58 708  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
11:21:58 709  	FROM CHARGE c
11:21:58 710  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
11:21:58 711  	WHERE TRANSACTION_ID IN (
11:21:58 712  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
11:21:58 713  	);
11:21:58 714  
11:21:58 715  EXCEPTION
11:21:58 716  WHEN BAD_ORDER_ID THEN
11:21:58 717  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 718  	  SPROC_NAME, 'No such order');
11:21:58 719  WHEN OTHERS THEN
11:21:58 720  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 721  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 722  END GET_TRANSACTIONS_BY_ORDER_ID;
11:21:58 723  /******************************************************************************/
11:21:58 724  
11:21:58 725  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
11:21:58 726  /*
11:21:58 727  Throws exceptions:
11:21:58 728  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 729  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 730  */
11:21:58 731  	in_invoice_id	IN  NUMBER,
11:21:58 732  	out_result_set OUT SYS_REFCURSOR
11:21:58 733  ) AS
11:21:58 734  -- VARIABLES
11:21:58 735  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
11:21:58 736  temp_invoice_id NUMBER;
11:21:58 737  -- EXCEPTIONS
11:21:58 738  BAD_INVOICE_ID EXCEPTION;
11:21:58 739  BEGIN
11:21:58 740  
11:21:58 741  	BEGIN
11:21:58 742  	  SELECT
11:21:58 743  	    INVOICE.ID into temp_invoice_id
11:21:58 744  	  FROM
11:21:58 745  	    INVOICE
11:21:58 746  	  WHERE
11:21:58 747  	    INVOICE.ID = in_invoice_id;
11:21:58 748  	  EXCEPTION
11:21:58 749  	    WHEN NO_DATA_FOUND THEN
11:21:58 750  	      RAISE BAD_INVOICE_ID;
11:21:58 751  	END;
11:21:58 752  
11:21:58 753  	OPEN out_result_set FOR
11:21:58 754  	SELECT DISTINCT
11:21:58 755  	  TRANSACTION.ID,
11:21:58 756  	  TRANSACTION.TRANSACTION_STATUS_ID,
11:21:58 757  	  TRANSACTION.CREATE_DATE,
11:21:58 758  	  TRANSACTION.UPDATE_DATE,
11:21:58 759  	  TRANSACTION.ORDER_ID,
11:21:58 760  	  TRANSACTION.TRANSACTION_AMOUNT
11:21:58 761  	FROM
11:21:58 762  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
11:21:58 763  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
11:21:58 764  	WHERE
11:21:58 765  	  INVOICE.ID = in_invoice_id
11:21:58 766  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V15.TRUE
11:21:58 767  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
11:21:58 768  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_CLOSED;
11:21:58 769  
11:21:58 770  EXCEPTION
11:21:58 771  WHEN BAD_INVOICE_ID THEN
11:21:58 772  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 773  	  SPROC_NAME, 'No such invoice');
11:21:58 774  WHEN OTHERS THEN
11:21:58 775  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 776  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 777  END GET_CLOSED_REFUNDS_BY_INVOICE;
11:21:58 778  
11:21:58 779  /******************************************************************************/
11:21:58 780  
11:21:58 781  PROCEDURE GET_TRANSACTION_ATTEMPTS (
11:21:58 782  /*
11:21:58 783  Throws exceptions:
11:21:58 784  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 785  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 786  */
11:21:58 787  	in_transaction_id IN  NUMBER,
11:21:58 788  	out_result_set	  OUT SYS_REFCURSOR
11:21:58 789  ) AS
11:21:58 790  -- VARIABLES
11:21:58 791  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
11:21:58 792  temp_transaction_id NUMBER;
11:21:58 793  -- EXCEPTIONS
11:21:58 794  BAD_TRANSACTION_ID EXCEPTION;
11:21:58 795  BEGIN
11:21:58 796  
11:21:58 797  	BEGIN
11:21:58 798  	  SELECT
11:21:58 799  	    TRANSACTION.ID into temp_transaction_id
11:21:58 800  	  FROM
11:21:58 801  	    TRANSACTION
11:21:58 802  	  WHERE
11:21:58 803  	    TRANSACTION.ID = in_transaction_id;
11:21:58 804  	  EXCEPTION
11:21:58 805  	    WHEN NO_DATA_FOUND THEN
11:21:58 806  	      RAISE BAD_TRANSACTION_ID;
11:21:58 807  	END;
11:21:58 808  
11:21:58 809  	OPEN out_result_set FOR
11:21:58 810  	SELECT
11:21:58 811  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
11:21:58 812  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
11:21:58 813  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
11:21:58 814  	  TRANSACTION_ATTEMPT.CREATE_DATE,
11:21:58 815  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
11:21:58 816  	FROM
11:21:58 817  	  TRANSACTION_ATTEMPT
11:21:58 818  	WHERE
11:21:58 819  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
11:21:58 820  
11:21:58 821  EXCEPTION
11:21:58 822  WHEN BAD_TRANSACTION_ID THEN
11:21:58 823  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 824  	  SPROC_NAME, 'No such transaction');
11:21:58 825  WHEN OTHERS THEN
11:21:58 826  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 827  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 828  END GET_TRANSACTION_ATTEMPTS;
11:21:58 829  
11:21:58 830  /******************************************************************************/
11:21:58 831  
11:21:58 832  PROCEDURE RESERVE_TRANSACTION_ID (
11:21:58 833  /*
11:21:58 834  Throws exceptions:
11:21:58 835  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 836  */
11:21:58 837  	out_transaction_id OUT NUMBER
11:21:58 838  ) AS
11:21:58 839  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
11:21:58 840  BEGIN
11:21:58 841  	SELECT
11:21:58 842  	  TRN_ID_SEQ.nextVal into out_transaction_id
11:21:58 843  	FROM DUAL;
11:21:58 844  EXCEPTION
11:21:58 845  WHEN OTHERS THEN
11:21:58 846  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 847  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 848  END RESERVE_TRANSACTION_ID;
11:21:58 849  
11:21:58 850  /******************************************************************************/
11:21:58 851  
11:21:58 852  PROCEDURE GET_TRANSACTION_BY_ID (
11:21:58 853  /*
11:21:58 854  Throws exceptions:
11:21:58 855  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 856  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 857  */
11:21:58 858  	in_transaction_id IN NUMBER,
11:21:58 859  	out_result_set	  OUT SYS_REFCURSOR
11:21:58 860  ) AS
11:21:58 861  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
11:21:58 862  -- VARIABLES
11:21:58 863  temp_transaction_id NUMBER;
11:21:58 864  -- EXCPTIONS
11:21:58 865  BAD_TRANSACTION_ID EXCEPTION;
11:21:58 866  BEGIN
11:21:58 867  	BEGIN
11:21:58 868  	  SELECT
11:21:58 869  	    TRANSACTION.ID into temp_transaction_id
11:21:58 870  	  FROM
11:21:58 871  	    TRANSACTION
11:21:58 872  	  WHERE
11:21:58 873  	    TRANSACTION.ID = in_transaction_id;
11:21:58 874  	  EXCEPTION
11:21:58 875  	    WHEN NO_DATA_FOUND THEN
11:21:58 876  	      RAISE BAD_TRANSACTION_ID;
11:21:58 877  	END;
11:21:58 878  
11:21:58 879  	PROCS_TRANSACTION_CRU_V15.READ_TRANSACTION(
11:21:58 880  	  in_transaction_id => in_transaction_id,
11:21:58 881  	  out_result_set    => out_result_set
11:21:58 882  	);
11:21:58 883  
11:21:58 884  EXCEPTION
11:21:58 885  WHEN NO_DATA_FOUND THEN
11:21:58 886  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 887  	  SPROC_NAME, 'No such transaction');
11:21:58 888  WHEN OTHERS THEN
11:21:58 889  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 890  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 891  END GET_TRANSACTION_BY_ID;
11:21:58 892  
11:21:58 893  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:58 894  /*
11:21:58 895  Throws exceptions:
11:21:58 896  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 897  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:58 898  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 899  */
11:21:58 900  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:58 901  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:58 902  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:58 903  ) AS
11:21:58 904  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
11:21:58 905  -- VARIABLES
11:21:58 906  temp_transaction_id TRANSACTION.ID%TYPE;
11:21:58 907  -- EXCEPTIONS
11:21:58 908  BAD_TRANSACTION_ID   EXCEPTION;
11:21:58 909  ORDER_ID_IS_NOT_NULL EXCEPTION;
11:21:58 910  CRU_UNKNOWN_ERROR    EXCEPTION;
11:21:58 911  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:58 912  BEGIN
11:21:58 913  	BEGIN
11:21:58 914  	  SELECT
11:21:58 915  	    TRANSACTION.ID into temp_transaction_id
11:21:58 916  	  FROM
11:21:58 917  	    TRANSACTION
11:21:58 918  	  WHERE
11:21:58 919  	    TRANSACTION.ID = in_transaction_id;
11:21:58 920  	  EXCEPTION
11:21:58 921  	    WHEN NO_DATA_FOUND THEN
11:21:58 922  	      RAISE BAD_TRANSACTION_ID;
11:21:58 923  	END;
11:21:58 924  
11:21:58 925  	BEGIN
11:21:58 926  	  PROCS_TRANSACTION_CRU_V15.UPDATE_TRANSACTION_ORDER_ID(
11:21:58 927  	    in_transaction_id => in_transaction_id,
11:21:58 928  	    in_order_id       => in_order_id,
11:21:58 929  	    in_updated_by     => in_updated_by
11:21:58 930  	  );
11:21:58 931  	  EXCEPTION
11:21:58 932  	    WHEN OTHERS THEN
11:21:58 933  	      IF SQLCODE = APP_EXCEPTION_CODES_V15.NOT_FOUND THEN
11:21:58 934  		RAISE ORDER_ID_IS_NOT_NULL;
11:21:58 935  	      ELSE
11:21:58 936  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 937  		RAISE CRU_UNKNOWN_ERROR;
11:21:58 938  	      END IF;
11:21:58 939  	END;
11:21:58 940  
11:21:58 941  EXCEPTION
11:21:58 942  WHEN BAD_TRANSACTION_ID THEN
11:21:58 943  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 944  	  SPROC_NAME, 'No such transaction');
11:21:58 945  WHEN ORDER_ID_IS_NOT_NULL THEN
11:21:58 946  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 947  	  SPROC_NAME, 'Order id is not null');
11:21:58 948  WHEN CRU_UNKNOWN_ERROR THEN
11:21:58 949  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 950  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
11:21:58 951  WHEN OTHERS THEN
11:21:58 952  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 953  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 954  END UPDATE_TRANSACTION_ORDER_ID;
11:21:58 955  
11:21:58 956  /******************************************************************************/
11:21:58 957  
11:21:58 958  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
11:21:58 959  	in_transaction_id IN NUMBER
11:21:58 960  ) RETURN NUMBER AS
11:21:58 961  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
11:21:58 962  -- Variables
11:21:58 963  var_tax_amount NUMBER(10,2);
11:21:58 964  BEGIN
11:21:58 965  
11:21:58 966  	SELECT
11:21:58 967  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
11:21:58 968  	FROM
11:21:58 969  	  LINE_ITEM LI
11:21:58 970  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
11:21:58 971  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
11:21:58 972  	WHERE
11:21:58 973  	  CH.TRANSACTION_ID = in_transaction_id;
11:21:58 974  
11:21:58 975  	IF var_tax_amount IS NULL THEN
11:21:58 976  	  var_tax_amount := 0;
11:21:58 977  	END IF;
11:21:58 978  
11:21:58 979  	RETURN var_tax_amount;
11:21:58 980  
11:21:58 981  END GET_TRANSACTION_TAX_AMOUNT;
11:21:58 982  
11:21:58 983  /******************************************************************************/
11:21:58 984  
11:21:58 985  FUNCTION GET_TRANSACTION_INTRL_TAXES (
11:21:58 986  	in_transaction_id IN NUMBER
11:21:58 987  ) RETURN NUMBER AS
11:21:58 988  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
11:21:58 989  -- Variables
11:21:58 990  var_intrl_tax_amount NUMBER(10, 2);
11:21:58 991  BEGIN
11:21:58 992  
11:21:58 993  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
11:21:58 994  	FROM
11:21:58 995  	  LINE_ITEM LI
11:21:58 996  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
11:21:58 997  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
11:21:58 998  	  INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
11:21:58 999  	WHERE
11:21:58 1000  	   CH.TRANSACTION_ID = in_transaction_id
11:21:58 1001  	   AND T.TAX_TYPE_ID IN (
11:21:58 1002  	     SELECT GLOBAL_ENUMS_V15.TAX_TYPE_VAT FROM DUAL
11:21:58 1003  	   );
11:21:58 1004  
11:21:58 1005  	 IF var_intrl_tax_amount IS NULL THEN
11:21:58 1006  	   var_intrl_tax_amount := 0;
11:21:58 1007  	 END IF;
11:21:58 1008  
11:21:58 1009  	 RETURN var_intrl_tax_amount;
11:21:58 1010  
11:21:58 1011  END GET_TRANSACTION_INTRL_TAXES;
11:21:58 1012  
11:21:58 1013  /******************************************************************************/
11:21:58 1014  -- norlov: #38796
11:21:58 1015  PROCEDURE GET_TRANSACTIONS (
11:21:58 1016  /*
11:21:58 1017  Throws exceptions:
11:21:58 1018  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1019  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1020  */
11:21:58 1021  	 in_group_id	       IN  NUMBER,
11:21:58 1022  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
11:21:58 1023  	 in_subscription_id    IN NUMBER DEFAULT NULL,
11:21:58 1024  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
11:21:58 1025  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
11:21:58 1026  	 in_transaction_status IN NUMBER DEFAULT NULL,
11:21:58 1027  	 out_result_set        OUT SYS_REFCURSOR
11:21:58 1028  ) AS
11:21:58 1029  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
11:21:58 1030  -- VARIABLES
11:21:58 1031  var_account_id ACCOUNT.ID%TYPE;
11:21:58 1032  statement VARCHAR2(2000);
11:21:58 1033  -- EXCEPTIONS
11:21:58 1034  BAD_GROUP_ID   EXCEPTION;
11:21:58 1035  BEGIN
11:21:58 1036  	-- check group id
11:21:58 1037  	BEGIN
11:21:58 1038  	   SELECT
11:21:58 1039  	     ACCOUNT.ID into var_account_id
11:21:58 1040  	   FROM
11:21:58 1041  	     ACCOUNT
11:21:58 1042  	   WHERE
11:21:58 1043  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:58 1044  	   EXCEPTION
11:21:58 1045  	     WHEN NO_DATA_FOUND THEN
11:21:58 1046  	       RAISE BAD_GROUP_ID;
11:21:58 1047  	 END;
11:21:58 1048  
11:21:58 1049  	 OPEN out_result_set FOR
11:21:58 1050  	 SELECT
11:21:58 1051  	   TRANSACTION.ID,
11:21:58 1052  	   TRANSACTION.TRANSACTION_STATUS_ID,
11:21:58 1053  	   TRANSACTION.TRANSACTION_AMOUNT,
11:21:58 1054  	   TRANSACTION.CREATE_DATE,
11:21:58 1055  	   TRANSACTION.CREATED_BY,
11:21:58 1056  	   TRANSACTION.IS_REFUND,
11:21:58 1057  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
11:21:58 1058  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
11:21:58 1059  	 FROM
11:21:58 1060  	   TRANSACTION
11:21:58 1061  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
11:21:58 1062  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
11:21:58 1063  	 WHERE
11:21:58 1064  	   -- Filter by invoice ID
11:21:58 1065  	   (
11:21:58 1066  	     INVOICE.ID IN (
11:21:58 1067  	       -- Gift certificate invoices
11:21:58 1068  	       SELECT
11:21:58 1069  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
11:21:58 1070  	       FROM
11:21:58 1071  		 GIFT_CERTIFICATE
11:21:58 1072  	       WHERE
11:21:58 1073  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
11:21:58 1074  		 -- If subscription_id is set then return nothing
11:21:58 1075  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
11:21:58 1076  	     )
11:21:58 1077  	     OR
11:21:58 1078  	     INVOICE.ID IN (
11:21:58 1079  	       SELECT
11:21:58 1080  		 LICENSE.INVOICE_ID
11:21:58 1081  	       FROM
11:21:58 1082  		 LICENSE
11:21:58 1083  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 1084  	       WHERE
11:21:58 1085  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:58 1086  		 -- Filter by subscription id
11:21:58 1087  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
11:21:58 1088  	     )
11:21:58 1089  	   )
11:21:58 1090  	   -- Filter by invoice id
11:21:58 1091  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
11:21:58 1092  	   -- Filter by start date
11:21:58 1093  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
11:21:58 1094  	   -- Filter by end date
11:21:58 1095  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
11:21:58 1096  	   -- Filter by transaction status
11:21:58 1097  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
11:21:58 1098  
11:21:58 1099  /*
11:21:58 1100  
11:21:58 1101  statement :=  'select distinct '||CHR(10)
11:21:58 1102  || ' TRANSACTION.ID,'||CHR(10)
11:21:58 1103  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
11:21:58 1104  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
11:21:58 1105  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
11:21:58 1106  || ' TRANSACTION.CREATED_BY, '||CHR(10)
11:21:58 1107  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
11:21:58 1108  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
11:21:58 1109  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
11:21:58 1110  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
11:21:58 1111  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
11:21:58 1112  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
11:21:58 1113  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
11:21:58 1114  
11:21:58 1115  IF (in_transaction_status IS NOT NULL) THEN
11:21:58 1116  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
11:21:58 1117  END IF;
11:21:58 1118  
11:21:58 1119  IF (in_invoice_id IS NOT NULL) THEN
11:21:58 1120  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
11:21:58 1121  END IF;
11:21:58 1122  
11:21:58 1123  IF (in_subscription_id IS NOT NULL) THEN
11:21:58 1124  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
11:21:58 1125  END IF;
11:21:58 1126  
11:21:58 1127  IF (in_start_date IS NOT NULL) THEN
11:21:58 1128  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
11:21:58 1129  END IF;
11:21:58 1130  
11:21:58 1131  IF (in_end_date IS NOT NULL) THEN
11:21:58 1132  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
11:21:58 1133  END IF;
11:21:58 1134  dbms_output.put_line(statement);
11:21:58 1135  OPEN out_result_set FOR statement;
11:21:58 1136  
11:21:58 1137  */
11:21:58 1138  
11:21:58 1139  EXCEPTION
11:21:58 1140  WHEN BAD_GROUP_ID THEN
11:21:58 1141  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1142  	   SPROC_NAME, 'No such group');
11:21:58 1143  WHEN OTHERS THEN
11:21:58 1144  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1145  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1146  END GET_TRANSACTIONS;
11:21:58 1147  
11:21:58 1148  FUNCTION IS_TRANSACTION_COLLECTED (
11:21:58 1149  /*
11:21:58 1150  Throws:
11:21:58 1151  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1152  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1153  Returns:
11:21:58 1154  GLOBAL_CONST.TRUE if transaction collected,
11:21:58 1155  GLOBAL_CONST.FALSE else
11:21:58 1156  */
11:21:58 1157  	 in_transaction_id IN NUMBER
11:21:58 1158  ) RETURN NUMBER AS
11:21:58 1159  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
11:21:58 1160  -- VARIABLES
11:21:58 1161  temp_transaction_id     NUMBER;
11:21:58 1162  var_success_attemps_num NUMBER;
11:21:58 1163  -- EXCEPTIONS
11:21:58 1164  BAD_TRANSACTION_ID EXCEPTION;
11:21:58 1165  BEGIN
11:21:58 1166  
11:21:58 1167  	 BEGIN
11:21:58 1168  	   SELECT
11:21:58 1169  	     TRANSACTION.ID into temp_transaction_id
11:21:58 1170  	   FROM
11:21:58 1171  	     TRANSACTION
11:21:58 1172  	   WHERE
11:21:58 1173  	     TRANSACTION.ID = in_transaction_id;
11:21:58 1174  	   EXCEPTION
11:21:58 1175  	     WHEN NO_DATA_FOUND THEN
11:21:58 1176  	       RAISE BAD_TRANSACTION_ID;
11:21:58 1177  	 END;
11:21:58 1178  
11:21:58 1179  	 SELECT
11:21:58 1180  	   COUNT(*) into var_success_attemps_num
11:21:58 1181  	 FROM
11:21:58 1182  	   TRANSACTION_ATTEMPT
11:21:58 1183  	 WHERE
11:21:58 1184  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
11:21:58 1185  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS FROM DUAL );
11:21:58 1186  
11:21:58 1187  	 IF var_success_attemps_num > 0 THEN
11:21:58 1188  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 1189  	 ELSE
11:21:58 1190  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 1191  	 END IF;
11:21:58 1192  
11:21:58 1193  EXCEPTION
11:21:58 1194  WHEN BAD_TRANSACTION_ID THEN
11:21:58 1195  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1196  	   SPROC_NAME, 'No such transaction');
11:21:58 1197  WHEN OTHERS THEN
11:21:58 1198  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1199  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1200  END IS_TRANSACTION_COLLECTED;
11:21:58 1201  
11:21:58 1202  
11:21:58 1203  /******************************************************************************/
11:21:58 1204  PROCEDURE GET_ATTEMPT_NUMBER (
11:21:58 1205  /*
11:21:58 1206  Throws exceptions:
11:21:58 1207  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1208  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1209  */
11:21:58 1210  	 in_charge_id	in  number,
11:21:58 1211  	 out_attempt_count OUT NUMBER
11:21:58 1212  ) AS
11:21:58 1213  -- VARIABLES
11:21:58 1214  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ATTEMPT_NUMBER';
11:21:58 1215  temp_transaction_id NUMBER;
11:21:58 1216  -- EXCEPTIONS
11:21:58 1217  BAD_CHARGE_ID EXCEPTION;
11:21:58 1218  BEGIN
11:21:58 1219  
11:21:58 1220  	 BEGIN
11:21:58 1221  	   SELECT
11:21:58 1222  	     TRANSACTION_ID into temp_transaction_id
11:21:58 1223  	   FROM
11:21:58 1224  	     CHARGE
11:21:58 1225  	   WHERE
11:21:58 1226  	     CHARGE.ID = in_charge_id;
11:21:58 1227  	   EXCEPTION
11:21:58 1228  	     WHEN NO_DATA_FOUND THEN
11:21:58 1229  	       RAISE BAD_CHARGE_ID;
11:21:58 1230  	 END;
11:21:58 1231  
11:21:58 1232  	 select
11:21:58 1233  	   count(1)
11:21:58 1234  	 into
11:21:58 1235  	   out_attempt_count
11:21:58 1236  	 from
11:21:58 1237  	   transaction tr
11:21:58 1238  	 inner join
11:21:58 1239  	   transaction_attempt ta
11:21:58 1240  	 on (tr.id = ta.transaction_id)
11:21:58 1241  	 where
11:21:58 1242  	   tr.ID = temp_transaction_id;
11:21:58 1243  
11:21:58 1244  	 out_attempt_count := out_attempt_count + 1;
11:21:58 1245  
11:21:58 1246  EXCEPTION
11:21:58 1247  WHEN BAD_CHARGE_ID THEN
11:21:58 1248  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1249  	   SPROC_NAME, 'No such charge');
11:21:58 1250  WHEN OTHERS THEN
11:21:58 1251  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1252  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1253  end GET_ATTEMPT_NUMBER;
11:21:58 1254  /******************************************************************************/
11:21:58 1255  
11:21:58 1256  END PROCS_TRANSACTION_V15;
11:21:58 1257  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.08
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE CREATE_LICENSE(
11:21:58   4  /*
11:21:58   5  Throws exceptions:
11:21:58   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58   8  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58   9  */
11:21:58  10  	in_status_id		    IN NUMBER,
11:21:58  11  	in_needs_entitlements	    IN NUMBER,
11:21:58  12  	in_start_date		    IN DATE,
11:21:58  13  	in_end_date		    IN DATE,
11:21:58  14  	in_offer_id		    IN NUMBER,
11:21:58  15  	in_subscription_id	    IN NUMBER,
11:21:58  16  	in_invoice_id		    IN NUMBER,
11:21:58  17  	in_created_by		    IN VARCHAR2,
11:21:58  18  	in_is_extension 	    IN NUMBER,
11:21:58  19  	in_current_offer_index	    IN NUMBER,
11:21:58  20  	in_current_offer_recurr_num IN NUMBER,
11:21:58  21  	out_license_id		    OUT NUMBER
11:21:58  22  ) AS
11:21:58  23  -- VARIABLES
11:21:58  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
11:21:58  25  temp_offer_id	   NUMBER;
11:21:58  26  temp_subscription_id NUMBER;
11:21:58  27  temp_invoice_id	   NUMBER;
11:21:58  28  
11:21:58  29  var_new_license_id NUMBER;
11:21:58  30  var_offer_duration VARCHAR2(30);
11:21:58  31  
11:21:58  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
11:21:58  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
11:21:58  34  var_offer_years	    NUMBER;
11:21:58  35  var_offer_months	    NUMBER;
11:21:58  36  var_offer_days	    NUMBER;
11:21:58  37  
11:21:58  38  -- EXCEPTIONS
11:21:58  39  BAD_OFFER_ID	     EXCEPTION;
11:21:58  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
11:21:58  41  BAD_INVOICE_ID	     EXCEPTION;
11:21:58  42  BAD_OFFER_DURATION     EXCEPTION;
11:21:58  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58  44  BEGIN
11:21:58  45  
11:21:58  46  	-- TODO:
11:21:58  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
11:21:58  48  
11:21:58  49  	out_license_id := NULL;
11:21:58  50  
11:21:58  51  	-- get offer id and offer entitlement duration
11:21:58  52  	BEGIN
11:21:58  53  	  SELECT
11:21:58  54  	    OFFER.ID,
11:21:58  55  	    OFFER.ENTITLEMENT_DURATION
11:21:58  56  	    into
11:21:58  57  	    temp_offer_id,
11:21:58  58  	    var_offer_duration
11:21:58  59  	  FROM
11:21:58  60  	    OFFER
11:21:58  61  	  WHERE
11:21:58  62  	    OFFER.ID = in_offer_id;
11:21:58  63  	  EXCEPTION
11:21:58  64  	  WHEN NO_DATA_FOUND THEN
11:21:58  65  	    RAISE BAD_OFFER_ID;
11:21:58  66  	END;
11:21:58  67  
11:21:58  68  	-- Check that subscription exists
11:21:58  69  	BEGIN
11:21:58  70  	  SELECT
11:21:58  71  	    SUBSCRIPTION.ID into temp_subscription_id
11:21:58  72  	  FROM
11:21:58  73  	    SUBSCRIPTION
11:21:58  74  	  WHERE
11:21:58  75  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:58  76  	  EXCEPTION
11:21:58  77  	  WHEN NO_DATA_FOUND THEN
11:21:58  78  	    RAISE BAD_SUBSCRIPTION_ID;
11:21:58  79  	END;
11:21:58  80  
11:21:58  81  	-- Check that invoice exists
11:21:58  82  	BEGIN
11:21:58  83  	  SELECT
11:21:58  84  	    INVOICE.ID into temp_invoice_id
11:21:58  85  	  FROM
11:21:58  86  	    INVOICE
11:21:58  87  	  WHERE
11:21:58  88  	    INVOICE.ID = in_invoice_id;
11:21:58  89  	  EXCEPTION
11:21:58  90  	  WHEN NO_DATA_FOUND THEN
11:21:58  91  	    RAISE BAD_INVOICE_ID;
11:21:58  92  	END;
11:21:58  93  
11:21:58  94  	-- convert offer duration into intervals
11:21:58  95  	BEGIN
11:21:58  96  	  PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
11:21:58  97  	    var_offer_duration,
11:21:58  98  	    var_offer_years,
11:21:58  99  	    var_offer_months,
11:21:58 100  	    var_offer_days);
11:21:58 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
11:21:58 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
11:21:58 103  	  EXCEPTION
11:21:58 104  	    WHEN OTHERS THEN
11:21:58 105  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 106  	      RAISE BAD_OFFER_DURATION;
11:21:58 107  	END;
11:21:58 108  
11:21:58 109  	-- insert new row into license table
11:21:58 110  	PROCS_LICENSE_CRU_V15.CREATE_LICENSE(
11:21:58 111  	  out_license_id	      => var_new_license_id,
11:21:58 112  	  in_license_status_id	      => in_status_id,
11:21:58 113  	  in_needs_entitlements       => in_needs_entitlements,
11:21:58 114  	  in_start_date 	      => in_start_date,
11:21:58 115  	  in_offer_id		      => in_offer_id,
11:21:58 116  	  in_subscription_id	      => in_subscription_id,
11:21:58 117  	  in_invoice_id 	      => in_invoice_id,
11:21:58 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
11:21:58 119  	  in_created_by 	      => in_created_by,
11:21:58 120  	  in_is_extension	      => in_is_extension,
11:21:58 121  	  in_current_offer_index      => in_current_offer_index,
11:21:58 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
11:21:58 123  	);
11:21:58 124  
11:21:58 125  	out_license_id := var_new_license_id;
11:21:58 126  
11:21:58 127  EXCEPTION
11:21:58 128  WHEN BAD_OFFER_DURATION THEN
11:21:58 129  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
11:21:58 131  WHEN BAD_OFFER_ID THEN
11:21:58 132  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 133  	  SPROC_NAME, 'No such offer');
11:21:58 134  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 135  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 136  	  SPROC_NAME, 'No such subscription');
11:21:58 137  WHEN BAD_INVOICE_ID THEN
11:21:58 138  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 139  	  SPROC_NAME, 'No such invoice');
11:21:58 140  WHEN OTHERS THEN
11:21:58 141  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 143  END;
11:21:58 144  
11:21:58 145  /******************************************************************************/
11:21:58 146  
11:21:58 147  PROCEDURE UPDATE_LICENSE_STATUS(
11:21:58 148  	  in_license_id     IN NUMBER,
11:21:58 149  	  in_license_status IN NUMBER,
11:21:58 150  	  in_updated_by     IN VARCHAR2,
11:21:58 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:58 152  ) AS
11:21:58 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
11:21:58 154  -- VARIABLES
11:21:58 155  temp_license_id NUMBER;
11:21:58 156  -- EXCEPTIONS
11:21:58 157  BAD_LICENSE_ID	     EXCEPTION;
11:21:58 158  BAD_LICENSE_STATUS     EXCEPTION;
11:21:58 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 160  BEGIN
11:21:58 161  
11:21:58 162  	BEGIN
11:21:58 163  	  SELECT
11:21:58 164  	    ID into temp_license_id
11:21:58 165  	  FROM
11:21:58 166  	    LICENSE
11:21:58 167  	  WHERE
11:21:58 168  	    LICENSE.ID = in_license_id;
11:21:58 169  	  EXCEPTION
11:21:58 170  	    WHEN NO_DATA_FOUND THEN
11:21:58 171  	      RAISE BAD_LICENSE_ID;
11:21:58 172  	END;
11:21:58 173  
11:21:58 174  	IF in_license_status != GLOBAL_STATUSES_V15.LICENSE_CLOSED
11:21:58 175  	   AND in_license_status != GLOBAL_STATUSES_V15.LICENSE_ACTIVE THEN
11:21:58 176  	  RAISE BAD_LICENSE_STATUS;
11:21:58 177  	END IF;
11:21:58 178  
11:21:58 179  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V15.TRUE) then
11:21:58 180  	  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 181  	    in_license_id	 => in_license_id,
11:21:58 182  	    in_updated_by	 => in_updated_by,
11:21:58 183  	    in_license_status_id => in_license_status,
11:21:58 184  	    in_entitlement_end_date	 => sysdate
11:21:58 185  	  );
11:21:58 186  	ELSE
11:21:58 187  	  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 188  	    in_license_id	 => in_license_id,
11:21:58 189  	    in_updated_by	 => in_updated_by,
11:21:58 190  	    in_license_status_id => in_license_status
11:21:58 191  	  );
11:21:58 192  	END IF;
11:21:58 193  
11:21:58 194  EXCEPTION
11:21:58 195  WHEN BAD_LICENSE_STATUS THEN
11:21:58 196  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 197  	  SPROC_NAME, 'Bad status id');
11:21:58 198  WHEN BAD_LICENSE_ID THEN
11:21:58 199  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 200  	  SPROC_NAME, 'No such license');
11:21:58 201  WHEN OTHERS THEN
11:21:58 202  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 204  END UPDATE_LICENSE_STATUS;
11:21:58 205  
11:21:58 206  /******************************************************************************/
11:21:58 207  
11:21:58 208  PROCEDURE GET_ENDING_LICENSES (
11:21:58 209  	in_hours_number IN NUMBER,
11:21:58 210  	out_result_set	OUT SYS_REFCURSOR
11:21:58 211  ) AS
11:21:58 212  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
11:21:58 213  -- VARIABLES
11:21:58 214  var_days		NUMBER;
11:21:58 215  var_hours 	NUMBER;
11:21:58 216  var_time_interval INTERVAL DAY (3) TO SECOND;
11:21:58 217  BEGIN
11:21:58 218  
11:21:58 219  	var_hours := mod(in_hours_number,24);
11:21:58 220  	var_days := (in_hours_number - var_hours) / 24;
11:21:58 221  	var_time_interval := var_days||' '||var_hours||':0:0';
11:21:58 222  
11:21:58 223  	OPEN out_result_set FOR
11:21:58 224  SELECT * FROM
11:21:58 225  (
11:21:58 226  	SELECT
11:21:58 227  	  LICENSE.ID,
11:21:58 228  	  LICENSE.CREATE_DATE,
11:21:58 229  	  LICENSE.CREATED_BY,
11:21:58 230  	  LICENSE.CURRENT_OFFER_INDEX,
11:21:58 231  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 232  	  LICENSE.END_DATE,
11:21:58 233  	  LICENSE.ENTITLEMENT_END_DATE,
11:21:58 234  	  LICENSE.INVOICE_ID,
11:21:58 235  	  LICENSE.IS_EXTENSION,
11:21:58 236  	  LICENSE.LICENSE_STATUS_ID,
11:21:58 237  	  LICENSE.OFFER_ID,
11:21:58 238  	  LICENSE.START_DATE,
11:21:58 239  	  LICENSE.SUBSCRIPTION_ID,
11:21:58 240  	  LICENSE.UPDATE_DATE,
11:21:58 241  	  LICENSE.UPDATED_BY
11:21:58 242  	FROM
11:21:58 243  	  LICENSE
11:21:58 244  	WHERE
11:21:58 245  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
11:21:58 246  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 247  	  AND NOT EXISTS
11:21:58 248  	  (
11:21:58 249  	    SELECT NULL
11:21:58 250  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 251  	    WHERE PROCESS_NAME = SPROC_NAME
11:21:58 252  	      AND GENERIC_ID = LICENSE.ID
11:21:58 253  	  )
11:21:58 254  	  AND ROWNUM <= 10000
11:21:58 255  	  ORDER BY dbms_random.value
11:21:58 256  ) WHERE
11:21:58 257  	  ROWNUM <= 1000
11:21:58 258  	  ;
11:21:58 259  EXCEPTION
11:21:58 260  WHEN OTHERS THEN
11:21:58 261  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 262  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 263  END GET_ENDING_LICENSES;
11:21:58 264  
11:21:58 265  
11:21:58 266  /******************************************************************************/
11:21:58 267  
11:21:58 268  PROCEDURE GET_ENDING_LICENSES_CC (
11:21:58 269  	in_hours_number IN NUMBER,
11:21:58 270  	out_result_set	OUT SYS_REFCURSOR,
11:21:58 271  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:58 272  ) AS
11:21:58 273  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
11:21:58 274  -- VARIABLES
11:21:58 275  var_days		NUMBER;
11:21:58 276  var_hours 	NUMBER;
11:21:58 277  var_time_interval INTERVAL DAY (3) TO SECOND;
11:21:58 278  BEGIN
11:21:58 279  
11:21:58 280  	var_hours := mod(in_hours_number,24);
11:21:58 281  	var_days := (in_hours_number - var_hours) / 24;
11:21:58 282  	var_time_interval := var_days||' '||var_hours||':0:0';
11:21:58 283  
11:21:58 284  	OPEN out_result_set FOR
11:21:58 285  SELECT * FROM
11:21:58 286  (
11:21:58 287  	SELECT
11:21:58 288  	  LICENSE.ID,
11:21:58 289  	  LICENSE.CREATE_DATE,
11:21:58 290  	  LICENSE.CREATED_BY,
11:21:58 291  	  LICENSE.CURRENT_OFFER_INDEX,
11:21:58 292  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 293  	  LICENSE.END_DATE,
11:21:58 294  	  LICENSE.ENTITLEMENT_END_DATE,
11:21:58 295  	  LICENSE.INVOICE_ID,
11:21:58 296  	  LICENSE.IS_EXTENSION,
11:21:58 297  	  LICENSE.LICENSE_STATUS_ID,
11:21:58 298  	  LICENSE.OFFER_ID,
11:21:58 299  	  LICENSE.START_DATE,
11:21:58 300  	  LICENSE.SUBSCRIPTION_ID,
11:21:58 301  	  LICENSE.UPDATE_DATE,
11:21:58 302  	  LICENSE.UPDATED_BY
11:21:58 303  	FROM
11:21:58 304  	  LICENSE
11:21:58 305  	WHERE
11:21:58 306  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
11:21:58 307  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 308  	  AND NOT EXISTS
11:21:58 309  	  (
11:21:58 310  	    SELECT NULL
11:21:58 311  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 312  	    WHERE PROCESS_NAME = in_process_name
11:21:58 313  	      AND GENERIC_ID = LICENSE.INVOICE_ID
11:21:58 314  	  )
11:21:58 315  	  AND ROWNUM <= 10000
11:21:58 316  	  ORDER BY dbms_random.value
11:21:58 317  ) WHERE
11:21:58 318  	  ROWNUM <= 1000
11:21:58 319  	  ;
11:21:58 320  EXCEPTION
11:21:58 321  WHEN OTHERS THEN
11:21:58 322  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 323  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 324  END GET_ENDING_LICENSES_CC;
11:21:58 325  
11:21:58 326  /******************************************************************************/
11:21:58 327  
11:21:58 328  PROCEDURE GET_RECURRING_OFFER (
11:21:58 329  	in_license_id  IN NUMBER,
11:21:58 330  	out_result_set OUT SYS_REFCURSOR
11:21:58 331  ) AS
11:21:58 332  -- VARIABLES
11:21:58 333  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
11:21:58 334  var_offer_chain_id	    NUMBER;
11:21:58 335  var_offer_id		    NUMBER;
11:21:58 336  var_offer_num_recurrences     NUMBER;
11:21:58 337  var_license_cur_offer_rec_num NUMBER;
11:21:58 338  var_offer_index		    NUMBER;
11:21:58 339  -- EXCEPTIONS
11:21:58 340  BAD_LICENSE_ID	     EXCEPTION;
11:21:58 341  CAN_NOT_GET_OFFER_INFO EXCEPTION;
11:21:58 342  BEGIN
11:21:58 343  
11:21:58 344  	BEGIN
11:21:58 345  	  SELECT
11:21:58 346  	    SUBSCRIPTION.OFFER_CHAIN_ID,
11:21:58 347  	    LICENSE.OFFER_ID,
11:21:58 348  	    LICENSE.CURRENT_OFFER_RECURR_NUM
11:21:58 349  	    into
11:21:58 350  	    var_offer_chain_id,
11:21:58 351  	    var_offer_id,
11:21:58 352  	    var_license_cur_offer_rec_num
11:21:58 353  	  FROM
11:21:58 354  	    LICENSE
11:21:58 355  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 356  	  WHERE
11:21:58 357  	    LICENSE.ID = in_license_id;
11:21:58 358  	  EXCEPTION
11:21:58 359  	    WHEN NO_DATA_FOUND THEN
11:21:58 360  	      RAISE BAD_LICENSE_ID;
11:21:58 361  	END;
11:21:58 362  
11:21:58 363  	BEGIN
11:21:58 364  	  SELECT
11:21:58 365  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
11:21:58 366  	    OFFER_OFFER_CHAIN.INDEX_VALUE
11:21:58 367  	    into
11:21:58 368  	    var_offer_num_recurrences,
11:21:58 369  	    var_offer_index
11:21:58 370  	  FROM
11:21:58 371  	    OFFER_OFFER_CHAIN
11:21:58 372  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 373  	  WHERE
11:21:58 374  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
11:21:58 375  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
11:21:58 376  	  EXCEPTION
11:21:58 377  	    WHEN NO_DATA_FOUND THEN
11:21:58 378  	      RAISE CAN_NOT_GET_OFFER_INFO;
11:21:58 379  	END;
11:21:58 380  
11:21:58 381  	IF var_offer_num_recurrences = 0 THEN
11:21:58 382  	  --out_result_set := NULL;
11:21:58 383  	  -- TODO: Remove this hardcode
11:21:58 384  	  OPEN out_result_set FOR
11:21:58 385  	  SELECT
11:21:58 386  	    OFFER.ID,
11:21:58 387  	    OFFER.OFFER_STATUS_ID,
11:21:58 388  	    OFFER.ENTITLEMENT_DURATION,
11:21:58 389  	    OFFER.CREATED_BY,
11:21:58 390  	    OFFER.CREATE_DATE,
11:21:58 391  	    OFFER.UPDATED_BY,
11:21:58 392  	    OFFER.UPDATE_DATE,
11:21:58 393  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
11:21:58 394  	    var_offer_index as "OFFER_INDEX"
11:21:58 395  	  FROM
11:21:58 396  	    OFFER_OFFER_CHAIN
11:21:58 397  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 398  	  WHERE ROWNUM = 0;
11:21:58 399  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
11:21:58 400  	  --out_result_set := NULL;
11:21:58 401  	  -- TODO: Remove this hardcode
11:21:58 402  	  OPEN out_result_set FOR
11:21:58 403  	  SELECT
11:21:58 404  	    OFFER.ID,
11:21:58 405  	    OFFER.OFFER_STATUS_ID,
11:21:58 406  	    OFFER.ENTITLEMENT_DURATION,
11:21:58 407  	    OFFER.CREATED_BY,
11:21:58 408  	    OFFER.CREATE_DATE,
11:21:58 409  	    OFFER.UPDATED_BY,
11:21:58 410  	    OFFER.UPDATE_DATE,
11:21:58 411  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
11:21:58 412  	    var_offer_index as "OFFER_INDEX"
11:21:58 413  	  FROM
11:21:58 414  	    OFFER_OFFER_CHAIN
11:21:58 415  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 416  	  WHERE ROWNUM = 0;
11:21:58 417  	ELSE
11:21:58 418  	  OPEN out_result_set FOR
11:21:58 419  	  SELECT
11:21:58 420  	    OFFER.ID,
11:21:58 421  	    OFFER.OFFER_STATUS_ID,
11:21:58 422  	    OFFER.ENTITLEMENT_DURATION,
11:21:58 423  	    OFFER.CREATED_BY,
11:21:58 424  	    OFFER.CREATE_DATE,
11:21:58 425  	    OFFER.UPDATED_BY,
11:21:58 426  	    OFFER.UPDATE_DATE,
11:21:58 427  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
11:21:58 428  	    var_offer_index as "OFFER_INDEX"
11:21:58 429  	  FROM
11:21:58 430  	    OFFER
11:21:58 431  	  WHERE
11:21:58 432  	    OFFER.ID = var_offer_id;
11:21:58 433  	END IF;
11:21:58 434  
11:21:58 435  EXCEPTION
11:21:58 436  WHEN BAD_LICENSE_ID THEN
11:21:58 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 438  	  SPROC_NAME, 'No such license');
11:21:58 439  WHEN CAN_NOT_GET_OFFER_INFO THEN
11:21:58 440  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 441  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
11:21:58 442  WHEN OTHERS THEN
11:21:58 443  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 444  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 445  END GET_RECURRING_OFFER;
11:21:58 446  
11:21:58 447  /******************************************************************************/
11:21:58 448  
11:21:58 449  PROCEDURE GET_NEXT_OFFER (
11:21:58 450  /*
11:21:58 451  Throws exceptions:
11:21:58 452  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 453  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 454  */
11:21:58 455  	in_license_id  IN NUMBER,
11:21:58 456  	out_result_set OUT SYS_REFCURSOR
11:21:58 457  ) AS
11:21:58 458  -- VARIABLES
11:21:58 459  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
11:21:58 460  var_offer_chain_id	NUMBER;
11:21:58 461  var_offer_id		NUMBER;
11:21:58 462  var_license_current_index NUMBER;
11:21:58 463  var_next_offer_index	NUMBER;
11:21:58 464  -- EXCEPTIONS
11:21:58 465  BAD_LICENSE_ID	      EXCEPTION;
11:21:58 466  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
11:21:58 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:58 468  BEGIN
11:21:58 469  
11:21:58 470  	BEGIN
11:21:58 471  	  SELECT
11:21:58 472  	    SUBSCRIPTION.OFFER_CHAIN_ID,
11:21:58 473  	    LICENSE.OFFER_ID,
11:21:58 474  	    LICENSE.CURRENT_OFFER_INDEX
11:21:58 475  	    into
11:21:58 476  	    var_offer_chain_id,
11:21:58 477  	    var_offer_id,
11:21:58 478  	    var_license_current_index
11:21:58 479  	  FROM
11:21:58 480  	    LICENSE
11:21:58 481  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 482  	  WHERE
11:21:58 483  	    LICENSE.ID = in_license_id;
11:21:58 484  	  EXCEPTION
11:21:58 485  	    WHEN NO_DATA_FOUND THEN
11:21:58 486  	      RAISE BAD_LICENSE_ID;
11:21:58 487  	END;
11:21:58 488  
11:21:58 489  	BEGIN
11:21:58 490  	  var_next_offer_index := PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX(
11:21:58 491  	    var_offer_chain_id,
11:21:58 492  	    var_license_current_index
11:21:58 493  	  );
11:21:58 494  	  EXCEPTION
11:21:58 495  	    WHEN OTHERS THEN
11:21:58 496  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 497  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
11:21:58 498  	END;
11:21:58 499  
11:21:58 500  	IF var_next_offer_index IS NULL THEN
11:21:58 501  	  -- RETURN NULL;
11:21:58 502  	  -- TODO: Remove this hardcode
11:21:58 503  	  OPEN out_result_set FOR
11:21:58 504  	  SELECT
11:21:58 505  	    OFFER.ID,
11:21:58 506  	    OFFER.OFFER_STATUS_ID,
11:21:58 507  	    OFFER.ENTITLEMENT_DURATION,
11:21:58 508  	    OFFER.CREATED_BY,
11:21:58 509  	    OFFER.CREATE_DATE,
11:21:58 510  	    OFFER.UPDATED_BY,
11:21:58 511  	    OFFER.UPDATE_DATE,
11:21:58 512  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
11:21:58 513  	  FROM
11:21:58 514  	    OFFER_OFFER_CHAIN
11:21:58 515  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 516  	  WHERE
11:21:58 517  	    1=2;
11:21:58 518  	ELSE
11:21:58 519  	  OPEN out_result_set FOR
11:21:58 520  	  SELECT
11:21:58 521  	    OFFER.ID,
11:21:58 522  	    OFFER.OFFER_STATUS_ID,
11:21:58 523  	    OFFER.ENTITLEMENT_DURATION,
11:21:58 524  	    OFFER.CREATED_BY,
11:21:58 525  	    OFFER.CREATE_DATE,
11:21:58 526  	    OFFER.UPDATED_BY,
11:21:58 527  	    OFFER.UPDATE_DATE,
11:21:58 528  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
11:21:58 529  	  FROM
11:21:58 530  	    OFFER_OFFER_CHAIN
11:21:58 531  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 532  	  WHERE
11:21:58 533  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
11:21:58 534  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
11:21:58 535  	END IF;
11:21:58 536  
11:21:58 537  EXCEPTION
11:21:58 538  WHEN BAD_LICENSE_ID THEN
11:21:58 539  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 540  	  SPROC_NAME, 'No such license');
11:21:58 541  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
11:21:58 542  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 543  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
11:21:58 544  WHEN OTHERS THEN
11:21:58 545  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 546  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 547  END GET_NEXT_OFFER;
11:21:58 548  
11:21:58 549  /******************************************************************************/
11:21:58 550  
11:21:58 551  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
11:21:58 552  	in_license_id IN NUMBER,
11:21:58 553  	out_group_id  OUT NUMBER
11:21:58 554  ) AS
11:21:58 555  -- VARIABLES
11:21:58 556  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
11:21:58 557  var_subscription_id NUMBER;
11:21:58 558  var_group_id	  NUMBER;
11:21:58 559  -- EXCEPTIONS
11:21:58 560  BAD_LICENSE_ID	   EXCEPTION;
11:21:58 561  CAN_NOT_GET_GROUP_ID EXCEPTION;
11:21:58 562  BEGIN
11:21:58 563  
11:21:58 564  	-- Get subscription id
11:21:58 565  	BEGIN
11:21:58 566  	  SELECT
11:21:58 567  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
11:21:58 568  	  FROM
11:21:58 569  	    LICENSE
11:21:58 570  	  WHERE
11:21:58 571  	    LICENSE.ID = in_license_id;
11:21:58 572  	  EXCEPTION
11:21:58 573  	    WHEN NO_DATA_FOUND THEN
11:21:58 574  	      RAISE BAD_LICENSE_ID;
11:21:58 575  	END;
11:21:58 576  
11:21:58 577  	-- Get group id
11:21:58 578  	BEGIN
11:21:58 579  	  SELECT
11:21:58 580  	    ACCOUNT.GROUP_ID into var_group_id
11:21:58 581  	  FROM
11:21:58 582  	    SUBSCRIPTION
11:21:58 583  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 584  	  WHERE
11:21:58 585  	    SUBSCRIPTION.ID = var_subscription_id;
11:21:58 586  	  EXCEPTION
11:21:58 587  	    WHEN NO_DATA_FOUND THEN
11:21:58 588  	      RAISE CAN_NOT_GET_GROUP_ID;
11:21:58 589  	END;
11:21:58 590  
11:21:58 591  	out_group_id := var_group_id;
11:21:58 592  
11:21:58 593  EXCEPTION
11:21:58 594  WHEN BAD_LICENSE_ID THEN
11:21:58 595  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 596  	  SPROC_NAME, 'No such license');
11:21:58 597  WHEN CAN_NOT_GET_GROUP_ID THEN
11:21:58 598  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 599  	  SPROC_NAME, 'Could not get group id');
11:21:58 600  WHEN OTHERS THEN
11:21:58 601  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 602  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 603  END GET_GROUP_ID_BY_LICENSE_ID;
11:21:58 604  
11:21:58 605  /******************************************************************************/
11:21:58 606  
11:21:58 607  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
11:21:58 608  	out_result_set OUT SYS_REFCURSOR
11:21:58 609  ) AS
11:21:58 610  BEGIN
11:21:58 611  	OPEN out_result_set FOR
11:21:58 612  SELECT * FROM
11:21:58 613  (
11:21:58 614  	SELECT
11:21:58 615  	  LICENSE.ID,
11:21:58 616  	  LICENSE.INVOICE_ID,
11:21:58 617  	  LICENSE.IS_EXTENSION,
11:21:58 618  	  LICENSE.START_DATE,
11:21:58 619  	  LICENSE.END_DATE,
11:21:58 620  	  LICENSE.ENTITLEMENT_END_DATE,
11:21:58 621  	  LICENSE.CURRENT_OFFER_INDEX,
11:21:58 622  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 623  	  LICENSE.CREATE_DATE,
11:21:58 624  	  LICENSE.CREATED_BY,
11:21:58 625  	  LICENSE.LICENSE_STATUS_ID,
11:21:58 626  	  LICENSE.OFFER_ID,
11:21:58 627  	  LICENSE.SUBSCRIPTION_ID,
11:21:58 628  	  LICENSE.UPDATE_DATE,
11:21:58 629  	  LICENSE.UPDATED_BY,
11:21:58 630  	  LICENSE.NEEDS_ENTITLEMENTS
11:21:58 631  	FROM
11:21:58 632  	  LICENSE
11:21:58 633  	WHERE
11:21:58 634  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE
11:21:58 635  	AND ROWNUM <= 5000
11:21:58 636  	ORDER BY dbms_random.value
11:21:58 637  ) WHERE
11:21:58 638  	ROWNUM <= 500;
11:21:58 639  
11:21:58 640  END GET_NEED_ENTITLEMENTS_LICENSES;
11:21:58 641  
11:21:58 642  /******************************************************************************/
11:21:58 643  
11:21:58 644  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
11:21:58 645  	in_license_id	      IN NUMBER,
11:21:58 646  	in_needs_entitlements IN NUMBER,
11:21:58 647  	in_updated_by	      IN VARCHAR2
11:21:58 648  ) AS
11:21:58 649  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
11:21:58 650  -- VARIABLES
11:21:58 651  temp_license_id NUMBER;
11:21:58 652  -- EXCEPTIONS
11:21:58 653  BAD_LICENSE_ID	     EXCEPTION;
11:21:58 654  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
11:21:58 655  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 656  BEGIN
11:21:58 657  
11:21:58 658  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V15.TRUE
11:21:58 659  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58 660  	  RAISE BAD_ENTITLEMENTS_FLAG;
11:21:58 661  	END IF;
11:21:58 662  
11:21:58 663  	BEGIN
11:21:58 664  	  SELECT
11:21:58 665  	    LICENSE.ID into temp_license_id
11:21:58 666  	  FROM
11:21:58 667  	    LICENSE
11:21:58 668  	  WHERE
11:21:58 669  	    LICENSE.ID = in_license_id;
11:21:58 670  	  EXCEPTION
11:21:58 671  	    WHEN NO_DATA_FOUND THEN
11:21:58 672  	      RAISE BAD_LICENSE_ID;
11:21:58 673  	END;
11:21:58 674  
11:21:58 675  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 676  	  in_license_id 	=> in_license_id,
11:21:58 677  	  in_needs_entitlements => in_needs_entitlements,
11:21:58 678  	  in_updated_by 	=> in_updated_by
11:21:58 679  	);
11:21:58 680  
11:21:58 681  EXCEPTION
11:21:58 682  WHEN BAD_ENTITLEMENTS_FLAG THEN
11:21:58 683  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 684  	  SPROC_NAME, 'Bad entitlements flag value');
11:21:58 685  WHEN BAD_LICENSE_ID THEN
11:21:58 686  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 687  	  SPROC_NAME, 'No such license');
11:21:58 688  WHEN OTHERS THEN
11:21:58 689  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 690  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 691  END UPDATE_NEED_ENTITLEMENTS_FLAG;
11:21:58 692  
11:21:58 693  
11:21:58 694  /******************************************************************************/
11:21:58 695  
11:21:58 696  PROCEDURE GET_ENDED_GC_LICENSES (
11:21:58 697  	out_result_set		OUT SYS_REFCURSOR,
11:21:58 698  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:58 699  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:58 700  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:58 701  ) AS
11:21:58 702  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
11:21:58 703  var_days		NUMBER;
11:21:58 704  var_hours 	NUMBER;
11:21:58 705  var_time_interval INTERVAL DAY (3) TO SECOND;
11:21:58 706  BEGIN
11:21:58 707  	var_hours := mod(in_hours_number,24);
11:21:58 708  	var_days := (in_hours_number - var_hours) / 24;
11:21:58 709  	var_time_interval := var_days||' '||var_hours||':0:0';
11:21:58 710  	OPEN out_result_set FOR
11:21:58 711  SELECT * FROM
11:21:58 712  (
11:21:58 713  	SELECT
11:21:58 714  	  l.ID,
11:21:58 715  	  l.CREATE_DATE,
11:21:58 716  	  l.CREATED_BY,
11:21:58 717  	  l.CURRENT_OFFER_INDEX,
11:21:58 718  	  l.CURRENT_OFFER_RECURR_NUM,
11:21:58 719  	  l.END_DATE,
11:21:58 720  	  l.ENTITLEMENT_END_DATE,
11:21:58 721  	  l.INVOICE_ID,
11:21:58 722  	  l.IS_EXTENSION,
11:21:58 723  	  l.LICENSE_STATUS_ID,
11:21:58 724  	  l.OFFER_ID,
11:21:58 725  	  l.START_DATE,
11:21:58 726  	  l.SUBSCRIPTION_ID,
11:21:58 727  	  l.UPDATE_DATE,
11:21:58 728  	  l.UPDATED_BY
11:21:58 729  	FROM
11:21:58 730  	  GIFT_CERTIFICATE gc
11:21:58 731  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
11:21:58 732  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
11:21:58 733  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
11:21:58 734  	WHERE
11:21:58 735  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 736  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
11:21:58 737  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
11:21:58 738  	  AND s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
11:21:58 739  	  AND NOT EXISTS (
11:21:58 740  	    SELECT NULL
11:21:58 741  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 742  	    WHERE PROCESS_NAME = in_process_name
11:21:58 743  	      AND GENERIC_ID = l.ID
11:21:58 744  	  )
11:21:58 745  	  AND ROWNUM <= in_num_rows*10
11:21:58 746  	  ORDER BY dbms_random.value
11:21:58 747  ) WHERE
11:21:58 748  	  ROWNUM <= in_num_rows
11:21:58 749  	  GROUP BY SUBSCRIPTION_ID;
11:21:58 750  EXCEPTION
11:21:58 751  WHEN OTHERS THEN
11:21:58 752  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 753  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 754  END GET_ENDED_GC_LICENSES;
11:21:58 755  
11:21:58 756  PROCEDURE GET_LICENSE_BY_ID (
11:21:58 757  	in_license_id  IN NUMBER,
11:21:58 758  	out_result_set OUT SYS_REFCURSOR
11:21:58 759  ) AS
11:21:58 760  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
11:21:58 761  -- VARIABLES
11:21:58 762  temp_license_id NUMBER;
11:21:58 763  -- EXCEPTIONS
11:21:58 764  BAD_LICENSE_ID EXCEPTION;
11:21:58 765  BEGIN
11:21:58 766  
11:21:58 767  	BEGIN
11:21:58 768  	  SELECT
11:21:58 769  	    l.id into temp_license_id
11:21:58 770  	  FROM
11:21:58 771  	    license l
11:21:58 772  	  WHERE
11:21:58 773  	    l.id = in_license_id;
11:21:58 774  	  EXCEPTION
11:21:58 775  	    WHEN NO_DATA_FOUND THEN
11:21:58 776  	      RAISE BAD_LICENSE_ID;
11:21:58 777  	END;
11:21:58 778  
11:21:58 779  	OPEN out_result_set FOR
11:21:58 780  	SELECT
11:21:58 781  	  l.id,
11:21:58 782  	  l.license_status_id,
11:21:58 783  	  l.subscription_id,
11:21:58 784  	  l.invoice_id,
11:21:58 785  	  l.offer_id,
11:21:58 786  	  l.start_date,
11:21:58 787  	  l.end_date,
11:21:58 788  	  l.entitlement_end_date,
11:21:58 789  	  l.is_extension,
11:21:58 790  	  l.create_date,
11:21:58 791  	  l.created_by,
11:21:58 792  	  l.update_date,
11:21:58 793  	  l.updated_by,
11:21:58 794  	  l.current_offer_index,
11:21:58 795  	  l.current_offer_recurr_num,
11:21:58 796  	  l.needs_entitlements
11:21:58 797  	FROM
11:21:58 798  	  LICENSE l
11:21:58 799  	WHERE
11:21:58 800  	  l.id = in_license_id;
11:21:58 801  
11:21:58 802  EXCEPTION
11:21:58 803  WHEN BAD_LICENSE_ID THEN
11:21:58 804  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 805  	  SPROC_NAME, 'No such license');
11:21:58 806  WHEN OTHERS THEN
11:21:58 807  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 808  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 809  END GET_LICENSE_BY_ID;
11:21:58 810  
11:21:58 811  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
11:21:58 812  	in_subscription_id IN NUMBER,
11:21:58 813  	in_end_date IN DATE,
11:21:58 814  	in_updated_by IN VARCHAR2
11:21:58 815  ) AS
11:21:58 816  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
11:21:58 817  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 818  var_latest_lice NUMBER;
11:21:58 819  BEGIN
11:21:58 820  	SELECT max(id)
11:21:58 821  	INTO  var_latest_lice
11:21:58 822  	FROM LICENSE
11:21:58 823  	WHERE
11:21:58 824  	  subscription_id = in_subscription_id
11:21:58 825  	;
11:21:58 826  
11:21:58 827  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 828  	  in_license_id        => var_latest_lice,
11:21:58 829  	  in_updated_by        => in_updated_by,
11:21:58 830  	  in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 831  	  in_end_date	       => in_end_date,
11:21:58 832  	  in_entitlement_end_date => in_end_date
11:21:58 833  	);
11:21:58 834  
11:21:58 835  EXCEPTION
11:21:58 836  WHEN NO_DATA_FOUND THEN
11:21:58 837  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 838  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
11:21:58 839  WHEN OTHERS THEN
11:21:58 840  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 841  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 842  END UP_LATEST_LICE_END_BY_SUBID;
11:21:58 843  
11:21:58 844  END PROCS_LICENSE_V15;
11:21:58 845  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.09
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE CREATE_CHARGE(
11:21:58   4  /*
11:21:58   5  Throws exceptions:
11:21:58   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58   8  */
11:21:58   9  	in_invoice_id	      IN NUMBER,
11:21:58  10  	in_transaction_id     IN NUMBER,
11:21:58  11  	in_instrument_type_id IN NUMBER,
11:21:58  12  	in_instrument_id      IN NUMBER,
11:21:58  13  	in_charge_amount      IN NUMBER,
11:21:58  14  	in_created_by	      IN VARCHAR2,
11:21:58  15  	in_charge_status_id   IN NUMBER,
11:21:58  16  	out_charge_id	      OUT NUMBER
11:21:58  17  ) AS
11:21:58  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
11:21:58  19  -- VARIABLES
11:21:58  20  temp_invoice_id	  NUMBER;
11:21:58  21  temp_transaction_id NUMBER;
11:21:58  22  var_new_charge_id   NUMBER;
11:21:58  23  -- EXCEPTIONS
11:21:58  24  BAD_INVOICE_ID	     EXCEPTION;
11:21:58  25  BAD_TRANSACTION_ID     EXCEPTION;
11:21:58  26  BAD_PAYPAL_ID	     EXCEPTION;
11:21:58  27  BAD_CREDIT_CARD_ID     EXCEPTION;
11:21:58  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
11:21:58  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
11:21:58  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58  31  BEGIN
11:21:58  32  	-- Check that incoming data is correct
11:21:58  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:58  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:58  35  	  RAISE BAD_INSTRUMENT_TYPE;
11:21:58  36  	END IF;
11:21:58  37  
11:21:58  38  	-- Check that status is correct
11:21:58  39  	IF in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
11:21:58  42  	  RAISE BAD_CHARGE_STATUS_ID;
11:21:58  43  	END IF;
11:21:58  44  
11:21:58  45  	-- Check that invoice exists
11:21:58  46  	BEGIN
11:21:58  47  	  SELECT
11:21:58  48  	    INVOICE.ID into temp_invoice_id
11:21:58  49  	  FROM
11:21:58  50  	    INVOICE
11:21:58  51  	  WHERE
11:21:58  52  	    INVOICE.ID = in_invoice_id;
11:21:58  53  	  EXCEPTION
11:21:58  54  	    WHEN NO_DATA_FOUND THEN
11:21:58  55  	      RAISE BAD_INVOICE_ID;
11:21:58  56  	END;
11:21:58  57  
11:21:58  58  	-- Check that transaction exists
11:21:58  59  	BEGIN
11:21:58  60  	  SELECT
11:21:58  61  	    TRANSACTION.ID into temp_transaction_id
11:21:58  62  	  FROM
11:21:58  63  	    TRANSACTION
11:21:58  64  	  WHERE
11:21:58  65  	    TRANSACTION.ID = in_transaction_id;
11:21:58  66  	  EXCEPTION
11:21:58  67  	    WHEN NO_DATA_FOUND THEN
11:21:58  68  	      RAISE BAD_TRANSACTION_ID;
11:21:58  69  	END;
11:21:58  70  
11:21:58  71  	-- Check that instrument exists
11:21:58  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:58  73  	  IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58  74  	    RAISE BAD_CREDIT_CARD_ID;
11:21:58  75  	  END IF;
11:21:58  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:58  77  	  IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58  78  	    RAISE BAD_PAYPAL_ID;
11:21:58  79  	  END IF;
11:21:58  80  	END IF;
11:21:58  81  
11:21:58  82  	-- Create new charge
11:21:58  83  	PROCS_CHARGE_CRU_V15.CREATE_CHARGE(
11:21:58  84  	  out_charge_id 	=> var_new_charge_id,
11:21:58  85  	  in_invoice_id 	=> in_invoice_id,
11:21:58  86  	  in_transaction_id	=> in_transaction_id,
11:21:58  87  	  in_instrument_type_id => in_instrument_type_id,
11:21:58  88  	  in_instrument_id	=> in_instrument_id,
11:21:58  89  	  in_charge_amount	=> in_charge_amount,
11:21:58  90  	  in_charge_status_id	=> in_charge_status_id,
11:21:58  91  	  in_created_by 	=> in_created_by
11:21:58  92  	);
11:21:58  93  
11:21:58  94  	out_charge_id := var_new_charge_id;
11:21:58  95  
11:21:58  96  EXCEPTION
11:21:58  97  WHEN BAD_CHARGE_STATUS_ID THEN
11:21:58  98  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
11:21:58 100  WHEN BAD_INSTRUMENT_TYPE THEN
11:21:58 101  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 102  	  PROCS_NAME, 'Bad instrument type id');
11:21:58 103  WHEN BAD_INVOICE_ID THEN
11:21:58 104  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 105  	  PROCS_NAME, 'No such invoice');
11:21:58 106  WHEN BAD_TRANSACTION_ID THEN
11:21:58 107  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 108  	  PROCS_NAME, 'No such transaction');
11:21:58 109  WHEN BAD_PAYPAL_ID THEN
11:21:58 110  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 111  	  PROCS_NAME, 'No such paypal');
11:21:58 112  WHEN BAD_CREDIT_CARD_ID THEN
11:21:58 113  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 114  	  PROCS_NAME, 'No such credit card');
11:21:58 115  WHEN OTHERS THEN
11:21:58 116  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
11:21:58 118  END CREATE_CHARGE;
11:21:58 119  
11:21:58 120  /********************************************************/
11:21:58 121  -- norlov #38562 :
11:21:58 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
11:21:58 123  /*
11:21:58 124  Throws exceptions:
11:21:58 125  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 126  */
11:21:58 127  	out_result_set	    OUT SYS_REFCURSOR,
11:21:58 128  	in_row_number	    IN NUMBER DEFAULT NULL
11:21:58 129  ) AS
11:21:58 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
11:21:58 131  -- COMSTANTS
11:21:58 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
11:21:58 133  -- VARIABLES
11:21:58 134  var_row_number NUMBER;
11:21:58 135  BEGIN
11:21:58 136  	IF in_row_number IS NULL THEN
11:21:58 137  	  var_row_number := DEFAULT_ROW_NUMBER;
11:21:58 138  	ELSE
11:21:58 139  	  var_row_number := in_row_number;
11:21:58 140  	END IF;
11:21:58 141  
11:21:58 142  	-- Select charges
11:21:58 143  	OPEN out_result_set FOR
11:21:58 144  SELECT * FROM
11:21:58 145  (
11:21:58 146  	SELECT
11:21:58 147  	  CHARGE.ID,
11:21:58 148  	  CHARGE.TRANSACTION_ID,
11:21:58 149  	  CHARGE.INSTRUMENT_ID,
11:21:58 150  	  CHARGE.INSTRUMENT_TYPE_ID,
11:21:58 151  	  CHARGE.CHARGE_AMOUNT,
11:21:58 152  	  CHARGE.CREATE_DATE,
11:21:58 153  	  CHARGE.CREATED_BY,
11:21:58 154  	  CHARGE.INVOICE_ID
11:21:58 155  	FROM
11:21:58 156  	  CHARGE
11:21:58 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:58 158  	WHERE
11:21:58 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
11:21:58 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V15.TRUE
11:21:58 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
11:21:58 162  	  AND NOT EXISTS
11:21:58 163  	  (
11:21:58 164  	    SELECT NULL
11:21:58 165  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 166  	    WHERE PROCESS_NAME = SPROC_NAME
11:21:58 167  	      AND GENERIC_ID = CHARGE.ID
11:21:58 168  	  )
11:21:58 169  	  AND ROWNUM <= var_row_number*10
11:21:58 170  	  ORDER BY dbms_random.value
11:21:58 171  ) WHERE
11:21:58 172  	  ROWNUM <= var_row_number;
11:21:58 173  
11:21:58 174  END GET_PENDING_REFUND_CHARGES;
11:21:58 175  /******************************************************************************/
11:21:58 176  
11:21:58 177  PROCEDURE GET_UNPROCESSED_CHARGES (
11:21:58 178  /*
11:21:58 179  Throws exceptions:
11:21:58 180  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 181  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 182  */
11:21:58 183  	in_invoice_id  IN NUMBER,
11:21:58 184  	out_result_set OUT SYS_REFCURSOR
11:21:58 185  ) AS
11:21:58 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
11:21:58 187  -- VARIABLES
11:21:58 188  temp_invoice_id NUMBER;
11:21:58 189  -- EXCEPTIONS
11:21:58 190  BAD_INVOICE_ID EXCEPTION;
11:21:58 191  BEGIN
11:21:58 192  
11:21:58 193  	-- Check that invoice exists
11:21:58 194  	BEGIN
11:21:58 195  	  SELECT
11:21:58 196  	    INVOICE.ID into temp_invoice_id
11:21:58 197  	  FROM
11:21:58 198  	    INVOICE
11:21:58 199  	  WHERE
11:21:58 200  	    INVOICE.ID = in_invoice_id;
11:21:58 201  	  EXCEPTION
11:21:58 202  	    WHEN NO_DATA_FOUND THEN
11:21:58 203  	      RAISE BAD_INVOICE_ID;
11:21:58 204  	END;
11:21:58 205  
11:21:58 206  	-- Select charges
11:21:58 207  	OPEN out_result_set FOR
11:21:58 208  	SELECT
11:21:58 209  	  CHARGE.ID,
11:21:58 210  	  CHARGE.TRANSACTION_ID,
11:21:58 211  	  CHARGE.INSTRUMENT_ID,
11:21:58 212  	  CHARGE.INSTRUMENT_TYPE_ID,
11:21:58 213  	  CHARGE.CHARGE_AMOUNT,
11:21:58 214  	  CHARGE.CREATE_DATE,
11:21:58 215  	  CHARGE.CREATED_BY,
11:21:58 216  	  CHARGE.INVOICE_ID
11:21:58 217  	FROM
11:21:58 218  	  CHARGE
11:21:58 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:58 220  	WHERE
11:21:58 221  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 223  	  AND
11:21:58 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
11:21:58 225  
11:21:58 226  EXCEPTION
11:21:58 227  WHEN BAD_INVOICE_ID THEN
11:21:58 228  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 229  	  SPROC_NAME, 'No such invoice');
11:21:58 230  WHEN OTHERS THEN
11:21:58 231  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 233  END GET_UNPROCESSED_CHARGES;
11:21:58 234  
11:21:58 235  /******************************************************************************/
11:21:58 236  
11:21:58 237  PROCEDURE GET_PROCESSED_CHARGES (
11:21:58 238  /*
11:21:58 239  Throws exceptions:
11:21:58 240  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 241  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 242  */
11:21:58 243  	in_invoice_id  IN NUMBER,
11:21:58 244  	out_result_set OUT SYS_REFCURSOR
11:21:58 245  ) AS
11:21:58 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
11:21:58 247  -- VARIABLES
11:21:58 248  temp_invoice_id NUMBER;
11:21:58 249  -- EXCEPTIONS
11:21:58 250  BAD_INVOICE_ID  EXCEPTION;
11:21:58 251  BEGIN
11:21:58 252  
11:21:58 253  	-- Check that invoice exists
11:21:58 254  	BEGIN
11:21:58 255  	  SELECT
11:21:58 256  	    INVOICE.ID into temp_invoice_id
11:21:58 257  	  FROM
11:21:58 258  	    INVOICE
11:21:58 259  	  WHERE
11:21:58 260  	    INVOICE.ID = in_invoice_id;
11:21:58 261  	  EXCEPTION
11:21:58 262  	    WHEN NO_DATA_FOUND THEN
11:21:58 263  	      RAISE BAD_INVOICE_ID;
11:21:58 264  	END;
11:21:58 265  
11:21:58 266  	-- Select charges
11:21:58 267  	OPEN out_result_set FOR
11:21:58 268  	SELECT /*+ STAR_TRANSFORMATION */
11:21:58 269  	  CHARGE.ID,
11:21:58 270  	  CHARGE.TRANSACTION_ID,
11:21:58 271  	  CHARGE.INSTRUMENT_ID,
11:21:58 272  	  CHARGE.INSTRUMENT_TYPE_ID,
11:21:58 273  	  CHARGE.CHARGE_AMOUNT,
11:21:58 274  	  CHARGE.CREATE_DATE,
11:21:58 275  	  CHARGE.CREATED_BY,
11:21:58 276  	  CHARGE.INVOICE_ID
11:21:58 277  	FROM
11:21:58 278  	  CHARGE
11:21:58 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:58 280  	WHERE
11:21:58 281  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_CLOSED;
11:21:58 284  
11:21:58 285  EXCEPTION
11:21:58 286  WHEN BAD_INVOICE_ID THEN
11:21:58 287  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 288  	  SPROC_NAME, 'No such invoice');
11:21:58 289  WHEN OTHERS THEN
11:21:58 290  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 292  END GET_PROCESSED_CHARGES;
11:21:58 293  
11:21:58 294  /******************************************************************************/
11:21:58 295  
11:21:58 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
11:21:58 297  /*
11:21:58 298  Throws exceptions:
11:21:58 299  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 300  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 301  */
11:21:58 302  	in_charge_id	    IN NUMBER,
11:21:58 303  	out_subscription_id OUT NUMBER
11:21:58 304  ) AS
11:21:58 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
11:21:58 306  -- VARIABLES
11:21:58 307  var_invoice_id	  NUMBER;
11:21:58 308  var_subscription_id NUMBER;
11:21:58 309  -- EXCEPTIONS
11:21:58 310  BAD_CHARGE_ID		EXCEPTION;
11:21:58 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
11:21:58 312  BEGIN
11:21:58 313  
11:21:58 314  	BEGIN
11:21:58 315  	  SELECT
11:21:58 316  	    CHARGE.INVOICE_ID into var_invoice_id
11:21:58 317  	  FROM
11:21:58 318  	    CHARGE
11:21:58 319  	  WHERE
11:21:58 320  	    CHARGE.ID = in_charge_id;
11:21:58 321  	  EXCEPTION
11:21:58 322  	    WHEN NO_DATA_FOUND THEN
11:21:58 323  	      RAISE BAD_CHARGE_ID;
11:21:58 324  	END;
11:21:58 325  
11:21:58 326  	BEGIN
11:21:58 327  	  SELECT
11:21:58 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
11:21:58 329  	  FROM
11:21:58 330  	    LICENSE
11:21:58 331  	  WHERE
11:21:58 332  	    LICENSE.INVOICE_ID = var_invoice_id
11:21:58 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
11:21:58 334  	  EXCEPTION
11:21:58 335  	    WHEN NO_DATA_FOUND THEN
11:21:58 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
11:21:58 337  	END;
11:21:58 338  
11:21:58 339  	out_subscription_id := var_subscription_id;
11:21:58 340  
11:21:58 341  EXCEPTION
11:21:58 342  WHEN BAD_CHARGE_ID THEN
11:21:58 343  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 344  	  SPROC_NAME, 'No such charge');
11:21:58 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
11:21:58 346  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 347  	  SPROC_NAME, 'Could not find subscription for given charge');
11:21:58 348  WHEN OTHERS THEN
11:21:58 349  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
11:21:58 352  
11:21:58 353  /******************************************************************************/
11:21:58 354  
11:21:58 355  PROCEDURE UPDATE_CHARGE_STATUS (
11:21:58 356  /*
11:21:58 357  Throws exceptions:
11:21:58 358  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 359  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 360  */
11:21:58 361  	in_charge_id	    IN CHARGE.ID%TYPE,
11:21:58 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:58 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
11:21:58 364  ) AS
11:21:58 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
11:21:58 366  -- EXCEPTIONS
11:21:58 367  BAD_CHARGE_ID	     EXCEPTION;
11:21:58 368  BAD_STATUS_ID	     EXCEPTION;
11:21:58 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 370  BEGIN
11:21:58 371  
11:21:58 372  	IF in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
11:21:58 375  	  RAISE BAD_STATUS_ID;
11:21:58 376  	END IF;
11:21:58 377  
11:21:58 378  	PROCS_CHARGE_CRU_V15.UPDATE_CHARGE(
11:21:58 379  	  in_charge_id	      => in_charge_id,
11:21:58 380  	  in_charge_status_id => in_charge_status_id,
11:21:58 381  	  in_updated_by       => in_updated_by
11:21:58 382  	);
11:21:58 383  
11:21:58 384  	IF SQL%ROWCOUNT = 0 THEN
11:21:58 385  	  RAISE BAD_CHARGE_ID;
11:21:58 386  	END IF;
11:21:58 387  
11:21:58 388  EXCEPTION
11:21:58 389  WHEN BAD_CHARGE_ID THEN
11:21:58 390  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 391  	  SPROC_NAME, 'No such charge');
11:21:58 392  WHEN BAD_STATUS_ID THEN
11:21:58 393  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 394  	  SPROC_NAME, 'Bad status id');
11:21:58 395  WHEN OTHERS THEN
11:21:58 396  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 398  END UPDATE_CHARGE_STATUS;
11:21:58 399  
11:21:58 400  FUNCTION IS_CHARGE_COLLECTED (
11:21:58 401  /*
11:21:58 402  Throws:
11:21:58 403  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 404  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 405  Returns:
11:21:58 406  GLOBAL_CONST.TRUE if transaction collected,
11:21:58 407  GLOBAL_CONST.FALSE else
11:21:58 408  */
11:21:58 409  	in_charge_id IN NUMBER
11:21:58 410  ) RETURN NUMBER AS
11:21:58 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
11:21:58 412  -- VARIABLES
11:21:58 413  var_transaction_id NUMBER;
11:21:58 414  is_transaction_collected NUMBER;
11:21:58 415  -- EXCEPTIONS
11:21:58 416  BAD_CHARGE_ID	       EXCEPTION;
11:21:58 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
11:21:58 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
11:21:58 419  BEGIN
11:21:58 420  
11:21:58 421  	BEGIN
11:21:58 422  	  SELECT
11:21:58 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
11:21:58 424  	  FROM
11:21:58 425  	    CHARGE
11:21:58 426  	  WHERE
11:21:58 427  	    CHARGE.ID = in_charge_id;
11:21:58 428  	  EXCEPTION
11:21:58 429  	    WHEN NO_DATA_FOUND THEN
11:21:58 430  	      RAISE BAD_CHARGE_ID;
11:21:58 431  	END;
11:21:58 432  
11:21:58 433  	BEGIN
11:21:58 434  	  is_transaction_collected := PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(var_transaction_id);
11:21:58 435  	  EXCEPTION
11:21:58 436  	    WHEN OTHERS THEN
11:21:58 437  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
11:21:58 439  	END;
11:21:58 440  
11:21:58 441  	RETURN is_transaction_collected;
11:21:58 442  
11:21:58 443  EXCEPTION
11:21:58 444  WHEN BAD_CHARGE_ID THEN
11:21:58 445  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 446  	  SPROC_NAME, 'No such charge');
11:21:58 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
11:21:58 448  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
11:21:58 450  WHEN OTHERS THEN
11:21:58 451  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 453  END;
11:21:58 454  
11:21:58 455  PROCEDURE GET_COLLECTED_CHARGES (
11:21:58 456  /*
11:21:58 457  Throws exceptions:
11:21:58 458  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 459  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 460  */
11:21:58 461  	in_invoice_id  IN NUMBER,
11:21:58 462  	out_result_set OUT SYS_REFCURSOR
11:21:58 463  ) AS
11:21:58 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
11:21:58 465  -- VARIABLES
11:21:58 466  temp_invoice_id NUMBER;
11:21:58 467  -- EXCEPTIONS
11:21:58 468  BAD_INVOICE_ID  EXCEPTION;
11:21:58 469  BEGIN
11:21:58 470  
11:21:58 471  	-- Check that invoice exists
11:21:58 472  	BEGIN
11:21:58 473  	  SELECT
11:21:58 474  	    INVOICE.ID into temp_invoice_id
11:21:58 475  	  FROM
11:21:58 476  	    INVOICE
11:21:58 477  	  WHERE
11:21:58 478  	    INVOICE.ID = in_invoice_id;
11:21:58 479  	  EXCEPTION
11:21:58 480  	    WHEN NO_DATA_FOUND THEN
11:21:58 481  	      RAISE BAD_INVOICE_ID;
11:21:58 482  	END;
11:21:58 483  
11:21:58 484  	-- Select charges
11:21:58 485  	OPEN out_result_set FOR
11:21:58 486  	SELECT
11:21:58 487  	  CHARGE.ID,
11:21:58 488  	  CHARGE.TRANSACTION_ID,
11:21:58 489  	  CHARGE.INSTRUMENT_ID,
11:21:58 490  	  CHARGE.INSTRUMENT_TYPE_ID,
11:21:58 491  	  CHARGE.CHARGE_AMOUNT,
11:21:58 492  	  CHARGE.CREATE_DATE,
11:21:58 493  	  CHARGE.CREATED_BY,
11:21:58 494  	  CHARGE.INVOICE_ID
11:21:58 495  	FROM
11:21:58 496  	  CHARGE
11:21:58 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:58 498  	WHERE
11:21:58 499  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
11:21:58 501  	  AND PROCS_CHARGE_V15.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 502  
11:21:58 503  EXCEPTION
11:21:58 504  WHEN BAD_INVOICE_ID THEN
11:21:58 505  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 506  	  SPROC_NAME, 'No such invoice');
11:21:58 507  WHEN OTHERS THEN
11:21:58 508  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 510  END GET_COLLECTED_CHARGES;
11:21:58 511  
11:21:58 512  END PROCS_CHARGE_V15;
11:21:58 513  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.06
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE START_SUBSCRIPTION_CREATION (
11:21:58   4  	in_group_id	      IN NUMBER,
11:21:58   5  	in_created_by	      IN VARCHAR2,
11:21:58   6  	in_offer_chain_id     IN NUMBER,
11:21:58   7  	in_instrument_type_id IN NUMBER,
11:21:58   8  	in_instrument_id      IN NUMBER,
11:21:58   9  	in_agent_id	      IN NUMBER,
11:21:58  10  	in_note 	      IN VARCHAR2,
11:21:58  11  	out_subscription_id   OUT NUMBER,
11:21:58  12  	out_invoice_id	      OUT NUMBER,
11:21:58  13  	out_new_license_id    OUT NUMBER,
11:21:58  14  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
11:21:58  15  ) AS
11:21:58  16  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
11:21:58  17  -- VARIABLES
11:21:58  18  var_account_id		 NUMBER;
11:21:58  19  var_account_status	 NUMBER;
11:21:58  20  var_offer_chain_status_id  NUMBER;
11:21:58  21  var_is_gift_certificate	 NUMBER;
11:21:58  22  var_is_for_redemption	 NUMBER;
11:21:58  23  var_same_offer_chains_num  NUMBER;
11:21:58  24  var_max_concurrent_subscrs NUMBER;
11:21:58  25  var_first_offer_id	 NUMBER;
11:21:58  26  var_new_invoice_id	 NUMBER;
11:21:58  27  var_new_subscription_id	 NUMBER;
11:21:58  28  var_date			 DATE := SYSDATE;
11:21:58  29  var_account_tax_exempt_id  VARCHAR2(255);
11:21:58  30  var_concur_subscription_id NUMBER;
11:21:58  31  -- EXCEPTIONS
11:21:58  32  BAD_GROUP_ID		    EXCEPTION;
11:21:58  33  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
11:21:58  34  BAD_OFFER_CHAIN		    EXCEPTION;
11:21:58  35  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
11:21:58  36  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
11:21:58  37  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
11:21:58  38  LIMIT_REACHED		    EXCEPTION;
11:21:58  39  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
11:21:58  40  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
11:21:58  41  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
11:21:58  42  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
11:21:58  43  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
11:21:58  44  CAN_NOT_CREATE_NOTE	    EXCEPTION;
11:21:58  45  
11:21:58  46  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:58  47  BEGIN
11:21:58  48  
11:21:58  49  	-- Get account id and status
11:21:58  50  	BEGIN
11:21:58  51  	  SELECT
11:21:58  52  	    ACCOUNT.ID,
11:21:58  53  	    ACCOUNT.ACCOUNT_STATUS_ID,
11:21:58  54  	    ACCOUNT.TAX_EXEMPT_ID
11:21:58  55  	    into
11:21:58  56  	    var_account_id,
11:21:58  57  	    var_account_status,
11:21:58  58  	    var_account_tax_exempt_id
11:21:58  59  	  FROM
11:21:58  60  	    ACCOUNT
11:21:58  61  	  WHERE
11:21:58  62  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:58  63  	  EXCEPTION
11:21:58  64  	  WHEN NO_DATA_FOUND THEN
11:21:58  65  	    RAISE BAD_GROUP_ID;
11:21:58  66  	END;
11:21:58  67  
11:21:58  68  	-- Could not create subscription for disabled account
11:21:58  69  	IF var_account_status = GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
11:21:58  70  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
11:21:58  71  	END IF;
11:21:58  72  
11:21:58  73  	-- Get offer chain status
11:21:58  74  	BEGIN
11:21:58  75  	  SELECT
11:21:58  76  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
11:21:58  77  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
11:21:58  78  	    into
11:21:58  79  	    var_offer_chain_status_id,
11:21:58  80  	    var_is_gift_certificate
11:21:58  81  	  FROM
11:21:58  82  	    OFFER_CHAIN
11:21:58  83  	  WHERE
11:21:58  84  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:58  85  
11:21:58  86  	  EXCEPTION
11:21:58  87  	    WHEN NO_DATA_FOUND THEN
11:21:58  88  	      RAISE BAD_OFFER_CHAIN;
11:21:58  89  	END;
11:21:58  90  
11:21:58  91  	-- Could not subscribe to inactive/disabled offer chain
11:21:58  92  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
11:21:58  93  	  RAISE BAD_OFFER_CHAIN_STATUS;
11:21:58  94  	END IF;
11:21:58  95  
11:21:58  96  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
11:21:58  97  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:58  98  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
11:21:58  99  	END IF;
11:21:58 100  
11:21:58 101  	-- check if the OC is for Redemption:
11:21:58 102  	SELECT
11:21:58 103  	  COUNT(*) into var_is_for_redemption
11:21:58 104  	FROM
11:21:58 105  	  OFFER_CHAIN_ELIGIBILITY
11:21:58 106  	WHERE
11:21:58 107  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
11:21:58 108  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
11:21:58 109  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
11:21:58 110  
11:21:58 111  	IF var_is_for_redemption > 0 THEN
11:21:58 112  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
11:21:58 113  	END IF;
11:21:58 114  
11:21:58 115  	SELECT
11:21:58 116  	  COUNT(*) into var_same_offer_chains_num
11:21:58 117  	FROM
11:21:58 118  	  SUBSCRIPTION
11:21:58 119  	WHERE
11:21:58 120  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:58 121  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
11:21:58 122  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
11:21:58 123  
11:21:58 124  	-- ELIGIBILITY LOGIC CHANGED TO:
11:21:58 125  	-- FOR EACH offer chain eligibility rule in OC:
11:21:58 126  	--   IF offer chain eligibility rule fails:
11:21:58 127  	--     deny purchase;
11:21:58 128  	--   END IF
11:21:58 129  	-- END FOR
11:21:58 130  	-- FOR EACH product eligibility rule in OC:
11:21:58 131  	--   IF product eligibilty rule fails:
11:21:58 132  	--     deny purchase;
11:21:58 133  	--   END IF
11:21:58 134  	-- END FOR
11:21:58 135  	-- allow purchase;
11:21:58 136  
11:21:58 137  	-- if user have any active existing subscriptions to the offer chain
11:21:58 138  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
11:21:58 139  	-- then deny purchase
11:21:58 140  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
11:21:58 141  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V15.INFINITY
11:21:58 142  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
11:21:58 143  	  -- Find first concurrent subscription id:
11:21:58 144  	  SELECT
11:21:58 145  	    ID into var_concur_subscription_id
11:21:58 146  	  FROM (
11:21:58 147  	    SELECT
11:21:58 148  	      ID
11:21:58 149  	    FROM
11:21:58 150  	      SUBSCRIPTION
11:21:58 151  	    WHERE
11:21:58 152  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:58 153  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
11:21:58 154  	      AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 155  	    ORDER BY
11:21:58 156  	      ID
11:21:58 157  	  )
11:21:58 158  	  WHERE
11:21:58 159  	    ROWNUM <= 1;
11:21:58 160  	  RAISE LIMIT_REACHED;
11:21:58 161  	END IF;
11:21:58 162  
11:21:58 163  	-- if user does not have any active existing subscriptions to the offer chain
11:21:58 164  	-- and if product from the offer chain is already owned from another offer chain
11:21:58 165  	-- then deny purchase
11:21:58 166  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V15.FALSE) THEN
11:21:58 167  	  FOR f_account_offer_chains IN (
11:21:58 168  	    SELECT DISTINCT
11:21:58 169  	      OFFER_CHAIN_ID
11:21:58 170  	    FROM
11:21:58 171  	      SUBSCRIPTION
11:21:58 172  	    WHERE
11:21:58 173  	      ACCOUNT_ID = var_account_id
11:21:58 174  	      AND (
11:21:58 175  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 176  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED)
11:21:58 177  	  )
11:21:58 178  	  LOOP
11:21:58 179  	    IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(
11:21:58 180  	      in_offer_chain_1	       => in_offer_chain_id,
11:21:58 181  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
11:21:58 182  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V15.TRUE
11:21:58 183  	    ) = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:58 184  
11:21:58 185  	      -- Find first concurrent subscription id:
11:21:58 186  	      SELECT
11:21:58 187  		ID into var_concur_subscription_id
11:21:58 188  	      FROM (
11:21:58 189  		SELECT
11:21:58 190  		  ID
11:21:58 191  		FROM
11:21:58 192  		  SUBSCRIPTION
11:21:58 193  		WHERE
11:21:58 194  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:58 195  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
11:21:58 196  		  AND (
11:21:58 197  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 198  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:58 199  		  )
11:21:58 200  		ORDER BY
11:21:58 201  		  ID
11:21:58 202  	      )
11:21:58 203  	      WHERE
11:21:58 204  		ROWNUM <= 1;
11:21:58 205  
11:21:58 206  	      RAISE PRODUCT_ALREADY_PURCHASED;
11:21:58 207  	    END IF;
11:21:58 208  	  END LOOP;
11:21:58 209  	END IF;
11:21:58 210  
11:21:58 211  	BEGIN
11:21:58 212  	  PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
11:21:58 213  	  EXCEPTION
11:21:58 214  	    WHEN OTHERS THEN
11:21:58 215  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 216  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
11:21:58 217  	END;
11:21:58 218  
11:21:58 219  	BEGIN
11:21:58 220  	  PROCS_INVOICE_V15.CREATE_INVOICE(
11:21:58 221  	    in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
11:21:58 222  	    in_created_by     => in_created_by,
11:21:58 223  	    in_tax_exempt_id  => var_account_tax_exempt_id,
11:21:58 224  	    out_invoice_id    => var_new_invoice_id
11:21:58 225  	  );
11:21:58 226  	  EXCEPTION
11:21:58 227  	    WHEN OTHERS THEN
11:21:58 228  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 229  	      RAISE CAN_NOT_CREATE_INVOICE;
11:21:58 230  	END;
11:21:58 231  
11:21:58 232  	BEGIN
11:21:58 233  	  PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
11:21:58 234  	    in_invoice_id => var_new_invoice_id,
11:21:58 235  	    in_offer_id   => var_first_offer_id,
11:21:58 236  	    in_created_by => in_created_by
11:21:58 237  	  );
11:21:58 238  	  EXCEPTION
11:21:58 239  	    WHEN OTHERS THEN
11:21:58 240  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 241  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
11:21:58 242  	END;
11:21:58 243  
11:21:58 244  	PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION(
11:21:58 245  	  out_subscription_id	    => var_new_subscription_id,
11:21:58 246  	  in_account_id 	    => var_account_id,
11:21:58 247  	  in_purchase_date	    => var_date,
11:21:58 248  	  in_offer_chain_id	    => in_offer_chain_id,
11:21:58 249  	  in_created_by 	    => in_created_by,
11:21:58 250  	  in_instrument_type_id     => in_instrument_type_id,
11:21:58 251  	  in_instrument_id	    => in_instrument_id,
11:21:58 252  	  in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 253  	);
11:21:58 254  
11:21:58 255  	BEGIN
11:21:58 256  	  PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:58 257  	    in_subscription_id => var_new_subscription_id,
11:21:58 258  	    in_agent_id        => in_agent_id,
11:21:58 259  	    in_note	       => in_note,
11:21:58 260  	    in_created_by      => in_created_by
11:21:58 261  	  );
11:21:58 262  	  EXCEPTION
11:21:58 263  	   WHEN OTHERS THEN
11:21:58 264  	     EXCEPTION_MESSAGE := SQLERRM;
11:21:58 265  	     RAISE CAN_NOT_CREATE_NOTE;
11:21:58 266  	END;
11:21:58 267  
11:21:58 268  	BEGIN
11:21:58 269  	  PROCS_LICENSE_V15.CREATE_LICENSE(
11:21:58 270  	    in_status_id		=> GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
11:21:58 271  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 272  	    in_start_date		=> var_date,
11:21:58 273  	    in_end_date 		=> NULL, -- Will be calculated automatically
11:21:58 274  	    in_offer_id 		=> var_first_offer_id,
11:21:58 275  	    in_subscription_id		=> var_new_subscription_id,
11:21:58 276  	    in_invoice_id		=> var_new_invoice_id,
11:21:58 277  	    in_created_by		=> in_created_by,
11:21:58 278  	    in_is_extension		=> GLOBAL_CONSTANTS_V15.FALSE,
11:21:58 279  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
11:21:58 280  	    in_current_offer_recurr_num => 1,
11:21:58 281  	    out_license_id		=> out_new_license_id
11:21:58 282  	  );
11:21:58 283  	  EXCEPTION
11:21:58 284  	    WHEN OTHERS THEN
11:21:58 285  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 286  	      RAISE CAN_NOT_CREATE_LICENSE;
11:21:58 287  	END;
11:21:58 288  
11:21:58 289  	out_subscription_id := var_new_subscription_id;
11:21:58 290  	out_invoice_id := var_new_invoice_id;
11:21:58 291  
11:21:58 292  EXCEPTION
11:21:58 293  WHEN BAD_OFFER_CHAIN_STATUS THEN
11:21:58 294  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 295  	  SPROC_NAME, 'Offer chain is not active');
11:21:58 296  WHEN LIMIT_REACHED THEN
11:21:58 297  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
11:21:58 298  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
11:21:58 299  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
11:21:58 300  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 301  	  SPROC_NAME, 'Can not create subsscription for disabled account');
11:21:58 302  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
11:21:58 303  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 304  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
11:21:58 305  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
11:21:58 306  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 307  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
11:21:58 308  WHEN BAD_OFFER_CHAIN THEN
11:21:58 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 310  	  SPROC_NAME, 'No such offer chain');
11:21:58 311  WHEN PRODUCT_ALREADY_PURCHASED THEN
11:21:58 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
11:21:58 313  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
11:21:58 314  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
11:21:58 315  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 316  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
11:21:58 317  WHEN CAN_NOT_CREATE_INVOICE THEN
11:21:58 318  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 319  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
11:21:58 320  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
11:21:58 321  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 322  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
11:21:58 323  WHEN CAN_NOT_CREATE_LICENSE THEN
11:21:58 324  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 325  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
11:21:58 326  WHEN BAD_GROUP_ID THEN
11:21:58 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 328  	  SPROC_NAME, 'Bad group id');
11:21:58 329  WHEN CAN_NOT_CREATE_NOTE THEN
11:21:58 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 331  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
11:21:58 332  WHEN OTHERS THEN
11:21:58 333  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 334  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 335  END START_SUBSCRIPTION_CREATION;
11:21:58 336  
11:21:58 337  /******************************************************************************/
11:21:58 338  
11:21:58 339  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
11:21:58 340  	in_subscription_id    IN NUMBER,
11:21:58 341  	in_invoice_id	      IN NUMBER,
11:21:58 342  	in_instrument_type_id IN NUMBER,
11:21:58 343  	in_instrument_id      IN NUMBER,
11:21:58 344  	in_created_by	      IN VARCHAR2
11:21:58 345  ) AS
11:21:58 346  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
11:21:58 347  -- VARIABLES
11:21:58 348  var_invoice_amount     NUMBER(10, 2);
11:21:58 349  var_new_transaction_id NUMBER;
11:21:58 350  var_new_charge_id      NUMBER;
11:21:58 351  -- EXCEPTIONS
11:21:58 352  CAN_NOT_USE_FCINSTR	  EXCEPTION;
11:21:58 353  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
11:21:58 354  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
11:21:58 355  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
11:21:58 356  
11:21:58 357  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:58 358  BEGIN
11:21:58 359  
11:21:58 360  	-- Calculate invoice amount ( + discounts, taxes)
11:21:58 361  	BEGIN
11:21:58 362  	  PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(
11:21:58 363  	    in_invoice_id => in_invoice_id,
11:21:58 364  	    out_amount	  => var_invoice_amount
11:21:58 365  	  );
11:21:58 366  	  EXCEPTION
11:21:58 367  	   WHEN OTHERS THEN
11:21:58 368  	     EXCEPTION_MESSAGE := SQLERRM;
11:21:58 369  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
11:21:58 370  	END;
11:21:58 371  
11:21:58 372  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT
11:21:58 373  	  AND var_invoice_amount > 0 THEN
11:21:58 374  	  RAISE CAN_NOT_USE_FCINSTR;
11:21:58 375  	END IF;
11:21:58 376  
11:21:58 377  	IF var_invoice_amount = 0 THEN
11:21:58 378  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
11:21:58 379  	  PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
11:21:58 380  	    in_invoice_id		   => in_invoice_id,
11:21:58 381  	    in_updated_by		   => in_created_by,
11:21:58 382  	    in_invoice_status_id	   => GLOBAL_STATUSES_V15.INVOICE_CLOSED
11:21:58 383  	  );
11:21:58 384  	ELSE
11:21:58 385  	  -- Create transaction and charge
11:21:58 386  	  BEGIN
11:21:58 387  	    PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:58 388  	      in_transaction_id  => NULL,
11:21:58 389  	      in_status_id	 => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
11:21:58 390  	      in_amount 	 => var_invoice_amount,
11:21:58 391  	      in_created_by	 => in_created_by,
11:21:58 392  	      in_order_id	 => NULL,
11:21:58 393  	      out_transaction_id => var_new_transaction_id
11:21:58 394  	    );
11:21:58 395  	    EXCEPTION
11:21:58 396  	      WHEN OTHERS THEN
11:21:58 397  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 398  		RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:58 399  	  END;
11:21:58 400  
11:21:58 401  	  BEGIN
11:21:58 402  	    PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:58 403  	      in_invoice_id	    => in_invoice_id,
11:21:58 404  	      in_transaction_id     => var_new_transaction_id,
11:21:58 405  	      in_instrument_type_id => in_instrument_type_id,
11:21:58 406  	      in_instrument_id	    => in_instrument_id,
11:21:58 407  	      in_charge_amount	    => var_invoice_amount,
11:21:58 408  	      in_created_by	    => in_created_by,
11:21:58 409  	      in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:58 410  	      out_charge_id	    => var_new_charge_id
11:21:58 411  	    );
11:21:58 412  	    EXCEPTION
11:21:58 413  	      WHEN OTHERS THEN
11:21:58 414  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 415  		RAISE CAN_NOT_CREATE_CHARGE;
11:21:58 416  	  END;
11:21:58 417  	END IF;
11:21:58 418  
11:21:58 419  EXCEPTION
11:21:58 420  WHEN CAN_NOT_USE_FCINSTR THEN
11:21:58 421  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 422  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
11:21:58 423  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
11:21:58 424  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 425  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
11:21:58 426  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:58 427  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 428  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:58 429  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:58 430  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 431  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:58 432  WHEN OTHERS THEN
11:21:58 433  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 434  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 435  END FINALIZE_SUBSCRIPTION_CREATION;
11:21:58 436  
11:21:58 437  /******************************************************************************/
11:21:58 438  
11:21:58 439  PROCEDURE SUSPEND_SUBSCRIPTION(
11:21:58 440  /*
11:21:58 441  Throws exceptions:
11:21:58 442  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 443  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 444  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 445  */
11:21:58 446  	  in_subs_id	IN NUMBER,
11:21:58 447  	  in_updated_by IN VARCHAR2
11:21:58 448  ) AS
11:21:58 449  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
11:21:58 450  var_subscription_status_id  NUMBER;
11:21:58 451  var_license_id		  NUMBER;
11:21:58 452  var_offer_id		  NUMBER;
11:21:58 453  var_license_start_date	  DATE;
11:21:58 454  var_license_end_date	  DATE;
11:21:58 455  
11:21:58 456  var_entitlement_dupration   VARCHAR2(30);
11:21:58 457  var_d_entitlement_dupration NUMBER;
11:21:58 458  
11:21:58 459  var_ym_interval INTERVAL YEAR TO MONTH;
11:21:58 460  var_ds_interval INTERVAL DAY(3) TO SECOND;
11:21:58 461  
11:21:58 462  -- EXCEPTIONS
11:21:58 463  BAD_SUBSCRIPTION_ID     EXCEPTION;
11:21:58 464  BAD_SUBSCRIPTION_STATUS EXCEPTION;
11:21:58 465  NO_LICENSE_FOUND	      EXCEPTION;
11:21:58 466  NO_OFFER_FOUND	      EXCEPTION;
11:21:58 467  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:58 468  BEGIN
11:21:58 469  	-- TODO: Finish this prcedure (in Phase II)
11:21:58 470  
11:21:58 471  	-- Get subscription by id. FAULT if no such subscription.
11:21:58 472  	-- begin TX
11:21:58 473  	--   Get for update associated license (subscription.license_id). FAULT if not found.
11:21:58 474  	--   Set status to PROCESSED.
11:21:58 475  	--   updated record.
11:21:58 476  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
11:21:58 477  	--   new subscription status is SUSPENDED.
11:21:58 478  	--   suspend_date is now.
11:21:58 479  	--   update subscription record.
11:21:58 480  	-- end TX
11:21:58 481  
11:21:58 482  	BEGIN
11:21:58 483  	  SELECT
11:21:58 484  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
11:21:58 485  	  FROM
11:21:58 486  	    SUBSCRIPTION
11:21:58 487  	  WHERE
11:21:58 488  	    SUBSCRIPTION.ID = in_subs_id;
11:21:58 489  	  EXCEPTION
11:21:58 490  	  WHEN NO_DATA_FOUND THEN
11:21:58 491  	    RAISE BAD_SUBSCRIPTION_ID;
11:21:58 492  	END;
11:21:58 493  
11:21:58 494  	IF var_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE THEN
11:21:58 495  	  RAISE BAD_SUBSCRIPTION_STATUS;
11:21:58 496  	END IF;
11:21:58 497  
11:21:58 498  	BEGIN
11:21:58 499  	  SELECT
11:21:58 500  	    LICENSE.ID,
11:21:58 501  	    LICENSE.OFFER_ID,
11:21:58 502  	    LICENSE.START_DATE
11:21:58 503  	    into
11:21:58 504  	    var_license_id,
11:21:58 505  	    var_offer_id,
11:21:58 506  	    var_license_start_date
11:21:58 507  	  FROM
11:21:58 508  	    LICENSE
11:21:58 509  	  WHERE
11:21:58 510  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
11:21:58 511  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE;
11:21:58 512  	  EXCEPTION
11:21:58 513  	  WHEN NO_DATA_FOUND THEN
11:21:58 514  	    RAISE NO_LICENSE_FOUND;
11:21:58 515  	END;
11:21:58 516  
11:21:58 517  	PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 518  	  in_license_id        => var_license_id,
11:21:58 519  	  in_updated_by        => in_updated_by,
11:21:58 520  	  in_license_status_id => GLOBAL_STATUSES_V15.LICENSE_CLOSED
11:21:58 521  	);
11:21:58 522  
11:21:58 523  	BEGIN
11:21:58 524  	  SELECT
11:21:58 525  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
11:21:58 526  	  FROM
11:21:58 527  	    OFFER
11:21:58 528  	  WHERE
11:21:58 529  	    OFFER.ID = var_offer_id;
11:21:58 530  	  EXCEPTION
11:21:58 531  	  WHEN NO_DATA_FOUND THEN
11:21:58 532  	    RAISE NO_OFFER_FOUND;
11:21:58 533  	END;
11:21:58 534  
11:21:58 535  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
11:21:58 536  	var_ds_interval := substr(var_entitlement_dupration, 4);
11:21:58 537  
11:21:58 538  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
11:21:58 539  
11:21:58 540  	var_d_entitlement_dupration := var_license_end_date - current_date;
11:21:58 541  
11:21:58 542  	PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
11:21:58 543  	  in_subscription_id	       => in_subs_id,
11:21:58 544  	  in_updated_by 	       => in_updated_by,
11:21:58 545  	  in_suspend_date	       => SYSDATE,
11:21:58 546  	  in_subscription_status_id    => GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED,
11:21:58 547  	  in_days_remainning_ajustment => var_d_entitlement_dupration
11:21:58 548  	);
11:21:58 549  
11:21:58 550  EXCEPTION
11:21:58 551  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 552  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 553  	  SPROC_NAME, 'No such subscription');
11:21:58 554  WHEN BAD_SUBSCRIPTION_STATUS THEN
11:21:58 555  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 556  	  SPROC_NAME, 'Subscription is not active');
11:21:58 557  WHEN NO_LICENSE_FOUND THEN
11:21:58 558  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 559  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
11:21:58 560  WHEN NO_OFFER_FOUND THEN
11:21:58 561  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 562  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
11:21:58 563  WHEN OTHERS THEN
11:21:58 564  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 565  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 566  END SUSPEND_SUBSCRIPTION;
11:21:58 567  
11:21:58 568  /******************************************************************************/
11:21:58 569  
11:21:58 570  PROCEDURE REACTIVATE_SUBSCRIPTION (
11:21:58 571  	in_subscription_id IN  NUMBER,
11:21:58 572  	in_updated_by	   IN  VARCHAR2
11:21:58 573  ) AS
11:21:58 574  BEGIN
11:21:58 575  	-- TODO: finish this function (in Phase II)
11:21:58 576  	NULL;
11:21:58 577  END REACTIVATE_SUBSCRIPTION;
11:21:58 578  
11:21:58 579  /******************************************************************************/
11:21:58 580  
11:21:58 581  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:58 582  /*
11:21:58 583  Throws exceptions:
11:21:58 584  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 585  */
11:21:58 586  	  in_subscription_id  IN  NUMBER,
11:21:58 587  	  out_result_set      OUT SYS_REFCURSOR
11:21:58 588  ) AS
11:21:58 589  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
11:21:58 590  -- VARIABLES
11:21:58 591  temp_subscription_id NUMBER;
11:21:58 592  -- EXCEPTIONS
11:21:58 593  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 594  BEGIN
11:21:58 595  	-- Find subscription by id
11:21:58 596  	-- Return its details
11:21:58 597  
11:21:58 598  	BEGIN
11:21:58 599  	  SELECT
11:21:58 600  	    SUBSCRIPTION.ID into temp_subscription_id
11:21:58 601  	  FROM
11:21:58 602  	    SUBSCRIPTION
11:21:58 603  	  WHERE
11:21:58 604  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:58 605  	  EXCEPTION
11:21:58 606  	    WHEN NO_DATA_FOUND THEN
11:21:58 607  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:58 608  	END;
11:21:58 609  
11:21:58 610  	OPEN out_result_set FOR
11:21:58 611  	SELECT
11:21:58 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
11:21:58 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
11:21:58 614  	  SUBSCRIPTION.PURCHASE_DATE,
11:21:58 615  	  SUBSCRIPTION.SUSPEND_DATE,
11:21:58 616  	  SUBSCRIPTION.REACTIVATION_DATE,
11:21:58 617  	  SUBSCRIPTION.CANCELLATION_DATE,
11:21:58 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
11:21:58 619  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
11:21:58 620  	  OFFER_CHAIN.NAME,
11:21:58 621  	  OFFER_CHAIN.DESCRIPTION,
11:21:58 622  	  OFFER_CHAIN.PRODUCT_URI,
11:21:58 623  	  SUBSCRIPTION.INSTRUMENT_ID,
11:21:58 624  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
11:21:58 625  	  --PROCS_OFFER_CHAIN_V15.CALCULATE_OFFER_CHAIN_END_DATE(OFFER_CHAIN.ID, SUBSCRIPTION.PURCHASE_DATE) as "END_DATE",
11:21:58 626  	  PROCS_SUBSCRIPTION_V15.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
11:21:58 627  	  PROCS_SUBSCRIPTION_V15.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
11:21:58 628  	  PROCS_SUBSCRIPTION_V15.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
11:21:58 629  	  PROCS_SUBSCRIPTION_V15.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
11:21:58 630  	  (
11:21:58 631  	    SELECT
11:21:58 632  	      ACCOUNT.GROUP_ID
11:21:58 633  	      FROM ACCOUNT
11:21:58 634  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
11:21:58 635  	  ) as "GROUP_ID",
11:21:58 636  	  (
11:21:58 637  	    SELECT
11:21:58 638  	      MAX(ENTITLEMENT_END_DATE)
11:21:58 639  	      FROM LICENSE
11:21:58 640  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 641  	  )
11:21:58 642  	  as "ENT_END_DATE",
11:21:58 643  	  (
11:21:58 644  	    SELECT
11:21:58 645  	      MIN(START_DATE)
11:21:58 646  	      FROM LICENSE
11:21:58 647  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 648  	  )
11:21:58 649  	  as "ENT_START_DATE",
11:21:58 650  	  PROCS_SUBSCRIPTION_V15.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
11:21:58 651  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
11:21:58 652  	  GROUP_ACCOUNT.ID GA_ID,
11:21:58 653  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
11:21:58 654  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
11:21:58 655  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
11:21:58 656  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
11:21:58 657  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
11:21:58 658  	  GROUP_ACCOUNT.PHONE GA_PHONE,
11:21:58 659  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
11:21:58 660  	  GROUP_ACCOUNT.SEATS GA_SEATS,
11:21:58 661  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
11:21:58 662  	  GROUP_ACCOUNT.IP GA_IP,
11:21:58 663  	  PROCS_SUBSCRIPTION_V15.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code
11:21:58 664  	FROM
11:21:58 665  	  SUBSCRIPTION
11:21:58 666  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:58 667  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
11:21:58 668  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
11:21:58 669  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
11:21:58 670  	WHERE
11:21:58 671  	  SUBSCRIPTION.ID = in_subscription_id;
11:21:58 672  
11:21:58 673  EXCEPTION
11:21:58 674  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 675  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 676  	  SPROC_NAME, 'No such subscription');
11:21:58 677  WHEN OTHERS THEN
11:21:58 678  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 680  END GET_SUBSCRIPTION_INFO;
11:21:58 681  
11:21:58 682  /******************************************************************************/
11:21:58 683  
11:21:58 684  PROCEDURE GET_SUBSCRIPTION_INVOICES (
11:21:58 685  /*
11:21:58 686  Throws exceptions:
11:21:58 687  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 688  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 689  */
11:21:58 690  	in_subscription_id  IN	NUMBER,
11:21:58 691  	out_result_set	    OUT SYS_REFCURSOR
11:21:58 692  ) AS
11:21:58 693  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
11:21:58 694  temp_subscription_id NUMBER;
11:21:58 695  BEGIN
11:21:58 696  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
11:21:58 697  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
11:21:58 698  	--   for each license
11:21:58 699  	--     get associated invoice
11:21:58 700  	--     add to results list
11:21:58 701  	--   end loop
11:21:58 702  	-- end
11:21:58 703  
11:21:58 704  	SELECT
11:21:58 705  	  SUBSCRIPTION.ID into temp_subscription_id
11:21:58 706  	FROM
11:21:58 707  	  SUBSCRIPTION
11:21:58 708  	WHERE
11:21:58 709  	  SUBSCRIPTION.ID = in_subscription_id;
11:21:58 710  
11:21:58 711  	OPEN out_result_set FOR
11:21:58 712  	SELECT
11:21:58 713  	  INVOICE.ID,
11:21:58 714  	  INVOICE.INVOICE_STATUS_ID,
11:21:58 715  	  INVOICE.CREATE_DATE,
11:21:58 716  	  INVOICE.CREATED_BY,
11:21:58 717  	  INVOICE.UPDATE_DATE,
11:21:58 718  	  INVOICE.UPDATED_BY,
11:21:58 719  	  INVOICE.TAX_EXEMPT_ID
11:21:58 720  	FROM
11:21:58 721  	  LICENSE
11:21:58 722  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:58 723  	WHERE
11:21:58 724  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
11:21:58 725  
11:21:58 726  EXCEPTION
11:21:58 727  WHEN NO_DATA_FOUND THEN
11:21:58 728  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 729  	  SPROC_NAME, 'Could not find subscription with given ID');
11:21:58 730  WHEN OTHERS THEN
11:21:58 731  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 732  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 733  END GET_SUBSCRIPTION_INVOICES;
11:21:58 734  
11:21:58 735  /******************************************************************************/
11:21:58 736  
11:21:58 737  PROCEDURE GET_SUBSCRIPTION_NOTES (
11:21:58 738  /*
11:21:58 739  Throws exceptions:
11:21:58 740  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 741  */
11:21:58 742  	in_subscription_id  IN	NUMBER,
11:21:58 743  	out_result_set	    OUT SYS_REFCURSOR
11:21:58 744  ) AS
11:21:58 745  -- VARIABLES
11:21:58 746  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
11:21:58 747  temp_subscription_id NUMBER;
11:21:58 748  -- EXCEPTIONS
11:21:58 749  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 750  BEGIN
11:21:58 751  
11:21:58 752  	-- Check that subscription exists
11:21:58 753  	BEGIN
11:21:58 754  	  SELECT
11:21:58 755  	    SUBSCRIPTION.ID into temp_subscription_id
11:21:58 756  	  FROM
11:21:58 757  	    SUBSCRIPTION
11:21:58 758  	  WHERE
11:21:58 759  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:58 760  	  EXCEPTION
11:21:58 761  	    WHEN NO_DATA_FOUND THEN
11:21:58 762  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:58 763  	END;
11:21:58 764  
11:21:58 765  	OPEN out_result_set FOR
11:21:58 766  	SELECT
11:21:58 767  	  SUBSCRIPTION_NOTE.NOTE,
11:21:58 768  	  SUBSCRIPTION_NOTE.CREATED_BY,
11:21:58 769  	  SUBSCRIPTION_NOTE.CREATE_DATE
11:21:58 770  	FROM
11:21:58 771  	  SUBSCRIPTION_NOTE
11:21:58 772  	WHERE
11:21:58 773  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
11:21:58 774  	ORDER BY
11:21:58 775  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
11:21:58 776  
11:21:58 777  EXCEPTION
11:21:58 778  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 779  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 780  	  SPROC_NAME, 'No such subscription');
11:21:58 781  WHEN OTHERS THEN
11:21:58 782  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 783  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 784  END GET_SUBSCRIPTION_NOTES;
11:21:58 785  
11:21:58 786  /******************************************************************************/
11:21:58 787  
11:21:58 788  PROCEDURE ANNOTATE_SUBSCRIPTION (
11:21:58 789  /*
11:21:58 790  Throws exceptions:
11:21:58 791  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 792  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 793  */
11:21:58 794  	in_subscription_id IN  NUMBER,
11:21:58 795  	in_agent_id	   IN  NUMBER,
11:21:58 796  	in_note 	   IN  VARCHAR2,
11:21:58 797  	in_created_by	   IN  VARCHAR2
11:21:58 798  ) AS
11:21:58 799  -- VARIABLES
11:21:58 800  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
11:21:58 801  temp_subscription_id     NUMBER;
11:21:58 802  var_subscription_note_id NUMBER;
11:21:58 803  -- EXCEPTIONS
11:21:58 804  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 805  BEGIN
11:21:58 806  
11:21:58 807  	-- Check that subscription exists
11:21:58 808  	BEGIN
11:21:58 809  	  SELECT
11:21:58 810  	    SUBSCRIPTION.ID into temp_subscription_id
11:21:58 811  	  FROM
11:21:58 812  	    SUBSCRIPTION
11:21:58 813  	  WHERE
11:21:58 814  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:58 815  	  EXCEPTION
11:21:58 816  	    WHEN NO_DATA_FOUND THEN
11:21:58 817  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:58 818  	END;
11:21:58 819  
11:21:58 820  	PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION_NOTE(
11:21:58 821  	  inout_subscription_note_id => var_subscription_note_id,
11:21:58 822  	  in_agent_id		     => in_agent_id,
11:21:58 823  	  in_subscription_id	     => in_subscription_id,
11:21:58 824  	  in_note		     => in_note,
11:21:58 825  	  in_created_by 	     => in_created_by
11:21:58 826  	);
11:21:58 827  
11:21:58 828  EXCEPTION
11:21:58 829  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 830  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 831  	  SPROC_NAME, 'No such subscription');
11:21:58 832  WHEN OTHERS THEN
11:21:58 833  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 834  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 835  END ANNOTATE_SUBSCRIPTION;
11:21:58 836  
11:21:58 837  /******************************************************************************/
11:21:58 838  
11:21:58 839  PROCEDURE GET_CANCELLING_SSCRPTN_REASONS (
11:21:58 840  /*
11:21:58 841  Throws exceptions:
11:21:58 842  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 843  */
11:21:58 844  	out_result_set OUT SYS_REFCURSOR
11:21:58 845  ) AS
11:21:58 846  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCELLING_SSCRPTN_REASONS';
11:21:58 847  BEGIN
11:21:58 848  
11:21:58 849  	OPEN out_result_set FOR
11:21:58 850  	SELECT
11:21:58 851  	  SUBSCRIPTION_CANCEL_REASON.ID,
11:21:58 852  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
11:21:58 853  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION
11:21:58 854  	FROM
11:21:58 855  	  SUBSCRIPTION_CANCEL_REASON
11:21:58 856  	WHERE
11:21:58 857  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCR_CANC_REASON_ACTIVE;
11:21:58 858  
11:21:58 859  EXCEPTION
11:21:58 860  WHEN OTHERS THEN
11:21:58 861  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 862  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 863  END GET_CANCELLING_SSCRPTN_REASONS;
11:21:58 864  
11:21:58 865  /******************************************************************************/
11:21:58 866  
11:21:58 867  FUNCTION GET_RENEWAL_DATE (
11:21:58 868  /*
11:21:58 869  Throws exceptions:
11:21:58 870  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 871  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 872  */
11:21:58 873  	in_subscription_id in NUMBER
11:21:58 874  ) RETURN DATE AS
11:21:58 875  -- VARIABLES
11:21:58 876  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
11:21:58 877  var_subscription_status NUMBER;
11:21:58 878  var_licenses_count      NUMBER;
11:21:58 879  var_license_end_date    DATE;
11:21:58 880  var_last_offer_id       NUMBER;
11:21:58 881  var_offer_chain_id      NUMBER;
11:21:58 882  var_last_license_id     NUMBER;
11:21:58 883  var_current_offer_index NUMBER;
11:21:58 884  var_current_offer_recurr_num NUMBER;
11:21:58 885  var_offer_recurr_num    NUMBER;
11:21:58 886  -- EXCEPTIONS
11:21:58 887  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 888  NO_LICENSES_FOUND EXCEPTION;
11:21:58 889  BEGIN
11:21:58 890  
11:21:58 891  	-- Get subscription id and offer chain id
11:21:58 892  	BEGIN
11:21:58 893  	  SELECT
11:21:58 894  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
11:21:58 895  	    SUBSCRIPTION.OFFER_CHAIN_ID
11:21:58 896  	    into
11:21:58 897  	    var_subscription_status,
11:21:58 898  	    var_offer_chain_id
11:21:58 899  	  FROM
11:21:58 900  	    SUBSCRIPTION
11:21:58 901  	  WHERE
11:21:58 902  	    SUBSCRIPTION.ID = in_subscription_id;
11:21:58 903  	  EXCEPTION
11:21:58 904  	    WHEN NO_DATA_FOUND THEN
11:21:58 905  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:58 906  	END;
11:21:58 907  
11:21:58 908  	IF var_subscription_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE THEN
11:21:58 909  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
11:21:58 910  	  -- AND var_subscription_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
11:21:58 911  	  RETURN NULL;
11:21:58 912  	END IF;
11:21:58 913  
11:21:58 914  	BEGIN
11:21:58 915  	  SELECT
11:21:58 916  	    LICENSE_ID,
11:21:58 917  	    END_DATE,
11:21:58 918  	    OFFER_ID,
11:21:58 919  	    CURRENT_OFFER_INDEX,
11:21:58 920  	    CURRENT_OFFER_RECURR_NUM
11:21:58 921  	    into
11:21:58 922  	    var_last_license_id,
11:21:58 923  	    var_license_end_date,
11:21:58 924  	    var_last_offer_id,
11:21:58 925  	    var_current_offer_index,
11:21:58 926  	    var_current_offer_recurr_num
11:21:58 927  	  FROM
11:21:58 928  	    (
11:21:58 929  	      SELECT
11:21:58 930  		LICENSE.ID as "LICENSE_ID",
11:21:58 931  		LICENSE.END_DATE,
11:21:58 932  		LICENSE.OFFER_ID,
11:21:58 933  		LICENSE.CURRENT_OFFER_INDEX,
11:21:58 934  		LICENSE.CURRENT_OFFER_RECURR_NUM
11:21:58 935  	      FROM
11:21:58 936  		LICENSE
11:21:58 937  	      WHERE
11:21:58 938  		LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 939  		AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
11:21:58 940  	      ORDER BY END_DATE DESC
11:21:58 941  	    )
11:21:58 942  	    INNER JOIN OFFER ON OFFER_ID = OFFER.ID
11:21:58 943  	  WHERE
11:21:58 944  	    ROWNUM <= 1;
11:21:58 945  
11:21:58 946  	  EXCEPTION
11:21:58 947  	    WHEN NO_DATA_FOUND THEN
11:21:58 948  	      -- RAISE NO_LICENSES_FOUND;
11:21:58 949  	      RETURN NULL;
11:21:58 950  	END;
11:21:58 951  
11:21:58 952  	SELECT
11:21:58 953  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
11:21:58 954  	FROM
11:21:58 955  	  OFFER_OFFER_CHAIN
11:21:58 956  	WHERE
11:21:58 957  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
11:21:58 958  	  AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
11:21:58 959  
11:21:58 960  	IF PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
11:21:58 961  	  AND var_offer_recurr_num = var_current_offer_recurr_num THEN
11:21:58 962  	  -- There is no next offer for this subscription
11:21:58 963  	  RETURN NULL;
11:21:58 964  	END IF;
11:21:58 965  
11:21:58 966  	RETURN var_license_end_date;
11:21:58 967  
11:21:58 968  EXCEPTION
11:21:58 969  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 970  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 971  	  SPROC_NAME, 'No such subscription');
11:21:58 972  WHEN NO_LICENSES_FOUND THEN
11:21:58 973  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 974  	  SPROC_NAME, 'No licenses found');
11:21:58 975  WHEN OTHERS THEN
11:21:58 976  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 977  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 978  END GET_RENEWAL_DATE;
11:21:58 979  
11:21:58 980  /******************************************************************************/
11:21:58 981  
11:21:58 982  FUNCTION GET_RECENT_CHARGE (
11:21:58 983  /*
11:21:58 984  Throws exceptions:
11:21:58 985  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 986  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 987  */
11:21:58 988  	in_subscription_id IN NUMBER
11:21:58 989  ) RETURN NUMBER AS
11:21:58 990  -- VARIABLES
11:21:58 991  SPROC_NAME	   CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
11:21:58 992  temp_subscription_id NUMBER;
11:21:58 993  var_recent_charge    NUMBER(10,2);
11:21:58 994  
11:21:58 995  -- EXCEPTIONS
11:21:58 996  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 997  BEGIN
11:21:58 998  
11:21:58 999  	BEGIN
11:21:58 1000  	   SELECT
11:21:58 1001  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 1002  	   FROM
11:21:58 1003  	     SUBSCRIPTION
11:21:58 1004  	   WHERE
11:21:58 1005  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1006  	   EXCEPTION
11:21:58 1007  	     WHEN NO_DATA_FOUND THEN
11:21:58 1008  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1009  	 END;
11:21:58 1010  
11:21:58 1011  	 BEGIN
11:21:58 1012  	   SELECT
11:21:58 1013  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
11:21:58 1014  	   FROM
11:21:58 1015  	     LICENSE
11:21:58 1016  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 1017  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:58 1018  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
11:21:58 1019  	   WHERE
11:21:58 1020  	     -- TODO: Review
11:21:58 1021  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_PROCESSED
11:21:58 1022  	     -- AND
11:21:58 1023  	     SUBSCRIPTION.ID = in_subscription_id
11:21:58 1024  	     AND CHARGE.CHARGE_AMOUNT >= 0
11:21:58 1025  	     AND ROWNUM <= 1
11:21:58 1026  	   ORDER BY
11:21:58 1027  	     LICENSE.ID ASC, CHARGE.ID DESC;
11:21:58 1028  	   EXCEPTION
11:21:58 1029  	     WHEN NO_DATA_FOUND THEN
11:21:58 1030  	       var_recent_charge := 0;
11:21:58 1031  	 END;
11:21:58 1032  
11:21:58 1033  	 RETURN var_recent_charge;
11:21:58 1034  
11:21:58 1035  EXCEPTION
11:21:58 1036  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1037  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1038  	   SPROC_NAME, 'No such subscription');
11:21:58 1039  WHEN OTHERS THEN
11:21:58 1040  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1041  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1042  END GET_RECENT_CHARGE;
11:21:58 1043  
11:21:58 1044  /******************************************************************************/
11:21:58 1045  
11:21:58 1046  FUNCTION GET_BILLING_CYCLE (
11:21:58 1047  	 in_subscription_id IN NUMBER
11:21:58 1048  ) RETURN VARCHAR2 AS
11:21:58 1049  -- VARIABLES
11:21:58 1050  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
11:21:58 1051  temp_subscription_id NUMBER;
11:21:58 1052  var_offer_duration   VARCHAR2(30);
11:21:58 1053  
11:21:58 1054  -- EXCEPTIONS
11:21:58 1055  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 1056  BEGIN
11:21:58 1057  
11:21:58 1058  	 BEGIN
11:21:58 1059  	   SELECT
11:21:58 1060  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 1061  	   FROM
11:21:58 1062  	     SUBSCRIPTION
11:21:58 1063  	   WHERE
11:21:58 1064  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1065  	   EXCEPTION
11:21:58 1066  	     WHEN NO_DATA_FOUND THEN
11:21:58 1067  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1068  	 END;
11:21:58 1069  
11:21:58 1070  	 SELECT
11:21:58 1071  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
11:21:58 1072  	 FROM
11:21:58 1073  	   LICENSE
11:21:58 1074  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 1075  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
11:21:58 1076  	 WHERE
11:21:58 1077  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_PROCESSED
11:21:58 1078  	   --AND
11:21:58 1079  	   SUBSCRIPTION.ID = in_subscription_id
11:21:58 1080  	   AND ROWNUM <= 1
11:21:58 1081  	 ORDER BY
11:21:58 1082  	   LICENSE.ID ASC;
11:21:58 1083  
11:21:58 1084  	 RETURN var_offer_duration;
11:21:58 1085  
11:21:58 1086  EXCEPTION
11:21:58 1087  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1088  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1089  	   SPROC_NAME, 'No such subscription');
11:21:58 1090  WHEN OTHERS THEN
11:21:58 1091  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1092  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1093  END GET_BILLING_CYCLE;
11:21:58 1094  
11:21:58 1095  /******************************************************************************/
11:21:58 1096  
11:21:58 1097  PROCEDURE REFUND_SUBSCRIPTION (
11:21:58 1098  /*
11:21:58 1099  Throws exceptions:
11:21:58 1100  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1101  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1102  */
11:21:58 1103  	 in_subscription_id IN NUMBER,
11:21:58 1104  	 in_invoice_id	    IN NUMBER,
11:21:58 1105  	 in_refund_amount   IN NUMBER,
11:21:58 1106  	 in_note	    IN VARCHAR2,
11:21:58 1107  	 in_created_by	    IN VARCHAR2,
11:21:58 1108  	 out_charge_id	    OUT NUMBER
11:21:58 1109  ) AS
11:21:58 1110  -- VARIABLES
11:21:58 1111  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
11:21:58 1112  var_invoice_status_id  NUMBER;
11:21:58 1113  var_account_id	      NUMBER;
11:21:58 1114  var_account_status_id  NUMBER;
11:21:58 1115  var_new_transaction_id NUMBER;
11:21:58 1116  var_instrument_type_id NUMBER;
11:21:58 1117  var_instrument_id      NUMBER;
11:21:58 1118  var_new_charge_id      NUMBER;
11:21:58 1119  var_invoice_amount     NUMBER(10,2);
11:21:58 1120  var_refunds_before     NUMBER(10,2);
11:21:58 1121  var_charges_amount     NUMBER(10,2);
11:21:58 1122  -- EXCEPTIONS
11:21:58 1123  BAD_SUBSCRIPTION_ID	     EXCEPTION;
11:21:58 1124  ACCOUNT_IS_FROZEN	     EXCEPTION;
11:21:58 1125  BAD_INVOICE_ID		     EXCEPTION;
11:21:58 1126  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
11:21:58 1127  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
11:21:58 1128  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
11:21:58 1129  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
11:21:58 1130  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
11:21:58 1131  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
11:21:58 1132  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
11:21:58 1133  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
11:21:58 1134  EXCEPTION_MESSAGE	      VARCHAR2(1024);
11:21:58 1135  BEGIN
11:21:58 1136  
11:21:58 1137  	 BEGIN
11:21:58 1138  	   SELECT
11:21:58 1139  	     SUBSCRIPTION.INSTRUMENT_ID,
11:21:58 1140  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
11:21:58 1141  	     SUBSCRIPTION.ACCOUNT_ID
11:21:58 1142  	     into
11:21:58 1143  	     var_instrument_id,
11:21:58 1144  	     var_instrument_type_id,
11:21:58 1145  	     var_account_id
11:21:58 1146  	   FROM
11:21:58 1147  	     SUBSCRIPTION
11:21:58 1148  	   WHERE
11:21:58 1149  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1150  	   EXCEPTION
11:21:58 1151  	     WHEN NO_DATA_FOUND THEN
11:21:58 1152  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1153  	 END;
11:21:58 1154  
11:21:58 1155  	 -- Check account status. It should not to be frozen
11:21:58 1156  	 SELECT
11:21:58 1157  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
11:21:58 1158  	 FROM
11:21:58 1159  	   ACCOUNT
11:21:58 1160  	 WHERE
11:21:58 1161  	   ACCOUNT.ID = var_account_id;
11:21:58 1162  
11:21:58 1163  	 IF var_account_status_id = GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
11:21:58 1164  	   RAISE ACCOUNT_IS_FROZEN;
11:21:58 1165  	 END IF;
11:21:58 1166  
11:21:58 1167  	 BEGIN
11:21:58 1168  	   SELECT
11:21:58 1169  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
11:21:58 1170  	   FROM
11:21:58 1171  	     INVOICE
11:21:58 1172  	   WHERE
11:21:58 1173  	     INVOICE.ID = in_invoice_id;
11:21:58 1174  	   EXCEPTION
11:21:58 1175  	     WHEN NO_DATA_FOUND THEN
11:21:58 1176  	       RAISE BAD_INVOICE_ID;
11:21:58 1177  	 END;
11:21:58 1178  
11:21:58 1179  	 IF var_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
11:21:58 1180  	   RAISE INVOICE_IS_NOT_CLOSED;
11:21:58 1181  	 END IF;
11:21:58 1182  
11:21:58 1183  	 BEGIN
11:21:58 1184  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
11:21:58 1185  	     in_invoice_id => in_invoice_id,
11:21:58 1186  	     out_amount    => var_invoice_amount
11:21:58 1187  	   );
11:21:58 1188  	   EXCEPTION
11:21:58 1189  	     WHEN OTHERS THEN
11:21:58 1190  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1191  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
11:21:58 1192  	 END;
11:21:58 1193  
11:21:58 1194  	 IF ( in_refund_amount > var_invoice_amount ) THEN
11:21:58 1195  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
11:21:58 1196  	 END IF;
11:21:58 1197  
11:21:58 1198  	 SELECT /*+ STAR_TRANSFORMATION */
11:21:58 1199  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
11:21:58 1200  	 FROM
11:21:58 1201  	   CHARGE
11:21:58 1202  	 WHERE
11:21:58 1203  	   CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1204  	   AND (
11:21:58 1205  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 1206  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 1207  	   )
11:21:58 1208  	   AND CHARGE.CHARGE_AMOUNT < 0;
11:21:58 1209  
11:21:58 1210  	 -- Refunds are negative
11:21:58 1211  	 var_refunds_before := -var_refunds_before;
11:21:58 1212  
11:21:58 1213  	 var_charges_amount := 0;
11:21:58 1214  
11:21:58 1215  	 FOR f_processed_charges IN (
11:21:58 1216  	   SELECT
11:21:58 1217  	     CHARGE.CHARGE_AMOUNT
11:21:58 1218  	   FROM
11:21:58 1219  	     CHARGE
11:21:58 1220  	   WHERE
11:21:58 1221  	     CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1222  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
11:21:58 1223  	 )
11:21:58 1224  	 LOOP
11:21:58 1225  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
11:21:58 1226  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
11:21:58 1227  	   END IF;
11:21:58 1228  	 END LOOP;
11:21:58 1229  
11:21:58 1230  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
11:21:58 1231  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
11:21:58 1232  	 END IF;
11:21:58 1233  
11:21:58 1234  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
11:21:58 1235  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
11:21:58 1236  	 END IF;
11:21:58 1237  
11:21:58 1238  	 BEGIN
11:21:58 1239  	   PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:58 1240  	     in_transaction_id	=> NULL,
11:21:58 1241  	     in_status_id	=> GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
11:21:58 1242  	     in_amount		=> -in_refund_amount,
11:21:58 1243  	     in_created_by	=> in_created_by,
11:21:58 1244  	     in_order_id	=> NULL,
11:21:58 1245  	     in_is_refund	=> GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 1246  	     out_transaction_id => var_new_transaction_id
11:21:58 1247  	   );
11:21:58 1248  	   EXCEPTION
11:21:58 1249  	     WHEN OTHERS THEN
11:21:58 1250  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1251  	       RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:58 1252  	 END;
11:21:58 1253  
11:21:58 1254  	 BEGIN
11:21:58 1255  	   PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:58 1256  	     in_invoice_id	   => in_invoice_id,
11:21:58 1257  	     in_transaction_id	   => var_new_transaction_id,
11:21:58 1258  	     in_instrument_type_id => var_instrument_type_id,
11:21:58 1259  	     in_instrument_id	   => var_instrument_id,
11:21:58 1260  	     in_charge_amount	   => -in_refund_amount,
11:21:58 1261  	     in_created_by	   => in_created_by,
11:21:58 1262  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:58 1263  	     out_charge_id	   => var_new_charge_id
11:21:58 1264  	   );
11:21:58 1265  	   EXCEPTION
11:21:58 1266  	     WHEN OTHERS THEN
11:21:58 1267  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1268  	       RAISE CAN_NOT_CREATE_CHARGE;
11:21:58 1269  	 END;
11:21:58 1270  
11:21:58 1271  	 IF in_note IS NOT NULL THEN
11:21:58 1272  	   BEGIN
11:21:58 1273  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:58 1274  	       in_subscription_id => in_subscription_id,
11:21:58 1275  	       in_agent_id	  => 0, -- AGENT_ID??
11:21:58 1276  	       in_note		  => in_note,
11:21:58 1277  	       in_created_by	  => in_created_by
11:21:58 1278  	     );
11:21:58 1279  	     EXCEPTION
11:21:58 1280  	       WHEN OTHERS THEN
11:21:58 1281  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1282  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
11:21:58 1283  	   END;
11:21:58 1284  	 END IF;
11:21:58 1285  
11:21:58 1286  	 out_charge_id := var_new_charge_id;
11:21:58 1287  
11:21:58 1288  EXCEPTION
11:21:58 1289  WHEN INVOICE_IS_NOT_CLOSED THEN
11:21:58 1290  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 1291  	   SPROC_NAME, 'Invoice is not closed');
11:21:58 1292  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1293  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1294  	   SPROC_NAME, 'No such subscription');
11:21:58 1295  WHEN ACCOUNT_IS_FROZEN THEN
11:21:58 1296  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 1297  	   SPROC_NAME, 'Could not refund subscription for frozen account');
11:21:58 1298  WHEN BAD_INVOICE_ID THEN
11:21:58 1299  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1300  	   SPROC_NAME, 'No such invoice');
11:21:58 1301  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
11:21:58 1302  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1303  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
11:21:58 1304  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
11:21:58 1305  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1306  	   SPROC_NAME, 'Refund is greater than amount');
11:21:58 1307  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
11:21:58 1308  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1309  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
11:21:58 1310  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
11:21:58 1311  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1312  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
11:21:58 1313  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:58 1314  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1315  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:58 1316  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:58 1317  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1318  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:58 1319  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
11:21:58 1320  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1321  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
11:21:58 1322  WHEN OTHERS THEN
11:21:58 1323  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1324  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1325  END REFUND_SUBSCRIPTION;
11:21:58 1326  
11:21:58 1327  /******************************************************************************/
11:21:58 1328  
11:21:58 1329  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
11:21:58 1330  /*
11:21:58 1331  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1332  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 1333  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1334  */
11:21:58 1335  	 in_subscription_id	 IN NUMBER,
11:21:58 1336  	 in_effective_start_date IN DATE,
11:21:58 1337  	 in_effective_end_date	 IN DATE,
11:21:58 1338  	 in_note		 IN VARCHAR2,
11:21:58 1339  	 in_updated_by		 IN VARCHAR2
11:21:58 1340  ) AS
11:21:58 1341  -- VARIABLES
11:21:58 1342  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
11:21:58 1343  temp_subscription_id	    NUMBER;
11:21:58 1344  var_current_license_id	    NUMBER;
11:21:58 1345  var_current_license_start_date DATE;
11:21:58 1346  var_current_license_end_date DATE;
11:21:58 1347  var_current_offer_id	    NUMBER;
11:21:58 1348  var_current_invoice_id	    NUMBER;
11:21:58 1349  var_current_date 	    DATE;
11:21:58 1350  var_current_offer_index	    NUMBER;
11:21:58 1351  var_current_offer_recurr_num NUMBER;
11:21:58 1352  var_account_tax_exempt_id    VARCHAR2(255);
11:21:58 1353  
11:21:58 1354  var_free_invoice_id NUMBER;
11:21:58 1355  var_free_license_id NUMBER;
11:21:58 1356  var_new_license_id  NUMBER;
11:21:58 1357  var_ext_license_id  NUMBER;
11:21:58 1358  -- EXCEPTIONS
11:21:58 1359  BAD_SUBSCRIPTION_ID	     EXCEPTION;
11:21:58 1360  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
11:21:58 1361  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
11:21:58 1362  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
11:21:58 1363  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
11:21:58 1364  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
11:21:58 1365  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
11:21:58 1366  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
11:21:58 1367  EXT_START_DATE_LATER_THEN_END EXCEPTION;
11:21:58 1368  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
11:21:58 1369  EXCEPTION_MESSAGE	     VARCHAR2(1024);
11:21:58 1370  BEGIN
11:21:58 1371  
11:21:58 1372  	 var_current_date := PROCS_COMMON_V15.NORMALIZE_DATE(SYSDATE);
11:21:58 1373  
11:21:58 1374  	 -- Check that subscription exists
11:21:58 1375  	 BEGIN
11:21:58 1376  	   SELECT
11:21:58 1377  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 1378  	   FROM
11:21:58 1379  	     SUBSCRIPTION
11:21:58 1380  	   WHERE
11:21:58 1381  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1382  	   EXCEPTION
11:21:58 1383  	     WHEN NO_DATA_FOUND THEN
11:21:58 1384  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1385  	 END;
11:21:58 1386  
11:21:58 1387  	 -- Get account tax exempt id
11:21:58 1388  	 SELECT DISTINCT
11:21:58 1389  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
11:21:58 1390  	 FROM
11:21:58 1391  	   ACCOUNT
11:21:58 1392  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 1393  	 WHERE
11:21:58 1394  	   SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1395  
11:21:58 1396  	 -- Select current data
11:21:58 1397  	 BEGIN
11:21:58 1398  	   SELECT
11:21:58 1399  	     LICENSE.ID,
11:21:58 1400  	     LICENSE.START_DATE,
11:21:58 1401  	     LICENSE.END_DATE,
11:21:58 1402  	     LICENSE.CURRENT_OFFER_INDEX,
11:21:58 1403  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 1404  	     OFFER.ID,
11:21:58 1405  	     INVOICE.ID
11:21:58 1406  	   INTO
11:21:58 1407  	     var_current_license_id,
11:21:58 1408  	     var_current_license_start_date,
11:21:58 1409  	     var_current_license_end_date,
11:21:58 1410  	     var_current_offer_index,
11:21:58 1411  	     var_current_offer_recurr_num,
11:21:58 1412  	     var_current_offer_id,
11:21:58 1413  	     var_current_invoice_id
11:21:58 1414  	   FROM
11:21:58 1415  	     LICENSE
11:21:58 1416  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 1417  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
11:21:58 1418  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:58 1419  	   WHERE
11:21:58 1420  	     SUBSCRIPTION.ID = in_subscription_id
11:21:58 1421  	     AND PROCS_COMMON_V15.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
11:21:58 1422  	     AND PROCS_COMMON_V15.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
11:21:58 1423  	     AND ROWNUM <= 1
11:21:58 1424  	   ORDER BY
11:21:58 1425  	     LICENSE.ID DESC;
11:21:58 1426  	   EXCEPTION
11:21:58 1427  	     WHEN NO_DATA_FOUND THEN
11:21:58 1428  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
11:21:58 1429  	 END;
11:21:58 1430  
11:21:58 1431  	 IF var_current_license_end_date < in_effective_start_date THEN
11:21:58 1432  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
11:21:58 1433  	 END IF;
11:21:58 1434  
11:21:58 1435  	 IF var_current_license_start_date > in_effective_start_date THEN
11:21:58 1436  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
11:21:58 1437  	 END IF;
11:21:58 1438  
11:21:58 1439  	 IF in_effective_start_date > in_effective_end_date THEN
11:21:58 1440  	   RAISE EXT_START_DATE_LATER_THEN_END;
11:21:58 1441  	 END IF;
11:21:58 1442  
11:21:58 1443  	 -- Closing curent license
11:21:58 1444  	 BEGIN
11:21:58 1445  	   PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 1446  	     in_license_id	   => var_current_license_id,
11:21:58 1447  	     in_updated_by	   => in_updated_by,
11:21:58 1448  	     in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
11:21:58 1449  	     in_end_date	   => in_effective_start_date,
11:21:58 1450  	     in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE
11:21:58 1451  	   );
11:21:58 1452  	   EXCEPTION
11:21:58 1453  	     WHEN OTHERS THEN
11:21:58 1454  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1455  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
11:21:58 1456  	 END;
11:21:58 1457  
11:21:58 1458  	 -- Creating new "free" invoice
11:21:58 1459  	 BEGIN
11:21:58 1460  	   PROCS_INVOICE_V15.CREATE_INVOICE(
11:21:58 1461  	     in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_CLOSED,
11:21:58 1462  	     in_created_by     => in_updated_by,
11:21:58 1463  	     in_tax_exempt_id  => var_account_tax_exempt_id,
11:21:58 1464  	     out_invoice_id    => var_free_invoice_id
11:21:58 1465  	   );
11:21:58 1466  	   EXCEPTION
11:21:58 1467  	     WHEN OTHERS THEN
11:21:58 1468  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1469  	       RAISE CAN_NOT_CREATE_INVOICE;
11:21:58 1470  	 END;
11:21:58 1471  
11:21:58 1472  	 -- Creating new "free" license
11:21:58 1473  	 BEGIN
11:21:58 1474  	   PROCS_LICENSE_V15.CREATE_LICENSE (
11:21:58 1475  	     in_status_id		 => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
11:21:58 1476  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 1477  	     in_start_date		 => in_effective_start_date,
11:21:58 1478  	     in_end_date		 => in_effective_end_date,
11:21:58 1479  	     in_offer_id		 => var_current_offer_id,
11:21:58 1480  	     in_subscription_id 	 => in_subscription_id,
11:21:58 1481  	     in_invoice_id		 => var_free_invoice_id,
11:21:58 1482  	     in_created_by		 => in_updated_by,
11:21:58 1483  	     in_is_extension		 => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 1484  	     in_current_offer_index	 => var_current_offer_index,
11:21:58 1485  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
11:21:58 1486  	     out_license_id		 => var_free_license_id
11:21:58 1487  	   );
11:21:58 1488  	   EXCEPTION
11:21:58 1489  	     WHEN OTHERS THEN
11:21:58 1490  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1491  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
11:21:58 1492  	 END;
11:21:58 1493  
11:21:58 1494  	 -- Creating new license
11:21:58 1495  	 IF PROCS_COMMON_V15.NORMALIZE_DATE(var_current_license_end_date) >
11:21:58 1496  	    PROCS_COMMON_V15.NORMALIZE_DATE(in_effective_start_date) THEN
11:21:58 1497  	   BEGIN
11:21:58 1498  	     PROCS_LICENSE_V15.CREATE_LICENSE (
11:21:58 1499  	       in_status_id		   => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
11:21:58 1500  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 1501  	       in_start_date		   => in_effective_end_date,
11:21:58 1502  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
11:21:58 1503  	       in_offer_id		   => var_current_offer_id,
11:21:58 1504  	       in_subscription_id	   => in_subscription_id,
11:21:58 1505  	       in_invoice_id		   => var_current_invoice_id,
11:21:58 1506  	       in_created_by		   => in_updated_by,
11:21:58 1507  	       in_is_extension		   => GLOBAL_CONSTANTS_V15.FALSE,
11:21:58 1508  	       in_current_offer_index	   => var_current_offer_index,
11:21:58 1509  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
11:21:58 1510  	       out_license_id		   => var_ext_license_id
11:21:58 1511  	     );
11:21:58 1512  	     EXCEPTION
11:21:58 1513  	       WHEN OTHERS THEN
11:21:58 1514  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1515  		 RAISE CAN_NOT_CREATE_END_LICENSE;
11:21:58 1516  	   END;
11:21:58 1517  	 END IF;
11:21:58 1518  
11:21:58 1519  	 -- Create new note for subscription
11:21:58 1520  	 BEGIN
11:21:58 1521  	   PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION (
11:21:58 1522  	     in_subscription_id => in_subscription_id,
11:21:58 1523  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
11:21:58 1524  	     in_note		=> in_note,
11:21:58 1525  	     in_created_by	=> in_updated_by
11:21:58 1526  	   );
11:21:58 1527  	   EXCEPTION
11:21:58 1528  	     WHEN OTHERS THEN
11:21:58 1529  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1530  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
11:21:58 1531  	 END;
11:21:58 1532  
11:21:58 1533  EXCEPTION
11:21:58 1534  WHEN EXT_START_DATE_LATER_THEN_END THEN
11:21:58 1535  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1536  	   SPROC_NAME, 'Extension start date is bigger then end date');
11:21:58 1537  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
11:21:58 1538  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1539  	   SPROC_NAME, 'Extension start date is too far');
11:21:58 1540  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
11:21:58 1541  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1542  	   SPROC_NAME, 'Extension start date is too small');
11:21:58 1543  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1544  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1545  	   SPROC_NAME, 'No such subscription');
11:21:58 1546  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
11:21:58 1547  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1548  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
11:21:58 1549  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
11:21:58 1550  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1551  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
11:21:58 1552  WHEN CAN_NOT_CREATE_INVOICE THEN
11:21:58 1553  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1554  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
11:21:58 1555  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
11:21:58 1556  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1557  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
11:21:58 1558  WHEN CAN_NOT_CREATE_END_LICENSE THEN
11:21:58 1559  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1560  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
11:21:58 1561  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
11:21:58 1562  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1563  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
11:21:58 1564  WHEN OTHERS THEN
11:21:58 1565  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1566  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1567  END ADD_SUBSCRIPTION_EXTENSION;
11:21:58 1568  
11:21:58 1569  /******************************************************************************/
11:21:58 1570  
11:21:58 1571  FUNCTION CALC_SUBSCRIPTION_END_DATE (
11:21:58 1572  /*
11:21:58 1573  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1574  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 1575  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1576  Returns:
11:21:58 1577  NULL if it is impossible to calculate end date (for example,
11:21:58 1578  	 offer chain includes offer with infinity recurrences number)
11:21:58 1579  DATE else
11:21:58 1580  */
11:21:58 1581  	 in_subscription_id IN NUMBER
11:21:58 1582  ) RETURN DATE AS
11:21:58 1583  -- VARIABLES
11:21:58 1584  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
11:21:58 1585  last_license_id		     NUMBER;
11:21:58 1586  last_license_end_date	     DATE;
11:21:58 1587  last_license_offer_id	     NUMBER;
11:21:58 1588  last_license_offer_index      NUMBER;
11:21:58 1589  last_license_offer_recurr_num NUMBER;
11:21:58 1590  var_last_license_id	     NUMBER;
11:21:58 1591  var_offer_chain_id	     NUMBER;
11:21:58 1592  var_current_offer_rec_number  NUMBER;
11:21:58 1593  var_next_offers_set	     SYS_REFCURSOR;
11:21:58 1594  var_next_offer_duration	     VARCHAR2(30);
11:21:58 1595  var_next_offer_recur	     NUMBER;
11:21:58 1596  var_infinity_offers_number    NUMBER;
11:21:58 1597  
11:21:58 1598  var_result_date DATE;
11:21:58 1599  
11:21:58 1600  var_ym_interval	INTERVAL YEAR TO MONTH;
11:21:58 1601  var_ds_interval	INTERVAL DAY(3) TO SECOND;
11:21:58 1602  var_offer_years	NUMBER;
11:21:58 1603  var_offer_months NUMBER;
11:21:58 1604  var_offer_days	NUMBER;
11:21:58 1605  
11:21:58 1606  -- EXCEPTIONS
11:21:58 1607  BAD_SUBSCRIPTION_ID	  EXCEPTION;
11:21:58 1608  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
11:21:58 1609  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
11:21:58 1610  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
11:21:58 1611  EXCEPTION_MESSAGE	  VARCHAR2(1024);
11:21:58 1612  BEGIN
11:21:58 1613  
11:21:58 1614  	 BEGIN
11:21:58 1615  	   SELECT
11:21:58 1616  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
11:21:58 1617  	   FROM
11:21:58 1618  	     SUBSCRIPTION
11:21:58 1619  	   WHERE
11:21:58 1620  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1621  	   EXCEPTION
11:21:58 1622  	     WHEN NO_DATA_FOUND THEN
11:21:58 1623  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1624  	 END;
11:21:58 1625  
11:21:58 1626  	 BEGIN
11:21:58 1627  	   SELECT
11:21:58 1628  	     ID into var_last_license_id
11:21:58 1629  	   FROM
11:21:58 1630  	     (
11:21:58 1631  	       SELECT
11:21:58 1632  		 LICENSE.ID
11:21:58 1633  	       FROM
11:21:58 1634  		 LICENSE
11:21:58 1635  	       WHERE
11:21:58 1636  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
11:21:58 1637  	       ORDER BY
11:21:58 1638  		 LICENSE.END_DATE DESC
11:21:58 1639  	     )
11:21:58 1640  	   WHERE
11:21:58 1641  	     ROWNUM <= 1;
11:21:58 1642  	   EXCEPTION
11:21:58 1643  	     WHEN NO_DATA_FOUND THEN
11:21:58 1644  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
11:21:58 1645  	 END;
11:21:58 1646  
11:21:58 1647  	 SELECT
11:21:58 1648  	   COUNT(*) into var_infinity_offers_number
11:21:58 1649  	 FROM
11:21:58 1650  	   OFFER_OFFER_CHAIN
11:21:58 1651  	 WHERE
11:21:58 1652  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
11:21:58 1653  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V15.OFFER_REC_INFINITY;
11:21:58 1654  
11:21:58 1655  	 IF var_infinity_offers_number > 0 THEN
11:21:58 1656  	   RETURN NULL;
11:21:58 1657  	 END IF;
11:21:58 1658  
11:21:58 1659  	 BEGIN
11:21:58 1660  	   SELECT
11:21:58 1661  	     LICENSE.ID,
11:21:58 1662  	     LICENSE.END_DATE,
11:21:58 1663  	     LICENSE.CURRENT_OFFER_INDEX,
11:21:58 1664  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 1665  	     LICENSE.OFFER_ID
11:21:58 1666  	     into
11:21:58 1667  	     last_license_id,
11:21:58 1668  	     last_license_end_date,
11:21:58 1669  	     last_license_offer_index,
11:21:58 1670  	     last_license_offer_recurr_num,
11:21:58 1671  	     last_license_offer_id
11:21:58 1672  	   FROM
11:21:58 1673  	     LICENSE
11:21:58 1674  	   WHERE
11:21:58 1675  	     LICENSE.ID = var_last_license_id;
11:21:58 1676  	   EXCEPTION
11:21:58 1677  	     WHEN NO_DATA_FOUND THEN
11:21:58 1678  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
11:21:58 1679  	 END;
11:21:58 1680  
11:21:58 1681  	 var_result_date := last_license_end_date;
11:21:58 1682  
11:21:58 1683  	 -- Find current recurrence number
11:21:58 1684  	 SELECT
11:21:58 1685  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
11:21:58 1686  	 FROM
11:21:58 1687  	   OFFER_OFFER_CHAIN
11:21:58 1688  	 WHERE
11:21:58 1689  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
11:21:58 1690  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
11:21:58 1691  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
11:21:58 1692  
11:21:58 1693  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
11:21:58 1694  	   BEGIN
11:21:58 1695  	     PROCS_OFFER_CHAIN_V15.GET_OFFER_LENGTH(
11:21:58 1696  	       last_license_offer_id,
11:21:58 1697  	       var_offer_years,
11:21:58 1698  	       var_offer_months,
11:21:58 1699  	       var_offer_days
11:21:58 1700  	     );
11:21:58 1701  
11:21:58 1702  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
11:21:58 1703  	     var_ds_interval := var_offer_days||' 0:0:0';
11:21:58 1704  
11:21:58 1705  	     var_result_date := var_result_date
11:21:58 1706  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
11:21:58 1707  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
11:21:58 1708  	     EXCEPTION
11:21:58 1709  	       WHEN OTHERS THEN
11:21:58 1710  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1711  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
11:21:58 1712  	   END;
11:21:58 1713  	 END IF;
11:21:58 1714  
11:21:58 1715  	 OPEN var_next_offers_set FOR
11:21:58 1716  	 SELECT
11:21:58 1717  	   OFFER.ENTITLEMENT_DURATION,
11:21:58 1718  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
11:21:58 1719  	 FROM
11:21:58 1720  	   OFFER_OFFER_CHAIN
11:21:58 1721  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
11:21:58 1722  	 WHERE
11:21:58 1723  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
11:21:58 1724  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
11:21:58 1725  
11:21:58 1726  	 LOOP
11:21:58 1727  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
11:21:58 1728  	   EXIT WHEN var_next_offers_set%NOTFOUND;
11:21:58 1729  	   BEGIN
11:21:58 1730  	     PROCS_COMMON_V15.ISO8601DURATION_TO_INTERVALS(
11:21:58 1731  	       var_next_offer_duration,
11:21:58 1732  	       var_offer_years,
11:21:58 1733  	       var_offer_months,
11:21:58 1734  	       var_offer_days
11:21:58 1735  	     );
11:21:58 1736  
11:21:58 1737  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
11:21:58 1738  	     var_ds_interval := var_offer_days||' 0:0:0';
11:21:58 1739  
11:21:58 1740  	     var_result_date := var_result_date
11:21:58 1741  	       + ( var_ym_interval * var_next_offer_recur )
11:21:58 1742  	       + ( var_ds_interval * var_next_offer_recur );
11:21:58 1743  	     EXCEPTION
11:21:58 1744  	       WHEN OTHERS THEN
11:21:58 1745  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1746  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
11:21:58 1747  	   END;
11:21:58 1748  	 END LOOP;
11:21:58 1749  
11:21:58 1750  	 RETURN var_result_date;
11:21:58 1751  
11:21:58 1752  EXCEPTION
11:21:58 1753  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1754  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1755  	   SPROC_NAME, 'No such subscription');
11:21:58 1756  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
11:21:58 1757  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1758  	   SPROC_NAME, 'Could not find last license for given subscription');
11:21:58 1759  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
11:21:58 1760  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1761  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
11:21:58 1762  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
11:21:58 1763  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1764  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
11:21:58 1765  WHEN OTHERS THEN
11:21:58 1766  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1767  	   SPROC_NAME, 'Unkown error', SQLERRM);
11:21:58 1768  END CALC_SUBSCRIPTION_END_DATE;
11:21:58 1769  
11:21:58 1770  /******************************************************************************/
11:21:58 1771  
11:21:58 1772  PROCEDURE HAS_FUTURE_LICENSE (
11:21:58 1773  /*
11:21:58 1774  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1775  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1776  --
11:21:58 1777  RETURNS:
11:21:58 1778  GLOBAL_CONSTANTS_V15.TRUE - if has,
11:21:58 1779  GLOBAL_CONSTANTS_V15.FALSE - else
11:21:58 1780  */
11:21:58 1781  	 in_license_id IN  NUMBER,
11:21:58 1782  	 out_result    OUT NUMBER
11:21:58 1783  ) AS
11:21:58 1784  -- VARIABLES
11:21:58 1785  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
11:21:58 1786  var_subscription_id	 NUMBER;
11:21:58 1787  var_future_licenses_count NUMBER;
11:21:58 1788  -- EXCEPTIONS
11:21:58 1789  BAD_LICENSE_ID	    EXCEPTION;
11:21:58 1790  BEGIN
11:21:58 1791  
11:21:58 1792  	 BEGIN
11:21:58 1793  	   SELECT
11:21:58 1794  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
11:21:58 1795  	   FROM
11:21:58 1796  	     LICENSE
11:21:58 1797  	   WHERE
11:21:58 1798  	     LICENSE.ID = in_license_id;
11:21:58 1799  	   EXCEPTION
11:21:58 1800  	     WHEN NO_DATA_FOUND THEN
11:21:58 1801  	       RAISE BAD_LICENSE_ID;
11:21:58 1802  	 END;
11:21:58 1803  
11:21:58 1804  	 SELECT
11:21:58 1805  	   COUNT(*) into var_future_licenses_count
11:21:58 1806  	 FROM
11:21:58 1807  	   LICENSE
11:21:58 1808  	 WHERE
11:21:58 1809  	   LICENSE.ID != in_license_id
11:21:58 1810  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
11:21:58 1811  	   AND LICENSE.END_DATE > sysdate;
11:21:58 1812  
11:21:58 1813  	 IF var_future_licenses_count > 0 THEN
11:21:58 1814  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 1815  	 ELSE
11:21:58 1816  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 1817  	 END IF;
11:21:58 1818  
11:21:58 1819  EXCEPTION
11:21:58 1820  WHEN BAD_LICENSE_ID THEN
11:21:58 1821  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1822  	   SPROC_NAME, 'No such license');
11:21:58 1823  WHEN OTHERS THEN
11:21:58 1824  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1825  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1826  END HAS_FUTURE_LICENSE;
11:21:58 1827  
11:21:58 1828  /******************************************************************************/
11:21:58 1829  
11:21:58 1830  PROCEDURE CLOSE_SUBSCRIPTION (
11:21:58 1831  	 in_subscription_id IN NUMBER,
11:21:58 1832  	 in_updated_by	    IN VARCHAR2
11:21:58 1833  ) AS
11:21:58 1834  -- VARIABLES
11:21:58 1835  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
11:21:58 1836  temp_subscription_id NUMBER;
11:21:58 1837  var_licenses_count   NUMBER;
11:21:58 1838  -- EXCEPTIONS
11:21:58 1839  BAD_SUBSCRIPTION_ID    EXCEPTION;
11:21:58 1840  ACTIVE_LICENSES_FOUND  EXCEPTION;
11:21:58 1841  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 1842  BEGIN
11:21:58 1843  
11:21:58 1844  	 BEGIN
11:21:58 1845  	   SELECT
11:21:58 1846  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 1847  	   FROM
11:21:58 1848  	     SUBSCRIPTION
11:21:58 1849  	   WHERE
11:21:58 1850  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1851  	   EXCEPTION
11:21:58 1852  	     WHEN NO_DATA_FOUND THEN
11:21:58 1853  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1854  	 END;
11:21:58 1855  
11:21:58 1856  	 SELECT
11:21:58 1857  	   COUNT(*) into var_licenses_count
11:21:58 1858  	 FROM
11:21:58 1859  	   LICENSE
11:21:58 1860  	 WHERE
11:21:58 1861  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
11:21:58 1862  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE;
11:21:58 1863  
11:21:58 1864  	 IF var_licenses_count > 0 THEN
11:21:58 1865  	   RAISE ACTIVE_LICENSES_FOUND;
11:21:58 1866  	 END IF;
11:21:58 1867  
11:21:58 1868  	 PROCS_SUBSCRIPTION_V15.UPDATE_SUBSCRIPTION_STATUS(
11:21:58 1869  	   in_subscription_id	     => in_subscription_id,
11:21:58 1870  	   in_updated_by	     => in_updated_by,
11:21:58 1871  	   in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
11:21:58 1872  	 );
11:21:58 1873  
11:21:58 1874  EXCEPTION
11:21:58 1875  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1876  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1877  	   SPROC_NAME, 'No such subscription');
11:21:58 1878  WHEN ACTIVE_LICENSES_FOUND THEN
11:21:58 1879  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 1880  	   SPROC_NAME, 'Active licenses found');
11:21:58 1881  WHEN OTHERS THEN
11:21:58 1882  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1883  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1884  END CLOSE_SUBSCRIPTION;
11:21:58 1885  
11:21:58 1886  /******************************************************************************/
11:21:58 1887  
11:21:58 1888  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
11:21:58 1889  	 in_subscription_id IN NUMBER,
11:21:58 1890  	 out_group_id	    OUT NUMBER
11:21:58 1891  ) AS
11:21:58 1892  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
11:21:58 1893  BEGIN
11:21:58 1894  	 SELECT
11:21:58 1895  	   ACCOUNT.GROUP_ID into out_group_id
11:21:58 1896  	 FROM
11:21:58 1897  	   SUBSCRIPTION
11:21:58 1898  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 1899  	 WHERE
11:21:58 1900  	   SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1901  EXCEPTION
11:21:58 1902  WHEN NO_DATA_FOUND THEN
11:21:58 1903  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1904  	   SPROC_NAME, 'No such subscription');
11:21:58 1905  WHEN OTHERS THEN
11:21:58 1906  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1907  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1908  END GET_GROUP_ID_BY_SBSCRPTN_ID;
11:21:58 1909  
11:21:58 1910  /******************************************************************************/
11:21:58 1911  
11:21:58 1912  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
11:21:58 1913  /*
11:21:58 1914  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1915  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1916  */
11:21:58 1917  	 in_subscription_id IN NUMBER,
11:21:58 1918  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 1919  ) AS
11:21:58 1920  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
11:21:58 1921  -- VARIABLES
11:21:58 1922  var_offer_chain NUMBER;
11:21:58 1923  -- EXCEPTIONS
11:21:58 1924  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 1925  BEGIN
11:21:58 1926  	 BEGIN
11:21:58 1927  	   SELECT
11:21:58 1928  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
11:21:58 1929  	   FROM
11:21:58 1930  	     SUBSCRIPTION
11:21:58 1931  	   WHERE
11:21:58 1932  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 1933  	   EXCEPTION
11:21:58 1934  	     WHEN NO_DATA_FOUND THEN
11:21:58 1935  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 1936  	 END;
11:21:58 1937  
11:21:58 1938  	 OPEN out_result_set FOR
11:21:58 1939  	 SELECT DISTINCT
11:21:58 1940  	   PRODUCT.ID,
11:21:58 1941  	   PRODUCT.NAME
11:21:58 1942  	 FROM
11:21:58 1943  	   PRODUCT
11:21:58 1944  	 WHERE
11:21:58 1945  	   PRODUCT.ID IN (
11:21:58 1946  	     SELECT DISTINCT
11:21:58 1947  	       PRODUCT_OFFERING.PRODUCT_ID
11:21:58 1948  	     FROM
11:21:58 1949  	       PRODUCT_OFFERING
11:21:58 1950  	     WHERE
11:21:58 1951  	       PRODUCT_OFFERING.ID IN (
11:21:58 1952  		 SELECT DISTINCT
11:21:58 1953  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:58 1954  		 FROM
11:21:58 1955  		   OFFER_PRODUCT_OFFERING
11:21:58 1956  		 WHERE
11:21:58 1957  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:58 1958  		     SELECT DISTINCT
11:21:58 1959  		       OFFER_OFFER_CHAIN.OFFER_ID
11:21:58 1960  		     FROM
11:21:58 1961  		       OFFER_OFFER_CHAIN
11:21:58 1962  		     WHERE
11:21:58 1963  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
11:21:58 1964  		   )
11:21:58 1965  	       )
11:21:58 1966  	   );
11:21:58 1967  
11:21:58 1968  EXCEPTION
11:21:58 1969  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 1970  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1971  	   SPROC_NAME, 'No such subscription');
11:21:58 1972  WHEN OTHERS THEN
11:21:58 1973  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1974  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1975  END GET_SUBSCRIPTION_PRODUCTS;
11:21:58 1976  
11:21:58 1977  /******************************************************************************/
11:21:58 1978  
11:21:58 1979  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
11:21:58 1980  /*
11:21:58 1981  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 1982  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1983  */
11:21:58 1984  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
11:21:58 1985  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
11:21:58 1986  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:58 1987  ) AS
11:21:58 1988  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
11:21:58 1989  -- VARIABLES
11:21:58 1990  temp_charge_id CHARGE.ID%TYPE;
11:21:58 1991  -- EXCEPTIONS
11:21:58 1992  BAD_SUBSCRIPTION_ID    EXCEPTION;
11:21:58 1993  BAD_STATUS_ID	      EXCEPTION;
11:21:58 1994  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 1995  BEGIN
11:21:58 1996  
11:21:58 1997  	 IF in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 1998  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:58 1999  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED
11:21:58 2000  	   AND in_subscription_status_id != GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED THEN
11:21:58 2001  	   RAISE BAD_STATUS_ID;
11:21:58 2002  	 END IF;
11:21:58 2003  
11:21:58 2004  	 PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
11:21:58 2005  	   in_subscription_id	     => in_subscription_id,
11:21:58 2006  	   in_subscription_status_id => in_subscription_status_id,
11:21:58 2007  	   in_updated_by	     => in_updated_by
11:21:58 2008  	 );
11:21:58 2009  
11:21:58 2010  	 IF SQL%ROWCOUNT = 0 THEN
11:21:58 2011  	   RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2012  	 END IF;
11:21:58 2013  
11:21:58 2014  EXCEPTION
11:21:58 2015  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2016  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2017  	   SPROC_NAME, 'No such subscription');
11:21:58 2018  WHEN BAD_STATUS_ID THEN
11:21:58 2019  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 2020  	   SPROC_NAME, 'Bad status id');
11:21:58 2021  WHEN OTHERS THEN
11:21:58 2022  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2023  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2024  END UPDATE_SUBSCRIPTION_STATUS;
11:21:58 2025  
11:21:58 2026  /******************************************************************************/
11:21:58 2027  
11:21:58 2028  PROCEDURE GET_ACTIVE_INVOICES_IDS (
11:21:58 2029  /*
11:21:58 2030  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2031  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2032  */
11:21:58 2033  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
11:21:58 2034  	 in_subscription_id IN NUMBER,
11:21:58 2035  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 2036  ) AS
11:21:58 2037  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
11:21:58 2038  -- VARIABLES
11:21:58 2039  temp_subscription_id SUBSCRIPTION.ID%TYPE;
11:21:58 2040  -- EXCEPTIONS
11:21:58 2041  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2042  BEGIN
11:21:58 2043  
11:21:58 2044  	 BEGIN
11:21:58 2045  	   SELECT
11:21:58 2046  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 2047  	   FROM
11:21:58 2048  	     SUBSCRIPTION
11:21:58 2049  	   WHERE
11:21:58 2050  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 2051  	   EXCEPTION
11:21:58 2052  	     WHEN NO_DATA_FOUND THEN
11:21:58 2053  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2054  	 END;
11:21:58 2055  
11:21:58 2056  	 OPEN out_result_set FOR
11:21:58 2057  	 SELECT DISTINCT
11:21:58 2058  	   LICENSE.INVOICE_ID as "ID"
11:21:58 2059  	 FROM
11:21:58 2060  	   LICENSE
11:21:58 2061  	 WHERE
11:21:58 2062  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2063  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
11:21:58 2064  
11:21:58 2065  EXCEPTION
11:21:58 2066  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2067  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2068  	   SPROC_NAME, 'No such subscription');
11:21:58 2069  WHEN OTHERS THEN
11:21:58 2070  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2071  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2072  END GET_ACTIVE_INVOICES_IDS;
11:21:58 2073  
11:21:58 2074  /******************************************************************************/
11:21:58 2075  
11:21:58 2076  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
11:21:58 2077  /*
11:21:58 2078  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2079  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2080  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 2081  */
11:21:58 2082  	 in_invoice_id	      IN NUMBER,
11:21:58 2083  	 in_updated_by	      IN VARCHAR2,
11:21:58 2084  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:58 2085  ) AS
11:21:58 2086  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
11:21:58 2087  -- VARIABLES
11:21:58 2088  temp_invoice_id	      INVOICE.ID%TYPE;
11:21:58 2089  var_chargeback_amount  NUMBER(10,2);
11:21:58 2090  ver_refund_charge_id   NUMBER;
11:21:58 2091  -- EXCEPTIONS
11:21:58 2092  BAD_INVOICE_ID		    EXCEPTION;
11:21:58 2093  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
11:21:58 2094  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
11:21:58 2095  EXCEPTION_MESSAGE	    VARCHAR2(1024);
11:21:58 2096  -- STUB
11:21:58 2097  var_now DATE;
11:21:58 2098  var_revoke NUMBER;
11:21:58 2099  var_refund NUMBER;
11:21:58 2100  var_billed NUMBER;
11:21:58 2101  BEGIN
11:21:58 2102  
11:21:58 2103  	 var_now := sysdate;
11:21:58 2104  
11:21:58 2105  	 -- Check that invoice exists
11:21:58 2106  	 BEGIN
11:21:58 2107  	   SELECT
11:21:58 2108  	     INVOICE.ID into temp_invoice_id
11:21:58 2109  	   FROM
11:21:58 2110  	     INVOICE
11:21:58 2111  	   WHERE
11:21:58 2112  	     INVOICE.ID = in_invoice_id;
11:21:58 2113  	   EXCEPTION
11:21:58 2114  	     WHEN NO_DATA_FOUND THEN
11:21:58 2115  	       RAISE BAD_INVOICE_ID;
11:21:58 2116  	 END;
11:21:58 2117  
11:21:58 2118  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V15.FALSE, GLOBAL_CONSTANTS_V15.TRUE) into var_revoke
11:21:58 2119  	 from license l, subscription s, offer_chain oc
11:21:58 2120  	 where
11:21:58 2121  	   l.subscription_id = s.id and
11:21:58 2122  	   s.offer_chain_id = oc.id and
11:21:58 2123  	   l.invoice_id = in_invoice_id and
11:21:58 2124  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V15.TRUE and
11:21:58 2125  	   rownum < 2;
11:21:58 2126  
11:21:58 2127  	 var_billed := PROCS_INVOICE_V15.IS_INVOICE_PAYING_STARTED(in_invoice_id);
11:21:58 2128  	 var_refund := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 2129  
11:21:58 2130  	 -- Check that transaction for given invoice not started
11:21:58 2131  	 -- if refund enabled calculate and apply chargeback
11:21:58 2132  	 IF (
11:21:58 2133  	     var_billed = GLOBAL_CONSTANTS_V15.TRUE
11:21:58 2134  	   )THEN
11:21:58 2135  	   if (in_refundable = GLOBAL_CONSTANTS_V15.TRUE) then
11:21:58 2136  	     -- If started then we need to calculate refund
11:21:58 2137  	     BEGIN
11:21:58 2138  	       PROCS_INVOICE_V15.CALCULATE_INVOICE_CHARGEBACK(
11:21:58 2139  		 in_invoice_id,
11:21:58 2140  		 var_now,
11:21:58 2141  		 var_chargeback_amount
11:21:58 2142  	       );
11:21:58 2143  	       EXCEPTION
11:21:58 2144  		 WHEN OTHERS THEN
11:21:58 2145  		   EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2146  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
11:21:58 2147  	     END;
11:21:58 2148  	     IF var_chargeback_amount > 0 THEN
11:21:58 2149  	       BEGIN
11:21:58 2150  		 PROCS_INVOICE_V15.APPLY_REFUND(
11:21:58 2151  		   in_invoice_id,
11:21:58 2152  		   var_chargeback_amount,
11:21:58 2153  		   in_updated_by,
11:21:58 2154  		   ver_refund_charge_id
11:21:58 2155  		 );
11:21:58 2156  		 EXCEPTION
11:21:58 2157  		   WHEN OTHERS THEN
11:21:58 2158  		     EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2159  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
11:21:58 2160  	       END;
11:21:58 2161  	       var_refund := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 2162  	     END IF;
11:21:58 2163  	   end if;
11:21:58 2164  	 ELSE
11:21:58 2165  
11:21:58 2166  	   FOR f_transaction_to_close IN (
11:21:58 2167  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 2168  	   )
11:21:58 2169  	   LOOP
11:21:58 2170  	     PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
11:21:58 2171  	       in_transaction_id	=> f_transaction_to_close.ID,
11:21:58 2172  	       in_updated_by		=> in_updated_by,
11:21:58 2173  	       in_transaction_status_id => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
11:21:58 2174  	     );
11:21:58 2175  	   END LOOP;
11:21:58 2176  	   -- Needs to close charges. No refund.
11:21:58 2177  	   FOR f_charge_to_close IN (
11:21:58 2178  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 2179  	   )
11:21:58 2180  	   LOOP
11:21:58 2181  	     PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
11:21:58 2182  	       in_charge_id	   => f_charge_to_close.ID,
11:21:58 2183  	       in_updated_by	   => in_updated_by,
11:21:58 2184  	       in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
11:21:58 2185  	     );
11:21:58 2186  	   END LOOP;
11:21:58 2187  
11:21:58 2188  	   PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
11:21:58 2189  	     in_invoice_id		    => in_invoice_id,
11:21:58 2190  	     in_updated_by		    => in_updated_by,
11:21:58 2191  	     in_invoice_status_id	    => GLOBAL_STATUSES_V15.INVOICE_CLOSED
11:21:58 2192  	   );
11:21:58 2193  
11:21:58 2194  	 END IF;
11:21:58 2195  	 -- update licenses
11:21:58 2196  	 IF(var_revoke = GLOBAL_CONSTANTS_V15.TRUE OR var_chargeback_amount > 0 OR var_billed = GLOBAL_CONSTANTS_V15.FALSE) THEN
11:21:58 2197  	   FOR f_license_to_cancel IN (
11:21:58 2198  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2199  	   )
11:21:58 2200  	   LOOP
11:21:58 2201  	     PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 2202  	       in_license_id	     => f_license_to_cancel.ID,
11:21:58 2203  	       in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
11:21:58 2204  	       in_needs_entitlements => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 2205  	       in_updated_by	     => in_updated_by,
11:21:58 2206  	       in_entitlement_end_date => var_now
11:21:58 2207  	     );
11:21:58 2208  	   END LOOP;
11:21:58 2209  	 ELSE
11:21:58 2210  	   FOR f_license_to_cancel IN (
11:21:58 2211  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2212  	   )
11:21:58 2213  	   LOOP
11:21:58 2214  	     PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 2215  	       in_license_id	     => f_license_to_cancel.ID,
11:21:58 2216  	       in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
11:21:58 2217  	       in_updated_by	     => in_updated_by
11:21:58 2218  	     );
11:21:58 2219  	   END LOOP;
11:21:58 2220  	 END IF;
11:21:58 2221  
11:21:58 2222  
11:21:58 2223  EXCEPTION
11:21:58 2224  WHEN BAD_INVOICE_ID THEN
11:21:58 2225  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2226  	   SPROC_NAME, 'No such invoice');
11:21:58 2227  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
11:21:58 2228  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2229  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
11:21:58 2230  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
11:21:58 2231  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2232  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
11:21:58 2233  WHEN OTHERS THEN
11:21:58 2234  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2235  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2236  END CANCEL_SUBSCRIPTION_INVOICE;
11:21:58 2237  
11:21:58 2238  /******************************************************************************/
11:21:58 2239  
11:21:58 2240  PROCEDURE FINALIZE_CANCELATION (
11:21:58 2241  /*
11:21:58 2242  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2243  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2244  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 2245  */
11:21:58 2246  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
11:21:58 2247  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
11:21:58 2248  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:58 2249  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:58 2250  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:58 2251  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:58 2252  	 in_subscription_id    IN NUMBER,
11:21:58 2253  	 in_cancelation_reason IN VARCHAR2,
11:21:58 2254  	 in_cancelation_date   IN DATE,
11:21:58 2255  	 in_note	       IN VARCHAR2,
11:21:58 2256  	 in_agent_id	       IN NUMBER,
11:21:58 2257  	 in_updated_by	       IN VARCHAR2
11:21:58 2258  ) AS
11:21:58 2259  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
11:21:58 2260  -- VARIABLES
11:21:58 2261  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
11:21:58 2262  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
11:21:58 2263  var_active_invoices_count NUMBER;
11:21:58 2264  -- EXCEPTIONS
11:21:58 2265  BAD_SUBSCRIPTION_ID	   EXCEPTION;
11:21:58 2266  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
11:21:58 2267  BAD_CANCELATION_REASON	   EXCEPTION;
11:21:58 2268  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
11:21:58 2269  ACTIVE_INVOICES_FOUND	   EXCEPTION;
11:21:58 2270  CAN_NOT_CREATE_NOTE	   EXCEPTION;
11:21:58 2271  EXCEPTION_MESSAGE	   VARCHAR2(1024);
11:21:58 2272  BEGIN
11:21:58 2273  
11:21:58 2274  	 -- Get current subscription status
11:21:58 2275  	 BEGIN
11:21:58 2276  	   SELECT
11:21:58 2277  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
11:21:58 2278  	   FROM
11:21:58 2279  	     SUBSCRIPTION
11:21:58 2280  	   WHERE
11:21:58 2281  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 2282  	   EXCEPTION
11:21:58 2283  	     WHEN NO_DATA_FOUND THEN
11:21:58 2284  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2285  	 END;
11:21:58 2286  
11:21:58 2287  	 -- Check that subscription reason is correct
11:21:58 2288  	 BEGIN
11:21:58 2289  	   SELECT
11:21:58 2290  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
11:21:58 2291  	   FROM
11:21:58 2292  	     SUBSCRIPTION_CANCEL_REASON
11:21:58 2293  	   WHERE
11:21:58 2294  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
11:21:58 2295  	     AND ROWNUM <= 1;
11:21:58 2296  	   EXCEPTION
11:21:58 2297  	     WHEN NO_DATA_FOUND THEN
11:21:58 2298  	       RAISE BAD_CANCELATION_REASON;
11:21:58 2299  	 END;
11:21:58 2300  
11:21:58 2301  	 -- Check for invoices with active licenses
11:21:58 2302  	 SELECT
11:21:58 2303  	   COUNT(*) into var_active_invoices_count
11:21:58 2304  	 FROM
11:21:58 2305  	   LICENSE
11:21:58 2306  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:58 2307  	 WHERE
11:21:58 2308  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2309  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
11:21:58 2310  
11:21:58 2311  	 IF var_active_invoices_count > 0 THEN
11:21:58 2312  	   RAISE ACTIVE_INVOICES_FOUND;
11:21:58 2313  	 END IF;
11:21:58 2314  
11:21:58 2315  	 -- Check that subscription is active
11:21:58 2316  	 IF var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 2317  	    AND var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
11:21:58 2318  	   RAISE BAD_SUBSCRIPTION_STATUS;
11:21:58 2319  	 END IF;
11:21:58 2320  
11:21:58 2321  	 -- Update subscription data
11:21:58 2322  	 BEGIN
11:21:58 2323  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
11:21:58 2324  	     in_subscription_id        => in_subscription_id,
11:21:58 2325  	     in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED,
11:21:58 2326  	     in_cancelation_date       => in_cancelation_date,
11:21:58 2327  	     in_updated_by	       => in_updated_by,
11:21:58 2328  	     in_sct_id		       => var_sct_id
11:21:58 2329  	   );
11:21:58 2330  	   EXCEPTION
11:21:58 2331  	     WHEN OTHERS THEN
11:21:58 2332  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2333  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
11:21:58 2334  	 END;
11:21:58 2335  
11:21:58 2336  	 -- Annotate subscription
11:21:58 2337  	 IF in_note IS NOT NULL THEN
11:21:58 2338  	   BEGIN
11:21:58 2339  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:58 2340  	       in_subscription_id,
11:21:58 2341  	       in_agent_id,
11:21:58 2342  	       in_note,
11:21:58 2343  	       in_updated_by
11:21:58 2344  	     );
11:21:58 2345  	     EXCEPTION
11:21:58 2346  	      WHEN OTHERS THEN
11:21:58 2347  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2348  		RAISE CAN_NOT_CREATE_NOTE;
11:21:58 2349  	   END;
11:21:58 2350  	 END IF;
11:21:58 2351  
11:21:58 2352  EXCEPTION
11:21:58 2353  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2354  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2355  	   SPROC_NAME, 'No such subscription');
11:21:58 2356  WHEN BAD_SUBSCRIPTION_STATUS THEN
11:21:58 2357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 2358  	   SPROC_NAME, 'Bad current subscription status');
11:21:58 2359  WHEN BAD_CANCELATION_REASON THEN
11:21:58 2360  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 2361  	   SPROC_NAME, 'Bad cancellation reason');
11:21:58 2362  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
11:21:58 2363  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2364  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
11:21:58 2365  WHEN ACTIVE_INVOICES_FOUND THEN
11:21:58 2366  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 2367  	   SPROC_NAME, 'Invoices with active licenses found');
11:21:58 2368  WHEN CAN_NOT_CREATE_NOTE THEN
11:21:58 2369  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2370  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
11:21:58 2371  WHEN OTHERS THEN
11:21:58 2372  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2373  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2374  END FINALIZE_CANCELATION;
11:21:58 2375  
11:21:58 2376  /******************************************************************************/
11:21:58 2377  
11:21:58 2378  PROCEDURE FINALIZE_FALSE_START (
11:21:58 2379  /*
11:21:58 2380  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2381  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2382  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:58 2383  */
11:21:58 2384  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
11:21:58 2385  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:58 2386  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:58 2387  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:58 2388  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:58 2389  	 in_subscription_id    IN NUMBER,
11:21:58 2390  	 in_cancelation_date   IN DATE,
11:21:58 2391  	 in_note	       IN VARCHAR2,
11:21:58 2392  	 in_agent_id	       IN NUMBER,
11:21:58 2393  	 in_updated_by	       IN VARCHAR2
11:21:58 2394  ) AS
11:21:58 2395  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
11:21:58 2396  FALSE_START_REASON CONSTANT NUMBER := 41;
11:21:58 2397  -- VARIABLES
11:21:58 2398  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
11:21:58 2399  var_active_invoices_count NUMBER;
11:21:58 2400  -- EXCEPTIONS
11:21:58 2401  BAD_SUBSCRIPTION_ID	   EXCEPTION;
11:21:58 2402  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
11:21:58 2403  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
11:21:58 2404  ACTIVE_INVOICES_FOUND	   EXCEPTION;
11:21:58 2405  CAN_NOT_CREATE_NOTE	   EXCEPTION;
11:21:58 2406  EXCEPTION_MESSAGE	   VARCHAR2(1024);
11:21:58 2407  BEGIN
11:21:58 2408  
11:21:58 2409  	 -- Get current subscription status
11:21:58 2410  	 BEGIN
11:21:58 2411  	   SELECT
11:21:58 2412  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
11:21:58 2413  	   FROM
11:21:58 2414  	     SUBSCRIPTION
11:21:58 2415  	   WHERE
11:21:58 2416  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 2417  	   EXCEPTION
11:21:58 2418  	     WHEN NO_DATA_FOUND THEN
11:21:58 2419  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2420  	 END;
11:21:58 2421  
11:21:58 2422  	 -- Check for invoices with active licenses
11:21:58 2423  	 SELECT
11:21:58 2424  	   COUNT(*) into var_active_invoices_count
11:21:58 2425  	 FROM
11:21:58 2426  	   LICENSE
11:21:58 2427  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:58 2428  	 WHERE
11:21:58 2429  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2430  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
11:21:58 2431  
11:21:58 2432  	 IF var_active_invoices_count > 0 THEN
11:21:58 2433  	   RAISE ACTIVE_INVOICES_FOUND;
11:21:58 2434  	 END IF;
11:21:58 2435  
11:21:58 2436  	 -- Check that subscription is active
11:21:58 2437  	 IF var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 2438  	    AND var_current_subscr_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED THEN
11:21:58 2439  	   RAISE BAD_SUBSCRIPTION_STATUS;
11:21:58 2440  	 END IF;
11:21:58 2441  
11:21:58 2442  	 -- Update subscription data
11:21:58 2443  	 BEGIN
11:21:58 2444  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
11:21:58 2445  	     in_subscription_id        => in_subscription_id,
11:21:58 2446  	     in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_FALSE_START,
11:21:58 2447  	     in_cancelation_date       => in_cancelation_date,
11:21:58 2448  	     in_updated_by	       => in_updated_by,
11:21:58 2449  	     in_sct_id		       => FALSE_START_REASON
11:21:58 2450  	   );
11:21:58 2451  	   EXCEPTION
11:21:58 2452  	     WHEN OTHERS THEN
11:21:58 2453  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2454  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
11:21:58 2455  	 END;
11:21:58 2456  
11:21:58 2457  	 -- Annotate subscription
11:21:58 2458  	 IF in_note IS NOT NULL THEN
11:21:58 2459  	   BEGIN
11:21:58 2460  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:58 2461  	       in_subscription_id,
11:21:58 2462  	       in_agent_id,
11:21:58 2463  	       in_note,
11:21:58 2464  	       in_updated_by
11:21:58 2465  	     );
11:21:58 2466  	     EXCEPTION
11:21:58 2467  	      WHEN OTHERS THEN
11:21:58 2468  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2469  		RAISE CAN_NOT_CREATE_NOTE;
11:21:58 2470  	   END;
11:21:58 2471  	 END IF;
11:21:58 2472  
11:21:58 2473  EXCEPTION
11:21:58 2474  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2475  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2476  	   SPROC_NAME, 'No such subscription');
11:21:58 2477  WHEN BAD_SUBSCRIPTION_STATUS THEN
11:21:58 2478  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 2479  	   SPROC_NAME, 'Bad current subscription status');
11:21:58 2480  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
11:21:58 2481  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2482  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
11:21:58 2483  WHEN ACTIVE_INVOICES_FOUND THEN
11:21:58 2484  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 2485  	   SPROC_NAME, 'Invoices with active licenses found');
11:21:58 2486  WHEN CAN_NOT_CREATE_NOTE THEN
11:21:58 2487  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2488  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
11:21:58 2489  WHEN OTHERS THEN
11:21:58 2490  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2491  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2492  END FINALIZE_FALSE_START;
11:21:58 2493  
11:21:58 2494  /******************************************************************************/
11:21:58 2495  
11:21:58 2496  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
11:21:58 2497  	 in_subscription_id IN NUMBER
11:21:58 2498  ) RETURN NUMBER AS
11:21:58 2499  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
11:21:58 2500  -- VARIABLES
11:21:58 2501  var_is_offer_chain_cancelable NUMBER;
11:21:58 2502  --64603
11:21:58 2503  var_end_date date;
11:21:58 2504  today_date date := current_date;
11:21:58 2505  offer_id number;
11:21:58 2506  -- EXCEPTIONS
11:21:58 2507  COULD_NOT_CHECK	   EXCEPTION;
11:21:58 2508  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2509  EXCEPTION_MESSAGE   VARCHAR2(1024);
11:21:58 2510  BEGIN
11:21:58 2511  
11:21:58 2512  	 BEGIN
11:21:58 2513  	   -- find offer_chain_id for given in_subscription_id
11:21:58 2514  	   SELECT OFFER_CHAIN_ID into offer_id
11:21:58 2515  	   FROM SUBSCRIPTION
11:21:58 2516  	   WHERE ID = in_subscription_id;
11:21:58 2517  	   EXCEPTION
11:21:58 2518  	     WHEN NO_DATA_FOUND THEN
11:21:58 2519  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2520  	     WHEN OTHERS THEN
11:21:58 2521  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 2522  	       RAISE COULD_NOT_CHECK;
11:21:58 2523  	 END;
11:21:58 2524  
11:21:58 2525  	 -- find if it was redeemed from a gift certificate
11:21:58 2526  	 BEGIN
11:21:58 2527  	   SELECT l.end_date INTO var_end_date
11:21:58 2528  	   FROM LICENSE l, GIFT_CERTIFICATE g
11:21:58 2529  	   WHERE l.invoice_id = g.finalized_invoice_id
11:21:58 2530  	   AND l.subscription_id = in_subscription_id;
11:21:58 2531  
11:21:58 2532  	   -- if the license end_date is bigger than today, we are in the
11:21:58 2533  	   -- first period, so we cannot cancel; otherwise can cancel
11:21:58 2534  	   IF var_end_date > today_date THEN
11:21:58 2535  	       RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 2536  	   ELSE
11:21:58 2537  	       RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 2538  	   END IF;
11:21:58 2539  
11:21:58 2540  	   EXCEPTION
11:21:58 2541  	       -- not coming from a gift certificate,
11:21:58 2542  	       -- use old logic
11:21:58 2543  	       WHEN NO_DATA_FOUND THEN
11:21:58 2544  		   SELECT
11:21:58 2545  		       PROCS_OFFER_CHAIN_V15.IS_OFFER_CHAIN_CANCELABLE(offer_id)
11:21:58 2546  		       INTO var_is_offer_chain_cancelable
11:21:58 2547  		   FROM DUAL;
11:21:58 2548  		   RETURN var_is_offer_chain_cancelable;
11:21:58 2549  	 END;
11:21:58 2550  
11:21:58 2551  EXCEPTION
11:21:58 2552  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2553  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2554  	   SPROC_NAME, 'No such subscription');
11:21:58 2555  WHEN COULD_NOT_CHECK THEN
11:21:58 2556  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 2557  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
11:21:58 2558  WHEN OTHERS THEN
11:21:58 2559  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2560  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2561  
11:21:58 2562  END IS_SUBSCRIPTION_CANCELABLE;
11:21:58 2563  /******************************************************************************/
11:21:58 2564  
11:21:58 2565  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
11:21:58 2566  /*
11:21:58 2567  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2568  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2569  */
11:21:58 2570  	 in_subscription_id IN NUMBER,
11:21:58 2571  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 2572  ) AS
11:21:58 2573  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
11:21:58 2574  -- VARIABLES
11:21:58 2575  var_offer NUMBER;
11:21:58 2576  -- EXCEPTIONS
11:21:58 2577  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2578  BEGIN
11:21:58 2579  
11:21:58 2580  	 OPEN out_result_set FOR
11:21:58 2581  	 SELECT DISTINCT
11:21:58 2582  	   PRODUCT_OFFERING.ID,
11:21:58 2583  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:58 2584  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:58 2585  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:58 2586  	   PRODUCT_OFFERING.QUANTITY,
11:21:58 2587  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:58 2588  	   PRODUCT_OFFERING.CREATED_BY,
11:21:58 2589  	   CAPABILITY.ID CAP_ID,
11:21:58 2590  	   CAPABILITY.CODE CAP_CODE,
11:21:58 2591  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:58 2592  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:58 2593  	 FROM
11:21:58 2594  	   OFFER_PRODUCT_OFFERING
11:21:58 2595  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:58 2596  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:58 2597  	 WHERE
11:21:58 2598  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:58 2599  	     SELECT
11:21:58 2600  	       LICENSE.OFFER_ID
11:21:58 2601  	     FROM
11:21:58 2602  	       SUBSCRIPTION
11:21:58 2603  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE
11:21:58 2604  	     WHERE
11:21:58 2605  	       SUBSCRIPTION.ID = in_subscription_id
11:21:58 2606  	   );
11:21:58 2607  
11:21:58 2608  EXCEPTION
11:21:58 2609  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2610  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2611  	   SPROC_NAME, 'No such subscription');
11:21:58 2612  WHEN OTHERS THEN
11:21:58 2613  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2614  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2615  END GET_SUBSCR_PROD_OFFERRINGS;
11:21:58 2616  
11:21:58 2617  
11:21:58 2618  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
11:21:58 2619  /*
11:21:58 2620  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2621  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2622  */
11:21:58 2623  	 in_subscription_id IN NUMBER,
11:21:58 2624  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 2625  ) AS
11:21:58 2626  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
11:21:58 2627  -- VARIABLES
11:21:58 2628  var_offer NUMBER;
11:21:58 2629  -- EXCEPTIONS
11:21:58 2630  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2631  BEGIN
11:21:58 2632  
11:21:58 2633  	 OPEN out_result_set FOR
11:21:58 2634  	 SELECT DISTINCT
11:21:58 2635  	   PRODUCT_OFFERING.ID,
11:21:58 2636  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:58 2637  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:58 2638  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:58 2639  	   PRODUCT_OFFERING.QUANTITY,
11:21:58 2640  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:58 2641  	   PRODUCT_OFFERING.CREATED_BY,
11:21:58 2642  	   CAPABILITY.ID CAP_ID,
11:21:58 2643  	   CAPABILITY.CODE CAP_CODE,
11:21:58 2644  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:58 2645  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:58 2646  	 FROM
11:21:58 2647  	   OFFER_PRODUCT_OFFERING
11:21:58 2648  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:58 2649  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:58 2650  	 WHERE
11:21:58 2651  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:58 2652  	     SELECT
11:21:58 2653  	       LICENSE.OFFER_ID
11:21:58 2654  	     FROM
11:21:58 2655  	       SUBSCRIPTION
11:21:58 2656  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 2657  	     WHERE
11:21:58 2658  	       SUBSCRIPTION.ID = in_subscription_id
11:21:58 2659  	   );
11:21:58 2660  
11:21:58 2661  EXCEPTION
11:21:58 2662  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2663  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2664  	   SPROC_NAME, 'No such subscription');
11:21:58 2665  WHEN OTHERS THEN
11:21:58 2666  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2667  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2668  END RETRIEVE_SUB_PROD_OFFER;
11:21:58 2669  /******************************************************************************/
11:21:58 2670  
11:21:58 2671  
11:21:58 2672  
11:21:58 2673  
11:21:58 2674  PROCEDURE GET_SUBSCR_LIC_OFFER(
11:21:58 2675  /*
11:21:58 2676  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2677  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2678  */
11:21:58 2679  	 in_subscription_id IN NUMBER,
11:21:58 2680  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 2681  ) AS
11:21:58 2682  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
11:21:58 2683  -- VARIABLES
11:21:58 2684  var_offer_chain NUMBER;
11:21:58 2685  -- EXCEPTIONS
11:21:58 2686  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2687  BEGIN
11:21:58 2688  	 BEGIN
11:21:58 2689  	   SELECT
11:21:58 2690  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
11:21:58 2691  	   FROM
11:21:58 2692  	     SUBSCRIPTION
11:21:58 2693  	   WHERE
11:21:58 2694  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 2695  	   EXCEPTION
11:21:58 2696  	     WHEN NO_DATA_FOUND THEN
11:21:58 2697  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2698  	 END;
11:21:58 2699  
11:21:58 2700  	 OPEN out_result_set FOR
11:21:58 2701  	 SELECT DISTINCT
11:21:58 2702  	   po.ID po_id,
11:21:58 2703  	   po.PRODUCT_ID po_product_id,
11:21:58 2704  	   po.TAX_CATEGORY_ID po_tax_category_id,
11:21:58 2705  	   po.UNIT_PRICE po_unit_price,
11:21:58 2706  	   po.QUANTITY po_quantity,
11:21:58 2707  	   po.CREATE_DATE po_create_date,
11:21:58 2708  	   po.CREATED_BY po_created_by,
11:21:58 2709  	   l.ID l_id,
11:21:58 2710  	   l.license_status_id l_license_status_id,
11:21:58 2711  	   l.start_date l_start_date,
11:21:58 2712  	   l.offer_id l_offer_id,
11:21:58 2713  	   l.subscription_id l_subscription_id,
11:21:58 2714  	   l.invoice_id l_invoice_id,
11:21:58 2715  	   l.end_date l_end_date,
11:21:58 2716  	   l.entitlement_end_date l_entitlement_end_date,
11:21:58 2717  	   l.create_date l_create_date,
11:21:58 2718  	   l.created_by l_created_by,
11:21:58 2719  	   l.is_extension l_is_extension,
11:21:58 2720  	   l.current_offer_index l_current_offer_index,
11:21:58 2721  	   l.current_offer_recurr_num l_current_offer_recurr_num,
11:21:58 2722  	   l.needs_entitlements l_needs_entitlements
11:21:58 2723  	 FROM
11:21:58 2724  	   OFFER_PRODUCT_OFFERING opo,
11:21:58 2725  	   PRODUCT_OFFERING po,
11:21:58 2726  	   SUBSCRIPTION s,
11:21:58 2727  	   LICENSE l
11:21:58 2728  	 WHERE
11:21:58 2729  	   opo.product_offering_id = po.id
11:21:58 2730  	   and po.id = l.offer_id
11:21:58 2731  	   and l.subscription_id = s.id
11:21:58 2732  	   and l.license_status_id = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 2733  	   and s.id = in_subscription_id
11:21:58 2734  	 ;
11:21:58 2735  EXCEPTION
11:21:58 2736  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2737  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2738  	   SPROC_NAME, 'No such subscription');
11:21:58 2739  WHEN OTHERS THEN
11:21:58 2740  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2741  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2742  END GET_SUBSCR_LIC_OFFER;
11:21:58 2743  
11:21:58 2744  /******************************************************************************/
11:21:58 2745  
11:21:58 2746  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
11:21:58 2747  /*
11:21:58 2748  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2749  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2750  */
11:21:58 2751  	 in_subscription_id IN NUMBER,
11:21:58 2752  	 out_result	    OUT NUMBER
11:21:58 2753  ) AS
11:21:58 2754  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
11:21:58 2755  -- VARIABLES
11:21:58 2756  temp_subscription_id NUMBER;
11:21:58 2757  var_local_result     NUMBER;
11:21:58 2758  -- EXCEPTIONS
11:21:58 2759  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:58 2760  BEGIN
11:21:58 2761  
11:21:58 2762  	 -- Check that subscription exists
11:21:58 2763  	 BEGIN
11:21:58 2764  	   SELECT
11:21:58 2765  	     SUBSCRIPTION.ID into temp_subscription_id
11:21:58 2766  	   FROM
11:21:58 2767  	     SUBSCRIPTION
11:21:58 2768  	   WHERE
11:21:58 2769  	     SUBSCRIPTION.ID = in_subscription_id;
11:21:58 2770  	   EXCEPTION
11:21:58 2771  	     WHEN NO_DATA_FOUND THEN
11:21:58 2772  	       RAISE BAD_SUBSCRIPTION_ID;
11:21:58 2773  	 END;
11:21:58 2774  
11:21:58 2775  	 var_local_result := NULL;
11:21:58 2776  
11:21:58 2777  	 -- Check charges for each invoice associated with gived subscription
11:21:58 2778  	 FOR f_invoice IN (
11:21:58 2779  	   SELECT DISTINCT
11:21:58 2780  	     LICENSE.INVOICE_ID as "ID"
11:21:58 2781  	   FROM
11:21:58 2782  	     LICENSE
11:21:58 2783  	   WHERE
11:21:58 2784  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
11:21:58 2785  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.LICENSE_ACTIVE FROM DUAL )
11:21:58 2786  	 )
11:21:58 2787  	 LOOP
11:21:58 2788  
11:21:58 2789  	   -- Check each charge in invoice
11:21:58 2790  	   FOR f_charge IN (
11:21:58 2791  	     SELECT
11:21:58 2792  	       CHARGE.ID,
11:21:58 2793  	       CHARGE.CHARGE_STATUS_ID,
11:21:58 2794  	       CHARGE.CHARGE_AMOUNT
11:21:58 2795  	     FROM
11:21:58 2796  	       CHARGE
11:21:58 2797  	     WHERE
11:21:58 2798  	       CHARGE.INVOICE_ID = f_invoice.ID
11:21:58 2799  	   )
11:21:58 2800  	   LOOP
11:21:58 2801  
11:21:58 2802  	     -- Charge amount < 0     => it is a refund
11:21:58 2803  	     -- Charge status is OPEN => means that it is not processed yet
11:21:58 2804  	     IF f_charge.CHARGE_AMOUNT < 0
11:21:58 2805  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED THEN
11:21:58 2806  	       var_local_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 2807  	     END IF;
11:21:58 2808  
11:21:58 2809  	   END LOOP;
11:21:58 2810  
11:21:58 2811  	 END LOOP;
11:21:58 2812  
11:21:58 2813  	 IF var_local_result IS NULL THEN
11:21:58 2814  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 2815  	 ELSE
11:21:58 2816  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 2817  	 END IF;
11:21:58 2818  
11:21:58 2819  EXCEPTION
11:21:58 2820  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:58 2821  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2822  	   SPROC_NAME, 'No such transaction id');
11:21:58 2823  WHEN OTHERS THEN
11:21:58 2824  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2825  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2826  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
11:21:58 2827  
11:21:58 2828  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
11:21:58 2829  /*
11:21:58 2830  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2831  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2832  */
11:21:58 2833  	 in_group_id	    IN NUMBER,
11:21:58 2834  	 in_offer_chain_id  IN NUMBER,
11:21:58 2835  	 out_result	    OUT NUMBER
11:21:58 2836  ) AS
11:21:58 2837  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
11:21:58 2838  -- VARIABLES
11:21:58 2839  temp_acct_id	    NUMBER;
11:21:58 2840  temp_oc_id	    NUMBER;
11:21:58 2841  -- EXCEPTIONS
11:21:58 2842  BAD_GROUP_ID EXCEPTION;
11:21:58 2843  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:58 2844  BEGIN
11:21:58 2845  	 -- Check that group id exists
11:21:58 2846  	 BEGIN
11:21:58 2847  	   SELECT
11:21:58 2848  	     ACCOUNT.ID into temp_acct_id
11:21:58 2849  	   FROM
11:21:58 2850  	     ACCOUNT
11:21:58 2851  	   WHERE
11:21:58 2852  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:58 2853  	   EXCEPTION
11:21:58 2854  	     WHEN NO_DATA_FOUND THEN
11:21:58 2855  	       RAISE BAD_GROUP_ID;
11:21:58 2856  	 END;
11:21:58 2857  	 -- Check that offer chain id exists
11:21:58 2858  	 BEGIN
11:21:58 2859  	   SELECT
11:21:58 2860  	     OFFER_CHAIN.ID into temp_oc_id
11:21:58 2861  	   FROM
11:21:58 2862  	     OFFER_CHAIN
11:21:58 2863  	   WHERE
11:21:58 2864  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:58 2865  	   EXCEPTION
11:21:58 2866  	     WHEN NO_DATA_FOUND THEN
11:21:58 2867  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:58 2868  	 END;
11:21:58 2869  	 SELECT
11:21:58 2870  	   COUNT(*) into out_result
11:21:58 2871  	 FROM
11:21:58 2872  	   SUBSCRIPTION
11:21:58 2873  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 2874  	 WHERE
11:21:58 2875  	   ACCOUNT.GROUP_ID = in_group_id
11:21:58 2876  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
11:21:58 2877  	   AND (
11:21:58 2878  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 2879  	   );
11:21:58 2880  
11:21:58 2881  EXCEPTION
11:21:58 2882  WHEN BAD_GROUP_ID THEN
11:21:58 2883  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2884  	   SPROC_NAME, 'No such transaction id');
11:21:58 2885  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:58 2886  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2887  	   SPROC_NAME, 'No such offer chain id');
11:21:58 2888  WHEN OTHERS THEN
11:21:58 2889  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2890  	   sproc_name, 'Unknown error', sqlerrm);
11:21:58 2891  END GET_EXISTING_SUBSCR_NUMBER;
11:21:58 2892  
11:21:58 2893  PROCEDURE GET_EXISTING_SUBSCR_IDS (
11:21:58 2894  /*
11:21:58 2895  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2896  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2897  */
11:21:58 2898  	 in_group_id	    IN NUMBER,
11:21:58 2899  	 in_offer_chain_id  IN NUMBER,
11:21:58 2900  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 2901  ) AS
11:21:58 2902  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
11:21:58 2903  -- VARIABLES
11:21:58 2904  temp_acct_id	    NUMBER;
11:21:58 2905  temp_oc_id	    NUMBER;
11:21:58 2906  -- EXCEPTIONS
11:21:58 2907  BAD_GROUP_ID EXCEPTION;
11:21:58 2908  BAD_OFFER_CHAIN_ID EXCEPTION;
11:21:58 2909  BEGIN
11:21:58 2910  
11:21:58 2911  	 -- Check that group id exists
11:21:58 2912  	 BEGIN
11:21:58 2913  	   SELECT
11:21:58 2914  	     ACCOUNT.ID into temp_acct_id
11:21:58 2915  	   FROM
11:21:58 2916  	     ACCOUNT
11:21:58 2917  	   WHERE
11:21:58 2918  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:58 2919  	   EXCEPTION
11:21:58 2920  	     WHEN NO_DATA_FOUND THEN
11:21:58 2921  	       RAISE BAD_GROUP_ID;
11:21:58 2922  	 END;
11:21:58 2923  	 -- Check that offer chain id exists
11:21:58 2924  	 BEGIN
11:21:58 2925  	   SELECT
11:21:58 2926  	     OFFER_CHAIN.ID into temp_oc_id
11:21:58 2927  	   FROM
11:21:58 2928  	     OFFER_CHAIN
11:21:58 2929  	   WHERE
11:21:58 2930  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:58 2931  	   EXCEPTION
11:21:58 2932  	     WHEN NO_DATA_FOUND THEN
11:21:58 2933  	       RAISE BAD_OFFER_CHAIN_ID;
11:21:58 2934  	 END;
11:21:58 2935  
11:21:58 2936  	 OPEN out_result_set FOR
11:21:58 2937  	 SELECT
11:21:58 2938  	   SUBSCRIPTION.ID
11:21:58 2939  	 FROM
11:21:58 2940  	   SUBSCRIPTION
11:21:58 2941  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 2942  	 WHERE
11:21:58 2943  	   ACCOUNT.GROUP_ID = in_group_id
11:21:58 2944  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
11:21:58 2945  	   AND (
11:21:58 2946  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:58 2947  	   );
11:21:58 2948  
11:21:58 2949  EXCEPTION
11:21:58 2950  WHEN BAD_GROUP_ID THEN
11:21:58 2951  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2952  	   SPROC_NAME, 'No such transaction id');
11:21:58 2953  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:58 2954  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2955  	   SPROC_NAME, 'No such offer chain id');
11:21:58 2956  WHEN OTHERS THEN
11:21:58 2957  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2958  	   sproc_name, 'Unknown error', sqlerrm);
11:21:58 2959  END GET_EXISTING_SUBSCR_IDS;
11:21:58 2960  
11:21:58 2961  PROCEDURE ADD_META_DATA (
11:21:58 2962  /*
11:21:58 2963  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 2964  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 2965  */
11:21:58 2966  	 in_subscription_id IN NUMBER,
11:21:58 2967  	 in_name	    IN VARCHAR2,
11:21:58 2968  	 in_value	    IN VARCHAR2,
11:21:58 2969  	 in_created_by	    IN VARCHAR2
11:21:58 2970  ) AS
11:21:58 2971  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
11:21:58 2972  BEGIN
11:21:58 2973  
11:21:58 2974  	 INSERT INTO SUBSCRIPTION_META_DATA (
11:21:58 2975  	   ID,
11:21:58 2976  	   SUBSCRIPTION_ID,
11:21:58 2977  	   NAME,
11:21:58 2978  	   VALUE,
11:21:58 2979  	   CREATE_DATE,
11:21:58 2980  	   CREATED_BY
11:21:58 2981  	 ) VALUES (
11:21:58 2982  	   SUBMD_ID_SEQ.nextVal,
11:21:58 2983  	   in_subscription_id,
11:21:58 2984  	   in_name,
11:21:58 2985  	   in_value,
11:21:58 2986  	   sysdate,
11:21:58 2987  	   in_created_by
11:21:58 2988  	 );
11:21:58 2989  
11:21:58 2990  EXCEPTION
11:21:58 2991  WHEN OTHERS THEN
11:21:58 2992  	 IF SQLCODE = -2291 THEN
11:21:58 2993  	   PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2994  	     SPROC_NAME, 'No such subscription');
11:21:58 2995  	 ELSE
11:21:58 2996  	   PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2997  	     SPROC_NAME, 'Unknown error', sqlerrm);
11:21:58 2998  	 END IF;
11:21:58 2999  END ADD_META_DATA;
11:21:58 3000  
11:21:58 3001  /******************************************************************************/
11:21:58 3002  
11:21:58 3003  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
11:21:58 3004  /*
11:21:58 3005  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:58 3006  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 3007  */
11:21:58 3008  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
11:21:58 3009  	 out_result_set       OUT SYS_REFCURSOR
11:21:58 3010  ) AS
11:21:58 3011  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
11:21:58 3012  -- Exceptions
11:21:58 3013  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
11:21:58 3014  BEGIN
11:21:58 3015  
11:21:58 3016  	 IF in_subscriptions_ids IS NULL THEN
11:21:58 3017  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
11:21:58 3018  	 END IF;
11:21:58 3019  
11:21:58 3020  	 OPEN out_result_set FOR
11:21:58 3021  	 SELECT
11:21:58 3022  	   SMD.SUBSCRIPTION_ID,
11:21:58 3023  	   SMD.NAME,
11:21:58 3024  	   SMD.VALUE
11:21:58 3025  	 FROM
11:21:58 3026  	   SUBSCRIPTION_META_DATA SMD
11:21:58 3027  	 WHERE
11:21:58 3028  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
11:21:58 3029  
11:21:58 3030  EXCEPTION
11:21:58 3031  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
11:21:58 3032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 3033  	   SPROC_NAME, 'Bad subscription ids parameter');
11:21:58 3034  WHEN OTHERS THEN
11:21:58 3035  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 3036  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 3037  END GET_SUBSCRIPTIONS_META_DATA;
11:21:58 3038  
11:21:58 3039  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
11:21:58 3040  /*
11:21:58 3041  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 3042  */
11:21:58 3043  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
11:21:58 3044  	 out_result_set     OUT SYS_REFCURSOR
11:21:58 3045  ) AS
11:21:58 3046  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
11:21:58 3047  BEGIN
11:21:58 3048  	 OPEN out_result_set FOR
11:21:58 3049  	 SELECT subscription.id FROM
11:21:58 3050  	   subscription
11:21:58 3051  	 INNER JOIN license ON license.subscription_id = subscription.id
11:21:58 3052  	 INNER JOIN invoice ON invoice.id = license.invoice_id
11:21:58 3053  	 INNER JOIN charge ON invoice.id = charge.invoice_id
11:21:58 3054  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
11:21:58 3055  	 WHERE transaction.order_id = in_order_id;
11:21:58 3056  EXCEPTION
11:21:58 3057  WHEN OTHERS THEN
11:21:58 3058  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 3059  	   SPROC_NAME, 'Unknown error', sqlerrm);
11:21:58 3060  END GET_SUBS_BY_TRNS_ORDER_ID;
11:21:58 3061  
11:21:58 3062  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
11:21:58 3063  	(
11:21:58 3064  /*
11:21:58 3065  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 3066  */
11:21:58 3067  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:58 3068  	 out_result_set      OUT SYS_REFCURSOR
11:21:58 3069  )
11:21:58 3070  AS
11:21:58 3071  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
11:21:58 3072  BEGIN
11:21:58 3073  	 OPEN out_result_set FOR
11:21:58 3074  	 SELECT
11:21:58 3075  	   c.ID,
11:21:58 3076  	   c.TRANSACTION_ID,
11:21:58 3077  	   c.INSTRUMENT_ID,
11:21:58 3078  	   c.INSTRUMENT_TYPE_ID,
11:21:58 3079  	   c.CHARGE_AMOUNT,
11:21:58 3080  	   c.CREATE_DATE,
11:21:58 3081  	   c.CREATED_BY,
11:21:58 3082  	   c.INVOICE_ID
11:21:58 3083  	  FROM
11:21:58 3084  	   subscription s,
11:21:58 3085  	   license l,
11:21:58 3086  	   charge c
11:21:58 3087  	 WHERE
11:21:58 3088  	   s.id = l.subscription_id and
11:21:58 3089  	   l.invoice_id = c.invoice_id and
11:21:58 3090  	   c.charge_status_id = GLOBAL_STATUSES_V15.CHARGE_OPENED and
11:21:58 3091  	   exists (
11:21:58 3092  	     select null
11:21:58 3093  	     from transaction t
11:21:58 3094  	     where
11:21:58 3095  	       t.id = c.transaction_id
11:21:58 3096  	   ) and
11:21:58 3097  	   s.id = in_subscription_id;
11:21:58 3098  EXCEPTION
11:21:58 3099  WHEN OTHERS THEN
11:21:58 3100  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 3101  	   SPROC_NAME, 'Unknown error', sqlerrm);
11:21:58 3102  END GET_OPEN_CHARGES_BY_SUBID;
11:21:58 3103  
11:21:58 3104  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
11:21:58 3105  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
11:21:58 3106  ) RETURN NUMBER
11:21:58 3107  AS
11:21:58 3108  var_gift_certificate_id NUMBER;
11:21:58 3109  BEGIN
11:21:58 3110  	     SELECT id INTO var_gift_certificate_id
11:21:58 3111  	     FROM
11:21:58 3112  	       gift_certificate gc
11:21:58 3113  	     WHERE
11:21:58 3114  	       gc.finalized_invoice_id in (
11:21:58 3115  		 SELECT invoice_id
11:21:58 3116  		 FROM (
11:21:58 3117  		   SELECT l.invoice_id
11:21:58 3118  		   FROM
11:21:58 3119  		     license l
11:21:58 3120  		   WHERE
11:21:58 3121  		     l.subscription_id = in_subscription_id
11:21:58 3122  		   ORDER BY l.create_date asc
11:21:58 3123  		 )
11:21:58 3124  	       )
11:21:58 3125  	       and rownum <= 1;
11:21:58 3126  	     return var_gift_certificate_id;
11:21:58 3127  END GET_GIFT_CERT_ID_BY_SUB_ID;
11:21:58 3128  
11:21:58 3129  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
11:21:58 3130  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
11:21:58 3131  ) RETURN VARCHAR2
11:21:58 3132  AS
11:21:58 3133  var_gift_certificate_code VARCHAR2(255 BYTE);
11:21:58 3134  BEGIN
11:21:58 3135  	     SELECT code INTO var_gift_certificate_code
11:21:58 3136  	     FROM
11:21:58 3137  	       gift_certificate gc
11:21:58 3138  	     WHERE
11:21:58 3139  	       gc.finalized_invoice_id in (
11:21:58 3140  		 SELECT invoice_id
11:21:58 3141  		 FROM (
11:21:58 3142  		   SELECT l.invoice_id
11:21:58 3143  		   FROM
11:21:58 3144  		     license l
11:21:58 3145  		   WHERE
11:21:58 3146  		     l.subscription_id = in_subscription_id
11:21:58 3147  		 )
11:21:58 3148  	       )
11:21:58 3149  	       and rownum <= 1;
11:21:58 3150  	     return var_gift_certificate_code;
11:21:58 3151  END GET_GIFT_CERT_CODE_BY_SUB_ID;
11:21:58 3152  
11:21:58 3153  
11:21:58 3154  
11:21:58 3155  PROCEDURE GET_ACTIVE_MEU_SUBS (
11:21:58 3156  	 out_result_set      OUT SYS_REFCURSOR
11:21:58 3157  )
11:21:58 3158  AS
11:21:58 3159  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
11:21:58 3160  BEGIN
11:21:58 3161  	 OPEN out_result_set FOR
11:21:58 3162  	       SELECT
11:21:58 3163  		   s.id,
11:21:58 3164  		   s.instrument_type_id,
11:21:58 3165  		   s.instrument_id,
11:21:58 3166  		   a.group_id,
11:21:58 3167  		   s.offer_chain_id
11:21:58 3168  	       FROM
11:21:58 3169  		   core_owner.subscription s,
11:21:58 3170  		   core_owner.account a
11:21:58 3171  	       WHERE
11:21:58 3172  		   a.id = s.account_id AND(
11:21:58 3173  		       s.offer_chain_id = 1745992781 OR
11:21:58 3174  		       s.offer_chain_id = 3902149773 OR
11:21:58 3175  		       s.offer_chain_id = 2240201337) AND
11:21:58 3176  		   NOT EXISTS
11:21:58 3177  		   (
11:21:58 3178  		       SELECT
11:21:58 3179  			   1
11:21:58 3180  		       FROM
11:21:58 3181  			   core_owner.subscription ss
11:21:58 3182  		       WHERE
11:21:58 3183  			   ss.account_id = a.id AND(
11:21:58 3184  			       ss.offer_chain_id = 2794122734 OR
11:21:58 3185  			       ss.offer_chain_id = 3564368005 OR
11:21:58 3186  			       ss.offer_chain_id = 757934392)) AND
11:21:58 3187  		   rownum < 5000;
11:21:58 3188  END GET_ACTIVE_MEU_SUBS;
11:21:58 3189  
11:21:58 3190  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
11:21:58 3191  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:58 3192  	 out_offer_id	     OUT NUMBER
11:21:58 3193  )
11:21:58 3194  AS
11:21:58 3195  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
11:21:58 3196  BEGIN
11:21:58 3197  	 SELECT OFFER_ID INTO out_offer_id
11:21:58 3198  	 FROM LICENSE L,
11:21:58 3199  	 (
11:21:58 3200  	   SELECT MIN(ID) ID FROM LICENSE
11:21:58 3201  	   WHERE SUBSCRIPTION_ID = in_subscription_id
11:21:58 3202  	   AND LICENSE_STATUS_ID = 2
11:21:58 3203  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
11:21:58 3204  	 ) EARLIEST_ACTIVE_LICENSE
11:21:58 3205  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
11:21:58 3206  END GET_EARLIEST_ACTIVE_OFFER_ID;
11:21:58 3207  
11:21:58 3208  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
11:21:58 3209  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
11:21:58 3210  	 out_license_id        OUT NUMBER
11:21:58 3211  )
11:21:58 3212  AS
11:21:58 3213  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
11:21:58 3214  BEGIN
11:21:58 3215  	 SELECT MIN(ID) into out_license_id
11:21:58 3216  	 FROM LICENSE
11:21:58 3217  	 WHERE SUBSCRIPTION_ID = in_subscription_id
11:21:58 3218  	 AND LICENSE_STATUS_ID = 2
11:21:58 3219  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
11:21:58 3220  END GET_EARLIEST_ACTIVE_LICENSE_ID;
11:21:58 3221  
11:21:58 3222  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
11:21:58 3223  	 out_result_set      OUT SYS_REFCURSOR
11:21:58 3224  )
11:21:58 3225  AS
11:21:58 3226  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
11:21:58 3227  BEGIN
11:21:58 3228  	 OPEN out_result_set FOR
11:21:58 3229  	   SELECT
11:21:58 3230  	     s.id
11:21:58 3231  	   FROM
11:21:58 3232  	     core_owner.transaction t
11:21:58 3233  	   INNER JOIN
11:21:58 3234  	     core_owner.charge c
11:21:58 3235  	   ON
11:21:58 3236  	     c.transaction_id = t.id
11:21:58 3237  	   INNER JOIN
11:21:58 3238  	     core_owner.invoice i
11:21:58 3239  	   ON
11:21:58 3240  	     i.id = c.invoice_id
11:21:58 3241  	   INNER JOIN
11:21:58 3242  	     core_owner.license l
11:21:58 3243  	   ON
11:21:58 3244  	     i.id = l.invoice_id
11:21:58 3245  	   INNER JOIN
11:21:58 3246  	     core_owner.subscription s
11:21:58 3247  	   ON
11:21:58 3248  	     l.subscription_id = s.id
11:21:58 3249  	   INNER JOIN
11:21:58 3250  	     core_owner.account a
11:21:58 3251  	   ON
11:21:58 3252  	     s.account_id = a.id
11:21:58 3253  	   JOIN
11:21:58 3254  	     core_owner.rcn_cpt_chargeback_act_detail ccad
11:21:58 3255  	   ON
11:21:58 3256  	     t.order_id = ccad.merchant_order_number
11:21:58 3257  	   WHERE
11:21:58 3258  	     ccad.chargeback_category = 'RECD'
11:21:58 3259  	   AND s.subscription_status_id = 1;
11:21:58 3260  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
11:21:58 3261  
11:21:58 3262  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
11:21:58 3263  	 out_result_set      OUT SYS_REFCURSOR
11:21:58 3264  )
11:21:58 3265  AS
11:21:58 3266  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
11:21:58 3267  BEGIN
11:21:58 3268  	 OPEN out_result_set FOR
11:21:58 3269  	   SELECT
11:21:58 3270  	     s.id
11:21:58 3271  	   FROM
11:21:58 3272  	     core_owner.transaction t
11:21:58 3273  	   INNER JOIN
11:21:58 3274  	     core_owner.charge c
11:21:58 3275  	   ON
11:21:58 3276  	     c.transaction_id = t.id
11:21:58 3277  	   INNER JOIN
11:21:58 3278  	     core_owner.invoice i
11:21:58 3279  	   ON
11:21:58 3280  	     i.id = c.invoice_id
11:21:58 3281  	   INNER JOIN
11:21:58 3282  	     core_owner.license l
11:21:58 3283  	   ON
11:21:58 3284  	     i.id = l.invoice_id
11:21:58 3285  	   INNER JOIN
11:21:58 3286  	     core_owner.subscription s
11:21:58 3287  	   ON
11:21:58 3288  	     l.subscription_id = s.id
11:21:58 3289  	   INNER JOIN
11:21:58 3290  	     core_owner.account a
11:21:58 3291  	   ON
11:21:58 3292  	     s.account_id = a.id
11:21:58 3293  	   INNER JOIN
11:21:58 3294  	     core_owner.rcn_pp_trans_detail ptd
11:21:58 3295  	   ON
11:21:58 3296  	     t.order_id = ptd.invoice_id
11:21:58 3297  	   WHERE
11:21:58 3298  	     ptd.trans_status = 'D'
11:21:58 3299  	   AND s.subscription_status_id = 1;
11:21:58 3300  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
11:21:58 3301  
11:21:58 3302  END PROCS_SUBSCRIPTION_V15;
11:21:58 3303  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.23
11:21:58 SQL> 
11:21:58 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V15" AS
11:21:58   2  
11:21:58   3  PROCEDURE IS_INVOICE_FOR_GC (
11:21:58   4  	in_invoice_id IN NUMBER,
11:21:58   5  	out_result    OUT NUMBER
11:21:58   6  ) AS
11:21:58   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
11:21:58   8  var_is_for_gc NUMBER;
11:21:58   9  BEGIN
11:21:58  10  	SELECT
11:21:58  11  	  count(1) into var_is_for_gc
11:21:58  12  	FROM GIFT_CERTIFICATE GC
11:21:58  13  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
11:21:58  14  
11:21:58  15  	IF var_is_for_gc > 0 THEN
11:21:58  16  	  out_result := 1;
11:21:58  17  	ELSE
11:21:58  18  	  out_result := 0;
11:21:58  19  	END IF;
11:21:58  20  END IS_INVOICE_FOR_GC;
11:21:58  21  
11:21:58  22  PROCEDURE CREATE_INVOICE(
11:21:58  23  /*
11:21:58  24  Throws exceptions:
11:21:58  25  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58  26  */
11:21:58  27  	  in_invoice_status IN NUMBER,
11:21:58  28  	  in_created_by     IN VARCHAR2,
11:21:58  29  	  in_tax_exempt_id  IN VARCHAR2,
11:21:58  30  	  out_invoice_id    OUT NUMBER
11:21:58  31  ) AS
11:21:58  32  -- VARIABLES
11:21:58  33  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
11:21:58  34  var_new_invoice_id NUMBER;
11:21:58  35  -- EXCEPTIONS
11:21:58  36  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58  37  BEGIN
11:21:58  38  
11:21:58  39  	PROCS_INVOICE_CRU_V15.CREATE_INVOICE(
11:21:58  40  	  out_invoice_id		 => var_new_invoice_id,
11:21:58  41  	  in_created_by 		 => in_created_by,
11:21:58  42  	  in_invoice_status_id		 => in_invoice_status,
11:21:58  43  	  in_tax_exempt_id		 => in_tax_exempt_id
11:21:58  44  	);
11:21:58  45  
11:21:58  46  	out_invoice_id := var_new_invoice_id;
11:21:58  47  
11:21:58  48  EXCEPTION
11:21:58  49  WHEN OTHERS THEN
11:21:58  50  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58  51  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58  52  END CREATE_INVOICE;
11:21:58  53  
11:21:58  54  /************************************************************/
11:21:58  55  
11:21:58  56  PROCEDURE GET_PENDING_INVOICES (
11:21:58  57  /*
11:21:58  58  Throws exceptions:
11:21:58  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58  60  */
11:21:58  61  	out_result_set1      OUT SYS_REFCURSOR,
11:21:58  62  	out_result_set2      OUT SYS_REFCURSOR,
11:21:58  63  	out_result_set3      OUT SYS_REFCURSOR,
11:21:58  64  	in_row_number	     IN NUMBER DEFAULT NULL
11:21:58  65  ) AS
11:21:58  66  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
11:21:58  67  -- COMSTANTS
11:21:58  68  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
11:21:58  69  -- VARIABLES
11:21:58  70  var_row_number NUMBER;
11:21:58  71  BEGIN
11:21:58  72  
11:21:58  73  	IF in_row_number IS NULL THEN
11:21:58  74  	  var_row_number := DEFAULT_ROW_NUMBER;
11:21:58  75  	ELSE
11:21:58  76  	  var_row_number := in_row_number;
11:21:58  77  	END IF;
11:21:58  78  
11:21:58  79  	-- Invoices with one or more payments(charges) with transaction status PENDING
11:21:58  80  	OPEN out_result_set1 FOR
11:21:58  81  SELECT * FROM
11:21:58  82  (
11:21:58  83  	SELECT
11:21:58  84  	  INVOICE.ID
11:21:58  85  	FROM
11:21:58  86  	  CHARGE
11:21:58  87  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
11:21:58  88  	WHERE
11:21:58  89  	  EXISTS(
11:21:58  90  	    SELECT NULL
11:21:58  91  	    FROM TRANSACTION
11:21:58  92  	    WHERE
11:21:58  93  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
11:21:58  94  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
11:21:58  95  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V15.TRUE
11:21:58  96  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
11:21:58  97  	  )
11:21:58  98  	  AND
11:21:58  99  	  NOT EXISTS(
11:21:58 100  	    SELECT NULL
11:21:58 101  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 102  	    WHERE PROCESS_NAME = SPROC_NAME
11:21:58 103  	      AND GENERIC_ID = INVOICE.ID
11:21:58 104  	  )
11:21:58 105  	  AND ROWNUM <= var_row_number*10
11:21:58 106  	  ORDER BY dbms_random.value
11:21:58 107  ) WHERE
11:21:58 108  	  ROWNUM <= var_row_number;
11:21:58 109  
11:21:58 110  	-- Invoices not marked as CLOSED but are fully paid (shouldn't happen).
11:21:58 111  	OPEN out_result_set2 FOR
11:21:58 112  	SELECT
11:21:58 113  	  INVOICE.ID
11:21:58 114  	FROM
11:21:58 115  	  INVOICE
11:21:58 116  	WHERE
11:21:58 117  	  1 = 2 AND
11:21:58 118  	  (
11:21:58 119  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V15.INVOICE_OPEN
11:21:58 120  	  )
11:21:58 121  	  AND NOT EXISTS(
11:21:58 122  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED AND ROWNUM <= 1
11:21:58 123  	  )
11:21:58 124  	  AND EXISTS (
11:21:58 125  	    SELECT 1 FROM CHARGE WHERE INVOICE_ID=INVOICE.ID AND CHARGE_STATUS_ID != GLOBAL_STATUSES_V15.CHARGE_OPENED AND ROWNUM <= 1
11:21:58 126  	  )
11:21:58 127  	  AND INVOICE.ID NOT IN
11:21:58 128  	    (
11:21:58 129  	      SELECT GENERIC_ID
11:21:58 130  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 131  	      WHERE
11:21:58 132  		PROCESS_NAME = SPROC_NAME
11:21:58 133  	    )
11:21:58 134  	  AND ROWNUM <= var_row_number;
11:21:58 135  
11:21:58 136  	-- Invoices not marked as CLOSED with no payments(charges).
11:21:58 137  	OPEN out_result_set3 FOR
11:21:58 138  	SELECT
11:21:58 139  	  INVOICE.ID
11:21:58 140  	FROM
11:21:58 141  	  INVOICE
11:21:58 142  	WHERE
11:21:58 143  	  1 = 2 AND
11:21:58 144  	  (
11:21:58 145  	    INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V15.INVOICE_OPEN
11:21:58 146  	  )
11:21:58 147  	  AND NOT EXISTS (
11:21:58 148  	    SELECT 1 FROM CHARGE WHERE CHARGE.INVOICE_ID = INVOICE.ID AND ROWNUM <= 1
11:21:58 149  	  )
11:21:58 150  	  AND INVOICE.ID NOT IN
11:21:58 151  	    (
11:21:58 152  	      SELECT GENERIC_ID
11:21:58 153  	      FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:58 154  	      WHERE
11:21:58 155  		PROCESS_NAME = SPROC_NAME
11:21:58 156  	    )
11:21:58 157  	  AND ROWNUM <= var_row_number;
11:21:58 158  
11:21:58 159  EXCEPTION
11:21:58 160  WHEN OTHERS THEN
11:21:58 161  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 163  END GET_PENDING_INVOICES;
11:21:58 164  
11:21:58 165  /************************************************************/
11:21:58 166  
11:21:58 167  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
11:21:58 168  	in_invoice_id IN  NUMBER
11:21:58 169  ) RETURN NUMBER AS
11:21:58 170  var_amount NUMBER;
11:21:58 171  BEGIN
11:21:58 172  
11:21:58 173  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
11:21:58 174  	RETURN var_amount;
11:21:58 175  
11:21:58 176  END;
11:21:58 177  
11:21:58 178  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:58 179  /*
11:21:58 180  Throws exceptions:
11:21:58 181  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 182  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 183  */
11:21:58 184  	in_invoice_id IN  NUMBER,
11:21:58 185  	out_amount    OUT NUMBER
11:21:58 186  ) AS
11:21:58 187  -- VARIABLES
11:21:58 188  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
11:21:58 189  temp_invoice_id	     NUMBER;
11:21:58 190  var_total_amount	     NUMBER(10,6);
11:21:58 191  var_final_amount	     NUMBER(10,2);
11:21:58 192  var_line_item_amount   NUMBER(10,6);
11:21:58 193  
11:21:58 194  var_line_items_set     SYS_REFCURSOR;
11:21:58 195  var_line_item_id	     NUMBER;
11:21:58 196  var_line_item_quantity NUMBER;
11:21:58 197  var_line_item_price    NUMBER (10,2);
11:21:58 198  
11:21:58 199  var_discount_fixed_amount NUMBER (10,2);
11:21:58 200  var_discount_percent_amount NUMBER (10,2);
11:21:58 201  
11:21:58 202  -- EXCEPTIONS
11:21:58 203  BAD_INVOICE_ID		    EXCEPTION;
11:21:58 204  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
11:21:58 205  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:58 206  BEGIN
11:21:58 207  
11:21:58 208  	var_total_amount := 0;
11:21:58 209  
11:21:58 210  	-- Check that given invoice exists
11:21:58 211  	BEGIN
11:21:58 212  	  SELECT
11:21:58 213  	    INVOICE.ID into temp_invoice_id
11:21:58 214  	  FROM
11:21:58 215  	    INVOICE
11:21:58 216  	  WHERE
11:21:58 217  	    INVOICE.ID = in_invoice_id
11:21:58 218  	    AND ROWNUM <= 1;
11:21:58 219  	  EXCEPTION
11:21:58 220  	    WHEN NO_DATA_FOUND THEN
11:21:58 221  	      RAISE BAD_INVOICE_ID;
11:21:58 222  	END;
11:21:58 223  
11:21:58 224  	-- Calculate amount for each line item in invoice
11:21:58 225  	FOR f_line_item IN (
11:21:58 226  	  SELECT
11:21:58 227  	    LINE_ITEM.ID
11:21:58 228  	  FROM
11:21:58 229  	    LINE_ITEM
11:21:58 230  	  WHERE
11:21:58 231  	    LINE_ITEM.INVOICE_ID = in_invoice_id
11:21:58 232  	)
11:21:58 233  	LOOP
11:21:58 234  	  BEGIN
11:21:58 235  	    PROCS_LINE_ITEMS_V15.CALCULATE_LINE_ITEM_AMOUNT(
11:21:58 236  	      in_line_item_id => f_line_item.ID,
11:21:58 237  	      out_amount      => var_line_item_amount
11:21:58 238  	    );
11:21:58 239  	    var_total_amount := var_total_amount + var_line_item_amount;
11:21:58 240  	    EXCEPTION
11:21:58 241  	      WHEN OTHERS THEN
11:21:58 242  		EXCEPTION_MESSAGE := SQLERRM;
11:21:58 243  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
11:21:58 244  	  END;
11:21:58 245  	END LOOP;
11:21:58 246  	var_final_amount := var_total_amount;
11:21:58 247  	out_amount := var_final_amount;
11:21:58 248  
11:21:58 249  EXCEPTION
11:21:58 250  WHEN BAD_INVOICE_ID THEN
11:21:58 251  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 252  	  SPROC_NAME, 'No such invoice');
11:21:58 253  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
11:21:58 254  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 255  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
11:21:58 256  WHEN OTHERS THEN
11:21:58 257  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 258  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 259  END;
11:21:58 260  
11:21:58 261  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
11:21:58 262  /*
11:21:58 263  Throws exceptions:
11:21:58 264  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 265  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 266  */
11:21:58 267  	in_invoice_id  IN  NUMBER,
11:21:58 268  	out_account_id OUT NUMBER
11:21:58 269  ) AS
11:21:58 270  -- VARIABLES
11:21:58 271  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
11:21:58 272  temp_gc_account_id NUMBER;
11:21:58 273  temp_ss_account_id NUMBER;
11:21:58 274  temp_invoice_id	 NUMBER;
11:21:58 275  -- EXCEPTIONS
11:21:58 276  BAD_INVOICE_ID	   EXCEPTION;
11:21:58 277  CAN_NOT_FIND_ACCOUNT EXCEPTION;
11:21:58 278  BEGIN
11:21:58 279  
11:21:58 280  	-- Check that given invoice exists
11:21:58 281  	BEGIN
11:21:58 282  	  SELECT
11:21:58 283  	    INVOICE.ID into temp_invoice_id
11:21:58 284  	  FROM
11:21:58 285  	    INVOICE
11:21:58 286  	  WHERE
11:21:58 287  	    INVOICE.ID = in_invoice_id;
11:21:58 288  	  EXCEPTION
11:21:58 289  	    WHEN NO_DATA_FOUND THEN
11:21:58 290  	      RAISE BAD_INVOICE_ID;
11:21:58 291  	END;
11:21:58 292  
11:21:58 293  	-- Try to find gift certificate with given invoice
11:21:58 294  	BEGIN
11:21:58 295  	  SELECT
11:21:58 296  	    ACCOUNT.GROUP_ID into temp_gc_account_id
11:21:58 297  	  FROM
11:21:58 298  	    GIFT_CERTIFICATE
11:21:58 299  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
11:21:58 300  	  WHERE
11:21:58 301  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
11:21:58 302  	    AND ROWNUM <= 1;
11:21:58 303  	  EXCEPTION
11:21:58 304  	    WHEN NO_DATA_FOUND THEN
11:21:58 305  	      temp_gc_account_id := NULL;
11:21:58 306  	END;
11:21:58 307  
11:21:58 308  	-- check subscriptions for given invoice
11:21:58 309  	IF temp_gc_account_id IS NOT NULL THEN
11:21:58 310  	  out_account_id := temp_gc_account_id;
11:21:58 311  	ELSE
11:21:58 312  	  BEGIN
11:21:58 313  	    SELECT
11:21:58 314  	      ACCOUNT.GROUP_ID into temp_ss_account_id
11:21:58 315  	    FROM
11:21:58 316  	      LICENSE
11:21:58 317  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 318  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:58 319  	    WHERE
11:21:58 320  	      LICENSE.INVOICE_ID = in_invoice_id
11:21:58 321  	      AND ROWNUM <= 1;
11:21:58 322  	    EXCEPTION
11:21:58 323  	      WHEN NO_DATA_FOUND THEN
11:21:58 324  		temp_ss_account_id := NULL;
11:21:58 325  	  END;
11:21:58 326  	  IF temp_ss_account_id IS NULL THEN
11:21:58 327  	    RAISE CAN_NOT_FIND_ACCOUNT;
11:21:58 328  	  ELSE
11:21:58 329  	    out_account_id := temp_ss_account_id;
11:21:58 330  	  END IF;
11:21:58 331  	END IF;
11:21:58 332  
11:21:58 333  EXCEPTION
11:21:58 334  WHEN BAD_INVOICE_ID THEN
11:21:58 335  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 336  	  SPROC_NAME, 'No such invoice');
11:21:58 337  WHEN CAN_NOT_FIND_ACCOUNT THEN
11:21:58 338  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 339  	  SPROC_NAME, 'Could not find account by given invoice id');
11:21:58 340  WHEN OTHERS THEN
11:21:58 341  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 342  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 343  END GET_ACCOUNT_BY_INVOICE_ID;
11:21:58 344  
11:21:58 345  /*****************************************************************/
11:21:58 346  
11:21:58 347  PROCEDURE GET_INVOICE_DETAILS (
11:21:58 348  /*
11:21:58 349  Throws exceptions:
11:21:58 350  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 351  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 352  */
11:21:58 353  	in_invoice_id	   IN  NUMBER,
11:21:58 354  	out_group_id	   OUT NUMBER,
11:21:58 355  	out_status_id	   OUT NUMBER,
11:21:58 356  	out_line_items_set OUT SYS_REFCURSOR,
11:21:58 357  	out_pp_charges_set OUT SYS_REFCURSOR,
11:21:58 358  	out_cc_charges_set OUT SYS_REFCURSOR,
11:21:58 359  	out_gc_charges_set OUT SYS_REFCURSOR
11:21:58 360  ) AS
11:21:58 361  -- VARIABLES
11:21:58 362  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
11:21:58 363  
11:21:58 364  -- EXCEPTIONS
11:21:58 365  BAD_INVOICE_ID	     EXCEPTION;
11:21:58 366  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
11:21:58 367  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 368  BEGIN
11:21:58 369  
11:21:58 370  	-- get invoice status
11:21:58 371  	BEGIN
11:21:58 372  	  SELECT
11:21:58 373  	    INVOICE.INVOICE_STATUS_ID into out_status_id
11:21:58 374  	  FROM
11:21:58 375  	    INVOICE
11:21:58 376  	  WHERE
11:21:58 377  	    INVOICE.ID = in_invoice_id;
11:21:58 378  	  EXCEPTION
11:21:58 379  	    WHEN NO_DATA_FOUND THEN
11:21:58 380  	      RAISE BAD_INVOICE_ID;
11:21:58 381  	END;
11:21:58 382  
11:21:58 383  	-- get group id
11:21:58 384  	BEGIN
11:21:58 385  	  PROCS_INVOICE_V15.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
11:21:58 386  	  EXCEPTION
11:21:58 387  	    WHEN OTHERS THEN
11:21:58 388  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 389  	      RAISE CAN_NOT_FIND_ACCOUNT;
11:21:58 390  	END;
11:21:58 391  
11:21:58 392  	-- get all line items for given invoice
11:21:58 393  	OPEN out_line_items_set FOR
11:21:58 394  	SELECT
11:21:58 395  	  LINE_ITEM.AMOUNT,
11:21:58 396  	  LINE_ITEM.ID,
11:21:58 397  	  LINE_ITEM.CREATED_BY,
11:21:58 398  	  LINE_ITEM.CREATE_DATE,
11:21:58 399  	  LINE_ITEM.DISCOUNT_AMOUNT,
11:21:58 400  	  LINE_ITEM.TAXES_AMOUNT,
11:21:58 401  	  LINE_ITEM.PRODUCT_OFFER_ID,
11:21:58 402  	  LINE_ITEM.INVOICE_ID
11:21:58 403  	FROM
11:21:58 404  	  LINE_ITEM
11:21:58 405  	WHERE
11:21:58 406  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
11:21:58 407  
11:21:58 408  	-- get all pp charges for given invoice
11:21:58 409  	OPEN out_pp_charges_set FOR
11:21:58 410  	SELECT
11:21:58 411  	  CHARGE.ID as "CHARGE_ID",
11:21:58 412  	  CHARGE_AMOUNT,
11:21:58 413  	  CHARGE.INSTRUMENT_ID,
11:21:58 414  	  CHARGE.CHARGE_STATUS_ID
11:21:58 415  	FROM
11:21:58 416  	  CHARGE
11:21:58 417  	WHERE
11:21:58 418  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 419  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL;
11:21:58 420  
11:21:58 421  	-- get all credir cards for given invoice
11:21:58 422  	OPEN out_cc_charges_set FOR
11:21:58 423  	SELECT
11:21:58 424  	  CHARGE.ID as "CHARGE_ID",
11:21:58 425  	  CHARGE.CHARGE_AMOUNT,
11:21:58 426  	  CHARGE.INSTRUMENT_ID,
11:21:58 427  	  CHARGE.CHARGE_STATUS_ID
11:21:58 428  	FROM
11:21:58 429  	  CHARGE
11:21:58 430  	WHERE
11:21:58 431  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 432  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD;
11:21:58 433  
11:21:58 434  	OPEN out_gc_charges_set FOR
11:21:58 435  	SELECT
11:21:58 436  	  CHARGE.ID as "CHARGE_ID",
11:21:58 437  	  CHARGE.CHARGE_AMOUNT,
11:21:58 438  	  CHARGE.INSTRUMENT_ID,
11:21:58 439  	  CHARGE.CHARGE_STATUS_ID
11:21:58 440  	FROM
11:21:58 441  	  CHARGE
11:21:58 442  	WHERE
11:21:58 443  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 444  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
11:21:58 445  
11:21:58 446  EXCEPTION
11:21:58 447  WHEN BAD_INVOICE_ID THEN
11:21:58 448  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 449  	  SPROC_NAME, 'No such invoice');
11:21:58 450  WHEN CAN_NOT_FIND_ACCOUNT THEN
11:21:58 451  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 452  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
11:21:58 453  WHEN OTHERS THEN
11:21:58 454  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 455  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 456  END GET_INVOICE_DETAILS;
11:21:58 457  
11:21:58 458  /******************************************************/
11:21:58 459  -- norlov: #38796
11:21:58 460  PROCEDURE GET_TRANSACTION_INVOICE (
11:21:58 461  /*
11:21:58 462  Throws exceptions:
11:21:58 463  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 464  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 465  */
11:21:58 466  	in_transaction_id  IN  NUMBER,
11:21:58 467  	out_result_set	      OUT SYS_REFCURSOR
11:21:58 468  ) AS
11:21:58 469  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
11:21:58 470  -- VARIABLES
11:21:58 471  temp_transaction_id  NUMBER;
11:21:58 472  var_invoice_id	   NUMBER;
11:21:58 473  var_subscription_id  NUMBER;
11:21:58 474  var_offer_chain_id   NUMBER;
11:21:58 475  var_offer_chain_name VARCHAR2(255);
11:21:58 476  -- EXCEPTIONS
11:21:58 477  BAD_TRANSACTION_ID     EXCEPTION;
11:21:58 478  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 479  BEGIN
11:21:58 480   -- check if there is the transaction
11:21:58 481  	BEGIN
11:21:58 482  	  SELECT
11:21:58 483  	    TRANSACTION.ID into temp_transaction_id
11:21:58 484  	  FROM
11:21:58 485  	    TRANSACTION
11:21:58 486  	  WHERE
11:21:58 487  	    TRANSACTION.ID = in_transaction_id;
11:21:58 488  	  EXCEPTION
11:21:58 489  	    WHEN NO_DATA_FOUND THEN
11:21:58 490  	      RAISE BAD_TRANSACTION_ID;
11:21:58 491  	END;
11:21:58 492  
11:21:58 493  	-- Get invoice id
11:21:58 494  	SELECT DISTINCT
11:21:58 495  	  CHARGE.INVOICE_ID into var_invoice_id
11:21:58 496  	FROM
11:21:58 497  	  CHARGE
11:21:58 498  	WHERE
11:21:58 499  	  CHARGE.TRANSACTION_ID = in_transaction_id;
11:21:58 500  
11:21:58 501  	-- Get subscription id if exists
11:21:58 502  	BEGIN
11:21:58 503  	  SELECT DISTINCT
11:21:58 504  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
11:21:58 505  	  FROM
11:21:58 506  	    LICENSE
11:21:58 507  	  WHERE
11:21:58 508  	    LICENSE.INVOICE_ID = var_invoice_id;
11:21:58 509  	  EXCEPTION
11:21:58 510  	    WHEN NO_DATA_FOUND THEN
11:21:58 511  	      var_subscription_id := NULL;
11:21:58 512  	END;
11:21:58 513  
11:21:58 514  	IF var_subscription_id IS NOT NULL THEN
11:21:58 515  	  -- Fetch offer chain from subscription
11:21:58 516  	  SELECT
11:21:58 517  	    OFFER_CHAIN.ID,
11:21:58 518  	    OFFER_CHAIN.NAME
11:21:58 519  	    into
11:21:58 520  	    var_offer_chain_id,
11:21:58 521  	    var_offer_chain_name
11:21:58 522  	  FROM
11:21:58 523  	    OFFER_CHAIN
11:21:58 524  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:58 525  	  WHERE
11:21:58 526  	    SUBSCRIPTION.ID = var_subscription_id;
11:21:58 527  	ELSE
11:21:58 528  	  -- Fetch offer chain from GC
11:21:58 529  	  SELECT
11:21:58 530  	    OFFER_CHAIN.ID,
11:21:58 531  	    OFFER_CHAIN.NAME
11:21:58 532  	    into
11:21:58 533  	    var_offer_chain_id,
11:21:58 534  	    var_offer_chain_name
11:21:58 535  	  FROM
11:21:58 536  	    OFFER_CHAIN
11:21:58 537  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:58 538  	  WHERE
11:21:58 539  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
11:21:58 540  	END IF;
11:21:58 541  
11:21:58 542  	OPEN out_result_set FOR
11:21:58 543  	SELECT DISTINCT
11:21:58 544  	  var_invoice_id       AS "INVOICE_ID",
11:21:58 545  	  var_subscription_id  AS "SUBSCRIPTION_ID",
11:21:58 546  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
11:21:58 547  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
11:21:58 548  	FROM
11:21:58 549  	  DUAL;
11:21:58 550  
11:21:58 551  EXCEPTION
11:21:58 552  WHEN BAD_TRANSACTION_ID THEN
11:21:58 553  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 554  	  SPROC_NAME, 'No such transaction');
11:21:58 555  WHEN OTHERS THEN
11:21:58 556  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 557  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 558  END GET_TRANSACTION_INVOICE;
11:21:58 559  
11:21:58 560  /******************************************************/
11:21:58 561  
11:21:58 562  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:58 563  /*
11:21:58 564  Throws exceptions:
11:21:58 565  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 566  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 567  */
11:21:58 568  	in_invoice_id		       IN NUMBER,
11:21:58 569  	in_invoice_status_id	       IN NUMBER,
11:21:58 570  	in_updated_by		       IN VARCHAR2
11:21:58 571  ) AS
11:21:58 572  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
11:21:58 573  -- VARIABLES
11:21:58 574  temp_invoice_id NUMBER;
11:21:58 575  -- EXCEPTIONS
11:21:58 576  BAD_INVOICE_ID		      EXCEPTION;
11:21:58 577  BAD_INVOICE_STATUS_ID	      EXCEPTION;
11:21:58 578  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
11:21:58 579  BEGIN
11:21:58 580  
11:21:58 581  	-- Check if invoice exists
11:21:58 582  	BEGIN
11:21:58 583  	  SELECT
11:21:58 584  	    INVOICE.ID into temp_invoice_id
11:21:58 585  	  FROM
11:21:58 586  	    INVOICE
11:21:58 587  	  WHERE
11:21:58 588  	    INVOICE.ID = in_invoice_id;
11:21:58 589  	  EXCEPTION
11:21:58 590  	    WHEN NO_DATA_FOUND THEN
11:21:58 591  	      RAISE BAD_INVOICE_ID;
11:21:58 592  	END;
11:21:58 593  
11:21:58 594  	IF in_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_OPEN
11:21:58 595  	  AND in_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
11:21:58 596  	  RAISE BAD_INVOICE_STATUS_ID;
11:21:58 597  	END IF;
11:21:58 598  
11:21:58 599  	PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
11:21:58 600  	  in_invoice_id 		 => in_invoice_id,
11:21:58 601  	  in_invoice_status_id		 => in_invoice_status_id,
11:21:58 602  	  in_updated_by 		 => in_updated_by
11:21:58 603  	);
11:21:58 604  
11:21:58 605  EXCEPTION
11:21:58 606  WHEN BAD_INVOICE_STATUS_ID THEN
11:21:58 607  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 608  	  SPROC_NAME, 'Bad invoice status id');
11:21:58 609  WHEN BAD_INVOICE_ID THEN
11:21:58 610  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 611  	  SPROC_NAME, 'No such invoice');
11:21:58 612  WHEN OTHERS THEN
11:21:58 613  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 614  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 615  END UPDATE_INVOICE_STATUS;
11:21:58 616  
11:21:58 617  /****************************************************************/
11:21:58 618  
11:21:58 619  FUNCTION IS_INVOICE_PAYING_STARTED (
11:21:58 620  /*
11:21:58 621  Throws exceptions:
11:21:58 622  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:58 623  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 624  */
11:21:58 625  	in_invoice_id IN NUMBER
11:21:58 626  ) RETURN NUMBER AS
11:21:58 627  -- VARIABLES
11:21:58 628  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
11:21:58 629  temp_invoice_id		 NUMBER;
11:21:58 630  var_processed_charges_num  NUMBER;
11:21:58 631  var_processed_transac_num  NUMBER;
11:21:58 632  var_success_attempts_num	 NUMBER;
11:21:58 633  var_is_gc 		 NUMBER;
11:21:58 634  -- EXCEPTIONS
11:21:58 635  BAD_INVOICE_ID EXCEPTION;
11:21:58 636  BEGIN
11:21:58 637  
11:21:58 638  	-- Check that invoice exists
11:21:58 639  	BEGIN
11:21:58 640  	  SELECT
11:21:58 641  	    INVOICE.ID into temp_invoice_id
11:21:58 642  	  FROM
11:21:58 643  	    INVOICE
11:21:58 644  	  WHERE
11:21:58 645  	    INVOICE.ID = in_invoice_id;
11:21:58 646  	  EXCEPTION
11:21:58 647  	   WHEN NO_DATA_FOUND THEN
11:21:58 648  	     RAISE BAD_INVOICE_ID;
11:21:58 649  	END;
11:21:58 650  
11:21:58 651  	-- Check that there are tansaction attempts with status success
11:21:58 652  	SELECT
11:21:58 653  	  COUNT(1) into var_success_attempts_num
11:21:58 654  	FROM
11:21:58 655  	  TRANSACTION_ATTEMPT ta,
11:21:58 656  	  TRANSACTION t,
11:21:58 657  	  CHARGE c
11:21:58 658  	WHERE
11:21:58 659  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS and
11:21:58 660  	  ta.transaction_id = t.id and
11:21:58 661  	  c.transaction_id = t.id and
11:21:58 662  	  t.is_refund = GLOBAL_CONSTANTS_V15.FALSE and
11:21:58 663  	  c.invoice_id = in_invoice_id
11:21:58 664  	;
11:21:58 665  
11:21:58 666  	IF var_success_attempts_num > 0 THEN
11:21:58 667  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 668  	END IF;
11:21:58 669  
11:21:58 670  	SELECT
11:21:58 671  	  COUNT(1) into var_success_attempts_num
11:21:58 672  	FROM
11:21:58 673  	  TRANSACTION t,
11:21:58 674  	  CHARGE c
11:21:58 675  	WHERE
11:21:58 676  	  c.transaction_id = t.id and
11:21:58 677  	  t.is_refund = GLOBAL_CONSTANTS_V15.FALSE and
11:21:58 678  	  t.is_settled = GLOBAL_CONSTANTS_V15.TRUE and
11:21:58 679  	  c.invoice_id = in_invoice_id
11:21:58 680  	;
11:21:58 681  
11:21:58 682  	IF var_success_attempts_num > 0 THEN
11:21:58 683  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 684  	END IF;
11:21:58 685  
11:21:58 686  	SELECT
11:21:58 687  	  COUNT(1) into var_is_gc
11:21:58 688  	FROM
11:21:58 689  	  gift_certificate gc
11:21:58 690  	WHERE
11:21:58 691  	  gc.finalized_invoice_id = in_invoice_id
11:21:58 692  	;
11:21:58 693  
11:21:58 694  	IF var_is_gc > 0 THEN
11:21:58 695  	  RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 696  	END IF;
11:21:58 697  
11:21:58 698  	RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 699  
11:21:58 700  EXCEPTION
11:21:58 701  WHEN BAD_INVOICE_ID THEN
11:21:58 702  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 703  	  SPROC_NAME, 'No such invoice');
11:21:58 704  WHEN OTHERS THEN
11:21:58 705  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 706  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 707  END IS_INVOICE_PAYING_STARTED;
11:21:58 708  
11:21:58 709  /******************************************************************************/
11:21:58 710  
11:21:58 711  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
11:21:58 712  	in_invoice_id  IN NUMBER,
11:21:58 713  	out_is_started OUT NUMBER
11:21:58 714  ) AS
11:21:58 715  BEGIN
11:21:58 716  	-- Just a wrapper
11:21:58 717  	out_is_started := PROCS_INVOICE_V15.IS_INVOICE_PAYING_STARTED(in_invoice_id);
11:21:58 718  END P_IS_INVOICE_PAYING_STARTED;
11:21:58 719  
11:21:58 720  /******************************************************************************/
11:21:58 721  
11:21:58 722  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
11:21:58 723  	in_invoice_id	      IN NUMBER,
11:21:58 724  	in_chargeback_date    IN DATE,
11:21:58 725  	out_chargeback_amount OUT NUMBER
11:21:58 726  ) AS
11:21:58 727  -- VARIABLES
11:21:58 728  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
11:21:58 729  var_chargeback_date    DATE;
11:21:58 730  temp_invoice_id	     NUMBER;
11:21:58 731  var_licenses_number    NUMBER;
11:21:58 732  var_invoice_start_date DATE;
11:21:58 733  var_invoice_end_date   DATE;
11:21:58 734  var_offer_id	     NUMBER;
11:21:58 735  var_offer_days_interval NUMBER;
11:21:58 736  var_license_days_used  NUMBER;
11:21:58 737  var_invoice_amount     NUMBER(10,2);
11:21:58 738  var_offer_chain_id     NUMBER;
11:21:58 739  var_offer_chain_meta_data_val VARCHAR2(1024);
11:21:58 740  var_offer_chain_full_refund   NUMBER;
11:21:58 741  var_offer_chain_prorated_ref  NUMBER;
11:21:58 742  var_chargeback_calculated NUMBER;
11:21:58 743  var_max_invoice_refund	NUMBER;
11:21:58 744  -- EXCEPTIONS
11:21:58 745  BAD_INVOICE_ID		  EXCEPTION;
11:21:58 746  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
11:21:58 747  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
11:21:58 748  BEGIN
11:21:58 749  
11:21:58 750  	IF in_chargeback_date IS NULL THEN
11:21:58 751  	  var_chargeback_date := PROCS_COMMON_V15.NORMALIZE_DATE(current_date);
11:21:58 752  	ELSE
11:21:58 753  	  var_chargeback_date := PROCS_COMMON_V15.NORMALIZE_DATE(in_chargeback_date);
11:21:58 754  	END IF;
11:21:58 755  
11:21:58 756  	-- Check that invoice exists
11:21:58 757  	BEGIN
11:21:58 758  	  SELECT
11:21:58 759  	    INVOICE.ID into temp_invoice_id
11:21:58 760  	  FROM
11:21:58 761  	    INVOICE
11:21:58 762  	  WHERE
11:21:58 763  	    INVOICE.ID = in_invoice_id;
11:21:58 764  	  EXCEPTION
11:21:58 765  	    WHEN NO_DATA_FOUND THEN
11:21:58 766  	      RAISE BAD_INVOICE_ID;
11:21:58 767  	END;
11:21:58 768  
11:21:58 769  	-- Check that invoice has at least one license
11:21:58 770  	SELECT
11:21:58 771  	  COUNT(*) into var_licenses_number
11:21:58 772  	FROM
11:21:58 773  	  LICENSE
11:21:58 774  	WHERE
11:21:58 775  	  LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 776  
11:21:58 777  	IF var_licenses_number = 0 THEN
11:21:58 778  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
11:21:58 779  	END IF;
11:21:58 780  
11:21:58 781  	SELECT
11:21:58 782  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
11:21:58 783  	FROM
11:21:58 784  	  LICENSE
11:21:58 785  	WHERE
11:21:58 786  	  LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 787  
11:21:58 788  	var_invoice_start_date := PROCS_COMMON_V15.NORMALIZE_DATE(var_invoice_start_date);
11:21:58 789  
11:21:58 790  	SELECT DISTINCT
11:21:58 791  	  LICENSE.OFFER_ID into var_offer_id
11:21:58 792  	FROM
11:21:58 793  	  LICENSE
11:21:58 794  	WHERE
11:21:58 795  	  LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 796  
11:21:58 797  	SELECT
11:21:58 798  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
11:21:58 799  	FROM
11:21:58 800  	  LICENSE
11:21:58 801  	WHERE
11:21:58 802  	  LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 803  
11:21:58 804  	-- All licenses for given invoice should point into the same offer
11:21:58 805  
11:21:58 806  	PROCS_OFFER_CHAIN_V15.GET_OFFER_LENGTH_IN_DAYS(
11:21:58 807  	  in_offer_id	=> var_offer_id,
11:21:58 808  	  in_start_date => var_invoice_start_date,
11:21:58 809  	  out_days	=> var_offer_days_interval
11:21:58 810  	);
11:21:58 811  
11:21:58 812  	IF var_offer_days_interval = 0 THEN
11:21:58 813  	  RAISE OFFER_LENGTH_IS_ZERO;
11:21:58 814  	END IF;
11:21:58 815  
11:21:58 816  	PROCS_INVOICE_V15.GET_INVOICE_DAYS_USED_NUMBER(
11:21:58 817  	  in_invoice_id      => in_invoice_id,
11:21:58 818  	  in_chargeback_date => var_chargeback_date,
11:21:58 819  	  out_days_num	     => var_license_days_used
11:21:58 820  	);
11:21:58 821  
11:21:58 822  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(
11:21:58 823  	  in_invoice_id => in_invoice_id,
11:21:58 824  	  out_amount	=> var_invoice_amount
11:21:58 825  	);
11:21:58 826  
11:21:58 827  	-- 39437
11:21:58 828  	-- Get offer chain id by invoice id
11:21:58 829  	SELECT DISTINCT
11:21:58 830  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
11:21:58 831  	FROM
11:21:58 832  	  SUBSCRIPTION
11:21:58 833  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 834  	WHERE
11:21:58 835  	  LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 836  
11:21:58 837  	-- Get offer chain's meta data full amount value
11:21:58 838  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
11:21:58 839  	  in_offer_chain_id => var_offer_chain_id,
11:21:58 840  	  in_meta_data_name => GLOBAL_CONSTANTS_V15.OFFER_CHAIN_FULL_REFUND,
11:21:58 841  	  out_value	    => var_offer_chain_meta_data_val
11:21:58 842  	);
11:21:58 843  	IF var_offer_chain_meta_data_val IS NULL THEN
11:21:58 844  	  var_offer_chain_full_refund := NULL;
11:21:58 845  	ELSE
11:21:58 846  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
11:21:58 847  	END IF;
11:21:58 848  
11:21:58 849  	-- Get offer chain's meta data prorated amount value
11:21:58 850  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
11:21:58 851  	  in_offer_chain_id => var_offer_chain_id,
11:21:58 852  	  in_meta_data_name => GLOBAL_CONSTANTS_V15.OFFER_CHAIN_PRORATED_REFUND,
11:21:58 853  	  out_value	    => var_offer_chain_meta_data_val
11:21:58 854  	);
11:21:58 855  	IF var_offer_chain_meta_data_val IS NULL THEN
11:21:58 856  	  var_offer_chain_prorated_ref := NULL;
11:21:58 857  	ELSE
11:21:58 858  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
11:21:58 859  	END IF;
11:21:58 860  
11:21:58 861  	var_chargeback_calculated := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 862  
11:21:58 863  	IF var_offer_chain_full_refund IS NOT NULL
11:21:58 864  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58 865  	  IF var_license_days_used < var_offer_chain_full_refund THEN
11:21:58 866  	    out_chargeback_amount := var_invoice_amount;
11:21:58 867  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 868  	  END IF;
11:21:58 869  	END IF;
11:21:58 870  
11:21:58 871  	IF var_offer_chain_prorated_ref IS NOT NULL
11:21:58 872  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58 873  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
11:21:58 874  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
11:21:58 875  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 876  	  END IF;
11:21:58 877  	END IF;
11:21:58 878  
11:21:58 879  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:58 880  	  PROCS_INVOICE_V15.GET_MAX_REFUND(
11:21:58 881  	    in_invoice_id => in_invoice_id,
11:21:58 882  	    out_amount	  => var_max_invoice_refund
11:21:58 883  	  );
11:21:58 884  	  IF var_max_invoice_refund < out_chargeback_amount THEN
11:21:58 885  	    out_chargeback_amount := var_max_invoice_refund;
11:21:58 886  	  END IF;
11:21:58 887  	END IF;
11:21:58 888  
11:21:58 889  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58 890  	  out_chargeback_amount := 0;
11:21:58 891  	END IF;
11:21:58 892  
11:21:58 893  EXCEPTION
11:21:58 894  WHEN BAD_INVOICE_ID THEN
11:21:58 895  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 896  	  SPROC_NAME, 'No such invoice');
11:21:58 897  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
11:21:58 898  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 899  	  SPROC_NAME, 'No licenses found');
11:21:58 900  WHEN OFFER_LENGTH_IS_ZERO THEN
11:21:58 901  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 902  	  SPROC_NAME, 'Offer length is zero');
11:21:58 903  WHEN OTHERS THEN
11:21:58 904  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 906  END CALCULATE_INVOICE_CHARGEBACK;
11:21:58 907  
11:21:58 908  /********************************************************************/
11:21:58 909  
11:21:58 910  PROCEDURE APPLY_REFUND (
11:21:58 911  	in_invoice_id	     IN NUMBER,
11:21:58 912  	in_chargeback_amount IN NUMBER,
11:21:58 913  	in_created_by	     IN VARCHAR2,
11:21:58 914  	out_charge_id	     OUT NUMBER
11:21:58 915  ) AS
11:21:58 916  -- VARIABLES
11:21:58 917  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
11:21:58 918  temp_invoice_id		 NUMBER;
11:21:58 919  var_total_charges_amount	 NUMBER(10,2);
11:21:58 920  var_charge_amount_to_apply NUMBER(10,2);
11:21:58 921  var_transaction_id	 NUMBER;
11:21:58 922  var_instrument_type_id	 NUMBER;
11:21:58 923  var_instrument_id 	 NUMBER;
11:21:58 924  var_charge_id		 NUMBER;
11:21:58 925  -- EXCEPTIONS
11:21:58 926  BAD_INVOICE_ID		 EXCEPTION;
11:21:58 927  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
11:21:58 928  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
11:21:58 929  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
11:21:58 930  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
11:21:58 931  BEGIN
11:21:58 932  
11:21:58 933  	BEGIN
11:21:58 934  	  SELECT
11:21:58 935  	    INVOICE.ID into temp_invoice_id
11:21:58 936  	  FROM
11:21:58 937  	    INVOICE
11:21:58 938  	  WHERE
11:21:58 939  	    INVOICE.ID = in_invoice_id;
11:21:58 940  	  EXCEPTION
11:21:58 941  	    WHEN NO_DATA_FOUND THEN
11:21:58 942  	      RAISE BAD_INVOICE_ID;
11:21:58 943  	END;
11:21:58 944  
11:21:58 945  	SELECT
11:21:58 946  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
11:21:58 947  	FROM
11:21:58 948  	  CHARGE
11:21:58 949  	WHERE
11:21:58 950  	  CHARGE.INVOICE_ID = in_invoice_id
11:21:58 951  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 952  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
11:21:58 953  
11:21:58 954  	-- FIXME: Maybe whe should throw exception here?
11:21:58 955  	IF var_total_charges_amount < in_chargeback_amount THEN
11:21:58 956  	  var_charge_amount_to_apply := var_total_charges_amount;
11:21:58 957  	ELSE
11:21:58 958  	  var_charge_amount_to_apply := in_chargeback_amount;
11:21:58 959  	END IF;
11:21:58 960  
11:21:58 961  	BEGIN
11:21:58 962  	  PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:58 963  	    in_transaction_id  => NULL,
11:21:58 964  	    in_status_id       => GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
11:21:58 965  	    in_amount	       => -var_charge_amount_to_apply,
11:21:58 966  	    in_created_by      => in_created_by,
11:21:58 967  	    in_order_id        => NULL,
11:21:58 968  	    in_is_refund       => GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 969  	    out_transaction_id => var_transaction_id
11:21:58 970  	  );
11:21:58 971  	  EXCEPTION
11:21:58 972  	    WHEN OTHERS THEN
11:21:58 973  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:58 974  	      RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:58 975  	END;
11:21:58 976  
11:21:58 977  	BEGIN
11:21:58 978  	  SELECT
11:21:58 979  	    C.INSTRUMENT_TYPE_ID,
11:21:58 980  	    C.INSTRUMENT_ID
11:21:58 981  	    into
11:21:58 982  	    var_instrument_type_id,
11:21:58 983  	    var_instrument_id
11:21:58 984  	  FROM
11:21:58 985  	    CHARGE C,
11:21:58 986  	    TRANSACTION_ATTEMPT TA,
11:21:58 987  	    TRANSACTION T
11:21:58 988  	  WHERE
11:21:58 989  	    C.INVOICE_ID = in_invoice_id and
11:21:58 990  	    C.TRANSACTION_ID = T.ID and
11:21:58 991  	    TA.TRANSACTION_ID = T.ID and
11:21:58 992  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS and
11:21:58 993  	    T.IS_REFUND = GLOBAL_CONSTANTS_V15.FALSE and
11:21:58 994  	    T.TRANSACTION_AMOUNT >= 0 and
11:21:58 995  	    rownum < 2;
11:21:58 996  	EXCEPTION
11:21:58 997  	    WHEN NO_DATA_FOUND THEN
11:21:58 998  	      RAISE CAN_NOT_FIND_INSTRUMENT;
11:21:58 999  	END;
11:21:58 1000  	 BEGIN
11:21:58 1001  	   PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:58 1002  	     in_invoice_id	   => in_invoice_id,
11:21:58 1003  	     in_transaction_id	   => var_transaction_id,
11:21:58 1004  	     in_instrument_type_id => var_instrument_type_id,
11:21:58 1005  	     in_instrument_id	   => var_instrument_id,
11:21:58 1006  	     in_charge_amount	   => -var_charge_amount_to_apply,
11:21:58 1007  	     in_created_by	   => in_created_by,
11:21:58 1008  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:58 1009  	     out_charge_id	   => var_charge_id
11:21:58 1010  	   );
11:21:58 1011  	   EXCEPTION
11:21:58 1012  	     WHEN OTHERS THEN
11:21:58 1013  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1014  	       RAISE CAN_NOT_CREATE_CHARGE;
11:21:58 1015  	 END;
11:21:58 1016  
11:21:58 1017  	 out_charge_id := var_charge_id;
11:21:58 1018  
11:21:58 1019  EXCEPTION
11:21:58 1020  WHEN BAD_INVOICE_ID THEN
11:21:58 1021  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1022  	   SPROC_NAME, 'No such invoice');
11:21:58 1023  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:58 1024  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1025  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:58 1026  WHEN CAN_NOT_FIND_INSTRUMENT THEN
11:21:58 1027  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1028  	   SPROC_NAME, 'Could not find financial instrument');
11:21:58 1029  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:58 1030  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1031  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:58 1032  WHEN OTHERS THEN
11:21:58 1033  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1034  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1035  END APPLY_REFUND;
11:21:58 1036  
11:21:58 1037  /******************************************************************************/
11:21:58 1038  
11:21:58 1039  PROCEDURE GET_MAX_REFUND (
11:21:58 1040  	 in_invoice_id IN NUMBER,
11:21:58 1041  	 out_amount    OUT NUMBER
11:21:58 1042  ) AS
11:21:58 1043  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
11:21:58 1044  -- VARIABLES
11:21:58 1045  temp_invoice_id	       NUMBER;
11:21:58 1046  var_invoice_refunds_sum NUMBER(10,2);
11:21:58 1047  var_invoice_charges_sum NUMBER(10,2);
11:21:58 1048  -- EXCEPTIONS
11:21:58 1049  BAD_INVOICE_ID EXCEPTION;
11:21:58 1050  BEGIN
11:21:58 1051  
11:21:58 1052  	 BEGIN
11:21:58 1053  	   SELECT
11:21:58 1054  	     INVOICE.ID into temp_invoice_id
11:21:58 1055  	   FROM
11:21:58 1056  	     INVOICE
11:21:58 1057  	   WHERE
11:21:58 1058  	     INVOICE.ID = in_invoice_id;
11:21:58 1059  	   EXCEPTION
11:21:58 1060  	     WHEN NO_DATA_FOUND THEN
11:21:58 1061  	       RAISE BAD_INVOICE_ID;
11:21:58 1062  	 END;
11:21:58 1063  
11:21:58 1064  	 var_invoice_refunds_sum := 0;
11:21:58 1065  	 var_invoice_charges_sum := 0;
11:21:58 1066  
11:21:58 1067  	 FOR f_charge IN (
11:21:58 1068  	   SELECT
11:21:58 1069  	     CHARGE.ID,
11:21:58 1070  	     CHARGE.CHARGE_STATUS_ID,
11:21:58 1071  	     CHARGE.CHARGE_AMOUNT,
11:21:58 1072  	     CHARGE.TRANSACTION_ID
11:21:58 1073  	   FROM
11:21:58 1074  	     CHARGE
11:21:58 1075  	   WHERE
11:21:58 1076  	     CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1077  	 )
11:21:58 1078  	 LOOP
11:21:58 1079  	   -- If charge.status = canceled then continue
11:21:58 1080  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V15.CHARGE_CANCELED THEN
11:21:58 1081  
11:21:58 1082  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
11:21:58 1083  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 1084  		  AND PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:58 1085  		 -- Transaction collected
11:21:58 1086  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
11:21:58 1087  	       ELSE
11:21:58 1088  		 -- Transaction is not collected. Do nothing
11:21:58 1089  		 NULL;
11:21:58 1090  	       END IF;
11:21:58 1091  	     ELSE
11:21:58 1092  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 1093  		  AND PROCS_TRANSACTION_V15.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:58 1094  		 -- If charge is processed transaction is not collected then do nothing
11:21:58 1095  		 NULL;
11:21:58 1096  	       ELSE
11:21:58 1097  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
11:21:58 1098  	       END IF;
11:21:58 1099  	     END IF;
11:21:58 1100  
11:21:58 1101  	   END IF;
11:21:58 1102  	 END LOOP;
11:21:58 1103  
11:21:58 1104  	 -- Refunds are negative
11:21:58 1105  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
11:21:58 1106  
11:21:58 1107  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
11:21:58 1108  
11:21:58 1109  EXCEPTION
11:21:58 1110  WHEN BAD_INVOICE_ID THEN
11:21:58 1111  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1112  	   SPROC_NAME, 'No such invoice');
11:21:58 1113  WHEN OTHERS THEN
11:21:58 1114  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1115  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1116  END GET_MAX_REFUND;
11:21:58 1117  
11:21:58 1118  /******************************************************************************/
11:21:58 1119  
11:21:58 1120  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
11:21:58 1121  	 in_invoice_id	     IN NUMBER,
11:21:58 1122  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
11:21:58 1123  	 out_days_num	     OUT NUMBER
11:21:58 1124  ) AS
11:21:58 1125  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
11:21:58 1126  -- VARIABLES
11:21:58 1127  temp_invoice_id	      NUMBER;
11:21:58 1128  var_license_start_date DATE;
11:21:58 1129  var_license_end_date   DATE;
11:21:58 1130  var_chargeback_date    DATE;
11:21:58 1131  var_invoice_days_used  NUMBER;
11:21:58 1132  -- EXCEPTIONS
11:21:58 1133  BAD_INVOICE_ID EXCEPTION;
11:21:58 1134  BEGIN
11:21:58 1135  
11:21:58 1136  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
11:21:58 1137  
11:21:58 1138  	 BEGIN
11:21:58 1139  	   SELECT
11:21:58 1140  	     INVOICE.ID into temp_invoice_id
11:21:58 1141  	   FROM
11:21:58 1142  	     INVOICE
11:21:58 1143  	   WHERE
11:21:58 1144  	     INVOICE.ID = in_invoice_id;
11:21:58 1145  	   EXCEPTION
11:21:58 1146  	     WHEN NO_DATA_FOUND THEN
11:21:58 1147  	       RAISE BAD_INVOICE_ID;
11:21:58 1148  	 END;
11:21:58 1149  
11:21:58 1150  	 var_invoice_days_used := 0;
11:21:58 1151  
11:21:58 1152  	 FOR f_license IN (
11:21:58 1153  	   SELECT
11:21:58 1154  	     LICENSE.START_DATE,
11:21:58 1155  	     LICENSE.END_DATE
11:21:58 1156  	   FROM
11:21:58 1157  	     LICENSE
11:21:58 1158  	   WHERE
11:21:58 1159  	     LICENSE.INVOICE_ID = in_invoice_id
11:21:58 1160  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V15.FALSE
11:21:58 1161  	 )
11:21:58 1162  	 LOOP
11:21:58 1163  	   var_license_start_date := PROCS_COMMON_V15.NORMALIZE_DATE(f_license.START_DATE);
11:21:58 1164  	   var_license_end_date := PROCS_COMMON_V15.NORMALIZE_DATE(f_license.END_DATE);
11:21:58 1165  
11:21:58 1166  	   IF var_license_start_date <= var_chargeback_date THEN
11:21:58 1167  	     IF var_license_end_date <= var_chargeback_date THEN
11:21:58 1168  	       -- License is passed
11:21:58 1169  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
11:21:58 1170  	     ELSE
11:21:58 1171  	       -- This is current license
11:21:58 1172  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
11:21:58 1173  	     END IF;
11:21:58 1174  	   ELSE
11:21:58 1175  	     -- if var_license_start_date > in_chargeback_date then do nothing
11:21:58 1176  	     NULL;
11:21:58 1177  	   END IF;
11:21:58 1178  	 END LOOP;
11:21:58 1179  
11:21:58 1180  	 out_days_num := var_invoice_days_used;
11:21:58 1181  
11:21:58 1182  EXCEPTION
11:21:58 1183  WHEN BAD_INVOICE_ID THEN
11:21:58 1184  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1185  	   SPROC_NAME, 'No such invoice');
11:21:58 1186  WHEN OTHERS THEN
11:21:58 1187  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1188  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1189  END GET_INVOICE_DAYS_USED_NUMBER;
11:21:58 1190  
11:21:58 1191  /******************************************************************************/
11:21:58 1192  
11:21:58 1193  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:58 1194  	 in_invoice_id	IN NUMBER,
11:21:58 1195  	 out_result_set OUT SYS_REFCURSOR
11:21:58 1196  ) AS
11:21:58 1197  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
11:21:58 1198  -- VARIABLES
11:21:58 1199  temp_invoice_id NUMBER;
11:21:58 1200  -- EXCEPTIONS
11:21:58 1201  BAD_INVOICE_ID EXCEPTION;
11:21:58 1202  BEGIN
11:21:58 1203  
11:21:58 1204  	 BEGIN
11:21:58 1205  	   SELECT
11:21:58 1206  	     INVOICE.ID into temp_invoice_id
11:21:58 1207  	   FROM
11:21:58 1208  	     INVOICE
11:21:58 1209  	   WHERE
11:21:58 1210  	     INVOICE.ID = in_invoice_id;
11:21:58 1211  	   EXCEPTION
11:21:58 1212  	     WHEN NO_DATA_FOUND THEN
11:21:58 1213  	       RAISE BAD_INVOICE_ID;
11:21:58 1214  	 END;
11:21:58 1215  
11:21:58 1216  	 OPEN out_result_set FOR
11:21:58 1217  	 SELECT
11:21:58 1218  	   LINE_ITEM.ID,
11:21:58 1219  	   LINE_ITEM.PRODUCT_OFFER_ID,
11:21:58 1220  	   LINE_ITEM.INVOICE_ID,
11:21:58 1221  	   LINE_ITEM.AMOUNT,
11:21:58 1222  	   LINE_ITEM.DISCOUNT_AMOUNT,
11:21:58 1223  	   LINE_ITEM.TAXES_AMOUNT,
11:21:58 1224  	   LINE_ITEM.CREATE_DATE,
11:21:58 1225  	   LINE_ITEM.CREATED_BY
11:21:58 1226  	 FROM
11:21:58 1227  	   LINE_ITEM
11:21:58 1228  	 WHERE
11:21:58 1229  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
11:21:58 1230  
11:21:58 1231  EXCEPTION
11:21:58 1232  WHEN BAD_INVOICE_ID THEN
11:21:58 1233  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1234  	   SPROC_NAME, 'No such invoice');
11:21:58 1235  WHEN OTHERS THEN
11:21:58 1236  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1237  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1238  END GET_INVOICE_LINE_ITEMS;
11:21:58 1239  
11:21:58 1240  /******************************************************************************/
11:21:58 1241  
11:21:58 1242  PROCEDURE GET_INVOICE_LICENSES (
11:21:58 1243  	 in_invoice_id	IN NUMBER,
11:21:58 1244  	 out_result_set OUT SYS_REFCURSOR
11:21:58 1245  ) AS
11:21:58 1246  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
11:21:58 1247  -- VARIABLES
11:21:58 1248  temp_invoice_id NUMBER;
11:21:58 1249  -- EXCEPTIONS
11:21:58 1250  BAD_INVOICE_ID EXCEPTION;
11:21:58 1251  BEGIN
11:21:58 1252  
11:21:58 1253  	 BEGIN
11:21:58 1254  	   SELECT
11:21:58 1255  	     INVOICE.ID into temp_invoice_id
11:21:58 1256  	   FROM
11:21:58 1257  	     INVOICE
11:21:58 1258  	   WHERE
11:21:58 1259  	     INVOICE.ID = in_invoice_id;
11:21:58 1260  	   EXCEPTION
11:21:58 1261  	     WHEN NO_DATA_FOUND THEN
11:21:58 1262  	       RAISE BAD_INVOICE_ID;
11:21:58 1263  	 END;
11:21:58 1264  
11:21:58 1265  	 OPEN out_result_set FOR
11:21:58 1266  	 SELECT
11:21:58 1267  	   LICENSE.ID,
11:21:58 1268  	   LICENSE.INVOICE_ID,
11:21:58 1269  	   LICENSE.CREATE_DATE,
11:21:58 1270  	   LICENSE.CREATED_BY,
11:21:58 1271  	   LICENSE.CURRENT_OFFER_INDEX,
11:21:58 1272  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
11:21:58 1273  	   LICENSE.END_DATE,
11:21:58 1274  	   LICENSE.ENTITLEMENT_END_DATE,
11:21:58 1275  	   LICENSE.IS_EXTENSION,
11:21:58 1276  	   LICENSE.LICENSE_STATUS_ID,
11:21:58 1277  	   LICENSE.NEEDS_ENTITLEMENTS,
11:21:58 1278  	   LICENSE.OFFER_ID,
11:21:58 1279  	   LICENSE.START_DATE,
11:21:58 1280  	   LICENSE.SUBSCRIPTION_ID,
11:21:58 1281  	   LICENSE.UPDATE_DATE,
11:21:58 1282  	   LICENSE.UPDATED_BY
11:21:58 1283  	 FROM
11:21:58 1284  	   LICENSE
11:21:58 1285  	 WHERE
11:21:58 1286  	   LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 1287  
11:21:58 1288  EXCEPTION
11:21:58 1289  WHEN BAD_INVOICE_ID THEN
11:21:58 1290  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1291  	   SPROC_NAME, 'No such invoice');
11:21:58 1292  WHEN OTHERS THEN
11:21:58 1293  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1294  	   SPROC_NAME, 'Unknown error');
11:21:58 1295  END GET_INVOICE_LICENSES;
11:21:58 1296  
11:21:58 1297  /******************************************************************************/
11:21:58 1298  
11:21:58 1299  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
11:21:58 1300  	 in_invoice_id	    IN NUMBER,
11:21:58 1301  	 out_offer_chain_id OUT NUMBER
11:21:58 1302  ) AS
11:21:58 1303  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
11:21:58 1304  -- VARIABLES
11:21:58 1305  temp_invoice_id NUMBER;
11:21:58 1306  -- EXCEPTIONS
11:21:58 1307  BAD_INVOICE_ID EXCEPTION;
11:21:58 1308  BEGIN
11:21:58 1309  
11:21:58 1310  	 BEGIN
11:21:58 1311  	   SELECT
11:21:58 1312  	     INVOICE.ID into temp_invoice_id
11:21:58 1313  	   FROM
11:21:58 1314  	     INVOICE
11:21:58 1315  	   WHERE
11:21:58 1316  	     INVOICE.ID = in_invoice_id;
11:21:58 1317  	   EXCEPTION
11:21:58 1318  	     WHEN NO_DATA_FOUND THEN
11:21:58 1319  	       RAISE BAD_INVOICE_ID;
11:21:58 1320  	 END;
11:21:58 1321  
11:21:58 1322  	 BEGIN
11:21:58 1323  	   SELECT DISTINCT
11:21:58 1324  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
11:21:58 1325  	   FROM
11:21:58 1326  	     LICENSE
11:21:58 1327  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:58 1328  	   WHERE
11:21:58 1329  	     LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 1330  	   EXCEPTION
11:21:58 1331  	     WHEN NO_DATA_FOUND THEN
11:21:58 1332  	       out_offer_chain_id := NULL;
11:21:58 1333  	 END;
11:21:58 1334  
11:21:58 1335  EXCEPTION
11:21:58 1336  WHEN BAD_INVOICE_ID THEN
11:21:58 1337  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1338  	   SPROC_NAME, 'No such invoice');
11:21:58 1339  WHEN OTHERS THEN
11:21:58 1340  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1341  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1342  END GET_OFFER_CH_ID_BY_INVOICE_ID;
11:21:58 1343  
11:21:58 1344  /******************************************************************************/
11:21:58 1345  
11:21:58 1346  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
11:21:58 1347  -- Closing invoice without refund
11:21:58 1348  	 in_invoice_id IN NUMBER,
11:21:58 1349  	 in_updated_by IN VARCHAR2
11:21:58 1350  ) AS
11:21:58 1351  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
11:21:58 1352  -- VARIABLES
11:21:58 1353  temp_invoice_id NUMBER;
11:21:58 1354  -- EXCEPTIONS
11:21:58 1355  BAD_INVOICE_ID EXCEPTION;
11:21:58 1356  BEGIN
11:21:58 1357  
11:21:58 1358  	 BEGIN
11:21:58 1359  	   SELECT
11:21:58 1360  	     INVOICE.ID into temp_invoice_id
11:21:58 1361  	   FROM
11:21:58 1362  	     INVOICE
11:21:58 1363  	   WHERE
11:21:58 1364  	     INVOICE.ID = in_invoice_id;
11:21:58 1365  	   EXCEPTION
11:21:58 1366  	     WHEN NO_DATA_FOUND THEN
11:21:58 1367  	       RAISE BAD_INVOICE_ID;
11:21:58 1368  	 END;
11:21:58 1369  
11:21:58 1370  	 -- Needs to close charges. No refund.
11:21:58 1371  	 FOR f_charge_to_close IN (
11:21:58 1372  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1373  	 )
11:21:58 1374  	 LOOP
11:21:58 1375  	   PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
11:21:58 1376  	     in_charge_id	 => f_charge_to_close.ID,
11:21:58 1377  	     in_updated_by	 => in_updated_by,
11:21:58 1378  	     in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
11:21:58 1379  	   );
11:21:58 1380  	 END LOOP;
11:21:58 1381  
11:21:58 1382  	 --FOR f_license_to_cancel IN (
11:21:58 1383  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V15.LICENSE_ACTIVE
11:21:58 1384  	 --)
11:21:58 1385  	 --LOOP
11:21:58 1386  	 --  PROCS_LICENSE_CRU_V15.UPDATE_LICENSE(
11:21:58 1387  	 --    in_license_id	     => f_license_to_cancel.ID,
11:21:58 1388  	 --    in_license_status_id  => GLOBAL_STATUSES_V15.LICENSE_CLOSED,
11:21:58 1389  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V15.FALSE,
11:21:58 1390  	 --    in_updated_by	     => in_updated_by
11:21:58 1391  	 --  );
11:21:58 1392  	 --END LOOP;
11:21:58 1393  
11:21:58 1394  	 PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
11:21:58 1395  	   in_invoice_id		  => in_invoice_id,
11:21:58 1396  	   in_updated_by		  => in_updated_by,
11:21:58 1397  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V15.INVOICE_CLOSED
11:21:58 1398  	 );
11:21:58 1399  
11:21:58 1400  	 FOR f_transaction_to_close IN (
11:21:58 1401  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1402  	 )
11:21:58 1403  	 LOOP
11:21:58 1404  	   PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
11:21:58 1405  	     in_transaction_id	      => f_transaction_to_close.ID,
11:21:58 1406  	     in_updated_by	      => in_updated_by,
11:21:58 1407  	     in_transaction_status_id => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
11:21:58 1408  	   );
11:21:58 1409  	 END LOOP;
11:21:58 1410  
11:21:58 1411  EXCEPTION
11:21:58 1412  WHEN BAD_INVOICE_ID THEN
11:21:58 1413  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1414  	   SPROC_NAME, 'No such invoice');
11:21:58 1415  WHEN OTHERS THEN
11:21:58 1416  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1417  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1418  END CLOSE_INVOICE_AS_NOT_COLLECTED;
11:21:58 1419  
11:21:58 1420  /******************************************************************************/
11:21:58 1421  
11:21:58 1422  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
11:21:58 1423  	 in_invoice_id	     IN NUMBER,
11:21:58 1424  	 out_subscription_id OUT NUMBER
11:21:58 1425  ) AS
11:21:58 1426  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
11:21:58 1427  -- VARIABLES
11:21:58 1428  temp_invoice_id NUMBER;
11:21:58 1429  -- EXCEPTIONS
11:21:58 1430  BAD_INVOICE_ID		 EXCEPTION;
11:21:58 1431  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
11:21:58 1432  BEGIN
11:21:58 1433  
11:21:58 1434  	 BEGIN
11:21:58 1435  	   SELECT
11:21:58 1436  	     INVOICE.ID into temp_invoice_id
11:21:58 1437  	   FROM
11:21:58 1438  	     INVOICE
11:21:58 1439  	   WHERE
11:21:58 1440  	     INVOICE.ID = in_invoice_id;
11:21:58 1441  	   EXCEPTION
11:21:58 1442  	     WHEN NO_DATA_FOUND THEN
11:21:58 1443  	       RAISE BAD_INVOICE_ID;
11:21:58 1444  	 END;
11:21:58 1445  
11:21:58 1446  	 BEGIN
11:21:58 1447  	   SELECT DISTINCT
11:21:58 1448  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
11:21:58 1449  	   FROM
11:21:58 1450  	     LICENSE
11:21:58 1451  	   WHERE
11:21:58 1452  	     LICENSE.INVOICE_ID = in_invoice_id;
11:21:58 1453  	   EXCEPTION
11:21:58 1454  	     WHEN NO_DATA_FOUND THEN
11:21:58 1455  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
11:21:58 1456  	 END;
11:21:58 1457  
11:21:58 1458  EXCEPTION
11:21:58 1459  WHEN BAD_INVOICE_ID THEN
11:21:58 1460  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1461  	   SPROC_NAME, 'No such invoice');
11:21:58 1462  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
11:21:58 1463  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1464  	   SPROC_NAME, 'Could not find subscription for given invoice');
11:21:58 1465  WHEN OTHERS THEN
11:21:58 1466  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1467  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1468  END GET_SUBSCR_ID_BY_INVOICE_ID;
11:21:58 1469  
11:21:58 1470  /******************************************************************************/
11:21:58 1471  
11:21:58 1472  PROCEDURE IS_INVOICE_TAX_EXEMPT (
11:21:58 1473  /*
11:21:58 1474  Throws exceptions:
11:21:58 1475  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1476  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:58 1477  Return:
11:21:58 1478  	 GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
11:21:58 1479  	 GLOBAL_CONSTANTS_V15.FALSE else
11:21:58 1480  */
11:21:58 1481  	 in_invoice_id	   IN NUMBER,
11:21:58 1482  	 out_is_tax_exempt OUT NUMBER
11:21:58 1483  ) AS
11:21:58 1484  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
11:21:58 1485  -- VARIABLES
11:21:58 1486  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
11:21:58 1487  -- EXCEPTIONS
11:21:58 1488  BAD_INVOICE_ID EXCEPTION;
11:21:58 1489  BEGIN
11:21:58 1490  
11:21:58 1491  	 BEGIN
11:21:58 1492  	   SELECT
11:21:58 1493  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
11:21:58 1494  	   FROM
11:21:58 1495  	     INVOICE
11:21:58 1496  	   WHERE
11:21:58 1497  	     INVOICE.ID = in_invoice_id;
11:21:58 1498  	   EXCEPTION
11:21:58 1499  	     WHEN NO_DATA_FOUND THEN
11:21:58 1500  	       RAISE BAD_INVOICE_ID;
11:21:58 1501  	 END;
11:21:58 1502  
11:21:58 1503  	 IF var_is_tax_exempt IS NULL THEN
11:21:58 1504  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.FALSE;
11:21:58 1505  	 ELSE
11:21:58 1506  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.TRUE;
11:21:58 1507  	 END IF;
11:21:58 1508  
11:21:58 1509  EXCEPTION
11:21:58 1510  WHEN BAD_INVOICE_ID THEN
11:21:58 1511  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1512  	   SPROC_NAME, 'No such invoice');
11:21:58 1513  WHEN OTHERS THEN
11:21:58 1514  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1515  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1516  END IS_INVOICE_TAX_EXEMPT;
11:21:58 1517  
11:21:58 1518  /******************************************************************************/
11:21:58 1519  
11:21:58 1520  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
11:21:58 1521  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
11:21:58 1522  	 out_result_set OUT SYS_REFCURSOR
11:21:58 1523  ) AS
11:21:58 1524  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
11:21:58 1525  -- VARIABLE
11:21:58 1526  temp_order_id TRANSACTION.ORDER_ID%TYPE;
11:21:58 1527  -- EXCEPTIONS
11:21:58 1528  BAD_ORDER_ID EXCEPTION;
11:21:58 1529  CAN_NOT_FIND_INVOICE EXCEPTION;
11:21:58 1530  BEGIN
11:21:58 1531  
11:21:58 1532  	 OPEN out_result_set FOR
11:21:58 1533  	   SELECT DISTINCT
11:21:58 1534  	     CHARGE.INVOICE_ID
11:21:58 1535  	   FROM
11:21:58 1536  	     CHARGE
11:21:58 1537  	   INNER JOIN
11:21:58 1538  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
11:21:58 1539  	   WHERE
11:21:58 1540  	     TRANSACTION.ORDER_ID = in_order_id;
11:21:58 1541  
11:21:58 1542  EXCEPTION
11:21:58 1543  WHEN BAD_ORDER_ID THEN
11:21:58 1544  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1545  	   SPROC_NAME, 'No such transaction');
11:21:58 1546  WHEN CAN_NOT_FIND_INVOICE THEN
11:21:58 1547  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1548  	   SPROC_NAME, 'Could not find invoice for given order id');
11:21:58 1549  WHEN OTHERS THEN
11:21:58 1550  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1551  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1552  END GET_INVOICE_BY_TRNS_ORDER_ID;
11:21:58 1553  
11:21:58 1554  /******************************************************************************/
11:21:58 1555  
11:21:58 1556  PROCEDURE GET_INVOICE_BY_ID (
11:21:58 1557  	 in_invoice_id	IN NUMBER,
11:21:58 1558  	 out_result_set OUT SYS_REFCURSOR
11:21:58 1559  ) AS
11:21:58 1560  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
11:21:58 1561  -- VARIABLE
11:21:58 1562  temp_invoice_id NUMBER;
11:21:58 1563  -- EXCEPTIONS
11:21:58 1564  BAD_INVOCIE_ID EXCEPTION;
11:21:58 1565  BEGIN
11:21:58 1566  
11:21:58 1567  	 BEGIN
11:21:58 1568  	   SELECT
11:21:58 1569  	     INVOICE.ID into temp_invoice_id
11:21:58 1570  	   FROM
11:21:58 1571  	     INVOICE
11:21:58 1572  	   WHERE
11:21:58 1573  	     INVOICE.ID = in_invoice_id;
11:21:58 1574  	   EXCEPTION
11:21:58 1575  	     WHEN NO_DATA_FOUND THEN
11:21:58 1576  	       RAISE BAD_INVOCIE_ID;
11:21:58 1577  	 END;
11:21:58 1578  
11:21:58 1579  	 OPEN out_result_set FOR
11:21:58 1580  	 SELECT
11:21:58 1581  	   INVOICE.ID,
11:21:58 1582  	   INVOICE.INVOICE_STATUS_ID,
11:21:58 1583  	   INVOICE.TAX_EXEMPT_ID,
11:21:58 1584  	   INVOICE.UPDATE_DATE,
11:21:58 1585  	   INVOICE.UPDATED_BY,
11:21:58 1586  	   INVOICE.CREATE_DATE,
11:21:58 1587  	   INVOICE.CREATED_BY
11:21:58 1588  	 FROM
11:21:58 1589  	   INVOICE
11:21:58 1590  	 WHERE
11:21:58 1591  	   INVOICE.ID = in_invoice_id;
11:21:58 1592  
11:21:58 1593  EXCEPTION
11:21:58 1594  WHEN BAD_INVOCIE_ID THEN
11:21:58 1595  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1596  	   SPROC_NAME, 'No such invoice');
11:21:58 1597  WHEN OTHERS THEN
11:21:58 1598  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1599  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1600  END GET_INVOICE_BY_ID;
11:21:58 1601  
11:21:58 1602  /******************************************************************************/
11:21:58 1603  
11:21:58 1604  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
11:21:58 1605  	 in_invoice_id		       IN NUMBER,
11:21:58 1606  	 out_is_tax_calculation_needed OUT NUMBER
11:21:58 1607  ) AS
11:21:58 1608  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
11:21:58 1609  BEGIN
11:21:58 1610  
11:21:58 1611  	 SELECT
11:21:58 1612  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
11:21:58 1613  	 FROM
11:21:58 1614  	   INVOICE I
11:21:58 1615  	 WHERE
11:21:58 1616  	   I.ID = in_invoice_id;
11:21:58 1617  
11:21:58 1618  EXCEPTION
11:21:58 1619  WHEN NO_DATA_FOUND THEN
11:21:58 1620  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1621  	   SPROC_NAME, 'No such invoice');
11:21:58 1622  WHEN OTHERS THEN
11:21:58 1623  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1624  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1625  END GET_IS_TAX_CALCULATION_NEEDED;
11:21:58 1626  
11:21:58 1627  /******************************************************************************/
11:21:58 1628  
11:21:58 1629  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
11:21:58 1630  	 in_invoice_id		      IN NUMBER,
11:21:58 1631  	 in_updated_by		      IN VARCHAR2,
11:21:58 1632  	 in_is_tax_calculation_needed IN NUMBER
11:21:58 1633  ) AS
11:21:58 1634  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
11:21:58 1635  -- VARIABLES
11:21:58 1636  temp_invoice_id	      NUMBER;
11:21:58 1637  -- EXCEPTIONS
11:21:58 1638  BAD_INVOICE_ID	      EXCEPTION;
11:21:58 1639  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
11:21:58 1640  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:58 1641  BEGIN
11:21:58 1642  
11:21:58 1643  	 BEGIN
11:21:58 1644  	   SELECT
11:21:58 1645  	     i.id into temp_invoice_id
11:21:58 1646  	   FROM
11:21:58 1647  	     invoice i
11:21:58 1648  	   WHERE
11:21:58 1649  	     i.id = in_invoice_id;
11:21:58 1650  	   EXCEPTION
11:21:58 1651  	     WHEN NO_DATA_FOUND THEN
11:21:58 1652  	       RAISE BAD_INVOICE_ID;
11:21:58 1653  	 END;
11:21:58 1654  
11:21:58 1655  	 BEGIN
11:21:58 1656  	   PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
11:21:58 1657  	     in_invoice_id => in_invoice_id,
11:21:58 1658  	     in_updated_by => in_updated_by,
11:21:58 1659  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
11:21:58 1660  	   );
11:21:58 1661  	   EXCEPTION
11:21:58 1662  	     WHEN OTHERS THEN
11:21:58 1663  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1664  	       RAISE CAN_NOT_UPDATE_INVOCIE;
11:21:58 1665  	 END;
11:21:58 1666  
11:21:58 1667  EXCEPTION
11:21:58 1668  WHEN BAD_INVOICE_ID THEN
11:21:58 1669  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1670  	   SPROC_NAME, 'No such invoice');
11:21:58 1671  WHEN CAN_NOT_UPDATE_INVOCIE THEN
11:21:58 1672  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1673  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
11:21:58 1674  WHEN OTHERS THEN
11:21:58 1675  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1676  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1677  END SET_IS_TAX_CALCULATION_NEEDED;
11:21:58 1678  
11:21:58 1679  /******************************************************************************/
11:21:58 1680  
11:21:58 1681  PROCEDURE REFUND_INVOICE (
11:21:58 1682  	 in_invoice_id	    IN NUMBER,
11:21:58 1683  	 in_refund_amount   IN NUMBER,
11:21:58 1684  	 in_note	    IN VARCHAR2,
11:21:58 1685  	 in_created_by	    IN VARCHAR2,
11:21:58 1686  	 out_charge_id	    OUT NUMBER
11:21:58 1687  ) AS
11:21:58 1688  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
11:21:58 1689  -- VARIABLES
11:21:58 1690  var_invoice_status_id  NUMBER;
11:21:58 1691  var_subscription_id    NUMBER;
11:21:58 1692  var_account_id	      NUMBER;
11:21:58 1693  var_group_id	      NUMBER;
11:21:58 1694  var_account_status_id  NUMBER;
11:21:58 1695  var_new_transaction_id NUMBER;
11:21:58 1696  var_instrument_type_id NUMBER;
11:21:58 1697  var_instrument_id      NUMBER;
11:21:58 1698  var_new_charge_id      NUMBER;
11:21:58 1699  var_invoice_amount     NUMBER(10,2);
11:21:58 1700  var_refunds_before     NUMBER(10,2);
11:21:58 1701  var_charges_amount     NUMBER(10,2);
11:21:58 1702  -- EXCEPTIONS
11:21:58 1703  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
11:21:58 1704  ACCOUNT_IS_FROZEN	     EXCEPTION;
11:21:58 1705  BAD_INVOICE_ID		     EXCEPTION;
11:21:58 1706  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
11:21:58 1707  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
11:21:58 1708  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
11:21:58 1709  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
11:21:58 1710  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
11:21:58 1711  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
11:21:58 1712  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
11:21:58 1713  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
11:21:58 1714  EXCEPTION_MESSAGE	      VARCHAR2(1024);
11:21:58 1715  BEGIN
11:21:58 1716  
11:21:58 1717  	 BEGIN
11:21:58 1718  	   SELECT
11:21:58 1719  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
11:21:58 1720  	   FROM
11:21:58 1721  	     INVOICE
11:21:58 1722  	   WHERE
11:21:58 1723  	     INVOICE.ID = in_invoice_id;
11:21:58 1724  	   EXCEPTION
11:21:58 1725  	     WHEN NO_DATA_FOUND THEN
11:21:58 1726  	       RAISE BAD_INVOICE_ID;
11:21:58 1727  	 END;
11:21:58 1728  
11:21:58 1729  	 -- Get instrument and subscription id if exists
11:21:58 1730  	 BEGIN
11:21:58 1731  	   SELECT
11:21:58 1732  	     SUBSCRIPTION.INSTRUMENT_ID,
11:21:58 1733  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
11:21:58 1734  	     SUBSCRIPTION.ACCOUNT_ID,
11:21:58 1735  	     SUBSCRIPTION.ID
11:21:58 1736  	     into
11:21:58 1737  	     var_instrument_id,
11:21:58 1738  	     var_instrument_type_id,
11:21:58 1739  	     var_account_id,
11:21:58 1740  	     var_subscription_id
11:21:58 1741  	   FROM
11:21:58 1742  	     SUBSCRIPTION
11:21:58 1743  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
11:21:58 1744  	   WHERE
11:21:58 1745  	     LICENSE.INVOICE_ID = in_invoice_id
11:21:58 1746  	     AND ROWNUM <= 1;
11:21:58 1747  	   EXCEPTION
11:21:58 1748  	     WHEN NO_DATA_FOUND THEN
11:21:58 1749  	       BEGIN
11:21:58 1750  
11:21:58 1751  		 var_subscription_id := NULL;
11:21:58 1752  
11:21:58 1753  		 SELECT
11:21:58 1754  		   CHARGE.INSTRUMENT_ID,
11:21:58 1755  		   CHARGE.INSTRUMENT_TYPE_ID,
11:21:58 1756  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
11:21:58 1757  		   into
11:21:58 1758  		   var_instrument_id,
11:21:58 1759  		   var_instrument_type_id,
11:21:58 1760  		   var_group_id
11:21:58 1761  		 FROM
11:21:58 1762  		   INVOICE
11:21:58 1763  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
11:21:58 1764  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
11:21:58 1765  		 WHERE
11:21:58 1766  		   INVOICE.ID = in_invoice_id
11:21:58 1767  		   AND ROWNUM <= 1;
11:21:58 1768  
11:21:58 1769  		 SELECT
11:21:58 1770  		   ACCOUNT.ID into var_account_id
11:21:58 1771  		 FROM
11:21:58 1772  		   ACCOUNT
11:21:58 1773  		 WHERE
11:21:58 1774  		   ACCOUNT.GROUP_ID = var_group_id;
11:21:58 1775  
11:21:58 1776  		 EXCEPTION
11:21:58 1777  		   WHEN NO_DATA_FOUND THEN
11:21:58 1778  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
11:21:58 1779  	       END;
11:21:58 1780  	 END;
11:21:58 1781  
11:21:58 1782  	 -- Check account status. It should not to be frozen
11:21:58 1783  	 SELECT
11:21:58 1784  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
11:21:58 1785  	 FROM
11:21:58 1786  	   ACCOUNT
11:21:58 1787  	 WHERE
11:21:58 1788  	   ACCOUNT.ID = var_account_id;
11:21:58 1789  
11:21:58 1790  	 IF var_account_status_id = GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
11:21:58 1791  	   RAISE ACCOUNT_IS_FROZEN;
11:21:58 1792  	 END IF;
11:21:58 1793  
11:21:58 1794  	 IF var_invoice_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
11:21:58 1795  	   RAISE INVOICE_IS_NOT_CLOSED;
11:21:58 1796  	 END IF;
11:21:58 1797  
11:21:58 1798  	 BEGIN
11:21:58 1799  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
11:21:58 1800  	     in_invoice_id => in_invoice_id,
11:21:58 1801  	     out_amount    => var_invoice_amount
11:21:58 1802  	   );
11:21:58 1803  	   EXCEPTION
11:21:58 1804  	     WHEN OTHERS THEN
11:21:58 1805  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1806  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
11:21:58 1807  	 END;
11:21:58 1808  
11:21:58 1809  	 IF ( in_refund_amount > var_invoice_amount ) THEN
11:21:58 1810  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
11:21:58 1811  	 END IF;
11:21:58 1812  
11:21:58 1813  	 SELECT /*+ STAR_TRANSFORMATION */
11:21:58 1814  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
11:21:58 1815  	 FROM
11:21:58 1816  	   CHARGE
11:21:58 1817  	 WHERE
11:21:58 1818  	   CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1819  	   AND (
11:21:58 1820  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:58 1821  	     OR (
11:21:58 1822  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V15.CHARGE_PROCESSED
11:21:58 1823  	       AND EXISTS (
11:21:58 1824  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:58 1825  	       )
11:21:58 1826  	     )
11:21:58 1827  	   )
11:21:58 1828  	   AND CHARGE.CHARGE_AMOUNT < 0;
11:21:58 1829  
11:21:58 1830  	 -- Refunds are negative
11:21:58 1831  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
11:21:58 1832  	 var_refunds_before := 0 - var_refunds_before;
11:21:58 1833  
11:21:58 1834  	 var_charges_amount := 0;
11:21:58 1835  
11:21:58 1836  	 FOR f_processed_charges IN (
11:21:58 1837  	   SELECT
11:21:58 1838  	     CHARGE.CHARGE_AMOUNT
11:21:58 1839  	   FROM
11:21:58 1840  	     CHARGE
11:21:58 1841  	   WHERE
11:21:58 1842  	     CHARGE.INVOICE_ID = in_invoice_id
11:21:58 1843  	     AND CHARGE.CHARGE_AMOUNT > 0
11:21:58 1844  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V15.CHARGE_PROCESSED FROM DUAL)
11:21:58 1845  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS)
11:21:58 1846  	 )
11:21:58 1847  	 LOOP
11:21:58 1848  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
11:21:58 1849  	 END LOOP;
11:21:58 1850  
11:21:58 1851  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
11:21:58 1852  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
11:21:58 1853  	 END IF;
11:21:58 1854  
11:21:58 1855  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
11:21:58 1856  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
11:21:58 1857  	 END IF;
11:21:58 1858  
11:21:58 1859  	 BEGIN
11:21:58 1860  	   PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:58 1861  	     in_transaction_id	=> NULL,
11:21:58 1862  	     in_status_id	=> GLOBAL_STATUSES_V15.TRANSACTION_PREPARE,
11:21:58 1863  	     in_amount		=> -in_refund_amount,
11:21:58 1864  	     in_created_by	=> in_created_by,
11:21:58 1865  	     in_order_id	=> NULL,
11:21:58 1866  	     in_is_refund	=> GLOBAL_CONSTANTS_V15.TRUE,
11:21:58 1867  	     out_transaction_id => var_new_transaction_id
11:21:58 1868  	   );
11:21:58 1869  	   EXCEPTION
11:21:58 1870  	     WHEN OTHERS THEN
11:21:58 1871  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1872  	       RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:58 1873  	 END;
11:21:58 1874  
11:21:58 1875  	 BEGIN
11:21:58 1876  	   PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:58 1877  	     in_invoice_id	   => in_invoice_id,
11:21:58 1878  	     in_transaction_id	   => var_new_transaction_id,
11:21:58 1879  	     in_instrument_type_id => var_instrument_type_id,
11:21:58 1880  	     in_instrument_id	   => var_instrument_id,
11:21:58 1881  	     in_charge_amount	   => -in_refund_amount,
11:21:58 1882  	     in_created_by	   => in_created_by,
11:21:58 1883  	     in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:58 1884  	     out_charge_id	   => var_new_charge_id
11:21:58 1885  	   );
11:21:58 1886  	   EXCEPTION
11:21:58 1887  	     WHEN OTHERS THEN
11:21:58 1888  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1889  	       RAISE CAN_NOT_CREATE_CHARGE;
11:21:58 1890  	 END;
11:21:58 1891  
11:21:58 1892  	 out_charge_id := var_new_charge_id;
11:21:58 1893  
11:21:58 1894  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
11:21:58 1895  	   BEGIN
11:21:58 1896  	     PROCS_SUBSCRIPTION_V15.ANNOTATE_SUBSCRIPTION(
11:21:58 1897  	       in_subscription_id => var_subscription_id,
11:21:58 1898  	       in_agent_id	  => 0, -- AGENT_ID??
11:21:58 1899  	       in_note		  => in_note,
11:21:58 1900  	       in_created_by	  => in_created_by
11:21:58 1901  	     );
11:21:58 1902  	     EXCEPTION
11:21:58 1903  	       WHEN OTHERS THEN
11:21:58 1904  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:58 1905  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
11:21:58 1906  	   END;
11:21:58 1907  	 END IF;
11:21:58 1908  
11:21:58 1909  EXCEPTION
11:21:58 1910  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
11:21:58 1911  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1912  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
11:21:58 1913  WHEN INVOICE_IS_NOT_CLOSED THEN
11:21:58 1914  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 1915  	   SPROC_NAME, 'Invoice is not closed');
11:21:58 1916  WHEN ACCOUNT_IS_FROZEN THEN
11:21:58 1917  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:58 1918  	   SPROC_NAME, 'Could not refund subscription for frozen account');
11:21:58 1919  WHEN BAD_INVOICE_ID THEN
11:21:58 1920  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 1921  	   SPROC_NAME, 'No such invoice');
11:21:58 1922  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
11:21:58 1923  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1924  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
11:21:58 1925  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
11:21:58 1926  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1927  	   SPROC_NAME, 'Refund is greater than amount');
11:21:58 1928  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
11:21:58 1929  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1930  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
11:21:58 1931  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
11:21:58 1932  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:58 1933  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
11:21:58 1934  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:58 1935  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1936  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:58 1937  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:58 1938  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1939  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:58 1940  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
11:21:58 1941  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:58 1942  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
11:21:58 1943  WHEN OTHERS THEN
11:21:58 1944  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 1945  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 1946  END REFUND_INVOICE;
11:21:58 1947  
11:21:58 1948  /******************************************************************************/
11:21:58 1949  
11:21:58 1950  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
11:21:58 1951  	 in_invoice_id		     IN NUMBER,
11:21:58 1952  	 out_order_id		     OUT VARCHAR2,
11:21:58 1953  	 out_external_transaction_id OUT VARCHAR2
11:21:58 1954  ) AS
11:21:58 1955  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
11:21:58 1956  -- VARIABLES
11:21:58 1957  temp_invoice_id number;
11:21:58 1958  cnt_matched_instr number := 0;
11:21:58 1959  -- EXCEPTIONS
11:21:58 1960  BAD_INVOICE_ID EXCEPTION;
11:21:58 1961  BEGIN
11:21:58 1962  
11:21:58 1963  	 BEGIN
11:21:58 1964  	   SELECT
11:21:58 1965  	     i.id into temp_invoice_id
11:21:58 1966  	   from
11:21:58 1967  	     invoice i
11:21:58 1968  	   where
11:21:58 1969  	     i.id = in_invoice_id;
11:21:58 1970  	   EXCEPTION
11:21:58 1971  	     WHEN NO_DATA_FOUND THEN
11:21:58 1972  	       RAISE BAD_INVOICE_ID;
11:21:58 1973  	 END;
11:21:58 1974  
11:21:58 1975  	 select
11:21:58 1976  	   count(1) into cnt_matched_instr
11:21:58 1977  	 from
11:21:58 1978  	   charge ch
11:21:58 1979  	 inner join
11:21:58 1980  	   subscription s
11:21:58 1981  	 on
11:21:58 1982  	   s.instrument_id = ch.instrument_id
11:21:58 1983  	 where
11:21:58 1984  	   ch.invoice_id = in_invoice_id;
11:21:58 1985  
11:21:58 1986  	 if cnt_matched_instr = 0 then
11:21:58 1987  	   out_external_transaction_id := null;
11:21:58 1988  	   out_order_id := null;
11:21:58 1989  	   return;
11:21:58 1990  	 end if;
11:21:58 1991  
11:21:58 1992  	 SELECT
11:21:58 1993  	   t.order_id,
11:21:58 1994  	   ta.external_transaction_id
11:21:58 1995  	   into
11:21:58 1996  	   out_order_id,
11:21:58 1997  	   out_external_transaction_id
11:21:58 1998  	 from
11:21:58 1999  	   charge ch
11:21:58 2000  	   inner join transaction t on ch.transaction_id = t.id
11:21:58 2001  	   inner join transaction_attempt ta on ta.transaction_id = t.id
11:21:58 2002  	 where
11:21:58 2003  	   ch.invoice_id = in_invoice_id
11:21:58 2004  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:58 2005  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
11:21:58 2006  
11:21:58 2007  EXCEPTION
11:21:58 2008  WHEN BAD_INVOICE_ID THEN
11:21:58 2009  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2010  	   SPROC_NAME, 'No such invoice');
11:21:58 2011  WHEN NO_DATA_FOUND THEN
11:21:58 2012  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:58 2013  	   SPROC_NAME, 'No payment data found');
11:21:58 2014  WHEN OTHERS THEN
11:21:58 2015  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:58 2016  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:58 2017  END GET_PAYMENT_INFO_BY_INVOICE_ID;
11:21:58 2018  
11:21:58 2019  PROCEDURE IS_REVOKE_ENTITLEMENTS(
11:21:58 2020  	 in_invoice_id IN NUMBER,
11:21:58 2021  	 out_is_revoke OUT NUMBER
11:21:58 2022  ) AS
11:21:58 2023  BEGIN
11:21:58 2024  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V15.FALSE, GLOBAL_CONSTANTS_V15.TRUE)
11:21:58 2025  	   into out_is_revoke
11:21:58 2026  	 FROM
11:21:58 2027  	   offer_chain oc,
11:21:58 2028  	   subscription s,
11:21:58 2029  	   license l,
11:21:58 2030  	   invoice i
11:21:58 2031  	 where
11:21:58 2032  	   oc.id = s.offer_chain_id and
11:21:58 2033  	   s.id = l.subscription_id and
11:21:58 2034  	   l.invoice_id = i.id and
11:21:58 2035  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V15.TRUE and
11:21:58 2036  	   i.id = in_invoice_id and
11:21:58 2037  	   rownum < 2
11:21:58 2038  	 ;
11:21:58 2039  END IS_REVOKE_ENTITLEMENTS;
11:21:58 2040  
11:21:58 2041  END PROCS_INVOICE_V15;
11:21:58 2042  .
11:21:58 SQL> /

Package body created.

Elapsed: 00:00:00.14
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
11:21:59   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
11:21:59   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
11:21:59   7  AS
11:21:59   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
11:21:59   9  BEGIN
11:21:59  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
11:21:59  11  	  PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE (
11:21:59  12  	    in_gift_certificate_id	  => rec.Id,
11:21:59  13  	    in_gift_certificate_status_id => in_status_id,
11:21:59  14  	    in_updated_by		  => in_updater
11:21:59  15  	  );
11:21:59  16  	END LOOP;
11:21:59  17  END UPDATE_GC_STATUS_BY_INVOICE;
11:21:59  18  
11:21:59  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
11:21:59  20  	in_invoice_id		     IN NUMBER,
11:21:59  21  	out_is_invoice_for_redeem_gc OUT NUMBER
11:21:59  22  ) AS
11:21:59  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
11:21:59  24  var_is_for_gc NUMBER;
11:21:59  25  BEGIN
11:21:59  26  	SELECT
11:21:59  27  	  count(1) into var_is_for_gc
11:21:59  28  	FROM GIFT_CERTIFICATE GC
11:21:59  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
11:21:59  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
11:21:59  31  
11:21:59  32  	IF var_is_for_gc > 0 THEN
11:21:59  33  	  out_is_invoice_for_redeem_gc := 1;
11:21:59  34  	ELSE
11:21:59  35  	  out_is_invoice_for_redeem_gc := 0;
11:21:59  36  	END IF;
11:21:59  37  END IS_INVOICE_FOR_REDEEMED_GC;
11:21:59  38  
11:21:59  39  PROCEDURE GET_UNREDEEMED_GCS (
11:21:59  40  	out_result_set		OUT SYS_REFCURSOR,
11:21:59  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:59  42  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:59  43  	in_process_name IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:59  44  ) AS
11:21:59  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
11:21:59  46  BEGIN
11:21:59  47  	OPEN out_result_set FOR
11:21:59  48  SELECT * FROM
11:21:59  49  (
11:21:59  50  	SELECT
11:21:59  51  	  gc.EXPIRATION_DATE,
11:21:59  52  	  ch.name,
11:21:59  53  	  ch.id offer_chain_id,
11:21:59  54  	  gc.sender_email,
11:21:59  55  	  gc.sender_name,
11:21:59  56  	  gc.recipient_email,
11:21:59  57  	  gc.recipient_name,
11:21:59  58  	  gc.purchase_date,
11:21:59  59  	  gc.redemption_date,
11:21:59  60  	  gc.purchaser_group_id,
11:21:59  61  	  gc.redeemer_group_id,
11:21:59  62  	  gc.code,
11:21:59  63  	  gc.gift_message,
11:21:59  64  	  gc.recipient_notify_date,
11:21:59  65  	  gc.id
11:21:59  66  	FROM
11:21:59  67  	  GIFT_CERTIFICATE gc,
11:21:59  68  	  OFFER_CHAIN ch
11:21:59  69  	WHERE
11:21:59  70  	  ch.id = gc.offer_chain_id
11:21:59  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
11:21:59  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
11:21:59  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
11:21:59  74  	  AND gc.redeemer_group_id is null
11:21:59  75  	  AND NOT EXISTS(
11:21:59  76  	    SELECT NULL
11:21:59  77  	    FROM OPS_OWNER.PROCESS_RETRY_THROTTLE
11:21:59  78  	    WHERE PROCESS_NAME = in_process_name
11:21:59  79  	      AND GENERIC_ID = gc.id
11:21:59  80  	  ) AND EXISTS(
11:21:59  81  	    SELECT NULL
11:21:59  82  	    FROM
11:21:59  83  	      charge c,
11:21:59  84  	      transaction_attempt ta,
11:21:59  85  	      transaction t
11:21:59  86  	    WHERE
11:21:59  87  	      c.invoice_id = gc.purchase_invoice_id and
11:21:59  88  	      c.transaction_id = t.id and
11:21:59  89  	      t.id = ta.transaction_id and
11:21:59  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS
11:21:59  91  	  ) AND NOT EXISTS (
11:21:59  92  	    SELECT NULL
11:21:59  93  	    FROM
11:21:59  94  	      charge c,
11:21:59  95  	      transaction t
11:21:59  96  	    WHERE
11:21:59  97  	      c.invoice_id = gc.purchase_invoice_id and
11:21:59  98  	      c.transaction_id = t.id and
11:21:59  99  	      t.is_refund = GLOBAL_CONSTANTS_V15.TRUE
11:21:59 100  	  )
11:21:59 101  	  AND ROWNUM <= in_num_rows*10
11:21:59 102  	  ORDER BY dbms_random.value
11:21:59 103  ) WHERE
11:21:59 104  	  ROWNUM <= in_num_rows;
11:21:59 105  EXCEPTION
11:21:59 106  WHEN OTHERS THEN
11:21:59 107  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 109  END GET_UNREDEEMED_GCS;
11:21:59 110  
11:21:59 111  PROCEDURE ADD_CREDIT_CARD (
11:21:59 112  /*
11:21:59 113  Throws exceptions:
11:21:59 114  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 115  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 116  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 117  */
11:21:59 118  	in_group_id		  IN NUMBER,
11:21:59 119  	in_updated_by		  IN VARCHAR2,
11:21:59 120  	in_instrument_name	  IN VARCHAR2,
11:21:59 121  	in_card_holder_name	  IN VARCHAR2,
11:21:59 122  	in_street_address	  IN VARCHAR2,
11:21:59 123  	in_street_address2	  IN VARCHAR2,
11:21:59 124  	in_state		  IN VARCHAR2,
11:21:59 125  	in_city 		  IN VARCHAR2,
11:21:59 126  	in_postal_code		  IN VARCHAR2,
11:21:59 127  	in_country		  IN CHAR,
11:21:59 128  	in_last_four_cc 	  IN VARCHAR2,
11:21:59 129  	in_expiration_date	  IN DATE,
11:21:59 130  	in_credit_card_type_id	  IN NUMBER,
11:21:59 131  	in_token		  IN VARCHAR2,
11:21:59 132  	in_chase_profile_id	  IN VARCHAR2,
11:21:59 133  	in_credit_card_status_id  IN NUMBER,
11:21:59 134  	in_private_first_name	  IN VARCHAR2,
11:21:59 135  	in_private_last_name	  IN VARCHAR2,
11:21:59 136  	out_credit_card_id	  OUT NUMBER
11:21:59 137  ) AS
11:21:59 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
11:21:59 139  -- VARIABLES
11:21:59 140  var_account_id	      NUMBER;
11:21:59 141  var_account_status      NUMBER;
11:21:59 142  var_credit_card_id      NUMBER;
11:21:59 143  temp_old_credit_card_id NUMBER;
11:21:59 144  -- EXCEPTIONS
11:21:59 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
11:21:59 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
11:21:59 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
11:21:59 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
11:21:59 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
11:21:59 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
11:21:59 151  var_charges_set		SYS_REFCURSOR;
11:21:59 152  var_charge_id		NUMBER;
11:21:59 153  var_charge_invoice_id	NUMBER;
11:21:59 154  var_charge_transaction_id NUMBER;
11:21:59 155  var_charge_amount 	NUMBER(10,2);
11:21:59 156  temp_out_charge_id	NUMBER;
11:21:59 157  temp_out_transaction_id	NUMBER;
11:21:59 158  var_order_id			VARCHAR2(1024);
11:21:59 159  BEGIN
11:21:59 160  
11:21:59 161  	-- Get account id
11:21:59 162  	-- Get account status
11:21:59 163  	SELECT
11:21:59 164  	  ACCOUNT.ID,
11:21:59 165  	  ACCOUNT.ACCOUNT_STATUS_ID
11:21:59 166  	  into
11:21:59 167  	  var_account_id,
11:21:59 168  	  var_account_status
11:21:59 169  	FROM
11:21:59 170  	  ACCOUNT
11:21:59 171  	WHERE
11:21:59 172  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 173  
11:21:59 174  	SELECT
11:21:59 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
11:21:59 176  	FROM DUAL;
11:21:59 177  
11:21:59 178  	-- Insert new row in CREDIT_CARD table
11:21:59 179  	PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_CREDIT_CARD(
11:21:59 180  	  out_credit_card_id	      => var_credit_card_id,
11:21:59 181  	  in_account_id 	      => var_account_id,
11:21:59 182  	  in_instrument_name	      => in_instrument_name,
11:21:59 183  	  in_private_card_holder_name => in_card_holder_name,
11:21:59 184  	  in_private_street_address   => in_street_address,
11:21:59 185  	  in_private_street_address2  => in_street_address2,
11:21:59 186  	  in_state		      => in_state,
11:21:59 187  	  in_city		      => in_city,
11:21:59 188  	  in_postal_code	      => in_postal_code,
11:21:59 189  	  in_country		      => in_country,
11:21:59 190  	  in_last_four_cc	      => in_last_four_cc,
11:21:59 191  	  in_expiration_date	      => in_expiration_date,
11:21:59 192  	  in_credit_card_type_id      => in_credit_card_type_id,
11:21:59 193  	  in_secret_token	      => in_token,
11:21:59 194  	  in_chase_profile_id	      => in_chase_profile_id,
11:21:59 195  	  in_created_by 	      => in_updated_by,
11:21:59 196  	  in_credit_card_status_id    => in_credit_card_status_id,
11:21:59 197  	  in_private_first_name       => in_private_first_name,
11:21:59 198  	  in_private_last_name	      => in_private_last_name
11:21:59 199  	);
11:21:59 200  
11:21:59 201  	out_credit_card_id := var_credit_card_id;
11:21:59 202  
11:21:59 203  EXCEPTION
11:21:59 204  WHEN NO_DATA_FOUND THEN
11:21:59 205  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 206  	  SPROC_NAME, 'No such account');
11:21:59 207  WHEN BAD_OLD_CREDIT_CARD THEN
11:21:59 208  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 209  	  SPROC_NAME, 'Bad old credit card id');
11:21:59 210  WHEN BAD_IS_DEFAULT_VALUE THEN
11:21:59 211  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 212  	  SPROC_NAME, 'Bad is_default value');
11:21:59 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
11:21:59 214  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
11:21:59 216  WHEN BAD_ACCOUNT_STATUS THEN
11:21:59 217  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 218  	  SPROC_NAME, 'Account is not active');
11:21:59 219  WHEN OTHERS THEN
11:21:59 220  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 222  END ADD_CREDIT_CARD;
11:21:59 223  
11:21:59 224  /******************************************************************************/
11:21:59 225  
11:21:59 226  PROCEDURE ADD_PAYPAL (
11:21:59 227  /*
11:21:59 228  Throws exceptions:
11:21:59 229  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 230  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 231  */
11:21:59 232  	in_group_id			IN NUMBER,
11:21:59 233  	in_instrument_name		IN VARCHAR2,
11:21:59 234  	in_private_email_address	IN VARCHAR2,
11:21:59 235  	in_created_by			IN VARCHAR2,
11:21:59 236  	in_paypal_status_id		IN NUMBER,
11:21:59 237  	in_paypal_prvt_street_address	IN VARCHAR2,
11:21:59 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
11:21:59 239  	in_state			IN VARCHAR2,
11:21:59 240  	in_city 			IN VARCHAR2,
11:21:59 241  	in_postal_code			IN VARCHAR2,
11:21:59 242  	in_country			IN CHAR,
11:21:59 243  	in_expiration_date		IN DATE,
11:21:59 244  	in_secret_token 		IN VARCHAR2,
11:21:59 245  	out_paypal_id			OUT NUMBER
11:21:59 246  ) AS
11:21:59 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
11:21:59 248  var_paypal_id NUMBER;
11:21:59 249  var_account_id  NUMBER;
11:21:59 250  -- EXCEPTIONS
11:21:59 251  BAD_GROUP_ID	    EXCEPTION;
11:21:59 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
11:21:59 253  BAD_PAYPAL_STATUS     EXCEPTION;
11:21:59 254  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:59 255  BEGIN
11:21:59 256  
11:21:59 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
11:21:59 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
11:21:59 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
11:21:59 260  	  RAISE BAD_PAYPAL_STATUS;
11:21:59 261  	END IF;
11:21:59 262  
11:21:59 263  	BEGIN
11:21:59 264  	  SELECT
11:21:59 265  	    a.id into var_account_id
11:21:59 266  	  from
11:21:59 267  	    account a
11:21:59 268  	  where
11:21:59 269  	    a.group_id = in_group_id;
11:21:59 270  	  EXCEPTION
11:21:59 271  	    WHEN NO_DATA_FOUND THEN
11:21:59 272  	      RAISE BAD_GROUP_ID;
11:21:59 273  	END;
11:21:59 274  
11:21:59 275  	BEGIN
11:21:59 276  	  PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_PAYPAL(
11:21:59 277  	    out_paypal_id		   => var_paypal_id,
11:21:59 278  	    in_paypal_id		   => NULL,
11:21:59 279  	    in_account_id		   => var_account_id,
11:21:59 280  	    in_instrument_name		   => in_instrument_name,
11:21:59 281  	    in_private_email_address	   => in_private_email_address,
11:21:59 282  	    in_created_by		   => in_created_by,
11:21:59 283  	    in_paypal_status_id 	   => in_paypal_status_id,
11:21:59 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
11:21:59 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
11:21:59 286  	    in_state			   => in_state,
11:21:59 287  	    in_city			   => in_city,
11:21:59 288  	    in_postal_code		   => in_postal_code,
11:21:59 289  	    in_country			   => in_country,
11:21:59 290  	    in_expiration_date		   => in_expiration_date,
11:21:59 291  	    in_secret_token		   => in_secret_token
11:21:59 292  	  );
11:21:59 293  	  EXCEPTION
11:21:59 294  	    WHEN OTHERS THEN
11:21:59 295  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
11:21:59 297  	END;
11:21:59 298  
11:21:59 299  	out_paypal_id := var_paypal_id;
11:21:59 300  
11:21:59 301  EXCEPTION
11:21:59 302  WHEN BAD_GROUP_ID THEN
11:21:59 303  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 304  	  SPROC_NAME, 'No such group id');
11:21:59 305  WHEN BAD_PAYPAL_STATUS THEN
11:21:59 306  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 307  	  SPROC_NAME, 'Bad paypal status');
11:21:59 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
11:21:59 309  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
11:21:59 311  WHEN OTHERS THEN
11:21:59 312  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 314  END ADD_PAYPAL;
11:21:59 315  
11:21:59 316  /******************************************************************************/
11:21:59 317  
11:21:59 318  PROCEDURE DISABLE_CREDIT_CARD (
11:21:59 319  /*
11:21:59 320  Throws exceptions:
11:21:59 321  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 322  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 323  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 324  */
11:21:59 325  	in_credit_card_id IN NUMBER,
11:21:59 326  	in_updated_by	  IN VARCHAR2
11:21:59 327  ) AS
11:21:59 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
11:21:59 329  -- VARIBLES
11:21:59 330  var_account_id		     NUMBER;
11:21:59 331  var_group_id		     NUMBER;
11:21:59 332  var_credit_card_status	     NUMBER;
11:21:59 333  var_pending_transactions_num   NUMBER;
11:21:59 334  var_pending_invoices_num	     NUMBER;
11:21:59 335  current_def_instrument_type_id NUMBER;
11:21:59 336  current_def_instrument_id      NUMBER;
11:21:59 337  -- EXCEPTIONS
11:21:59 338  BAD_CC_STATUS		   EXCEPTION;
11:21:59 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
11:21:59 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
11:21:59 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
11:21:59 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
11:21:59 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
11:21:59 344  BEGIN
11:21:59 345  
11:21:59 346  	-- Get credit card status
11:21:59 347  	-- Get account id
11:21:59 348  	SELECT
11:21:59 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
11:21:59 350  	  CREDIT_CARD.ACCOUNT_ID
11:21:59 351  	  into
11:21:59 352  	  var_credit_card_status,
11:21:59 353  	  var_account_id
11:21:59 354  	FROM
11:21:59 355  	  CREDIT_CARD
11:21:59 356  	WHERE
11:21:59 357  	  CREDIT_CARD.ID = in_credit_card_id;
11:21:59 358  
11:21:59 359  	-- Check that we can disable this credit card (STUB)
11:21:59 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
11:21:59 362  	END IF;
11:21:59 363  
11:21:59 364  	-- Get account id
11:21:59 365  	SELECT
11:21:59 366  	  ACCOUNT.GROUP_ID into var_group_id
11:21:59 367  	FROM
11:21:59 368  	  ACCOUNT
11:21:59 369  	WHERE
11:21:59 370  	  ACCOUNT.ID = var_account_id;
11:21:59 371  
11:21:59 372  	-- Card should to be active
11:21:59 373  	IF var_credit_card_status != GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE THEN
11:21:59 374  	  RAISE BAD_CC_STATUS;
11:21:59 375  	END IF;
11:21:59 376  
11:21:59 377  	-- Looking for pending transactions associated with given credit card
11:21:59 378  	SELECT
11:21:59 379  	  COUNT(*) into var_pending_invoices_num
11:21:59 380  	FROM
11:21:59 381  	  CHARGE
11:21:59 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:59 383  	WHERE
11:21:59 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:59 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
11:21:59 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
11:21:59 387  
11:21:59 388  	IF var_pending_invoices_num > 0 THEN
11:21:59 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
11:21:59 390  	END IF;
11:21:59 391  
11:21:59 392  	-- Getting current default financial instrument
11:21:59 393  	BEGIN
11:21:59 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 395  	    in_group_id 	   => var_group_id,
11:21:59 396  	    out_instrument_type_id => current_def_instrument_type_id,
11:21:59 397  	    out_instrument_id	   => current_def_instrument_id
11:21:59 398  	  );
11:21:59 399  	  EXCEPTION
11:21:59 400  	    WHEN OTHERS THEN
11:21:59 401  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
11:21:59 403  	END;
11:21:59 404  
11:21:59 405  	-- Checking that credit card is not default
11:21:59 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:59 407  	  AND current_def_instrument_id = in_credit_card_id THEN
11:21:59 408  	  BEGIN
11:21:59 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
11:21:59 410  	      in_group_id => var_group_id
11:21:59 411  	    );
11:21:59 412  	  EXCEPTION
11:21:59 413  	    WHEN OTHERS THEN
11:21:59 414  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
11:21:59 416  	  END;
11:21:59 417  	END IF;
11:21:59 418  
11:21:59 419  	-- Update credit card status
11:21:59 420  	PROCS_FIN_INSTRUMENTS_V15.UPDATE_CREDIT_CARD_STATUS(
11:21:59 421  	  in_credit_card_id	   => in_credit_card_id,
11:21:59 422  	  in_updated_by 	   => in_updated_by,
11:21:59 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
11:21:59 424  	);
11:21:59 425  
11:21:59 426  EXCEPTION
11:21:59 427  WHEN NO_DATA_FOUND THEN
11:21:59 428  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 429  	  SPROC_NAME, 'No such credit card');
11:21:59 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
11:21:59 431  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
11:21:59 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
11:21:59 434  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
11:21:59 436  WHEN BAD_CC_STATUS THEN
11:21:59 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 438  	  SPROC_NAME, 'Credit card is not active');
11:21:59 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
11:21:59 440  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
11:21:59 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
11:21:59 443  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
11:21:59 445  WHEN OTHERS THEN
11:21:59 446  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 448  END DISABLE_CREDIT_CARD;
11:21:59 449  
11:21:59 450  /******************************************************************************/
11:21:59 451  
11:21:59 452  PROCEDURE DISABLE_PAYPAL (
11:21:59 453  /*
11:21:59 454  Throws exceptions:
11:21:59 455  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 456  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 457  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 458  */
11:21:59 459  	in_paypal_id  IN NUMBER,
11:21:59 460  	in_updated_by IN VARCHAR2
11:21:59 461  ) AS
11:21:59 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
11:21:59 463  -- VARIABLES
11:21:59 464  var_paypal_status_id NUMBER;
11:21:59 465  var_account_id	   NUMBER;
11:21:59 466  var_group_id	   NUMBER;
11:21:59 467  var_pending_invoices_num NUMBER;
11:21:59 468  current_def_instrument_type_id NUMBER;
11:21:59 469  current_def_instrument_id NUMBER;
11:21:59 470  -- EXCEPTIONS
11:21:59 471  BAD_PAYPAL_ID EXCEPTION;
11:21:59 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
11:21:59 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
11:21:59 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
11:21:59 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
11:21:59 476  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:59 477  BEGIN
11:21:59 478  
11:21:59 479  	-- Get Paypal status
11:21:59 480  	-- Get account
11:21:59 481  	BEGIN
11:21:59 482  	  SELECT
11:21:59 483  	    PAYPAL.PAYPAL_STATUS_ID,
11:21:59 484  	    PAYPAL.ACCOUNT_ID
11:21:59 485  	    into
11:21:59 486  	    var_paypal_status_id,
11:21:59 487  	    var_account_id
11:21:59 488  	  FROM
11:21:59 489  	    PAYPAL
11:21:59 490  	  WHERE
11:21:59 491  	    PAYPAL.ID = in_paypal_id;
11:21:59 492  	  EXCEPTION
11:21:59 493  	    WHEN NO_DATA_FOUND THEN
11:21:59 494  	      RAISE BAD_PAYPAL_ID;
11:21:59 495  	END;
11:21:59 496  
11:21:59 497  	-- Get group id
11:21:59 498  	SELECT
11:21:59 499  	  ACCOUNT.GROUP_ID into var_group_id
11:21:59 500  	FROM
11:21:59 501  	  ACCOUNT
11:21:59 502  	WHERE
11:21:59 503  	  ACCOUNT.ID = var_account_id;
11:21:59 504  
11:21:59 505  	-- Card should not be disabled
11:21:59 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V15.PAYPAL_INACTIVE THEN
11:21:59 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
11:21:59 508  	END IF;
11:21:59 509  
11:21:59 510  	-- Looking for pending transactions associated with given credit card
11:21:59 511  	SELECT
11:21:59 512  	  COUNT(*) into var_pending_invoices_num
11:21:59 513  	FROM
11:21:59 514  	  CHARGE
11:21:59 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
11:21:59 516  	WHERE
11:21:59 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
11:21:59 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
11:21:59 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V15.TRANSACTION_PENDING;
11:21:59 520  
11:21:59 521  	IF var_pending_invoices_num > 0 THEN
11:21:59 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
11:21:59 523  	END IF;
11:21:59 524  
11:21:59 525  	-- Getting current default financial instrument
11:21:59 526  	BEGIN
11:21:59 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 528  	    in_group_id 	   => var_group_id,
11:21:59 529  	    out_instrument_type_id => current_def_instrument_type_id,
11:21:59 530  	    out_instrument_id	   => current_def_instrument_id
11:21:59 531  	  );
11:21:59 532  	  EXCEPTION
11:21:59 533  	    WHEN OTHERS THEN
11:21:59 534  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
11:21:59 536  	END;
11:21:59 537  
11:21:59 538  	-- Checking that credit card is not default
11:21:59 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
11:21:59 540  	  AND current_def_instrument_id = in_paypal_id THEN
11:21:59 541  	  BEGIN
11:21:59 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
11:21:59 543  	      in_group_id => var_group_id
11:21:59 544  	    );
11:21:59 545  	  EXCEPTION
11:21:59 546  	    WHEN OTHERS THEN
11:21:59 547  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
11:21:59 549  	  END;
11:21:59 550  	END IF;
11:21:59 551  
11:21:59 552  	PROCS_FIN_INSTRUMENTS_V15.UPDATE_PAYPAL_STATUS(
11:21:59 553  	  in_paypal_id	      => in_paypal_id,
11:21:59 554  	  in_updated_by       => in_updated_by,
11:21:59 555  	  in_paypal_status_id => GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
11:21:59 556  	);
11:21:59 557  
11:21:59 558  EXCEPTION
11:21:59 559  WHEN BAD_PAYPAL_ID THEN
11:21:59 560  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 561  	  SPROC_NAME, 'No such paypal');
11:21:59 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
11:21:59 563  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 564  	  SPROC_NAME, 'Paypal already inactive');
11:21:59 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
11:21:59 566  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
11:21:59 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
11:21:59 569  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
11:21:59 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
11:21:59 572  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
11:21:59 574  WHEN OTHERS THEN
11:21:59 575  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 577  END DISABLE_PAYPAL;
11:21:59 578  
11:21:59 579  /******************************************************************************/
11:21:59 580  
11:21:59 581  PROCEDURE UPDATE_CREDIT_CARD (
11:21:59 582  /*
11:21:59 583  Throws exceptions:
11:21:59 584  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 585  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 586  */
11:21:59 587  	in_credit_card_id	  IN NUMBER,
11:21:59 588  	in_updated_by		  IN VARCHAR2,
11:21:59 589  	in_instrument_name	  IN VARCHAR2,
11:21:59 590  	in_is_default		  IN NUMBER
11:21:59 591  ) AS
11:21:59 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
11:21:59 593  -- VARIABLES
11:21:59 594  var_account_id NUMBER;
11:21:59 595  var_group_id   NUMBER;
11:21:59 596  temp_cc_rownum NUMBER;
11:21:59 597  current_def_instrument_type_id NUMBER;
11:21:59 598  current_def_instrument_id      NUMBER;
11:21:59 599  -- EXCEPTION
11:21:59 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
11:21:59 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
11:21:59 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
11:21:59 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
11:21:59 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
11:21:59 605  BEGIN
11:21:59 606  
11:21:59 607  	-- Get account id
11:21:59 608  	SELECT
11:21:59 609  	  CREDIT_CARD.ACCOUNT_ID
11:21:59 610  	  into
11:21:59 611  	  var_account_id
11:21:59 612  	FROM
11:21:59 613  	  CREDIT_CARD
11:21:59 614  	WHERE
11:21:59 615  	  CREDIT_CARD.ID = in_credit_card_id;
11:21:59 616  
11:21:59 617  	-- Get group id
11:21:59 618  	SELECT
11:21:59 619  	  ACCOUNT.GROUP_ID into var_group_id
11:21:59 620  	FROM
11:21:59 621  	  ACCOUNT
11:21:59 622  	WHERE
11:21:59 623  	  ACCOUNT.ID = var_account_id;
11:21:59 624  
11:21:59 625  	-- Check that passed data is correct
11:21:59 626  	IF in_is_default != GLOBAL_CONSTANTS_V15.TRUE
11:21:59 627  	  AND in_is_default != GLOBAL_CONSTANTS_V15.FALSE
11:21:59 628  	  AND in_is_default IS NOT NULL THEN
11:21:59 629  	  RAISE BAD_IS_DEFAULT_VALUE;
11:21:59 630  	END IF;
11:21:59 631  
11:21:59 632  	-- Update credit card
11:21:59 633  	IF in_instrument_name IS NOT NULL THEN
11:21:59 634  	  PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_CREDIT_CARD(
11:21:59 635  	    in_credit_card_id  => in_credit_card_id,
11:21:59 636  	    in_updated_by      => in_updated_by,
11:21:59 637  	    in_instrument_name => in_instrument_name
11:21:59 638  	  );
11:21:59 639  	END IF;
11:21:59 640  
11:21:59 641  	-- Set default financial instrument
11:21:59 642  	IF in_is_default = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:59 643  	  BEGIN
11:21:59 644  	    PROCS_FIN_INSTRUMENTS_V15.SET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 645  	      in_group_id	    => var_group_id,
11:21:59 646  	      in_instrument_type_id => GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD,
11:21:59 647  	      in_instrument_id	    => in_credit_card_id,
11:21:59 648  	      in_updated_by	    => in_updated_by
11:21:59 649  	    );
11:21:59 650  	    EXCEPTION
11:21:59 651  	      WHEN OTHERS THEN
11:21:59 652  		EXCEPTION_MESSAGE := SQLERRM;
11:21:59 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
11:21:59 654  	  END;
11:21:59 655  	END IF;
11:21:59 656  
11:21:59 657  	-- Set default financial instrument
11:21:59 658  	IF in_is_default = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 659  	  BEGIN
11:21:59 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 661  	      in_group_id	     => var_group_id,
11:21:59 662  	      out_instrument_type_id => current_def_instrument_type_id,
11:21:59 663  	      out_instrument_id      => current_def_instrument_id
11:21:59 664  	    );
11:21:59 665  	  EXCEPTION
11:21:59 666  	    WHEN OTHERS THEN
11:21:59 667  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
11:21:59 669  	  END;
11:21:59 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:59 671  	    AND current_def_instrument_id = in_credit_card_id THEN
11:21:59 672  	    BEGIN
11:21:59 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
11:21:59 674  		in_group_id => var_group_id
11:21:59 675  	      );
11:21:59 676  	      EXCEPTION
11:21:59 677  		WHEN OTHERS THEN
11:21:59 678  		  EXCEPTION_MESSAGE := SQLERRM;
11:21:59 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
11:21:59 680  	    END;
11:21:59 681  	  END IF;
11:21:59 682  	END IF;
11:21:59 683  
11:21:59 684  EXCEPTION
11:21:59 685  WHEN NO_DATA_FOUND THEN
11:21:59 686  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 687  	  SPROC_NAME, 'No such credit card');
11:21:59 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
11:21:59 689  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
11:21:59 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
11:21:59 692  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
11:21:59 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
11:21:59 695  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
11:21:59 697  WHEN OTHERS THEN
11:21:59 698  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 700  END UPDATE_CREDIT_CARD;
11:21:59 701  
11:21:59 702  /******************************************************************************/
11:21:59 703  
11:21:59 704  PROCEDURE START_GC_PURCHASING (
11:21:59 705  	in_group_id		  IN NUMBER,
11:21:59 706  	in_offer_chain_id	  IN VARCHAR2,
11:21:59 707  	in_gift_certificate_code  IN  VARCHAR2,
11:21:59 708  	in_created_by		  IN  VARCHAR2,
11:21:59 709  	in_recipient_name	  IN  VARCHAR2,
11:21:59 710  	in_recipient_email	  IN  VARCHAR2,
11:21:59 711  	in_recipient_address_id   IN NUMBER,
11:21:59 712  	in_recipient_notify_date  IN DATE,
11:21:59 713  	in_sender_name		  IN VARCHAR2,
11:21:59 714  	in_sender_email 	  IN VARCHAR2,
11:21:59 715  	in_gift_message 	  IN  VARCHAR2,
11:21:59 716  	in_expiration_date	  IN DATE,
11:21:59 717  	out_gift_certificate_id   OUT NUMBER,
11:21:59 718  	out_invoice_id		  OUT NUMBER
11:21:59 719  ) AS
11:21:59 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
11:21:59 721  -- VARIABLES
11:21:59 722  var_account_id		NUMBER;
11:21:59 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
11:21:59 724  var_och_is_gc		NUMBER;
11:21:59 725  var_offer_chain_status_id NUMBER;
11:21:59 726  var_is_for_redemption	NUMBER;
11:21:59 727  var_new_invoice_id	NUMBER;
11:21:59 728  var_gift_cert_id		NUMBER;
11:21:59 729  var_account_tax_exempt_id VARCHAR2(255);
11:21:59 730  -- EXCEPTIONS
11:21:59 731  BAD_GROUP_ID		    EXCEPTION;
11:21:59 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
11:21:59 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
11:21:59 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
11:21:59 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
11:21:59 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
11:21:59 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
11:21:59 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
11:21:59 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
11:21:59 740  
11:21:59 741  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:59 742  BEGIN
11:21:59 743  	-- Get account id
11:21:59 744  	BEGIN
11:21:59 745  	  SELECT
11:21:59 746  	    ACCOUNT.ID,
11:21:59 747  	    ACCOUNT.TAX_EXEMPT_ID
11:21:59 748  	    into
11:21:59 749  	    var_account_id,
11:21:59 750  	    var_account_tax_exempt_id
11:21:59 751  	  FROM
11:21:59 752  	    ACCOUNT
11:21:59 753  	  WHERE
11:21:59 754  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 755  	  EXCEPTION
11:21:59 756  	  WHEN NO_DATA_FOUND THEN
11:21:59 757  	    RAISE BAD_GROUP_ID;
11:21:59 758  	END;
11:21:59 759  
11:21:59 760  	-- Check for the same code
11:21:59 761  	BEGIN
11:21:59 762  	  SELECT
11:21:59 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
11:21:59 764  	  FROM
11:21:59 765  	    GIFT_CERTIFICATE
11:21:59 766  	  WHERE
11:21:59 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
11:21:59 768  
11:21:59 769  	  RAISE GC_CODE_ALREADY_EXISTS;
11:21:59 770  
11:21:59 771  	  EXCEPTION
11:21:59 772  	    WHEN NO_DATA_FOUND THEN
11:21:59 773  	      NULL;
11:21:59 774  	END;
11:21:59 775  
11:21:59 776  	-- Get offer chain flag "is_gift_certificate"
11:21:59 777  	BEGIN
11:21:59 778  	  SELECT
11:21:59 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
11:21:59 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
11:21:59 781  	    into
11:21:59 782  	    var_och_is_gc,
11:21:59 783  	    var_offer_chain_status_id
11:21:59 784  	  FROM
11:21:59 785  	    OFFER_CHAIN
11:21:59 786  	  WHERE
11:21:59 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
11:21:59 788  	  EXCEPTION
11:21:59 789  	  WHEN NO_DATA_FOUND THEN
11:21:59 790  	    RAISE BAD_OFFER_CHAIN_ID;
11:21:59 791  	END;
11:21:59 792  
11:21:59 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V15.TRUE
11:21:59 794  	  OR var_och_is_gc IS NULL THEN
11:21:59 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
11:21:59 796  	END IF;
11:21:59 797  
11:21:59 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
11:21:59 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
11:21:59 800  	END IF;
11:21:59 801  
11:21:59 802  	-- norlov: #38151 check if the OC is for Redemption:
11:21:59 803  	SELECT
11:21:59 804  	  COUNT(*) into var_is_for_redemption
11:21:59 805  	FROM
11:21:59 806  	  OFFER_CHAIN_ELIGIBILITY
11:21:59 807  	WHERE
11:21:59 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
11:21:59 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
11:21:59 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
11:21:59 811  
11:21:59 812  	IF var_is_for_redemption > 0 THEN
11:21:59 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
11:21:59 814  	END IF;
11:21:59 815  
11:21:59 816  	-- Create new invoice
11:21:59 817  	BEGIN
11:21:59 818  	  PROCS_INVOICE_V15.CREATE_INVOICE(
11:21:59 819  	    in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
11:21:59 820  	    in_created_by     => in_created_by,
11:21:59 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
11:21:59 822  	    out_invoice_id    => var_new_invoice_id
11:21:59 823  	  );
11:21:59 824  	  EXCEPTION
11:21:59 825  	    WHEN OTHERS THEN
11:21:59 826  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 827  	      RAISE CAN_NOT_CREATE_INVOICE;
11:21:59 828  	END;
11:21:59 829  
11:21:59 830  	-- Add line items for new invoice
11:21:59 831  	BEGIN
11:21:59 832  	  FOR f_offer_data IN (
11:21:59 833  	    SELECT
11:21:59 834  	      OFFER_ID,
11:21:59 835  	      NUM_RECURRENCES
11:21:59 836  	    FROM
11:21:59 837  	      OFFER_OFFER_CHAIN
11:21:59 838  	    WHERE
11:21:59 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:59 840  	  )
11:21:59 841  	  LOOP
11:21:59 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
11:21:59 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
11:21:59 844  	    END IF;
11:21:59 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
11:21:59 846  	    LOOP
11:21:59 847  	      PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
11:21:59 848  		in_invoice_id => var_new_invoice_id,
11:21:59 849  		in_offer_id   => f_offer_data.OFFER_ID,
11:21:59 850  		in_created_by => in_created_by
11:21:59 851  	      );
11:21:59 852  	    END LOOP;
11:21:59 853  	  END LOOP;
11:21:59 854  
11:21:59 855  	  EXCEPTION
11:21:59 856  	    WHEN OTHERS THEN
11:21:59 857  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
11:21:59 859  	END;
11:21:59 860  
11:21:59 861  	PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_GIFT_CERTIFICATE(
11:21:59 862  	  out_gift_certificate_id	=> var_gift_cert_id,
11:21:59 863  	  in_purchaser_group_id 	=> in_group_id,
11:21:59 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
11:21:59 865  	  in_offer_chain_id		=> in_offer_chain_id,
11:21:59 866  	  in_expiration_date		=> in_expiration_date,
11:21:59 867  	  in_purchase_date		=> SYSDATE,
11:21:59 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE,
11:21:59 869  	  in_code			=> in_gift_certificate_code,
11:21:59 870  	  in_created_by 		=> in_created_by,
11:21:59 871  	  in_recipient_name		=> in_recipient_name,
11:21:59 872  	  in_gift_message		=> in_gift_message,
11:21:59 873  	  in_recipient_email		=> in_recipient_email,
11:21:59 874  	  in_sender_email		=> in_sender_email,
11:21:59 875  	  in_sender_name		=> in_sender_name,
11:21:59 876  	  in_recipient_address_id	=> in_recipient_address_id,
11:21:59 877  	  in_recipient_notify_date	=> in_recipient_notify_date
11:21:59 878  	);
11:21:59 879  
11:21:59 880  	out_gift_certificate_id := var_gift_cert_id;
11:21:59 881  	out_invoice_id := var_new_invoice_id;
11:21:59 882  
11:21:59 883  EXCEPTION
11:21:59 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
11:21:59 885  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 886  	  SPROC_NAME, 'Offer chain is not active');
11:21:59 887  WHEN GC_CODE_ALREADY_EXISTS THEN
11:21:59 888  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:59 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
11:21:59 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
11:21:59 891  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
11:21:59 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
11:21:59 894  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
11:21:59 896  WHEN CAN_NOT_CREATE_INVOICE THEN
11:21:59 897  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
11:21:59 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
11:21:59 900  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
11:21:59 902  WHEN BAD_GROUP_ID THEN
11:21:59 903  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 904  	  SPROC_NAME, 'No such group id');
11:21:59 905  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:59 906  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 907  	  SPROC_NAME, 'No such offer chain');
11:21:59 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
11:21:59 909  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
11:21:59 911  WHEN OTHERS THEN
11:21:59 912  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 914  END START_GC_PURCHASING;
11:21:59 915  
11:21:59 916  /******************************************************************************/
11:21:59 917  
11:21:59 918  PROCEDURE FINALIZE_GC_PURCHASING (
11:21:59 919  	in_invoice_id	      IN NUMBER,
11:21:59 920  	in_created_by	      IN VARCHAR2,
11:21:59 921  	in_instrument_id      IN NUMBER,
11:21:59 922  	in_instrument_type_id IN NUMBER,
11:21:59 923  	in_order_id	      IN VARCHAR2,
11:21:59 924  	in_transaction_id     IN NUMBER,
11:21:59 925  	out_charge_amount     OUT NUMBER
11:21:59 926  ) AS
11:21:59 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
11:21:59 928  -- VARIABLES
11:21:59 929  temp_transaction_id_count NUMBER;
11:21:59 930  var_invoice_amount	NUMBER(10,2);
11:21:59 931  var_transaction_id	NUMBER;
11:21:59 932  var_new_charge_id 	NUMBER;
11:21:59 933  -- EXCEPTIONS
11:21:59 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
11:21:59 935  BAD_PAYPAL_ID		  EXCEPTION;
11:21:59 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
11:21:59 937  TRANSACTION_EXISTS	  EXCEPTION;
11:21:59 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
11:21:59 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
11:21:59 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
11:21:59 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
11:21:59 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
11:21:59 943  BEGIN
11:21:59 944  
11:21:59 945  	-- Check that instrument exists
11:21:59 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 948  	    RAISE BAD_CREDIT_CARD_ID;
11:21:59 949  	  END IF;
11:21:59 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 952  	    RAISE BAD_PAYPAL_ID;
11:21:59 953  	  END IF;
11:21:59 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
11:21:59 955  	  NULL;
11:21:59 956  	ELSE
11:21:59 957  	  RAISE BAD_INSTRUMENT_TYPE;
11:21:59 958  	END IF;
11:21:59 959  
11:21:59 960  	-- Check that transaction with given id do not exists
11:21:59 961  	SELECT
11:21:59 962  	  COUNT(*) into temp_transaction_id_count
11:21:59 963  	FROM
11:21:59 964  	  TRANSACTION
11:21:59 965  	WHERE
11:21:59 966  	  TRANSACTION.ID = in_transaction_id;
11:21:59 967  
11:21:59 968  	IF temp_transaction_id_count > 0 THEN
11:21:59 969  	  RAISE TRANSACTION_EXISTS;
11:21:59 970  	END IF;
11:21:59 971  
11:21:59 972  	-- Calculate new invoice amount
11:21:59 973  	BEGIN
11:21:59 974  	  PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
11:21:59 975  	  EXCEPTION
11:21:59 976  	    WHEN OTHERS THEN
11:21:59 977  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
11:21:59 979  	END;
11:21:59 980  
11:21:59 981  	IF var_invoice_amount > 0
11:21:59 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
11:21:59 983  	  RAISE CAN_NOT_USE_FCINSTR;
11:21:59 984  	END IF;
11:21:59 985  
11:21:59 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
11:21:59 987  	IF var_invoice_amount = 0 THEN
11:21:59 988  	  PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
11:21:59 989  	    in_invoice_id		   => in_invoice_id,
11:21:59 990  	    in_updated_by		   => in_created_by,
11:21:59 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V15.INVOICE_CLOSED
11:21:59 992  	  );
11:21:59 993  	END IF;
11:21:59 994  
11:21:59 995  	IF var_invoice_amount > 0 THEN
11:21:59 996  	  -- Create transaction
11:21:59 997  	  BEGIN
11:21:59 998  	    PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:59 999  	      in_transaction_id  => in_transaction_id,
11:21:59 1000  	       in_status_id	  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
11:21:59 1001  	       in_amount	  => var_invoice_amount,
11:21:59 1002  	       in_created_by	  => in_created_by,
11:21:59 1003  	       in_order_id	  => in_order_id,
11:21:59 1004  	       out_transaction_id => var_transaction_id
11:21:59 1005  	     );
11:21:59 1006  	     EXCEPTION
11:21:59 1007  	       WHEN OTHERS THEN
11:21:59 1008  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1009  		 RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:59 1010  	   END;
11:21:59 1011  
11:21:59 1012  	   -- Create charge
11:21:59 1013  	   BEGIN
11:21:59 1014  	     PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:59 1015  	       in_invoice_id	     => in_invoice_id,
11:21:59 1016  	       in_transaction_id     => var_transaction_id,
11:21:59 1017  	       in_instrument_type_id => in_instrument_type_id,
11:21:59 1018  	       in_instrument_id      => in_instrument_id,
11:21:59 1019  	       in_charge_amount      => var_invoice_amount,
11:21:59 1020  	       in_created_by	     => in_created_by,
11:21:59 1021  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:59 1022  	       out_charge_id	     => var_new_charge_id
11:21:59 1023  	     );
11:21:59 1024  	     out_charge_amount := var_invoice_amount;
11:21:59 1025  	     EXCEPTION
11:21:59 1026  	       WHEN OTHERS THEN
11:21:59 1027  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1028  		 RAISE CAN_NOT_CREATE_CHARGE;
11:21:59 1029  	   END;
11:21:59 1030  	 ELSE
11:21:59 1031  	   out_charge_amount := 0;
11:21:59 1032  	 END IF;
11:21:59 1033  
11:21:59 1034  EXCEPTION
11:21:59 1035  WHEN CAN_NOT_USE_FCINSTR THEN
11:21:59 1036  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1037  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
11:21:59 1038  WHEN BAD_CREDIT_CARD_ID THEN
11:21:59 1039  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1040  	   SPROC_NAME, 'Bad credit card id');
11:21:59 1041  WHEN BAD_PAYPAL_ID THEN
11:21:59 1042  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1043  	   SPROC_NAME, 'Bad paypal id');
11:21:59 1044  WHEN BAD_INSTRUMENT_TYPE THEN
11:21:59 1045  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1046  	   SPROC_NAME, 'Bad instrument type');
11:21:59 1047  WHEN TRANSACTION_EXISTS THEN
11:21:59 1048  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:59 1049  	   SPROC_NAME, 'Transaction with given id already exists');
11:21:59 1050  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:59 1051  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1052  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:59 1053  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:59 1054  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1055  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:59 1056  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
11:21:59 1057  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1058  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
11:21:59 1059  WHEN OTHERS THEN
11:21:59 1060  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1061  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1062  END FINALIZE_GC_PURCHASING;
11:21:59 1063  
11:21:59 1064  /******************************************************************************/
11:21:59 1065  
11:21:59 1066  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
11:21:59 1067  	 in_group_id		   IN NUMBER,
11:21:59 1068  	 in_offer_chain_id	   IN VARCHAR2,
11:21:59 1069  	 in_gift_certificate_code  IN VARCHAR2,
11:21:59 1070  	 in_created_by		   IN VARCHAR2,
11:21:59 1071  	 in_recipient_name	   IN VARCHAR2,
11:21:59 1072  	 in_recipient_email	   IN VARCHAR2,
11:21:59 1073  	 in_sender_name 	   IN VARCHAR2,
11:21:59 1074  	 in_sender_email	   IN VARCHAR2,
11:21:59 1075  	 in_gift_message	   IN VARCHAR2,
11:21:59 1076  	 in_instrument_id	   IN NUMBER,
11:21:59 1077  	 in_instrument_type_id	   IN NUMBER,
11:21:59 1078  	 in_expiration_date	   IN DATE,
11:21:59 1079  	 in_order_id		   IN VARCHAR2,
11:21:59 1080  	 in_transaction_id	   IN NUMBER
11:21:59 1081  ) AS
11:21:59 1082  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
11:21:59 1083  -- VARIABLES
11:21:59 1084  var_gift_cert_id   NUMBER;
11:21:59 1085  var_account_id	  NUMBER;
11:21:59 1086  var_invoice_amount NUMBER (10,2);
11:21:59 1087  var_new_invoice_id NUMBER;
11:21:59 1088  var_new_charge_id  NUMBER;
11:21:59 1089  var_och_is_gc	  NUMBER;
11:21:59 1090  var_offer_chain_status_id NUMBER;
11:21:59 1091  var_is_for_redemption	 NUMBER;
11:21:59 1092  var_account_tax_exempt_id VARCHAR2(255);
11:21:59 1093  
11:21:59 1094  temp_transaction_id_count NUMBER;
11:21:59 1095  var_transaction_id	 NUMBER;
11:21:59 1096  temp_gc_code VARCHAR2(255);
11:21:59 1097  
11:21:59 1098  var_invoice_status_id NUMBER;
11:21:59 1099  -- EXCEPTIONS
11:21:59 1100  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
11:21:59 1101  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
11:21:59 1102  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
11:21:59 1103  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
11:21:59 1104  BAD_GROUP_ID			   EXCEPTION;
11:21:59 1105  BAD_OFFER_CHAIN_ID		   EXCEPTION;
11:21:59 1106  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
11:21:59 1107  TRANSACTION_EXISTS		   EXCEPTION;
11:21:59 1108  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
11:21:59 1109  BAD_INSTRUMENT_TYPE		   EXCEPTION;
11:21:59 1110  BAD_CREDIT_CARD_ID		   EXCEPTION;
11:21:59 1111  BAD_PAYPAL_ID			   EXCEPTION;
11:21:59 1112  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
11:21:59 1113  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
11:21:59 1114  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
11:21:59 1115  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
11:21:59 1116  CAN_NOT_USE_FCINSTR		   EXCEPTION;
11:21:59 1117  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
11:21:59 1118  EXCEPTION_MESSAGE		   VARCHAR2(1024);
11:21:59 1119  BEGIN
11:21:59 1120  
11:21:59 1121  	 -- Get account id
11:21:59 1122  	 BEGIN
11:21:59 1123  	   SELECT
11:21:59 1124  	     ACCOUNT.ID,
11:21:59 1125  	     ACCOUNT.TAX_EXEMPT_ID
11:21:59 1126  	     into
11:21:59 1127  	     var_account_id,
11:21:59 1128  	     var_account_tax_exempt_id
11:21:59 1129  	   FROM
11:21:59 1130  	     ACCOUNT
11:21:59 1131  	   WHERE
11:21:59 1132  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1133  	   EXCEPTION
11:21:59 1134  	   WHEN NO_DATA_FOUND THEN
11:21:59 1135  	     RAISE BAD_GROUP_ID;
11:21:59 1136  	 END;
11:21:59 1137  
11:21:59 1138  	 -- Check that instrument exists
11:21:59 1139  	 IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 1140  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 1141  	     RAISE BAD_CREDIT_CARD_ID;
11:21:59 1142  	   END IF;
11:21:59 1143  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 1144  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 1145  	     RAISE BAD_PAYPAL_ID;
11:21:59 1146  	   END IF;
11:21:59 1147  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
11:21:59 1148  	   NULL;
11:21:59 1149  	 ELSE
11:21:59 1150  	   RAISE BAD_INSTRUMENT_TYPE;
11:21:59 1151  	 END IF;
11:21:59 1152  
11:21:59 1153  	 -- Check for the same code
11:21:59 1154  	 BEGIN
11:21:59 1155  	   SELECT
11:21:59 1156  	     GIFT_CERTIFICATE.CODE into temp_gc_code
11:21:59 1157  	   FROM
11:21:59 1158  	     GIFT_CERTIFICATE
11:21:59 1159  	   WHERE
11:21:59 1160  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
11:21:59 1161  
11:21:59 1162  	   RAISE GC_CODE_ALREADY_EXISTS;
11:21:59 1163  
11:21:59 1164  	   EXCEPTION
11:21:59 1165  	     WHEN NO_DATA_FOUND THEN
11:21:59 1166  	       NULL;
11:21:59 1167  	 END;
11:21:59 1168  
11:21:59 1169  	 -- Get offer chain flag "is_gift_certificate"
11:21:59 1170  	 BEGIN
11:21:59 1171  	   SELECT
11:21:59 1172  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
11:21:59 1173  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
11:21:59 1174  	     into
11:21:59 1175  	     var_och_is_gc,
11:21:59 1176  	     var_offer_chain_status_id
11:21:59 1177  	   FROM
11:21:59 1178  	     OFFER_CHAIN
11:21:59 1179  	   WHERE
11:21:59 1180  	     OFFER_CHAIN.ID = in_offer_chain_id;
11:21:59 1181  	   EXCEPTION
11:21:59 1182  	   WHEN NO_DATA_FOUND THEN
11:21:59 1183  	     RAISE BAD_OFFER_CHAIN_ID;
11:21:59 1184  	 END;
11:21:59 1185  
11:21:59 1186  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V15.TRUE
11:21:59 1187  	   OR var_och_is_gc IS NULL THEN
11:21:59 1188  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
11:21:59 1189  	 END IF;
11:21:59 1190  
11:21:59 1191  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V15.OFFER_CHAIN_ACTIVE THEN
11:21:59 1192  	   RAISE BAD_OFFER_CHAIN_STATUS;
11:21:59 1193  	 END IF;
11:21:59 1194  
11:21:59 1195  	 -- norlov: #38151 check if the OC is for Redemption:
11:21:59 1196  	 SELECT
11:21:59 1197  	   COUNT(*) into var_is_for_redemption
11:21:59 1198  	 FROM
11:21:59 1199  	   OFFER_CHAIN_ELIGIBILITY
11:21:59 1200  	 WHERE
11:21:59 1201  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
11:21:59 1202  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
11:21:59 1203  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET;
11:21:59 1204  
11:21:59 1205  	 IF var_is_for_redemption > 0 THEN
11:21:59 1206  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
11:21:59 1207  	 END IF;
11:21:59 1208  
11:21:59 1209  	 -- Check that transaction with given id do not exists
11:21:59 1210  	 SELECT
11:21:59 1211  	   COUNT(*) into temp_transaction_id_count
11:21:59 1212  	 FROM
11:21:59 1213  	   TRANSACTION
11:21:59 1214  	 WHERE
11:21:59 1215  	   TRANSACTION.ID = in_transaction_id;
11:21:59 1216  
11:21:59 1217  	 IF temp_transaction_id_count > 0 THEN
11:21:59 1218  	   RAISE TRANSACTION_EXISTS;
11:21:59 1219  	 END IF;
11:21:59 1220  
11:21:59 1221  	 -- Create new invoice
11:21:59 1222  	 BEGIN
11:21:59 1223  	   PROCS_INVOICE_V15.CREATE_INVOICE(
11:21:59 1224  	     in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_OPEN,
11:21:59 1225  	     in_created_by     => in_created_by,
11:21:59 1226  	     in_tax_exempt_id  => var_account_tax_exempt_id,
11:21:59 1227  	     out_invoice_id    => var_new_invoice_id
11:21:59 1228  	   );
11:21:59 1229  	   EXCEPTION
11:21:59 1230  	     WHEN OTHERS THEN
11:21:59 1231  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1232  	       RAISE CAN_NOT_CREATE_INVOICE;
11:21:59 1233  	 END;
11:21:59 1234  
11:21:59 1235  	 -- Add line items for new invoice
11:21:59 1236  	 BEGIN
11:21:59 1237  	   FOR f_offer_data IN (
11:21:59 1238  	     SELECT
11:21:59 1239  	       OFFER_ID,
11:21:59 1240  	       NUM_RECURRENCES
11:21:59 1241  	     FROM
11:21:59 1242  	       OFFER_OFFER_CHAIN
11:21:59 1243  	     WHERE
11:21:59 1244  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
11:21:59 1245  	   )
11:21:59 1246  	   LOOP
11:21:59 1247  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
11:21:59 1248  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
11:21:59 1249  	     END IF;
11:21:59 1250  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
11:21:59 1251  	     LOOP
11:21:59 1252  	       PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
11:21:59 1253  		 in_invoice_id => var_new_invoice_id,
11:21:59 1254  		 in_offer_id   => f_offer_data.OFFER_ID,
11:21:59 1255  		 in_created_by => in_created_by
11:21:59 1256  	       );
11:21:59 1257  	     END LOOP;
11:21:59 1258  	   END LOOP;
11:21:59 1259  
11:21:59 1260  	   EXCEPTION
11:21:59 1261  	     WHEN OTHERS THEN
11:21:59 1262  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1263  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
11:21:59 1264  	 END;
11:21:59 1265  
11:21:59 1266  	 -- Calculate new invoice amount
11:21:59 1267  	 BEGIN
11:21:59 1268  	   PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
11:21:59 1269  	   EXCEPTION
11:21:59 1270  	     WHEN OTHERS THEN
11:21:59 1271  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1272  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
11:21:59 1273  	 END;
11:21:59 1274  
11:21:59 1275  	 IF var_invoice_amount > 0
11:21:59 1276  	   AND in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_ZCI_INSTRUMENT THEN
11:21:59 1277  	   RAISE CAN_NOT_USE_FCINSTR;
11:21:59 1278  	 END IF;
11:21:59 1279  
11:21:59 1280  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
11:21:59 1281  	 IF var_invoice_amount = 0 THEN
11:21:59 1282  	   PROCS_INVOICE_CRU_V15.UPDATE_INVOICE(
11:21:59 1283  	     in_invoice_id		    => var_new_invoice_id,
11:21:59 1284  	     in_updated_by		    => in_created_by,
11:21:59 1285  	     in_invoice_status_id	    => GLOBAL_STATUSES_V15.INVOICE_CLOSED
11:21:59 1286  	   );
11:21:59 1287  	 END IF;
11:21:59 1288  
11:21:59 1289  	 IF var_invoice_amount > 0 THEN
11:21:59 1290  	   -- Create transaction
11:21:59 1291  	   BEGIN
11:21:59 1292  	     PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:59 1293  	       in_transaction_id  => in_transaction_id,
11:21:59 1294  	       in_status_id	  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
11:21:59 1295  	       in_amount	  => var_invoice_amount,
11:21:59 1296  	       in_created_by	  => in_created_by,
11:21:59 1297  	       in_order_id	  => in_order_id,
11:21:59 1298  	       out_transaction_id => var_transaction_id
11:21:59 1299  	     );
11:21:59 1300  	     EXCEPTION
11:21:59 1301  	       WHEN OTHERS THEN
11:21:59 1302  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1303  		 RAISE CAN_NOT_CREATE_TRANSACTION;
11:21:59 1304  	   END;
11:21:59 1305  
11:21:59 1306  	   -- Create charge
11:21:59 1307  	   BEGIN
11:21:59 1308  	     PROCS_CHARGE_V15.CREATE_CHARGE(
11:21:59 1309  	       in_invoice_id	     => var_new_invoice_id,
11:21:59 1310  	       in_transaction_id     => var_transaction_id,
11:21:59 1311  	       in_instrument_type_id => in_instrument_type_id,
11:21:59 1312  	       in_instrument_id      => in_instrument_id,
11:21:59 1313  	       in_charge_amount      => var_invoice_amount,
11:21:59 1314  	       in_created_by	     => in_created_by,
11:21:59 1315  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:59 1316  	       out_charge_id	     => var_new_charge_id
11:21:59 1317  	     );
11:21:59 1318  	     EXCEPTION
11:21:59 1319  	       WHEN OTHERS THEN
11:21:59 1320  		 EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1321  		 RAISE CAN_NOT_CREATE_CHARGE;
11:21:59 1322  	   END;
11:21:59 1323  	 END IF;
11:21:59 1324  
11:21:59 1325  	 -- Create new row in GIFT_CERTIFICATE table
11:21:59 1326  	 PROCS_FIN_INSTRUMENTS_CRU_V15.CREATE_GIFT_CERTIFICATE(
11:21:59 1327  	   out_gift_certificate_id	 => var_gift_cert_id,
11:21:59 1328  	   in_purchaser_group_id	 => in_group_id,
11:21:59 1329  	   in_purchaser_invoice_id	 => var_new_invoice_id,
11:21:59 1330  	   in_offer_chain_id		 => in_offer_chain_id,
11:21:59 1331  	   in_expiration_date		 => in_expiration_date,
11:21:59 1332  	   in_purchase_date		 => SYSDATE,
11:21:59 1333  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE,
11:21:59 1334  	   in_code			 => in_gift_certificate_code,
11:21:59 1335  	   in_created_by		 => in_created_by,
11:21:59 1336  	   in_recipient_name		 => in_recipient_name,
11:21:59 1337  	   in_gift_message		 => in_gift_message,
11:21:59 1338  	   in_recipient_email		 => in_recipient_email,
11:21:59 1339  	   in_sender_email		 => in_sender_email,
11:21:59 1340  	   in_sender_name		 => in_sender_name
11:21:59 1341  	 );
11:21:59 1342  
11:21:59 1343  EXCEPTION
11:21:59 1344  WHEN CAN_NOT_USE_FCINSTR THEN
11:21:59 1345  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1346  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
11:21:59 1347  WHEN BAD_OFFER_CHAIN_STATUS THEN
11:21:59 1348  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1349  	   SPROC_NAME, 'Offer chain is not active');
11:21:59 1350  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
11:21:59 1351  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1352  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
11:21:59 1353  WHEN BAD_CREDIT_CARD_ID THEN
11:21:59 1354  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1355  	   SPROC_NAME, 'Bad credit card id');
11:21:59 1356  WHEN BAD_PAYPAL_ID THEN
11:21:59 1357  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1358  	   SPROC_NAME, 'Bad paypal id');
11:21:59 1359  WHEN BAD_INSTRUMENT_TYPE THEN
11:21:59 1360  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1361  	   SPROC_NAME, 'Bad instrument type');
11:21:59 1362  WHEN GC_CODE_ALREADY_EXISTS THEN
11:21:59 1363  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:59 1364  	   SPROC_NAME, 'Gift certificate with same code already exists');
11:21:59 1365  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
11:21:59 1366  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1367  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
11:21:59 1368  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
11:21:59 1369  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1370  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
11:21:59 1371  WHEN TRANSACTION_EXISTS THEN
11:21:59 1372  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:59 1373  	   SPROC_NAME, 'Transaction with given id already exists');
11:21:59 1374  WHEN CAN_NOT_CREATE_INVOICE THEN
11:21:59 1375  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1376  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
11:21:59 1377  WHEN CAN_NOT_CREATE_TRANSACTION THEN
11:21:59 1378  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1379  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
11:21:59 1380  WHEN CAN_NOT_CREATE_CHARGE THEN
11:21:59 1381  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1382  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
11:21:59 1383  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
11:21:59 1384  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1385  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
11:21:59 1386  WHEN BAD_GROUP_ID THEN
11:21:59 1387  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1388  	   SPROC_NAME, 'No such group id');
11:21:59 1389  WHEN BAD_OFFER_CHAIN_ID THEN
11:21:59 1390  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1391  	   SPROC_NAME, 'No such offer chain');
11:21:59 1392  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
11:21:59 1393  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1394  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
11:21:59 1395  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
11:21:59 1396  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1397  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
11:21:59 1398  WHEN OTHERS THEN
11:21:59 1399  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1400  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1401  END PURCHASE_GIFT_CERTIFICATE;
11:21:59 1402  
11:21:59 1403  /******************************************************************************/
11:21:59 1404  
11:21:59 1405  PROCEDURE REDEEM_GIFT_CERTIFICATE (
11:21:59 1406  	 in_group_id			 IN NUMBER,
11:21:59 1407  	 in_gift_certificate_code	 IN VARCHAR2,
11:21:59 1408  	 in_created_by			 IN VARCHAR2,
11:21:59 1409  	 in_redeemer_address_id 	 IN NUMBER,
11:21:59 1410  	 in_fin_instrument_id		 IN NUMBER,
11:21:59 1411  	 in_fin_instrument_type_id	 IN NUMBER,
11:21:59 1412  	 in_redemption_offer_chain_id	 IN NUMBER,
11:21:59 1413  	 out_subscription_id		 OUT NUMBER,
11:21:59 1414  	 out_license_id 		 OUT NUMBER
11:21:59 1415  ) AS
11:21:59 1416  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
11:21:59 1417  -- VARIABLES
11:21:59 1418  var_gift_certificate_id NUMBER;
11:21:59 1419  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
11:21:59 1420  var_purchased_oc_id     NUMBER;
11:21:59 1421  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
11:21:59 1422  var_offer_duration      VARCHAR2(30);
11:21:59 1423  var_invoice_id	       NUMBER;
11:21:59 1424  var_succ_purch_attempts_num NUMBER;
11:21:59 1425  var_subscription_id     NUMBER;
11:21:59 1426  var_license_id	       NUMBER;
11:21:59 1427  var_account_id	       NUMBER;
11:21:59 1428  var_gc_status_id        NUMBER;
11:21:59 1429  var_gc_charges_amount   NUMBER;
11:21:59 1430  var_gc_expiration_date  DATE;
11:21:59 1431  var_gc_redeemer_group_id NUMBER;
11:21:59 1432  var_gc_purchase_invoice_id NUMBER;
11:21:59 1433  var_gc_purchase_inv_status_id NUMBER;
11:21:59 1434  var_offer_index		     NUMBER;
11:21:59 1435  var_purchaser_group_id	     NUMBER;
11:21:59 1436  temp_license_id		     NUMBER;
11:21:59 1437  var_same_offer_chains_num     NUMBER;
11:21:59 1438  var_max_concurrent_subscrs    NUMBER;
11:21:59 1439  var_account_tax_exempt_id     VARCHAR2(255);
11:21:59 1440  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
11:21:59 1441  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
11:21:59 1442  var_first_offer_id	  NUMBER;
11:21:59 1443  var_date 	     DATE := SYSDATE;
11:21:59 1444  
11:21:59 1445  var_offers SYS_REFCURSOR;
11:21:59 1446  
11:21:59 1447  -- EXCEPTIONS
11:21:59 1448  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
11:21:59 1449  BAD_GROUP_ID		      EXCEPTION;
11:21:59 1450  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
11:21:59 1451  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
11:21:59 1452  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
11:21:59 1453  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
11:21:59 1454  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
11:21:59 1455  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
11:21:59 1456  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
11:21:59 1457  LIMIT_REACHED		      EXCEPTION;
11:21:59 1458  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
11:21:59 1459  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
11:21:59 1460  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
11:21:59 1461  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
11:21:59 1462  EXCEPTION_MESSAGE	      VARCHAR2(1024);
11:21:59 1463  BEGIN
11:21:59 1464  
11:21:59 1465  	 -- Get account id
11:21:59 1466  	 BEGIN
11:21:59 1467  	   SELECT
11:21:59 1468  	     ACCOUNT.ID,
11:21:59 1469  	     ACCOUNT.TAX_EXEMPT_ID
11:21:59 1470  	     into
11:21:59 1471  	     var_account_id,
11:21:59 1472  	     var_account_tax_exempt_id
11:21:59 1473  	   FROM
11:21:59 1474  	     ACCOUNT
11:21:59 1475  	   WHERE
11:21:59 1476  	     ACCOUNT.GROUP_ID = in_group_id
11:21:59 1477  	     AND ROWNUM <= 1;
11:21:59 1478  
11:21:59 1479  	   EXCEPTION
11:21:59 1480  	   WHEN NO_DATA_FOUND THEN
11:21:59 1481  	     RAISE BAD_GROUP_ID;
11:21:59 1482  	 END;
11:21:59 1483  
11:21:59 1484  	 -- Get gift certificate data
11:21:59 1485  	 BEGIN
11:21:59 1486  	   SELECT
11:21:59 1487  	     GIFT_CERTIFICATE.ID,
11:21:59 1488  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
11:21:59 1489  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
11:21:59 1490  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
11:21:59 1491  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
11:21:59 1492  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
11:21:59 1493  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
11:21:59 1494  	     into
11:21:59 1495  	     var_gift_certificate_id,
11:21:59 1496  	     var_purchased_oc_id,
11:21:59 1497  	     var_gc_status_id,
11:21:59 1498  	     var_purchaser_group_id,
11:21:59 1499  	     var_gc_expiration_date,
11:21:59 1500  	     var_gc_redeemer_group_id,
11:21:59 1501  	     var_gc_purchase_invoice_id
11:21:59 1502  	   FROM
11:21:59 1503  	     GIFT_CERTIFICATE
11:21:59 1504  	   WHERE
11:21:59 1505  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
11:21:59 1506  	     AND ROWNUM <= 1;
11:21:59 1507  
11:21:59 1508  	   EXCEPTION
11:21:59 1509  	   WHEN NO_DATA_FOUND THEN
11:21:59 1510  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
11:21:59 1511  	 END;
11:21:59 1512  
11:21:59 1513  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
11:21:59 1514  	 -- but in that case a redemption offer chain id should always be passed in
11:21:59 1515  	 IF var_oc_id_to_redeem IS NULL THEN
11:21:59 1516  	   BEGIN
11:21:59 1517  	     SELECT
11:21:59 1518  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
11:21:59 1519  	       into
11:21:59 1520  	       var_oc_id_to_redeem
11:21:59 1521  	     FROM
11:21:59 1522  	       OFFER_CHAIN_META_DATA
11:21:59 1523  	     WHERE
11:21:59 1524  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
11:21:59 1525  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V15.REDEMPTION_OC_ID
11:21:59 1526  	       AND ROWNUM = 1;
11:21:59 1527  -- requested by ticket so (but above is correct for the actual migrated data):
11:21:59 1528  --  SELECT
11:21:59 1529  --      OFFER_CHAIN.ID
11:21:59 1530  --      into
11:21:59 1531  --      var_oc_id_to_redeem
11:21:59 1532  --    FROM
11:21:59 1533  --      OFFER_CHAIN
11:21:59 1534  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
11:21:59 1535  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
11:21:59 1536  --    WHERE
11:21:59 1537  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 1538  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V15.GIFT_CERTIFICATE_REQUIRED
11:21:59 1539  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V15.ELIGIBILITY_FLAG_SET
11:21:59 1540  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 1541  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V15.REDEMPTION_OC_ID
11:21:59 1542  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
11:21:59 1543  --      AND ROWNUM = 1;
11:21:59 1544  
11:21:59 1545  	     EXCEPTION
11:21:59 1546  	     WHEN NO_DATA_FOUND THEN
11:21:59 1547  	       RAISE OC_TO_REDEEM_NOT_FOUND;
11:21:59 1548  	   END;
11:21:59 1549  	 END IF;
11:21:59 1550  
11:21:59 1551  	 -- Check that purchase invoice for this GC was closed
11:21:59 1552  	 SELECT
11:21:59 1553  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
11:21:59 1554  	 FROM
11:21:59 1555  	   INVOICE
11:21:59 1556  	 WHERE
11:21:59 1557  	   INVOICE.ID = var_gc_purchase_invoice_id;
11:21:59 1558  
11:21:59 1559  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V15.INVOICE_CLOSED THEN
11:21:59 1560  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
11:21:59 1561  	 END IF;
11:21:59 1562  
11:21:59 1563  	 -- Check that this invoice was successfully processed by billing
11:21:59 1564  	 SELECT
11:21:59 1565  	   COUNT(1) into var_succ_purch_attempts_num
11:21:59 1566  	 FROM
11:21:59 1567  	   TRANSACTION_ATTEMPT TA
11:21:59 1568  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
11:21:59 1569  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
11:21:59 1570  	 WHERE
11:21:59 1571  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
11:21:59 1572  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V15.TRANS_ATTEMPT_SUCCESS;
11:21:59 1573  
11:21:59 1574  	 IF var_succ_purch_attempts_num = 0 THEN
11:21:59 1575  	   SELECT
11:21:59 1576  	     COUNT(1) into var_succ_purch_attempts_num
11:21:59 1577  	   FROM
11:21:59 1578  	     DUAL
11:21:59 1579  	   WHERE
11:21:59 1580  	     PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
11:21:59 1581  	 END IF;
11:21:59 1582  
11:21:59 1583  	 IF var_succ_purch_attempts_num = 0 THEN
11:21:59 1584  	   RAISE PURCHASE_INVOICES_NOT_PAID;
11:21:59 1585  	 END IF;
11:21:59 1586  
11:21:59 1587  	 -- Check limit for gc's offer chain
11:21:59 1588  	 SELECT
11:21:59 1589  	   COUNT(*) into var_same_offer_chains_num
11:21:59 1590  	 FROM
11:21:59 1591  	   SUBSCRIPTION
11:21:59 1592  	 WHERE
11:21:59 1593  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 1594  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
11:21:59 1595  	   AND (
11:21:59 1596  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 1597  	     -- TODO: Does we need next line?
11:21:59 1598  	     -- OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:59 1599  	   );
11:21:59 1600  -- norlov: #38414 the same checking as on OC purchase (just copypasted from CREATE_SUBSCRIPTION - TODO: refactor it not to keep the same code twice)
11:21:59 1601  --  IF PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem) = var_same_offer_chains_num THEN
11:21:59 1602  --    RAISE LIMIT_REACHED;
11:21:59 1603  --  END IF;
11:21:59 1604  IF var_same_offer_chains_num = 0 THEN
11:21:59 1605  	   -- if user does not have any active existing subscriptions to the offer chain
11:21:59 1606  	   -- and if product from the offer chain is already owned from another offer chain
11:21:59 1607  	   -- then deny purchase
11:21:59 1608  	   FOR f_account_offer_chains IN (
11:21:59 1609  	     SELECT DISTINCT
11:21:59 1610  	       OFFER_CHAIN_ID
11:21:59 1611  	     FROM
11:21:59 1612  	       SUBSCRIPTION
11:21:59 1613  	     WHERE
11:21:59 1614  	       ACCOUNT_ID = var_account_id
11:21:59 1615  	       AND (
11:21:59 1616  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 1617  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED)
11:21:59 1618  	   )
11:21:59 1619  	   LOOP
11:21:59 1620  	     IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:59 1621  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
11:21:59 1622  	     END IF;
11:21:59 1623  	   END LOOP;
11:21:59 1624  	 ELSE
11:21:59 1625  
11:21:59 1626  	   -- if user have any active existing subscriptions to the offer chain
11:21:59 1627  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
11:21:59 1628  	   -- then deny purchase
11:21:59 1629  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
11:21:59 1630  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V15.INFINITY
11:21:59 1631  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
11:21:59 1632  	     RAISE LIMIT_REACHED;
11:21:59 1633  	   END IF;
11:21:59 1634  	 END IF;
11:21:59 1635  -- norlov: END OF TODO
11:21:59 1636  
11:21:59 1637  
11:21:59 1638  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
11:21:59 1639  	   RAISE GIFT_CERTIFICATE_REDEEMED;
11:21:59 1640  	 END IF;
11:21:59 1641  
11:21:59 1642  	 IF var_gc_expiration_date < sysdate THEN
11:21:59 1643  	   RAISE GIFT_CERTIFICATE_EXPIRED;
11:21:59 1644  	 END IF;
11:21:59 1645  
11:21:59 1646  	  IF var_gc_status_id = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_REFUNDED THEN
11:21:59 1647  	   RAISE GIFT_CERT_IS_REFUNDED;
11:21:59 1648  	 END IF;
11:21:59 1649  
11:21:59 1650  	 IF var_gc_status_id = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED THEN
11:21:59 1651  	   RAISE GIFT_CERT_IS_FINALIZED;
11:21:59 1652  	 END IF;
11:21:59 1653  
11:21:59 1654  	 -- Check that user did not subscribed to same product already
11:21:59 1655  	 -- norlov: get rid of this since there is already the check?
11:21:59 1656  	 FOR f_user_offer_chain IN (
11:21:59 1657  	   SELECT DISTINCT
11:21:59 1658  	     OFFER_CHAIN_ID
11:21:59 1659  	   FROM
11:21:59 1660  	     SUBSCRIPTION
11:21:59 1661  	   WHERE
11:21:59 1662  	     ACCOUNT_ID=var_account_id
11:21:59 1663  	     AND (
11:21:59 1664  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 1665  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:59 1666  	     )
11:21:59 1667  	 )
11:21:59 1668  	 LOOP
11:21:59 1669  	   IF PROCS_OFFER_CHAIN_V15.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V15.TRUE THEN
11:21:59 1670  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
11:21:59 1671  	   END IF;
11:21:59 1672  	 END LOOP;
11:21:59 1673  
11:21:59 1674  	 -- Check for gift certificate amount
11:21:59 1675  	 SELECT
11:21:59 1676  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
11:21:59 1677  	 FROM
11:21:59 1678  	   CHARGE
11:21:59 1679  	 WHERE
11:21:59 1680  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
11:21:59 1681  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
11:21:59 1682  
11:21:59 1683  	 -- Create new invoice
11:21:59 1684  	 PROCS_INVOICE_V15.CREATE_INVOICE(
11:21:59 1685  	   out_invoice_id    => var_invoice_id,
11:21:59 1686  	   in_invoice_status => GLOBAL_STATUSES_V15.INVOICE_CLOSED,
11:21:59 1687  	   in_tax_exempt_id  => var_account_tax_exempt_id,
11:21:59 1688  	   in_created_by     => in_created_by
11:21:59 1689  	 );
11:21:59 1690  
11:21:59 1691  	 -- If a financial instrument wasn't passed in, use the gift certificate id
11:21:59 1692  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
11:21:59 1693  	 IF var_fin_instrument_id is null THEN
11:21:59 1694  	   var_fin_instrument_id := var_gift_certificate_id;
11:21:59 1695  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V15.INSTRUMENT_GIFT_CERTIFICATE;
11:21:59 1696  	 END IF;
11:21:59 1697  
11:21:59 1698  	 -- Insert new row into subscription table
11:21:59 1699  	 PROCS_SUBSCRIPTION_CRU_V15.CREATE_SUBSCRIPTION(
11:21:59 1700  	   out_subscription_id	     => var_subscription_id,
11:21:59 1701  	   in_account_id	     => var_account_id,
11:21:59 1702  	   in_purchase_date	     => var_date,
11:21:59 1703  	   in_offer_chain_id	     => var_oc_id_to_redeem,
11:21:59 1704  	   in_created_by	     => in_created_by,
11:21:59 1705  	   in_instrument_type_id     => var_fin_instrument_type_id,
11:21:59 1706  	   in_instrument_id	     => var_fin_instrument_id,
11:21:59 1707  	   in_subscription_status_id => GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 1708  	 );
11:21:59 1709  
11:21:59 1710  	 out_subscription_id := var_subscription_id;
11:21:59 1711  
11:21:59 1712  	 BEGIN
11:21:59 1713  	   PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
11:21:59 1714  	   EXCEPTION
11:21:59 1715  	     WHEN OTHERS THEN
11:21:59 1716  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1717  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
11:21:59 1718  	 END;
11:21:59 1719  
11:21:59 1720  	 BEGIN
11:21:59 1721  	   PROCS_LICENSE_V15.CREATE_LICENSE (
11:21:59 1722  	     out_license_id		 => out_license_id,
11:21:59 1723  	     in_status_id		 => GLOBAL_STATUSES_V15.LICENSE_ACTIVE,
11:21:59 1724  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V15.TRUE,
11:21:59 1725  	     in_start_date		 => var_date,
11:21:59 1726  	     in_offer_id		 => var_first_offer_id,
11:21:59 1727  	     in_subscription_id 	 => var_subscription_id,
11:21:59 1728  	     in_invoice_id		 => var_invoice_id,
11:21:59 1729  	     in_created_by		 => in_created_by,
11:21:59 1730  	     in_end_date		 => NULL, -- Will be calculated automatically
11:21:59 1731  	     in_is_extension		 => GLOBAL_CONSTANTS_V15.FALSE,
11:21:59 1732  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V15.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
11:21:59 1733  	     in_current_offer_recurr_num => 1
11:21:59 1734  	   );
11:21:59 1735  
11:21:59 1736  	   EXCEPTION
11:21:59 1737  	     WHEN OTHERS THEN
11:21:59 1738  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1739  	       RAISE CAN_NOT_CREATE_LICENSE;
11:21:59 1740  	 END;
11:21:59 1741  
11:21:59 1742  	 -- Update original gift certificate
11:21:59 1743  	 BEGIN
11:21:59 1744  	   PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE(
11:21:59 1745  	     in_gift_certificate_id	   => var_gift_certificate_id,
11:21:59 1746  	     in_updated_by		   => in_created_by,
11:21:59 1747  	     in_redeemer_group_id	   => in_group_id,
11:21:59 1748  	     in_finalized_invoice_id	   => var_invoice_id,
11:21:59 1749  	     in_redemption_date 	   => var_date,
11:21:59 1750  	     in_redeemer_address_id	   => in_redeemer_address_id,
11:21:59 1751  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED
11:21:59 1752  	   );
11:21:59 1753  	   EXCEPTION
11:21:59 1754  	     WHEN OTHERS THEN
11:21:59 1755  	       EXCEPTION_MESSAGE := SQLERRM;
11:21:59 1756  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
11:21:59 1757  	 END;
11:21:59 1758  
11:21:59 1759  EXCEPTION
11:21:59 1760  WHEN LIMIT_REACHED THEN
11:21:59 1761  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
11:21:59 1762  	   SPROC_NAME, 'Limit reached for given offer chain');
11:21:59 1763  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
11:21:59 1764  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.CONFLICT_ERROR,
11:21:59 1765  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
11:21:59 1766  WHEN GIFT_CERTIFICATE_REDEEMED THEN
11:21:59 1767  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1768  	   SPROC_NAME, 'Gift certificate already redeemed');
11:21:59 1769  WHEN GIFT_CERTIFICATE_EXPIRED THEN
11:21:59 1770  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1771  	   SPROC_NAME, 'Gift certificate expired');
11:21:59 1772  WHEN GIFT_CERT_IS_FINALIZED THEN
11:21:59 1773  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1774  	   SPROC_NAME, 'Gift certificate is finalized');
11:21:59 1775  WHEN GIFT_CERT_IS_REFUNDED THEN
11:21:59 1776  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1777  	   SPROC_NAME, 'Gift certificate has been refunded');
11:21:59 1778  WHEN BAD_GROUP_ID THEN
11:21:59 1779  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1780  	   SPROC_NAME, 'No such account with given group id');
11:21:59 1781  WHEN OC_TO_REDEEM_NOT_FOUND THEN
11:21:59 1782  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1783  	   SPROC_NAME, 'Offer chain to redeem not found');
11:21:59 1784  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
11:21:59 1785  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1786  	   SPROC_NAME, 'No such gift certificate code');
11:21:59 1787  WHEN CAN_NOT_CREATE_LICENSE THEN
11:21:59 1788  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1789  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
11:21:59 1790  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
11:21:59 1791  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 1792  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
11:21:59 1793  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
11:21:59 1794  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1795  	   SPROC_NAME, 'Purchase invoice is not closed');
11:21:59 1796  WHEN PURCHASE_INVOICES_NOT_PAID THEN
11:21:59 1797  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 1798  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
11:21:59 1799  WHEN OTHERS THEN
11:21:59 1800  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1801  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1802  END;
11:21:59 1803  
11:21:59 1804  /******************************************************************************/
11:21:59 1805  
11:21:59 1806  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
11:21:59 1807  /*
11:21:59 1808  Throws exceptions:
11:21:59 1809  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1810  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1811  */
11:21:59 1812  	 in_code	IN VARCHAR,
11:21:59 1813  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1814  ) AS
11:21:59 1815  -- VARIABLES
11:21:59 1816  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
11:21:59 1817  temp_gift_certificate_id NUMBER;
11:21:59 1818  -- EXCEPTIONS
11:21:59 1819  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
11:21:59 1820  BEGIN
11:21:59 1821  
11:21:59 1822  	 BEGIN
11:21:59 1823  	   SELECT
11:21:59 1824  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
11:21:59 1825  	   FROM
11:21:59 1826  	     GIFT_CERTIFICATE
11:21:59 1827  	   WHERE
11:21:59 1828  	     GIFT_CERTIFICATE.CODE = in_code;
11:21:59 1829  	   EXCEPTION
11:21:59 1830  	     WHEN NO_DATA_FOUND THEN
11:21:59 1831  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
11:21:59 1832  	 END;
11:21:59 1833  
11:21:59 1834  	 -- Select all gift certificates with given code
11:21:59 1835  	 OPEN out_result_set FOR
11:21:59 1836  	 SELECT
11:21:59 1837  	   gc.EXPIRATION_DATE,
11:21:59 1838  	   ch.name,
11:21:59 1839  	   ch.id,
11:21:59 1840  	   gc.sender_email,
11:21:59 1841  	   gc.sender_name,
11:21:59 1842  	   gc.recipient_email,
11:21:59 1843  	   gc.recipient_name,
11:21:59 1844  	   gc.purchase_date,
11:21:59 1845  	   gc.redemption_date,
11:21:59 1846  	   gc.purchaser_group_id,
11:21:59 1847  	   gc.redeemer_group_id,
11:21:59 1848  	   gc.gift_message,
11:21:59 1849  	   ocmd.value redemption_offer_chain_ids,
11:21:59 1850  	   s.offer_chain_id redeemed_offer_chain_id,
11:21:59 1851  	   gc.recipient_notify_date,
11:21:59 1852  	   gc.gift_certificate_status_id,
11:21:59 1853  	   gc.purchase_invoice_id,
11:21:59 1854  	   gc.finalized_invoice_id
11:21:59 1855  	 FROM
11:21:59 1856  	   GIFT_CERTIFICATE gc
11:21:59 1857  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
11:21:59 1858  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
11:21:59 1859  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
11:21:59 1860  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
11:21:59 1861  	 WHERE
11:21:59 1862  	   gc.code = in_code;
11:21:59 1863  
11:21:59 1864  EXCEPTION
11:21:59 1865  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
11:21:59 1866  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1867  	   SPROC_NAME, 'No such gift certificate');
11:21:59 1868  WHEN OTHERS THEN
11:21:59 1869  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1870  	   SPROC_NAME, 'Unknown Error', SQLERRM);
11:21:59 1871  END;
11:21:59 1872  
11:21:59 1873  /******************************************************************************/
11:21:59 1874  
11:21:59 1875  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
11:21:59 1876  /*
11:21:59 1877  Throws exceptions:
11:21:59 1878  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1879  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1880  */
11:21:59 1881  	 in_gift_certificate_id IN NUMBER,
11:21:59 1882  	 out_result_set 	OUT SYS_REFCURSOR
11:21:59 1883  ) AS
11:21:59 1884  -- VARIABLES
11:21:59 1885  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
11:21:59 1886  temp_gift_certificate_id NUMBER;
11:21:59 1887  -- EXCEPTIONS
11:21:59 1888  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
11:21:59 1889  BEGIN
11:21:59 1890  
11:21:59 1891  	 BEGIN
11:21:59 1892  	   SELECT
11:21:59 1893  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
11:21:59 1894  	   FROM
11:21:59 1895  	     GIFT_CERTIFICATE
11:21:59 1896  	   WHERE
11:21:59 1897  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
11:21:59 1898  	   EXCEPTION
11:21:59 1899  	     WHEN NO_DATA_FOUND THEN
11:21:59 1900  	       RAISE BAD_GIFT_CERTIFICATE_ID;
11:21:59 1901  	 END;
11:21:59 1902  
11:21:59 1903  	 -- Select all gift certificates with given code
11:21:59 1904  	 OPEN out_result_set FOR
11:21:59 1905  	 SELECT
11:21:59 1906  	   gc.EXPIRATION_DATE,
11:21:59 1907  	   ch.name,
11:21:59 1908  	   ch.id,
11:21:59 1909  	   gc.sender_email,
11:21:59 1910  	   gc.sender_name,
11:21:59 1911  	   gc.recipient_email,
11:21:59 1912  	   gc.recipient_name,
11:21:59 1913  	   gc.purchase_date,
11:21:59 1914  	   gc.redemption_date,
11:21:59 1915  	   gc.purchaser_group_id,
11:21:59 1916  	   gc.redeemer_group_id,
11:21:59 1917  	   gc.code,
11:21:59 1918  	   gc.gift_message,
11:21:59 1919  	   gc.recipient_notify_date
11:21:59 1920  	 FROM
11:21:59 1921  	   GIFT_CERTIFICATE gc
11:21:59 1922  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
11:21:59 1923  	 WHERE
11:21:59 1924  	   gc.id = in_gift_certificate_id;
11:21:59 1925  
11:21:59 1926  EXCEPTION
11:21:59 1927  WHEN BAD_GIFT_CERTIFICATE_ID THEN
11:21:59 1928  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1929  	   SPROC_NAME, 'No such gift certificate');
11:21:59 1930  WHEN OTHERS THEN
11:21:59 1931  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1932  	   SPROC_NAME, 'Unknown Error', SQLERRM);
11:21:59 1933  END GET_GIFT_CERTIFICATE_BY_ID;
11:21:59 1934  
11:21:59 1935  /******************************************************************************/
11:21:59 1936  
11:21:59 1937  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
11:21:59 1938  	 in_group_id		IN  NUMBER,
11:21:59 1939  	 out_instrument_type_id OUT NUMBER,
11:21:59 1940  	 out_instrument_id	OUT NUMBER
11:21:59 1941  ) AS
11:21:59 1942  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
11:21:59 1943  BEGIN
11:21:59 1944  
11:21:59 1945  	 SELECT
11:21:59 1946  	   ACCOUNT.INSTRUMENT_TYPE_ID,
11:21:59 1947  	   ACCOUNT.INSTRUMENT_ID
11:21:59 1948  	   into
11:21:59 1949  	   out_instrument_type_id,
11:21:59 1950  	   out_instrument_id
11:21:59 1951  	 FROM
11:21:59 1952  	   ACCOUNT
11:21:59 1953  	 WHERE
11:21:59 1954  	   ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1955  
11:21:59 1956  EXCEPTION
11:21:59 1957  WHEN NO_DATA_FOUND THEN
11:21:59 1958  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1959  	   SPROC_NAME, 'Bad group id');
11:21:59 1960  WHEN OTHERS THEN
11:21:59 1961  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1962  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1963  END GET_DEF_FINANCIAL_INSTRUMENT;
11:21:59 1964  
11:21:59 1965  /******************************************************************************/
11:21:59 1966  
11:21:59 1967  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
11:21:59 1968  	 in_group_id	       IN NUMBER,
11:21:59 1969  	 in_instrument_type_id IN NUMBER,
11:21:59 1970  	 in_instrument_id      IN NUMBER,
11:21:59 1971  	 in_updated_by	       IN VARCHAR2
11:21:59 1972  ) AS
11:21:59 1973  -- VARIABLES
11:21:59 1974  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
11:21:59 1975  var_account_id	      NUMBER;
11:21:59 1976  -- EXCEPTIONS
11:21:59 1977  BAD_GROUP_ID	      EXCEPTION;
11:21:59 1978  BAD_CREDIT_CARD	      EXCEPTION;
11:21:59 1979  BAD_PAYPAL	      EXCEPTION;
11:21:59 1980  BAD_INSTRUMENT_TYPE    EXCEPTION;
11:21:59 1981  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 1982  BEGIN
11:21:59 1983  
11:21:59 1984  	 -- get account id
11:21:59 1985  	 BEGIN
11:21:59 1986  	   SELECT
11:21:59 1987  	     ACCOUNT.ID into var_account_id
11:21:59 1988  	   FROM
11:21:59 1989  	     ACCOUNT
11:21:59 1990  	   WHERE
11:21:59 1991  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1992  	   EXCEPTION
11:21:59 1993  	     WHEN NO_DATA_FOUND THEN
11:21:59 1994  	       RAISE BAD_GROUP_ID;
11:21:59 1995  	 END;
11:21:59 1996  
11:21:59 1997  	 -- Chech that given instrument exists
11:21:59 1998  	 IF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 1999  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2000  	     RAISE BAD_CREDIT_CARD;
11:21:59 2001  	   END IF;
11:21:59 2002  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 2003  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2004  	     RAISE BAD_PAYPAL;
11:21:59 2005  	   END IF;
11:21:59 2006  	 ELSE
11:21:59 2007  	   RAISE BAD_INSTRUMENT_TYPE;
11:21:59 2008  	 END IF;
11:21:59 2009  
11:21:59 2010  	 -- update account information
11:21:59 2011  	 PROCS_ACCOUNT_CRU_V15.UPDATE_ACCOUNT(
11:21:59 2012  	   in_account_id	 => var_account_id,
11:21:59 2013  	   in_updated_by	 => in_updated_by,
11:21:59 2014  	   in_instrument_type_id => in_instrument_type_id,
11:21:59 2015  	   in_instrument_id	 => in_instrument_id
11:21:59 2016  	 );
11:21:59 2017  
11:21:59 2018  EXCEPTION
11:21:59 2019  WHEN BAD_GROUP_ID THEN
11:21:59 2020  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2021  	   SPROC_NAME, 'No such account');
11:21:59 2022  WHEN BAD_CREDIT_CARD THEN
11:21:59 2023  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2024  	   SPROC_NAME, 'Could not find credit card with given ID');
11:21:59 2025  WHEN BAD_PAYPAL THEN
11:21:59 2026  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2027  	   SPROC_NAME, 'Could not find paypal with given ID');
11:21:59 2028  WHEN BAD_INSTRUMENT_TYPE THEN
11:21:59 2029  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 2030  	   SPROC_NAME, 'Bad instrument type id');
11:21:59 2031  WHEN OTHERS THEN
11:21:59 2032  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2033  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2034  END SET_DEF_FINANCIAL_INSTRUMENT;
11:21:59 2035  
11:21:59 2036  /******************************************************************************/
11:21:59 2037  
11:21:59 2038  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
11:21:59 2039  	 in_group_id IN NUMBER
11:21:59 2040  ) AS
11:21:59 2041  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
11:21:59 2042  -- VARIABLES
11:21:59 2043  var_account_id NUMBER;
11:21:59 2044  -- EXCEPTIONS
11:21:59 2045  BAD_GROUP_ID	 EXCEPTION;
11:21:59 2046  EXCEPTION_MESSAGE VARCHAR2(1024);
11:21:59 2047  BEGIN
11:21:59 2048  
11:21:59 2049  	 BEGIN
11:21:59 2050  	   SELECT
11:21:59 2051  	     ACCOUNT.ID into var_account_id
11:21:59 2052  	   FROM
11:21:59 2053  	     ACCOUNT
11:21:59 2054  	   WHERE
11:21:59 2055  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 2056  	   EXCEPTION
11:21:59 2057  	     WHEN NO_DATA_FOUND THEN
11:21:59 2058  	       RAISE BAD_GROUP_ID;
11:21:59 2059  	 END;
11:21:59 2060  
11:21:59 2061  	 PROCS_ACCOUNT_CRU_V15.UPDATE_DEF_FIN_INSTRUMENT(
11:21:59 2062  	   in_account_id => var_account_id,
11:21:59 2063  	   in_instrument_type_id => NULL,
11:21:59 2064  	   in_instrument_id => NULL,
11:21:59 2065  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
11:21:59 2066  	 );
11:21:59 2067  
11:21:59 2068  EXCEPTION
11:21:59 2069  WHEN BAD_GROUP_ID THEN
11:21:59 2070  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2071  	   SPROC_NAME, 'No such group id');
11:21:59 2072  WHEN OTHERS THEN
11:21:59 2073  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2074  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2075  END DEL_DEF_FINANCIAL_INSTRUMENT;
11:21:59 2076  
11:21:59 2077  /******************************************************************************/
11:21:59 2078  
11:21:59 2079  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:59 2080  	 in_credit_card_id IN  NUMBER,
11:21:59 2081  	 out_result_set    OUT SYS_REFCURSOR
11:21:59 2082  ) AS
11:21:59 2083  -- VARIABLES
11:21:59 2084  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
11:21:59 2085  temp_cc_count NUMBER;
11:21:59 2086  
11:21:59 2087  -- EXCEPTIONS
11:21:59 2088  BAD_CREDIT_CARD_ID EXCEPTION;
11:21:59 2089  BEGIN
11:21:59 2090  
11:21:59 2091  	 -- Check that credit card exists
11:21:59 2092  	 SELECT
11:21:59 2093  	   COUNT(*) into temp_cc_count
11:21:59 2094  	 FROM
11:21:59 2095  	   CREDIT_CARD
11:21:59 2096  	 WHERE
11:21:59 2097  	   CREDIT_CARD.ID = in_credit_card_id;
11:21:59 2098  	 IF temp_cc_count = 0 THEN
11:21:59 2099  	   RAISE BAD_CREDIT_CARD_ID;
11:21:59 2100  	 END IF;
11:21:59 2101  
11:21:59 2102  	 -- Get data
11:21:59 2103  	 OPEN out_result_set FOR
11:21:59 2104  	 SELECT
11:21:59 2105  	   CREDIT_CARD.ID,
11:21:59 2106  	   CREDIT_CARD.ACCOUNT_ID,
11:21:59 2107  	   CREDIT_CARD.INSTRUMENT_NAME,
11:21:59 2108  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
11:21:59 2109  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
11:21:59 2110  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
11:21:59 2111  	   CREDIT_CARD.STATE,
11:21:59 2112  	   CREDIT_CARD.CITY,
11:21:59 2113  	   CREDIT_CARD.POSTAL_CODE,
11:21:59 2114  	   CREDIT_CARD.COUNTRY,
11:21:59 2115  	   CREDIT_CARD.LAST_FOUR_CC,
11:21:59 2116  	   CREDIT_CARD.EXPIRATION_DATE,
11:21:59 2117  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
11:21:59 2118  	   CREDIT_CARD.SECRET_TOKEN,
11:21:59 2119  	   CREDIT_CARD.CREATE_DATE,
11:21:59 2120  	   CREDIT_CARD.CREATED_BY,
11:21:59 2121  	   CREDIT_CARD.UPDATE_DATE,
11:21:59 2122  	   CREDIT_CARD.UPDATED_BY,
11:21:59 2123  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
11:21:59 2124  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
11:21:59 2125  	   CREDIT_CARD.PRIVATE_LAST_NAME,
11:21:59 2126  	       CREDIT_CARD.CHASE_PROFILE_ID
11:21:59 2127  	 FROM
11:21:59 2128  	   CREDIT_CARD
11:21:59 2129  	 WHERE
11:21:59 2130  	   CREDIT_CARD.ID = in_credit_card_id;
11:21:59 2131  
11:21:59 2132  EXCEPTION
11:21:59 2133  WHEN BAD_CREDIT_CARD_ID THEN
11:21:59 2134  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2135  	   SPROC_NAME, 'No such credit card');
11:21:59 2136  WHEN OTHERS THEN
11:21:59 2137  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2138  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2139  END GET_CREDIT_CARD_BY_ID;
11:21:59 2140  
11:21:59 2141  /******************************************************************************/
11:21:59 2142  
11:21:59 2143  PROCEDURE GET_PAYPAL_BY_ID (
11:21:59 2144  	 in_paypal_id	IN  NUMBER,
11:21:59 2145  	 out_result_set OUT SYS_REFCURSOR
11:21:59 2146  ) AS
11:21:59 2147  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
11:21:59 2148  -- VARIABLES
11:21:59 2149  temp_pp_count NUMBER;
11:21:59 2150  -- EXCEPTIONS
11:21:59 2151  BAD_PAYPAL_ID EXCEPTION;
11:21:59 2152  BEGIN
11:21:59 2153  
11:21:59 2154  	 -- Check that credit card exists
11:21:59 2155  	 SELECT
11:21:59 2156  	   COUNT(*) into temp_pp_count
11:21:59 2157  	 FROM
11:21:59 2158  	   PAYPAL
11:21:59 2159  	 WHERE
11:21:59 2160  	   PAYPAL.ID = in_paypal_id;
11:21:59 2161  	 IF temp_pp_count = 0 THEN
11:21:59 2162  	   RAISE BAD_PAYPAL_ID;
11:21:59 2163  	 END IF;
11:21:59 2164  
11:21:59 2165  	 OPEN out_result_set FOR
11:21:59 2166  	 SELECT
11:21:59 2167  	   ID,
11:21:59 2168  	   ACCOUNT_ID,
11:21:59 2169  	   INSTRUMENT_NAME,
11:21:59 2170  	   PRIVATE_EMAIL_ADDRESS,
11:21:59 2171  	   CREATE_DATE,
11:21:59 2172  	   CREATED_BY,
11:21:59 2173  	   UPDATE_DATE,
11:21:59 2174  	   UPDATED_BY,
11:21:59 2175  	   PAYPAL_STATUS_ID,
11:21:59 2176  	   PRIVATE_STREET_ADDRESS,
11:21:59 2177  	   PRIVATE_STREET_ADDRESS2,
11:21:59 2178  	   STATE,
11:21:59 2179  	   CITY,
11:21:59 2180  	   POSTAL_CODE,
11:21:59 2181  	   COUNTRY,
11:21:59 2182  	   EXPIRATION_DATE,
11:21:59 2183  	   SECRET_TOKEN
11:21:59 2184  	 FROM
11:21:59 2185  	   PAYPAL
11:21:59 2186  	 WHERE
11:21:59 2187  	   ID = in_paypal_id;
11:21:59 2188  
11:21:59 2189  EXCEPTION
11:21:59 2190  WHEN BAD_PAYPAL_ID THEN
11:21:59 2191  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2192  	   SPROC_NAME, 'No such paypal');
11:21:59 2193  WHEN OTHERS THEN
11:21:59 2194  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2195  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2196  END GET_PAYPAL_BY_ID;
11:21:59 2197  
11:21:59 2198  /******************************************************************************/
11:21:59 2199  
11:21:59 2200  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
11:21:59 2201  /*
11:21:59 2202  	 Returns GLOBAL_CONSTANTS_V15.TRUE if system can disable credit card
11:21:59 2203  	 GLOBAL_CONSTANTS_V15.FALSE else
11:21:59 2204  */
11:21:59 2205  	 in_credit_card_id NUMBER
11:21:59 2206  ) RETURN NUMBER AS
11:21:59 2207  BEGIN
11:21:59 2208  	 -- STUB
11:21:59 2209  	 RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 2210  END F_CAN_DISABLE_CREDIT_CARD;
11:21:59 2211  
11:21:59 2212  /******************************************************************************/
11:21:59 2213  
11:21:59 2214  PROCEDURE GET_PURCHASED_GCERTIFICATES (
11:21:59 2215  	 in_group_id	IN NUMBER,
11:21:59 2216  	 out_result_set OUT SYS_REFCURSOR
11:21:59 2217  ) AS
11:21:59 2218  -- VARIABLES
11:21:59 2219  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
11:21:59 2220  var_account_id NUMBER;
11:21:59 2221  -- EXCEPTIONS
11:21:59 2222  BAD_GROUP_ID EXCEPTION;
11:21:59 2223  BEGIN
11:21:59 2224  
11:21:59 2225  	 BEGIN
11:21:59 2226  	   SELECT
11:21:59 2227  	     ACCOUNT.ID into var_account_id
11:21:59 2228  	   FROM
11:21:59 2229  	     ACCOUNT
11:21:59 2230  	   WHERE
11:21:59 2231  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 2232  	   EXCEPTION
11:21:59 2233  	     WHEN NO_DATA_FOUND THEN
11:21:59 2234  	       RAISE BAD_GROUP_ID;
11:21:59 2235  	 END;
11:21:59 2236  
11:21:59 2237  	 OPEN out_result_set FOR
11:21:59 2238  	 SELECT
11:21:59 2239  	   GIFT_CERTIFICATE.CODE,
11:21:59 2240  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
11:21:59 2241  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
11:21:59 2242  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
11:21:59 2243  	   GIFT_CERTIFICATE.SENDER_EMAIL,
11:21:59 2244  	   GIFT_CERTIFICATE.SENDER_NAME,
11:21:59 2245  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
11:21:59 2246  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
11:21:59 2247  	   GIFT_CERTIFICATE.PURCHASE_DATE,
11:21:59 2248  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
11:21:59 2249  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
11:21:59 2250  	 FROM
11:21:59 2251  	   GIFT_CERTIFICATE
11:21:59 2252  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 2253  	 WHERE
11:21:59 2254  	   ROWNUM <= 100 AND
11:21:59 2255  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
11:21:59 2256  
11:21:59 2257  EXCEPTION
11:21:59 2258  WHEN BAD_GROUP_ID THEN
11:21:59 2259  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2260  	   SPROC_NAME, 'No such group id');
11:21:59 2261  WHEN OTHERS THEN
11:21:59 2262  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2263  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2264  END GET_PURCHASED_GCERTIFICATES;
11:21:59 2265  
11:21:59 2266  /******************************************************************************/
11:21:59 2267  
11:21:59 2268  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
11:21:59 2269  	 in_gift_certificate_id IN NUMBER,
11:21:59 2270  	 in_charge_id		IN NUMBER,
11:21:59 2271  	 out_result		OUT NUMBER
11:21:59 2272  ) AS
11:21:59 2273  -- VARIABLES
11:21:59 2274  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
11:21:59 2275  var_invoice_id	    NUMBER;
11:21:59 2276  var_offer_chain_id   NUMBER;
11:21:59 2277  var_offer_chain_s_id NUMBER;
11:21:59 2278  -- EXCEPTIONS
11:21:59 2279  BAD_CHARGE_ID		 EXCEPTION;
11:21:59 2280  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
11:21:59 2281  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
11:21:59 2282  BEGIN
11:21:59 2283  
11:21:59 2284  	 BEGIN
11:21:59 2285  	   SELECT
11:21:59 2286  	     CHARGE.INVOICE_ID into var_invoice_id
11:21:59 2287  	   FROM
11:21:59 2288  	     CHARGE
11:21:59 2289  	   WHERE
11:21:59 2290  	     CHARGE.ID = in_charge_id;
11:21:59 2291  	   EXCEPTION
11:21:59 2292  	     WHEN NO_DATA_FOUND THEN
11:21:59 2293  	       RAISE BAD_CHARGE_ID;
11:21:59 2294  	 END;
11:21:59 2295  
11:21:59 2296  	 BEGIN
11:21:59 2297  	   SELECT
11:21:59 2298  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
11:21:59 2299  	   FROM
11:21:59 2300  	     GIFT_CERTIFICATE
11:21:59 2301  	   WHERE
11:21:59 2302  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
11:21:59 2303  	   EXCEPTION
11:21:59 2304  	     WHEN NO_DATA_FOUND THEN
11:21:59 2305  	       RAISE BAD_GIFT_CERTIFICATE_ID;
11:21:59 2306  	 END;
11:21:59 2307  
11:21:59 2308  	 BEGIN
11:21:59 2309  	   SELECT
11:21:59 2310  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
11:21:59 2311  	   FROM
11:21:59 2312  	     SUBSCRIPTION
11:21:59 2313  	   WHERE
11:21:59 2314  	     SUBSCRIPTION.ID IN (
11:21:59 2315  	       SELECT DISTINCT
11:21:59 2316  		 LICENSE.SUBSCRIPTION_ID
11:21:59 2317  	       FROM
11:21:59 2318  		 LICENSE
11:21:59 2319  	       WHERE
11:21:59 2320  		 LICENSE.INVOICE_ID = var_invoice_id
11:21:59 2321  	     );
11:21:59 2322  	   EXCEPTION
11:21:59 2323  	     WHEN NO_DATA_FOUND THEN
11:21:59 2324  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
11:21:59 2325  	 END;
11:21:59 2326  
11:21:59 2327  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
11:21:59 2328  	   out_result := GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 2329  	 ELSE
11:21:59 2330  	   out_result := GLOBAL_CONSTANTS_V15.FALSE;
11:21:59 2331  	 END IF;
11:21:59 2332  
11:21:59 2333  EXCEPTION
11:21:59 2334  WHEN BAD_CHARGE_ID THEN
11:21:59 2335  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2336  	   SPROC_NAME, 'No such charge');
11:21:59 2337  WHEN BAD_GIFT_CERTIFICATE_ID THEN
11:21:59 2338  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2339  	   SPROC_NAME, 'No such gift certificate');
11:21:59 2340  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
11:21:59 2341  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2342  	   SPROC_NAME, 'Could not find subscription for given charge');
11:21:59 2343  WHEN OTHERS THEN
11:21:59 2344  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2345  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2346  END IS_GCERT_FOR_PROPER_OFFER;
11:21:59 2347  
11:21:59 2348  /******************************************************************************/
11:21:59 2349  
11:21:59 2350  FUNCTION IS_CREDIT_CARD_EXISTS (
11:21:59 2351  /*
11:21:59 2352  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
11:21:59 2353  GLOBAL_CONSTANTS_V15.FALSE - else
11:21:59 2354  */
11:21:59 2355  	 in_credit_card_id IN NUMBER
11:21:59 2356  ) RETURN NUMBER AS
11:21:59 2357  -- VARIABLES
11:21:59 2358  var_cc_count NUMBER;
11:21:59 2359  BEGIN
11:21:59 2360  	 SELECT
11:21:59 2361  	   COUNT(*) into var_cc_count
11:21:59 2362  	 FROM
11:21:59 2363  	   CREDIT_CARD
11:21:59 2364  	 WHERE
11:21:59 2365  	   CREDIT_CARD.ID = in_credit_card_id;
11:21:59 2366  
11:21:59 2367  	 IF var_cc_count = 0 THEN
11:21:59 2368  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:59 2369  	 ELSE
11:21:59 2370  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 2371  	 END IF;
11:21:59 2372  
11:21:59 2373  END IS_CREDIT_CARD_EXISTS;
11:21:59 2374  
11:21:59 2375  /******************************************************************************/
11:21:59 2376  
11:21:59 2377  FUNCTION IS_PAYPAL_EXISTS (
11:21:59 2378  /*
11:21:59 2379  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
11:21:59 2380  GLOBAL_CONSTANTS_V15.FALSE - else
11:21:59 2381  */
11:21:59 2382  	 in_paypal_id IN NUMBER
11:21:59 2383  ) RETURN NUMBER AS
11:21:59 2384  -- VARIABLES
11:21:59 2385  var_pp_count NUMBER;
11:21:59 2386  BEGIN
11:21:59 2387  	 SELECT
11:21:59 2388  	   COUNT(*) into var_pp_count
11:21:59 2389  	 FROM
11:21:59 2390  	   PAYPAL
11:21:59 2391  	 WHERE
11:21:59 2392  	   PAYPAL.ID = in_paypal_id;
11:21:59 2393  
11:21:59 2394  	 IF var_pp_count = 0 THEN
11:21:59 2395  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:59 2396  	 ELSE
11:21:59 2397  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 2398  	 END IF;
11:21:59 2399  
11:21:59 2400  END IS_PAYPAL_EXISTS;
11:21:59 2401  
11:21:59 2402  /******************************************************************************/
11:21:59 2403  
11:21:59 2404  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
11:21:59 2405  /*
11:21:59 2406  GLOBAL_CONSTANTS_V15.TRUE - if instrument exists
11:21:59 2407  GLOBAL_CONSTANTS_V15.FALSE - else
11:21:59 2408  */
11:21:59 2409  	 in_gift_certificate_id IN NUMBER
11:21:59 2410  ) RETURN NUMBER AS
11:21:59 2411  -- VARIABLES
11:21:59 2412  var_gc_count NUMBER;
11:21:59 2413  BEGIN
11:21:59 2414  	 SELECT
11:21:59 2415  	   COUNT(*) into var_gc_count
11:21:59 2416  	 FROM
11:21:59 2417  	   GIFT_CERTIFICATE
11:21:59 2418  	 WHERE
11:21:59 2419  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
11:21:59 2420  
11:21:59 2421  	 IF var_gc_count = 0 THEN
11:21:59 2422  	   RETURN GLOBAL_CONSTANTS_V15.FALSE;
11:21:59 2423  	 ELSE
11:21:59 2424  	   RETURN GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 2425  	 END IF;
11:21:59 2426  
11:21:59 2427  END IS_GIFT_CERTIFICATE_EXISTS;
11:21:59 2428  
11:21:59 2429  /******************************************************************************/
11:21:59 2430  
11:21:59 2431  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
11:21:59 2432  	 in_credit_card_id IN NUMBER,
11:21:59 2433  	 out_group_id	   OUT NUMBER
11:21:59 2434  ) AS
11:21:59 2435  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
11:21:59 2436  BEGIN
11:21:59 2437  	 SELECT
11:21:59 2438  	   ACCOUNT.GROUP_ID into out_group_id
11:21:59 2439  	 FROM
11:21:59 2440  	   CREDIT_CARD
11:21:59 2441  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
11:21:59 2442  	 WHERE
11:21:59 2443  	   CREDIT_CARD.ID = in_credit_card_id;
11:21:59 2444  EXCEPTION
11:21:59 2445  WHEN NO_DATA_FOUND THEN
11:21:59 2446  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2447  	   SPROC_NAME, 'No such credit card');
11:21:59 2448  WHEN OTHERS THEN
11:21:59 2449  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2450  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2451  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
11:21:59 2452  
11:21:59 2453  /******************************************************************************/
11:21:59 2454  
11:21:59 2455  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
11:21:59 2456  	 in_paypal_id IN NUMBER,
11:21:59 2457  	 out_group_id OUT NUMBER
11:21:59 2458  ) AS
11:21:59 2459  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
11:21:59 2460  BEGIN
11:21:59 2461  	 SELECT
11:21:59 2462  	   ACCOUNT.GROUP_ID into out_group_id
11:21:59 2463  	 FROM
11:21:59 2464  	   PAYPAL
11:21:59 2465  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
11:21:59 2466  	 WHERE
11:21:59 2467  	   PAYPAL.ID = in_paypal_id;
11:21:59 2468  EXCEPTION
11:21:59 2469  WHEN NO_DATA_FOUND THEN
11:21:59 2470  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2471  	   SPROC_NAME, 'No such paypal');
11:21:59 2472  WHEN OTHERS THEN
11:21:59 2473  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2474  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2475  END GET_GROUP_ID_BY_PAYPAL_ID;
11:21:59 2476  
11:21:59 2477  /******************************************************************************/
11:21:59 2478  
11:21:59 2479  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
11:21:59 2480  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
11:21:59 2481  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
11:21:59 2482  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
11:21:59 2483  ) AS
11:21:59 2484  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
11:21:59 2485  -- EXCEPTIONS
11:21:59 2486  BAD_CREDIT_CARD_ID     EXCEPTION;
11:21:59 2487  BAD_STATUS_ID	      EXCEPTION;
11:21:59 2488  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 2489  BEGIN
11:21:59 2490  
11:21:59 2491  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
11:21:59 2492  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_INVALID
11:21:59 2493  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_DISABLED
11:21:59 2494  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V15.CREDIT_CARD_EXPIRED THEN
11:21:59 2495  	   RAISE BAD_STATUS_ID;
11:21:59 2496  	 END IF;
11:21:59 2497  
11:21:59 2498  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_CREDIT_CARD(
11:21:59 2499  	   in_credit_card_id	    => in_credit_card_id,
11:21:59 2500  	   in_updated_by	    => in_updated_by,
11:21:59 2501  	   in_credit_card_status_id => in_credit_card_status_id
11:21:59 2502  	 );
11:21:59 2503  
11:21:59 2504  	 IF SQL%ROWCOUNT = 0 THEN
11:21:59 2505  	   RAISE BAD_CREDIT_CARD_ID;
11:21:59 2506  	 END IF;
11:21:59 2507  
11:21:59 2508  EXCEPTION
11:21:59 2509  WHEN BAD_CREDIT_CARD_ID THEN
11:21:59 2510  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2511  	   SPROC_NAME, 'No such credit card');
11:21:59 2512  WHEN BAD_STATUS_ID THEN
11:21:59 2513  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 2514  	   SPROC_NAME, 'Bad credit card status id');
11:21:59 2515  WHEN OTHERS THEN
11:21:59 2516  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2517  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2518  END UPDATE_CREDIT_CARD_STATUS;
11:21:59 2519  
11:21:59 2520  /******************************************************************************/
11:21:59 2521  
11:21:59 2522  PROCEDURE UPDATE_PAYPAL_STATUS (
11:21:59 2523  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
11:21:59 2524  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
11:21:59 2525  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
11:21:59 2526  ) AS
11:21:59 2527  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
11:21:59 2528  -- EXCEPTIONS
11:21:59 2529  BAD_PAYPAL_ID	      EXCEPTION;
11:21:59 2530  BAD_STATUS_ID	      EXCEPTION;
11:21:59 2531  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 2532  BEGIN
11:21:59 2533  
11:21:59 2534  	 IF in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
11:21:59 2535  	   AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
11:21:59 2536  	   AND in_paypal_status_id != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
11:21:59 2537  	   RAISE BAD_STATUS_ID;
11:21:59 2538  	 END IF;
11:21:59 2539  
11:21:59 2540  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_PAYPAL(
11:21:59 2541  	   in_paypal_id        => in_paypal_id,
11:21:59 2542  	   in_paypal_status_id => in_paypal_status_id,
11:21:59 2543  	   in_updated_by       => in_updated_by
11:21:59 2544  	 );
11:21:59 2545  
11:21:59 2546  	 IF SQL%ROWCOUNT = 0 THEN
11:21:59 2547  	   RAISE BAD_PAYPAL_ID;
11:21:59 2548  	 END IF;
11:21:59 2549  
11:21:59 2550  EXCEPTION
11:21:59 2551  WHEN BAD_PAYPAL_ID THEN
11:21:59 2552  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2553  	   SPROC_NAME, 'No such paypal');
11:21:59 2554  WHEN BAD_STATUS_ID THEN
11:21:59 2555  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 2556  	   SPROC_NAME, 'Bad paypal status id');
11:21:59 2557  WHEN OTHERS THEN
11:21:59 2558  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2559  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2560  END UPDATE_PAYPAL_STATUS;
11:21:59 2561  
11:21:59 2562  /******************************************************************************/
11:21:59 2563  
11:21:59 2564  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
11:21:59 2565  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
11:21:59 2566  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
11:21:59 2567  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
11:21:59 2568  ) AS
11:21:59 2569  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
11:21:59 2570  -- EXCEPTIONS
11:21:59 2571  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
11:21:59 2572  BAD_STATUS_ID	       EXCEPTION;
11:21:59 2573  EXCEPTION_MESSAGE       VARCHAR2(1024);
11:21:59 2574  BEGIN
11:21:59 2575  
11:21:59 2576  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
11:21:59 2577  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_FINALIZED THEN
11:21:59 2578  	   RAISE BAD_STATUS_ID;
11:21:59 2579  	 END IF;
11:21:59 2580  
11:21:59 2581  	 PROCS_FIN_INSTRUMENTS_CRU_V15.UPDATE_GIFT_CERTIFICATE(
11:21:59 2582  	   in_gift_certificate_id	 => in_gift_certificate_id,
11:21:59 2583  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
11:21:59 2584  	   in_updated_by		 => in_updated_by
11:21:59 2585  	 );
11:21:59 2586  
11:21:59 2587  	 IF SQL%ROWCOUNT = 0 THEN
11:21:59 2588  	   RAISE BAD_GIFT_CERTIFICATE_ID;
11:21:59 2589  	 END IF;
11:21:59 2590  
11:21:59 2591  EXCEPTION
11:21:59 2592  WHEN BAD_GIFT_CERTIFICATE_ID THEN
11:21:59 2593  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2594  	   SPROC_NAME, 'No such gift certificate');
11:21:59 2595  WHEN BAD_STATUS_ID THEN
11:21:59 2596  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 2597  	   SPROC_NAME, 'Bad paypal status id');
11:21:59 2598  WHEN OTHERS THEN
11:21:59 2599  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2600  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2601  END UPDATE_GIFT_CERTIFICATE_STATUS;
11:21:59 2602  
11:21:59 2603  /******************************************************************************/
11:21:59 2604  
11:21:59 2605  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:59 2606  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59 2607  	 out_result_set OUT SYS_REFCURSOR
11:21:59 2608  ) AS
11:21:59 2609  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
11:21:59 2610  -- VARIABLES
11:21:59 2611  temp_invoice_id NUMBER;
11:21:59 2612  -- EXCEPTIONS
11:21:59 2613  BAD_INVOICE_ID EXCEPTION;
11:21:59 2614  BEGIN
11:21:59 2615  
11:21:59 2616  	 BEGIN
11:21:59 2617  	   SELECT
11:21:59 2618  	     I.ID into temp_invoice_id
11:21:59 2619  	   FROM
11:21:59 2620  	     INVOICE I
11:21:59 2621  	   WHERE
11:21:59 2622  	     I.ID = in_invoice_id;
11:21:59 2623  	   EXCEPTION
11:21:59 2624  	     WHEN NO_DATA_FOUND THEN
11:21:59 2625  	       RAISE BAD_INVOICE_ID;
11:21:59 2626  	 END;
11:21:59 2627  
11:21:59 2628  	 OPEN out_result_set FOR
11:21:59 2629  	   SELECT
11:21:59 2630  	     gc.EXPIRATION_DATE,
11:21:59 2631  	     ch.name,
11:21:59 2632  	     ch.id offer_chain_id,
11:21:59 2633  	     gc.sender_email,
11:21:59 2634  	     gc.sender_name,
11:21:59 2635  	     gc.recipient_email,
11:21:59 2636  	     gc.recipient_name,
11:21:59 2637  	     gc.purchase_date,
11:21:59 2638  	     gc.redemption_date,
11:21:59 2639  	     gc.purchaser_group_id,
11:21:59 2640  	     gc.redeemer_group_id,
11:21:59 2641  	     gc.code,
11:21:59 2642  	     gc.gift_message,
11:21:59 2643  	     gc.recipient_notify_date,
11:21:59 2644  	     gc.id
11:21:59 2645  	   FROM
11:21:59 2646  	     GIFT_CERTIFICATE gc
11:21:59 2647  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
11:21:59 2648  	   WHERE
11:21:59 2649  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
11:21:59 2650  
11:21:59 2651  EXCEPTION
11:21:59 2652  WHEN BAD_INVOICE_ID THEN
11:21:59 2653  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2654  	   SPROC_NAME, 'No such invoice');
11:21:59 2655  WHEN OTHERS THEN
11:21:59 2656  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2657  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2658  END GET_GC_BY_PURCH_INVOICE_ID;
11:21:59 2659  
11:21:59 2660  
11:21:59 2661  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
11:21:59 2662  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59 2663  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
11:21:59 2664  ) AS
11:21:59 2665  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
11:21:59 2666  -- VARIABLES
11:21:59 2667  temp_invoice_id NUMBER;
11:21:59 2668  -- EXCEPTIONS
11:21:59 2669  BAD_INVOICE_ID EXCEPTION;
11:21:59 2670  BEGIN
11:21:59 2671  
11:21:59 2672  	 BEGIN
11:21:59 2673  	   SELECT
11:21:59 2674  	     I.ID into temp_invoice_id
11:21:59 2675  	   FROM
11:21:59 2676  	     INVOICE I
11:21:59 2677  	   WHERE
11:21:59 2678  	     I.ID = in_invoice_id;
11:21:59 2679  	   EXCEPTION
11:21:59 2680  	     WHEN NO_DATA_FOUND THEN
11:21:59 2681  	       RAISE BAD_INVOICE_ID;
11:21:59 2682  	 END;
11:21:59 2683  
11:21:59 2684  	 BEGIN
11:21:59 2685  	   SELECT
11:21:59 2686  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
11:21:59 2687  	   FROM
11:21:59 2688  	     GIFT_CERTIFICATE
11:21:59 2689  	   WHERE
11:21:59 2690  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
11:21:59 2691  	   EXCEPTION
11:21:59 2692  	     WHEN NO_DATA_FOUND THEN
11:21:59 2693  	       out_gift_certificate_id := NULL;
11:21:59 2694  	 END;
11:21:59 2695  
11:21:59 2696  EXCEPTION
11:21:59 2697  WHEN BAD_INVOICE_ID THEN
11:21:59 2698  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2699  	   SPROC_NAME, 'No such invoice');
11:21:59 2700  WHEN OTHERS THEN
11:21:59 2701  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2702  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2703  END GET_GC_ID_BY_PURCH_INVOICE_ID;
11:21:59 2704  
11:21:59 2705  /******************************************************************************/
11:21:59 2706  
11:21:59 2707  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
11:21:59 2708  	 /*in_group_id		      IN NUMBER  -- TODO: should we pass group_id here?*/
11:21:59 2709  	 in_old_fin_instrument_id   IN NUMBER,
11:21:59 2710  	 in_old_fin_instrument_type IN NUMBER,
11:21:59 2711  	 in_new_fin_instrument_id   IN NUMBER,
11:21:59 2712  	 in_new_fin_instrument_type IN NUMBER,
11:21:59 2713  	 in_updated_by		    IN VARCHAR2
11:21:59 2714  ) AS
11:21:59 2715  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
11:21:59 2716  -- variables
11:21:59 2717  temp_out_transaction_id NUMBER;
11:21:59 2718  temp_out_charge_id      NUMBER;
11:21:59 2719  var_accounts_count      NUMBER;
11:21:59 2720  -- EXCEPTIONS
11:21:59 2721  BAD_OLD_CC   EXCEPTION;
11:21:59 2722  BAD_OLD_PP   EXCEPTION;
11:21:59 2723  BAD_OLD_TYPE EXCEPTION;
11:21:59 2724  BAD_NEW_CC   EXCEPTION;
11:21:59 2725  BAD_NEW_PP   EXCEPTION;
11:21:59 2726  BAD_NEW_TYPE EXCEPTION;
11:21:59 2727  DIFFERENT_OWNERS EXCEPTION;
11:21:59 2728  BEGIN
11:21:59 2729  
11:21:59 2730  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 2731  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2732  	     -- throw exception: bad old credit card
11:21:59 2733  	     RAISE BAD_OLD_CC;
11:21:59 2734  	   END IF;
11:21:59 2735  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 2736  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2737  	     -- throw exception: bad old paypal
11:21:59 2738  	     RAISE BAD_OLD_PP;
11:21:59 2739  	   END IF;
11:21:59 2740  	 ELSE
11:21:59 2741  	   -- throw exception: bad instrument type
11:21:59 2742  	   RAISE BAD_OLD_TYPE;
11:21:59 2743  	 END IF;
11:21:59 2744  
11:21:59 2745  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 2746  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2747  	     -- throw exception: bad new credit card
11:21:59 2748  	     RAISE BAD_NEW_CC;
11:21:59 2749  	   END IF;
11:21:59 2750  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 2751  	   IF PROCS_FIN_INSTRUMENTS_V15.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 2752  	     -- throw exception: bad new paypal
11:21:59 2753  	     RAISE BAD_NEW_PP;
11:21:59 2754  	   END IF;
11:21:59 2755  	 ELSE
11:21:59 2756  	   -- throw exception: bad new instrument type
11:21:59 2757  	   RAISE BAD_NEW_TYPE;
11:21:59 2758  	 END IF;
11:21:59 2759  
11:21:59 2760  	 -- Check that owner of both instruments - same man
11:21:59 2761  
11:21:59 2762  	 SELECT count(1) into var_accounts_count FROM (
11:21:59 2763  	   SELECT
11:21:59 2764  	     CC.ACCOUNT_ID
11:21:59 2765  	   FROM
11:21:59 2766  	     CREDIT_CARD CC
11:21:59 2767  	   WHERE
11:21:59 2768  	     (
11:21:59 2769  	       CC.ID = in_old_fin_instrument_id
11:21:59 2770  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:59 2771  	     )
11:21:59 2772  	     OR
11:21:59 2773  	     (
11:21:59 2774  	       CC.ID = in_new_fin_instrument_id
11:21:59 2775  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD
11:21:59 2776  	     )
11:21:59 2777  	   UNION
11:21:59 2778  	   SELECT
11:21:59 2779  	     PP.ACCOUNT_ID
11:21:59 2780  	   FROM
11:21:59 2781  	     PAYPAL PP
11:21:59 2782  	   WHERE
11:21:59 2783  	     (
11:21:59 2784  	       PP.ID = in_old_fin_instrument_id
11:21:59 2785  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
11:21:59 2786  	     )
11:21:59 2787  	     OR
11:21:59 2788  	     (
11:21:59 2789  	       PP.ID = in_new_fin_instrument_id
11:21:59 2790  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL
11:21:59 2791  	     )
11:21:59 2792  	 )
11:21:59 2793  	 WHERE
11:21:59 2794  	   account_id IS NOT NULL;
11:21:59 2795  
11:21:59 2796  	 IF (var_accounts_count > 1) THEN
11:21:59 2797  	   -- Throw exception: different owners of instruments
11:21:59 2798  	   RAISE DIFFERENT_OWNERS;
11:21:59 2799  	 END IF;
11:21:59 2800  
11:21:59 2801  	 FOR f_sub IN (
11:21:59 2802  	   select
11:21:59 2803  	     s.id
11:21:59 2804  	   FROM
11:21:59 2805  	     subscription s
11:21:59 2806  	   WHERE
11:21:59 2807  	     (
11:21:59 2808  	       s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE OR
11:21:59 2809  	       s.subscription_status_id = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:59 2810  	     )
11:21:59 2811  	     AND
11:21:59 2812  	     s.instrument_type_id = in_old_fin_instrument_type AND
11:21:59 2813  	     s.instrument_id = in_old_fin_instrument_id
11:21:59 2814  	 ) LOOP
11:21:59 2815  	   PROCS_SUBSCRIPTION_CRU_V15.UPDATE_SUBSCRIPTION(
11:21:59 2816  	     in_subscription_id => f_sub.id,
11:21:59 2817  	     in_instrument_type_id => in_new_fin_instrument_type,
11:21:59 2818  	     in_instrument_id => in_new_fin_instrument_id,
11:21:59 2819  	     in_updated_by => in_updated_by
11:21:59 2820  	   );
11:21:59 2821  	 END LOOP;
11:21:59 2822  
11:21:59 2823  	 FOR f_open_charge IN (
11:21:59 2824  	   select
11:21:59 2825  	     ch.id,
11:21:59 2826  	     ch.invoice_id,
11:21:59 2827  	     ch.transaction_id,
11:21:59 2828  	     ch.charge_amount
11:21:59 2829  	   FROM
11:21:59 2830  	     charge ch
11:21:59 2831  	   WHERE
11:21:59 2832  	     ch.instrument_type_id = in_old_fin_instrument_type
11:21:59 2833  	     AND ch.instrument_id = in_old_fin_instrument_id
11:21:59 2834  	     AND ch.charge_status_id = GLOBAL_STATUSES_V15.CHARGE_OPENED
11:21:59 2835  	 ) LOOP
11:21:59 2836  
11:21:59 2837  	   FOR f_pending_transaction IN (
11:21:59 2838  	     select
11:21:59 2839  	       id, transaction_amount, order_id, is_refund
11:21:59 2840  	     from
11:21:59 2841  	       transaction
11:21:59 2842  	     where
11:21:59 2843  	       id = f_open_charge.transaction_id
11:21:59 2844  	       and transaction_status_id = GLOBAL_STATUSES_V15.TRANSACTION_PENDING
11:21:59 2845  	   ) LOOP
11:21:59 2846  	     PROCS_TRANSACTION_V15.CREATE_TRANSACTION (
11:21:59 2847  	       in_transaction_id => NULL,
11:21:59 2848  	       in_status_id  => GLOBAL_STATUSES_V15.TRANSACTION_PENDING,
11:21:59 2849  	       in_amount     => f_pending_transaction.transaction_amount,
11:21:59 2850  	       in_created_by => in_updated_by,
11:21:59 2851  	       in_order_id   => null,
11:21:59 2852  	       in_is_refund  => f_pending_transaction.is_refund,
11:21:59 2853  	       out_transaction_id => temp_out_transaction_id
11:21:59 2854  	     );
11:21:59 2855  
11:21:59 2856  	     PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
11:21:59 2857  	       in_transaction_id => f_pending_transaction.id,
11:21:59 2858  	       in_updated_by	 => in_updated_by,
11:21:59 2859  	       in_transaction_status_id  => GLOBAL_STATUSES_V15.TRANSACTION_CLOSED
11:21:59 2860  	     );
11:21:59 2861  
11:21:59 2862  	     -- Create new charge
11:21:59 2863  	     PROCS_CHARGE_V15.CREATE_CHARGE (
11:21:59 2864  	       in_invoice_id	     => f_open_charge.invoice_id,
11:21:59 2865  	       in_transaction_id     => temp_out_transaction_id,
11:21:59 2866  	       in_instrument_type_id => in_new_fin_instrument_type,
11:21:59 2867  	       in_instrument_id      => in_new_fin_instrument_id,
11:21:59 2868  	       in_charge_amount      => f_open_charge.charge_amount,
11:21:59 2869  	       in_created_by	     => in_updated_by,
11:21:59 2870  	       in_charge_status_id   => GLOBAL_STATUSES_V15.CHARGE_OPENED,
11:21:59 2871  	       out_charge_id	     => temp_out_charge_id
11:21:59 2872  	     );
11:21:59 2873  	     -- Cancel old charge
11:21:59 2874  	     PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
11:21:59 2875  	       in_charge_id	   => f_open_charge.id,
11:21:59 2876  	       in_updated_by	   => in_updated_by,
11:21:59 2877  	       in_charge_status_id => GLOBAL_STATUSES_V15.CHARGE_CANCELED
11:21:59 2878  	     );
11:21:59 2879  	   END LOOP;
11:21:59 2880  	 END LOOP;
11:21:59 2881  
11:21:59 2882  EXCEPTION
11:21:59 2883  WHEN BAD_OLD_CC THEN
11:21:59 2884  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2885  	   SPROC_NAME, 'Trying to switch from non existing credit card');
11:21:59 2886  WHEN BAD_OLD_PP THEN
11:21:59 2887  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2888  	   SPROC_NAME, 'Trying to switch from non existing paypal');
11:21:59 2889  WHEN BAD_OLD_TYPE THEN
11:21:59 2890  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2891  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
11:21:59 2892  WHEN BAD_NEW_CC THEN
11:21:59 2893  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2894  	   SPROC_NAME, 'Trying to switch to non existing credit card');
11:21:59 2895  WHEN BAD_NEW_PP THEN
11:21:59 2896  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2897  	   SPROC_NAME, 'Trying to switch to non existing paypal');
11:21:59 2898  WHEN BAD_NEW_TYPE THEN
11:21:59 2899  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 2900  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
11:21:59 2901  WHEN DIFFERENT_OWNERS THEN
11:21:59 2902  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 2903  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
11:21:59 2904  WHEN OTHERS THEN
11:21:59 2905  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 2906  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 2907  END SWITCH_FINANCIAL_INSTRUMENT;
11:21:59 2908  
11:21:59 2909  END PROCS_FIN_INSTRUMENTS_V15;
11:21:59 2910  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.24
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
11:21:59   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:59   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
11:21:59   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:59   7  ) AS
11:21:59   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
11:21:59   9  BEGIN
11:21:59  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_SUBSCRIPTION_SHARE (
11:21:59  11  	  in_id 		=> in_sub_share_id,
11:21:59  12  	  in_needs_entitlements => in_need_entitlements,
11:21:59  13  	  in_updated_by 	=> in_updater
11:21:59  14  	);
11:21:59  15  END UPDATE_SS_NEED_ENTITLEMENTS;
11:21:59  16  
11:21:59  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
11:21:59  18  	out_result_set OUT SYS_REFCURSOR
11:21:59  19  ) AS
11:21:59  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
11:21:59  21  BEGIN
11:21:59  22  	OPEN out_result_set FOR
11:21:59  23  	SELECT * FROM (
11:21:59  24  	  SELECT DISTINCT
11:21:59  25  	    ga.Subscription_Id,
11:21:59  26  	    A.Group_Id Borrower_Group_Id,
11:21:59  27  	    L.Offer_Id,
11:21:59  28  	    ss.id Subscription_Share_id
11:21:59  29  	  FROM
11:21:59  30  	    Subscription_Share Ss,
11:21:59  31  	    Group_Account Ga,
11:21:59  32  	    Account A,
11:21:59  33  	    License l
11:21:59  34  	  WHERE
11:21:59  35  	    Ss.Group_Account_Id        = ga.id
11:21:59  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V15.TRUE
11:21:59  37  	    AND Ss.Borrower_Account_Id = A.Id
11:21:59  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
11:21:59  39  	    AND ROWNUM <= 5000
11:21:59  40  	  ORDER BY dbms_random.value
11:21:59  41  ) WHERE
11:21:59  42  	ROWNUM <= 1000;
11:21:59  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
11:21:59  44  
11:21:59  45  PROCEDURE EXPIRE_SUB_SHARE(
11:21:59  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:59  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:59  48  ) AS
11:21:59  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
11:21:59  50  BEGIN
11:21:59  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_SUBSCRIPTION_SHARE (
11:21:59  52  	  in_id 	=> in_sub_share_id,
11:21:59  53  	  in_end_date	=> SYSDATE,
11:21:59  54  	  in_updated_by => in_updater,
11:21:59  55  	  in_needs_entitlements => 1
11:21:59  56  	);
11:21:59  57  END EXPIRE_SUB_SHARE;
11:21:59  58  
11:21:59  59  PROCEDURE EXPIRE_ALL_SHARES (
11:21:59  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
11:21:59  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:59  62  ) AS
11:21:59  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
11:21:59  64  BEGIN
11:21:59  65  	UPDATE SUBSCRIPTION_SHARE SET
11:21:59  66  	  END_DATE = SYSDATE,
11:21:59  67  	  UPDATED_BY = in_updated_by,
11:21:59  68  	  UPDATE_DATE = SYSDATE
11:21:59  69  	WHERE
11:21:59  70  	  GROUP_ACCOUNT_ID = in_group_account_id
11:21:59  71  	AND
11:21:59  72  	  SYSDATE < END_DATE;
11:21:59  73  EXCEPTION
11:21:59  74  	WHEN OTHERS THEN
11:21:59  75  	  PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
11:21:59  77  END EXPIRE_ALL_SHARES;
11:21:59  78  
11:21:59  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
11:21:59  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
11:21:59  81  	in_start	 IN  NUMBER,
11:21:59  82  	in_end		 IN  NUMBER,
11:21:59  83  	in_expired	 IN  NUMBER,
11:21:59  84  	out_result_set	 OUT SYS_REFCURSOR,
11:21:59  85  	out_shares_count OUT NUMBER
11:21:59  86  ) AS
11:21:59  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
11:21:59  88  range_diff NUMBER := 0;
11:21:59  89  upper_bond_diff NUMBER := 0;
11:21:59  90  l_start NUMBER := 0;
11:21:59  91  l_end   NUMBER := 0;
11:21:59  92  BEGIN
11:21:59  93  	--Normalize the end points [START]
11:21:59  94  	IF (in_start IS NULL OR in_start < 0) Then
11:21:59  95  	  l_start := 0;
11:21:59  96  	ELSE
11:21:59  97  	  l_start := in_start;
11:21:59  98  	END IF;
11:21:59  99  
11:21:59 100  	IF (in_end IS NULL) Then
11:21:59 101  	  l_end := 11;
11:21:59 102  	ELSE
11:21:59 103  	  l_end := in_end;
11:21:59 104  	END IF;
11:21:59 105  
11:21:59 106  	l_start := l_start + 1;
11:21:59 107  	l_end	:= l_end   + 1;
11:21:59 108  
11:21:59 109  	range_diff := l_end - l_start;
11:21:59 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
11:21:59 111  
11:21:59 112  	IF (upper_bond_diff > 0) Then
11:21:59 113  	  l_end := l_end - upper_bond_diff;
11:21:59 114  	END IF;
11:21:59 115  	--Normalize the end points [END]
11:21:59 116  
11:21:59 117  	BEGIN
11:21:59 118  	  SELECT
11:21:59 119  	    COUNT(1) INTO out_shares_count
11:21:59 120  	  FROM
11:21:59 121  	    GROUP_ACCOUNT ga,
11:21:59 122  	    SUBSCRIPTION_SHARE ss,
11:21:59 123  	    ACCOUNT a
11:21:59 124  	  WHERE
11:21:59 125  	    a.GROUP_ID		= in_group_id AND
11:21:59 126  	    a.Id		= ss.borrower_account_id And
11:21:59 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
11:21:59 128  	END;
11:21:59 129  
11:21:59 130  	IF in_expired > 0 THEN
11:21:59 131  	BEGIN
11:21:59 132  	    OPEN out_result_set FOR
11:21:59 133  	    SELECT
11:21:59 134  	      *
11:21:59 135  	    FROM
11:21:59 136  	      (SELECT rownum rnum, q.*
11:21:59 137  	       FROM
11:21:59 138  		(SELECT
11:21:59 139  		   ga.SUBSCRIPTION_ID,
11:21:59 140  		   ss.START_DATE,
11:21:59 141  		   ss.END_DATE,
11:21:59 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
11:21:59 143  		 FROM
11:21:59 144  		   GROUP_ACCOUNT ga,
11:21:59 145  		   SUBSCRIPTION_SHARE ss,
11:21:59 146  		   ACCOUNT a,
11:21:59 147  		   SUBSCRIPTION s,
11:21:59 148  		   ACCOUNT a2
11:21:59 149  		 WHERE
11:21:59 150  		   a.GROUP_ID	       = in_group_id AND
11:21:59 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
11:21:59 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
11:21:59 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
11:21:59 154  		   s.ACCOUNT_ID        = a2.ID
11:21:59 155  		) Q
11:21:59 156  	      WHERE rownum <= l_end)
11:21:59 157  	    WHERE rnum >= l_Start;
11:21:59 158  	END;
11:21:59 159  	ELSE
11:21:59 160  	BEGIN
11:21:59 161  	    OPEN out_result_set FOR
11:21:59 162  	    SELECT
11:21:59 163  	      *
11:21:59 164  	    FROM
11:21:59 165  	      (SELECT rownum rnum, q.*
11:21:59 166  	       FROM
11:21:59 167  		(SELECT
11:21:59 168  		   ga.SUBSCRIPTION_ID,
11:21:59 169  		   ss.START_DATE,
11:21:59 170  		   ss.END_DATE,
11:21:59 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
11:21:59 172  		 FROM
11:21:59 173  		   GROUP_ACCOUNT ga,
11:21:59 174  		   SUBSCRIPTION_SHARE ss,
11:21:59 175  		   ACCOUNT a,
11:21:59 176  		   SUBSCRIPTION s,
11:21:59 177  		   ACCOUNT a2
11:21:59 178  		 WHERE
11:21:59 179  		   a.GROUP_ID	       = in_group_id AND
11:21:59 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
11:21:59 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
11:21:59 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
11:21:59 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
11:21:59 184  		   s.ACCOUNT_ID        = a2.ID
11:21:59 185  		) Q
11:21:59 186  	      WHERE rownum <= l_end)
11:21:59 187  	    WHERE rnum >= l_start;
11:21:59 188  	  END;
11:21:59 189  	END IF;
11:21:59 190  EXCEPTION
11:21:59 191  WHEN NO_DATA_FOUND THEN
11:21:59 192  	NULL;
11:21:59 193  WHEN OTHERS THEN
11:21:59 194  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
11:21:59 196  END SUB_SHARE_BY_GROUP_ID;
11:21:59 197  
11:21:59 198  PROCEDURE IS_VALID_IP_ADDRESS (
11:21:59 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:59 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:59 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:59 202  	out_is_valid	    OUT NUMBER
11:21:59 203  ) AS
11:21:59 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
11:21:59 205  BEGIN
11:21:59 206  	SELECT
11:21:59 207  	  COUNT(1) INTO out_is_valid
11:21:59 208  	FROM
11:21:59 209  	  GROUP_ACCOUNT_IP_RANGE,
11:21:59 210  	  GROUP_ACCOUNT,
11:21:59 211  	  SUBSCRIPTION,
11:21:59 212  	  OFFER_CHAIN
11:21:59 213  	WHERE
11:21:59 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
11:21:59 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
11:21:59 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
11:21:59 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
11:21:59 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 219  	 (
11:21:59 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
11:21:59 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
11:21:59 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
11:21:59 223  	 ) AND
11:21:59 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE;
11:21:59 225  EXCEPTION
11:21:59 226  WHEN OTHERS THEN
11:21:59 227  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
11:21:59 229  END IS_VALID_IP_ADDRESS;
11:21:59 230  
11:21:59 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
11:21:59 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:59 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:59 234  	out_is_valid	    OUT NUMBER
11:21:59 235  ) AS
11:21:59 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
11:21:59 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
11:21:59 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
11:21:59 239  BEGIN
11:21:59 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
11:21:59 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
11:21:59 242  
11:21:59 243  	SELECT
11:21:59 244  	  COUNT(1) INTO out_is_valid
11:21:59 245  	FROM
11:21:59 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
11:21:59 247  	  GROUP_ACCOUNT ga,
11:21:59 248  	  SUBSCRIPTION s,
11:21:59 249  	  OFFER_CHAIN oc
11:21:59 250  	WHERE
11:21:59 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
11:21:59 252  	  ga.SUBSCRIPTION_ID = s.ID AND
11:21:59 253  	  s.OFFER_CHAIN_ID = oc.ID AND
11:21:59 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
11:21:59 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
11:21:59 257  	  gaed.IS_ACTIVE = 1;
11:21:59 258  EXCEPTION
11:21:59 259  WHEN OTHERS THEN
11:21:59 260  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
11:21:59 262  END IS_VALID_EMAIL_DOMAIN;
11:21:59 263  
11:21:59 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
11:21:59 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
11:21:59 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
11:21:59 267  	out_Result_Set	       OUT Sys_Refcursor
11:21:59 268  ) AS
11:21:59 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
11:21:59 270  BEGIN
11:21:59 271  	BEGIN
11:21:59 272  	   OPEN out_result_set FOR
11:21:59 273  	   SELECT
11:21:59 274  	      ss.ID,
11:21:59 275  	      ss.GROUP_ACCOUNT_ID,
11:21:59 276  	      ss.BORROWER_ACCOUNT_ID,
11:21:59 277  	      ss.IP_ADDRESS,
11:21:59 278  	      ss.START_DATE,
11:21:59 279  	      ss.END_DATE,
11:21:59 280  	      ss.CREATED_BY,
11:21:59 281  	      ss.CREATE_DATE,
11:21:59 282  	      ss.UPDATED_BY,
11:21:59 283  	      ss.UPDATE_DATE,
11:21:59 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
11:21:59 285  	   FROM
11:21:59 286  	     SUBSCRIPTION_SHARE ss,
11:21:59 287  	     ACCOUNT a
11:21:59 288  	   WHERE
11:21:59 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
11:21:59 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
11:21:59 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
11:21:59 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
11:21:59 293  	END;
11:21:59 294  EXCEPTION
11:21:59 295  WHEN OTHERS THEN
11:21:59 296  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
11:21:59 298  END GET_SUBSCRIPTION_SHARE;
11:21:59 299  
11:21:59 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
11:21:59 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
11:21:59 302  	out_result_set	   OUT SYS_REFCURSOR
11:21:59 303  ) As
11:21:59 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
11:21:59 305  BEGIN
11:21:59 306  OPEN out_result_set FOR
11:21:59 307  	SELECT
11:21:59 308  	  ID,
11:21:59 309  	  SUBSCRIPTION_ID,
11:21:59 310  	  GROUP_NAME,
11:21:59 311  	  FIRST_NAME,
11:21:59 312  	  LAST_NAME,
11:21:59 313  	  EMAIL,
11:21:59 314  	  PHONE,
11:21:59 315  	  ORGANIZATION_TYPE,
11:21:59 316  	  SEATS,
11:21:59 317  	  SEAT_TTL_IN_HOURS,
11:21:59 318  	  CREATE_DATE,
11:21:59 319  	  CREATED_BY,
11:21:59 320  	  UPDATE_DATE,
11:21:59 321  	  UPDATED_BY
11:21:59 322  	FROM
11:21:59 323  	  GROUP_ACCOUNT
11:21:59 324  	Where
11:21:59 325  	  Subscription_Id = in_subscription_id;
11:21:59 326  EXCEPTION
11:21:59 327  WHEN OTHERS THEN
11:21:59 328  	Procs_Common_V15.Throw_Exception(APP_EXCEPTION_CODES_V15.Unknown_Error,
11:21:59 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 330  
11:21:59 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
11:21:59 332  
11:21:59 333  PROCEDURE CREATE_GROUP_ACCOUNT (
11:21:59 334  	in_subscription_id	 IN NUMBER,
11:21:59 335  	in_group_name		 IN VARCHAR2,
11:21:59 336  	in_first_name		 IN VARCHAR2,
11:21:59 337  	in_last_name		 IN VARCHAR2,
11:21:59 338  	in_email		 IN VARCHAR2,
11:21:59 339  	in_phone		 IN VARCHAR2,
11:21:59 340  	in_organization_type	 IN VARCHAR2,
11:21:59 341  	in_seats		 IN NUMBER,
11:21:59 342  	in_seat_ttl_in_hours	 IN NUMBER,
11:21:59 343  	in_ip			 IN NUMBER,
11:21:59 344  	in_created_by		 IN VARCHAR2
11:21:59 345  ) AS
11:21:59 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
11:21:59 347  BEGIN
11:21:59 348  
11:21:59 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.CREATE_GROUP_ACCOUNT(
11:21:59 350  	  in_subscription_id => in_subscription_id,
11:21:59 351  	  in_group_name => in_group_name,
11:21:59 352  	  in_first_name => in_first_name,
11:21:59 353  	  in_last_name => in_last_name,
11:21:59 354  	  in_email => in_email,
11:21:59 355  	  in_phone => in_phone,
11:21:59 356  	  in_organization_type => in_organization_type,
11:21:59 357  	  in_seats => in_seats,
11:21:59 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
11:21:59 359  	  in_ip => in_ip,
11:21:59 360  	  in_created_by => in_created_by
11:21:59 361  	);
11:21:59 362  
11:21:59 363  END CREATE_GROUP_ACCOUNT;
11:21:59 364  
11:21:59 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
11:21:59 366  	in_group_account_id IN NUMBER,
11:21:59 367  	in_start	    IN NUMBER,
11:21:59 368  	in_end		    IN NUMBER,
11:21:59 369  	out_Result_Set	    OUT Sys_Refcursor
11:21:59 370  ) AS
11:21:59 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
11:21:59 372  range_diff NUMBER := 0;
11:21:59 373  upper_bond_diff NUMBER := 0;
11:21:59 374  l_start NUMBER := 0;
11:21:59 375  l_end   NUMBER := 0;
11:21:59 376  BEGIN
11:21:59 377  	-- Normalize the end points [START]
11:21:59 378  	IF (in_start IS NULL OR in_start < 0) Then
11:21:59 379  	  l_start := 0;
11:21:59 380  	ELSE
11:21:59 381  	  l_start := in_start;
11:21:59 382  	END IF;
11:21:59 383  
11:21:59 384  	IF (in_end IS NULL) Then
11:21:59 385  	  l_end := 11;
11:21:59 386  	ELSE
11:21:59 387  	  l_end := in_end;
11:21:59 388  	END IF;
11:21:59 389  
11:21:59 390  	l_start := l_start + 1;
11:21:59 391  	l_end	:= l_end   + 1;
11:21:59 392  
11:21:59 393  	range_diff := l_end - l_start;
11:21:59 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
11:21:59 395  
11:21:59 396  	IF (upper_bond_diff > 0) Then
11:21:59 397  	  l_end := l_end - upper_bond_diff;
11:21:59 398  	END IF;
11:21:59 399  	-- Normalize the end points [END]
11:21:59 400  
11:21:59 401  	BEGIN
11:21:59 402  	   OPEN out_result_set FOR
11:21:59 403  	   SELECT *
11:21:59 404  	   FROM
11:21:59 405  	     (SELECT rownum rnum, Q.*
11:21:59 406  	      FROM
11:21:59 407  	       (SELECT
11:21:59 408  		  ss.ID,
11:21:59 409  		  ss.GROUP_ACCOUNT_ID,
11:21:59 410  		  ss.BORROWER_ACCOUNT_ID,
11:21:59 411  		  ss.IP_ADDRESS,
11:21:59 412  		  ss.START_DATE,
11:21:59 413  		  ss.END_DATE,
11:21:59 414  		  ss.CREATED_BY,
11:21:59 415  		  ss.CREATE_DATE,
11:21:59 416  		  ss.UPDATED_BY,
11:21:59 417  		  ss.UPDATE_DATE,
11:21:59 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
11:21:59 419  		FROM
11:21:59 420  		  SUBSCRIPTION_SHARE ss,
11:21:59 421  		  ACCOUNT a,
11:21:59 422  		  LICENSE l,
11:21:59 423  		  GROUP_ACCOUNT ga
11:21:59 424  		WHERE
11:21:59 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
11:21:59 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
11:21:59 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
11:21:59 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
11:21:59 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
11:21:59 431  	      ) Q
11:21:59 432  	    WHERE rownum <= l_end)
11:21:59 433  	  WHERE rnum >= l_start;
11:21:59 434  	END;
11:21:59 435  EXCEPTION
11:21:59 436  WHEN OTHERS THEN
11:21:59 437  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
11:21:59 439  END GET_SUBSCRIPTION_SHARES;
11:21:59 440  
11:21:59 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
11:21:59 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:59 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:59 444  	out_result_set	      OUT SYS_REFCURSOR
11:21:59 445  ) AS
11:21:59 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
11:21:59 447  BEGIN
11:21:59 448  	BEGIN
11:21:59 449  	  OPEN out_result_set FOR
11:21:59 450  	  SELECT
11:21:59 451  	    ID,
11:21:59 452  	    SUBSCRIPTION_ID,
11:21:59 453  	    GROUP_NAME,
11:21:59 454  	    FIRST_NAME,
11:21:59 455  	    LAST_NAME,
11:21:59 456  	    EMAIL,
11:21:59 457  	    PHONE,
11:21:59 458  	    ORGANIZATION_TYPE,
11:21:59 459  	    SEATS,
11:21:59 460  	    SEAT_TTL_IN_HOURS,
11:21:59 461  	    CREATE_DATE,
11:21:59 462  	    CREATED_BY,
11:21:59 463  	    UPDATE_DATE,
11:21:59 464  	    UPDATED_BY
11:21:59 465  	  FROM
11:21:59 466  	    GROUP_ACCOUNT
11:21:59 467  	  WHERE
11:21:59 468  	    ID IN (
11:21:59 469  	      SELECT
11:21:59 470  		GROUP_ACCOUNT_ID
11:21:59 471  	      FROM
11:21:59 472  		GROUP_ACCOUNT_IP_RANGE,
11:21:59 473  		GROUP_ACCOUNT,
11:21:59 474  		SUBSCRIPTION,
11:21:59 475  		OFFER_CHAIN
11:21:59 476  	      WHERE
11:21:59 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
11:21:59 478  	      AND
11:21:59 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
11:21:59 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
11:21:59 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
11:21:59 482  	      AND
11:21:59 483  		(
11:21:59 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
11:21:59 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
11:21:59 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
11:21:59 487  		)
11:21:59 488  	      AND
11:21:59 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE
11:21:59 490  	    );
11:21:59 491  	  END;
11:21:59 492  EXCEPTION
11:21:59 493  WHEN OTHERS THEN
11:21:59 494  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 496  END GET_GROUP_ACCOUNT_BY_IP;
11:21:59 497  
11:21:59 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
11:21:59 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:59 500  	out_result_set	    OUT SYS_REFCURSOR
11:21:59 501  ) AS
11:21:59 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
11:21:59 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
11:21:59 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
11:21:59 505  BEGIN
11:21:59 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
11:21:59 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
11:21:59 508  	BEGIN
11:21:59 509  	  OPEN out_result_set FOR
11:21:59 510  	  SELECT
11:21:59 511  	    ID,
11:21:59 512  	    SUBSCRIPTION_ID,
11:21:59 513  	    GROUP_NAME,
11:21:59 514  	    FIRST_NAME,
11:21:59 515  	    LAST_NAME,
11:21:59 516  	    EMAIL,
11:21:59 517  	    PHONE,
11:21:59 518  	    ORGANIZATION_TYPE,
11:21:59 519  	    SEATS,
11:21:59 520  	    SEAT_TTL_IN_HOURS,
11:21:59 521  	    CREATE_DATE,
11:21:59 522  	    CREATED_BY,
11:21:59 523  	    UPDATE_DATE,
11:21:59 524  	    UPDATED_BY
11:21:59 525  	  FROM
11:21:59 526  	    GROUP_ACCOUNT
11:21:59 527  	  WHERE
11:21:59 528  	    ID IN (
11:21:59 529  	      SELECT
11:21:59 530  		GROUP_ACCOUNT_ID
11:21:59 531  	      FROM
11:21:59 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
11:21:59 533  		GROUP_ACCOUNT ga,
11:21:59 534  		SUBSCRIPTION s,
11:21:59 535  		OFFER_CHAIN oc
11:21:59 536  	      WHERE
11:21:59 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
11:21:59 538  		ga.SUBSCRIPTION_ID = s.ID AND
11:21:59 539  		s.OFFER_CHAIN_ID = oc.ID AND
11:21:59 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
11:21:59 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
11:21:59 542  		gaed.IS_ACTIVE = 1
11:21:59 543  	    );
11:21:59 544  	  END;
11:21:59 545  EXCEPTION
11:21:59 546  WHEN OTHERS THEN
11:21:59 547  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
11:21:59 550  
11:21:59 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
11:21:59 552  	in_group_account_id   IN NUMBER,
11:21:59 553  	in_start	      IN NUMBER,
11:21:59 554  	in_end		      IN NUMBER,
11:21:59 555  	in_status	      IN NUMBER,
11:21:59 556  	out_record_count      OUT NUMBER,
11:21:59 557  	out_result_set	      OUT SYS_REFCURSOR
11:21:59 558  ) AS
11:21:59 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
11:21:59 560  range_diff NUMBER := 0;
11:21:59 561  upper_bond_diff NUMBER := 0;
11:21:59 562  l_start NUMBER := 0;
11:21:59 563  l_end   NUMBER := 0;
11:21:59 564  BEGIN
11:21:59 565  	--Normalize the end points [START]
11:21:59 566  	IF (in_start IS NULL OR in_start < 0) Then
11:21:59 567  	  l_start := 0;
11:21:59 568  	ELSE
11:21:59 569  	  l_start := in_start;
11:21:59 570  	END IF;
11:21:59 571  
11:21:59 572  	IF (in_end IS NULL) Then
11:21:59 573  	  l_end := 11;
11:21:59 574  	ELSE
11:21:59 575  	  l_end := in_end;
11:21:59 576  	END IF;
11:21:59 577  
11:21:59 578  	l_start := l_start + 1;
11:21:59 579  	l_end	:= l_end   + 1;
11:21:59 580  
11:21:59 581  	range_diff := l_end - l_start;
11:21:59 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
11:21:59 583  
11:21:59 584  	IF (upper_bond_diff > 0) Then
11:21:59 585  	  l_end := l_end - upper_bond_diff;
11:21:59 586  	END IF;
11:21:59 587  	--Normalize the end points [END]
11:21:59 588  
11:21:59 589  	--Total count of records [START]
11:21:59 590  	SELECT
11:21:59 591  	  COUNT(1) INTO out_record_count
11:21:59 592  	FROM
11:21:59 593  	  GROUP_ACCOUNT_IP_RANGE
11:21:59 594  	WHERE
11:21:59 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
11:21:59 597  	--Total count of records [END]
11:21:59 598  
11:21:59 599  	OPEN out_result_set FOR
11:21:59 600  	SELECT
11:21:59 601  	  *
11:21:59 602  	FROM
11:21:59 603  	  (SELECT rownum rnum, q.*
11:21:59 604  	   FROM
11:21:59 605  	    (SELECT
11:21:59 606  	       ID,
11:21:59 607  	       GROUP_ACCOUNT_ID,
11:21:59 608  	       MINIMUM_IP_STRING,
11:21:59 609  	       MAXIMUM_IP_STRING,
11:21:59 610  	       GROUP_ACC_IP_RNG_STATUS_ID
11:21:59 611  	     FROM
11:21:59 612  	       GROUP_ACCOUNT_IP_RANGE
11:21:59 613  	     WHERE
11:21:59 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 615  	       (in_status IS NULL OR
11:21:59 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
11:21:59 617  	    ) Q
11:21:59 618  	  WHERE rownum <= l_end)
11:21:59 619  	WHERE rnum >= l_Start;
11:21:59 620  EXCEPTION
11:21:59 621  WHEN OTHERS THEN
11:21:59 622  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
11:21:59 624  END GET_GROUP_ACCOUNT_IP_RANGES;
11:21:59 625  
11:21:59 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
11:21:59 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:59 628  	in_start	      IN NUMBER,
11:21:59 629  	in_end		      IN NUMBER,
11:21:59 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
11:21:59 631  	out_record_count      OUT NUMBER,
11:21:59 632  	out_result_set	      OUT SYS_REFCURSOR
11:21:59 633  ) AS
11:21:59 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
11:21:59 635  range_diff NUMBER := 0;
11:21:59 636  upper_bond_diff NUMBER := 0;
11:21:59 637  l_start NUMBER := 0;
11:21:59 638  l_end   NUMBER := 0;
11:21:59 639  BEGIN
11:21:59 640  	--Normalize the end points [START]
11:21:59 641  	IF (in_start IS NULL OR in_start < 0) Then
11:21:59 642  	  l_start := 0;
11:21:59 643  	ELSE
11:21:59 644  	  l_start := in_start;
11:21:59 645  	END IF;
11:21:59 646  
11:21:59 647  	IF (in_end IS NULL) Then
11:21:59 648  	  l_end := 11;
11:21:59 649  	ELSE
11:21:59 650  	  l_end := in_end;
11:21:59 651  	END IF;
11:21:59 652  
11:21:59 653  	l_start := l_start + 1;
11:21:59 654  	l_end	:= l_end   + 1;
11:21:59 655  
11:21:59 656  	range_diff := l_end - l_start;
11:21:59 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V15.MAX_RETURN_COUNT;
11:21:59 658  
11:21:59 659  	IF (upper_bond_diff > 0) Then
11:21:59 660  	  l_end := l_end - upper_bond_diff;
11:21:59 661  	END IF;
11:21:59 662  	--Normalize the end points [END]
11:21:59 663  
11:21:59 664  	--Total count of records [START]
11:21:59 665  	SELECT
11:21:59 666  	  COUNT(1) INTO out_record_count
11:21:59 667  	FROM
11:21:59 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
11:21:59 669  	WHERE
11:21:59 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
11:21:59 672  	--Total count of records [END]
11:21:59 673  
11:21:59 674  	OPEN out_result_set FOR
11:21:59 675  	SELECT
11:21:59 676  	  *
11:21:59 677  	FROM
11:21:59 678  	  (SELECT rownum rnum, q.*
11:21:59 679  	   FROM
11:21:59 680  	    (SELECT
11:21:59 681  	      ID,
11:21:59 682  	      GROUP_ACCOUNT_ID,
11:21:59 683  	      EMAIL_DOMAIN,
11:21:59 684  	      IS_ACTIVE
11:21:59 685  	     FROM
11:21:59 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
11:21:59 687  	     WHERE
11:21:59 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 689  	       (in_status IS NULL OR
11:21:59 690  		IS_ACTIVE = in_status)
11:21:59 691  	    ) Q
11:21:59 692  	  WHERE rownum <= l_end)
11:21:59 693  	WHERE rnum >= l_Start;
11:21:59 694  
11:21:59 695  EXCEPTION
11:21:59 696  WHEN OTHERS THEN
11:21:59 697  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
11:21:59 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
11:21:59 700  
11:21:59 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
11:21:59 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:59 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:59 704  ) AS
11:21:59 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
11:21:59 706  BEGIN
11:21:59 707  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
11:21:59 708  	    in_group_account_id => in_group_account_id,
11:21:59 709  	    in_updated_by => in_updated_by
11:21:59 710  	  );
11:21:59 711  EXCEPTION
11:21:59 712  WHEN OTHERS THEN
11:21:59 713  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
11:21:59 716  
11:21:59 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
11:21:59 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
11:21:59 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
11:21:59 720  ) AS
11:21:59 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
11:21:59 722  BEGIN
11:21:59 723  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_EMAIL_DOMAIN_BY_ID(
11:21:59 724  	    in_id => in_id,
11:21:59 725  	    in_updated_by => in_updated_by
11:21:59 726  	  );
11:21:59 727  EXCEPTION
11:21:59 728  WHEN OTHERS THEN
11:21:59 729  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
11:21:59 732  
11:21:59 733  PROCEDURE ADD_EMAIL_DOMAIN (
11:21:59 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
11:21:59 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
11:21:59 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
11:21:59 737  ) AS
11:21:59 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
11:21:59 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
11:21:59 740  var_is_dupe NUMBER(1);
11:21:59 741  var_group_account_count NUMBER := 0;
11:21:59 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
11:21:59 743  NOT_GL EXCEPTION;
11:21:59 744  DUPE EXCEPTION;
11:21:59 745  BEGIN
11:21:59 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
11:21:59 747  	  FROM
11:21:59 748  	    GROUP_ACCOUNT,
11:21:59 749  	    SUBSCRIPTION,
11:21:59 750  	    OFFER_CHAIN
11:21:59 751  	  WHERE
11:21:59 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
11:21:59 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
11:21:59 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 755  	  ;
11:21:59 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
11:21:59 757  	    RAISE NOT_GL;
11:21:59 758  	  END IF;
11:21:59 759  
11:21:59 760  	  --check if email domain already exists
11:21:59 761  	  SELECT count(1) into var_group_account_count
11:21:59 762  	  FROM
11:21:59 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
11:21:59 764  	  WHERE
11:21:59 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
11:21:59 766  	      EMAIL_DOMAIN = in_email_domain
11:21:59 767  	  ;
11:21:59 768  
11:21:59 769  	  IF(var_group_account_count > 0) THEN
11:21:59 770  	      SELECT ID into var_id
11:21:59 771  	      FROM
11:21:59 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
11:21:59 773  	      WHERE
11:21:59 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
11:21:59 775  		  EMAIL_DOMAIN = in_email_domain AND
11:21:59 776  		  rownum <= 1;
11:21:59 777  	      PROCS_GROUP_ACCOUNT_CRU_V15.ENABLE_EMAIL_DOMAIN_BY_ID(
11:21:59 778  		  in_id => var_id,
11:21:59 779  		  in_updated_by => in_created_by
11:21:59 780  		  );
11:21:59 781  	  ELSE
11:21:59 782  	      PROCS_GROUP_ACCOUNT_CRU_V15.ADD_EMAIL_DOMAIN(
11:21:59 783  		  in_group_account_id => in_group_account_id,
11:21:59 784  		  in_email_domain => in_email_domain,
11:21:59 785  		      in_is_active => GLOBAL_STATUSES_V15.GROUP_ACC_EMAIL_DOMAIN_ACT,
11:21:59 786  		  in_created_by => in_created_by
11:21:59 787  	      );
11:21:59 788  	  END IF;
11:21:59 789  
11:21:59 790  EXCEPTION
11:21:59 791  WHEN NOT_GL THEN
11:21:59 792  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
11:21:59 794  WHEN OTHERS THEN
11:21:59 795  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 797  END ADD_EMAIL_DOMAIN;
11:21:59 798  
11:21:59 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
11:21:59 800  	in_group_account_id    IN NUMBER,
11:21:59 801  	in_borrower_account_id IN NUMBER,
11:21:59 802  	in_ip_address	       IN VARCHAR2,
11:21:59 803  	in_email_domain        IN VARCHAR2,
11:21:59 804  	in_created_by	       IN VARCHAR2
11:21:59 805  ) AS
11:21:59 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
11:21:59 807  ga_ttl_in_hours NUMBER := NULL;
11:21:59 808  start_date DATE := NULL;
11:21:59 809  end_date DATE := NULL;
11:21:59 810  BEGIN
11:21:59 811  	start_date := sysdate;
11:21:59 812  	end_date   := GLOBAL_CONSTANTS_V15.MAX_DATE;
11:21:59 813  
11:21:59 814  	BEGIN
11:21:59 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
11:21:59 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
11:21:59 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
11:21:59 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
11:21:59 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
11:21:59 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
11:21:59 821  	EXCEPTION
11:21:59 822  	  WHEN no_data_found THEN
11:21:59 823  	    ga_ttl_in_hours := NULL;
11:21:59 824  	END;
11:21:59 825  
11:21:59 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
11:21:59 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
11:21:59 828  	END IF;
11:21:59 829  
11:21:59 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15.CREATE_SUBSCRIPTION_SHARE(
11:21:59 831  	  in_group_account_id => in_group_account_id,
11:21:59 832  	  in_borrower_account_id => in_borrower_account_id,
11:21:59 833  	  in_ip_address => in_ip_address,
11:21:59 834  	  in_email_domain => in_email_domain,
11:21:59 835  	  in_start_date => start_date,
11:21:59 836  	  in_end_date => end_date,
11:21:59 837  	  in_created_by => in_created_by
11:21:59 838  	);
11:21:59 839  END CREATE_SUBSCRIPTION_SHARE;
11:21:59 840  
11:21:59 841  
11:21:59 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
11:21:59 843  	in_group_account_id   IN NUMBER,
11:21:59 844  	out_occupied_seats   OUT NUMBER
11:21:59 845  ) AS
11:21:59 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
11:21:59 847  BEGIN
11:21:59 848  	SELECT
11:21:59 849  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
11:21:59 850  	FROM dual;
11:21:59 851  EXCEPTION
11:21:59 852  WHEN OTHERS THEN
11:21:59 853  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
11:21:59 856  
11:21:59 857  
11:21:59 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
11:21:59 859  	in_group_account_id   IN NUMBER
11:21:59 860  ) RETURN NUMBER IS
11:21:59 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
11:21:59 862  num_seats NUMBER;
11:21:59 863  BEGIN
11:21:59 864  	SELECT
11:21:59 865  	  COUNT(1) INTO num_seats
11:21:59 866  	FROM
11:21:59 867  	  SUBSCRIPTION_SHARE
11:21:59 868  	WHERE
11:21:59 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
11:21:59 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
11:21:59 871  	RETURN num_seats;
11:21:59 872  EXCEPTION
11:21:59 873  WHEN OTHERS THEN
11:21:59 874  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
11:21:59 877  
11:21:59 878  -- *********************************************************************
11:21:59 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
11:21:59 880  -- *********************************************************************
11:21:59 881  -- I'm debating if this should be in a different package, but right now
11:21:59 882  -- I'm too lazy to move this else where.
11:21:59 883  -- *********************************************************************
11:21:59 884  
11:21:59 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
11:21:59 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:59 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:59 888  ) AS
11:21:59 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
11:21:59 890  BEGIN
11:21:59 891  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_IP_RANGES_BY_GA_ID(
11:21:59 892  	    in_group_account_id => in_group_account_id,
11:21:59 893  	    in_updated_by => in_updated_by
11:21:59 894  	  );
11:21:59 895  EXCEPTION
11:21:59 896  WHEN OTHERS THEN
11:21:59 897  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 899  END DISABLE_IP_RANGES_BY_GA_ID;
11:21:59 900  
11:21:59 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
11:21:59 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
11:21:59 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
11:21:59 904  ) AS
11:21:59 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
11:21:59 906  BEGIN
11:21:59 907  	  PROCS_GROUP_ACCOUNT_CRU_V15.DISABLE_IP_RANGE_BY_ID(
11:21:59 908  	    in_id => in_id,
11:21:59 909  	    in_updated_by => in_updated_by
11:21:59 910  	  );
11:21:59 911  EXCEPTION
11:21:59 912  WHEN OTHERS THEN
11:21:59 913  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 915  END DISABLE_IP_RANGE_BY_ID;
11:21:59 916  
11:21:59 917  PROCEDURE ADD_IP_RANGE (
11:21:59 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
11:21:59 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
11:21:59 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
11:21:59 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
11:21:59 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
11:21:59 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
11:21:59 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
11:21:59 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
11:21:59 926  ) AS
11:21:59 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
11:21:59 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
11:21:59 929  var_is_dupe NUMBER(1);
11:21:59 930  NOT_GL EXCEPTION;
11:21:59 931  DUPE EXCEPTION;
11:21:59 932  BEGIN
11:21:59 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
11:21:59 934  	  FROM
11:21:59 935  	    GROUP_ACCOUNT,
11:21:59 936  	    SUBSCRIPTION,
11:21:59 937  	    OFFER_CHAIN
11:21:59 938  	  WHERE
11:21:59 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
11:21:59 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
11:21:59 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 942  	  ;
11:21:59 943  	  IF(var_ga_type != 'GL') THEN
11:21:59 944  	    RAISE NOT_GL;
11:21:59 945  	  END IF;
11:21:59 946  
11:21:59 947  	  PROCS_GROUP_ACCOUNT_CRU_V15.ADD_IP_RANGE(
11:21:59 948  	    in_group_account_id => in_group_account_id,
11:21:59 949  	    in_minimum_ip_string => in_minimum_ip_string,
11:21:59 950  	    in_minimum_ip_low => in_minimum_ip_low,
11:21:59 951  	    in_minimum_ip_high => in_minimum_ip_high,
11:21:59 952  	    in_maximum_ip_string => in_maximum_ip_string,
11:21:59 953  	    in_maximum_ip_low => in_maximum_ip_low,
11:21:59 954  	    in_maximum_ip_high => in_maximum_ip_high,
11:21:59 955  	    in_created_by => in_created_by
11:21:59 956  	  );
11:21:59 957  
11:21:59 958  	  -- Check for overlapping ip address range after insert.  Note that if another
11:21:59 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
11:21:59 960  	  SELECT count(1) into var_is_dupe
11:21:59 961  	  FROM
11:21:59 962  	    GROUP_ACCOUNT_IP_RANGE
11:21:59 963  	  WHERE
11:21:59 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V15.GROUP_ACC_IP_RNG_ACTIVE AND
11:21:59 965  		((
11:21:59 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
11:21:59 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
11:21:59 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
11:21:59 969  		) OR
11:21:59 970  
11:21:59 971  		(
11:21:59 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
11:21:59 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
11:21:59 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
11:21:59 975  		)) AND
11:21:59 976  	    ROWNUM < 3;
11:21:59 977  
11:21:59 978  	  If(var_is_dupe > 1) THEN
11:21:59 979  	    RAISE DUPE;
11:21:59 980  	  END IF;
11:21:59 981  EXCEPTION
11:21:59 982  WHEN NOT_GL THEN
11:21:59 983  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
11:21:59 985  WHEN DUPE THEN
11:21:59 986  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
11:21:59 988  WHEN OTHERS THEN
11:21:59 989  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 991  END ADD_IP_RANGE;
11:21:59 992  
11:21:59 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
11:21:59 994  	in_group_account_id IN NUMBER,
11:21:59 995  	out_group_id OUT NUMBER
11:21:59 996  ) AS
11:21:59 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
11:21:59 998  BEGIN
11:21:59 999  	SELECT
11:21:59 1000  	   a.group_id into out_group_id
11:21:59 1001  	 FROM
11:21:59 1002  	   account a,
11:21:59 1003  	   subscription s,
11:21:59 1004  	   group_account ga
11:21:59 1005  	 WHERE
11:21:59 1006  	   a.id = s.account_id and
11:21:59 1007  	   s.id = ga.subscription_id and
11:21:59 1008  	   ga.id = in_group_account_id and
11:21:59 1009  	   rownum < 2
11:21:59 1010  	 ;
11:21:59 1011  EXCEPTION
11:21:59 1012  WHEN NO_DATA_FOUND THEN
11:21:59 1013  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1014  	   SPROC_NAME, 'Bad group_account_id');
11:21:59 1015  WHEN OTHERS THEN
11:21:59 1016  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
11:21:59 1019  
11:21:59 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
11:21:59 1021  	 in_group_account_ip_range_id IN NUMBER,
11:21:59 1022  	 out_group_id OUT NUMBER
11:21:59 1023  ) AS
11:21:59 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
11:21:59 1025  BEGIN
11:21:59 1026  	 SELECT
11:21:59 1027  	   a.group_id into out_group_id
11:21:59 1028  	 FROM
11:21:59 1029  	   account a,
11:21:59 1030  	   subscription s,
11:21:59 1031  	   group_account ga,
11:21:59 1032  	   group_account_ip_range ir
11:21:59 1033  	 WHERE
11:21:59 1034  	   a.id = s.account_id and
11:21:59 1035  	   s.id = ga.subscription_id and
11:21:59 1036  	   ga.id = ir.group_account_id and
11:21:59 1037  	   ir.id = in_group_account_ip_range_id and
11:21:59 1038  	   rownum < 2
11:21:59 1039  	 ;
11:21:59 1040  EXCEPTION
11:21:59 1041  WHEN NO_DATA_FOUND THEN
11:21:59 1042  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
11:21:59 1044  WHEN OTHERS THEN
11:21:59 1045  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
11:21:59 1048  
11:21:59 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
11:21:59 1050  	 in_group_account_email_dom_id IN NUMBER,
11:21:59 1051  	 out_group_id OUT NUMBER
11:21:59 1052  ) AS
11:21:59 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
11:21:59 1054  BEGIN
11:21:59 1055  	 SELECT
11:21:59 1056  	   a.group_id into out_group_id
11:21:59 1057  	 FROM
11:21:59 1058  	   account a,
11:21:59 1059  	   subscription s,
11:21:59 1060  	   group_account ga,
11:21:59 1061  	   group_account_email_domain ir
11:21:59 1062  	 WHERE
11:21:59 1063  	   a.id = s.account_id and
11:21:59 1064  	   s.id = ga.subscription_id and
11:21:59 1065  	   ga.id = ir.group_account_id and
11:21:59 1066  	   ir.id = in_group_account_email_dom_id and
11:21:59 1067  	   rownum < 2
11:21:59 1068  	 ;
11:21:59 1069  EXCEPTION
11:21:59 1070  WHEN NO_DATA_FOUND THEN
11:21:59 1071  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
11:21:59 1073  WHEN OTHERS THEN
11:21:59 1074  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
11:21:59 1077  
11:21:59 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
11:21:59 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
11:21:59 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
11:21:59 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
11:21:59 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
11:21:59 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
11:21:59 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
11:21:59 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:59 1086  ) AS
11:21:59 1087  BEGIN
11:21:59 1088  	 PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_GROUP_ACCOUNT(
11:21:59 1089  	   in_group_account_id => in_group_account_id,
11:21:59 1090  	   in_group_name => in_group_name,
11:21:59 1091  	   in_first_name => in_first_name,
11:21:59 1092  	   in_last_name => in_last_name,
11:21:59 1093  	   in_email => in_email,
11:21:59 1094  	   in_phone => in_phone,
11:21:59 1095  	   in_updated_by => in_updated_by
11:21:59 1096  	 );
11:21:59 1097  END UPDATE_GROUP_ACCOUNT;
11:21:59 1098  
11:21:59 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
11:21:59 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
11:21:59 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
11:21:59 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
11:21:59 1103  ) AS
11:21:59 1104  BEGIN
11:21:59 1105  	 PROCS_GROUP_ACCOUNT_CRU_V15.UPDATE_GROUP_ACCOUNT_SEATS(
11:21:59 1106  	   in_group_account_id => in_group_account_id,
11:21:59 1107  	   in_seats => in_seats,
11:21:59 1108  	   in_updated_by => in_updated_by
11:21:59 1109  	 );
11:21:59 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
11:21:59 1111  
11:21:59 1112  END PROCS_GROUP_ACCOUNT_V15;
11:21:59 1113  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.08
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE TEST_CLEAR_ALL IS
11:21:59   4  BEGIN
11:21:59   5  	DELETE FROM TAX_ADJUSTMENT;
11:21:59   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
11:21:59   7  	DELETE FROM INVOICE_ADJUSTMENT;
11:21:59   8  	DELETE FROM LICENSE;
11:21:59   9  	DELETE FROM OFFER_OFFER_CHAIN;
11:21:59  10  	delete from offer_product_offering;
11:21:59  11  	delete from tax;
11:21:59  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
11:21:59  13  	delete from discount_line_item; -- ?
11:21:59  14  	delete from discount; -- ?
11:21:59  15  	DELETE FROM LINE_ITEM;
11:21:59  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
11:21:59  17  	DELETE FROM PRODUCT_OFFERING;
11:21:59  18  	DELETE FROM PRODUCT;
11:21:59  19  	DELETE FROM INVOICE_NOTE;
11:21:59  20  	DELETE FROM GIFT_CERTIFICATE;
11:21:59  21  	DELETE FROM OFFER;
11:21:59  22  	DELETE FROM OFFER_CHAIN_META_DATA;
11:21:59  23  	DELETE FROM SUBSCRIPTION_NOTE;
11:21:59  24  	DELETE FROM SUBSCRIPTION_META_DATA;
11:21:59  25  	DELETE FROM SUBSCRIPTION;
11:21:59  26  	DELETE FROM CREDIT_CARD;
11:21:59  27  	DELETE FROM FLAGGED_ACCOUNTS;
11:21:59  28  	DELETE FROM ACCOUNT_NOTE;
11:21:59  29  	DELETE FROM ACCOUNT_LOCK;
11:21:59  30  	DELETE FROM ACCOUNT;
11:21:59  31  	DELETE FROM CHARGE;
11:21:59  32  	DELETE FROM TRANSACTION_ATTEMPT;
11:21:59  33  	DELETE FROM CHARGEBACK;
11:21:59  34  	DELETE FROM TRANSACTION;
11:21:59  35  	DELETE FROM INVOICE_NOTE;
11:21:59  36  	DELETE FROM INVOICE;
11:21:59  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
11:21:59  38  	DELETE FROM OFFER_CHAIN;
11:21:59  39  END TEST_CLEAR_ALL;
11:21:59  40  
11:21:59  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
11:21:59  42  BEGIN
11:21:59  43  	DELETE FROM OFFER_OFFER_CHAIN;
11:21:59  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
11:21:59  45  	DELETE FROM TAX;
11:21:59  46  	DELETE FROM PRODUCT_OFFERING;
11:21:59  47  	DELETE FROM PRODUCT;
11:21:59  48  	DELETE FROM OFFER;
11:21:59  49  	DELETE FROM OFFER_CHAIN_META_DATA;
11:21:59  50  	DELETE FROM OFFER_CHAIN;
11:21:59  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
11:21:59  52  END;
11:21:59  53  
11:21:59  54  /******************************************/
11:21:59  55  
11:21:59  56  PROCEDURE TEST_GET_ACCOUNT (
11:21:59  57  	in_group_id	IN NUMBER,
11:21:59  58  	out_result_set	OUT SYS_REFCURSOR
11:21:59  59  ) AS
11:21:59  60  BEGIN
11:21:59  61  
11:21:59  62  	OPEN out_result_set FOR
11:21:59  63  	SELECT *
11:21:59  64  	FROM
11:21:59  65  	  ACCOUNT
11:21:59  66  	WHERE
11:21:59  67  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59  68  
11:21:59  69  END TEST_GET_ACCOUNT;
11:21:59  70  
11:21:59  71  /*******************************************/
11:21:59  72  
11:21:59  73  PROCEDURE TEST_GET_SUBSCRIPTION (
11:21:59  74  	in_subscription_id IN NUMBER,
11:21:59  75  	out_result_set	   OUT SYS_REFCURSOR
11:21:59  76  ) AS
11:21:59  77  BEGIN
11:21:59  78  	OPEN out_result_set FOR
11:21:59  79  	SELECT *
11:21:59  80  	FROM
11:21:59  81  	  SUBSCRIPTION
11:21:59  82  	WHERE
11:21:59  83  	  SUBSCRIPTION.ID = in_subscription_id;
11:21:59  84  
11:21:59  85  END TEST_GET_SUBSCRIPTION;
11:21:59  86  
11:21:59  87  /***************************************************/
11:21:59  88  
11:21:59  89  PROCEDURE TEST_DELETE_INVOICE (
11:21:59  90  	in_invoice_id IN NUMBER
11:21:59  91  ) AS
11:21:59  92  var_line_item_id_set SYS_REFCURSOR;
11:21:59  93  var_line_item_id	   NUMBER;
11:21:59  94  
11:21:59  95  var_charge_id_set  SYS_REFCURSOR;
11:21:59  96  var_charge_id	 NUMBER;
11:21:59  97  var_transaction_id NUMBER;
11:21:59  98  BEGIN
11:21:59  99  	-- GET ACCOUNT'S LINE_ITEMS
11:21:59 100  	OPEN var_line_item_id_set FOR
11:21:59 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
11:21:59 102  	LOOP
11:21:59 103  	  FETCH var_line_item_id_set into var_line_item_id;
11:21:59 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
11:21:59 105  
11:21:59 106  	  -- DELETE ADJUSTMENTS
11:21:59 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
11:21:59 108  	  LOOP
11:21:59 109  
11:21:59 110  	    -- DELETE DISCOUNT ADJUSTMENTS
11:21:59 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
11:21:59 112  
11:21:59 113  	    -- DELETE TAX ADJUSTMENTS
11:21:59 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
11:21:59 115  	  END LOOP;
11:21:59 116  
11:21:59 117  	  -- DELETE LINE ITEM ADJUSTMENTS
11:21:59 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
11:21:59 119  
11:21:59 120  	  -- DELETE DISCOUNT_LINE_ITEM
11:21:59 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
11:21:59 122  
11:21:59 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
11:21:59 124  
11:21:59 125  	  -- DELETE LINE ITEM
11:21:59 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
11:21:59 127  
11:21:59 128  	END LOOP;
11:21:59 129  
11:21:59 130  	-- DELETE INVOICE ADJUSTMENTS
11:21:59 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
11:21:59 132  
11:21:59 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
11:21:59 134  	OPEN var_charge_id_set FOR
11:21:59 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
11:21:59 136  	LOOP
11:21:59 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
11:21:59 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
11:21:59 139  	  -- DELETE CHARGEBACK
11:21:59 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
11:21:59 141  
11:21:59 142  	  -- DELETE TRANSACTION ATTEMP
11:21:59 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
11:21:59 144  
11:21:59 145  	  -- DELETE CHARGE
11:21:59 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
11:21:59 147  
11:21:59 148  	  -- DELETE TRANSACTION
11:21:59 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
11:21:59 150  	END LOOP;
11:21:59 151  
11:21:59 152  	-- DELETE INVOICE NOTES
11:21:59 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
11:21:59 154  
11:21:59 155  	-- DELETE INVOICE
11:21:59 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
11:21:59 157  END;
11:21:59 158  
11:21:59 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
11:21:59 160  	in_group_id IN NUMBER
11:21:59 161  ) AS
11:21:59 162  -- VARIABLES
11:21:59 163  var_account_id NUMBER;
11:21:59 164  
11:21:59 165  -- CURSORS
11:21:59 166  var_subscription_id_set SYS_REFCURSOR;
11:21:59 167  var_subscription_id     NUMBER;
11:21:59 168  
11:21:59 169  var_license_id_set SYS_REFCURSOR;
11:21:59 170  var_license_id	 NUMBER;
11:21:59 171  var_invoice_id	 NUMBER;
11:21:59 172  
11:21:59 173  var_gift_certificate_id_set SYS_REFCURSOR;
11:21:59 174  var_gift_certificate_id	  NUMBER;
11:21:59 175  var_gc_purchase_invoice_id  NUMBER;
11:21:59 176  BEGIN
11:21:59 177  
11:21:59 178   /*FOR f_account in (
11:21:59 179  	  select id from account where group_id = in_group_id
11:21:59 180  	)
11:21:59 181  	loop
11:21:59 182  
11:21:59 183  	  -- delete account
11:21:59 184  	  delete from account where id = f_account.id;
11:21:59 185  
11:21:59 186  	end loop;*/
11:21:59 187  
11:21:59 188  	BEGIN
11:21:59 189  	  SELECT
11:21:59 190  	    ACCOUNT.ID into var_account_id
11:21:59 191  	  FROM
11:21:59 192  	    ACCOUNT
11:21:59 193  	  WHERE
11:21:59 194  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 195  	  EXCEPTION
11:21:59 196  	    WHEN NO_DATA_FOUND THEN
11:21:59 197  	      -- Nothing to do
11:21:59 198  	      RETURN;
11:21:59 199  	END;
11:21:59 200  
11:21:59 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
11:21:59 202  	OPEN var_subscription_id_set FOR
11:21:59 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
11:21:59 204  	LOOP
11:21:59 205  	  FETCH var_subscription_id_set into var_subscription_id;
11:21:59 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
11:21:59 207  
11:21:59 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
11:21:59 209  	  OPEN var_license_id_set FOR
11:21:59 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
11:21:59 211  	  LOOP
11:21:59 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
11:21:59 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
11:21:59 214  
11:21:59 215  
11:21:59 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
11:21:59 217  	    OPEN var_gift_certificate_id_set FOR
11:21:59 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
11:21:59 219  	    LOOP
11:21:59 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
11:21:59 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
11:21:59 222  
11:21:59 223  	      -- DELETE GIFT_CERTIFICATE
11:21:59 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
11:21:59 225  
11:21:59 226  	      -- DELETE LICENSE
11:21:59 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
11:21:59 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
11:21:59 229  	      END IF;
11:21:59 230  
11:21:59 231  	    END LOOP;
11:21:59 232  
11:21:59 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
11:21:59 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
11:21:59 235  
11:21:59 236  	    -- DELETE LICENSE
11:21:59 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
11:21:59 238  
11:21:59 239  	    -- DELETE INVOICE
11:21:59 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
11:21:59 241  	      TEST_DELETE_INVOICE(var_invoice_id);
11:21:59 242  	    END IF;
11:21:59 243  	  END LOOP;
11:21:59 244  
11:21:59 245  	  -- DELETE SUBSCRIPTION_NOTE
11:21:59 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
11:21:59 247  
11:21:59 248  	  -- DELETE SUBSCRIPTION META_DATA
11:21:59 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
11:21:59 250  
11:21:59 251  	  -- DELETE SUBSCRIPTION
11:21:59 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
11:21:59 253  	END LOOP;
11:21:59 254  
11:21:59 255  	-- DELETE CREDIT_CARDS
11:21:59 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
11:21:59 257  
11:21:59 258  	-- DELETE PAYPAL
11:21:59 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
11:21:59 260  
11:21:59 261  	-- DELETE FLAGS
11:21:59 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
11:21:59 263  
11:21:59 264  	-- DELETE ACCOUNT NOTES
11:21:59 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
11:21:59 266  
11:21:59 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
11:21:59 268  	OPEN var_gift_certificate_id_set FOR
11:21:59 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
11:21:59 270  	LOOP
11:21:59 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
11:21:59 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
11:21:59 273  
11:21:59 274  	  -- DELETE GIFT CERTIFICATE
11:21:59 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
11:21:59 276  
11:21:59 277  	  -- DELETE INVOICE
11:21:59 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
11:21:59 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
11:21:59 280  	  END IF;
11:21:59 281  	END LOOP;
11:21:59 282  
11:21:59 283  	-- DELETE LOCKS
11:21:59 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
11:21:59 285  
11:21:59 286  	-- DELETE ACCOUNT
11:21:59 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
11:21:59 288  
11:21:59 289  END TEST_DELETE_USER_ACCOUNT;
11:21:59 290  
11:21:59 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
11:21:59 292  	in_start_group_id IN NUMBER,
11:21:59 293  	in_end_group_id   IN NUMBER
11:21:59 294  ) IS
11:21:59 295   gid ACCOUNT.GROUP_ID%TYPE;
11:21:59 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
11:21:59 297  BEGIN
11:21:59 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
11:21:59 299  	/*
11:21:59 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
11:21:59 301  	LOOP
11:21:59 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
11:21:59 303  	END LOOP;*/
11:21:59 304  	OPEN c(in_start_group_id, in_end_group_id);
11:21:59 305  	WHILE c%ISOPEN LOOP
11:21:59 306  	  FETCH c INTO gid;
11:21:59 307  	  IF c%NOTFOUND THEN
11:21:59 308  	   CLOSE c;
11:21:59 309  	  END IF;
11:21:59 310  	  TEST_DELETE_USER_ACCOUNT(gid);
11:21:59 311  	END LOOP;
11:21:59 312  END;
11:21:59 313  
11:21:59 314  /**********************************************************/
11:21:59 315  
11:21:59 316  FUNCTION TEST_IS_INVOICE_EXISTS(
11:21:59 317  /*
11:21:59 318  1 - exists
11:21:59 319  0 - not exists
11:21:59 320  */
11:21:59 321  	in_invoice_id IN NUMBER
11:21:59 322  ) RETURN NUMBER AS
11:21:59 323  var_invoice_count NUMBER;
11:21:59 324  BEGIN
11:21:59 325  	SELECT
11:21:59 326  	  COUNT(*) into var_invoice_count
11:21:59 327  	FROM
11:21:59 328  	  INVOICE
11:21:59 329  	WHERE
11:21:59 330  	  INVOICE.ID = in_invoice_id;
11:21:59 331  	IF var_invoice_count = 0 THEN
11:21:59 332  	  RETURN 0;
11:21:59 333  	ELSE
11:21:59 334  	  RETURN 1;
11:21:59 335  	END IF;
11:21:59 336  END;
11:21:59 337  
11:21:59 338  PROCEDURE TEST_GET_INVOICE_INFO (
11:21:59 339  	in_invoice_id  IN NUMBER,
11:21:59 340  	out_result_set OUT SYS_REFCURSOR
11:21:59 341  ) AS
11:21:59 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
11:21:59 343  BEGIN
11:21:59 344  
11:21:59 345  	 OPEN out_result_set FOR SELECT
11:21:59 346  	    in_invoice_id AS "INVOICE_ID",
11:21:59 347  	    INVOICE.INVOICE_STATUS_ID,
11:21:59 348  	    PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
11:21:59 349  	    CHARGE.ID AS "CHARGE_ID",
11:21:59 350  	    CHARGE.CHARGE_AMOUNT,
11:21:59 351  	    CHARGE.TRANSACTION_ID,
11:21:59 352  	    TRANSACTION.TRANSACTION_STATUS_ID
11:21:59 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
11:21:59 354  
11:21:59 355  END TEST_GET_INVOICE_INFO;
11:21:59 356  
11:21:59 357  /******************************************************************************/
11:21:59 358  
11:21:59 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
11:21:59 360  	in_offer_chain_id in number
11:21:59 361  ) as
11:21:59 362  begin
11:21:59 363  
11:21:59 364  	for v_offer_chain in (
11:21:59 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
11:21:59 366  	)
11:21:59 367  	loop
11:21:59 368  
11:21:59 369  	  for v_offer in (
11:21:59 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
11:21:59 371  	  )
11:21:59 372  	  loop
11:21:59 373  
11:21:59 374  	    for v_product_offering in (
11:21:59 375  	      select
11:21:59 376  		product_offering.id,
11:21:59 377  		product_offering.product_id
11:21:59 378  	      from
11:21:59 379  		offer_product_offering
11:21:59 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
11:21:59 381  	      where offer_product_offering.offer_id = v_offer.id
11:21:59 382  	    )
11:21:59 383  	    loop
11:21:59 384  
11:21:59 385  	      -- delete product eligibility
11:21:59 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
11:21:59 387  
11:21:59 388  	      -- delete meta data
11:21:59 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
11:21:59 390  
11:21:59 391  	      -- delete product
11:21:59 392  	      delete from product where id = v_product_offering.product_id;
11:21:59 393  
11:21:59 394  	      -- delete product_offering
11:21:59 395  	      delete from product_offering where id = v_product_offering.id;
11:21:59 396  
11:21:59 397  	    end loop;
11:21:59 398  
11:21:59 399  	    -- delete data from offer_product_offering table
11:21:59 400  	    delete from offer_product_offering where offer_id = v_offer.id;
11:21:59 401  
11:21:59 402  	    -- delete data from offer_offer_chain table
11:21:59 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
11:21:59 404  
11:21:59 405  	    -- delete offer
11:21:59 406  	    delete from offer where id = v_offer.id;
11:21:59 407  
11:21:59 408  	  end loop;
11:21:59 409  
11:21:59 410  	  -- delete offer_chain_eligibility
11:21:59 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
11:21:59 412  
11:21:59 413  	  -- delete metadata
11:21:59 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
11:21:59 415  
11:21:59 416  	  -- delete offer chain
11:21:59 417  	  delete from offer_chain where id = v_offer_chain.id;
11:21:59 418  
11:21:59 419  	end loop;
11:21:59 420  
11:21:59 421  end;
11:21:59 422  
11:21:59 423  END PROCS_TEST_V15;
11:21:59 424  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.06
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V15" AS
11:21:59   2  
11:21:59   3  REAL_TIME_CANCEL_REASON CONSTANT NUMBER := 41;
11:21:59   4  
11:21:59   5  PROCEDURE ANNOTATE_ACCOUNT (
11:21:59   6  /*
11:21:59   7  Throws exceptions:
11:21:59   8  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59   9  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  10  */
11:21:59  11  	in_group_id   IN  NUMBER,
11:21:59  12  	in_agent_id   IN  NUMBER,
11:21:59  13  	in_note       IN  VARCHAR2,
11:21:59  14  	in_created_by IN  VARCHAR2
11:21:59  15  ) AS
11:21:59  16  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
11:21:59  17  -- VARIABLES
11:21:59  18  var_account_id	  NUMBER;
11:21:59  19  var_account_note_id NUMBER;
11:21:59  20  -- EXCEPTIONS
11:21:59  21  BAD_ACCOUNT_ID EXCEPTION;
11:21:59  22  BEGIN
11:21:59  23  
11:21:59  24  	-- Get account id
11:21:59  25  	BEGIN
11:21:59  26  	  SELECT
11:21:59  27  	    ACCOUNT.ID into var_account_id
11:21:59  28  	  FROM
11:21:59  29  	    ACCOUNT
11:21:59  30  	  WHERE
11:21:59  31  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59  32  	  EXCEPTION
11:21:59  33  	    WHEN NO_DATA_FOUND THEN
11:21:59  34  	      RAISE BAD_ACCOUNT_ID;
11:21:59  35  	END;
11:21:59  36  
11:21:59  37  	-- Insert new row into ACCOUNT_NOTE table
11:21:59  38  	PROCS_ACCOUNT_CRU_V15.CREATE_ACCOUNT_NOTE(
11:21:59  39  	  inout_account_note_id => var_account_note_id,
11:21:59  40  	  in_agent_id		=> in_agent_id,
11:21:59  41  	  in_account_id 	=> var_account_id,
11:21:59  42  	  in_note		=> in_note,
11:21:59  43  	  in_created_by 	=> in_created_by
11:21:59  44  	);
11:21:59  45  
11:21:59  46  EXCEPTION
11:21:59  47  WHEN BAD_ACCOUNT_ID THEN
11:21:59  48  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59  49  	  SPROC_NAME, 'No such group id');
11:21:59  50  WHEN OTHERS THEN
11:21:59  51  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59  52  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59  53  END ANNOTATE_ACCOUNT;
11:21:59  54  
11:21:59  55  /******************************************************************************/
11:21:59  56  
11:21:59  57  PROCEDURE ASSERT_ACCOUNT_EXISTS (
11:21:59  58  /*
11:21:59  59  Throws exceptions:
11:21:59  60  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59  61  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  62  */
11:21:59  63  	in_group_id IN	NUMBER,
11:21:59  64  	out_exists  OUT NUMBER
11:21:59  65  ) AS
11:21:59  66  -- VARIABLES
11:21:59  67  var_found_id  NUMBER;
11:21:59  68  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
11:21:59  69  BEGIN
11:21:59  70  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
11:21:59  71  	out_exists := GLOBAL_CONSTANTS_V15.TRUE;
11:21:59  72  EXCEPTION
11:21:59  73  WHEN NO_DATA_FOUND THEN
11:21:59  74  	out_exists := GLOBAL_CONSTANTS_V15.FALSE;
11:21:59  75  WHEN OTHERS THEN
11:21:59  76  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59  78  END ASSERT_ACCOUNT_EXISTS;
11:21:59  79  
11:21:59  80  /******************************************************************************/
11:21:59  81  
11:21:59  82  PROCEDURE DISABLE_ACCOUNT (
11:21:59  83  /*
11:21:59  84  Throws exceptions:
11:21:59  85  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59  86  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59  87  */
11:21:59  88  	in_group_id   IN NUMBER,
11:21:59  89  	in_updated_by IN VARCHAR2,
11:21:59  90  	in_note       IN VARCHAR2,
11:21:59  91  	in_agent_id   IN NUMBER
11:21:59  92  ) AS
11:21:59  93  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
11:21:59  94  var_account_id	      NUMBER;
11:21:59  95  current_account_status  NUMBER;
11:21:59  96  
11:21:59  97  var_active_subscriptions_num NUMBER;
11:21:59  98  var_pending_invoices_num	   NUMBER;
11:21:59  99  
11:21:59 100  -- EXCEPTIONS
11:21:59 101  BAD_ACOUNT_ID		EXCEPTION;
11:21:59 102  BAD_CURRENT_ACC_STATUS	EXCEPTION;
11:21:59 103  PENDING_INVOICES_FOUND	EXCEPTION;
11:21:59 104  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
11:21:59 105  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
11:21:59 106  EXCEPTION_MESSAGE 	VARCHAR2(1024);
11:21:59 107  BEGIN
11:21:59 108  
11:21:59 109  	-- Get account's status and id
11:21:59 110  	BEGIN
11:21:59 111  	  SELECT
11:21:59 112  	    ACCOUNT.ACCOUNT_STATUS_ID,
11:21:59 113  	    ACCOUNT.ID
11:21:59 114  	  INTO
11:21:59 115  	    current_account_status,
11:21:59 116  	    var_account_id
11:21:59 117  	  FROM ACCOUNT
11:21:59 118  	  WHERE
11:21:59 119  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 120  	  EXCEPTION
11:21:59 121  	    WHEN NO_DATA_FOUND THEN
11:21:59 122  	      RAISE BAD_ACOUNT_ID;
11:21:59 123  	END;
11:21:59 124  
11:21:59 125  	-- For now, we can disable account whenever
11:21:59 126  	IF current_account_status = GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
11:21:59 127  	  RAISE BAD_CURRENT_ACC_STATUS;
11:21:59 128  	END IF;
11:21:59 129  
11:21:59 130  	-- Checks for out outstanding balances
11:21:59 131  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
11:21:59 132  	SELECT
11:21:59 133  	  COUNT(*) into var_pending_invoices_num
11:21:59 134  	FROM
11:21:59 135  	  LICENSE
11:21:59 136  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 137  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:59 138  	WHERE
11:21:59 139  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 140  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V15.INVOICE_OPEN FROM DUAL );
11:21:59 141  
11:21:59 142  	IF var_pending_invoices_num > 0 THEN
11:21:59 143  	  RAISE PENDING_INVOICES_FOUND;
11:21:59 144  	END IF;
11:21:59 145  
11:21:59 146  	SELECT
11:21:59 147  	  COUNT(*) into var_active_subscriptions_num
11:21:59 148  	FROM
11:21:59 149  	  SUBSCRIPTION
11:21:59 150  	WHERE
11:21:59 151  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 152  	  AND (
11:21:59 153  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 154  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:59 155  	  );
11:21:59 156  
11:21:59 157  	IF var_active_subscriptions_num > 0 THEN
11:21:59 158  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
11:21:59 159  	END IF;
11:21:59 160  
11:21:59 161  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
11:21:59 162  	  in_account_id        => var_account_id,
11:21:59 163  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_DISABLED,
11:21:59 164  	  in_updated_by        => in_updated_by
11:21:59 165  	);
11:21:59 166  
11:21:59 167  	-- Annotate account
11:21:59 168  	IF in_note IS NOT NULL THEN
11:21:59 169  	  BEGIN
11:21:59 170  	    PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
11:21:59 171  	      in_group_id   => in_group_id,
11:21:59 172  	      in_agent_id   => in_agent_id,
11:21:59 173  	      in_note	    => in_note,
11:21:59 174  	      in_created_by => in_updated_by
11:21:59 175  	    );
11:21:59 176  	    EXCEPTION
11:21:59 177  	      WHEN OTHERS THEN
11:21:59 178  		EXCEPTION_MESSAGE := SQLERRM;
11:21:59 179  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
11:21:59 180  	  END;
11:21:59 181  	END IF;
11:21:59 182  
11:21:59 183  EXCEPTION
11:21:59 184  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
11:21:59 185  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 186  	  SPROC_NAME, 'Account has active or suspended subsciptions');
11:21:59 187  WHEN BAD_CURRENT_ACC_STATUS THEN
11:21:59 188  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 189  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
11:21:59 190  WHEN PENDING_INVOICES_FOUND THEN
11:21:59 191  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 192  	  SPROC_NAME, 'Opened/Pending invoices founded');
11:21:59 193  WHEN BAD_ACOUNT_ID THEN
11:21:59 194  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 195  	  SPROC_NAME, 'No such account');
11:21:59 196  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
11:21:59 197  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 198  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
11:21:59 199  WHEN OTHERS THEN
11:21:59 200  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 201  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 202  END DISABLE_ACCOUNT;
11:21:59 203  
11:21:59 204  /******************************************************************************/
11:21:59 205  
11:21:59 206  PROCEDURE CREATE_ACTIVE_ACCOUNT(
11:21:59 207  /*
11:21:59 208  Throws exceptions:
11:21:59 209  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 210  APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR
11:21:59 211  */
11:21:59 212  	  in_created_by IN VARCHAR2,
11:21:59 213  	  in_group_id	IN NUMBER
11:21:59 214  ) AS
11:21:59 215  -- VARIABLES
11:21:59 216  SPROC_NAME      CONSTANT VARCHAR2(21) := 'CREATE_ACTIVE_ACCOUNT';
11:21:59 217  new_account_id  NUMBER;
11:21:59 218  temp_group_id   NUMBER;
11:21:59 219  -- EXCEPTIONS
11:21:59 220  GROUP_EXISTS_EXCEPTION EXCEPTION;
11:21:59 221  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 222  BEGIN
11:21:59 223  	-- Check if account already exists
11:21:59 224  	BEGIN
11:21:59 225  	  SELECT
11:21:59 226  	    ACCOUNT.GROUP_ID into temp_group_id
11:21:59 227  	  FROM
11:21:59 228  	    ACCOUNT
11:21:59 229  	  WHERE
11:21:59 230  	    ACCOUNT.GROUP_ID = in_group_id
11:21:59 231  	    AND ROWNUM <= 1;
11:21:59 232  
11:21:59 233  	  IF SQL%ROWCOUNT = 1 THEN
11:21:59 234  	    RAISE GROUP_EXISTS_EXCEPTION;
11:21:59 235  	  END IF;
11:21:59 236  
11:21:59 237  	  EXCEPTION
11:21:59 238  	    WHEN NO_DATA_FOUND THEN
11:21:59 239  	      NULL;
11:21:59 240  	END;
11:21:59 241  
11:21:59 242  	-- Insert new row into ACCOUNT table
11:21:59 243  	PROCS_ACCOUNT_CRU_V15.CREATE_ACCOUNT(
11:21:59 244  	  out_account_id	=> new_account_id,
11:21:59 245  	  in_account_status_id	=> GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE,
11:21:59 246  	  in_group_id		=> in_group_id,
11:21:59 247  	  in_created_by 	=> in_created_by,
11:21:59 248  	  in_system_category_id => GLOBAL_ENUMS_V15.SYSTEM_CATEGORY_LIVE
11:21:59 249  	);
11:21:59 250  
11:21:59 251  EXCEPTION
11:21:59 252  WHEN GROUP_EXISTS_EXCEPTION THEN
11:21:59 253  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.DUPLICATE_ERROR,
11:21:59 254  	  SPROC_NAME, 'Group already exists');
11:21:59 255  WHEN OTHERS THEN
11:21:59 256  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 257  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 258  END CREATE_ACTIVE_ACCOUNT;
11:21:59 259  
11:21:59 260  /******************************************************************************/
11:21:59 261  
11:21:59 262  PROCEDURE REACTIVATE_ACCOUNT (
11:21:59 263  /*
11:21:59 264  Throws exceptions:
11:21:59 265  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 266  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 267  */
11:21:59 268  	in_group_id   IN NUMBER,
11:21:59 269  	in_updated_by IN VARCHAR2,
11:21:59 270  	in_note       IN VARCHAR2,
11:21:59 271  	in_agent_id   IN NUMBER
11:21:59 272  ) AS
11:21:59 273  -- VARIABLES
11:21:59 274  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
11:21:59 275  var_account_id	      NUMBER;
11:21:59 276  current_account_status  NUMBER;
11:21:59 277  
11:21:59 278  -- EXCEPTIONS
11:21:59 279  BAD_CURRENT_ACC_STATUS EXCEPTION;
11:21:59 280  CAN_NOT_CREATE_NOTE    EXCEPTION;
11:21:59 281  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 282  BEGIN
11:21:59 283  	-- Get account id, status
11:21:59 284  	SELECT
11:21:59 285  	  ACCOUNT.ACCOUNT_STATUS_ID,
11:21:59 286  	  ACCOUNT.ID
11:21:59 287  	INTO
11:21:59 288  	  current_account_status,
11:21:59 289  	  var_account_id
11:21:59 290  	FROM ACCOUNT
11:21:59 291  	WHERE
11:21:59 292  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 293  
11:21:59 294  	IF current_account_status != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
11:21:59 295  	  RAISE BAD_CURRENT_ACC_STATUS;
11:21:59 296  	END IF;
11:21:59 297  
11:21:59 298  	-- Change account status
11:21:59 299  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
11:21:59 300  	  in_account_id        => var_account_id,
11:21:59 301  	  in_updated_by        => in_updated_by,
11:21:59 302  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
11:21:59 303  	);
11:21:59 304  
11:21:59 305  	-- Add note
11:21:59 306  	BEGIN
11:21:59 307  	  PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
11:21:59 308  	    in_group_id   => in_group_id,
11:21:59 309  	    in_agent_id   => in_agent_id,
11:21:59 310  	    in_note	  => in_note,
11:21:59 311  	    in_created_by => in_updated_by
11:21:59 312  	  );
11:21:59 313  	  EXCEPTION
11:21:59 314  	    WHEN OTHERS THEN
11:21:59 315  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 316  	      RAISE CAN_NOT_CREATE_NOTE;
11:21:59 317  	END;
11:21:59 318  
11:21:59 319  EXCEPTION
11:21:59 320  WHEN BAD_CURRENT_ACC_STATUS THEN
11:21:59 321  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 322  	  SPROC_NAME, 'Current account status is not "frozen"');
11:21:59 323  WHEN NO_DATA_FOUND THEN
11:21:59 324  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 325  	  SPROC_NAME, 'Could not find account with given group ID');
11:21:59 326  WHEN CAN_NOT_CREATE_NOTE THEN
11:21:59 327  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 328  	  SPROC_NAME, 'Could not annotate account');
11:21:59 329  WHEN OTHERS THEN
11:21:59 330  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 331  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 332  END REACTIVATE_ACCOUNT;
11:21:59 333  
11:21:59 334  /******************************************************************************/
11:21:59 335  
11:21:59 336  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
11:21:59 337  /*
11:21:59 338  IN:
11:21:59 339  instr_status:
11:21:59 340  1 - get active instruments only (default)
11:21:59 341  0 - get inactive instruments only
11:21:59 342  
11:21:59 343  Throws exceptions:
11:21:59 344  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 345  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 346  */
11:21:59 347  	in_group_id	  IN NUMBER,
11:21:59 348  	out_result_cc_set OUT SYS_REFCURSOR,
11:21:59 349  	out_default_id	  OUT NUMBER,
11:21:59 350  	in_instr_status   IN NUMBER DEFAULT GLOBAL_STATUSES_V15.CREDIT_CARD_ACTIVE
11:21:59 351  ) AS
11:21:59 352  SPROC_NAME		 CONSTANT VARCHAR2(24) := 'GET_ACCOUNT_CREDIT_CARDS';
11:21:59 353  var_account_id		 NUMBER;
11:21:59 354  var_def_instrument_type_id NUMBER;
11:21:59 355  var_def_instrument_id	 NUMBER;
11:21:59 356  temp_cc_status_id 	 NUMBER;
11:21:59 357  
11:21:59 358  -- Exceptions
11:21:59 359  WRONG_INSTR_EXCEPTION	     EXCEPTION;
11:21:59 360  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
11:21:59 361  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
11:21:59 362  BEGIN
11:21:59 363  
11:21:59 364  	-- Get group id
11:21:59 365  	SELECT
11:21:59 366  	  ACCOUNT.ID INTO var_account_id
11:21:59 367  	FROM
11:21:59 368  	  ACCOUNT
11:21:59 369  	WHERE
11:21:59 370  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 371  
11:21:59 372  	-- Check that incoming parameter is correct
11:21:59 373  	BEGIN
11:21:59 374  	  SELECT
11:21:59 375  	    CREDIT_CARD_STATUS.ID into temp_cc_status_id
11:21:59 376  	  FROM
11:21:59 377  	    CREDIT_CARD_STATUS
11:21:59 378  	  WHERE
11:21:59 379  	    CREDIT_CARD_STATUS.ID = in_instr_status;
11:21:59 380  	  EXCEPTION
11:21:59 381  	    WHEN NO_DATA_FOUND THEN
11:21:59 382  	      RAISE WRONG_INSTR_EXCEPTION;
11:21:59 383  	END;
11:21:59 384  
11:21:59 385  	-- Select all crdit cards for given account
11:21:59 386  	OPEN out_result_cc_set FOR
11:21:59 387  	SELECT
11:21:59 388  	  CREDIT_CARD.ID,
11:21:59 389  	  CREDIT_CARD.ACCOUNT_ID,
11:21:59 390  	  CREDIT_CARD.INSTRUMENT_NAME,
11:21:59 391  	  CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
11:21:59 392  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS,
11:21:59 393  	  CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
11:21:59 394  	  CREDIT_CARD.STATE,
11:21:59 395  	  CREDIT_CARD.CITY,
11:21:59 396  	  CREDIT_CARD.POSTAL_CODE,
11:21:59 397  	  CREDIT_CARD.COUNTRY,
11:21:59 398  	  CREDIT_CARD.LAST_FOUR_CC,
11:21:59 399  	  CREDIT_CARD.EXPIRATION_DATE,
11:21:59 400  	  CREDIT_CARD.CREDIT_CARD_TYPE_ID,
11:21:59 401  	  CREDIT_CARD.SECRET_TOKEN,
11:21:59 402  	  CREDIT_CARD.CREATE_DATE,
11:21:59 403  	  CREDIT_CARD.CREATED_BY,
11:21:59 404  	  CREDIT_CARD.UPDATE_DATE,
11:21:59 405  	  CREDIT_CARD.UPDATED_BY,
11:21:59 406  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
11:21:59 407  	  CREDIT_CARD.PRIVATE_FIRST_NAME,
11:21:59 408  	  CREDIT_CARD.PRIVATE_LAST_NAME
11:21:59 409  	FROM
11:21:59 410  	  CREDIT_CARD
11:21:59 411  	WHERE
11:21:59 412  	  CREDIT_CARD.ACCOUNT_ID = var_account_id
11:21:59 413  	  AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_instr_status;
11:21:59 414  
11:21:59 415  	-- Get default credit card if exists
11:21:59 416  	BEGIN
11:21:59 417  	  PROCS_FIN_INSTRUMENTS_V15.GET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 418  	    in_group_id 	   => in_group_id,
11:21:59 419  	    out_instrument_type_id => var_def_instrument_type_id,
11:21:59 420  	    out_instrument_id	   => var_def_instrument_id
11:21:59 421  	  );
11:21:59 422  	  EXCEPTION
11:21:59 423  	    WHEN OTHERS THEN
11:21:59 424  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 425  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
11:21:59 426  	END;
11:21:59 427  
11:21:59 428  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_CREDIT_CARD THEN
11:21:59 429  	  out_default_id := var_def_instrument_id;
11:21:59 430  	ELSE
11:21:59 431  	  out_default_id := 0;
11:21:59 432  	END IF;
11:21:59 433  
11:21:59 434  EXCEPTION
11:21:59 435  WHEN NO_DATA_FOUND THEN
11:21:59 436  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 437  	  SPROC_NAME, 'No such account');
11:21:59 438  WHEN WRONG_INSTR_EXCEPTION THEN
11:21:59 439  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 440  	  SPROC_NAME, 'Wrong instrument status');
11:21:59 441  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
11:21:59 442  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 443  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
11:21:59 444  WHEN OTHERS THEN
11:21:59 445  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 446  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 447  END GET_ACCOUNT_CREDIT_CARDS;
11:21:59 448  
11:21:59 449  /******************************************************************************/
11:21:59 450  
11:21:59 451  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
11:21:59 452  /*
11:21:59 453  IN:
11:21:59 454  instr_status:
11:21:59 455  GLOBAL_CONSTANTS_V15.TRUE - get active instruments only (default)
11:21:59 456  GLOBAL_CONSTANTS_V15.FALSE - get inactive instruments only
11:21:59 457  
11:21:59 458  Throws exceptions:
11:21:59 459  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 460  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 461  */
11:21:59 462  	in_group_id	  IN NUMBER,
11:21:59 463  	out_result_gc_set OUT SYS_REFCURSOR,
11:21:59 464  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.TRUE
11:21:59 465  ) AS
11:21:59 466  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
11:21:59 467  var_account_id NUMBER;
11:21:59 468  
11:21:59 469  -- Exceptions
11:21:59 470  WRONG_INSTR_EXCEPTION	 EXCEPTION;
11:21:59 471  BEGIN
11:21:59 472  
11:21:59 473  	-- Get account id
11:21:59 474  	SELECT
11:21:59 475  	  ACCOUNT.ID INTO var_account_id
11:21:59 476  	FROM
11:21:59 477  	  ACCOUNT
11:21:59 478  	WHERE
11:21:59 479  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 480  
11:21:59 481  	-- Check that incoming data is correct
11:21:59 482  	IF in_instr_status != GLOBAL_CONSTANTS_V15.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V15.FALSE THEN
11:21:59 483  	  RAISE WRONG_INSTR_EXCEPTION;
11:21:59 484  	END IF;
11:21:59 485  
11:21:59 486  	OPEN out_result_gc_set FOR
11:21:59 487  	SELECT
11:21:59 488  	  GIFT_CERTIFICATE.ID,
11:21:59 489  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
11:21:59 490  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
11:21:59 491  	  GIFT_CERTIFICATE.PURCHASE_DATE,
11:21:59 492  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
11:21:59 493  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
11:21:59 494  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
11:21:59 495  	  GIFT_CERTIFICATE.CODE,
11:21:59 496  	  GIFT_CERTIFICATE.CREATE_DATE,
11:21:59 497  	  GIFT_CERTIFICATE.CREATED_BY,
11:21:59 498  	  GIFT_CERTIFICATE.UPDATE_DATE,
11:21:59 499  	  GIFT_CERTIFICATE.UPDATED_BY,
11:21:59 500  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
11:21:59 501  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
11:21:59 502  	  GIFT_CERTIFICATE.SENDER_NAME,
11:21:59 503  	  GIFT_CERTIFICATE.SENDER_EMAIL,
11:21:59 504  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
11:21:59 505  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
11:21:59 506  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
11:21:59 507  	  GIFT_CERTIFICATE.GIFT_MESSAGE
11:21:59 508  	FROM
11:21:59 509  	  GIFT_CERTIFICATE
11:21:59 510  	WHERE
11:21:59 511  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
11:21:59 512  	  AND (
11:21:59 513  		( in_instr_status = GLOBAL_CONSTANTS_V15.TRUE AND
11:21:59 514  		  (
11:21:59 515  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
11:21:59 516  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
11:21:59 517  		  )
11:21:59 518  		)
11:21:59 519  		OR
11:21:59 520  		(
11:21:59 521  		  in_instr_status = GLOBAL_CONSTANTS_V15.FALSE AND
11:21:59 522  		  (
11:21:59 523  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
11:21:59 524  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V15.GIFT_CERTIFICATE_ACTIVE
11:21:59 525  		  )
11:21:59 526  		)
11:21:59 527  	      );
11:21:59 528  
11:21:59 529  EXCEPTION
11:21:59 530  WHEN NO_DATA_FOUND THEN
11:21:59 531  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 532  	  SPROC_NAME, 'Can not find account with given group id');
11:21:59 533  WHEN WRONG_INSTR_EXCEPTION THEN
11:21:59 534  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 535  	  SPROC_NAME, 'Wrong gift certificate type');
11:21:59 536  WHEN OTHERS THEN
11:21:59 537  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 538  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 539  END GET_ACCOUNT_GIFT_CERTIFICATES;
11:21:59 540  
11:21:59 541  /******************************************************************************/
11:21:59 542  
11:21:59 543  PROCEDURE GET_ACCOUNT_INFO  (
11:21:59 544  /*
11:21:59 545  Throws exceptions:
11:21:59 546  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 547  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 548  */
11:21:59 549  	  in_group_id	    IN	NUMBER,
11:21:59 550  	  out_account_info  OUT SYS_REFCURSOR
11:21:59 551  ) AS
11:21:59 552  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
11:21:59 553  var_account_id  NUMBER;
11:21:59 554  BEGIN
11:21:59 555  
11:21:59 556  	-- Get account id
11:21:59 557  	SELECT
11:21:59 558  	  ACCOUNT.ID INTO var_account_id
11:21:59 559  	FROM
11:21:59 560  	  ACCOUNT
11:21:59 561  	WHERE
11:21:59 562  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 563  
11:21:59 564  	-- Get account info
11:21:59 565  	OPEN out_account_info FOR
11:21:59 566  	  SELECT
11:21:59 567  	    ACCOUNT.ACCOUNT_STATUS_ID
11:21:59 568  	  FROM ACCOUNT
11:21:59 569  	  WHERE
11:21:59 570  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 571  
11:21:59 572  EXCEPTION
11:21:59 573  WHEN NO_DATA_FOUND THEN
11:21:59 574  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 575  	  SPROC_NAME, 'No such account');
11:21:59 576  WHEN OTHERS THEN
11:21:59 577  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 578  	  SPROC_NAME, 'Unknown Error', SQLERRM);
11:21:59 579  END GET_ACCOUNT_INFO;
11:21:59 580  
11:21:59 581  /******************************************************************************/
11:21:59 582  
11:21:59 583  PROCEDURE GET_ACCOUNT_NOTES (
11:21:59 584  /*
11:21:59 585  Throws exceptions:
11:21:59 586  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 587  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 588  */
11:21:59 589  	  in_group_id	 IN  NUMBER,
11:21:59 590  	  out_result_set OUT SYS_REFCURSOR
11:21:59 591  ) AS
11:21:59 592  -- VARIABLES
11:21:59 593  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
11:21:59 594  var_account_id NUMBER;
11:21:59 595  -- EXCEPTIONS
11:21:59 596  BAD_ACCOUNT_ID EXCEPTION;
11:21:59 597  BEGIN
11:21:59 598  
11:21:59 599  	-- Check that account is exists
11:21:59 600  	BEGIN
11:21:59 601  	  SELECT
11:21:59 602  	    ACCOUNT.ID into var_account_id
11:21:59 603  	  FROM
11:21:59 604  	    ACCOUNT
11:21:59 605  	  WHERE
11:21:59 606  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 607  	  EXCEPTION
11:21:59 608  	    WHEN NO_DATA_FOUND THEN
11:21:59 609  	      RAISE BAD_ACCOUNT_ID;
11:21:59 610  	END;
11:21:59 611  
11:21:59 612  	-- Get account notes
11:21:59 613  	OPEN out_result_set FOR
11:21:59 614  	SELECT
11:21:59 615  	  ACCOUNT_NOTE.ACCOUNT_ID,
11:21:59 616  	  ACCOUNT_NOTE.AGENT_ID,
11:21:59 617  	  ACCOUNT_NOTE.CREATE_DATE,
11:21:59 618  	  ACCOUNT_NOTE.CREATED_BY,
11:21:59 619  	  ACCOUNT_NOTE.ID,
11:21:59 620  	  ACCOUNT_NOTE.NOTE
11:21:59 621  	FROM
11:21:59 622  	  ACCOUNT_NOTE
11:21:59 623  	WHERE
11:21:59 624  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
11:21:59 625  	ORDER BY
11:21:59 626  	  ACCOUNT_NOTE.CREATE_DATE ASC;
11:21:59 627  
11:21:59 628  EXCEPTION
11:21:59 629  WHEN BAD_ACCOUNT_ID THEN
11:21:59 630  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 631  	  SPROC_NAME, 'No such account');
11:21:59 632  WHEN OTHERS THEN
11:21:59 633  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 634  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 635  END GET_ACCOUNT_NOTES;
11:21:59 636  
11:21:59 637  /******************************************************************************/
11:21:59 638  
11:21:59 639  PROCEDURE GET_ACCOUNT_PAYPALS(
11:21:59 640  /*
11:21:59 641  IN:
11:21:59 642  instr_status:
11:21:59 643  1 - get active instruments only (default)
11:21:59 644  0 - get inactive instruments only
11:21:59 645  
11:21:59 646  Throws exceptions:
11:21:59 647  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 648  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 649  */
11:21:59 650  	in_group_id	  IN  NUMBER,
11:21:59 651  	out_result_pp_set OUT SYS_REFCURSOR,
11:21:59 652  	out_default_id	  OUT NUMBER,
11:21:59 653  	in_instr_status   IN  NUMBER DEFAULT GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
11:21:59 654  ) AS
11:21:59 655  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACCOUNT_PAYPALS';
11:21:59 656  -- VARIABLES
11:21:59 657  var_account_id NUMBER;
11:21:59 658  var_def_instrument_type_id NUMBER;
11:21:59 659  var_def_instrument_id	 NUMBER;
11:21:59 660  -- EXCEPTIONS
11:21:59 661  WRONG_INSTR_EXCEPTION	 EXCEPTION;
11:21:59 662  CAN_NOT_GET_DEF_FIN_INSTRUMENT EXCEPTION;
11:21:59 663  EXCEPTION_MESSAGE 	     VARCHAR2(1024);
11:21:59 664  BEGIN
11:21:59 665  
11:21:59 666  	-- Get account id
11:21:59 667  	SELECT
11:21:59 668  	  ACCOUNT.ID INTO var_account_id
11:21:59 669  	FROM
11:21:59 670  	  ACCOUNT
11:21:59 671  	WHERE
11:21:59 672  	  ACCOUNT.GROUP_ID = in_group_id;
11:21:59 673  
11:21:59 674  	-- Check that all passed agruments are valid
11:21:59 675  	IF in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_ACTIVE
11:21:59 676  	  AND in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_INACTIVE
11:21:59 677  	  AND in_instr_status != GLOBAL_STATUSES_V15.PAYPAL_FROZEN THEN
11:21:59 678  	  RAISE WRONG_INSTR_EXCEPTION;
11:21:59 679  	END IF;
11:21:59 680  
11:21:59 681  	-- Retreiving information about paypals
11:21:59 682  	OPEN out_result_pp_set FOR
11:21:59 683  	SELECT
11:21:59 684  	  PAYPAL.ID,
11:21:59 685  	  PAYPAL.ACCOUNT_ID,
11:21:59 686  	  PAYPAL.INSTRUMENT_NAME,
11:21:59 687  	  PAYPAL.PRIVATE_EMAIL_ADDRESS,
11:21:59 688  	  PAYPAL.CREATE_DATE,
11:21:59 689  	  PAYPAL.CREATED_BY,
11:21:59 690  	  PAYPAL.UPDATE_DATE,
11:21:59 691  	  PAYPAL.UPDATED_BY,
11:21:59 692  	  PAYPAL.PAYPAL_STATUS_ID,
11:21:59 693  	  PAYPAL.PRIVATE_STREET_ADDRESS,
11:21:59 694  	  PAYPAL.PRIVATE_STREET_ADDRESS2,
11:21:59 695  	  PAYPAL.STATE,
11:21:59 696  	  PAYPAL.CITY,
11:21:59 697  	  PAYPAL.POSTAL_CODE,
11:21:59 698  	  PAYPAL.COUNTRY,
11:21:59 699  	  PAYPAL.EXPIRATION_DATE,
11:21:59 700  	  PAYPAL.SECRET_TOKEN
11:21:59 701  	FROM
11:21:59 702  	  PAYPAL
11:21:59 703  	WHERE
11:21:59 704  	  PAYPAL.ACCOUNT_ID = var_account_id
11:21:59 705  	  AND PAYPAL.PAYPAL_STATUS_ID = in_instr_status;
11:21:59 706  
11:21:59 707  	-- Get default credit card if exists
11:21:59 708  	BEGIN
11:21:59 709  	  PROCS_FIN_INSTRUMENTS_V15.GET_DEF_FINANCIAL_INSTRUMENT(
11:21:59 710  	    in_group_id 	   => in_group_id,
11:21:59 711  	    out_instrument_type_id => var_def_instrument_type_id,
11:21:59 712  	    out_instrument_id	   => var_def_instrument_id
11:21:59 713  	  );
11:21:59 714  	  EXCEPTION
11:21:59 715  	    WHEN OTHERS THEN
11:21:59 716  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 717  	      RAISE CAN_NOT_GET_DEF_FIN_INSTRUMENT;
11:21:59 718  	END;
11:21:59 719  
11:21:59 720  	IF var_def_instrument_type_id = GLOBAL_ENUMS_V15.INSTRUMENT_PAYPAL THEN
11:21:59 721  	  out_default_id := var_def_instrument_id;
11:21:59 722  	ELSE
11:21:59 723  	  out_default_id := 0;
11:21:59 724  	END IF;
11:21:59 725  
11:21:59 726  EXCEPTION
11:21:59 727  WHEN NO_DATA_FOUND THEN
11:21:59 728  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 729  	  SPROC_NAME, 'Could not find account with given group id');
11:21:59 730  WHEN WRONG_INSTR_EXCEPTION THEN
11:21:59 731  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 732  	  SPROC_NAME, 'Bad paypal status id');
11:21:59 733  WHEN CAN_NOT_GET_DEF_FIN_INSTRUMENT THEN
11:21:59 734  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 735  	  SPROC_NAME, 'Could not get default financial instrument', EXCEPTION_MESSAGE);
11:21:59 736  WHEN OTHERS THEN
11:21:59 737  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 738  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 739  END GET_ACCOUNT_PAYPALS;
11:21:59 740  
11:21:59 741  /******************************************************************************/
11:21:59 742  
11:21:59 743  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
11:21:59 744  /*
11:21:59 745  Throws exceptions:
11:21:59 746  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 747  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 748  */
11:21:59 749  	  in_group_id	 IN  NUMBER,
11:21:59 750  	  in_start_date  IN DATE,
11:21:59 751  	  in_end_date	 IN DATE,
11:21:59 752  	  in_status	 IN NUMBER,
11:21:59 753  	  in_group_account_type IN VARCHAR2,
11:21:59 754  	  out_result_set OUT SYS_REFCURSOR
11:21:59 755  ) AS
11:21:59 756  -- VARIABLES
11:21:59 757  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
11:21:59 758  var_account_id NUMBER;
11:21:59 759  -- EXCEPTIONS
11:21:59 760  BAD_GROUP_ID	      EXCEPTION;
11:21:59 761  BAD_SUBSCRIPTION_STATUS EXCEPTION;
11:21:59 762  BEGIN
11:21:59 763  	-- Check that all passed data is correct
11:21:59 764  	IF in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE
11:21:59 765  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_SUSPENDED
11:21:59 766  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_CANCELED
11:21:59 767  	  AND in_status != GLOBAL_STATUSES_V15.SUBSCRIPTION_CLOSED
11:21:59 768  	THEN
11:21:59 769  	  RAISE BAD_SUBSCRIPTION_STATUS;
11:21:59 770  	END IF;
11:21:59 771  
11:21:59 772  	-- Get account id
11:21:59 773  	BEGIN
11:21:59 774  	  SELECT
11:21:59 775  	    ACCOUNT.ID INTO var_account_id
11:21:59 776  	  FROM
11:21:59 777  	    ACCOUNT
11:21:59 778  	  WHERE
11:21:59 779  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 780  	  EXCEPTION
11:21:59 781  	    WHEN NO_DATA_FOUND THEN
11:21:59 782  	      RAISE BAD_GROUP_ID;
11:21:59 783  	END;
11:21:59 784  
11:21:59 785  	-- Get information about account subscriptions
11:21:59 786  	OPEN out_result_set FOR
11:21:59 787  	SELECT
11:21:59 788  	  in_group_id AS "GROUP_ID",
11:21:59 789  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
11:21:59 790  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
11:21:59 791  	  SUBSCRIPTION.PURCHASE_DATE,
11:21:59 792  	  SUBSCRIPTION.SUSPEND_DATE,
11:21:59 793  	  SUBSCRIPTION.REACTIVATION_DATE,
11:21:59 794  	  SUBSCRIPTION.CANCELLATION_DATE,
11:21:59 795  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
11:21:59 796  	  SUBSCRIPTION.INSTRUMENT_ID,
11:21:59 797  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
11:21:59 798  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
11:21:59 799  	  OFFER_CHAIN.NAME,
11:21:59 800  	  OFFER_CHAIN.DESCRIPTION,
11:21:59 801  	  OFFER_CHAIN.PRODUCT_URI,
11:21:59 802  	  PROCS_SUBSCRIPTION_V15.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
11:21:59 803  	  PROCS_SUBSCRIPTION_V15.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
11:21:59 804  	  PROCS_SUBSCRIPTION_V15.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
11:21:59 805  	  PROCS_SUBSCRIPTION_V15.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
11:21:59 806  	  PROCS_SUBSCRIPTION_V15.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
11:21:59 807  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
11:21:59 808  	  (
11:21:59 809  	    SELECT
11:21:59 810  	      MAX(ENTITLEMENT_END_DATE)
11:21:59 811  	      FROM LICENSE
11:21:59 812  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 813  	  )
11:21:59 814  	  as "ENT_END_DATE",
11:21:59 815  	  (
11:21:59 816  	    SELECT
11:21:59 817  	      MIN(START_DATE)
11:21:59 818  	      FROM LICENSE
11:21:59 819  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 820  	  )
11:21:59 821  	  as "ENT_START_DATE",
11:21:59 822  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
11:21:59 823  	  GROUP_ACCOUNT.ID GA_ID,
11:21:59 824  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
11:21:59 825  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
11:21:59 826  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
11:21:59 827  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
11:21:59 828  	  GROUP_ACCOUNT.PHONE GA_PHONE,
11:21:59 829  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
11:21:59 830  	  GROUP_ACCOUNT.SEATS GA_SEATS,
11:21:59 831  	  PROCS_GROUP_ACCOUNT_V15.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
11:21:59 832  	  GROUP_ACCOUNT.IP GA_IP,
11:21:59 833  	  PROCS_SUBSCRIPTION_V15.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE
11:21:59 834  	FROM
11:21:59 835  	  SUBSCRIPTION
11:21:59 836  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 837  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
11:21:59 838  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
11:21:59 839  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
11:21:59 840  	WHERE
11:21:59 841  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 842  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
11:21:59 843  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
11:21:59 844  	  AND PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
11:21:59 845  	  AND PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V15.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
11:21:59 846  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
11:21:59 847  
11:21:59 848  EXCEPTION
11:21:59 849  WHEN BAD_SUBSCRIPTION_STATUS THEN
11:21:59 850  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 851  	  SPROC_NAME, 'Bad subscription status');
11:21:59 852  WHEN BAD_GROUP_ID THEN
11:21:59 853  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 854  	  SPROC_NAME, 'Can not find account with given group id');
11:21:59 855  WHEN OTHERS THEN
11:21:59 856  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 857  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 858  END GET_ACCOUNT_SUBSCRIPTIONS;
11:21:59 859  
11:21:59 860  /******************************************************************************/
11:21:59 861  
11:21:59 862  PROCEDURE FREEZE_ACCOUNT (
11:21:59 863  /*
11:21:59 864  Throws exceptions:
11:21:59 865  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 866  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 867  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 868  */
11:21:59 869  	in_group_id   IN NUMBER,
11:21:59 870  	in_updated_by IN VARCHAR2,
11:21:59 871  	in_note       IN VARCHAR2,
11:21:59 872  	in_agent_id   IN NUMBER
11:21:59 873  ) AS
11:21:59 874  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
11:21:59 875  -- VARIABLES
11:21:59 876  var_account_id	    NUMBER;
11:21:59 877  var_account_status_id NUMBER;
11:21:59 878  -- EXCEPTIONS
11:21:59 879  BAD_GROUP_ID	    EXCEPTION;
11:21:59 880  BAD_ACCOUNT_STATUS_ID EXCEPTION;
11:21:59 881  CAN_NOT_CREATE_NOTE   EXCEPTION;
11:21:59 882  EXCEPTION_MESSAGE     VARCHAR2(1024);
11:21:59 883  BEGIN
11:21:59 884  
11:21:59 885  	-- Get account status, account id
11:21:59 886  	BEGIN
11:21:59 887  	  SELECT
11:21:59 888  	    ACCOUNT.ID,
11:21:59 889  	    ACCOUNT.ACCOUNT_STATUS_ID
11:21:59 890  	    into
11:21:59 891  	    var_account_id,
11:21:59 892  	    var_account_status_id
11:21:59 893  	  FROM
11:21:59 894  	    ACCOUNT
11:21:59 895  	  WHERE
11:21:59 896  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 897  	  EXCEPTION
11:21:59 898  	    WHEN NO_DATA_FOUND THEN
11:21:59 899  	      RAISE BAD_GROUP_ID;
11:21:59 900  	END;
11:21:59 901  
11:21:59 902  	-- We can freeze only ACTIVE accounts
11:21:59 903  	IF var_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
11:21:59 904  	  AND var_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN THEN
11:21:59 905  	  RAISE BAD_ACCOUNT_STATUS_ID;
11:21:59 906  	END IF;
11:21:59 907  
11:21:59 908  	-- Set account status
11:21:59 909  	PROCS_ACCOUNT_V15.UPDATE_ACCOUNT_STATUS(
11:21:59 910  	  in_account_id        => var_account_id,
11:21:59 911  	  in_updated_by        => in_updated_by,
11:21:59 912  	  in_account_status_id => GLOBAL_STATUSES_V15.ACCOUNT_FROZEN
11:21:59 913  	);
11:21:59 914  
11:21:59 915  	-- Annotate account
11:21:59 916  	BEGIN
11:21:59 917  	  PROCS_ACCOUNT_V15.ANNOTATE_ACCOUNT(
11:21:59 918  	    in_group_id   => in_group_id,
11:21:59 919  	    in_agent_id   => in_agent_id,
11:21:59 920  	    in_note	  => in_note,
11:21:59 921  	    in_created_by => in_updated_by
11:21:59 922  	  );
11:21:59 923  	  EXCEPTION
11:21:59 924  	    WHEN OTHERS THEN
11:21:59 925  	      EXCEPTION_MESSAGE := SQLERRM;
11:21:59 926  	      RAISE CAN_NOT_CREATE_NOTE;
11:21:59 927  	END;
11:21:59 928  
11:21:59 929  EXCEPTION
11:21:59 930  WHEN BAD_GROUP_ID THEN
11:21:59 931  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 932  	  SPROC_NAME, 'No such group id');
11:21:59 933  WHEN BAD_ACCOUNT_STATUS_ID THEN
11:21:59 934  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.STATE_ERROR,
11:21:59 935  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
11:21:59 936  WHEN CAN_NOT_CREATE_NOTE THEN
11:21:59 937  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INTERNAL_ERROR,
11:21:59 938  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
11:21:59 939  WHEN OTHERS THEN
11:21:59 940  	PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 941  	  SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 942  END FREEZE_ACCOUNT;
11:21:59 943  
11:21:59 944  /******************************************************************************/
11:21:59 945  
11:21:59 946  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
11:21:59 947  /*
11:21:59 948  Throws exceptions:
11:21:59 949  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 950  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 951  */
11:21:59 952  	in_group_id	   IN  NUMBER,
11:21:59 953  	in_subscription_id IN NUMBER,
11:21:59 954  	out_result_set	   OUT SYS_REFCURSOR
11:21:59 955  ) AS
11:21:59 956  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
11:21:59 957  -- VARIABLES
11:21:59 958  var_account_id	   NUMBER;
11:21:59 959  temp_subscription_id NUMBER;
11:21:59 960  -- EXCEPTIONS
11:21:59 961  BAD_GROUP_ID	  EXCEPTION;
11:21:59 962  BAD_SUBSCRIPTION_ID EXCEPTION;
11:21:59 963  BEGIN
11:21:59 964  	-- Get account id
11:21:59 965  	BEGIN
11:21:59 966  	  SELECT
11:21:59 967  	    ACCOUNT.ID into var_account_id
11:21:59 968  	  FROM
11:21:59 969  	    ACCOUNT
11:21:59 970  	  WHERE
11:21:59 971  	    ACCOUNT.GROUP_ID = in_group_id;
11:21:59 972  	  EXCEPTION
11:21:59 973  	    WHEN NO_DATA_FOUND THEN
11:21:59 974  	      RAISE BAD_GROUP_ID;
11:21:59 975  	END;
11:21:59 976  
11:21:59 977  	-- Check that subscription exists
11:21:59 978  	BEGIN
11:21:59 979  	  IF in_subscription_id IS NOT NULL THEN
11:21:59 980  	    SELECT
11:21:59 981  	      SUBSCRIPTION.ID into temp_subscription_id
11:21:59 982  	    FROM
11:21:59 983  	      SUBSCRIPTION
11:21:59 984  	    WHERE
11:21:59 985  	      SUBSCRIPTION.ID = in_subscription_id;
11:21:59 986  	  END IF;
11:21:59 987  	  EXCEPTION
11:21:59 988  	    WHEN NO_DATA_FOUND THEN
11:21:59 989  	      RAISE BAD_SUBSCRIPTION_ID;
11:21:59 990  	END;
11:21:59 991  
11:21:59 992  	OPEN out_result_set FOR
11:21:59 993  	SELECT DISTINCT
11:21:59 994  	  INVOICE.ID as "INVOICE_ID",
11:21:59 995  	  INVOICE.CREATE_DATE,
11:21:59 996  	  INVOICE.INVOICE_STATUS_ID,
11:21:59 997  	  PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
11:21:59 998  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
11:21:59 999  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
11:21:59 1000  	   SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
11:21:59 1001  	   NULL as "GC_CODE",
11:21:59 1002  	   NULL as "GC_ID"
11:21:59 1003  	 FROM
11:21:59 1004  	   LICENSE
11:21:59 1005  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 1006  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
11:21:59 1007  	   INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 1008  	 WHERE
11:21:59 1009  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 1010  	   AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != REAL_TIME_CANCEL_REASON)
11:21:59 1011  	   AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
11:21:59 1012  
11:21:59 1013  EXCEPTION
11:21:59 1014  WHEN BAD_GROUP_ID THEN
11:21:59 1015  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1016  	   SPROC_NAME, 'No such account');
11:21:59 1017  WHEN BAD_SUBSCRIPTION_ID THEN
11:21:59 1018  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1019  	   SPROC_NAME, 'No such subscription');
11:21:59 1020  WHEN OTHERS THEN
11:21:59 1021  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1022  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1023  END GET_ACCOUNT_SUBSCR_INVOICES;
11:21:59 1024  
11:21:59 1025  /******************************************************************************/
11:21:59 1026  
11:21:59 1027  PROCEDURE GET_ACCOUNT_GC_INVOICES (
11:21:59 1028  /*
11:21:59 1029  Throws exceptions:
11:21:59 1030  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1031  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1032  */
11:21:59 1033  	 in_group_id	IN  NUMBER,
11:21:59 1034  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1035  ) AS
11:21:59 1036  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
11:21:59 1037  -- VARIABLES
11:21:59 1038  var_account_id NUMBER;
11:21:59 1039  -- EXCEPTIONS
11:21:59 1040  BAD_GROUP_ID EXCEPTION;
11:21:59 1041  BEGIN
11:21:59 1042  	 -- Get account id
11:21:59 1043  	 BEGIN
11:21:59 1044  	   SELECT
11:21:59 1045  	     ACCOUNT.ID into var_account_id
11:21:59 1046  	   FROM
11:21:59 1047  	     ACCOUNT
11:21:59 1048  	   WHERE
11:21:59 1049  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1050  	   EXCEPTION
11:21:59 1051  	     WHEN NO_DATA_FOUND THEN
11:21:59 1052  	       RAISE BAD_GROUP_ID;
11:21:59 1053  	 END;
11:21:59 1054  
11:21:59 1055  	 -- Get invoices
11:21:59 1056  	 OPEN out_result_set FOR
11:21:59 1057  	 SELECT DISTINCT
11:21:59 1058  	   INVOICE.ID as "INVOICE_ID",
11:21:59 1059  	   INVOICE.CREATE_DATE,
11:21:59 1060  	   INVOICE.INVOICE_STATUS_ID,
11:21:59 1061  	   PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
11:21:59 1062  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
11:21:59 1063  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
11:21:59 1064  	   NULL as "SUBSCRIPTION_ID",
11:21:59 1065  	   GIFT_CERTIFICATE.CODE as "GC_CODE",
11:21:59 1066  	   GIFT_CERTIFICATE.ID as "GC_ID"
11:21:59 1067  	 FROM
11:21:59 1068  	   GIFT_CERTIFICATE
11:21:59 1069  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
11:21:59 1070  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 1071  	 WHERE
11:21:59 1072  	   ROWNUM <= 100 AND
11:21:59 1073  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
11:21:59 1074  
11:21:59 1075  EXCEPTION
11:21:59 1076  WHEN BAD_GROUP_ID THEN
11:21:59 1077  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1078  	   SPROC_NAME, 'No such account');
11:21:59 1079  WHEN OTHERS THEN
11:21:59 1080  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1081  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1082  END GET_ACCOUNT_GC_INVOICES;
11:21:59 1083  
11:21:59 1084  /******************************************************************************/
11:21:59 1085  -- norlov: #38580
11:21:59 1086  PROCEDURE GET_GC_INVOICE (
11:21:59 1087  /*
11:21:59 1088  Throws exceptions:
11:21:59 1089  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1090  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1091  */
11:21:59 1092  	 in_group_id	IN  NUMBER,
11:21:59 1093  	 in_gc_code	IN  VARCHAR2,
11:21:59 1094  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1095  ) AS
11:21:59 1096  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
11:21:59 1097  -- VARIABLES
11:21:59 1098  var_account_id NUMBER;
11:21:59 1099  -- EXCEPTIONS
11:21:59 1100  BAD_GROUP_ID EXCEPTION;
11:21:59 1101  BEGIN
11:21:59 1102  	 -- Get account id
11:21:59 1103  	 BEGIN
11:21:59 1104  	   SELECT
11:21:59 1105  	     ACCOUNT.ID into var_account_id
11:21:59 1106  	   FROM
11:21:59 1107  	     ACCOUNT
11:21:59 1108  	   WHERE
11:21:59 1109  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1110  	   EXCEPTION
11:21:59 1111  	     WHEN NO_DATA_FOUND THEN
11:21:59 1112  	       RAISE BAD_GROUP_ID;
11:21:59 1113  	 END;
11:21:59 1114  
11:21:59 1115  	 -- Get invoice for the GC
11:21:59 1116  	 OPEN out_result_set FOR
11:21:59 1117  	 SELECT DISTINCT
11:21:59 1118  	   INVOICE.ID as "INVOICE_ID",
11:21:59 1119  	   INVOICE.CREATE_DATE,
11:21:59 1120  	   INVOICE.INVOICE_STATUS_ID,
11:21:59 1121  	   PROCS_INVOICE_V15.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
11:21:59 1122  	   OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
11:21:59 1123  	   OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
11:21:59 1124  	   NULL as "SUBSCRIPTION_ID",
11:21:59 1125  	   GIFT_CERTIFICATE.CODE as "GC_CODE"
11:21:59 1126  	 FROM
11:21:59 1127  	   GIFT_CERTIFICATE
11:21:59 1128  	   INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
11:21:59 1129  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
11:21:59 1130  	 WHERE
11:21:59 1131  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
11:21:59 1132  	   AND GIFT_CERTIFICATE.CODE = in_gc_code;
11:21:59 1133  
11:21:59 1134  EXCEPTION
11:21:59 1135  WHEN BAD_GROUP_ID THEN
11:21:59 1136  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1137  	   SPROC_NAME, 'No such account');
11:21:59 1138  WHEN OTHERS THEN
11:21:59 1139  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1140  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1141  END GET_GC_INVOICE;
11:21:59 1142  /******************************************************************************/
11:21:59 1143  
11:21:59 1144  PROCEDURE GET_ACCOUNT_PRODUCTS (
11:21:59 1145  /*
11:21:59 1146  Throws exceptions:
11:21:59 1147  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1148  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1149  */
11:21:59 1150  	 in_group_id	IN  NUMBER,
11:21:59 1151  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1152  ) AS
11:21:59 1153  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
11:21:59 1154  -- VARIABLES
11:21:59 1155  var_account_id NUMBER;
11:21:59 1156  -- EXCEPTIONS
11:21:59 1157  BAD_GROUP_ID EXCEPTION;
11:21:59 1158  BEGIN
11:21:59 1159  	 -- Get account id
11:21:59 1160  	 BEGIN
11:21:59 1161  	   SELECT
11:21:59 1162  	     ACCOUNT.ID into var_account_id
11:21:59 1163  	   FROM
11:21:59 1164  	     ACCOUNT
11:21:59 1165  	   WHERE
11:21:59 1166  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1167  	   EXCEPTION
11:21:59 1168  	     WHEN NO_DATA_FOUND THEN
11:21:59 1169  	       RAISE BAD_GROUP_ID;
11:21:59 1170  	 END;
11:21:59 1171  
11:21:59 1172  	 OPEN out_result_set FOR
11:21:59 1173  	 SELECT DISTINCT
11:21:59 1174  	   PRODUCT.ID,
11:21:59 1175  	   PRODUCT.NAME
11:21:59 1176  	 FROM
11:21:59 1177  	   PRODUCT
11:21:59 1178  	 WHERE
11:21:59 1179  	   PRODUCT.ID IN (
11:21:59 1180  	     SELECT DISTINCT
11:21:59 1181  	       PRODUCT_OFFERING.PRODUCT_ID
11:21:59 1182  	     FROM
11:21:59 1183  	       PRODUCT_OFFERING
11:21:59 1184  	     WHERE
11:21:59 1185  	       PRODUCT_OFFERING.ID IN (
11:21:59 1186  		 SELECT DISTINCT
11:21:59 1187  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:59 1188  		 FROM
11:21:59 1189  		   OFFER_PRODUCT_OFFERING
11:21:59 1190  		 WHERE
11:21:59 1191  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:59 1192  		     SELECT DISTINCT
11:21:59 1193  		       OFFER_OFFER_CHAIN.OFFER_ID
11:21:59 1194  		     FROM
11:21:59 1195  		       OFFER_OFFER_CHAIN
11:21:59 1196  		     WHERE
11:21:59 1197  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
11:21:59 1198  			 SELECT DISTINCT
11:21:59 1199  			   SUBSCRIPTION.OFFER_CHAIN_ID
11:21:59 1200  			 FROM
11:21:59 1201  			   SUBSCRIPTION
11:21:59 1202  			 WHERE
11:21:59 1203  			   SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 1204  		       )
11:21:59 1205  		   )
11:21:59 1206  	       )
11:21:59 1207  	   );
11:21:59 1208  
11:21:59 1209  EXCEPTION
11:21:59 1210  WHEN BAD_GROUP_ID THEN
11:21:59 1211  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1212  	   SPROC_NAME, 'No such account');
11:21:59 1213  WHEN OTHERS THEN
11:21:59 1214  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1216  END GET_ACCOUNT_PRODUCTS;
11:21:59 1217  
11:21:59 1218  /******************************************************************************/
11:21:59 1219  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
11:21:59 1220  /*
11:21:59 1221  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 1222  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1223  */
11:21:59 1224  	 in_group_id IN NUMBER,
11:21:59 1225  	 out_result_set     OUT SYS_REFCURSOR
11:21:59 1226  ) AS
11:21:59 1227  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
11:21:59 1228  -- VARIABLES
11:21:59 1229  var_account_id NUMBER;
11:21:59 1230  -- EXCEPTIONS
11:21:59 1231  BAD_GROUP_ID EXCEPTION;
11:21:59 1232  BEGIN
11:21:59 1233  	  -- Get account id
11:21:59 1234  	 BEGIN
11:21:59 1235  	   SELECT
11:21:59 1236  	     ACCOUNT.ID into var_account_id
11:21:59 1237  	   FROM
11:21:59 1238  	     ACCOUNT
11:21:59 1239  	   WHERE
11:21:59 1240  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1241  	   EXCEPTION
11:21:59 1242  	     WHEN NO_DATA_FOUND THEN
11:21:59 1243  	       RAISE BAD_GROUP_ID;
11:21:59 1244  	 END;
11:21:59 1245  
11:21:59 1246  	 OPEN out_result_set FOR
11:21:59 1247  	 SELECT DISTINCT
11:21:59 1248  	   PRODUCT_OFFERING.ID,
11:21:59 1249  	   PRODUCT_OFFERING.PRODUCT_ID,
11:21:59 1250  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
11:21:59 1251  	   PRODUCT_OFFERING.UNIT_PRICE,
11:21:59 1252  	   PRODUCT_OFFERING.QUANTITY,
11:21:59 1253  	   PRODUCT_OFFERING.CREATE_DATE,
11:21:59 1254  	   PRODUCT_OFFERING.CREATED_BY,
11:21:59 1255  	   CAPABILITY.ID CAP_ID,
11:21:59 1256  	   CAPABILITY.CODE CAP_CODE,
11:21:59 1257  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
11:21:59 1258  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
11:21:59 1259  	 FROM
11:21:59 1260  	   OFFER_PRODUCT_OFFERING
11:21:59 1261  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
11:21:59 1262  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
11:21:59 1263  	 WHERE
11:21:59 1264  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
11:21:59 1265  	     SELECT DISTINCT
11:21:59 1266  	       OFFER_OFFER_CHAIN.OFFER_ID
11:21:59 1267  	     FROM
11:21:59 1268  	       OFFER_OFFER_CHAIN
11:21:59 1269  	     WHERE
11:21:59 1270  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
11:21:59 1271  		 SELECT DISTINCT
11:21:59 1272  		   SUBSCRIPTION.OFFER_CHAIN_ID
11:21:59 1273  		 FROM
11:21:59 1274  		   SUBSCRIPTION
11:21:59 1275  		 WHERE
11:21:59 1276  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 1277  	       )
11:21:59 1278  	   );
11:21:59 1279  
11:21:59 1280  EXCEPTION
11:21:59 1281  WHEN BAD_GROUP_ID THEN
11:21:59 1282  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1283  	   SPROC_NAME, 'No such account');
11:21:59 1284  WHEN OTHERS THEN
11:21:59 1285  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1286  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1287  END GET_ACCOUNT_PROD_OFFERRINGS;
11:21:59 1288  
11:21:59 1289  /******************************************************************************/
11:21:59 1290  
11:21:59 1291  PROCEDURE UPDATE_ACCOUNT_STATUS (
11:21:59 1292  /*
11:21:59 1293  Throws exceptions:
11:21:59 1294  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1295  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1296  */
11:21:59 1297  	 in_account_id	      IN ACCOUNT.ID%TYPE,
11:21:59 1298  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
11:21:59 1299  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
11:21:59 1300  ) AS
11:21:59 1301  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
11:21:59 1302  -- EXCEPTIONS
11:21:59 1303  BAD_ACCOUNT_ID	      EXCEPTION;
11:21:59 1304  BAD_STATUS_ID	      EXCEPTION;
11:21:59 1305  EXCEPTION_MESSAGE      VARCHAR2(1024);
11:21:59 1306  BEGIN
11:21:59 1307  
11:21:59 1308  	 IF in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_ACTIVE
11:21:59 1309  	   AND in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_FROZEN
11:21:59 1310  	   AND in_account_status_id != GLOBAL_STATUSES_V15.ACCOUNT_DISABLED THEN
11:21:59 1311  	   RAISE BAD_STATUS_ID;
11:21:59 1312  	 END IF;
11:21:59 1313  
11:21:59 1314  	 PROCS_ACCOUNT_CRU_V15.UPDATE_ACCOUNT(
11:21:59 1315  	   in_account_id	=> in_account_id,
11:21:59 1316  	   in_account_status_id => in_account_status_id,
11:21:59 1317  	   in_updated_by	=> in_updated_by
11:21:59 1318  	 );
11:21:59 1319  
11:21:59 1320  	 IF SQL%ROWCOUNT = 0 THEN
11:21:59 1321  	   RAISE BAD_ACCOUNT_ID;
11:21:59 1322  	 END IF;
11:21:59 1323  
11:21:59 1324  EXCEPTION
11:21:59 1325  WHEN BAD_ACCOUNT_ID THEN
11:21:59 1326  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1327  	   SPROC_NAME, 'No such account');
11:21:59 1328  WHEN BAD_STATUS_ID THEN
11:21:59 1329  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1330  	   SPROC_NAME, 'Bad status id');
11:21:59 1331  WHEN OTHERS THEN
11:21:59 1332  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1333  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1334  END UPDATE_ACCOUNT_STATUS;
11:21:59 1335  
11:21:59 1336  /******************************************************************************/
11:21:59 1337  
11:21:59 1338  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
11:21:59 1339  /*
11:21:59 1340  Throws exceptions:
11:21:59 1341  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1342  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1343  */
11:21:59 1344  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
11:21:59 1345  	 out_licenses_num OUT NUMBER
11:21:59 1346  ) AS
11:21:59 1347  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
11:21:59 1348  -- VARIABLES
11:21:59 1349  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
11:21:59 1350  -- EXCEPTIONS
11:21:59 1351  BAD_ACCOUNT_ID EXCEPTION;
11:21:59 1352  BEGIN
11:21:59 1353  
11:21:59 1354  	 BEGIN
11:21:59 1355  	   SELECT
11:21:59 1356  	     ACCOUNT.ID into var_account_id
11:21:59 1357  	   FROM
11:21:59 1358  	     ACCOUNT
11:21:59 1359  	   WHERE
11:21:59 1360  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1361  	   EXCEPTION
11:21:59 1362  	     WHEN NO_DATA_FOUND THEN
11:21:59 1363  	       RAISE BAD_ACCOUNT_ID;
11:21:59 1364  	 END;
11:21:59 1365  
11:21:59 1366  	 SELECT
11:21:59 1367  	   COUNT(LICENSE.ID) into out_licenses_num
11:21:59 1368  	 FROM
11:21:59 1369  	   LICENSE
11:21:59 1370  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 1371  	 WHERE
11:21:59 1372  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
11:21:59 1373  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 1374  
11:21:59 1375  EXCEPTION
11:21:59 1376  WHEN BAD_ACCOUNT_ID THEN
11:21:59 1377  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1378  	   SPROC_NAME, 'No such group id');
11:21:59 1379  WHEN OTHERS THEN
11:21:59 1380  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1381  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1382  END GET_NEEDS_ENTTL_LICENSES_NUM;
11:21:59 1383  
11:21:59 1384  /******************************************************************************/
11:21:59 1385  
11:21:59 1386  PROCEDURE SET_TAX_EXEMPT (
11:21:59 1387  /*
11:21:59 1388  Throws exceptions:
11:21:59 1389  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1390  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1391  */
11:21:59 1392  	 in_group_id  IN NUMBER,
11:21:59 1393  	 in_exempt_id IN VARCHAR2
11:21:59 1394  ) AS
11:21:59 1395  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
11:21:59 1396  -- VARIABLES
11:21:59 1397  var_account_id NUMBER;
11:21:59 1398  -- EXCEPTIONS
11:21:59 1399  BAD_GROUP_ID EXCEPTION;
11:21:59 1400  BEGIN
11:21:59 1401  
11:21:59 1402  	 BEGIN
11:21:59 1403  	   SELECT
11:21:59 1404  	     ACCOUNT.ID into var_account_id
11:21:59 1405  	   FROM
11:21:59 1406  	     ACCOUNT
11:21:59 1407  	   WHERE
11:21:59 1408  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1409  	   EXCEPTION
11:21:59 1410  	     WHEN NO_DATA_FOUND THEN
11:21:59 1411  	       RAISE BAD_GROUP_ID;
11:21:59 1412  	 END;
11:21:59 1413  
11:21:59 1414  	 UPDATE
11:21:59 1415  	   ACCOUNT
11:21:59 1416  	 SET
11:21:59 1417  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
11:21:59 1418  	 WHERE
11:21:59 1419  	   ACCOUNT.ID = var_account_id;
11:21:59 1420  
11:21:59 1421  EXCEPTION
11:21:59 1422  WHEN BAD_GROUP_ID THEN
11:21:59 1423  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1424  	   SPROC_NAME, 'No such group id');
11:21:59 1425  WHEN OTHERS THEN
11:21:59 1426  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1427  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1428  END SET_TAX_EXEMPT;
11:21:59 1429  
11:21:59 1430  /******************************************************************************/
11:21:59 1431  
11:21:59 1432  PROCEDURE IS_TAX_EXEMPT (
11:21:59 1433  /*
11:21:59 1434  Throws exceptions:
11:21:59 1435  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1436  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1437  Return:
11:21:59 1438  	 GLOBAL_CONSTANTS_V15.TRUE if ACCOUNT.EXEMPT_ID is not null
11:21:59 1439  	 GLOBAL_CONSTANTS_V15.FALSE else
11:21:59 1440  */
11:21:59 1441  	 in_group_id	   IN NUMBER,
11:21:59 1442  	 out_is_tax_exempt OUT NUMBER
11:21:59 1443  ) AS
11:21:59 1444  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
11:21:59 1445  -- VARIABLES
11:21:59 1446  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
11:21:59 1447  -- EXCEPTIONS
11:21:59 1448  BAD_GROUP_ID EXCEPTION;
11:21:59 1449  BEGIN
11:21:59 1450  
11:21:59 1451  	 BEGIN
11:21:59 1452  	   SELECT
11:21:59 1453  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
11:21:59 1454  	   FROM
11:21:59 1455  	     ACCOUNT
11:21:59 1456  	   WHERE
11:21:59 1457  	     ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1458  	   EXCEPTION
11:21:59 1459  	     WHEN NO_DATA_FOUND THEN
11:21:59 1460  	       RAISE BAD_GROUP_ID;
11:21:59 1461  	 END;
11:21:59 1462  
11:21:59 1463  	 IF var_is_tax_exempt IS NULL THEN
11:21:59 1464  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.FALSE;
11:21:59 1465  	 ELSE
11:21:59 1466  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V15.TRUE;
11:21:59 1467  	 END IF;
11:21:59 1468  
11:21:59 1469  EXCEPTION
11:21:59 1470  WHEN BAD_GROUP_ID THEN
11:21:59 1471  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1472  	   SPROC_NAME, 'No such group id');
11:21:59 1473  WHEN OTHERS THEN
11:21:59 1474  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1475  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1476  END IS_TAX_EXEMPT;
11:21:59 1477  
11:21:59 1478  /******************************************************************************/
11:21:59 1479  
11:21:59 1480  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
11:21:59 1481  /*
11:21:59 1482  Throws exceptions:
11:21:59 1483  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1484  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1485  */
11:21:59 1486  	 in_account_id IN NUMBER,
11:21:59 1487  	 out_group_id  OUT NUMBER
11:21:59 1488  ) AS
11:21:59 1489  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
11:21:59 1490  BEGIN
11:21:59 1491  
11:21:59 1492  	 SELECT
11:21:59 1493  	   ACCOUNT.GROUP_ID into out_group_id
11:21:59 1494  	 FROM
11:21:59 1495  	   ACCOUNT
11:21:59 1496  	 WHERE
11:21:59 1497  	   ACCOUNT.ID = in_account_id;
11:21:59 1498  
11:21:59 1499  EXCEPTION
11:21:59 1500  WHEN NO_DATA_FOUND THEN
11:21:59 1501  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1502  	   SPROC_NAME, 'No such account');
11:21:59 1503  WHEN OTHERS THEN
11:21:59 1504  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1505  	   SPROC_NAME, 'Unknown error');
11:21:59 1506  END GET_GROUP_ID_BY_ACCOUNT_ID;
11:21:59 1507  
11:21:59 1508  /******************************************************************************/
11:21:59 1509  
11:21:59 1510  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:59 1511  /*
11:21:59 1512  Throws exceptions:
11:21:59 1513  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1514  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1515  */
11:21:59 1516  	 in_group_id IN NUMBER,
11:21:59 1517  	 out_account_id  OUT NUMBER
11:21:59 1518  ) AS
11:21:59 1519  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
11:21:59 1520  BEGIN
11:21:59 1521  
11:21:59 1522  	 SELECT
11:21:59 1523  	   ACCOUNT.ID into out_account_id
11:21:59 1524  	 FROM
11:21:59 1525  	   ACCOUNT
11:21:59 1526  	 WHERE
11:21:59 1527  	   ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1528  
11:21:59 1529  EXCEPTION
11:21:59 1530  WHEN NO_DATA_FOUND THEN
11:21:59 1531  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1532  	   SPROC_NAME, 'No such account');
11:21:59 1533  WHEN OTHERS THEN
11:21:59 1534  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1535  	   SPROC_NAME, 'Unknown error');
11:21:59 1536  END GET_ACCOUNT_ID_BY_GROUP_ID;
11:21:59 1537  
11:21:59 1538  /******************************************************************************/
11:21:59 1539  
11:21:59 1540  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
11:21:59 1541  /*
11:21:59 1542  This procedure is using for LOCKING only
11:21:59 1543  
11:21:59 1544  Throws exceptions:
11:21:59 1545  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1546  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1547  */
11:21:59 1548  	 in_invoice_id IN NUMBER,
11:21:59 1549  	 out_group_ids OUT SYS_REFCURSOR
11:21:59 1550  ) AS
11:21:59 1551  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
11:21:59 1552  -- VARIABLES
11:21:59 1553  temp_invoice_id		 NUMBER;
11:21:59 1554  var_subscrib_group_id	 NUMBER;
11:21:59 1555  var_gc_purchaser_group_id NUMBER;
11:21:59 1556  var_gc_redeemer_group_id  NUMBER;
11:21:59 1557  -- EXCEPTIONS
11:21:59 1558  BAD_INVOICE_ID	    EXCEPTION;
11:21:59 1559  CAN_NOT_FIND_ACCOUNT EXCEPTION;
11:21:59 1560  BEGIN
11:21:59 1561  
11:21:59 1562  	 BEGIN
11:21:59 1563  	   SELECT
11:21:59 1564  	     INVOICE.ID into temp_invoice_id
11:21:59 1565  	   FROM
11:21:59 1566  	     INVOICE
11:21:59 1567  	   WHERE
11:21:59 1568  	     INVOICE.ID = in_invoice_id;
11:21:59 1569  	   EXCEPTION
11:21:59 1570  	     WHEN NO_DATA_FOUND THEN
11:21:59 1571  	       RAISE BAD_INVOICE_ID;
11:21:59 1572  	 END;
11:21:59 1573  
11:21:59 1574  	 BEGIN
11:21:59 1575  	   SELECT DISTINCT
11:21:59 1576  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
11:21:59 1577  	   FROM
11:21:59 1578  	     ACCOUNT
11:21:59 1579  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
11:21:59 1580  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
11:21:59 1581  	   WHERE
11:21:59 1582  	     LICENSE.INVOICE_ID = in_invoice_id;
11:21:59 1583  	   EXCEPTION
11:21:59 1584  	     WHEN NO_DATA_FOUND THEN
11:21:59 1585  	       var_subscrib_group_id := NULL;
11:21:59 1586  	 END;
11:21:59 1587  
11:21:59 1588  	 IF var_subscrib_group_id IS NULL THEN
11:21:59 1589  	   BEGIN
11:21:59 1590  	     SELECT
11:21:59 1591  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
11:21:59 1592  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
11:21:59 1593  	       into
11:21:59 1594  	       var_gc_purchaser_group_id,
11:21:59 1595  	       var_gc_redeemer_group_id
11:21:59 1596  	     FROM
11:21:59 1597  	       GIFT_CERTIFICATE
11:21:59 1598  	     WHERE
11:21:59 1599  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
11:21:59 1600  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
11:21:59 1601  	     EXCEPTION
11:21:59 1602  	       WHEN NO_DATA_FOUND THEN
11:21:59 1603  		 var_gc_purchaser_group_id := NULL;
11:21:59 1604  		 var_gc_redeemer_group_id  := NULL;
11:21:59 1605  	   END;
11:21:59 1606  	 END IF;
11:21:59 1607  
11:21:59 1608  	 IF var_subscrib_group_id IS NULL
11:21:59 1609  	   AND var_gc_purchaser_group_id IS NULL
11:21:59 1610  	   AND var_gc_redeemer_group_id IS NULL THEN
11:21:59 1611  	     RAISE CAN_NOT_FIND_ACCOUNT;
11:21:59 1612  	 END IF;
11:21:59 1613  
11:21:59 1614  	 OPEN out_group_ids FOR
11:21:59 1615  	 SELECT GROUP_ID FROM (
11:21:59 1616  	   SELECT
11:21:59 1617  	     var_subscrib_group_id as "GROUP_ID"
11:21:59 1618  	   FROM
11:21:59 1619  	     DUAL
11:21:59 1620  	   UNION
11:21:59 1621  	   SELECT
11:21:59 1622  	     var_gc_purchaser_group_id as "GROUP_ID"
11:21:59 1623  	   FROM
11:21:59 1624  	     DUAL
11:21:59 1625  	   UNION
11:21:59 1626  	   SELECT
11:21:59 1627  	     var_gc_redeemer_group_id as "GROUP_ID"
11:21:59 1628  	   FROM
11:21:59 1629  	     DUAL
11:21:59 1630  	 )
11:21:59 1631  	 WHERE
11:21:59 1632  	   GROUP_ID IS NOT NULL;
11:21:59 1633  
11:21:59 1634  EXCEPTION
11:21:59 1635  WHEN BAD_INVOICE_ID THEN
11:21:59 1636  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1637  	   SPROC_NAME, 'No such invoice');
11:21:59 1638  WHEN CAN_NOT_FIND_ACCOUNT THEN
11:21:59 1639  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1640  	   SPROC_NAME, 'Could not find account for given invoice');
11:21:59 1641  WHEN OTHERS THEN
11:21:59 1642  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1643  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1644  END GET_GROUPS_ID_BY_INVOICE_ID;
11:21:59 1645  
11:21:59 1646  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
11:21:59 1647  /*
11:21:59 1648  Throws exceptions:
11:21:59 1649  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1650  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1651  */
11:21:59 1652  	 in_group_id	   IN NUMBER,
11:21:59 1653  	 out_tax_exempt_id OUT VARCHAR2
11:21:59 1654  ) AS
11:21:59 1655  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
11:21:59 1656  -- VARIABLES
11:21:59 1657  -- EXCEPTIONS
11:21:59 1658  BEGIN
11:21:59 1659  
11:21:59 1660  	 SELECT
11:21:59 1661  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
11:21:59 1662  	 FROM
11:21:59 1663  	   ACCOUNT
11:21:59 1664  	 WHERE
11:21:59 1665  	   ACCOUNT.GROUP_ID = in_group_id;
11:21:59 1666  
11:21:59 1667  EXCEPTION
11:21:59 1668  WHEN NO_DATA_FOUND THEN
11:21:59 1669  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1670  	   SPROC_NAME, 'No such account');
11:21:59 1671  WHEN OTHERS THEN
11:21:59 1672  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1673  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1674  END GET_ACCOUNT_TAX_EXEMPT_ID;
11:21:59 1675  
11:21:59 1676  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
11:21:59 1677  /*
11:21:59 1678  Throws exceptions:
11:21:59 1679  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1680  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1681  
11:21:59 1682  Result has two columns:
11:21:59 1683  subscription_id and offer_chain_id
11:21:59 1684  */
11:21:59 1685  	 in_group_id	IN NUMBER,
11:21:59 1686  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1687  ) AS
11:21:59 1688  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
11:21:59 1689  -- Variables
11:21:59 1690  var_account_id NUMBER;
11:21:59 1691  -- Exceptions
11:21:59 1692  BAD_GROUP_ID   EXCEPTION;
11:21:59 1693  BEGIN
11:21:59 1694  
11:21:59 1695  	 BEGIN
11:21:59 1696  	   SELECT
11:21:59 1697  	     ID into var_account_id
11:21:59 1698  	   FROM
11:21:59 1699  	     ACCOUNT
11:21:59 1700  	   WHERE
11:21:59 1701  	     GROUP_ID = in_group_id;
11:21:59 1702  	   EXCEPTION
11:21:59 1703  	     WHEN NO_DATA_FOUND THEN
11:21:59 1704  	       RAISE BAD_GROUP_ID;
11:21:59 1705  	 END;
11:21:59 1706  
11:21:59 1707  	 OPEN out_result_set FOR
11:21:59 1708  	 SELECT
11:21:59 1709  	   S.ID as SUBSCRIPTION_ID,
11:21:59 1710  	   OCHMD.OFFER_CHAIN_ID
11:21:59 1711  	 FROM
11:21:59 1712  	   SUBSCRIPTION S
11:21:59 1713  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
11:21:59 1714  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V15.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
11:21:59 1715  	 WHERE
11:21:59 1716  	   S.ACCOUNT_ID = var_account_id;
11:21:59 1717  
11:21:59 1718  EXCEPTION
11:21:59 1719  WHEN BAD_GROUP_ID THEN
11:21:59 1720  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1721  	   SPROC_NAME, 'No such account');
11:21:59 1722  WHEN OTHERS THEN
11:21:59 1723  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1724  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1725  END GET_UPGRADABLE_SUBSCRIPTIONS;
11:21:59 1726  
11:21:59 1727  /******************************************************************************/
11:21:59 1728  
11:21:59 1729  PROCEDURE GET_USR_ALL_SBSCR_IDS (
11:21:59 1730  /*
11:21:59 1731  Throws exceptions:
11:21:59 1732  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1733  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 1734  
11:21:59 1735  Result has two columns:
11:21:59 1736  subscription_id and offer_chain_id
11:21:59 1737  */
11:21:59 1738  	 in_group_id	    IN NUMBER,
11:21:59 1739  	 out_result_set     OUT SYS_REFCURSOR
11:21:59 1740  ) AS
11:21:59 1741  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
11:21:59 1742  -- VARIABLES
11:21:59 1743  var_account_id NUMBER;
11:21:59 1744  -- EXCEPTIONS
11:21:59 1745  BAD_GROUP_ID EXCEPTION;
11:21:59 1746  BEGIN
11:21:59 1747  
11:21:59 1748  	 BEGIN
11:21:59 1749  	   SELECT
11:21:59 1750  	     A.ID INTO var_account_id
11:21:59 1751  	   FROM
11:21:59 1752  	     ACCOUNT A
11:21:59 1753  	   WHERE
11:21:59 1754  	     A.GROUP_ID = in_group_id;
11:21:59 1755  	   EXCEPTION
11:21:59 1756  	     WHEN NO_DATA_FOUND THEN
11:21:59 1757  	       RAISE BAD_GROUP_ID;
11:21:59 1758  	 END;
11:21:59 1759  
11:21:59 1760  	 OPEN out_result_set FOR
11:21:59 1761  	 SELECT
11:21:59 1762  	   S.ID
11:21:59 1763  	 FROM
11:21:59 1764  	   SUBSCRIPTION S
11:21:59 1765  	 WHERE
11:21:59 1766  	   S.ACCOUNT_ID = var_account_id
11:21:59 1767  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
11:21:59 1768  
11:21:59 1769  EXCEPTION
11:21:59 1770  WHEN BAD_GROUP_ID THEN
11:21:59 1771  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1772  	   SPROC_NAME, 'No such account');
11:21:59 1773  WHEN OTHERS THEN
11:21:59 1774  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1775  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1776  END GET_USR_ALL_SBSCR_IDS;
11:21:59 1777  
11:21:59 1778  /******************************************************************************/
11:21:59 1779  
11:21:59 1780  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
11:21:59 1781  /*
11:21:59 1782  Throws exceptions:
11:21:59 1783  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1784  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1785  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:59 1786  
11:21:59 1787  Result has two columns:
11:21:59 1788  subscription_id and offer_chain_id
11:21:59 1789  */
11:21:59 1790  	 in_group_id	    IN NUMBER,
11:21:59 1791  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
11:21:59 1792  	 out_result_set     OUT SYS_REFCURSOR
11:21:59 1793  ) AS
11:21:59 1794  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
11:21:59 1795  -- VARIABLES
11:21:59 1796  var_account_id NUMBER;
11:21:59 1797  -- EXCEPTIONS
11:21:59 1798  BAD_GROUP_ID	   EXCEPTION;
11:21:59 1799  BAD_OFFER_CHAIN_IDS EXCEPTION;
11:21:59 1800  BEGIN
11:21:59 1801  
11:21:59 1802  	 IF in_offer_chain_ids IS NULL THEN
11:21:59 1803  	   RAISE BAD_OFFER_CHAIN_IDS;
11:21:59 1804  	 END IF;
11:21:59 1805  
11:21:59 1806  	 BEGIN
11:21:59 1807  	   SELECT
11:21:59 1808  	     A.ID INTO var_account_id
11:21:59 1809  	   FROM
11:21:59 1810  	     ACCOUNT A
11:21:59 1811  	   WHERE
11:21:59 1812  	     A.GROUP_ID = in_group_id;
11:21:59 1813  	   EXCEPTION
11:21:59 1814  	     WHEN NO_DATA_FOUND THEN
11:21:59 1815  	       RAISE BAD_GROUP_ID;
11:21:59 1816  	 END;
11:21:59 1817  
11:21:59 1818  	 OPEN out_result_set FOR
11:21:59 1819  	 SELECT
11:21:59 1820  	   S.ID
11:21:59 1821  	 FROM
11:21:59 1822  	   SUBSCRIPTION S
11:21:59 1823  	 WHERE
11:21:59 1824  	   S.ACCOUNT_ID = var_account_id
11:21:59 1825  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
11:21:59 1826  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V15.SUBSCRIPTION_ACTIVE;
11:21:59 1827  
11:21:59 1828  EXCEPTION
11:21:59 1829  WHEN BAD_OFFER_CHAIN_IDS THEN
11:21:59 1830  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.INVALID_PARAMETER,
11:21:59 1831  	   SPROC_NAME, 'Offer chains ids parameter is null');
11:21:59 1832  WHEN BAD_GROUP_ID THEN
11:21:59 1833  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 1834  	   SPROC_NAME, 'No such account');
11:21:59 1835  WHEN OTHERS THEN
11:21:59 1836  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1837  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1838  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
11:21:59 1839  
11:21:59 1840  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
11:21:59 1841  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
11:21:59 1842  	 in_expiration_date IN DATE,
11:21:59 1843  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
11:21:59 1844  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
11:21:59 1845  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
11:21:59 1846  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
11:21:59 1847  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
11:21:59 1848  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
11:21:59 1849  	 in_lower_bound IN NUMBER DEFAULT 1,
11:21:59 1850  	 in_upper_bound IN NUMBER DEFAULT 11,
11:21:59 1851  	 out_result_set OUT SYS_REFCURSOR
11:21:59 1852  ) AS
11:21:59 1853  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
11:21:59 1854  BEGIN
11:21:59 1855  
11:21:59 1856  	 OPEN out_result_set FOR
11:21:59 1857  	     SELECT
11:21:59 1858  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
11:21:59 1859  	     FROM
11:21:59 1860  	       account a,
11:21:59 1861  	       credit_card cc
11:21:59 1862  	     WHERE
11:21:59 1863  	       cc.expiration_date = in_expiration_date and
11:21:59 1864  	       cc.last_four_cc = in_last_four_cc and
11:21:59 1865  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
11:21:59 1866  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
11:21:59 1867  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
11:21:59 1868  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
11:21:59 1869  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
11:21:59 1870  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
11:21:59 1871  	       a.id = cc.account_id and
11:21:59 1872  	       rownum >= in_lower_bound and
11:21:59 1873  	       rownum <= in_upper_bound
11:21:59 1874  	   ;
11:21:59 1875  
11:21:59 1876  EXCEPTION
11:21:59 1877  WHEN OTHERS THEN
11:21:59 1878  	 PROCS_COMMON_V15.THROW_EXCEPTION(APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR,
11:21:59 1879  	   SPROC_NAME, 'Unknown error', SQLERRM);
11:21:59 1880  END GET_GROUP_IDS_BY_CC_INFO;
11:21:59 1881  
11:21:59 1882  END PROCS_ACCOUNT_V15;
11:21:59 1883  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.13
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:59   4  /*
11:21:59   5  Throws exceptions:
11:21:59   6  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59   7  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59   8  */
11:21:59   9  	  in_offer_chain_id IN	 NUMBER,
11:21:59  10  	  out_result_set    OUT  SYS_REFCURSOR
11:21:59  11  ) AS
11:21:59  12  BEGIN
11:21:59  13  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_BY_ID (
11:21:59  14  	  in_offer_chain_id => in_offer_chain_id,
11:21:59  15  	  out_result_set => out_result_set
11:21:59  16  	);
11:21:59  17  END GET_OFFER_CHAIN_BY_ID;
11:21:59  18  
11:21:59  19  PROCEDURE GET_PENDING_INVOICES (
11:21:59  20  /*
11:21:59  21  Throws exceptions:
11:21:59  22  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  23  */
11:21:59  24  	out_result_set1      OUT SYS_REFCURSOR,
11:21:59  25  	out_result_set2      OUT SYS_REFCURSOR,
11:21:59  26  	out_result_set3      OUT SYS_REFCURSOR,
11:21:59  27  	in_row_number	     IN NUMBER DEFAULT NULL
11:21:59  28  ) AS
11:21:59  29  BEGIN
11:21:59  30  	PROCS_INVOICE_V15.GET_PENDING_INVOICES(
11:21:59  31  	  out_result_set1,
11:21:59  32  	  out_result_set2,
11:21:59  33  	  out_result_set3,
11:21:59  34  	  in_row_number
11:21:59  35  	);
11:21:59  36  END GET_PENDING_INVOICES;
11:21:59  37  
11:21:59  38  /********************************************************/
11:21:59  39  PROCEDURE GET_PENDING_REFUND_CHARGES (
11:21:59  40  /*
11:21:59  41  Throws exceptions:
11:21:59  42  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  43  */
11:21:59  44  	out_result_set	    OUT SYS_REFCURSOR,
11:21:59  45  	in_row_number	    IN NUMBER DEFAULT NULL
11:21:59  46  ) AS
11:21:59  47  BEGIN
11:21:59  48  	PROCS_CHARGE_V15.GET_PENDING_REFUND_CHARGES(
11:21:59  49  	  out_result_set,
11:21:59  50  	  in_row_number
11:21:59  51  	);
11:21:59  52  END GET_PENDING_REFUND_CHARGES;
11:21:59  53  /********************************************************/
11:21:59  54  
11:21:59  55  PROCEDURE GET_UNPROCESSED_CHARGES (
11:21:59  56  /*
11:21:59  57  Throws exceptions:
11:21:59  58  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59  59  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  60  */
11:21:59  61  	in_invoice_id  IN NUMBER,
11:21:59  62  	out_result_set OUT SYS_REFCURSOR
11:21:59  63  ) AS
11:21:59  64  BEGIN
11:21:59  65  	PROCS_CHARGE_V15.GET_UNPROCESSED_CHARGES(
11:21:59  66  	  in_invoice_id,
11:21:59  67  	  out_result_set
11:21:59  68  	);
11:21:59  69  END GET_UNPROCESSED_CHARGES;
11:21:59  70  
11:21:59  71  /********************************************************/
11:21:59  72  
11:21:59  73  PROCEDURE GET_PROCESSED_CHARGES (
11:21:59  74  /*
11:21:59  75  Throws exceptions:
11:21:59  76  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59  77  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  78  */
11:21:59  79  	in_invoice_id  IN NUMBER,
11:21:59  80  	out_result_set OUT SYS_REFCURSOR
11:21:59  81  ) AS
11:21:59  82  BEGIN
11:21:59  83  	PROCS_CHARGE_V15.GET_PROCESSED_CHARGES(
11:21:59  84  	  in_invoice_id,
11:21:59  85  	  out_result_set
11:21:59  86  	);
11:21:59  87  END GET_PROCESSED_CHARGES;
11:21:59  88  
11:21:59  89  /********************************************************/
11:21:59  90  
11:21:59  91  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
11:21:59  92  /*
11:21:59  93  Throws exceptions:
11:21:59  94  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  95  */
11:21:59  96  	in_transaction_id	      IN NUMBER,
11:21:59  97  	in_transaction_attempt_status IN NUMBER,
11:21:59  98  	out_result_set		      OUT SYS_REFCURSOR
11:21:59  99  ) AS
11:21:59 100  BEGIN
11:21:59 101  	PROCS_TRANSACTION_V15.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
11:21:59 102  	  in_transaction_id,
11:21:59 103  	  in_transaction_attempt_status,
11:21:59 104  	  out_result_set
11:21:59 105  	);
11:21:59 106  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
11:21:59 107  
11:21:59 108  /********************************************************/
11:21:59 109  
11:21:59 110  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
11:21:59 111  /*
11:21:59 112  Throws exceptions:
11:21:59 113  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 114  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 115  */
11:21:59 116  	in_transaction_attempt_id     IN NUMBER,
11:21:59 117  	in_transaction_attempt_status IN NUMBER
11:21:59 118  ) AS
11:21:59 119  BEGIN
11:21:59 120  	PROCS_TRANSACTION_V15.UPDATE_TRNSCTN_ATTEMPT_STATUS(
11:21:59 121  	   in_transaction_attempt_id,
11:21:59 122  	   in_transaction_attempt_status
11:21:59 123  	);
11:21:59 124  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
11:21:59 125  
11:21:59 126  /********************************************************/
11:21:59 127  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
11:21:59 128  /*
11:21:59 129  Throws exceptions:
11:21:59 130  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 131  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 132  */
11:21:59 133  	in_invoice_id	IN  NUMBER,
11:21:59 134  	out_result_set OUT SYS_REFCURSOR
11:21:59 135  ) AS
11:21:59 136  BEGIN
11:21:59 137  	PROCS_TRANSACTION_V15.GET_CLOSED_REFUNDS_BY_INVOICE(
11:21:59 138  	   in_invoice_id,
11:21:59 139  	   out_result_set
11:21:59 140  	);
11:21:59 141  END GET_CLOSED_REFUNDS_BY_INVOICE;
11:21:59 142  
11:21:59 143  /********************************************************/
11:21:59 144  
11:21:59 145  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
11:21:59 146  /*
11:21:59 147  Throws exceptions:
11:21:59 148  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 149  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 150  */
11:21:59 151  	in_transaction_attempt_id IN NUMBER,
11:21:59 152  	in_updated_by		  IN VARCHAR2
11:21:59 153  ) AS
11:21:59 154  BEGIN
11:21:59 155  	PROCS_TRANSACTION_V15.UPDATE_TRNSCTN_ATTEMPT_TIME(
11:21:59 156  	  in_transaction_attempt_id,
11:21:59 157  	  in_updated_by
11:21:59 158  	);
11:21:59 159  END UPDATE_TRNSCTN_ATTEMPT_TIME;
11:21:59 160  
11:21:59 161  /********************************************************/
11:21:59 162  
11:21:59 163  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
11:21:59 164  /*
11:21:59 165  Throws exceptions:
11:21:59 166  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 167  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 168  */
11:21:59 169  	in_transaction_id	   IN NUMBER,
11:21:59 170  	in_trans_attempt_status    IN NUMBER,
11:21:59 171  	in_external_status_code    IN VARCHAR2,
11:21:59 172  	in_external_status_message IN VARCHAR2,
11:21:59 173  	in_created_by		   IN VARCHAR2,
11:21:59 174  	in_ext_transaction_id	   IN VARCHAR2,
11:21:59 175  	out_transaction_attempt_id OUT NUMBER
11:21:59 176  ) AS
11:21:59 177  BEGIN
11:21:59 178  	PROCS_TRANSACTION_V15.CREATE_TRANSACTION_ATTEMPT(
11:21:59 179  	  in_transaction_id,
11:21:59 180  	  in_trans_attempt_status,
11:21:59 181  	  in_external_status_code,
11:21:59 182  	  in_external_status_message,
11:21:59 183  	  in_created_by,
11:21:59 184  	  in_ext_transaction_id,
11:21:59 185  	  out_transaction_attempt_id
11:21:59 186  	);
11:21:59 187  END CREATE_TRANSACTION_ATTEMPT;
11:21:59 188  
11:21:59 189  /********************************************************/
11:21:59 190  
11:21:59 191  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
11:21:59 192  /*
11:21:59 193  Throws exceptions:
11:21:59 194  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 195  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 196  */
11:21:59 197  	in_transaction_attempt_id IN NUMBER,
11:21:59 198  	in_ext_status_code	  IN VARCHAR2,
11:21:59 199  	in_ext_status_message	  IN VARCHAR2,
11:21:59 200  	in_ext_transaction_id	  IN VARCHAR2
11:21:59 201  ) AS
11:21:59 202  BEGIN
11:21:59 203  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_ATTEMPT_INF(
11:21:59 204  	  in_transaction_attempt_id,
11:21:59 205  	  in_ext_status_code,
11:21:59 206  	  in_ext_status_message,
11:21:59 207  	  in_ext_transaction_id
11:21:59 208  	);
11:21:59 209  END UPDATE_TRANSACTION_ATTEMPT_INF;
11:21:59 210  
11:21:59 211  /********************************************************/
11:21:59 212  
11:21:59 213  PROCEDURE UPDATE_TRANSACTION_STATUS (
11:21:59 214  /*
11:21:59 215  Throws exceptions:
11:21:59 216  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 217  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 218  */
11:21:59 219  	in_transaction_id	 IN NUMBER,
11:21:59 220  	in_updated_by		 IN VARCHAR2,
11:21:59 221  	in_transaction_status_id IN NUMBER
11:21:59 222  ) AS
11:21:59 223  BEGIN
11:21:59 224  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_STATUS(
11:21:59 225  	  in_transaction_id,
11:21:59 226  	  in_updated_by,
11:21:59 227  	  in_transaction_status_id
11:21:59 228  	);
11:21:59 229  END UPDATE_TRANSACTION_STATUS;
11:21:59 230  
11:21:59 231  /********************************************************/
11:21:59 232  
11:21:59 233  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
11:21:59 234  /*
11:21:59 235  Throws exceptions:
11:21:59 236  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 237  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 238  */
11:21:59 239  	in_transaction_id IN  NUMBER,
11:21:59 240  	out_attempts_num  OUT NUMBER
11:21:59 241  ) AS
11:21:59 242  BEGIN
11:21:59 243  	PROCS_TRANSACTION_V15.GET_FAILED_ATTEMPTS_NUMBER(
11:21:59 244  	  in_transaction_id,
11:21:59 245  	  out_attempts_num
11:21:59 246  	);
11:21:59 247  END GET_FAILED_ATTEMPTS_NUMBER;
11:21:59 248  
11:21:59 249  /********************************************************/
11:21:59 250  
11:21:59 251  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
11:21:59 252  /*
11:21:59 253  Throws exceptions:
11:21:59 254  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 255  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 256  */
11:21:59 257  	in_transaction_id IN  NUMBER,
11:21:59 258  	out_is_successfull  OUT NUMBER
11:21:59 259  ) AS
11:21:59 260  BEGIN
11:21:59 261  	PROCS_TRANSACTION_V15.IS_TRANSACTION_SUCCESSFULL(
11:21:59 262  	  in_transaction_id,
11:21:59 263  	  out_is_successfull
11:21:59 264  	);
11:21:59 265  END IS_TRANSACTION_SUCCESSFULL;
11:21:59 266  /********************************************************/
11:21:59 267  
11:21:59 268  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:59 269  /*
11:21:59 270  Throws exceptions:
11:21:59 271  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 272  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 273  */
11:21:59 274  	in_invoice_id		       IN NUMBER,
11:21:59 275  	in_invoice_status_id	       IN NUMBER,
11:21:59 276  	in_updated_by		       IN VARCHAR2
11:21:59 277  ) AS
11:21:59 278  BEGIN
11:21:59 279  	PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
11:21:59 280  	  in_invoice_id,
11:21:59 281  	  in_invoice_status_id,
11:21:59 282  	  in_updated_by
11:21:59 283  	);
11:21:59 284  END UPDATE_INVOICE_STATUS;
11:21:59 285  
11:21:59 286  /********************************************************/
11:21:59 287  
11:21:59 288  PROCEDURE SUSPEND_SUBSCRIPTION(
11:21:59 289  /*
11:21:59 290  Throws exceptions:
11:21:59 291  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 292  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 293  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 294  */
11:21:59 295  	  in_subs_id	IN NUMBER ,
11:21:59 296  	  in_updated_by IN VARCHAR2
11:21:59 297  ) AS
11:21:59 298  BEGIN
11:21:59 299  	PROCS_SUBSCRIPTION_V15.SUSPEND_SUBSCRIPTION(
11:21:59 300  	  in_subs_id,
11:21:59 301  	  in_updated_by
11:21:59 302  	);
11:21:59 303  END SUSPEND_SUBSCRIPTION;
11:21:59 304  
11:21:59 305  /********************************************************/
11:21:59 306  
11:21:59 307  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:59 308  /*
11:21:59 309  Throws exceptions:
11:21:59 310  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 311  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 312  */
11:21:59 313  	in_credit_card_id IN  NUMBER,
11:21:59 314  	out_result_set	  OUT SYS_REFCURSOR
11:21:59 315  ) AS
11:21:59 316  BEGIN
11:21:59 317  	PROCS_FIN_INSTRUMENTS_V15.GET_CREDIT_CARD_BY_ID(
11:21:59 318  	  in_credit_card_id,
11:21:59 319  	  out_result_set
11:21:59 320  	);
11:21:59 321  END GET_CREDIT_CARD_BY_ID;
11:21:59 322  
11:21:59 323  /*********************************************************/
11:21:59 324  
11:21:59 325  PROCEDURE GET_TRANSACTION_AMOUNT (
11:21:59 326  /*
11:21:59 327  Throws exceptions:
11:21:59 328  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 329  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 330  */
11:21:59 331  	in_transaction_id      IN  NUMBER,
11:21:59 332  	out_transaction_amount OUT NUMBER
11:21:59 333  ) AS
11:21:59 334  BEGIN
11:21:59 335  	PROCS_TRANSACTION_V15.GET_TRANSACTION_AMOUNT(
11:21:59 336  	  in_transaction_id,
11:21:59 337  	  out_transaction_amount
11:21:59 338  	);
11:21:59 339  END GET_TRANSACTION_AMOUNT;
11:21:59 340  
11:21:59 341  /***********************************************************/
11:21:59 342  
11:21:59 343  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
11:21:59 344  /*
11:21:59 345  Throws exceptions:
11:21:59 346  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 347  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 348  */
11:21:59 349  	in_invoice_id  IN  NUMBER,
11:21:59 350  	out_account_id OUT NUMBER
11:21:59 351  ) AS
11:21:59 352  BEGIN
11:21:59 353  	PROCS_INVOICE_V15.GET_ACCOUNT_BY_INVOICE_ID(
11:21:59 354  	  in_invoice_id,
11:21:59 355  	  out_account_id
11:21:59 356  	);
11:21:59 357  END GET_ACCOUNT_BY_INVOICE_ID;
11:21:59 358  
11:21:59 359  /************************************************************/
11:21:59 360  
11:21:59 361  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
11:21:59 362  /*
11:21:59 363  Throws exceptions:
11:21:59 364  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 365  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 366  */
11:21:59 367  	in_gift_certificate_id IN NUMBER,
11:21:59 368  	out_result_set	       OUT SYS_REFCURSOR
11:21:59 369  ) AS
11:21:59 370  BEGIN
11:21:59 371  	PROCS_FIN_INSTRUMENTS_V15.GET_GIFT_CERTIFICATE_BY_ID (
11:21:59 372  	  in_gift_certificate_id,
11:21:59 373  	  out_result_set
11:21:59 374  	);
11:21:59 375  END GET_GIFT_CERTIFICATE_BY_ID;
11:21:59 376  
11:21:59 377  /**************************************************************/
11:21:59 378  
11:21:59 379  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
11:21:59 380  /*
11:21:59 381  Throws exceptions:
11:21:59 382  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 383  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 384  */
11:21:59 385  	in_charge_id	    IN NUMBER,
11:21:59 386  	out_subscription_id OUT NUMBER
11:21:59 387  ) AS
11:21:59 388  BEGIN
11:21:59 389  	PROCS_CHARGE_V15.GET_SUBSCR_ID_BY_CHARGE_ID(
11:21:59 390  	  in_charge_id,
11:21:59 391  	  out_subscription_id
11:21:59 392  	);
11:21:59 393  END GET_SUBSCR_ID_BY_CHARGE_ID;
11:21:59 394  
11:21:59 395  /**************************************************************/
11:21:59 396  
11:21:59 397  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
11:21:59 398  /*
11:21:59 399  Throws exceptions:
11:21:59 400  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 401  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 402  */
11:21:59 403  	in_gift_certificate_id IN NUMBER,
11:21:59 404  	in_charge_id	       IN NUMBER,
11:21:59 405  	out_result	       OUT NUMBER
11:21:59 406  ) AS
11:21:59 407  BEGIN
11:21:59 408  	PROCS_FIN_INSTRUMENTS_V15.IS_GCERT_FOR_PROPER_OFFER (
11:21:59 409  	  in_gift_certificate_id,
11:21:59 410  	  in_charge_id,
11:21:59 411  	  out_result
11:21:59 412  	);
11:21:59 413  END IS_GCERT_FOR_PROPER_OFFER;
11:21:59 414  
11:21:59 415  /**************************************************************/
11:21:59 416  
11:21:59 417  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:59 418  /*
11:21:59 419  Throws exceptions:
11:21:59 420  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 421  */
11:21:59 422  	  in_subscription_id IN  NUMBER,
11:21:59 423  	  out_result_set      OUT SYS_REFCURSOR
11:21:59 424  ) AS
11:21:59 425  BEGIN
11:21:59 426  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTION_INFO (
11:21:59 427  	  in_subscription_id,
11:21:59 428  	  out_result_set
11:21:59 429  	);
11:21:59 430  END GET_SUBSCRIPTION_INFO;
11:21:59 431  
11:21:59 432  /****************************************************************/
11:21:59 433  
11:21:59 434  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:59 435  /*
11:21:59 436  Throws exceptions:
11:21:59 437  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 438  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 439  */
11:21:59 440  	in_invoice_id IN  NUMBER,
11:21:59 441  	out_amount    OUT NUMBER
11:21:59 442  ) AS
11:21:59 443  BEGIN
11:21:59 444  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
11:21:59 445  	  in_invoice_id,
11:21:59 446  	  out_amount
11:21:59 447  	);
11:21:59 448  END CALCULATE_INVOICE_AMOUNT;
11:21:59 449  
11:21:59 450  /****************************************************************/
11:21:59 451  
11:21:59 452  PROCEDURE GET_TRANSACTION_BY_ID (
11:21:59 453  /*
11:21:59 454  Throws exceptions:
11:21:59 455  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 456  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 457  */
11:21:59 458  	in_transaction_id IN NUMBER,
11:21:59 459  	out_result_set	  OUT SYS_REFCURSOR
11:21:59 460  ) AS
11:21:59 461  BEGIN
11:21:59 462  	PROCS_TRANSACTION_V15.GET_TRANSACTION_BY_ID(
11:21:59 463  	  in_transaction_id,
11:21:59 464  	  out_result_set
11:21:59 465  	);
11:21:59 466  END GET_TRANSACTION_BY_ID;
11:21:59 467  
11:21:59 468  /****************************************************************/
11:21:59 469  
11:21:59 470  PROCEDURE UPDATE_CHARGE_STATUS (
11:21:59 471  /*
11:21:59 472  Throws exceptions:
11:21:59 473  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 474  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 475  */
11:21:59 476  	in_charge_id	    IN CHARGE.ID%TYPE,
11:21:59 477  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
11:21:59 478  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
11:21:59 479  ) AS
11:21:59 480  BEGIN
11:21:59 481  	PROCS_CHARGE_V15.UPDATE_CHARGE_STATUS(
11:21:59 482  	  in_charge_id,
11:21:59 483  	  in_charge_status_id,
11:21:59 484  	  in_updated_by
11:21:59 485  	);
11:21:59 486  END UPDATE_CHARGE_STATUS;
11:21:59 487  
11:21:59 488  /****************************************************************/
11:21:59 489  
11:21:59 490  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:59 491  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59 492  	out_result_set OUT SYS_REFCURSOR
11:21:59 493  ) AS
11:21:59 494  BEGIN
11:21:59 495  	PROCS_FIN_INSTRUMENTS_V15.GET_GC_BY_PURCH_INVOICE_ID(
11:21:59 496  	  in_invoice_id,
11:21:59 497  	  out_result_set
11:21:59 498  	);
11:21:59 499  END GET_GC_BY_PURCH_INVOICE_ID;
11:21:59 500  
11:21:59 501  /****************************************************************/
11:21:59 502  
11:21:59 503  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
11:21:59 504  /*
11:21:59 505  Throws exceptions:
11:21:59 506  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 507  APP_EXCEPTION_CODES_V15.INTRNAL_ERROR
11:21:59 508  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 509  */
11:21:59 510  	in_transaction_id IN TRANSACTION.ID%TYPE,
11:21:59 511  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
11:21:59 512  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
11:21:59 513  ) AS
11:21:59 514  BEGIN
11:21:59 515  	PROCS_TRANSACTION_V15.UPDATE_TRANSACTION_ORDER_ID(
11:21:59 516  	  in_transaction_id,
11:21:59 517  	  in_order_id,
11:21:59 518  	  in_updated_by
11:21:59 519  	);
11:21:59 520  END UPDATE_TRANSACTION_ORDER_ID;
11:21:59 521  
11:21:59 522  /****************************************************************/
11:21:59 523  
11:21:59 524  PROCEDURE GET_ACTIVE_INVOICES_IDS (
11:21:59 525  /*
11:21:59 526  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 527  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 528  */
11:21:59 529  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
11:21:59 530  	in_subscription_id IN NUMBER,
11:21:59 531  	out_result_set	   OUT SYS_REFCURSOR
11:21:59 532  ) AS
11:21:59 533  BEGIN
11:21:59 534  	PROCS_SUBSCRIPTION_V15.GET_ACTIVE_INVOICES_IDS(
11:21:59 535  	  in_subscription_id,
11:21:59 536  	  out_result_set
11:21:59 537  	);
11:21:59 538  END GET_ACTIVE_INVOICES_IDS;
11:21:59 539  
11:21:59 540  /****************************************************************/
11:21:59 541  
11:21:59 542  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
11:21:59 543  /*
11:21:59 544  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 545  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 546  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 547  */
11:21:59 548  --  in_invoice_id        IN INVOICE.ID%TYPE,
11:21:59 549  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
11:21:59 550  -- norlov: in_refundable	      IN refund enabled
11:21:59 551  	in_invoice_id	     IN NUMBER,
11:21:59 552  	in_updated_by	     IN VARCHAR2,
11:21:59 553  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V15.FALSE
11:21:59 554  --  in_cancellation_date IN DATE DEFAULT current_timestamp
11:21:59 555  ) AS
11:21:59 556  BEGIN
11:21:59 557  	PROCS_SUBSCRIPTION_V15.CANCEL_SUBSCRIPTION_INVOICE(
11:21:59 558  	  in_invoice_id,
11:21:59 559  	  in_updated_by,
11:21:59 560  	  in_refundable
11:21:59 561  	);
11:21:59 562  END CANCEL_SUBSCRIPTION_INVOICE;
11:21:59 563  
11:21:59 564  /****************************************************************/
11:21:59 565  
11:21:59 566  PROCEDURE FINALIZE_CANCELATION (
11:21:59 567  /*
11:21:59 568  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 569  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 570  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 571  */
11:21:59 572  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
11:21:59 573  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
11:21:59 574  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
11:21:59 575  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
11:21:59 576  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
11:21:59 577  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
11:21:59 578  	in_subscription_id    IN NUMBER,
11:21:59 579  	in_cancelation_reason IN VARCHAR2,
11:21:59 580  	in_cancelation_date   IN DATE,
11:21:59 581  	in_note 	      IN VARCHAR2,
11:21:59 582  	in_agent_id	      IN NUMBER,
11:21:59 583  	in_updated_by	      IN VARCHAR2
11:21:59 584  ) AS
11:21:59 585  BEGIN
11:21:59 586  	PROCS_SUBSCRIPTION_V15.FINALIZE_CANCELATION(
11:21:59 587  	  in_subscription_id,
11:21:59 588  	  in_cancelation_reason,
11:21:59 589  	  in_cancelation_date,
11:21:59 590  	  in_note,
11:21:59 591  	  in_agent_id,
11:21:59 592  	  in_updated_by
11:21:59 593  	);
11:21:59 594  END FINALIZE_CANCELATION;
11:21:59 595  
11:21:59 596  /****************************************************************/
11:21:59 597  
11:21:59 598  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
11:21:59 599  /*
11:21:59 600  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 601  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 602  */
11:21:59 603  	in_subscription_id IN NUMBER,
11:21:59 604  	out_result_set	   OUT SYS_REFCURSOR
11:21:59 605  ) AS
11:21:59 606  BEGIN
11:21:59 607  	PROCS_SUBSCRIPTION_V15.GET_SUBSCR_PROD_OFFERRINGS(
11:21:59 608  	  in_subscription_id,
11:21:59 609  	  out_result_set
11:21:59 610  	);
11:21:59 611  END GET_SUBSCR_PROD_OFFERRINGS;
11:21:59 612  
11:21:59 613  /****************************************************************/
11:21:59 614  
11:21:59 615  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:59 616  /*
11:21:59 617  Throws exceptions (codes):
11:21:59 618  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 619  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 620  */
11:21:59 621  	in_offer_chain_id IN NUMBER,
11:21:59 622  	in_meta_data_name IN VARCHAR2,
11:21:59 623  	out_result_set	  OUT SYS_REFCURSOR
11:21:59 624  )AS
11:21:59 625  BEGIN
11:21:59 626  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_META_DATA(
11:21:59 627  	  in_offer_chain_id,
11:21:59 628  	  in_meta_data_name,
11:21:59 629  	  out_result_set
11:21:59 630  	);
11:21:59 631  END GET_OFFER_CHAIN_META_DATA;
11:21:59 632  
11:21:59 633  /****************************************************************/
11:21:59 634  
11:21:59 635  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:59 636  /*
11:21:59 637  Throws exceptions (codes):
11:21:59 638  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 639  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 640  */
11:21:59 641  	in_product_offering_id IN NUMBER,
11:21:59 642  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
11:21:59 643  	out_result_set	       OUT SYS_REFCURSOR
11:21:59 644  )AS
11:21:59 645  BEGIN
11:21:59 646  	PROCS_OFFER_CHAIN_V15.GET_PRODUCT_OFFERING_META_DATA(
11:21:59 647  	  in_product_offering_id,
11:21:59 648  	  in_meta_data_name,
11:21:59 649  	  out_result_set
11:21:59 650  	);
11:21:59 651  END GET_PRODUCT_OFFERING_META_DATA;
11:21:59 652  
11:21:59 653  /****************************************************************/
11:21:59 654  
11:21:59 655  PROCEDURE READ_ACCOUNT (
11:21:59 656  	in_account_id  IN ACCOUNT.ID%TYPE,
11:21:59 657  	out_result_set OUT SYS_REFCURSOR
11:21:59 658  )AS
11:21:59 659  BEGIN
11:21:59 660  	PROCS_ACCOUNT_CRU_V15.READ_ACCOUNT(
11:21:59 661  	  in_account_id,
11:21:59 662  	  out_result_set
11:21:59 663  	);
11:21:59 664  END READ_ACCOUNT;
11:21:59 665  
11:21:59 666  /****************************************************************/
11:21:59 667  
11:21:59 668  PROCEDURE GET_COLLECTED_CHARGES (
11:21:59 669  /*
11:21:59 670  Throws exceptions:
11:21:59 671  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 672  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 673  */
11:21:59 674  	in_invoice_id  IN NUMBER,
11:21:59 675  	out_result_set OUT SYS_REFCURSOR
11:21:59 676  ) AS
11:21:59 677  BEGIN
11:21:59 678  	PROCS_CHARGE_V15.GET_COLLECTED_CHARGES(
11:21:59 679  	  in_invoice_id,
11:21:59 680  	  out_result_set
11:21:59 681  	);
11:21:59 682  END GET_COLLECTED_CHARGES;
11:21:59 683  
11:21:59 684  /****************************************************************/
11:21:59 685  
11:21:59 686  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
11:21:59 687  /*
11:21:59 688  Throws exceptions:
11:21:59 689  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 690  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 691  */
11:21:59 692  	in_invoice_id IN NUMBER,
11:21:59 693  	out_group_ids OUT SYS_REFCURSOR
11:21:59 694  ) AS
11:21:59 695  BEGIN
11:21:59 696  
11:21:59 697  	PROCS_ACCOUNT_V15.GET_GROUPS_ID_BY_INVOICE_ID(
11:21:59 698  	  in_invoice_id,
11:21:59 699  	  out_group_ids
11:21:59 700  	);
11:21:59 701  
11:21:59 702  END GET_GROUPS_ID_BY_INVOICE_ID;
11:21:59 703  
11:21:59 704  /****************************************************************/
11:21:59 705  
11:21:59 706  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:59 707  /*
11:21:59 708  Throws exceptions:
11:21:59 709  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 710  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 711  */
11:21:59 712  	in_group_id IN NUMBER,
11:21:59 713  	out_account_id	OUT NUMBER
11:21:59 714  ) AS
11:21:59 715  BEGIN
11:21:59 716  
11:21:59 717  	PROCS_ACCOUNT_V15.GET_ACCOUNT_ID_BY_GROUP_ID(
11:21:59 718  	  in_group_id,
11:21:59 719  	  out_account_id
11:21:59 720  	);
11:21:59 721  
11:21:59 722  END GET_ACCOUNT_ID_BY_GROUP_ID;
11:21:59 723  
11:21:59 724  /****************************************************************/
11:21:59 725  
11:21:59 726  PROCEDURE LOCK_ACCOUNT (
11:21:59 727  	in_group_id    IN NUMBER,
11:21:59 728  	in_lock_key    IN VARCHAR2,
11:21:59 729  	in_seconds_num IN NUMBER,
11:21:59 730  	in_created_by  IN VARCHAR2,
11:21:59 731  	in_reason      IN VARCHAR2
11:21:59 732  ) AS
11:21:59 733  BEGIN
11:21:59 734  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
11:21:59 735  	  in_group_id,
11:21:59 736  	  in_lock_key,
11:21:59 737  	  in_seconds_num,
11:21:59 738  	  in_created_by,
11:21:59 739  	  in_reason
11:21:59 740  	);
11:21:59 741  END LOCK_ACCOUNT;
11:21:59 742  
11:21:59 743  /****************************************************************/
11:21:59 744  
11:21:59 745  PROCEDURE RELEASE_LOCK (
11:21:59 746  	in_group_id IN NUMBER,
11:21:59 747  	in_lock_key IN VARCHAR2
11:21:59 748  ) AS
11:21:59 749  BEGIN
11:21:59 750  	PROCS_LOCKING_V15.RELEASE_LOCK(
11:21:59 751  	  in_group_id,
11:21:59 752  	  in_lock_key
11:21:59 753  	);
11:21:59 754  END RELEASE_LOCK;
11:21:59 755  
11:21:59 756  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
11:21:59 757  	in_invoice_id		    IN NUMBER,
11:21:59 758  	out_order_id		    OUT VARCHAR2,
11:21:59 759  	out_external_transaction_id OUT VARCHAR2
11:21:59 760  ) AS
11:21:59 761  BEGIN
11:21:59 762  	PROCS_INVOICE_V15.GET_PAYMENT_INFO_BY_INVOICE_ID(
11:21:59 763  	  in_invoice_id,
11:21:59 764  	  out_order_id,
11:21:59 765  	  out_external_transaction_id
11:21:59 766  	);
11:21:59 767  END GET_PAYMENT_INFO_BY_INVOICE_ID;
11:21:59 768  
11:21:59 769  /******************************************************************************/
11:21:59 770  
11:21:59 771  PROCEDURE GET_PAYPAL_BY_ID (
11:21:59 772  	in_paypal_id   IN  NUMBER,
11:21:59 773  	out_result_set OUT SYS_REFCURSOR
11:21:59 774  ) AS
11:21:59 775  BEGIN
11:21:59 776  	PROCS_FIN_INSTRUMENTS_V15.GET_PAYPAL_BY_ID(
11:21:59 777  	  in_paypal_id,
11:21:59 778  	  out_result_set
11:21:59 779  	);
11:21:59 780  END GET_PAYPAL_BY_ID;
11:21:59 781  
11:21:59 782  PROCEDURE GET_ATTEMPT_NUMBER (
11:21:59 783  /*
11:21:59 784  Throws exceptions:
11:21:59 785  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 786  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 787  */
11:21:59 788  	in_charge_id   in  number,
11:21:59 789  	out_attempt_count out number
11:21:59 790  ) as
11:21:59 791  begin
11:21:59 792  	PROCS_TRANSACTION_V15.GET_ATTEMPT_NUMBER(
11:21:59 793  	  in_charge_id,
11:21:59 794  	  out_attempt_count
11:21:59 795  	);
11:21:59 796  end get_attempt_number;
11:21:59 797  
11:21:59 798  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:59 799  	in_offer_chain_id	 IN NUMBER,
11:21:59 800  	in_action_name		 IN VARCHAR2,
11:21:59 801  	out_notification_type_id out number
11:21:59 802  ) as
11:21:59 803  begin
11:21:59 804  	PROCS_OFFER_CHAIN_V15.GET_NOTIFICATION_TYPE_ID(
11:21:59 805  	  in_offer_chain_id,
11:21:59 806  	  in_action_name,
11:21:59 807  	  out_notification_type_id
11:21:59 808  	);
11:21:59 809  end GET_NOTIFICATION_TYPE_ID;
11:21:59 810  
11:21:59 811  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
11:21:59 812  /*
11:21:59 813  Throws exceptions:
11:21:59 814  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 815  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 816  */
11:21:59 817  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59 818  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
11:21:59 819  ) AS
11:21:59 820  BEGIN
11:21:59 821  PROCS_FIN_INSTRUMENTS_V15.GET_GC_ID_BY_PURCH_INVOICE_ID(
11:21:59 822  in_invoice_id,
11:21:59 823  out_gift_certificate_id
11:21:59 824  );
11:21:59 825  END GET_GC_ID_BY_PURCH_INVOICE_ID;
11:21:59 826  
11:21:59 827  END PUBLIC_PROCS_BILLING_V15;
11:21:59 828  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.04
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE LOCK_ACCOUNT (
11:21:59   4  	in_group_id    IN NUMBER,
11:21:59   5  	in_lock_key    IN VARCHAR2,
11:21:59   6  	in_seconds_num IN NUMBER,
11:21:59   7  	in_created_by  IN VARCHAR2,
11:21:59   8  	in_reason      IN VARCHAR2
11:21:59   9  ) AS
11:21:59  10  BEGIN
11:21:59  11  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
11:21:59  12  	  in_group_id,
11:21:59  13  	  in_lock_key,
11:21:59  14  	  in_seconds_num,
11:21:59  15  	  in_created_by,
11:21:59  16  	  in_reason
11:21:59  17  	);
11:21:59  18  END LOCK_ACCOUNT;
11:21:59  19  
11:21:59  20  /******************************************************************************/
11:21:59  21  
11:21:59  22  PROCEDURE RELEASE_LOCK (
11:21:59  23  	in_group_id IN NUMBER,
11:21:59  24  	in_lock_key IN VARCHAR2
11:21:59  25  ) AS
11:21:59  26  BEGIN
11:21:59  27  	PROCS_LOCKING_V15.RELEASE_LOCK(
11:21:59  28  	  in_group_id,
11:21:59  29  	  in_lock_key
11:21:59  30  	);
11:21:59  31  END RELEASE_LOCK;
11:21:59  32  
11:21:59  33  END PUBLIC_PROCS_NOTIFICATION_V15;
11:21:59  34  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.02
11:21:59 SQL> 
11:21:59 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V15" AS
11:21:59   2  
11:21:59   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
11:21:59   4  	out_result_set OUT SYS_REFCURSOR
11:21:59   5  ) AS
11:21:59   6  BEGIN
11:21:59   7  	PROCS_GROUP_ACCOUNT_V15.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
11:21:59   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
11:21:59   9  
11:21:59  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
11:21:59  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
11:21:59  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
11:21:59  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
11:21:59  14  ) AS
11:21:59  15  BEGIN
11:21:59  16  	PROCS_GROUP_ACCOUNT_V15.UPDATE_SS_NEED_ENTITLEMENTS(
11:21:59  17  	  in_sub_share_id => in_sub_share_id,
11:21:59  18  	  in_need_entitlements => in_need_entitlements,
11:21:59  19  	  in_updater => in_updater
11:21:59  20  	);
11:21:59  21  END UPDATE_SS_NEED_ENTITLEMENTS;
11:21:59  22  
11:21:59  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
11:21:59  24  /*
11:21:59  25  Throws exceptions:
11:21:59  26  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59  27  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  28  */
11:21:59  29  	  in_offer_chain_id IN	 NUMBER,
11:21:59  30  	  out_result_set    OUT  SYS_REFCURSOR
11:21:59  31  ) AS
11:21:59  32  BEGIN
11:21:59  33  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_BY_ID (
11:21:59  34  	  in_offer_chain_id => in_offer_chain_id,
11:21:59  35  	  out_result_set => out_result_set
11:21:59  36  	);
11:21:59  37  END GET_OFFER_CHAIN_BY_ID;
11:21:59  38  
11:21:59  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
11:21:59  40  /*
11:21:59  41  Throws exceptions (codes):
11:21:59  42  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59  43  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  44  */
11:21:59  45  	in_offer_chain_id IN NUMBER,
11:21:59  46  	in_meta_data_name IN VARCHAR2,
11:21:59  47  	out_result_set	  OUT SYS_REFCURSOR
11:21:59  48  )AS
11:21:59  49  BEGIN
11:21:59  50  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_META_DATA(
11:21:59  51  	  in_offer_chain_id,
11:21:59  52  	  in_meta_data_name,
11:21:59  53  	  out_result_set
11:21:59  54  	);
11:21:59  55  END GET_OFFER_CHAIN_META_DATA;
11:21:59  56  
11:21:59  57  PROCEDURE GET_ENDING_LICENSES (
11:21:59  58  /*
11:21:59  59  Throws exceptions:
11:21:59  60  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  61  */
11:21:59  62  	in_hours_number IN NUMBER,
11:21:59  63  	out_result_set OUT SYS_REFCURSOR
11:21:59  64  ) AS
11:21:59  65  BEGIN
11:21:59  66  	PROCS_LICENSE_V15.GET_ENDING_LICENSES(in_hours_number,out_result_set);
11:21:59  67  END GET_ENDING_LICENSES;
11:21:59  68  
11:21:59  69  PROCEDURE GET_ENDING_LICENSES_CC (
11:21:59  70  /*
11:21:59  71  Throws exceptions:
11:21:59  72  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  73  */
11:21:59  74  	in_hours_number IN NUMBER,
11:21:59  75  	out_result_set OUT SYS_REFCURSOR,
11:21:59  76  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:59  77  ) AS
11:21:59  78  BEGIN
11:21:59  79  	PROCS_LICENSE_V15.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
11:21:59  80  END GET_ENDING_LICENSES_CC;
11:21:59  81  
11:21:59  82  /*******************************************************/
11:21:59  83  
11:21:59  84  PROCEDURE GET_RECURRING_OFFER (
11:21:59  85  /*
11:21:59  86  Throws exceptions:
11:21:59  87  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59  88  */
11:21:59  89  	in_license_id  IN NUMBER,
11:21:59  90  	out_result_set OUT SYS_REFCURSOR
11:21:59  91  ) AS
11:21:59  92  BEGIN
11:21:59  93  	PROCS_LICENSE_V15.GET_RECURRING_OFFER (
11:21:59  94  	  in_license_id,
11:21:59  95  	  out_result_set
11:21:59  96  	);
11:21:59  97  END GET_RECURRING_OFFER;
11:21:59  98  
11:21:59  99  /********************************************************/
11:21:59 100  
11:21:59 101  PROCEDURE GET_NEXT_OFFER (
11:21:59 102  /*
11:21:59 103  Throws exceptions:
11:21:59 104  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 105  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 106  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 107  */
11:21:59 108  	in_license_id  IN NUMBER,
11:21:59 109  	out_result_set OUT SYS_REFCURSOR
11:21:59 110  ) AS
11:21:59 111  BEGIN
11:21:59 112  	PROCS_LICENSE_V15.GET_NEXT_OFFER (
11:21:59 113  	  in_license_id,
11:21:59 114  	  out_result_set
11:21:59 115  	);
11:21:59 116  END GET_NEXT_OFFER;
11:21:59 117  
11:21:59 118  /*********************************************************/
11:21:59 119  
11:21:59 120  PROCEDURE UPDATE_LICENSE_STATUS(
11:21:59 121  /*
11:21:59 122  Throws exceptions:
11:21:59 123  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 124  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 125  */
11:21:59 126  	  in_license_id     IN NUMBER,
11:21:59 127  	  in_license_status IN NUMBER,
11:21:59 128  	  in_updated_by     IN VARCHAR2
11:21:59 129  ) AS
11:21:59 130  BEGIN
11:21:59 131  	PROCS_LICENSE_V15.UPDATE_LICENSE_STATUS (
11:21:59 132  	  in_license_id,
11:21:59 133  	  in_license_status,
11:21:59 134  	  in_updated_by
11:21:59 135  	);
11:21:59 136  END UPDATE_LICENSE_STATUS;
11:21:59 137  
11:21:59 138  /**********************************************************/
11:21:59 139  
11:21:59 140  PROCEDURE UPDATE_INVOICE_STATUS (
11:21:59 141  /*
11:21:59 142  Throws exceptions:
11:21:59 143  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 144  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 145  */
11:21:59 146  	in_invoice_id		       IN NUMBER,
11:21:59 147  	in_invoice_status_id	       IN NUMBER,
11:21:59 148  	in_updated_by		       IN VARCHAR2
11:21:59 149  ) AS
11:21:59 150  BEGIN
11:21:59 151  	PROCS_INVOICE_V15.UPDATE_INVOICE_STATUS(
11:21:59 152  	  in_invoice_id,
11:21:59 153  	  in_invoice_status_id,
11:21:59 154  	  in_updated_by
11:21:59 155  	);
11:21:59 156  END UPDATE_INVOICE_STATUS;
11:21:59 157  
11:21:59 158  /***********************************************************/
11:21:59 159  
11:21:59 160  PROCEDURE CREATE_LICENSE(
11:21:59 161  /*
11:21:59 162  Throws exceptions:
11:21:59 163  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 164  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 165  APP_EXCEPTION_CODES_V15.INTERNAL_ERROR
11:21:59 166  */
11:21:59 167  	in_status_id		    IN NUMBER,
11:21:59 168  	in_needs_entitlements	    IN NUMBER,
11:21:59 169  	in_start_date		    IN DATE,
11:21:59 170  	in_end_date		    IN DATE,
11:21:59 171  	in_offer_id		    IN NUMBER,
11:21:59 172  	in_subscription_id	    IN NUMBER,
11:21:59 173  	in_invoice_id		    IN NUMBER,
11:21:59 174  	in_created_by		    IN VARCHAR2,
11:21:59 175  	in_is_extension 	    IN NUMBER,
11:21:59 176  	in_current_offer_index	    IN NUMBER,
11:21:59 177  	in_current_offer_recurr_num IN NUMBER,
11:21:59 178  	out_license_id		    OUT NUMBER
11:21:59 179  ) AS
11:21:59 180  BEGIN
11:21:59 181  	PROCS_LICENSE_V15.CREATE_LICENSE (
11:21:59 182  	  in_status_id,
11:21:59 183  	  in_needs_entitlements,
11:21:59 184  	  in_start_date,
11:21:59 185  	  in_end_date,
11:21:59 186  	  in_offer_id,
11:21:59 187  	  in_subscription_id,
11:21:59 188  	  in_invoice_id,
11:21:59 189  	  in_created_by,
11:21:59 190  	  in_is_extension,
11:21:59 191  	  in_current_offer_index,
11:21:59 192  	  in_current_offer_recurr_num,
11:21:59 193  	  out_license_id
11:21:59 194  	);
11:21:59 195  END CREATE_LICENSE;
11:21:59 196  
11:21:59 197  /******************************************************/
11:21:59 198  
11:21:59 199  PROCEDURE CREATE_INVOICE(
11:21:59 200  /*
11:21:59 201  Throws exceptions:
11:21:59 202  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 203  */
11:21:59 204  	  in_invoice_status IN NUMBER,
11:21:59 205  	  in_created_by     IN VARCHAR2,
11:21:59 206  	  in_tax_exempt_id  IN VARCHAR2,
11:21:59 207  	  out_invoice_id    OUT NUMBER
11:21:59 208  ) AS
11:21:59 209  BEGIN
11:21:59 210  	PROCS_INVOICE_V15.CREATE_INVOICE (
11:21:59 211  	  in_invoice_status,
11:21:59 212  	  in_created_by,
11:21:59 213  	  in_tax_exempt_id,
11:21:59 214  	  out_invoice_id
11:21:59 215  	);
11:21:59 216  END CREATE_INVOICE;
11:21:59 217  
11:21:59 218  /*******************************************************/
11:21:59 219  
11:21:59 220  PROCEDURE CREATE_CHARGE(
11:21:59 221  /*
11:21:59 222  Throws exceptions:
11:21:59 223  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 224  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 225  */
11:21:59 226  	in_invoice_id	      IN NUMBER,
11:21:59 227  	in_transaction_id     IN NUMBER,
11:21:59 228  	in_instrument_type_id IN NUMBER,
11:21:59 229  	in_instrument_id      IN NUMBER,
11:21:59 230  	in_charge_amount      IN NUMBER,
11:21:59 231  	in_created_by	      IN VARCHAR2,
11:21:59 232  	in_charge_status_id   IN NUMBER,
11:21:59 233  	out_charge_id	      OUT NUMBER
11:21:59 234  ) AS
11:21:59 235  BEGIN
11:21:59 236  	PROCS_CHARGE_V15.CREATE_CHARGE (
11:21:59 237  	  in_invoice_id,
11:21:59 238  	  in_transaction_id,
11:21:59 239  	  in_instrument_type_id,
11:21:59 240  	  in_instrument_id,
11:21:59 241  	  in_charge_amount,
11:21:59 242  	  in_created_by,
11:21:59 243  	  in_charge_status_id,
11:21:59 244  	  out_charge_id
11:21:59 245  	);
11:21:59 246  END CREATE_CHARGE;
11:21:59 247  
11:21:59 248  /**********************************************************/
11:21:59 249  
11:21:59 250  PROCEDURE HAS_FUTURE_LICENSE (
11:21:59 251  /*
11:21:59 252  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 253  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 254  --
11:21:59 255  RETURNS:
11:21:59 256  1 - if has,
11:21:59 257  0 - else
11:21:59 258  */
11:21:59 259  	in_license_id IN NUMBER,
11:21:59 260  	out_result	   OUT NUMBER
11:21:59 261  ) AS
11:21:59 262  BEGIN
11:21:59 263  	PROCS_SUBSCRIPTION_V15.HAS_FUTURE_LICENSE (
11:21:59 264  	  in_license_id,
11:21:59 265  	  out_result
11:21:59 266  	);
11:21:59 267  END HAS_FUTURE_LICENSE;
11:21:59 268  
11:21:59 269  /***********************************************************/
11:21:59 270  
11:21:59 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
11:21:59 272  /*
11:21:59 273  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 274  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 275  */
11:21:59 276  	in_license_id IN NUMBER,
11:21:59 277  	out_group_id  OUT NUMBER
11:21:59 278  ) AS
11:21:59 279  BEGIN
11:21:59 280  	PROCS_LICENSE_V15.GET_GROUP_ID_BY_LICENSE_ID (
11:21:59 281  	  in_license_id,
11:21:59 282  	  out_group_id
11:21:59 283  	);
11:21:59 284  END GET_GROUP_ID_BY_LICENSE_ID;
11:21:59 285  
11:21:59 286  /**********************************************************/
11:21:59 287  
11:21:59 288  PROCEDURE GET_OFFER_PRODUCTS (
11:21:59 289  /*
11:21:59 290  Throws exceptions (codes):
11:21:59 291  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 292  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 293  */
11:21:59 294  	in_offer_id    IN NUMBER,
11:21:59 295  	out_result_set OUT SYS_REFCURSOR
11:21:59 296  ) AS
11:21:59 297  BEGIN
11:21:59 298  	PROCS_OFFER_CHAIN_V15.GET_OFFER_PRODUCTS (
11:21:59 299  	  in_offer_id,
11:21:59 300  	  out_result_set
11:21:59 301  	);
11:21:59 302  END GET_OFFER_PRODUCTS;
11:21:59 303  
11:21:59 304  /***********************************************************/
11:21:59 305  
11:21:59 306  PROCEDURE CREATE_TRANSACTION (
11:21:59 307  /*
11:21:59 308  Throws exceptions:
11:21:59 309  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 310  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 311  */
11:21:59 312  	in_transaction_id  IN NUMBER,
11:21:59 313  	in_status_id	   IN NUMBER,
11:21:59 314  	in_amount	   IN NUMBER,
11:21:59 315  	in_created_by	   IN VARCHAR2,
11:21:59 316  	in_order_id	   IN VARCHAR2,
11:21:59 317  	out_transaction_id OUT NUMBER
11:21:59 318  ) AS
11:21:59 319  BEGIN
11:21:59 320  	PROCS_TRANSACTION_V15.CREATE_TRANSACTION(
11:21:59 321  	  in_transaction_id,
11:21:59 322  	  in_status_id,
11:21:59 323  	  in_amount,
11:21:59 324  	  in_created_by,
11:21:59 325  	  in_order_id,
11:21:59 326  	  GLOBAL_CONSTANTS_V15.FALSE, -- is_refund should be false in renewal
11:21:59 327  	  out_transaction_id
11:21:59 328  	);
11:21:59 329  END CREATE_TRANSACTION;
11:21:59 330  
11:21:59 331  /************************************************************/
11:21:59 332  
11:21:59 333  PROCEDURE ADD_LINE_ITEMS(
11:21:59 334  /*
11:21:59 335  Throws exceptions:
11:21:59 336  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 337  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 338  */
11:21:59 339  	in_invoice_id IN NUMBER,
11:21:59 340  	in_offer_id   IN NUMBER,
11:21:59 341  	in_created_by IN VARCHAR2
11:21:59 342  ) AS
11:21:59 343  BEGIN
11:21:59 344  	PROCS_LINE_ITEMS_V15.ADD_LINE_ITEMS(
11:21:59 345  	  in_invoice_id,
11:21:59 346  	  in_offer_id,
11:21:59 347  	  in_created_by
11:21:59 348  	);
11:21:59 349  END ADD_LINE_ITEMS;
11:21:59 350  
11:21:59 351  /************************************************************/
11:21:59 352  
11:21:59 353  PROCEDURE CALCULATE_INVOICE_AMOUNT (
11:21:59 354  /*
11:21:59 355  Throws exceptions:
11:21:59 356  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 357  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 358  */
11:21:59 359  	in_invoice_id IN  NUMBER,
11:21:59 360  	out_amount    OUT NUMBER
11:21:59 361  ) AS
11:21:59 362  BEGIN
11:21:59 363  	PROCS_INVOICE_V15.CALCULATE_INVOICE_AMOUNT (
11:21:59 364  	  in_invoice_id,
11:21:59 365  	  out_amount
11:21:59 366  	);
11:21:59 367  END CALCULATE_INVOICE_AMOUNT;
11:21:59 368  
11:21:59 369  /*************************************************************/
11:21:59 370  
11:21:59 371  PROCEDURE RESERVE_TRANSACTION_ID (
11:21:59 372  /*
11:21:59 373  Throws exceptions:
11:21:59 374  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 375  */
11:21:59 376  	out_transaction_id OUT NUMBER
11:21:59 377  ) AS
11:21:59 378  BEGIN
11:21:59 379  	PROCS_TRANSACTION_V15.RESERVE_TRANSACTION_ID (
11:21:59 380  	  out_transaction_id
11:21:59 381  	);
11:21:59 382  END RESERVE_TRANSACTION_ID;
11:21:59 383  
11:21:59 384  /***************************************************************/
11:21:59 385  
11:21:59 386  PROCEDURE P_GET_NEXT_OFFER_INDEX (
11:21:59 387  	in_offer_chain_id	     IN NUMBER,
11:21:59 388  	in_offer_chain_current_index IN NUMBER,
11:21:59 389  	out_next_offer_index	     OUT NUMBER
11:21:59 390  ) AS
11:21:59 391  BEGIN
11:21:59 392  	PROCS_OFFER_CHAIN_V15.P_GET_NEXT_OFFER_INDEX(
11:21:59 393  	  in_offer_chain_id,
11:21:59 394  	  in_offer_chain_current_index,
11:21:59 395  	  out_next_offer_index
11:21:59 396  	);
11:21:59 397  END P_GET_NEXT_OFFER_INDEX;
11:21:59 398  
11:21:59 399  /***************************************************************/
11:21:59 400  
11:21:59 401  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
11:21:59 402  	in_license_id		     IN NUMBER,
11:21:59 403  	in_offer_chain_current_index IN NUMBER,
11:21:59 404  	out_next_offer_index	     OUT NUMBER
11:21:59 405  ) AS
11:21:59 406  BEGIN
11:21:59 407  	PROCS_OFFER_CHAIN_V15.GET_NEXT_OFFER_INDEX_BY_LCNS(
11:21:59 408  	  in_license_id,
11:21:59 409  	  in_offer_chain_current_index,
11:21:59 410  	  out_next_offer_index
11:21:59 411  	);
11:21:59 412  END GET_NEXT_OFFER_INDEX_BY_LCNS;
11:21:59 413  
11:21:59 414  /******************************************************************/
11:21:59 415  
11:21:59 416  PROCEDURE GET_SUBSCRIPTION_INFO (
11:21:59 417  /*
11:21:59 418  Throws exceptions:
11:21:59 419  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 420  */
11:21:59 421  	  in_subscription_id IN  NUMBER,
11:21:59 422  	  out_result_set      OUT SYS_REFCURSOR
11:21:59 423  ) AS
11:21:59 424  BEGIN
11:21:59 425  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTION_INFO(
11:21:59 426  	  in_subscription_id,
11:21:59 427  	  out_result_set
11:21:59 428  	);
11:21:59 429  END GET_SUBSCRIPTION_INFO;
11:21:59 430  
11:21:59 431  /*******************************************************************/
11:21:59 432  
11:21:59 433  PROCEDURE CLOSE_SUBSCRIPTION (
11:21:59 434  	in_subscription_id IN NUMBER,
11:21:59 435  	in_updated_by	   IN VARCHAR2
11:21:59 436  ) AS
11:21:59 437  BEGIN
11:21:59 438  	PROCS_SUBSCRIPTION_V15.CLOSE_SUBSCRIPTION(
11:21:59 439  	  in_subscription_id,
11:21:59 440  	  in_updated_by
11:21:59 441  	);
11:21:59 442  END CLOSE_SUBSCRIPTION;
11:21:59 443  
11:21:59 444  /*******************************************************************/
11:21:59 445  
11:21:59 446  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
11:21:59 447  	out_result_set OUT SYS_REFCURSOR
11:21:59 448  ) AS
11:21:59 449  BEGIN
11:21:59 450  	PROCS_LICENSE_V15.GET_NEED_ENTITLEMENTS_LICENSES(
11:21:59 451  	  out_result_set
11:21:59 452  	);
11:21:59 453  END GET_NEED_ENTITLEMENTS_LICENSES;
11:21:59 454  
11:21:59 455  /*******************************************************************/
11:21:59 456  
11:21:59 457  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
11:21:59 458  	in_license_id	      IN NUMBER,
11:21:59 459  	in_needs_entitlements IN NUMBER,
11:21:59 460  	in_updated_by	      IN VARCHAR2
11:21:59 461  ) AS
11:21:59 462  BEGIN
11:21:59 463  	PROCS_LICENSE_V15.UPDATE_NEED_ENTITLEMENTS_FLAG(
11:21:59 464  	  in_license_id,
11:21:59 465  	  in_needs_entitlements,
11:21:59 466  	  in_updated_by
11:21:59 467  	);
11:21:59 468  END UPDATE_NEED_ENTITLEMENTS_FLAG;
11:21:59 469  
11:21:59 470  /*******************************************************/
11:21:59 471  
11:21:59 472  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
11:21:59 473  /*
11:21:59 474  Throws exceptions (codes):
11:21:59 475  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 476  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 477  */
11:21:59 478  	in_offer_id    IN NUMBER,
11:21:59 479  	out_result_set OUT SYS_REFCURSOR
11:21:59 480  ) AS
11:21:59 481  BEGIN
11:21:59 482  	PROCS_OFFER_CHAIN_V15.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
11:21:59 483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
11:21:59 484  
11:21:59 485  /*******************************************************/
11:21:59 486  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
11:21:59 487  /*
11:21:59 488  Throws exceptions (codes):
11:21:59 489  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 490  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 491  */
11:21:59 492  	in_product_offering_id IN NUMBER,
11:21:59 493  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
11:21:59 494  	out_result_set	       OUT SYS_REFCURSOR
11:21:59 495  ) AS
11:21:59 496  BEGIN
11:21:59 497  	PROCS_OFFER_CHAIN_V15.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
11:21:59 498  END GET_PRODUCT_OFFERING_META_DATA;
11:21:59 499  
11:21:59 500  /*******************************************************/
11:21:59 501  
11:21:59 502  PROCEDURE LOCK_ACCOUNT (
11:21:59 503  	in_group_id    IN NUMBER,
11:21:59 504  	in_lock_key    IN VARCHAR2,
11:21:59 505  	in_seconds_num IN NUMBER,
11:21:59 506  	in_created_by  IN VARCHAR2,
11:21:59 507  	in_reason      IN VARCHAR2
11:21:59 508  ) AS
11:21:59 509  BEGIN
11:21:59 510  	PROCS_LOCKING_V15.LOCK_ACCOUNT(
11:21:59 511  	  in_group_id,
11:21:59 512  	  in_lock_key,
11:21:59 513  	  in_seconds_num,
11:21:59 514  	  in_created_by,
11:21:59 515  	  in_reason
11:21:59 516  	);
11:21:59 517  END LOCK_ACCOUNT;
11:21:59 518  
11:21:59 519  /****************************************************************/
11:21:59 520  
11:21:59 521  PROCEDURE RELEASE_LOCK (
11:21:59 522  	in_group_id IN NUMBER,
11:21:59 523  	in_lock_key IN VARCHAR2
11:21:59 524  ) AS
11:21:59 525  BEGIN
11:21:59 526  	PROCS_LOCKING_V15.RELEASE_LOCK(
11:21:59 527  	  in_group_id,
11:21:59 528  	  in_lock_key
11:21:59 529  	);
11:21:59 530  END RELEASE_LOCK;
11:21:59 531  
11:21:59 532  /******************************************************************************/
11:21:59 533  
11:21:59 534  PROCEDURE GET_INVOICE_LINE_ITEMS (
11:21:59 535  	in_invoice_id  IN NUMBER,
11:21:59 536  	out_result_set OUT SYS_REFCURSOR
11:21:59 537  ) AS
11:21:59 538  BEGIN
11:21:59 539  	PROCS_INVOICE_V15.GET_INVOICE_LINE_ITEMS(
11:21:59 540  	  in_invoice_id,
11:21:59 541  	  out_result_set
11:21:59 542  	);
11:21:59 543  END GET_INVOICE_LINE_ITEMS;
11:21:59 544  
11:21:59 545  /******************************************************************************/
11:21:59 546  
11:21:59 547  PROCEDURE ADD_TAX (
11:21:59 548  	in_tax_type_id		 IN NUMBER,
11:21:59 549  	in_calculated_amount	 IN NUMBER,
11:21:59 550  	in_created_by		 IN VARCHAR2,
11:21:59 551  	in_line_item_id 	 IN NUMBER,
11:21:59 552  	in_effective_rate	 IN VARCHAR2,
11:21:59 553  	in_taxable_amount	 IN NUMBER,
11:21:59 554  	in_tax_rule_id		 IN NUMBER,
11:21:59 555  	in_jurisdiction_level_id IN NUMBER,
11:21:59 556  	in_jurisdiction_name	 IN VARCHAR2,
11:21:59 557  	in_jurisdiction_id	 IN VARCHAR2,
11:21:59 558  	in_ext_tax_type 	 IN VARCHAR2,
11:21:59 559  	in_ext_result		 IN VARCHAR2,
11:21:59 560  	in_imposition_type	 IN VARCHAR2,
11:21:59 561  	in_imposition		 IN VARCHAR2
11:21:59 562  ) AS
11:21:59 563  BEGIN
11:21:59 564  	PROCS_TAXES_V15.ADD_TAX(
11:21:59 565  	  in_tax_type_id,
11:21:59 566  	  in_calculated_amount,
11:21:59 567  	  in_created_by,
11:21:59 568  	  in_line_item_id,
11:21:59 569  	  in_effective_rate,
11:21:59 570  	  in_taxable_amount,
11:21:59 571  	  in_tax_rule_id,
11:21:59 572  	  in_jurisdiction_level_id,
11:21:59 573  	  in_jurisdiction_name,
11:21:59 574  	  in_jurisdiction_id,
11:21:59 575  	  in_ext_tax_type,
11:21:59 576  	  in_ext_result,
11:21:59 577  	  in_imposition_type,
11:21:59 578  	  in_imposition
11:21:59 579  	);
11:21:59 580  END ADD_TAX;
11:21:59 581  
11:21:59 582  /******************************************************************************/
11:21:59 583  
11:21:59 584  PROCEDURE GET_CREDIT_CARD_BY_ID (
11:21:59 585  	in_credit_card_id IN  NUMBER,
11:21:59 586  	out_result_set	  OUT SYS_REFCURSOR
11:21:59 587  ) AS
11:21:59 588  BEGIN
11:21:59 589  	PROCS_FIN_INSTRUMENTS_V15.GET_CREDIT_CARD_BY_ID(
11:21:59 590  	  in_credit_card_id,
11:21:59 591  	  out_result_set
11:21:59 592  	);
11:21:59 593  END GET_CREDIT_CARD_BY_ID;
11:21:59 594  
11:21:59 595  /******************************************************************************/
11:21:59 596  
11:21:59 597  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
11:21:59 598  	in_line_item_id IN NUMBER,
11:21:59 599  	out_result_set	OUT SYS_REFCURSOR
11:21:59 600  ) AS
11:21:59 601  BEGIN
11:21:59 602  	PROCS_PRODUCT_V15.GET_PRD_OFFERING_BY_LINE_IT_ID(
11:21:59 603  	  in_line_item_id,
11:21:59 604  	  out_result_set
11:21:59 605  	);
11:21:59 606  END GET_PRD_OFFERING_BY_LINE_IT_ID;
11:21:59 607  
11:21:59 608  /******************************************************************************/
11:21:59 609  
11:21:59 610  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
11:21:59 611  /*
11:21:59 612  Throws exceptions:
11:21:59 613  APP_EXCEPTION_CODES_V15.NOT_FOUND,
11:21:59 614  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 615  */
11:21:59 616  	in_group_id IN NUMBER,
11:21:59 617  	out_account_id	OUT NUMBER
11:21:59 618  ) AS
11:21:59 619  BEGIN
11:21:59 620  	PROCS_ACCOUNT_V15.GET_ACCOUNT_ID_BY_GROUP_ID(
11:21:59 621  	  in_group_id,
11:21:59 622  	  out_account_id
11:21:59 623  	);
11:21:59 624  END GET_ACCOUNT_ID_BY_GROUP_ID;
11:21:59 625  
11:21:59 626  /******************************************************************************/
11:21:59 627  
11:21:59 628  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
11:21:59 629  /*
11:21:59 630  Throws exceptions:
11:21:59 631  APP_EXCEPTION_CODES_V15.NOT_FOUND
11:21:59 632  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 633  */
11:21:59 634  	in_line_item_id IN  NUMBER,
11:21:59 635  	out_result_set	OUT SYS_REFCURSOR
11:21:59 636  ) AS
11:21:59 637  BEGIN
11:21:59 638  	PROCS_LINE_ITEMS_V15.GET_LINE_ITEM_DISCOUNTS(
11:21:59 639  	  in_line_item_id,
11:21:59 640  	  out_result_set
11:21:59 641  	);
11:21:59 642  END GET_LINE_ITEM_DISCOUNTS;
11:21:59 643  
11:21:59 644  /******************************************************************************/
11:21:59 645  
11:21:59 646  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
11:21:59 647  	in_line_item_id    IN NUMBER,
11:21:59 648  	in_amount	   IN NUMBER,
11:21:59 649  	in_discount_amount IN NUMBER,
11:21:59 650  	in_taxes_amount    IN NUMBER
11:21:59 651  ) AS
11:21:59 652  BEGIN
11:21:59 653  	PROCS_LINE_ITEMS_V15.UPDATE_LINE_ITEM_AMOUNT(
11:21:59 654  	  in_line_item_id,
11:21:59 655  	  in_amount,
11:21:59 656  	  in_discount_amount,
11:21:59 657  	  in_taxes_amount
11:21:59 658  	);
11:21:59 659  END UPDATE_LINE_ITEM_AMOUNT;
11:21:59 660  
11:21:59 661  /******************************************************************************/
11:21:59 662  
11:21:59 663  PROCEDURE GET_PAYPAL_BY_ID (
11:21:59 664  	in_paypal_id   IN  NUMBER,
11:21:59 665  	out_result_set OUT SYS_REFCURSOR
11:21:59 666  ) AS
11:21:59 667  BEGIN
11:21:59 668  	PROCS_FIN_INSTRUMENTS_V15.GET_PAYPAL_BY_ID(
11:21:59 669  	  in_paypal_id,
11:21:59 670  	  out_result_set
11:21:59 671  	);
11:21:59 672  END GET_PAYPAL_BY_ID;
11:21:59 673  
11:21:59 674  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
11:21:59 675  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
11:21:59 676  	out_result_set OUT SYS_REFCURSOR
11:21:59 677  ) AS
11:21:59 678  BEGIN
11:21:59 679  	PROCS_FIN_INSTRUMENTS_V15.GET_GC_BY_PURCH_INVOICE_ID (
11:21:59 680  	  in_invoice_id,
11:21:59 681  	  out_result_set
11:21:59 682  	);
11:21:59 683  END GET_GC_BY_PURCH_INVOICE_ID;
11:21:59 684  
11:21:59 685  PROCEDURE GET_LICENSE_BY_ID (
11:21:59 686  	in_license_id  IN NUMBER,
11:21:59 687  	out_result_set OUT SYS_REFCURSOR
11:21:59 688  ) AS
11:21:59 689  BEGIN
11:21:59 690  	PROCS_LICENSE_V15.GET_LICENSE_BY_ID (
11:21:59 691  	  in_license_id,
11:21:59 692  	  out_result_set
11:21:59 693  	);
11:21:59 694  END GET_LICENSE_BY_ID;
11:21:59 695  
11:21:59 696  /******************************************************************************/
11:21:59 697  
11:21:59 698  PROCEDURE GET_NOTIFICATION_TYPE_ID (
11:21:59 699  	in_offer_chain_id	 IN NUMBER,
11:21:59 700  	in_action_name		 IN VARCHAR2,
11:21:59 701  	out_notification_type_id OUT NUMBER
11:21:59 702  ) AS
11:21:59 703  BEGIN
11:21:59 704  	PROCS_OFFER_CHAIN_V15.GET_NOTIFICATION_TYPE_ID(
11:21:59 705  	  in_offer_chain_id,
11:21:59 706  	  in_action_name,
11:21:59 707  	  out_notification_type_id
11:21:59 708  	);
11:21:59 709  END GET_NOTIFICATION_TYPE_ID;
11:21:59 710  
11:21:59 711  /******************************************************************************/
11:21:59 712  
11:21:59 713  PROCEDURE GET_ALL_OCH_META_DATA (
11:21:59 714  	in_offer_chain_id IN NUMBER,
11:21:59 715  	out_result_set	  OUT SYS_REFCURSOR
11:21:59 716  ) AS
11:21:59 717  BEGIN
11:21:59 718  	PROCS_OFFER_CHAIN_V15.GET_ALL_META_DATA (
11:21:59 719  	  in_offer_chain_id,
11:21:59 720  	  out_result_set
11:21:59 721  	);
11:21:59 722  END GET_ALL_OCH_META_DATA;
11:21:59 723  
11:21:59 724  /******************************************************************************/
11:21:59 725  
11:21:59 726  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
11:21:59 727  /*
11:21:59 728  APP_EXCEPTION_CODES_V15.INVALID_PARAMETER
11:21:59 729  APP_EXCEPTION_CODES_V15.UNKNOWN_ERROR
11:21:59 730  */
11:21:59 731  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
11:21:59 732  	out_result_set	     OUT SYS_REFCURSOR
11:21:59 733  ) AS
11:21:59 734  BEGIN
11:21:59 735  	PROCS_SUBSCRIPTION_V15.GET_SUBSCRIPTIONS_META_DATA(
11:21:59 736  	  in_subscriptions_ids,
11:21:59 737  	  out_result_set
11:21:59 738  	);
11:21:59 739  END GET_SUBSCRIPTIONS_META_DATA;
11:21:59 740  
11:21:59 741  PROCEDURE GET_UNREDEEMED_GCS (
11:21:59 742  	out_result_set		OUT SYS_REFCURSOR,
11:21:59 743  	in_hours_number 	IN NUMBER DEFAULT 14*24,
11:21:59 744  	in_num_rows		IN NUMBER DEFAULT 10000,
11:21:59 745  	in_process_name 	IN OPS_OWNER.PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
11:21:59 746  ) AS
11:21:59 747  BEGIN
11:21:59 748  	PROCS_FIN_INSTRUMENTS_V15.GET_UNREDEEMED_GCS(
11:21:59 749  	  out_result_set => out_result_set,
11:21:59 750  	  in_hours_number => in_hours_number,
11:21:59 751  	  in_num_rows => in_num_rows,
11:21:59 752  	  in_process_name => in_process_name
11:21:59 753  	);
11:21:59 754  END GET_UNREDEEMED_GCS;
11:21:59 755  
11:21:59 756  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
11:21:59 757  	in_offer_chain_id IN NUMBER,
11:21:59 758  	in_meta_data_name IN VARCHAR2,
11:21:59 759  	out_value	  OUT VARCHAR2
11:21:59 760  ) AS
11:21:59 761  BEGIN
11:21:59 762  	PROCS_OFFER_CHAIN_V15.GET_OFFER_CHAIN_MD_VALUE(
11:21:59 763  	  in_offer_chain_id => in_offer_chain_id,
11:21:59 764  	  in_meta_data_name => in_meta_data_name,
11:21:59 765  	  out_value => out_value
11:21:59 766  	);
11:21:59 767  END GET_OFFER_CHAIN_MD_VALUE;
11:21:59 768  
11:21:59 769  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
11:21:59 770  	out_result_set	    OUT SYS_REFCURSOR
11:21:59 771  )
11:21:59 772  AS
11:21:59 773  BEGIN
11:21:59 774  	PROCS_SUBSCRIPTION_V15.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
11:21:59 775  	  out_result_set => out_result_set
11:21:59 776  	);
11:21:59 777  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
11:21:59 778  
11:21:59 779  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
11:21:59 780  	out_result_set	    OUT SYS_REFCURSOR
11:21:59 781  )
11:21:59 782  AS
11:21:59 783  BEGIN
11:21:59 784  	PROCS_SUBSCRIPTION_V15.GET_ACT_SUBS_W_PP_CHARGEBACKS(
11:21:59 785  	  out_result_set => out_result_set
11:21:59 786  	);
11:21:59 787  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
11:21:59 788  
11:21:59 789  END PUBLIC_PROCS_RENEWAL_V15;
11:21:59 790  .
11:21:59 SQL> /

Package body created.

Elapsed: 00:00:00.05
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ADX_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_TEST_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V15 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V15 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V15 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V15 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> 
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V15 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> 
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V15 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:21:59 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V15 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
11:22:00 SQL> 
11:22:00 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:22:00 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V15 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
11:22:00 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
11:22:00 SQL> spool off;


Subject: Nomad upgrade success: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: steven.nedlin@nytimes.com
Nomad upgrade operation success. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        SID: ECPR
        Schema: core_owner
        Migration: 13.1-release-1.10.0-all
        SVN Revision: 9740
        Duration: 5