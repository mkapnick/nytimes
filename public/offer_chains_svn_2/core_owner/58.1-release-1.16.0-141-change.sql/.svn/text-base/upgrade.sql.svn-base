WHENEVER SQLERROR EXIT ROLLBACK;

/*
variable is_current_version_fine NUMBER;
variable change_version NUMBER;
variable bad_current_version VARCHAR2(1024);

exec :change_version := 141;
exec PROCS_SYSTEM_V20.CHECK_VERSION(:change_version - 1, :is_current_version_fine);
exec :bad_current_version := 'Current version is bad, please update your version to '||(:change_version-1);

BEGIN
  IF (:is_current_version_fine != 0) THEN
    RAISE_APPLICATION_ERROR(-20001, :bad_current_version);
  END IF;
END;
/

DROP TABLE "CORE_OWNER"."AMAZON_APPSTORE_ITEM_TYPE" CASCADE CONSTRAINTS PURGE;
DROP SEQUENCE "CORE_OWNER"."AAS_ID_SEQ";
--DROP TABLE "CORE_OWNER"."AMAZON_APPSTORE" CASCADE CONSTRAINTS PURGE;

CREATE TABLE AMAZON_APPSTORE_RECEIPT_TYPE (
  ID          VARCHAR2(30)   NOT NULL,
  DESCRIPTION VARCHAR2(1000) NOT NULL,
  CREATE_DATE DATE           NOT NULL,
  CREATED_BY  VARCHAR2(255)  NOT NULL,
  CONSTRAINT AAS_RECEIPT_TYPE_ID_PK PRIMARY KEY (ID)
    USING INDEX TABLESPACE CORE_IDX
) TABLESPACE CORE;

INSERT INTO AMAZON_APPSTORE_RECEIPT_TYPE VALUES ('ENTITLED', 'Amazon App Store entitlement receipt type', SYSDATE, 'JIRA-SAR-269');
INSERT INTO AMAZON_APPSTORE_RECEIPT_TYPE VALUES ('CONSUMABLE', 'Amazon App Store consumable receipt type', SYSDATE, 'JIRA-SAR-269');
INSERT INTO AMAZON_APPSTORE_RECEIPT_TYPE VALUES ('SUBSCRIPTION', 'Amazon App Store subscription receipt type', SYSDATE, 'JIRA-SAR-269');
COMMIT;

CREATE TABLE AMAZON_APPSTORE_RECEIPT (
  ID              NUMBER         NOT NULL,
  SUBSCRIPTION_ID NUMBER         NOT NULL,
  USER_ID         VARCHAR2(4000) NOT NULL,
  ITEM_TYPE       VARCHAR2(30)   NOT NULL,
  START_DATE      DATE           NOT NULL,
  END_DATE        DATE,
  SKU             VARCHAR2(4000) NOT NULL,
  PURCHASE_TOKEN  VARCHAR2(4000) NOT NULL,
  CREATE_DATE     DATE           NOT NULL,
  CREATED_BY      VARCHAR2(255)  NOT NULL,
  UPDATE_DATE     DATE           NOT NULL,
  UPDATED_BY      VARCHAR2(255)  NOT NULL,
  LAST_CHECK_DATE DATE,
  CONSTRAINT AAS_RECEIPT_ID_PK PRIMARY KEY (ID)
    USING INDEX TABLESPACE CORE_IDX,
  CONSTRAINT AAS_RECEIPT_SUB_ID_FK FOREIGN KEY (SUBSCRIPTION_ID) REFERENCES SUBSCRIPTION (ID),
  CONSTRAINT AAS_RECEIPT_TYPE_FK FOREIGN KEY (ITEM_TYPE) REFERENCES AMAZON_APPSTORE_RECEIPT_TYPE (ID)
) TABLESPACE CORE;

CREATE INDEX AAS_RECEIPT_USER_ID_IDX ON AMAZON_APPSTORE_RECEIPT (USER_ID) TABLESPACE CORE_IDX;
CREATE INDEX AAS_RECEIPT_SKU_IDX ON AMAZON_APPSTORE_RECEIPT (SKU) TABLESPACE CORE_IDX;
CREATE UNIQUE INDEX AAS_RECEIPT_PURCHASE_TOKEN_IDX ON AMAZON_APPSTORE_RECEIPT (PURCHASE_TOKEN) TABLESPACE CORE_IDX;
*/
CREATE UNIQUE INDEX AAS_RECEIPT_SUB_ID_IDX ON AMAZON_APPSTORE_RECEIPT (SUBSCRIPTION_ID) TABLESPACE CORE_IDX;
CREATE INDEX AASR_LAST_CHECK_DATE_IDX ON AMAZON_APPSTORE_RECEIPT (LAST_CHECK_DATE) TABLESPACE CORE_IDX;
CREATE SEQUENCE AAS_RECEIPT_ID_SEQ;

COMMENT ON COLUMN AMAZON_APPSTORE_RECEIPT.ID IS 'Use sequence AAS_RECEIPT_ID_SEQ';
COMMENT ON COLUMN AMAZON_APPSTORE_RECEIPT.END_DATE IS 'This column is allow to be null b/c that is how the amazon verification service indicates that the subscription is still active';
COMMENT ON COLUMN AMAZON_APPSTORE_RECEIPT.LAST_CHECK_DATE IS 'This column is hold the last date that the receipt was check against the Amazon Receipt Verification Service';

CREATE UNIQUE INDEX IDX_DUP_ACT_EMAIL_DOMAIN ON GROUP_ACCOUNT_EMAIL_DOMAIN ( CASE WHEN is_active = 1 THEN EMAIL_DOMAIN ELSE NULL END ) TABLESPACE CORE_IDX;

EXEC PROCS_SYSTEM_V20.INCREMENT_VERSION();

