15:31:05 SQL> @/dbbackups/ECPR/migrations/core_owner/20.3-release-1.11.1-audit_triggers/upgrade.sql
15:31:05 SQL> whenever sqlerror exit failure
15:31:05 SQL> 
15:31:05 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_AUD
15:31:05   2  	  AFTER INSERT or UPDATE or DELETE
15:31:05   3  ON OFFER_CHAIN
15:31:05   4  	  REFERENCING NEW as new old as old
15:31:05   5  	  FOR EACH ROW
15:31:05   6  DECLARE
15:31:05   7  	  v_action char(1);
15:31:05   8  BEGIN
15:31:05   9  	  IF INSERTING THEN
15:31:05  10  	      v_action := 'I';
15:31:05  11  	  ELSIF UPDATING THEN
15:31:05  12  	      v_action := 'U';
15:31:05  13  	  ELSE
15:31:05  14  	      v_action := 'D';
15:31:05  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:05  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN');
15:31:05  17  	  END IF;
15:31:05  18  
15:31:05  19  	  if (v_action <> 'D') then
15:31:05  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:05  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN');
15:31:05  22  	  end if;
15:31:05  23  END;
15:31:05  24  /

Trigger created.

Elapsed: 00:00:00.75
15:31:05 SQL> 
15:31:05 SQL> CREATE or REPLACE TRIGGER TR_OFFER_OFFER_CHAIN_AUD
15:31:05   2  	  AFTER INSERT or UPDATE or DELETE
15:31:05   3  ON OFFER_OFFER_CHAIN
15:31:05   4  	  REFERENCING NEW as new old as old
15:31:05   5  	  FOR EACH ROW
15:31:05   6  DECLARE
15:31:05   7  	  v_action char(1);
15:31:05   8  BEGIN
15:31:05   9  	  IF INSERTING THEN
15:31:05  10  	      v_action := 'I';
15:31:05  11  	  ELSIF UPDATING THEN
15:31:05  12  	      v_action := 'U';
15:31:05  13  	  ELSE
15:31:05  14  	      v_action := 'D';
15:31:05  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:05  16  	      values(0,:old.offer_id||'~'||:old.offer_chain_id,systimestamp,v_action,'OFFER_OFFER_CHAIN');
15:31:05  17  	  END IF;
15:31:05  18  
15:31:05  19  	  if (v_action <> 'D') then
15:31:05  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:05  21  		  values(0,:new.offer_id||'~'||:new.offer_chain_id,systimestamp,v_action,'OFFER_OFFER_CHAIN');
15:31:05  22  	  end if;
15:31:05  23  END;
15:31:05  24  /

Trigger created.

Elapsed: 00:00:00.06
15:31:05 SQL> 
15:31:05 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_ELIGIBILITY_AUD
15:31:05   2  	  AFTER INSERT or UPDATE or DELETE
15:31:05   3  ON OFFER_CHAIN_ELIGIBILITY
15:31:05   4  	  REFERENCING NEW as new old as old
15:31:05   5  	  FOR EACH ROW
15:31:05   6  DECLARE
15:31:05   7  	  v_action char(1);
15:31:05   8  BEGIN
15:31:05   9  	  IF INSERTING THEN
15:31:05  10  	      v_action := 'I';
15:31:05  11  	  ELSIF UPDATING THEN
15:31:05  12  	      v_action := 'U';
15:31:05  13  	  ELSE
15:31:05  14  	      v_action := 'D';
15:31:05  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:05  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN_ELIGIBILITY');
15:31:05  17  	  END IF;
15:31:05  18  
15:31:05  19  	  if (v_action <> 'D') then
15:31:05  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:05  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN_ELIGIBILITY');
15:31:05  22  	  end if;
15:31:05  23  END;
15:31:05  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:05 SQL> 
15:31:05 SQL> CREATE or REPLACE TRIGGER TR_OFFER_AUD
15:31:05   2  	  AFTER INSERT or UPDATE or DELETE
15:31:05   3  ON OFFER
15:31:05   4  	  REFERENCING NEW as new old as old
15:31:05   5  	  FOR EACH ROW
15:31:05   6  DECLARE
15:31:05   7  	  v_action char(1);
15:31:05   8  BEGIN
15:31:05   9  	  IF INSERTING THEN
15:31:05  10  	      v_action := 'I';
15:31:05  11  	  ELSIF UPDATING THEN
15:31:05  12  	      v_action := 'U';
15:31:05  13  	  ELSE
15:31:05  14  	      v_action := 'D';
15:31:05  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:05  16  	      values(:old.id,null,systimestamp,v_action,'OFFER');
15:31:05  17  	  END IF;
15:31:05  18  
15:31:05  19  	  if (v_action <> 'D') then
15:31:05  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:05  21  		  values(:new.id,null,systimestamp,v_action,'OFFER');
15:31:05  22  	  end if;
15:31:05  23  END;
15:31:05  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:05 SQL> 
15:31:05 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_OFFERING_AUD
15:31:05   2  	  AFTER INSERT or UPDATE or DELETE
15:31:05   3  ON PRODUCT_OFFERING
15:31:05   4  	  REFERENCING NEW as new old as old
15:31:05   5  	  FOR EACH ROW
15:31:05   6  DECLARE
15:31:05   7  	  v_action char(1);
15:31:05   8  BEGIN
15:31:05   9  	  IF INSERTING THEN
15:31:05  10  	      v_action := 'I';
15:31:05  11  	  ELSIF UPDATING THEN
15:31:05  12  	      v_action := 'U';
15:31:05  13  	  ELSE
15:31:05  14  	      v_action := 'D';
15:31:05  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:05  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_OFFERING');
15:31:05  17  	  END IF;
15:31:05  18  
15:31:05  19  	  if (v_action <> 'D') then
15:31:05  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:05  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_OFFERING');
15:31:05  22  	  end if;
15:31:05  23  END;
15:31:05  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON PRODUCT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.09
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_ELIGIBILITY_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON PRODUCT_ELIGIBILITY
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_ELIGIBILITY');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_ELIGIBILITY');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_OFFER_PRODUCT_OFFERING_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON OFFER_PRODUCT_OFFERING
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(0,:old.product_offering_id||'~'||:old.offer_id,systimestamp,v_action,'OFFER_PRODUCT_OFFERING');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(0,:new.product_offering_id||'~'||:new.offer_id,systimestamp,v_action,'OFFER_PRODUCT_OFFERING');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_PROD_OFFER_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON DISCOUNT_PRODUCT_OFFERING
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(0,:old.discount_id||'~'||:old.product_offering_id,systimestamp,v_action,'DISCOUNT_PRODUCT_OFFERING');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(0,:new.discount_id||'~'||:new.product_offering_id,systimestamp,v_action,'DISCOUNT_PRODUCT_OFFERING');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.06
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON DISCOUNT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'DISCOUNT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'DISCOUNT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_META_DATA_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON OFFER_CHAIN_META_DATA
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN_META_DATA');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN_META_DATA');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_PROD_OFFER_META_DATA_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON PRODUCT_OFFERING_META_DATA
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_OFFERING_META_DATA');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_OFFERING_META_DATA');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_INVOICE_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON INVOICE
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'INVOICE');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'INVOICE');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.07
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_LICENSE_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON LICENSE
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'LICENSE');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'LICENSE');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_LINE_ITEM_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON LINE_ITEM
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'LINE_ITEM');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'LINE_ITEM');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_SUBSCRIPTION_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON SUBSCRIPTION
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'SUBSCRIPTION');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'SUBSCRIPTION');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.09
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_TRANSACTION_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON TRANSACTION
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'TRANSACTION');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'TRANSACTION');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.07
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_GIFT_CERTIFICATE_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON GIFT_CERTIFICATE
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'GIFT_CERTIFICATE');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'GIFT_CERTIFICATE');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_CHARGE_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON CHARGE
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'CHARGE');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'CHARGE');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_ACCOUNT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON ACCOUNT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'ACCOUNT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'ACCOUNT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_SUBSCRIPTION_META_DATA_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON SUBSCRIPTION_META_DATA
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'SUBSCRIPTION_META_DATA');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'SUBSCRIPTION_META_DATA');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.06
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_CREDIT_CARD_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON CREDIT_CARD
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'CREDIT_CARD');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'CREDIT_CARD');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_TRANSACTION_ATTEMPT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON TRANSACTION_ATTEMPT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'TRANSACTION_ATTEMPT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'TRANSACTION_ATTEMPT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_INVOICE_ADJUSTMENT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON INVOICE_ADJUSTMENT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'INVOICE_ADJUSTMENT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'INVOICE_ADJUSTMENT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.02
15:31:06 SQL> 
15:31:06 SQL> CREATE or REPLACE TRIGGER TR_LINE_ITEM_ADJUSTMENT_AUD
15:31:06   2  	  AFTER INSERT or UPDATE or DELETE
15:31:06   3  ON LINE_ITEM_ADJUSTMENT
15:31:06   4  	  REFERENCING NEW as new old as old
15:31:06   5  	  FOR EACH ROW
15:31:06   6  DECLARE
15:31:06   7  	  v_action char(1);
15:31:06   8  BEGIN
15:31:06   9  	  IF INSERTING THEN
15:31:06  10  	      v_action := 'I';
15:31:06  11  	  ELSIF UPDATING THEN
15:31:06  12  	      v_action := 'U';
15:31:06  13  	  ELSE
15:31:06  14  	      v_action := 'D';
15:31:06  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:06  16  	      values(:old.id,null,systimestamp,v_action,'LINE_ITEM_ADJUSTMENT');
15:31:06  17  	  END IF;
15:31:06  18  
15:31:06  19  	  if (v_action <> 'D') then
15:31:06  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:06  21  		  values(:new.id,null,systimestamp,v_action,'LINE_ITEM_ADJUSTMENT');
15:31:06  22  	  end if;
15:31:06  23  END;
15:31:06  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_TAX_ADJUSTMENT_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON TAX_ADJUSTMENT
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'TAX_ADJUSTMENT');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'TAX_ADJUSTMENT');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_LINEITEM_ADJ_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON DISCOUNT_LINEITEM_ADJUSTMENT
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'DISCOUNT_LINEITEM_ADJUSTMENT');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'DISCOUNT_LINEITEM_ADJUSTMENT');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.06
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_TAX_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON TAX
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'TAX');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'TAX');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_PAYPAL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON PAYPAL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'PAYPAL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'PAYPAL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.11
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_EXT_SOURCE_LOG_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_EXT_SOURCE_LOG
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_EXT_SOURCE_LOG');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_EXT_SOURCE_LOG');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.04
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_SVC_CHG_DTL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_CPT_SERVICE_CHARGE_DETAIL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_SERVICE_CHARGE_DETAIL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_SERVICE_CHARGE_DETAIL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_EXCP_DTL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_CPT_EXCEPTION_DETAIL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_EXCEPTION_DETAIL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_EXCEPTION_DETAIL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.05
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_DEPOSIT_DTL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_CPT_DEPOSIT_DETAIL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_DEPOSIT_DETAIL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_DEPOSIT_DETAIL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_CHBK_ACT_DTL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_CPT_CHARGEBACK_ACT_DETAIL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_CHARGEBACK_ACT_DETAIL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_CHARGEBACK_ACT_DETAIL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.02
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_SETTLEMENT_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_PP_SETTLEMENT
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_SETTLEMENT');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_SETTLEMENT');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.06
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_DISPUTE_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_PP_DISPUTE
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_DISPUTE');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_DISPUTE');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_TRANS_DTL_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_PP_TRANS_DETAIL
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_TRANS_DETAIL');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_TRANS_DETAIL');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.03
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_RCN_AMEX_CHARGEBACK_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON RCN_AMEX_CHARGEBACK
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'RCN_AMEX_CHARGEBACK');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'RCN_AMEX_CHARGEBACK');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.18
15:31:07 SQL> 
15:31:07 SQL> CREATE or REPLACE TRIGGER TR_ADDRESS_AUD
15:31:07   2  	  AFTER INSERT or UPDATE or DELETE
15:31:07   3  ON ADDRESS
15:31:07   4  	  REFERENCING NEW as new old as old
15:31:07   5  	  FOR EACH ROW
15:31:07   6  DECLARE
15:31:07   7  	  v_action char(1);
15:31:07   8  BEGIN
15:31:07   9  	  IF INSERTING THEN
15:31:07  10  	      v_action := 'I';
15:31:07  11  	  ELSIF UPDATING THEN
15:31:07  12  	      v_action := 'U';
15:31:07  13  	  ELSE
15:31:07  14  	      v_action := 'D';
15:31:07  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:31:07  16  	      values(:old.id,null,systimestamp,v_action,'ADDRESS');
15:31:07  17  	  END IF;
15:31:07  18  
15:31:07  19  	  if (v_action <> 'D') then
15:31:07  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:31:07  21  		  values(:new.id,null,systimestamp,v_action,'ADDRESS');
15:31:07  22  	  end if;
15:31:07  23  END;
15:31:07  24  /

Trigger created.

Elapsed: 00:00:00.19
15:31:07 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:31:07 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        SID: ECPR
        Schema: core_owner
        Migration: 20.3-release-1.11.1-audit_triggers
        SVN Revision: 10382
        Duration: 3 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-348