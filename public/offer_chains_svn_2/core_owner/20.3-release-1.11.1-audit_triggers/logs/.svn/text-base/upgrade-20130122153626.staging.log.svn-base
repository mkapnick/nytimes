15:36:38 SQL> @/dbbackups/ECST2/migrations/core_owner/20.3-release-1.11.1-audit_triggers/upgrade.sql
15:36:38 SQL> whenever sqlerror exit failure
15:36:38 SQL> 
15:36:38 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_AUD
15:36:38   2  	  AFTER INSERT or UPDATE or DELETE
15:36:38   3  ON OFFER_CHAIN
15:36:38   4  	  REFERENCING NEW as new old as old
15:36:38   5  	  FOR EACH ROW
15:36:38   6  DECLARE
15:36:38   7  	  v_action char(1);
15:36:38   8  BEGIN
15:36:38   9  	  IF INSERTING THEN
15:36:38  10  	      v_action := 'I';
15:36:38  11  	  ELSIF UPDATING THEN
15:36:38  12  	      v_action := 'U';
15:36:38  13  	  ELSE
15:36:38  14  	      v_action := 'D';
15:36:38  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:38  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN');
15:36:38  17  	  END IF;
15:36:38  18  
15:36:38  19  	  if (v_action <> 'D') then
15:36:38  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:38  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN');
15:36:38  22  	  end if;
15:36:38  23  END;
15:36:38  24  /

Trigger created.

Elapsed: 00:00:01.21
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_OFFER_OFFER_CHAIN_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON OFFER_OFFER_CHAIN
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(0,:old.offer_id||'~'||:old.offer_chain_id,systimestamp,v_action,'OFFER_OFFER_CHAIN');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(0,:new.offer_id||'~'||:new.offer_chain_id,systimestamp,v_action,'OFFER_OFFER_CHAIN');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.05
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_ELIGIBILITY_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON OFFER_CHAIN_ELIGIBILITY
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN_ELIGIBILITY');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN_ELIGIBILITY');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_OFFER_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON OFFER
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'OFFER');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'OFFER');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.09
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_OFFERING_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON PRODUCT_OFFERING
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_OFFERING');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_OFFERING');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.12
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON PRODUCT
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_PRODUCT_ELIGIBILITY_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON PRODUCT_ELIGIBILITY
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_ELIGIBILITY');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_ELIGIBILITY');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_OFFER_PRODUCT_OFFERING_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON OFFER_PRODUCT_OFFERING
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(0,:old.product_offering_id||'~'||:old.offer_id,systimestamp,v_action,'OFFER_PRODUCT_OFFERING');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(0,:new.product_offering_id||'~'||:new.offer_id,systimestamp,v_action,'OFFER_PRODUCT_OFFERING');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.06
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_PROD_OFFER_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON DISCOUNT_PRODUCT_OFFERING
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(0,:old.discount_id||'~'||:old.product_offering_id,systimestamp,v_action,'DISCOUNT_PRODUCT_OFFERING');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(0,:new.discount_id||'~'||:new.product_offering_id,systimestamp,v_action,'DISCOUNT_PRODUCT_OFFERING');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.08
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON DISCOUNT
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'DISCOUNT');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'DISCOUNT');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_OFFER_CHAIN_META_DATA_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON OFFER_CHAIN_META_DATA
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'OFFER_CHAIN_META_DATA');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'OFFER_CHAIN_META_DATA');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_PROD_OFFER_META_DATA_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON PRODUCT_OFFERING_META_DATA
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'PRODUCT_OFFERING_META_DATA');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'PRODUCT_OFFERING_META_DATA');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.08
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_INVOICE_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON INVOICE
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'INVOICE');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'INVOICE');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_LICENSE_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON LICENSE
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'LICENSE');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'LICENSE');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.05
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_LINE_ITEM_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON LINE_ITEM
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'LINE_ITEM');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'LINE_ITEM');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_SUBSCRIPTION_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON SUBSCRIPTION
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'SUBSCRIPTION');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'SUBSCRIPTION');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:40 SQL> 
15:36:40 SQL> CREATE or REPLACE TRIGGER TR_TRANSACTION_AUD
15:36:40   2  	  AFTER INSERT or UPDATE or DELETE
15:36:40   3  ON TRANSACTION
15:36:40   4  	  REFERENCING NEW as new old as old
15:36:40   5  	  FOR EACH ROW
15:36:40   6  DECLARE
15:36:40   7  	  v_action char(1);
15:36:40   8  BEGIN
15:36:40   9  	  IF INSERTING THEN
15:36:40  10  	      v_action := 'I';
15:36:40  11  	  ELSIF UPDATING THEN
15:36:40  12  	      v_action := 'U';
15:36:40  13  	  ELSE
15:36:40  14  	      v_action := 'D';
15:36:40  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:40  16  	      values(:old.id,null,systimestamp,v_action,'TRANSACTION');
15:36:40  17  	  END IF;
15:36:40  18  
15:36:40  19  	  if (v_action <> 'D') then
15:36:40  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:40  21  		  values(:new.id,null,systimestamp,v_action,'TRANSACTION');
15:36:40  22  	  end if;
15:36:40  23  END;
15:36:40  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_GIFT_CERTIFICATE_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON GIFT_CERTIFICATE
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'GIFT_CERTIFICATE');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'GIFT_CERTIFICATE');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_CHARGE_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON CHARGE
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'CHARGE');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'CHARGE');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_ACCOUNT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON ACCOUNT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'ACCOUNT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'ACCOUNT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.07
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_SUBSCRIPTION_META_DATA_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON SUBSCRIPTION_META_DATA
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'SUBSCRIPTION_META_DATA');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'SUBSCRIPTION_META_DATA');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_CREDIT_CARD_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON CREDIT_CARD
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'CREDIT_CARD');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'CREDIT_CARD');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_TRANSACTION_ATTEMPT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON TRANSACTION_ATTEMPT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'TRANSACTION_ATTEMPT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'TRANSACTION_ATTEMPT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_INVOICE_ADJUSTMENT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON INVOICE_ADJUSTMENT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'INVOICE_ADJUSTMENT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'INVOICE_ADJUSTMENT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_LINE_ITEM_ADJUSTMENT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON LINE_ITEM_ADJUSTMENT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'LINE_ITEM_ADJUSTMENT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'LINE_ITEM_ADJUSTMENT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_TAX_ADJUSTMENT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON TAX_ADJUSTMENT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'TAX_ADJUSTMENT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'TAX_ADJUSTMENT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_DISCOUNT_LINEITEM_ADJ_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON DISCOUNT_LINEITEM_ADJUSTMENT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'DISCOUNT_LINEITEM_ADJUSTMENT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'DISCOUNT_LINEITEM_ADJUSTMENT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.05
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_TAX_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON TAX
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'TAX');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'TAX');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_PAYPAL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON PAYPAL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'PAYPAL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'PAYPAL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_EXT_SOURCE_LOG_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_EXT_SOURCE_LOG
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_EXT_SOURCE_LOG');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_EXT_SOURCE_LOG');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_SVC_CHG_DTL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_CPT_SERVICE_CHARGE_DETAIL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_SERVICE_CHARGE_DETAIL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_SERVICE_CHARGE_DETAIL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.06
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_EXCP_DTL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_CPT_EXCEPTION_DETAIL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_EXCEPTION_DETAIL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_EXCEPTION_DETAIL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_DEPOSIT_DTL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_CPT_DEPOSIT_DETAIL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_DEPOSIT_DETAIL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_DEPOSIT_DETAIL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_CPT_CHBK_ACT_DTL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_CPT_CHARGEBACK_ACT_DETAIL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_CPT_CHARGEBACK_ACT_DETAIL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_CPT_CHARGEBACK_ACT_DETAIL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.03
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_SETTLEMENT_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_PP_SETTLEMENT
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_SETTLEMENT');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_SETTLEMENT');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_DISPUTE_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_PP_DISPUTE
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_DISPUTE');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_DISPUTE');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.05
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_PP_TRANS_DTL_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_PP_TRANS_DETAIL
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_PP_TRANS_DETAIL');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_PP_TRANS_DETAIL');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_RCN_AMEX_CHARGEBACK_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON RCN_AMEX_CHARGEBACK
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'RCN_AMEX_CHARGEBACK');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'RCN_AMEX_CHARGEBACK');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.11
15:36:41 SQL> 
15:36:41 SQL> CREATE or REPLACE TRIGGER TR_ADDRESS_AUD
15:36:41   2  	  AFTER INSERT or UPDATE or DELETE
15:36:41   3  ON ADDRESS
15:36:41   4  	  REFERENCING NEW as new old as old
15:36:41   5  	  FOR EACH ROW
15:36:41   6  DECLARE
15:36:41   7  	  v_action char(1);
15:36:41   8  BEGIN
15:36:41   9  	  IF INSERTING THEN
15:36:41  10  	      v_action := 'I';
15:36:41  11  	  ELSIF UPDATING THEN
15:36:41  12  	      v_action := 'U';
15:36:41  13  	  ELSE
15:36:41  14  	      v_action := 'D';
15:36:41  15  	      insert into change_log(id,combined_id,change_time,action,item)
15:36:41  16  	      values(:old.id,null,systimestamp,v_action,'ADDRESS');
15:36:41  17  	  END IF;
15:36:41  18  
15:36:41  19  	  if (v_action <> 'D') then
15:36:41  20  		  insert into change_log(id,combined_id,change_time,action,item)
15:36:41  21  		  values(:new.id,null,systimestamp,v_action,'ADDRESS');
15:36:41  22  	  end if;
15:36:41  23  END;
15:36:41  24  /

Trigger created.

Elapsed: 00:00:00.04
15:36:41 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
15:36:41 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST2@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com,nytd_oracledba@nytimes.com
Cc: nytd_oracledba@nytimes.com
Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        SID: ECST2
        Schema: core_owner
        Migration: 20.3-release-1.11.1-audit_triggers
        SVN Revision: 10382
        Duration: 3 sec.
        Service Request: https://jira.em.nytimes.com/browse/ORA-339