13:32:26 SQL> @/dbbackups/ECPR/migrations/core_owner/47.2-release-1.14.0-3-CORE-all/upgrade.sql
13:32:26 SQL> --------------------------------------------------------------------------------
13:32:26 SQL> -- DDL for package PROCS_ACCOUNT
13:32:26 SQL> --------------------------------------------------------------------------------
13:32:26 SQL> 
13:32:26 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V20" AS
13:32:26   2  
13:32:26   3  FUNCTION GET_GRACE_START_DATE(
13:32:26   4  	in_subscription_id IN NUMBER
13:32:26   5  ) RETURN DATE;
13:32:26   6  
13:32:26   7  FUNCTION GET_GRACE_END_DATE(
13:32:26   8  	in_subscription_id IN NUMBER
13:32:26   9  ) RETURN DATE;
13:32:26  10  
13:32:26  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
13:32:26  12  	in_group_id    IN  NUMBER,
13:32:26  13  	out_result_set OUT SYS_REFCURSOR
13:32:26  14  );
13:32:26  15  
13:32:26  16  PROCEDURE ANNOTATE_ACCOUNT (
13:32:26  17  	in_group_id   IN  NUMBER,
13:32:26  18  	in_agent_id   IN  NUMBER,
13:32:26  19  	in_note       IN  VARCHAR2,
13:32:26  20  	in_created_by IN  VARCHAR2
13:32:26  21  );
13:32:26  22  
13:32:26  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
13:32:26  24  	in_group_id IN	NUMBER,
13:32:26  25  	out_exists  OUT NUMBER
13:32:26  26  );
13:32:26  27  
13:32:26  28  PROCEDURE DISABLE_ACCOUNT (
13:32:26  29  	in_group_id   IN NUMBER,
13:32:26  30  	in_updated_by IN VARCHAR2,
13:32:26  31  	in_note       IN VARCHAR2,
13:32:26  32  	in_agent_id   IN NUMBER
13:32:26  33  );
13:32:26  34  
13:32:26  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
13:32:26  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
13:32:26  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
13:32:26  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
13:32:26  39  );
13:32:26  40  
13:32:26  41  PROCEDURE REACTIVATE_ACCOUNT (
13:32:26  42  	in_group_id	  IN NUMBER,
13:32:26  43  	in_updated_by	  IN VARCHAR2,
13:32:26  44  	in_note 	  IN VARCHAR2,
13:32:26  45  	in_agent_id	  IN NUMBER
13:32:26  46  );
13:32:26  47  
13:32:26  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
13:32:26  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
13:32:26  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE,
13:32:26  51  	out_result_set OUT SYS_REFCURSOR
13:32:26  52  );
13:32:26  53  
13:32:26  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
13:32:26  55  	in_group_id	  IN NUMBER,
13:32:26  56  	out_result_gc_set OUT SYS_REFCURSOR,
13:32:26  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
13:32:26  58  );
13:32:26  59  
13:32:26  60  PROCEDURE GET_ACCOUNT_INFO  (
13:32:26  61  	  in_group_id	    IN	NUMBER,
13:32:26  62  	  out_account_info  OUT SYS_REFCURSOR
13:32:26  63  );
13:32:26  64  
13:32:26  65  PROCEDURE GET_ACCOUNT_NOTES (
13:32:26  66  	  in_group_id	 IN  NUMBER,
13:32:26  67  	  out_result_set OUT SYS_REFCURSOR
13:32:26  68  );
13:32:26  69  
13:32:26  70  PROCEDURE GET_ACCOUNT_PAYPALS(
13:32:26  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
13:32:26  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.PAYPAL_ACTIVE,
13:32:26  73  	out_result_set OUT SYS_REFCURSOR
13:32:26  74  );
13:32:26  75  
13:32:26  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
13:32:26  77  	  in_group_id	 IN  NUMBER,
13:32:26  78  	  in_start_date  IN DATE,
13:32:26  79  	  in_end_date	 IN DATE,
13:32:26  80  	  in_status	 IN NUMBER,
13:32:26  81  	  in_group_account_type IN VARCHAR2,
13:32:26  82  	  out_result_set  OUT SYS_REFCURSOR
13:32:26  83  );
13:32:26  84  
13:32:26  85  PROCEDURE FREEZE_ACCOUNT (
13:32:26  86  	in_group_id   IN NUMBER,
13:32:26  87  	in_updated_by IN VARCHAR2,
13:32:26  88  	in_note       IN VARCHAR2,
13:32:26  89  	in_agent_id   IN NUMBER
13:32:26  90  );
13:32:26  91  
13:32:26  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
13:32:26  93  	in_group_id	   IN  NUMBER,
13:32:26  94  	in_subscription_id IN NUMBER,
13:32:26  95  	out_result_set	   OUT SYS_REFCURSOR
13:32:26  96  );
13:32:26  97  
13:32:26  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
13:32:26  99  	in_group_id    IN  NUMBER,
13:32:26 100  	out_result_set OUT SYS_REFCURSOR
13:32:26 101  );
13:32:26 102  
13:32:26 103  PROCEDURE GET_GC_INVOICE (
13:32:26 104  	in_group_id    IN  NUMBER,
13:32:26 105  	in_gc_code     IN  VARCHAR2,
13:32:26 106  	out_result_set OUT SYS_REFCURSOR
13:32:26 107  );
13:32:26 108  
13:32:26 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
13:32:26 110  	in_group_id    IN  NUMBER,
13:32:26 111  	out_result_set OUT SYS_REFCURSOR
13:32:26 112  );
13:32:26 113  
13:32:26 114  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
13:32:26 115  	in_group_id IN NUMBER,
13:32:26 116  	out_result_set	   OUT SYS_REFCURSOR
13:32:26 117  );
13:32:26 118  
13:32:26 119  PROCEDURE UPDATE_ACCOUNT_STATUS (
13:32:26 120  	in_account_id	     IN ACCOUNT.ID%TYPE,
13:32:26 121  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
13:32:26 122  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
13:32:26 123  );
13:32:26 124  
13:32:26 125  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
13:32:26 126  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
13:32:26 127  	out_licenses_num OUT NUMBER
13:32:26 128  );
13:32:26 129  
13:32:26 130  PROCEDURE SET_TAX_EXEMPT (
13:32:26 131  	in_group_id  IN NUMBER,
13:32:26 132  	in_exempt_id IN VARCHAR2
13:32:26 133  );
13:32:26 134  
13:32:26 135  PROCEDURE IS_TAX_EXEMPT (
13:32:26 136  	in_group_id	  IN NUMBER,
13:32:26 137  	out_is_tax_exempt OUT NUMBER
13:32:26 138  );
13:32:26 139  
13:32:26 140  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
13:32:26 141  	in_account_id IN NUMBER,
13:32:26 142  	out_group_id  OUT NUMBER
13:32:26 143  );
13:32:26 144  
13:32:26 145  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:26 146  	in_group_id IN NUMBER,
13:32:26 147  	out_account_id	OUT NUMBER
13:32:26 148  );
13:32:26 149  
13:32:26 150  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
13:32:26 151  	in_invoice_id IN NUMBER,
13:32:26 152  	out_group_ids OUT SYS_REFCURSOR
13:32:26 153  );
13:32:26 154  
13:32:26 155  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
13:32:26 156  	in_group_id	  IN NUMBER,
13:32:26 157  	out_tax_exempt_id OUT VARCHAR2
13:32:26 158  );
13:32:26 159  
13:32:26 160  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
13:32:26 161  	in_group_id    IN NUMBER,
13:32:26 162  	out_result_set OUT SYS_REFCURSOR
13:32:26 163  );
13:32:26 164  
13:32:26 165  PROCEDURE GET_USR_ALL_SBSCR_IDS (
13:32:26 166  	in_group_id	   IN NUMBER,
13:32:26 167  	out_result_set	   OUT SYS_REFCURSOR
13:32:26 168  );
13:32:26 169  
13:32:26 170  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
13:32:26 171  	in_group_id	   IN NUMBER,
13:32:26 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:26 173  	out_result_set	   OUT SYS_REFCURSOR
13:32:26 174  );
13:32:26 175  
13:32:26 176  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
13:32:26 177  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:26 178  	in_expiration_date IN DATE,
13:32:26 179  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
13:32:26 180  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:26 181  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
13:32:26 182  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
13:32:26 183  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
13:32:26 184  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
13:32:26 185  	in_lower_bound IN NUMBER DEFAULT 1,
13:32:26 186  	in_upper_bound IN NUMBER DEFAULT 11,
13:32:26 187  	out_result_set OUT SYS_REFCURSOR
13:32:26 188  );
13:32:26 189  
13:32:26 190  END PROCS_ACCOUNT_V20;
13:32:26 191  .
13:32:26 SQL> /

Package created.

Elapsed: 00:00:00.12
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_ACCOUNT_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_ACCOUNT (
13:32:27   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
13:32:27   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
13:32:27   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:27   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
13:32:27   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
13:32:27   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
13:32:27  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:27  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE UPDATE_ACCOUNT (
13:32:27  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
13:32:27  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:27  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
13:32:27  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
13:32:27  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:27  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
13:32:27  22  );
13:32:27  23  
13:32:27  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
13:32:27  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
13:32:27  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
13:32:27  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
13:32:27  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
13:32:27  29  );
13:32:27  30  
13:32:27  31  PROCEDURE READ_ACCOUNT (
13:32:27  32  	in_account_id  IN ACCOUNT.ID%TYPE,
13:32:27  33  	out_result_set OUT SYS_REFCURSOR
13:32:27  34  );
13:32:27  35  
13:32:27  36  PROCEDURE CREATE_ACCOUNT_NOTE (
13:32:27  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
13:32:27  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
13:32:27  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
13:32:27  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
13:32:27  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
13:32:27  42  );
13:32:27  43  
13:32:27  44  END PROCS_ACCOUNT_CRU_V20;
13:32:27  45  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.06
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_ADDRESS(
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   7  */
13:32:27   8  	  out_address_id	OUT NUMBER,
13:32:27   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:27  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:27  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:27  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:27  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:27  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
13:32:27  16  );
13:32:27  17  
13:32:27  18  PROCEDURE UPDATE_ADDRESS(
13:32:27  19  /*
13:32:27  20  Throws exceptions:
13:32:27  21  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  22  */
13:32:27  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
13:32:27  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:27  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:27  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:27  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:27  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:27  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
13:32:27  31  );
13:32:27  32  
13:32:27  33  PROCEDURE GET_ADDRESS (
13:32:27  34  /*
13:32:27  35  Throws exceptions:
13:32:27  36  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  37  */
13:32:27  38  	  in_id 		IN ADDRESS.ID%TYPE,
13:32:27  39  	  out_result_set	OUT SYS_REFCURSOR
13:32:27  40  );
13:32:27  41  
13:32:27  42  END PROCS_ADDRESS_V20;
13:32:27  43  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_ADDRESS_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_ADDRESS(
13:32:27   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
13:32:27   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
13:32:27   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:27   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:27   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:27   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:27  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:27  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
13:32:27  13  );
13:32:27  14  
13:32:27  15  PROCEDURE UPDATE_ADDRESS(
13:32:27  16  	in_address_id	      IN ADDRESS.ID%TYPE,
13:32:27  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:27  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:27  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:27  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:27  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:27  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
13:32:27  24  );
13:32:27  25  
13:32:27  26  END PROCS_ADDRESS_CRU_V20;
13:32:27  27  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_ADJUSTMENTS
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
13:32:27   4  	in_invoice_id		  IN NUMBER,
13:32:27   5  	in_adjustment_reason	  IN VARCHAR2,
13:32:27   6  	in_is_credit		  IN NUMBER,
13:32:27   7  	in_charge_id		  IN NUMBER,
13:32:27   8  	in_business_date	  IN DATE,
13:32:27   9  	in_created_by		  IN VARCHAR2,
13:32:27  10  	out_invoice_adjustment_id OUT NUMBER
13:32:27  11  );
13:32:27  12  
13:32:27  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
13:32:27  14  	in_invoice_id		  IN NUMBER,
13:32:27  15  	in_original_charge_id	  IN NUMBER,
13:32:27  16  	in_charge_id		  IN NUMBER,
13:32:27  17  	in_updated_by		  IN VARCHAR2
13:32:27  18  );
13:32:27  19  
13:32:27  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
13:32:27  21  	in_line_item_id 	    IN NUMBER,
13:32:27  22  	in_invoice_adjustment_id    IN NUMBER,
13:32:27  23  	in_amount		    IN NUMBER,
13:32:27  24  	in_tax			    IN NUMBER,
13:32:27  25  	in_discount		    IN NUMBER,
13:32:27  26  	in_created_by		    IN VARCHAR2,
13:32:27  27  	out_line_item_adjustment_id OUT NUMBER
13:32:27  28  );
13:32:27  29  
13:32:27  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
13:32:27  31  	in_tax_id		   IN NUMBER,
13:32:27  32  	in_line_item_adjustment_id IN NUMBER,
13:32:27  33  	in_amount		   IN NUMBER,
13:32:27  34  	in_created_by		   IN VARCHAR2,
13:32:27  35  	out_tax_adjustment_id	   OUT NUMBER
13:32:27  36  );
13:32:27  37  
13:32:27  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
13:32:27  39  	in_discount_id		   NUMBER,
13:32:27  40  	in_line_item_id 	   NUMBER,
13:32:27  41  	in_line_item_adjustment_id IN NUMBER,
13:32:27  42  	in_amount		   IN NUMBER,
13:32:27  43  	in_created_by		   IN VARCHAR2,
13:32:27  44  	out_discount_li_id	   OUT NUMBER
13:32:27  45  );
13:32:27  46  
13:32:27  47  END PROCS_ADJUSTMENTS_V20;
13:32:27  48  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE GET_SUB_ADX_INFO (
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   7  */
13:32:27   8  	out_result_set	    OUT SYS_REFCURSOR,
13:32:27   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
13:32:27  10  );
13:32:27  11  
13:32:27  12  END PROCS_ADX_V20;
13:32:27  13  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE ADD_AMAZON_APPSTORE(
13:32:27   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
13:32:27   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:27   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
13:32:27   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
13:32:27   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
13:32:27   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:27  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
13:32:27  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE GET_ACTIVE_AMAZON_APPSTORE(
13:32:27  15  	in_user_id IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:27  16  	in_sku	   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:27  17  	out_data   OUT SYS_REFCURSOR
13:32:27  18  );
13:32:27  19  
13:32:27  20  PROCEDURE CREATE_AMAZON_SUB(
13:32:27  21  /*
13:32:27  22  Throws exceptions:
13:32:27  23  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  24  */
13:32:27  25  	  out_id	      OUT NUMBER,
13:32:27  26  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
13:32:27  27  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
13:32:27  28  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
13:32:27  29  );
13:32:27  30  
13:32:27  31  PROCEDURE GET_ACTIVE_SUB_IDS (
13:32:27  32  /*
13:32:27  33  Throws exceptions:
13:32:27  34  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  35  */
13:32:27  36  	out_result_set	    OUT SYS_REFCURSOR,
13:32:27  37  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
13:32:27  38  );
13:32:27  39  
13:32:27  40  PROCEDURE GET_ACTIVE_GROUP_IDS (
13:32:27  41  /*
13:32:27  42  Throws exceptions:
13:32:27  43  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  44  */
13:32:27  45  	out_result_set	    OUT SYS_REFCURSOR,
13:32:27  46  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
13:32:27  47  );
13:32:27  48  
13:32:27  49  END PROCS_AMAZON_V20;
13:32:27  50  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE ADD_AMAZON_APPSTORE(
13:32:27   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
13:32:27   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:27   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
13:32:27   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
13:32:27   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
13:32:27   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:27  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
13:32:27  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE CREATE_AMAZON_SUB(
13:32:27  15  /*
13:32:27  16  Throws exceptions:
13:32:27  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  18  */
13:32:27  19  	  out_id	      OUT NUMBER,
13:32:27  20  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
13:32:27  21  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
13:32:27  22  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
13:32:27  23  );
13:32:27  24  
13:32:27  25  END PROCS_AMAZON_CRU_V20;
13:32:27  26  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_CHARGE
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_CHARGE(
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   8  */
13:32:27   9  	in_invoice_id	      IN NUMBER,
13:32:27  10  	in_transaction_id     IN NUMBER,
13:32:27  11  	in_instrument_type_id IN NUMBER,
13:32:27  12  	in_instrument_id      IN NUMBER,
13:32:27  13  	in_charge_amount      IN NUMBER,
13:32:27  14  	in_created_by	      IN VARCHAR2,
13:32:27  15  	in_charge_status_id   IN NUMBER,
13:32:27  16  	out_charge_id	      OUT NUMBER
13:32:27  17  );
13:32:27  18  
13:32:27  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
13:32:27  20  /*
13:32:27  21  Throws exceptions:
13:32:27  22  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  23  */
13:32:27  24  	out_result_set	    OUT SYS_REFCURSOR,
13:32:27  25  	in_row_number	    IN NUMBER DEFAULT NULL
13:32:27  26  );
13:32:27  27  
13:32:27  28  PROCEDURE GET_UNPROCESSED_CHARGES (
13:32:27  29  /*
13:32:27  30  Throws exceptions:
13:32:27  31  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  32  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  33  */
13:32:27  34  	in_invoice_id  IN NUMBER,
13:32:27  35  	out_result_set OUT SYS_REFCURSOR
13:32:27  36  );
13:32:27  37  
13:32:27  38  PROCEDURE GET_PROCESSED_CHARGES (
13:32:27  39  /*
13:32:27  40  Throws exceptions:
13:32:27  41  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  42  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  43  */
13:32:27  44  	in_invoice_id  IN NUMBER,
13:32:27  45  	out_result_set OUT SYS_REFCURSOR
13:32:27  46  );
13:32:27  47  
13:32:27  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
13:32:27  49  /*
13:32:27  50  Throws exceptions:
13:32:27  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  53  */
13:32:27  54  	in_charge_id	    IN NUMBER,
13:32:27  55  	out_subscription_id OUT NUMBER
13:32:27  56  );
13:32:27  57  
13:32:27  58  PROCEDURE UPDATE_CHARGE_STATUS (
13:32:27  59  /*
13:32:27  60  Throws exceptions:
13:32:27  61  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  63  */
13:32:27  64  	in_charge_id	    IN CHARGE.ID%TYPE,
13:32:27  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:27  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
13:32:27  67  );
13:32:27  68  
13:32:27  69  FUNCTION IS_CHARGE_COLLECTED (
13:32:27  70  /*
13:32:27  71  Throws:
13:32:27  72  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  73  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  74  Returns:
13:32:27  75  GLOBAL_CONST.TRUE if transaction collected,
13:32:27  76  GLOBAL_CONST.FALSE else
13:32:27  77  */
13:32:27  78  	in_charge_id IN NUMBER
13:32:27  79  ) RETURN NUMBER;
13:32:27  80  
13:32:27  81  PROCEDURE GET_COLLECTED_CHARGES (
13:32:27  82  /*
13:32:27  83  Throws exceptions:
13:32:27  84  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  85  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  86  */
13:32:27  87  	in_invoice_id  IN NUMBER,
13:32:27  88  	out_result_set OUT SYS_REFCURSOR
13:32:27  89  );
13:32:27  90  
13:32:27  91  END PROCS_CHARGE_V20;
13:32:27  92  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.04
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_CHARGE_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_CHARGE(
13:32:27   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
13:32:27   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
13:32:27   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
13:32:27   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:27   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
13:32:27   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
13:32:27  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
13:32:27  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:27  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
13:32:27  13  );
13:32:27  14  
13:32:27  15  PROCEDURE UPDATE_CHARGE(
13:32:27  16  	in_charge_id	      IN CHARGE.ID%TYPE,
13:32:27  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:27  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
13:32:27  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
13:32:27  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
13:32:27  22  );
13:32:27  23  
13:32:27  24  END PROCS_CHARGE_CRU_V20;
13:32:27  25  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
13:32:27   2  
13:32:27   3  	PROCEDURE POPULATE_REQUEST_INFO(
13:32:27   4  	  in_hours_prior    IN	NUMBER,
13:32:27   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
13:32:27   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
13:32:27   7  	);
13:32:27   8  
13:32:27   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
13:32:27  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:27  11  	  in_start	     IN NUMBER,
13:32:27  12  	  in_end	     IN NUMBER,
13:32:27  13  	  out_result_set     OUT SYS_REFCURSOR
13:32:27  14  	);
13:32:27  15  
13:32:27  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
13:32:27  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
13:32:27  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
13:32:27  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
13:32:27  20  	);
13:32:27  21  
13:32:27  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
13:32:27  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:27  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:27  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
13:32:27  26  	);
13:32:27  27  
13:32:27  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
13:32:27  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
13:32:27  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
13:32:27  31  	  out_request_files   OUT SYS_REFCURSOR
13:32:27  32  	);
13:32:27  33  
13:32:27  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
13:32:27  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:27  36  	  out_count OUT NUMBER
13:32:27  37  	);
13:32:27  38  
13:32:27  39  	PROCEDURE GET_CREDIT_CARD_INFO (
13:32:27  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
13:32:27  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
13:32:27  42  	  out_card_info        OUT SYS_REFCURSOR
13:32:27  43  	);
13:32:27  44  
13:32:27  45  	PROCEDURE UPDATE_CC_UPDATE(
13:32:27  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
13:32:27  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:27  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
13:32:27  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
13:32:27  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
13:32:27  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:27  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
13:32:27  53  	);
13:32:27  54  
13:32:27  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
13:32:27  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
13:32:27  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:27  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
13:32:27  59  	);
13:32:27  60  
13:32:27  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
13:32:27  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
13:32:27  63  	  out_request_file     OUT SYS_REFCURSOR
13:32:27  64  	);
13:32:27  65  
13:32:27  66  	PROCEDURE SUSPEND_CREDIT_CARD (
13:32:27  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
13:32:27  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:27  69  	);
13:32:27  70  
13:32:27  71  	PROCEDURE UPDATE_CREDIT_CARD (
13:32:27  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
13:32:27  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:27  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
13:32:27  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:27  76  	);
13:32:27  77  
13:32:27  78  	PROCEDURE COMPLETABLE_REQUESTS (
13:32:27  79  	  out_request_files OUT SYS_REFCURSOR
13:32:27  80  	);
13:32:27  81  
13:32:27  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
13:32:27  83  	  in_max_hours_before_report IN  NUMBER,
13:32:27  84  	  out_request_files	     OUT SYS_REFCURSOR
13:32:27  85  	);
13:32:27  86  
13:32:27  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
13:32:27  88  	  in_account_id IN NUMBER,
13:32:27  89  	  out_group_id	OUT NUMBER
13:32:27  90  	);
13:32:27  91  
13:32:27  92  	PROCEDURE GET_LICENSE_BY_ID (
13:32:27  93  	  in_license_id  IN NUMBER,
13:32:27  94  	  out_result_set OUT SYS_REFCURSOR
13:32:27  95  	);
13:32:27  96  
13:32:27  97  END PROCS_CUPY;
13:32:27  98  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.22
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE
13:32:27   2  PACKAGE PROCS_ENTITLEMENT_V20 AS
13:32:27   3  
13:32:27   4  PROCEDURE GET_ALL_ENTITLEMENTS(
13:32:27   5  	in_group_id IN NUMBER,
13:32:27   6  	out_result_set OUT SYS_REFCURSOR);
13:32:27   7  
13:32:27   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
13:32:27   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:27  10  	out_result_set OUT SYS_REFCURSOR);
13:32:27  11  
13:32:27  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
13:32:27  13  	in_subscription_id IN NUMBER,
13:32:27  14  	out_uri OUT VARCHAR2);
13:32:27  15  
13:32:27  16  END PROCS_ENTITLEMENT_V20;
13:32:27  17  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
13:32:27   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:27   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
13:32:27   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
13:32:27   7  );
13:32:27   8  
13:32:27   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
13:32:27  10  	in_invoice_id		     IN NUMBER,
13:32:27  11  	out_is_invoice_for_redeem_gc OUT NUMBER
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE GET_UNREDEEMED_GCS (
13:32:27  15  	out_result_set		OUT SYS_REFCURSOR,
13:32:27  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:27  17  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:27  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:27  19  );
13:32:27  20  
13:32:27  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
13:32:27  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:27  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
13:32:27  24  );
13:32:27  25  
13:32:27  26  PROCEDURE ADD_CREDIT_CARD (
13:32:27  27  /*
13:32:27  28  Throws exceptions:
13:32:27  29  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  31  */
13:32:27  32  	in_group_id		  IN NUMBER,
13:32:27  33  	in_updated_by		  IN VARCHAR2,
13:32:27  34  	in_instrument_name	  IN VARCHAR2,
13:32:27  35  	in_card_holder_name	  IN VARCHAR2,
13:32:27  36  	in_street_address	  IN VARCHAR2,
13:32:27  37  	in_street_address2	  IN VARCHAR2,
13:32:27  38  	in_state		  IN VARCHAR2,
13:32:27  39  	in_city 		  IN VARCHAR2,
13:32:27  40  	in_postal_code		  IN VARCHAR2,
13:32:27  41  	in_country		  IN CHAR,
13:32:27  42  	in_last_four_cc 	  IN VARCHAR2,
13:32:27  43  	in_expiration_date	  IN DATE,
13:32:27  44  	in_credit_card_type_id	  IN NUMBER,
13:32:27  45  	in_token		  IN VARCHAR2,
13:32:27  46  	in_chase_profile_id	  IN VARCHAR2,
13:32:27  47  	in_credit_card_status_id  IN NUMBER,
13:32:27  48  	in_private_first_name	  IN VARCHAR2,
13:32:27  49  	in_private_last_name	  IN VARCHAR2,
13:32:27  50  	out_credit_card_id	  OUT NUMBER
13:32:27  51  );
13:32:27  52  
13:32:27  53  /******************************************************************************/
13:32:27  54  
13:32:27  55  PROCEDURE ADD_PAYPAL (
13:32:27  56  /*
13:32:27  57  Throws exceptions:
13:32:27  58  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  59  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  60  */
13:32:27  61  	in_group_id			IN NUMBER,
13:32:27  62  	in_instrument_name		IN VARCHAR2,
13:32:27  63  	in_private_email_address	IN VARCHAR2,
13:32:27  64  	in_created_by			IN VARCHAR2,
13:32:27  65  	in_paypal_status_id		IN NUMBER,
13:32:27  66  	in_paypal_prvt_street_address	IN VARCHAR2,
13:32:27  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
13:32:27  68  	in_state			IN VARCHAR2,
13:32:27  69  	in_city 			IN VARCHAR2,
13:32:27  70  	in_postal_code			IN VARCHAR2,
13:32:27  71  	in_country			IN CHAR,
13:32:27  72  	in_expiration_date		IN DATE,
13:32:27  73  	in_secret_token 		IN VARCHAR2,
13:32:27  74  	out_paypal_id			OUT NUMBER
13:32:27  75  );
13:32:27  76  
13:32:27  77  /********************************************/
13:32:27  78  
13:32:27  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
13:32:27  80  /*
13:32:27  81  Throws exceptions:
13:32:27  82  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:27  83  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  84  */
13:32:27  85  	in_code       IN VARCHAR,
13:32:27  86  	out_result_set OUT SYS_REFCURSOR
13:32:27  87  );
13:32:27  88  
13:32:27  89  /********************************************/
13:32:27  90  
13:32:27  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
13:32:27  92  /*
13:32:27  93  Throws exceptions:
13:32:27  94  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:27  95  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  96  */
13:32:27  97  	in_gift_certificate_id IN NUMBER,
13:32:27  98  	out_result_set	       OUT SYS_REFCURSOR
13:32:27  99  );
13:32:27 100  
13:32:27 101  /********************************************/
13:32:27 102  
13:32:27 103  PROCEDURE DISABLE_CREDIT_CARD (
13:32:27 104  /*
13:32:27 105  Throws exceptions:
13:32:27 106  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27 107  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27 108  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27 109  */
13:32:27 110  	in_credit_card_id IN NUMBER,
13:32:27 111  	in_updated_by	  IN VARCHAR2
13:32:27 112  );
13:32:27 113  
13:32:27 114  /********************************************/
13:32:27 115  
13:32:27 116  PROCEDURE DISABLE_PAYPAL (
13:32:27 117  /*
13:32:27 118  Throws exceptions:
13:32:27 119  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27 120  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27 121  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27 122  */
13:32:27 123  	in_paypal_id  IN NUMBER,
13:32:27 124  	in_updated_by IN VARCHAR2
13:32:27 125  );
13:32:27 126  
13:32:27 127  /********************************************/
13:32:27 128  
13:32:27 129  PROCEDURE UPDATE_CREDIT_CARD (
13:32:27 130  /*
13:32:27 131  Throws exceptions:
13:32:27 132  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27 133  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27 134  */
13:32:27 135  	in_credit_card_id	  IN NUMBER,
13:32:27 136  	in_updated_by		  IN VARCHAR2,
13:32:27 137  	in_instrument_name	  IN VARCHAR2,
13:32:27 138  	in_is_default		  IN NUMBER
13:32:27 139  );
13:32:27 140  
13:32:27 141  /********************************************/
13:32:27 142  
13:32:27 143  PROCEDURE START_GC_PURCHASING (
13:32:27 144  	in_group_id		  IN NUMBER,
13:32:27 145  	in_offer_chain_id	  IN VARCHAR2,
13:32:27 146  	in_gift_certificate_code  IN  VARCHAR2,
13:32:27 147  	in_created_by		  IN  VARCHAR2,
13:32:27 148  	in_recipient_name	  IN  VARCHAR2,
13:32:27 149  	in_recipient_email	  IN  VARCHAR2,
13:32:27 150  	in_recipient_address_id   IN NUMBER,
13:32:27 151  	in_recipient_notify_date  IN DATE,
13:32:27 152  	in_sender_name		  IN VARCHAR2,
13:32:27 153  	in_sender_email 	  IN VARCHAR2,
13:32:27 154  	in_gift_message 	  IN  VARCHAR2,
13:32:27 155  	in_expiration_date	  IN DATE,
13:32:27 156  	out_gift_certificate_id   OUT NUMBER,
13:32:27 157  	out_invoice_id		  OUT NUMBER
13:32:27 158  );
13:32:27 159  
13:32:27 160  PROCEDURE FINALIZE_GC_PURCHASING (
13:32:27 161  	in_invoice_id	      IN NUMBER,
13:32:27 162  	in_created_by	      IN VARCHAR2,
13:32:27 163  	in_instrument_id      IN NUMBER,
13:32:27 164  	in_instrument_type_id IN NUMBER,
13:32:27 165  	in_order_id	      IN VARCHAR2,
13:32:27 166  	in_transaction_id     IN NUMBER,
13:32:27 167  	out_charge_amount     OUT NUMBER
13:32:27 168  );
13:32:27 169  
13:32:27 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
13:32:27 171  	in_group_id	  IN NUMBER,
13:32:27 172  	in_offer_chain_id IN VARCHAR2,
13:32:27 173  	in_gift_certificate_code  IN  VARCHAR2,
13:32:27 174  	in_created_by IN  VARCHAR2,
13:32:27 175  	in_recipient_name IN  VARCHAR2,
13:32:27 176  	in_recipient_email IN  VARCHAR2,
13:32:27 177  	in_sender_name IN VARCHAR2,
13:32:27 178  	in_sender_email IN VARCHAR2,
13:32:27 179  	in_gift_message IN  VARCHAR2,
13:32:27 180  	in_instrument_id  IN  NUMBER,
13:32:27 181  	in_instrument_type_id IN NUMBER,
13:32:27 182  	in_expiration_date IN DATE,
13:32:27 183  	in_order_id IN VARCHAR2,
13:32:27 184  	in_transaction_id IN NUMBER
13:32:27 185  );
13:32:27 186  
13:32:27 187  /*********************************************/
13:32:27 188  
13:32:27 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
13:32:27 190  	in_group_id			IN NUMBER,
13:32:27 191  	in_gift_certificate_code	IN VARCHAR2,
13:32:27 192  	in_created_by			IN VARCHAR2,
13:32:27 193  	in_redeemer_address_id		IN NUMBER,
13:32:27 194  	in_fin_instrument_id		IN NUMBER,
13:32:27 195  	in_fin_instrument_type_id	IN NUMBER,
13:32:27 196  	in_redemption_offer_chain_id	IN NUMBER,
13:32:27 197  	out_subscription_id		OUT NUMBER,
13:32:27 198  	out_license_id			OUT NUMBER
13:32:27 199  );
13:32:27 200  
13:32:27 201  /********************************************/
13:32:27 202  
13:32:27 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
13:32:27 204  	in_group_id	       IN  NUMBER,
13:32:27 205  	out_instrument_type_id OUT NUMBER,
13:32:27 206  	out_instrument_id      OUT NUMBER
13:32:27 207  );
13:32:27 208  
13:32:27 209  /************************************************/
13:32:27 210  
13:32:27 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
13:32:27 212  	in_group_id	      IN NUMBER,
13:32:27 213  	in_instrument_type_id IN NUMBER,
13:32:27 214  	in_instrument_id      IN NUMBER,
13:32:27 215  	in_updated_by	      IN VARCHAR2
13:32:27 216  );
13:32:27 217  
13:32:27 218  /***************************************************/
13:32:27 219  
13:32:27 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
13:32:27 221  	in_group_id	      IN NUMBER
13:32:27 222  );
13:32:27 223  
13:32:27 224  /****************************************************/
13:32:27 225  
13:32:27 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:27 227  	in_credit_card_id IN  NUMBER,
13:32:27 228  	out_result_set	  OUT SYS_REFCURSOR
13:32:27 229  );
13:32:27 230  
13:32:27 231  /****************************************************/
13:32:27 232  
13:32:27 233  PROCEDURE GET_PAYPAL_BY_ID (
13:32:27 234  	in_paypal_id   IN  NUMBER,
13:32:27 235  	out_result_set OUT SYS_REFCURSOR
13:32:27 236  );
13:32:27 237  
13:32:27 238  /***********************************************/
13:32:27 239  
13:32:27 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
13:32:27 241  	in_credit_card_id NUMBER
13:32:27 242  ) RETURN NUMBER;
13:32:27 243  
13:32:27 244  /*************************************************/
13:32:27 245  
13:32:27 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
13:32:27 247  	in_group_id    IN NUMBER,
13:32:27 248  	out_result_set OUT SYS_REFCURSOR
13:32:27 249  );
13:32:27 250  
13:32:27 251  /*************************************************/
13:32:27 252  
13:32:27 253  -- isGiftCertificateForProperOffer
13:32:27 254  
13:32:27 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
13:32:27 256  	in_gift_certificate_id IN NUMBER,
13:32:27 257  	in_charge_id	       IN NUMBER,
13:32:27 258  	out_result	       OUT NUMBER
13:32:27 259  );
13:32:27 260  
13:32:27 261  FUNCTION IS_CREDIT_CARD_EXISTS (
13:32:27 262  /*
13:32:27 263  1 - if instrument exists
13:32:27 264  0 - else
13:32:27 265  */
13:32:27 266  	in_credit_card_id IN NUMBER
13:32:27 267  ) RETURN NUMBER;
13:32:27 268  
13:32:27 269  FUNCTION IS_PAYPAL_EXISTS (
13:32:27 270  /*
13:32:27 271  1 - if instrument exists
13:32:27 272  0 - else
13:32:27 273  */
13:32:27 274  	in_paypal_id IN NUMBER
13:32:27 275  ) RETURN NUMBER;
13:32:27 276  
13:32:27 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
13:32:27 278  /*
13:32:27 279  1 - if instrument exists
13:32:27 280  0 - else
13:32:27 281  */
13:32:27 282  	in_gift_certificate_id IN NUMBER
13:32:27 283  ) RETURN NUMBER;
13:32:27 284  
13:32:27 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
13:32:27 286  	in_credit_card_id IN NUMBER,
13:32:27 287  	out_group_id	  OUT NUMBER
13:32:27 288  );
13:32:27 289  
13:32:27 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
13:32:27 291  	in_paypal_id IN NUMBER,
13:32:27 292  	out_group_id	  OUT NUMBER
13:32:27 293  );
13:32:27 294  
13:32:27 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
13:32:27 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
13:32:27 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
13:32:27 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:27 299  );
13:32:27 300  
13:32:27 301  PROCEDURE UPDATE_PAYPAL_STATUS (
13:32:27 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
13:32:27 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
13:32:27 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
13:32:27 305  );
13:32:27 306  
13:32:27 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
13:32:27 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
13:32:27 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
13:32:27 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
13:32:27 311  );
13:32:27 312  
13:32:27 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:27 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:27 315  	out_result_set OUT SYS_REFCURSOR
13:32:27 316  );
13:32:27 317  
13:32:27 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
13:32:27 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
13:32:27 320  	in_old_fin_instrument_id   IN NUMBER,
13:32:27 321  	in_old_fin_instrument_type IN NUMBER,
13:32:27 322  	in_new_fin_instrument_id   IN NUMBER,
13:32:27 323  	in_new_fin_instrument_type IN NUMBER,
13:32:27 324  	in_updated_by		   IN VARCHAR2
13:32:27 325  );
13:32:27 326  
13:32:27 327  END PROCS_FIN_INSTRUMENTS_V20;
13:32:27 328  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_CREDIT_CARD(
13:32:27   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
13:32:27   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
13:32:27   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
13:32:27   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
13:32:27   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
13:32:27   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
13:32:27  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
13:32:27  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
13:32:27  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
13:32:27  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
13:32:27  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
13:32:27  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:27  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
13:32:27  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
13:32:27  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
13:32:27  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
13:32:27  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
13:32:27  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
13:32:27  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
13:32:27  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
13:32:27  24  );
13:32:27  25  
13:32:27  26  PROCEDURE UPDATE_CREDIT_CARD(
13:32:27  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
13:32:27  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:27  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
13:32:27  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:27  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
13:32:27  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
13:32:27  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
13:32:27  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
13:32:27  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
13:32:27  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:27  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
13:32:27  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
13:32:27  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
13:32:27  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
13:32:27  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
13:32:27  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
13:32:27  45  );
13:32:27  46  
13:32:27  47  PROCEDURE CREATE_PAYPAL(
13:32:27  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
13:32:27  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
13:32:27  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
13:32:27  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:27  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
13:32:27  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
13:32:27  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
13:32:27  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
13:32:27  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
13:32:27  57  	in_state			IN PAYPAL.STATE%TYPE,
13:32:27  58  	in_city 			IN PAYPAL.CITY%TYPE,
13:32:27  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
13:32:27  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
13:32:27  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
13:32:27  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
13:32:27  63  );
13:32:27  64  
13:32:27  65  PROCEDURE UPDATE_PAYPAL(
13:32:27  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
13:32:27  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:27  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
13:32:27  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
13:32:27  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:27  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:27  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
13:32:27  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
13:32:27  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:27  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
13:32:27  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:27  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
13:32:27  79  );
13:32:27  80  
13:32:27  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
13:32:27  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
13:32:27  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
13:32:27  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
13:32:27  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:27  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
13:32:27  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:27  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
13:32:27  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
13:32:27  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
13:32:27  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
13:32:27  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
13:32:27  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
13:32:27  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
13:32:27  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
13:32:27  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
13:32:27  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
13:32:27  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
13:32:27  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
13:32:27 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
13:32:27 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:27 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
13:32:27 103  );
13:32:27 104  
13:32:27 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
13:32:27 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
13:32:27 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:27 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
13:32:27 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
13:32:27 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
13:32:27 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
13:32:27 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
13:32:27 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
13:32:27 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
13:32:27 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
13:32:27 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
13:32:27 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
13:32:27 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
13:32:27 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
13:32:27 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:27 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:27 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
13:32:27 123  );
13:32:27 124  
13:32:27 125  END PROCS_FIN_INSTRUMENTS_CRU_V20;
13:32:27 126  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.04
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V20" As
13:32:27   2  
13:32:27   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
13:32:27   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:27   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
13:32:27   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:27   7  );
13:32:27   8  
13:32:27   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
13:32:27  10  	out_result_set OUT SYS_REFCURSOR
13:32:27  11  );
13:32:27  12  
13:32:27  13  PROCEDURE EXPIRE_SUB_SHARE (
13:32:27  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:27  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:27  16  );
13:32:27  17  
13:32:27  18  PROCEDURE EXPIRE_ALL_SHARES (
13:32:27  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
13:32:27  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:27  21  );
13:32:27  22  
13:32:27  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
13:32:27  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
13:32:27  25  	in_start	 IN  NUMBER,
13:32:27  26  	in_end		 IN  NUMBER,
13:32:27  27  	in_expired	 IN  NUMBER,
13:32:27  28  	out_result_set	 OUT SYS_REFCURSOR,
13:32:27  29  	out_shares_count OUT NUMBER
13:32:27  30  );
13:32:27  31  
13:32:27  32  PROCEDURE IS_VALID_IP_ADDRESS (
13:32:27  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:27  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:27  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:27  36  	out_is_valid	    OUT NUMBER
13:32:27  37  );
13:32:27  38  
13:32:27  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
13:32:27  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:27  42  	out_is_valid	    OUT NUMBER
13:32:27  43  );
13:32:27  44  
13:32:27  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
13:32:27  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
13:32:27  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
13:32:27  48  	Out_Result_Set	       Out Sys_Refcursor
13:32:27  49  );
13:32:27  50  
13:32:27  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
13:32:27  52  	in_group_account_id IN NUMBER,
13:32:27  53  	in_start	    IN NUMBER,
13:32:27  54  	in_end		    IN NUMBER,
13:32:27  55  	Out_Result_Set	    OUT Sys_Refcursor
13:32:27  56  );
13:32:27  57  
13:32:27  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
13:32:27  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
13:32:27  60  	Out_Result_Set	   Out Sys_Refcursor
13:32:27  61  );
13:32:27  62  
13:32:27  63  PROCEDURE CREATE_GROUP_ACCOUNT (
13:32:27  64  	in_subscription_id	 IN NUMBER,
13:32:27  65  	in_group_name		 IN VARCHAR2,
13:32:27  66  	in_first_name		 IN VARCHAR2,
13:32:27  67  	in_last_name		 IN VARCHAR2,
13:32:27  68  	in_email		 IN VARCHAR2,
13:32:27  69  	in_phone		 IN VARCHAR2,
13:32:27  70  	in_organization_type	 IN VARCHAR2,
13:32:27  71  	in_seats		 IN NUMBER,
13:32:27  72  	in_seat_ttl_in_hours	 IN NUMBER,
13:32:27  73  	in_ip			 IN NUMBER,
13:32:27  74  	in_created_by		 IN VARCHAR2
13:32:27  75  );
13:32:27  76  
13:32:27  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
13:32:27  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:27  79  	out_result_set	    OUT SYS_REFCURSOR
13:32:27  80  );
13:32:27  81  
13:32:27  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
13:32:27  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:27  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:27  85  	out_result_set	    OUT SYS_REFCURSOR
13:32:27  86  );
13:32:27  87  
13:32:27  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
13:32:27  89  	in_group_account_id   IN NUMBER,
13:32:27  90  	in_start	      IN NUMBER,
13:32:27  91  	in_end		      IN NUMBER,
13:32:27  92  	in_status	      IN NUMBER,
13:32:27  93  	out_record_count      OUT NUMBER,
13:32:27  94  	out_result_set	      OUT SYS_REFCURSOR
13:32:27  95  );
13:32:27  96  
13:32:27  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
13:32:27  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27  99  	in_start	      IN NUMBER,
13:32:27 100  	in_end		      IN NUMBER,
13:32:27 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
13:32:27 102  	out_record_count      OUT NUMBER,
13:32:27 103  	out_result_set	      OUT SYS_REFCURSOR
13:32:27 104  );
13:32:27 105  
13:32:27 106  PROCEDURE ADD_EMAIL_DOMAIN (
13:32:27 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:27 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
13:32:27 110  );
13:32:27 111  
13:32:27 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
13:32:27 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:27 115  );
13:32:27 116  
13:32:27 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
13:32:27 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:27 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:27 120  );
13:32:27 121  
13:32:27 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
13:32:27 123  	in_group_account_id    IN NUMBER,
13:32:27 124  	in_borrower_account_id IN NUMBER,
13:32:27 125  	in_ip_address	       IN VARCHAR2,
13:32:27 126  	in_email_domain        IN VARCHAR2,
13:32:27 127  	in_created_by	       IN VARCHAR2
13:32:27 128  );
13:32:27 129  
13:32:27 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
13:32:27 131  	in_group_account_id   IN NUMBER,
13:32:27 132  	out_occupied_seats   OUT NUMBER
13:32:27 133  );
13:32:27 134  
13:32:27 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
13:32:27 136  	in_group_account_id   IN NUMBER
13:32:27 137  ) RETURN NUMBER;
13:32:27 138  
13:32:27 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
13:32:27 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:27 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:27 142  );
13:32:27 143  
13:32:27 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
13:32:27 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
13:32:27 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:27 147  );
13:32:27 148  
13:32:27 149  PROCEDURE ADD_IP_RANGE (
13:32:27 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:27 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
13:32:27 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:27 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:27 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
13:32:27 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
13:32:27 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
13:32:27 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
13:32:27 158  );
13:32:27 159  
13:32:27 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
13:32:27 161  	in_group_account_id IN NUMBER,
13:32:27 162  	out_group_id OUT NUMBER
13:32:27 163  );
13:32:27 164  
13:32:27 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
13:32:27 166  	in_group_account_ip_range_id IN NUMBER,
13:32:27 167  	out_group_id OUT NUMBER
13:32:27 168  );
13:32:27 169  
13:32:27 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
13:32:27 171  	in_group_account_email_dom_id IN NUMBER,
13:32:27 172  	out_group_id OUT NUMBER
13:32:27 173  );
13:32:27 174  
13:32:27 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
13:32:27 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:27 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
13:32:27 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
13:32:27 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
13:32:27 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
13:32:27 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
13:32:27 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:27 183  );
13:32:27 184  
13:32:27 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
13:32:27 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:27 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
13:32:27 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:27 189  );
13:32:27 190  
13:32:27 191  END PROCS_GROUP_ACCOUNT_V20;
13:32:27 192  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.04
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
13:32:27   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:27   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
13:32:27   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
13:32:27   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
13:32:27   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
13:32:27   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
13:32:27  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
13:32:27  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE CREATE_GROUP_ACCOUNT (
13:32:27  15  	in_subscription_id	 IN NUMBER,
13:32:27  16  	in_group_name		 IN VARCHAR2,
13:32:27  17  	in_first_name		 IN VARCHAR2,
13:32:27  18  	in_last_name		 IN VARCHAR2,
13:32:27  19  	in_email		 IN VARCHAR2,
13:32:27  20  	in_phone		 IN VARCHAR2,
13:32:27  21  	in_organization_type	 IN VARCHAR2,
13:32:27  22  	in_seats		 IN NUMBER,
13:32:27  23  	in_seat_ttl_in_hours	 IN NUMBER,
13:32:27  24  	in_ip			 IN NUMBER,
13:32:27  25  	in_created_by		 IN VARCHAR2
13:32:27  26  );
13:32:27  27  
13:32:27  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
13:32:27  29  	in_group_account_id    IN NUMBER,
13:32:27  30  	in_borrower_account_id IN NUMBER,
13:32:27  31  	in_ip_address	       IN VARCHAR2,
13:32:27  32  	in_email_domain        IN VARCHAR2,
13:32:27  33  	in_start_date	       IN DATE,
13:32:27  34  	in_end_date	       IN DATE,
13:32:27  35  	in_created_by	       IN VARCHAR2
13:32:27  36  );
13:32:27  37  
13:32:27  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
13:32:27  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:27  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:27  41  );
13:32:27  42  
13:32:27  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
13:32:27  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
13:32:27  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:27  46  );
13:32:27  47  
13:32:27  48  PROCEDURE ADD_IP_RANGE (
13:32:27  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:27  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
13:32:27  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:27  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:27  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
13:32:27  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
13:32:27  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
13:32:27  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
13:32:27  57  );
13:32:27  58  
13:32:27  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
13:32:27  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:27  62  );
13:32:27  63  
13:32:27  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
13:32:27  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:27  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:27  67  );
13:32:27  68  
13:32:27  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
13:32:27  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:27  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:27  72  );
13:32:27  73  
13:32:27  74  PROCEDURE ADD_EMAIL_DOMAIN (
13:32:27  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:27  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:27  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
13:32:27  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
13:32:27  79  );
13:32:27  80  
13:32:27  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
13:32:27  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:27  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
13:32:27  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
13:32:27  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
13:32:27  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
13:32:27  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
13:32:27  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:27  89  );
13:32:27  90  
13:32:27  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
13:32:27  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:27  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
13:32:27  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:27  95  );
13:32:27  96  END PROCS_GROUP_ACCOUNT_CRU_V20;
13:32:27  97  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_HISTORY
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_ADDRESS_HISTORY(
13:32:27   4  /*
13:32:27   5  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   7  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27   8  */
13:32:27   9  	in_address_id		     IN NUMBER,
13:32:27  10  	in_system_activity_reason_id IN NUMBER
13:32:27  11  );
13:32:27  12  
13:32:27  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
13:32:27  14  /*
13:32:27  15  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  16  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  17  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  18  */
13:32:27  19  	in_account_id		     IN NUMBER,
13:32:27  20  	in_system_activity_reason_id IN NUMBER
13:32:27  21  );
13:32:27  22  
13:32:27  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
13:32:27  24  /*
13:32:27  25  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  27  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  28  */
13:32:27  29  	in_subscription_id	     IN NUMBER,
13:32:27  30  	in_system_activity_reason_id IN NUMBER
13:32:27  31  );
13:32:27  32  
13:32:27  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
13:32:27  34  /*
13:32:27  35  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  36  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  37  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  38  */
13:32:27  39  	in_credit_card_id	      IN NUMBER,
13:32:27  40  	in_system_activity_reason_id  IN  NUMBER
13:32:27  41  );
13:32:27  42  
13:32:27  43  PROCEDURE CREATE_PAYPAL_HISTORY(
13:32:27  44  /*
13:32:27  45  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  46  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  47  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  48  */
13:32:27  49  	in_paypal_id		      IN NUMBER,
13:32:27  50  	in_system_activity_reason_id  IN NUMBER
13:32:27  51  );
13:32:27  52  
13:32:27  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
13:32:27  54  /*
13:32:27  55  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  56  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  57  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  58  */
13:32:27  59  	in_gift_certificate_id	      IN NUMBER,
13:32:27  60  	in_system_activity_reason_id  IN  NUMBER
13:32:27  61  );
13:32:27  62  
13:32:27  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
13:32:27  64  /*
13:32:27  65  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  66  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  67  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  68  */
13:32:27  69  	in_transaction_id	     IN NUMBER,
13:32:27  70  	in_system_activity_reason_id IN NUMBER
13:32:27  71  );
13:32:27  72  
13:32:27  73  PROCEDURE CREATE_INVOICE_HISTORY (
13:32:27  74  /*
13:32:27  75  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  76  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  77  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  78  */
13:32:27  79  	in_invoice_id		     IN NUMBER,
13:32:27  80  	in_system_activity_reason_id IN NUMBER
13:32:27  81  );
13:32:27  82  
13:32:27  83  PROCEDURE CREATE_LICENSE_HISTORY (
13:32:27  84  /*
13:32:27  85  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  86  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  87  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  88  */
13:32:27  89  	in_license_id		     IN NUMBER,
13:32:27  90  	in_system_activity_reason_id IN NUMBER
13:32:27  91  );
13:32:27  92  
13:32:27  93  PROCEDURE CREATE_CHARGE_HISTORY (
13:32:27  94  /*
13:32:27  95  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  96  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  97  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27  98  */
13:32:27  99  	in_charge_id		    IN NUMBER,
13:32:27 100  	in_system_activity_reason_id IN NUMBER
13:32:27 101  );
13:32:27 102  
13:32:27 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
13:32:27 104  /*
13:32:27 105  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27 106  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27 107  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27 108  */
13:32:27 109  	in_invoice_adjustment_id     IN NUMBER,
13:32:27 110  	in_system_activity_reason_id IN NUMBER
13:32:27 111  );
13:32:27 112  
13:32:27 113  
13:32:27 114  END PROCS_HISTORY_V20;
13:32:27 115  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_INVOICE
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE GET_INVOICE_IDS(
13:32:27   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
13:32:27   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
13:32:27   6  	out_result_set OUT SYS_REFCURSOR
13:32:27   7  );
13:32:27   8  
13:32:27   9  PROCEDURE IS_INVOICE_FOR_GC (
13:32:27  10  	in_invoice_id  IN NUMBER,
13:32:27  11  	out_result     OUT NUMBER
13:32:27  12  );
13:32:27  13  
13:32:27  14  PROCEDURE CREATE_INVOICE(
13:32:27  15  /*
13:32:27  16  Throws exceptions:
13:32:27  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  18  */
13:32:27  19  	  in_invoice_status IN NUMBER,
13:32:27  20  	  in_created_by     IN VARCHAR2,
13:32:27  21  	  in_tax_exempt_id  IN VARCHAR2,
13:32:27  22  	  out_invoice_id    OUT NUMBER
13:32:27  23  );
13:32:27  24  
13:32:27  25  PROCEDURE GET_PENDING_INVOICES (
13:32:27  26  /*
13:32:27  27  Throws exceptions:
13:32:27  28  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  29  */
13:32:27  30  	out_result_set	     OUT SYS_REFCURSOR,
13:32:27  31  	in_row_number	     IN NUMBER DEFAULT NULL
13:32:27  32  );
13:32:27  33  
13:32:27  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:27  35  /*
13:32:27  36  Throws exceptions:
13:32:27  37  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  39  */
13:32:27  40  	in_invoice_id IN  NUMBER,
13:32:27  41  	out_amount    OUT NUMBER
13:32:27  42  );
13:32:27  43  
13:32:27  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
13:32:27  45  	in_invoice_id IN  NUMBER
13:32:27  46  ) RETURN NUMBER;
13:32:27  47  
13:32:27  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
13:32:27  49  /*
13:32:27  50  Throws exceptions:
13:32:27  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  53  */
13:32:27  54  	in_invoice_id  IN  NUMBER,
13:32:27  55  	out_account_id OUT NUMBER
13:32:27  56  );
13:32:27  57  
13:32:27  58  PROCEDURE GET_INVOICE_DETAILS (
13:32:27  59  /*
13:32:27  60  Throws exceptions:
13:32:27  61  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  63  */
13:32:27  64  	in_invoice_id	   IN  NUMBER,
13:32:27  65  	out_group_id	   OUT NUMBER,
13:32:27  66  	out_status_id	   OUT NUMBER,
13:32:27  67  	out_line_items_set OUT SYS_REFCURSOR,
13:32:27  68  	out_pp_charges_set OUT SYS_REFCURSOR,
13:32:27  69  	out_cc_charges_set OUT SYS_REFCURSOR,
13:32:27  70  	out_gc_charges_set OUT SYS_REFCURSOR
13:32:27  71  );
13:32:27  72  -- norlov: #38796
13:32:27  73  PROCEDURE GET_TRANSACTION_INVOICE (
13:32:27  74  /*
13:32:27  75  Throws exceptions:
13:32:27  76  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  77  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  78  */
13:32:27  79  	in_transaction_id  IN  NUMBER,
13:32:27  80  	out_result_set	      OUT SYS_REFCURSOR
13:32:27  81  );
13:32:27  82  
13:32:27  83  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:27  84  /*
13:32:27  85  Throws exceptions:
13:32:27  86  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  88  */
13:32:27  89  	in_invoice_id		       IN NUMBER,
13:32:27  90  	in_invoice_status_id	       IN NUMBER,
13:32:27  91  	in_updated_by		       IN VARCHAR2
13:32:27  92  );
13:32:27  93  
13:32:27  94  FUNCTION IS_INVOICE_PAYING_STARTED (
13:32:27  95  /*
13:32:27  96  Throws exceptions:
13:32:27  97  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  98  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  99  */
13:32:27 100  	in_invoice_id IN NUMBER
13:32:27 101  ) RETURN NUMBER;
13:32:27 102  
13:32:27 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
13:32:27 104  	in_invoice_id  IN NUMBER,
13:32:27 105  	out_is_started OUT NUMBER
13:32:27 106  );
13:32:27 107  
13:32:27 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
13:32:27 109  	in_invoice_id	      IN NUMBER,
13:32:27 110  	in_chargeback_date    IN DATE,
13:32:27 111  	out_chargeback_amount OUT NUMBER
13:32:27 112  );
13:32:27 113  
13:32:27 114  PROCEDURE APPLY_REFUND (
13:32:27 115  	in_invoice_id	     IN NUMBER,
13:32:27 116  	in_chargeback_amount IN NUMBER,
13:32:27 117  	in_created_by	     IN VARCHAR2,
13:32:27 118  	out_charge_id	     OUT NUMBER
13:32:27 119  );
13:32:27 120  
13:32:27 121  PROCEDURE GET_MAX_REFUND (
13:32:27 122  	in_invoice_id IN NUMBER,
13:32:27 123  	out_amount    OUT NUMBER
13:32:27 124  );
13:32:27 125  
13:32:27 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
13:32:27 127  	in_invoice_id	    IN NUMBER,
13:32:27 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
13:32:27 129  	out_days_num	    OUT NUMBER
13:32:27 130  );
13:32:27 131  
13:32:27 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:27 133  	in_invoice_id  IN NUMBER,
13:32:27 134  	out_result_set OUT SYS_REFCURSOR
13:32:27 135  );
13:32:27 136  
13:32:27 137  PROCEDURE GET_INVOICE_LICENSES (
13:32:27 138  	in_invoice_id  IN NUMBER,
13:32:27 139  	out_result_set OUT SYS_REFCURSOR
13:32:27 140  );
13:32:27 141  
13:32:27 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
13:32:27 143  	in_invoice_id	   IN NUMBER,
13:32:27 144  	out_offer_chain_id OUT NUMBER
13:32:27 145  );
13:32:27 146  
13:32:27 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
13:32:27 148  -- Closing invoice without refund
13:32:27 149  	in_invoice_id IN NUMBER,
13:32:27 150  	in_updated_by IN VARCHAR2
13:32:27 151  );
13:32:27 152  
13:32:27 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
13:32:27 154  	in_invoice_id	    IN NUMBER,
13:32:27 155  	out_subscription_id OUT NUMBER
13:32:27 156  );
13:32:27 157  
13:32:27 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
13:32:27 159  /*
13:32:27 160  Throws exceptions:
13:32:27 161  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:27 162  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27 163  Return:
13:32:27 164  	GLOBAL_CONSTANTS_V20.TRUE if ACCOUNT.EXEMPT_ID is not null
13:32:27 165  	GLOBAL_CONSTANTS_V20.FALSE else
13:32:27 166  */
13:32:27 167  	in_invoice_id	  IN NUMBER,
13:32:27 168  	out_is_tax_exempt OUT NUMBER
13:32:27 169  );
13:32:27 170  
13:32:27 171  PROCEDURE GET_INVOICE_BY_ID (
13:32:27 172  	in_invoice_id  IN NUMBER,
13:32:27 173  	out_result_set OUT SYS_REFCURSOR
13:32:27 174  );
13:32:27 175  
13:32:27 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
13:32:27 177  	in_invoice_id		      IN NUMBER,
13:32:27 178  	out_is_tax_calculation_needed OUT NUMBER
13:32:27 179  );
13:32:27 180  
13:32:27 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
13:32:27 182  	in_invoice_id		     IN NUMBER,
13:32:27 183  	in_updated_by		     IN VARCHAR2,
13:32:27 184  	in_is_tax_calculation_needed IN NUMBER
13:32:27 185  );
13:32:27 186  
13:32:27 187  PROCEDURE REFUND_INVOICE (
13:32:27 188  	in_invoice_id	   IN NUMBER,
13:32:27 189  	in_refund_amount   IN NUMBER,
13:32:27 190  	in_note 	   IN VARCHAR2,
13:32:27 191  	in_created_by	   IN VARCHAR2,
13:32:27 192  	out_charge_id	   OUT NUMBER
13:32:27 193  );
13:32:27 194  
13:32:27 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
13:32:27 196  	in_invoice_id		    IN NUMBER,
13:32:27 197  	out_order_id		    OUT VARCHAR2,
13:32:27 198  	out_external_transaction_id OUT VARCHAR2
13:32:27 199  );
13:32:27 200  
13:32:27 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
13:32:27 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
13:32:27 203  	out_result_set OUT SYS_REFCURSOR
13:32:27 204  );
13:32:27 205  
13:32:27 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
13:32:27 207  	in_invoice_id IN NUMBER,
13:32:27 208  	out_is_revoke OUT NUMBER
13:32:27 209  );
13:32:27 210  
13:32:27 211  END PROCS_INVOICE_V20;
13:32:27 212  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_INVOICE_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_INVOICE (
13:32:27   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
13:32:27   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
13:32:27   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
13:32:27   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
13:32:27   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
13:32:27   9  );
13:32:27  10  
13:32:27  11  PROCEDURE UPDATE_INVOICE (
13:32:27  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
13:32:27  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
13:32:27  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
13:32:27  16  );
13:32:27  17  
13:32:27  18  END PROCS_INVOICE_CRU_V20;
13:32:27  19  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:27 SQL> 
13:32:27 SQL> /*
13:32:27 SQL> CREATE TABLE ITUNES_RECEIPT (
13:32:27 SQL> 	id NUMBER NOT NULL ENABLE,
13:32:27 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
13:32:27 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
13:32:27 SQL> 	status NUMBER,
13:32:27 SQL> 	quantity NUMBER,
13:32:27 SQL> 	product_id VARCHAR(1024),
13:32:27 SQL> 	transaction_id VARCHAR(1024),
13:32:27 SQL> 	purchase_date TIMESTAMP,
13:32:27 SQL> 	original_transaction_id VARCHAR(1024),
13:32:27 SQL> 	original_purchase_date TIMESTAMP,
13:32:27 SQL> 	app_item_id VARCHAR(1024),
13:32:27 SQL> 	version_external_id NUMBER,
13:32:27 SQL> 	bid VARCHAR(1024),
13:32:27 SQL> 	bvrs VARCHAR(255),
13:32:27 SQL> 	expires_date TIMESTAMP,
13:32:27 SQL> 	create_date DATE NOT NULL,
13:32:27 SQL> 	created_by VARCHAR(255) NOT NULL,
13:32:27 SQL> 	update_date DATE NOT NULL,
13:32:27 SQL> 	updated_by VARCHAR(255) NOT NULL,
13:32:27 SQL> 	last_check_date DATE NOT NULL,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
13:32:27 SQL> )
13:32:27 SQL> TABLESPACE CORE;
13:32:27 SQL> */
13:32:27 SQL> 
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
13:32:27   4  	      /*
13:32:27   5  	      Throws exceptions:
13:32:27   6  	      APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   7  	      */
13:32:27   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:27   9  	      out_result_set	  OUT SYS_REFCURSOR
13:32:27  10  );
13:32:27  11  
13:32:27  12  PROCEDURE CREATE_RECEIPT(
13:32:27  13  /*
13:32:27  14  Throws exceptions:
13:32:27  15  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  16  */
13:32:27  17  	  out_id	      OUT NUMBER,
13:32:27  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:27  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:27  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
13:32:27  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:27  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:27  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:27  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:27  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:27  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:27  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:27  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:27  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
13:32:27  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
13:32:27  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:27  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
13:32:27  33  );
13:32:27  34  
13:32:27  35  PROCEDURE UPDATE_RECEIPT(
13:32:27  36  /*
13:32:27  37  Throws exceptions:
13:32:27  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  39  */
13:32:27  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
13:32:27  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:27  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
13:32:27  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:27  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:27  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:27  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:27  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:27  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:27  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:27  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:27  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
13:32:27  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
13:32:27  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:27  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
13:32:27  55  	  in_is_expired       IN NUMBER
13:32:27  56  );
13:32:27  57  
13:32:27  58  PROCEDURE LINK_ITUNES_RECEIPT(
13:32:27  59  /*
13:32:27  60  Throws exceptions:
13:32:27  61  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  62  */
13:32:27  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
13:32:27  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:27  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
13:32:27  66  );
13:32:27  67  
13:32:27  68  PROCEDURE MARK_RECEIPT_CHECKED(
13:32:27  69  /*
13:32:27  70  Throws exceptions:
13:32:27  71  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  72  */
13:32:27  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
13:32:27  74  );
13:32:27  75  
13:32:27  76  PROCEDURE GET_ITUNES_RECEIPTS (
13:32:27  77  /*
13:32:27  78  Throws exceptions:
13:32:27  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  80  */
13:32:27  81  	out_result_set	    OUT SYS_REFCURSOR,
13:32:27  82  	in_row_number	    IN NUMBER DEFAULT 500
13:32:27  83  );
13:32:27  84  
13:32:27  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
13:32:27  86  /*
13:32:27  87  Throws exceptions:
13:32:27  88  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  89  */
13:32:27  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
13:32:27  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
13:32:27  92  );
13:32:27  93  
13:32:27  94  END PROCS_ITUNES_RECEIPT_V20;
13:32:27  95  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.04
13:32:27 SQL> 
13:32:27 SQL> /*
13:32:27 SQL> CREATE TABLE ITUNES_RECEIPT (
13:32:27 SQL> 	id NUMBER NOT NULL ENABLE,
13:32:27 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
13:32:27 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
13:32:27 SQL> 	status NUMBER,
13:32:27 SQL> 	quantity NUMBER,
13:32:27 SQL> 	product_id VARCHAR(1024),
13:32:27 SQL> 	transaction_id VARCHAR(1024),
13:32:27 SQL> 	purchase_date TIMESTAMP,
13:32:27 SQL> 	original_transaction_id VARCHAR(1024),
13:32:27 SQL> 	original_purchase_date TIMESTAMP,
13:32:27 SQL> 	app_item_id VARCHAR(1024),
13:32:27 SQL> 	version_external_id NUMBER,
13:32:27 SQL> 	bid VARCHAR(1024),
13:32:27 SQL> 	bvrs VARCHAR(255),
13:32:27 SQL> 	expires_date TIMESTAMP,
13:32:27 SQL> 	create_date DATE NOT NULL,
13:32:27 SQL> 	created_by VARCHAR(255) NOT NULL,
13:32:27 SQL> 	update_date DATE NOT NULL,
13:32:27 SQL> 	updated_by VARCHAR(255) NOT NULL,
13:32:27 SQL> 	last_check_date DATE NOT NULL,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
13:32:27 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
13:32:27 SQL> )
13:32:27 SQL> TABLESPACE CORE;
13:32:27 SQL> */
13:32:27 SQL> 
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_RECEIPT(
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   7  */
13:32:27   8  	  out_id	      OUT NUMBER,
13:32:27   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:27  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:27  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
13:32:27  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:27  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:27  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:27  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:27  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:27  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:27  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:27  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:27  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
13:32:27  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
13:32:27  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:27  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
13:32:27  24  );
13:32:27  25  
13:32:27  26  PROCEDURE UPDATE_RECEIPT(
13:32:27  27  /*
13:32:27  28  Throws exceptions:
13:32:27  29  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  30  */
13:32:27  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
13:32:27  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:27  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
13:32:27  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:27  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:27  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:27  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:27  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:27  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:27  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:27  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:27  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
13:32:27  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
13:32:27  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:27  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
13:32:27  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
13:32:27  47  );
13:32:27  48  
13:32:27  49  PROCEDURE LINK_ITUNES_RECEIPT(
13:32:27  50  /*
13:32:27  51  Throws exceptions:
13:32:27  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  53  */
13:32:27  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
13:32:27  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:27  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
13:32:27  57  );
13:32:27  58  
13:32:27  59  PROCEDURE MARK_RECEIPT_CHECKED(
13:32:27  60  /*
13:32:27  61  Throws exceptions:
13:32:27  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  63  */
13:32:27  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
13:32:27  65  );
13:32:27  66  
13:32:27  67  END PROCS_ITUNES_RECEIPT_CRU_V20;
13:32:27  68  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_LICENSE
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_LICENSE(
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   8  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:27   9  */
13:32:27  10  	in_status_id		    IN NUMBER,
13:32:27  11  	in_needs_entitlements	    IN NUMBER,
13:32:27  12  	in_start_date		    IN DATE,
13:32:27  13  	in_end_date		    IN DATE,
13:32:27  14  	in_offer_id		    IN NUMBER,
13:32:27  15  	in_subscription_id	    IN NUMBER,
13:32:27  16  	in_invoice_id		    IN NUMBER,
13:32:27  17  	in_created_by		    IN VARCHAR2,
13:32:27  18  	in_is_extension 	    IN NUMBER,
13:32:27  19  	in_current_offer_index	    IN NUMBER,
13:32:27  20  	in_current_offer_recurr_num IN NUMBER,
13:32:27  21  	out_license_id		    OUT NUMBER
13:32:27  22  );
13:32:27  23  
13:32:27  24  /*********************************************/
13:32:27  25  
13:32:27  26  PROCEDURE UPDATE_LICENSE_STATUS(
13:32:27  27  /*
13:32:27  28  Throws exceptions:
13:32:27  29  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  31  */
13:32:27  32  	  in_license_id     IN NUMBER,
13:32:27  33  	  in_license_status IN NUMBER,
13:32:27  34  	  in_updated_by     IN VARCHAR2,
13:32:27  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:27  36  );
13:32:27  37  
13:32:27  38  /*********************************************/
13:32:27  39  
13:32:27  40  PROCEDURE GET_ENDING_LICENSES (
13:32:27  41  	in_hours_number IN NUMBER,
13:32:27  42  	out_result_set OUT SYS_REFCURSOR
13:32:27  43  );
13:32:27  44  
13:32:27  45  /*********************************************/
13:32:27  46  
13:32:27  47  PROCEDURE GET_ENDING_LICENSES_CC (
13:32:27  48  	in_hours_number IN NUMBER,
13:32:27  49  	out_result_set OUT SYS_REFCURSOR,
13:32:27  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:27  51  );
13:32:27  52  
13:32:27  53  /**********************************************/
13:32:27  54  
13:32:27  55  PROCEDURE GET_RECURRING_OFFER (
13:32:27  56  	in_license_id  IN NUMBER,
13:32:27  57  	out_result_set OUT SYS_REFCURSOR
13:32:27  58  );
13:32:27  59  
13:32:27  60  /**********************************************/
13:32:27  61  
13:32:27  62  PROCEDURE GET_NEXT_OFFER (
13:32:27  63  	in_license_id  IN NUMBER,
13:32:27  64  	out_result_set OUT SYS_REFCURSOR
13:32:27  65  );
13:32:27  66  
13:32:27  67  /**********************************************/
13:32:27  68  
13:32:27  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
13:32:27  70  	in_license_id IN NUMBER,
13:32:27  71  	out_group_id  OUT NUMBER
13:32:27  72  );
13:32:27  73  
13:32:27  74  /**************************************************/
13:32:27  75  
13:32:27  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
13:32:27  77  	out_result_set OUT SYS_REFCURSOR
13:32:27  78  );
13:32:27  79  
13:32:27  80  /**************************************************/
13:32:27  81  
13:32:27  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
13:32:27  83  	in_license_id	      IN NUMBER,
13:32:27  84  	in_needs_entitlements IN NUMBER,
13:32:27  85  	in_updated_by	      IN VARCHAR2
13:32:27  86  );
13:32:27  87  
13:32:27  88  PROCEDURE GET_ENDED_GC_LICENSES (
13:32:27  89  	out_result_set		OUT SYS_REFCURSOR,
13:32:27  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:27  91  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:27  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:27  93  );
13:32:27  94  
13:32:27  95  PROCEDURE GET_LICENSE_BY_ID (
13:32:27  96  
13:32:27  97  	in_license_id  IN NUMBER,
13:32:27  98  
13:32:27  99  	out_result_set OUT SYS_REFCURSOR
13:32:27 100  
13:32:27 101  );
13:32:27 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
13:32:27 103  	in_subscription_id IN NUMBER,
13:32:27 104  	in_end_date IN DATE,
13:32:27 105  	in_updated_by IN VARCHAR2
13:32:27 106  );
13:32:27 107  
13:32:27 108  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
13:32:27 109  	in_days_before_close	 IN NUMBER,
13:32:27 110  	in_num_licenses_to_fetch IN NUMBER,
13:32:27 111  	out_result_set		 OUT SYS_REFCURSOR
13:32:27 112  );
13:32:27 113  
13:32:27 114  END PROCS_LICENSE_V20;
13:32:27 115  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_LICENSE_CRU
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE CREATE_LICENSE(
13:32:27   4  	out_license_id		    OUT LICENSE.ID%TYPE,
13:32:27   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
13:32:27   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
13:32:27   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
13:32:27   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
13:32:27   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
13:32:27  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
13:32:27  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
13:32:27  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
13:32:27  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
13:32:27  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
13:32:27  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
13:32:27  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
13:32:27  17  );
13:32:27  18  
13:32:27  19  PROCEDURE UPDATE_LICENSE (
13:32:27  20  	in_license_id		    IN LICENSE.ID%TYPE,
13:32:27  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
13:32:27  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
13:32:27  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
13:32:27  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
13:32:27  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
13:32:27  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
13:32:27  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
13:32:27  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
13:32:27  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
13:32:27  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
13:32:27  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
13:32:27  32  );
13:32:27  33  
13:32:27  34  END PROCS_LICENSE_CRU_V20;
13:32:27  35  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:27 SQL> 
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> -- DDL for package PROCS_LINE_ITEMS
13:32:27 SQL> --------------------------------------------------------------------------------
13:32:27 SQL> 
13:32:27 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V20" AS
13:32:27   2  
13:32:27   3  PROCEDURE ADD_LINE_ITEMS(
13:32:27   4  /*
13:32:27   5  Throws exceptions:
13:32:27   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27   8  */
13:32:27   9  	in_invoice_id IN NUMBER,
13:32:27  10  	in_offer_id   IN NUMBER,
13:32:27  11  	in_created_by IN VARCHAR2
13:32:27  12  );
13:32:27  13  
13:32:27  14  /****************************************************/
13:32:27  15  
13:32:27  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
13:32:27  17  	in_line_item_id    IN NUMBER,
13:32:27  18  	in_amount	   IN NUMBER,
13:32:27  19  	in_discount_amount IN NUMBER,
13:32:27  20  	in_taxes_amount    IN NUMBER
13:32:27  21  );
13:32:27  22  
13:32:27  23  /****************************************************/
13:32:27  24  
13:32:27  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:27  26  /*
13:32:27  27  Throws exceptions:
13:32:27  28  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  29  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  30  */
13:32:27  31  	in_invoice_id  IN NUMBER,
13:32:27  32  	out_result_set OUT SYS_REFCURSOR
13:32:27  33  );
13:32:27  34  
13:32:27  35  /****************************************************/
13:32:27  36  
13:32:27  37  PROCEDURE GET_LINE_ITEM_TAXES (
13:32:27  38  /*
13:32:27  39  Throws exceptions:
13:32:27  40  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  41  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  42  */
13:32:27  43  	in_line_item_id IN  NUMBER,
13:32:27  44  	out_result_set	OUT SYS_REFCURSOR
13:32:27  45  );
13:32:27  46  /****************************************************/
13:32:27  47  
13:32:27  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
13:32:27  49  /*
13:32:27  50  Throws exceptions:
13:32:27  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  53  */
13:32:27  54  	in_line_item_id IN  NUMBER,
13:32:27  55  	out_result_set	OUT SYS_REFCURSOR
13:32:27  56  );
13:32:27  57  
13:32:27  58  /****************************************************/
13:32:27  59  
13:32:27  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
13:32:27  61  /*
13:32:27  62  Throws exceptions:
13:32:27  63  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  65  */
13:32:27  66  	in_line_item_id     IN	NUMBER,
13:32:27  67  	out_amount	    OUT NUMBER
13:32:27  68  );
13:32:27  69  
13:32:27  70  /****************************************************/
13:32:27  71  
13:32:27  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
13:32:27  73  /*
13:32:27  74  Throws exceptions:
13:32:27  75  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:27  76  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:27  77  */
13:32:27  78  	in_line_item_id     IN	NUMBER
13:32:27  79  ) RETURN NUMBER;
13:32:27  80  
13:32:27  81  END PROCS_LINE_ITEMS_V20;
13:32:27  82  .
13:32:27 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_LINE_ITEM (
13:32:28   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
13:32:28   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
13:32:28   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
13:32:28   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
13:32:28   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
13:32:28   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
13:32:28  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE UPDATE_LINE_ITEM (
13:32:28  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
13:32:28  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
13:32:28  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
13:32:28  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
13:32:28  18  );
13:32:28  19  
13:32:28  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
13:32:28  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
13:32:28  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
13:32:28  23  );
13:32:28  24  
13:32:28  25  END PROCS_LINE_ITEMS_CRU_V20;
13:32:28  26  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_LOCKING
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V20" AS
13:32:28   2  
13:32:28   3  /*
13:32:28   4  Removed by Sergey
13:32:28   5  10.12.2010
13:32:28   6  PROCEDURE INITIALIZE_SYSTEM;
13:32:28   7  
13:32:28   8  PROCEDURE INITIALIZE_ACCOUNT (
13:32:28   9  	in_account_id IN NUMBER
13:32:28  10  );
13:32:28  11  
13:32:28  12  PROCEDURE INITIALIZE_GROUP (
13:32:28  13  	in_group_id IN NUMBER
13:32:28  14  );
13:32:28  15  */
13:32:28  16  
13:32:28  17  PROCEDURE LOCK_ACCOUNT (
13:32:28  18  	in_group_id    IN NUMBER,
13:32:28  19  	in_lock_key    IN VARCHAR2,
13:32:28  20  	in_seconds_num IN NUMBER,
13:32:28  21  	in_created_by  IN VARCHAR2,
13:32:28  22  	in_reason      IN VARCHAR2
13:32:28  23  );
13:32:28  24  
13:32:28  25  PROCEDURE RELEASE_LOCK (
13:32:28  26  	in_group_id IN NUMBER,
13:32:28  27  	in_lock_key IN VARCHAR2
13:32:28  28  );
13:32:28  29  
13:32:28  30  END PROCS_LOCKING_V20;
13:32:28  31  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_NOTIFICATION
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
13:32:28   4  /*
13:32:28   5  Throws exceptions:
13:32:28   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28   8  */
13:32:28   9  	in_notification_type_name IN VARCHAR2,
13:32:28  10  	out_notification_type_id  OUT NUMBER
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE ADD_NOTIFICATION (
13:32:28  14  /*
13:32:28  15  Throws exceptions:
13:32:28  16  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  17  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  18  */
13:32:28  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
13:32:28  20  	in_recipient_group_id	 IN NUMBER,
13:32:28  21  	in_notification_type_id  IN NUMBER,
13:32:28  22  	in_date_to_notify	 IN DATE,
13:32:28  23  	in_email_template_params IN CLOB
13:32:28  24  );
13:32:28  25  
13:32:28  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
13:32:28  27  /*
13:32:28  28  Throws exceptions:
13:32:28  29  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  30  */
13:32:28  31  	out_result_set OUT SYS_REFCURSOR
13:32:28  32  );
13:32:28  33  
13:32:28  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
13:32:28  35  /*
13:32:28  36  Throws exceptions:
13:32:28  37  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  38  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  39  */
13:32:28  40  	in_notification_id IN NUMBER
13:32:28  41  );
13:32:28  42  
13:32:28  43  PROCEDURE SET_NOTIFICATION_STATUS (
13:32:28  44  /*
13:32:28  45  Throws exceptions:
13:32:28  46  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  47  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  48  */
13:32:28  49  	in_notification_id	  IN NUMBER,
13:32:28  50  	in_notification_status_id IN NUMBER,
13:32:28  51  	in_error_message	  IN VARCHAR2
13:32:28  52  );
13:32:28  53  
13:32:28  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
13:32:28  55  /*
13:32:28  56  Throws exceptions:
13:32:28  57  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  58  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  59  */
13:32:28  60  	in_notification_id IN NUMBER,
13:32:28  61  	in_error_message   IN VARCHAR2
13:32:28  62  );
13:32:28  63  
13:32:28  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
13:32:28  65  /*
13:32:28  66  Result: 1 if notification locked
13:32:28  67  2 - else
13:32:28  68  */
13:32:28  69  	in_notification_id IN NUMBER,
13:32:28  70  	out_lock_status    OUT NUMBER
13:32:28  71  );
13:32:28  72  
13:32:28  73  PROCEDURE GET_NOTIFICATION_DATA (
13:32:28  74  	in_notification_id IN NUMBER,
13:32:28  75  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  76  );
13:32:28  77  
13:32:28  78  END PROCS_NOTIFICATION_V20;
13:32:28  79  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
13:32:28   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
13:32:28   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
13:32:28   6  );
13:32:28   7  
13:32:28   8  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
13:32:28   9  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
13:32:28  10  	out_data	       OUT OFFER_CHAIN.ID%TYPE
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:28  14  	  in_offer_chain_id IN	 NUMBER,
13:32:28  15  	  out_result_set    OUT  SYS_REFCURSOR
13:32:28  16  );
13:32:28  17  
13:32:28  18  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
13:32:28  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:28  20  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  21  );
13:32:28  22  
13:32:28  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
13:32:28  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:28  25  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  26  );
13:32:28  27  
13:32:28  28  PROCEDURE GET_OFFER_CHAINS_OFFERS (
13:32:28  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:28  30  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  31  );
13:32:28  32  
13:32:28  33  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
13:32:28  34  	in_product_id  IN  NUMBER,
13:32:28  35  	out_result_set OUT SYS_REFCURSOR
13:32:28  36  );
13:32:28  37  
13:32:28  38  PROCEDURE GET_OFFER_CHAIN_PRICE (
13:32:28  39  	in_offer_chain_id IN NUMBER,
13:32:28  40  	out_price	  OUT NUMBER
13:32:28  41  );
13:32:28  42  
13:32:28  43  PROCEDURE GET_FIRST_OFFER(
13:32:28  44  	in_offer_chain_id IN  NUMBER,
13:32:28  45  	out_offer_id	  OUT NUMBER
13:32:28  46  );
13:32:28  47  
13:32:28  48  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
13:32:28  49  	out_result_set OUT SYS_REFCURSOR
13:32:28  50  );
13:32:28  51  
13:32:28  52  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
13:32:28  53  	in_offer_chain_id IN NUMBER,
13:32:28  54  	out_result_set	  OUT SYS_REFCURSOR
13:32:28  55  );
13:32:28  56  
13:32:28  57  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
13:32:28  58  	in_offer_chain_id	  IN NUMBER,
13:32:28  59  	in_offer_chain_start_date IN DATE
13:32:28  60  ) RETURN DATE;
13:32:28  61  
13:32:28  62  FUNCTION CALCULATE_OFFER_AMOUNT (
13:32:28  63  	in_offer_id IN NUMBER
13:32:28  64  ) RETURN NUMBER;
13:32:28  65  
13:32:28  66  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
13:32:28  67  	in_offer_chain_id IN NUMBER
13:32:28  68  ) RETURN NUMBER;
13:32:28  69  
13:32:28  70  FUNCTION GET_FIRST_OFFER_INDEX (
13:32:28  71  	in_offer_chain_id IN NUMBER
13:32:28  72  ) RETURN NUMBER;
13:32:28  73  
13:32:28  74  FUNCTION GET_NEXT_OFFER_INDEX (
13:32:28  75  	in_offer_chain_id	     IN NUMBER,
13:32:28  76  	in_offer_chain_current_index IN NUMBER
13:32:28  77  ) RETURN NUMBER;
13:32:28  78  
13:32:28  79  PROCEDURE P_GET_NEXT_OFFER_INDEX (
13:32:28  80  	in_offer_chain_id	     IN NUMBER,
13:32:28  81  	in_offer_chain_current_index IN NUMBER,
13:32:28  82  	out_next_offer_index	     OUT NUMBER
13:32:28  83  );
13:32:28  84  
13:32:28  85  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
13:32:28  86  	in_license_id		     IN NUMBER,
13:32:28  87  	in_offer_chain_current_index IN NUMBER,
13:32:28  88  	out_next_offer_index	     OUT NUMBER
13:32:28  89  );
13:32:28  90  
13:32:28  91  FUNCTION IS_OFFER_INDEX_EXISTS (
13:32:28  92  	in_offer_chain_id	   IN NUMBER,
13:32:28  93  	in_offer_chain_offer_index IN NUMBER
13:32:28  94  ) RETURN NUMBER;
13:32:28  95  
13:32:28  96  PROCEDURE GET_OFFER_LENGTH (
13:32:28  97  	in_offer_id IN NUMBER,
13:32:28  98  	out_years   OUT NUMBER,
13:32:28  99  	out_months  OUT NUMBER,
13:32:28 100  	out_days    OUT NUMBER
13:32:28 101  );
13:32:28 102  
13:32:28 103  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
13:32:28 104  	in_offer_id   IN NUMBER,
13:32:28 105  	in_start_date IN DATE DEFAULT SYSDATE,
13:32:28 106  	out_days      OUT NUMBER
13:32:28 107  );
13:32:28 108  
13:32:28 109  PROCEDURE GET_OFFER_PRODUCTS (
13:32:28 110  	in_offer_id    IN NUMBER,
13:32:28 111  	out_result_set OUT SYS_REFCURSOR
13:32:28 112  );
13:32:28 113  
13:32:28 114  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
13:32:28 115  	in_offer_chain_id IN NUMBER,
13:32:28 116  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 117  );
13:32:28 118  
13:32:28 119  FUNCTION CHECK_FOR_SAME_PRODUCTS (
13:32:28 120  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
13:32:28 121  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
13:32:28 122  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:28 123  ) RETURN NUMBER;
13:32:28 124  
13:32:28 125  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
13:32:28 126  	in_offer_chain_id IN NUMBER
13:32:28 127  ) RETURN NUMBER;
13:32:28 128  
13:32:28 129  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
13:32:28 130  	in_offer_chain_id IN NUMBER
13:32:28 131  ) RETURN NUMBER;
13:32:28 132  
13:32:28 133  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
13:32:28 134  	in_offer_chain_id   IN NUMBER,
13:32:28 135  	in_eligibility_name IN VARCHAR2,
13:32:28 136  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 137  );
13:32:28 138  
13:32:28 139  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
13:32:28 140  	in_offer_chain_ids  IN VARCHAR2,
13:32:28 141  	in_eligibility_name IN VARCHAR2,
13:32:28 142  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 143  );
13:32:28 144  
13:32:28 145  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:28 146  	in_offer_chain_id IN NUMBER,
13:32:28 147  	in_meta_data_name IN VARCHAR2,
13:32:28 148  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 149  );
13:32:28 150  
13:32:28 151  PROCEDURE GET_OFFER_CHAINS_META_DATA (
13:32:28 152  	in_offer_chain_ids IN VARCHAR2,
13:32:28 153  	in_meta_data_name  IN VARCHAR2,
13:32:28 154  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 155  );
13:32:28 156  
13:32:28 157  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
13:32:28 158  	in_offer_id    IN NUMBER,
13:32:28 159  	out_result_set OUT SYS_REFCURSOR
13:32:28 160  );
13:32:28 161  
13:32:28 162  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:28 163  	in_product_offering_id IN NUMBER,
13:32:28 164  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
13:32:28 165  	out_result_set	       OUT SYS_REFCURSOR
13:32:28 166  );
13:32:28 167  
13:32:28 168  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
13:32:28 169  	in_offer_chain_1 IN NUMBER,
13:32:28 170  	in_offer_chain_2 IN NUMBER,
13:32:28 171  	out_result_set	OUT SYS_REFCURSOR
13:32:28 172  );
13:32:28 173  
13:32:28 174  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
13:32:28 175  	in_offer_chain_id IN NUMBER,
13:32:28 176  	in_meta_data_name IN VARCHAR2,
13:32:28 177  	out_value	  OUT VARCHAR2
13:32:28 178  );
13:32:28 179  
13:32:28 180  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
13:32:28 181  	in_offer_chain_id   IN NUMBER,
13:32:28 182  	in_eligibility_name IN VARCHAR2,
13:32:28 183  	out_value	    OUT VARCHAR2
13:32:28 184  );
13:32:28 185  
13:32:28 186  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
13:32:28 187  	in_offer_id    IN NUMBER,
13:32:28 188  	out_result_set OUT SYS_REFCURSOR
13:32:28 189  );
13:32:28 190  
13:32:28 191  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
13:32:28 192  	in_meta_data_name  IN VARCHAR2,
13:32:28 193  	in_meta_data_value IN VARCHAR2,
13:32:28 194  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 195  );
13:32:28 196  
13:32:28 197  PROCEDURE GET_ALL_META_DATA (
13:32:28 198  	in_offer_chain_id IN NUMBER,
13:32:28 199  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 200  );
13:32:28 201  
13:32:28 202  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
13:32:28 203  	in_group_id	  IN NUMBER,
13:32:28 204  	in_offer_chain_id IN NUMBER,
13:32:28 205  	out_is_eligible   OUT NUMBER,
13:32:28 206  	out_concurrent_subscription_id OUT NUMBER
13:32:28 207  );
13:32:28 208  
13:32:28 209  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:28 210  	in_offer_chain_id	 IN NUMBER,
13:32:28 211  	in_action_name		 IN VARCHAR2,
13:32:28 212  	out_notification_type_id OUT NUMBER
13:32:28 213  );
13:32:28 214  
13:32:28 215  END PROCS_OFFER_CHAIN_V20;
13:32:28 216  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.04
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
13:32:28   2  AS
13:32:28   3  
13:32:28   4  ----
13:32:28   5  --------------------------------------------------------------------------------
13:32:28   6  ----
13:32:28   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
13:32:28   8  	      returned from the previous call and store the result for the
13:32:28   9  	      next call.
13:32:28  10  	     This method will identify and create new Sync Events from trigger activity data */
13:32:28  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
13:32:28  12  ----
13:32:28  13  --------------------------------------------------------------------------------
13:32:28  14  ----
13:32:28  15  	  /* Internal logic call may need to be used to fix poller data */
13:32:28  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
13:32:28  17  ----
13:32:28  18  --------------------------------------------------------------------------------
13:32:28  19  ----
13:32:28  20  	  /* User request for sync events. Params should be hard-coded in the application
13:32:28  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
13:32:28  22  	      skipped. Last read time is logged.
13:32:28  23  	     Params:
13:32:28  24  		  set_maximum: Size of each transfer set
13:32:28  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
13:32:28  26  	     Returns:
13:32:28  27  		  set_id: Transfer set id, duplicated for all entries
13:32:28  28  		  group_id: regi_id value
13:32:28  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
13:32:28  30  	  */
13:32:28  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
13:32:28  32  ----
13:32:28  33  --------------------------------------------------------------------------------
13:32:28  34  ----
13:32:28  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
13:32:28  36  	      single confirmation per transfer set.
13:32:28  37  	  */
13:32:28  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
13:32:28  39  ----
13:32:28  40  --------------------------------------------------------------------------------
13:32:28  41  ----
13:32:28  42  	  procedure SET_LAST_RUN(ts in timestamp);
13:32:28  43  	  procedure GET_LAST_RUN(ts out timestamp);
13:32:28  44  END PROCS_POLLING_SYNC;
13:32:28  45  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.07
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE LOG_RETRY(
13:32:28   4  	  in_process_name IN VARCHAR2,
13:32:28   5  	  in_generic_id   IN NUMBER,
13:32:28   6  	  in_date	  IN VARCHAR2,
13:32:28   7  	  out_success	   OUT NUMBER
13:32:28   8  );
13:32:28   9  
13:32:28  10  PROCEDURE LOG_RETRY_DATE(
13:32:28  11  	  in_process_name IN VARCHAR2,
13:32:28  12  	  in_generic_id   IN NUMBER,
13:32:28  13  	  in_date	  IN DATE,
13:32:28  14  	  out_success	   OUT NUMBER
13:32:28  15  );
13:32:28  16  
13:32:28  17  PROCEDURE DELETE_RETRY(
13:32:28  18  	  in_process_name IN VARCHAR2,
13:32:28  19  	  in_remove_minutes  IN NUMBER
13:32:28  20  );
13:32:28  21  
13:32:28  22  PROCEDURE GET_SYSDATE (
13:32:28  23  	  out_date OUT VARCHAR2
13:32:28  24  );
13:32:28  25  
13:32:28  26  END PROCS_PROCESS_RETRY_V20;
13:32:28  27  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_PRODUCT
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE GET_PRODUCTS (
13:32:28   4  /*
13:32:28   5  Throws exceptions:
13:32:28   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28   7  */
13:32:28   8  	in_status_id   IN  NUMBER,
13:32:28   9  	out_result_set OUT SYS_REFCURSOR
13:32:28  10  );
13:32:28  11  
13:32:28  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:28  13  /*
13:32:28  14  Throws exceptions:
13:32:28  15  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  16  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  17  */
13:32:28  18  	in_product_offering_id	IN NUMBER,
13:32:28  19  	out_result_set OUT SYS_REFCURSOR
13:32:28  20  );
13:32:28  21  
13:32:28  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
13:32:28  23  /*
13:32:28  24  Throws exceptions:
13:32:28  25  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  27  */
13:32:28  28  	in_product_id	    IN NUMBER,
13:32:28  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
13:32:28  30  	out_result_set	    OUT SYS_REFCURSOR
13:32:28  31  );
13:32:28  32  
13:32:28  33  PROCEDURE GET_PRODUCT_BY_ID (
13:32:28  34  	in_product_id  IN NUMBER,
13:32:28  35  	out_result_set OUT SYS_REFCURSOR
13:32:28  36  );
13:32:28  37  
13:32:28  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
13:32:28  39  	in_line_item_id IN NUMBER,
13:32:28  40  	out_result_set	OUT SYS_REFCURSOR
13:32:28  41  );
13:32:28  42  
13:32:28  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
13:32:28  44  	in_product_offering_id IN NUMBER,
13:32:28  45  	out_result_set	OUT SYS_REFCURSOR
13:32:28  46  );
13:32:28  47  
13:32:28  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
13:32:28  49  	in_product_offering_id IN NUMBER,
13:32:28  50  	out_result_set	       OUT SYS_REFCURSOR
13:32:28  51  );
13:32:28  52  
13:32:28  53  END PROCS_PRODUCT_V20;
13:32:28  54  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
13:32:28   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
13:32:28   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
13:32:28   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
13:32:28   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
13:32:28  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
13:32:28  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
13:32:28  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:28  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
13:32:28  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
13:32:28  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
13:32:28  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:28  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:28  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
13:32:28  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
13:32:28  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
13:32:28  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
13:32:28  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
13:32:28  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
13:32:28  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
13:32:28  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
13:32:28  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
13:32:28  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
13:32:28  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
13:32:28  29  );
13:32:28  30  
13:32:28  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
13:32:28  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
13:32:28  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
13:32:28  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
13:32:28  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
13:32:28  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
13:32:28  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:28  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
13:32:28  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
13:32:28  40  );
13:32:28  41  
13:32:28  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
13:32:28  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
13:32:28  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
13:32:28  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
13:32:28  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
13:32:28  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
13:32:28  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
13:32:28  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
13:32:28  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
13:32:28  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
13:32:28  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
13:32:28  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
13:32:28  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
13:32:28  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
13:32:28  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
13:32:28  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
13:32:28  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
13:32:28  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
13:32:28  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
13:32:28  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
13:32:28  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
13:32:28  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
13:32:28  65  );
13:32:28  66  
13:32:28  67  PROCEDURE CREATE_CPT_EXCEPTION (
13:32:28  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
13:32:28  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
13:32:28  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
13:32:28  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
13:32:28  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
13:32:28  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
13:32:28  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
13:32:28  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
13:32:28  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
13:32:28  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
13:32:28  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:28  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:28  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
13:32:28  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:28  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
13:32:28  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
13:32:28  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
13:32:28  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
13:32:28  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
13:32:28  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
13:32:28  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
13:32:28  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
13:32:28  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
13:32:28  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
13:32:28  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
13:32:28  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
13:32:28  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
13:32:28  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
13:32:28  97  );
13:32:28  98  
13:32:28  99  PROCEDURE CREATE_CPT_DEPOSIT (
13:32:28 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
13:32:28 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
13:32:28 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
13:32:28 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
13:32:28 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
13:32:28 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
13:32:28 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
13:32:28 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
13:32:28 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
13:32:28 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
13:32:28 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:28 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:28 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
13:32:28 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:28 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
13:32:28 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
13:32:28 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
13:32:28 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
13:32:28 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
13:32:28 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
13:32:28 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
13:32:28 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
13:32:28 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
13:32:28 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
13:32:28 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
13:32:28 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
13:32:28 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
13:32:28 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
13:32:28 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
13:32:28 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
13:32:28 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
13:32:28 132  );
13:32:28 133  
13:32:28 134  PROCEDURE CREATE_PP_SETTLEMENT (
13:32:28 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
13:32:28 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
13:32:28 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
13:32:28 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
13:32:28 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
13:32:28 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
13:32:28 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
13:32:28 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
13:32:28 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
13:32:28 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
13:32:28 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
13:32:28 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
13:32:28 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
13:32:28 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
13:32:28 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
13:32:28 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
13:32:28 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
13:32:28 153  );
13:32:28 154  
13:32:28 155  PROCEDURE CREATE_PP_DISPUTE (
13:32:28 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
13:32:28 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
13:32:28 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
13:32:28 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
13:32:28 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
13:32:28 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
13:32:28 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
13:32:28 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
13:32:28 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
13:32:28 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
13:32:28 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
13:32:28 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
13:32:28 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
13:32:28 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
13:32:28 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
13:32:28 172  );
13:32:28 173  
13:32:28 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
13:32:28 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
13:32:28 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
13:32:28 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:28 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
13:32:28 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
13:32:28 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
13:32:28 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
13:32:28 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
13:32:28 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
13:32:28 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
13:32:28 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
13:32:28 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
13:32:28 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
13:32:28 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
13:32:28 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
13:32:28 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
13:32:28 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
13:32:28 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
13:32:28 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
13:32:28 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
13:32:28 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
13:32:28 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
13:32:28 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
13:32:28 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
13:32:28 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
13:32:28 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
13:32:28 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
13:32:28 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
13:32:28 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
13:32:28 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
13:32:28 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
13:32:28 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
13:32:28 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
13:32:28 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
13:32:28 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
13:32:28 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
13:32:28 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
13:32:28 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
13:32:28 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
13:32:28 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
13:32:28 215  );
13:32:28 216  
13:32:28 217  PROCEDURE GET_EXT_SOURCE_LOG (
13:32:28 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:28 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
13:32:28 220  	out_result_set		 OUT SYS_REFCURSOR
13:32:28 221  );
13:32:28 222  
13:32:28 223  FUNCTION CHECK_EXT_SOURCE_LOG (
13:32:28 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:28 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
13:32:28 226  ) RETURN NUMBER;
13:32:28 227  
13:32:28 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
13:32:28 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
13:32:28 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
13:32:28 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
13:32:28 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
13:32:28 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
13:32:28 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
13:32:28 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
13:32:28 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
13:32:28 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
13:32:28 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
13:32:28 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
13:32:28 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
13:32:28 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
13:32:28 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
13:32:28 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
13:32:28 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
13:32:28 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
13:32:28 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
13:32:28 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
13:32:28 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
13:32:28 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
13:32:28 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
13:32:28 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
13:32:28 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
13:32:28 253  );
13:32:28 254  
13:32:28 255  END PROCS_RECONCILIATION_CRU_V20;
13:32:28 256  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.07
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
13:32:28   2  
13:32:28   3  ----
13:32:28   4  --------------------------------------------------------------------------------
13:32:28   5  ----
13:32:28   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28   7  ----
13:32:28   8  --------------------------------------------------------------------------------
13:32:28   9  ----
13:32:28  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  11  ----
13:32:28  12  --------------------------------------------------------------------------------
13:32:28  13  ----
13:32:28  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  15  ----
13:32:28  16  --------------------------------------------------------------------------------
13:32:28  17  ----
13:32:28  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  19  ----
13:32:28  20  --------------------------------------------------------------------------------
13:32:28  21  ----
13:32:28  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  23  ----
13:32:28  24  --------------------------------------------------------------------------------
13:32:28  25  ----
13:32:28  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  27  ----
13:32:28  28  --------------------------------------------------------------------------------
13:32:28  29  ----
13:32:28  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  31  ----
13:32:28  32  --------------------------------------------------------------------------------
13:32:28  33  ----
13:32:28  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  35  ----
13:32:28  36  --------------------------------------------------------------------------------
13:32:28  37  ----
13:32:28  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  39  ----
13:32:28  40  --------------------------------------------------------------------------------
13:32:28  41  ----
13:32:28  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  43  ----
13:32:28  44  --------------------------------------------------------------------------------
13:32:28  45  ----
13:32:28  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  47  ----
13:32:28  48  --------------------------------------------------------------------------------
13:32:28  49  ----
13:32:28  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  51  ----
13:32:28  52  --------------------------------------------------------------------------------
13:32:28  53  ----
13:32:28  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  55  ----
13:32:28  56  --------------------------------------------------------------------------------
13:32:28  57  ----
13:32:28  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  59  ----
13:32:28  60  --------------------------------------------------------------------------------
13:32:28  61  ----
13:32:28  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  63  ----
13:32:28  64  --------------------------------------------------------------------------------
13:32:28  65  ----
13:32:28  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  67  ----
13:32:28  68  --------------------------------------------------------------------------------
13:32:28  69  ----
13:32:28  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  71  ----
13:32:28  72  --------------------------------------------------------------------------------
13:32:28  73  ----
13:32:28  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  75  ----
13:32:28  76  --------------------------------------------------------------------------------
13:32:28  77  ----
13:32:28  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  79  ----
13:32:28  80  --------------------------------------------------------------------------------
13:32:28  81  ----
13:32:28  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  83  ----
13:32:28  84  --------------------------------------------------------------------------------
13:32:28  85  ----
13:32:28  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  87  ----
13:32:28  88  --------------------------------------------------------------------------------
13:32:28  89  ----
13:32:28  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  91  ----
13:32:28  92  --------------------------------------------------------------------------------
13:32:28  93  ----
13:32:28  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  95  ----
13:32:28  96  --------------------------------------------------------------------------------
13:32:28  97  ----
13:32:28  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28  99  ----
13:32:28 100  --------------------------------------------------------------------------------
13:32:28 101  ----
13:32:28 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 103  ----
13:32:28 104  --------------------------------------------------------------------------------
13:32:28 105  ----
13:32:28 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 107  ----
13:32:28 108  --------------------------------------------------------------------------------
13:32:28 109  ----
13:32:28 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 111  ----
13:32:28 112  --------------------------------------------------------------------------------
13:32:28 113  ----
13:32:28 114  /**/
13:32:28 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 116  ----
13:32:28 117  --------------------------------------------------------------------------------
13:32:28 118  ----
13:32:28 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 120  ----
13:32:28 121  --------------------------------------------------------------------------------
13:32:28 122  ----
13:32:28 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 124  ----
13:32:28 125  --------------------------------------------------------------------------------
13:32:28 126  ----
13:32:28 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 128  ----
13:32:28 129  --------------------------------------------------------------------------------
13:32:28 130  ----
13:32:28 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 132  ----
13:32:28 133  --------------------------------------------------------------------------------
13:32:28 134  ----
13:32:28 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 136  ----
13:32:28 137  --------------------------------------------------------------------------------
13:32:28 138  ----
13:32:28 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 140  ----
13:32:28 141  --------------------------------------------------------------------------------
13:32:28 142  ----
13:32:28 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 144  ----
13:32:28 145  --------------------------------------------------------------------------------
13:32:28 146  ----
13:32:28 147  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 148  ----
13:32:28 149  --------------------------------------------------------------------------------
13:32:28 150  ----
13:32:28 151  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 152  ----
13:32:28 153  --------------------------------------------------------------------------------
13:32:28 154  ----
13:32:28 155  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
13:32:28 156  ----
13:32:28 157  --------------------------------------------------------------------------------
13:32:28 158  ----
13:32:28 159  /**/
13:32:28 160  END PROCS_REPORTING;
13:32:28 161  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.06
13:32:28 SQL> 
13:32:28 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
13:32:28 SQL> 
13:32:28 SQL> whenever sqlerror exit failure
13:32:28 SQL> 
13:32:28 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
13:32:28   2  
13:32:28   3  ----
13:32:28   4  --------------------------------------------------------------------------------
13:32:28   5  ----
13:32:28   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
13:32:28   7  	      return line_item.amount%type;
13:32:28   8  ----
13:32:28   9  --------------------------------------------------------------------------------
13:32:28  10  ----
13:32:28  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
13:32:28  12  	      return line_item.amount%type;
13:32:28  13  ----
13:32:28  14  --------------------------------------------------------------------------------
13:32:28  15  ----
13:32:28  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
13:32:28  17  	      in_lower_date_bound DATE,
13:32:28  18  	      in_upper_date_bound DATE,
13:32:28  19  	      out_lic_cur OUT sys_refcursor
13:32:28  20  	  );
13:32:28  21  ----
13:32:28  22  --------------------------------------------------------------------------------
13:32:28  23  ----
13:32:28  24  END PROCS_REPORTING_1A;
13:32:28  25  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_REPORTS
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
13:32:28   2  
13:32:28   3  FUNCTION GET_PRODUCT_NAMES(
13:32:28   4  	in_offer_id IN NUMBER
13:32:28   5  ) RETURN VARCHAR2;
13:32:28   6  
13:32:28   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
13:32:28   8  	in_start_date  IN DATE,
13:32:28   9  	in_end_date    IN DATE,
13:32:28  10  	out_result_set OUT SYS_REFCURSOR
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
13:32:28  14  	in_offer_id	       IN NUMBER,
13:32:28  15  	in_start_date	       IN DATE,
13:32:28  16  	in_end_date	       IN DATE,
13:32:28  17  	out_new_purchasers_num OUT NUMBER,
13:32:28  18  	out_renewals_num       OUT NUMBER,
13:32:28  19  	out_product_names      OUT VARCHAR2,
13:32:28  20  	out_total_dollar_value OUT NUMBER,
13:32:28  21  	out_unique_purchasers  OUT NUMBER
13:32:28  22  );
13:32:28  23  
13:32:28  24  /*
13:32:28  25  FUNCTIONS FOR THE FLASH REPORT
13:32:28  26  */
13:32:28  27  
13:32:28  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
13:32:28  29  	in_offer_id	       IN NUMBER,
13:32:28  30  	in_start_date	       IN DATE,
13:32:28  31  	in_end_date	       IN DATE
13:32:28  32  ) RETURN NUMBER;
13:32:28  33  
13:32:28  34  FUNCTION FLR_RENEWALS_NUM (
13:32:28  35  	in_offer_id	       IN NUMBER,
13:32:28  36  	in_start_date	       IN DATE,
13:32:28  37  	in_end_date	       IN DATE
13:32:28  38  ) RETURN NUMBER;
13:32:28  39  
13:32:28  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
13:32:28  41  	in_offer_id	       IN NUMBER,
13:32:28  42  	in_start_date	       IN DATE,
13:32:28  43  	in_end_date	       IN DATE
13:32:28  44  ) RETURN NUMBER;
13:32:28  45  
13:32:28  46  FUNCTION FLR_UNIQUE_PURCHASERS (
13:32:28  47  	in_offer_id	       IN NUMBER,
13:32:28  48  	in_start_date	       IN DATE,
13:32:28  49  	in_end_date	       IN DATE
13:32:28  50  ) RETURN NUMBER;
13:32:28  51  
13:32:28  52  END PROCS_REPORTS_V5;
13:32:28  53  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_SUBSCRIPTION
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
13:32:28   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
13:32:28   5  	in_updater	     IN VARCHAR2,
13:32:28   6  	in_duration_in_hours IN NUMBER
13:32:28   7  );
13:32:28   8  
13:32:28   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
13:32:28  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
13:32:28  11  	in_updater    IN VARCHAR2
13:32:28  12  );
13:32:28  13  
13:32:28  14  PROCEDURE START_SUBSCRIPTION_CREATION (
13:32:28  15  	in_group_id	      IN NUMBER,
13:32:28  16  	in_created_by	      IN VARCHAR2,
13:32:28  17  	in_offer_chain_id     IN NUMBER,
13:32:28  18  	in_instrument_type_id IN NUMBER,
13:32:28  19  	in_instrument_id      IN NUMBER,
13:32:28  20  	in_agent_id	      IN NUMBER,
13:32:28  21  	in_note 	      IN VARCHAR2,
13:32:28  22  	out_subscription_id   OUT NUMBER,
13:32:28  23  	out_invoice_id	      OUT NUMBER,
13:32:28  24  	out_new_license_id    OUT NUMBER,
13:32:28  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
13:32:28  26  );
13:32:28  27  
13:32:28  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
13:32:28  29  	in_subscription_id    IN NUMBER,
13:32:28  30  	in_invoice_id	      IN NUMBER,
13:32:28  31  	in_instrument_type_id IN NUMBER,
13:32:28  32  	in_instrument_id      IN NUMBER,
13:32:28  33  	in_created_by	      IN VARCHAR2
13:32:28  34  );
13:32:28  35  
13:32:28  36  PROCEDURE SUSPEND_SUBSCRIPTION(
13:32:28  37  /*
13:32:28  38  Throws exceptions:
13:32:28  39  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  40  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28  41  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  42  */
13:32:28  43  	  in_subs_id	IN NUMBER ,
13:32:28  44  	  in_updated_by IN VARCHAR2
13:32:28  45  );
13:32:28  46  
13:32:28  47  PROCEDURE REACTIVATE_SUBSCRIPTION (
13:32:28  48  	in_subscription_id IN  NUMBER,
13:32:28  49  	in_updated_by	   IN  VARCHAR2
13:32:28  50  );
13:32:28  51  
13:32:28  52  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:28  53  /*
13:32:28  54  Throws exceptions:
13:32:28  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  56  */
13:32:28  57  	  in_subscription_id IN  NUMBER,
13:32:28  58  	  out_result_set      OUT SYS_REFCURSOR
13:32:28  59  );
13:32:28  60  
13:32:28  61  PROCEDURE GET_SUBSCRIPTION_INVOICES (
13:32:28  62  /*
13:32:28  63  Throws exceptions:
13:32:28  64  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28  65  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  66  */
13:32:28  67  	in_subscription_id  IN	NUMBER,
13:32:28  68  	out_result_set	    OUT SYS_REFCURSOR
13:32:28  69  );
13:32:28  70  
13:32:28  71  PROCEDURE GET_SUBSCRIPTION_NOTES (
13:32:28  72  /*
13:32:28  73  Throws exceptions:
13:32:28  74  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  75  */
13:32:28  76  	in_subscription_id  IN	NUMBER,
13:32:28  77  	out_result_set	    OUT SYS_REFCURSOR
13:32:28  78  );
13:32:28  79  
13:32:28  80  PROCEDURE ANNOTATE_SUBSCRIPTION (
13:32:28  81  /*
13:32:28  82  Throws exceptions:
13:32:28  83  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28  84  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  85  */
13:32:28  86  	in_subscription_id IN  NUMBER,
13:32:28  87  	in_agent_id	   IN  NUMBER,
13:32:28  88  	in_note 	   IN  VARCHAR2,
13:32:28  89  	in_created_by	   IN  VARCHAR2
13:32:28  90  );
13:32:28  91  
13:32:28  92  PROCEDURE GET_CANCEL_REASONS (
13:32:28  93  	out_result_set OUT    SYS_REFCURSOR
13:32:28  94  );
13:32:28  95  
13:32:28  96  FUNCTION GET_RENEWAL_DATE (
13:32:28  97  /*
13:32:28  98  Throws exceptions:
13:32:28  99  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 100  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 101  */
13:32:28 102  	in_subscription_id in NUMBER
13:32:28 103  ) RETURN DATE;
13:32:28 104  
13:32:28 105  FUNCTION GET_RECENT_CHARGE (
13:32:28 106  /*
13:32:28 107  Throws exceptions:
13:32:28 108  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 109  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 110  */
13:32:28 111  	in_subscription_id IN NUMBER
13:32:28 112  ) RETURN NUMBER;
13:32:28 113  
13:32:28 114  FUNCTION GET_BILLING_CYCLE (
13:32:28 115  /*
13:32:28 116  Throws exceptions:
13:32:28 117  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 118  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 119  */
13:32:28 120  	in_subscription_id IN NUMBER
13:32:28 121  ) RETURN VARCHAR2;
13:32:28 122  
13:32:28 123  PROCEDURE REFUND_SUBSCRIPTION (
13:32:28 124  /*
13:32:28 125  Throws exceptions:
13:32:28 126  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 127  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 128  */
13:32:28 129  	in_subscription_id IN NUMBER,
13:32:28 130  	in_invoice_id	   IN NUMBER,
13:32:28 131  	in_refund_amount   IN NUMBER,
13:32:28 132  	in_note 	   IN VARCHAR2,
13:32:28 133  	in_created_by	   IN VARCHAR2,
13:32:28 134  	out_charge_id	   OUT NUMBER
13:32:28 135  );
13:32:28 136  
13:32:28 137  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
13:32:28 138  /*
13:32:28 139  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 140  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 141  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 142  */
13:32:28 143  	in_subscription_id	IN NUMBER,
13:32:28 144  	in_effective_start_date IN DATE,
13:32:28 145  	in_effective_end_date	IN DATE,
13:32:28 146  	in_note 		IN VARCHAR2,
13:32:28 147  	in_updated_by		IN VARCHAR2
13:32:28 148  );
13:32:28 149  
13:32:28 150  FUNCTION CALC_SUBSCRIPTION_END_DATE (
13:32:28 151  /*
13:32:28 152  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 153  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 154  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 155  Returns:
13:32:28 156  NULL if it is impossible to calculate end date (for example,
13:32:28 157  	offer chain includes offer with infinity recurrences number)
13:32:28 158  DATE else
13:32:28 159  */
13:32:28 160  	in_subscription_id IN NUMBER
13:32:28 161  ) RETURN DATE;
13:32:28 162  
13:32:28 163  PROCEDURE HAS_FUTURE_LICENSE (
13:32:28 164  /*
13:32:28 165  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 166  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 167  */
13:32:28 168  	in_license_id IN  NUMBER,
13:32:28 169  	out_result    OUT NUMBER
13:32:28 170  );
13:32:28 171  
13:32:28 172  PROCEDURE CLOSE_SUBSCRIPTION (
13:32:28 173  	in_subscription_id IN NUMBER,
13:32:28 174  	in_updated_by	   IN VARCHAR2
13:32:28 175  );
13:32:28 176  
13:32:28 177  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
13:32:28 178  	in_subscription_id IN NUMBER,
13:32:28 179  	out_group_id	   OUT NUMBER
13:32:28 180  );
13:32:28 181  
13:32:28 182  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
13:32:28 183  /*
13:32:28 184  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 185  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 186  */
13:32:28 187  	in_subscription_id IN NUMBER,
13:32:28 188  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 189  );
13:32:28 190  
13:32:28 191  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
13:32:28 192  /*
13:32:28 193  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 194  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 195  */
13:32:28 196  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
13:32:28 197  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
13:32:28 198  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:28 199  );
13:32:28 200  
13:32:28 201  PROCEDURE GET_ACTIVE_INVOICES_IDS (
13:32:28 202  /*
13:32:28 203  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 204  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 205  */
13:32:28 206  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
13:32:28 207  	in_subscription_id IN NUMBER,
13:32:28 208  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 209  );
13:32:28 210  
13:32:28 211  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
13:32:28 212  /*
13:32:28 213  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 214  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 215  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 216  */
13:32:28 217  	in_invoice_id	     IN NUMBER,
13:32:28 218  	in_updated_by	     IN VARCHAR2,
13:32:28 219  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:28 220  );
13:32:28 221  
13:32:28 222  PROCEDURE FINALIZE_CANCELATION (
13:32:28 223  /*
13:32:28 224  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 225  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 226  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 227  */
13:32:28 228  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
13:32:28 229  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
13:32:28 230  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:28 231  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:28 232  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:28 233  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:28 234  	in_subscription_id    IN NUMBER,
13:32:28 235  	in_cancelation_reason IN VARCHAR2,
13:32:28 236  	in_cancelation_date   IN DATE,
13:32:28 237  	in_note 	      IN VARCHAR2,
13:32:28 238  	in_agent_id	      IN NUMBER,
13:32:28 239  	in_updated_by	      IN VARCHAR2
13:32:28 240  );
13:32:28 241  
13:32:28 242  PROCEDURE FINALIZE_FALSE_START (
13:32:28 243  /*
13:32:28 244  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 245  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 246  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 247  */
13:32:28 248  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
13:32:28 249  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:28 250  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:28 251  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:28 252  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:28 253  	in_subscription_id    IN NUMBER,
13:32:28 254  	in_cancelation_date   IN DATE,
13:32:28 255  	in_note 	      IN VARCHAR2,
13:32:28 256  	in_agent_id	      IN NUMBER,
13:32:28 257  	in_updated_by	      IN VARCHAR2
13:32:28 258  );
13:32:28 259  
13:32:28 260  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
13:32:28 261  	in_subscription_id IN NUMBER
13:32:28 262  ) RETURN NUMBER;
13:32:28 263  
13:32:28 264  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
13:32:28 265  /*
13:32:28 266  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 267  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 268  */
13:32:28 269  	in_subscription_id IN NUMBER,
13:32:28 270  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 271  );
13:32:28 272  
13:32:28 273  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
13:32:28 274  /*
13:32:28 275  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 276  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 277  */
13:32:28 278  	in_subscription_id IN NUMBER,
13:32:28 279  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 280  );
13:32:28 281  
13:32:28 282  PROCEDURE GET_SUBSCR_LIC_OFFER (
13:32:28 283  /*
13:32:28 284  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 285  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 286  */
13:32:28 287  	in_subscription_id IN NUMBER,
13:32:28 288  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 289  );
13:32:28 290  
13:32:28 291  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
13:32:28 292  /*
13:32:28 293  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 294  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 295  */
13:32:28 296  	in_subscription_id IN NUMBER,
13:32:28 297  	out_result	   OUT NUMBER
13:32:28 298  );
13:32:28 299  
13:32:28 300  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
13:32:28 301  /*
13:32:28 302  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 303  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 304  */
13:32:28 305  	in_group_id	   IN NUMBER,
13:32:28 306  	in_offer_chain_id  IN NUMBER,
13:32:28 307  	out_result	   out number
13:32:28 308  );
13:32:28 309  
13:32:28 310  PROCEDURE GET_EXISTING_SUBSCR_IDS (
13:32:28 311  /*
13:32:28 312  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 313  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 314  */
13:32:28 315  	in_group_id	   IN NUMBER,
13:32:28 316  	in_offer_chain_id  IN NUMBER,
13:32:28 317  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 318  );
13:32:28 319  
13:32:28 320  PROCEDURE ADD_META_DATA (
13:32:28 321  /*
13:32:28 322  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 323  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 324  */
13:32:28 325  	in_subscription_id IN NUMBER,
13:32:28 326  	in_name 	   IN VARCHAR2,
13:32:28 327  	in_value	   IN VARCHAR2,
13:32:28 328  	in_created_by	   IN VARCHAR2
13:32:28 329  );
13:32:28 330  
13:32:28 331  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
13:32:28 332  /*
13:32:28 333  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
13:32:28 334  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 335  */
13:32:28 336  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
13:32:28 337  	out_result_set	     OUT SYS_REFCURSOR
13:32:28 338  );
13:32:28 339  
13:32:28 340  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
13:32:28 341  /*
13:32:28 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 343  */
13:32:28 344  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
13:32:28 345  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 346  );
13:32:28 347  
13:32:28 348  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
13:32:28 349   (
13:32:28 350  /*
13:32:28 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 352  */
13:32:28 353  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:28 354  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 355  );
13:32:28 356  
13:32:28 357  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
13:32:28 358  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
13:32:28 359  ) RETURN NUMBER;
13:32:28 360  
13:32:28 361  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
13:32:28 362  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
13:32:28 363  ) RETURN VARCHAR2;
13:32:28 364  
13:32:28 365  
13:32:28 366  
13:32:28 367  PROCEDURE GET_ACTIVE_MEU_SUBS (
13:32:28 368  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 369  );
13:32:28 370  
13:32:28 371  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
13:32:28 372  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:28 373  	out_offer_id	    OUT LICENSE.ID%TYPE
13:32:28 374  );
13:32:28 375  
13:32:28 376  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
13:32:28 377  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:28 378  	out_license_id	    OUT LICENSE.ID%TYPE
13:32:28 379  );
13:32:28 380  
13:32:28 381  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
13:32:28 382  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 383  );
13:32:28 384  
13:32:28 385  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
13:32:28 386  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 387  );
13:32:28 388  
13:32:28 389  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
13:32:28 390  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 391  );
13:32:28 392  
13:32:28 393  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
13:32:28 394  	in_max_days_until_close IN NUMBER,
13:32:28 395  	in_num_subs_to_fetch	IN NUMBER,
13:32:28 396  	out_result_set		OUT SYS_REFCURSOR
13:32:28 397  );
13:32:28 398  
13:32:28 399  
13:32:28 400  END PROCS_SUBSCRIPTION_V20;
13:32:28 401  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_SUBSCRIPTION(
13:32:28   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
13:32:28   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:28   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
13:32:28   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
13:32:28   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
13:32:28  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
13:32:28  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
13:32:28  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
13:32:28  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
13:32:28  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
13:32:28  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
13:32:28  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
13:32:28  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
13:32:28  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
13:32:28  19  );
13:32:28  20  
13:32:28  21  PROCEDURE UPDATE_SUBSCRIPTION(
13:32:28  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
13:32:28  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:28  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
13:32:28  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
13:32:28  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
13:32:28  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
13:32:28  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
13:32:28  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:28  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
13:32:28  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
13:32:28  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
13:32:28  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
13:32:28  34  );
13:32:28  35  
13:32:28  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
13:32:28  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
13:32:28  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:28  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
13:32:28  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:28  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
13:32:28  42  );
13:32:28  43  
13:32:28  44  END PROCS_SUBSCRIPTION_CRU_V20;
13:32:28  45  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_SYSTEM
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE INCREMENT_VERSION;
13:32:28   4  
13:32:28   5  PROCEDURE CHECK_VERSION(
13:32:28   6  	  in_vers    IN NUMBER,
13:32:28   7  	  out_result OUT NUMBER
13:32:28   8  );
13:32:28   9  
13:32:28  10  END PROCS_SYSTEM_V20;
13:32:28  11  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_TAXES
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE ADD_TAX (
13:32:28   4  	in_tax_type_id		 IN NUMBER,
13:32:28   5  	in_calculated_amount	 IN NUMBER,
13:32:28   6  	in_created_by		 IN VARCHAR2,
13:32:28   7  	in_line_item_id 	 IN NUMBER,
13:32:28   8  	in_effective_rate	 IN VARCHAR2,
13:32:28   9  	in_taxable_amount	 IN NUMBER,
13:32:28  10  	in_tax_rule_id		 IN NUMBER,
13:32:28  11  	in_jurisdiction_level_id IN NUMBER,
13:32:28  12  	in_jurisdiction_name	 IN VARCHAR2,
13:32:28  13  	in_jurisdiction_id	 IN VARCHAR2,
13:32:28  14  	in_ext_tax_type 	 IN VARCHAR2,
13:32:28  15  	in_ext_result		 IN VARCHAR2,
13:32:28  16  	in_imposition_type	 IN VARCHAR2,
13:32:28  17  	in_imposition		 IN VARCHAR2
13:32:28  18  );
13:32:28  19  
13:32:28  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
13:32:28  21  	in_country_code IN CHAR,
13:32:28  22  	in_check_date IN DATE,
13:32:28  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V20.FALSE
13:32:28  24  );
13:32:28  25  
13:32:28  26  PROCEDURE GET_TAX_CATEGORY (
13:32:28  27  	in_tax_category_id IN NUMBER,
13:32:28  28  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  29  );
13:32:28  30  
13:32:28  31  END PROCS_TAXES_V20;
13:32:28  32  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_TAXES_CRU
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_TAX (
13:32:28   4  	inout_tax_id		 IN OUT NUMBER,
13:32:28   5  	in_tax_type_id		 IN NUMBER,
13:32:28   6  	in_calculated_amount	 IN NUMBER,
13:32:28   7  	in_created_by		 IN VARCHAR2,
13:32:28   8  	in_line_item_id 	 IN NUMBER,
13:32:28   9  	in_effective_rate	 IN VARCHAR2,
13:32:28  10  	in_taxable_amount	 IN NUMBER,
13:32:28  11  	in_tax_rule_id		 IN NUMBER,
13:32:28  12  	in_jurisdiction_level_id IN NUMBER,
13:32:28  13  	in_jurisdiction_name	 IN VARCHAR2,
13:32:28  14  	in_jurisdiction_id	 IN VARCHAR2,
13:32:28  15  	in_ext_tax_type 	 IN VARCHAR2,
13:32:28  16  	in_ext_result		 IN VARCHAR2,
13:32:28  17  	in_imposition_type	 IN VARCHAR2,
13:32:28  18  	in_imposition		 IN VARCHAR2
13:32:28  19  );
13:32:28  20  
13:32:28  21  END PROCS_TAXES_CRU_V20;
13:32:28  22  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_TEST
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE TEST_CLEAR_ALL;
13:32:28   4  PROCEDURE TEST_CLEAR_PRODUCTS;
13:32:28   5  
13:32:28   6  /********************************************/
13:32:28   7  
13:32:28   8  PROCEDURE TEST_GET_ACCOUNT (
13:32:28   9  	in_group_id	IN NUMBER,
13:32:28  10  	out_result_set	OUT SYS_REFCURSOR
13:32:28  11  );
13:32:28  12  
13:32:28  13  /********************************************/
13:32:28  14  
13:32:28  15  PROCEDURE TEST_GET_SUBSCRIPTION (
13:32:28  16  	in_subscription_id IN NUMBER,
13:32:28  17  	out_result_set	   OUT SYS_REFCURSOR
13:32:28  18  );
13:32:28  19  
13:32:28  20  /*********************************************/
13:32:28  21  
13:32:28  22  PROCEDURE TEST_DELETE_INVOICE (
13:32:28  23  	in_invoice_id IN NUMBER
13:32:28  24  );
13:32:28  25  
13:32:28  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
13:32:28  27  	in_group_id IN NUMBER
13:32:28  28  );
13:32:28  29  
13:32:28  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
13:32:28  31  	in_start_group_id IN NUMBER,
13:32:28  32  	in_end_group_id   IN NUMBER
13:32:28  33  );
13:32:28  34  
13:32:28  35  /**********************************************/
13:32:28  36  
13:32:28  37  FUNCTION TEST_IS_INVOICE_EXISTS(
13:32:28  38  /*
13:32:28  39  1 - exists
13:32:28  40  0 - not exists
13:32:28  41  */
13:32:28  42  	in_invoice_id IN NUMBER
13:32:28  43  ) RETURN NUMBER;
13:32:28  44  
13:32:28  45  PROCEDURE TEST_GET_INVOICE_INFO (
13:32:28  46  	in_invoice_id  IN NUMBER,
13:32:28  47  	out_result_set OUT SYS_REFCURSOR
13:32:28  48  );
13:32:28  49  
13:32:28  50  /******************************************************************************/
13:32:28  51  
13:32:28  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
13:32:28  53  	in_offer_chain_id in number
13:32:28  54  );
13:32:28  55  
13:32:28  56  END PROCS_TEST_V20;
13:32:28  57  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_TRANSACTION
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_TRANSACTION (
13:32:28   4  /*
13:32:28   5  Throws exceptions:
13:32:28   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28   8  */
13:32:28   9  	in_transaction_id	  IN NUMBER,
13:32:28  10  	in_status_id		  IN NUMBER,
13:32:28  11  	in_amount		  IN NUMBER,
13:32:28  12  	in_created_by		  IN VARCHAR2,
13:32:28  13  	in_order_id		  IN VARCHAR2,
13:32:28  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
13:32:28  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
13:32:28  16  	out_transaction_id	  OUT NUMBER
13:32:28  17  );
13:32:28  18  
13:32:28  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
13:32:28  20  /*
13:32:28  21  Throws exceptions:
13:32:28  22  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  23  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  24  */
13:32:28  25  	in_transaction_id	   IN NUMBER,
13:32:28  26  	in_trans_attempt_status    IN NUMBER,
13:32:28  27  	in_external_status_code    IN VARCHAR2,
13:32:28  28  	in_external_status_message IN VARCHAR2,
13:32:28  29  	in_created_by		   IN VARCHAR2,
13:32:28  30  	in_ext_transaction_id	   IN VARCHAR2,
13:32:28  31  	out_transaction_attempt_id OUT NUMBER
13:32:28  32  );
13:32:28  33  
13:32:28  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
13:32:28  35  /*
13:32:28  36  Throws exceptions:
13:32:28  37  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  39  */
13:32:28  40  	in_transaction_id	 IN NUMBER,
13:32:28  41  	in_updated_by		 IN VARCHAR2,
13:32:28  42  	in_transaction_status_id IN NUMBER
13:32:28  43  );
13:32:28  44  
13:32:28  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
13:32:28  46  /*
13:32:28  47  Throws exceptions:
13:32:28  48  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  49  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  50  */
13:32:28  51  	in_transaction_id	 IN NUMBER,
13:32:28  52  	in_updated_by		 IN VARCHAR2,
13:32:28  53  	in_is_settled		 IN NUMBER
13:32:28  54  );
13:32:28  55  
13:32:28  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
13:32:28  57  /*
13:32:28  58  Throws exceptions:
13:32:28  59  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  60  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  61  */
13:32:28  62  	in_transaction_attempt_id IN NUMBER,
13:32:28  63  	in_updated_by		  IN VARCHAR2
13:32:28  64  );
13:32:28  65  
13:32:28  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
13:32:28  67  /*
13:32:28  68  Throws exceptions:
13:32:28  69  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  70  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  71  */
13:32:28  72  	in_transaction_attempt_id     IN NUMBER,
13:32:28  73  	in_transaction_attempt_status IN NUMBER
13:32:28  74  );
13:32:28  75  
13:32:28  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
13:32:28  77  /*
13:32:28  78  Throws exceptions:
13:32:28  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  80  */
13:32:28  81  	in_transaction_id	      IN NUMBER,
13:32:28  82  	in_transaction_attempt_status IN NUMBER,
13:32:28  83  	out_result_set		      OUT SYS_REFCURSOR
13:32:28  84  );
13:32:28  85  
13:32:28  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
13:32:28  87  /*
13:32:28  88  Throws exceptions:
13:32:28  89  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  90  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  91  */
13:32:28  92  	in_transaction_attempt_id IN NUMBER,
13:32:28  93  	in_ext_status_code	  IN VARCHAR2,
13:32:28  94  	in_ext_status_message	  IN VARCHAR2,
13:32:28  95  	in_ext_transaction_id	  IN VARCHAR2
13:32:28  96  );
13:32:28  97  
13:32:28  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
13:32:28  99  /*
13:32:28 100  Throws exceptions:
13:32:28 101  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 102  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 103  */
13:32:28 104  	in_transaction_id IN  NUMBER,
13:32:28 105  	out_attempts_num  OUT NUMBER
13:32:28 106  );
13:32:28 107  
13:32:28 108  PROCEDURE GET_TRANSACTION_AMOUNT (
13:32:28 109  /*
13:32:28 110  Throws exceptions:
13:32:28 111  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 112  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 113  */
13:32:28 114  	in_transaction_id      IN  NUMBER,
13:32:28 115  	out_transaction_amount OUT NUMBER
13:32:28 116  );
13:32:28 117  
13:32:28 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
13:32:28 119  /*
13:32:28 120  Throws exceptions:
13:32:28 121  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 122  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 123  */
13:32:28 124  	in_charge_id   IN  NUMBER,
13:32:28 125  	out_result_set OUT SYS_REFCURSOR
13:32:28 126  );
13:32:28 127  
13:32:28 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
13:32:28 129  /*
13:32:28 130  Throws exceptions:
13:32:28 131  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 132  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 133  */
13:32:28 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
13:32:28 135  	out_result_set OUT SYS_REFCURSOR
13:32:28 136  );
13:32:28 137  
13:32:28 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
13:32:28 139  /*
13:32:28 140  Throws exceptions:
13:32:28 141  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 143  */
13:32:28 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
13:32:28 145  	out_result_set OUT SYS_REFCURSOR
13:32:28 146  );
13:32:28 147  
13:32:28 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
13:32:28 149  /*
13:32:28 150  Throws exceptions:
13:32:28 151  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 153  */
13:32:28 154  	in_transaction_id IN  NUMBER,
13:32:28 155  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 156  );
13:32:28 157  
13:32:28 158  PROCEDURE RESERVE_TRANSACTION_ID (
13:32:28 159  /*
13:32:28 160  Throws exceptions:
13:32:28 161  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 162  */
13:32:28 163  	out_transaction_id OUT NUMBER
13:32:28 164  );
13:32:28 165  
13:32:28 166  PROCEDURE GET_TRANSACTION_BY_ID (
13:32:28 167  /*
13:32:28 168  Throws exceptions:
13:32:28 169  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 170  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 171  */
13:32:28 172  	in_transaction_id IN NUMBER,
13:32:28 173  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 174  );
13:32:28 175  
13:32:28 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:28 177  /*
13:32:28 178  Throws exceptions:
13:32:28 179  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 180  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:28 181  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 182  */
13:32:28 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:28 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:28 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:28 186  );
13:32:28 187  
13:32:28 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
13:32:28 189  /*
13:32:28 190  Throws exceptions:
13:32:28 191  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 192  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 193  */
13:32:28 194  	in_invoice_id	IN  NUMBER,
13:32:28 195  	out_result_set OUT SYS_REFCURSOR
13:32:28 196  );
13:32:28 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
13:32:28 198  /*
13:32:28 199  Throws exceptions:
13:32:28 200  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 201  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 202  */
13:32:28 203  	in_transaction_id IN  NUMBER,
13:32:28 204  	out_is_successfull  OUT NUMBER
13:32:28 205  );
13:32:28 206  
13:32:28 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
13:32:28 208  	in_transaction_id IN NUMBER
13:32:28 209  ) RETURN NUMBER;
13:32:28 210  
13:32:28 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
13:32:28 212  	in_transaction_id IN NUMBER
13:32:28 213  ) RETURN NUMBER;
13:32:28 214  
13:32:28 215  -- norlov: #38796
13:32:28 216  PROCEDURE GET_TRANSACTIONS (
13:32:28 217  /*
13:32:28 218  Throws exceptions:
13:32:28 219  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 220  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 221  */
13:32:28 222  	in_group_id	      IN  NUMBER,
13:32:28 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
13:32:28 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
13:32:28 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
13:32:28 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
13:32:28 227  	in_transaction_status IN NUMBER DEFAULT NULL,
13:32:28 228  	out_result_set	      OUT SYS_REFCURSOR
13:32:28 229  );
13:32:28 230  
13:32:28 231  FUNCTION IS_TRANSACTION_COLLECTED (
13:32:28 232  /*
13:32:28 233  Throws:
13:32:28 234  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 235  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 236  Returns:
13:32:28 237  GLOBAL_CONST.TRUE if transaction collected,
13:32:28 238  GLOBAL_CONST.FALSE else
13:32:28 239  */
13:32:28 240  	in_transaction_id IN NUMBER
13:32:28 241  ) RETURN NUMBER;
13:32:28 242  
13:32:28 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
13:32:28 244  /*
13:32:28 245  Throws exceptions:
13:32:28 246  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 247  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 248  */
13:32:28 249  	in_charge_id   in  number,
13:32:28 250  	out_attempt_count out number
13:32:28 251  );
13:32:28 252  
13:32:28 253  END PROCS_TRANSACTION_V20;
13:32:28 254  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PROCS_TRANSACTION_CRU
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_TRANSACTION (
13:32:28   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
13:32:28   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
13:32:28   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
13:32:28   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
13:32:28   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
13:32:28  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
13:32:28  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
13:32:28  12  );
13:32:28  13  
13:32:28  14  PROCEDURE UPDATE_TRANSACTION (
13:32:28  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
13:32:28  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
13:32:28  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
13:32:28  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
13:32:28  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
13:32:28  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
13:32:28  21  );
13:32:28  22  
13:32:28  23  PROCEDURE READ_TRANSACTION (
13:32:28  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:28  25  	out_result_set	  OUT SYS_REFCURSOR
13:32:28  26  );
13:32:28  27  
13:32:28  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
13:32:28  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
13:32:28  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
13:32:28  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
13:32:28  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:28  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
13:32:28  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:28  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
13:32:28  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
13:32:28  37  );
13:32:28  38  
13:32:28  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:28  40  /*
13:32:28  41  Throws exceptions:
13:32:28  42  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  43  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:28  44  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  45  */
13:32:28  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:28  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:28  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:28  49  );
13:32:28  50  
13:32:28  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
13:32:28  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
13:32:28  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
13:32:28  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:28  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:28  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
13:32:28  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
13:32:28  58  );
13:32:28  59  
13:32:28  60  END PROCS_TRANSACTION_CRU_V20;
13:32:28  61  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PUBLIC_PROCS_BILLING
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:28   4  /*
13:32:28   5  Throws exceptions:
13:32:28   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28   8  */
13:32:28   9  	  in_offer_chain_id IN	 NUMBER,
13:32:28  10  	  out_result_set    OUT  SYS_REFCURSOR
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
13:32:28  14  /*
13:32:28  15  Throws exceptions:
13:32:28  16  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  18  */
13:32:28  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:28  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
13:32:28  21  );
13:32:28  22  
13:32:28  23  PROCEDURE GET_PENDING_INVOICES (
13:32:28  24  /*
13:32:28  25  Throws exceptions:
13:32:28  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  27  */
13:32:28  28  	out_result_set	     OUT SYS_REFCURSOR,
13:32:28  29  	in_row_number	     IN NUMBER DEFAULT NULL
13:32:28  30  );
13:32:28  31  
13:32:28  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
13:32:28  33  /*
13:32:28  34  Throws exceptions:
13:32:28  35  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  36  */
13:32:28  37  	out_result_set	    OUT SYS_REFCURSOR,
13:32:28  38  	in_row_number	    IN NUMBER DEFAULT NULL
13:32:28  39  );
13:32:28  40  
13:32:28  41  PROCEDURE GET_UNPROCESSED_CHARGES (
13:32:28  42  /*
13:32:28  43  Throws exceptions:
13:32:28  44  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  45  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  46  */
13:32:28  47  	in_invoice_id  IN NUMBER,
13:32:28  48  	out_result_set OUT SYS_REFCURSOR
13:32:28  49  );
13:32:28  50  
13:32:28  51  PROCEDURE GET_PROCESSED_CHARGES (
13:32:28  52  /*
13:32:28  53  Throws exceptions:
13:32:28  54  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  56  */
13:32:28  57  	in_invoice_id  IN NUMBER,
13:32:28  58  	out_result_set OUT SYS_REFCURSOR
13:32:28  59  );
13:32:28  60  
13:32:28  61  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
13:32:28  62  /*
13:32:28  63  Throws exceptions:
13:32:28  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  65  */
13:32:28  66  	in_transaction_id	      IN NUMBER,
13:32:28  67  	in_transaction_attempt_status IN NUMBER,
13:32:28  68  	out_result_set		      OUT SYS_REFCURSOR
13:32:28  69  );
13:32:28  70  
13:32:28  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
13:32:28  72  /*
13:32:28  73  Throws exceptions:
13:32:28  74  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  75  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  76  */
13:32:28  77  	in_transaction_attempt_id     IN NUMBER,
13:32:28  78  	in_transaction_attempt_status IN NUMBER
13:32:28  79  );
13:32:28  80  
13:32:28  81  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
13:32:28  82  /*
13:32:28  83  Throws exceptions:
13:32:28  84  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  85  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  86  */
13:32:28  87  	in_transaction_attempt_id IN NUMBER,
13:32:28  88  	in_updated_by		  IN VARCHAR2
13:32:28  89  );
13:32:28  90  
13:32:28  91  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
13:32:28  92  /*
13:32:28  93  Throws exceptions:
13:32:28  94  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  95  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  96  */
13:32:28  97  	in_transaction_id	   IN NUMBER,
13:32:28  98  	in_trans_attempt_status    IN NUMBER,
13:32:28  99  	in_external_status_code    IN VARCHAR2,
13:32:28 100  	in_external_status_message IN VARCHAR2,
13:32:28 101  	in_created_by		   IN VARCHAR2,
13:32:28 102  	in_ext_transaction_id	   IN VARCHAR2,
13:32:28 103  	out_transaction_attempt_id OUT NUMBER
13:32:28 104  );
13:32:28 105  
13:32:28 106  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
13:32:28 107  /*
13:32:28 108  Throws exceptions:
13:32:28 109  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 110  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 111  */
13:32:28 112  	in_transaction_attempt_id IN NUMBER,
13:32:28 113  	in_ext_status_code	  IN VARCHAR2,
13:32:28 114  	in_ext_status_message	  IN VARCHAR2,
13:32:28 115  	in_ext_transaction_id	  IN VARCHAR2
13:32:28 116  );
13:32:28 117  
13:32:28 118  PROCEDURE UPDATE_TRANSACTION_STATUS (
13:32:28 119  /*
13:32:28 120  Throws exceptions:
13:32:28 121  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 122  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 123  */
13:32:28 124  	in_transaction_id	 IN NUMBER,
13:32:28 125  	in_updated_by		 IN VARCHAR2,
13:32:28 126  	in_transaction_status_id IN NUMBER
13:32:28 127  );
13:32:28 128  
13:32:28 129  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
13:32:28 130  /*
13:32:28 131  Throws exceptions:
13:32:28 132  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 133  */
13:32:28 134  	in_transaction_id IN  NUMBER,
13:32:28 135  	out_attempts_num  OUT NUMBER
13:32:28 136  );
13:32:28 137  
13:32:28 138  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
13:32:28 139  /*
13:32:28 140  Throws exceptions:
13:32:28 141  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 143  */
13:32:28 144  	in_transaction_id IN  NUMBER,
13:32:28 145  	out_is_successfull  OUT NUMBER
13:32:28 146  );
13:32:28 147  
13:32:28 148  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:28 149  /*
13:32:28 150  Throws exceptions:
13:32:28 151  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 153  */
13:32:28 154  	in_invoice_id		       IN NUMBER,
13:32:28 155  	in_invoice_status_id	       IN NUMBER,
13:32:28 156  	in_updated_by		       IN VARCHAR2
13:32:28 157  );
13:32:28 158  
13:32:28 159  PROCEDURE SUSPEND_SUBSCRIPTION(
13:32:28 160  /*
13:32:28 161  Throws exceptions:
13:32:28 162  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 163  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 164  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 165  */
13:32:28 166  	  in_subs_id	IN NUMBER ,
13:32:28 167  	  in_updated_by IN VARCHAR2
13:32:28 168  );
13:32:28 169  
13:32:28 170  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:28 171  /*
13:32:28 172  Throws exceptions:
13:32:28 173  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 174  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 175  */
13:32:28 176  	in_credit_card_id IN  NUMBER,
13:32:28 177  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 178  );
13:32:28 179  
13:32:28 180  PROCEDURE GET_TRANSACTION_AMOUNT (
13:32:28 181  /*
13:32:28 182  Throws exceptions:
13:32:28 183  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 184  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 185  */
13:32:28 186  	in_transaction_id      IN  NUMBER,
13:32:28 187  	out_transaction_amount OUT NUMBER
13:32:28 188  );
13:32:28 189  
13:32:28 190  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
13:32:28 191  /*
13:32:28 192  Throws exceptions:
13:32:28 193  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 194  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 195  */
13:32:28 196  	in_invoice_id  IN  NUMBER,
13:32:28 197  	out_account_id OUT NUMBER
13:32:28 198  );
13:32:28 199  
13:32:28 200  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
13:32:28 201  /*
13:32:28 202  Throws exceptions:
13:32:28 203  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28 204  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 205  */
13:32:28 206  	in_gift_certificate_id IN NUMBER,
13:32:28 207  	out_result_set	       OUT SYS_REFCURSOR
13:32:28 208  );
13:32:28 209  
13:32:28 210  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
13:32:28 211  /*
13:32:28 212  Throws exceptions:
13:32:28 213  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 214  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 215  */
13:32:28 216  	in_charge_id	    IN NUMBER,
13:32:28 217  	out_subscription_id OUT NUMBER
13:32:28 218  );
13:32:28 219  
13:32:28 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
13:32:28 221  /*
13:32:28 222  Throws exceptions:
13:32:28 223  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 224  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 225  */
13:32:28 226  	in_gift_certificate_id IN NUMBER,
13:32:28 227  	in_charge_id	       IN NUMBER,
13:32:28 228  	out_result	       OUT NUMBER
13:32:28 229  );
13:32:28 230  
13:32:28 231  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:28 232  /*
13:32:28 233  Throws exceptions:
13:32:28 234  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 235  */
13:32:28 236  	  in_subscription_id IN  NUMBER,
13:32:28 237  	  out_result_set      OUT SYS_REFCURSOR
13:32:28 238  );
13:32:28 239  
13:32:28 240  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:28 241  /*
13:32:28 242  Throws exceptions:
13:32:28 243  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 244  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 245  */
13:32:28 246  	in_invoice_id IN  NUMBER,
13:32:28 247  	out_amount    OUT NUMBER
13:32:28 248  );
13:32:28 249  
13:32:28 250  PROCEDURE GET_TRANSACTION_BY_ID (
13:32:28 251  /*
13:32:28 252  Throws exceptions:
13:32:28 253  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 254  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 255  */
13:32:28 256  	in_transaction_id IN NUMBER,
13:32:28 257  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 258  );
13:32:28 259  
13:32:28 260  PROCEDURE UPDATE_CHARGE_STATUS (
13:32:28 261  /*
13:32:28 262  Throws exceptions:
13:32:28 263  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 264  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 265  */
13:32:28 266  	in_charge_id	    IN CHARGE.ID%TYPE,
13:32:28 267  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:28 268  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
13:32:28 269  );
13:32:28 270  
13:32:28 271  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:28 272  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:28 273  	out_result_set OUT SYS_REFCURSOR
13:32:28 274  );
13:32:28 275  
13:32:28 276  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:28 277  /*
13:32:28 278  Throws exceptions:
13:32:28 279  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 280  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:28 281  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 282  */
13:32:28 283  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:28 284  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:28 285  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:28 286  );
13:32:28 287  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
13:32:28 288  /*
13:32:28 289  Throws exceptions:
13:32:28 290  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 291  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 292  */
13:32:28 293  	in_invoice_id	IN  NUMBER,
13:32:28 294  	out_result_set OUT SYS_REFCURSOR
13:32:28 295  );
13:32:28 296  PROCEDURE GET_ACTIVE_INVOICES_IDS (
13:32:28 297  /*
13:32:28 298  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 299  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 300  */
13:32:28 301  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
13:32:28 302  	in_subscription_id IN NUMBER,
13:32:28 303  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 304  );
13:32:28 305  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
13:32:28 306  /*
13:32:28 307  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 308  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 309  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 310  */
13:32:28 311  --  in_invoice_id        IN INVOICE.ID%TYPE,
13:32:28 312  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
13:32:28 313  -- norlov: in_refundable	      IN refund enabled
13:32:28 314  	in_invoice_id	     IN NUMBER,
13:32:28 315  	in_updated_by	     IN VARCHAR2,
13:32:28 316  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:28 317  --  in_cancellation_date IN DATE DEFAULT current_timestamp
13:32:28 318  );
13:32:28 319  
13:32:28 320  PROCEDURE FINALIZE_CANCELATION (
13:32:28 321  /*
13:32:28 322  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 323  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 324  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 325  */
13:32:28 326  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
13:32:28 327  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
13:32:28 328  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:28 329  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:28 330  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:28 331  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:28 332  	in_subscription_id    IN NUMBER,
13:32:28 333  	in_cancelation_reason IN VARCHAR2,
13:32:28 334  	in_cancelation_date   IN DATE,
13:32:28 335  	in_note 	      IN VARCHAR2,
13:32:28 336  	in_agent_id	      IN NUMBER,
13:32:28 337  	in_updated_by	      IN VARCHAR2
13:32:28 338  );
13:32:28 339  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
13:32:28 340  /*
13:32:28 341  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 343  */
13:32:28 344  	in_subscription_id IN NUMBER,
13:32:28 345  	out_result_set	   OUT SYS_REFCURSOR
13:32:28 346  );
13:32:28 347  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:28 348  /*
13:32:28 349  Throws exceptions (codes):
13:32:28 350  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 352  */
13:32:28 353  	in_offer_chain_id IN NUMBER,
13:32:28 354  	in_meta_data_name IN VARCHAR2,
13:32:28 355  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 356  );
13:32:28 357  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:28 358  /*
13:32:28 359  Throws exceptions (codes):
13:32:28 360  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 361  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 362  */
13:32:28 363  	in_product_offering_id IN NUMBER,
13:32:28 364  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
13:32:28 365  	out_result_set	       OUT SYS_REFCURSOR
13:32:28 366  );
13:32:28 367  PROCEDURE READ_ACCOUNT (
13:32:28 368  	in_account_id  IN ACCOUNT.ID%TYPE,
13:32:28 369  	out_result_set OUT SYS_REFCURSOR
13:32:28 370  );
13:32:28 371  
13:32:28 372  PROCEDURE GET_COLLECTED_CHARGES (
13:32:28 373  /*
13:32:28 374  Throws exceptions:
13:32:28 375  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 377  */
13:32:28 378  	in_invoice_id  IN NUMBER,
13:32:28 379  	out_result_set OUT SYS_REFCURSOR
13:32:28 380  );
13:32:28 381  
13:32:28 382  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
13:32:28 383  /*
13:32:28 384  Throws exceptions:
13:32:28 385  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28 386  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 387  */
13:32:28 388  	in_invoice_id IN NUMBER,
13:32:28 389  	out_group_ids OUT SYS_REFCURSOR
13:32:28 390  );
13:32:28 391  
13:32:28 392  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:28 393  /*
13:32:28 394  Throws exceptions:
13:32:28 395  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28 396  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 397  */
13:32:28 398  	in_group_id IN NUMBER,
13:32:28 399  	out_account_id	OUT NUMBER
13:32:28 400  );
13:32:28 401  
13:32:28 402  PROCEDURE LOCK_ACCOUNT (
13:32:28 403  	in_group_id    IN NUMBER,
13:32:28 404  	in_lock_key    IN VARCHAR2,
13:32:28 405  	in_seconds_num IN NUMBER,
13:32:28 406  	in_created_by  IN VARCHAR2,
13:32:28 407  	in_reason      IN VARCHAR2
13:32:28 408  );
13:32:28 409  
13:32:28 410  PROCEDURE RELEASE_LOCK (
13:32:28 411  	in_group_id IN NUMBER,
13:32:28 412  	in_lock_key IN VARCHAR2
13:32:28 413  );
13:32:28 414  
13:32:28 415  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
13:32:28 416  	in_invoice_id		    IN NUMBER,
13:32:28 417  	out_order_id		    OUT VARCHAR2,
13:32:28 418  	out_external_transaction_id OUT VARCHAR2
13:32:28 419  );
13:32:28 420  
13:32:28 421  PROCEDURE GET_PAYPAL_BY_ID (
13:32:28 422  	in_paypal_id   IN  NUMBER,
13:32:28 423  	out_result_set OUT SYS_REFCURSOR
13:32:28 424  );
13:32:28 425  
13:32:28 426  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
13:32:28 427  /*
13:32:28 428  Throws exceptions:
13:32:28 429  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 430  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 431  */
13:32:28 432  	in_charge_id   in  number,
13:32:28 433  	out_attempt_count out number
13:32:28 434  );
13:32:28 435  
13:32:28 436  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:28 437  	in_offer_chain_id	 IN NUMBER,
13:32:28 438  	in_action_name		 IN VARCHAR2,
13:32:28 439  	out_notification_type_id out number
13:32:28 440  );
13:32:28 441  
13:32:28 442  PROCEDURE SHOULD_MOVE_TO_GRACE(
13:32:28 443  	in_invoice_id  IN INVOICE.ID%TYPE,
13:32:28 444  	out_result     OUT NUMBER
13:32:28 445  );
13:32:28 446  
13:32:28 447  PROCEDURE MOVE_TO_GRACE(
13:32:28 448  	in_invoice_id		      IN INVOICE.ID%TYPE,
13:32:28 449  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
13:32:28 450  	in_grace_period_length_hours  IN NUMBER
13:32:28 451  );
13:32:28 452  
13:32:28 453  PROCEDURE MOVE_OUT_OF_GRACE(
13:32:28 454  	in_invoice_id	IN INVOICE.ID%TYPE,
13:32:28 455  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
13:32:28 456  );
13:32:28 457  
13:32:28 458  END PUBLIC_PROCS_BILLING_V20;
13:32:28 459  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.05
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
13:32:28   4  /*
13:32:28   5  Throws exceptions:
13:32:28   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28   8  */
13:32:28   9  	in_notification_type_name IN VARCHAR2,
13:32:28  10  	out_notification_type_id  OUT NUMBER
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE ADD_NOTIFICATION (
13:32:28  14  /*
13:32:28  15  Throws exceptions:
13:32:28  16  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  17  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  18  */
13:32:28  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
13:32:28  20  	in_recipient_group_id	 IN NUMBER,
13:32:28  21  	in_notification_type_id  IN NUMBER,
13:32:28  22  	in_date_to_notify	 IN DATE,
13:32:28  23  	in_email_template_params IN CLOB
13:32:28  24  );
13:32:28  25  
13:32:28  26  END PUBLIC_PROCS_CLIENT_V20;
13:32:28  27  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE LOCK_ACCOUNT (
13:32:28   4  	in_group_id    IN NUMBER,
13:32:28   5  	in_lock_key    IN VARCHAR2,
13:32:28   6  	in_seconds_num IN NUMBER,
13:32:28   7  	in_created_by  IN VARCHAR2,
13:32:28   8  	in_reason      IN VARCHAR2
13:32:28   9  );
13:32:28  10  
13:32:28  11  PROCEDURE RELEASE_LOCK (
13:32:28  12  	in_group_id IN NUMBER,
13:32:28  13  	in_lock_key IN VARCHAR2
13:32:28  14  );
13:32:28  15  
13:32:28  16  END PUBLIC_PROCS_NOTIFICATION_V20;
13:32:28  17  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
13:32:28 SQL> --------------------------------------------------------------------------------
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
13:32:28   4  	out_result_set OUT SYS_REFCURSOR
13:32:28   5  );
13:32:28   6  
13:32:28   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
13:32:28   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:28   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
13:32:28  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:28  11  );
13:32:28  12  
13:32:28  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:28  14  /*
13:32:28  15  Throws exceptions:
13:32:28  16  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  18  */
13:32:28  19  	  in_offer_chain_id IN	 NUMBER,
13:32:28  20  	  out_result_set    OUT  SYS_REFCURSOR
13:32:28  21  );
13:32:28  22  
13:32:28  23  PROCEDURE GET_UNREDEEMED_GCS (
13:32:28  24  	out_result_set		OUT SYS_REFCURSOR,
13:32:28  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:28  26  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:28  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:28  28  );
13:32:28  29  
13:32:28  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
13:32:28  31  /*
13:32:28  32  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
13:32:28  33  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  34  */
13:32:28  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
13:32:28  36  	out_result_set	     OUT SYS_REFCURSOR
13:32:28  37  );
13:32:28  38  
13:32:28  39  PROCEDURE GET_ALL_OCH_META_DATA (
13:32:28  40  	in_offer_chain_id IN NUMBER,
13:32:28  41  	out_result_set	  OUT SYS_REFCURSOR
13:32:28  42  );
13:32:28  43  
13:32:28  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:28  45  /*
13:32:28  46  Throws exceptions (codes):
13:32:28  47  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  48  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  49  */
13:32:28  50  	in_offer_chain_id IN NUMBER,
13:32:28  51  	in_meta_data_name IN VARCHAR2,
13:32:28  52  	out_result_set	  OUT SYS_REFCURSOR
13:32:28  53  );
13:32:28  54  
13:32:28  55  PROCEDURE GET_ENDING_LICENSES (
13:32:28  56  /*
13:32:28  57  Throws exceptions:
13:32:28  58  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  59  */
13:32:28  60  	in_hours_number IN NUMBER,
13:32:28  61  	out_result_set OUT SYS_REFCURSOR
13:32:28  62  );
13:32:28  63  
13:32:28  64  PROCEDURE GET_ENDING_LICENSES_CC (
13:32:28  65  /*
13:32:28  66  Throws exceptions:
13:32:28  67  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  68  */
13:32:28  69  	in_hours_number IN NUMBER,
13:32:28  70  	out_result_set OUT SYS_REFCURSOR,
13:32:28  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:28  72  );
13:32:28  73  
13:32:28  74  /************************************************/
13:32:28  75  
13:32:28  76  PROCEDURE GET_RECURRING_OFFER (
13:32:28  77  /*
13:32:28  78  Throws exceptions:
13:32:28  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  80  */
13:32:28  81  	in_license_id  IN NUMBER,
13:32:28  82  	out_result_set OUT SYS_REFCURSOR
13:32:28  83  );
13:32:28  84  
13:32:28  85  /*************************************************/
13:32:28  86  
13:32:28  87  PROCEDURE GET_NEXT_OFFER (
13:32:28  88  /*
13:32:28  89  Throws exceptions:
13:32:28  90  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28  91  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28  92  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  93  */
13:32:28  94  	in_license_id  IN NUMBER,
13:32:28  95  	out_result_set OUT SYS_REFCURSOR
13:32:28  96  );
13:32:28  97  
13:32:28  98  /**************************************************/
13:32:28  99  
13:32:28 100  PROCEDURE UPDATE_LICENSE_STATUS(
13:32:28 101  /*
13:32:28 102  Throws exceptions:
13:32:28 103  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 104  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 105  */
13:32:28 106  	  in_license_id     IN NUMBER,
13:32:28 107  	  in_license_status IN NUMBER,
13:32:28 108  	  in_updated_by     IN VARCHAR2
13:32:28 109  );
13:32:28 110  
13:32:28 111  /***************************************************/
13:32:28 112  
13:32:28 113  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:28 114  /*
13:32:28 115  Throws exceptions:
13:32:28 116  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 117  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 118  */
13:32:28 119  	in_invoice_id		       IN NUMBER,
13:32:28 120  	in_invoice_status_id	       IN NUMBER,
13:32:28 121  	in_updated_by		       IN VARCHAR2
13:32:28 122  );
13:32:28 123  
13:32:28 124  /***************************************************/
13:32:28 125  
13:32:28 126  PROCEDURE CREATE_LICENSE(
13:32:28 127  /*
13:32:28 128  Throws exceptions:
13:32:28 129  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 130  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 131  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:28 132  */
13:32:28 133  	in_status_id		    IN NUMBER,
13:32:28 134  	in_needs_entitlements	    IN NUMBER,
13:32:28 135  	in_start_date		    IN DATE,
13:32:28 136  	in_end_date		    IN DATE,
13:32:28 137  	in_offer_id		    IN NUMBER,
13:32:28 138  	in_subscription_id	    IN NUMBER,
13:32:28 139  	in_invoice_id		    IN NUMBER,
13:32:28 140  	in_created_by		    IN VARCHAR2,
13:32:28 141  	in_is_extension 	    IN NUMBER,
13:32:28 142  	in_current_offer_index	    IN NUMBER,
13:32:28 143  	in_current_offer_recurr_num IN NUMBER,
13:32:28 144  	out_license_id		    OUT NUMBER
13:32:28 145  );
13:32:28 146  
13:32:28 147  /**************************************************/
13:32:28 148  
13:32:28 149  PROCEDURE CREATE_INVOICE(
13:32:28 150  /*
13:32:28 151  Throws exceptions:
13:32:28 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 153  */
13:32:28 154  	  in_invoice_status IN NUMBER,
13:32:28 155  	  in_created_by     IN VARCHAR2,
13:32:28 156  	  in_tax_exempt_id  IN VARCHAR2,
13:32:28 157  	  out_invoice_id    OUT NUMBER
13:32:28 158  );
13:32:28 159  
13:32:28 160  /*****************************************************/
13:32:28 161  
13:32:28 162  PROCEDURE CREATE_CHARGE(
13:32:28 163  /*
13:32:28 164  Throws exceptions:
13:32:28 165  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 166  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 167  */
13:32:28 168  	in_invoice_id	      IN NUMBER,
13:32:28 169  	in_transaction_id     IN NUMBER,
13:32:28 170  	in_instrument_type_id IN NUMBER,
13:32:28 171  	in_instrument_id      IN NUMBER,
13:32:28 172  	in_charge_amount      IN NUMBER,
13:32:28 173  	in_created_by	      IN VARCHAR2,
13:32:28 174  	in_charge_status_id   IN NUMBER,
13:32:28 175  	out_charge_id	      OUT NUMBER
13:32:28 176  );
13:32:28 177  
13:32:28 178  /*****************************************************/
13:32:28 179  
13:32:28 180  PROCEDURE HAS_FUTURE_LICENSE (
13:32:28 181  /*
13:32:28 182  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 183  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 184  --
13:32:28 185  RETURNS:
13:32:28 186  1 - if has,
13:32:28 187  0 - else
13:32:28 188  */
13:32:28 189  	in_license_id IN NUMBER,
13:32:28 190  	out_result	   OUT NUMBER
13:32:28 191  );
13:32:28 192  
13:32:28 193  /*****************************************************/
13:32:28 194  
13:32:28 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
13:32:28 196  /*
13:32:28 197  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 198  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 199  */
13:32:28 200  	in_license_id IN NUMBER,
13:32:28 201  	out_group_id  OUT NUMBER
13:32:28 202  );
13:32:28 203  
13:32:28 204  /*****************************************************/
13:32:28 205  
13:32:28 206  PROCEDURE GET_OFFER_PRODUCTS (
13:32:28 207  /*
13:32:28 208  Throws exceptions (codes):
13:32:28 209  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 210  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 211  */
13:32:28 212  	in_offer_id    IN NUMBER,
13:32:28 213  	out_result_set OUT SYS_REFCURSOR
13:32:28 214  );
13:32:28 215  
13:32:28 216  /*******************************************************/
13:32:28 217  
13:32:28 218  PROCEDURE CREATE_TRANSACTION (
13:32:28 219  /*
13:32:28 220  Throws exceptions:
13:32:28 221  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 222  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 223  */
13:32:28 224  	in_transaction_id	  IN NUMBER,
13:32:28 225  	in_status_id		  IN NUMBER,
13:32:28 226  	in_amount		  IN NUMBER,
13:32:28 227  	in_created_by		  IN VARCHAR2,
13:32:28 228  	in_order_id		  IN VARCHAR2,
13:32:28 229  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
13:32:28 230  	out_transaction_id	  OUT NUMBER
13:32:28 231  );
13:32:28 232  
13:32:28 233  /*********************************************************/
13:32:28 234  
13:32:28 235  PROCEDURE ADD_LINE_ITEMS(
13:32:28 236  /*
13:32:28 237  Throws exceptions:
13:32:28 238  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 239  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 240  */
13:32:28 241  	in_invoice_id IN NUMBER,
13:32:28 242  	in_offer_id   IN NUMBER,
13:32:28 243  	in_created_by IN VARCHAR2
13:32:28 244  );
13:32:28 245  
13:32:28 246  /**********************************************************/
13:32:28 247  
13:32:28 248  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:28 249  /*
13:32:28 250  Throws exceptions:
13:32:28 251  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 252  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 253  */
13:32:28 254  	in_invoice_id IN  NUMBER,
13:32:28 255  	out_amount    OUT NUMBER
13:32:28 256  );
13:32:28 257  
13:32:28 258  /*********************************************************/
13:32:28 259  
13:32:28 260  PROCEDURE RESERVE_TRANSACTION_ID (
13:32:28 261  /*
13:32:28 262  Throws exceptions:
13:32:28 263  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 264  */
13:32:28 265  	out_transaction_id OUT NUMBER
13:32:28 266  );
13:32:28 267  
13:32:28 268  /**********************************************************/
13:32:28 269  
13:32:28 270  PROCEDURE P_GET_NEXT_OFFER_INDEX (
13:32:28 271  	in_offer_chain_id	     IN NUMBER,
13:32:28 272  	in_offer_chain_current_index IN NUMBER,
13:32:28 273  	out_next_offer_index	     OUT NUMBER
13:32:28 274  );
13:32:28 275  
13:32:28 276  /***********************************************************/
13:32:28 277  
13:32:28 278  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
13:32:28 279  	in_license_id		     IN NUMBER,
13:32:28 280  	in_offer_chain_current_index IN NUMBER,
13:32:28 281  	out_next_offer_index	     OUT NUMBER
13:32:28 282  );
13:32:28 283  
13:32:28 284  /**********************************************************/
13:32:28 285  
13:32:28 286  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:28 287  /*
13:32:28 288  Throws exceptions:
13:32:28 289  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 290  */
13:32:28 291  	  in_subscription_id IN  NUMBER,
13:32:28 292  	  out_result_set      OUT SYS_REFCURSOR
13:32:28 293  );
13:32:28 294  
13:32:28 295  /***********************************************************/
13:32:28 296  
13:32:28 297  PROCEDURE CLOSE_SUBSCRIPTION (
13:32:28 298  	in_subscription_id IN NUMBER,
13:32:28 299  	in_updated_by	   IN VARCHAR2
13:32:28 300  );
13:32:28 301  
13:32:28 302  /***********************************************************/
13:32:28 303  
13:32:28 304  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
13:32:28 305  	out_result_set OUT SYS_REFCURSOR
13:32:28 306  );
13:32:28 307  
13:32:28 308  /***********************************************************/
13:32:28 309  
13:32:28 310  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
13:32:28 311  	in_license_id	      IN NUMBER,
13:32:28 312  	in_needs_entitlements IN NUMBER,
13:32:28 313  	in_updated_by	      IN VARCHAR2
13:32:28 314  );
13:32:28 315  /***********************************************************/
13:32:28 316  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
13:32:28 317  	in_offer_id    IN NUMBER,
13:32:28 318  	out_result_set OUT SYS_REFCURSOR
13:32:28 319  );
13:32:28 320  /***********************************************************/
13:32:28 321  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:28 322  	in_product_offering_id IN NUMBER,
13:32:28 323  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
13:32:28 324  	out_result_set	       OUT SYS_REFCURSOR
13:32:28 325  );
13:32:28 326  
13:32:28 327  PROCEDURE LOCK_ACCOUNT (
13:32:28 328  	in_group_id    IN NUMBER,
13:32:28 329  	in_lock_key    IN VARCHAR2,
13:32:28 330  	in_seconds_num IN NUMBER,
13:32:28 331  	in_created_by  IN VARCHAR2,
13:32:28 332  	in_reason      IN VARCHAR2
13:32:28 333  );
13:32:28 334  
13:32:28 335  PROCEDURE RELEASE_LOCK (
13:32:28 336  	in_group_id IN NUMBER,
13:32:28 337  	in_lock_key IN VARCHAR2
13:32:28 338  );
13:32:28 339  
13:32:28 340  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:28 341  	in_invoice_id  IN NUMBER,
13:32:28 342  	out_result_set OUT SYS_REFCURSOR
13:32:28 343  );
13:32:28 344  
13:32:28 345  PROCEDURE ADD_TAX (
13:32:28 346  	in_tax_type_id		 IN NUMBER,
13:32:28 347  	in_calculated_amount	 IN NUMBER,
13:32:28 348  	in_created_by		 IN VARCHAR2,
13:32:28 349  	in_line_item_id 	 IN NUMBER,
13:32:28 350  	in_effective_rate	 IN VARCHAR2,
13:32:28 351  	in_taxable_amount	 IN NUMBER,
13:32:28 352  	in_tax_rule_id		 IN NUMBER,
13:32:28 353  	in_jurisdiction_level_id IN NUMBER,
13:32:28 354  	in_jurisdiction_name	 IN VARCHAR2,
13:32:28 355  	in_jurisdiction_id	 IN VARCHAR2,
13:32:28 356  	in_ext_tax_type 	 IN VARCHAR2,
13:32:28 357  	in_ext_result		 IN VARCHAR2,
13:32:28 358  	in_imposition_type	 IN VARCHAR2,
13:32:28 359  	in_imposition		 IN VARCHAR2
13:32:28 360  );
13:32:28 361  
13:32:28 362  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:28 363  	in_credit_card_id IN  NUMBER,
13:32:28 364  	out_result_set	  OUT SYS_REFCURSOR
13:32:28 365  );
13:32:28 366  
13:32:28 367  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
13:32:28 368  	in_line_item_id IN NUMBER,
13:32:28 369  	out_result_set	OUT SYS_REFCURSOR
13:32:28 370  );
13:32:28 371  
13:32:28 372  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:28 373  /*
13:32:28 374  Throws exceptions:
13:32:28 375  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:28 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 377  */
13:32:28 378  	in_group_id IN NUMBER,
13:32:28 379  	out_account_id	OUT NUMBER
13:32:28 380  );
13:32:28 381  
13:32:28 382  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
13:32:28 383  /*
13:32:28 384  Throws exceptions:
13:32:28 385  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:28 386  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28 387  */
13:32:28 388  	in_line_item_id IN  NUMBER,
13:32:28 389  	out_result_set	OUT SYS_REFCURSOR
13:32:28 390  );
13:32:28 391  
13:32:28 392  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
13:32:28 393  	in_line_item_id    IN NUMBER,
13:32:28 394  	in_amount	   IN NUMBER,
13:32:28 395  	in_discount_amount IN NUMBER,
13:32:28 396  	in_taxes_amount    IN NUMBER
13:32:28 397  );
13:32:28 398  
13:32:28 399  PROCEDURE GET_PAYPAL_BY_ID (
13:32:28 400  	in_paypal_id   IN  NUMBER,
13:32:28 401  	out_result_set OUT SYS_REFCURSOR
13:32:28 402  );
13:32:28 403  
13:32:28 404  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:28 405  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:28 406  	out_result_set OUT SYS_REFCURSOR
13:32:28 407  );
13:32:28 408  
13:32:28 409  PROCEDURE GET_LICENSE_BY_ID (
13:32:28 410  	in_license_id  IN NUMBER,
13:32:28 411  	out_result_set OUT SYS_REFCURSOR
13:32:28 412  );
13:32:28 413  
13:32:28 414  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:28 415  	in_offer_chain_id	 IN NUMBER,
13:32:28 416  	in_action_name		 IN VARCHAR2,
13:32:28 417  	out_notification_type_id OUT NUMBER
13:32:28 418  );
13:32:28 419  
13:32:28 420  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
13:32:28 421  	in_offer_chain_id IN NUMBER,
13:32:28 422  	in_meta_data_name IN VARCHAR2,
13:32:28 423  	out_value	  OUT VARCHAR2
13:32:28 424  );
13:32:28 425  
13:32:28 426  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
13:32:28 427  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 428  );
13:32:28 429  
13:32:28 430  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
13:32:28 431  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 432  );
13:32:28 433  
13:32:28 434  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
13:32:28 435  	out_result_set	    OUT SYS_REFCURSOR
13:32:28 436  );
13:32:28 437  
13:32:28 438  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
13:32:28 439  	in_max_days_until_close IN NUMBER,
13:32:28 440  	in_num_subs_to_fetch	IN NUMBER,
13:32:28 441  	out_result_set		OUT SYS_REFCURSOR
13:32:28 442  );
13:32:28 443  
13:32:28 444  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
13:32:28 445  	in_days_before_close	 IN NUMBER,
13:32:28 446  	in_num_licenses_to_fetch IN NUMBER,
13:32:28 447  	out_result_set		 OUT SYS_REFCURSOR
13:32:28 448  );
13:32:28 449  
13:32:28 450  END PUBLIC_PROCS_RENEWAL_V20;
13:32:28 451  .
13:32:28 SQL> /

Package created.

Elapsed: 00:00:00.06
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_ACCOUNT (
13:32:28   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
13:32:28   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
13:32:28   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:28   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
13:32:28   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
13:32:28   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
13:32:28  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:28  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
13:32:28  12  ) AS
13:32:28  13  -- VARIABLES
13:32:28  14  var_new_account_id ACCOUNT.ID%TYPE;
13:32:28  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:28  16  var_date DATE := SYSDATE;
13:32:28  17  BEGIN
13:32:28  18  	SELECT
13:32:28  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
13:32:28  20  	FROM DUAL;
13:32:28  21  	INSERT INTO ACCOUNT (
13:32:28  22  	  ID,
13:32:28  23  	  ACCOUNT_STATUS_ID,
13:32:28  24  	  SUSPEND_DATE,
13:32:28  25  	  GROUP_ID,
13:32:28  26  	  CREATE_DATE,
13:32:28  27  	  CREATED_BY,
13:32:28  28  	  UPDATE_DATE,
13:32:28  29  	  UPDATED_BY,
13:32:28  30  	  SYSTEM_CATEGORY_ID,
13:32:28  31  	  INSTRUMENT_TYPE_ID,
13:32:28  32  	  INSTRUMENT_ID,
13:32:28  33  	  TAX_EXEMPT_ID
13:32:28  34  	) VALUES (
13:32:28  35  	  var_new_account_id,
13:32:28  36  	  in_account_status_id,
13:32:28  37  	  in_suspend_date,
13:32:28  38  	  in_group_id,
13:32:28  39  	  var_date,
13:32:28  40  	  in_created_by,
13:32:28  41  	  var_date,
13:32:28  42  	  in_created_by,
13:32:28  43  	  in_system_category_id,
13:32:28  44  	  in_instrument_type_id,
13:32:28  45  	  in_instrument_id,
13:32:28  46  	  NULL
13:32:28  47  	);
13:32:28  48  
13:32:28  49  	out_account_id := var_new_account_id;
13:32:28  50  END CREATE_ACCOUNT;
13:32:28  51  
13:32:28  52  /*************************************************************/
13:32:28  53  
13:32:28  54  PROCEDURE UPDATE_ACCOUNT (
13:32:28  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
13:32:28  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
13:32:28  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:28  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
13:32:28  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
13:32:28  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:28  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
13:32:28  62  ) AS
13:32:28  63  BEGIN
13:32:28  64  
13:32:28  65  	-- CREATE HISTORY
13:32:28  66  	PROCS_HISTORY_V20.CREATE_ACCOUNT_HISTORY(
13:32:28  67  	  in_account_id 	       => in_account_id,
13:32:28  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28  69  	);
13:32:28  70  
13:32:28  71  	UPDATE ACCOUNT SET
13:32:28  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
13:32:28  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
13:32:28  74  	  UPDATED_BY	     = in_updated_by,
13:32:28  75  	  UPDATE_DATE	     = SYSDATE,
13:32:28  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
13:32:28  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
13:32:28  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
13:32:28  79  	WHERE
13:32:28  80  	  ACCOUNT.ID = in_account_id;
13:32:28  81  
13:32:28  82  END UPDATE_ACCOUNT;
13:32:28  83  
13:32:28  84  /*************************************************************/
13:32:28  85  
13:32:28  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
13:32:28  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
13:32:28  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
13:32:28  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
13:32:28  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
13:32:28  91  ) AS
13:32:28  92  BEGIN
13:32:28  93  
13:32:28  94  	-- CREATE HISTORY
13:32:28  95  	PROCS_HISTORY_V20.CREATE_ACCOUNT_HISTORY(
13:32:28  96  	  in_account_id 	       => in_account_id,
13:32:28  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28  98  	);
13:32:28  99  
13:32:28 100  	UPDATE ACCOUNT SET
13:32:28 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
13:32:28 102  	  INSTRUMENT_ID      = in_instrument_id
13:32:28 103  	WHERE
13:32:28 104  	  ACCOUNT.ID = in_account_id;
13:32:28 105  
13:32:28 106  END;
13:32:28 107  
13:32:28 108  /*************************************************************/
13:32:28 109  
13:32:28 110  PROCEDURE READ_ACCOUNT (
13:32:28 111  	in_account_id  IN ACCOUNT.ID%TYPE,
13:32:28 112  	out_result_set OUT SYS_REFCURSOR
13:32:28 113  ) AS
13:32:28 114  BEGIN
13:32:28 115  	OPEN out_result_set FOR
13:32:28 116  	SELECT
13:32:28 117  	  ACCOUNT_STATUS_ID,
13:32:28 118  	  SUSPEND_DATE,
13:32:28 119  	  GROUP_ID
13:32:28 120  	FROM
13:32:28 121  	  ACCOUNT
13:32:28 122  	WHERE
13:32:28 123  	  ID = in_account_id;
13:32:28 124  END READ_ACCOUNT;
13:32:28 125  
13:32:28 126  /*************************************************************/
13:32:28 127  
13:32:28 128  PROCEDURE CREATE_ACCOUNT_NOTE (
13:32:28 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
13:32:28 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
13:32:28 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
13:32:28 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
13:32:28 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
13:32:28 134  ) AS
13:32:28 135  BEGIN
13:32:28 136  	IF inout_account_note_id IS NULL THEN
13:32:28 137  	  SELECT
13:32:28 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
13:32:28 139  	  FROM DUAL;
13:32:28 140  	END IF;
13:32:28 141  	INSERT INTO ACCOUNT_NOTE(
13:32:28 142  	  ID,
13:32:28 143  	  AGENT_ID,
13:32:28 144  	  ACCOUNT_ID,
13:32:28 145  	  NOTE,
13:32:28 146  	  CREATE_DATE,
13:32:28 147  	  CREATED_BY
13:32:28 148  	) VALUES (
13:32:28 149  	  inout_account_note_id,
13:32:28 150  	  in_agent_id,
13:32:28 151  	  in_account_id,
13:32:28 152  	  in_note,
13:32:28 153  	  SYSDATE,
13:32:28 154  	  in_created_by
13:32:28 155  	);
13:32:28 156  END CREATE_ACCOUNT_NOTE;
13:32:28 157  
13:32:28 158  END PROCS_ACCOUNT_CRU_V20;
13:32:28 159  .
13:32:28 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_ADDRESS(
13:32:28   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
13:32:28   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:28   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:28   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:28   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:28  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:28  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:28  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
13:32:28  13  ) AS
13:32:28  14  -- VARIABLES
13:32:28  15  var_address_id ADDRESS.ID%TYPE;
13:32:28  16  var_date DATE := SYSDATE;
13:32:28  17  BEGIN
13:32:28  18  	IF in_address_id IS NULL THEN
13:32:28  19  	  SELECT
13:32:28  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
13:32:28  21  	  FROM DUAL;
13:32:28  22  	ELSE
13:32:28  23  	  var_address_id := in_address_id;
13:32:28  24  	END IF;
13:32:28  25  	INSERT INTO
13:32:28  26  	  ADDRESS (
13:32:28  27  	    ID,
13:32:28  28  	    ADDRESS1,
13:32:28  29  	    ADDRESS2,
13:32:28  30  	    CITY,
13:32:28  31  	    STATE,
13:32:28  32  	    POSTAL_CODE,
13:32:28  33  	    COUNTRY,
13:32:28  34  	    CREATE_DATE,
13:32:28  35  	    CREATED_BY,
13:32:28  36  	    UPDATE_DATE,
13:32:28  37  	    UPDATED_BY
13:32:28  38  	  ) VALUES (
13:32:28  39  	    var_address_id,
13:32:28  40  	    in_address1,
13:32:28  41  	    in_address2,
13:32:28  42  	    in_city,
13:32:28  43  	    in_state,
13:32:28  44  	    in_postal_code,
13:32:28  45  	    in_country,
13:32:28  46  	    var_date,
13:32:28  47  	    in_created_by,
13:32:28  48  	    var_date,
13:32:28  49  	    in_created_by
13:32:28  50  	  );
13:32:28  51  
13:32:28  52  	out_address_id := var_address_id;
13:32:28  53  END CREATE_ADDRESS;
13:32:28  54  
13:32:28  55  PROCEDURE UPDATE_ADDRESS(
13:32:28  56  	in_address_id	      IN ADDRESS.ID%TYPE,
13:32:28  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:28  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:28  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:28  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:28  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:28  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:28  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
13:32:28  64  ) AS
13:32:28  65  BEGIN
13:32:28  66  
13:32:28  67  	-- Create history
13:32:28  68  	PROCS_HISTORY_V20.CREATE_ADDRESS_HISTORY(
13:32:28  69  	  in_address_id 		=> in_address_id,
13:32:28  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28  71  	);
13:32:28  72  
13:32:28  73  	UPDATE
13:32:28  74  	  ADDRESS
13:32:28  75  	SET
13:32:28  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
13:32:28  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
13:32:28  78  	  CITY = NVL(in_city, CITY),
13:32:28  79  	  STATE = NVL(in_state, STATE),
13:32:28  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
13:32:28  81  	  COUNTRY = NVL(in_country, COUNTRY),
13:32:28  82  	  UPDATE_DATE = SYSDATE,
13:32:28  83  	  UPDATED_BY = in_updated_by
13:32:28  84  	WHERE
13:32:28  85  	  ID = in_address_id;
13:32:28  86  
13:32:28  87  END UPDATE_ADDRESS;
13:32:28  88  
13:32:28  89  END PROCS_ADDRESS_CRU_V20;
13:32:28  90  .
13:32:28 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE ADD_AMAZON_APPSTORE(
13:32:28   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
13:32:28   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:28   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
13:32:28   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
13:32:28   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
13:32:28   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:28  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
13:32:28  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
13:32:28  12  ) AS
13:32:28  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE';
13:32:28  14  var_now	 DATE := SYSDATE;
13:32:28  15  BEGIN
13:32:28  16  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE (
13:32:28  17  	  ID,
13:32:28  18  	  SUBSCRIPTION_ID,
13:32:28  19  	  USER_ID,
13:32:28  20  	  ITEM_TYPE,
13:32:28  21  	  START_DATE,
13:32:28  22  	  END_DATE,
13:32:28  23  	  SKU,
13:32:28  24  	  PURCHASE_TOKEN,
13:32:28  25  	  CREATE_DATE,
13:32:28  26  	  CREATED_BY,
13:32:28  27  	  UPDATE_DATE,
13:32:28  28  	  UPDATED_BY
13:32:28  29  	) VALUES (
13:32:28  30  	  CORE_OWNER.AAS_ID_SEQ.nextval,
13:32:28  31  	  in_subscription_id,
13:32:28  32  	  in_user_id,
13:32:28  33  	  in_item_type,
13:32:28  34  	  in_start_date,
13:32:28  35  	  in_end_date,
13:32:28  36  	  in_sku,
13:32:28  37  	  in_purchase_token,
13:32:28  38  	  var_now,
13:32:28  39  	  in_created_by,
13:32:28  40  	  var_now,
13:32:28  41  	  in_created_by
13:32:28  42  	);
13:32:28  43  END ADD_AMAZON_APPSTORE;
13:32:28  44  
13:32:28  45  	PROCEDURE CREATE_AMAZON_SUB(
13:32:28  46  /*
13:32:28  47  Throws exceptions:
13:32:28  48  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:28  49  */
13:32:28  50  	  out_id	      OUT NUMBER,
13:32:28  51  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
13:32:28  52  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
13:32:28  53  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
13:32:28  54  ) AS
13:32:28  55  -- VARIABLES
13:32:28  56  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
13:32:28  57  var_current_date	DATE;
13:32:28  58  var_count 	NUMBER;
13:32:28  59  AMAZON_SUB_USED	EXCEPTION;
13:32:28  60  BEGIN
13:32:28  61  
13:32:28  62  	SELECT COUNT(1) INTO var_count
13:32:28  63  	FROM SUBSCRIPTION s, AMAZON_SUB am
13:32:28  64  	WHERE
13:32:28  65  	  am.AMAZON_ID = in_amazon_id
13:32:28  66  	  and am.subscription_id = s.id
13:32:28  67  	  and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
13:32:28  68  
13:32:28  69  	if var_count > 0 then
13:32:28  70  	  raise AMAZON_SUB_USED;
13:32:28  71  	end if;
13:32:28  72  
13:32:28  73  	SELECT
13:32:28  74  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
13:32:28  75  	INTO
13:32:28  76  	  out_id
13:32:28  77  	FROM
13:32:28  78  	  dual
13:32:28  79  	;
13:32:28  80  
13:32:28  81  	SELECT
13:32:28  82  	  sysdate
13:32:28  83  	INTO
13:32:28  84  	  var_current_date
13:32:28  85  	FROM
13:32:28  86  	  dual
13:32:28  87  	;
13:32:28  88  
13:32:28  89  	INSERT INTO CORE_OWNER.AMAZON_SUB
13:32:28  90  	(
13:32:28  91  	  id,
13:32:28  92  	  subscription_id,
13:32:28  93  	  amazon_id,
13:32:28  94  	  create_date,
13:32:28  95  	  created_by,
13:32:28  96  	  update_date,
13:32:28  97  	  updated_by
13:32:28  98  	)
13:32:28  99  	VALUES
13:32:28 100  	(
13:32:28 101  	  out_id,
13:32:28 102  	  in_subscription_id,
13:32:28 103  	  in_amazon_id,
13:32:28 104  	  var_current_date,
13:32:28 105  	  in_created_by,
13:32:28 106  	  var_current_date,
13:32:28 107  	  in_created_by
13:32:28 108  	);
13:32:28 109  
13:32:28 110  EXCEPTION
13:32:28 111  WHEN AMAZON_SUB_USED THEN
13:32:28 112  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:28 113  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
13:32:28 114  WHEN DUP_VAL_ON_INDEX THEN
13:32:28 115  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:28 116  	  SPROC_NAME, 'Duplicate value', SQLERRM);
13:32:28 117  WHEN OTHERS THEN
13:32:28 118  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:28 119  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:28 120  END CREATE_AMAZON_SUB;
13:32:28 121  
13:32:28 122  END PROCS_AMAZON_CRU_V20;
13:32:28 123  .
13:32:28 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_CHARGE(
13:32:28   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
13:32:28   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
13:32:28   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:28   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
13:32:28   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
13:32:28  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
13:32:28  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:28  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
13:32:28  13  ) AS
13:32:28  14  -- VARIABLES
13:32:28  15  var_charge_id CHARGE.ID%TYPE;
13:32:28  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:28  17  var_date DATE := SYSDATE;
13:32:28  18  BEGIN
13:32:28  19  	IF in_charge_id IS NULL THEN
13:32:28  20  	  SELECT
13:32:28  21  	    CRG_ID_SEQ.nextVal into var_charge_id
13:32:28  22  	  FROM DUAL;
13:32:28  23  	ELSE
13:32:28  24  	  var_charge_id := in_charge_id;
13:32:28  25  	END IF;
13:32:28  26  	INSERT INTO
13:32:28  27  	  CHARGE (
13:32:28  28  	    ID,
13:32:28  29  	    INVOICE_ID,
13:32:28  30  	    TRANSACTION_ID,
13:32:28  31  	    INSTRUMENT_TYPE_ID,
13:32:28  32  	    INSTRUMENT_ID,
13:32:28  33  	    CHARGE_AMOUNT,
13:32:28  34  	    CHARGE_STATUS_ID,
13:32:28  35  	    CREATE_DATE,
13:32:28  36  	    CREATED_BY,
13:32:28  37  	    UPDATE_DATE,
13:32:28  38  	    UPDATED_BY
13:32:28  39  	  ) VALUES (
13:32:28  40  	    var_charge_id,
13:32:28  41  	    in_invoice_id,
13:32:28  42  	    in_transaction_id,
13:32:28  43  	    in_instrument_type_id,
13:32:28  44  	    in_instrument_id,
13:32:28  45  	    in_charge_amount,
13:32:28  46  	    in_charge_status_id,
13:32:28  47  	    var_date,
13:32:28  48  	    in_created_by,
13:32:28  49  	    var_date,
13:32:28  50  	    in_created_by
13:32:28  51  	  );
13:32:28  52  
13:32:28  53  	out_charge_id := var_charge_id;
13:32:28  54  END CREATE_CHARGE;
13:32:28  55  
13:32:28  56  PROCEDURE UPDATE_CHARGE(
13:32:28  57  	in_charge_id	      IN CHARGE.ID%TYPE,
13:32:28  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:28  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
13:32:28  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
13:32:28  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
13:32:28  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
13:32:28  63  ) AS
13:32:28  64  BEGIN
13:32:28  65  
13:32:28  66  	-- Create history
13:32:28  67  	PROCS_HISTORY_V20.CREATE_CHARGE_HISTORY(
13:32:28  68  	  in_charge_id		       => in_charge_id,
13:32:28  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28  70  	);
13:32:28  71  
13:32:28  72  	UPDATE
13:32:28  73  	  CHARGE
13:32:28  74  	SET
13:32:28  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
13:32:28  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
13:32:28  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
13:32:28  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
13:32:28  79  	  UPDATE_DATE	     = SYSDATE,
13:32:28  80  	  UPDATED_BY	     = in_updated_by
13:32:28  81  	WHERE
13:32:28  82  	  ID = in_charge_id;
13:32:28  83  
13:32:28  84  END UPDATE_CHARGE;
13:32:28  85  
13:32:28  86  END PROCS_CHARGE_CRU_V20;
13:32:28  87  .
13:32:28 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:28 SQL> 
13:32:28 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V20" AS
13:32:28   2  
13:32:28   3  PROCEDURE CREATE_CREDIT_CARD(
13:32:28   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
13:32:28   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
13:32:28   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
13:32:28   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
13:32:28   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
13:32:28   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
13:32:28  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
13:32:28  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
13:32:28  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
13:32:28  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
13:32:28  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
13:32:28  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:28  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
13:32:28  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
13:32:28  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
13:32:28  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
13:32:28  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
13:32:28  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
13:32:28  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
13:32:28  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
13:32:28  24  ) AS
13:32:28  25  -- VARIABLES
13:32:28  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
13:32:28  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:28  28  var_date DATE := SYSDATE;
13:32:28  29  BEGIN
13:32:28  30  	IF in_credit_card_id IS NULL THEN
13:32:28  31  	  SELECT
13:32:28  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
13:32:28  33  	  FROM DUAL;
13:32:28  34  	ELSE
13:32:28  35  	  var_credit_card_id := in_credit_card_id;
13:32:28  36  	END IF;
13:32:28  37  	INSERT INTO CREDIT_CARD(
13:32:28  38  	    ID,
13:32:28  39  	    ACCOUNT_ID,
13:32:28  40  	    INSTRUMENT_NAME,
13:32:28  41  	    PRIVATE_CARD_HOLDER_NAME,
13:32:28  42  	    PRIVATE_STREET_ADDRESS,
13:32:28  43  	    PRIVATE_STREET_ADDRESS2,
13:32:28  44  	    STATE,
13:32:28  45  	    CITY,
13:32:28  46  	    POSTAL_CODE,
13:32:28  47  	    COUNTRY,
13:32:28  48  	    LAST_FOUR_CC,
13:32:28  49  	    EXPIRATION_DATE,
13:32:28  50  	    CREDIT_CARD_TYPE_ID,
13:32:28  51  	    SECRET_TOKEN,
13:32:28  52  	    CHASE_PROFILE_ID,
13:32:28  53  	    CREATE_DATE,
13:32:28  54  	    CREATED_BY,
13:32:28  55  	    UPDATE_DATE,
13:32:28  56  	    UPDATED_BY,
13:32:28  57  	    CREDIT_CARD_STATUS_ID,
13:32:28  58  	    PRIVATE_FIRST_NAME,
13:32:28  59  	    PRIVATE_LAST_NAME
13:32:28  60  	  ) VALUES (
13:32:28  61  	    var_credit_card_id,
13:32:28  62  	    in_account_id,
13:32:28  63  	    in_instrument_name,
13:32:28  64  	    in_private_card_holder_name,
13:32:28  65  	    in_private_street_address,
13:32:28  66  	    in_private_street_address2,
13:32:28  67  	    in_state,
13:32:28  68  	    in_city,
13:32:28  69  	    in_postal_code,
13:32:28  70  	    in_country,
13:32:28  71  	    in_last_four_cc,
13:32:28  72  	    in_expiration_date,
13:32:28  73  	    in_credit_card_type_id,
13:32:28  74  	    in_secret_token,
13:32:28  75  	    in_chase_profile_id,
13:32:28  76  	    var_date,
13:32:28  77  	    in_created_by,
13:32:28  78  	    var_date,
13:32:28  79  	    in_created_by,
13:32:28  80  	    in_credit_card_status_id,
13:32:28  81  	    in_private_first_name,
13:32:28  82  	    in_private_last_name
13:32:28  83  	  );
13:32:28  84  
13:32:28  85  	out_credit_card_id := var_credit_card_id;
13:32:28  86  END CREATE_CREDIT_CARD;
13:32:28  87  
13:32:28  88  /******************************************************************************/
13:32:28  89  
13:32:28  90  PROCEDURE UPDATE_CREDIT_CARD(
13:32:28  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
13:32:28  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:28  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
13:32:28  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:28  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
13:32:28  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
13:32:28  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
13:32:28  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:28  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
13:32:28 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
13:32:28 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:28 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
13:32:28 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
13:32:28 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
13:32:28 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
13:32:28 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
13:32:28 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
13:32:28 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
13:32:28 109  ) AS
13:32:28 110  BEGIN
13:32:28 111  
13:32:28 112  	-- Create history
13:32:28 113  	PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
13:32:28 114  	  in_credit_card_id	       => in_credit_card_id,
13:32:28 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28 116  	);
13:32:28 117  
13:32:28 118  	UPDATE CREDIT_CARD SET
13:32:28 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
13:32:28 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
13:32:28 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
13:32:28 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
13:32:28 123  	  STATE 		   = NVL(in_state, STATE),
13:32:28 124  	  CITY			   = NVL(in_city, CITY),
13:32:28 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
13:32:28 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
13:32:28 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
13:32:28 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
13:32:28 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
13:32:28 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
13:32:28 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
13:32:28 132  	  UPDATE_DATE		   = SYSDATE,
13:32:28 133  	  UPDATED_BY		   = in_updated_by,
13:32:28 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
13:32:28 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
13:32:28 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
13:32:28 137  	WHERE
13:32:28 138  	  ID = in_credit_card_id;
13:32:28 139  
13:32:28 140  END UPDATE_CREDIT_CARD;
13:32:28 141  
13:32:28 142  /******************************************************************************/
13:32:28 143  
13:32:28 144  PROCEDURE CREATE_PAYPAL(
13:32:28 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
13:32:28 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
13:32:28 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
13:32:28 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:28 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
13:32:28 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
13:32:28 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
13:32:28 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
13:32:28 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
13:32:28 154  	in_state			IN PAYPAL.STATE%TYPE,
13:32:28 155  	in_city 			IN PAYPAL.CITY%TYPE,
13:32:28 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
13:32:28 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
13:32:28 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
13:32:28 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
13:32:28 160  ) AS
13:32:28 161  -- VARIABLES
13:32:28 162  var_paypal_id PAYPAL.ID%TYPE;
13:32:28 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:28 164  var_date DATE := SYSDATE;
13:32:28 165  BEGIN
13:32:28 166  	IF in_paypal_id IS NULL THEN
13:32:28 167  	  SELECT
13:32:28 168  	    PP_ID_SEQ.nextVal into var_paypal_id
13:32:28 169  	  FROM DUAL;
13:32:28 170  	ELSE
13:32:28 171  	  var_paypal_id := in_paypal_id;
13:32:28 172  	END IF;
13:32:28 173  	INSERT INTO PAYPAL(
13:32:28 174  	    ID,
13:32:28 175  	    ACCOUNT_ID,
13:32:28 176  	    INSTRUMENT_NAME,
13:32:28 177  	    PRIVATE_EMAIL_ADDRESS,
13:32:28 178  	    CREATE_DATE,
13:32:28 179  	    CREATED_BY,
13:32:28 180  	    UPDATE_DATE,
13:32:28 181  	    UPDATED_BY,
13:32:28 182  	    PAYPAL_STATUS_ID,
13:32:28 183  	    PRIVATE_STREET_ADDRESS,
13:32:28 184  	    PRIVATE_STREET_ADDRESS2,
13:32:28 185  	    STATE,
13:32:28 186  	    CITY,
13:32:28 187  	    POSTAL_CODE,
13:32:28 188  	    COUNTRY,
13:32:28 189  	    EXPIRATION_DATE,
13:32:28 190  	    SECRET_TOKEN
13:32:28 191  	  ) VALUES (
13:32:28 192  	    var_paypal_id,
13:32:28 193  	    in_account_id,
13:32:28 194  	    in_instrument_name,
13:32:28 195  	    in_private_email_address,
13:32:28 196  	    var_date,
13:32:28 197  	    in_created_by,
13:32:28 198  	    var_date,
13:32:28 199  	    in_created_by,
13:32:28 200  	    in_paypal_status_id,
13:32:28 201  	    in_paypal_prvt_street_address,
13:32:28 202  	    in_paypal_prvt_street_address2,
13:32:28 203  	    in_state,
13:32:28 204  	    in_city,
13:32:28 205  	    in_postal_code,
13:32:28 206  	    in_country,
13:32:28 207  	    in_expiration_date,
13:32:28 208  	    in_secret_token
13:32:28 209  	  );
13:32:28 210  	out_paypal_id := var_paypal_id;
13:32:28 211  END CREATE_PAYPAL;
13:32:28 212  
13:32:28 213  /******************************************************************************/
13:32:28 214  
13:32:28 215  PROCEDURE UPDATE_PAYPAL(
13:32:28 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
13:32:28 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
13:32:28 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
13:32:28 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
13:32:28 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
13:32:28 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:28 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
13:32:28 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
13:32:28 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
13:32:28 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:28 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
13:32:28 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:28 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
13:32:28 229  ) AS
13:32:28 230  BEGIN
13:32:28 231  	-- Create history
13:32:28 232  	PROCS_HISTORY_V20.CREATE_PAYPAL_HISTORY(
13:32:28 233  	  in_paypal_id		       => in_paypal_id,
13:32:28 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28 235  	);
13:32:28 236  
13:32:28 237  	UPDATE PAYPAL SET
13:32:28 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
13:32:28 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
13:32:28 240  	  UPDATE_DATE	   = SYSDATE,
13:32:28 241  	  UPDATED_BY	   = in_updated_by,
13:32:28 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
13:32:28 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
13:32:28 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
13:32:28 245  	  STATE 		  = NVL(in_state, STATE),
13:32:28 246  	  CITY			  = NVL(in_city, CITY),
13:32:28 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
13:32:28 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
13:32:28 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
13:32:28 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
13:32:28 251  	WHERE
13:32:28 252  	  ID = in_paypal_id;
13:32:28 253  END UPDATE_PAYPAL;
13:32:28 254  
13:32:28 255  /******************************************************************************/
13:32:28 256  
13:32:28 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
13:32:28 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
13:32:28 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
13:32:28 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
13:32:28 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:28 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
13:32:28 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:28 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
13:32:28 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
13:32:28 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
13:32:28 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
13:32:28 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
13:32:28 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
13:32:28 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
13:32:28 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
13:32:28 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
13:32:28 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
13:32:28 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
13:32:28 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
13:32:28 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
13:32:28 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:28 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
13:32:28 279  ) AS
13:32:28 280  -- VARIABLES
13:32:28 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
13:32:28 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:28 283  var_date DATE := SYSDATE;
13:32:28 284  BEGIN
13:32:28 285  	IF in_gift_certificate_id IS NULL THEN
13:32:28 286  	  SELECT
13:32:28 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
13:32:28 288  	  FROM DUAL;
13:32:28 289  	ELSE
13:32:28 290  	  var_gift_certificate_id := in_gift_certificate_id;
13:32:28 291  	END IF;
13:32:28 292  	INSERT INTO GIFT_CERTIFICATE (
13:32:28 293  	    ID,
13:32:28 294  	    PURCHASER_GROUP_ID,
13:32:28 295  	    PURCHASE_INVOICE_ID,
13:32:28 296  	    OFFER_CHAIN_ID,
13:32:28 297  	    EXPIRATION_DATE,
13:32:28 298  	    PURCHASE_DATE,
13:32:28 299  	    GIFT_CERTIFICATE_STATUS_ID,
13:32:28 300  	    CODE,
13:32:28 301  	    CREATE_DATE,
13:32:28 302  	    CREATED_BY,
13:32:28 303  	    UPDATE_DATE,
13:32:28 304  	    UPDATED_BY,
13:32:28 305  	    RECIPIENT_NAME,
13:32:28 306  	    GIFT_MESSAGE,
13:32:28 307  	    RECIPIENT_EMAIL,
13:32:28 308  	    FINALIZED_INVOICE_ID,
13:32:28 309  	    SENDER_EMAIL,
13:32:28 310  	    SENDER_NAME,
13:32:28 311  	    REDEMPTION_DATE,
13:32:28 312  	    CANCELATION_DATE,
13:32:28 313  	    REDEEMER_GROUP_ID,
13:32:28 314  	    RECIPIENT_ADDRESS_ID,
13:32:28 315  	    RECIPIENT_NOTIFY_DATE
13:32:28 316  	  ) VALUES(
13:32:28 317  	    var_gift_certificate_id,
13:32:28 318  	    in_purchaser_group_id,
13:32:28 319  	    in_purchaser_invoice_id,
13:32:28 320  	    in_offer_chain_id,
13:32:28 321  	    in_expiration_date,
13:32:28 322  	    in_purchase_date,
13:32:28 323  	    in_gift_certificate_status_id,
13:32:28 324  	    in_code,
13:32:28 325  	    var_date,
13:32:28 326  	    in_created_by,
13:32:28 327  	    var_date,
13:32:28 328  	    in_created_by,
13:32:28 329  	    in_recipient_name,
13:32:28 330  	    in_gift_message,
13:32:28 331  	    in_recipient_email,
13:32:28 332  	    in_finalized_invoice_id,
13:32:28 333  	    in_sender_email,
13:32:28 334  	    in_sender_name,
13:32:28 335  	    in_redemption_date,
13:32:28 336  	    in_cancelation_date,
13:32:28 337  	    in_redeemer_group_id,
13:32:28 338  	    in_recipient_address_id,
13:32:28 339  	    in_recipient_notify_date
13:32:28 340  	  );
13:32:28 341  
13:32:28 342  	out_gift_certificate_id := var_gift_certificate_id;
13:32:28 343  END CREATE_GIFT_CERTIFICATE;
13:32:28 344  
13:32:28 345  /******************************************************************************/
13:32:28 346  
13:32:28 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
13:32:28 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
13:32:28 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
13:32:28 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
13:32:28 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
13:32:28 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
13:32:28 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
13:32:28 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
13:32:28 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
13:32:28 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
13:32:28 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
13:32:28 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
13:32:28 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
13:32:28 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
13:32:28 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
13:32:28 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:28 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
13:32:28 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
13:32:28 365  ) AS
13:32:28 366  BEGIN
13:32:28 367  
13:32:28 368  	-- Create history
13:32:28 369  	PROCS_HISTORY_V20.CREATE_GIFT_CERT_HISTORY(
13:32:28 370  	  in_gift_certificate_id       => in_gift_certificate_id,
13:32:28 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:28 372  	);
13:32:28 373  
13:32:28 374  	UPDATE GIFT_CERTIFICATE SET
13:32:28 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
13:32:28 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
13:32:28 377  	  CODE			     = NVL(in_code, CODE),
13:32:28 378  	  UPDATE_DATE		     = SYSDATE,
13:32:28 379  	  UPDATED_BY		     = in_updated_by,
13:32:28 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
13:32:28 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
13:32:28 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
13:32:28 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
13:32:28 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
13:32:28 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
13:32:28 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
13:32:28 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
13:32:28 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
13:32:28 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
13:32:28 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
13:32:28 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
13:32:28 392  	WHERE
13:32:28 393  	  ID = in_gift_certificate_id;
13:32:28 394  
13:32:28 395  END UPDATE_GIFT_CERTIFICATE;
13:32:28 396  
13:32:28 397  END PROCS_FIN_INSTRUMENTS_CRU_V20;
13:32:28 398  .
13:32:28 SQL> /

Package body created.

Elapsed: 00:00:00.04
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
13:32:29   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:29   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
13:32:29   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
13:32:29   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
13:32:29   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
13:32:29   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
13:32:29  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
13:32:29  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:29  12  ) AS
13:32:29  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
13:32:29  14  BEGIN
13:32:29  15  	UPDATE SUBSCRIPTION_SHARE SET
13:32:29  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
13:32:29  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
13:32:29  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
13:32:29  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
13:32:29  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
13:32:29  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
13:32:29  22  	  UPDATED_BY	       = in_updated_by,
13:32:29  23  	  UPDATE_DATE	       = SYSDATE
13:32:29  24  	WHERE
13:32:29  25  	  SUBSCRIPTION_SHARE.ID = in_id;
13:32:29  26  EXCEPTION
13:32:29  27  	WHEN OTHERS THEN
13:32:29  28  	  Procs_Common_V20.Throw_Exception(APP_EXCEPTION_CODES_V20.Internal_Error,
13:32:29  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
13:32:29  30  END UPDATE_SUBSCRIPTION_SHARE;
13:32:29  31  
13:32:29  32  PROCEDURE CREATE_GROUP_ACCOUNT (
13:32:29  33  	in_subscription_id	 IN NUMBER,
13:32:29  34  	in_group_name		 IN VARCHAR2,
13:32:29  35  	in_first_name		 IN VARCHAR2,
13:32:29  36  	in_last_name		 IN VARCHAR2,
13:32:29  37  	in_email		 IN VARCHAR2,
13:32:29  38  	in_phone		 IN VARCHAR2,
13:32:29  39  	in_organization_type	 IN VARCHAR2,
13:32:29  40  	in_seats		 IN NUMBER,
13:32:29  41  	in_seat_ttl_in_hours	 IN NUMBER,
13:32:29  42  	in_ip			 IN NUMBER,
13:32:29  43  	in_created_by		 IN VARCHAR2
13:32:29  44  ) AS
13:32:29  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
13:32:29  46  var_now DATE;
13:32:29  47  BEGIN
13:32:29  48  
13:32:29  49  	SELECT
13:32:29  50  	  SYSDATE INTO var_now
13:32:29  51  	FROM dual;
13:32:29  52  
13:32:29  53  	INSERT INTO GROUP_ACCOUNT (
13:32:29  54  	  id,
13:32:29  55  	  subscription_id,
13:32:29  56  	  group_name,
13:32:29  57  	  first_name,
13:32:29  58  	  last_name,
13:32:29  59  	  email,
13:32:29  60  	  phone,
13:32:29  61  	  organization_type,
13:32:29  62  	  seats,
13:32:29  63  	  seat_ttl_in_hours,
13:32:29  64  	  ip,
13:32:29  65  	  create_date,
13:32:29  66  	  created_by,
13:32:29  67  	  update_date,
13:32:29  68  	  updated_by
13:32:29  69  	) VALUES (
13:32:29  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
13:32:29  71  	  in_subscription_id,
13:32:29  72  	  in_group_name,
13:32:29  73  	  in_first_name,
13:32:29  74  	  in_last_name,
13:32:29  75  	  in_email,
13:32:29  76  	  in_phone,
13:32:29  77  	  in_organization_type,
13:32:29  78  	  in_seats,
13:32:29  79  	  in_seat_ttl_in_hours,
13:32:29  80  	  in_ip,
13:32:29  81  	  var_now,
13:32:29  82  	  in_created_by,
13:32:29  83  	  var_now,
13:32:29  84  	  in_created_by
13:32:29  85  	);
13:32:29  86  
13:32:29  87  EXCEPTION
13:32:29  88  	WHEN PROGRAM_ERROR THEN
13:32:29  89  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
13:32:29  91  	WHEN OTHERS THEN
13:32:29  92  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
13:32:29  94  END CREATE_GROUP_ACCOUNT;
13:32:29  95  
13:32:29  96  
13:32:29  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
13:32:29  98  	in_group_account_id    IN NUMBER,
13:32:29  99  	in_borrower_account_id IN NUMBER,
13:32:29 100  	in_ip_address	       IN VARCHAR2,
13:32:29 101  	in_email_domain        IN VARCHAR2,
13:32:29 102  	in_start_date	       IN DATE,
13:32:29 103  	in_end_date	       IN DATE,
13:32:29 104  	in_created_by	       IN VARCHAR2
13:32:29 105  ) AS
13:32:29 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
13:32:29 107  var_now DATE;
13:32:29 108  BEGIN
13:32:29 109  
13:32:29 110  	SELECT
13:32:29 111  	  SYSDATE INTO var_now
13:32:29 112  	FROM dual;
13:32:29 113  
13:32:29 114  	INSERT INTO SUBSCRIPTION_SHARE (
13:32:29 115  	  id,
13:32:29 116  	  group_account_id,
13:32:29 117  	  borrower_account_id,
13:32:29 118  	  ip_address,
13:32:29 119  	  email_domain,
13:32:29 120  	  start_date,
13:32:29 121  	  end_date,
13:32:29 122  	  create_date,
13:32:29 123  	  created_by,
13:32:29 124  	  update_date,
13:32:29 125  	  updated_by
13:32:29 126  	) VALUES (
13:32:29 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
13:32:29 128  	  in_group_account_id,
13:32:29 129  	  in_borrower_account_id,
13:32:29 130  	  in_ip_address,
13:32:29 131  	  in_email_domain,
13:32:29 132  	  in_start_date,
13:32:29 133  	  in_end_date,
13:32:29 134  	  var_now,
13:32:29 135  	  in_created_by,
13:32:29 136  	  var_now,
13:32:29 137  	  in_created_by
13:32:29 138  	);
13:32:29 139  
13:32:29 140  EXCEPTION
13:32:29 141  	WHEN PROGRAM_ERROR THEN
13:32:29 142  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
13:32:29 144  END CREATE_SUBSCRIPTION_SHARE;
13:32:29 145  
13:32:29 146  -- Eh, I don't like the cru packages at all
13:32:29 147  -- the idea of code reuse in PL/SQL is still lost on me
13:32:29 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
13:32:29 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:29 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:29 151  ) AS
13:32:29 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
13:32:29 153  BEGIN
13:32:29 154  	update
13:32:29 155  	  GROUP_ACCOUNT_IP_RANGE IR
13:32:29 156  	set
13:32:29 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_INACTIVE,
13:32:29 158  	  IR.UPDATED_BY = in_updated_by,
13:32:29 159  	  IR.UPDATE_DATE = sysdate
13:32:29 160  	where
13:32:29 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
13:32:29 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
13:32:29 163  	;
13:32:29 164  EXCEPTION
13:32:29 165  WHEN OTHERS THEN
13:32:29 166  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 168  END DISABLE_IP_RANGES_BY_GA_ID;
13:32:29 169  
13:32:29 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
13:32:29 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
13:32:29 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:29 173  ) AS
13:32:29 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
13:32:29 175  BEGIN
13:32:29 176  	update
13:32:29 177  	  GROUP_ACCOUNT_IP_RANGE IR
13:32:29 178  	set
13:32:29 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_INACTIVE,
13:32:29 180  	  IR.UPDATED_BY = in_updated_by,
13:32:29 181  	  IR.UPDATE_DATE = sysdate
13:32:29 182  	where
13:32:29 183  	  IR.ID = in_id and
13:32:29 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
13:32:29 185  	;
13:32:29 186  raise no_data_found;
13:32:29 187  EXCEPTION
13:32:29 188  WHEN OTHERS THEN
13:32:29 189  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
13:32:29 191  END DISABLE_IP_RANGE_BY_ID;
13:32:29 192  
13:32:29 193  PROCEDURE ADD_IP_RANGE (
13:32:29 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:29 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
13:32:29 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:29 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:29 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
13:32:29 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
13:32:29 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
13:32:29 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
13:32:29 202  ) AS
13:32:29 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
13:32:29 204  BEGIN
13:32:29 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
13:32:29 206  	    ID,
13:32:29 207  	    GROUP_ACCOUNT_ID,
13:32:29 208  	    MINIMUM_IP_STRING,
13:32:29 209  	    MINIMUM_IP_LOW,
13:32:29 210  	    MINIMUM_IP_HIGH,
13:32:29 211  	    MAXIMUM_IP_STRING,
13:32:29 212  	    MAXIMUM_IP_LOW,
13:32:29 213  	    MAXIMUM_IP_HIGH,
13:32:29 214  	    CREATED_BY,
13:32:29 215  	    CREATE_DATE,
13:32:29 216  	    UPDATED_BY,
13:32:29 217  	    UPDATE_DATE,
13:32:29 218  	    GROUP_ACC_IP_RNG_STATUS_ID
13:32:29 219  	  )
13:32:29 220  	  VALUES (
13:32:29 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
13:32:29 222  	    in_group_account_id,
13:32:29 223  	    in_minimum_ip_string,
13:32:29 224  	    in_minimum_ip_low,
13:32:29 225  	    in_minimum_ip_high,
13:32:29 226  	    in_maximum_ip_string,
13:32:29 227  	    in_maximum_ip_low,
13:32:29 228  	    in_maximum_ip_high,
13:32:29 229  	    in_created_by,
13:32:29 230  	    sysdate,
13:32:29 231  	    in_created_by,
13:32:29 232  	    sysdate,
13:32:29 233  	    GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
13:32:29 234  	  );
13:32:29 235  EXCEPTION
13:32:29 236  WHEN OTHERS THEN
13:32:29 237  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 239  END ADD_IP_RANGE;
13:32:29 240  
13:32:29 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
13:32:29 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:29 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:29 244  ) AS
13:32:29 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
13:32:29 246  BEGIN
13:32:29 247  	update
13:32:29 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
13:32:29 249  	set
13:32:29 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT,
13:32:29 251  	  ED.UPDATED_BY = in_updated_by,
13:32:29 252  	  ED.UPDATE_DATE = sysdate
13:32:29 253  	where
13:32:29 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
13:32:29 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT
13:32:29 256  	;
13:32:29 257  EXCEPTION
13:32:29 258  WHEN OTHERS THEN
13:32:29 259  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
13:32:29 262  
13:32:29 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
13:32:29 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:29 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:29 266  ) AS
13:32:29 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
13:32:29 268  BEGIN
13:32:29 269  	update
13:32:29 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
13:32:29 271  	set
13:32:29 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT,
13:32:29 273  	  ED.UPDATED_BY = in_updated_by,
13:32:29 274  	  ED.UPDATE_DATE = sysdate
13:32:29 275  	where
13:32:29 276  	  ED.ID = in_id and
13:32:29 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT
13:32:29 278  	;
13:32:29 279  EXCEPTION
13:32:29 280  WHEN OTHERS THEN
13:32:29 281  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
13:32:29 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
13:32:29 284  
13:32:29 285  
13:32:29 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
13:32:29 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:29 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:29 289  ) AS
13:32:29 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
13:32:29 291  BEGIN
13:32:29 292  	update
13:32:29 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
13:32:29 294  	set
13:32:29 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT,
13:32:29 296  	  ED.UPDATED_BY = in_updated_by,
13:32:29 297  	  ED.UPDATE_DATE = sysdate
13:32:29 298  	where
13:32:29 299  	  ED.ID = in_id and
13:32:29 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT
13:32:29 301  	;
13:32:29 302  EXCEPTION
13:32:29 303  WHEN OTHERS THEN
13:32:29 304  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
13:32:29 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
13:32:29 307  
13:32:29 308  
13:32:29 309  PROCEDURE ADD_EMAIL_DOMAIN (
13:32:29 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:29 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:29 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
13:32:29 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
13:32:29 314  ) AS
13:32:29 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
13:32:29 316  BEGIN
13:32:29 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
13:32:29 318  	    ID,
13:32:29 319  	    GROUP_ACCOUNT_ID,
13:32:29 320  	    EMAIL_DOMAIN,
13:32:29 321  		IS_ACTIVE,
13:32:29 322  	    CREATED_BY,
13:32:29 323  	    CREATE_DATE,
13:32:29 324  	    UPDATED_BY,
13:32:29 325  	    UPDATE_DATE
13:32:29 326  	  )
13:32:29 327  	  VALUES (
13:32:29 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
13:32:29 329  	    in_group_account_id,
13:32:29 330  		in_email_domain,
13:32:29 331  		in_is_active,
13:32:29 332  		in_created_by,
13:32:29 333  	    sysdate,
13:32:29 334  	    in_created_by,
13:32:29 335  	    sysdate
13:32:29 336  	  );
13:32:29 337  EXCEPTION
13:32:29 338  WHEN DUP_VAL_ON_INDEX THEN
13:32:29 339  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
13:32:29 341  WHEN OTHERS THEN
13:32:29 342  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
13:32:29 344  END ADD_EMAIL_DOMAIN;
13:32:29 345  
13:32:29 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
13:32:29 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:29 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
13:32:29 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
13:32:29 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
13:32:29 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
13:32:29 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
13:32:29 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:29 354  ) AS
13:32:29 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
13:32:29 356  BEGIN
13:32:29 357  	update
13:32:29 358  	  group_account
13:32:29 359  	set
13:32:29 360  	  group_name = nvl(in_group_name, group_name),
13:32:29 361  	  first_name = nvl(in_first_name, first_name),
13:32:29 362  	  last_name = nvl(in_last_name, last_name),
13:32:29 363  	  email = nvl(in_email, email),
13:32:29 364  	  phone = nvl(in_phone, phone),
13:32:29 365  	  updated_by = in_updated_by,
13:32:29 366  	  update_date = sysdate
13:32:29 367  	where
13:32:29 368  	  id = in_group_account_id;
13:32:29 369  
13:32:29 370  	if(sql%rowcount = 0) then
13:32:29 371  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
13:32:29 373  	end if;
13:32:29 374  EXCEPTION
13:32:29 375  	WHEN OTHERS THEN
13:32:29 376  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
13:32:29 378  END UPDATE_GROUP_ACCOUNT;
13:32:29 379  
13:32:29 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
13:32:29 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
13:32:29 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
13:32:29 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:29 384  ) AS
13:32:29 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
13:32:29 386  var_subscription_id NUMBER;
13:32:29 387  var_seats NUMBER;
13:32:29 388  BEGIN
13:32:29 389  	select subscription_id, seats into var_subscription_id, var_seats
13:32:29 390  	from group_account
13:32:29 391  	where id = in_group_account_id;
13:32:29 392  
13:32:29 393  	update
13:32:29 394  	  group_account
13:32:29 395  	set
13:32:29 396  	  seats = in_seats,
13:32:29 397  	  updated_by = in_updated_by,
13:32:29 398  	  update_date = sysdate
13:32:29 399  	where
13:32:29 400  	  id = in_group_account_id;
13:32:29 401  
13:32:29 402  	if(sql%rowcount = 0) then
13:32:29 403  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
13:32:29 405  	end if;
13:32:29 406  
13:32:29 407  	PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:29 408  	  in_subscription_id => var_subscription_id,
13:32:29 409  	  in_agent_id	     => 0,
13:32:29 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
13:32:29 411  	  in_created_by      => in_updated_by
13:32:29 412  	);
13:32:29 413  EXCEPTION
13:32:29 414  	WHEN NO_DATA_FOUND THEN
13:32:29 415  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
13:32:29 417  	WHEN OTHERS THEN
13:32:29 418  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
13:32:29 420  END UPDATE_GROUP_ACCOUNT_SEATS;
13:32:29 421  
13:32:29 422  END PROCS_GROUP_ACCOUNT_CRU_V20;
13:32:29 423  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.05
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_INVOICE (
13:32:29   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
13:32:29   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
13:32:29   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
13:32:29   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
13:32:29   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
13:32:29   9  ) AS
13:32:29  10  -- VARIABLES
13:32:29  11  var_invoice_id INVOICE.ID%TYPE;
13:32:29  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29  13  var_date DATE := SYSDATE;
13:32:29  14  BEGIN
13:32:29  15  	IF in_invoice_id IS NULL THEN
13:32:29  16  	  SELECT
13:32:29  17  	    INV_ID_SEQ.nextVal into var_invoice_id
13:32:29  18  	  FROM DUAL;
13:32:29  19  	ELSE
13:32:29  20  	  var_invoice_id := in_invoice_id;
13:32:29  21  	END IF;
13:32:29  22  	INSERT INTO
13:32:29  23  	  INVOICE (
13:32:29  24  	    ID,
13:32:29  25  	    INVOICE_STATUS_ID,
13:32:29  26  	    CREATE_DATE,
13:32:29  27  	    CREATED_BY,
13:32:29  28  	    UPDATE_DATE,
13:32:29  29  	    UPDATED_BY,
13:32:29  30  	    TAX_EXEMPT_ID,
13:32:29  31  	    IS_TAX_CALCULATION_NEEDED
13:32:29  32  	  ) VALUES (
13:32:29  33  	    var_invoice_id,
13:32:29  34  	    in_invoice_status_id,
13:32:29  35  	    var_date,
13:32:29  36  	    in_created_by,
13:32:29  37  	    var_date,
13:32:29  38  	    in_created_by,
13:32:29  39  	    in_tax_exempt_id,
13:32:29  40  	    0 -- DEFAULT VALUE
13:32:29  41  	  );
13:32:29  42  
13:32:29  43  	out_invoice_id := var_invoice_id;
13:32:29  44  END;
13:32:29  45  
13:32:29  46  /*****************************************************************/
13:32:29  47  
13:32:29  48  PROCEDURE UPDATE_INVOICE (
13:32:29  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
13:32:29  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
13:32:29  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
13:32:29  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
13:32:29  53  ) AS
13:32:29  54  BEGIN
13:32:29  55  	-- Create history
13:32:29  56  	PROCS_HISTORY_V20.CREATE_INVOICE_HISTORY(
13:32:29  57  	  in_invoice_id 	       => in_invoice_id,
13:32:29  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29  59  	);
13:32:29  60  
13:32:29  61  	UPDATE
13:32:29  62  	  INVOICE
13:32:29  63  	SET
13:32:29  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
13:32:29  65  	  UPDATE_DATE		    = SYSDATE,
13:32:29  66  	  UPDATED_BY		    = in_updated_by,
13:32:29  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
13:32:29  68  	WHERE
13:32:29  69  	  ID = in_invoice_id;
13:32:29  70  END;
13:32:29  71  
13:32:29  72  END PROCS_INVOICE_CRU_V20;
13:32:29  73  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_RECEIPT(
13:32:29   4  /*
13:32:29   5  Throws exceptions:
13:32:29   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29   7  */
13:32:29   8  	  out_id	      OUT NUMBER,
13:32:29   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:29  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:29  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
13:32:29  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:29  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:29  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:29  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:29  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:29  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:29  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:29  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:29  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
13:32:29  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
13:32:29  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:29  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
13:32:29  24  ) AS
13:32:29  25  -- VARIABLES
13:32:29  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
13:32:29  27  var_current_date	    DATE;
13:32:29  28  var_count 	    NUMBER;
13:32:29  29  ITUNES_ORG_TNX_USED   EXCEPTION;
13:32:29  30  BEGIN
13:32:29  31  	SELECT COUNT(1) into var_count
13:32:29  32  	FROM
13:32:29  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
13:32:29  34  	WHERE
13:32:29  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
13:32:29  36  	  IR.SUBSCRIPTION_ID = S.ID AND
13:32:29  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
13:32:29  38  
13:32:29  39  	if var_count > 0 then
13:32:29  40  	  raise ITUNES_ORG_TNX_USED;
13:32:29  41  	end if;
13:32:29  42  
13:32:29  43  	SELECT
13:32:29  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
13:32:29  45  	INTO
13:32:29  46  	  out_id
13:32:29  47  	FROM
13:32:29  48  	  dual
13:32:29  49  	;
13:32:29  50  
13:32:29  51  	SELECT
13:32:29  52  	  sysdate
13:32:29  53  	INTO
13:32:29  54  	  var_current_date
13:32:29  55  	FROM
13:32:29  56  	  dual
13:32:29  57  	;
13:32:29  58  
13:32:29  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
13:32:29  60  	(
13:32:29  61  	  id,
13:32:29  62  	  subscription_id,
13:32:29  63  	  receipt,
13:32:29  64  	  status,
13:32:29  65  	  quantity,
13:32:29  66  	  product_id,
13:32:29  67  	  transaction_id,
13:32:29  68  	  purchase_date,
13:32:29  69  	  original_transaction_id,
13:32:29  70  	  original_purchase_date,
13:32:29  71  	  app_item_id,
13:32:29  72  	  version_external_id,
13:32:29  73  	  bid,
13:32:29  74  	  bvrs,
13:32:29  75  	  expires_date,
13:32:29  76  	  create_date,
13:32:29  77  	  created_by,
13:32:29  78  	  update_date,
13:32:29  79  	  updated_by,
13:32:29  80  	  last_check_date
13:32:29  81  	)
13:32:29  82  	VALUES
13:32:29  83  	(
13:32:29  84  	  out_id,
13:32:29  85  	  in_subscription_id,
13:32:29  86  	  in_receipt,
13:32:29  87  	  in_status,
13:32:29  88  	  in_quantity,
13:32:29  89  	  in_product_id,
13:32:29  90  	  in_transaction_id,
13:32:29  91  	  in_purchase_date,
13:32:29  92  	  in_original_transaction_id,
13:32:29  93  	  in_original_purchase_date,
13:32:29  94  	  in_app_item_id,
13:32:29  95  	  in_version_external_id,
13:32:29  96  	  in_bid,
13:32:29  97  	  in_bvrs,
13:32:29  98  	  in_expires_date,
13:32:29  99  	  var_current_date,
13:32:29 100  	  in_created_by,
13:32:29 101  	  var_current_date,
13:32:29 102  	  in_created_by,
13:32:29 103  	  var_current_date
13:32:29 104  	);
13:32:29 105  
13:32:29 106  EXCEPTION
13:32:29 107  WHEN ITUNES_ORG_TNX_USED THEN
13:32:29 108  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:29 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
13:32:29 110  WHEN DUP_VAL_ON_INDEX THEN
13:32:29 111  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:29 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
13:32:29 113  WHEN OTHERS THEN
13:32:29 114  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 116  END CREATE_RECEIPT;
13:32:29 117  
13:32:29 118  PROCEDURE UPDATE_RECEIPT(
13:32:29 119  /*
13:32:29 120  Throws exceptions:
13:32:29 121  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 122  */
13:32:29 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
13:32:29 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:29 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
13:32:29 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:29 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:29 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:29 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:29 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:29 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:29 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:29 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:29 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
13:32:29 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
13:32:29 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:29 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
13:32:29 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
13:32:29 139  ) AS
13:32:29 140  -- VARIABLES
13:32:29 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
13:32:29 142  var_current_date	    DATE;
13:32:29 143  BEGIN
13:32:29 144  
13:32:29 145  	SELECT
13:32:29 146  	  sysdate
13:32:29 147  	INTO
13:32:29 148  	  var_current_date
13:32:29 149  	FROM
13:32:29 150  	  dual
13:32:29 151  	;
13:32:29 152  
13:32:29 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
13:32:29 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ITUNES_RECEIPT_HISTORY
13:32:29 155  	  (
13:32:29 156  	      rec.id,
13:32:29 157  	      rec.subscription_id,
13:32:29 158  	      rec.receipt,
13:32:29 159  	      rec.status,
13:32:29 160  	      rec.quantity,
13:32:29 161  	      rec.product_id,
13:32:29 162  	      rec.transaction_id,
13:32:29 163  	      rec.purchase_date,
13:32:29 164  	      rec.original_transaction_id,
13:32:29 165  	      rec.original_purchase_date,
13:32:29 166  	      rec.app_item_id,
13:32:29 167  	      rec.version_external_id,
13:32:29 168  	      rec.bid,
13:32:29 169  	      rec.bvrs,
13:32:29 170  	      rec.expires_date,
13:32:29 171  	      rec.create_date,
13:32:29 172  	      rec.created_by,
13:32:29 173  	      rec.update_date,
13:32:29 174  	      rec.updated_by,
13:32:29 175  	      rec.last_check_date,
13:32:29 176  	      rec.cancel_date
13:32:29 177  	  );
13:32:29 178  	END LOOP;
13:32:29 179  
13:32:29 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
13:32:29 181  	SET
13:32:29 182  	  receipt = in_receipt,
13:32:29 183  	  status = in_status,
13:32:29 184  	  quantity = in_quantity,
13:32:29 185  	  product_id = in_product_id,
13:32:29 186  	  transaction_id = in_transaction_id,
13:32:29 187  	  purchase_date = in_purchase_date,
13:32:29 188  	  original_transaction_id = in_original_transaction_id,
13:32:29 189  	  original_purchase_date = in_original_purchase_date,
13:32:29 190  	  app_item_id = in_app_item_id,
13:32:29 191  	  version_external_id = in_version_external_id,
13:32:29 192  	  bid = in_bid,
13:32:29 193  	  bvrs = in_bvrs,
13:32:29 194  	  expires_date = in_expires_date,
13:32:29 195  	  update_date = var_current_date,
13:32:29 196  	  updated_by = in_updated_by,
13:32:29 197  	  last_check_date = var_current_date,
13:32:29 198  	  cancel_date = in_cancel_date
13:32:29 199  	WHERE
13:32:29 200  	  id = in_id
13:32:29 201  	;
13:32:29 202  
13:32:29 203  EXCEPTION
13:32:29 204  WHEN DUP_VAL_ON_INDEX THEN
13:32:29 205  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:29 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
13:32:29 207  WHEN OTHERS THEN
13:32:29 208  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 210  
13:32:29 211  END UPDATE_RECEIPT;
13:32:29 212  
13:32:29 213  PROCEDURE LINK_ITUNES_RECEIPT(
13:32:29 214  /*
13:32:29 215  Throws exceptions:
13:32:29 216  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 217  */
13:32:29 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
13:32:29 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:29 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
13:32:29 221  ) AS
13:32:29 222  -- VARIABLES
13:32:29 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
13:32:29 224  var_current_date	    DATE;
13:32:29 225  BEGIN
13:32:29 226  
13:32:29 227  	      SELECT
13:32:29 228  	  sysdate
13:32:29 229  	      INTO
13:32:29 230  	  var_current_date
13:32:29 231  	      FROM
13:32:29 232  	  dual
13:32:29 233  	      ;
13:32:29 234  
13:32:29 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
13:32:29 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ITUNES_RECEIPT_HISTORY
13:32:29 237  	      (
13:32:29 238  	    rec.id,
13:32:29 239  	    rec.subscription_id,
13:32:29 240  	    rec.receipt,
13:32:29 241  	    rec.status,
13:32:29 242  	    rec.quantity,
13:32:29 243  	    rec.product_id,
13:32:29 244  	    rec.transaction_id,
13:32:29 245  	    rec.purchase_date,
13:32:29 246  	    rec.original_transaction_id,
13:32:29 247  	    rec.original_purchase_date,
13:32:29 248  	    rec.app_item_id,
13:32:29 249  	    rec.version_external_id,
13:32:29 250  	    rec.bid,
13:32:29 251  	    rec.bvrs,
13:32:29 252  	    rec.expires_date,
13:32:29 253  	    rec.create_date,
13:32:29 254  	    rec.created_by,
13:32:29 255  	    rec.update_date,
13:32:29 256  	    rec.updated_by,
13:32:29 257  	    rec.last_check_date,
13:32:29 258  	    rec.cancel_date
13:32:29 259  	      );
13:32:29 260  	      END LOOP;
13:32:29 261  
13:32:29 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
13:32:29 263  		SET
13:32:29 264  		      subscription_id = in_subscription_id,
13:32:29 265  		      update_date = var_current_date,
13:32:29 266  	      updated_by = in_updated_by,
13:32:29 267  	      last_check_date = var_current_date
13:32:29 268  	      WHERE
13:32:29 269  		  id = in_id
13:32:29 270  	      ;
13:32:29 271  
13:32:29 272  	      EXCEPTION
13:32:29 273  	      WHEN DUP_VAL_ON_INDEX THEN
13:32:29 274  		PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:29 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
13:32:29 276  	      WHEN OTHERS THEN
13:32:29 277  		PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 279  END LINK_ITUNES_RECEIPT;
13:32:29 280  
13:32:29 281  
13:32:29 282  PROCEDURE MARK_RECEIPT_CHECKED(
13:32:29 283  /*
13:32:29 284  Throws exceptions:
13:32:29 285  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 286  */
13:32:29 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
13:32:29 288  ) AS
13:32:29 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
13:32:29 290  BEGIN
13:32:29 291  	UPDATE
13:32:29 292  	  CORE_OWNER.ITUNES_RECEIPT
13:32:29 293  	SET
13:32:29 294  	  last_check_date = sysdate
13:32:29 295  	WHERE
13:32:29 296  	  id = in_id
13:32:29 297  	;
13:32:29 298  EXCEPTION
13:32:29 299  WHEN OTHERS THEN
13:32:29 300  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 302  END MARK_RECEIPT_CHECKED;
13:32:29 303  
13:32:29 304  END PROCS_ITUNES_RECEIPT_CRU_V20;
13:32:29 305  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.05
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_LICENSE(
13:32:29   4  	out_license_id		    OUT LICENSE.ID%TYPE,
13:32:29   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
13:32:29   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
13:32:29   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
13:32:29   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
13:32:29   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
13:32:29  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
13:32:29  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
13:32:29  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
13:32:29  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
13:32:29  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
13:32:29  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
13:32:29  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
13:32:29  17  ) AS
13:32:29  18  -- VARIABLES
13:32:29  19  var_license_id LICENSE.ID%TYPE;
13:32:29  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29  21  var_date DATE := SYSDATE;
13:32:29  22  BEGIN
13:32:29  23  	IF in_license_id IS NULL THEN
13:32:29  24  	  SELECT
13:32:29  25  	    LCN_ID_SEQ.nextVal into var_license_id
13:32:29  26  	  FROM DUAL;
13:32:29  27  	ELSE
13:32:29  28  	  var_license_id := in_license_id;
13:32:29  29  	END IF;
13:32:29  30  	INSERT INTO
13:32:29  31  	  LICENSE (
13:32:29  32  	    ID,
13:32:29  33  	    LICENSE_STATUS_ID,
13:32:29  34  	    NEEDS_ENTITLEMENTS,
13:32:29  35  	    START_DATE,
13:32:29  36  	    OFFER_ID,
13:32:29  37  	    SUBSCRIPTION_ID,
13:32:29  38  	    INVOICE_ID,
13:32:29  39  	    END_DATE,
13:32:29  40  	    CREATE_DATE,
13:32:29  41  	    CREATED_BY,
13:32:29  42  	    UPDATE_DATE,
13:32:29  43  	    UPDATED_BY,
13:32:29  44  	    IS_EXTENSION,
13:32:29  45  	    CURRENT_OFFER_INDEX,
13:32:29  46  	    CURRENT_OFFER_RECURR_NUM,
13:32:29  47  	    ENTITLEMENT_END_DATE
13:32:29  48  	  ) VALUES (
13:32:29  49  	    var_license_id,
13:32:29  50  	    in_license_status_id,
13:32:29  51  	    in_needs_entitlements,
13:32:29  52  	    in_start_date,
13:32:29  53  	    in_offer_id,
13:32:29  54  	    in_subscription_id,
13:32:29  55  	    in_invoice_id,
13:32:29  56  	    in_end_date,
13:32:29  57  	    var_date,
13:32:29  58  	    in_created_by,
13:32:29  59  	    var_date,
13:32:29  60  	    in_created_by,
13:32:29  61  	    in_is_extension,
13:32:29  62  	    in_current_offer_index,
13:32:29  63  	    in_current_offer_recurr_num,
13:32:29  64  	    in_end_date
13:32:29  65  	  );
13:32:29  66  
13:32:29  67  	out_license_id := var_license_id;
13:32:29  68  END CREATE_LICENSE;
13:32:29  69  
13:32:29  70  /********************************************************************/
13:32:29  71  
13:32:29  72  PROCEDURE UPDATE_LICENSE (
13:32:29  73  	in_license_id		    IN LICENSE.ID%TYPE,
13:32:29  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
13:32:29  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
13:32:29  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
13:32:29  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
13:32:29  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
13:32:29  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
13:32:29  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
13:32:29  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
13:32:29  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
13:32:29  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
13:32:29  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
13:32:29  85  ) AS
13:32:29  86  BEGIN
13:32:29  87  	-- Create history
13:32:29  88  	PROCS_HISTORY_V20.CREATE_LICENSE_HISTORY(
13:32:29  89  	  in_license_id 	       => in_license_id,
13:32:29  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29  91  	);
13:32:29  92  
13:32:29  93  	UPDATE
13:32:29  94  	  LICENSE
13:32:29  95  	SET
13:32:29  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
13:32:29  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
13:32:29  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
13:32:29  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
13:32:29 100  	  UPDATE_DATE		   = SYSDATE,
13:32:29 101  	  UPDATED_BY		   = in_updated_by,
13:32:29 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
13:32:29 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
13:32:29 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
13:32:29 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
13:32:29 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
13:32:29 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
13:32:29 108  	WHERE
13:32:29 109  	  LICENSE.ID = in_license_id;
13:32:29 110  END UPDATE_LICENSE;
13:32:29 111  
13:32:29 112  END PROCS_LICENSE_CRU_V20;
13:32:29 113  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.01
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_LINE_ITEM (
13:32:29   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
13:32:29   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
13:32:29   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
13:32:29   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
13:32:29   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
13:32:29   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
13:32:29  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
13:32:29  11  ) AS
13:32:29  12  BEGIN
13:32:29  13  	IF inout_line_item_id IS NULL THEN
13:32:29  14  	  SELECT
13:32:29  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
13:32:29  16  	  FROM DUAL;
13:32:29  17  	END IF;
13:32:29  18  	INSERT INTO LINE_ITEM (
13:32:29  19  	  ID,
13:32:29  20  	  PRODUCT_OFFER_ID,
13:32:29  21  	  INVOICE_ID,
13:32:29  22  	  AMOUNT,
13:32:29  23  	  QUANTITY,
13:32:29  24  	  CREATE_DATE,
13:32:29  25  	  CREATED_BY,
13:32:29  26  	  DISCOUNT_AMOUNT,
13:32:29  27  	  TAXES_AMOUNT
13:32:29  28  	) VALUES (
13:32:29  29  	  inout_line_item_id,
13:32:29  30  	  in_product_offer_id,
13:32:29  31  	  in_invoice_id,
13:32:29  32  	  in_amount,
13:32:29  33  	  1, -- [REVU]: Deprecated. Ignore this field
13:32:29  34  	  SYSDATE,
13:32:29  35  	  in_created_by,
13:32:29  36  	  in_discount_amount,
13:32:29  37  	  in_taxes_amount
13:32:29  38  	);
13:32:29  39  END CREATE_LINE_ITEM;
13:32:29  40  
13:32:29  41  /******************************************************************************/
13:32:29  42  
13:32:29  43  PROCEDURE UPDATE_LINE_ITEM (
13:32:29  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
13:32:29  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
13:32:29  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
13:32:29  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
13:32:29  48  ) AS
13:32:29  49  BEGIN
13:32:29  50  	UPDATE
13:32:29  51  	  LINE_ITEM
13:32:29  52  	SET
13:32:29  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
13:32:29  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
13:32:29  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
13:32:29  56  	WHERE
13:32:29  57  	  LINE_ITEM.ID = in_line_item_id;
13:32:29  58  END UPDATE_LINE_ITEM;
13:32:29  59  
13:32:29  60  /******************************************************************************/
13:32:29  61  
13:32:29  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
13:32:29  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
13:32:29  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
13:32:29  65  ) AS
13:32:29  66  BEGIN
13:32:29  67  	INSERT INTO DISCOUNT_LINE_ITEM(
13:32:29  68  	  DISCOUNT_ID,
13:32:29  69  	  LINE_ITEM_ID
13:32:29  70  	) VALUES (
13:32:29  71  	  in_discount_id,
13:32:29  72  	  in_line_item_id
13:32:29  73  	);
13:32:29  74  END CREATE_DISCOUNT_LINE_ITEM;
13:32:29  75  
13:32:29  76  END PROCS_LINE_ITEMS_CRU_V20;
13:32:29  77  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
13:32:29   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
13:32:29   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
13:32:29   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
13:32:29   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
13:32:29   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
13:32:29  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
13:32:29  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
13:32:29  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:29  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
13:32:29  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
13:32:29  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
13:32:29  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:29  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:29  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
13:32:29  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
13:32:29  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
13:32:29  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
13:32:29  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
13:32:29  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
13:32:29  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
13:32:29  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
13:32:29  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
13:32:29  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
13:32:29  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
13:32:29  29  ) AS
13:32:29  30  -- VARIABLES
13:32:29  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
13:32:29  32  var_date DATE := SYSDATE;
13:32:29  33  BEGIN
13:32:29  34  	IF in_cpt_chargeback_act_id IS NULL THEN
13:32:29  35  	  SELECT
13:32:29  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
13:32:29  37  	  FROM DUAL;
13:32:29  38  	ELSE
13:32:29  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
13:32:29  40  	END IF;
13:32:29  41  	INSERT INTO
13:32:29  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
13:32:29  43  	    id,
13:32:29  44  	    rcn_ext_source_log_id,
13:32:29  45  	    record_type,
13:32:29  46  	    entity_type,
13:32:29  47  	    entity_number,
13:32:29  48  	    chargeback_amount_issuer,
13:32:29  49  	    prev_partial_representment,
13:32:29  50  	    presentment_currency,
13:32:29  51  	    chargeback_category,
13:32:29  52  	    status_flag,
13:32:29  53  	    sequence_number,
13:32:29  54  	    merchant_order_number,
13:32:29  55  	    account_number,
13:32:29  56  	    reason_code,
13:32:29  57  	    transaction_date,
13:32:29  58  	    chargeback_date,
13:32:29  59  	    activity_date,
13:32:29  60  	    chargeback_amount_action,
13:32:29  61  	    fee_amount,
13:32:29  62  	    usage_code,
13:32:29  63  	    mop_code,
13:32:29  64  	    authorization_date,
13:32:29  65  	    chargeback_due_date,
13:32:29  66  	    create_date,
13:32:29  67  	    created_by
13:32:29  68  	  ) VALUES (
13:32:29  69  	    var_cpt_chargeback_act_id,
13:32:29  70  	    in_ext_source_log_id,
13:32:29  71  	    in_record_type,
13:32:29  72  	    in_entity_type,
13:32:29  73  	    in_entity_number,
13:32:29  74  	    in_chargeback_amount_issuer,
13:32:29  75  	    in_prev_partial_repres,
13:32:29  76  	    in_presentment_currency,
13:32:29  77  	    in_chargeback_category,
13:32:29  78  	    in_status_flag,
13:32:29  79  	    in_sequence_number,
13:32:29  80  	    in_merchant_order_number,
13:32:29  81  	    in_account_number,
13:32:29  82  	    in_reason_code,
13:32:29  83  	    in_transaction_date,
13:32:29  84  	    in_chargeback_date,
13:32:29  85  	    in_activity_date,
13:32:29  86  	    in_chargeback_amount_action,
13:32:29  87  	    in_fee_amount,
13:32:29  88  	    in_usage_code,
13:32:29  89  	    in_mop_code,
13:32:29  90  	    in_authorization_date,
13:32:29  91  	    in_chargeback_due_date,
13:32:29  92  	    var_date,
13:32:29  93  	    in_created_by
13:32:29  94  	  );
13:32:29  95  
13:32:29  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
13:32:29  97  END CREATE_CPT_CHARGEBACK_ACT;
13:32:29  98  
13:32:29  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
13:32:29 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
13:32:29 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
13:32:29 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
13:32:29 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
13:32:29 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
13:32:29 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:29 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
13:32:29 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
13:32:29 108  ) AS
13:32:29 109  -- VARIABLES
13:32:29 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
13:32:29 111  var_date DATE := SYSDATE;
13:32:29 112  BEGIN
13:32:29 113  	IF in_ext_source_log_id IS NULL THEN
13:32:29 114  	  SELECT
13:32:29 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
13:32:29 116  	  FROM DUAL;
13:32:29 117  	ELSE
13:32:29 118  	  var_ext_source_log_id := in_ext_source_log_id;
13:32:29 119  	END IF;
13:32:29 120  	INSERT INTO
13:32:29 121  	  RCN_EXT_SOURCE_LOG (
13:32:29 122  	    id,
13:32:29 123  	    extraction_timestamp,
13:32:29 124  	    report_date,
13:32:29 125  	    report_generation_datetime,
13:32:29 126  	    record_type,
13:32:29 127  	    report_file_name,
13:32:29 128  	    create_date,
13:32:29 129  	    created_by
13:32:29 130  	  ) VALUES (
13:32:29 131  	    var_ext_source_log_id,
13:32:29 132  	    in_extraction_timestamp,
13:32:29 133  	    in_report_date,
13:32:29 134  	    in_report_gen_datetime,
13:32:29 135  	    in_record_type,
13:32:29 136  	    in_report_file_name,
13:32:29 137  	    var_date,
13:32:29 138  	    in_created_by
13:32:29 139  	  );
13:32:29 140  
13:32:29 141  	out_ext_source_log_id := var_ext_source_log_id;
13:32:29 142  END CREATE_EXT_SOURCE_LOG;
13:32:29 143  
13:32:29 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
13:32:29 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
13:32:29 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
13:32:29 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
13:32:29 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
13:32:29 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
13:32:29 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
13:32:29 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
13:32:29 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
13:32:29 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
13:32:29 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
13:32:29 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
13:32:29 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
13:32:29 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
13:32:29 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
13:32:29 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
13:32:29 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
13:32:29 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
13:32:29 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
13:32:29 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
13:32:29 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
13:32:29 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
13:32:29 167  ) AS
13:32:29 168  -- VARIABLES
13:32:29 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
13:32:29 170  var_date DATE := SYSDATE;
13:32:29 171  BEGIN
13:32:29 172  	IF in_cpt_service_charge_id IS NULL THEN
13:32:29 173  	  SELECT
13:32:29 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
13:32:29 175  	  FROM DUAL;
13:32:29 176  	ELSE
13:32:29 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
13:32:29 178  	END IF;
13:32:29 179  	INSERT INTO
13:32:29 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
13:32:29 181  	    id,
13:32:29 182  	    rcn_ext_source_log_id,
13:32:29 183  	    record_type,
13:32:29 184  	    category,
13:32:29 185  	    sub_category,
13:32:29 186  	    entity_type,
13:32:29 187  	    entity_number,
13:32:29 188  	    funds_transfer_inst_number,
13:32:29 189  	    secure_ba_number,
13:32:29 190  	    settlement_currency,
13:32:29 191  	    fee_schedule,
13:32:29 192  	    mop,
13:32:29 193  	    interchange_qualification,
13:32:29 194  	    fee_type_description,
13:32:29 195  	    action_type,
13:32:29 196  	    unit_quantity,
13:32:29 197  	    unit_fee,
13:32:29 198  	    amount,
13:32:29 199  	    percentage_rate,
13:32:29 200  	    total_charge,
13:32:29 201  	    create_date,
13:32:29 202  	    created_by
13:32:29 203  	  ) VALUES (
13:32:29 204  	    var_cpt_service_charge_id,
13:32:29 205  	    in_ext_source_log_id,
13:32:29 206  	    in_record_type,
13:32:29 207  	    in_category,
13:32:29 208  	    in_sub_category,
13:32:29 209  	    in_entity_type,
13:32:29 210  	    in_entity_number,
13:32:29 211  	    in_funds_trans_inst_number,
13:32:29 212  	    in_secure_ba_number,
13:32:29 213  	    in_settlement_currency,
13:32:29 214  	    in_fee_schedule,
13:32:29 215  	    in_mop,
13:32:29 216  	    in_interchange_qual,
13:32:29 217  	    in_fee_type_description,
13:32:29 218  	    in_action_type,
13:32:29 219  	    in_unit_quantity,
13:32:29 220  	    in_unit_fee,
13:32:29 221  	    in_amount,
13:32:29 222  	    in_percentage_rate,
13:32:29 223  	    in_total_charge,
13:32:29 224  	    var_date,
13:32:29 225  	    in_created_by
13:32:29 226  	  );
13:32:29 227  
13:32:29 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
13:32:29 229  END CREATE_CPT_SERVICE_CHARGE;
13:32:29 230  
13:32:29 231  PROCEDURE CREATE_CPT_EXCEPTION (
13:32:29 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
13:32:29 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
13:32:29 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
13:32:29 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
13:32:29 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
13:32:29 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
13:32:29 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
13:32:29 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
13:32:29 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
13:32:29 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
13:32:29 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:29 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:29 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
13:32:29 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:29 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
13:32:29 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
13:32:29 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
13:32:29 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
13:32:29 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
13:32:29 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
13:32:29 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
13:32:29 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
13:32:29 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
13:32:29 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
13:32:29 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
13:32:29 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
13:32:29 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
13:32:29 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
13:32:29 261  ) AS
13:32:29 262  -- VARIABLES
13:32:29 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
13:32:29 264  var_date DATE := SYSDATE;
13:32:29 265  BEGIN
13:32:29 266  	IF in_cpt_exception_id IS NULL THEN
13:32:29 267  	  SELECT
13:32:29 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
13:32:29 269  	  FROM DUAL;
13:32:29 270  	ELSE
13:32:29 271  	  var_cpt_exception_id := in_cpt_exception_id;
13:32:29 272  	END IF;
13:32:29 273  	INSERT INTO
13:32:29 274  	  RCN_CPT_EXCEPTION_DETAIL (
13:32:29 275  	    id,
13:32:29 276  	    rcn_ext_source_log_id,
13:32:29 277  	    record_type,
13:32:29 278  	    submission_date,
13:32:29 279  	    pid_number,
13:32:29 280  	    pid_short_name,
13:32:29 281  	    submission_number,
13:32:29 282  	    record_number,
13:32:29 283  	    entity_type,
13:32:29 284  	    entity_number,
13:32:29 285  	    presentment_currency,
13:32:29 286  	    merchant_order_number,
13:32:29 287  	    rdfi_number,
13:32:29 288  	    account_number,
13:32:29 289  	    expiration_date,
13:32:29 290  	    amount,
13:32:29 291  	    mop,
13:32:29 292  	    action_code,
13:32:29 293  	    auth_date,
13:32:29 294  	    auth_code,
13:32:29 295  	    auth_response_code,
13:32:29 296  	    trace_number,
13:32:29 297  	    consumer_country_code,
13:32:29 298  	    category,
13:32:29 299  	    mcc,
13:32:29 300  	    reject_code,
13:32:29 301  	    submission_status,
13:32:29 302  	    create_date,
13:32:29 303  	    created_by
13:32:29 304  	  ) VALUES (
13:32:29 305  	    var_cpt_exception_id,
13:32:29 306  	    in_ext_source_log_id,
13:32:29 307  	    in_record_type,
13:32:29 308  	    in_submission_date,
13:32:29 309  	    in_pid_number,
13:32:29 310  	    in_pid_short_name,
13:32:29 311  	    in_submission_number,
13:32:29 312  	    in_record_number,
13:32:29 313  	    in_entity_type,
13:32:29 314  	    in_entity_number,
13:32:29 315  	    in_presentment_currency,
13:32:29 316  	    in_merchant_order_number,
13:32:29 317  	    in_rdfi_number,
13:32:29 318  	    in_account_number,
13:32:29 319  	    in_expiration_date,
13:32:29 320  	    in_amount,
13:32:29 321  	    in_mop,
13:32:29 322  	    in_action_code,
13:32:29 323  	    in_auth_date,
13:32:29 324  	    in_auth_code,
13:32:29 325  	    in_auth_response_code,
13:32:29 326  	    in_trace_number,
13:32:29 327  	    in_consumer_country_code,
13:32:29 328  	    in_category,
13:32:29 329  	    in_mcc,
13:32:29 330  	    in_reject_code,
13:32:29 331  	    in_submission_status,
13:32:29 332  	    var_date,
13:32:29 333  	    in_created_by
13:32:29 334  	  );
13:32:29 335  
13:32:29 336  	out_cpt_exception_id := var_cpt_exception_id;
13:32:29 337  END CREATE_CPT_EXCEPTION;
13:32:29 338  
13:32:29 339  PROCEDURE CREATE_CPT_DEPOSIT (
13:32:29 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
13:32:29 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
13:32:29 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
13:32:29 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
13:32:29 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
13:32:29 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
13:32:29 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
13:32:29 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
13:32:29 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
13:32:29 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
13:32:29 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
13:32:29 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
13:32:29 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
13:32:29 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
13:32:29 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
13:32:29 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
13:32:29 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
13:32:29 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
13:32:29 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
13:32:29 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
13:32:29 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
13:32:29 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
13:32:29 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
13:32:29 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
13:32:29 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
13:32:29 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
13:32:29 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
13:32:29 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
13:32:29 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
13:32:29 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
13:32:29 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
13:32:29 372  ) AS
13:32:29 373  -- VARIABLES
13:32:29 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
13:32:29 375  var_date DATE := SYSDATE;
13:32:29 376  BEGIN
13:32:29 377  	IF in_cpt_deposit_id IS NULL THEN
13:32:29 378  	  SELECT
13:32:29 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
13:32:29 380  	  FROM DUAL;
13:32:29 381  	ELSE
13:32:29 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
13:32:29 383  	END IF;
13:32:29 384  	INSERT INTO
13:32:29 385  	  RCN_CPT_DEPOSIT_DETAIL (
13:32:29 386  	    id,
13:32:29 387  	    rcn_ext_source_log_id,
13:32:29 388  	    record_type,
13:32:29 389  	    submission_date,
13:32:29 390  	    pid_number,
13:32:29 391  	    pid_short_name,
13:32:29 392  	    submission_number,
13:32:29 393  	    record_number,
13:32:29 394  	    entity_type,
13:32:29 395  	    entity_number,
13:32:29 396  	    presentment_currency,
13:32:29 397  	    merchant_order_number,
13:32:29 398  	    rdfi_number,
13:32:29 399  	    account_number,
13:32:29 400  	    expiration_date,
13:32:29 401  	    amount,
13:32:29 402  	    mop,
13:32:29 403  	    action_code,
13:32:29 404  	    auth_date,
13:32:29 405  	    auth_code,
13:32:29 406  	    auth_response_code,
13:32:29 407  	    trace_number,
13:32:29 408  	    consumer_country_code,
13:32:29 409  	    mcc,
13:32:29 410  	    fee_code,
13:32:29 411  	    unit_fee,
13:32:29 412  	    percent_fee,
13:32:29 413  	    total_interchange_fee,
13:32:29 414  	    total_assessment_fee,
13:32:29 415  	    other_fee,
13:32:29 416  	    create_date,
13:32:29 417  	    created_by
13:32:29 418  	  ) VALUES (
13:32:29 419  	    var_cpt_deposit_id,
13:32:29 420  	    in_ext_source_log_id,
13:32:29 421  	    in_record_type,
13:32:29 422  	    in_submission_date,
13:32:29 423  	    in_pid_number,
13:32:29 424  	    in_pid_short_name,
13:32:29 425  	    in_submission_number,
13:32:29 426  	    in_record_number,
13:32:29 427  	    in_entity_type,
13:32:29 428  	    in_entity_number,
13:32:29 429  	    in_presentment_currency,
13:32:29 430  	    in_merchant_order_number,
13:32:29 431  	    in_rdfi_number,
13:32:29 432  	    in_account_number,
13:32:29 433  	    in_expiration_date,
13:32:29 434  	    in_amount,
13:32:29 435  	    in_mop,
13:32:29 436  	    in_action_code,
13:32:29 437  	    in_auth_date,
13:32:29 438  	    in_auth_code,
13:32:29 439  	    in_auth_response_code,
13:32:29 440  	    in_trace_number,
13:32:29 441  	    in_consumer_country_code,
13:32:29 442  	    in_mcc,
13:32:29 443  	    in_fee_code,
13:32:29 444  	    in_unit_fee,
13:32:29 445  	    in_percent_fee,
13:32:29 446  	    in_total_interchange_fee,
13:32:29 447  	    in_total_assessment_fee,
13:32:29 448  	    in_other_fee,
13:32:29 449  	    var_date,
13:32:29 450  	    in_created_by
13:32:29 451  	  );
13:32:29 452  
13:32:29 453  	out_cpt_deposit_id := var_cpt_deposit_id;
13:32:29 454  END CREATE_CPT_DEPOSIT;
13:32:29 455  
13:32:29 456  PROCEDURE CREATE_PP_SETTLEMENT (
13:32:29 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
13:32:29 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
13:32:29 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
13:32:29 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
13:32:29 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
13:32:29 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
13:32:29 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
13:32:29 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
13:32:29 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
13:32:29 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
13:32:29 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
13:32:29 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
13:32:29 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
13:32:29 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
13:32:29 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
13:32:29 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
13:32:29 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
13:32:29 475  ) AS
13:32:29 476  -- VARIABLES
13:32:29 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
13:32:29 478  var_date DATE := SYSDATE;
13:32:29 479  BEGIN
13:32:29 480  	IF in_pp_settlement_id IS NULL THEN
13:32:29 481  	  SELECT
13:32:29 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
13:32:29 483  	  FROM DUAL;
13:32:29 484  	ELSE
13:32:29 485  	  var_pp_settlement_id := in_pp_settlement_id;
13:32:29 486  	END IF;
13:32:29 487  	INSERT INTO
13:32:29 488  	  RCN_PP_SETTLEMENT (
13:32:29 489  	    id,
13:32:29 490  	    rcn_ext_source_log_id,
13:32:29 491  	    transaction_id,
13:32:29 492  	    invoice_id,
13:32:29 493  	    pp_ref_id,
13:32:29 494  	    pp_ref_id_type,
13:32:29 495  	    trans_event_code,
13:32:29 496  	    trans_init_date,
13:32:29 497  	    trans_comp_date,
13:32:29 498  	    trans_deb_or_cred,
13:32:29 499  	    gross_trans_amount,
13:32:29 500  	    gross_trans_currency,
13:32:29 501  	    fee_deb_or_cred,
13:32:29 502  	    fee_amount,
13:32:29 503  	    fee_currency,
13:32:29 504  	    custom_field,
13:32:29 505  	    create_date,
13:32:29 506  	    created_by
13:32:29 507  	  ) VALUES (
13:32:29 508  	    var_pp_settlement_id,
13:32:29 509  	    in_ext_source_log_id,
13:32:29 510  	    in_transaction_id,
13:32:29 511  	    in_invoice_id,
13:32:29 512  	    in_pp_ref_id,
13:32:29 513  	    in_pp_ref_id_type,
13:32:29 514  	    in_trans_event_code,
13:32:29 515  	    in_trans_init_date,
13:32:29 516  	    in_trans_comp_date,
13:32:29 517  	    in_trans_deb_or_cred,
13:32:29 518  	    in_gross_trans_amount,
13:32:29 519  	    in_gross_trans_currency,
13:32:29 520  	    in_fee_deb_or_cred,
13:32:29 521  	    in_fee_amount,
13:32:29 522  	    in_fee_currency,
13:32:29 523  	    in_custom_field,
13:32:29 524  	    var_date,
13:32:29 525  	    in_created_by
13:32:29 526  	  );
13:32:29 527  
13:32:29 528  	out_pp_settlement_id := var_pp_settlement_id;
13:32:29 529  END CREATE_PP_SETTLEMENT;
13:32:29 530  
13:32:29 531  PROCEDURE CREATE_PP_DISPUTE (
13:32:29 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
13:32:29 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
13:32:29 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
13:32:29 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
13:32:29 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
13:32:29 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
13:32:29 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
13:32:29 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
13:32:29 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
13:32:29 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
13:32:29 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
13:32:29 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
13:32:29 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
13:32:29 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
13:32:29 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
13:32:29 548  ) AS
13:32:29 549  -- VARIABLES
13:32:29 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
13:32:29 551  var_date DATE := SYSDATE;
13:32:29 552  BEGIN
13:32:29 553  	IF in_pp_dispute_id IS NULL THEN
13:32:29 554  	  SELECT
13:32:29 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
13:32:29 556  	  FROM DUAL;
13:32:29 557  	ELSE
13:32:29 558  	  var_pp_dispute_id := in_pp_dispute_id;
13:32:29 559  	END IF;
13:32:29 560  	INSERT INTO
13:32:29 561  	  RCN_PP_DISPUTE (
13:32:29 562  	    id,
13:32:29 563  	    rcn_ext_source_log_id,
13:32:29 564  	    dispute_type,
13:32:29 565  	    claimant_name,
13:32:29 566  	    claimant_email,
13:32:29 567  	    transaction_id,
13:32:29 568  	    trans_date,
13:32:29 569  	    disputed_amount,
13:32:29 570  	    disputed_amount_currency,
13:32:29 571  	    dispute_reason,
13:32:29 572  	    dispute_filing_date,
13:32:29 573  	    dispute_status,
13:32:29 574  	    dispute_case_id,
13:32:29 575  	    invoice_id,
13:32:29 576  	    create_date,
13:32:29 577  	    created_by
13:32:29 578  	  ) VALUES (
13:32:29 579  	    var_pp_dispute_id,
13:32:29 580  	    in_ext_source_log_id,
13:32:29 581  	    in_dispute_type,
13:32:29 582  	    in_claimant_name,
13:32:29 583  	    in_claimant_email,
13:32:29 584  	    in_transaction_id,
13:32:29 585  	    in_trans_date,
13:32:29 586  	    in_disputed_amount,
13:32:29 587  	    in_disputed_amount_currency,
13:32:29 588  	    in_dispute_reason,
13:32:29 589  	    in_dispute_filing_date,
13:32:29 590  	    in_dispute_status,
13:32:29 591  	    in_dispute_case_id,
13:32:29 592  	    in_invoice_id,
13:32:29 593  	    var_date,
13:32:29 594  	    in_created_by
13:32:29 595  	  );
13:32:29 596  
13:32:29 597  	out_pp_dispute_id := var_pp_dispute_id;
13:32:29 598  END CREATE_PP_DISPUTE;
13:32:29 599  
13:32:29 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
13:32:29 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
13:32:29 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
13:32:29 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
13:32:29 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
13:32:29 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
13:32:29 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
13:32:29 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
13:32:29 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
13:32:29 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
13:32:29 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
13:32:29 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
13:32:29 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
13:32:29 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
13:32:29 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
13:32:29 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
13:32:29 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
13:32:29 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
13:32:29 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
13:32:29 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
13:32:29 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
13:32:29 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
13:32:29 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
13:32:29 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
13:32:29 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
13:32:29 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
13:32:29 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
13:32:29 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
13:32:29 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
13:32:29 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
13:32:29 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
13:32:29 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
13:32:29 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
13:32:29 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
13:32:29 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
13:32:29 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
13:32:29 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
13:32:29 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
13:32:29 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
13:32:29 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
13:32:29 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
13:32:29 641  ) AS
13:32:29 642  -- VARIABLES
13:32:29 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
13:32:29 644  var_date DATE := SYSDATE;
13:32:29 645  BEGIN
13:32:29 646  	IF in_pp_trans_detail_id IS NULL THEN
13:32:29 647  	  SELECT
13:32:29 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
13:32:29 649  	  FROM DUAL;
13:32:29 650  	ELSE
13:32:29 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
13:32:29 652  	END IF;
13:32:29 653  	INSERT INTO
13:32:29 654  	  RCN_PP_TRANS_DETAIL (
13:32:29 655  	    id,
13:32:29 656  	    rcn_ext_source_log_id,
13:32:29 657  	    transaction_id,
13:32:29 658  	    invoice_id,
13:32:29 659  	    pp_ref_id,
13:32:29 660  	    trans_event_code,
13:32:29 661  	    trans_init_date,
13:32:29 662  	    trans_comp_date,
13:32:29 663  	    trans_deb_or_cred,
13:32:29 664  	    gross_trans_amount,
13:32:29 665  	    gross_trans_currency,
13:32:29 666  	    fee_deb_or_cred,
13:32:29 667  	    fee_amount,
13:32:29 668  	    fee_currency,
13:32:29 669  	    trans_status,
13:32:29 670  	    insurance_amount,
13:32:29 671  	    sales_tax_amount,
13:32:29 672  	    shipping_amount,
13:32:29 673  	    trans_subject,
13:32:29 674  	    trans_note,
13:32:29 675  	    payer_acct_id,
13:32:29 676  	    payer_addr_status,
13:32:29 677  	    item_name,
13:32:29 678  	    item_id,
13:32:29 679  	    option_1_name,
13:32:29 680  	    option_1_value,
13:32:29 681  	    option_2_name,
13:32:29 682  	    option_2_value,
13:32:29 683  	    auction_site,
13:32:29 684  	    auction_buyer_id,
13:32:29 685  	    auction_closing_date,
13:32:29 686  	    shipping_addr_line_1,
13:32:29 687  	    shipping_addr_line_2,
13:32:29 688  	    shipping_addr_city,
13:32:29 689  	    shipping_addr_state,
13:32:29 690  	    shipping_addr_zip,
13:32:29 691  	    shipping_addr_country,
13:32:29 692  	    custom_field,
13:32:29 693  	    create_date,
13:32:29 694  	    created_by
13:32:29 695  	  ) VALUES (
13:32:29 696  	    var_pp_trans_detail_id,
13:32:29 697  	    in_ext_source_log_id,
13:32:29 698  	    in_transaction_id,
13:32:29 699  	    in_invoice_id,
13:32:29 700  	    in_pp_ref_id,
13:32:29 701  	    in_trans_event_code,
13:32:29 702  	    in_trans_init_date,
13:32:29 703  	    in_trans_comp_date,
13:32:29 704  	    in_trans_deb_or_cred,
13:32:29 705  	    in_gross_trans_amount,
13:32:29 706  	    in_gross_trans_currency,
13:32:29 707  	    in_fee_deb_or_cred,
13:32:29 708  	    in_fee_amount,
13:32:29 709  	    in_fee_currency,
13:32:29 710  	    in_trans_status,
13:32:29 711  	    in_insurance_amount,
13:32:29 712  	    in_sales_tax_amount,
13:32:29 713  	    in_shipping_amount,
13:32:29 714  	    in_trans_subject,
13:32:29 715  	    in_trans_note,
13:32:29 716  	    in_payer_acct_id,
13:32:29 717  	    in_payer_addr_status,
13:32:29 718  	    in_item_name,
13:32:29 719  	    in_item_id,
13:32:29 720  	    in_option_1_name,
13:32:29 721  	    in_option_1_value,
13:32:29 722  	    in_option_2_name,
13:32:29 723  	    in_option_2_value,
13:32:29 724  	    in_auction_site,
13:32:29 725  	    in_auction_buyer_id,
13:32:29 726  	    in_auction_closing_date,
13:32:29 727  	    in_shipping_addr_line_1,
13:32:29 728  	    in_shipping_addr_line_2,
13:32:29 729  	    in_shipping_addr_city,
13:32:29 730  	    in_shipping_addr_state,
13:32:29 731  	    in_shipping_addr_zip,
13:32:29 732  	    in_shipping_addr_country,
13:32:29 733  	    in_custom_field,
13:32:29 734  	    var_date,
13:32:29 735  	    in_created_by
13:32:29 736  	  );
13:32:29 737  
13:32:29 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
13:32:29 739  END CREATE_PP_TRANS_DETAIL;
13:32:29 740  
13:32:29 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
13:32:29 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:29 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
13:32:29 744  ) AS
13:32:29 745  BEGIN
13:32:29 746  	DELETE FROM
13:32:29 747  	  RCN_EXT_SOURCE_LOG
13:32:29 748  	WHERE
13:32:29 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
13:32:29 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
13:32:29 751  END DELETE_EXT_SOURCE_LOG;
13:32:29 752  
13:32:29 753  PROCEDURE GET_EXT_SOURCE_LOG (
13:32:29 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:29 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
13:32:29 756  	out_result_set		 OUT SYS_REFCURSOR
13:32:29 757  ) AS
13:32:29 758  BEGIN
13:32:29 759  	OPEN out_result_set FOR
13:32:29 760  	SELECT * FROM
13:32:29 761  	  RCN_EXT_SOURCE_LOG
13:32:29 762  	WHERE
13:32:29 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
13:32:29 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
13:32:29 765  END GET_EXT_SOURCE_LOG;
13:32:29 766  
13:32:29 767  FUNCTION CHECK_EXT_SOURCE_LOG (
13:32:29 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
13:32:29 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
13:32:29 770  ) RETURN NUMBER AS
13:32:29 771  var_exists NUMBER;
13:32:29 772  BEGIN
13:32:29 773  	SELECT count(1) INTO var_exists
13:32:29 774  	FROM
13:32:29 775  	  RCN_EXT_SOURCE_LOG
13:32:29 776  	WHERE
13:32:29 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
13:32:29 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
13:32:29 779  
13:32:29 780  	IF var_exists > 1 THEN
13:32:29 781  	  var_exists := 1;
13:32:29 782  	END IF;
13:32:29 783  
13:32:29 784  	RETURN var_exists;
13:32:29 785  END;
13:32:29 786  
13:32:29 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
13:32:29 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
13:32:29 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
13:32:29 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
13:32:29 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
13:32:29 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
13:32:29 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
13:32:29 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
13:32:29 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
13:32:29 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
13:32:29 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
13:32:29 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
13:32:29 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
13:32:29 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
13:32:29 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
13:32:29 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
13:32:29 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
13:32:29 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
13:32:29 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
13:32:29 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
13:32:29 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
13:32:29 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
13:32:29 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
13:32:29 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
13:32:29 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
13:32:29 812  ) AS
13:32:29 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
13:32:29 814  var_date DATE := SYSDATE;
13:32:29 815  BEGIN
13:32:29 816  	SELECT
13:32:29 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
13:32:29 818  	FROM DUAL;
13:32:29 819  
13:32:29 820  	INSERT INTO
13:32:29 821  	  RCN_AMEX_CHARGEBACK (
13:32:29 822  	    id,
13:32:29 823  	    rcn_ext_source_log_id,
13:32:29 824  	    resolution,
13:32:29 825  	    from_system,
13:32:29 826  	    rejects_to_system,
13:32:29 827  	    disputes_to_system,
13:32:29 828  	    date_of_adjustment,
13:32:29 829  	    date_of_charge,
13:32:29 830  	    case_type,
13:32:29 831  	    cb_reas_code,
13:32:29 832  	    cb_amount,
13:32:29 833  	    cb_adjustment_number,
13:32:29 834  	    billed_amount,
13:32:29 835  	    soc_amount,
13:32:29 836  	    foreign_amount,
13:32:29 837  	    currency,
13:32:29 838  	    note1,
13:32:29 839  	    note2,
13:32:29 840  	    note3,
13:32:29 841  	    note4,
13:32:29 842  	    note5,
13:32:29 843  	    note6,
13:32:29 844  	    note7,
13:32:29 845  	    ind_ref_number,
13:32:29 846  	    create_date,
13:32:29 847  	    created_by,
13:32:29 848  	    update_date,
13:32:29 849  	    updated_by
13:32:29 850  	  ) VALUES (
13:32:29 851  	    var_amex_chargeback_id,
13:32:29 852  	    in_rcn_ext_source_log_id,
13:32:29 853  	    in_resolution,
13:32:29 854  	    in_from_system,
13:32:29 855  	    in_rejects_to_system,
13:32:29 856  	    in_disputes_to_system,
13:32:29 857  	    in_date_of_adjustment,
13:32:29 858  	    in_date_of_charge,
13:32:29 859  	    in_case_type,
13:32:29 860  	    in_cb_reas_code,
13:32:29 861  	    in_cb_amount,
13:32:29 862  	    in_cb_adjustment_number,
13:32:29 863  	    in_billed_amount,
13:32:29 864  	    in_soc_amount,
13:32:29 865  	    in_foreign_amount,
13:32:29 866  	    in_currency,
13:32:29 867  	    in_note1,
13:32:29 868  	    in_note2,
13:32:29 869  	    in_note3,
13:32:29 870  	    in_note4,
13:32:29 871  	    in_note5,
13:32:29 872  	    in_note6,
13:32:29 873  	    in_note7,
13:32:29 874  	    in_ind_ref_number,
13:32:29 875  	    var_date,
13:32:29 876  	    in_created_by,
13:32:29 877  	    var_date,
13:32:29 878  	    in_created_by
13:32:29 879  	  );
13:32:29 880  
13:32:29 881  END CREATE_AMEX_CHARGEBACK;
13:32:29 882  
13:32:29 883  END PROCS_RECONCILIATION_CRU_V20;
13:32:29 884  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.06
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_SUBSCRIPTION(
13:32:29   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
13:32:29   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
13:32:29   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:29   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
13:32:29   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
13:32:29   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
13:32:29  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
13:32:29  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
13:32:29  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
13:32:29  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
13:32:29  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
13:32:29  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
13:32:29  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
13:32:29  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
13:32:29  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
13:32:29  19  ) AS
13:32:29  20  -- VARIABLES
13:32:29  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
13:32:29  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29  23  var_date DATE := SYSDATE;
13:32:29  24  BEGIN
13:32:29  25  	IF in_subscription_id IS NULL THEN
13:32:29  26  	  SELECT
13:32:29  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
13:32:29  28  	  FROM DUAL;
13:32:29  29  	ELSE
13:32:29  30  	  var_new_subscription_id := in_subscription_id;
13:32:29  31  	END IF;
13:32:29  32  	INSERT INTO SUBSCRIPTION (
13:32:29  33  	  ID,
13:32:29  34  	  SUSPEND_DATE,
13:32:29  35  	  ACCOUNT_ID,
13:32:29  36  	  PURCHASE_DATE,
13:32:29  37  	  OFFER_CHAIN_ID,
13:32:29  38  	  TERMINATION_DATE,
13:32:29  39  	  DAYS_REMAINING_ADJUSTMENT,
13:32:29  40  	  SCT_ID,
13:32:29  41  	  CREATE_DATE,
13:32:29  42  	  CREATED_BY,
13:32:29  43  	  UPDATE_DATE,
13:32:29  44  	  UPDATED_BY,
13:32:29  45  	  INSTRUMENT_TYPE_ID,
13:32:29  46  	  INSTRUMENT_ID,
13:32:29  47  	  SUBSCRIPTION_STATUS_ID,
13:32:29  48  	  CANCELLATION_DATE,
13:32:29  49  	  REACTIVATION_DATE
13:32:29  50  	) VALUES (
13:32:29  51  	  var_new_subscription_id,
13:32:29  52  	  in_suspend_date,
13:32:29  53  	  in_account_id,
13:32:29  54  	  in_purchase_date,
13:32:29  55  	  in_offer_chain_id,
13:32:29  56  	  in_termination_date,
13:32:29  57  	  in_days_remainning_ajustment,
13:32:29  58  	  in_sct_id,
13:32:29  59  	  var_date,
13:32:29  60  	  in_created_by,
13:32:29  61  	  var_date,
13:32:29  62  	  in_created_by,
13:32:29  63  	  in_instrument_type_id,
13:32:29  64  	  in_instrument_id,
13:32:29  65  	  in_subscription_status_id,
13:32:29  66  	  in_cancelation_date,
13:32:29  67  	  in_reactivation_date
13:32:29  68  	);
13:32:29  69  
13:32:29  70  	out_subscription_id := var_new_subscription_id;
13:32:29  71  END CREATE_SUBSCRIPTION;
13:32:29  72  
13:32:29  73  /******************************************************************************/
13:32:29  74  
13:32:29  75  PROCEDURE UPDATE_SUBSCRIPTION(
13:32:29  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
13:32:29  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
13:32:29  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
13:32:29  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
13:32:29  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
13:32:29  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
13:32:29  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
13:32:29  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
13:32:29  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
13:32:29  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
13:32:29  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
13:32:29  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
13:32:29  88  ) AS
13:32:29  89  BEGIN
13:32:29  90  	-- Create history
13:32:29  91  	PROCS_HISTORY_V20.CREATE_SUBSCRIPTION_HISTORY(
13:32:29  92  	  in_subscription_id	       => in_subscription_id,
13:32:29  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29  94  	);
13:32:29  95  
13:32:29  96  	UPDATE SUBSCRIPTION SET
13:32:29  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
13:32:29  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
13:32:29  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
13:32:29 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
13:32:29 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
13:32:29 102  	  UPDATE_DATE		    = SYSDATE,
13:32:29 103  	  UPDATED_BY		    = in_updated_by,
13:32:29 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
13:32:29 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
13:32:29 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
13:32:29 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
13:32:29 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
13:32:29 109  	WHERE
13:32:29 110  	  ID = in_subscription_id;
13:32:29 111  END UPDATE_SUBSCRIPTION;
13:32:29 112  
13:32:29 113  /******************************************************************************/
13:32:29 114  
13:32:29 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
13:32:29 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
13:32:29 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:29 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
13:32:29 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:29 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
13:32:29 121  ) AS
13:32:29 122  BEGIN
13:32:29 123  	IF inout_subscription_note_id IS NULL THEN
13:32:29 124  	  SELECT
13:32:29 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
13:32:29 126  	  FROM DUAL;
13:32:29 127  	END IF;
13:32:29 128  	INSERT INTO SUBSCRIPTION_NOTE (
13:32:29 129  	  ID,
13:32:29 130  	  AGENT_ID,
13:32:29 131  	  SUBSCRIPTION_ID,
13:32:29 132  	  NOTE,
13:32:29 133  	  CREATE_DATE,
13:32:29 134  	  CREATED_BY
13:32:29 135  	) VALUES (
13:32:29 136  	  inout_subscription_note_id,
13:32:29 137  	  in_agent_id,
13:32:29 138  	  in_subscription_id,
13:32:29 139  	  in_note,
13:32:29 140  	  SYSDATE,
13:32:29 141  	  in_created_by
13:32:29 142  	);
13:32:29 143  END CREATE_SUBSCRIPTION_NOTE;
13:32:29 144  
13:32:29 145  END PROCS_SUBSCRIPTION_CRU_V20;
13:32:29 146  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_TAX (
13:32:29   4  	inout_tax_id		 IN OUT NUMBER,
13:32:29   5  	in_tax_type_id		 IN NUMBER,
13:32:29   6  	in_calculated_amount	 IN NUMBER,
13:32:29   7  	in_created_by		 IN VARCHAR2,
13:32:29   8  	in_line_item_id 	 IN NUMBER,
13:32:29   9  	in_effective_rate	 IN VARCHAR2,
13:32:29  10  	in_taxable_amount	 IN NUMBER,
13:32:29  11  	in_tax_rule_id		 IN NUMBER,
13:32:29  12  	in_jurisdiction_level_id IN NUMBER,
13:32:29  13  	in_jurisdiction_name	 IN VARCHAR2,
13:32:29  14  	in_jurisdiction_id	 IN VARCHAR2,
13:32:29  15  	in_ext_tax_type 	 IN VARCHAR2,
13:32:29  16  	in_ext_result		 IN VARCHAR2,
13:32:29  17  	in_imposition_type	 IN VARCHAR2,
13:32:29  18  	in_imposition		 IN VARCHAR2
13:32:29  19  ) AS
13:32:29  20  var_date DATE := SYSDATE;
13:32:29  21  BEGIN
13:32:29  22  
13:32:29  23  	IF inout_tax_id IS NULL THEN
13:32:29  24  	  SELECT
13:32:29  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
13:32:29  26  	  FROM DUAL;
13:32:29  27  	END IF;
13:32:29  28  
13:32:29  29  	INSERT INTO TAX (
13:32:29  30  	  ID,
13:32:29  31  	  TAX_TYPE_ID,
13:32:29  32  	  CALCULATED_AMOUNT,
13:32:29  33  	  CREATE_DATE,
13:32:29  34  	  CREATED_BY,
13:32:29  35  	  LINE_ITEM_ID,
13:32:29  36  	  EFFECTIVE_RATE,
13:32:29  37  	  TAXABLE_AMOUNT,
13:32:29  38  	  TAX_RULE_ID,
13:32:29  39  	  JURISDICTION_LEVEL_ID,
13:32:29  40  	  JURISDICTION_NAME,
13:32:29  41  	  JURISDICTION_ID,
13:32:29  42  	  EXT_TAX_TYPE,
13:32:29  43  	  EXT_RESULT,
13:32:29  44  	  IMPOSITION_TYPE,
13:32:29  45  	  IMPOSITION
13:32:29  46  	) VALUES (
13:32:29  47  	  inout_tax_id,
13:32:29  48  	  in_tax_type_id,
13:32:29  49  	  in_calculated_amount,
13:32:29  50  	  var_date,
13:32:29  51  	  in_created_by,
13:32:29  52  	  in_line_item_id,
13:32:29  53  	  in_effective_rate,
13:32:29  54  	  in_taxable_amount,
13:32:29  55  	  in_tax_rule_id,
13:32:29  56  	  in_jurisdiction_level_id,
13:32:29  57  	  in_jurisdiction_name,
13:32:29  58  	  in_jurisdiction_id,
13:32:29  59  	  in_ext_tax_type,
13:32:29  60  	  in_ext_result,
13:32:29  61  	  in_imposition_type,
13:32:29  62  	  in_imposition
13:32:29  63  	);
13:32:29  64  
13:32:29  65  END CREATE_TAX;
13:32:29  66  
13:32:29  67  END PROCS_TAXES_CRU_V20;
13:32:29  68  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_TRANSACTION (
13:32:29   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
13:32:29   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
13:32:29   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
13:32:29   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
13:32:29   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
13:32:29   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
13:32:29  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
13:32:29  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
13:32:29  12  ) AS
13:32:29  13  -- VARIABLES
13:32:29  14  var_transaction_id TRANSACTION.ID%TYPE;
13:32:29  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29  16  var_date DATE := SYSDATE;
13:32:29  17  BEGIN
13:32:29  18  	IF in_transaction_id IS NULL THEN
13:32:29  19  	  SELECT
13:32:29  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
13:32:29  21  	  FROM DUAL;
13:32:29  22  	ELSE
13:32:29  23  	  var_transaction_id := in_transaction_id;
13:32:29  24  	END IF;
13:32:29  25  	INSERT INTO
13:32:29  26  	  TRANSACTION (
13:32:29  27  	    ID,
13:32:29  28  	    TRANSACTION_STATUS_ID,
13:32:29  29  	    TRANSACTION_AMOUNT,
13:32:29  30  	    CREATE_DATE,
13:32:29  31  	    CREATED_BY,
13:32:29  32  	    UPDATE_DATE,
13:32:29  33  	    UPDATED_BY,
13:32:29  34  	    ORDER_ID,
13:32:29  35  	    IS_REFUND,
13:32:29  36  	    TRANSACTION_TYPE_CODE
13:32:29  37  	  ) VALUES (
13:32:29  38  	    var_transaction_id,
13:32:29  39  	    in_transaction_status_id,
13:32:29  40  	    in_transaction_amount,
13:32:29  41  	    var_date,
13:32:29  42  	    in_created_by,
13:32:29  43  	    var_date,
13:32:29  44  	    in_created_by,
13:32:29  45  	    in_order_id,
13:32:29  46  	    in_is_refund,
13:32:29  47  	    in_transaction_type_code
13:32:29  48  	  );
13:32:29  49  
13:32:29  50  	out_transaction_id := var_transaction_id;
13:32:29  51  END CREATE_TRANSACTION;
13:32:29  52  
13:32:29  53  /*******************************************************************/
13:32:29  54  
13:32:29  55  PROCEDURE UPDATE_TRANSACTION (
13:32:29  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
13:32:29  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
13:32:29  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
13:32:29  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
13:32:29  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
13:32:29  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
13:32:29  62  ) AS
13:32:29  63  BEGIN
13:32:29  64  	-- Create history
13:32:29  65  	PROCS_HISTORY_V20.CREATE_TRANSACTION_HISTORY(
13:32:29  66  	  in_transaction_id	       => in_transaction_id,
13:32:29  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29  68  	);
13:32:29  69  	UPDATE
13:32:29  70  	  TRANSACTION
13:32:29  71  	SET
13:32:29  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
13:32:29  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
13:32:29  74  	  UPDATE_DATE		= SYSDATE,
13:32:29  75  	  UPDATED_BY		= in_updated_by,
13:32:29  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
13:32:29  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
13:32:29  78  	WHERE
13:32:29  79  	  ID = in_transaction_id;
13:32:29  80  END UPDATE_TRANSACTION;
13:32:29  81  
13:32:29  82  /*******************************************************************/
13:32:29  83  
13:32:29  84  PROCEDURE READ_TRANSACTION (
13:32:29  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:29  86  	out_result_set	  OUT SYS_REFCURSOR
13:32:29  87  ) AS
13:32:29  88  BEGIN
13:32:29  89  	OPEN out_result_set FOR
13:32:29  90  	SELECT
13:32:29  91  	  ID,
13:32:29  92  	  TRANSACTION_STATUS_ID,
13:32:29  93  	  TRANSACTION_TYPE_CODE,
13:32:29  94  	  TRANSACTION_AMOUNT,
13:32:29  95  	  CREATE_DATE,
13:32:29  96  	  CREATED_BY,
13:32:29  97  	  UPDATE_DATE,
13:32:29  98  	  UPDATED_BY,
13:32:29  99  	  ORDER_ID,
13:32:29 100  	  IS_REFUND,
13:32:29 101  	  IS_SETTLED
13:32:29 102  	FROM
13:32:29 103  	  TRANSACTION
13:32:29 104  	WHERE
13:32:29 105  	  ID = in_transaction_id;
13:32:29 106  END READ_TRANSACTION;
13:32:29 107  
13:32:29 108  /*******************************************************************/
13:32:29 109  
13:32:29 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
13:32:29 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
13:32:29 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
13:32:29 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
13:32:29 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:29 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
13:32:29 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:29 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
13:32:29 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
13:32:29 119  ) AS
13:32:29 120  BEGIN
13:32:29 121  	IF inout_transaction_attempt_id IS NULL THEN
13:32:29 122  	  SELECT
13:32:29 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
13:32:29 124  	  FROM DUAL;
13:32:29 125  	END IF;
13:32:29 126  	INSERT INTO TRANSACTION_ATTEMPT (
13:32:29 127  	  ID,
13:32:29 128  	  TRANSACTION_ID,
13:32:29 129  	  EXTERNAL_STATUS_CODE,
13:32:29 130  	  EXTERNAL_STATUS_MESSAGE,
13:32:29 131  	  CREATE_DATE,
13:32:29 132  	  CREATED_BY,
13:32:29 133  	  EXTERNAL_TRANSACTION_ID,
13:32:29 134  	  TRANSACTION_START_TIME,
13:32:29 135  	  TRANSACTION_ATTEMPT_STATUS_ID
13:32:29 136  	) VALUES (
13:32:29 137  	  inout_transaction_attempt_id,
13:32:29 138  	  in_transaction_id,
13:32:29 139  	  in_external_status_code,
13:32:29 140  	  in_external_status_message,
13:32:29 141  	  SYSDATE,
13:32:29 142  	  in_created_by,
13:32:29 143  	  in_external_transaction_id,
13:32:29 144  	  in_transaction_start_time,
13:32:29 145  	  in_status_id
13:32:29 146  	);
13:32:29 147  END;
13:32:29 148  
13:32:29 149  /*******************************************************************/
13:32:29 150  
13:32:29 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
13:32:29 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
13:32:29 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
13:32:29 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:29 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
13:32:29 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
13:32:29 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
13:32:29 158  ) AS
13:32:29 159  BEGIN
13:32:29 160  	UPDATE
13:32:29 161  	  TRANSACTION_ATTEMPT
13:32:29 162  	SET
13:32:29 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
13:32:29 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
13:32:29 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
13:32:29 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
13:32:29 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
13:32:29 168  	WHERE
13:32:29 169  	  ID = in_transaction_attempt_id;
13:32:29 170  END;
13:32:29 171  
13:32:29 172  /*******************************************************************/
13:32:29 173  
13:32:29 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:29 175  /*
13:32:29 176  Throws exceptions:
13:32:29 177  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 178  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:29 179  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 180  */
13:32:29 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:29 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:29 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:29 184  ) AS
13:32:29 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
13:32:29 186  -- EXCEPTIONS
13:32:29 187  BAD_TRANSACTION_ID EXCEPTION;
13:32:29 188  BEGIN
13:32:29 189  
13:32:29 190  	PROCS_HISTORY_V20.CREATE_TRANSACTION_HISTORY(
13:32:29 191  	  in_transaction_id	       => in_transaction_id,
13:32:29 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29 193  	);
13:32:29 194  
13:32:29 195  	UPDATE
13:32:29 196  	  TRANSACTION
13:32:29 197  	SET
13:32:29 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
13:32:29 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
13:32:29 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
13:32:29 201  	WHERE
13:32:29 202  	  TRANSACTION.ID = in_transaction_id
13:32:29 203  	  AND TRANSACTION.ORDER_ID IS NULL;
13:32:29 204  
13:32:29 205  	IF SQL%ROWCOUNT = 0 THEN
13:32:29 206  	  RAISE BAD_TRANSACTION_ID;
13:32:29 207  	END IF;
13:32:29 208  EXCEPTION
13:32:29 209  WHEN BAD_TRANSACTION_ID THEN
13:32:29 210  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 211  	  SPROC_NAME, 'No such transaction');
13:32:29 212  END UPDATE_TRANSACTION_ORDER_ID;
13:32:29 213  
13:32:29 214  END PROCS_TRANSACTION_CRU_V20;
13:32:29 215  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_ADDRESS(
13:32:29   4  /*
13:32:29   5  Throws exceptions:
13:32:29   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29   7  */
13:32:29   8  	  out_address_id	OUT NUMBER,
13:32:29   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:29  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:29  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:29  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:29  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:29  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:29  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
13:32:29  16  ) AS
13:32:29  17  -- VARIABLES
13:32:29  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
13:32:29  19  -- EXCEPTIONS
13:32:29  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29  21  BEGIN
13:32:29  22  
13:32:29  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V20.CREATE_ADDRESS(
13:32:29  24  	  out_address_id      => out_address_id,
13:32:29  25  	  in_address_id       => null,
13:32:29  26  	  in_address1	      => in_address1,
13:32:29  27  	  in_address2	      => in_address2,
13:32:29  28  	  in_city	      => in_city,
13:32:29  29  	  in_state	      => in_state,
13:32:29  30  	  in_postal_code      => in_postal_code,
13:32:29  31  	  in_country	      => in_country,
13:32:29  32  	  in_created_by       => in_created_by
13:32:29  33  	);
13:32:29  34  
13:32:29  35  END CREATE_ADDRESS;
13:32:29  36  
13:32:29  37  PROCEDURE UPDATE_ADDRESS(
13:32:29  38  /*
13:32:29  39  Throws exceptions:
13:32:29  40  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  41  */
13:32:29  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
13:32:29  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
13:32:29  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
13:32:29  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
13:32:29  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
13:32:29  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:29  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
13:32:29  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
13:32:29  50  ) AS
13:32:29  51  BEGIN
13:32:29  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V20.UPDATE_ADDRESS(
13:32:29  53  	  in_address_id 	=> in_address_id,
13:32:29  54  	  in_address1		=> in_address1,
13:32:29  55  	  in_address2		=> in_address2,
13:32:29  56  	  in_city		=> in_city,
13:32:29  57  	  in_state		=> in_state,
13:32:29  58  	  in_postal_code	=> in_postal_code,
13:32:29  59  	  in_country		=> in_country,
13:32:29  60  	  in_updated_by 	=> in_updated_by
13:32:29  61  	);
13:32:29  62  END UPDATE_ADDRESS;
13:32:29  63  
13:32:29  64  PROCEDURE GET_ADDRESS (
13:32:29  65  /*
13:32:29  66  Throws exceptions:
13:32:29  67  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  68  */
13:32:29  69  	  in_id 		IN ADDRESS.ID%TYPE,
13:32:29  70  	  out_result_set	OUT SYS_REFCURSOR
13:32:29  71  ) AS
13:32:29  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
13:32:29  73  BEGIN
13:32:29  74  
13:32:29  75  OPEN out_result_set FOR
13:32:29  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
13:32:29  77  
13:32:29  78  END GET_ADDRESS;
13:32:29  79  
13:32:29  80  END PROCS_ADDRESS_V20;
13:32:29  81  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
13:32:29   4  	in_invoice_id		  IN NUMBER,
13:32:29   5  	in_adjustment_reason	  IN VARCHAR2,
13:32:29   6  	in_is_credit		  IN NUMBER,
13:32:29   7  	in_charge_id		  IN NUMBER,
13:32:29   8  	in_business_date	  IN DATE,
13:32:29   9  	in_created_by		  IN VARCHAR2,
13:32:29  10  	out_invoice_adjustment_id OUT NUMBER
13:32:29  11  ) AS
13:32:29  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
13:32:29  13  -- VARIABLES
13:32:29  14  var_current_date	    DATE := SYSDATE;
13:32:29  15  var_new_entity_id     NUMBER;
13:32:29  16  var_inv_adj_reason_id NUMBER;
13:32:29  17  -- EXCEPTIONS
13:32:29  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
13:32:29  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
13:32:29  20  BEGIN
13:32:29  21  
13:32:29  22  	IF in_is_credit != GLOBAL_CONSTANTS_V20.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:29  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
13:32:29  24  	END IF;
13:32:29  25  
13:32:29  26  	BEGIN
13:32:29  27  	  SELECT
13:32:29  28  	    ID into var_inv_adj_reason_id
13:32:29  29  	  FROM
13:32:29  30  	    INVOICE_ADJUSTMENT_REASON
13:32:29  31  	  WHERE
13:32:29  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
13:32:29  33  	  EXCEPTION
13:32:29  34  	    WHEN NO_DATA_FOUND THEN
13:32:29  35  	      RAISE DAB_ADJUSTMENT_REASON;
13:32:29  36  	END;
13:32:29  37  
13:32:29  38  	SELECT
13:32:29  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
13:32:29  40  	FROM
13:32:29  41  	  DUAL;
13:32:29  42  
13:32:29  43  	INSERT INTO INVOICE_ADJUSTMENT (
13:32:29  44  	  ID,
13:32:29  45  	  INVOICE_ID,
13:32:29  46  	  INVOICE_ADJUSTMENT_REASON_ID,
13:32:29  47  	  IS_CREDIT,
13:32:29  48  	  CHARGE_ID,
13:32:29  49  	  ADJUSTMENT_DATE,
13:32:29  50  	  CREATE_DATE,
13:32:29  51  	  CREATED_BY,
13:32:29  52  	  UPDATE_DATE,
13:32:29  53  	  UPDATED_BY
13:32:29  54  	)
13:32:29  55  	VALUES (
13:32:29  56  	  var_new_entity_id,
13:32:29  57  	  in_invoice_id,
13:32:29  58  	  var_inv_adj_reason_id,
13:32:29  59  	  in_is_credit,
13:32:29  60  	  in_charge_id,
13:32:29  61  	  in_business_date,
13:32:29  62  	  var_current_date,
13:32:29  63  	  in_created_by,
13:32:29  64  	  var_current_date,
13:32:29  65  	  in_created_by
13:32:29  66  	);
13:32:29  67  
13:32:29  68  	out_invoice_adjustment_id := var_new_entity_id;
13:32:29  69  
13:32:29  70  EXCEPTION
13:32:29  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
13:32:29  72  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29  73  	  SPROC_NAME, 'Bad in_is_credit value');
13:32:29  74  WHEN DAB_ADJUSTMENT_REASON THEN
13:32:29  75  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29  76  	  SPROC_NAME, 'Bad adjustment reason');
13:32:29  77  WHEN OTHERS THEN
13:32:29  78  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29  80  END CREATE_INVOICE_ADJUSTMENT;
13:32:29  81  
13:32:29  82  /******************************************************************************/
13:32:29  83  
13:32:29  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
13:32:29  85  	  in_invoice_id 	    IN NUMBER,
13:32:29  86  	  in_original_charge_id     IN NUMBER,
13:32:29  87  	  in_charge_id		    IN NUMBER,
13:32:29  88  	  in_updated_by 	    IN VARCHAR2
13:32:29  89  ) AS
13:32:29  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
13:32:29  91  var_invoice_adjustment_id NUMBER;
13:32:29  92  BEGIN
13:32:29  93  	SELECT
13:32:29  94  	  id into var_invoice_adjustment_id
13:32:29  95  	FROM
13:32:29  96  	  INVOICE_ADJUSTMENT
13:32:29  97  	WHERE INVOICE_ID = in_invoice_id
13:32:29  98  	      AND CHARGE_ID = in_original_charge_id;
13:32:29  99  
13:32:29 100  	--create history
13:32:29 101  	PROCS_HISTORY_V20.CREATE_INVOICE_ADJ_HISTORY(
13:32:29 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
13:32:29 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29 104  	);
13:32:29 105  
13:32:29 106  	UPDATE INVOICE_ADJUSTMENT
13:32:29 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
13:32:29 108  	WHERE ID = var_invoice_adjustment_id;
13:32:29 109  
13:32:29 110  EXCEPTION
13:32:29 111  WHEN NO_DATA_FOUND THEN
13:32:29 112  	    NULL;
13:32:29 113  END UPDATE_INVOICE_ADJUSTMENT;
13:32:29 114  
13:32:29 115  /******************************************************************************/
13:32:29 116  
13:32:29 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
13:32:29 118  	in_line_item_id 	    IN NUMBER,
13:32:29 119  	in_invoice_adjustment_id    IN NUMBER,
13:32:29 120  	in_amount		    IN NUMBER,
13:32:29 121  	in_tax			    IN NUMBER,
13:32:29 122  	in_discount		    IN NUMBER,
13:32:29 123  	in_created_by		    IN VARCHAR2,
13:32:29 124  	out_line_item_adjustment_id OUT NUMBER
13:32:29 125  ) AS
13:32:29 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
13:32:29 127  -- VARIABLES
13:32:29 128  var_current_date DATE := SYSDATE;
13:32:29 129  var_new_entity_id NUMBER;
13:32:29 130  BEGIN
13:32:29 131  
13:32:29 132  	SELECT
13:32:29 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
13:32:29 134  	FROM
13:32:29 135  	  DUAL;
13:32:29 136  
13:32:29 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
13:32:29 138  	  ID,
13:32:29 139  	  LINE_ITEM_ID,
13:32:29 140  	  INVOICE_ADJUSTMENT_ID,
13:32:29 141  	  AMOUNT,
13:32:29 142  	  TAX,
13:32:29 143  	  DISCOUNT,
13:32:29 144  	  CREATE_DATE,
13:32:29 145  	  CREATED_BY
13:32:29 146  	)
13:32:29 147  	VALUES (
13:32:29 148  	  var_new_entity_id,
13:32:29 149  	  in_line_item_id,
13:32:29 150  	  in_invoice_adjustment_id,
13:32:29 151  	  in_amount,
13:32:29 152  	  in_tax,
13:32:29 153  	  in_discount,
13:32:29 154  	  var_current_date,
13:32:29 155  	  in_created_by
13:32:29 156  	);
13:32:29 157  
13:32:29 158  	out_line_item_adjustment_id := var_new_entity_id;
13:32:29 159  
13:32:29 160  EXCEPTION
13:32:29 161  WHEN OTHERS THEN
13:32:29 162  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 164  END CREATE_LINE_ITEM_ADJUSTMENT;
13:32:29 165  
13:32:29 166  /******************************************************************************/
13:32:29 167  
13:32:29 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
13:32:29 169  	in_tax_id		   IN NUMBER,
13:32:29 170  	in_line_item_adjustment_id IN NUMBER,
13:32:29 171  	in_amount		   IN NUMBER,
13:32:29 172  	in_created_by		   IN VARCHAR2,
13:32:29 173  	out_tax_adjustment_id	   OUT NUMBER
13:32:29 174  ) AS
13:32:29 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
13:32:29 176  -- VARIABLES
13:32:29 177  var_current_date DATE := SYSDATE;
13:32:29 178  var_new_entity_id NUMBER;
13:32:29 179  BEGIN
13:32:29 180  
13:32:29 181  	SELECT
13:32:29 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
13:32:29 183  	FROM
13:32:29 184  	  DUAL;
13:32:29 185  
13:32:29 186  	INSERT INTO TAX_ADJUSTMENT (
13:32:29 187  	  ID,
13:32:29 188  	  TAX_ID,
13:32:29 189  	  LINE_ITEM_ADJUSTMENT_ID,
13:32:29 190  	  AMOUNT,
13:32:29 191  	  CREATE_DATE,
13:32:29 192  	  CREATED_BY
13:32:29 193  	)
13:32:29 194  	VALUES (
13:32:29 195  	  var_new_entity_id,
13:32:29 196  	  in_tax_id,
13:32:29 197  	  in_line_item_adjustment_id,
13:32:29 198  	  in_amount,
13:32:29 199  	  var_current_date,
13:32:29 200  	  in_created_by
13:32:29 201  	);
13:32:29 202  
13:32:29 203  	out_tax_adjustment_id := var_new_entity_id;
13:32:29 204  
13:32:29 205  EXCEPTION
13:32:29 206  WHEN OTHERS THEN
13:32:29 207  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 209  END CREATE_TAX_ADJUSTMENT;
13:32:29 210  
13:32:29 211  /******************************************************************************/
13:32:29 212  
13:32:29 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
13:32:29 214  	in_discount_id		   NUMBER,
13:32:29 215  	in_line_item_id 	   NUMBER,
13:32:29 216  	in_line_item_adjustment_id IN NUMBER,
13:32:29 217  	in_amount		   IN NUMBER,
13:32:29 218  	in_created_by		   IN VARCHAR2,
13:32:29 219  	out_discount_li_id	   OUT NUMBER
13:32:29 220  ) AS
13:32:29 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
13:32:29 222  -- VARIABLES
13:32:29 223  var_current_date DATE := SYSDATE;
13:32:29 224  var_new_entity_id NUMBER;
13:32:29 225  BEGIN
13:32:29 226  
13:32:29 227  	SELECT
13:32:29 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
13:32:29 229  	FROM
13:32:29 230  	  DUAL;
13:32:29 231  
13:32:29 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
13:32:29 233  	  ID,
13:32:29 234  	  DISCOUNT_ID,
13:32:29 235  	  LINE_ITEM_ID,
13:32:29 236  	  LINE_ITEM_ADJUSTMENT_ID,
13:32:29 237  	  AMOUNT,
13:32:29 238  	  CREATE_DATE,
13:32:29 239  	  CREATED_BY
13:32:29 240  	)
13:32:29 241  	VALUES (
13:32:29 242  	  var_new_entity_id,
13:32:29 243  	  in_discount_id,
13:32:29 244  	  in_line_item_id,
13:32:29 245  	  in_line_item_adjustment_id,
13:32:29 246  	  in_amount,
13:32:29 247  	  var_current_date,
13:32:29 248  	  in_created_by
13:32:29 249  	);
13:32:29 250  
13:32:29 251  	out_discount_li_id := var_new_entity_id;
13:32:29 252  
13:32:29 253  EXCEPTION
13:32:29 254  WHEN OTHERS THEN
13:32:29 255  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
13:32:29 258  
13:32:29 259  END PROCS_ADJUSTMENTS_V20;
13:32:29 260  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.06
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE GET_SUB_ADX_INFO (
13:32:29   4  /*
13:32:29   5  Throws exceptions:
13:32:29   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29   7  */
13:32:29   8  	out_result_set	    OUT SYS_REFCURSOR,
13:32:29   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
13:32:29  10  ) AS
13:32:29  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
13:32:29  12  BEGIN
13:32:29  13  OPEN out_result_set FOR
13:32:29  14  SELECT /*+ FIRST_ROWS(5) */
13:32:29  15  	s.offer_chain_id,
13:32:29  16  	s.create_date,
13:32:29  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
13:32:29  18  	ocmd.value,
13:32:29  19  	a.group_id,
13:32:29  20  	s.id subscription_id
13:32:29  21  FROM
13:32:29  22  	account a,
13:32:29  23  	subscription s,
13:32:29  24  	offer_chain_meta_data ocmd,
13:32:29  25  	group_account g,
13:32:29  26  	subscription_share ss,
13:32:29  27  	account a2
13:32:29  28  WHERE
13:32:29  29  	s.account_id = a.id and
13:32:29  30  	s.offer_chain_id = ocmd.offer_chain_id and
13:32:29  31  	g.id = ss.group_account_id and
13:32:29  32  	ss.borrower_account_id = a2.id and
13:32:29  33  	s.id = g.subscription_id and
13:32:29  34  	ocmd.name = 'ADX_BUNDLE' and
13:32:29  35  	a2.group_id = in_group_id and
13:32:29  36  	rownum < 5
13:32:29  37  union all
13:32:29  38  SELECT /*+ FIRST_ROWS(5) */
13:32:29  39  	s.offer_chain_id,
13:32:29  40  	s.create_date,
13:32:29  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
13:32:29  42  	ocmd.value,
13:32:29  43  	a.group_id,
13:32:29  44  	s.id subscription_id
13:32:29  45  FROM
13:32:29  46  	account a,
13:32:29  47  	subscription s,
13:32:29  48  	offer_chain_meta_data ocmd
13:32:29  49  WHERE
13:32:29  50  	s.account_id = a.id and
13:32:29  51  	s.offer_chain_id = ocmd.offer_chain_id and
13:32:29  52  	ocmd.name = 'ADX_BUNDLE' and
13:32:29  53  	a.group_id = in_group_id and
13:32:29  54  	rownum < 5
13:32:29  55  ;
13:32:29  56  
13:32:29  57  END GET_SUB_ADX_INFO;
13:32:29  58  
13:32:29  59  END PROCS_ADX_V20;
13:32:29  60  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE ADD_AMAZON_APPSTORE(
13:32:29   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
13:32:29   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:29   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
13:32:29   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
13:32:29   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
13:32:29   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:29  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
13:32:29  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
13:32:29  12  ) AS
13:32:29  13  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE';
13:32:29  14  BEGIN
13:32:29  15  	CORE_OWNER.PROCS_AMAZON_CRU_V20.ADD_AMAZON_APPSTORE(
13:32:29  16  	    in_subscription_id =>  in_subscription_id,
13:32:29  17  	    in_user_id	       =>  in_user_id,
13:32:29  18  	    in_item_type       =>  in_item_type,
13:32:29  19  	    in_start_date      =>  in_start_date,
13:32:29  20  	    in_end_date        =>  in_end_date,
13:32:29  21  	    in_sku	       =>  in_sku,
13:32:29  22  	    in_purchase_token  =>  in_purchase_token,
13:32:29  23  	    in_created_by      =>  in_created_by
13:32:29  24  	);
13:32:29  25  END ADD_AMAZON_APPSTORE;
13:32:29  26  
13:32:29  27  PROCEDURE GET_ACTIVE_AMAZON_APPSTORE(
13:32:29  28  	in_user_id IN AMAZON_APPSTORE.USER_ID%TYPE,
13:32:29  29  	in_sku	   IN AMAZON_APPSTORE.SKU%TYPE,
13:32:29  30  	out_data   OUT SYS_REFCURSOR
13:32:29  31  ) AS
13:32:29  32  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_ACTIVE_AMAZON_APPSTORE';
13:32:29  33  BEGIN
13:32:29  34  	OPEN out_data FOR
13:32:29  35  	SELECT
13:32:29  36  	  AMAZON_APPSTORE.ID,
13:32:29  37  	  AMAZON_APPSTORE.SUBSCRIPTION_ID,
13:32:29  38  	  AMAZON_APPSTORE.USER_ID,
13:32:29  39  	  AMAZON_APPSTORE.ITEM_TYPE,
13:32:29  40  	  AMAZON_APPSTORE.START_DATE,
13:32:29  41  	  AMAZON_APPSTORE.END_DATE,
13:32:29  42  	  AMAZON_APPSTORE.SKU,
13:32:29  43  	  AMAZON_APPSTORE.PURCHASE_TOKEN,
13:32:29  44  	  AMAZON_APPSTORE.CREATE_DATE,
13:32:29  45  	  AMAZON_APPSTORE.CREATED_BY,
13:32:29  46  	  AMAZON_APPSTORE.UPDATE_DATE,
13:32:29  47  	  AMAZON_APPSTORE.UPDATED_BY
13:32:29  48  	FROM AMAZON_APPSTORE
13:32:29  49  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE.SUBSCRIPTION_ID
13:32:29  50  	WHERE AMAZON_APPSTORE.USER_ID = in_user_id AND
13:32:29  51  	      AMAZON_APPSTORE.SKU     = in_sku AND
13:32:29  52  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
13:32:29  53  END GET_ACTIVE_AMAZON_APPSTORE;
13:32:29  54  
13:32:29  55  PROCEDURE CREATE_AMAZON_SUB(
13:32:29  56  /*
13:32:29  57  Throws exceptions:
13:32:29  58  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  59  */
13:32:29  60  	  out_id	      OUT NUMBER,
13:32:29  61  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
13:32:29  62  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
13:32:29  63  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
13:32:29  64  ) AS
13:32:29  65  -- VARIABLES
13:32:29  66  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
13:32:29  67  -- EXCEPTIONS
13:32:29  68  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29  69  BEGIN
13:32:29  70  
13:32:29  71  	CORE_OWNER.PROCS_AMAZON_CRU_V20.CREATE_AMAZON_SUB(
13:32:29  72  	  out_id	      =>  out_id,
13:32:29  73  	  in_subscription_id  =>  in_subscription_id,
13:32:29  74  	  in_amazon_id	      =>  in_amazon_id,
13:32:29  75  	  in_created_by       =>  in_created_by
13:32:29  76  	);
13:32:29  77  
13:32:29  78  END CREATE_AMAZON_SUB;
13:32:29  79  
13:32:29  80  PROCEDURE GET_ACTIVE_SUB_IDS (
13:32:29  81  /*
13:32:29  82  Throws exceptions:
13:32:29  83  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  84  */
13:32:29  85  	out_result_set	    OUT SYS_REFCURSOR,
13:32:29  86  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
13:32:29  87  ) AS
13:32:29  88  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
13:32:29  89  BEGIN
13:32:29  90  OPEN out_result_set FOR
13:32:29  91  SELECT s.id
13:32:29  92  FROM subscription s, amazon_sub am
13:32:29  93  WHERE
13:32:29  94  	s.id = am.subscription_id
13:32:29  95  	and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:29  96  	and am.amazon_id = in_amazon_id
13:32:29  97  ;
13:32:29  98  
13:32:29  99  END GET_ACTIVE_SUB_IDS;
13:32:29 100  
13:32:29 101  PROCEDURE GET_ACTIVE_GROUP_IDS (
13:32:29 102  /*
13:32:29 103  Throws exceptions:
13:32:29 104  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 105  */
13:32:29 106  	out_result_set	    OUT SYS_REFCURSOR,
13:32:29 107  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
13:32:29 108  ) AS
13:32:29 109  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
13:32:29 110  BEGIN
13:32:29 111  OPEN out_result_set FOR
13:32:29 112  SELECT distinct a.group_id id
13:32:29 113  FROM subscription s, amazon_sub am, account a
13:32:29 114  WHERE
13:32:29 115  	s.id = am.subscription_id
13:32:29 116  	and a.id = s.account_id
13:32:29 117  	and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:29 118  	and am.amazon_id = in_amazon_id
13:32:29 119  ;
13:32:29 120  
13:32:29 121  END GET_ACTIVE_GROUP_IDS;
13:32:29 122  
13:32:29 123  END PROCS_AMAZON_V20;
13:32:29 124  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
13:32:29   2  
13:32:29   3  	/****************************************************************************/
13:32:29   4  
13:32:29   5  	PROCEDURE POPULATE_REQUEST_INFO(
13:32:29   6  	  in_hours_prior    IN	NUMBER,
13:32:29   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
13:32:29   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
13:32:29   9  	) AS
13:32:29  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
13:32:29  11  	var_start_date	    DATE := SYSDATE;
13:32:29  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
13:32:29  13  	var_request_file_id NUMBER := 0;
13:32:29  14  	var_license_count   NUMBER := 0;
13:32:29  15  	var_cc_update_count NUMBER := 0;
13:32:29  16  	BEGIN
13:32:29  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
13:32:29  18  	    INSERT INTO CC_REQUEST_FILE (ID,
13:32:29  19  					 FILE_NAME,
13:32:29  20  					 CC_REQUEST_FILE_STATUS,
13:32:29  21  					 CREATE_DATE,
13:32:29  22  					 CREATED_BY,
13:32:29  23  					 UPDATE_DATE,
13:32:29  24  					 UPDATED_BY)
13:32:29  25  					 VALUES (
13:32:29  26  					 var_request_file_id,
13:32:29  27  					 in_filename,
13:32:29  28  					 'NOT_CREATED',
13:32:29  29  					 var_start_date,
13:32:29  30  					 in_creator,
13:32:29  31  					 var_start_date,
13:32:29  32  					 in_creator);
13:32:29  33  
13:32:29  34  	   FOR record IN (SELECT
13:32:29  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
13:32:29  36  			  FROM
13:32:29  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
13:32:29  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
13:32:29  39  			  WHERE
13:32:29  40  			    s.INSTRUMENT_TYPE_ID	 = 1
13:32:29  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
13:32:29  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
13:32:29  43  			    AND l.LICENSE_STATUS_ID	 = 2
13:32:29  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
13:32:29  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
13:32:29  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
13:32:29  47  	   LOOP
13:32:29  48  	     var_license_count := 0;
13:32:29  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
13:32:29  50  
13:32:29  51  	     IF var_license_count = 0 THEN
13:32:29  52  		INSERT INTO CC_UPDATE (ID,
13:32:29  53  				       CREDIT_CARD_ID,
13:32:29  54  				       LICENSE_ID,
13:32:29  55  				       CC_UPDATE_STATUS,
13:32:29  56  				       CC_REQUEST_FILE_ID,
13:32:29  57  				       CREATE_DATE,
13:32:29  58  				       UPDATE_DATE,
13:32:29  59  				       CREATED_BY,
13:32:29  60  				       UPDATED_BY
13:32:29  61  				       ) VALUES (
13:32:29  62  				       CC_UPDATE_SEQ.NEXTVAL,
13:32:29  63  				       record.CREDIT_CARD_ID,
13:32:29  64  				       record.LICENSE_ID,
13:32:29  65  				       'NOT_ADDED_TO_FILE',
13:32:29  66  				       var_request_file_id,
13:32:29  67  				       var_start_date,
13:32:29  68  				       var_start_date,
13:32:29  69  				       in_creator,
13:32:29  70  				       in_creator
13:32:29  71  				       );
13:32:29  72  	     END IF;
13:32:29  73  	   END LOOP;
13:32:29  74  
13:32:29  75  	   SELECT COUNT(1) INTO var_cc_update_count
13:32:29  76  	   FROM CC_UPDATE
13:32:29  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
13:32:29  78  	   IF var_cc_update_count <= 0 THEN
13:32:29  79  	     UPDATE CC_REQUEST_FILE
13:32:29  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
13:32:29  81  	     WHERE ID = var_request_file_id;
13:32:29  82  	   END IF;
13:32:29  83  
13:32:29  84  	END POPULATE_REQUEST_INFO;
13:32:29  85  
13:32:29  86  	/****************************************************************************/
13:32:29  87  
13:32:29  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
13:32:29  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:29  90  	  in_start	     IN NUMBER,
13:32:29  91  	  in_end	     IN NUMBER,
13:32:29  92  	  out_result_set     OUT SYS_REFCURSOR
13:32:29  93  	) AS
13:32:29  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
13:32:29  95  	var_range_diff	    NUMBER := 0;
13:32:29  96  	var_upper_bond_diff NUMBER := 0;
13:32:29  97  	var_l_start	    NUMBER := 0;
13:32:29  98  	var_l_end	    NUMBER := 0;
13:32:29  99  	BEGIN
13:32:29 100  	  --Normalize the end points [START]
13:32:29 101  	  IF (in_start IS NULL OR in_start < 0) Then
13:32:29 102  	    var_l_start := 0;
13:32:29 103  	  ELSE
13:32:29 104  	    var_l_start := in_start;
13:32:29 105  	  END IF;
13:32:29 106  
13:32:29 107  	  IF (in_end IS NULL) Then
13:32:29 108  	    var_l_end := 500;
13:32:29 109  	  ELSE
13:32:29 110  	    var_l_end := in_end;
13:32:29 111  	  END IF;
13:32:29 112  
13:32:29 113  	  var_l_start := var_l_start + 1;
13:32:29 114  	  var_l_end   := var_l_end   + 1;
13:32:29 115  
13:32:29 116  	  var_range_diff  := var_l_end - var_l_start;
13:32:29 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
13:32:29 118  
13:32:29 119  	  IF (var_upper_bond_diff > 0) Then
13:32:29 120  	    var_l_end := var_l_end - var_upper_bond_diff;
13:32:29 121  	  END IF;
13:32:29 122  	  --Normalize the end points [END]
13:32:29 123  
13:32:29 124  	  OPEN out_result_set FOR
13:32:29 125  	    SELECT CHASE_PROFILE_ID FROM
13:32:29 126  	      (SELECT rownum rnum, q.* FROM
13:32:29 127  		 (SELECT
13:32:29 128  		    cc.CHASE_PROFILE_ID
13:32:29 129  		  FROM
13:32:29 130  		    CREDIT_CARD cc,
13:32:29 131  		    CC_UPDATE ccu
13:32:29 132  		  WHERE
13:32:29 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
13:32:29 134  		    AND ccu.CREDIT_CARD_ID = cc.id
13:32:29 135  		) Q
13:32:29 136  	      WHERE rownum <= var_l_end)
13:32:29 137  	    WHERE rnum >= var_l_Start;
13:32:29 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
13:32:29 139  
13:32:29 140  	/****************************************************************************/
13:32:29 141  
13:32:29 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
13:32:29 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
13:32:29 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
13:32:29 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
13:32:29 146  	)AS
13:32:29 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
13:32:29 148  	BEGIN
13:32:29 149  	  UPDATE CC_REQUEST_FILE
13:32:29 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
13:32:29 151  	      UPDATE_DATE = SYSDATE,
13:32:29 152  	      UPDATED_BY  = in_updated_by
13:32:29 153  	  WHERE ID = in_request_file_id;
13:32:29 154  	END UPDATE_REQUEST_FILE_STATUS;
13:32:29 155  
13:32:29 156  	/****************************************************************************/
13:32:29 157  
13:32:29 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
13:32:29 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:29 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:29 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
13:32:29 162  	) AS
13:32:29 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
13:32:29 164  	BEGIN
13:32:29 165  	  UPDATE CC_UPDATE
13:32:29 166  	  SET CC_UPDATE_STATUS = in_status,
13:32:29 167  	      UPDATE_DATE      = SYSDATE,
13:32:29 168  	      UPDATED_BY       = in_updated_by
13:32:29 169  	  WHERE
13:32:29 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
13:32:29 171  	END UPDATE_CC_REQUEST_STATUS;
13:32:29 172  
13:32:29 173  	/****************************************************************************/
13:32:29 174  
13:32:29 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
13:32:29 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
13:32:29 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
13:32:29 178  	  out_request_files   OUT SYS_REFCURSOR
13:32:29 179  	) AS
13:32:29 180  	var_older_than_hours NUMBER := in_older_than_hours;
13:32:29 181  	BEGIN
13:32:29 182  	 IF (var_older_than_hours IS NULL) THEN
13:32:29 183  	   var_older_than_hours := -288;
13:32:29 184  	 END IF;
13:32:29 185  
13:32:29 186  	 OPEN out_request_files FOR
13:32:29 187  	 SELECT
13:32:29 188  	   ID,
13:32:29 189  	   FILE_NAME
13:32:29 190  	 FROM
13:32:29 191  	   CC_REQUEST_FILE
13:32:29 192  	 WHERE
13:32:29 193  	   CC_REQUEST_FILE_STATUS = in_status
13:32:29 194  	 AND
13:32:29 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
13:32:29 196  	END REQUEST_FILES_BY_STATUS;
13:32:29 197  
13:32:29 198  	/****************************************************************************/
13:32:29 199  
13:32:29 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
13:32:29 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
13:32:29 202  	  out_count OUT NUMBER
13:32:29 203  	) AS
13:32:29 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
13:32:29 205  	BEGIN
13:32:29 206  	  SELECT COUNT(1) INTO out_count
13:32:29 207  	  FROM CC_UPDATE
13:32:29 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
13:32:29 209  	END COUNT_BY_REQUEST_FILE_ID;
13:32:29 210  
13:32:29 211  	/****************************************************************************/
13:32:29 212  
13:32:29 213  	PROCEDURE GET_CREDIT_CARD_INFO (
13:32:29 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
13:32:29 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
13:32:29 216  	  out_card_info        OUT SYS_REFCURSOR
13:32:29 217  	) AS
13:32:29 218  	BEGIN
13:32:29 219  	  OPEN out_card_info FOR
13:32:29 220  	  SELECT
13:32:29 221  	    u.LICENSE_ID,
13:32:29 222  	    cc.ACCOUNT_ID,
13:32:29 223  	    cc.ID CREDIT_CARD_ID,
13:32:29 224  	    cc.CHASE_PROFILE_ID,
13:32:29 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
13:32:29 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
13:32:29 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
13:32:29 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
13:32:29 229  	    u.ID CC_UPDATE_ID,
13:32:29 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
13:32:29 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
13:32:29 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
13:32:29 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
13:32:29 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
13:32:29 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
13:32:29 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
13:32:29 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
13:32:29 238  	  ORDER BY cc.UPDATE_DATE DESC;
13:32:29 239  	END GET_CREDIT_CARD_INFO;
13:32:29 240  
13:32:29 241  	/****************************************************************************/
13:32:29 242  
13:32:29 243  	PROCEDURE UPDATE_CC_UPDATE(
13:32:29 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
13:32:29 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:29 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
13:32:29 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
13:32:29 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
13:32:29 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
13:32:29 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
13:32:29 251  	) AS
13:32:29 252  	BEGIN
13:32:29 253  	  UPDATE CC_UPDATE
13:32:29 254  	  SET CC_UPDATE_STATUS = in_status,
13:32:29 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
13:32:29 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
13:32:29 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
13:32:29 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
13:32:29 259  	  UPDATE_DATE = SYSDATE,
13:32:29 260  	  UPDATED_BY = in_updated_by
13:32:29 261  	  WHERE ID = in_id;
13:32:29 262  	END UPDATE_CC_UPDATE;
13:32:29 263  
13:32:29 264  	/****************************************************************************/
13:32:29 265  
13:32:29 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
13:32:29 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
13:32:29 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
13:32:29 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
13:32:29 270  	) AS
13:32:29 271  	BEGIN
13:32:29 272  	  UPDATE CC_UPDATE
13:32:29 273  	  SET CC_UPDATE_STATUS = in_status,
13:32:29 274  	  UPDATE_DATE = SYSDATE,
13:32:29 275  	  UPDATED_BY = in_updated_by
13:32:29 276  	  WHERE ID = in_id;
13:32:29 277  	END UPDATE_CC_UPDATE_STATUS;
13:32:29 278  
13:32:29 279  	/****************************************************************************/
13:32:29 280  
13:32:29 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
13:32:29 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
13:32:29 283  	  out_request_file     OUT SYS_REFCURSOR
13:32:29 284  	) AS
13:32:29 285  	BEGIN
13:32:29 286  	  OPEN out_request_file FOR
13:32:29 287  	  SELECT ID, FILE_NAME
13:32:29 288  	  FROM CC_REQUEST_FILE
13:32:29 289  	  WHERE FILE_NAME = in_request_filename;
13:32:29 290  	END GET_REQUEST_FILE_BY_FILENAME;
13:32:29 291  
13:32:29 292  	/****************************************************************************/
13:32:29 293  
13:32:29 294  	PROCEDURE SUSPEND_CREDIT_CARD (
13:32:29 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
13:32:29 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:29 297  	) AS
13:32:29 298  	BEGIN
13:32:29 299  	  -- Create history
13:32:29 300  	  PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
13:32:29 301  	      in_credit_card_id 	   => in_credit_card_id,
13:32:29 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29 303  	  );
13:32:29 304  
13:32:29 305  	  UPDATE CREDIT_CARD
13:32:29 306  	  SET UPDATE_DATE = SYSDATE,
13:32:29 307  	  UPDATED_BY = in_updated_by,
13:32:29 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
13:32:29 309  	  WHERE ID = in_credit_card_id;
13:32:29 310  	END SUSPEND_CREDIT_CARD;
13:32:29 311  
13:32:29 312  	/****************************************************************************/
13:32:29 313  
13:32:29 314  	PROCEDURE UPDATE_CREDIT_CARD (
13:32:29 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
13:32:29 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:29 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
13:32:29 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:29 319  	) AS
13:32:29 320  	BEGIN
13:32:29 321  	  -- Create history
13:32:29 322  	  PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
13:32:29 323  	      in_credit_card_id 	   => in_credit_card_id,
13:32:29 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
13:32:29 325  	  );
13:32:29 326  
13:32:29 327  	  UPDATE CREDIT_CARD
13:32:29 328  	  SET UPDATE_DATE = SYSDATE,
13:32:29 329  	  UPDATED_BY = in_updated_by,
13:32:29 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
13:32:29 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
13:32:29 332  	  WHERE ID = in_credit_card_id;
13:32:29 333  	END UPDATE_CREDIT_CARD;
13:32:29 334  
13:32:29 335  	/****************************************************************************/
13:32:29 336  
13:32:29 337  	PROCEDURE COMPLETABLE_REQUESTS (
13:32:29 338  	  out_request_files OUT SYS_REFCURSOR
13:32:29 339  	) AS
13:32:29 340  	BEGIN
13:32:29 341  	  OPEN out_request_files FOR
13:32:29 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
13:32:29 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
13:32:29 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
13:32:29 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
13:32:29 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
13:32:29 347  	  MINUS
13:32:29 348  	  SELECT rf.ID, rf.FILE_NAME
13:32:29 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
13:32:29 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
13:32:29 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
13:32:29 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
13:32:29 353  	END COMPLETABLE_REQUESTS;
13:32:29 354  
13:32:29 355  	/****************************************************************************/
13:32:29 356  
13:32:29 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
13:32:29 358  	  in_max_hours_before_report IN  NUMBER,
13:32:29 359  	  out_request_files	     OUT SYS_REFCURSOR
13:32:29 360  	) AS
13:32:29 361  	BEGIN
13:32:29 362  	  OPEN out_request_files FOR
13:32:29 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
13:32:29 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
13:32:29 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
13:32:29 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
13:32:29 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
13:32:29 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
13:32:29 369  	  MINUS
13:32:29 370  	  SELECT rf.ID, rf.FILE_NAME
13:32:29 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
13:32:29 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
13:32:29 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
13:32:29 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
13:32:29 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
13:32:29 376  	END COMPLETABLE_REQUESTS_W_FAILS;
13:32:29 377  
13:32:29 378  	/****************************************************************************/
13:32:29 379  
13:32:29 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
13:32:29 381  	  in_account_id IN NUMBER,
13:32:29 382  	  out_group_id	OUT NUMBER
13:32:29 383  	) AS
13:32:29 384  	BEGIN
13:32:29 385  	  PROCS_ACCOUNT_V18.GET_GROUP_ID_BY_ACCOUNT_ID(
13:32:29 386  	    in_account_id => in_account_id,
13:32:29 387  	    out_group_id => out_group_id
13:32:29 388  	  );
13:32:29 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
13:32:29 390  
13:32:29 391  	/****************************************************************************/
13:32:29 392  
13:32:29 393  	PROCEDURE GET_LICENSE_BY_ID (
13:32:29 394  	  in_license_id  IN NUMBER,
13:32:29 395  	  out_result_set OUT SYS_REFCURSOR
13:32:29 396  	) AS
13:32:29 397  	BEGIN
13:32:29 398  	  PROCS_LICENSE_V18.GET_LICENSE_BY_ID(
13:32:29 399  	    in_license_id => in_license_id,
13:32:29 400  	    out_result_set => out_result_set
13:32:29 401  	  );
13:32:29 402  	END GET_LICENSE_BY_ID;
13:32:29 403  
13:32:29 404  END PROCS_CUPY;
13:32:29 405  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.18
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE
13:32:29   2  PACKAGE BODY PROCS_ENTITLEMENT_V20 AS
13:32:29   3  
13:32:29   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
13:32:29   5  	  in_subscription_id IN NUMBER,
13:32:29   6  	  out_uri OUT VARCHAR2)
13:32:29   7  	AS
13:32:29   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
13:32:29   9  	  UNKNOWN_ERROR   EXCEPTION;
13:32:29  10  	BEGIN
13:32:29  11  	  SELECT
13:32:29  12  	    POMD.VALUE INTO out_uri
13:32:29  13  	  FROM
13:32:29  14  	     OFFER_PRODUCT_OFFERING OPO,
13:32:29  15  	     PRODUCT_OFFERING PO,
13:32:29  16  	     OFFER_OFFER_CHAIN OOC,
13:32:29  17  	     SUBSCRIPTION S,
13:32:29  18  	     LICENSE LL,
13:32:29  19  	     PRODUCT_OFFERING_META_DATA POMD
13:32:29  20  	  WHERE
13:32:29  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
13:32:29  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
13:32:29  23  	     S.ID = in_subscription_id AND
13:32:29  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
13:32:29  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
13:32:29  26  	     PO.CAPABILITY_ID = 1 AND
13:32:29  27  	     S.ID = LL.SUBSCRIPTION_ID AND
13:32:29  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
13:32:29  29  	     NAME = 'entitlement_uri' AND
13:32:29  30  	     rownum < 2;
13:32:29  31  	EXCEPTION
13:32:29  32  	  WHEN OTHERS THEN
13:32:29  33  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
13:32:29  36  
13:32:29  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
13:32:29  38  	  in_group_id	 IN  NUMBER,
13:32:29  39  	  out_result_set OUT SYS_REFCURSOR)
13:32:29  40  	AS
13:32:29  41  	  -- CONSTANTS
13:32:29  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
13:32:29  43  	  -- EXCEPTIONS
13:32:29  44  	  NOT_FOUND	  EXCEPTION;
13:32:29  45  	  UNKNOWN_ERROR   EXCEPTION;
13:32:29  46  	  -- VARIABLES
13:32:29  47  	  var_subs	  SYS_REFCURSOR;
13:32:29  48  	BEGIN
13:32:29  49  	  OPEN out_result_set FOR
13:32:29  50  
13:32:29  51  	SELECT
13:32:29  52  	  C.CODE NAME,
13:32:29  53  	  C.DESCRIPTION,
13:32:29  54  	  0 INHERITED,
13:32:29  55  	  C.SHAREABLE,
13:32:29  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
13:32:29  57  	FROM
13:32:29  58  	  SUBSCRIPTION SB
13:32:29  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
13:32:29  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
13:32:29  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
13:32:29  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
13:32:29  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
13:32:29  64  	WHERE
13:32:29  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
13:32:29  66  	  AND LIC.START_DATE <= SYSDATE
13:32:29  67  	  AND AC.GROUP_ID = in_group_id
13:32:29  68  	GROUP BY
13:32:29  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
13:32:29  70  UNION ALL
13:32:29  71  	SELECT
13:32:29  72  	  C.CODE NAME,
13:32:29  73  	  C.DESCRIPTION,
13:32:29  74  	  1 INHERITED,
13:32:29  75  	  C.SHAREABLE,
13:32:29  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
13:32:29  77  	FROM
13:32:29  78  	  ACCOUNT BORROWER,
13:32:29  79  	  SUBSCRIPTION S,
13:32:29  80  	  LICENSE LIC,
13:32:29  81  	  OFFER_PRODUCT_OFFERING OPO,
13:32:29  82  	  PRODUCT_OFFERING PO,
13:32:29  83  	  CAPABILITY C,
13:32:29  84  	  GROUP_ACCOUNT GA,
13:32:29  85  	  SUBSCRIPTION_SHARE SS
13:32:29  86  	WHERE
13:32:29  87  	  BORROWER.GROUP_ID = in_group_id
13:32:29  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
13:32:29  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
13:32:29  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
13:32:29  91  	  AND PO.CAPABILITY_ID = C.ID
13:32:29  92  	  AND GA.SUBSCRIPTION_ID = S.ID
13:32:29  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
13:32:29  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
13:32:29  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
13:32:29  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
13:32:29  97  	  AND C.SHAREABLE = 1
13:32:29  98  	GROUP BY
13:32:29  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
13:32:29 100  
13:32:29 101  	EXCEPTION
13:32:29 102  	  WHEN OTHERS THEN
13:32:29 103  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 105  	END GET_ALL_ENTITLEMENTS;
13:32:29 106  
13:32:29 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
13:32:29 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:29 109  	  out_result_set OUT SYS_REFCURSOR)
13:32:29 110  	AS
13:32:29 111  	  -- CONSTANTS
13:32:29 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
13:32:29 113  	  -- EXCEPTIONS
13:32:29 114  	  NOT_FOUND	  EXCEPTION;
13:32:29 115  	  UNKNOWN_ERROR   EXCEPTION;
13:32:29 116  	  -- VARIABLES
13:32:29 117  	  var_subs	  SYS_REFCURSOR;
13:32:29 118  	BEGIN
13:32:29 119  	  OPEN out_result_set FOR
13:32:29 120  
13:32:29 121  	      SELECT
13:32:29 122  		c.code NAME,
13:32:29 123  		C.DESCRIPTION,
13:32:29 124  		0 INHERITED,
13:32:29 125  		C.SHAREABLE,
13:32:29 126  		sysdate as EXPIRES
13:32:29 127  	      FROM
13:32:29 128  		offer_offer_chain ooc,
13:32:29 129  		offer o,
13:32:29 130  		offer_product_offering opo,
13:32:29 131  		product_offering po,
13:32:29 132  		capability c
13:32:29 133  	      WHERE
13:32:29 134  		o.id = ooc.offer_id AND
13:32:29 135  		opo.offer_id = o.id AND
13:32:29 136  		po.id = opo.product_offering_id AND
13:32:29 137  		c.id = po.capability_id AND
13:32:29 138  		c.id !=0 AND
13:32:29 139  		ooc.offer_chain_id =
13:32:29 140  		(SELECT
13:32:29 141  		    ocmd.offer_chain_id
13:32:29 142  		  FROM
13:32:29 143  		      offer_chain_meta_data ocmd
13:32:29 144  		  WHERE
13:32:29 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
13:32:29 146  		      ocmd.value = in_product_id AND
13:32:29 147  		      rownum < 2
13:32:29 148  		)
13:32:29 149  	      ;
13:32:29 150  
13:32:29 151  	EXCEPTION
13:32:29 152  	  WHEN OTHERS THEN
13:32:29 153  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 155  	END GET_ITUNES_ENTITLEMENTS;
13:32:29 156  
13:32:29 157  END PROCS_ENTITLEMENT_V20;
13:32:29 158  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE CREATE_ADDRESS_HISTORY(
13:32:29   4  	in_address_id		     IN NUMBER,
13:32:29   5  	in_system_activity_reason_id IN NUMBER
13:32:29   6  ) AS
13:32:29   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
13:32:29   8  -- VARIABLES
13:32:29   9  var_address1    ADDRESS.ADDRESS1%TYPE;
13:32:29  10  var_address2    ADDRESS.ADDRESS2%TYPE;
13:32:29  11  var_city	      ADDRESS.CITY%TYPE;
13:32:29  12  var_state       ADDRESS.STATE%TYPE;
13:32:29  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
13:32:29  14  var_country     ADDRESS.COUNTRY%TYPE;
13:32:29  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
13:32:29  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
13:32:29  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
13:32:29  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
13:32:29  19  -- EXCEPTIONS
13:32:29  20  BAD_ADDRESS_ID	     EXCEPTION;
13:32:29  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29  23  BEGIN
13:32:29  24  
13:32:29  25  	BEGIN
13:32:29  26  	  SELECT
13:32:29  27  	    ADDRESS.ADDRESS1,
13:32:29  28  	    ADDRESS.ADDRESS2,
13:32:29  29  	    ADDRESS.CITY,
13:32:29  30  	    ADDRESS.STATE,
13:32:29  31  	    ADDRESS.POSTAL_CODE,
13:32:29  32  	    ADDRESS.COUNTRY,
13:32:29  33  	    ADDRESS.CREATED_BY,
13:32:29  34  	    ADDRESS.CREATE_DATE,
13:32:29  35  	    ADDRESS.UPDATED_BY,
13:32:29  36  	    ADDRESS.UPDATE_DATE
13:32:29  37  	    into
13:32:29  38  	    var_address1,
13:32:29  39  	    var_address2,
13:32:29  40  	    var_city,
13:32:29  41  	    var_state,
13:32:29  42  	    var_postal_code,
13:32:29  43  	    var_country,
13:32:29  44  	    var_created_by,
13:32:29  45  	    var_create_date,
13:32:29  46  	    var_updated_by,
13:32:29  47  	    var_update_date
13:32:29  48  	  FROM
13:32:29  49  	    ADDRESS
13:32:29  50  	  WHERE
13:32:29  51  	    ADDRESS.ID = in_address_id;
13:32:29  52  	  EXCEPTION
13:32:29  53  	    WHEN NO_DATA_FOUND THEN
13:32:29  54  	      RAISE BAD_ADDRESS_ID;
13:32:29  55  	END;
13:32:29  56  
13:32:29  57  	BEGIN
13:32:29  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ADDRESS_HISTORY(
13:32:29  59  	    in_address_id,
13:32:29  60  	    in_system_activity_reason_id,
13:32:29  61  	    var_address1,
13:32:29  62  	    var_address2,
13:32:29  63  	    var_city,
13:32:29  64  	    var_state,
13:32:29  65  	    var_postal_code,
13:32:29  66  	    var_country,
13:32:29  67  	    var_created_by,
13:32:29  68  	    var_create_date,
13:32:29  69  	    var_updated_by,
13:32:29  70  	    var_update_date
13:32:29  71  	  );
13:32:29  72  	  EXCEPTION
13:32:29  73  	    WHEN OTHERS THEN
13:32:29  74  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29  75  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29  76  	END;
13:32:29  77  
13:32:29  78  EXCEPTION
13:32:29  79  WHEN BAD_ADDRESS_ID THEN
13:32:29  80  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29  81  	  SPROC_NAME, 'Bad recipientAddress id');
13:32:29  82  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29  83  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29  85  WHEN OTHERS THEN
13:32:29  86  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29  88  END CREATE_ADDRESS_HISTORY;
13:32:29  89  
13:32:29  90  /********************************************************************/
13:32:29  91  
13:32:29  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
13:32:29  93  	in_account_id		     IN NUMBER,
13:32:29  94  	in_system_activity_reason_id IN NUMBER
13:32:29  95  ) AS
13:32:29  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
13:32:29  97  -- VARIABLES
13:32:29  98  var_account_status_id  NUMBER;
13:32:29  99  var_suspend_date	     DATE;
13:32:29 100  var_group_id	     NUMBER;
13:32:29 101  var_instrument_type_id NUMBER;
13:32:29 102  var_instrument_id      NUMBER;
13:32:29 103  var_updated_by	     VARCHAR2(255);
13:32:29 104  var_update_date	     DATE;
13:32:29 105  -- EXCEPTIONS
13:32:29 106  BAD_ACCOUNT_ID	     EXCEPTION;
13:32:29 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 109  BEGIN
13:32:29 110  
13:32:29 111  	BEGIN
13:32:29 112  	  SELECT
13:32:29 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
13:32:29 114  	    ACCOUNT.GROUP_ID,
13:32:29 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
13:32:29 116  	    ACCOUNT.INSTRUMENT_ID,
13:32:29 117  	    ACCOUNT.UPDATED_BY,
13:32:29 118  	    ACCOUNT.UPDATE_DATE
13:32:29 119  	    into
13:32:29 120  	    var_account_status_id,
13:32:29 121  	    var_group_id,
13:32:29 122  	    var_instrument_type_id,
13:32:29 123  	    var_instrument_id,
13:32:29 124  	    var_updated_by,
13:32:29 125  	    var_update_date
13:32:29 126  	  FROM
13:32:29 127  	    ACCOUNT
13:32:29 128  	  WHERE
13:32:29 129  	    ACCOUNT.ID = in_account_id;
13:32:29 130  	  EXCEPTION
13:32:29 131  	    WHEN NO_DATA_FOUND THEN
13:32:29 132  	      RAISE BAD_ACCOUNT_ID;
13:32:29 133  	END;
13:32:29 134  
13:32:29 135  	BEGIN
13:32:29 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ACCOUNT_HISTORY(
13:32:29 137  	    in_account_id,
13:32:29 138  	    var_suspend_date,
13:32:29 139  	    var_group_id,
13:32:29 140  	    var_updated_by,
13:32:29 141  	    var_update_date,
13:32:29 142  	    in_system_activity_reason_id,
13:32:29 143  	    var_account_status_id,
13:32:29 144  	    var_instrument_type_id,
13:32:29 145  	    var_instrument_id
13:32:29 146  	  );
13:32:29 147  	  EXCEPTION
13:32:29 148  	    WHEN OTHERS THEN
13:32:29 149  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 150  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 151  	END;
13:32:29 152  
13:32:29 153  EXCEPTION
13:32:29 154  WHEN BAD_ACCOUNT_ID THEN
13:32:29 155  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 156  	  SPROC_NAME, 'Bad account id');
13:32:29 157  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 158  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 160  WHEN OTHERS THEN
13:32:29 161  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 163  END CREATE_ACCOUNT_HISTORY;
13:32:29 164  
13:32:29 165  /********************************************************************/
13:32:29 166  
13:32:29 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
13:32:29 168  /*
13:32:29 169  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 170  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 171  */
13:32:29 172  	in_subscription_id	     IN NUMBER,
13:32:29 173  	in_system_activity_reason_id IN NUMBER
13:32:29 174  ) AS
13:32:29 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
13:32:29 176  -- VARIABLES
13:32:29 177  var_account_id		    NUMBER;
13:32:29 178  var_purchase_date 	    DATE;
13:32:29 179  var_offer_chain_id	    NUMBER;
13:32:29 180  var_suspend_date		    DATE;
13:32:29 181  var_termination_date	    DATE;
13:32:29 182  var_days_ramaining_adjustment NUMBER;
13:32:29 183  var_sct_id		    NUMBER;
13:32:29 184  var_updated_by		    VARCHAR2(255);
13:32:29 185  var_update_date		    DATE;
13:32:29 186  -- EXCEPTIONS
13:32:29 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
13:32:29 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 190  BEGIN
13:32:29 191  
13:32:29 192  	BEGIN
13:32:29 193  	  SELECT
13:32:29 194  	    SUBSCRIPTION.account_id,
13:32:29 195  	    SUBSCRIPTION.PURCHASE_DATE,
13:32:29 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
13:32:29 197  	    SUBSCRIPTION.SUSPEND_DATE,
13:32:29 198  	    SUBSCRIPTION.TERMINATION_DATE,
13:32:29 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
13:32:29 200  	    SUBSCRIPTION.SCT_ID,
13:32:29 201  	    SUBSCRIPTION.UPDATED_BY,
13:32:29 202  	    SUBSCRIPTION.UPDATE_DATE
13:32:29 203  	    into
13:32:29 204  	    var_account_id,
13:32:29 205  	    var_purchase_date,
13:32:29 206  	    var_offer_chain_id,
13:32:29 207  	    var_suspend_date,
13:32:29 208  	    var_termination_date,
13:32:29 209  	    var_days_ramaining_adjustment,
13:32:29 210  	    var_sct_id,
13:32:29 211  	    var_updated_by,
13:32:29 212  	    var_update_date
13:32:29 213  	  FROM
13:32:29 214  	    SUBSCRIPTION
13:32:29 215  	  WHERE
13:32:29 216  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:29 217  	  EXCEPTION
13:32:29 218  	    WHEN NO_DATA_FOUND THEN
13:32:29 219  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:29 220  	END;
13:32:29 221  
13:32:29 222  	BEGIN
13:32:29 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_SUBSCRIPTION_HISTORY(
13:32:29 224  	    in_subscription_id,
13:32:29 225  	    var_account_id,
13:32:29 226  	    var_purchase_date,
13:32:29 227  	    var_offer_chain_id,
13:32:29 228  	    var_suspend_date,
13:32:29 229  	    var_termination_date,
13:32:29 230  	    var_days_ramaining_adjustment,
13:32:29 231  	    var_sct_id,
13:32:29 232  	    var_updated_by,
13:32:29 233  	    var_update_date,
13:32:29 234  	    in_system_activity_reason_id
13:32:29 235  	  );
13:32:29 236  	  EXCEPTION
13:32:29 237  	    WHEN OTHERS THEN
13:32:29 238  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 239  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 240  	END;
13:32:29 241  
13:32:29 242  EXCEPTION
13:32:29 243  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:29 244  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 245  	  SPROC_NAME, 'No such subscription');
13:32:29 246  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 247  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 249  WHEN OTHERS THEN
13:32:29 250  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 252  END CREATE_SUBSCRIPTION_HISTORY;
13:32:29 253  
13:32:29 254  /********************************************************************/
13:32:29 255  
13:32:29 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
13:32:29 257  	in_credit_card_id	      IN NUMBER,
13:32:29 258  	in_system_activity_reason_id  IN NUMBER
13:32:29 259  ) AS
13:32:29 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
13:32:29 261  -- VARIABLES
13:32:29 262  var_account_id		     NUMBER;
13:32:29 263  var_instrument_name	     VARCHAR2(255);
13:32:29 264  var_private_card_holder_name   VARCHAR2(256);
13:32:29 265  var_private_street_address     VARCHAR2(256);
13:32:29 266  var_private_street_address2    VARCHAR2(256);
13:32:29 267  var_state 		     VARCHAR2(50);
13:32:29 268  var_city			     VARCHAR2(50);
13:32:29 269  var_postal_code		     VARCHAR2(20);
13:32:29 270  var_country		     CHAR(2);
13:32:29 271  var_last_four_cc		     VARCHAR2(4);
13:32:29 272  var_expiration_date	     DATE;
13:32:29 273  var_credit_card_type_id	     NUMBER;
13:32:29 274  var_secret_token		     VARCHAR2(255);
13:32:29 275  var_chase_profile_id	     VARCHAR2(255);
13:32:29 276  var_credit_card_status_id      NUMBER;
13:32:29 277  var_updated_by		     VARCHAR2(255);
13:32:29 278  var_update_date		     DATE;
13:32:29 279  -- EXCEPTIONS
13:32:29 280  BAD_CREDIT_CARD_ID     EXCEPTION;
13:32:29 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 283  BEGIN
13:32:29 284  
13:32:29 285  	BEGIN
13:32:29 286  	  SELECT
13:32:29 287  	    ACCOUNT_ID,
13:32:29 288  	    INSTRUMENT_NAME,
13:32:29 289  	    PRIVATE_CARD_HOLDER_NAME,
13:32:29 290  	    PRIVATE_STREET_ADDRESS,
13:32:29 291  	    PRIVATE_STREET_ADDRESS2,
13:32:29 292  	    STATE,
13:32:29 293  	    CITY,
13:32:29 294  	    POSTAL_CODE,
13:32:29 295  	    COUNTRY,
13:32:29 296  	    LAST_FOUR_CC,
13:32:29 297  	    EXPIRATION_DATE,
13:32:29 298  	    CREDIT_CARD_TYPE_ID,
13:32:29 299  	    SECRET_TOKEN,
13:32:29 300  	    CHASE_PROFILE_ID,
13:32:29 301  	    CREDIT_CARD_STATUS_ID,
13:32:29 302  	    UPDATED_BY,
13:32:29 303  	    UPDATE_DATE
13:32:29 304  	    into
13:32:29 305  	    var_account_id,
13:32:29 306  	    var_instrument_name,
13:32:29 307  	    var_private_card_holder_name,
13:32:29 308  	    var_private_street_address,
13:32:29 309  	    var_private_street_address2,
13:32:29 310  	    var_state,
13:32:29 311  	    var_city,
13:32:29 312  	    var_postal_code,
13:32:29 313  	    var_country,
13:32:29 314  	    var_last_four_cc,
13:32:29 315  	    var_expiration_date,
13:32:29 316  	    var_credit_card_type_id,
13:32:29 317  	    var_secret_token,
13:32:29 318  	    var_chase_profile_id,
13:32:29 319  	    var_credit_card_status_id,
13:32:29 320  	    var_updated_by,
13:32:29 321  	    var_update_date
13:32:29 322  	  FROM
13:32:29 323  	    CREDIT_CARD
13:32:29 324  	  WHERE
13:32:29 325  	    CREDIT_CARD.ID = in_credit_card_id;
13:32:29 326  	  EXCEPTION
13:32:29 327  	    WHEN NO_DATA_FOUND THEN
13:32:29 328  	      RAISE BAD_CREDIT_CARD_ID;
13:32:29 329  	END;
13:32:29 330  
13:32:29 331  	BEGIN
13:32:29 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_CREDIT_CARD_HISTORY(
13:32:29 333  	    in_credit_card_id,
13:32:29 334  	    var_account_id,
13:32:29 335  	    var_instrument_name,
13:32:29 336  	    var_private_card_holder_name,
13:32:29 337  	    var_private_street_address,
13:32:29 338  	    var_private_street_address2,
13:32:29 339  	    var_state,
13:32:29 340  	    var_city,
13:32:29 341  	    var_postal_code,
13:32:29 342  	    var_country,
13:32:29 343  	    var_last_four_cc,
13:32:29 344  	    var_expiration_date,
13:32:29 345  	    var_credit_card_type_id,
13:32:29 346  	    var_secret_token,
13:32:29 347  	    var_chase_profile_id,
13:32:29 348  	    var_credit_card_status_id,
13:32:29 349  	    var_updated_by,
13:32:29 350  	    var_update_date,
13:32:29 351  	    in_system_activity_reason_id
13:32:29 352  	  );
13:32:29 353  	  EXCEPTION
13:32:29 354  	    WHEN OTHERS THEN
13:32:29 355  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 356  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 357  	END;
13:32:29 358  
13:32:29 359  EXCEPTION
13:32:29 360  WHEN BAD_CREDIT_CARD_ID THEN
13:32:29 361  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 362  	  SPROC_NAME, 'No such credit card');
13:32:29 363  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 364  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 366  WHEN OTHERS THEN
13:32:29 367  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 369  END CREATE_CREDIT_CARD_HISTORY;
13:32:29 370  
13:32:29 371  /********************************************************************/
13:32:29 372  
13:32:29 373  PROCEDURE CREATE_PAYPAL_HISTORY(
13:32:29 374  /*
13:32:29 375  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 377  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:29 378  */
13:32:29 379  	in_paypal_id		      IN NUMBER,
13:32:29 380  	in_system_activity_reason_id  IN NUMBER
13:32:29 381  ) AS
13:32:29 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
13:32:29 383  -- VARIABLES
13:32:29 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
13:32:29 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
13:32:29 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
13:32:29 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
13:32:29 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
13:32:29 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
13:32:29 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
13:32:29 391  var_state 		   PAYPAL.STATE%TYPE;
13:32:29 392  var_city			   PAYPAL.CITY%TYPE;
13:32:29 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
13:32:29 394  var_country		   PAYPAL.COUNTRY%TYPE;
13:32:29 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
13:32:29 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
13:32:29 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
13:32:29 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
13:32:29 399  -- EXCEPTION
13:32:29 400  BAD_PAYPAL_ID	  EXCEPTION;
13:32:29 401  CAN_NOT_ADD_HISTORY EXCEPTION;
13:32:29 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
13:32:29 403  BEGIN
13:32:29 404  
13:32:29 405  	BEGIN
13:32:29 406  	  SELECT
13:32:29 407  	    ACCOUNT_ID,
13:32:29 408  	    INSTRUMENT_NAME,
13:32:29 409  	    PRIVATE_EMAIL_ADDRESS,
13:32:29 410  	    UPDATE_DATE,
13:32:29 411  	    UPDATED_BY,
13:32:29 412  	    PAYPAL_STATUS_ID,
13:32:29 413  	    PRIVATE_STREET_ADDRESS,
13:32:29 414  	    PRIVATE_STREET_ADDRESS2,
13:32:29 415  	    STATE,
13:32:29 416  	    CITY,
13:32:29 417  	    POSTAL_CODE,
13:32:29 418  	    COUNTRY,
13:32:29 419  	    EXPIRATION_DATE,
13:32:29 420  	    SECRET_TOKEN
13:32:29 421  	  INTO
13:32:29 422  	    var_account_id,
13:32:29 423  	    var_instrument_name,
13:32:29 424  	    var_private_email_address,
13:32:29 425  	    var_update_date,
13:32:29 426  	    var_updated_by,
13:32:29 427  	    var_paypal_status_id,
13:32:29 428  	    var_paypal_prvt_street_addr,
13:32:29 429  	    var_paypal_prvt_street_addr2,
13:32:29 430  	    var_state,
13:32:29 431  	    var_city,
13:32:29 432  	    var_postal_code,
13:32:29 433  	    var_country,
13:32:29 434  	    var_expiration_date,
13:32:29 435  	    var_secret_token
13:32:29 436  	  FROM
13:32:29 437  	    PAYPAL
13:32:29 438  	  WHERE
13:32:29 439  	    ID = in_paypal_id;
13:32:29 440  	  EXCEPTION
13:32:29 441  	    WHEN NO_DATA_FOUND THEN
13:32:29 442  	      RAISE BAD_PAYPAL_ID;
13:32:29 443  	END;
13:32:29 444  
13:32:29 445  	BEGIN
13:32:29 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_PAYPAL_HISTORY(
13:32:29 447  	    in_paypal_id,
13:32:29 448  	    var_account_id,
13:32:29 449  	    var_instrument_name,
13:32:29 450  	    var_private_email_address,
13:32:29 451  	    var_updated_by,
13:32:29 452  	    var_update_date,
13:32:29 453  	    var_paypal_status_id,
13:32:29 454  	    var_paypal_prvt_street_addr,
13:32:29 455  	    var_paypal_prvt_street_addr2,
13:32:29 456  	    var_state,
13:32:29 457  	    var_city,
13:32:29 458  	    var_postal_code,
13:32:29 459  	    var_country,
13:32:29 460  	    var_expiration_date,
13:32:29 461  	    in_system_activity_reason_id,
13:32:29 462  	    var_secret_token
13:32:29 463  	  );
13:32:29 464  	  EXCEPTION
13:32:29 465  	    WHEN OTHERS THEN
13:32:29 466  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 467  	      RAISE CAN_NOT_ADD_HISTORY;
13:32:29 468  	END;
13:32:29 469  
13:32:29 470  EXCEPTION
13:32:29 471  WHEN BAD_PAYPAL_ID THEN
13:32:29 472  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 473  	  SPROC_NAME, 'No such paypal');
13:32:29 474  WHEN CAN_NOT_ADD_HISTORY THEN
13:32:29 475  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
13:32:29 477  WHEN OTHERS THEN
13:32:29 478  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 480  END CREATE_PAYPAL_HISTORY;
13:32:29 481  
13:32:29 482  /********************************************************************/
13:32:29 483  
13:32:29 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
13:32:29 485  	in_gift_certificate_id	      IN NUMBER,
13:32:29 486  	in_system_activity_reason_id  IN NUMBER
13:32:29 487  ) AS
13:32:29 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
13:32:29 489  -- VARIABLES
13:32:29 490  var_purchaser_group_id	     NUMBER;
13:32:29 491  var_purchase_invoice_id	     NUMBER;
13:32:29 492  var_offer_chain_id	     NUMBER;
13:32:29 493  var_expiration_date	     DATE;
13:32:29 494  var_purchase_date 	     DATE;
13:32:29 495  var_gift_certificate_status_id NUMBER;
13:32:29 496  var_code			     VARCHAR2(255);
13:32:29 497  var_recipient_name	     VARCHAR2(255);
13:32:29 498  var_gift_message		     VARCHAR2(500);
13:32:29 499  var_recipient_email	     VARCHAR2(255);
13:32:29 500  var_finalized_invoice_id	     NUMBER;
13:32:29 501  var_sender_email		     VARCHAR2(50);
13:32:29 502  var_sender_name		     VARCHAR2(50);
13:32:29 503  var_redemption_date	     DATE;
13:32:29 504  var_redeemer_group_id	     NUMBER;
13:32:29 505  var_cancelation_date	     DATE;
13:32:29 506  var_updated_by		     VARCHAR2(255);
13:32:29 507  var_update_date		     DATE;
13:32:29 508  var_recipient_address_id	     NUMBER;
13:32:29 509  var_redeemer_address_id	     NUMBER;
13:32:29 510  var_recipient_notify_date      DATE;
13:32:29 511  -- EXCEPTIONS
13:32:29 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
13:32:29 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
13:32:29 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:29 515  BEGIN
13:32:29 516  
13:32:29 517  	BEGIN
13:32:29 518  	  SELECT
13:32:29 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
13:32:29 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
13:32:29 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
13:32:29 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
13:32:29 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
13:32:29 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
13:32:29 525  	    GIFT_CERTIFICATE.CODE,
13:32:29 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
13:32:29 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
13:32:29 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
13:32:29 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
13:32:29 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
13:32:29 531  	    GIFT_CERTIFICATE.SENDER_NAME,
13:32:29 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
13:32:29 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
13:32:29 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
13:32:29 535  	    GIFT_CERTIFICATE.UPDATED_BY,
13:32:29 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
13:32:29 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
13:32:29 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
13:32:29 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
13:32:29 540  	    into
13:32:29 541  	    var_purchaser_group_id,
13:32:29 542  	    var_purchase_invoice_id,
13:32:29 543  	    var_offer_chain_id,
13:32:29 544  	    var_expiration_date,
13:32:29 545  	    var_purchase_date,
13:32:29 546  	    var_gift_certificate_status_id,
13:32:29 547  	    var_code,
13:32:29 548  	    var_recipient_name,
13:32:29 549  	    var_gift_message,
13:32:29 550  	    var_recipient_email,
13:32:29 551  	    var_finalized_invoice_id,
13:32:29 552  	    var_sender_email,
13:32:29 553  	    var_sender_name,
13:32:29 554  	    var_redemption_date,
13:32:29 555  	    var_redeemer_group_id,
13:32:29 556  	    var_cancelation_date,
13:32:29 557  	    var_updated_by,
13:32:29 558  	    var_update_date,
13:32:29 559  	    var_recipient_address_id,
13:32:29 560  	    var_redeemer_address_id,
13:32:29 561  	    var_recipient_notify_date
13:32:29 562  	  FROM
13:32:29 563  	    GIFT_CERTIFICATE
13:32:29 564  	  WHERE
13:32:29 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
13:32:29 566  	END;
13:32:29 567  
13:32:29 568  	BEGIN
13:32:29 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_GIFT_CERT_HISTORY(
13:32:29 570  	    in_gift_certificate_id,
13:32:29 571  	    var_purchaser_group_id,
13:32:29 572  	    var_purchase_invoice_id,
13:32:29 573  	    var_offer_chain_id,
13:32:29 574  	    var_expiration_date,
13:32:29 575  	    var_purchase_date,
13:32:29 576  	    var_gift_certificate_status_id,
13:32:29 577  	    var_code,
13:32:29 578  	    var_updated_by,
13:32:29 579  	    var_update_date,
13:32:29 580  	    in_system_activity_reason_id,
13:32:29 581  	    var_recipient_name,
13:32:29 582  	    var_gift_message,
13:32:29 583  	    var_recipient_email,
13:32:29 584  	    var_finalized_invoice_id,
13:32:29 585  	    var_sender_email,
13:32:29 586  	    var_sender_name,
13:32:29 587  	    var_redemption_date,
13:32:29 588  	    var_redeemer_group_id,
13:32:29 589  	    var_cancelation_date,
13:32:29 590  	    var_recipient_address_id,
13:32:29 591  	    var_redeemer_address_id,
13:32:29 592  	    var_recipient_notify_date
13:32:29 593  	  );
13:32:29 594  	  EXCEPTION
13:32:29 595  	    WHEN OTHERS THEN
13:32:29 596  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 597  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 598  	END;
13:32:29 599  
13:32:29 600  EXCEPTION
13:32:29 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
13:32:29 602  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 603  	  SPROC_NAME, 'No such gift certificate');
13:32:29 604  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 605  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 607  WHEN OTHERS THEN
13:32:29 608  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 610  END CREATE_GIFT_CERT_HISTORY;
13:32:29 611  
13:32:29 612  /********************************************************************/
13:32:29 613  
13:32:29 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
13:32:29 615  	in_transaction_id	     IN NUMBER,
13:32:29 616  	in_system_activity_reason_id IN NUMBER
13:32:29 617  ) AS
13:32:29 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
13:32:29 619  -- VARIABLES
13:32:29 620  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
13:32:29 621  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
13:32:29 622  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
13:32:29 623  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
13:32:29 624  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
13:32:29 625  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
13:32:29 626  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
13:32:29 627  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
13:32:29 628  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
13:32:29 629  -- EXCEPTIONS
13:32:29 630  BAD_TRANSACTION_ID     EXCEPTION;
13:32:29 631  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 632  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 633  BEGIN
13:32:29 634  
13:32:29 635  	BEGIN
13:32:29 636  	  SELECT
13:32:29 637  	    TRANSACTION.TRANSACTION_STATUS_ID,
13:32:29 638  	    TRANSACTION.TRANSACTION_AMOUNT,
13:32:29 639  	    TRANSACTION.UPDATED_BY,
13:32:29 640  	    TRANSACTION.UPDATE_DATE,
13:32:29 641  	    TRANSACTION.ORDER_ID,
13:32:29 642  	    TRANSACTION.CHARGE_ID,
13:32:29 643  	    TRANSACTION.IS_REFUND,
13:32:29 644  	    TRANSACTION.IS_SETTLED,
13:32:29 645  	    TRANSACTION.TRANSACTION_TYPE_CODE
13:32:29 646  	    into
13:32:29 647  	    var_transaction_status_id,
13:32:29 648  	    var_transaction_amount,
13:32:29 649  	    var_updated_by,
13:32:29 650  	    var_update_date,
13:32:29 651  	    var_order_id,
13:32:29 652  	    var_charge_id,
13:32:29 653  	    var_is_refund,
13:32:29 654  	    var_is_settled,
13:32:29 655  	    var_transaction_type_code
13:32:29 656  	  FROM
13:32:29 657  	    TRANSACTION
13:32:29 658  	  WHERE
13:32:29 659  	    TRANSACTION.ID = in_transaction_id;
13:32:29 660  	  EXCEPTION
13:32:29 661  	    WHEN NO_DATA_FOUND THEN
13:32:29 662  	      RAISE BAD_TRANSACTION_ID;
13:32:29 663  	END;
13:32:29 664  
13:32:29 665  	BEGIN
13:32:29 666  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_TRANSACTION_HISTORY(
13:32:29 667  	    in_transaction_id,
13:32:29 668  	    var_transaction_status_id,
13:32:29 669  	    var_transaction_amount,
13:32:29 670  	    var_updated_by,
13:32:29 671  	    var_update_date,
13:32:29 672  	    var_order_id,
13:32:29 673  	    var_charge_id,
13:32:29 674  	    var_is_refund,
13:32:29 675  	    var_is_settled,
13:32:29 676  	    var_transaction_type_code,
13:32:29 677  	    in_system_activity_reason_id
13:32:29 678  	  );
13:32:29 679  	  EXCEPTION
13:32:29 680  	    WHEN OTHERS THEN
13:32:29 681  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 682  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 683  	END;
13:32:29 684  
13:32:29 685  EXCEPTION
13:32:29 686  WHEN BAD_TRANSACTION_ID THEN
13:32:29 687  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 688  	  SPROC_NAME, 'No such transaction');
13:32:29 689  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 690  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 691  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 692  WHEN OTHERS THEN
13:32:29 693  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 694  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 695  END CREATE_TRANSACTION_HISTORY;
13:32:29 696  
13:32:29 697  /********************************************************************/
13:32:29 698  
13:32:29 699  PROCEDURE CREATE_INVOICE_HISTORY (
13:32:29 700  /*
13:32:29 701  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 702  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 703  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:29 704  */
13:32:29 705  	in_invoice_id		     IN NUMBER,
13:32:29 706  	in_system_activity_reason_id IN NUMBER
13:32:29 707  ) AS
13:32:29 708  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
13:32:29 709  -- VARIABLES
13:32:29 710  var_invoice_status_id NUMBER;
13:32:29 711  var_updated_by	    VARCHAR2(255);
13:32:29 712  var_update_date	    DATE;
13:32:29 713  -- EXCEPTIONS
13:32:29 714  BAD_INVOICE_ID	     EXCEPTION;
13:32:29 715  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 716  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 717  BEGIN
13:32:29 718  
13:32:29 719  	BEGIN
13:32:29 720  	  SELECT
13:32:29 721  	    INVOICE.INVOICE_STATUS_ID,
13:32:29 722  	    INVOICE.UPDATED_BY,
13:32:29 723  	    INVOICE.UPDATE_DATE
13:32:29 724  	    into
13:32:29 725  	    var_invoice_status_id,
13:32:29 726  	    var_updated_by,
13:32:29 727  	    var_update_date
13:32:29 728  	  FROM
13:32:29 729  	    INVOICE
13:32:29 730  	  WHERE
13:32:29 731  	    INVOICE.ID = in_invoice_id;
13:32:29 732  	  EXCEPTION
13:32:29 733  	    WHEN NO_DATA_FOUND THEN
13:32:29 734  	      RAISE BAD_INVOICE_ID;
13:32:29 735  	END;
13:32:29 736  
13:32:29 737  	BEGIN
13:32:29 738  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_INVOICE_HISTORY(
13:32:29 739  	    in_invoice_id,
13:32:29 740  	    var_invoice_status_id,
13:32:29 741  	    var_updated_by,
13:32:29 742  	    var_update_date,
13:32:29 743  	    in_system_activity_reason_id
13:32:29 744  	  );
13:32:29 745  	  EXCEPTION
13:32:29 746  	    WHEN OTHERS THEN
13:32:29 747  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 748  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 749  	END;
13:32:29 750  
13:32:29 751  EXCEPTION
13:32:29 752  WHEN BAD_INVOICE_ID THEN
13:32:29 753  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 754  	  SPROC_NAME, 'No such invoice');
13:32:29 755  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 756  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 757  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 758  WHEN OTHERS THEN
13:32:29 759  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 760  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 761  END CREATE_INVOICE_HISTORY;
13:32:29 762  
13:32:29 763  /********************************************************************/
13:32:29 764  
13:32:29 765  PROCEDURE CREATE_LICENSE_HISTORY (
13:32:29 766  /*
13:32:29 767  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 768  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 769  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:29 770  */
13:32:29 771  	in_license_id		     IN NUMBER,
13:32:29 772  	in_system_activity_reason_id IN NUMBER
13:32:29 773  ) AS
13:32:29 774  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
13:32:29 775  -- VARIABLES
13:32:29 776  var_license_status_id	    NUMBER;
13:32:29 777  var_needs_entitlements	    NUMBER;
13:32:29 778  var_start_date		    DATE;
13:32:29 779  var_offer_id		    NUMBER;
13:32:29 780  var_subscription_id	    NUMBER;
13:32:29 781  var_invoice_id		    NUMBER;
13:32:29 782  var_end_date		    DATE;
13:32:29 783  var_is_extension		    NUMBER;
13:32:29 784  var_current_offer_index	    NUMBER;
13:32:29 785  var_current_offer_recurr_num  NUMBER;
13:32:29 786  var_updated_by		    VARCHAR2(255);
13:32:29 787  var_update_date		    DATE;
13:32:29 788  var_entitlement_end_date	    DATE;
13:32:29 789  var_grace_start_date	    DATE;
13:32:29 790  var_grace_end_date	    DATE;
13:32:29 791  -- EXCEPTIONS
13:32:29 792  BAD_LICENSE_ID	     EXCEPTION;
13:32:29 793  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 794  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 795  BEGIN
13:32:29 796  
13:32:29 797  	BEGIN
13:32:29 798  	  SELECT
13:32:29 799  	    LICENSE.LICENSE_STATUS_ID,
13:32:29 800  	    LICENSE.NEEDS_ENTITLEMENTS,
13:32:29 801  	    LICENSE.START_DATE,
13:32:29 802  	    LICENSE.OFFER_ID,
13:32:29 803  	    LICENSE.SUBSCRIPTION_ID,
13:32:29 804  	    LICENSE.INVOICE_ID,
13:32:29 805  	    LICENSE.END_DATE,
13:32:29 806  	    LICENSE.IS_EXTENSION,
13:32:29 807  	    LICENSE.CURRENT_OFFER_INDEX,
13:32:29 808  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:29 809  	    LICENSE.UPDATED_BY,
13:32:29 810  	    LICENSE.UPDATE_DATE,
13:32:29 811  	    LICENSE.ENTITLEMENT_END_DATE,
13:32:29 812  	    LICENSE.GRACE_START_DATE,
13:32:29 813  	    LICENSE.GRACE_END_DATE
13:32:29 814  	    into
13:32:29 815  	    var_license_status_id,
13:32:29 816  	    var_needs_entitlements,
13:32:29 817  	    var_start_date,
13:32:29 818  	    var_offer_id,
13:32:29 819  	    var_subscription_id,
13:32:29 820  	    var_invoice_id,
13:32:29 821  	    var_end_date,
13:32:29 822  	    var_is_extension,
13:32:29 823  	    var_current_offer_index,
13:32:29 824  	    var_current_offer_recurr_num,
13:32:29 825  	    var_updated_by,
13:32:29 826  	    var_update_date,
13:32:29 827  	    var_entitlement_end_date,
13:32:29 828  	    var_grace_start_date,
13:32:29 829  	    var_grace_end_date
13:32:29 830  	  FROM
13:32:29 831  	    LICENSE
13:32:29 832  	  WHERE
13:32:29 833  	    LICENSE.ID = in_license_id;
13:32:29 834  	  EXCEPTION
13:32:29 835  	    WHEN NO_DATA_FOUND THEN
13:32:29 836  	      RAISE BAD_LICENSE_ID;
13:32:29 837  	END;
13:32:29 838  
13:32:29 839  	BEGIN
13:32:29 840  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_LICENSE_HISTORY(
13:32:29 841  	    in_license_id,
13:32:29 842  	    var_license_status_id,
13:32:29 843  	    var_needs_entitlements,
13:32:29 844  	    var_start_date,
13:32:29 845  	    var_offer_id,
13:32:29 846  	    var_subscription_id,
13:32:29 847  	    var_invoice_id,
13:32:29 848  	    var_end_date,
13:32:29 849  	    var_updated_by,
13:32:29 850  	    var_update_date,
13:32:29 851  	    var_is_extension,
13:32:29 852  	    var_current_offer_index,
13:32:29 853  	    var_current_offer_recurr_num,
13:32:29 854  	    in_system_activity_reason_id,
13:32:29 855  	    var_entitlement_end_date,
13:32:29 856  	    var_grace_start_date,
13:32:29 857  	    var_grace_end_date
13:32:29 858  	  );
13:32:29 859  	  EXCEPTION
13:32:29 860  	    WHEN OTHERS THEN
13:32:29 861  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 862  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 863  	END;
13:32:29 864  
13:32:29 865  EXCEPTION
13:32:29 866  WHEN BAD_LICENSE_ID THEN
13:32:29 867  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 868  	  SPROC_NAME, 'No such license');
13:32:29 869  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 870  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 871  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 872  WHEN OTHERS THEN
13:32:29 873  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 874  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 875  END CREATE_LICENSE_HISTORY;
13:32:29 876  
13:32:29 877  /********************************************************************/
13:32:29 878  
13:32:29 879  PROCEDURE CREATE_CHARGE_HISTORY (
13:32:29 880  /*
13:32:29 881  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 882  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 883  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:29 884  */
13:32:29 885  	in_charge_id		    IN NUMBER,
13:32:29 886  	in_system_activity_reason_id IN NUMBER
13:32:29 887  ) AS
13:32:29 888  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
13:32:29 889  -- VARIABLES
13:32:29 890  var_invoice_id	     NUMBER;
13:32:29 891  var_transaction_id     NUMBER;
13:32:29 892  var_instrument_type_id NUMBER;
13:32:29 893  var_instrument_id      NUMBER;
13:32:29 894  var_charge_amount      NUMBER;
13:32:29 895  var_charge_status_id   NUMBER;
13:32:29 896  var_updated_by	     VARCHAR2(255);
13:32:29 897  var_update_date	     DATE;
13:32:29 898  -- EXCEPTIONS
13:32:29 899  BAD_CHARGE_ID	     EXCEPTION;
13:32:29 900  CAN_NOT_CREATE_HISTORY EXCEPTION;
13:32:29 901  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 902  BEGIN
13:32:29 903  
13:32:29 904  	BEGIN
13:32:29 905  	  SELECT
13:32:29 906  	    CHARGE.INVOICE_ID,
13:32:29 907  	    CHARGE.TRANSACTION_ID,
13:32:29 908  	    CHARGE.INSTRUMENT_TYPE_ID,
13:32:29 909  	    CHARGE.INSTRUMENT_ID,
13:32:29 910  	    CHARGE.CHARGE_AMOUNT,
13:32:29 911  	    CHARGE.CHARGE_STATUS_ID,
13:32:29 912  	    CHARGE.UPDATED_BY,
13:32:29 913  	    CHARGE.UPDATE_DATE
13:32:29 914  	    into
13:32:29 915  	    var_invoice_id,
13:32:29 916  	    var_transaction_id,
13:32:29 917  	    var_instrument_type_id,
13:32:29 918  	    var_instrument_id,
13:32:29 919  	    var_charge_amount,
13:32:29 920  	    var_charge_status_id,
13:32:29 921  	    var_updated_by,
13:32:29 922  	    var_update_date
13:32:29 923  	  FROM
13:32:29 924  	    CHARGE
13:32:29 925  	  WHERE
13:32:29 926  	    CHARGE.ID = in_charge_id;
13:32:29 927  	  EXCEPTION
13:32:29 928  	    WHEN NO_DATA_FOUND THEN
13:32:29 929  	      RAISE BAD_CHARGE_ID;
13:32:29 930  	END;
13:32:29 931  
13:32:29 932  	BEGIN
13:32:29 933  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_CHARGE_HISTORY (
13:32:29 934  	    in_charge_id,
13:32:29 935  	    var_invoice_id,
13:32:29 936  	    var_transaction_id,
13:32:29 937  	    var_instrument_type_id,
13:32:29 938  	    var_instrument_id,
13:32:29 939  	    var_charge_amount,
13:32:29 940  	    var_updated_by,
13:32:29 941  	    var_update_date,
13:32:29 942  	    var_charge_status_id,
13:32:29 943  	    in_system_activity_reason_id
13:32:29 944  	  );
13:32:29 945  	  EXCEPTION
13:32:29 946  	    WHEN OTHERS THEN
13:32:29 947  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 948  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 949  	END;
13:32:29 950  
13:32:29 951  EXCEPTION
13:32:29 952  WHEN BAD_CHARGE_ID THEN
13:32:29 953  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 954  	  SPROC_NAME, 'No such license');
13:32:29 955  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 956  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 957  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 958  WHEN OTHERS THEN
13:32:29 959  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 961  END CREATE_CHARGE_HISTORY;
13:32:29 962  
13:32:29 963  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
13:32:29 964  /*
13:32:29 965  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 966  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 967  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:29 968  */
13:32:29 969  	in_invoice_adjustment_id  IN NUMBER,
13:32:29 970  	in_system_activity_reason_id IN NUMBER
13:32:29 971  ) AS
13:32:29 972  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
13:32:29 973  --VARIABLED
13:32:29 974  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
13:32:29 975  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
13:32:29 976  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
13:32:29 977  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
13:32:29 978  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
13:32:29 979  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
13:32:29 980  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
13:32:29 981  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
13:32:29 982  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
13:32:29 983  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
13:32:29 984  BAD_INVOICE_ADJ_ID	  EXCEPTION;
13:32:29 985  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
13:32:29 986  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29 987  BEGIN
13:32:29 988  
13:32:29 989  	BEGIN
13:32:29 990  	  SELECT
13:32:29 991  	    INVOICE_ADJUSTMENT.ID,
13:32:29 992  	    INVOICE_ADJUSTMENT.INVOICE_ID,
13:32:29 993  	    INVOICE_ADJUSTMENT.IS_CREDIT,
13:32:29 994  	    INVOICE_ADJUSTMENT.CHARGE_ID,
13:32:29 995  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
13:32:29 996  	    INVOICE_ADJUSTMENT.CREATE_DATE,
13:32:29 997  	    INVOICE_ADJUSTMENT.CREATED_BY,
13:32:29 998  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
13:32:29 999  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
13:32:29 1000  	     INVOICE_ADJUSTMENT.UPDATED_BY
13:32:29 1001  	     into
13:32:29 1002  	     var_invoice_adj_id,
13:32:29 1003  	     var_invoice_id,
13:32:29 1004  	     var_is_credit,
13:32:29 1005  	     var_charge_id,
13:32:29 1006  	     var_adjustment_date,
13:32:29 1007  	     var_create_date,
13:32:29 1008  	     var_created_by,
13:32:29 1009  	     var_invoice_adj_reason_id,
13:32:29 1010  	     var_update_date,
13:32:29 1011  	     var_updated_by
13:32:29 1012  	   FROM
13:32:29 1013  	     INVOICE_ADJUSTMENT
13:32:29 1014  	   WHERE
13:32:29 1015  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
13:32:29 1016  	   EXCEPTION
13:32:29 1017  	     WHEN NO_DATA_FOUND THEN
13:32:29 1018  	       RAISE BAD_INVOICE_ADJ_ID;
13:32:29 1019  	 END;
13:32:29 1020  
13:32:29 1021  	 BEGIN
13:32:29 1022  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_INVOICE_ADJ_HISTORY (
13:32:29 1023  	     var_invoice_adj_id,
13:32:29 1024  	     var_invoice_id,
13:32:29 1025  	     var_is_credit,
13:32:29 1026  	     var_charge_id,
13:32:29 1027  	     var_adjustment_date,
13:32:29 1028  	     var_create_date,
13:32:29 1029  	     var_created_by,
13:32:29 1030  	     var_invoice_adj_reason_id,
13:32:29 1031  	     var_update_date,
13:32:29 1032  	     var_updated_by
13:32:29 1033  	   );
13:32:29 1034  	   EXCEPTION
13:32:29 1035  	     WHEN OTHERS THEN
13:32:29 1036  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:29 1037  	       RAISE CAN_NOT_CREATE_HISTORY;
13:32:29 1038  	 END;
13:32:29 1039  
13:32:29 1040  EXCEPTION
13:32:29 1041  WHEN BAD_INVOICE_ADJ_ID THEN
13:32:29 1042  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1043  	   SPROC_NAME, 'No such invoice adjustment');
13:32:29 1044  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:29 1045  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 1046  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:29 1047  WHEN OTHERS THEN
13:32:29 1048  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1049  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1050  END CREATE_INVOICE_ADJ_HISTORY;
13:32:29 1051  
13:32:29 1052  END PROCS_HISTORY_V20;
13:32:29 1053  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.09
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
13:32:29   4  /*
13:32:29   5  Throws exceptions:
13:32:29   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29   7  */
13:32:29   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:29   9  	out_result_set	    OUT SYS_REFCURSOR
13:32:29  10  ) AS
13:32:29  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
13:32:29  12  BEGIN
13:32:29  13  OPEN out_result_set FOR
13:32:29  14  	      SELECT
13:32:29  15  	      i.id as ITUNES_RECEIPT_ID,
13:32:29  16  	      s.id as SUBSCRIPTION_ID,
13:32:29  17  	      s.SUBSCRIPTION_STATUS_ID,
13:32:29  18  	      i.STATUS,
13:32:29  19  	      a.GROUP_ID
13:32:29  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
13:32:29  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
13:32:29  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
13:32:29  23  	      AND a.ID(+) = s.ACCOUNT_ID;
13:32:29  24  END ITUNES_RECEIPT_SUBSCRIPTION;
13:32:29  25  
13:32:29  26  
13:32:29  27  PROCEDURE CREATE_RECEIPT(
13:32:29  28  /*
13:32:29  29  Throws exceptions:
13:32:29  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  31  */
13:32:29  32  	  out_id      OUT NUMBER,
13:32:29  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:29  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:29  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
13:32:29  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:29  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:29  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:29  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:29  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:29  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:29  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:29  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:29  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
13:32:29  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
13:32:29  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:29  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
13:32:29  48  ) AS
13:32:29  49  -- VARIABLES
13:32:29  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
13:32:29  51  -- EXCEPTIONS
13:32:29  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:29  53  BEGIN
13:32:29  54  
13:32:29  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.CREATE_RECEIPT(
13:32:29  56  	  out_id	      =>  out_id,
13:32:29  57  	  in_subscription_id  =>  in_subscription_id,
13:32:29  58  	  in_receipt	      =>  in_receipt,
13:32:29  59  	  in_status	      =>  in_status,
13:32:29  60  	  in_quantity	      =>  in_quantity,
13:32:29  61  	  in_product_id       =>  in_product_id,
13:32:29  62  	  in_transaction_id   =>  in_transaction_id,
13:32:29  63  	  in_purchase_date    =>  in_purchase_date,
13:32:29  64  	  in_original_transaction_id  =>  in_original_transaction_id,
13:32:29  65  	  in_original_purchase_date => in_original_purchase_date,
13:32:29  66  	  in_app_item_id      =>  in_app_item_id,
13:32:29  67  	  in_version_external_id  =>  in_version_external_id,
13:32:29  68  	  in_bid	      =>  in_bid,
13:32:29  69  	  in_bvrs	      =>  in_bvrs,
13:32:29  70  	  in_expires_date     =>  in_expires_date,
13:32:29  71  	  in_created_by       =>  in_created_by
13:32:29  72  	);
13:32:29  73  
13:32:29  74  END CREATE_RECEIPT;
13:32:29  75  
13:32:29  76  PROCEDURE UPDATE_RECEIPT(
13:32:29  77  /*
13:32:29  78  Throws exceptions:
13:32:29  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29  80  */
13:32:29  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
13:32:29  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
13:32:29  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
13:32:29  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
13:32:29  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
13:32:29  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
13:32:29  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
13:32:29  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
13:32:29  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
13:32:29  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
13:32:29  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
13:32:29  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
13:32:29  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
13:32:29  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
13:32:29  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
13:32:29  96  	  in_is_expired       IN NUMBER
13:32:29  97  ) AS
13:32:29  98  CANCEL_DATE DATE;
13:32:29  99  BEGIN
13:32:29 100  	-- see if cancel date is already set
13:32:29 101  	BEGIN
13:32:29 102  	  SELECT
13:32:29 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
13:32:29 104  	  FROM
13:32:29 105  	    ITUNES_RECEIPT IR
13:32:29 106  	  WHERE
13:32:29 107  	    IR.ID = in_id;
13:32:29 108  	EXCEPTION
13:32:29 109  	  WHEN NO_DATA_FOUND THEN
13:32:29 110  	    CANCEL_DATE := NULL;
13:32:29 111  	END;
13:32:29 112  
13:32:29 113  	-- only update cancel date if it isn't already set and the receipt is expired
13:32:29 114  	IF in_is_expired = 1 THEN
13:32:29 115  	  IF CANCEL_DATE IS NULL THEN
13:32:29 116  	    CANCEL_DATE := SYSDATE;
13:32:29 117  	  END IF;
13:32:29 118  	ELSE
13:32:29 119  	  CANCEL_DATE := NULL;
13:32:29 120  	END IF;
13:32:29 121  
13:32:29 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.UPDATE_RECEIPT(
13:32:29 123  	  in_id => in_id,
13:32:29 124  	  in_receipt => in_receipt,
13:32:29 125  	  in_status => in_status,
13:32:29 126  	  in_quantity => in_quantity,
13:32:29 127  	  in_product_id => in_product_id,
13:32:29 128  	  in_transaction_id => in_transaction_id,
13:32:29 129  	  in_purchase_date => in_purchase_date,
13:32:29 130  	  in_original_transaction_id => in_original_transaction_id,
13:32:29 131  	  in_original_purchase_date => in_original_purchase_date,
13:32:29 132  	  in_app_item_id => in_app_item_id,
13:32:29 133  	  in_version_external_id => in_version_external_id,
13:32:29 134  	  in_bid => in_bid,
13:32:29 135  	  in_bvrs => in_bvrs,
13:32:29 136  	  in_expires_date => in_expires_date,
13:32:29 137  	  in_updated_by => in_updated_by,
13:32:29 138  	  in_cancel_date => CANCEL_DATE
13:32:29 139  	);
13:32:29 140  END UPDATE_RECEIPT;
13:32:29 141  
13:32:29 142  PROCEDURE LINK_ITUNES_RECEIPT(
13:32:29 143  /*
13:32:29 144  Throws exceptions:
13:32:29 145  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 146  */
13:32:29 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
13:32:29 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
13:32:29 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
13:32:29 150  ) AS
13:32:29 151  BEGIN
13:32:29 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.LINK_ITUNES_RECEIPT(
13:32:29 153  		      in_id => in_id,
13:32:29 154  		      in_subscription_id => in_subscription_id,
13:32:29 155  		      in_updated_by => in_updated_by
13:32:29 156  		      );
13:32:29 157  END LINK_ITUNES_RECEIPT;
13:32:29 158  
13:32:29 159  PROCEDURE MARK_RECEIPT_CHECKED(
13:32:29 160  /*
13:32:29 161  Throws exceptions:
13:32:29 162  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 163  */
13:32:29 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
13:32:29 165  ) AS
13:32:29 166  BEGIN
13:32:29 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.MARK_RECEIPT_CHECKED(
13:32:29 168  	  in_id => in_id
13:32:29 169  	);
13:32:29 170  END MARK_RECEIPT_CHECKED;
13:32:29 171  
13:32:29 172  PROCEDURE GET_ITUNES_RECEIPTS (
13:32:29 173  /*
13:32:29 174  Throws exceptions:
13:32:29 175  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 176  */
13:32:29 177  	out_result_set	    OUT SYS_REFCURSOR,
13:32:29 178  	in_row_number	    IN NUMBER DEFAULT 500
13:32:29 179  ) AS
13:32:29 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
13:32:29 181  BEGIN
13:32:29 182  OPEN out_result_set FOR
13:32:29 183  SELECT * FROM
13:32:29 184  (
13:32:29 185  	SELECT * FROM
13:32:29 186  	(
13:32:29 187  	  SELECT
13:32:29 188  	    IR.ID,
13:32:29 189  	    IR.SUBSCRIPTION_ID,
13:32:29 190  	    IR.RECEIPT,
13:32:29 191  	    IR.STATUS,
13:32:29 192  	    IR.QUANTITY,
13:32:29 193  	    IR.PRODUCT_ID,
13:32:29 194  	    IR.TRANSACTION_ID,
13:32:29 195  	    IR.PURCHASE_DATE,
13:32:29 196  	    IR.ORIGINAL_TRANSACTION_ID,
13:32:29 197  	    IR.ORIGINAL_PURCHASE_DATE,
13:32:29 198  	    IR.APP_ITEM_ID,
13:32:29 199  	    IR.VERSION_EXTERNAL_ID,
13:32:29 200  	    IR.BID,
13:32:29 201  	    IR.BVRS,
13:32:29 202  	    IR.EXPIRES_DATE,
13:32:29 203  	    IR.CREATE_DATe,
13:32:29 204  	    IR.CREATED_BY,
13:32:29 205  	    IR.UPDATE_DATE,
13:32:29 206  	    IR.UPDATED_BY,
13:32:29 207  	    IR.LAST_CHECK_DATE,
13:32:29 208  	    OC.VENDOR_SOURCE_ID
13:32:29 209  	  FROM
13:32:29 210  	    CORE_OWNER.ITUNES_RECEIPT IR
13:32:29 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
13:32:29 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
13:32:29 213  	  WHERE
13:32:29 214  	    NOT EXISTS
13:32:29 215  	    (
13:32:29 216  	      SELECT NULL
13:32:29 217  	      FROM PROCESS_RETRY_THROTTLE
13:32:29 218  	      WHERE PROCESS_NAME = SPROC_NAME
13:32:29 219  		AND GENERIC_ID = IR.ID
13:32:29 220  	    ) AND
13:32:29 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
13:32:29 222  	    ROWNUM <= in_row_number*10
13:32:29 223  	)
13:32:29 224  	ORDER BY dbms_random.value
13:32:29 225  )
13:32:29 226  WHERE
13:32:29 227  	ROWNUM <= in_row_number;
13:32:29 228  
13:32:29 229  END GET_ITUNES_RECEIPTS;
13:32:29 230  
13:32:29 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
13:32:29 232  /*
13:32:29 233  Throws exceptions:
13:32:29 234  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 235  */
13:32:29 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
13:32:29 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
13:32:29 238  ) AS
13:32:29 239  BEGIN
13:32:29 240  
13:32:29 241  SELECT
13:32:29 242  	  oc.vendor_source_id
13:32:29 243  INTO
13:32:29 244  	  out_vendor_source_id
13:32:29 245  FROM
13:32:29 246  	  offer_chain_meta_data ocmd
13:32:29 247  JOIN
13:32:29 248  	  offer_chain oc
13:32:29 249  ON
13:32:29 250  	  ocmd.offer_chain_id = oc.id
13:32:29 251  WHERE
13:32:29 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
13:32:29 253  AND ocmd.value = in_itunes_pid
13:32:29 254  AND rownum <= 1;
13:32:29 255  
13:32:29 256  END GET_VENDOR_FROM_ITUNES_PID;
13:32:29 257  
13:32:29 258  END PROCS_ITUNES_RECEIPT_V20;
13:32:29 259  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE ADD_LINE_ITEMS(
13:32:29   4  /*
13:32:29   5  Throws exceptions:
13:32:29   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29   8  */
13:32:29   9  	in_invoice_id IN NUMBER,
13:32:29  10  	in_offer_id   IN NUMBER,
13:32:29  11  	in_created_by IN VARCHAR2
13:32:29  12  ) AS
13:32:29  13  -- VARIABLES
13:32:29  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
13:32:29  15  temp_invoice_id NUMBER;
13:32:29  16  temp_offer_id   NUMBER;
13:32:29  17  
13:32:29  18  var_line_item_data SYS_REFCURSOR;
13:32:29  19  var_new_line_item_id NUMBER;
13:32:29  20  var_product_unit_price NUMBER (10,6);
13:32:29  21  var_product_offering_price NUMBER(10,6);
13:32:29  22  var_product_offering_oprice NUMBER(10,6);
13:32:29  23  var_product_quantity NUMBER;
13:32:29  24  var_product_offering_id NUMBER;
13:32:29  25  
13:32:29  26  var_line_item_price	  NUMBER(10,2);
13:32:29  27  var_discount_fixed_amount   NUMBER(10,6);
13:32:29  28  var_discount_percent_amount NUMBER(10,2);
13:32:29  29  
13:32:29  30  
13:32:29  31  -- EXCEPTIONS
13:32:29  32  BAD_INVOICE_ID EXCEPTION;
13:32:29  33  BAD_OFFER_ID EXCEPTION;
13:32:29  34  BAD_DISCOUNT EXCEPTION;
13:32:29  35  BEGIN
13:32:29  36  
13:32:29  37  	-- Check that given invoice exists
13:32:29  38  	BEGIN
13:32:29  39  	  SELECT
13:32:29  40  	    INVOICE.ID into temp_invoice_id
13:32:29  41  	  FROM
13:32:29  42  	    INVOICE
13:32:29  43  	  WHERE
13:32:29  44  	    INVOICE.ID = in_invoice_id;
13:32:29  45  
13:32:29  46  	  EXCEPTION
13:32:29  47  	    WHEN NO_DATA_FOUND THEN
13:32:29  48  	      RAISE BAD_INVOICE_ID;
13:32:29  49  	END;
13:32:29  50  
13:32:29  51  	-- Check that given offer exists
13:32:29  52  	BEGIN
13:32:29  53  	  SELECT
13:32:29  54  	    OFFER.ID into temp_offer_id
13:32:29  55  	  FROM
13:32:29  56  	    OFFER
13:32:29  57  	  WHERE
13:32:29  58  	    OFFER.ID = in_offer_id;
13:32:29  59  
13:32:29  60  	  EXCEPTION
13:32:29  61  	    WHEN NO_DATA_FOUND THEN
13:32:29  62  	      RAISE BAD_OFFER_ID;
13:32:29  63  	END;
13:32:29  64  
13:32:29  65  	-- Get product_offering data
13:32:29  66  	OPEN var_line_item_data FOR
13:32:29  67  	SELECT
13:32:29  68  	  PRODUCT_OFFERING.ID,
13:32:29  69  	  PRODUCT_OFFERING.UNIT_PRICE,
13:32:29  70  	  PRODUCT_OFFERING.QUANTITY
13:32:29  71  	FROM
13:32:29  72  	  OFFER_PRODUCT_OFFERING
13:32:29  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29  74  	WHERE
13:32:29  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
13:32:29  76  
13:32:29  77  	-- insert line items
13:32:29  78  	-- add discounts to line items
13:32:29  79  	LOOP
13:32:29  80  	  FETCH var_line_item_data INTO
13:32:29  81  	    var_product_offering_id,
13:32:29  82  	    var_product_unit_price,
13:32:29  83  	    var_product_quantity;
13:32:29  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
13:32:29  85  
13:32:29  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
13:32:29  87  	  var_product_offering_price := var_product_offering_oprice;
13:32:29  88  
13:32:29  89  	  -- Apply discounts to line_item
13:32:29  90  	  BEGIN
13:32:29  91  	    SELECT
13:32:29  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
13:32:29  93  	    FROM
13:32:29  94  	      DISCOUNT_PRODUCT_OFFERING
13:32:29  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
13:32:29  96  	    WHERE
13:32:29  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
13:32:29  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
13:32:29  99  	    EXCEPTION
13:32:29 100  	    WHEN NO_DATA_FOUND THEN
13:32:29 101  	      var_discount_fixed_amount := NULL;
13:32:29 102  	  END;
13:32:29 103  
13:32:29 104  	  BEGIN
13:32:29 105  	    SELECT
13:32:29 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
13:32:29 107  	    FROM
13:32:29 108  	      DISCOUNT_PRODUCT_OFFERING
13:32:29 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
13:32:29 110  	    WHERE
13:32:29 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
13:32:29 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
13:32:29 113  	    EXCEPTION
13:32:29 114  	    WHEN NO_DATA_FOUND THEN
13:32:29 115  	      var_discount_percent_amount := NULL;
13:32:29 116  	  END;
13:32:29 117  
13:32:29 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
13:32:29 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
13:32:29 120  	  END IF;
13:32:29 121  
13:32:29 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
13:32:29 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
13:32:29 124  	  END IF;
13:32:29 125  
13:32:29 126  	  var_line_item_price := PROCS_COMMON_V20.ROUND_10_6_TO_10_2(var_product_offering_price);
13:32:29 127  
13:32:29 128  	  IF (var_line_item_price < 0) THEN
13:32:29 129  	      RAISE BAD_DISCOUNT;
13:32:29 130  	  END IF;
13:32:29 131  
13:32:29 132  	  var_new_line_item_id := NULL;
13:32:29 133  	  PROCS_LINE_ITEMS_CRU_V20.CREATE_LINE_ITEM(
13:32:29 134  	    inout_line_item_id	=> var_new_line_item_id,
13:32:29 135  	    in_product_offer_id => var_product_offering_id,
13:32:29 136  	    in_invoice_id	=> in_invoice_id,
13:32:29 137  	    in_amount		=> var_line_item_price,
13:32:29 138  	    in_created_by	=> in_created_by,
13:32:29 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
13:32:29 140  	    in_taxes_amount	=> NULL
13:32:29 141  	  );
13:32:29 142  
13:32:29 143  	  FOR f_discount IN (
13:32:29 144  	    SELECT
13:32:29 145  	      DISCOUNT.ID
13:32:29 146  	    FROM
13:32:29 147  	      DISCOUNT_PRODUCT_OFFERING
13:32:29 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
13:32:29 149  	    WHERE
13:32:29 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
13:32:29 151  	  )
13:32:29 152  	  LOOP
13:32:29 153  	    PROCS_LINE_ITEMS_CRU_V20.CREATE_DISCOUNT_LINE_ITEM(
13:32:29 154  	      in_discount_id =>  f_discount.ID,
13:32:29 155  	      in_line_item_id => var_new_line_item_id
13:32:29 156  	    );
13:32:29 157  	  END LOOP;
13:32:29 158  	END LOOP;
13:32:29 159  
13:32:29 160  EXCEPTION
13:32:29 161  WHEN BAD_INVOICE_ID THEN
13:32:29 162  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 163  	  SPROC_NAME, 'No such license');
13:32:29 164  WHEN BAD_OFFER_ID THEN
13:32:29 165  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 166  	  SPROC_NAME, 'No such offer');
13:32:29 167  WHEN BAD_DISCOUNT THEN
13:32:29 168  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 169  	  SPROC_NAME, 'Bad Discount');
13:32:29 170  WHEN OTHERS THEN
13:32:29 171  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 173  END ADD_LINE_ITEMS;
13:32:29 174  
13:32:29 175  /******************************************************************************/
13:32:29 176  
13:32:29 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
13:32:29 178  	in_line_item_id    IN NUMBER,
13:32:29 179  	in_amount	   IN NUMBER,
13:32:29 180  	in_discount_amount IN NUMBER,
13:32:29 181  	in_taxes_amount    IN NUMBER
13:32:29 182  ) AS
13:32:29 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
13:32:29 184  -- VARIABLES
13:32:29 185  temp_line_item_id NUMBER;
13:32:29 186  -- EXCEPTIONS
13:32:29 187  BAD_LINE_ITEM_ID EXCEPTION;
13:32:29 188  BEGIN
13:32:29 189  
13:32:29 190  	-- Check that line item exists
13:32:29 191  	BEGIN
13:32:29 192  	  SELECT
13:32:29 193  	    LINE_ITEM.ID into temp_line_item_id
13:32:29 194  	  FROM
13:32:29 195  	    LINE_ITEM
13:32:29 196  	  WHERE
13:32:29 197  	    LINE_ITEM.ID = in_line_item_id;
13:32:29 198  	  EXCEPTION
13:32:29 199  	    WHEN NO_DATA_FOUND THEN
13:32:29 200  	      RAISE BAD_LINE_ITEM_ID;
13:32:29 201  	END;
13:32:29 202  
13:32:29 203  	-- Update line item
13:32:29 204  	PROCS_LINE_ITEMS_CRU_V20.UPDATE_LINE_ITEM(
13:32:29 205  	  in_line_item_id    => in_line_item_id,
13:32:29 206  	  in_amount	     => in_amount,
13:32:29 207  	  in_discount_amount => in_discount_amount,
13:32:29 208  	  in_taxes_amount    => in_taxes_amount
13:32:29 209  	);
13:32:29 210  
13:32:29 211  EXCEPTION
13:32:29 212  WHEN BAD_LINE_ITEM_ID THEN
13:32:29 213  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 214  	  SPROC_NAME, 'No such line item');
13:32:29 215  WHEN OTHERS THEN
13:32:29 216  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 218  END UPDATE_LINE_ITEM_AMOUNT;
13:32:29 219  
13:32:29 220  /******************************************************************************/
13:32:29 221  
13:32:29 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:29 223  /*
13:32:29 224  Throws exceptions:
13:32:29 225  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 226  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 227  */
13:32:29 228  	in_invoice_id  IN NUMBER,
13:32:29 229  	out_result_set OUT SYS_REFCURSOR
13:32:29 230  ) AS
13:32:29 231  -- VARIABLES
13:32:29 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
13:32:29 233  temp_invoice_id NUMBER;
13:32:29 234  
13:32:29 235  -- EXCEPTIONS
13:32:29 236  BAD_INVOICE_ID EXCEPTION;
13:32:29 237  BEGIN
13:32:29 238  
13:32:29 239  	-- Check that given invoice exists
13:32:29 240  	BEGIN
13:32:29 241  	  SELECT
13:32:29 242  	    INVOICE.ID into temp_invoice_id
13:32:29 243  	  FROM
13:32:29 244  	    INVOICE
13:32:29 245  	  WHERE
13:32:29 246  	    INVOICE.ID = in_invoice_id;
13:32:29 247  	  EXCEPTION
13:32:29 248  	    WHEN NO_DATA_FOUND THEN
13:32:29 249  	      RAISE BAD_INVOICE_ID;
13:32:29 250  	END;
13:32:29 251  
13:32:29 252  	-- Select line items
13:32:29 253  	OPEN out_result_set FOR
13:32:29 254  	SELECT
13:32:29 255  	  LINE_ITEM.ID,
13:32:29 256  	  LINE_ITEM.AMOUNT,
13:32:29 257  	  LINE_ITEM.CREATE_DATE,
13:32:29 258  	  LINE_ITEM.CREATED_BY,
13:32:29 259  	  LINE_ITEM.INVOICE_ID,
13:32:29 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
13:32:29 261  	  LINE_ITEM.TAXES_AMOUNT,
13:32:29 262  	  LINE_ITEM.PRODUCT_OFFER_ID
13:32:29 263  	FROM
13:32:29 264  	  LINE_ITEM
13:32:29 265  	WHERE
13:32:29 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
13:32:29 267  
13:32:29 268  EXCEPTION
13:32:29 269  WHEN BAD_INVOICE_ID THEN
13:32:29 270  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 271  	  SPROC_NAME, 'No such invoice');
13:32:29 272  WHEN OTHERS THEN
13:32:29 273  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 275  END GET_INVOICE_LINE_ITEMS;
13:32:29 276  
13:32:29 277  /******************************************************************************/
13:32:29 278  
13:32:29 279  PROCEDURE GET_LINE_ITEM_TAXES (
13:32:29 280  /*
13:32:29 281  Throws exceptions:
13:32:29 282  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 283  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 284  */
13:32:29 285  	in_line_item_id IN  NUMBER,
13:32:29 286  	out_result_set	OUT SYS_REFCURSOR
13:32:29 287  ) AS
13:32:29 288  -- VARIABLES
13:32:29 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
13:32:29 290  temp_line_item_id NUMBER;
13:32:29 291  -- EXCEPTIONS
13:32:29 292  BAD_LINE_ITEM_ID EXCEPTION;
13:32:29 293  BEGIN
13:32:29 294  
13:32:29 295  	-- Check that line item exists
13:32:29 296  	BEGIN
13:32:29 297  	  SELECT
13:32:29 298  	    LINE_ITEM.ID into temp_line_item_id
13:32:29 299  	  FROM
13:32:29 300  	    LINE_ITEM
13:32:29 301  	  WHERE
13:32:29 302  	    LINE_ITEM.ID = in_line_item_id;
13:32:29 303  	  EXCEPTION
13:32:29 304  	    WHEN NO_DATA_FOUND THEN
13:32:29 305  	      RAISE BAD_LINE_ITEM_ID;
13:32:29 306  	END;
13:32:29 307  
13:32:29 308  	-- Get all taxes for given line item
13:32:29 309  	OPEN out_result_set FOR
13:32:29 310  	SELECT
13:32:29 311  	  TAX.ID,
13:32:29 312  	  TAX.CALCULATED_AMOUNT,
13:32:29 313  	  TAX.CREATE_DATE,
13:32:29 314  	  TAX.CREATED_BY,
13:32:29 315  	  TAX.EFFECTIVE_RATE,
13:32:29 316  	  TAX.EXT_RESULT,
13:32:29 317  	  TAX.EXT_TAX_TYPE,
13:32:29 318  	  TAX.IMPOSITION,
13:32:29 319  	  TAX.IMPOSITION_TYPE,
13:32:29 320  	  TAX.JURISDICTION_ID,
13:32:29 321  	  TAX.JURISDICTION_LEVEL_ID,
13:32:29 322  	  TAX.JURISDICTION_NAME,
13:32:29 323  	  TAX.LINE_ITEM_ID,
13:32:29 324  	  TAX.TAX_RULE_ID,
13:32:29 325  	  TAX.TAX_TYPE_ID,
13:32:29 326  	  TAX.TAXABLE_AMOUNT
13:32:29 327  	FROM
13:32:29 328  	  TAX
13:32:29 329  	WHERE
13:32:29 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
13:32:29 331  
13:32:29 332  EXCEPTION
13:32:29 333  WHEN BAD_LINE_ITEM_ID THEN
13:32:29 334  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 335  	  SPROC_NAME, 'No such line item');
13:32:29 336  WHEN OTHERS THEN
13:32:29 337  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 339  END GET_LINE_ITEM_TAXES;
13:32:29 340  
13:32:29 341  -- norlov: #38770
13:32:29 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
13:32:29 343  /*
13:32:29 344  Throws exceptions:
13:32:29 345  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 346  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 347  */
13:32:29 348  	in_line_item_id IN  NUMBER,
13:32:29 349  	out_result_set	OUT SYS_REFCURSOR
13:32:29 350  ) AS
13:32:29 351  -- VARIABLES
13:32:29 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
13:32:29 353  temp_line_item_id NUMBER;
13:32:29 354  -- EXCEPTIONS
13:32:29 355  BAD_LINE_ITEM_ID EXCEPTION;
13:32:29 356  BEGIN
13:32:29 357  
13:32:29 358  	-- Check that line item exists
13:32:29 359  	BEGIN
13:32:29 360  	  SELECT
13:32:29 361  	    LINE_ITEM.ID into temp_line_item_id
13:32:29 362  	  FROM
13:32:29 363  	    LINE_ITEM
13:32:29 364  	  WHERE
13:32:29 365  	    LINE_ITEM.ID = in_line_item_id;
13:32:29 366  	  EXCEPTION
13:32:29 367  	    WHEN NO_DATA_FOUND THEN
13:32:29 368  	      RAISE BAD_LINE_ITEM_ID;
13:32:29 369  	END;
13:32:29 370  
13:32:29 371  	-- Get all discounts for given line item
13:32:29 372  	OPEN out_result_set FOR
13:32:29 373  	SELECT
13:32:29 374  	  DISCOUNT.FIXED_AMOUNT,
13:32:29 375  	  DISCOUNT.NAME,
13:32:29 376  	  DISCOUNT.ID,
13:32:29 377  	  DISCOUNT.PERCENT_AMOUNT
13:32:29 378  	FROM
13:32:29 379  	  DISCOUNT_LINE_ITEM
13:32:29 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
13:32:29 381  	WHERE
13:32:29 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
13:32:29 383  
13:32:29 384  EXCEPTION
13:32:29 385  WHEN BAD_LINE_ITEM_ID THEN
13:32:29 386  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 387  	  SPROC_NAME, 'No such line item');
13:32:29 388  WHEN OTHERS THEN
13:32:29 389  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 391  END GET_LINE_ITEM_DISCOUNTS;
13:32:29 392  /******************************************************************************/
13:32:29 393  
13:32:29 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
13:32:29 395  /*
13:32:29 396  Throws exceptions:
13:32:29 397  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 398  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 399  */
13:32:29 400  	in_line_item_id     IN	NUMBER,
13:32:29 401  	out_amount	    OUT NUMBER
13:32:29 402  ) AS
13:32:29 403  -- VARIABLES
13:32:29 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
13:32:29 405  -- EXCEPTIONS
13:32:29 406  BAD_LINE_ITEM_ID EXCEPTION;
13:32:29 407  BEGIN
13:32:29 408  
13:32:29 409  	BEGIN
13:32:29 410  	  SELECT
13:32:29 411  	    LINE_ITEM.AMOUNT into out_amount
13:32:29 412  	  FROM
13:32:29 413  	    LINE_ITEM
13:32:29 414  	  WHERE
13:32:29 415  	    LINE_ITEM.ID = in_line_item_id;
13:32:29 416  	  EXCEPTION
13:32:29 417  	    WHEN NO_DATA_FOUND THEN
13:32:29 418  	      RAISE BAD_LINE_ITEM_ID;
13:32:29 419  	END;
13:32:29 420  
13:32:29 421  EXCEPTION
13:32:29 422  WHEN BAD_LINE_ITEM_ID THEN
13:32:29 423  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 424  	  SPROC_NAME, 'No such line item');
13:32:29 425  WHEN OTHERS THEN
13:32:29 426  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 428  END CALCULATE_LINE_ITEM_AMOUNT;
13:32:29 429  
13:32:29 430  /******************************************************************************/
13:32:29 431  
13:32:29 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
13:32:29 433  /*
13:32:29 434  Throws exceptions:
13:32:29 435  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:29 436  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:29 437  */
13:32:29 438  	in_line_item_id     IN	NUMBER
13:32:29 439  ) RETURN NUMBER AS
13:32:29 440  var_invoice_amount NUMBER(10, 2);
13:32:29 441  BEGIN
13:32:29 442  	PROCS_LINE_ITEMS_V20.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
13:32:29 443  	RETURN var_invoice_amount;
13:32:29 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
13:32:29 445  
13:32:29 446  END PROCS_LINE_ITEMS_V20;
13:32:29 447  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.05
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V20" AS
13:32:29   2  
13:32:29   3  /*
13:32:29   4  PROCEDURE INITIALIZE_SYSTEM AS
13:32:29   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
13:32:29   6  -- VARIABLES
13:32:29   7  var_account_ids SYS_REFCURSOR;
13:32:29   8  var_account_id  NUMBER;
13:32:29   9  BEGIN
13:32:29  10  
13:32:29  11  	OPEN var_account_ids FOR
13:32:29  12  	SELECT
13:32:29  13  	  ACCOUNT.ID
13:32:29  14  	FROM
13:32:29  15  	  ACCOUNT;
13:32:29  16  
13:32:29  17  	LOOP
13:32:29  18  	  FETCH var_account_ids into var_account_id;
13:32:29  19  	  EXIT WHEN var_account_ids%NOTFOUND;
13:32:29  20  	  BEGIN
13:32:29  21  	    INITIALIZE_ACCOUNT(var_account_id);
13:32:29  22  	    EXCEPTION
13:32:29  23  	      WHEN OTHERS THEN
13:32:29  24  		NULL;
13:32:29  25  	  END;
13:32:29  26  	END LOOP;
13:32:29  27  
13:32:29  28  END INITIALIZE_SYSTEM;
13:32:29  29  
13:32:29  30  PROCEDURE INITIALIZE_ACCOUNT (
13:32:29  31  	in_account_id IN NUMBER
13:32:29  32  ) AS
13:32:29  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
13:32:29  34  -- EXCEPTIONS
13:32:29  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
13:32:29  36  BEGIN
13:32:29  37  
13:32:29  38  	BEGIN
13:32:29  39  	  INSERT INTO ACCOUNT_LOCK(
13:32:29  40  	    ACCOUNT_ID,
13:32:29  41  	    LOCK_KEY,
13:32:29  42  	    END_DATE,
13:32:29  43  	    CREATED_BY,
13:32:29  44  	    REASON
13:32:29  45  	  ) VALUES (
13:32:29  46  	    in_account_id,
13:32:29  47  	    'initialization key',
13:32:29  48  	    SYSDATE,
13:32:29  49  	    'system',
13:32:29  50  	    'initialization'
13:32:29  51  	  );
13:32:29  52  	  EXCEPTION
13:32:29  53  	    WHEN DUP_VAL_ON_INDEX THEN
13:32:29  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
13:32:29  55  	END;
13:32:29  56  
13:32:29  57  EXCEPTION
13:32:29  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
13:32:29  59  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:29  60  	  SPROC_NAME, 'Account already initialized');
13:32:29  61  WHEN OTHERS THEN
13:32:29  62  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29  64  END;
13:32:29  65  
13:32:29  66  PROCEDURE INITIALIZE_GROUP (
13:32:29  67  	in_group_id IN NUMBER
13:32:29  68  ) AS
13:32:29  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
13:32:29  70  -- VARIABLES
13:32:29  71  var_account_id NUMBER;
13:32:29  72  -- EXCEPTIONS
13:32:29  73  BAD_GROUP_ID		EXCEPTION;
13:32:29  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
13:32:29  75  BEGIN
13:32:29  76  
13:32:29  77  	BEGIN
13:32:29  78  	  SELECT
13:32:29  79  	    ACCOUNT.ID into var_account_id
13:32:29  80  	  FROM
13:32:29  81  	    ACCOUNT
13:32:29  82  	  WHERE
13:32:29  83  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:29  84  	  EXCEPTION
13:32:29  85  	    WHEN NO_DATA_FOUND THEN
13:32:29  86  	     RAISE BAD_GROUP_ID;
13:32:29  87  	END;
13:32:29  88  
13:32:29  89  	BEGIN
13:32:29  90  	  INSERT INTO ACCOUNT_LOCK (
13:32:29  91  	    ACCOUNT_ID,
13:32:29  92  	    LOCK_KEY,
13:32:29  93  	    END_DATE,
13:32:29  94  	    CREATED_BY,
13:32:29  95  	    REASON
13:32:29  96  	  ) VALUES (
13:32:29  97  	    var_account_id,
13:32:29  98  	    'initialization key',
13:32:29  99  	    SYSDATE,
13:32:29 100  	    'system',
13:32:29 101  	    'initialization'
13:32:29 102  	  );
13:32:29 103  	  EXCEPTION
13:32:29 104  	    WHEN DUP_VAL_ON_INDEX THEN
13:32:29 105  	      RAISE GROUP_ALREADY_INITIALIZED;
13:32:29 106  	END;
13:32:29 107  
13:32:29 108  EXCEPTION
13:32:29 109  WHEN BAD_GROUP_ID THEN
13:32:29 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 111  	  SPROC_NAME, 'No such account with given group id');
13:32:29 112  WHEN GROUP_ALREADY_INITIALIZED THEN
13:32:29 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:29 114  	  SPROC_NAME, 'Group already initialized');
13:32:29 115  WHEN OTHERS THEN
13:32:29 116  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 118  END INITIALIZE_GROUP;
13:32:29 119  */
13:32:29 120  
13:32:29 121  PROCEDURE LOCK_ACCOUNT (
13:32:29 122  	in_group_id    IN NUMBER,
13:32:29 123  	in_lock_key    IN VARCHAR2,
13:32:29 124  	in_seconds_num IN NUMBER,
13:32:29 125  	in_created_by  IN VARCHAR2,
13:32:29 126  	in_reason      IN VARCHAR2
13:32:29 127  ) AS
13:32:29 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
13:32:29 129  -- CONSTANTS
13:32:29 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
13:32:29 131  -- VARIABLES
13:32:29 132  var_account_id NUMBER;
13:32:29 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29 134  var_date		DATE := SYSDATE;
13:32:29 135  var_lock_end_date DATE;
13:32:29 136  -- EXCEPTIONS
13:32:29 137  BAD_GROUP_ID   EXCEPTION;
13:32:29 138  ALREADY_LOCKED EXCEPTION;
13:32:29 139  BEGIN
13:32:29 140  
13:32:29 141  	BEGIN
13:32:29 142  	  SELECT
13:32:29 143  	    ACCOUNT.ID into var_account_id
13:32:29 144  	  FROM
13:32:29 145  	    ACCOUNT
13:32:29 146  	  WHERE
13:32:29 147  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:29 148  	  EXCEPTION
13:32:29 149  	    WHEN NO_DATA_FOUND THEN
13:32:29 150  	      RAISE BAD_GROUP_ID;
13:32:29 151  	END;
13:32:29 152  
13:32:29 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
13:32:29 154  
13:32:29 155  	BEGIN
13:32:29 156  
13:32:29 157  	  INSERT INTO ACCOUNT_LOCK (
13:32:29 158  	    ACCOUNT_ID,
13:32:29 159  	    LOCK_KEY,
13:32:29 160  	    END_DATE,
13:32:29 161  	    CREATED_BY,
13:32:29 162  	    REASON
13:32:29 163  	  ) VALUES (
13:32:29 164  	    var_account_id,
13:32:29 165  	    in_lock_key,
13:32:29 166  	    var_lock_end_date,
13:32:29 167  	    in_created_by,
13:32:29 168  	    in_reason
13:32:29 169  	  );
13:32:29 170  
13:32:29 171  	  EXCEPTION
13:32:29 172  	    WHEN DUP_VAL_ON_INDEX THEN
13:32:29 173  	      -- This rows was created before... I will try to update it
13:32:29 174  	      BEGIN
13:32:29 175  
13:32:29 176  		UPDATE
13:32:29 177  		  ACCOUNT_LOCK
13:32:29 178  		SET
13:32:29 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
13:32:29 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
13:32:29 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
13:32:29 182  		  ACCOUNT_LOCK.REASON = in_reason
13:32:29 183  		WHERE
13:32:29 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
13:32:29 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
13:32:29 186  
13:32:29 187  		IF SQL%ROWCOUNT = 0 THEN
13:32:29 188  		  RAISE ALREADY_LOCKED;
13:32:29 189  		END IF;
13:32:29 190  
13:32:29 191  	      END;
13:32:29 192  	END;
13:32:29 193  
13:32:29 194  EXCEPTION
13:32:29 195  WHEN BAD_GROUP_ID THEN
13:32:29 196  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 197  	  SPROC_NAME, 'No such group id');
13:32:29 198  WHEN ALREADY_LOCKED THEN
13:32:29 199  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:29 200  	  SPROC_NAME, 'Account already locked');
13:32:29 201  WHEN OTHERS THEN
13:32:29 202  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 204  END LOCK_ACCOUNT;
13:32:29 205  
13:32:29 206  /******************************************************************************/
13:32:29 207  
13:32:29 208  PROCEDURE RELEASE_LOCK (
13:32:29 209  	in_group_id IN NUMBER,
13:32:29 210  	in_lock_key IN VARCHAR2
13:32:29 211  ) AS
13:32:29 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
13:32:29 213  -- VARIABLES
13:32:29 214  var_account_id NUMBER;
13:32:29 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
13:32:29 216  var_date DATE := SYSDATE;
13:32:29 217  -- EXCEPTIONS
13:32:29 218  BAD_GROUP_ID		EXCEPTION;
13:32:29 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
13:32:29 220  BEGIN
13:32:29 221  
13:32:29 222  	BEGIN
13:32:29 223  	  SELECT
13:32:29 224  	    ACCOUNT.ID into var_account_id
13:32:29 225  	  FROM
13:32:29 226  	    ACCOUNT
13:32:29 227  	  WHERE
13:32:29 228  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:29 229  	  EXCEPTION
13:32:29 230  	    WHEN NO_DATA_FOUND THEN
13:32:29 231  	      RAISE BAD_GROUP_ID;
13:32:29 232  	END;
13:32:29 233  
13:32:29 234  	UPDATE
13:32:29 235  	  ACCOUNT_LOCK
13:32:29 236  	SET
13:32:29 237  	  ACCOUNT_LOCK.END_DATE = var_date
13:32:29 238  	WHERE
13:32:29 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
13:32:29 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
13:32:29 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
13:32:29 242  
13:32:29 243  	IF SQL%ROWCOUNT = 0 THEN
13:32:29 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
13:32:29 245  	END IF;
13:32:29 246  
13:32:29 247  EXCEPTION
13:32:29 248  WHEN BAD_GROUP_ID THEN
13:32:29 249  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 250  	  SPROC_NAME, 'No such group id');
13:32:29 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
13:32:29 252  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:29 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
13:32:29 254  WHEN OTHERS THEN
13:32:29 255  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 256  	  SPROC_NAME, 'Unknown error');
13:32:29 257  END RELEASE_LOCK;
13:32:29 258  
13:32:29 259  END PROCS_LOCKING_V20;
13:32:29 260  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:29 SQL> 
13:32:29 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V20" AS
13:32:29   2  
13:32:29   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
13:32:29   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
13:32:29   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
13:32:29   6  ) AS
13:32:29   7  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
13:32:29   8  BEGIN
13:32:29   9  	SELECT
13:32:29  10  	  ID INTO out_data
13:32:29  11  	FROM
13:32:29  12  	  OFFER_CHAIN
13:32:29  13  	WHERE
13:32:29  14  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
13:32:29  15  EXCEPTION
13:32:29  16  	WHEN NO_DATA_FOUND THEN NULL;
13:32:29  17  END OC_ID_BY_ITUNES_PRODUCT_ID;
13:32:29  18  
13:32:29  19  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
13:32:29  20  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
13:32:29  21  	out_data	       OUT OFFER_CHAIN.ID%TYPE
13:32:29  22  ) AS
13:32:29  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
13:32:29  24  BEGIN
13:32:29  25  	SELECT
13:32:29  26  	  ID INTO out_data
13:32:29  27  	FROM
13:32:29  28  	  OFFER_CHAIN
13:32:29  29  	WHERE
13:32:29  30  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
13:32:29  31  EXCEPTION
13:32:29  32  	WHEN NO_DATA_FOUND THEN NULL;
13:32:29  33  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
13:32:29  34  
13:32:29  35  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:29  36  	in_offer_chain_id IN   NUMBER,
13:32:29  37  	out_result_set	  OUT  SYS_REFCURSOR
13:32:29  38  ) AS
13:32:29  39  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
13:32:29  40  BEGIN
13:32:29  41  
13:32:29  42  	-- Get offer chain informations
13:32:29  43  	OPEN out_result_set FOR
13:32:29  44  	  SELECT
13:32:29  45  	    OC.ID,
13:32:29  46  	    OC.NAME,
13:32:29  47  	    OC.ADOPTABILITY_WINDOW_START_DATE,
13:32:29  48  	    OC.ADOPTABILITY_WINDOW_END_DATE,
13:32:29  49  	    OC.DESCRIPTION,
13:32:29  50  	    OC.IS_GIFT_CERTIFICATE,
13:32:29  51  	    OC.OFFER_CHAIN_STATUS_ID,
13:32:29  52  	    OC.PRODUCT_URI,
13:32:29  53  	    OC.BILLING_SOURCE_ID,
13:32:29  54  	    OC.VENDOR_SOURCE_ID,
13:32:29  55  	    OC.GROUP_ACCOUNT_TYPE_ID,
13:32:29  56  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
13:32:29  57  	    OC.AMAZON_APPSTORE_SKU,
13:32:29  58  	    OC.ITUNES_PRODUCT_ID
13:32:29  59  	  FROM
13:32:29  60  	    OFFER_CHAIN OC
13:32:29  61  	  WHERE
13:32:29  62  	    OC.ID = in_offer_chain_id
13:32:29  63  	    AND ROWNUM <= 1;
13:32:29  64  
13:32:29  65  EXCEPTION
13:32:29  66  WHEN OTHERS THEN
13:32:29  67  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29  68  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29  69  END GET_OFFER_CHAIN_BY_ID;
13:32:29  70  
13:32:29  71  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
13:32:29  72  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:29  73  	out_result_set	   OUT SYS_REFCURSOR
13:32:29  74  ) AS
13:32:29  75  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
13:32:29  76  -- EXCEPTIONS
13:32:29  77  BAD_OFFER_CHAINS_IDS EXCEPTION;
13:32:29  78  BEGIN
13:32:29  79  
13:32:29  80  	IF (in_offer_chain_ids IS NULL) THEN
13:32:29  81  	  RAISE BAD_OFFER_CHAINS_IDS;
13:32:29  82  	END IF;
13:32:29  83  
13:32:29  84  	OPEN out_result_set FOR
13:32:29  85  	SELECT
13:32:29  86  	  OCH.ID,
13:32:29  87  	  OCH.NAME,
13:32:29  88  	  OCH.DESCRIPTION,
13:32:29  89  	  OCH.OFFER_CHAIN_STATUS_ID,
13:32:29  90  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
13:32:29  91  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
13:32:29  92  	  OCH.IS_GIFT_CERTIFICATE,
13:32:29  93  	  PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
13:32:29  94  	  PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
13:32:29  95  	  OCH.VENDOR_SOURCE_ID,
13:32:29  96  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
13:32:29  97  	FROM
13:32:29  98  	  OFFER_CHAIN OCH
13:32:29  99  	WHERE
13:32:29 100  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
13:32:29 101  
13:32:29 102  EXCEPTION
13:32:29 103  WHEN BAD_OFFER_CHAINS_IDS THEN
13:32:29 104  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29 105  	  SPROC_NAME, 'Invalid offer chains ids');
13:32:29 106  WHEN OTHERS THEN
13:32:29 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 109  END GET_OFFER_CHAINS_BY_IDS;
13:32:29 110  
13:32:29 111  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
13:32:29 112  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:29 113  	out_result_set	   OUT SYS_REFCURSOR
13:32:29 114  ) AS
13:32:29 115  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
13:32:29 116  -- EXCEPTIONS
13:32:29 117  BAD_OFFER_CHAINS_IDS EXCEPTION;
13:32:29 118  BEGIN
13:32:29 119  
13:32:29 120  	IF (in_offer_chain_ids IS NULL) THEN
13:32:29 121  	  RAISE BAD_OFFER_CHAINS_IDS;
13:32:29 122  	END IF;
13:32:29 123  
13:32:29 124  	OPEN out_result_set FOR
13:32:29 125  	SELECT
13:32:29 126  	  OOCH.OFFER_CHAIN_ID,
13:32:29 127  	  PO.PRODUCT_ID
13:32:29 128  	FROM
13:32:29 129  	  PRODUCT_OFFERING PO
13:32:29 130  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
13:32:29 131  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
13:32:29 132  	WHERE
13:32:29 133  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
13:32:29 134  
13:32:29 135  EXCEPTION
13:32:29 136  WHEN BAD_OFFER_CHAINS_IDS THEN
13:32:29 137  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29 138  	  SPROC_NAME, 'Invalid offer chains ids');
13:32:29 139  WHEN OTHERS THEN
13:32:29 140  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 141  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 142  END GET_OFFER_CHAINS_PRODUCTS;
13:32:29 143  
13:32:29 144  PROCEDURE GET_OFFER_CHAINS_OFFERS (
13:32:29 145  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:29 146  	out_result_set	   OUT SYS_REFCURSOR
13:32:29 147  ) AS
13:32:29 148  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
13:32:29 149  -- EXCEPTIONS
13:32:29 150  BAD_OFFER_CHAINS_IDS EXCEPTION;
13:32:29 151  BEGIN
13:32:29 152  
13:32:29 153  	IF (in_offer_chain_ids IS NULL) THEN
13:32:29 154  	  RAISE BAD_OFFER_CHAINS_IDS;
13:32:29 155  	END IF;
13:32:29 156  
13:32:29 157  	OPEN out_result_set FOR
13:32:29 158  	SELECT
13:32:29 159  	  OOCH.OFFER_CHAIN_ID,
13:32:29 160  	  OOCH.OFFER_ID,
13:32:29 161  	  OOCH.INDEX_VALUE,
13:32:29 162  	  OOCH.NUM_RECURRENCES,
13:32:29 163  	  O.ENTITLEMENT_DURATION,
13:32:29 164  	  PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
13:32:29 165  	FROM
13:32:29 166  	  OFFER O
13:32:29 167  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
13:32:29 168  	WHERE
13:32:29 169  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
13:32:29 170  
13:32:29 171  EXCEPTION
13:32:29 172  WHEN BAD_OFFER_CHAINS_IDS THEN
13:32:29 173  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29 174  	  SPROC_NAME, 'Invalid offer chains ids');
13:32:29 175  WHEN OTHERS THEN
13:32:29 176  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 177  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 178  END GET_OFFER_CHAINS_OFFERS;
13:32:29 179  
13:32:29 180  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
13:32:29 181  	in_product_id  IN  NUMBER,
13:32:29 182  	out_result_set OUT SYS_REFCURSOR
13:32:29 183  )AS
13:32:29 184  -- VARIBLES
13:32:29 185  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
13:32:29 186  temp_product_id NUMBER;
13:32:29 187  
13:32:29 188  -- EXCEPTIONS
13:32:29 189  BAD_PRODUCT_ID EXCEPTION;
13:32:29 190  BEGIN
13:32:29 191  
13:32:29 192  	-- Check that given product exists
13:32:29 193  	BEGIN
13:32:29 194  	  SELECT
13:32:29 195  	    PRODUCT.ID into temp_product_id
13:32:29 196  	  FROM
13:32:29 197  	    PRODUCT
13:32:29 198  	  WHERE
13:32:29 199  	    PRODUCT.ID = in_product_id;
13:32:29 200  	  EXCEPTION
13:32:29 201  	    WHEN NO_DATA_FOUND THEN
13:32:29 202  	      RAISE BAD_PRODUCT_ID;
13:32:29 203  	END;
13:32:29 204  
13:32:29 205  	-- Select all offer chains that contains given product
13:32:29 206  	OPEN out_result_set FOR
13:32:29 207  	SELECT
13:32:29 208  	  OFFER_CHAIN.ID,
13:32:29 209  	  OFFER_CHAIN.NAME,
13:32:29 210  	  OFFER_CHAIN.DESCRIPTION,
13:32:29 211  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
13:32:29 212  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
13:32:29 213  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
13:32:29 214  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
13:32:29 215  	FROM
13:32:29 216  	  OFFER_CHAIN
13:32:29 217  	WHERE
13:32:29 218  	  OFFER_CHAIN.ID IN (
13:32:29 219  	    SELECT DISTINCT
13:32:29 220  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
13:32:29 221  	    FROM
13:32:29 222  	      OFFER_OFFER_CHAIN
13:32:29 223  	    WHERE
13:32:29 224  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
13:32:29 225  		SELECT DISTINCT
13:32:29 226  		  OFFER_PRODUCT_OFFERING.OFFER_ID
13:32:29 227  		FROM
13:32:29 228  		  OFFER_PRODUCT_OFFERING
13:32:29 229  		WHERE
13:32:29 230  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
13:32:29 231  	      )
13:32:29 232  	  );
13:32:29 233  
13:32:29 234  EXCEPTION
13:32:29 235  WHEN BAD_PRODUCT_ID THEN
13:32:29 236  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 237  	  SPROC_NAME, 'No such product');
13:32:29 238  WHEN OTHERS THEN
13:32:29 239  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 241  END GET_OFFER_CHAINS_BY_PRODUCT;
13:32:29 242  
13:32:29 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
13:32:29 244  	in_offer_chain_id IN NUMBER,
13:32:29 245  	out_price	  OUT NUMBER
13:32:29 246  ) AS
13:32:29 247  -- VARIABLES
13:32:29 248  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
13:32:29 249  temp_offer_chain_id NUMBER;
13:32:29 250  
13:32:29 251  -- EXCEPTION
13:32:29 252  BAD_OFFER_CHAIN_ID       EXCEPTION;
13:32:29 253  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
13:32:29 254  EXCEPTION_MESSAGE        VARCHAR2(1024);
13:32:29 255  BEGIN
13:32:29 256  
13:32:29 257  	-- Check that given offer chain exists
13:32:29 258  	BEGIN
13:32:29 259  	  SELECT
13:32:29 260  	    OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 261  	  FROM
13:32:29 262  	    OFFER_CHAIN
13:32:29 263  	  WHERE
13:32:29 264  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 265  
13:32:29 266  	  EXCEPTION
13:32:29 267  	  WHEN NO_DATA_FOUND THEN
13:32:29 268  	    RAISE BAD_OFFER_CHAIN_ID;
13:32:29 269  	END;
13:32:29 270  
13:32:29 271  	BEGIN
13:32:29 272  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
13:32:29 273  	  EXCEPTION
13:32:29 274  	    WHEN OTHERS THEN
13:32:29 275  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 276  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
13:32:29 277  	END;
13:32:29 278  
13:32:29 279  EXCEPTION
13:32:29 280  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 281  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 282  	  SPROC_NAME, 'Bad offer chain id');
13:32:29 283  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
13:32:29 284  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 285  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
13:32:29 286  WHEN OTHERS THEN
13:32:29 287  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 288  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 289  END GET_OFFER_CHAIN_PRICE;
13:32:29 290  
13:32:29 291  PROCEDURE GET_FIRST_OFFER(
13:32:29 292  	in_offer_chain_id IN  NUMBER,
13:32:29 293  	out_offer_id	  OUT NUMBER
13:32:29 294  ) AS
13:32:29 295  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
13:32:29 296  BEGIN
13:32:29 297  	-- Seect first offer in offer chain
13:32:29 298  	SELECT
13:32:29 299  	  OFFER_ID into out_offer_id
13:32:29 300  	FROM (
13:32:29 301  	  SELECT
13:32:29 302  	    OFFER_OFFER_CHAIN.OFFER_ID
13:32:29 303  	  FROM
13:32:29 304  	    OFFER_OFFER_CHAIN
13:32:29 305  	  WHERE
13:32:29 306  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 307  	  ORDER BY
13:32:29 308  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
13:32:29 309  	)
13:32:29 310  	WHERE
13:32:29 311  	  ROWNUM <= 1;
13:32:29 312  
13:32:29 313  EXCEPTION
13:32:29 314  WHEN NO_DATA_FOUND THEN
13:32:29 315  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 316  	  SPROC_NAME, 'No such offer chain');
13:32:29 317  WHEN OTHERS THEN
13:32:29 318  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 320  END GET_FIRST_OFFER;
13:32:29 321  
13:32:29 322  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
13:32:29 323  	out_result_set OUT SYS_REFCURSOR
13:32:29 324  ) AS
13:32:29 325  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
13:32:29 326  BEGIN
13:32:29 327  	OPEN out_result_set FOR
13:32:29 328  	SELECT
13:32:29 329  	  OFFER_CHAIN.ID,
13:32:29 330  	  OFFER_CHAIN.NAME,
13:32:29 331  	  OFFER_CHAIN.DESCRIPTION,
13:32:29 332  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
13:32:29 333  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
13:32:29 334  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
13:32:29 335  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
13:32:29 336  	  PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
13:32:29 337  	  PRODUCT_OFFERING.PRODUCT_ID
13:32:29 338  	FROM
13:32:29 339  	  OFFER_CHAIN,
13:32:29 340  	  OFFER_OFFER_CHAIN,
13:32:29 341  	  OFFER_PRODUCT_OFFERING,
13:32:29 342  	  PRODUCT_OFFERING
13:32:29 343  	WHERE
13:32:29 344  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
13:32:29 345  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
13:32:29 346  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29 347  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE;
13:32:29 348  
13:32:29 349  EXCEPTION
13:32:29 350  WHEN OTHERS THEN
13:32:29 351  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 352  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 353  END GET_ACTIVE_OFFER_CHAINS;
13:32:29 354  
13:32:29 355  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
13:32:29 356  	in_offer_chain_id IN NUMBER,
13:32:29 357  	out_result_set	  OUT SYS_REFCURSOR
13:32:29 358  ) AS
13:32:29 359  -- VARIABLES
13:32:29 360  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
13:32:29 361  temp_offer_chain_id NUMBER;
13:32:29 362  
13:32:29 363  -- EXCEPTIONS
13:32:29 364  BAD_OFFER_CHAIN EXCEPTION;
13:32:29 365  BEGIN
13:32:29 366  
13:32:29 367  	-- Check that offer chain exists
13:32:29 368  	BEGIN
13:32:29 369  	  SELECT
13:32:29 370  	    OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 371  	  FROM
13:32:29 372  	    OFFER_CHAIN
13:32:29 373  	  WHERE
13:32:29 374  	    OFFER_CHAIN.ID = in_offer_chain_id
13:32:29 375  	    AND ROWNUM <= 1;
13:32:29 376  
13:32:29 377  	  EXCEPTION
13:32:29 378  	    WHEN OTHERS THEN
13:32:29 379  	      RAISE BAD_OFFER_CHAIN;
13:32:29 380  	END;
13:32:29 381  
13:32:29 382  	-- Select all products for given offer chain
13:32:29 383  	OPEN out_result_set FOR
13:32:29 384  	SELECT DISTINCT
13:32:29 385  	  PRODUCT_OFFERING.PRODUCT_ID
13:32:29 386  	FROM
13:32:29 387  	  PRODUCT_OFFERING
13:32:29 388  	WHERE
13:32:29 389  	  PRODUCT_OFFERING.ID IN (
13:32:29 390  	    SELECT DISTINCT
13:32:29 391  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:29 392  	    FROM
13:32:29 393  	      OFFER_PRODUCT_OFFERING
13:32:29 394  	    WHERE
13:32:29 395  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:29 396  		SELECT
13:32:29 397  		  OFFER_OFFER_CHAIN.OFFER_ID
13:32:29 398  		FROM
13:32:29 399  		  OFFER_OFFER_CHAIN
13:32:29 400  		WHERE
13:32:29 401  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 402  	      )
13:32:29 403  	  );
13:32:29 404  
13:32:29 405  EXCEPTION
13:32:29 406  WHEN BAD_OFFER_CHAIN THEN
13:32:29 407  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 408  	  SPROC_NAME, 'No such offer chain');
13:32:29 409  WHEN OTHERS THEN
13:32:29 410  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 412  END GET_OFFER_CHAIN_PRODUCTS;
13:32:29 413  
13:32:29 414  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
13:32:29 415  	in_offer_chain_id	  IN NUMBER,
13:32:29 416  	in_offer_chain_start_date IN DATE
13:32:29 417  ) RETURN DATE AS
13:32:29 418  -- VARIABLES
13:32:29 419  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
13:32:29 420  temp_offer_chain_id    NUMBER;
13:32:29 421  var_offer_chain_length NUMBER;
13:32:29 422  var_offer_duration     VARCHAR2(30);
13:32:29 423  var_offer_recurrences  NUMBER;
13:32:29 424  var_end_date	     DATE;
13:32:29 425  
13:32:29 426  var_offer_ym_interval INTERVAL YEAR TO MONTH;
13:32:29 427  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
13:32:29 428  var_offer_years	    NUMBER;
13:32:29 429  var_offer_months	    NUMBER;
13:32:29 430  var_offer_days	    NUMBER;
13:32:29 431  var_infinity_offers_count NUMBER;
13:32:29 432  
13:32:29 433  var_offers_set SYS_REFCURSOR;
13:32:29 434  
13:32:29 435  -- EXCEPTIONS
13:32:29 436  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:29 437  BEGIN
13:32:29 438  
13:32:29 439  	var_end_date := in_offer_chain_start_date;
13:32:29 440  
13:32:29 441  	-- Check that offer chain exists
13:32:29 442  	BEGIN
13:32:29 443  	  SELECT
13:32:29 444  	    OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 445  	  FROM
13:32:29 446  	    OFFER_CHAIN
13:32:29 447  	  WHERE
13:32:29 448  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 449  	  EXCEPTION
13:32:29 450  	    WHEN NO_DATA_FOUND
13:32:29 451  	      THEN RAISE BAD_OFFER_CHAIN_ID;
13:32:29 452  	END;
13:32:29 453  
13:32:29 454  	SELECT
13:32:29 455  	  COUNT(*) into var_infinity_offers_count
13:32:29 456  	FROM
13:32:29 457  	  OFFER_OFFER_CHAIN
13:32:29 458  	WHERE
13:32:29 459  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 460  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V20.OFFER_REC_INFINITY;
13:32:29 461  
13:32:29 462  	IF var_infinity_offers_count > 0 THEN
13:32:29 463  	  -- Offer chain contains offers with infinity num of recurrences
13:32:29 464  	  RETURN NULL;
13:32:29 465  	END IF;
13:32:29 466  
13:32:29 467  	-- Select offers durations
13:32:29 468  	OPEN var_offers_set FOR
13:32:29 469  	SELECT
13:32:29 470  	  OFFER.ENTITLEMENT_DURATION,
13:32:29 471  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
13:32:29 472  	FROM
13:32:29 473  	  OFFER_OFFER_CHAIN
13:32:29 474  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:29 475  	WHERE
13:32:29 476  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
13:32:29 477  
13:32:29 478  	-- Calculate sum of offers durations
13:32:29 479  	LOOP
13:32:29 480  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
13:32:29 481  	  EXIT WHEN var_offers_set%NOTFOUND;
13:32:29 482  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
13:32:29 483  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
13:32:29 484  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
13:32:29 485  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
13:32:29 486  	END LOOP;
13:32:29 487  
13:32:29 488  	RETURN var_end_date;
13:32:29 489  
13:32:29 490  EXCEPTION
13:32:29 491  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 492  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 493  	  SPROC_NAME, 'No such offer chain');
13:32:29 494  WHEN OTHERS THEN
13:32:29 495  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 496  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 497  END CALCULATE_OFFER_CHAIN_END_DATE;
13:32:29 498  
13:32:29 499  FUNCTION CALCULATE_OFFER_AMOUNT (
13:32:29 500  	in_offer_id IN NUMBER
13:32:29 501  ) RETURN NUMBER AS
13:32:29 502  -- VARIABLES
13:32:29 503  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
13:32:29 504  temp_offer_id NUMBER;
13:32:29 505  
13:32:29 506  var_product_offering_set	    SYS_REFCURSOR;
13:32:29 507  var_product_offering_id	    NUMBER;
13:32:29 508  var_product_offering_price    NUMBER(10,6);
13:32:29 509  var_product_offering_t_amount NUMBER(10,6);
13:32:29 510  var_product_offering_quantity NUMBER;
13:32:29 511  
13:32:29 512  var_total_amount NUMBER(10,6);
13:32:29 513  var_final_amount NUMBER(10,2);
13:32:29 514  
13:32:29 515  var_percent_discount NUMBER(10,2);
13:32:29 516  var_fixed_discount NUMBER(10,6);
13:32:29 517  
13:32:29 518  -- EXCEPTIONS
13:32:29 519  BAD_OFFER_ID EXCEPTION;
13:32:29 520  BEGIN
13:32:29 521  
13:32:29 522  	BEGIN
13:32:29 523  	  SELECT
13:32:29 524  	    OFFER.ID into temp_offer_id
13:32:29 525  	  FROM
13:32:29 526  	    OFFER
13:32:29 527  	  WHERE
13:32:29 528  	    OFFER.ID = in_offer_id;
13:32:29 529  	  EXCEPTION
13:32:29 530  	    WHEN NO_DATA_FOUND THEN
13:32:29 531  	      RAISE BAD_OFFER_ID;
13:32:29 532  	END;
13:32:29 533  
13:32:29 534  	OPEN var_product_offering_set FOR
13:32:29 535  	SELECT
13:32:29 536  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
13:32:29 537  	  PRODUCT_OFFERING.UNIT_PRICE,
13:32:29 538  	  PRODUCT_OFFERING.QUANTITY
13:32:29 539  	FROM
13:32:29 540  	  OFFER_PRODUCT_OFFERING
13:32:29 541  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29 542  	WHERE
13:32:29 543  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
13:32:29 544  
13:32:29 545  	var_total_amount := 0;
13:32:29 546  
13:32:29 547  	LOOP
13:32:29 548  	  FETCH var_product_offering_set into
13:32:29 549  	    var_product_offering_id,
13:32:29 550  	    var_product_offering_price,
13:32:29 551  	    var_product_offering_quantity;
13:32:29 552  	  EXIT WHEN var_product_offering_set%NOTFOUND;
13:32:29 553  
13:32:29 554  	  SELECT
13:32:29 555  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
13:32:29 556  	  FROM
13:32:29 557  	    DISCOUNT_PRODUCT_OFFERING
13:32:29 558  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
13:32:29 559  	  WHERE
13:32:29 560  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
13:32:29 561  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
13:32:29 562  
13:32:29 563  	  SELECT
13:32:29 564  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
13:32:29 565  	  FROM
13:32:29 566  	    DISCOUNT_PRODUCT_OFFERING
13:32:29 567  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
13:32:29 568  	  WHERE
13:32:29 569  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
13:32:29 570  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
13:32:29 571  
13:32:29 572  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
13:32:29 573  
13:32:29 574  	  IF var_percent_discount IS NOT NULL THEN
13:32:29 575  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
13:32:29 576  	  END IF;
13:32:29 577  
13:32:29 578  	  IF var_fixed_discount IS NOT NULL THEN
13:32:29 579  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
13:32:29 580  	  END IF;
13:32:29 581  
13:32:29 582  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
13:32:29 583  	END LOOP;
13:32:29 584  	var_final_amount := var_total_amount;
13:32:29 585  	RETURN var_final_amount;
13:32:29 586  
13:32:29 587  EXCEPTION
13:32:29 588  WHEN BAD_OFFER_ID THEN
13:32:29 589  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 590  	  SPROC_NAME, 'No such offer');
13:32:29 591  WHEN OTHERS THEN
13:32:29 592  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 593  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 594  END CALCULATE_OFFER_AMOUNT;
13:32:29 595  
13:32:29 596  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
13:32:29 597  	in_offer_chain_id IN NUMBER
13:32:29 598  ) RETURN NUMBER AS
13:32:29 599  -- VARIABLES
13:32:29 600  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
13:32:29 601  temp_offer_chain_id    NUMBER;
13:32:29 602  var_first_offer_id     NUMBER;
13:32:29 603  -- EXCEPTIONS
13:32:29 604  BAD_OFFER_CHAIN_ID      EXCEPTION;
13:32:29 605  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
13:32:29 606  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:29 607  BEGIN
13:32:29 608  
13:32:29 609  	BEGIN
13:32:29 610  	  SELECT
13:32:29 611  	    OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 612  	  FROM
13:32:29 613  	    OFFER_CHAIN
13:32:29 614  	  WHERE
13:32:29 615  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 616  	  EXCEPTION
13:32:29 617  	    WHEN NO_DATA_FOUND THEN
13:32:29 618  	      RAISE BAD_OFFER_CHAIN_ID;
13:32:29 619  	END;
13:32:29 620  
13:32:29 621  	BEGIN
13:32:29 622  	  PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(
13:32:29 623  	    in_offer_chain_id => in_offer_chain_id,
13:32:29 624  	    out_offer_id      => var_first_offer_id
13:32:29 625  	  );
13:32:29 626  	  EXCEPTION
13:32:29 627  	    WHEN OTHERS THEN
13:32:29 628  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 629  	      RAISE CAN_NOT_GET_FIRST_OFFER;
13:32:29 630  	END;
13:32:29 631  
13:32:29 632  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
13:32:29 633  
13:32:29 634  EXCEPTION
13:32:29 635  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 636  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 637  	  SPROC_NAME, 'No such offer chain');
13:32:29 638  WHEN CAN_NOT_GET_FIRST_OFFER THEN
13:32:29 639  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 640  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
13:32:29 641  WHEN OTHERS THEN
13:32:29 642  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 643  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 644  END CALCULATE_OFFER_CHAIN_AMOUNT;
13:32:29 645  
13:32:29 646  FUNCTION GET_FIRST_OFFER_INDEX (
13:32:29 647  	in_offer_chain_id IN NUMBER
13:32:29 648  ) RETURN NUMBER AS
13:32:29 649  -- VARIABLES
13:32:29 650  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
13:32:29 651  var_first_offer_index NUMBER;
13:32:29 652  BEGIN
13:32:29 653  
13:32:29 654  	SELECT
13:32:29 655  	  INDEX_VALUE into var_first_offer_index
13:32:29 656  	FROM (
13:32:29 657  	  SELECT
13:32:29 658  	    OFFER_OFFER_CHAIN.INDEX_VALUE
13:32:29 659  	  FROM
13:32:29 660  	    OFFER_OFFER_CHAIN
13:32:29 661  	  WHERE
13:32:29 662  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 663  	  ORDER BY
13:32:29 664  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
13:32:29 665  	)
13:32:29 666  	WHERE
13:32:29 667  	  ROWNUM <= 1;
13:32:29 668  
13:32:29 669  	RETURN var_first_offer_index;
13:32:29 670  
13:32:29 671  EXCEPTION
13:32:29 672  WHEN NO_DATA_FOUND THEN
13:32:29 673  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 674  	  SPROC_NAME, 'No such offer chain');
13:32:29 675  WHEN OTHERS THEN
13:32:29 676  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 678  END GET_FIRST_OFFER_INDEX;
13:32:29 679  
13:32:29 680  FUNCTION GET_NEXT_OFFER_INDEX (
13:32:29 681  	in_offer_chain_id	     IN NUMBER,
13:32:29 682  	in_offer_chain_current_index IN NUMBER
13:32:29 683  ) RETURN NUMBER AS
13:32:29 684  -- VARIABLES
13:32:29 685  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
13:32:29 686  temp_offer_chain_id	     NUMBER;
13:32:29 687  temp_offer_chain_current_index NUMBER;
13:32:29 688  var_result		     NUMBER;
13:32:29 689  -- EXCEPTIONS
13:32:29 690  BAD_OFFER_CHAIN_ID      EXCEPTION;
13:32:29 691  BAD_CURRENT_INDEX_VALUE EXCEPTION;
13:32:29 692  BEGIN
13:32:29 693  
13:32:29 694  	-- Check that offer chain exists
13:32:29 695  	BEGIN
13:32:29 696  	  SELECT
13:32:29 697  	    OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 698  	  FROM
13:32:29 699  	    OFFER_CHAIN
13:32:29 700  	  WHERE
13:32:29 701  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 702  	  EXCEPTION
13:32:29 703  	    WHEN NO_DATA_FOUND THEN
13:32:29 704  	      RAISE BAD_OFFER_CHAIN_ID;
13:32:29 705  	END;
13:32:29 706  
13:32:29 707  	-- Check that current offer index exists
13:32:29 708  	BEGIN
13:32:29 709  	  SELECT
13:32:29 710  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
13:32:29 711  	  FROM
13:32:29 712  	    OFFER_OFFER_CHAIN
13:32:29 713  	  WHERE
13:32:29 714  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 715  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
13:32:29 716  	    -- TODO: delete next line
13:32:29 717  	    AND ROWNUM <= 1;
13:32:29 718  	  EXCEPTION
13:32:29 719  	    WHEN NO_DATA_FOUND THEN
13:32:29 720  	      RAISE BAD_CURRENT_INDEX_VALUE;
13:32:29 721  	END;
13:32:29 722  
13:32:29 723  	-- Get next offer index
13:32:29 724  	BEGIN
13:32:29 725  	  SELECT
13:32:29 726  	    INDEX_VALUE into var_result
13:32:29 727  	  FROM (
13:32:29 728  	    SELECT
13:32:29 729  	      OFFER_OFFER_CHAIN.INDEX_VALUE
13:32:29 730  	    FROM
13:32:29 731  	      OFFER_OFFER_CHAIN
13:32:29 732  	    WHERE
13:32:29 733  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 734  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
13:32:29 735  	    ORDER BY
13:32:29 736  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
13:32:29 737  	  )
13:32:29 738  	  WHERE
13:32:29 739  	    ROWNUM <= 1;
13:32:29 740  	  EXCEPTION
13:32:29 741  	    WHEN NO_DATA_FOUND THEN
13:32:29 742  	      var_result := NULL;
13:32:29 743  	END;
13:32:29 744  
13:32:29 745  	RETURN var_result;
13:32:29 746  
13:32:29 747  EXCEPTION
13:32:29 748  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 749  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 750  	  SPROC_NAME, 'No such offer chain');
13:32:29 751  WHEN BAD_CURRENT_INDEX_VALUE THEN
13:32:29 752  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 753  	  SPROC_NAME, 'Bad current index value');
13:32:29 754  WHEN OTHERS THEN
13:32:29 755  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 757  END GET_NEXT_OFFER_INDEX;
13:32:29 758  
13:32:29 759  PROCEDURE P_GET_NEXT_OFFER_INDEX (
13:32:29 760  	in_offer_chain_id	     IN NUMBER,
13:32:29 761  	in_offer_chain_current_index IN NUMBER,
13:32:29 762  	out_next_offer_index	     OUT NUMBER
13:32:29 763  ) AS
13:32:29 764  BEGIN
13:32:29 765  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
13:32:29 766  	  in_offer_chain_id,
13:32:29 767  	  in_offer_chain_current_index
13:32:29 768  	);
13:32:29 769  END P_GET_NEXT_OFFER_INDEX;
13:32:29 770  
13:32:29 771  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
13:32:29 772  	in_license_id		     IN NUMBER,
13:32:29 773  	in_offer_chain_current_index IN NUMBER,
13:32:29 774  	out_next_offer_index	     OUT NUMBER
13:32:29 775  ) AS
13:32:29 776  -- VARIABLES
13:32:29 777  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
13:32:29 778  var_offer_chain_id NUMBER;
13:32:29 779  -- EXCEPTIONS
13:32:29 780  BAD_LICENSE_ID		   EXCEPTION;
13:32:29 781  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
13:32:29 782  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
13:32:29 783  BEGIN
13:32:29 784  
13:32:29 785  	BEGIN
13:32:29 786  	  SELECT
13:32:29 787  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
13:32:29 788  	  FROM
13:32:29 789  	    SUBSCRIPTION
13:32:29 790  	  WHERE
13:32:29 791  	    SUBSCRIPTION.ID = (
13:32:29 792  	      SELECT
13:32:29 793  		LICENSE.SUBSCRIPTION_ID
13:32:29 794  	      FROM
13:32:29 795  		LICENSE
13:32:29 796  	      WHERE
13:32:29 797  		LICENSE.ID = in_license_id
13:32:29 798  	    );
13:32:29 799  	  EXCEPTION
13:32:29 800  	    WHEN NO_DATA_FOUND THEN
13:32:29 801  	      RAISE BAD_LICENSE_ID;
13:32:29 802  	END;
13:32:29 803  
13:32:29 804  	BEGIN
13:32:29 805  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
13:32:29 806  	    var_offer_chain_id,
13:32:29 807  	    in_offer_chain_current_index
13:32:29 808  	  );
13:32:29 809  	  EXCEPTION
13:32:29 810  	    WHEN OTHERS THEN
13:32:29 811  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 812  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
13:32:29 813  	END;
13:32:29 814  
13:32:29 815  EXCEPTION
13:32:29 816  WHEN BAD_LICENSE_ID THEN
13:32:29 817  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 818  	  SPROC_NAME, 'No such license');
13:32:29 819  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
13:32:29 820  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 821  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
13:32:29 822  WHEN OTHERS THEN
13:32:29 823  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 824  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 825  END GET_NEXT_OFFER_INDEX_BY_LCNS;
13:32:29 826  
13:32:29 827  FUNCTION IS_OFFER_INDEX_EXISTS (
13:32:29 828  	in_offer_chain_id	   IN NUMBER,
13:32:29 829  	in_offer_chain_offer_index IN NUMBER
13:32:29 830  ) RETURN NUMBER AS
13:32:29 831  -- VARIABLES
13:32:29 832  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
13:32:29 833  temp_count NUMBER;
13:32:29 834  BEGIN
13:32:29 835  
13:32:29 836  	SELECT
13:32:29 837  	  COUNT(*) into temp_count
13:32:29 838  	FROM
13:32:29 839  	  OFFER_OFFER_CHAIN
13:32:29 840  	WHERE
13:32:29 841  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 842  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
13:32:29 843  
13:32:29 844  	IF temp_count > 0 THEN
13:32:29 845  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:29 846  	ELSE
13:32:29 847  	  RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 848  	END IF;
13:32:29 849  
13:32:29 850  EXCEPTION
13:32:29 851  WHEN OTHERS THEN
13:32:29 852  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 853  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 854  END IS_OFFER_INDEX_EXISTS;
13:32:29 855  
13:32:29 856  PROCEDURE GET_OFFER_LENGTH (
13:32:29 857  	in_offer_id IN NUMBER,
13:32:29 858  	out_years   OUT NUMBER,
13:32:29 859  	out_months  OUT NUMBER,
13:32:29 860  	out_days    OUT NUMBER
13:32:29 861  ) AS
13:32:29 862  -- VARIABLES
13:32:29 863  var_offer_duration VARCHAR2(30);
13:32:29 864  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
13:32:29 865  -- EXCEPTIONS
13:32:29 866  BAD_OFFER_ID	     EXCEPTION;
13:32:29 867  CAN_NOT_PARSE_DURATION EXCEPTION;
13:32:29 868  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:29 869  BEGIN
13:32:29 870  
13:32:29 871  	BEGIN
13:32:29 872  	  SELECT
13:32:29 873  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
13:32:29 874  	  FROM
13:32:29 875  	    OFFER
13:32:29 876  	  WHERE
13:32:29 877  	    OFFER.ID = in_offer_id;
13:32:29 878  	  EXCEPTION
13:32:29 879  	    WHEN NO_DATA_FOUND THEN
13:32:29 880  	      RAISE BAD_OFFER_ID;
13:32:29 881  	END;
13:32:29 882  
13:32:29 883  	BEGIN
13:32:29 884  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
13:32:29 885  	    var_offer_duration,
13:32:29 886  	    out_years,
13:32:29 887  	    out_months,
13:32:29 888  	    out_days
13:32:29 889  	  );
13:32:29 890  	  EXCEPTION
13:32:29 891  	    WHEN OTHERS THEN
13:32:29 892  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:29 893  	      RAISE CAN_NOT_PARSE_DURATION;
13:32:29 894  	END;
13:32:29 895  
13:32:29 896  EXCEPTION
13:32:29 897  WHEN BAD_OFFER_ID THEN
13:32:29 898  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 899  	  SPROC_NAME, 'No such offer');
13:32:29 900  WHEN CAN_NOT_PARSE_DURATION THEN
13:32:29 901  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 902  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
13:32:29 903  WHEN OTHERS THEN
13:32:29 904  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 906  END GET_OFFER_LENGTH;
13:32:29 907  
13:32:29 908  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
13:32:29 909  	in_offer_id   IN NUMBER,
13:32:29 910  	in_start_date IN DATE DEFAULT SYSDATE,
13:32:29 911  	out_days      OUT NUMBER
13:32:29 912  ) AS
13:32:29 913  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
13:32:29 914  -- VARIABLES
13:32:29 915  var_offer_duration VARCHAR2(30);
13:32:29 916  var_offer_years	 NUMBER;
13:32:29 917  var_offer_months	 NUMBER;
13:32:29 918  var_offer_days	 NUMBER;
13:32:29 919  var_offer_end_date DATE;
13:32:29 920  -- EXCEPTIONS
13:32:29 921  BAD_OFFER_ID EXCEPTION;
13:32:29 922  BEGIN
13:32:29 923  
13:32:29 924  	BEGIN
13:32:29 925  	  SELECT
13:32:29 926  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
13:32:29 927  	  FROM
13:32:29 928  	    OFFER
13:32:29 929  	  WHERE
13:32:29 930  	    OFFER.ID = in_offer_id;
13:32:29 931  	  EXCEPTION
13:32:29 932  	    WHEN NO_DATA_FOUND THEN
13:32:29 933  	      RAISE BAD_OFFER_ID;
13:32:29 934  	END;
13:32:29 935  
13:32:29 936  	PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS (
13:32:29 937  	  var_offer_duration,
13:32:29 938  	  var_offer_years,
13:32:29 939  	  var_offer_months,
13:32:29 940  	  var_offer_days
13:32:29 941  	);
13:32:29 942  
13:32:29 943  	var_offer_end_date := ( ( in_start_date
13:32:29 944  	  + GLOBAL_CONSTANTS_V20.ONE_DAY_INTERVAL * var_offer_days )
13:32:29 945  	  + GLOBAL_CONSTANTS_V20.ONE_MONTH_INTERVAL * var_offer_months )
13:32:29 946  	  + GLOBAL_CONSTANTS_V20.ONE_YEAR_INTERVAL * var_offer_years;
13:32:29 947  
13:32:29 948  	out_days := var_offer_end_date - in_start_date;
13:32:29 949  
13:32:29 950  EXCEPTION
13:32:29 951  WHEN BAD_OFFER_ID THEN
13:32:29 952  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 953  	  SPROC_NAME, 'No such offer');
13:32:29 954  WHEN OTHERS THEN
13:32:29 955  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 956  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 957  END GET_OFFER_LENGTH_IN_DAYS;
13:32:29 958  
13:32:29 959  PROCEDURE GET_OFFER_PRODUCTS (
13:32:29 960  	in_offer_id    IN NUMBER,
13:32:29 961  	out_result_set OUT SYS_REFCURSOR
13:32:29 962  ) AS
13:32:29 963  -- VARIABLES
13:32:29 964  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
13:32:29 965  temp_offerr_id NUMBER;
13:32:29 966  -- EXCEPTIONS
13:32:29 967  BAD_OFFER_ID EXCEPTION;
13:32:29 968  BEGIN
13:32:29 969  
13:32:29 970  	BEGIN
13:32:29 971  	  SELECT
13:32:29 972  	    OFFER.ID into temp_offerr_id
13:32:29 973  	  FROM
13:32:29 974  	    OFFER
13:32:29 975  	  WHERE
13:32:29 976  	    OFFER.ID = in_offer_id;
13:32:29 977  	  EXCEPTION
13:32:29 978  	    WHEN NO_DATA_FOUND THEN
13:32:29 979  	      RAISE BAD_OFFER_ID;
13:32:29 980  	END;
13:32:29 981  
13:32:29 982  	OPEN out_result_set FOR
13:32:29 983  	SELECT DISTINCT
13:32:29 984  	  PRODUCT.ID,
13:32:29 985  	  PRODUCT.NAME
13:32:29 986  	FROM
13:32:29 987  	  PRODUCT
13:32:29 988  	WHERE
13:32:29 989  	  PRODUCT.ID IN (
13:32:29 990  	      SELECT
13:32:29 991  		PRODUCT_OFFERING.PRODUCT_ID
13:32:29 992  	      FROM
13:32:29 993  		OFFER_PRODUCT_OFFERING
13:32:29 994  		INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29 995  	      WHERE
13:32:29 996  		OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
13:32:29 997  	    );
13:32:29 998  
13:32:29 999  EXCEPTION
13:32:29 1000  WHEN BAD_OFFER_ID THEN
13:32:29 1001  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1002  	   SPROC_NAME, 'No such offer');
13:32:29 1003  WHEN OTHERS THEN
13:32:29 1004  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1005  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1006  END GET_OFFER_PRODUCTS;
13:32:29 1007  
13:32:29 1008  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
13:32:29 1009  	 in_offer_chain_id IN NUMBER,
13:32:29 1010  	 out_result_set    OUT SYS_REFCURSOR
13:32:29 1011  ) AS
13:32:29 1012  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
13:32:29 1013  -- VARIABLES
13:32:29 1014  temp_offer_chain_id NUMBER;
13:32:29 1015  -- EXCEPTIONS
13:32:29 1016  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:29 1017  BEGIN
13:32:29 1018  
13:32:29 1019  	 BEGIN
13:32:29 1020  	   SELECT
13:32:29 1021  	     OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 1022  	   FROM
13:32:29 1023  	     OFFER_CHAIN
13:32:29 1024  	   WHERE
13:32:29 1025  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 1026  	   EXCEPTION
13:32:29 1027  	     WHEN NO_DATA_FOUND THEN
13:32:29 1028  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:29 1029  	 END;
13:32:29 1030  
13:32:29 1031  	 OPEN out_result_set FOR
13:32:29 1032  	 SELECT
13:32:29 1033  	   PRODUCT_OFFERING.ID,
13:32:29 1034  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:29 1035  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:29 1036  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:29 1037  	   PRODUCT_OFFERING.QUANTITY,
13:32:29 1038  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:29 1039  	   PRODUCT_OFFERING.CREATED_BY,
13:32:29 1040  	   PRODUCT.NAME,
13:32:29 1041  	   PRODUCT.PRODUCT_URI,
13:32:29 1042  	   CAPABILITY.ID CAP_ID,
13:32:29 1043  	   CAPABILITY.CODE CAP_CODE,
13:32:29 1044  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:29 1045  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:29 1046  	 FROM
13:32:29 1047  	   PRODUCT_OFFERING
13:32:29 1048  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
13:32:29 1049  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:29 1050  	 WHERE
13:32:29 1051  	   PRODUCT_OFFERING.ID IN (
13:32:29 1052  	     SELECT DISTINCT
13:32:29 1053  	       PRODUCT_OFFERING_ID
13:32:29 1054  	     FROM
13:32:29 1055  	       OFFER_PRODUCT_OFFERING
13:32:29 1056  	     WHERE
13:32:29 1057  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:29 1058  		 SELECT DISTINCT
13:32:29 1059  		   OFFER_ID
13:32:29 1060  		 FROM
13:32:29 1061  		   OFFER_OFFER_CHAIN
13:32:29 1062  		 WHERE
13:32:29 1063  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1064  	       )
13:32:29 1065  	   );
13:32:29 1066  
13:32:29 1067  EXCEPTION
13:32:29 1068  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 1069  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1070  	   SPROC_NAME, 'Bad offer chain id');
13:32:29 1071  WHEN OTHERS THEN
13:32:29 1072  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1073  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1074  END GET_OFFER_CHAIN_PROD_OFFERINGS;
13:32:29 1075  
13:32:29 1076  FUNCTION CHECK_FOR_SAME_PRODUCTS (
13:32:29 1077  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
13:32:29 1078  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
13:32:29 1079  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:29 1080  ) RETURN NUMBER AS
13:32:29 1081  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
13:32:29 1082  -- CONSTANTS
13:32:29 1083  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
13:32:29 1084  -- VARIABLES
13:32:29 1085  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
13:32:29 1086  var_same_products	SYS_REFCURSOR;
13:32:29 1087  var_same_product_id	NUMBER;
13:32:29 1088  same_product_count	NUMBER;
13:32:29 1089  var_product_eligibility_limit NUMBER;
13:32:29 1090  s_product_eligibility_limit   VARCHAR2(100);
13:32:29 1091  -- EXCEPTIONS
13:32:29 1092  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
13:32:29 1093  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
13:32:29 1094  BEGIN
13:32:29 1095  
13:32:29 1096  	 -- Check that first offer chain exists
13:32:29 1097  	 BEGIN
13:32:29 1098  	   SELECT
13:32:29 1099  	     OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 1100  	   FROM
13:32:29 1101  	     OFFER_CHAIN
13:32:29 1102  	   WHERE
13:32:29 1103  	     OFFER_CHAIN.ID = in_offer_chain_1;
13:32:29 1104  	   EXCEPTION
13:32:29 1105  	     WHEN NO_DATA_FOUND THEN
13:32:29 1106  	       RAISE BAD_FIRST_OFFER_CHAIN;
13:32:29 1107  	 END;
13:32:29 1108  
13:32:29 1109  	 -- Check that second offer chain exists
13:32:29 1110  	 BEGIN
13:32:29 1111  	   SELECT
13:32:29 1112  	     OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 1113  	   FROM
13:32:29 1114  	     OFFER_CHAIN
13:32:29 1115  	   WHERE
13:32:29 1116  	     OFFER_CHAIN.ID = in_offer_chain_2;
13:32:29 1117  	   EXCEPTION
13:32:29 1118  	     WHEN NO_DATA_FOUND THEN
13:32:29 1119  	       RAISE BAD_SECOND_OFFER_CHAIN;
13:32:29 1120  	 END;
13:32:29 1121  
13:32:29 1122  	 PROCS_OFFER_CHAIN_V20.GET_OFF_CHAINS_SAME_PRODUCTS(
13:32:29 1123  	   in_offer_chain_1 => in_offer_chain_1,
13:32:29 1124  	   in_offer_chain_2 => in_offer_chain_2,
13:32:29 1125  	   out_result_set   => var_same_products
13:32:29 1126  	 );
13:32:29 1127  
13:32:29 1128  	 LOOP
13:32:29 1129  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
13:32:29 1130  	   EXIT WHEN var_same_products%NOTFOUND;
13:32:29 1131  
13:32:29 1132  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:29 1133  	     -- Return false because this offer chains having same products
13:32:29 1134  	     RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:29 1135  	   ELSE
13:32:29 1136  
13:32:29 1137  	     -- Get eligibility rule for given product
13:32:29 1138  	     BEGIN
13:32:29 1139  	       SELECT
13:32:29 1140  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
13:32:29 1141  	       FROM
13:32:29 1142  		 PRODUCT_ELIGIBILITY
13:32:29 1143  	       WHERE
13:32:29 1144  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
13:32:29 1145  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
13:32:29 1146  
13:32:29 1147  	       -- REVU: What should to be here? 1?
13:32:29 1148  	       EXCEPTION
13:32:29 1149  		 WHEN NO_DATA_FOUND THEN
13:32:29 1150  		   s_product_eligibility_limit := '1';
13:32:29 1151  	     END;
13:32:29 1152  
13:32:29 1153  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V20.MAX_CONSURRENT_PRD_UNLIM THEN
13:32:29 1154  	       RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 1155  	     END IF;
13:32:29 1156  
13:32:29 1157  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
13:32:29 1158  
13:32:29 1159  	     -- Check for limit
13:32:29 1160  	     IF var_product_eligibility_limit < same_product_count THEN
13:32:29 1161  	       RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:29 1162  	     END IF;
13:32:29 1163  
13:32:29 1164  	   END IF;
13:32:29 1165  	 END LOOP;
13:32:29 1166  
13:32:29 1167  	 RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 1168  
13:32:29 1169  EXCEPTION
13:32:29 1170  WHEN BAD_FIRST_OFFER_CHAIN THEN
13:32:29 1171  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1172  	   SPROC_NAME, 'First offer chain not found');
13:32:29 1173  WHEN BAD_SECOND_OFFER_CHAIN THEN
13:32:29 1174  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1175  	   SPROC_NAME, 'Second offer chain not found');
13:32:29 1176  WHEN OTHERS THEN
13:32:29 1177  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1178  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1179  END CHECK_FOR_SAME_PRODUCTS;
13:32:29 1180  
13:32:29 1181  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
13:32:29 1182  	 in_offer_chain_id IN NUMBER
13:32:29 1183  ) RETURN NUMBER AS
13:32:29 1184  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
13:32:29 1185  -- VARIABLES
13:32:29 1186  var_is_cancelable_str VARCHAR2(1);
13:32:29 1187  var_is_cancelable     NUMBER;
13:32:29 1188  BEGIN
13:32:29 1189  
13:32:29 1190  	 BEGIN
13:32:29 1191  	   SELECT
13:32:29 1192  	     VALUE INTO var_is_cancelable_str
13:32:29 1193  	   FROM (
13:32:29 1194  	     SELECT
13:32:29 1195  	       VALUE, NAME
13:32:29 1196  	     FROM
13:32:29 1197  	       OFFER_CHAIN_META_DATA
13:32:29 1198  	     WHERE
13:32:29 1199  	       OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1200  	     )
13:32:29 1201  	   WHERE
13:32:29 1202  	     UPPER(NAME) = 'CANCELABLE';
13:32:29 1203  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
13:32:29 1204  	   EXCEPTION
13:32:29 1205  	     WHEN NO_DATA_FOUND THEN
13:32:29 1206  	       var_is_cancelable := GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 1207  	 END;
13:32:29 1208  
13:32:29 1209  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:29 1210  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 1211  	 END IF;
13:32:29 1212  
13:32:29 1213  	 RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:29 1214  
13:32:29 1215  EXCEPTION
13:32:29 1216  WHEN OTHERS THEN
13:32:29 1217  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1218  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1219  END IS_OFFER_CHAIN_CANCELABLE;
13:32:29 1220  
13:32:29 1221  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
13:32:29 1222  	 in_offer_chain_id IN NUMBER
13:32:29 1223  ) RETURN NUMBER AS
13:32:29 1224  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
13:32:29 1225  -- VARIABLES
13:32:29 1226  var_max_concurrent_subs_str VARCHAR2(100);
13:32:29 1227  var_max_concurrent_subs	   NUMBER;
13:32:29 1228  BEGIN
13:32:29 1229  
13:32:29 1230  	 BEGIN
13:32:29 1231  	   SELECT
13:32:29 1232  	     VALUE into var_max_concurrent_subs_str
13:32:29 1233  	   FROM
13:32:29 1234  	     (
13:32:29 1235  	       SELECT
13:32:29 1236  		 NAME,
13:32:29 1237  		 VALUE
13:32:29 1238  	       FROM
13:32:29 1239  		 OFFER_CHAIN_ELIGIBILITY
13:32:29 1240  	       WHERE
13:32:29 1241  		 OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1242  	     )
13:32:29 1243  	   WHERE
13:32:29 1244  	     NAME LIKE GLOBAL_CONSTANTS_V20.MAX_CONCURRENT_SUBS;
13:32:29 1245  
13:32:29 1246  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V20.MAX_CONCURRENT_SUBS_UNLIM THEN
13:32:29 1247  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V20.INFINITY;
13:32:29 1248  	   ELSE
13:32:29 1249  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
13:32:29 1250  	   END IF;
13:32:29 1251  
13:32:29 1252  	   EXCEPTION
13:32:29 1253  	     WHEN NO_DATA_FOUND THEN
13:32:29 1254  	       var_max_concurrent_subs := 1;
13:32:29 1255  	 END;
13:32:29 1256  
13:32:29 1257  	 RETURN var_max_concurrent_subs;
13:32:29 1258  
13:32:29 1259  EXCEPTION
13:32:29 1260  WHEN OTHERS THEN
13:32:29 1261  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1262  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1263  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
13:32:29 1264  
13:32:29 1265  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
13:32:29 1266  	 in_offer_chain_id   IN NUMBER,
13:32:29 1267  	 in_eligibility_name IN VARCHAR2,
13:32:29 1268  	 out_result_set      OUT SYS_REFCURSOR
13:32:29 1269  ) AS
13:32:29 1270  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
13:32:29 1271  -- VARIABLES
13:32:29 1272  temp_offer_chain_id NUMBER;
13:32:29 1273  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
13:32:29 1274  -- EXCEPTIONS
13:32:29 1275  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:29 1276  BEGIN
13:32:29 1277  
13:32:29 1278  	 BEGIN
13:32:29 1279  	   SELECT
13:32:29 1280  	     OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 1281  	   FROM
13:32:29 1282  	     OFFER_CHAIN
13:32:29 1283  	   WHERE
13:32:29 1284  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 1285  	   EXCEPTION
13:32:29 1286  	     WHEN NO_DATA_FOUND THEN
13:32:29 1287  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:29 1288  	 END;
13:32:29 1289  
13:32:29 1290  	 var_eligibility_name := UPPER(in_eligibility_name);
13:32:29 1291  
13:32:29 1292  	 OPEN out_result_set FOR
13:32:29 1293  	 SELECT
13:32:29 1294  	   OFFER_CHAIN_ELIGIBILITY.ID,
13:32:29 1295  	   OFFER_CHAIN_ELIGIBILITY.NAME,
13:32:29 1296  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
13:32:29 1297  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
13:32:29 1298  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
13:32:29 1299  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
13:32:29 1300  	 FROM
13:32:29 1301  	   OFFER_CHAIN_ELIGIBILITY
13:32:29 1302  	 WHERE
13:32:29 1303  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1304  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
13:32:29 1305  
13:32:29 1306  EXCEPTION
13:32:29 1307  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 1308  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1309  	   SPROC_NAME, 'No such offer chain');
13:32:29 1310  WHEN OTHERS THEN
13:32:29 1311  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1312  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1313  END GET_OFFER_CHAIN_ELIGIBILITY;
13:32:29 1314  
13:32:29 1315  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
13:32:29 1316  	 in_offer_chain_ids  IN VARCHAR2,
13:32:29 1317  	 in_eligibility_name IN VARCHAR2,
13:32:29 1318  	 out_result_set      OUT SYS_REFCURSOR
13:32:29 1319  ) AS
13:32:29 1320  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
13:32:29 1321  -- VARIABLES
13:32:29 1322  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
13:32:29 1323  BEGIN
13:32:29 1324  
13:32:29 1325  	 var_eligibility_name := UPPER(in_eligibility_name);
13:32:29 1326  
13:32:29 1327  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
13:32:29 1328  
13:32:29 1329  	 open out_result_set for
13:32:29 1330  	 'SELECT
13:32:29 1331  	   ID,
13:32:29 1332  	   NAME,
13:32:29 1333  	   VALUE,
13:32:29 1334  	   OFFER_CHAIN_ID,
13:32:29 1335  	   CREATE_DATE,
13:32:29 1336  	   CREATED_BY
13:32:29 1337  	 FROM
13:32:29 1338  	   OFFER_CHAIN_ELIGIBILITY
13:32:29 1339  	 WHERE
13:32:29 1340  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
13:32:29 1341  	   AND UPPER(NAME) = :1'
13:32:29 1342  	 using var_eligibility_name;
13:32:29 1343  
13:32:29 1344  EXCEPTION
13:32:29 1345  WHEN OTHERS THEN
13:32:29 1346  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1347  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1348  END GET_OFFER_CHAINS_ELIGIBILITY;
13:32:29 1349  
13:32:29 1350  PROCEDURE GET_OFFER_CHAINS_META_DATA (
13:32:29 1351  	 in_offer_chain_ids IN VARCHAR2,
13:32:29 1352  	 in_meta_data_name  IN VARCHAR2,
13:32:29 1353  	 out_result_set     OUT SYS_REFCURSOR
13:32:29 1354  ) AS
13:32:29 1355  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
13:32:29 1356  -- VARIABLES
13:32:29 1357  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
13:32:29 1358  BEGIN
13:32:29 1359  
13:32:29 1360  	 var_meta_data_name := UPPER(in_meta_data_name);
13:32:29 1361  
13:32:29 1362  	 open out_result_set for
13:32:29 1363  	 'select
13:32:29 1364  	   ID,
13:32:29 1365  	   NAME,
13:32:29 1366  	   VALUE,
13:32:29 1367  	   OFFER_CHAIN_ID,
13:32:29 1368  	   CREATED_BY,
13:32:29 1369  	   CREATE_DATE
13:32:29 1370  	 from
13:32:29 1371  	   OFFER_CHAIN_META_DATA
13:32:29 1372  	 where
13:32:29 1373  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
13:32:29 1374  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
13:32:29 1375  	 using var_meta_data_name;
13:32:29 1376  
13:32:29 1377  EXCEPTION
13:32:29 1378  WHEN OTHERS THEN
13:32:29 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1380  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1381  END GET_OFFER_CHAINS_META_DATA;
13:32:29 1382  
13:32:29 1383  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:29 1384  	 in_offer_chain_id IN NUMBER,
13:32:29 1385  	 in_meta_data_name IN VARCHAR2,
13:32:29 1386  	 out_result_set    OUT SYS_REFCURSOR
13:32:29 1387  ) AS
13:32:29 1388  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
13:32:29 1389  -- VARIABLES
13:32:29 1390  temp_offer_chain_id NUMBER;
13:32:29 1391  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
13:32:29 1392  -- EXCEPTIONS
13:32:29 1393  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:29 1394  BEGIN
13:32:29 1395  
13:32:29 1396  	 BEGIN
13:32:29 1397  	   SELECT
13:32:29 1398  	     OFFER_CHAIN.ID into temp_offer_chain_id
13:32:29 1399  	   FROM
13:32:29 1400  	     OFFER_CHAIN
13:32:29 1401  	   WHERE
13:32:29 1402  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:29 1403  	   EXCEPTION
13:32:29 1404  	     WHEN NO_DATA_FOUND THEN
13:32:29 1405  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:29 1406  	 END;
13:32:29 1407  
13:32:29 1408  	 var_meta_data_name := UPPER(in_meta_data_name);
13:32:29 1409  
13:32:29 1410  	 OPEN out_result_set FOR
13:32:29 1411  	 SELECT
13:32:29 1412  	   OFFER_CHAIN_META_DATA.ID,
13:32:29 1413  	   OFFER_CHAIN_META_DATA.NAME,
13:32:29 1414  	   OFFER_CHAIN_META_DATA.VALUE,
13:32:29 1415  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
13:32:29 1416  	   OFFER_CHAIN_META_DATA.CREATED_BY,
13:32:29 1417  	   OFFER_CHAIN_META_DATA.CREATE_DATE
13:32:29 1418  	 FROM
13:32:29 1419  	   OFFER_CHAIN_META_DATA
13:32:29 1420  	 WHERE
13:32:29 1421  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1422  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
13:32:29 1423  
13:32:29 1424  EXCEPTION
13:32:29 1425  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 1426  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1427  	   SPROC_NAME, 'No such offer chain');
13:32:29 1428  WHEN OTHERS THEN
13:32:29 1429  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1430  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1431  END GET_OFFER_CHAIN_META_DATA;
13:32:29 1432  
13:32:29 1433  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
13:32:29 1434  	 in_offer_id	IN NUMBER,
13:32:29 1435  	 out_result_set OUT SYS_REFCURSOR
13:32:29 1436  ) AS
13:32:29 1437  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
13:32:29 1438  -- VARIABLES
13:32:29 1439  temp_offer_id NUMBER;
13:32:29 1440  -- EXCEPTIONS
13:32:29 1441  BAD_OFFER_ID EXCEPTION;
13:32:29 1442  BEGIN
13:32:29 1443  
13:32:29 1444  	 BEGIN
13:32:29 1445  	   SELECT
13:32:29 1446  	     OFFER.ID into temp_offer_id
13:32:29 1447  	   FROM
13:32:29 1448  	     OFFER
13:32:29 1449  	   WHERE
13:32:29 1450  	     OFFER.ID = in_offer_id;
13:32:29 1451  	   EXCEPTION
13:32:29 1452  	     WHEN NO_DATA_FOUND THEN
13:32:29 1453  	       RAISE BAD_OFFER_ID;
13:32:29 1454  	 END;
13:32:29 1455  
13:32:29 1456  	 OPEN out_result_set FOR
13:32:29 1457  	 SELECT DISTINCT
13:32:29 1458  	   PRODUCT_OFFERING.ID,
13:32:29 1459  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:29 1460  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:29 1461  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:29 1462  	   PRODUCT_OFFERING.QUANTITY,
13:32:29 1463  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:29 1464  	   PRODUCT_OFFERING.CREATED_BY,
13:32:29 1465  	   CAPABILITY.ID CAP_ID,
13:32:29 1466  	   CAPABILITY.CODE CAP_CODE,
13:32:29 1467  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:29 1468  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:29 1469  	 FROM
13:32:29 1470  	   OFFER_PRODUCT_OFFERING
13:32:29 1471  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:29 1472  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:29 1473  	 WHERE
13:32:29 1474  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
13:32:29 1475  
13:32:29 1476  EXCEPTION
13:32:29 1477  WHEN BAD_OFFER_ID THEN
13:32:29 1478  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1479  	   SPROC_NAME, 'No such offer');
13:32:29 1480  WHEN OTHERS THEN
13:32:29 1481  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1482  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
13:32:29 1484  
13:32:29 1485  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:29 1486  	 in_product_offering_id IN NUMBER,
13:32:29 1487  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
13:32:29 1488  	 out_result_set 	OUT SYS_REFCURSOR
13:32:29 1489  ) AS
13:32:29 1490  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
13:32:29 1491  -- VARIABLES
13:32:29 1492  temp_product_offering_id NUMBER;
13:32:29 1493  -- EXCEPTIONS
13:32:29 1494  BAD_PRODUCT_OFFERING_ID EXCEPTION;
13:32:29 1495  BEGIN
13:32:29 1496  
13:32:29 1497  	 BEGIN
13:32:29 1498  	   SELECT
13:32:29 1499  	     PRODUCT_OFFERING.ID into temp_product_offering_id
13:32:29 1500  	   FROM
13:32:29 1501  	     PRODUCT_OFFERING
13:32:29 1502  	   WHERE
13:32:29 1503  	     PRODUCT_OFFERING.ID = in_product_offering_id;
13:32:29 1504  	   EXCEPTION
13:32:29 1505  	     WHEN NO_DATA_FOUND THEN
13:32:29 1506  	       RAISE BAD_PRODUCT_OFFERING_ID;
13:32:29 1507  	 END;
13:32:29 1508  
13:32:29 1509  	 OPEN out_result_set FOR
13:32:29 1510  	 SELECT
13:32:29 1511  	   PRODUCT_OFFERING_META_DATA.ID,
13:32:29 1512  	   PRODUCT_OFFERING_META_DATA.NAME,
13:32:29 1513  	   PRODUCT_OFFERING_META_DATA.VALUE,
13:32:29 1514  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
13:32:29 1515  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
13:32:29 1516  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
13:32:29 1517  	 FROM
13:32:29 1518  	   PRODUCT_OFFERING_META_DATA
13:32:29 1519  	 WHERE
13:32:29 1520  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
13:32:29 1521  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
13:32:29 1522  
13:32:29 1523  EXCEPTION
13:32:29 1524  WHEN BAD_PRODUCT_OFFERING_ID THEN
13:32:29 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1526  	   SPROC_NAME, 'No such product offering');
13:32:29 1527  END GET_PRODUCT_OFFERING_META_DATA;
13:32:29 1528  
13:32:29 1529  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
13:32:29 1530  	 in_offer_chain_1 IN NUMBER,
13:32:29 1531  	 in_offer_chain_2 IN NUMBER,
13:32:29 1532  	 out_result_set   OUT SYS_REFCURSOR
13:32:29 1533  ) AS
13:32:29 1534  BEGIN
13:32:29 1535  
13:32:29 1536  	 OPEN out_result_set FOR
13:32:29 1537  	 SELECT
13:32:29 1538  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
13:32:29 1539  	   COUNT_1 + COUNT_2	    AS "COUNT"
13:32:29 1540  	 FROM
13:32:29 1541  	   (
13:32:29 1542  	     SELECT
13:32:29 1543  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
13:32:29 1544  	       COUNT(*) 		   as "COUNT_1"
13:32:29 1545  	     FROM
13:32:29 1546  	       (
13:32:29 1547  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
13:32:29 1548  	       )
13:32:29 1549  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
13:32:29 1550  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29 1551  	     GROUP BY
13:32:29 1552  	       PRODUCT_OFFERING.PRODUCT_ID
13:32:29 1553  	   )
13:32:29 1554  	   INNER JOIN
13:32:29 1555  	   (
13:32:29 1556  	     SELECT
13:32:29 1557  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
13:32:29 1558  	       COUNT(*) 		   as "COUNT_2"
13:32:29 1559  	     FROM
13:32:29 1560  	       (
13:32:29 1561  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
13:32:29 1562  	       )
13:32:29 1563  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
13:32:29 1564  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:29 1565  	     GROUP BY
13:32:29 1566  	       PRODUCT_OFFERING.PRODUCT_ID
13:32:29 1567  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
13:32:29 1568  
13:32:29 1569  END GET_OFF_CHAINS_SAME_PRODUCTS;
13:32:29 1570  
13:32:29 1571  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
13:32:29 1572  	 in_offer_chain_id IN NUMBER,
13:32:29 1573  	 in_meta_data_name IN VARCHAR2,
13:32:29 1574  	 out_value	   OUT VARCHAR2
13:32:29 1575  ) AS
13:32:29 1576  BEGIN
13:32:29 1577  	 BEGIN
13:32:29 1578  	   SELECT
13:32:29 1579  	     OFFER_CHAIN_META_DATA.VALUE into out_value
13:32:29 1580  	   FROM
13:32:29 1581  	     OFFER_CHAIN_META_DATA
13:32:29 1582  	   WHERE
13:32:29 1583  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1584  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
13:32:29 1585  
13:32:29 1586  	   EXCEPTION
13:32:29 1587  	     WHEN NO_DATA_FOUND THEN
13:32:29 1588  	       out_value := NULL;
13:32:29 1589  	 END;
13:32:29 1590  END GET_OFFER_CHAIN_MD_VALUE;
13:32:29 1591  
13:32:29 1592  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
13:32:29 1593  	 in_offer_chain_id   IN NUMBER,
13:32:29 1594  	 in_eligibility_name IN VARCHAR2,
13:32:29 1595  	 out_value	     OUT VARCHAR2
13:32:29 1596  ) AS
13:32:29 1597  BEGIN
13:32:29 1598  	 BEGIN
13:32:29 1599  	   SELECT
13:32:29 1600  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
13:32:29 1601  	   FROM
13:32:29 1602  	     OFFER_CHAIN_ELIGIBILITY
13:32:29 1603  	   WHERE
13:32:29 1604  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1605  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
13:32:29 1606  
13:32:29 1607  	   EXCEPTION
13:32:29 1608  	     WHEN NO_DATA_FOUND THEN
13:32:29 1609  	       out_value := NULL;
13:32:29 1610  	 END;
13:32:29 1611  END GET_OFFER_CHAIN_EL_VALUE;
13:32:29 1612  
13:32:29 1613  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
13:32:29 1614  	 in_offer_id	IN NUMBER,
13:32:29 1615  	 out_result_set OUT SYS_REFCURSOR
13:32:29 1616  ) AS
13:32:29 1617  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
13:32:29 1618  -- VARIABLES
13:32:29 1619  temp_offer_id NUMBER;
13:32:29 1620  -- EXCEPTIONS
13:32:29 1621  BAD_OFFER_ID EXCEPTION;
13:32:29 1622  BEGIN
13:32:29 1623  
13:32:29 1624  	 BEGIN
13:32:29 1625  	   SELECT
13:32:29 1626  	     OFFER.ID into temp_offer_id
13:32:29 1627  	   FROM
13:32:29 1628  	     OFFER
13:32:29 1629  	   WHERE
13:32:29 1630  	     OFFER.ID = in_offer_id;
13:32:29 1631  	   EXCEPTION
13:32:29 1632  	     WHEN NO_DATA_FOUND THEN
13:32:29 1633  	       RAISE BAD_OFFER_ID;
13:32:29 1634  	 END;
13:32:29 1635  
13:32:29 1636  	 OPEN out_result_set FOR
13:32:29 1637  	 SELECT
13:32:29 1638  	   PRODUCT_OFFERING.ID,
13:32:29 1639  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:29 1640  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:29 1641  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:29 1642  	   PRODUCT_OFFERING.QUANTITY,
13:32:29 1643  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:29 1644  	   PRODUCT_OFFERING.CREATED_BY,
13:32:29 1645  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
13:32:29 1646  	 FROM
13:32:29 1647  	   PRODUCT_OFFERING
13:32:29 1648  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:29 1649  	 WHERE
13:32:29 1650  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
13:32:29 1651  
13:32:29 1652  EXCEPTION
13:32:29 1653  WHEN BAD_OFFER_ID THEN
13:32:29 1654  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1655  	   SPROC_NAME, 'No such offer');
13:32:29 1656  WHEN OTHERS THEN
13:32:29 1657  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1658  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1659  END GET_OFFER_PRODUCT_OFFERINGS;
13:32:29 1660  
13:32:29 1661  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
13:32:29 1662  	 in_meta_data_name  IN VARCHAR2,
13:32:29 1663  	 in_meta_data_value IN VARCHAR2,
13:32:29 1664  	 out_result_set     OUT SYS_REFCURSOR
13:32:29 1665  ) AS
13:32:29 1666  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
13:32:29 1667  -- VARIABLES
13:32:29 1668  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
13:32:29 1669  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
13:32:29 1670  BEGIN
13:32:29 1671  
13:32:29 1672  	 OPEN out_result_set FOR
13:32:29 1673  	 SELECT
13:32:29 1674  	   och.ID,
13:32:29 1675  	   och.NAME,
13:32:29 1676  	   och.DESCRIPTION,
13:32:29 1677  	   och.OFFER_CHAIN_STATUS_ID,
13:32:29 1678  	   PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
13:32:29 1679  	   och.ADOPTABILITY_WINDOW_START_DATE,
13:32:29 1680  	   och.ADOPTABILITY_WINDOW_END_DATE,
13:32:29 1681  	   PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
13:32:29 1682  	   och.IS_GIFT_CERTIFICATE,
13:32:29 1683  	   'false' as comf_offer_chain, -- TODO
13:32:29 1684  	   po.PRODUCT_ID,
13:32:29 1685  	   och.GROUP_ACCOUNT_TYPE_ID
13:32:29 1686  	 FROM
13:32:29 1687  	   OFFER_CHAIN och,
13:32:29 1688  	   OFFER_OFFER_CHAIN ooch,
13:32:29 1689  	   OFFER_PRODUCT_OFFERING opo,
13:32:29 1690  	   PRODUCT_OFFERING po
13:32:29 1691  	 WHERE
13:32:29 1692  	   och.ID = ooch.OFFER_CHAIN_ID
13:32:29 1693  	   and ooch.OFFER_ID = opo.OFFER_ID
13:32:29 1694  	   and opo.PRODUCT_OFFERING_ID = po.ID
13:32:29 1695  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE
13:32:29 1696  	   and och.id in (
13:32:29 1697  	     SELECT DISTINCT
13:32:29 1698  	       och2.id
13:32:29 1699  	     from
13:32:29 1700  	       offer_chain och2
13:32:29 1701  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
13:32:29 1702  	     where
13:32:29 1703  	       UPPER(ochmd.name) = v_meta_data_name
13:32:29 1704  	       AND UPPER(ochmd.value) = v_meta_data_value
13:32:29 1705  	   );
13:32:29 1706  
13:32:29 1707  EXCEPTION
13:32:29 1708  WHEN OTHERS THEN
13:32:29 1709  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1710  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1711  END GET_OFFER_CHAINS_BY_META_DATA;
13:32:29 1712  
13:32:29 1713  PROCEDURE GET_ALL_META_DATA (
13:32:29 1714  	 in_offer_chain_id IN NUMBER,
13:32:29 1715  	 out_result_set    OUT SYS_REFCURSOR
13:32:29 1716  ) AS
13:32:29 1717  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
13:32:29 1718  -- Variables
13:32:29 1719  temp_offer_chain_id NUMBER;
13:32:29 1720  -- Exceptions
13:32:29 1721  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:29 1722  BEGIN
13:32:29 1723  
13:32:29 1724  	 BEGIN
13:32:29 1725  	   SELECT
13:32:29 1726  	     OCH.ID into temp_offer_chain_id
13:32:29 1727  	   FROM
13:32:29 1728  	     OFFER_CHAIN OCH
13:32:29 1729  	   WHERE
13:32:29 1730  	     OCH.ID = in_offer_chain_id;
13:32:29 1731  	   EXCEPTION
13:32:29 1732  	     WHEN NO_DATA_FOUND THEN
13:32:29 1733  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:29 1734  	 END;
13:32:29 1735  
13:32:29 1736  	 OPEN out_result_set FOR
13:32:29 1737  	 SELECT
13:32:29 1738  	   OCHMD.ID,
13:32:29 1739  	   OCHMD.OFFER_CHAIN_ID,
13:32:29 1740  	   OCHMD.NAME,
13:32:29 1741  	   OCHMD.VALUE,
13:32:29 1742  	   OCHMD.CREATE_DATE,
13:32:29 1743  	   OCHMD.CREATED_BY
13:32:29 1744  	 FROM
13:32:29 1745  	   OFFER_CHAIN_META_DATA OCHMD
13:32:29 1746  	 WHERE
13:32:29 1747  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
13:32:29 1748  
13:32:29 1749  EXCEPTION
13:32:29 1750  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:29 1751  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1752  	   SPROC_NAME, 'No such offer chain', SQLERRM);
13:32:29 1753  WHEN OTHERS THEN
13:32:29 1754  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1755  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1756  END GET_ALL_META_DATA;
13:32:29 1757  
13:32:29 1758  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
13:32:29 1759  	 in_group_id	   IN NUMBER,
13:32:29 1760  	 in_offer_chain_id IN NUMBER,
13:32:29 1761  	 out_is_eligible   OUT NUMBER,
13:32:29 1762  	 out_concurrent_subscription_id OUT NUMBER
13:32:29 1763  ) AS
13:32:29 1764  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
13:32:29 1765  -- Variables
13:32:29 1766  var_account_id  NUMBER;
13:32:29 1767  var_is_eligible NUMBER;
13:32:29 1768  var_is_gc       NUMBER;
13:32:29 1769  -- Exceptions
13:32:29 1770  BAD_GROUP_ID		   EXCEPTION;
13:32:29 1771  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
13:32:29 1772  BAD_OC_ID		   EXCEPTION;
13:32:29 1773  EXCEPTION_MESSAGE	   VARCHAR(1024);
13:32:29 1774  BEGIN
13:32:29 1775  
13:32:29 1776  	 var_is_eligible := GLOBAL_CONSTANTS_V20.TRUE;
13:32:29 1777  
13:32:29 1778  	 out_concurrent_subscription_id := NULL;
13:32:29 1779  
13:32:29 1780  	 BEGIN
13:32:29 1781  	   SELECT
13:32:29 1782  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
13:32:29 1783  	   FROM
13:32:29 1784  	     OFFER_CHAIN OC
13:32:29 1785  	   WHERE
13:32:29 1786  	     OC.ID = in_offer_chain_id;
13:32:29 1787  	   EXCEPTION
13:32:29 1788  	     WHEN NO_DATA_FOUND THEN
13:32:29 1789  	       RAISE BAD_OC_ID;
13:32:29 1790  	 END;
13:32:29 1791  
13:32:29 1792  	 -- only check eligibility if this is not a gift certificate
13:32:29 1793  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
13:32:29 1794  	   BEGIN
13:32:29 1795  	     SELECT
13:32:29 1796  	       A.ID into var_account_id
13:32:29 1797  	     FROM
13:32:29 1798  	       ACCOUNT A
13:32:29 1799  	     WHERE
13:32:29 1800  	       A.GROUP_ID = in_group_id;
13:32:29 1801  	     EXCEPTION
13:32:29 1802  	       WHEN NO_DATA_FOUND THEN
13:32:29 1803  		 RAISE BAD_GROUP_ID;
13:32:29 1804  	   END;
13:32:29 1805  
13:32:29 1806  
13:32:29 1807  	   FOR f_offer_chain IN (
13:32:29 1808  	       SELECT
13:32:29 1809  		 S.ID as SUBSCRIPTION_ID,
13:32:29 1810  		 S.OFFER_CHAIN_ID
13:32:29 1811  	       FROM
13:32:29 1812  		 SUBSCRIPTION S
13:32:29 1813  	       WHERE
13:32:29 1814  		 S.ACCOUNT_ID = var_account_id
13:32:29 1815  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:29 1816  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:29 1817  	   )
13:32:29 1818  	   LOOP
13:32:29 1819  	     BEGIN
13:32:29 1820  	       IF (
13:32:29 1821  		 PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(
13:32:29 1822  		   in_offer_chain_id,
13:32:29 1823  		   f_offer_chain.offer_chain_id,
13:32:29 1824  		   GLOBAL_CONSTANTS_V20.TRUE
13:32:29 1825  		 ) = GLOBAL_CONSTANTS_V20.TRUE
13:32:29 1826  	       ) THEN
13:32:29 1827  		 var_is_eligible := GLOBAL_CONSTANTS_V20.FALSE;
13:32:29 1828  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
13:32:29 1829  	       END IF;
13:32:29 1830  	       EXCEPTION
13:32:29 1831  		 WHEN OTHERS THEN
13:32:29 1832  		   EXCEPTION_MESSAGE := SQLERRM;
13:32:29 1833  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
13:32:29 1834  	     END;
13:32:29 1835  	   END LOOP;
13:32:29 1836  	 END IF;
13:32:29 1837  	 out_is_eligible := var_is_eligible;
13:32:29 1838  
13:32:29 1839  EXCEPTION
13:32:29 1840  WHEN BAD_GROUP_ID THEN
13:32:29 1841  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1842  	   SPROC_NAME, 'No such offer chain', SQLERRM);
13:32:29 1843  WHEN BAD_OC_ID THEN
13:32:29 1844  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:29 1845  	   SPROC_NAME, 'No such offer chain', SQLERRM);
13:32:29 1846  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
13:32:29 1847  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 1848  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
13:32:29 1849  WHEN OTHERS THEN
13:32:29 1850  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1851  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1852  END CHECK_PRODUCT_ELIGIBILITY;
13:32:29 1853  
13:32:29 1854  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:29 1855  	 in_offer_chain_id	  IN NUMBER,
13:32:29 1856  	 in_action_name 	  IN VARCHAR2,
13:32:29 1857  	 out_notification_type_id OUT NUMBER
13:32:29 1858  ) AS
13:32:29 1859  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
13:32:29 1860  -- Variables
13:32:29 1861  var_action_id NUMBER;
13:32:29 1862  -- Exceptions
13:32:29 1863  BAD_ACTION_NAME	      EXCEPTION;
13:32:29 1864  MULTIPLY_ACTIONS_FOUND EXCEPTION;
13:32:29 1865  BEGIN
13:32:29 1866  
13:32:29 1867  	 BEGIN
13:32:29 1868  	   SELECT
13:32:29 1869  	     A.ID into var_action_id
13:32:29 1870  	   FROM
13:32:29 1871  	     ACTION A
13:32:29 1872  	   WHERE
13:32:29 1873  	     UPPER(A.NAME) = UPPER(in_action_name);
13:32:29 1874  	   EXCEPTION
13:32:29 1875  	     WHEN NO_DATA_FOUND THEN
13:32:29 1876  	       RAISE BAD_ACTION_NAME;
13:32:29 1877  	     WHEN TOO_MANY_ROWS THEN
13:32:29 1878  	       RAISE MULTIPLY_ACTIONS_FOUND;
13:32:29 1879  	 END;
13:32:29 1880  
13:32:29 1881  	 SELECT
13:32:29 1882  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
13:32:29 1883  	 FROM
13:32:29 1884  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
13:32:29 1885  	 WHERE
13:32:29 1886  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
13:32:29 1887  	   AND OCNT.ACTION_ID = var_action_id;
13:32:29 1888  
13:32:29 1889  EXCEPTION
13:32:29 1890  WHEN NO_DATA_FOUND THEN
13:32:29 1891  	 out_notification_type_id := NULL;
13:32:29 1892  WHEN BAD_ACTION_NAME THEN
13:32:29 1893  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:29 1894  	   SPROC_NAME, 'Bad action name', SQLERRM);
13:32:29 1895  WHEN MULTIPLY_ACTIONS_FOUND THEN
13:32:29 1896  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:29 1897  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
13:32:29 1898  WHEN OTHERS THEN
13:32:29 1899  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:29 1900  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:29 1901  END GET_NOTIFICATION_TYPE_ID;
13:32:29 1902  
13:32:29 1903  END PROCS_OFFER_CHAIN_V20;
13:32:29 1904  .
13:32:29 SQL> /

Package body created.

Elapsed: 00:00:00.13
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
13:32:30   2  AS
13:32:30   3  	  --------------------------------------------------------------------------------
13:32:30   4  PROCEDURE GATHER_SYNC_EVENTS
13:32:30   5  	  (
13:32:30   6  	      in_last_timestamp TIMESTAMP,
13:32:30   7  	      out_new_timestamp OUT TIMESTAMP)
13:32:30   8  IS
13:32:30   9  BEGIN
13:32:30  10  	  out_new_timestamp := systimestamp;
13:32:30  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
13:32:30  12  END;
13:32:30  13  	  --------------------------------------------------------------------------------
13:32:30  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
13:32:30  15  IS
13:32:30  16  BEGIN
13:32:30  17  	  INSERT
13:32:30  18  	  INTO
13:32:30  19  	      core_owner.polling_sync
13:32:30  20  	      (
13:32:30  21  		  account_id,
13:32:30  22  		  group_id,
13:32:30  23  		  event_type,
13:32:30  24  		  event_date
13:32:30  25  	      )
13:32:30  26  	  select id, group_id, event_type, event_date from (
13:32:30  27  	      SELECT
13:32:30  28  		  a.id,
13:32:30  29  		  a.group_id,
13:32:30  30  		  'I' event_type,
13:32:30  31  		  in_end_ts event_date,
13:32:30  32  		  max(cl.change_time) last_change_time
13:32:30  33  	      FROM
13:32:30  34  		  core_hist_owner.change_log cl,
13:32:30  35  		  core_owner.credit_card cc,
13:32:30  36  		  core_owner.account a
13:32:30  37  	      WHERE
13:32:30  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
13:32:30  39  	      AND cl.item = 'CREDIT_CARD'
13:32:30  40  	      AND cl.id = cc.id
13:32:30  41  	      AND cc.account_id = a.id
13:32:30  42  	      GROUP BY a.id, a.group_id
13:32:30  43  	      UNION ALL
13:32:30  44  	      SELECT
13:32:30  45  		  a.id,
13:32:30  46  		  a.group_id,
13:32:30  47  		  'I',
13:32:30  48  		  in_end_ts,
13:32:30  49  		  max(cl.change_time) last_change_time
13:32:30  50  	      FROM
13:32:30  51  		  core_hist_owner.change_log cl,
13:32:30  52  		  core_owner.paypal p,
13:32:30  53  		  core_owner.account a
13:32:30  54  	      WHERE
13:32:30  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
13:32:30  56  	      AND cl.item = 'PAYPAL'
13:32:30  57  	      AND cl.id = p.id
13:32:30  58  	      AND p.account_id = a.id
13:32:30  59  	      GROUP BY a.id, a.group_id
13:32:30  60  	      UNION ALL
13:32:30  61  	      SELECT
13:32:30  62  		  a.id,
13:32:30  63  		  a.group_id,
13:32:30  64  		  'S',
13:32:30  65  		  in_end_ts,
13:32:30  66  		  max(cl.change_time) last_change_time
13:32:30  67  	      FROM
13:32:30  68  		  core_hist_owner.change_log cl,
13:32:30  69  		  core_owner.subscription s,
13:32:30  70  		  core_owner.account a
13:32:30  71  	      WHERE
13:32:30  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
13:32:30  73  	      AND cl.item = 'SUBSCRIPTION'
13:32:30  74  	      AND cl.id = s.id
13:32:30  75  	      AND s.account_id = a.id
13:32:30  76  	      GROUP BY a.id, a.group_id
13:32:30  77  	      UNION ALL
13:32:30  78  	      SELECT
13:32:30  79  		  a.id,
13:32:30  80  		  a.group_id,
13:32:30  81  		  'G',
13:32:30  82  		  in_end_ts,
13:32:30  83  		  max(cl.change_time) last_change_time
13:32:30  84  	      FROM
13:32:30  85  		  core_hist_owner.change_log cl,
13:32:30  86  		  core_owner.gift_certificate gc,
13:32:30  87  		  core_owner.account a
13:32:30  88  	      WHERE
13:32:30  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
13:32:30  90  	      AND cl.item = 'GIFT_CERTIFICATE'
13:32:30  91  	      AND cl.id = gc.id
13:32:30  92  	      AND gc.purchaser_group_id = a.group_id
13:32:30  93  	      GROUP BY a.id, a.group_id
13:32:30  94  	  ) t
13:32:30  95  	  where not exists (
13:32:30  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
13:32:30  97  	      from polling_sync ps
13:32:30  98  	      where ps.account_id = t.id
13:32:30  99  		and ps.group_id = t.group_id
13:32:30 100  		and ps.event_type = t.event_type
13:32:30 101  		and ps.event_date >= t.last_change_time
13:32:30 102  	  )
13:32:30 103  	  ;
13:32:30 104  END;
13:32:30 105  --------------------------------------------------------------------------------
13:32:30 106  FUNCTION CREATE_NEW_TRANSFER_SET
13:32:30 107  	  (
13:32:30 108  	      in_set_maximum NUMBER)
13:32:30 109  	  RETURN core_owner.polling_sync.set_id%type
13:32:30 110  IS
13:32:30 111  	  pragma autonomous_transaction;
13:32:30 112  	  v_set_id core_owner.polling_sync.set_id%type;
13:32:30 113  BEGIN
13:32:30 114  	  SELECT
13:32:30 115  	      pollsync_setid_seq.nextval
13:32:30 116  	  INTO
13:32:30 117  	      v_set_id
13:32:30 118  	  FROM
13:32:30 119  	      dual;
13:32:30 120  	  update
13:32:30 121  	    core_owner.polling_sync ps
13:32:30 122  	  set
13:32:30 123  	    ps.set_id = v_set_id
13:32:30 124  	  where
13:32:30 125  	    ps.set_id IS NULL and
13:32:30 126  	    rownum <= in_set_maximum
13:32:30 127  	  ;
13:32:30 128  	  COMMIT;
13:32:30 129  	  RETURN v_set_id;
13:32:30 130  END;
13:32:30 131  --------------------------------------------------------------------------------
13:32:30 132  FUNCTION RETREIVE_TRANSFER_SET
13:32:30 133  	  (
13:32:30 134  	      in_set_id core_owner.polling_sync.set_id%type)
13:32:30 135  	  RETURN sys_refcursor
13:32:30 136  IS
13:32:30 137  	  v_refcursor sys_refcursor;
13:32:30 138  BEGIN
13:32:30 139  	  UPDATE
13:32:30 140  	      core_owner.polling_sync ps
13:32:30 141  	  SET
13:32:30 142  	      ps.last_send_date = sysdate,
13:32:30 143  	      ps.num_calls = ps.num_calls + 1
13:32:30 144  	  WHERE
13:32:30 145  	      ps.set_id = in_set_id ;
13:32:30 146  	  OPEN v_refcursor FOR
13:32:30 147  	  SELECT
13:32:30 148  	      ps.set_id,
13:32:30 149  	      ps.group_id,
13:32:30 150  	      ps.event_type,
13:32:30 151  	      ps.event_date
13:32:30 152  	  FROM
13:32:30 153  	      core_owner.polling_sync ps
13:32:30 154  	  WHERE
13:32:30 155  	      ps.set_id = in_set_id
13:32:30 156  	  AND ps.group_id IS NOT NULL ;
13:32:30 157  	  RETURN v_refcursor;
13:32:30 158  END;
13:32:30 159  --------------------------------------------------------------------------------
13:32:30 160  PROCEDURE GET_TRANSFER_SET
13:32:30 161  	  (
13:32:30 162  	      in_set_maximum NUMBER,
13:32:30 163  	      in_max_retries NUMBER,
13:32:30 164  	      out_refcursor OUT sys_refcursor)
13:32:30 165  IS
13:32:30 166  	  v_set_id core_owner.polling_sync.set_id%type;
13:32:30 167  BEGIN
13:32:30 168  	  /* Look for previously sent but unconfirmed sets and
13:32:30 169  	  send again until max_retries calls */
13:32:30 170  	  FOR x IN
13:32:30 171  	  (
13:32:30 172  	      SELECT
13:32:30 173  		  ps.set_id,
13:32:30 174  		  COUNT( *) set_size
13:32:30 175  	      FROM
13:32:30 176  		  core_owner.polling_sync ps
13:32:30 177  	      WHERE
13:32:30 178  		  ps.event_date > sysdate - 14
13:32:30 179  	      AND ps.confirm_date IS NULL
13:32:30 180  	      AND ps.last_send_date IS NOT NULL
13:32:30 181  	      AND ps.num_calls < in_max_retries
13:32:30 182  	      GROUP BY
13:32:30 183  		  ps.set_id
13:32:30 184  	      ORDER BY
13:32:30 185  		  ps.set_id
13:32:30 186  	  )
13:32:30 187  	  LOOP
13:32:30 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
13:32:30 189  	      RETURN;
13:32:30 190  	  END LOOP;
13:32:30 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
13:32:30 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
13:32:30 193  	  RETURN;
13:32:30 194  END;
13:32:30 195  --------------------------------------------------------------------------------
13:32:30 196  PROCEDURE CONFIRM_TRANSFER_SET
13:32:30 197  	  (
13:32:30 198  	      in_set_id core_owner.polling_sync.set_id%type)
13:32:30 199  IS
13:32:30 200  	  v_unconfirmable EXCEPTION;
13:32:30 201  BEGIN
13:32:30 202  	  UPDATE
13:32:30 203  	      core_owner.polling_sync ps
13:32:30 204  	  SET
13:32:30 205  	      ps.confirm_date = systimestamp
13:32:30 206  	  WHERE
13:32:30 207  	      ps.set_id = in_set_id
13:32:30 208  	  AND ps.confirm_date IS NULL ;
13:32:30 209  	  IF(sql%rowcount < 1) THEN
13:32:30 210  	      raise v_unconfirmable;
13:32:30 211  	  END IF;
13:32:30 212  END;
13:32:30 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
13:32:30 214  IS
13:32:30 215  BEGIN
13:32:30 216  	  UPDATE POLLING_SYNC_LASTRUN
13:32:30 217  	  SET last_run = current_timestamp;
13:32:30 218  	  IF ( sql%rowcount = 0 )
13:32:30 219  	  THEN
13:32:30 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
13:32:30 221  	  END if;
13:32:30 222  	  COMMIT;
13:32:30 223  END;
13:32:30 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
13:32:30 225  IS
13:32:30 226  BEGIN
13:32:30 227  	  SELECT LAST_RUN INTO ts
13:32:30 228  	  FROM POLLING_SYNC_LASTRUN
13:32:30 229  	  WHERE ROWNUM < 2;
13:32:30 230  EXCEPTION
13:32:30 231  	WHEN NO_DATA_FOUND
13:32:30 232  	THEN
13:32:30 233  	  ts := current_timestamp;
13:32:30 234  END;
13:32:30 235  END PROCS_POLLING_SYNC;
13:32:30 236  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.04
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE GET_PRODUCTS (
13:32:30   4  /*
13:32:30   5  Throws exceptions:
13:32:30   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30   7  */
13:32:30   8  	in_status_id   IN  NUMBER,
13:32:30   9  	out_result_set OUT SYS_REFCURSOR
13:32:30  10  ) AS
13:32:30  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
13:32:30  12  BEGIN
13:32:30  13  	OPEN out_result_set FOR
13:32:30  14  	SELECT
13:32:30  15  	  PRODUCT.ID,
13:32:30  16  	  PRODUCT.NAME,
13:32:30  17  	  PRODUCT.UNIT_PRICE,
13:32:30  18  	  PRODUCT.PRODUCTION_COST,
13:32:30  19  	  PRODUCT.CREATE_DATE,
13:32:30  20  	  PRODUCT.CREATED_BY,
13:32:30  21  	  PRODUCT.PRODUCT_STATUS_ID,
13:32:30  22  	  PRODUCT.PRODUCT_URI
13:32:30  23  	FROM
13:32:30  24  	  PRODUCT
13:32:30  25   WHERE
13:32:30  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
13:32:30  27  EXCEPTION
13:32:30  28  WHEN OTHERS THEN
13:32:30  29  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30  31  END GET_PRODUCTS;
13:32:30  32  
13:32:30  33  /******************************************************************************/
13:32:30  34  
13:32:30  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:30  36  	in_product_offering_id	IN NUMBER,
13:32:30  37  	out_result_set OUT SYS_REFCURSOR
13:32:30  38  ) AS
13:32:30  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
13:32:30  40  -- VARIABLES
13:32:30  41  temp_product_offering_id NUMBER;
13:32:30  42  -- EXCEPTIONS
13:32:30  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
13:32:30  44  BEGIN
13:32:30  45  
13:32:30  46  	-- Check that product offering exists
13:32:30  47  	BEGIN
13:32:30  48  	  SELECT
13:32:30  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
13:32:30  50  	  FROM
13:32:30  51  	    PRODUCT_OFFERING
13:32:30  52  	  WHERE
13:32:30  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
13:32:30  54  	  EXCEPTION
13:32:30  55  	    WHEN NO_DATA_FOUND THEN
13:32:30  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
13:32:30  57  	END;
13:32:30  58  
13:32:30  59  	OPEN out_result_set FOR
13:32:30  60  	SELECT
13:32:30  61  	  PRODUCT_OFFERING_META_DATA.ID,
13:32:30  62  	  PRODUCT_OFFERING_META_DATA.NAME,
13:32:30  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
13:32:30  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
13:32:30  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
13:32:30  66  	FROM
13:32:30  67  	  PRODUCT_OFFERING_META_DATA
13:32:30  68  	WHERE
13:32:30  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
13:32:30  70  
13:32:30  71  EXCEPTION
13:32:30  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
13:32:30  73  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30  74  	  SPROC_NAME, 'No such product offering id');
13:32:30  75  WHEN OTHERS THEN
13:32:30  76  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30  78  END GET_PRODUCT_OFFERING_META_DATA;
13:32:30  79  
13:32:30  80  /******************************************************************************/
13:32:30  81  
13:32:30  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
13:32:30  83  /*
13:32:30  84  Throws exceptions:
13:32:30  85  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30  86  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30  87  */
13:32:30  88  	in_product_id	    IN NUMBER,
13:32:30  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
13:32:30  90  	out_result_set	    OUT SYS_REFCURSOR
13:32:30  91  ) AS
13:32:30  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
13:32:30  93  -- VARIABLES
13:32:30  94  temp_product_id NUMBER;
13:32:30  95  -- EXCEPTIONS
13:32:30  96  BAD_PRODUCT_ID EXCEPTION;
13:32:30  97  BEGIN
13:32:30  98  
13:32:30  99  	BEGIN
13:32:30 100  	  SELECT
13:32:30 101  	    PRODUCT.ID into temp_product_id
13:32:30 102  	  FROM
13:32:30 103  	    PRODUCT
13:32:30 104  	  WHERE
13:32:30 105  	    PRODUCT.ID = in_product_id;
13:32:30 106  	  EXCEPTION
13:32:30 107  	    WHEN NO_DATA_FOUND THEN
13:32:30 108  	      RAISE BAD_PRODUCT_ID;
13:32:30 109  	END;
13:32:30 110  
13:32:30 111  	OPEN out_result_set FOR
13:32:30 112  	SELECT
13:32:30 113  	  PRODUCT_ELIGIBILITY.ID
13:32:30 114  	FROM
13:32:30 115  	  PRODUCT_ELIGIBILITY
13:32:30 116  	WHERE
13:32:30 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
13:32:30 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
13:32:30 119  
13:32:30 120  EXCEPTION
13:32:30 121  WHEN BAD_PRODUCT_ID THEN
13:32:30 122  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 123  	  SPROC_NAME, 'No such product');
13:32:30 124  WHEN OTHERS THEN
13:32:30 125  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
13:32:30 128  
13:32:30 129  /******************************************************************************/
13:32:30 130  
13:32:30 131  PROCEDURE GET_PRODUCT_BY_ID (
13:32:30 132  	in_product_id  IN NUMBER,
13:32:30 133  	out_result_set OUT SYS_REFCURSOR
13:32:30 134  ) AS
13:32:30 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
13:32:30 136  -- VARIABLES
13:32:30 137  temp_product_id NUMBER;
13:32:30 138  -- EXCEPTIONS
13:32:30 139  BAD_PRODUCT_ID EXCEPTION;
13:32:30 140  BEGIN
13:32:30 141  
13:32:30 142  	BEGIN
13:32:30 143  	  SELECT
13:32:30 144  	    PRODUCT.ID into temp_product_id
13:32:30 145  	  FROM
13:32:30 146  	    PRODUCT
13:32:30 147  	  WHERE
13:32:30 148  	    PRODUCT.ID = in_product_id;
13:32:30 149  	  EXCEPTION
13:32:30 150  	    WHEN NO_DATA_FOUND THEN
13:32:30 151  	      RAISE BAD_PRODUCT_ID;
13:32:30 152  	END;
13:32:30 153  
13:32:30 154  	OPEN out_result_set FOR
13:32:30 155  	SELECT
13:32:30 156  	  PRODUCT.ID,
13:32:30 157  	  PRODUCT.NAME,
13:32:30 158  	  PRODUCT.PRODUCT_STATUS_ID,
13:32:30 159  	  PRODUCT.PRODUCT_URI,
13:32:30 160  	  PRODUCT.PRODUCTION_COST,
13:32:30 161  	  PRODUCT.UNIT_PRICE,
13:32:30 162  	  PRODUCT.CREATE_DATE,
13:32:30 163  	  PRODUCT.CREATED_BY
13:32:30 164  	FROM
13:32:30 165  	  PRODUCT
13:32:30 166  	WHERE
13:32:30 167  	  PRODUCT.ID = in_product_id;
13:32:30 168  
13:32:30 169  EXCEPTION
13:32:30 170  WHEN BAD_PRODUCT_ID THEN
13:32:30 171  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 172  	  SPROC_NAME, 'No such product');
13:32:30 173  WHEN OTHERS THEN
13:32:30 174  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 176  END GET_PRODUCT_BY_ID;
13:32:30 177  
13:32:30 178  /******************************************************************************/
13:32:30 179  
13:32:30 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
13:32:30 181  	in_line_item_id IN NUMBER,
13:32:30 182  	out_result_set	OUT SYS_REFCURSOR
13:32:30 183  ) AS
13:32:30 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
13:32:30 185  -- VARIABLES
13:32:30 186  temp_line_item_id NUMBER;
13:32:30 187  -- EXCEPTIONS
13:32:30 188  BAD_LINE_ITEM_ID EXCEPTION;
13:32:30 189  BEGIN
13:32:30 190  
13:32:30 191  	BEGIN
13:32:30 192  	  SELECT
13:32:30 193  	    LINE_ITEM.ID into temp_line_item_id
13:32:30 194  	  FROM
13:32:30 195  	    LINE_ITEM
13:32:30 196  	  WHERE
13:32:30 197  	    LINE_ITEM.ID = in_line_item_id;
13:32:30 198  	  EXCEPTION
13:32:30 199  	    WHEN NO_DATA_FOUND THEN
13:32:30 200  	      RAISE BAD_LINE_ITEM_ID;
13:32:30 201  	END;
13:32:30 202  
13:32:30 203  	OPEN out_result_set FOR
13:32:30 204  	SELECT
13:32:30 205  	  PRODUCT_OFFERING.ID,
13:32:30 206  	  PRODUCT_OFFERING.PRODUCT_ID,
13:32:30 207  	  PRODUCT_OFFERING.QUANTITY,
13:32:30 208  	  PRODUCT_OFFERING.UNIT_PRICE,
13:32:30 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:30 210  	  PRODUCT_OFFERING.CREATE_DATE,
13:32:30 211  	  PRODUCT_OFFERING.CREATED_BY,
13:32:30 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
13:32:30 213  	  CAPABILITY.ID CAP_ID,
13:32:30 214  	  CAPABILITY.CODE CAP_CODE,
13:32:30 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:30 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:30 217  	FROM
13:32:30 218  	  PRODUCT_OFFERING
13:32:30 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
13:32:30 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:30 221  	WHERE
13:32:30 222  	  LINE_ITEM.ID = in_line_item_id;
13:32:30 223  
13:32:30 224  EXCEPTION
13:32:30 225  WHEN BAD_LINE_ITEM_ID THEN
13:32:30 226  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 227  	  SPROC_NAME, 'No such line item');
13:32:30 228  WHEN OTHERS THEN
13:32:30 229  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
13:32:30 232  
13:32:30 233  /******************************************************************************/
13:32:30 234  
13:32:30 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
13:32:30 236  	in_product_offering_id IN NUMBER,
13:32:30 237  	out_result_set	OUT SYS_REFCURSOR
13:32:30 238  ) AS
13:32:30 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
13:32:30 240  BEGIN
13:32:30 241  	OPEN out_result_set FOR
13:32:30 242  	SELECT
13:32:30 243  	  PRODUCT_OFFERING.ID,
13:32:30 244  	  PRODUCT_OFFERING.PRODUCT_ID,
13:32:30 245  	  PRODUCT_OFFERING.QUANTITY,
13:32:30 246  	  PRODUCT_OFFERING.UNIT_PRICE,
13:32:30 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:30 248  	  PRODUCT_OFFERING.CREATE_DATE,
13:32:30 249  	  PRODUCT_OFFERING.CREATED_BY,
13:32:30 250  	  CAPABILITY.ID CAP_ID,
13:32:30 251  	  CAPABILITY.CODE CAP_CODE,
13:32:30 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:30 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:30 254  	FROM
13:32:30 255  	  PRODUCT_OFFERING
13:32:30 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:30 257  	WHERE
13:32:30 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
13:32:30 259  
13:32:30 260  EXCEPTION
13:32:30 261  WHEN OTHERS THEN
13:32:30 262  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 264  END GET_PRD_OFFERING_BY_ID;
13:32:30 265  
13:32:30 266  /******************************************************************************/
13:32:30 267  
13:32:30 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
13:32:30 269  	in_product_offering_id IN NUMBER,
13:32:30 270  	out_result_set	       OUT SYS_REFCURSOR
13:32:30 271  ) AS
13:32:30 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
13:32:30 273  -- VARIABLES
13:32:30 274  temp_product_offering_id NUMBER;
13:32:30 275  -- EXCEPTIONS
13:32:30 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
13:32:30 277  BEGIN
13:32:30 278  
13:32:30 279  	BEGIN
13:32:30 280  	  SELECT
13:32:30 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
13:32:30 282  	  FROM
13:32:30 283  	    PRODUCT_OFFERING
13:32:30 284  	  WHERE
13:32:30 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
13:32:30 286  	  EXCEPTION
13:32:30 287  	    WHEN NO_DATA_FOUND THEN
13:32:30 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
13:32:30 289  	END;
13:32:30 290  
13:32:30 291  	OPEN out_result_set FOR
13:32:30 292  	SELECT
13:32:30 293  	  DISCOUNT.ID,
13:32:30 294  	  DISCOUNT.NAME,
13:32:30 295  	  DISCOUNT.FIXED_AMOUNT,
13:32:30 296  	  DISCOUNT.PERCENT_AMOUNT,
13:32:30 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
13:32:30 298  	  DISCOUNT.CREATE_DATE,
13:32:30 299  	  DISCOUNT.CREATED_BY,
13:32:30 300  	  DISCOUNT.DESCRIPTION
13:32:30 301  	FROM
13:32:30 302  	  DISCOUNT
13:32:30 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
13:32:30 304  	WHERE
13:32:30 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
13:32:30 306  
13:32:30 307  EXCEPTION
13:32:30 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
13:32:30 309  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 310  	  SPROC_NAME, 'No such product offering');
13:32:30 311  WHEN OTHERS THEN
13:32:30 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
13:32:30 315  
13:32:30 316  END PROCS_PRODUCT_V20;
13:32:30 317  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE
13:32:30   2  PACKAGE BODY PROCS_REPORTING AS
13:32:30   3  
13:32:30   4  ----
13:32:30   5  --------------------------------------------------------------------------------
13:32:30   6  ----
13:32:30   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30   8  	  is
13:32:30   9  	  begin
13:32:30  10  	      open out_cursor for
13:32:30  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
13:32:30  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
13:32:30  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
13:32:30  14  			,c.create_date, c.update_date
13:32:30  15  		  from charge c
13:32:30  16  		      ,charge_status cs
13:32:30  17  		      ,instrument_type it
13:32:30  18  		      ,ids
13:32:30  19  		  where c.id = ids.id
13:32:30  20  		    and c.charge_status_id = cs.id
13:32:30  21  		    and c.instrument_type_id = it.id
13:32:30  22  	      ;
13:32:30  23  	  end;
13:32:30  24  ----
13:32:30  25  --------------------------------------------------------------------------------
13:32:30  26  ----
13:32:30  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30  28  	  is
13:32:30  29  	  begin
13:32:30  30  	      open out_cursor for
13:32:30  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
13:32:30  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
13:32:30  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
13:32:30  35  		  from license l
13:32:30  36  		      ,license_status ls
13:32:30  37  		      ,ids
13:32:30  38  		  where l.id = ids.id
13:32:30  39  		    and l.license_status_id = ls.id
13:32:30  40  	      ;
13:32:30  41  	  end;
13:32:30  42  ----
13:32:30  43  --------------------------------------------------------------------------------
13:32:30  44  ----
13:32:30  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30  46  	  is
13:32:30  47  	  begin
13:32:30  48  	      open out_cursor for
13:32:30  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
13:32:30  50  		  select
13:32:30  51  		    i.id invoice_id,
13:32:30  52  		    i.create_date,
13:32:30  53  		    i.update_date,
13:32:30  54  		    i.invoice_status_id,
13:32:30  55  		    istat.value invoice_status,
13:32:30  56  		    NVL(
13:32:30  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
13:32:30  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
13:32:30  59  		    ) offer_chain_id
13:32:30  60  		  from	   invoice i
13:32:30  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
13:32:30  62  		      join ids			on ids.id = i.id
13:32:30  63  		  where 1 = 1
13:32:30  64  	      ;
13:32:30  65  	  end;
13:32:30  66  ----
13:32:30  67  --------------------------------------------------------------------------------
13:32:30  68  ----
13:32:30  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30  70  	  is
13:32:30  71  	  begin
13:32:30  72  	      open out_cursor for
13:32:30  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
13:32:30  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
13:32:30  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
13:32:30  76  		  from line_item li
13:32:30  77  		    , ids
13:32:30  78  		  where li.id = ids.id
13:32:30  79  	      ;
13:32:30  80  	  end;
13:32:30  81  ----
13:32:30  82  --------------------------------------------------------------------------------
13:32:30  83  ----
13:32:30  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30  85  	  is
13:32:30  86  	  begin
13:32:30  87  	      open out_cursor for
13:32:30  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
13:32:30  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
13:32:30  91  			,a.instrument_id, a.tax_exempt_id
13:32:30  92  			-- need system category??
13:32:30  93  		  from account a
13:32:30  94  		      ,account_status astat
13:32:30  95  		      ,instrument_type it
13:32:30  96  		      , ids
13:32:30  97  		  where a.id = ids.id
13:32:30  98  		    and astat.id = a.account_status_id
13:32:30  99  		    and a.instrument_type_id = it.id(+)
13:32:30 100  	      ;
13:32:30 101  	  end;
13:32:30 102  ----
13:32:30 103  --------------------------------------------------------------------------------
13:32:30 104  ----
13:32:30 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 106  	  is
13:32:30 107  	  begin
13:32:30 108  	      open out_cursor for
13:32:30 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
13:32:30 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
13:32:30 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
13:32:30 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
13:32:30 114  		  from subscription s
13:32:30 115  		      ,subscription_status ss
13:32:30 116  		      ,subscription_cancel_reason sct
13:32:30 117  		      ,instrument_type it
13:32:30 118  		      , ids
13:32:30 119  		  where s.id = ids.id
13:32:30 120  		    and ss.id = s.subscription_status_id
13:32:30 121  		    and s.instrument_type_id = it.id
13:32:30 122  		    and sct.id(+) = s.sct_id
13:32:30 123  	      ;
13:32:30 124  	  end;
13:32:30 125  ----
13:32:30 126  --------------------------------------------------------------------------------
13:32:30 127  ----
13:32:30 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 129  	  is
13:32:30 130  	  begin
13:32:30 131  	      open out_cursor for
13:32:30 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 133  		  select t.id transaction_id, t.transaction_amount
13:32:30 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
13:32:30 135  			,t.create_date, t.update_date, t.is_settled
13:32:30 136  		  from transaction t
13:32:30 137  		      ,transaction_status ts
13:32:30 138  		      , ids
13:32:30 139  		  where t.id = ids.id
13:32:30 140  		    and t.transaction_status_id = ts.id
13:32:30 141  	      ;
13:32:30 142  	  end;
13:32:30 143  ----
13:32:30 144  --------------------------------------------------------------------------------
13:32:30 145  ----
13:32:30 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 147  	  is
13:32:30 148  	  begin
13:32:30 149  	      open out_cursor for
13:32:30 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
13:32:30 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
13:32:30 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
13:32:30 154  			,oc.billing_source_id, bs.name billing_source_name
13:32:30 155  			,oc.is_seat_license,oc.group_account_type_id
13:32:30 156  		  from offer_chain oc
13:32:30 157  		      , offer_chain_status ocs
13:32:30 158  		      , ids
13:32:30 159  		      , vendor_source vs
13:32:30 160  		      , billing_source bs
13:32:30 161  		  where oc.id = ids.id
13:32:30 162  		    and oc.offer_chain_status_id = ocs.id
13:32:30 163  		    and oc.vendor_source_id = vs.id
13:32:30 164  		    and oc.billing_source_id = bs.id
13:32:30 165  	      ;
13:32:30 166  	  end;
13:32:30 167  ----
13:32:30 168  --------------------------------------------------------------------------------
13:32:30 169  ----
13:32:30 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 171  	  is
13:32:30 172  	  begin
13:32:30 173  	      open out_cursor for
13:32:30 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
13:32:30 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
13:32:30 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
13:32:30 177  		  from offer_offer_chain ooc
13:32:30 178  		  , ids
13:32:30 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
13:32:30 180  	      ;
13:32:30 181  	  end;
13:32:30 182  ----
13:32:30 183  --------------------------------------------------------------------------------
13:32:30 184  ----
13:32:30 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 186  	  is
13:32:30 187  	  begin
13:32:30 188  	      open out_cursor for
13:32:30 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
13:32:30 191  		  from offer o
13:32:30 192  		      ,offer_status os
13:32:30 193  		      , ids
13:32:30 194  		  where o.id = ids.id
13:32:30 195  		    and o.offer_status_id = os.id
13:32:30 196  	      ;
13:32:30 197  	  end;
13:32:30 198  ----
13:32:30 199  --------------------------------------------------------------------------------
13:32:30 200  ----
13:32:30 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 202  	  is
13:32:30 203  	  begin
13:32:30 204  	      open out_cursor for
13:32:30 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
13:32:30 207  			 ,gc.expiration_date, gc.purchase_date
13:32:30 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
13:32:30 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
13:32:30 210  			 ,recipient_address_id
13:32:30 211  			 ,redeemer_address_id
13:32:30 212  			 ,recipient_notify_date
13:32:30 213  			 ,recipient_name
13:32:30 214  			 ,redemption_date
13:32:30 215  			 ,recipient_email
13:32:30 216  		  from gift_certificate gc
13:32:30 217  		      ,gift_certificate_status gcs
13:32:30 218  		      , ids
13:32:30 219  		  where gc.id = ids.id
13:32:30 220  		    and gc.gift_certificate_status_id = gcs.id
13:32:30 221  	      ;
13:32:30 222  	  end;
13:32:30 223  ----
13:32:30 224  --------------------------------------------------------------------------------
13:32:30 225  ----
13:32:30 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 227  	  is
13:32:30 228  	  begin
13:32:30 229  	      open out_cursor for
13:32:30 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
13:32:30 232  		  from product_offering po
13:32:30 233  		  , ids
13:32:30 234  		  where po.id = ids.id
13:32:30 235  	      ;
13:32:30 236  	  end;
13:32:30 237  ----
13:32:30 238  --------------------------------------------------------------------------------
13:32:30 239  ----
13:32:30 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 241  	  is
13:32:30 242  	  begin
13:32:30 243  	      open out_cursor for
13:32:30 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
13:32:30 246  			,product_uri, p.create_date
13:32:30 247  		  from product p
13:32:30 248  		      ,product_status ps
13:32:30 249  		      , ids
13:32:30 250  		  where p.id = ids.id
13:32:30 251  		    and p.product_status_id = ps.id
13:32:30 252  	      ;
13:32:30 253  	  end;
13:32:30 254  ----
13:32:30 255  --------------------------------------------------------------------------------
13:32:30 256  ----
13:32:30 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 258  	  is
13:32:30 259  	  begin
13:32:30 260  	      open out_cursor for
13:32:30 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
13:32:30 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
13:32:30 263  		  from offer_product_offering opo
13:32:30 264  		  , ids
13:32:30 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
13:32:30 266  	      ;
13:32:30 267  	  end;
13:32:30 268  ----
13:32:30 269  --------------------------------------------------------------------------------
13:32:30 270  ----
13:32:30 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 272  	  is
13:32:30 273  	  begin
13:32:30 274  	      open out_cursor for
13:32:30 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
13:32:30 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
13:32:30 277  		  from discount_product_offering dpo
13:32:30 278  		  , ids
13:32:30 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
13:32:30 280  	      ;
13:32:30 281  	  end;
13:32:30 282  ----
13:32:30 283  --------------------------------------------------------------------------------
13:32:30 284  ----
13:32:30 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 286  	  is
13:32:30 287  	  begin
13:32:30 288  	      open out_cursor for
13:32:30 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
13:32:30 291  			,d.discount_type_id, dt.value discount_type, d.create_date
13:32:30 292  		  from discount d
13:32:30 293  		      ,discount_type dt
13:32:30 294  		      , ids
13:32:30 295  		  where d.id = ids.id
13:32:30 296  		    and d.discount_type_id = dt.id
13:32:30 297  	      ;
13:32:30 298  	  end;
13:32:30 299  ----
13:32:30 300  --------------------------------------------------------------------------------
13:32:30 301  ----
13:32:30 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 303  	  is
13:32:30 304  	  begin
13:32:30 305  	      open out_cursor for
13:32:30 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
13:32:30 308  		  from product_eligibility pg
13:32:30 309  		  , ids
13:32:30 310  		  where pg.id = ids.id
13:32:30 311  	      ;
13:32:30 312  	  end;
13:32:30 313  ----
13:32:30 314  --------------------------------------------------------------------------------
13:32:30 315  ----
13:32:30 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 317  	  is
13:32:30 318  	  begin
13:32:30 319  	      open out_cursor for
13:32:30 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
13:32:30 322  		  from offer_chain_eligibility oce
13:32:30 323  		  , ids
13:32:30 324  		  where oce.id = ids.id
13:32:30 325  	      ;
13:32:30 326  	  end;
13:32:30 327  ----
13:32:30 328  --------------------------------------------------------------------------------
13:32:30 329  ----
13:32:30 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 331  	  is
13:32:30 332  	  begin
13:32:30 333  	      open out_cursor for
13:32:30 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
13:32:30 336  		  from offer_chain_meta_data ocm
13:32:30 337  		  , ids
13:32:30 338  		  where ocm.id = ids.id
13:32:30 339  	      ;
13:32:30 340  	  end;
13:32:30 341  ----
13:32:30 342  --------------------------------------------------------------------------------
13:32:30 343  ----
13:32:30 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 345  	  is
13:32:30 346  	  begin
13:32:30 347  	      open out_cursor for
13:32:30 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
13:32:30 350  		  from product_offering_meta_data pom
13:32:30 351  		  , ids
13:32:30 352  		  where pom.id = ids.id
13:32:30 353  	      ;
13:32:30 354  	  end;
13:32:30 355  ----
13:32:30 356  --------------------------------------------------------------------------------
13:32:30 357  ----
13:32:30 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 359  	  is
13:32:30 360  	  begin
13:32:30 361  	      open out_cursor for
13:32:30 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
13:32:30 364  		  from subscription_meta_data sm
13:32:30 365  		  , ids
13:32:30 366  		  where sm.id = ids.id
13:32:30 367  	      ;
13:32:30 368  	  end;
13:32:30 369  ----
13:32:30 370  --------------------------------------------------------------------------------
13:32:30 371  ----
13:32:30 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 373  	  is
13:32:30 374  	  begin
13:32:30 375  	      open out_cursor for
13:32:30 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
13:32:30 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
13:32:30 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
13:32:30 380  		  from credit_card cc
13:32:30 381  		      ,credit_card_type cct
13:32:30 382  		      ,credit_card_status ccs
13:32:30 383  		      , ids
13:32:30 384  		  where cc.id = ids.id
13:32:30 385  		    and cc.credit_card_type_id = cct.id(+)
13:32:30 386  		    and cc.credit_card_status_id = ccs.id
13:32:30 387  	      ;
13:32:30 388  	  end;
13:32:30 389  ----
13:32:30 390  --------------------------------------------------------------------------------
13:32:30 391  ----
13:32:30 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 393  	  is
13:32:30 394  	  begin
13:32:30 395  	      open out_cursor for
13:32:30 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
13:32:30 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
13:32:30 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
13:32:30 400  			,ta.create_date
13:32:30 401  		  from transaction_attempt ta
13:32:30 402  		      ,transaction_attempt_status tas
13:32:30 403  		      , ids
13:32:30 404  		  where ta.id = ids.id
13:32:30 405  		    and ta.transaction_attempt_status_id = tas.id
13:32:30 406  	      ;
13:32:30 407  	  end;
13:32:30 408  ----
13:32:30 409  --------------------------------------------------------------------------------
13:32:30 410  ----
13:32:30 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 412  	  is
13:32:30 413  	  begin
13:32:30 414  	      open out_cursor for
13:32:30 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
13:32:30 417  			,ia.adjustment_date, ia.create_date
13:32:30 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
13:32:30 419  		  , ids
13:32:30 420  		  where ia.id = ids.id
13:32:30 421  		  and ir.id = ia.invoice_adjustment_reason_id
13:32:30 422  	      ;
13:32:30 423  	  end;
13:32:30 424  ----
13:32:30 425  --------------------------------------------------------------------------------
13:32:30 426  ----
13:32:30 427  
13:32:30 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 429  	  is
13:32:30 430  	  begin
13:32:30 431  	      open out_cursor for
13:32:30 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
13:32:30 434  		  from line_item_adjustment lia
13:32:30 435  		  , ids
13:32:30 436  		  where lia.id = ids.id
13:32:30 437  	      ;
13:32:30 438  	  end;
13:32:30 439  ----
13:32:30 440  --------------------------------------------------------------------------------
13:32:30 441  ----
13:32:30 442  
13:32:30 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 444  	  is
13:32:30 445  	  begin
13:32:30 446  	      open out_cursor for
13:32:30 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 448  		  select
13:32:30 449  		    tax.id tax_id,
13:32:30 450  		    ttype.code tax_type,
13:32:30 451  		    tax.calculated_amount,
13:32:30 452  		    tax.create_date,
13:32:30 453  		    tax.line_item_id,
13:32:30 454  		    tax.effective_rate,
13:32:30 455  		    tax.taxable_amount,
13:32:30 456  		    tax.tax_rule_id,
13:32:30 457  		    j.name jurisdiction_level,
13:32:30 458  		    tax.jurisdiction_name,
13:32:30 459  		    tax.jurisdiction_id,
13:32:30 460  		    tax.ext_tax_type,
13:32:30 461  		    tax.ext_result,
13:32:30 462  		    tax.imposition_type,
13:32:30 463  		    tax.imposition
13:32:30 464  		  from tax
13:32:30 465  		  , tax_type ttype
13:32:30 466  		  , jurisdiction_level j
13:32:30 467  		  , ids
13:32:30 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
13:32:30 469  	      ;
13:32:30 470  	  end;
13:32:30 471  ----
13:32:30 472  --------------------------------------------------------------------------------
13:32:30 473  ----
13:32:30 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
13:32:30 475  	  is
13:32:30 476  	  begin
13:32:30 477  	      open out_cursor for
13:32:30 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
13:32:30 479  		  select
13:32:30 480  		    tax.id tad_adjustment_id,
13:32:30 481  		    tax.tax_id tax_id,
13:32:30 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
13:32:30 483  		    tax.amount tax_amount,
13:32:30 484  		    tax.create_date create_date
13:32:30 485  		  from tax_adjustment tax
13:32:30 486  		  , ids
13:32:30 487  		  where tax.id = ids.id
13:32:30 488  	      ;
13:32:30 489  	  end;
13:32:30 490  ----
13:32:30 491  --------------------------------------------------------------------------------
13:32:30 492  ----
13:32:30 493  /**/
13:32:30 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 495  	  BEGIN
13:32:30 496  	    OPEN OUT_CURSOR FOR
13:32:30 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 498  	    SELECT
13:32:30 499  		t.id rcn_ext_source_log_id
13:32:30 500  	      , t.extraction_timestamp
13:32:30 501  	      , t.report_date
13:32:30 502  	      , t.report_generation_datetime
13:32:30 503  	      , t.record_type
13:32:30 504  	      , t.report_file_name
13:32:30 505  	      , t.create_date
13:32:30 506  	      , t.created_by
13:32:30 507  	    FROM rcn_ext_source_log t, ids
13:32:30 508  	    WHERE ids.id = t.id;
13:32:30 509  	  END;
13:32:30 510  
13:32:30 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 512  	  BEGIN
13:32:30 513  	    OPEN OUT_CURSOR FOR
13:32:30 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 515  	    SELECT
13:32:30 516  		t.id rcn_cpt_svc_chg_dtl_id
13:32:30 517  	      , t.rcn_ext_source_log_id
13:32:30 518  	      , t.record_type
13:32:30 519  	      , t.category
13:32:30 520  	      , t.sub_category
13:32:30 521  	      , t.entity_type
13:32:30 522  	      , t.entity_number
13:32:30 523  	      , t.funds_transfer_inst_number
13:32:30 524  	      , t.secure_ba_number
13:32:30 525  	      , t.settlement_currency
13:32:30 526  	      , t.fee_schedule
13:32:30 527  	      , t.mop
13:32:30 528  	      , t.interchange_qualification
13:32:30 529  	      , t.fee_type_description
13:32:30 530  	      , t.action_type
13:32:30 531  	      , t.unit_quantity
13:32:30 532  	      , t.unit_fee
13:32:30 533  	      , t.amount
13:32:30 534  	      , t.percentage_rate
13:32:30 535  	      , t.total_charge
13:32:30 536  	      , t.create_date
13:32:30 537  	      , t.created_by
13:32:30 538  	    FROM rcn_cpt_service_charge_detail t, ids
13:32:30 539  	    WHERE ids.id = t.id;
13:32:30 540  	  END;
13:32:30 541  ----
13:32:30 542  --------------------------------------------------------------------------------
13:32:30 543  ----
13:32:30 544  
13:32:30 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 546  	  BEGIN
13:32:30 547  	    OPEN OUT_CURSOR FOR
13:32:30 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 549  	    SELECT
13:32:30 550  		t.id rcn_cpt_excp_dtl_id
13:32:30 551  	      , t.rcn_ext_source_log_id
13:32:30 552  	      , t.record_type
13:32:30 553  	      , t.submission_date
13:32:30 554  	      , t.pid_number
13:32:30 555  	      , t.pid_short_name
13:32:30 556  	      , t.submission_number
13:32:30 557  	      , t.record_number
13:32:30 558  	      , t.entity_type
13:32:30 559  	      , t.entity_number
13:32:30 560  	      , t.presentment_currency
13:32:30 561  	      , t.merchant_order_number
13:32:30 562  	      , t.rdfi_number
13:32:30 563  	      , t.account_number
13:32:30 564  	      , t.expiration_date
13:32:30 565  	      , t.amount
13:32:30 566  	      , t.mop
13:32:30 567  	      , t.action_code
13:32:30 568  	      , t.auth_date
13:32:30 569  	      , t.auth_code
13:32:30 570  	      , t.auth_response_code
13:32:30 571  	      , t.trace_number
13:32:30 572  	      , t.consumer_country_code
13:32:30 573  	      , t.category
13:32:30 574  	      , t.mcc
13:32:30 575  	      , t.reject_code
13:32:30 576  	      , t.submission_status
13:32:30 577  	      , t.create_date
13:32:30 578  	      , t.created_by
13:32:30 579  	    FROM rcn_cpt_exception_detail t, ids
13:32:30 580  	    WHERE ids.id = t.id;
13:32:30 581  	  END;
13:32:30 582  ----
13:32:30 583  --------------------------------------------------------------------------------
13:32:30 584  ----
13:32:30 585  
13:32:30 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 587  	  BEGIN
13:32:30 588  	    OPEN OUT_CURSOR FOR
13:32:30 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 590  	      SELECT
13:32:30 591  		t.id rcn_cpt_deposit_dtl_id
13:32:30 592  	      , t.rcn_ext_source_log_id
13:32:30 593  	      , t.record_type
13:32:30 594  	      , t.submission_date
13:32:30 595  	      , t.pid_number
13:32:30 596  	      , t.pid_short_name
13:32:30 597  	      , t.submission_number
13:32:30 598  	      , t.record_number
13:32:30 599  	      , t.entity_type
13:32:30 600  	      , t.entity_number
13:32:30 601  	      , t.presentment_currency
13:32:30 602  	      , t.merchant_order_number
13:32:30 603  	      , t.rdfi_number
13:32:30 604  	      , t.account_number
13:32:30 605  	      , t.expiration_date
13:32:30 606  	      , t.amount
13:32:30 607  	      , t.mop
13:32:30 608  	      , t.action_code
13:32:30 609  	      , t.auth_date
13:32:30 610  	      , t.auth_code
13:32:30 611  	      , t.auth_response_code
13:32:30 612  	      , t.trace_number
13:32:30 613  	      , t.consumer_country_code
13:32:30 614  	      , t.mcc
13:32:30 615  	      , t.create_date
13:32:30 616  	      , t.created_by
13:32:30 617  	      , t.fee_code
13:32:30 618  	      , t.unit_fee
13:32:30 619  	      , t.percent_fee
13:32:30 620  	      , t.total_interchange_fee
13:32:30 621  	      , t.total_assessment_fee
13:32:30 622  	      , t.other_fee
13:32:30 623  	    FROM rcn_cpt_deposit_detail t, ids
13:32:30 624  	    WHERE ids.id = t.id;
13:32:30 625  	  END;
13:32:30 626  ----
13:32:30 627  --------------------------------------------------------------------------------
13:32:30 628  ----
13:32:30 629  
13:32:30 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 631  	  BEGIN
13:32:30 632  	    OPEN OUT_CURSOR FOR
13:32:30 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 634  	    SELECT
13:32:30 635  		t.id rcn_cpt_chgbk_act_dtl_id
13:32:30 636  	      , t.rcn_ext_source_log_id
13:32:30 637  	      , t.record_type
13:32:30 638  	      , t.entity_type
13:32:30 639  	      , t.entity_number
13:32:30 640  	      , t.chargeback_amount_issuer
13:32:30 641  	      , t.prev_partial_representment
13:32:30 642  	      , t.presentment_currency
13:32:30 643  	      , t.chargeback_category
13:32:30 644  	      , t.status_flag
13:32:30 645  	      , t.sequence_number
13:32:30 646  	      , t.merchant_order_number
13:32:30 647  	      , t.account_number
13:32:30 648  	      , t.reason_code
13:32:30 649  	      , t.transaction_date
13:32:30 650  	      , t.chargeback_date
13:32:30 651  	      , t.activity_date
13:32:30 652  	      , t.chargeback_amount_action
13:32:30 653  	      , t.fee_amount
13:32:30 654  	      , t.usage_code
13:32:30 655  	      , t.mop_code
13:32:30 656  	      , t.authorization_date
13:32:30 657  	      , t.chargeback_due_date
13:32:30 658  	      , t.create_date
13:32:30 659  	      , t.created_by
13:32:30 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
13:32:30 661  	    WHERE ids.id = t.id;
13:32:30 662  	  END;
13:32:30 663  ----
13:32:30 664  --------------------------------------------------------------------------------
13:32:30 665  ----
13:32:30 666  
13:32:30 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 668  	  BEGIN
13:32:30 669  	    OPEN OUT_CURSOR FOR
13:32:30 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 671  	    SELECT
13:32:30 672  		t.id rcn_pp_settlement_id
13:32:30 673  	      , t.rcn_ext_source_log_id
13:32:30 674  	      , t.transaction_id
13:32:30 675  	      , t.invoice_id
13:32:30 676  	      , t.pp_ref_id
13:32:30 677  	      , t.pp_ref_id_type
13:32:30 678  	      , t.trans_event_code
13:32:30 679  	      , t.trans_init_date
13:32:30 680  	      , t.trans_comp_date
13:32:30 681  	      , t.trans_deb_or_cred
13:32:30 682  	      , t.gross_trans_amount
13:32:30 683  	      , t.gross_trans_currency
13:32:30 684  	      , t.fee_deb_or_cred
13:32:30 685  	      , t.fee_amount
13:32:30 686  	      , t.fee_currency
13:32:30 687  	      , t.custom_field
13:32:30 688  	      , t.create_date
13:32:30 689  	      , t.created_by
13:32:30 690  	    FROM rcn_pp_settlement t, ids
13:32:30 691  	    WHERE ids.id = t.id;
13:32:30 692  	  END;
13:32:30 693  ----
13:32:30 694  --------------------------------------------------------------------------------
13:32:30 695  ----
13:32:30 696  
13:32:30 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 698  	  BEGIN
13:32:30 699  	    OPEN OUT_CURSOR FOR
13:32:30 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 701  	    SELECT
13:32:30 702  		t.id rcn_pp_dispute_id
13:32:30 703  	      , t.rcn_ext_source_log_id
13:32:30 704  	      , t.dispute_type
13:32:30 705  	      , t.claimant_name
13:32:30 706  	      , t.claimant_email
13:32:30 707  	      , t.transaction_id
13:32:30 708  	      , t.trans_date
13:32:30 709  	      , t.disputed_amount
13:32:30 710  	      , t.disputed_amount_currency
13:32:30 711  	      , t.dispute_reason
13:32:30 712  	      , t.dispute_filing_date
13:32:30 713  	      , t.dispute_status
13:32:30 714  	      , t.dispute_case_id
13:32:30 715  	      , t.invoice_id
13:32:30 716  	      , t.create_date
13:32:30 717  	      , t.created_by
13:32:30 718  	    FROM
13:32:30 719  	    rcn_pp_dispute t, ids
13:32:30 720  	    WHERE ids.id = t.id;
13:32:30 721  	  END;
13:32:30 722  ----
13:32:30 723  --------------------------------------------------------------------------------
13:32:30 724  ----
13:32:30 725  
13:32:30 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 727  	  BEGIN
13:32:30 728  	    OPEN OUT_CURSOR FOR
13:32:30 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 730  	    SELECT
13:32:30 731  		t.id rcn_pp_trans_dtl_id
13:32:30 732  	      , t.rcn_ext_source_log_id
13:32:30 733  	      , t.transaction_id
13:32:30 734  	      , t.invoice_id
13:32:30 735  	      , t.pp_ref_id
13:32:30 736  	      , t.trans_event_code
13:32:30 737  	      , t.trans_init_date
13:32:30 738  	      , t.trans_comp_date
13:32:30 739  	      , t.trans_deb_or_cred
13:32:30 740  	      , t.gross_trans_amount
13:32:30 741  	      , t.gross_trans_currency
13:32:30 742  	      , t.fee_deb_or_cred
13:32:30 743  	      , t.fee_amount
13:32:30 744  	      , t.fee_currency
13:32:30 745  	      , t.trans_status
13:32:30 746  	      , t.insurance_amount
13:32:30 747  	      , t.sales_tax_amount
13:32:30 748  	      , t.shipping_amount
13:32:30 749  	      , t.trans_subject
13:32:30 750  	      , t.trans_note
13:32:30 751  	      , t.payer_acct_id
13:32:30 752  	      , t.payer_addr_status
13:32:30 753  	      , t.item_name
13:32:30 754  	      , t.item_id
13:32:30 755  	      , t.option_1_name
13:32:30 756  	      , t.option_1_value
13:32:30 757  	      , t.option_2_name
13:32:30 758  	      , t.option_2_value
13:32:30 759  	      , t.auction_site
13:32:30 760  	      , t.auction_buyer_id
13:32:30 761  	      , t.auction_closing_date
13:32:30 762  	      , t.shipping_addr_line_1
13:32:30 763  	      , t.shipping_addr_line_2
13:32:30 764  	      , t.shipping_addr_city
13:32:30 765  	      , t.shipping_addr_state
13:32:30 766  	      , t.shipping_addr_zip
13:32:30 767  	      , t.shipping_addr_country
13:32:30 768  	      , t.custom_field
13:32:30 769  	      , t.create_date
13:32:30 770  	      , t.created_by
13:32:30 771  	    FROM rcn_pp_trans_detail t, ids
13:32:30 772  	    WHERE ids.id = t.id;
13:32:30 773  	  END;
13:32:30 774  ----
13:32:30 775  --------------------------------------------------------------------------------
13:32:30 776  ----
13:32:30 777  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 778  	  BEGIN
13:32:30 779  	    OPEN OUT_CURSOR FOR
13:32:30 780  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 781  	    SELECT
13:32:30 782  	      rac.id
13:32:30 783  	    , rac.rcn_ext_source_log_id
13:32:30 784  	    , rac.resolution
13:32:30 785  	    , rac.from_system
13:32:30 786  	    , rac.rejects_to_system
13:32:30 787  	    , rac.disputes_to_system
13:32:30 788  	    , rac.date_of_adjustment
13:32:30 789  	    , rac.date_of_charge
13:32:30 790  	    , rac.case_type
13:32:30 791  	    , rac.cb_reas_code
13:32:30 792  	    , rac.cb_amount
13:32:30 793  	    , rac.cb_adjustment_number
13:32:30 794  	    , rac.billed_amount
13:32:30 795  	    , rac.soc_amount
13:32:30 796  	    , rac.foreign_amount
13:32:30 797  	    , rac.currency
13:32:30 798  	    , rac.note1
13:32:30 799  	    , rac.note2
13:32:30 800  	    , rac.note3
13:32:30 801  	    , rac.note4
13:32:30 802  	    , rac.note5
13:32:30 803  	    , rac.note6
13:32:30 804  	    , rac.note7
13:32:30 805  	    , rac.ind_ref_number
13:32:30 806  	    , rac.create_date
13:32:30 807  	    , rac.created_by
13:32:30 808  	    , rac.update_date
13:32:30 809  	    , rac.updated_by
13:32:30 810  	    FROM rcn_amex_chargeback rac, ids
13:32:30 811  	    WHERE ids.id = rac.id;
13:32:30 812  	  END;
13:32:30 813  ----
13:32:30 814  --------------------------------------------------------------------------------
13:32:30 815  ----
13:32:30 816  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 817  	  BEGIN
13:32:30 818  	    OPEN OUT_CURSOR FOR
13:32:30 819  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 820  	    SELECT
13:32:30 821  		t.ID PAYPAL_ID
13:32:30 822  	      , ACCOUNT_ID
13:32:30 823  	      , INSTRUMENT_NAME
13:32:30 824  	      , CREATE_DATE
13:32:30 825  	      , CREATED_BY
13:32:30 826  	      , UPDATE_DATE
13:32:30 827  	      , UPDATED_BY
13:32:30 828  	      , s.value PAYPAL_STATUS
13:32:30 829  	      , STATE
13:32:30 830  	      , CITY
13:32:30 831  	      , POSTAL_CODE
13:32:30 832  	      , COUNTRY
13:32:30 833  	      , EXPIRATION_DATE
13:32:30 834  	    FROM paypal t, paypal_status s, ids
13:32:30 835  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
13:32:30 836  	  END;
13:32:30 837  ----
13:32:30 838  --------------------------------------------------------------------------------
13:32:30 839  ----
13:32:30 840  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
13:32:30 841  	  BEGIN
13:32:30 842  	    OPEN OUT_CURSOR FOR
13:32:30 843  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
13:32:30 844  	    SELECT
13:32:30 845  	      a.id ADDRESS_ID,
13:32:30 846  	      address1,
13:32:30 847  	      address2,
13:32:30 848  	      city,
13:32:30 849  	      state,
13:32:30 850  	      postal_code,
13:32:30 851  	      country,
13:32:30 852  	      create_date,
13:32:30 853  	      created_by,
13:32:30 854  	      update_date,
13:32:30 855  	      updated_by
13:32:30 856  	    FROM address a, ids
13:32:30 857  	    WHERE ids.id = a.id;
13:32:30 858  	  END;
13:32:30 859  ----
13:32:30 860  --------------------------------------------------------------------------------
13:32:30 861  ----
13:32:30 862  /**/
13:32:30 863  END PROCS_REPORTING;
13:32:30 864  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.09
13:32:30 SQL> 
13:32:30 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
13:32:30   2  
13:32:30   3  ----
13:32:30   4  --------------------------------------------------------------------------------
13:32:30   5  ----
13:32:30   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
13:32:30   7  	      return line_item.amount%type
13:32:30   8  	  is
13:32:30   9  	      v_discount  line_item.amount%type := 0;
13:32:30  10  	  begin
13:32:30  11  	      for x in (
13:32:30  12  		  select d.id discount_id
13:32:30  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
13:32:30  14  		  from discount d
13:32:30  15  		      join discount_line_item dli	      on dli.discount_id = d.id
13:32:30  16  		      join discount_product_offering dop      on dop.discount_id = d.id
13:32:30  17  		      join product_offering po		      on po.id = dop.product_offering_id
13:32:30  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
13:32:30  19  		  where dli.line_item_id = in_line_item_id
13:32:30  20  	      )
13:32:30  21  	      loop
13:32:30  22  		  v_discount := v_discount + x.discount_amount;
13:32:30  23  	      end loop;
13:32:30  24  
13:32:30  25  	      return v_discount;
13:32:30  26  	  end;
13:32:30  27  ----
13:32:30  28  --------------------------------------------------------------------------------
13:32:30  29  ----
13:32:30  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
13:32:30  31  	      return line_item.amount%type
13:32:30  32  	  is
13:32:30  33  	      v_li_total  line_item.amount%type;
13:32:30  34  	      v_inv_total line_item.amount%type;
13:32:30  35  	      v_ref_total line_item.amount%type;
13:32:30  36  	  begin
13:32:30  37  
13:32:30  38  	      for li in (
13:32:30  39  		  select li.invoice_id, po.*
13:32:30  40  		  from line_item li
13:32:30  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
13:32:30  42  		  where li.id = in_line_item_id
13:32:30  43  	      )
13:32:30  44  	      loop
13:32:30  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
13:32:30  46  
13:32:30  47  		  v_inv_total := 0;
13:32:30  48  		  v_ref_total := 0;
13:32:30  49  		  for x in (
13:32:30  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
13:32:30  51  		      from charge c
13:32:30  52  		      where c.invoice_id = li.invoice_id
13:32:30  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
13:32:30  54  		  )
13:32:30  55  		  loop
13:32:30  56  		      if (x.type = 1) then
13:32:30  57  			  v_inv_total := x.total;
13:32:30  58  		      else
13:32:30  59  			  v_ref_total := x.total;
13:32:30  60  		      end if;
13:32:30  61  		  end loop;
13:32:30  62  
13:32:30  63  		  if (v_inv_total > 0) then
13:32:30  64  		      return (v_ref_total / v_inv_total) * v_li_total;
13:32:30  65  		  else
13:32:30  66  		      return 0;
13:32:30  67  		  end if;
13:32:30  68  
13:32:30  69  	      end loop;
13:32:30  70  
13:32:30  71  	      return 0;
13:32:30  72  	  end;
13:32:30  73  ----
13:32:30  74  --------------------------------------------------------------------------------
13:32:30  75  ----
13:32:30  76  	PROCEDURE EXTRACT_LINE_ITEMS(
13:32:30  77  	  in_lower_date_bound DATE,
13:32:30  78  	  in_upper_date_bound DATE,
13:32:30  79  	  out_lic_cur OUT sys_refcursor
13:32:30  80  	) AS
13:32:30  81  	BEGIN
13:32:30  82  	  OPEN out_lic_cur FOR
13:32:30  83  	  with liq as (
13:32:30  84  		SELECT li2.id
13:32:30  85  		      FROM
13:32:30  86  			   line_item li2
13:32:30  87  		      WHERE
13:32:30  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30  89  		UNION
13:32:30  90  		SELECT li2.id
13:32:30  91  		      FROM
13:32:30  92  			   line_item li2
13:32:30  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
13:32:30  94  		      WHERE
13:32:30  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30  96  		UNION
13:32:30  97  		SELECT li2.id
13:32:30  98  		      FROM
13:32:30  99  			   line_item li2
13:32:30 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
13:32:30 101  		      WHERE
13:32:30 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30 103  		UNION
13:32:30 104  		SELECT li2.id
13:32:30 105  		      FROM
13:32:30 106  			   line_item li2
13:32:30 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
13:32:30 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
13:32:30 109  		      WHERE
13:32:30 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30 111  		UNION
13:32:30 112  		SELECT li2.id
13:32:30 113  		      FROM
13:32:30 114  			   line_item li2
13:32:30 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
13:32:30 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
13:32:30 117  		      WHERE
13:32:30 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30 119  		UNION
13:32:30 120  		SELECT li2.id
13:32:30 121  		      FROM
13:32:30 122  			   line_item li2
13:32:30 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
13:32:30 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
13:32:30 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
13:32:30 126  		      WHERE
13:32:30 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30 128  	  )
13:32:30 129  	  SELECT distinct
13:32:30 130  	    line_item.id				 line_item_id
13:32:30 131  	  , product.name				 product_name
13:32:30 132  	  , product.unit_price				 product_unit_price
13:32:30 133  	  , product.production_cost			 product_production_cost
13:32:30 134  	  , offer_chain.name				 offer_chain_name
13:32:30 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
13:32:30 136  	  , gclicense.purchase_date			 subscription_start_date
13:32:30 137  	  , gclicense.start_date			 license_start_date
13:32:30 138  	  , gclicense.end_date				 license_end_date
13:32:30 139  	  , credit_card.city				 cc_city
13:32:30 140  	  , credit_card.state				 cc_state
13:32:30 141  	  , credit_card.postal_code			 cc_postal_code
13:32:30 142  	  , line_item.create_date			 line_item_purchase_date
13:32:30 143  	  , gclicense.account_regi_id
13:32:30 144  	  , product_offering.quantity			 purchase_quantity
13:32:30 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
13:32:30 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
13:32:30 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
13:32:30 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
13:32:30 149  	  , 0						 purchase_tax_amount
13:32:30 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
13:32:30 151  	  , invoice.id					 invoice_number
13:32:30 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
13:32:30 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
13:32:30 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
13:32:30 155  	  FROM
13:32:30 156  	       line_item
13:32:30 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
13:32:30 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
13:32:30 159  	  JOIN product				ON product.id	       = product_offering.product_id
13:32:30 160  	  join (
13:32:30 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
13:32:30 162  		      ,subscription.sct_id, license.start_date, license.end_date
13:32:30 163  		      ,account.group_id account_regi_id
13:32:30 164  		from	 license
13:32:30 165  		    join subscription ON subscription.id = license.subscription_id
13:32:30 166  		    join account      ON account.id	 = subscription.account_id
13:32:30 167  		union all
13:32:30 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
13:32:30 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
13:32:30 170  		      ,gc.purchaser_group_id account_regi_id
13:32:30 171  		from	 gift_certificate gc
13:32:30 172  		where
13:32:30 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
13:32:30 174  
13:32:30 175  	  ) gclicense
13:32:30 176  						on gclicense.invoice_id = invoice.id
13:32:30 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
13:32:30 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
13:32:30 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
13:32:30 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
13:32:30 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
13:32:30 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
13:32:30 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
13:32:30 184  	  join liq				on line_item.id 	= liq.id
13:32:30 185  	    ;
13:32:30 186  	END EXTRACT_LINE_ITEMS;
13:32:30 187  ----
13:32:30 188  --------------------------------------------------------------------------------
13:32:30 189  ----
13:32:30 190  END PROCS_REPORTING_1A;
13:32:30 191  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
13:32:30   2  
13:32:30   3  FUNCTION GET_PRODUCT_NAMES(
13:32:30   4  	in_offer_id IN NUMBER
13:32:30   5  ) RETURN VARCHAR2 AS
13:32:30   6  var_result_names VARCHAR2(1024);
13:32:30   7  BEGIN
13:32:30   8  
13:32:30   9  	var_result_names := NULL;
13:32:30  10  
13:32:30  11  	FOR f_product IN (
13:32:30  12  	  SELECT
13:32:30  13  	    PRODUCT.NAME
13:32:30  14  	  FROM
13:32:30  15  	    PRODUCT
13:32:30  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
13:32:30  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
13:32:30  18  	  WHERE
13:32:30  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
13:32:30  20  	)
13:32:30  21  	LOOP
13:32:30  22  
13:32:30  23  	  IF var_result_names IS NULL THEN
13:32:30  24  	    var_result_names := f_product.NAME;
13:32:30  25  	  ELSE
13:32:30  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
13:32:30  27  	  END IF;
13:32:30  28  
13:32:30  29  	END LOOP;
13:32:30  30  
13:32:30  31  	RETURN var_result_names;
13:32:30  32  
13:32:30  33  END GET_PRODUCT_NAMES;
13:32:30  34  
13:32:30  35  /******************************************************************************/
13:32:30  36  
13:32:30  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
13:32:30  38  	in_start_date  IN DATE,
13:32:30  39  	in_end_date    IN DATE,
13:32:30  40  	out_result_set OUT SYS_REFCURSOR
13:32:30  41  ) AS
13:32:30  42  -- CONSTANTS
13:32:30  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
13:32:30  44  BEGIN
13:32:30  45  
13:32:30  46  	OPEN out_result_set FOR
13:32:30  47  	SELECT
13:32:30  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
13:32:30  49  	  "Offer_Id",
13:32:30  50  	  "New_Purchases_Num",
13:32:30  51  	  "Number_Of_renewals",
13:32:30  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
13:32:30  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
13:32:30  54  	FROM (
13:32:30  55  	  SELECT
13:32:30  56  	    "Offer_Id",
13:32:30  57  	    "Number_Of_renewals",
13:32:30  58  	    "New_Purchases_Num"
13:32:30  59  	  FROM (
13:32:30  60  	    SELECT
13:32:30  61  	      OFFER.ID as "Offer_Id",
13:32:30  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
13:32:30  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
13:32:30  64  	    FROM
13:32:30  65  	      OFFER
13:32:30  66  	  )
13:32:30  67  	  WHERE
13:32:30  68  	    "New_Purchases_Num" > 0
13:32:30  69  	    OR "Number_Of_renewals" > 0
13:32:30  70  	);
13:32:30  71  
13:32:30  72  	/*
13:32:30  73  	OPEN out_result_set FOR
13:32:30  74  	SELECT
13:32:30  75  	  "Product_Names",
13:32:30  76  	  "Offer_Id",
13:32:30  77  	  "New_Purchases_Num",
13:32:30  78  	  "Number_Of_renewals",
13:32:30  79  	  "Total_Dollar_Value",
13:32:30  80  	  "Unique_Purchasers_num"
13:32:30  81  	FROM (
13:32:30  82  	  SELECT
13:32:30  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
13:32:30  84  	    offer.id as "Offer_Id",
13:32:30  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
13:32:30  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
13:32:30  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
13:32:30  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
13:32:30  89  	  FROM
13:32:30  90  	    OFFER
13:32:30  91  	)
13:32:30  92  	WHERE
13:32:30  93  	  "New_Purchases_Num" > 0
13:32:30  94  	  OR "Number_Of_renewals" > 0
13:32:30  95  	  OR "Total_Dollar_Value" > 0
13:32:30  96  	  OR "Unique_Purchasers_num" > 0;
13:32:30  97  	*/
13:32:30  98  
13:32:30  99  END GET_FULL_FLASH_REPORT_PURCH;
13:32:30 100  
13:32:30 101  /******************************************************************************/
13:32:30 102  
13:32:30 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
13:32:30 104  	in_offer_id	       IN NUMBER,
13:32:30 105  	in_start_date	       IN DATE,
13:32:30 106  	in_end_date	       IN DATE,
13:32:30 107  	out_new_purchasers_num OUT NUMBER,
13:32:30 108  	out_renewals_num       OUT NUMBER,
13:32:30 109  	out_product_names      OUT VARCHAR2,
13:32:30 110  	out_total_dollar_value OUT NUMBER,
13:32:30 111  	out_unique_purchasers  OUT NUMBER
13:32:30 112  ) AS
13:32:30 113  -- CONSTANTS
13:32:30 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
13:32:30 115  BEGIN
13:32:30 116  
13:32:30 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
13:32:30 118  
13:32:30 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
13:32:30 120  	  in_offer_id,
13:32:30 121  	  in_start_date,
13:32:30 122  	  in_end_date
13:32:30 123  	);
13:32:30 124  
13:32:30 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
13:32:30 126  	  in_offer_id,
13:32:30 127  	  in_start_date,
13:32:30 128  	  in_end_date
13:32:30 129  	);
13:32:30 130  
13:32:30 131  	out_renewals_num := FLR_RENEWALS_NUM(
13:32:30 132  	  in_offer_id,
13:32:30 133  	  in_start_date,
13:32:30 134  	  in_end_date
13:32:30 135  	);
13:32:30 136  
13:32:30 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
13:32:30 138  	  in_offer_id,
13:32:30 139  	  in_start_date,
13:32:30 140  	  in_end_date
13:32:30 141  	);
13:32:30 142  
13:32:30 143  END GET_FLASH_REPORT_PURCHASES;
13:32:30 144  
13:32:30 145  /******************************************************************************/
13:32:30 146  
13:32:30 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
13:32:30 148  	in_offer_id	       IN NUMBER,
13:32:30 149  	in_start_date	       IN DATE,
13:32:30 150  	in_end_date	       IN DATE
13:32:30 151  ) RETURN NUMBER AS
13:32:30 152  -- CONSTANTS
13:32:30 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
13:32:30 154  -- VARIABLES
13:32:30 155  var_new_purchases_num NUMBER;
13:32:30 156  BEGIN
13:32:30 157  	SELECT
13:32:30 158  	  COUNT(LICENSE.ID)
13:32:30 159  	  into
13:32:30 160  	  var_new_purchases_num
13:32:30 161  	FROM
13:32:30 162  	  LICENSE
13:32:30 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
13:32:30 164  	WHERE
13:32:30 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
13:32:30 166  	  AND LICENSE.OFFER_ID = in_offer_id
13:32:30 167  	  AND CHARGE.CHARGE_AMOUNT > 0
13:32:30 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
13:32:30 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
13:32:30 170  
13:32:30 171  	RETURN var_new_purchases_num;
13:32:30 172  END FLR_NEW_PURCHASERS_NUM;
13:32:30 173  
13:32:30 174  /******************************************************************************/
13:32:30 175  
13:32:30 176  FUNCTION FLR_RENEWALS_NUM (
13:32:30 177  	in_offer_id	       IN NUMBER,
13:32:30 178  	in_start_date	       IN DATE,
13:32:30 179  	in_end_date	       IN DATE
13:32:30 180  ) RETURN NUMBER AS
13:32:30 181  -- CONSTANTS
13:32:30 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
13:32:30 183  -- VARIABLES
13:32:30 184  var_renewals_num NUMBER;
13:32:30 185  BEGIN
13:32:30 186  	SELECT
13:32:30 187  	  COUNT(LICENSE.ID)
13:32:30 188  	  into
13:32:30 189  	  var_renewals_num
13:32:30 190  	FROM
13:32:30 191  	  LICENSE
13:32:30 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
13:32:30 193  	WHERE
13:32:30 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
13:32:30 195  	  AND LICENSE.OFFER_ID = in_offer_id
13:32:30 196  	  AND CHARGE.CHARGE_AMOUNT > 0
13:32:30 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
13:32:30 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
13:32:30 199  
13:32:30 200  	RETURN var_renewals_num;
13:32:30 201  END FLR_RENEWALS_NUM;
13:32:30 202  
13:32:30 203  /******************************************************************************/
13:32:30 204  
13:32:30 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
13:32:30 206  	in_offer_id	       IN NUMBER,
13:32:30 207  	in_start_date	       IN DATE,
13:32:30 208  	in_end_date	       IN DATE
13:32:30 209  ) RETURN NUMBER AS
13:32:30 210  var_dollar_value NUMBER(10,2);
13:32:30 211  BEGIN
13:32:30 212  	SELECT
13:32:30 213  	  SUM(CHARGE.CHARGE_AMOUNT)
13:32:30 214  	  into
13:32:30 215  	  var_dollar_value
13:32:30 216  	FROM
13:32:30 217  	  LICENSE
13:32:30 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
13:32:30 219  	WHERE
13:32:30 220  	  LICENSE.OFFER_ID = in_offer_id
13:32:30 221  	  AND CHARGE.CHARGE_AMOUNT > 0
13:32:30 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
13:32:30 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
13:32:30 224  
13:32:30 225  	RETURN var_dollar_value;
13:32:30 226  END FLR_TOTAL_DOLLAR_VALUE;
13:32:30 227  
13:32:30 228  /******************************************************************************/
13:32:30 229  
13:32:30 230  FUNCTION FLR_UNIQUE_PURCHASERS (
13:32:30 231  	in_offer_id	       IN NUMBER,
13:32:30 232  	in_start_date	       IN DATE,
13:32:30 233  	in_end_date	       IN DATE
13:32:30 234  ) RETURN NUMBER AS
13:32:30 235  -- CONSTANTS
13:32:30 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
13:32:30 237  -- VARIABLES
13:32:30 238  var_unique_purchasers NUMBER;
13:32:30 239  BEGIN
13:32:30 240  	SELECT
13:32:30 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
13:32:30 242  	FROM
13:32:30 243  	  LICENSE
13:32:30 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
13:32:30 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 246  	WHERE
13:32:30 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
13:32:30 248  	  AND LICENSE.OFFER_ID = in_offer_id
13:32:30 249  	  AND CHARGE.CHARGE_AMOUNT > 0
13:32:30 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
13:32:30 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
13:32:30 252  
13:32:30 253  	RETURN var_unique_purchasers;
13:32:30 254  END;
13:32:30 255  
13:32:30 256  END PROCS_REPORTS_V5;
13:32:30 257  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.01
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE INCREMENT_VERSION
13:32:30   4  /*
13:32:30   5  Throws exceptions:
13:32:30   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30   7  */
13:32:30   8  AS
13:32:30   9  BEGIN
13:32:30  10  
13:32:30  11  	UPDATE SYS_VERSION SET version=version+1;
13:32:30  12  
13:32:30  13  END INCREMENT_VERSION;
13:32:30  14  
13:32:30  15  /*************************************************************/
13:32:30  16  
13:32:30  17  PROCEDURE CHECK_VERSION(
13:32:30  18  	  in_vers    IN NUMBER,
13:32:30  19  	  out_result OUT NUMBER
13:32:30  20  ) AS
13:32:30  21  	current_version NUMBER;
13:32:30  22  BEGIN
13:32:30  23  	SELECT version INTO current_version FROM SYS_VERSION;
13:32:30  24  	IF(current_version != in_vers) THEN
13:32:30  25  	  out_result := 1;
13:32:30  26  	ELSE
13:32:30  27  	  out_result := 0;
13:32:30  28  	END IF;
13:32:30  29  END CHECK_VERSION;
13:32:30  30  
13:32:30  31  END PROCS_SYSTEM_V20;
13:32:30  32  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE ADD_TAX (
13:32:30   4  	in_tax_type_id		 IN NUMBER,
13:32:30   5  	in_calculated_amount	 IN NUMBER,
13:32:30   6  	in_created_by		 IN VARCHAR2,
13:32:30   7  	in_line_item_id 	 IN NUMBER,
13:32:30   8  	in_effective_rate	 IN VARCHAR2,
13:32:30   9  	in_taxable_amount	 IN NUMBER,
13:32:30  10  	in_tax_rule_id		 IN NUMBER,
13:32:30  11  	in_jurisdiction_level_id IN NUMBER,
13:32:30  12  	in_jurisdiction_name	 IN VARCHAR2,
13:32:30  13  	in_jurisdiction_id	 IN VARCHAR2,
13:32:30  14  	in_ext_tax_type 	 IN VARCHAR2,
13:32:30  15  	in_ext_result		 IN VARCHAR2,
13:32:30  16  	in_imposition_type	 IN VARCHAR2,
13:32:30  17  	in_imposition		 IN VARCHAR2
13:32:30  18  ) AS
13:32:30  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
13:32:30  20  -- VARIABLES
13:32:30  21  var_new_tax_id	NUMBER;
13:32:30  22  temp_line_item_id NUMBER;
13:32:30  23  -- EXCEPTIONS
13:32:30  24  BAD_LINE_ITEM_ID EXCEPTION;
13:32:30  25  BEGIN
13:32:30  26  
13:32:30  27  	BEGIN
13:32:30  28  	  SELECT
13:32:30  29  	    LINE_ITEM.ID into temp_line_item_id
13:32:30  30  	  FROM
13:32:30  31  	    LINE_ITEM
13:32:30  32  	  WHERE
13:32:30  33  	    LINE_ITEM.ID = in_line_item_id;
13:32:30  34  	  EXCEPTION
13:32:30  35  	    WHEN NO_DATA_FOUND THEN
13:32:30  36  	      RAISE BAD_LINE_ITEM_ID;
13:32:30  37  	END;
13:32:30  38  
13:32:30  39  	var_new_tax_id := NULL;
13:32:30  40  
13:32:30  41  	PROCS_TAXES_CRU_V20.CREATE_TAX(
13:32:30  42  	  var_new_tax_id,
13:32:30  43  	  in_tax_type_id,
13:32:30  44  	  in_calculated_amount,
13:32:30  45  	  in_created_by,
13:32:30  46  	  in_line_item_id,
13:32:30  47  	  in_effective_rate,
13:32:30  48  	  in_taxable_amount,
13:32:30  49  	  in_tax_rule_id,
13:32:30  50  	  in_jurisdiction_level_id,
13:32:30  51  	  in_jurisdiction_name,
13:32:30  52  	  in_jurisdiction_id,
13:32:30  53  	  in_ext_tax_type,
13:32:30  54  	  in_ext_result,
13:32:30  55  	  in_imposition_type,
13:32:30  56  	  in_imposition
13:32:30  57  	);
13:32:30  58  
13:32:30  59  EXCEPTION
13:32:30  60  WHEN BAD_LINE_ITEM_ID THEN
13:32:30  61  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30  62  	  SPROC_NAME, 'No such line item');
13:32:30  63  WHEN OTHERS THEN
13:32:30  64  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30  66  END ADD_TAX;
13:32:30  67  
13:32:30  68  /******************************************************************************/
13:32:30  69  
13:32:30  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
13:32:30  71  	in_country_code IN CHAR,
13:32:30  72  	in_check_date IN DATE,
13:32:30  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V20.FALSE
13:32:30  74  ) AS
13:32:30  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
13:32:30  76  -- VARIABLES
13:32:30  77  var_countries_count NUMBER;
13:32:30  78  var_result	  NUMBER;
13:32:30  79  BEGIN
13:32:30  80  
13:32:30  81  	SELECT
13:32:30  82  	  COUNT(1) into var_countries_count
13:32:30  83  	FROM
13:32:30  84  	  TAX_COUNTRY_EXCLUSION_LIST
13:32:30  85  	WHERE
13:32:30  86  	  country_code = in_country_code
13:32:30  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
13:32:30  88  	  AND (
13:32:30  89  	    end_date is null
13:32:30  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
13:32:30  91  	  );
13:32:30  92  
13:32:30  93  	IF var_countries_count > 1 THEN
13:32:30  94  	  -- [REVU] Should not happen. DB structure error
13:32:30  95  	  var_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30  96  	ELSIF var_countries_count = 1 THEN
13:32:30  97  	  var_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30  98  	ELSE
13:32:30  99  	  var_result := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 100  	END IF;
13:32:30 101  
13:32:30 102  	out_is_founded := var_result;
13:32:30 103  
13:32:30 104  EXCEPTION
13:32:30 105  WHEN OTHERS THEN
13:32:30 106  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 108  END CHECK_COUNTRY_FOR_EXCLUSION;
13:32:30 109  
13:32:30 110  /******************************************************************************/
13:32:30 111  
13:32:30 112  PROCEDURE GET_TAX_CATEGORY (
13:32:30 113  	in_tax_category_id IN NUMBER,
13:32:30 114  	out_result_set	   OUT SYS_REFCURSOR
13:32:30 115  ) AS
13:32:30 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
13:32:30 117  BEGIN
13:32:30 118  
13:32:30 119  	OPEN out_result_set FOR
13:32:30 120  	SELECT
13:32:30 121  	  ID,
13:32:30 122  	  CODE,
13:32:30 123  	  DESCRIPTION
13:32:30 124  	FROM
13:32:30 125  	  TAX_CATEGORY
13:32:30 126  	WHERE
13:32:30 127  	  ID = in_tax_category_id;
13:32:30 128  
13:32:30 129  EXCEPTION
13:32:30 130  WHEN OTHERS THEN
13:32:30 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 133  END GET_TAX_CATEGORY;
13:32:30 134  
13:32:30 135  END PROCS_TAXES_V20;
13:32:30 136  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE CREATE_TRANSACTION (
13:32:30   4  /*
13:32:30   5  Throws exceptions:
13:32:30   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30   8  */
13:32:30   9  	in_transaction_id	  IN NUMBER,
13:32:30  10  	in_status_id		  IN NUMBER,
13:32:30  11  	in_amount		  IN NUMBER,
13:32:30  12  	in_created_by		  IN VARCHAR2,
13:32:30  13  	in_order_id		  IN VARCHAR2,
13:32:30  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
13:32:30  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
13:32:30  16  	out_transaction_id	  OUT NUMBER
13:32:30  17  ) AS
13:32:30  18  -- VARIABLES
13:32:30  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
13:32:30  20  var_transaction_count  NUMBER;
13:32:30  21  -- EXCEPTIONS
13:32:30  22  BAD_TRANSACTION_ID     EXCEPTION;
13:32:30  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30  24  BEGIN
13:32:30  25  
13:32:30  26  	IF in_transaction_id IS NOT NULL THEN
13:32:30  27  	  SELECT
13:32:30  28  	    COUNT(*) into var_transaction_count
13:32:30  29  	  FROM
13:32:30  30  	    TRANSACTION
13:32:30  31  	  WHERE
13:32:30  32  	    TRANSACTION.ID = in_transaction_id;
13:32:30  33  	  IF var_transaction_count > 0 THEN
13:32:30  34  	    RAISE BAD_TRANSACTION_ID;
13:32:30  35  	  END IF;
13:32:30  36  	END IF;
13:32:30  37  
13:32:30  38  	PROCS_TRANSACTION_CRU_V20.CREATE_TRANSACTION(
13:32:30  39  	  out_transaction_id	   => out_transaction_id,
13:32:30  40  	  in_transaction_id	   => in_transaction_id,
13:32:30  41  	  in_transaction_status_id => in_status_id,
13:32:30  42  	  in_transaction_amount    => in_amount,
13:32:30  43  	  in_created_by 	   => in_created_by,
13:32:30  44  	  in_order_id		   => in_order_id,
13:32:30  45  	  in_is_refund		   => in_is_refund,
13:32:30  46  	  in_transaction_type_code => in_transaction_type_code
13:32:30  47  	);
13:32:30  48  
13:32:30  49  EXCEPTION
13:32:30  50  WHEN BAD_TRANSACTION_ID THEN
13:32:30  51  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:30  52  	  SPROC_NAME, 'Transaction with given id already exists');
13:32:30  53  WHEN OTHERS THEN
13:32:30  54  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30  56  END CREATE_TRANSACTION;
13:32:30  57  
13:32:30  58  /******************************************************************************/
13:32:30  59  
13:32:30  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
13:32:30  61  /*
13:32:30  62  Throws exceptions:
13:32:30  63  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30  65  */
13:32:30  66  	in_transaction_id	   IN NUMBER,
13:32:30  67  	in_trans_attempt_status    IN NUMBER,
13:32:30  68  	in_external_status_code    IN VARCHAR2,
13:32:30  69  	in_external_status_message IN VARCHAR2,
13:32:30  70  	in_created_by		   IN VARCHAR2,
13:32:30  71  	in_ext_transaction_id	   IN VARCHAR2,
13:32:30  72  	out_transaction_attempt_id OUT NUMBER
13:32:30  73  ) AS
13:32:30  74  -- VARIABLES
13:32:30  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
13:32:30  76  var_transaction_create_date DATE;
13:32:30  77  var_transaction_attempt_id  NUMBER;
13:32:30  78  
13:32:30  79  -- EXCEPTIONS
13:32:30  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
13:32:30  81  BAD_TRANSACTION_ID       EXCEPTION;
13:32:30  82  BEGIN
13:32:30  83  
13:32:30  84  	-- Check that transaction exists
13:32:30  85  	BEGIN
13:32:30  86  	  SELECT
13:32:30  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
13:32:30  88  	  FROM
13:32:30  89  	    TRANSACTION
13:32:30  90  	  WHERE
13:32:30  91  	    TRANSACTION.ID = in_transaction_id;
13:32:30  92  	  EXCEPTION
13:32:30  93  	    WHEN OTHERS THEN
13:32:30  94  	      RAISE BAD_TRANSACTION_ID;
13:32:30  95  	END;
13:32:30  96  
13:32:30  97  	-- Check that transaction status is correct
13:32:30  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
13:32:30  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
13:32:30 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
13:32:30 102  	END IF;
13:32:30 103  
13:32:30 104  	var_transaction_attempt_id := NULL;
13:32:30 105  	PROCS_TRANSACTION_CRU_V20.CREATE_TRANSACTION_ATTEMPT(
13:32:30 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
13:32:30 107  	  in_transaction_id	       => in_transaction_id,
13:32:30 108  	  in_external_status_code      => in_external_status_code,
13:32:30 109  	  in_external_status_message   => in_external_status_message,
13:32:30 110  	  in_created_by 	       => in_created_by,
13:32:30 111  	  in_external_transaction_id   => in_ext_transaction_id,
13:32:30 112  	  in_transaction_start_time    => var_transaction_create_date,
13:32:30 113  	  in_status_id		       => in_trans_attempt_status
13:32:30 114  	);
13:32:30 115  
13:32:30 116  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
13:32:30 117  	  in_transaction_id => in_transaction_id,
13:32:30 118  	  in_updated_by     => in_created_by
13:32:30 119  	);
13:32:30 120  
13:32:30 121  	out_transaction_attempt_id := var_transaction_attempt_id;
13:32:30 122  
13:32:30 123  EXCEPTION
13:32:30 124  WHEN BAD_TRANSACTION_ID THEN
13:32:30 125  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 126  	  SPROC_NAME, 'No such transaction');
13:32:30 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
13:32:30 128  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 129  	  SPROC_NAME, 'Bad transaction attempt status');
13:32:30 130  WHEN OTHERS THEN
13:32:30 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 133  END CREATE_TRANSACTION_ATTEMPT;
13:32:30 134  
13:32:30 135  /******************************************************************************/
13:32:30 136  
13:32:30 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
13:32:30 138  /*
13:32:30 139  Throws exceptions:
13:32:30 140  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 141  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 142  */
13:32:30 143  	in_transaction_id	 IN NUMBER,
13:32:30 144  	in_updated_by		 IN VARCHAR2,
13:32:30 145  	in_transaction_status_id IN NUMBER
13:32:30 146  ) AS
13:32:30 147  -- VARIABLES
13:32:30 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
13:32:30 149  temp_transaction_id NUMBER;
13:32:30 150  
13:32:30 151  -- EXCEPTIONS
13:32:30 152  BAD_TRANSACTION_ID     EXCEPTION;
13:32:30 153  BAD_TRANSACTION_STATUS EXCEPTION;
13:32:30 154  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 155  BEGIN
13:32:30 156  
13:32:30 157  	-- Check that transaction exists
13:32:30 158  	BEGIN
13:32:30 159  	  SELECT
13:32:30 160  	    TRANSACTION.ID into temp_transaction_id
13:32:30 161  	  FROM
13:32:30 162  	    TRANSACTION
13:32:30 163  	  WHERE
13:32:30 164  	    TRANSACTION.ID = in_transaction_id;
13:32:30 165  	  EXCEPTION
13:32:30 166  	    WHEN OTHERS THEN
13:32:30 167  	      RAISE BAD_TRANSACTION_ID;
13:32:30 168  	END;
13:32:30 169  
13:32:30 170  	-- Check that transaction status is correct
13:32:30 171  	IF    in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_PENDING
13:32:30 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
13:32:30 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_CHARGEBACK
13:32:30 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_DECLINED THEN
13:32:30 175  	  RAISE BAD_TRANSACTION_STATUS;
13:32:30 176  	END IF;
13:32:30 177  
13:32:30 178  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
13:32:30 179  	  in_transaction_id	   => in_transaction_id,
13:32:30 180  	  in_updated_by 	   => in_updated_by,
13:32:30 181  	  in_transaction_status_id => in_transaction_status_id
13:32:30 182  	);
13:32:30 183  
13:32:30 184  EXCEPTION
13:32:30 185  WHEN BAD_TRANSACTION_ID THEN
13:32:30 186  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 187  	  SPROC_NAME, 'No such transaction');
13:32:30 188  WHEN BAD_TRANSACTION_STATUS THEN
13:32:30 189  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 190  	  SPROC_NAME, 'Bad transaction status');
13:32:30 191  WHEN OTHERS THEN
13:32:30 192  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 193  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 194  END UPDATE_TRANSACTION_STATUS;
13:32:30 195  
13:32:30 196  /******************************************************************************/
13:32:30 197  
13:32:30 198  PROCEDURE UPDATE_TRANSACTION_SETTLED (
13:32:30 199  /*
13:32:30 200  Throws exceptions:
13:32:30 201  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 202  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 203  */
13:32:30 204  	in_transaction_id	 IN NUMBER,
13:32:30 205  	in_updated_by		 IN VARCHAR2,
13:32:30 206  	in_is_settled		 IN NUMBER
13:32:30 207  ) AS
13:32:30 208  -- VARIABLES
13:32:30 209  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
13:32:30 210  temp_transaction_id NUMBER;
13:32:30 211  
13:32:30 212  -- EXCEPTIONS
13:32:30 213  BAD_TRANSACTION_ID     EXCEPTION;
13:32:30 214  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 215  BEGIN
13:32:30 216  
13:32:30 217  	-- Check that transaction exists
13:32:30 218  	BEGIN
13:32:30 219  	  SELECT
13:32:30 220  	    TRANSACTION.ID into temp_transaction_id
13:32:30 221  	  FROM
13:32:30 222  	    TRANSACTION
13:32:30 223  	  WHERE
13:32:30 224  	    TRANSACTION.ID = in_transaction_id;
13:32:30 225  	  EXCEPTION
13:32:30 226  	    WHEN OTHERS THEN
13:32:30 227  	      RAISE BAD_TRANSACTION_ID;
13:32:30 228  	END;
13:32:30 229  
13:32:30 230  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
13:32:30 231  	  in_transaction_id	   => in_transaction_id,
13:32:30 232  	  in_updated_by 	   => in_updated_by,
13:32:30 233  	  in_is_settled 	   => in_is_settled
13:32:30 234  	);
13:32:30 235  
13:32:30 236  EXCEPTION
13:32:30 237  WHEN BAD_TRANSACTION_ID THEN
13:32:30 238  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 239  	  SPROC_NAME, 'No such transaction');
13:32:30 240  WHEN OTHERS THEN
13:32:30 241  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 242  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 243  END UPDATE_TRANSACTION_SETTLED;
13:32:30 244  
13:32:30 245  /******************************************************************************/
13:32:30 246  
13:32:30 247  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
13:32:30 248  /*
13:32:30 249  Throws exceptions:
13:32:30 250  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 251  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 252  */
13:32:30 253  	in_transaction_attempt_id IN NUMBER,
13:32:30 254  	in_updated_by		  IN VARCHAR2
13:32:30 255  ) AS
13:32:30 256  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
13:32:30 257  -- VARIABLES
13:32:30 258  var_transaction_id NUMBER;
13:32:30 259  -- EXCEPTION
13:32:30 260  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
13:32:30 261  BEGIN
13:32:30 262  
13:32:30 263  	BEGIN
13:32:30 264  	  SELECT
13:32:30 265  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
13:32:30 266  	  FROM
13:32:30 267  	    TRANSACTION_ATTEMPT
13:32:30 268  	  WHERE
13:32:30 269  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
13:32:30 270  	  EXCEPTION
13:32:30 271  	    WHEN NO_DATA_FOUND THEN
13:32:30 272  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
13:32:30 273  	END;
13:32:30 274  
13:32:30 275  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
13:32:30 276  	  in_transaction_id => var_transaction_id,
13:32:30 277  	  in_updated_by     => in_updated_by
13:32:30 278  	);
13:32:30 279  
13:32:30 280  EXCEPTION
13:32:30 281  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
13:32:30 282  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 283  	  SPROC_NAME, 'No such transaction attempt');
13:32:30 284  WHEN OTHERS THEN
13:32:30 285  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 286  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 287  END UPDATE_TRNSCTN_ATTEMPT_TIME;
13:32:30 288  
13:32:30 289  /******************************************************************************/
13:32:30 290  
13:32:30 291  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
13:32:30 292  /*
13:32:30 293  Throws exceptions:
13:32:30 294  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 295  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 296  */
13:32:30 297  	in_transaction_attempt_id     IN NUMBER,
13:32:30 298  	in_transaction_attempt_status IN NUMBER
13:32:30 299  ) AS
13:32:30 300  -- VARIABLES
13:32:30 301  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
13:32:30 302  temp_transaction_attempt_id NUMBER;
13:32:30 303  
13:32:30 304  -- EXCEPTION
13:32:30 305  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
13:32:30 306  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
13:32:30 307  BEGIN
13:32:30 308  
13:32:30 309  	-- Check that transaction attempt exists
13:32:30 310  	BEGIN
13:32:30 311  	  SELECT
13:32:30 312  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
13:32:30 313  	  FROM
13:32:30 314  	    TRANSACTION_ATTEMPT
13:32:30 315  	  WHERE
13:32:30 316  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
13:32:30 317  	  EXCEPTION
13:32:30 318  	    WHEN NO_DATA_FOUND THEN
13:32:30 319  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
13:32:30 320  	END;
13:32:30 321  
13:32:30 322  	-- Check that transaction attempt is correct
13:32:30 323  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
13:32:30 324  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30 325  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
13:32:30 326  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
13:32:30 327  	END IF;
13:32:30 328  
13:32:30 329  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ATTEMPT(
13:32:30 330  	  in_transaction_attempt_id => in_transaction_attempt_id,
13:32:30 331  	  in_status_id		    => in_transaction_attempt_status
13:32:30 332  	);
13:32:30 333  
13:32:30 334  EXCEPTION
13:32:30 335  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
13:32:30 336  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 337  	  SPROC_NAME, 'No such transaction attempt');
13:32:30 338  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
13:32:30 339  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 340  	  SPROC_NAME, 'Bad transaction attempt status');
13:32:30 341  WHEN OTHERS THEN
13:32:30 342  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 343  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 344  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
13:32:30 345  
13:32:30 346  /******************************************************************************/
13:32:30 347  
13:32:30 348  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
13:32:30 349  /*
13:32:30 350  Throws exceptions:
13:32:30 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 352  */
13:32:30 353  	in_transaction_id	      IN NUMBER,
13:32:30 354  	in_transaction_attempt_status IN NUMBER,
13:32:30 355  	out_result_set		      OUT SYS_REFCURSOR
13:32:30 356  ) AS
13:32:30 357  -- VARIABLES
13:32:30 358  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
13:32:30 359  temp_transaction_id NUMBER;
13:32:30 360  -- EXCEPTIONS
13:32:30 361  BAD_TRANSACTION_ID       EXCEPTION;
13:32:30 362  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
13:32:30 363  BEGIN
13:32:30 364  
13:32:30 365  	-- Check that transaction exists
13:32:30 366  	BEGIN
13:32:30 367  	  SELECT
13:32:30 368  	    TRANSACTION.ID into temp_transaction_id
13:32:30 369  	  FROM
13:32:30 370  	    TRANSACTION
13:32:30 371  	  WHERE
13:32:30 372  	    TRANSACTION.ID = in_transaction_id;
13:32:30 373  	  EXCEPTION
13:32:30 374  	    WHEN OTHERS THEN
13:32:30 375  	      RAISE BAD_TRANSACTION_ID;
13:32:30 376  	END;
13:32:30 377  
13:32:30 378  	-- Check that transaction attempt status is correct
13:32:30 379  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
13:32:30 380  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30 381  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
13:32:30 382  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
13:32:30 383  	END IF;
13:32:30 384  
13:32:30 385  	OPEN out_result_set FOR
13:32:30 386  	SELECT
13:32:30 387  	  TRANSACTION_ATTEMPT.ID,
13:32:30 388  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
13:32:30 389  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
13:32:30 390  	  TRANSACTION_ATTEMPT.CREATE_DATE,
13:32:30 391  	  TRANSACTION_ATTEMPT.CREATED_BY,
13:32:30 392  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
13:32:30 393  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
13:32:30 394  	  TRANSACTION.TRANSACTION_AMOUNT,
13:32:30 395  	  TRANSACTION.ID as "TRANSACTION_ID",
13:32:30 396  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
13:32:30 397  	FROM
13:32:30 398  	  TRANSACTION_ATTEMPT
13:32:30 399  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
13:32:30 400  	WHERE
13:32:30 401  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
13:32:30 402  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
13:32:30 403  
13:32:30 404  EXCEPTION
13:32:30 405  WHEN BAD_TRANSACTION_ID THEN
13:32:30 406  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 407  	  SPROC_NAME, 'No such transaction');
13:32:30 408  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
13:32:30 409  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 410  	  SPROC_NAME, 'Bad transaction attempt status');
13:32:30 411  WHEN OTHERS THEN
13:32:30 412  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 413  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 414  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
13:32:30 415  
13:32:30 416  /******************************************************************************/
13:32:30 417  
13:32:30 418  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
13:32:30 419  /*
13:32:30 420  Throws exceptions:
13:32:30 421  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 422  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 423  */
13:32:30 424  	in_transaction_attempt_id IN NUMBER,
13:32:30 425  	in_ext_status_code	  IN VARCHAR2,
13:32:30 426  	in_ext_status_message	  IN VARCHAR2,
13:32:30 427  	in_ext_transaction_id	  IN VARCHAR2
13:32:30 428  ) AS
13:32:30 429  -- VARIABLES
13:32:30 430  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
13:32:30 431  temp_trans_attempt_count NUMBER;
13:32:30 432  -- EXCEPTIONS
13:32:30 433  BAD_ATTEMPT_ID EXCEPTION;
13:32:30 434  BEGIN
13:32:30 435  
13:32:30 436  	SELECT
13:32:30 437  	  COUNT(*) into temp_trans_attempt_count
13:32:30 438  	FROM
13:32:30 439  	  TRANSACTION_ATTEMPT
13:32:30 440  	WHERE
13:32:30 441  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
13:32:30 442  
13:32:30 443  	IF temp_trans_attempt_count = 0 THEN
13:32:30 444  	  RAISE BAD_ATTEMPT_ID;
13:32:30 445  	END IF;
13:32:30 446  
13:32:30 447  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ATTEMPT(
13:32:30 448  	  in_transaction_attempt_id  => in_transaction_attempt_id,
13:32:30 449  	  in_external_status_code    => in_ext_status_code,
13:32:30 450  	  in_external_status_message => in_ext_status_message,
13:32:30 451  	  in_external_transaction_id => in_ext_transaction_id
13:32:30 452  	);
13:32:30 453  
13:32:30 454  EXCEPTION
13:32:30 455  WHEN BAD_ATTEMPT_ID THEN
13:32:30 456  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 457  	  SPROC_NAME, 'No such attempt');
13:32:30 458  WHEN OTHERS THEN
13:32:30 459  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 460  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 461  END UPDATE_TRANSACTION_ATTEMPT_INF;
13:32:30 462  
13:32:30 463  /******************************************************************************/
13:32:30 464  
13:32:30 465  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
13:32:30 466  /*
13:32:30 467  Throws exceptions:
13:32:30 468  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 469  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 470  */
13:32:30 471  	in_transaction_id IN  NUMBER,
13:32:30 472  	out_attempts_num  OUT NUMBER
13:32:30 473  ) AS
13:32:30 474  -- VARIABLES
13:32:30 475  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
13:32:30 476  temp_transaction_count NUMBER;
13:32:30 477  
13:32:30 478  -- EXCEPTIONS
13:32:30 479  BAD_TRANSACTION_ID EXCEPTION;
13:32:30 480  BEGIN
13:32:30 481  
13:32:30 482  	SELECT
13:32:30 483  	  COUNT(*) into temp_transaction_count
13:32:30 484  	FROM
13:32:30 485  	  TRANSACTION
13:32:30 486  	WHERE
13:32:30 487  	  TRANSACTION.ID = in_transaction_id;
13:32:30 488  
13:32:30 489  	IF temp_transaction_count = 0 THEN
13:32:30 490  	  RAISE BAD_TRANSACTION_ID;
13:32:30 491  	END IF;
13:32:30 492  
13:32:30 493  	SELECT
13:32:30 494  	  COUNT(*) into out_attempts_num
13:32:30 495  	FROM
13:32:30 496  	  TRANSACTION_ATTEMPT
13:32:30 497  	WHERE
13:32:30 498  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
13:32:30 499  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED;
13:32:30 500  
13:32:30 501  EXCEPTION
13:32:30 502  WHEN BAD_TRANSACTION_ID THEN
13:32:30 503  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 504  	  SPROC_NAME, 'No such transaction');
13:32:30 505  WHEN OTHERS THEN
13:32:30 506  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 507  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 508  END GET_FAILED_ATTEMPTS_NUMBER;
13:32:30 509  /******************************************************************************/
13:32:30 510  
13:32:30 511  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
13:32:30 512  /*
13:32:30 513  Throws exceptions:
13:32:30 514  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 515  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 516  */
13:32:30 517  	in_transaction_id IN  NUMBER,
13:32:30 518  	out_is_successfull  OUT NUMBER
13:32:30 519  ) AS
13:32:30 520  -- VARIABLES
13:32:30 521  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
13:32:30 522  temp_transaction_count NUMBER;
13:32:30 523  
13:32:30 524  -- EXCEPTIONS
13:32:30 525  BAD_TRANSACTION_ID EXCEPTION;
13:32:30 526  BEGIN
13:32:30 527  
13:32:30 528  	SELECT
13:32:30 529  	  COUNT(*) into temp_transaction_count
13:32:30 530  	FROM
13:32:30 531  	  TRANSACTION
13:32:30 532  	WHERE
13:32:30 533  	  TRANSACTION.ID = in_transaction_id;
13:32:30 534  
13:32:30 535  	IF temp_transaction_count = 0 THEN
13:32:30 536  	  RAISE BAD_TRANSACTION_ID;
13:32:30 537  	END IF;
13:32:30 538  
13:32:30 539  	SELECT
13:32:30 540  	  COUNT(*) into out_is_successfull
13:32:30 541  	FROM
13:32:30 542  	  TRANSACTION_ATTEMPT
13:32:30 543  	WHERE
13:32:30 544  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
13:32:30 545  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS;
13:32:30 546  
13:32:30 547  EXCEPTION
13:32:30 548  WHEN BAD_TRANSACTION_ID THEN
13:32:30 549  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 550  	  SPROC_NAME, 'No such transaction');
13:32:30 551  WHEN OTHERS THEN
13:32:30 552  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 553  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 554  END IS_TRANSACTION_SUCCESSFULL;
13:32:30 555  /******************************************************************************/
13:32:30 556  
13:32:30 557  PROCEDURE GET_TRANSACTION_AMOUNT (
13:32:30 558  /*
13:32:30 559  Throws exceptions:
13:32:30 560  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 561  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 562  */
13:32:30 563  	in_transaction_id      IN  NUMBER,
13:32:30 564  	out_transaction_amount OUT NUMBER
13:32:30 565  ) AS
13:32:30 566  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
13:32:30 567  BEGIN
13:32:30 568  
13:32:30 569  	SELECT
13:32:30 570  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
13:32:30 571  	FROM
13:32:30 572  	  TRANSACTION
13:32:30 573  	WHERE
13:32:30 574  	  TRANSACTION.ID = in_transaction_id;
13:32:30 575  
13:32:30 576  EXCEPTION
13:32:30 577  WHEN NO_DATA_FOUND THEN
13:32:30 578  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 579  	  SPROC_NAME, 'No such transaction');
13:32:30 580  WHEN OTHERS THEN
13:32:30 581  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 582  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 583  END GET_TRANSACTION_AMOUNT;
13:32:30 584  
13:32:30 585  /******************************************************************************/
13:32:30 586  
13:32:30 587  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
13:32:30 588  /*
13:32:30 589  Throws exceptions:
13:32:30 590  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 591  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 592  */
13:32:30 593  	in_charge_id   IN  NUMBER,
13:32:30 594  	out_result_set OUT SYS_REFCURSOR
13:32:30 595  ) AS
13:32:30 596  -- VARIABLES
13:32:30 597  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
13:32:30 598  temp_charge_id NUMBER;
13:32:30 599  -- EXCEPTIONS
13:32:30 600  BAD_CHARGE_ID EXCEPTION;
13:32:30 601  BEGIN
13:32:30 602  
13:32:30 603  	BEGIN
13:32:30 604  	  SELECT
13:32:30 605  	    CHARGE.ID into temp_charge_id
13:32:30 606  	  FROM
13:32:30 607  	    CHARGE
13:32:30 608  	  WHERE
13:32:30 609  	    CHARGE.ID = in_charge_id;
13:32:30 610  	  EXCEPTION
13:32:30 611  	    WHEN NO_DATA_FOUND THEN
13:32:30 612  	      RAISE BAD_CHARGE_ID;
13:32:30 613  	END;
13:32:30 614  
13:32:30 615  	OPEN out_result_set FOR
13:32:30 616  	SELECT DISTINCT
13:32:30 617  	  TRANSACTION.ID,
13:32:30 618  	  TRANSACTION.TRANSACTION_STATUS_ID,
13:32:30 619  	  TRANSACTION.CREATE_DATE,
13:32:30 620  	  TRANSACTION.TRANSACTION_AMOUNT,
13:32:30 621  	  TRANSACTION.IS_REFUND,
13:32:30 622  	  TRANSACTION.ORDER_ID
13:32:30 623  	FROM
13:32:30 624  	  CHARGE INNER JOIN TRANSACTION ON
13:32:30 625  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 626  	WHERE
13:32:30 627  	  CHARGE.ID = in_charge_id;
13:32:30 628  
13:32:30 629  EXCEPTION
13:32:30 630  WHEN BAD_CHARGE_ID THEN
13:32:30 631  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 632  	  SPROC_NAME, 'No such charge');
13:32:30 633  WHEN OTHERS THEN
13:32:30 634  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 635  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 636  END GET_TRANSACTIONS_BY_CHARGE_ID;
13:32:30 637  /******************************************************************************/
13:32:30 638  
13:32:30 639  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
13:32:30 640  /*
13:32:30 641  Throws exceptions:
13:32:30 642  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 643  */
13:32:30 644  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
13:32:30 645  	out_result_set OUT SYS_REFCURSOR
13:32:30 646  ) AS
13:32:30 647  -- VARIABLES
13:32:30 648  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
13:32:30 649  BEGIN
13:32:30 650  	OPEN out_result_set FOR
13:32:30 651  	SELECT DISTINCT
13:32:30 652  	  TRANSACTION.ID
13:32:30 653  	FROM
13:32:30 654  	  TRANSACTION
13:32:30 655  	WHERE
13:32:30 656  	  TRANSACTION.ORDER_ID = in_order_id;
13:32:30 657  
13:32:30 658  EXCEPTION
13:32:30 659  WHEN OTHERS THEN
13:32:30 660  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 661  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 662  END GET_TRANSACTION_BY_ORDER_ID;
13:32:30 663  /******************************************************************************/
13:32:30 664  
13:32:30 665  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
13:32:30 666  /*
13:32:30 667  Throws exceptions:
13:32:30 668  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 669  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 670  */
13:32:30 671  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
13:32:30 672  	out_result_set OUT SYS_REFCURSOR
13:32:30 673  ) AS
13:32:30 674  -- VARIABLES
13:32:30 675  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
13:32:30 676  temp_order_id TRANSACTION.ORDER_ID%TYPE;
13:32:30 677  -- EXCEPTIONS
13:32:30 678  BAD_ORDER_ID EXCEPTION;
13:32:30 679  BEGIN
13:32:30 680  
13:32:30 681  	--TODO BOO, REMOVE ME
13:32:30 682  	BEGIN
13:32:30 683  	  SELECT
13:32:30 684  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
13:32:30 685  	  FROM
13:32:30 686  	    TRANSACTION
13:32:30 687  	  WHERE
13:32:30 688  	    TRANSACTION.ORDER_ID = in_order_id;
13:32:30 689  	  EXCEPTION
13:32:30 690  	    WHEN NO_DATA_FOUND THEN
13:32:30 691  	      RAISE BAD_ORDER_ID;
13:32:30 692  	END;
13:32:30 693  
13:32:30 694  	OPEN out_result_set FOR
13:32:30 695  	SELECT c.ID CHARGE_ID,
13:32:30 696  	  c.CHARGE_AMOUNT,
13:32:30 697  	  c.CHARGE_STATUS_ID,
13:32:30 698  	  c.INSTRUMENT_ID,
13:32:30 699  	  c.INSTRUMENT_TYPE_ID,
13:32:30 700  	  c.INVOICE_ID,
13:32:30 701  	  t.ID TRANSACTION_ID,
13:32:30 702  	  t.IS_REFUND,
13:32:30 703  	  t.IS_SETTLED,
13:32:30 704  	  t.ORDER_ID,
13:32:30 705  	  t.TRANSACTION_AMOUNT,
13:32:30 706  	  t.TRANSACTION_STATUS_ID,
13:32:30 707  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
13:32:30 708  	  t.CREATED_BY TRANSACTION_CREATED_BY,
13:32:30 709  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
13:32:30 710  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
13:32:30 711  	FROM CHARGE c
13:32:30 712  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
13:32:30 713  	WHERE TRANSACTION_ID IN (
13:32:30 714  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
13:32:30 715  	);
13:32:30 716  
13:32:30 717  EXCEPTION
13:32:30 718  WHEN BAD_ORDER_ID THEN
13:32:30 719  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 720  	  SPROC_NAME, 'No such order');
13:32:30 721  WHEN OTHERS THEN
13:32:30 722  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 723  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 724  END GET_TRANSACTIONS_BY_ORDER_ID;
13:32:30 725  /******************************************************************************/
13:32:30 726  
13:32:30 727  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
13:32:30 728  /*
13:32:30 729  Throws exceptions:
13:32:30 730  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 731  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 732  */
13:32:30 733  	in_invoice_id	IN  NUMBER,
13:32:30 734  	out_result_set OUT SYS_REFCURSOR
13:32:30 735  ) AS
13:32:30 736  -- VARIABLES
13:32:30 737  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
13:32:30 738  temp_invoice_id NUMBER;
13:32:30 739  -- EXCEPTIONS
13:32:30 740  BAD_INVOICE_ID EXCEPTION;
13:32:30 741  BEGIN
13:32:30 742  
13:32:30 743  	BEGIN
13:32:30 744  	  SELECT
13:32:30 745  	    INVOICE.ID into temp_invoice_id
13:32:30 746  	  FROM
13:32:30 747  	    INVOICE
13:32:30 748  	  WHERE
13:32:30 749  	    INVOICE.ID = in_invoice_id;
13:32:30 750  	  EXCEPTION
13:32:30 751  	    WHEN NO_DATA_FOUND THEN
13:32:30 752  	      RAISE BAD_INVOICE_ID;
13:32:30 753  	END;
13:32:30 754  
13:32:30 755  	OPEN out_result_set FOR
13:32:30 756  	SELECT DISTINCT
13:32:30 757  	  TRANSACTION.ID,
13:32:30 758  	  TRANSACTION.TRANSACTION_STATUS_ID,
13:32:30 759  	  TRANSACTION.CREATE_DATE,
13:32:30 760  	  TRANSACTION.UPDATE_DATE,
13:32:30 761  	  TRANSACTION.ORDER_ID,
13:32:30 762  	  TRANSACTION.TRANSACTION_AMOUNT
13:32:30 763  	FROM
13:32:30 764  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
13:32:30 765  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
13:32:30 766  	WHERE
13:32:30 767  	  INVOICE.ID = in_invoice_id
13:32:30 768  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 769  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
13:32:30 770  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_CLOSED;
13:32:30 771  
13:32:30 772  EXCEPTION
13:32:30 773  WHEN BAD_INVOICE_ID THEN
13:32:30 774  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 775  	  SPROC_NAME, 'No such invoice');
13:32:30 776  WHEN OTHERS THEN
13:32:30 777  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 778  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 779  END GET_CLOSED_REFUNDS_BY_INVOICE;
13:32:30 780  
13:32:30 781  /******************************************************************************/
13:32:30 782  
13:32:30 783  PROCEDURE GET_TRANSACTION_ATTEMPTS (
13:32:30 784  /*
13:32:30 785  Throws exceptions:
13:32:30 786  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 787  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 788  */
13:32:30 789  	in_transaction_id IN  NUMBER,
13:32:30 790  	out_result_set	  OUT SYS_REFCURSOR
13:32:30 791  ) AS
13:32:30 792  -- VARIABLES
13:32:30 793  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
13:32:30 794  temp_transaction_id NUMBER;
13:32:30 795  -- EXCEPTIONS
13:32:30 796  BAD_TRANSACTION_ID EXCEPTION;
13:32:30 797  BEGIN
13:32:30 798  
13:32:30 799  	BEGIN
13:32:30 800  	  SELECT
13:32:30 801  	    TRANSACTION.ID into temp_transaction_id
13:32:30 802  	  FROM
13:32:30 803  	    TRANSACTION
13:32:30 804  	  WHERE
13:32:30 805  	    TRANSACTION.ID = in_transaction_id;
13:32:30 806  	  EXCEPTION
13:32:30 807  	    WHEN NO_DATA_FOUND THEN
13:32:30 808  	      RAISE BAD_TRANSACTION_ID;
13:32:30 809  	END;
13:32:30 810  
13:32:30 811  	OPEN out_result_set FOR
13:32:30 812  	SELECT
13:32:30 813  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
13:32:30 814  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
13:32:30 815  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
13:32:30 816  	  TRANSACTION_ATTEMPT.CREATE_DATE,
13:32:30 817  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
13:32:30 818  	FROM
13:32:30 819  	  TRANSACTION_ATTEMPT
13:32:30 820  	WHERE
13:32:30 821  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
13:32:30 822  
13:32:30 823  EXCEPTION
13:32:30 824  WHEN BAD_TRANSACTION_ID THEN
13:32:30 825  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 826  	  SPROC_NAME, 'No such transaction');
13:32:30 827  WHEN OTHERS THEN
13:32:30 828  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 830  END GET_TRANSACTION_ATTEMPTS;
13:32:30 831  
13:32:30 832  /******************************************************************************/
13:32:30 833  
13:32:30 834  PROCEDURE RESERVE_TRANSACTION_ID (
13:32:30 835  /*
13:32:30 836  Throws exceptions:
13:32:30 837  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 838  */
13:32:30 839  	out_transaction_id OUT NUMBER
13:32:30 840  ) AS
13:32:30 841  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
13:32:30 842  BEGIN
13:32:30 843  	SELECT
13:32:30 844  	  TRN_ID_SEQ.nextVal into out_transaction_id
13:32:30 845  	FROM DUAL;
13:32:30 846  EXCEPTION
13:32:30 847  WHEN OTHERS THEN
13:32:30 848  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 849  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 850  END RESERVE_TRANSACTION_ID;
13:32:30 851  
13:32:30 852  /******************************************************************************/
13:32:30 853  
13:32:30 854  PROCEDURE GET_TRANSACTION_BY_ID (
13:32:30 855  /*
13:32:30 856  Throws exceptions:
13:32:30 857  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 858  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 859  */
13:32:30 860  	in_transaction_id IN NUMBER,
13:32:30 861  	out_result_set	  OUT SYS_REFCURSOR
13:32:30 862  ) AS
13:32:30 863  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
13:32:30 864  -- VARIABLES
13:32:30 865  temp_transaction_id NUMBER;
13:32:30 866  -- EXCPTIONS
13:32:30 867  BAD_TRANSACTION_ID EXCEPTION;
13:32:30 868  BEGIN
13:32:30 869  	BEGIN
13:32:30 870  	  SELECT
13:32:30 871  	    TRANSACTION.ID into temp_transaction_id
13:32:30 872  	  FROM
13:32:30 873  	    TRANSACTION
13:32:30 874  	  WHERE
13:32:30 875  	    TRANSACTION.ID = in_transaction_id;
13:32:30 876  	  EXCEPTION
13:32:30 877  	    WHEN NO_DATA_FOUND THEN
13:32:30 878  	      RAISE BAD_TRANSACTION_ID;
13:32:30 879  	END;
13:32:30 880  
13:32:30 881  	PROCS_TRANSACTION_CRU_V20.READ_TRANSACTION(
13:32:30 882  	  in_transaction_id => in_transaction_id,
13:32:30 883  	  out_result_set    => out_result_set
13:32:30 884  	);
13:32:30 885  
13:32:30 886  EXCEPTION
13:32:30 887  WHEN NO_DATA_FOUND THEN
13:32:30 888  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 889  	  SPROC_NAME, 'No such transaction');
13:32:30 890  WHEN OTHERS THEN
13:32:30 891  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 892  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 893  END GET_TRANSACTION_BY_ID;
13:32:30 894  
13:32:30 895  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:30 896  /*
13:32:30 897  Throws exceptions:
13:32:30 898  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 899  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:30 900  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 901  */
13:32:30 902  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:30 903  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:30 904  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:30 905  ) AS
13:32:30 906  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
13:32:30 907  -- VARIABLES
13:32:30 908  temp_transaction_id TRANSACTION.ID%TYPE;
13:32:30 909  -- EXCEPTIONS
13:32:30 910  BAD_TRANSACTION_ID   EXCEPTION;
13:32:30 911  ORDER_ID_IS_NOT_NULL EXCEPTION;
13:32:30 912  CRU_UNKNOWN_ERROR    EXCEPTION;
13:32:30 913  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 914  BEGIN
13:32:30 915  	BEGIN
13:32:30 916  	  SELECT
13:32:30 917  	    TRANSACTION.ID into temp_transaction_id
13:32:30 918  	  FROM
13:32:30 919  	    TRANSACTION
13:32:30 920  	  WHERE
13:32:30 921  	    TRANSACTION.ID = in_transaction_id;
13:32:30 922  	  EXCEPTION
13:32:30 923  	    WHEN NO_DATA_FOUND THEN
13:32:30 924  	      RAISE BAD_TRANSACTION_ID;
13:32:30 925  	END;
13:32:30 926  
13:32:30 927  	BEGIN
13:32:30 928  	  PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ORDER_ID(
13:32:30 929  	    in_transaction_id => in_transaction_id,
13:32:30 930  	    in_order_id       => in_order_id,
13:32:30 931  	    in_updated_by     => in_updated_by
13:32:30 932  	  );
13:32:30 933  	  EXCEPTION
13:32:30 934  	    WHEN OTHERS THEN
13:32:30 935  	      IF SQLCODE = APP_EXCEPTION_CODES_V20.NOT_FOUND THEN
13:32:30 936  		RAISE ORDER_ID_IS_NOT_NULL;
13:32:30 937  	      ELSE
13:32:30 938  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 939  		RAISE CRU_UNKNOWN_ERROR;
13:32:30 940  	      END IF;
13:32:30 941  	END;
13:32:30 942  
13:32:30 943  EXCEPTION
13:32:30 944  WHEN BAD_TRANSACTION_ID THEN
13:32:30 945  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 946  	  SPROC_NAME, 'No such transaction');
13:32:30 947  WHEN ORDER_ID_IS_NOT_NULL THEN
13:32:30 948  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 949  	  SPROC_NAME, 'Order id is not null');
13:32:30 950  WHEN CRU_UNKNOWN_ERROR THEN
13:32:30 951  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 952  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
13:32:30 953  WHEN OTHERS THEN
13:32:30 954  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 955  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 956  END UPDATE_TRANSACTION_ORDER_ID;
13:32:30 957  
13:32:30 958  /******************************************************************************/
13:32:30 959  
13:32:30 960  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
13:32:30 961  	in_transaction_id IN NUMBER
13:32:30 962  ) RETURN NUMBER AS
13:32:30 963  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
13:32:30 964  -- Variables
13:32:30 965  var_tax_amount NUMBER(10,2);
13:32:30 966  BEGIN
13:32:30 967  
13:32:30 968  	SELECT
13:32:30 969  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
13:32:30 970  	FROM
13:32:30 971  	  LINE_ITEM LI
13:32:30 972  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
13:32:30 973  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
13:32:30 974  	WHERE
13:32:30 975  	  CH.TRANSACTION_ID = in_transaction_id;
13:32:30 976  
13:32:30 977  	IF var_tax_amount IS NULL THEN
13:32:30 978  	  var_tax_amount := 0;
13:32:30 979  	END IF;
13:32:30 980  
13:32:30 981  	RETURN var_tax_amount;
13:32:30 982  
13:32:30 983  END GET_TRANSACTION_TAX_AMOUNT;
13:32:30 984  
13:32:30 985  /******************************************************************************/
13:32:30 986  
13:32:30 987  FUNCTION GET_TRANSACTION_INTRL_TAXES (
13:32:30 988  	in_transaction_id IN NUMBER
13:32:30 989  ) RETURN NUMBER AS
13:32:30 990  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
13:32:30 991  -- Variables
13:32:30 992  var_intrl_tax_amount NUMBER(10, 2);
13:32:30 993  BEGIN
13:32:30 994  
13:32:30 995  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
13:32:30 996  	FROM
13:32:30 997  	  LINE_ITEM LI
13:32:30 998  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
13:32:30 999  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
13:32:30 1000  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
13:32:30 1001  	 WHERE
13:32:30 1002  	   CH.TRANSACTION_ID = in_transaction_id
13:32:30 1003  	   AND T.TAX_TYPE_ID IN (
13:32:30 1004  	     SELECT GLOBAL_ENUMS_V20.TAX_TYPE_VAT FROM DUAL
13:32:30 1005  	   );
13:32:30 1006  
13:32:30 1007  	 IF var_intrl_tax_amount IS NULL THEN
13:32:30 1008  	   var_intrl_tax_amount := 0;
13:32:30 1009  	 END IF;
13:32:30 1010  
13:32:30 1011  	 RETURN var_intrl_tax_amount;
13:32:30 1012  
13:32:30 1013  END GET_TRANSACTION_INTRL_TAXES;
13:32:30 1014  
13:32:30 1015  /******************************************************************************/
13:32:30 1016  -- norlov: #38796
13:32:30 1017  PROCEDURE GET_TRANSACTIONS (
13:32:30 1018  /*
13:32:30 1019  Throws exceptions:
13:32:30 1020  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1021  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1022  */
13:32:30 1023  	 in_group_id	       IN  NUMBER,
13:32:30 1024  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
13:32:30 1025  	 in_subscription_id    IN NUMBER DEFAULT NULL,
13:32:30 1026  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
13:32:30 1027  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
13:32:30 1028  	 in_transaction_status IN NUMBER DEFAULT NULL,
13:32:30 1029  	 out_result_set        OUT SYS_REFCURSOR
13:32:30 1030  ) AS
13:32:30 1031  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
13:32:30 1032  -- VARIABLES
13:32:30 1033  var_account_id ACCOUNT.ID%TYPE;
13:32:30 1034  statement VARCHAR2(2000);
13:32:30 1035  -- EXCEPTIONS
13:32:30 1036  BAD_GROUP_ID   EXCEPTION;
13:32:30 1037  BEGIN
13:32:30 1038  	-- check group id
13:32:30 1039  	BEGIN
13:32:30 1040  	   SELECT
13:32:30 1041  	     ACCOUNT.ID into var_account_id
13:32:30 1042  	   FROM
13:32:30 1043  	     ACCOUNT
13:32:30 1044  	   WHERE
13:32:30 1045  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 1046  	   EXCEPTION
13:32:30 1047  	     WHEN NO_DATA_FOUND THEN
13:32:30 1048  	       RAISE BAD_GROUP_ID;
13:32:30 1049  	 END;
13:32:30 1050  
13:32:30 1051  	 OPEN out_result_set FOR
13:32:30 1052  	 SELECT
13:32:30 1053  	   TRANSACTION.ID,
13:32:30 1054  	   TRANSACTION.TRANSACTION_STATUS_ID,
13:32:30 1055  	   TRANSACTION.TRANSACTION_AMOUNT,
13:32:30 1056  	   TRANSACTION.CREATE_DATE,
13:32:30 1057  	   TRANSACTION.CREATED_BY,
13:32:30 1058  	   TRANSACTION.IS_REFUND,
13:32:30 1059  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
13:32:30 1060  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
13:32:30 1061  	 FROM
13:32:30 1062  	   TRANSACTION
13:32:30 1063  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
13:32:30 1064  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
13:32:30 1065  	 WHERE
13:32:30 1066  	   -- Filter by invoice ID
13:32:30 1067  	   (
13:32:30 1068  	     INVOICE.ID IN (
13:32:30 1069  	       -- Gift certificate invoices
13:32:30 1070  	       SELECT
13:32:30 1071  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
13:32:30 1072  	       FROM
13:32:30 1073  		 GIFT_CERTIFICATE
13:32:30 1074  	       WHERE
13:32:30 1075  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
13:32:30 1076  		 -- If subscription_id is set then return nothing
13:32:30 1077  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
13:32:30 1078  	     )
13:32:30 1079  	     OR
13:32:30 1080  	     INVOICE.ID IN (
13:32:30 1081  	       SELECT
13:32:30 1082  		 LICENSE.INVOICE_ID
13:32:30 1083  	       FROM
13:32:30 1084  		 LICENSE
13:32:30 1085  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 1086  	       WHERE
13:32:30 1087  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:30 1088  		 -- Filter by subscription id
13:32:30 1089  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
13:32:30 1090  	     )
13:32:30 1091  	   )
13:32:30 1092  	   -- Filter by invoice id
13:32:30 1093  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
13:32:30 1094  	   -- Filter by start date
13:32:30 1095  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
13:32:30 1096  	   -- Filter by end date
13:32:30 1097  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
13:32:30 1098  	   -- Filter by transaction status
13:32:30 1099  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
13:32:30 1100  
13:32:30 1101  /*
13:32:30 1102  
13:32:30 1103  statement :=  'select distinct '||CHR(10)
13:32:30 1104  || ' TRANSACTION.ID,'||CHR(10)
13:32:30 1105  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
13:32:30 1106  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
13:32:30 1107  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
13:32:30 1108  || ' TRANSACTION.CREATED_BY, '||CHR(10)
13:32:30 1109  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
13:32:30 1110  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
13:32:30 1111  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
13:32:30 1112  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
13:32:30 1113  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
13:32:30 1114  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
13:32:30 1115  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
13:32:30 1116  
13:32:30 1117  IF (in_transaction_status IS NOT NULL) THEN
13:32:30 1118  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
13:32:30 1119  END IF;
13:32:30 1120  
13:32:30 1121  IF (in_invoice_id IS NOT NULL) THEN
13:32:30 1122  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
13:32:30 1123  END IF;
13:32:30 1124  
13:32:30 1125  IF (in_subscription_id IS NOT NULL) THEN
13:32:30 1126  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
13:32:30 1127  END IF;
13:32:30 1128  
13:32:30 1129  IF (in_start_date IS NOT NULL) THEN
13:32:30 1130  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
13:32:30 1131  END IF;
13:32:30 1132  
13:32:30 1133  IF (in_end_date IS NOT NULL) THEN
13:32:30 1134  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
13:32:30 1135  END IF;
13:32:30 1136  dbms_output.put_line(statement);
13:32:30 1137  OPEN out_result_set FOR statement;
13:32:30 1138  
13:32:30 1139  */
13:32:30 1140  
13:32:30 1141  EXCEPTION
13:32:30 1142  WHEN BAD_GROUP_ID THEN
13:32:30 1143  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1144  	   SPROC_NAME, 'No such group');
13:32:30 1145  WHEN OTHERS THEN
13:32:30 1146  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1147  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1148  END GET_TRANSACTIONS;
13:32:30 1149  
13:32:30 1150  FUNCTION IS_TRANSACTION_COLLECTED (
13:32:30 1151  /*
13:32:30 1152  Throws:
13:32:30 1153  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1154  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1155  Returns:
13:32:30 1156  GLOBAL_CONST.TRUE if transaction collected,
13:32:30 1157  GLOBAL_CONST.FALSE else
13:32:30 1158  */
13:32:30 1159  	 in_transaction_id IN NUMBER
13:32:30 1160  ) RETURN NUMBER AS
13:32:30 1161  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
13:32:30 1162  -- VARIABLES
13:32:30 1163  temp_transaction_id     NUMBER;
13:32:30 1164  var_success_attemps_num NUMBER;
13:32:30 1165  -- EXCEPTIONS
13:32:30 1166  BAD_TRANSACTION_ID EXCEPTION;
13:32:30 1167  BEGIN
13:32:30 1168  
13:32:30 1169  	 BEGIN
13:32:30 1170  	   SELECT
13:32:30 1171  	     TRANSACTION.ID into temp_transaction_id
13:32:30 1172  	   FROM
13:32:30 1173  	     TRANSACTION
13:32:30 1174  	   WHERE
13:32:30 1175  	     TRANSACTION.ID = in_transaction_id;
13:32:30 1176  	   EXCEPTION
13:32:30 1177  	     WHEN NO_DATA_FOUND THEN
13:32:30 1178  	       RAISE BAD_TRANSACTION_ID;
13:32:30 1179  	 END;
13:32:30 1180  
13:32:30 1181  	 SELECT
13:32:30 1182  	   COUNT(*) into var_success_attemps_num
13:32:30 1183  	 FROM
13:32:30 1184  	   TRANSACTION_ATTEMPT
13:32:30 1185  	 WHERE
13:32:30 1186  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
13:32:30 1187  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS FROM DUAL );
13:32:30 1188  
13:32:30 1189  	 IF var_success_attemps_num > 0 THEN
13:32:30 1190  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 1191  	 ELSE
13:32:30 1192  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 1193  	 END IF;
13:32:30 1194  
13:32:30 1195  EXCEPTION
13:32:30 1196  WHEN BAD_TRANSACTION_ID THEN
13:32:30 1197  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1198  	   SPROC_NAME, 'No such transaction');
13:32:30 1199  WHEN OTHERS THEN
13:32:30 1200  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1201  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1202  END IS_TRANSACTION_COLLECTED;
13:32:30 1203  
13:32:30 1204  
13:32:30 1205  /******************************************************************************/
13:32:30 1206  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
13:32:30 1207  /*
13:32:30 1208  Throws exceptions:
13:32:30 1209  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1210  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1211  */
13:32:30 1212  	 in_charge_id	in  number,
13:32:30 1213  	 out_attempt_count OUT NUMBER
13:32:30 1214  ) AS
13:32:30 1215  -- VARIABLES
13:32:30 1216  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
13:32:30 1217  temp_transaction_id NUMBER;
13:32:30 1218  -- EXCEPTIONS
13:32:30 1219  BAD_CHARGE_ID EXCEPTION;
13:32:30 1220  BEGIN
13:32:30 1221  
13:32:30 1222  	 BEGIN
13:32:30 1223  	   SELECT
13:32:30 1224  	     TRANSACTION_ID into temp_transaction_id
13:32:30 1225  	   FROM
13:32:30 1226  	     CHARGE
13:32:30 1227  	   WHERE
13:32:30 1228  	     CHARGE.ID = in_charge_id;
13:32:30 1229  	   EXCEPTION
13:32:30 1230  	     WHEN NO_DATA_FOUND THEN
13:32:30 1231  	       RAISE BAD_CHARGE_ID;
13:32:30 1232  	 END;
13:32:30 1233  
13:32:30 1234  	 select
13:32:30 1235  	   count(1)
13:32:30 1236  	 into
13:32:30 1237  	   out_attempt_count
13:32:30 1238  	 from
13:32:30 1239  	   transaction tr
13:32:30 1240  	 inner join
13:32:30 1241  	   transaction_attempt ta
13:32:30 1242  	 on (tr.id = ta.transaction_id)
13:32:30 1243  	 where
13:32:30 1244  	   tr.ID = temp_transaction_id;
13:32:30 1245  
13:32:30 1246  	 out_attempt_count := out_attempt_count + 1;
13:32:30 1247  
13:32:30 1248  EXCEPTION
13:32:30 1249  WHEN BAD_CHARGE_ID THEN
13:32:30 1250  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1251  	   SPROC_NAME, 'No such charge');
13:32:30 1252  WHEN OTHERS THEN
13:32:30 1253  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1254  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1255  end GET_NEXT_ATTEMPT_NUMBER;
13:32:30 1256  /******************************************************************************/
13:32:30 1257  
13:32:30 1258  END PROCS_TRANSACTION_V20;
13:32:30 1259  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.08
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE CREATE_LICENSE(
13:32:30   4  /*
13:32:30   5  Throws exceptions:
13:32:30   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30   8  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30   9  */
13:32:30  10  	in_status_id		    IN NUMBER,
13:32:30  11  	in_needs_entitlements	    IN NUMBER,
13:32:30  12  	in_start_date		    IN DATE,
13:32:30  13  	in_end_date		    IN DATE,
13:32:30  14  	in_offer_id		    IN NUMBER,
13:32:30  15  	in_subscription_id	    IN NUMBER,
13:32:30  16  	in_invoice_id		    IN NUMBER,
13:32:30  17  	in_created_by		    IN VARCHAR2,
13:32:30  18  	in_is_extension 	    IN NUMBER,
13:32:30  19  	in_current_offer_index	    IN NUMBER,
13:32:30  20  	in_current_offer_recurr_num IN NUMBER,
13:32:30  21  	out_license_id		    OUT NUMBER
13:32:30  22  ) AS
13:32:30  23  -- VARIABLES
13:32:30  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
13:32:30  25  temp_offer_id	   NUMBER;
13:32:30  26  temp_subscription_id NUMBER;
13:32:30  27  temp_invoice_id	   NUMBER;
13:32:30  28  
13:32:30  29  var_new_license_id NUMBER;
13:32:30  30  var_offer_duration VARCHAR2(30);
13:32:30  31  
13:32:30  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
13:32:30  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
13:32:30  34  var_offer_years	    NUMBER;
13:32:30  35  var_offer_months	    NUMBER;
13:32:30  36  var_offer_days	    NUMBER;
13:32:30  37  
13:32:30  38  -- EXCEPTIONS
13:32:30  39  BAD_OFFER_ID	     EXCEPTION;
13:32:30  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
13:32:30  41  BAD_INVOICE_ID	     EXCEPTION;
13:32:30  42  BAD_OFFER_DURATION     EXCEPTION;
13:32:30  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30  44  BEGIN
13:32:30  45  
13:32:30  46  	-- TODO:
13:32:30  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
13:32:30  48  
13:32:30  49  	out_license_id := NULL;
13:32:30  50  
13:32:30  51  	-- get offer id and offer entitlement duration
13:32:30  52  	BEGIN
13:32:30  53  	  SELECT
13:32:30  54  	    OFFER.ID,
13:32:30  55  	    OFFER.ENTITLEMENT_DURATION
13:32:30  56  	    into
13:32:30  57  	    temp_offer_id,
13:32:30  58  	    var_offer_duration
13:32:30  59  	  FROM
13:32:30  60  	    OFFER
13:32:30  61  	  WHERE
13:32:30  62  	    OFFER.ID = in_offer_id;
13:32:30  63  	  EXCEPTION
13:32:30  64  	  WHEN NO_DATA_FOUND THEN
13:32:30  65  	    RAISE BAD_OFFER_ID;
13:32:30  66  	END;
13:32:30  67  
13:32:30  68  	-- Check that subscription exists
13:32:30  69  	BEGIN
13:32:30  70  	  SELECT
13:32:30  71  	    SUBSCRIPTION.ID into temp_subscription_id
13:32:30  72  	  FROM
13:32:30  73  	    SUBSCRIPTION
13:32:30  74  	  WHERE
13:32:30  75  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:30  76  	  EXCEPTION
13:32:30  77  	  WHEN NO_DATA_FOUND THEN
13:32:30  78  	    RAISE BAD_SUBSCRIPTION_ID;
13:32:30  79  	END;
13:32:30  80  
13:32:30  81  	-- Check that invoice exists
13:32:30  82  	BEGIN
13:32:30  83  	  SELECT
13:32:30  84  	    INVOICE.ID into temp_invoice_id
13:32:30  85  	  FROM
13:32:30  86  	    INVOICE
13:32:30  87  	  WHERE
13:32:30  88  	    INVOICE.ID = in_invoice_id;
13:32:30  89  	  EXCEPTION
13:32:30  90  	  WHEN NO_DATA_FOUND THEN
13:32:30  91  	    RAISE BAD_INVOICE_ID;
13:32:30  92  	END;
13:32:30  93  
13:32:30  94  	-- convert offer duration into intervals
13:32:30  95  	BEGIN
13:32:30  96  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
13:32:30  97  	    var_offer_duration,
13:32:30  98  	    var_offer_years,
13:32:30  99  	    var_offer_months,
13:32:30 100  	    var_offer_days);
13:32:30 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
13:32:30 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
13:32:30 103  	  EXCEPTION
13:32:30 104  	    WHEN OTHERS THEN
13:32:30 105  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 106  	      RAISE BAD_OFFER_DURATION;
13:32:30 107  	END;
13:32:30 108  
13:32:30 109  	-- insert new row into license table
13:32:30 110  	PROCS_LICENSE_CRU_V20.CREATE_LICENSE(
13:32:30 111  	  out_license_id	      => var_new_license_id,
13:32:30 112  	  in_license_status_id	      => in_status_id,
13:32:30 113  	  in_needs_entitlements       => in_needs_entitlements,
13:32:30 114  	  in_start_date 	      => in_start_date,
13:32:30 115  	  in_offer_id		      => in_offer_id,
13:32:30 116  	  in_subscription_id	      => in_subscription_id,
13:32:30 117  	  in_invoice_id 	      => in_invoice_id,
13:32:30 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
13:32:30 119  	  in_created_by 	      => in_created_by,
13:32:30 120  	  in_is_extension	      => in_is_extension,
13:32:30 121  	  in_current_offer_index      => in_current_offer_index,
13:32:30 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
13:32:30 123  	);
13:32:30 124  
13:32:30 125  	out_license_id := var_new_license_id;
13:32:30 126  
13:32:30 127  EXCEPTION
13:32:30 128  WHEN BAD_OFFER_DURATION THEN
13:32:30 129  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
13:32:30 131  WHEN BAD_OFFER_ID THEN
13:32:30 132  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 133  	  SPROC_NAME, 'No such offer');
13:32:30 134  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 135  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 136  	  SPROC_NAME, 'No such subscription');
13:32:30 137  WHEN BAD_INVOICE_ID THEN
13:32:30 138  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 139  	  SPROC_NAME, 'No such invoice');
13:32:30 140  WHEN OTHERS THEN
13:32:30 141  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 143  END;
13:32:30 144  
13:32:30 145  /******************************************************************************/
13:32:30 146  
13:32:30 147  PROCEDURE UPDATE_LICENSE_STATUS(
13:32:30 148  	  in_license_id     IN NUMBER,
13:32:30 149  	  in_license_status IN NUMBER,
13:32:30 150  	  in_updated_by     IN VARCHAR2,
13:32:30 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:30 152  ) AS
13:32:30 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
13:32:30 154  -- VARIABLES
13:32:30 155  temp_license_id NUMBER;
13:32:30 156  -- EXCEPTIONS
13:32:30 157  BAD_LICENSE_ID	     EXCEPTION;
13:32:30 158  BAD_LICENSE_STATUS     EXCEPTION;
13:32:30 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 160  BEGIN
13:32:30 161  
13:32:30 162  	BEGIN
13:32:30 163  	  SELECT
13:32:30 164  	    ID into temp_license_id
13:32:30 165  	  FROM
13:32:30 166  	    LICENSE
13:32:30 167  	  WHERE
13:32:30 168  	    LICENSE.ID = in_license_id;
13:32:30 169  	  EXCEPTION
13:32:30 170  	    WHEN NO_DATA_FOUND THEN
13:32:30 171  	      RAISE BAD_LICENSE_ID;
13:32:30 172  	END;
13:32:30 173  
13:32:30 174  	IF in_license_status != GLOBAL_STATUSES_V20.LICENSE_CLOSED
13:32:30 175  	   AND in_license_status != GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 176  	   AND in_license_status != GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD THEN
13:32:30 177  	  RAISE BAD_LICENSE_STATUS;
13:32:30 178  	END IF;
13:32:30 179  
13:32:30 180  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V20.TRUE) then
13:32:30 181  	  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 182  	    in_license_id	 => in_license_id,
13:32:30 183  	    in_updated_by	 => in_updated_by,
13:32:30 184  	    in_license_status_id => in_license_status,
13:32:30 185  	    in_entitlement_end_date	 => sysdate
13:32:30 186  	  );
13:32:30 187  	ELSE
13:32:30 188  	  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 189  	    in_license_id	 => in_license_id,
13:32:30 190  	    in_updated_by	 => in_updated_by,
13:32:30 191  	    in_license_status_id => in_license_status
13:32:30 192  	  );
13:32:30 193  	END IF;
13:32:30 194  
13:32:30 195  EXCEPTION
13:32:30 196  WHEN BAD_LICENSE_STATUS THEN
13:32:30 197  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 198  	  SPROC_NAME, 'Bad status id');
13:32:30 199  WHEN BAD_LICENSE_ID THEN
13:32:30 200  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 201  	  SPROC_NAME, 'No such license');
13:32:30 202  WHEN OTHERS THEN
13:32:30 203  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 205  END UPDATE_LICENSE_STATUS;
13:32:30 206  
13:32:30 207  /******************************************************************************/
13:32:30 208  
13:32:30 209  PROCEDURE GET_ENDING_LICENSES (
13:32:30 210  	in_hours_number IN NUMBER,
13:32:30 211  	out_result_set	OUT SYS_REFCURSOR
13:32:30 212  ) AS
13:32:30 213  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
13:32:30 214  -- VARIABLES
13:32:30 215  var_days		NUMBER;
13:32:30 216  var_hours 	NUMBER;
13:32:30 217  var_time_interval INTERVAL DAY (3) TO SECOND;
13:32:30 218  BEGIN
13:32:30 219  
13:32:30 220  	var_hours := mod(in_hours_number,24);
13:32:30 221  	var_days := (in_hours_number - var_hours) / 24;
13:32:30 222  	var_time_interval := var_days||' '||var_hours||':0:0';
13:32:30 223  
13:32:30 224  	OPEN out_result_set FOR
13:32:30 225  SELECT * FROM
13:32:30 226  (
13:32:30 227  	SELECT
13:32:30 228  	  LICENSE.ID,
13:32:30 229  	  LICENSE.CREATE_DATE,
13:32:30 230  	  LICENSE.CREATED_BY,
13:32:30 231  	  LICENSE.CURRENT_OFFER_INDEX,
13:32:30 232  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 233  	  LICENSE.END_DATE,
13:32:30 234  	  LICENSE.ENTITLEMENT_END_DATE,
13:32:30 235  	  LICENSE.INVOICE_ID,
13:32:30 236  	  LICENSE.IS_EXTENSION,
13:32:30 237  	  LICENSE.LICENSE_STATUS_ID,
13:32:30 238  	  LICENSE.OFFER_ID,
13:32:30 239  	  LICENSE.START_DATE,
13:32:30 240  	  LICENSE.SUBSCRIPTION_ID,
13:32:30 241  	  LICENSE.UPDATE_DATE,
13:32:30 242  	  LICENSE.UPDATED_BY
13:32:30 243  	FROM
13:32:30 244  	  LICENSE
13:32:30 245  	WHERE
13:32:30 246  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
13:32:30 247  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 248  	  AND NOT EXISTS
13:32:30 249  	  (
13:32:30 250  	    SELECT NULL
13:32:30 251  	    FROM PROCESS_RETRY_THROTTLE
13:32:30 252  	    WHERE PROCESS_NAME = SPROC_NAME
13:32:30 253  	      AND GENERIC_ID = LICENSE.ID
13:32:30 254  	  )
13:32:30 255  	  AND ROWNUM <= 10000
13:32:30 256  	  ORDER BY dbms_random.value
13:32:30 257  ) WHERE
13:32:30 258  	  ROWNUM <= 1000
13:32:30 259  	  ;
13:32:30 260  EXCEPTION
13:32:30 261  WHEN OTHERS THEN
13:32:30 262  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 264  END GET_ENDING_LICENSES;
13:32:30 265  
13:32:30 266  
13:32:30 267  /******************************************************************************/
13:32:30 268  
13:32:30 269  PROCEDURE GET_ENDING_LICENSES_CC (
13:32:30 270  	in_hours_number IN NUMBER,
13:32:30 271  	out_result_set	OUT SYS_REFCURSOR,
13:32:30 272  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:30 273  ) AS
13:32:30 274  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
13:32:30 275  -- VARIABLES
13:32:30 276  var_days		NUMBER;
13:32:30 277  var_hours 	NUMBER;
13:32:30 278  var_time_interval INTERVAL DAY (3) TO SECOND;
13:32:30 279  BEGIN
13:32:30 280  
13:32:30 281  	var_hours := mod(in_hours_number,24);
13:32:30 282  	var_days := (in_hours_number - var_hours) / 24;
13:32:30 283  	var_time_interval := var_days||' '||var_hours||':0:0';
13:32:30 284  
13:32:30 285  	OPEN out_result_set FOR
13:32:30 286  SELECT * FROM
13:32:30 287  (
13:32:30 288  	SELECT
13:32:30 289  	  LICENSE.ID,
13:32:30 290  	  LICENSE.CREATE_DATE,
13:32:30 291  	  LICENSE.CREATED_BY,
13:32:30 292  	  LICENSE.CURRENT_OFFER_INDEX,
13:32:30 293  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 294  	  LICENSE.END_DATE,
13:32:30 295  	  LICENSE.ENTITLEMENT_END_DATE,
13:32:30 296  	  LICENSE.INVOICE_ID,
13:32:30 297  	  LICENSE.IS_EXTENSION,
13:32:30 298  	  LICENSE.LICENSE_STATUS_ID,
13:32:30 299  	  LICENSE.OFFER_ID,
13:32:30 300  	  LICENSE.START_DATE,
13:32:30 301  	  LICENSE.SUBSCRIPTION_ID,
13:32:30 302  	  LICENSE.UPDATE_DATE,
13:32:30 303  	  LICENSE.UPDATED_BY
13:32:30 304  	FROM
13:32:30 305  	  LICENSE
13:32:30 306  	WHERE
13:32:30 307  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
13:32:30 308  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 309  	  AND NOT EXISTS
13:32:30 310  	  (
13:32:30 311  	    SELECT NULL
13:32:30 312  	    FROM PROCESS_RETRY_THROTTLE
13:32:30 313  	    WHERE PROCESS_NAME = in_process_name
13:32:30 314  	      AND GENERIC_ID = LICENSE.INVOICE_ID
13:32:30 315  	  )
13:32:30 316  	  AND ROWNUM <= 10000
13:32:30 317  	  ORDER BY dbms_random.value
13:32:30 318  ) WHERE
13:32:30 319  	  ROWNUM <= 1000
13:32:30 320  	  ;
13:32:30 321  EXCEPTION
13:32:30 322  WHEN OTHERS THEN
13:32:30 323  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 324  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 325  END GET_ENDING_LICENSES_CC;
13:32:30 326  
13:32:30 327  /******************************************************************************/
13:32:30 328  
13:32:30 329  PROCEDURE GET_RECURRING_OFFER (
13:32:30 330  	in_license_id  IN NUMBER,
13:32:30 331  	out_result_set OUT SYS_REFCURSOR
13:32:30 332  ) AS
13:32:30 333  -- VARIABLES
13:32:30 334  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
13:32:30 335  var_offer_chain_id	    NUMBER;
13:32:30 336  var_offer_id		    NUMBER;
13:32:30 337  var_offer_num_recurrences     NUMBER;
13:32:30 338  var_license_cur_offer_rec_num NUMBER;
13:32:30 339  var_offer_index		    NUMBER;
13:32:30 340  -- EXCEPTIONS
13:32:30 341  BAD_LICENSE_ID	     EXCEPTION;
13:32:30 342  CAN_NOT_GET_OFFER_INFO EXCEPTION;
13:32:30 343  BEGIN
13:32:30 344  
13:32:30 345  	BEGIN
13:32:30 346  	  SELECT
13:32:30 347  	    SUBSCRIPTION.OFFER_CHAIN_ID,
13:32:30 348  	    LICENSE.OFFER_ID,
13:32:30 349  	    LICENSE.CURRENT_OFFER_RECURR_NUM
13:32:30 350  	    into
13:32:30 351  	    var_offer_chain_id,
13:32:30 352  	    var_offer_id,
13:32:30 353  	    var_license_cur_offer_rec_num
13:32:30 354  	  FROM
13:32:30 355  	    LICENSE
13:32:30 356  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 357  	  WHERE
13:32:30 358  	    LICENSE.ID = in_license_id;
13:32:30 359  	  EXCEPTION
13:32:30 360  	    WHEN NO_DATA_FOUND THEN
13:32:30 361  	      RAISE BAD_LICENSE_ID;
13:32:30 362  	END;
13:32:30 363  
13:32:30 364  	BEGIN
13:32:30 365  	  SELECT
13:32:30 366  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
13:32:30 367  	    OFFER_OFFER_CHAIN.INDEX_VALUE
13:32:30 368  	    into
13:32:30 369  	    var_offer_num_recurrences,
13:32:30 370  	    var_offer_index
13:32:30 371  	  FROM
13:32:30 372  	    OFFER_OFFER_CHAIN
13:32:30 373  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 374  	  WHERE
13:32:30 375  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
13:32:30 376  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
13:32:30 377  	  EXCEPTION
13:32:30 378  	    WHEN NO_DATA_FOUND THEN
13:32:30 379  	      RAISE CAN_NOT_GET_OFFER_INFO;
13:32:30 380  	END;
13:32:30 381  
13:32:30 382  	IF var_offer_num_recurrences = 0 THEN
13:32:30 383  	  --out_result_set := NULL;
13:32:30 384  	  -- TODO: Remove this hardcode
13:32:30 385  	  OPEN out_result_set FOR
13:32:30 386  	  SELECT
13:32:30 387  	    OFFER.ID,
13:32:30 388  	    OFFER.OFFER_STATUS_ID,
13:32:30 389  	    OFFER.ENTITLEMENT_DURATION,
13:32:30 390  	    OFFER.CREATED_BY,
13:32:30 391  	    OFFER.CREATE_DATE,
13:32:30 392  	    OFFER.UPDATED_BY,
13:32:30 393  	    OFFER.UPDATE_DATE,
13:32:30 394  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
13:32:30 395  	    var_offer_index as "OFFER_INDEX"
13:32:30 396  	  FROM
13:32:30 397  	    OFFER_OFFER_CHAIN
13:32:30 398  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 399  	  WHERE ROWNUM = 0;
13:32:30 400  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
13:32:30 401  	  --out_result_set := NULL;
13:32:30 402  	  -- TODO: Remove this hardcode
13:32:30 403  	  OPEN out_result_set FOR
13:32:30 404  	  SELECT
13:32:30 405  	    OFFER.ID,
13:32:30 406  	    OFFER.OFFER_STATUS_ID,
13:32:30 407  	    OFFER.ENTITLEMENT_DURATION,
13:32:30 408  	    OFFER.CREATED_BY,
13:32:30 409  	    OFFER.CREATE_DATE,
13:32:30 410  	    OFFER.UPDATED_BY,
13:32:30 411  	    OFFER.UPDATE_DATE,
13:32:30 412  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
13:32:30 413  	    var_offer_index as "OFFER_INDEX"
13:32:30 414  	  FROM
13:32:30 415  	    OFFER_OFFER_CHAIN
13:32:30 416  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 417  	  WHERE ROWNUM = 0;
13:32:30 418  	ELSE
13:32:30 419  	  OPEN out_result_set FOR
13:32:30 420  	  SELECT
13:32:30 421  	    OFFER.ID,
13:32:30 422  	    OFFER.OFFER_STATUS_ID,
13:32:30 423  	    OFFER.ENTITLEMENT_DURATION,
13:32:30 424  	    OFFER.CREATED_BY,
13:32:30 425  	    OFFER.CREATE_DATE,
13:32:30 426  	    OFFER.UPDATED_BY,
13:32:30 427  	    OFFER.UPDATE_DATE,
13:32:30 428  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
13:32:30 429  	    var_offer_index as "OFFER_INDEX"
13:32:30 430  	  FROM
13:32:30 431  	    OFFER
13:32:30 432  	  WHERE
13:32:30 433  	    OFFER.ID = var_offer_id;
13:32:30 434  	END IF;
13:32:30 435  
13:32:30 436  EXCEPTION
13:32:30 437  WHEN BAD_LICENSE_ID THEN
13:32:30 438  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 439  	  SPROC_NAME, 'No such license');
13:32:30 440  WHEN CAN_NOT_GET_OFFER_INFO THEN
13:32:30 441  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 442  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
13:32:30 443  WHEN OTHERS THEN
13:32:30 444  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 446  END GET_RECURRING_OFFER;
13:32:30 447  
13:32:30 448  /******************************************************************************/
13:32:30 449  
13:32:30 450  PROCEDURE GET_NEXT_OFFER (
13:32:30 451  /*
13:32:30 452  Throws exceptions:
13:32:30 453  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 454  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 455  */
13:32:30 456  	in_license_id  IN NUMBER,
13:32:30 457  	out_result_set OUT SYS_REFCURSOR
13:32:30 458  ) AS
13:32:30 459  -- VARIABLES
13:32:30 460  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
13:32:30 461  var_offer_chain_id	NUMBER;
13:32:30 462  var_offer_id		NUMBER;
13:32:30 463  var_license_current_index NUMBER;
13:32:30 464  var_next_offer_index	NUMBER;
13:32:30 465  -- EXCEPTIONS
13:32:30 466  BAD_LICENSE_ID	      EXCEPTION;
13:32:30 467  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
13:32:30 468  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:30 469  BEGIN
13:32:30 470  
13:32:30 471  	BEGIN
13:32:30 472  	  SELECT
13:32:30 473  	    SUBSCRIPTION.OFFER_CHAIN_ID,
13:32:30 474  	    LICENSE.OFFER_ID,
13:32:30 475  	    LICENSE.CURRENT_OFFER_INDEX
13:32:30 476  	    into
13:32:30 477  	    var_offer_chain_id,
13:32:30 478  	    var_offer_id,
13:32:30 479  	    var_license_current_index
13:32:30 480  	  FROM
13:32:30 481  	    LICENSE
13:32:30 482  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 483  	  WHERE
13:32:30 484  	    LICENSE.ID = in_license_id;
13:32:30 485  	  EXCEPTION
13:32:30 486  	    WHEN NO_DATA_FOUND THEN
13:32:30 487  	      RAISE BAD_LICENSE_ID;
13:32:30 488  	END;
13:32:30 489  
13:32:30 490  	BEGIN
13:32:30 491  	  var_next_offer_index := PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX(
13:32:30 492  	    var_offer_chain_id,
13:32:30 493  	    var_license_current_index
13:32:30 494  	  );
13:32:30 495  	  EXCEPTION
13:32:30 496  	    WHEN OTHERS THEN
13:32:30 497  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 498  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
13:32:30 499  	END;
13:32:30 500  
13:32:30 501  	IF var_next_offer_index IS NULL THEN
13:32:30 502  	  -- RETURN NULL;
13:32:30 503  	  -- TODO: Remove this hardcode
13:32:30 504  	  OPEN out_result_set FOR
13:32:30 505  	  SELECT
13:32:30 506  	    OFFER.ID,
13:32:30 507  	    OFFER.OFFER_STATUS_ID,
13:32:30 508  	    OFFER.ENTITLEMENT_DURATION,
13:32:30 509  	    OFFER.CREATED_BY,
13:32:30 510  	    OFFER.CREATE_DATE,
13:32:30 511  	    OFFER.UPDATED_BY,
13:32:30 512  	    OFFER.UPDATE_DATE,
13:32:30 513  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
13:32:30 514  	  FROM
13:32:30 515  	    OFFER_OFFER_CHAIN
13:32:30 516  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 517  	  WHERE
13:32:30 518  	    1=2;
13:32:30 519  	ELSE
13:32:30 520  	  OPEN out_result_set FOR
13:32:30 521  	  SELECT
13:32:30 522  	    OFFER.ID,
13:32:30 523  	    OFFER.OFFER_STATUS_ID,
13:32:30 524  	    OFFER.ENTITLEMENT_DURATION,
13:32:30 525  	    OFFER.CREATED_BY,
13:32:30 526  	    OFFER.CREATE_DATE,
13:32:30 527  	    OFFER.UPDATED_BY,
13:32:30 528  	    OFFER.UPDATE_DATE,
13:32:30 529  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
13:32:30 530  	  FROM
13:32:30 531  	    OFFER_OFFER_CHAIN
13:32:30 532  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 533  	  WHERE
13:32:30 534  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
13:32:30 535  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
13:32:30 536  	END IF;
13:32:30 537  
13:32:30 538  EXCEPTION
13:32:30 539  WHEN BAD_LICENSE_ID THEN
13:32:30 540  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 541  	  SPROC_NAME, 'No such license');
13:32:30 542  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
13:32:30 543  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 544  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
13:32:30 545  WHEN OTHERS THEN
13:32:30 546  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 548  END GET_NEXT_OFFER;
13:32:30 549  
13:32:30 550  /******************************************************************************/
13:32:30 551  
13:32:30 552  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
13:32:30 553  	in_license_id IN NUMBER,
13:32:30 554  	out_group_id  OUT NUMBER
13:32:30 555  ) AS
13:32:30 556  -- VARIABLES
13:32:30 557  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
13:32:30 558  var_subscription_id NUMBER;
13:32:30 559  var_group_id	  NUMBER;
13:32:30 560  -- EXCEPTIONS
13:32:30 561  BAD_LICENSE_ID	   EXCEPTION;
13:32:30 562  CAN_NOT_GET_GROUP_ID EXCEPTION;
13:32:30 563  BEGIN
13:32:30 564  
13:32:30 565  	-- Get subscription id
13:32:30 566  	BEGIN
13:32:30 567  	  SELECT
13:32:30 568  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
13:32:30 569  	  FROM
13:32:30 570  	    LICENSE
13:32:30 571  	  WHERE
13:32:30 572  	    LICENSE.ID = in_license_id;
13:32:30 573  	  EXCEPTION
13:32:30 574  	    WHEN NO_DATA_FOUND THEN
13:32:30 575  	      RAISE BAD_LICENSE_ID;
13:32:30 576  	END;
13:32:30 577  
13:32:30 578  	-- Get group id
13:32:30 579  	BEGIN
13:32:30 580  	  SELECT
13:32:30 581  	    ACCOUNT.GROUP_ID into var_group_id
13:32:30 582  	  FROM
13:32:30 583  	    SUBSCRIPTION
13:32:30 584  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 585  	  WHERE
13:32:30 586  	    SUBSCRIPTION.ID = var_subscription_id;
13:32:30 587  	  EXCEPTION
13:32:30 588  	    WHEN NO_DATA_FOUND THEN
13:32:30 589  	      RAISE CAN_NOT_GET_GROUP_ID;
13:32:30 590  	END;
13:32:30 591  
13:32:30 592  	out_group_id := var_group_id;
13:32:30 593  
13:32:30 594  EXCEPTION
13:32:30 595  WHEN BAD_LICENSE_ID THEN
13:32:30 596  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 597  	  SPROC_NAME, 'No such license');
13:32:30 598  WHEN CAN_NOT_GET_GROUP_ID THEN
13:32:30 599  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 600  	  SPROC_NAME, 'Could not get group id');
13:32:30 601  WHEN OTHERS THEN
13:32:30 602  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 603  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 604  END GET_GROUP_ID_BY_LICENSE_ID;
13:32:30 605  
13:32:30 606  /******************************************************************************/
13:32:30 607  
13:32:30 608  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
13:32:30 609  	out_result_set OUT SYS_REFCURSOR
13:32:30 610  ) AS
13:32:30 611  BEGIN
13:32:30 612  	OPEN out_result_set FOR
13:32:30 613  SELECT * FROM
13:32:30 614  (
13:32:30 615  	SELECT
13:32:30 616  	  LICENSE.ID,
13:32:30 617  	  LICENSE.INVOICE_ID,
13:32:30 618  	  LICENSE.IS_EXTENSION,
13:32:30 619  	  LICENSE.START_DATE,
13:32:30 620  	  LICENSE.END_DATE,
13:32:30 621  	  LICENSE.ENTITLEMENT_END_DATE,
13:32:30 622  	  LICENSE.CURRENT_OFFER_INDEX,
13:32:30 623  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 624  	  LICENSE.CREATE_DATE,
13:32:30 625  	  LICENSE.CREATED_BY,
13:32:30 626  	  LICENSE.LICENSE_STATUS_ID,
13:32:30 627  	  LICENSE.OFFER_ID,
13:32:30 628  	  LICENSE.SUBSCRIPTION_ID,
13:32:30 629  	  LICENSE.UPDATE_DATE,
13:32:30 630  	  LICENSE.UPDATED_BY,
13:32:30 631  	  LICENSE.NEEDS_ENTITLEMENTS
13:32:30 632  	FROM
13:32:30 633  	  LICENSE
13:32:30 634  	WHERE
13:32:30 635  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 636  	AND ROWNUM <= 5000
13:32:30 637  	ORDER BY dbms_random.value
13:32:30 638  ) WHERE
13:32:30 639  	ROWNUM <= 500;
13:32:30 640  
13:32:30 641  END GET_NEED_ENTITLEMENTS_LICENSES;
13:32:30 642  
13:32:30 643  /******************************************************************************/
13:32:30 644  
13:32:30 645  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
13:32:30 646  	in_license_id	      IN NUMBER,
13:32:30 647  	in_needs_entitlements IN NUMBER,
13:32:30 648  	in_updated_by	      IN VARCHAR2
13:32:30 649  ) AS
13:32:30 650  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
13:32:30 651  -- VARIABLES
13:32:30 652  temp_license_id NUMBER;
13:32:30 653  -- EXCEPTIONS
13:32:30 654  BAD_LICENSE_ID	     EXCEPTION;
13:32:30 655  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
13:32:30 656  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 657  BEGIN
13:32:30 658  
13:32:30 659  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V20.TRUE
13:32:30 660  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 661  	  RAISE BAD_ENTITLEMENTS_FLAG;
13:32:30 662  	END IF;
13:32:30 663  
13:32:30 664  	BEGIN
13:32:30 665  	  SELECT
13:32:30 666  	    LICENSE.ID into temp_license_id
13:32:30 667  	  FROM
13:32:30 668  	    LICENSE
13:32:30 669  	  WHERE
13:32:30 670  	    LICENSE.ID = in_license_id;
13:32:30 671  	  EXCEPTION
13:32:30 672  	    WHEN NO_DATA_FOUND THEN
13:32:30 673  	      RAISE BAD_LICENSE_ID;
13:32:30 674  	END;
13:32:30 675  
13:32:30 676  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 677  	  in_license_id 	=> in_license_id,
13:32:30 678  	  in_needs_entitlements => in_needs_entitlements,
13:32:30 679  	  in_updated_by 	=> in_updated_by
13:32:30 680  	);
13:32:30 681  
13:32:30 682  EXCEPTION
13:32:30 683  WHEN BAD_ENTITLEMENTS_FLAG THEN
13:32:30 684  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 685  	  SPROC_NAME, 'Bad entitlements flag value');
13:32:30 686  WHEN BAD_LICENSE_ID THEN
13:32:30 687  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 688  	  SPROC_NAME, 'No such license');
13:32:30 689  WHEN OTHERS THEN
13:32:30 690  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 691  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 692  END UPDATE_NEED_ENTITLEMENTS_FLAG;
13:32:30 693  
13:32:30 694  
13:32:30 695  /******************************************************************************/
13:32:30 696  
13:32:30 697  PROCEDURE GET_ENDED_GC_LICENSES (
13:32:30 698  	out_result_set		OUT SYS_REFCURSOR,
13:32:30 699  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:30 700  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:30 701  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:30 702  ) AS
13:32:30 703  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
13:32:30 704  var_days		NUMBER;
13:32:30 705  var_hours 	NUMBER;
13:32:30 706  var_time_interval INTERVAL DAY (3) TO SECOND;
13:32:30 707  BEGIN
13:32:30 708  	var_hours := mod(in_hours_number,24);
13:32:30 709  	var_days := (in_hours_number - var_hours) / 24;
13:32:30 710  	var_time_interval := var_days||' '||var_hours||':0:0';
13:32:30 711  	OPEN out_result_set FOR
13:32:30 712  SELECT * FROM
13:32:30 713  (
13:32:30 714  	SELECT
13:32:30 715  	  l.ID,
13:32:30 716  	  l.CREATE_DATE,
13:32:30 717  	  l.CREATED_BY,
13:32:30 718  	  l.CURRENT_OFFER_INDEX,
13:32:30 719  	  l.CURRENT_OFFER_RECURR_NUM,
13:32:30 720  	  l.END_DATE,
13:32:30 721  	  l.ENTITLEMENT_END_DATE,
13:32:30 722  	  l.INVOICE_ID,
13:32:30 723  	  l.IS_EXTENSION,
13:32:30 724  	  l.LICENSE_STATUS_ID,
13:32:30 725  	  l.OFFER_ID,
13:32:30 726  	  l.START_DATE,
13:32:30 727  	  l.SUBSCRIPTION_ID,
13:32:30 728  	  l.UPDATE_DATE,
13:32:30 729  	  l.UPDATED_BY
13:32:30 730  	FROM
13:32:30 731  	  GIFT_CERTIFICATE gc
13:32:30 732  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
13:32:30 733  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
13:32:30 734  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
13:32:30 735  	WHERE
13:32:30 736  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 737  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
13:32:30 738  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
13:32:30 739  	  AND s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_CLOSED
13:32:30 740  	  AND NOT EXISTS (
13:32:30 741  	    SELECT NULL
13:32:30 742  	    FROM PROCESS_RETRY_THROTTLE
13:32:30 743  	    WHERE PROCESS_NAME = in_process_name
13:32:30 744  	      AND GENERIC_ID = l.ID
13:32:30 745  	  )
13:32:30 746  	  AND ROWNUM <= in_num_rows*10
13:32:30 747  	  ORDER BY dbms_random.value
13:32:30 748  ) WHERE
13:32:30 749  	  ROWNUM <= in_num_rows
13:32:30 750  	  GROUP BY SUBSCRIPTION_ID;
13:32:30 751  EXCEPTION
13:32:30 752  WHEN OTHERS THEN
13:32:30 753  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 754  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 755  END GET_ENDED_GC_LICENSES;
13:32:30 756  
13:32:30 757  PROCEDURE GET_LICENSE_BY_ID (
13:32:30 758  	in_license_id  IN NUMBER,
13:32:30 759  	out_result_set OUT SYS_REFCURSOR
13:32:30 760  ) AS
13:32:30 761  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
13:32:30 762  -- VARIABLES
13:32:30 763  temp_license_id NUMBER;
13:32:30 764  -- EXCEPTIONS
13:32:30 765  BAD_LICENSE_ID EXCEPTION;
13:32:30 766  BEGIN
13:32:30 767  
13:32:30 768  	BEGIN
13:32:30 769  	  SELECT
13:32:30 770  	    l.id into temp_license_id
13:32:30 771  	  FROM
13:32:30 772  	    license l
13:32:30 773  	  WHERE
13:32:30 774  	    l.id = in_license_id;
13:32:30 775  	  EXCEPTION
13:32:30 776  	    WHEN NO_DATA_FOUND THEN
13:32:30 777  	      RAISE BAD_LICENSE_ID;
13:32:30 778  	END;
13:32:30 779  
13:32:30 780  	OPEN out_result_set FOR
13:32:30 781  	SELECT
13:32:30 782  	  l.id,
13:32:30 783  	  l.license_status_id,
13:32:30 784  	  l.subscription_id,
13:32:30 785  	  l.invoice_id,
13:32:30 786  	  l.offer_id,
13:32:30 787  	  l.start_date,
13:32:30 788  	  l.end_date,
13:32:30 789  	  l.entitlement_end_date,
13:32:30 790  	  l.is_extension,
13:32:30 791  	  l.create_date,
13:32:30 792  	  l.created_by,
13:32:30 793  	  l.update_date,
13:32:30 794  	  l.updated_by,
13:32:30 795  	  l.current_offer_index,
13:32:30 796  	  l.current_offer_recurr_num,
13:32:30 797  	  l.needs_entitlements
13:32:30 798  	FROM
13:32:30 799  	  LICENSE l
13:32:30 800  	WHERE
13:32:30 801  	  l.id = in_license_id;
13:32:30 802  
13:32:30 803  EXCEPTION
13:32:30 804  WHEN BAD_LICENSE_ID THEN
13:32:30 805  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 806  	  SPROC_NAME, 'No such license');
13:32:30 807  WHEN OTHERS THEN
13:32:30 808  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 809  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 810  END GET_LICENSE_BY_ID;
13:32:30 811  
13:32:30 812  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
13:32:30 813  	in_subscription_id IN NUMBER,
13:32:30 814  	in_end_date IN DATE,
13:32:30 815  	in_updated_by IN VARCHAR2
13:32:30 816  ) AS
13:32:30 817  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
13:32:30 818  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 819  var_latest_lice NUMBER;
13:32:30 820  BEGIN
13:32:30 821  	SELECT max(id)
13:32:30 822  	INTO  var_latest_lice
13:32:30 823  	FROM LICENSE
13:32:30 824  	WHERE
13:32:30 825  	  subscription_id = in_subscription_id
13:32:30 826  	;
13:32:30 827  
13:32:30 828  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 829  	  in_license_id        => var_latest_lice,
13:32:30 830  	  in_updated_by        => in_updated_by,
13:32:30 831  	  in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 832  	  in_end_date	       => in_end_date,
13:32:30 833  	  in_entitlement_end_date => in_end_date
13:32:30 834  	);
13:32:30 835  
13:32:30 836  EXCEPTION
13:32:30 837  WHEN NO_DATA_FOUND THEN
13:32:30 838  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 839  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
13:32:30 840  WHEN OTHERS THEN
13:32:30 841  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 842  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 843  END UP_LATEST_LICE_END_BY_SUBID;
13:32:30 844  
13:32:30 845  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
13:32:30 846  	in_days_before_close	 IN NUMBER,
13:32:30 847  	in_num_licenses_to_fetch IN NUMBER,
13:32:30 848  	out_result_set		 OUT SYS_REFCURSOR
13:32:30 849  ) AS
13:32:30 850  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
13:32:30 851  BEGIN
13:32:30 852  	OPEN out_result_set FOR
13:32:30 853  	SELECT
13:32:30 854  	    *
13:32:30 855  	FROM
13:32:30 856  	    (
13:32:30 857  		SELECT
13:32:30 858  		    l.id
13:32:30 859  		FROM
13:32:30 860  		    license l
13:32:30 861  		JOIN
13:32:30 862  		    invoice i
13:32:30 863  		ON
13:32:30 864  		    l.invoice_id = i.id
13:32:30 865  		WHERE
13:32:30 866  		    i.invoice_status_id = GLOBAL_STATUSES_V20.INVOICE_OPEN
13:32:30 867  		AND l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
13:32:30 868  		AND SYSDATE + in_days_before_close >= l.grace_end_date
13:32:30 869  		AND NOT EXISTS
13:32:30 870  		    (
13:32:30 871  			SELECT
13:32:30 872  			    1
13:32:30 873  			FROM
13:32:30 874  			    charge c
13:32:30 875  			WHERE
13:32:30 876  			    c.invoice_id = i.id
13:32:30 877  			AND c.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED)
13:32:30 878  		AND rownum <= in_num_licenses_to_fetch * 10
13:32:30 879  		ORDER BY
13:32:30 880  		    dbms_random.value)
13:32:30 881  	WHERE
13:32:30 882  	    rownum <= in_num_licenses_to_fetch;
13:32:30 883  END GET_GRACE_LICE_FOR_FINAL_TRANS;
13:32:30 884  
13:32:30 885  END PROCS_LICENSE_V20;
13:32:30 886  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.06
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE CREATE_CHARGE(
13:32:30   4  /*
13:32:30   5  Throws exceptions:
13:32:30   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30   8  */
13:32:30   9  	in_invoice_id	      IN NUMBER,
13:32:30  10  	in_transaction_id     IN NUMBER,
13:32:30  11  	in_instrument_type_id IN NUMBER,
13:32:30  12  	in_instrument_id      IN NUMBER,
13:32:30  13  	in_charge_amount      IN NUMBER,
13:32:30  14  	in_created_by	      IN VARCHAR2,
13:32:30  15  	in_charge_status_id   IN NUMBER,
13:32:30  16  	out_charge_id	      OUT NUMBER
13:32:30  17  ) AS
13:32:30  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
13:32:30  19  -- VARIABLES
13:32:30  20  temp_invoice_id	  NUMBER;
13:32:30  21  temp_transaction_id NUMBER;
13:32:30  22  var_new_charge_id   NUMBER;
13:32:30  23  -- EXCEPTIONS
13:32:30  24  BAD_INVOICE_ID	     EXCEPTION;
13:32:30  25  BAD_TRANSACTION_ID     EXCEPTION;
13:32:30  26  BAD_PAYPAL_ID	     EXCEPTION;
13:32:30  27  BAD_CREDIT_CARD_ID     EXCEPTION;
13:32:30  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
13:32:30  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
13:32:30  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30  31  BEGIN
13:32:30  32  	-- Check that incoming data is correct
13:32:30  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30  35  	  RAISE BAD_INSTRUMENT_TYPE;
13:32:30  36  	END IF;
13:32:30  37  
13:32:30  38  	-- Check that status is correct
13:32:30  39  	IF in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
13:32:30  42  	  RAISE BAD_CHARGE_STATUS_ID;
13:32:30  43  	END IF;
13:32:30  44  
13:32:30  45  	-- Check that invoice exists
13:32:30  46  	BEGIN
13:32:30  47  	  SELECT
13:32:30  48  	    INVOICE.ID into temp_invoice_id
13:32:30  49  	  FROM
13:32:30  50  	    INVOICE
13:32:30  51  	  WHERE
13:32:30  52  	    INVOICE.ID = in_invoice_id;
13:32:30  53  	  EXCEPTION
13:32:30  54  	    WHEN NO_DATA_FOUND THEN
13:32:30  55  	      RAISE BAD_INVOICE_ID;
13:32:30  56  	END;
13:32:30  57  
13:32:30  58  	-- Check that transaction exists
13:32:30  59  	BEGIN
13:32:30  60  	  SELECT
13:32:30  61  	    TRANSACTION.ID into temp_transaction_id
13:32:30  62  	  FROM
13:32:30  63  	    TRANSACTION
13:32:30  64  	  WHERE
13:32:30  65  	    TRANSACTION.ID = in_transaction_id;
13:32:30  66  	  EXCEPTION
13:32:30  67  	    WHEN NO_DATA_FOUND THEN
13:32:30  68  	      RAISE BAD_TRANSACTION_ID;
13:32:30  69  	END;
13:32:30  70  
13:32:30  71  	-- Check that instrument exists
13:32:30  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30  73  	  IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30  74  	    RAISE BAD_CREDIT_CARD_ID;
13:32:30  75  	  END IF;
13:32:30  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30  77  	  IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30  78  	    RAISE BAD_PAYPAL_ID;
13:32:30  79  	  END IF;
13:32:30  80  	END IF;
13:32:30  81  
13:32:30  82  	-- Create new charge
13:32:30  83  	PROCS_CHARGE_CRU_V20.CREATE_CHARGE(
13:32:30  84  	  out_charge_id 	=> var_new_charge_id,
13:32:30  85  	  in_invoice_id 	=> in_invoice_id,
13:32:30  86  	  in_transaction_id	=> in_transaction_id,
13:32:30  87  	  in_instrument_type_id => in_instrument_type_id,
13:32:30  88  	  in_instrument_id	=> in_instrument_id,
13:32:30  89  	  in_charge_amount	=> in_charge_amount,
13:32:30  90  	  in_charge_status_id	=> in_charge_status_id,
13:32:30  91  	  in_created_by 	=> in_created_by
13:32:30  92  	);
13:32:30  93  
13:32:30  94  	out_charge_id := var_new_charge_id;
13:32:30  95  
13:32:30  96  EXCEPTION
13:32:30  97  WHEN BAD_CHARGE_STATUS_ID THEN
13:32:30  98  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
13:32:30 100  WHEN BAD_INSTRUMENT_TYPE THEN
13:32:30 101  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 102  	  PROCS_NAME, 'Bad instrument type id');
13:32:30 103  WHEN BAD_INVOICE_ID THEN
13:32:30 104  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 105  	  PROCS_NAME, 'No such invoice');
13:32:30 106  WHEN BAD_TRANSACTION_ID THEN
13:32:30 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 108  	  PROCS_NAME, 'No such transaction');
13:32:30 109  WHEN BAD_PAYPAL_ID THEN
13:32:30 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 111  	  PROCS_NAME, 'No such paypal');
13:32:30 112  WHEN BAD_CREDIT_CARD_ID THEN
13:32:30 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 114  	  PROCS_NAME, 'No such credit card');
13:32:30 115  WHEN OTHERS THEN
13:32:30 116  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
13:32:30 118  END CREATE_CHARGE;
13:32:30 119  
13:32:30 120  /********************************************************/
13:32:30 121  -- norlov #38562 :
13:32:30 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
13:32:30 123  /*
13:32:30 124  Throws exceptions:
13:32:30 125  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 126  */
13:32:30 127  	out_result_set	    OUT SYS_REFCURSOR,
13:32:30 128  	in_row_number	    IN NUMBER DEFAULT NULL
13:32:30 129  ) AS
13:32:30 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
13:32:30 131  -- COMSTANTS
13:32:30 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
13:32:30 133  -- VARIABLES
13:32:30 134  var_row_number NUMBER;
13:32:30 135  BEGIN
13:32:30 136  	IF in_row_number IS NULL THEN
13:32:30 137  	  var_row_number := DEFAULT_ROW_NUMBER;
13:32:30 138  	ELSE
13:32:30 139  	  var_row_number := in_row_number;
13:32:30 140  	END IF;
13:32:30 141  
13:32:30 142  	-- Select charges
13:32:30 143  	OPEN out_result_set FOR
13:32:30 144  SELECT * FROM
13:32:30 145  (
13:32:30 146  	SELECT
13:32:30 147  	  CHARGE.ID,
13:32:30 148  	  CHARGE.TRANSACTION_ID,
13:32:30 149  	  CHARGE.INSTRUMENT_ID,
13:32:30 150  	  CHARGE.INSTRUMENT_TYPE_ID,
13:32:30 151  	  CHARGE.CHARGE_AMOUNT,
13:32:30 152  	  CHARGE.CREATE_DATE,
13:32:30 153  	  CHARGE.CREATED_BY,
13:32:30 154  	  CHARGE.INVOICE_ID
13:32:30 155  	FROM
13:32:30 156  	  CHARGE
13:32:30 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 158  	WHERE
13:32:30 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
13:32:30 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
13:32:30 162  	  AND NOT EXISTS
13:32:30 163  	  (
13:32:30 164  	    SELECT NULL
13:32:30 165  	    FROM PROCESS_RETRY_THROTTLE
13:32:30 166  	    WHERE PROCESS_NAME = SPROC_NAME
13:32:30 167  	      AND GENERIC_ID = CHARGE.ID
13:32:30 168  	  )
13:32:30 169  	  AND ROWNUM <= var_row_number*10
13:32:30 170  	  ORDER BY dbms_random.value
13:32:30 171  ) WHERE
13:32:30 172  	  ROWNUM <= var_row_number;
13:32:30 173  
13:32:30 174  END GET_PENDING_REFUND_CHARGES;
13:32:30 175  /******************************************************************************/
13:32:30 176  
13:32:30 177  PROCEDURE GET_UNPROCESSED_CHARGES (
13:32:30 178  /*
13:32:30 179  Throws exceptions:
13:32:30 180  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 181  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 182  */
13:32:30 183  	in_invoice_id  IN NUMBER,
13:32:30 184  	out_result_set OUT SYS_REFCURSOR
13:32:30 185  ) AS
13:32:30 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
13:32:30 187  -- VARIABLES
13:32:30 188  temp_invoice_id NUMBER;
13:32:30 189  -- EXCEPTIONS
13:32:30 190  BAD_INVOICE_ID EXCEPTION;
13:32:30 191  BEGIN
13:32:30 192  
13:32:30 193  	-- Check that invoice exists
13:32:30 194  	BEGIN
13:32:30 195  	  SELECT
13:32:30 196  	    INVOICE.ID into temp_invoice_id
13:32:30 197  	  FROM
13:32:30 198  	    INVOICE
13:32:30 199  	  WHERE
13:32:30 200  	    INVOICE.ID = in_invoice_id;
13:32:30 201  	  EXCEPTION
13:32:30 202  	    WHEN NO_DATA_FOUND THEN
13:32:30 203  	      RAISE BAD_INVOICE_ID;
13:32:30 204  	END;
13:32:30 205  
13:32:30 206  	-- Select charges
13:32:30 207  	OPEN out_result_set FOR
13:32:30 208  	SELECT
13:32:30 209  	  CHARGE.ID,
13:32:30 210  	  CHARGE.TRANSACTION_ID,
13:32:30 211  	  CHARGE.INSTRUMENT_ID,
13:32:30 212  	  CHARGE.INSTRUMENT_TYPE_ID,
13:32:30 213  	  CHARGE.CHARGE_AMOUNT,
13:32:30 214  	  CHARGE.CREATE_DATE,
13:32:30 215  	  CHARGE.CREATED_BY,
13:32:30 216  	  CHARGE.INVOICE_ID
13:32:30 217  	FROM
13:32:30 218  	  CHARGE
13:32:30 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 220  	WHERE
13:32:30 221  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 223  	  AND
13:32:30 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
13:32:30 225  
13:32:30 226  EXCEPTION
13:32:30 227  WHEN BAD_INVOICE_ID THEN
13:32:30 228  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 229  	  SPROC_NAME, 'No such invoice');
13:32:30 230  WHEN OTHERS THEN
13:32:30 231  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 233  END GET_UNPROCESSED_CHARGES;
13:32:30 234  
13:32:30 235  /******************************************************************************/
13:32:30 236  
13:32:30 237  PROCEDURE GET_PROCESSED_CHARGES (
13:32:30 238  /*
13:32:30 239  Throws exceptions:
13:32:30 240  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 241  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 242  */
13:32:30 243  	in_invoice_id  IN NUMBER,
13:32:30 244  	out_result_set OUT SYS_REFCURSOR
13:32:30 245  ) AS
13:32:30 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
13:32:30 247  -- VARIABLES
13:32:30 248  temp_invoice_id NUMBER;
13:32:30 249  -- EXCEPTIONS
13:32:30 250  BAD_INVOICE_ID  EXCEPTION;
13:32:30 251  BEGIN
13:32:30 252  
13:32:30 253  	-- Check that invoice exists
13:32:30 254  	BEGIN
13:32:30 255  	  SELECT
13:32:30 256  	    INVOICE.ID into temp_invoice_id
13:32:30 257  	  FROM
13:32:30 258  	    INVOICE
13:32:30 259  	  WHERE
13:32:30 260  	    INVOICE.ID = in_invoice_id;
13:32:30 261  	  EXCEPTION
13:32:30 262  	    WHEN NO_DATA_FOUND THEN
13:32:30 263  	      RAISE BAD_INVOICE_ID;
13:32:30 264  	END;
13:32:30 265  
13:32:30 266  	-- Select charges
13:32:30 267  	OPEN out_result_set FOR
13:32:30 268  	SELECT /*+ STAR_TRANSFORMATION */
13:32:30 269  	  CHARGE.ID,
13:32:30 270  	  CHARGE.TRANSACTION_ID,
13:32:30 271  	  CHARGE.INSTRUMENT_ID,
13:32:30 272  	  CHARGE.INSTRUMENT_TYPE_ID,
13:32:30 273  	  CHARGE.CHARGE_AMOUNT,
13:32:30 274  	  CHARGE.CREATE_DATE,
13:32:30 275  	  CHARGE.CREATED_BY,
13:32:30 276  	  CHARGE.INVOICE_ID
13:32:30 277  	FROM
13:32:30 278  	  CHARGE
13:32:30 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 280  	WHERE
13:32:30 281  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_CLOSED;
13:32:30 284  
13:32:30 285  EXCEPTION
13:32:30 286  WHEN BAD_INVOICE_ID THEN
13:32:30 287  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 288  	  SPROC_NAME, 'No such invoice');
13:32:30 289  WHEN OTHERS THEN
13:32:30 290  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 292  END GET_PROCESSED_CHARGES;
13:32:30 293  
13:32:30 294  /******************************************************************************/
13:32:30 295  
13:32:30 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
13:32:30 297  /*
13:32:30 298  Throws exceptions:
13:32:30 299  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 300  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 301  */
13:32:30 302  	in_charge_id	    IN NUMBER,
13:32:30 303  	out_subscription_id OUT NUMBER
13:32:30 304  ) AS
13:32:30 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
13:32:30 306  -- VARIABLES
13:32:30 307  var_invoice_id	  NUMBER;
13:32:30 308  var_subscription_id NUMBER;
13:32:30 309  -- EXCEPTIONS
13:32:30 310  BAD_CHARGE_ID		EXCEPTION;
13:32:30 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
13:32:30 312  BEGIN
13:32:30 313  
13:32:30 314  	BEGIN
13:32:30 315  	  SELECT
13:32:30 316  	    CHARGE.INVOICE_ID into var_invoice_id
13:32:30 317  	  FROM
13:32:30 318  	    CHARGE
13:32:30 319  	  WHERE
13:32:30 320  	    CHARGE.ID = in_charge_id;
13:32:30 321  	  EXCEPTION
13:32:30 322  	    WHEN NO_DATA_FOUND THEN
13:32:30 323  	      RAISE BAD_CHARGE_ID;
13:32:30 324  	END;
13:32:30 325  
13:32:30 326  	BEGIN
13:32:30 327  	  SELECT
13:32:30 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
13:32:30 329  	  FROM
13:32:30 330  	    LICENSE
13:32:30 331  	  WHERE
13:32:30 332  	    LICENSE.INVOICE_ID = var_invoice_id
13:32:30 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
13:32:30 334  	  EXCEPTION
13:32:30 335  	    WHEN NO_DATA_FOUND THEN
13:32:30 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
13:32:30 337  	END;
13:32:30 338  
13:32:30 339  	out_subscription_id := var_subscription_id;
13:32:30 340  
13:32:30 341  EXCEPTION
13:32:30 342  WHEN BAD_CHARGE_ID THEN
13:32:30 343  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 344  	  SPROC_NAME, 'No such charge');
13:32:30 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
13:32:30 346  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 347  	  SPROC_NAME, 'Could not find subscription for given charge');
13:32:30 348  WHEN OTHERS THEN
13:32:30 349  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
13:32:30 352  
13:32:30 353  /******************************************************************************/
13:32:30 354  
13:32:30 355  PROCEDURE UPDATE_CHARGE_STATUS (
13:32:30 356  /*
13:32:30 357  Throws exceptions:
13:32:30 358  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 359  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 360  */
13:32:30 361  	in_charge_id	    IN CHARGE.ID%TYPE,
13:32:30 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:30 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
13:32:30 364  ) AS
13:32:30 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
13:32:30 366  -- EXCEPTIONS
13:32:30 367  BAD_CHARGE_ID	     EXCEPTION;
13:32:30 368  BAD_STATUS_ID	     EXCEPTION;
13:32:30 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 370  BEGIN
13:32:30 371  
13:32:30 372  	IF in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
13:32:30 375  	  RAISE BAD_STATUS_ID;
13:32:30 376  	END IF;
13:32:30 377  
13:32:30 378  	PROCS_CHARGE_CRU_V20.UPDATE_CHARGE(
13:32:30 379  	  in_charge_id	      => in_charge_id,
13:32:30 380  	  in_charge_status_id => in_charge_status_id,
13:32:30 381  	  in_updated_by       => in_updated_by
13:32:30 382  	);
13:32:30 383  
13:32:30 384  	IF SQL%ROWCOUNT = 0 THEN
13:32:30 385  	  RAISE BAD_CHARGE_ID;
13:32:30 386  	END IF;
13:32:30 387  
13:32:30 388  EXCEPTION
13:32:30 389  WHEN BAD_CHARGE_ID THEN
13:32:30 390  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 391  	  SPROC_NAME, 'No such charge');
13:32:30 392  WHEN BAD_STATUS_ID THEN
13:32:30 393  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 394  	  SPROC_NAME, 'Bad status id');
13:32:30 395  WHEN OTHERS THEN
13:32:30 396  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 398  END UPDATE_CHARGE_STATUS;
13:32:30 399  
13:32:30 400  FUNCTION IS_CHARGE_COLLECTED (
13:32:30 401  /*
13:32:30 402  Throws:
13:32:30 403  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 404  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 405  Returns:
13:32:30 406  GLOBAL_CONST.TRUE if transaction collected,
13:32:30 407  GLOBAL_CONST.FALSE else
13:32:30 408  */
13:32:30 409  	in_charge_id IN NUMBER
13:32:30 410  ) RETURN NUMBER AS
13:32:30 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
13:32:30 412  -- VARIABLES
13:32:30 413  var_transaction_id NUMBER;
13:32:30 414  is_transaction_collected NUMBER;
13:32:30 415  -- EXCEPTIONS
13:32:30 416  BAD_CHARGE_ID	       EXCEPTION;
13:32:30 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
13:32:30 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
13:32:30 419  BEGIN
13:32:30 420  
13:32:30 421  	BEGIN
13:32:30 422  	  SELECT
13:32:30 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
13:32:30 424  	  FROM
13:32:30 425  	    CHARGE
13:32:30 426  	  WHERE
13:32:30 427  	    CHARGE.ID = in_charge_id;
13:32:30 428  	  EXCEPTION
13:32:30 429  	    WHEN NO_DATA_FOUND THEN
13:32:30 430  	      RAISE BAD_CHARGE_ID;
13:32:30 431  	END;
13:32:30 432  
13:32:30 433  	BEGIN
13:32:30 434  	  is_transaction_collected := PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(var_transaction_id);
13:32:30 435  	  EXCEPTION
13:32:30 436  	    WHEN OTHERS THEN
13:32:30 437  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
13:32:30 439  	END;
13:32:30 440  
13:32:30 441  	RETURN is_transaction_collected;
13:32:30 442  
13:32:30 443  EXCEPTION
13:32:30 444  WHEN BAD_CHARGE_ID THEN
13:32:30 445  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 446  	  SPROC_NAME, 'No such charge');
13:32:30 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
13:32:30 448  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
13:32:30 450  WHEN OTHERS THEN
13:32:30 451  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 453  END;
13:32:30 454  
13:32:30 455  PROCEDURE GET_COLLECTED_CHARGES (
13:32:30 456  /*
13:32:30 457  Throws exceptions:
13:32:30 458  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 459  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 460  */
13:32:30 461  	in_invoice_id  IN NUMBER,
13:32:30 462  	out_result_set OUT SYS_REFCURSOR
13:32:30 463  ) AS
13:32:30 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
13:32:30 465  -- VARIABLES
13:32:30 466  temp_invoice_id NUMBER;
13:32:30 467  -- EXCEPTIONS
13:32:30 468  BAD_INVOICE_ID  EXCEPTION;
13:32:30 469  BEGIN
13:32:30 470  
13:32:30 471  	-- Check that invoice exists
13:32:30 472  	BEGIN
13:32:30 473  	  SELECT
13:32:30 474  	    INVOICE.ID into temp_invoice_id
13:32:30 475  	  FROM
13:32:30 476  	    INVOICE
13:32:30 477  	  WHERE
13:32:30 478  	    INVOICE.ID = in_invoice_id;
13:32:30 479  	  EXCEPTION
13:32:30 480  	    WHEN NO_DATA_FOUND THEN
13:32:30 481  	      RAISE BAD_INVOICE_ID;
13:32:30 482  	END;
13:32:30 483  
13:32:30 484  	-- Select charges
13:32:30 485  	OPEN out_result_set FOR
13:32:30 486  	SELECT
13:32:30 487  	  CHARGE.ID,
13:32:30 488  	  CHARGE.TRANSACTION_ID,
13:32:30 489  	  CHARGE.INSTRUMENT_ID,
13:32:30 490  	  CHARGE.INSTRUMENT_TYPE_ID,
13:32:30 491  	  CHARGE.CHARGE_AMOUNT,
13:32:30 492  	  CHARGE.CREATE_DATE,
13:32:30 493  	  CHARGE.CREATED_BY,
13:32:30 494  	  CHARGE.INVOICE_ID
13:32:30 495  	FROM
13:32:30 496  	  CHARGE
13:32:30 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 498  	WHERE
13:32:30 499  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
13:32:30 501  	  AND PROCS_CHARGE_V20.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 502  
13:32:30 503  EXCEPTION
13:32:30 504  WHEN BAD_INVOICE_ID THEN
13:32:30 505  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 506  	  SPROC_NAME, 'No such invoice');
13:32:30 507  WHEN OTHERS THEN
13:32:30 508  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 510  END GET_COLLECTED_CHARGES;
13:32:30 511  
13:32:30 512  END PROCS_CHARGE_V20;
13:32:30 513  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.05
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
13:32:30   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
13:32:30   5  	in_updater	     IN VARCHAR2,
13:32:30   6  	in_duration_in_hours IN NUMBER
13:32:30   7  ) AS
13:32:30   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
13:32:30   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
13:32:30  10  var_lic_id	  LICENSE.ID%TYPE;
13:32:30  11  var_grace_start	  DATE;
13:32:30  12  var_grace_end	  DATE;
13:32:30  13  BEGIN
13:32:30  14  	SELECT
13:32:30  15  	  ID,
13:32:30  16  	  SUBSCRIPTION_ID,
13:32:30  17  	  START_DATE,
13:32:30  18  	  START_DATE + (in_duration_in_hours / 24)
13:32:30  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
13:32:30  20  	FROM
13:32:30  21  	  LICENSE
13:32:30  22  	WHERE
13:32:30  23  	  INVOICE_ID = in_invoice_id
13:32:30  24  	  AND ROWNUM <= 1;
13:32:30  25  
13:32:30  26  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30  27  	    in_license_id	    => var_lic_id,
13:32:30  28  	    in_updated_by	    => in_updater,
13:32:30  29  	    in_grace_start_date     => var_grace_start,
13:32:30  30  	    in_grace_end_date	    => var_grace_end,
13:32:30  31  	    in_entitlement_end_date => var_grace_end,
13:32:30  32  	    in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
13:32:30  33  	);
13:32:30  34  
13:32:30  35  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30  36  	    in_subscription_id	      => var_subs_id,
13:32:30  37  	    in_updated_by	      => in_updater,
13:32:30  38  	    in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD
13:32:30  39  	  );
13:32:30  40  END START_GRACE_BY_INVOICE_ID;
13:32:30  41  
13:32:30  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
13:32:30  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
13:32:30  44  	in_updater    IN VARCHAR2
13:32:30  45  ) AS
13:32:30  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
13:32:30  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
13:32:30  48  var_lic_id	  LICENSE.ID%TYPE;
13:32:30  49  var_lic_end_date	  DATE;
13:32:30  50  BEGIN
13:32:30  51  	SELECT
13:32:30  52  	  ID,
13:32:30  53  	  SUBSCRIPTION_ID,
13:32:30  54  	  END_DATE
13:32:30  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
13:32:30  56  	FROM
13:32:30  57  	  LICENSE
13:32:30  58  	WHERE
13:32:30  59  	  INVOICE_ID = in_invoice_id
13:32:30  60  	  AND ROWNUM <= 1;
13:32:30  61  
13:32:30  62  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30  63  	    in_license_id	    => var_lic_id,
13:32:30  64  	    in_updated_by	    => in_updater,
13:32:30  65  	    in_grace_end_date	    => SYSDATE,
13:32:30  66  	    in_entitlement_end_date => var_lic_end_date,
13:32:30  67  	    in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30  68  	);
13:32:30  69  
13:32:30  70  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30  71  	    in_subscription_id	      => var_subs_id,
13:32:30  72  	    in_updated_by	      => in_updater,
13:32:30  73  	    in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30  74  	);
13:32:30  75  END STOP_GRACE_BY_INVOICE_ID;
13:32:30  76  
13:32:30  77  
13:32:30  78  PROCEDURE START_SUBSCRIPTION_CREATION (
13:32:30  79  	in_group_id	      IN NUMBER,
13:32:30  80  	in_created_by	      IN VARCHAR2,
13:32:30  81  	in_offer_chain_id     IN NUMBER,
13:32:30  82  	in_instrument_type_id IN NUMBER,
13:32:30  83  	in_instrument_id      IN NUMBER,
13:32:30  84  	in_agent_id	      IN NUMBER,
13:32:30  85  	in_note 	      IN VARCHAR2,
13:32:30  86  	out_subscription_id   OUT NUMBER,
13:32:30  87  	out_invoice_id	      OUT NUMBER,
13:32:30  88  	out_new_license_id    OUT NUMBER,
13:32:30  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
13:32:30  90  ) AS
13:32:30  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
13:32:30  92  -- VARIABLES
13:32:30  93  var_account_id		 NUMBER;
13:32:30  94  var_account_status	 NUMBER;
13:32:30  95  var_offer_chain_status_id  NUMBER;
13:32:30  96  var_is_gift_certificate	 NUMBER;
13:32:30  97  var_is_for_redemption	 NUMBER;
13:32:30  98  var_same_offer_chains_num  NUMBER;
13:32:30  99  var_max_concurrent_subscrs NUMBER;
13:32:30 100  var_first_offer_id	 NUMBER;
13:32:30 101  var_new_invoice_id	 NUMBER;
13:32:30 102  var_new_subscription_id	 NUMBER;
13:32:30 103  var_date			 DATE := SYSDATE;
13:32:30 104  var_account_tax_exempt_id  VARCHAR2(255);
13:32:30 105  var_concur_subscription_id NUMBER;
13:32:30 106  -- EXCEPTIONS
13:32:30 107  BAD_GROUP_ID		    EXCEPTION;
13:32:30 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
13:32:30 109  BAD_OFFER_CHAIN		    EXCEPTION;
13:32:30 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
13:32:30 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
13:32:30 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
13:32:30 113  LIMIT_REACHED		    EXCEPTION;
13:32:30 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
13:32:30 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
13:32:30 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
13:32:30 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
13:32:30 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
13:32:30 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
13:32:30 120  
13:32:30 121  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 122  BEGIN
13:32:30 123  
13:32:30 124  	-- Get account id and status
13:32:30 125  	BEGIN
13:32:30 126  	  SELECT
13:32:30 127  	    ACCOUNT.ID,
13:32:30 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
13:32:30 129  	    ACCOUNT.TAX_EXEMPT_ID
13:32:30 130  	    into
13:32:30 131  	    var_account_id,
13:32:30 132  	    var_account_status,
13:32:30 133  	    var_account_tax_exempt_id
13:32:30 134  	  FROM
13:32:30 135  	    ACCOUNT
13:32:30 136  	  WHERE
13:32:30 137  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:30 138  	  EXCEPTION
13:32:30 139  	  WHEN NO_DATA_FOUND THEN
13:32:30 140  	    RAISE BAD_GROUP_ID;
13:32:30 141  	END;
13:32:30 142  
13:32:30 143  	-- Could not create subscription for disabled account
13:32:30 144  	IF var_account_status = GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
13:32:30 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
13:32:30 146  	END IF;
13:32:30 147  
13:32:30 148  	-- Get offer chain status
13:32:30 149  	BEGIN
13:32:30 150  	  SELECT
13:32:30 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
13:32:30 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
13:32:30 153  	    into
13:32:30 154  	    var_offer_chain_status_id,
13:32:30 155  	    var_is_gift_certificate
13:32:30 156  	  FROM
13:32:30 157  	    OFFER_CHAIN
13:32:30 158  	  WHERE
13:32:30 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:30 160  
13:32:30 161  	  EXCEPTION
13:32:30 162  	    WHEN NO_DATA_FOUND THEN
13:32:30 163  	      RAISE BAD_OFFER_CHAIN;
13:32:30 164  	END;
13:32:30 165  
13:32:30 166  	-- Could not subscribe to inactive/disabled offer chain
13:32:30 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
13:32:30 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
13:32:30 169  	END IF;
13:32:30 170  
13:32:30 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
13:32:30 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
13:32:30 174  	END IF;
13:32:30 175  
13:32:30 176  	-- check if the OC is for Redemption:
13:32:30 177  	SELECT
13:32:30 178  	  COUNT(*) into var_is_for_redemption
13:32:30 179  	FROM
13:32:30 180  	  OFFER_CHAIN_ELIGIBILITY
13:32:30 181  	WHERE
13:32:30 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
13:32:30 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
13:32:30 185  
13:32:30 186  	IF var_is_for_redemption > 0 THEN
13:32:30 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
13:32:30 188  	END IF;
13:32:30 189  
13:32:30 190  	SELECT
13:32:30 191  	  COUNT(*) into var_same_offer_chains_num
13:32:30 192  	FROM
13:32:30 193  	  SUBSCRIPTION
13:32:30 194  	WHERE
13:32:30 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:30 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 199  
13:32:30 200  	-- ELIGIBILITY LOGIC CHANGED TO:
13:32:30 201  	-- FOR EACH offer chain eligibility rule in OC:
13:32:30 202  	--   IF offer chain eligibility rule fails:
13:32:30 203  	--     deny purchase;
13:32:30 204  	--   END IF
13:32:30 205  	-- END FOR
13:32:30 206  	-- FOR EACH product eligibility rule in OC:
13:32:30 207  	--   IF product eligibilty rule fails:
13:32:30 208  	--     deny purchase;
13:32:30 209  	--   END IF
13:32:30 210  	-- END FOR
13:32:30 211  	-- allow purchase;
13:32:30 212  
13:32:30 213  	-- if user have any active existing subscriptions to the offer chain
13:32:30 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
13:32:30 215  	-- then deny purchase
13:32:30 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
13:32:30 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V20.INFINITY
13:32:30 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
13:32:30 219  	  -- Find first concurrent subscription id:
13:32:30 220  	  SELECT
13:32:30 221  	    ID into var_concur_subscription_id
13:32:30 222  	  FROM (
13:32:30 223  	    SELECT
13:32:30 224  	      ID
13:32:30 225  	    FROM
13:32:30 226  	      SUBSCRIPTION
13:32:30 227  	    WHERE
13:32:30 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:30 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:30 232  	    ORDER BY
13:32:30 233  	      ID
13:32:30 234  	  )
13:32:30 235  	  WHERE
13:32:30 236  	    ROWNUM <= 1;
13:32:30 237  	  RAISE LIMIT_REACHED;
13:32:30 238  	END IF;
13:32:30 239  
13:32:30 240  	-- if user does not have any active existing subscriptions to the offer chain
13:32:30 241  	-- and if product from the offer chain is already owned from another offer chain
13:32:30 242  	-- then deny purchase
13:32:30 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V20.FALSE) THEN
13:32:30 244  	  FOR f_account_offer_chains IN (
13:32:30 245  	    SELECT DISTINCT
13:32:30 246  	      OFFER_CHAIN_ID
13:32:30 247  	    FROM
13:32:30 248  	      SUBSCRIPTION
13:32:30 249  	    WHERE
13:32:30 250  	      ACCOUNT_ID = var_account_id
13:32:30 251  	      AND (
13:32:30 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
13:32:30 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:30 255  	  )
13:32:30 256  	  LOOP
13:32:30 257  	    IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(
13:32:30 258  	      in_offer_chain_1	       => in_offer_chain_id,
13:32:30 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
13:32:30 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V20.TRUE
13:32:30 261  	    ) = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 262  
13:32:30 263  	      -- Find first concurrent subscription id:
13:32:30 264  	      SELECT
13:32:30 265  		ID into var_concur_subscription_id
13:32:30 266  	      FROM (
13:32:30 267  		SELECT
13:32:30 268  		  ID
13:32:30 269  		FROM
13:32:30 270  		  SUBSCRIPTION
13:32:30 271  		WHERE
13:32:30 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:30 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
13:32:30 274  		  AND (
13:32:30 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
13:32:30 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:30 278  		ORDER BY
13:32:30 279  		  ID
13:32:30 280  	      )
13:32:30 281  	      WHERE
13:32:30 282  		ROWNUM <= 1;
13:32:30 283  
13:32:30 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
13:32:30 285  	    END IF;
13:32:30 286  	  END LOOP;
13:32:30 287  	END IF;
13:32:30 288  
13:32:30 289  	BEGIN
13:32:30 290  	  PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
13:32:30 291  	  EXCEPTION
13:32:30 292  	    WHEN OTHERS THEN
13:32:30 293  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
13:32:30 295  	END;
13:32:30 296  
13:32:30 297  	BEGIN
13:32:30 298  	  PROCS_INVOICE_V20.CREATE_INVOICE(
13:32:30 299  	    in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
13:32:30 300  	    in_created_by     => in_created_by,
13:32:30 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
13:32:30 302  	    out_invoice_id    => var_new_invoice_id
13:32:30 303  	  );
13:32:30 304  	  EXCEPTION
13:32:30 305  	    WHEN OTHERS THEN
13:32:30 306  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 307  	      RAISE CAN_NOT_CREATE_INVOICE;
13:32:30 308  	END;
13:32:30 309  
13:32:30 310  	BEGIN
13:32:30 311  	  PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
13:32:30 312  	    in_invoice_id => var_new_invoice_id,
13:32:30 313  	    in_offer_id   => var_first_offer_id,
13:32:30 314  	    in_created_by => in_created_by
13:32:30 315  	  );
13:32:30 316  	  EXCEPTION
13:32:30 317  	    WHEN OTHERS THEN
13:32:30 318  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
13:32:30 320  	END;
13:32:30 321  
13:32:30 322  	PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION(
13:32:30 323  	  out_subscription_id	    => var_new_subscription_id,
13:32:30 324  	  in_account_id 	    => var_account_id,
13:32:30 325  	  in_purchase_date	    => var_date,
13:32:30 326  	  in_offer_chain_id	    => in_offer_chain_id,
13:32:30 327  	  in_created_by 	    => in_created_by,
13:32:30 328  	  in_instrument_type_id     => in_instrument_type_id,
13:32:30 329  	  in_instrument_id	    => in_instrument_id,
13:32:30 330  	  in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 331  	);
13:32:30 332  
13:32:30 333  	BEGIN
13:32:30 334  	  PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:30 335  	    in_subscription_id => var_new_subscription_id,
13:32:30 336  	    in_agent_id        => in_agent_id,
13:32:30 337  	    in_note	       => in_note,
13:32:30 338  	    in_created_by      => in_created_by
13:32:30 339  	  );
13:32:30 340  	  EXCEPTION
13:32:30 341  	   WHEN OTHERS THEN
13:32:30 342  	     EXCEPTION_MESSAGE := SQLERRM;
13:32:30 343  	     RAISE CAN_NOT_CREATE_NOTE;
13:32:30 344  	END;
13:32:30 345  
13:32:30 346  	BEGIN
13:32:30 347  	  PROCS_LICENSE_V20.CREATE_LICENSE(
13:32:30 348  	    in_status_id		=> GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
13:32:30 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 350  	    in_start_date		=> var_date,
13:32:30 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
13:32:30 352  	    in_offer_id 		=> var_first_offer_id,
13:32:30 353  	    in_subscription_id		=> var_new_subscription_id,
13:32:30 354  	    in_invoice_id		=> var_new_invoice_id,
13:32:30 355  	    in_created_by		=> in_created_by,
13:32:30 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V20.FALSE,
13:32:30 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
13:32:30 358  	    in_current_offer_recurr_num => 1,
13:32:30 359  	    out_license_id		=> out_new_license_id
13:32:30 360  	  );
13:32:30 361  	  EXCEPTION
13:32:30 362  	    WHEN OTHERS THEN
13:32:30 363  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 364  	      RAISE CAN_NOT_CREATE_LICENSE;
13:32:30 365  	END;
13:32:30 366  
13:32:30 367  	out_subscription_id := var_new_subscription_id;
13:32:30 368  	out_invoice_id := var_new_invoice_id;
13:32:30 369  
13:32:30 370  EXCEPTION
13:32:30 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
13:32:30 372  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 373  	  SPROC_NAME, 'Offer chain is not active');
13:32:30 374  WHEN LIMIT_REACHED THEN
13:32:30 375  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
13:32:30 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
13:32:30 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
13:32:30 378  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
13:32:30 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
13:32:30 381  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
13:32:30 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
13:32:30 384  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
13:32:30 386  WHEN BAD_OFFER_CHAIN THEN
13:32:30 387  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 388  	  SPROC_NAME, 'No such offer chain');
13:32:30 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
13:32:30 390  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
13:32:30 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
13:32:30 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
13:32:30 393  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
13:32:30 395  WHEN CAN_NOT_CREATE_INVOICE THEN
13:32:30 396  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
13:32:30 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
13:32:30 399  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
13:32:30 401  WHEN CAN_NOT_CREATE_LICENSE THEN
13:32:30 402  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
13:32:30 404  WHEN BAD_GROUP_ID THEN
13:32:30 405  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 406  	  SPROC_NAME, 'Bad group id');
13:32:30 407  WHEN CAN_NOT_CREATE_NOTE THEN
13:32:30 408  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
13:32:30 410  WHEN OTHERS THEN
13:32:30 411  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 413  END START_SUBSCRIPTION_CREATION;
13:32:30 414  
13:32:30 415  /******************************************************************************/
13:32:30 416  
13:32:30 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
13:32:30 418  	in_subscription_id    IN NUMBER,
13:32:30 419  	in_invoice_id	      IN NUMBER,
13:32:30 420  	in_instrument_type_id IN NUMBER,
13:32:30 421  	in_instrument_id      IN NUMBER,
13:32:30 422  	in_created_by	      IN VARCHAR2
13:32:30 423  ) AS
13:32:30 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
13:32:30 425  -- VARIABLES
13:32:30 426  var_invoice_amount     NUMBER(10, 2);
13:32:30 427  var_new_transaction_id NUMBER;
13:32:30 428  var_new_charge_id      NUMBER;
13:32:30 429  -- EXCEPTIONS
13:32:30 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
13:32:30 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
13:32:30 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
13:32:30 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
13:32:30 434  
13:32:30 435  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 436  BEGIN
13:32:30 437  
13:32:30 438  	-- Calculate invoice amount ( + discounts, taxes)
13:32:30 439  	BEGIN
13:32:30 440  	  PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(
13:32:30 441  	    in_invoice_id => in_invoice_id,
13:32:30 442  	    out_amount	  => var_invoice_amount
13:32:30 443  	  );
13:32:30 444  	  EXCEPTION
13:32:30 445  	   WHEN OTHERS THEN
13:32:30 446  	     EXCEPTION_MESSAGE := SQLERRM;
13:32:30 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
13:32:30 448  	END;
13:32:30 449  
13:32:30 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT
13:32:30 451  	  AND var_invoice_amount > 0 THEN
13:32:30 452  	  RAISE CAN_NOT_USE_FCINSTR;
13:32:30 453  	END IF;
13:32:30 454  
13:32:30 455  	IF var_invoice_amount = 0 THEN
13:32:30 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
13:32:30 457  	  PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
13:32:30 458  	    in_invoice_id		   => in_invoice_id,
13:32:30 459  	    in_updated_by		   => in_created_by,
13:32:30 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V20.INVOICE_CLOSED
13:32:30 461  	  );
13:32:30 462  	ELSE
13:32:30 463  	  -- Create transaction and charge
13:32:30 464  	  BEGIN
13:32:30 465  	    PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 466  	      in_transaction_id 	=> NULL,
13:32:30 467  	      in_status_id		=> GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
13:32:30 468  	      in_amount 		=> var_invoice_amount,
13:32:30 469  	      in_created_by		=> in_created_by,
13:32:30 470  	      in_order_id		=> NULL,
13:32:30 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
13:32:30 472  	      out_transaction_id	=> var_new_transaction_id
13:32:30 473  	    );
13:32:30 474  	    EXCEPTION
13:32:30 475  	      WHEN OTHERS THEN
13:32:30 476  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 478  	  END;
13:32:30 479  
13:32:30 480  	  BEGIN
13:32:30 481  	    PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 482  	      in_invoice_id	    => in_invoice_id,
13:32:30 483  	      in_transaction_id     => var_new_transaction_id,
13:32:30 484  	      in_instrument_type_id => in_instrument_type_id,
13:32:30 485  	      in_instrument_id	    => in_instrument_id,
13:32:30 486  	      in_charge_amount	    => var_invoice_amount,
13:32:30 487  	      in_created_by	    => in_created_by,
13:32:30 488  	      in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 489  	      out_charge_id	    => var_new_charge_id
13:32:30 490  	    );
13:32:30 491  	    EXCEPTION
13:32:30 492  	      WHEN OTHERS THEN
13:32:30 493  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 494  		RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 495  	  END;
13:32:30 496  	END IF;
13:32:30 497  
13:32:30 498  EXCEPTION
13:32:30 499  WHEN CAN_NOT_USE_FCINSTR THEN
13:32:30 500  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
13:32:30 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
13:32:30 503  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
13:32:30 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 506  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 508  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 509  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 511  WHEN OTHERS THEN
13:32:30 512  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 514  END FINALIZE_SUBSCRIPTION_CREATION;
13:32:30 515  
13:32:30 516  /******************************************************************************/
13:32:30 517  
13:32:30 518  PROCEDURE SUSPEND_SUBSCRIPTION(
13:32:30 519  /*
13:32:30 520  Throws exceptions:
13:32:30 521  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 522  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 523  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 524  */
13:32:30 525  	  in_subs_id	IN NUMBER,
13:32:30 526  	  in_updated_by IN VARCHAR2
13:32:30 527  ) AS
13:32:30 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
13:32:30 529  var_subscription_status_id  NUMBER;
13:32:30 530  var_license_id		  NUMBER;
13:32:30 531  var_offer_id		  NUMBER;
13:32:30 532  var_license_start_date	  DATE;
13:32:30 533  var_license_end_date	  DATE;
13:32:30 534  
13:32:30 535  var_entitlement_dupration   VARCHAR2(30);
13:32:30 536  var_d_entitlement_dupration NUMBER;
13:32:30 537  
13:32:30 538  var_ym_interval INTERVAL YEAR TO MONTH;
13:32:30 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
13:32:30 540  
13:32:30 541  -- EXCEPTIONS
13:32:30 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
13:32:30 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
13:32:30 544  NO_LICENSE_FOUND	      EXCEPTION;
13:32:30 545  NO_OFFER_FOUND	      EXCEPTION;
13:32:30 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:30 547  BEGIN
13:32:30 548  	-- TODO: Finish this prcedure (in Phase II)
13:32:30 549  
13:32:30 550  	-- Get subscription by id. FAULT if no such subscription.
13:32:30 551  	-- begin TX
13:32:30 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
13:32:30 553  	--   Set status to PROCESSED.
13:32:30 554  	--   updated record.
13:32:30 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
13:32:30 556  	--   new subscription status is SUSPENDED.
13:32:30 557  	--   suspend_date is now.
13:32:30 558  	--   update subscription record.
13:32:30 559  	-- end TX
13:32:30 560  
13:32:30 561  	BEGIN
13:32:30 562  	  SELECT
13:32:30 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
13:32:30 564  	  FROM
13:32:30 565  	    SUBSCRIPTION
13:32:30 566  	  WHERE
13:32:30 567  	    SUBSCRIPTION.ID = in_subs_id;
13:32:30 568  	  EXCEPTION
13:32:30 569  	  WHEN NO_DATA_FOUND THEN
13:32:30 570  	    RAISE BAD_SUBSCRIPTION_ID;
13:32:30 571  	END;
13:32:30 572  
13:32:30 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE THEN
13:32:30 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
13:32:30 575  	END IF;
13:32:30 576  
13:32:30 577  	BEGIN
13:32:30 578  	  SELECT
13:32:30 579  	    LICENSE.ID,
13:32:30 580  	    LICENSE.OFFER_ID,
13:32:30 581  	    LICENSE.START_DATE
13:32:30 582  	    into
13:32:30 583  	    var_license_id,
13:32:30 584  	    var_offer_id,
13:32:30 585  	    var_license_start_date
13:32:30 586  	  FROM
13:32:30 587  	    LICENSE
13:32:30 588  	  WHERE
13:32:30 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
13:32:30 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE;
13:32:30 591  	  EXCEPTION
13:32:30 592  	  WHEN NO_DATA_FOUND THEN
13:32:30 593  	    RAISE NO_LICENSE_FOUND;
13:32:30 594  	END;
13:32:30 595  
13:32:30 596  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 597  	  in_license_id        => var_license_id,
13:32:30 598  	  in_updated_by        => in_updated_by,
13:32:30 599  	  in_license_status_id => GLOBAL_STATUSES_V20.LICENSE_CLOSED
13:32:30 600  	);
13:32:30 601  
13:32:30 602  	BEGIN
13:32:30 603  	  SELECT
13:32:30 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
13:32:30 605  	  FROM
13:32:30 606  	    OFFER
13:32:30 607  	  WHERE
13:32:30 608  	    OFFER.ID = var_offer_id;
13:32:30 609  	  EXCEPTION
13:32:30 610  	  WHEN NO_DATA_FOUND THEN
13:32:30 611  	    RAISE NO_OFFER_FOUND;
13:32:30 612  	END;
13:32:30 613  
13:32:30 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
13:32:30 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
13:32:30 616  
13:32:30 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
13:32:30 618  
13:32:30 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
13:32:30 620  
13:32:30 621  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30 622  	  in_subscription_id	       => in_subs_id,
13:32:30 623  	  in_updated_by 	       => in_updated_by,
13:32:30 624  	  in_suspend_date	       => SYSDATE,
13:32:30 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED,
13:32:30 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
13:32:30 627  	);
13:32:30 628  
13:32:30 629  EXCEPTION
13:32:30 630  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 631  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 632  	  SPROC_NAME, 'No such subscription');
13:32:30 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
13:32:30 634  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 635  	  SPROC_NAME, 'Subscription is not active');
13:32:30 636  WHEN NO_LICENSE_FOUND THEN
13:32:30 637  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
13:32:30 639  WHEN NO_OFFER_FOUND THEN
13:32:30 640  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
13:32:30 642  WHEN OTHERS THEN
13:32:30 643  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 645  END SUSPEND_SUBSCRIPTION;
13:32:30 646  
13:32:30 647  /******************************************************************************/
13:32:30 648  
13:32:30 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
13:32:30 650  	in_subscription_id IN  NUMBER,
13:32:30 651  	in_updated_by	   IN  VARCHAR2
13:32:30 652  ) AS
13:32:30 653  BEGIN
13:32:30 654  	-- TODO: finish this function (in Phase II)
13:32:30 655  	NULL;
13:32:30 656  END REACTIVATE_SUBSCRIPTION;
13:32:30 657  
13:32:30 658  /******************************************************************************/
13:32:30 659  
13:32:30 660  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:30 661  /*
13:32:30 662  Throws exceptions:
13:32:30 663  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 664  */
13:32:30 665  	  in_subscription_id  IN  NUMBER,
13:32:30 666  	  out_result_set      OUT SYS_REFCURSOR
13:32:30 667  ) AS
13:32:30 668  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
13:32:30 669  -- VARIABLES
13:32:30 670  temp_subscription_id NUMBER;
13:32:30 671  -- EXCEPTIONS
13:32:30 672  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 673  BEGIN
13:32:30 674  	-- Find subscription by id
13:32:30 675  	-- Return its details
13:32:30 676  
13:32:30 677  	BEGIN
13:32:30 678  	  SELECT
13:32:30 679  	    SUBSCRIPTION.ID into temp_subscription_id
13:32:30 680  	  FROM
13:32:30 681  	    SUBSCRIPTION
13:32:30 682  	  WHERE
13:32:30 683  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:30 684  	  EXCEPTION
13:32:30 685  	    WHEN NO_DATA_FOUND THEN
13:32:30 686  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:30 687  	END;
13:32:30 688  
13:32:30 689  	OPEN out_result_set FOR
13:32:30 690  	SELECT
13:32:30 691  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
13:32:30 692  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
13:32:30 693  	  SUBSCRIPTION.PURCHASE_DATE,
13:32:30 694  	  SUBSCRIPTION.SUSPEND_DATE,
13:32:30 695  	  SUBSCRIPTION.REACTIVATION_DATE,
13:32:30 696  	  SUBSCRIPTION.CANCELLATION_DATE,
13:32:30 697  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
13:32:30 698  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
13:32:30 699  	  OFFER_CHAIN.NAME,
13:32:30 700  	  OFFER_CHAIN.DESCRIPTION,
13:32:30 701  	  OFFER_CHAIN.PRODUCT_URI,
13:32:30 702  	  SUBSCRIPTION.INSTRUMENT_ID,
13:32:30 703  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
13:32:30 704  	  PROCS_SUBSCRIPTION_V20.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
13:32:30 705  	  PROCS_SUBSCRIPTION_V20.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
13:32:30 706  	  PROCS_SUBSCRIPTION_V20.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
13:32:30 707  	  PROCS_SUBSCRIPTION_V20.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
13:32:30 708  	  (
13:32:30 709  	    SELECT
13:32:30 710  	      ACCOUNT.GROUP_ID
13:32:30 711  	      FROM ACCOUNT
13:32:30 712  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
13:32:30 713  	  ) as "GROUP_ID",
13:32:30 714  	  (
13:32:30 715  	    SELECT
13:32:30 716  	      MAX(ENTITLEMENT_END_DATE)
13:32:30 717  	      FROM LICENSE
13:32:30 718  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 719  	  )
13:32:30 720  	  as "ENT_END_DATE",
13:32:30 721  	  (
13:32:30 722  	    SELECT
13:32:30 723  	      MIN(START_DATE)
13:32:30 724  	      FROM LICENSE
13:32:30 725  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 726  	  )
13:32:30 727  	  as "ENT_START_DATE",
13:32:30 728  	  PROCS_SUBSCRIPTION_V20.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
13:32:30 729  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
13:32:30 730  	  GROUP_ACCOUNT.ID GA_ID,
13:32:30 731  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
13:32:30 732  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
13:32:30 733  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
13:32:30 734  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
13:32:30 735  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
13:32:30 736  	  GROUP_ACCOUNT.PHONE GA_PHONE,
13:32:30 737  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
13:32:30 738  	  GROUP_ACCOUNT.SEATS GA_SEATS,
13:32:30 739  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
13:32:30 740  	  GROUP_ACCOUNT.IP GA_IP,
13:32:30 741  	  PROCS_SUBSCRIPTION_V20.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
13:32:30 742  	  PROCS_ACCOUNT_V20.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
13:32:30 743  	  PROCS_ACCOUNT_V20.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
13:32:30 744  	FROM
13:32:30 745  	  SUBSCRIPTION
13:32:30 746  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 747  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
13:32:30 748  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
13:32:30 749  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
13:32:30 750  	WHERE
13:32:30 751  	  SUBSCRIPTION.ID = in_subscription_id;
13:32:30 752  
13:32:30 753  EXCEPTION
13:32:30 754  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 755  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 756  	  SPROC_NAME, 'No such subscription');
13:32:30 757  WHEN OTHERS THEN
13:32:30 758  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 759  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 760  END GET_SUBSCRIPTION_INFO;
13:32:30 761  
13:32:30 762  /******************************************************************************/
13:32:30 763  
13:32:30 764  PROCEDURE GET_SUBSCRIPTION_INVOICES (
13:32:30 765  /*
13:32:30 766  Throws exceptions:
13:32:30 767  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 768  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 769  */
13:32:30 770  	in_subscription_id  IN	NUMBER,
13:32:30 771  	out_result_set	    OUT SYS_REFCURSOR
13:32:30 772  ) AS
13:32:30 773  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
13:32:30 774  temp_subscription_id NUMBER;
13:32:30 775  BEGIN
13:32:30 776  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
13:32:30 777  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
13:32:30 778  	--   for each license
13:32:30 779  	--     get associated invoice
13:32:30 780  	--     add to results list
13:32:30 781  	--   end loop
13:32:30 782  	-- end
13:32:30 783  
13:32:30 784  	SELECT
13:32:30 785  	  SUBSCRIPTION.ID into temp_subscription_id
13:32:30 786  	FROM
13:32:30 787  	  SUBSCRIPTION
13:32:30 788  	WHERE
13:32:30 789  	  SUBSCRIPTION.ID = in_subscription_id;
13:32:30 790  
13:32:30 791  	OPEN out_result_set FOR
13:32:30 792  	SELECT
13:32:30 793  	  INVOICE.ID,
13:32:30 794  	  INVOICE.INVOICE_STATUS_ID,
13:32:30 795  	  INVOICE.CREATE_DATE,
13:32:30 796  	  INVOICE.CREATED_BY,
13:32:30 797  	  INVOICE.UPDATE_DATE,
13:32:30 798  	  INVOICE.UPDATED_BY,
13:32:30 799  	  INVOICE.TAX_EXEMPT_ID
13:32:30 800  	FROM
13:32:30 801  	  LICENSE
13:32:30 802  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:30 803  	WHERE
13:32:30 804  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
13:32:30 805  
13:32:30 806  EXCEPTION
13:32:30 807  WHEN NO_DATA_FOUND THEN
13:32:30 808  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 809  	  SPROC_NAME, 'Could not find subscription with given ID');
13:32:30 810  WHEN OTHERS THEN
13:32:30 811  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 812  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 813  END GET_SUBSCRIPTION_INVOICES;
13:32:30 814  
13:32:30 815  /******************************************************************************/
13:32:30 816  
13:32:30 817  PROCEDURE GET_SUBSCRIPTION_NOTES (
13:32:30 818  /*
13:32:30 819  Throws exceptions:
13:32:30 820  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 821  */
13:32:30 822  	in_subscription_id  IN	NUMBER,
13:32:30 823  	out_result_set	    OUT SYS_REFCURSOR
13:32:30 824  ) AS
13:32:30 825  -- VARIABLES
13:32:30 826  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
13:32:30 827  temp_subscription_id NUMBER;
13:32:30 828  -- EXCEPTIONS
13:32:30 829  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 830  BEGIN
13:32:30 831  
13:32:30 832  	-- Check that subscription exists
13:32:30 833  	BEGIN
13:32:30 834  	  SELECT
13:32:30 835  	    SUBSCRIPTION.ID into temp_subscription_id
13:32:30 836  	  FROM
13:32:30 837  	    SUBSCRIPTION
13:32:30 838  	  WHERE
13:32:30 839  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:30 840  	  EXCEPTION
13:32:30 841  	    WHEN NO_DATA_FOUND THEN
13:32:30 842  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:30 843  	END;
13:32:30 844  
13:32:30 845  	OPEN out_result_set FOR
13:32:30 846  	SELECT
13:32:30 847  	  SUBSCRIPTION_NOTE.NOTE,
13:32:30 848  	  SUBSCRIPTION_NOTE.CREATED_BY,
13:32:30 849  	  SUBSCRIPTION_NOTE.CREATE_DATE
13:32:30 850  	FROM
13:32:30 851  	  SUBSCRIPTION_NOTE
13:32:30 852  	WHERE
13:32:30 853  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 854  	ORDER BY
13:32:30 855  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
13:32:30 856  
13:32:30 857  EXCEPTION
13:32:30 858  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 859  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 860  	  SPROC_NAME, 'No such subscription');
13:32:30 861  WHEN OTHERS THEN
13:32:30 862  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 863  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 864  END GET_SUBSCRIPTION_NOTES;
13:32:30 865  
13:32:30 866  /******************************************************************************/
13:32:30 867  
13:32:30 868  PROCEDURE ANNOTATE_SUBSCRIPTION (
13:32:30 869  /*
13:32:30 870  Throws exceptions:
13:32:30 871  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 872  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 873  */
13:32:30 874  	in_subscription_id IN  NUMBER,
13:32:30 875  	in_agent_id	   IN  NUMBER,
13:32:30 876  	in_note 	   IN  VARCHAR2,
13:32:30 877  	in_created_by	   IN  VARCHAR2
13:32:30 878  ) AS
13:32:30 879  -- VARIABLES
13:32:30 880  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
13:32:30 881  temp_subscription_id     NUMBER;
13:32:30 882  var_subscription_note_id NUMBER;
13:32:30 883  -- EXCEPTIONS
13:32:30 884  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 885  BEGIN
13:32:30 886  
13:32:30 887  	-- Check that subscription exists
13:32:30 888  	BEGIN
13:32:30 889  	  SELECT
13:32:30 890  	    SUBSCRIPTION.ID into temp_subscription_id
13:32:30 891  	  FROM
13:32:30 892  	    SUBSCRIPTION
13:32:30 893  	  WHERE
13:32:30 894  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:30 895  	  EXCEPTION
13:32:30 896  	    WHEN NO_DATA_FOUND THEN
13:32:30 897  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:30 898  	END;
13:32:30 899  
13:32:30 900  	PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION_NOTE(
13:32:30 901  	  inout_subscription_note_id => var_subscription_note_id,
13:32:30 902  	  in_agent_id		     => in_agent_id,
13:32:30 903  	  in_subscription_id	     => in_subscription_id,
13:32:30 904  	  in_note		     => in_note,
13:32:30 905  	  in_created_by 	     => in_created_by
13:32:30 906  	);
13:32:30 907  
13:32:30 908  EXCEPTION
13:32:30 909  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 910  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 911  	  SPROC_NAME, 'No such subscription');
13:32:30 912  WHEN OTHERS THEN
13:32:30 913  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 915  END ANNOTATE_SUBSCRIPTION;
13:32:30 916  
13:32:30 917  /******************************************************************************/
13:32:30 918  
13:32:30 919  PROCEDURE GET_CANCEL_REASONS (
13:32:30 920  	out_result_set	  OUT SYS_REFCURSOR
13:32:30 921  ) AS
13:32:30 922  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
13:32:30 923  BEGIN
13:32:30 924  	OPEN out_result_set FOR
13:32:30 925  	SELECT
13:32:30 926  	  SUBSCRIPTION_CANCEL_REASON.ID,
13:32:30 927  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
13:32:30 928  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
13:32:30 929  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
13:32:30 930  	FROM
13:32:30 931  	  SUBSCRIPTION_CANCEL_REASON;
13:32:30 932  
13:32:30 933  END GET_CANCEL_REASONS;
13:32:30 934  
13:32:30 935  /******************************************************************************/
13:32:30 936  
13:32:30 937  FUNCTION GET_RENEWAL_DATE (
13:32:30 938  /*
13:32:30 939  Throws exceptions:
13:32:30 940  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 941  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 942  */
13:32:30 943  	in_subscription_id in NUMBER
13:32:30 944  ) RETURN DATE AS
13:32:30 945  -- VARIABLES
13:32:30 946  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
13:32:30 947  var_subscription_status NUMBER;
13:32:30 948  var_licenses_count      NUMBER;
13:32:30 949  var_license_end_date    DATE;
13:32:30 950  var_last_offer_id       NUMBER;
13:32:30 951  var_offer_chain_id      NUMBER;
13:32:30 952  var_last_license_id     NUMBER;
13:32:30 953  var_current_offer_index NUMBER;
13:32:30 954  var_current_offer_recurr_num NUMBER;
13:32:30 955  var_offer_recurr_num    NUMBER;
13:32:30 956  -- EXCEPTIONS
13:32:30 957  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 958  NO_LICENSES_FOUND EXCEPTION;
13:32:30 959  BEGIN
13:32:30 960  
13:32:30 961  	-- Get subscription id and offer chain id
13:32:30 962  	BEGIN
13:32:30 963  	  SELECT
13:32:30 964  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
13:32:30 965  	    SUBSCRIPTION.OFFER_CHAIN_ID
13:32:30 966  	    into
13:32:30 967  	    var_subscription_status,
13:32:30 968  	    var_offer_chain_id
13:32:30 969  	  FROM
13:32:30 970  	    SUBSCRIPTION
13:32:30 971  	  WHERE
13:32:30 972  	    SUBSCRIPTION.ID = in_subscription_id;
13:32:30 973  	  EXCEPTION
13:32:30 974  	    WHEN NO_DATA_FOUND THEN
13:32:30 975  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:30 976  	END;
13:32:30 977  
13:32:30 978  	IF var_subscription_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE THEN
13:32:30 979  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
13:32:30 980  	  -- AND var_subscription_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED THEN
13:32:30 981  	  RETURN NULL;
13:32:30 982  	END IF;
13:32:30 983  
13:32:30 984  	BEGIN
13:32:30 985  	  SELECT
13:32:30 986  	    LICENSE_ID,
13:32:30 987  	    END_DATE,
13:32:30 988  	    OFFER_ID,
13:32:30 989  	    CURRENT_OFFER_INDEX,
13:32:30 990  	    CURRENT_OFFER_RECURR_NUM
13:32:30 991  	    into
13:32:30 992  	    var_last_license_id,
13:32:30 993  	    var_license_end_date,
13:32:30 994  	    var_last_offer_id,
13:32:30 995  	    var_current_offer_index,
13:32:30 996  	    var_current_offer_recurr_num
13:32:30 997  	  FROM
13:32:30 998  	    (
13:32:30 999  	      SELECT
13:32:30 1000  		 LICENSE.ID as "LICENSE_ID",
13:32:30 1001  		 LICENSE.END_DATE,
13:32:30 1002  		 LICENSE.OFFER_ID,
13:32:30 1003  		 LICENSE.CURRENT_OFFER_INDEX,
13:32:30 1004  		 LICENSE.CURRENT_OFFER_RECURR_NUM
13:32:30 1005  	       FROM
13:32:30 1006  		 LICENSE
13:32:30 1007  	       WHERE
13:32:30 1008  		 LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 1009  		 AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 1010  	       ORDER BY END_DATE DESC
13:32:30 1011  	     )
13:32:30 1012  	     INNER JOIN OFFER ON OFFER_ID = OFFER.ID
13:32:30 1013  	   WHERE
13:32:30 1014  	     ROWNUM <= 1;
13:32:30 1015  
13:32:30 1016  	   EXCEPTION
13:32:30 1017  	     WHEN NO_DATA_FOUND THEN
13:32:30 1018  	       -- RAISE NO_LICENSES_FOUND;
13:32:30 1019  	       RETURN NULL;
13:32:30 1020  	 END;
13:32:30 1021  
13:32:30 1022  	 SELECT
13:32:30 1023  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
13:32:30 1024  	 FROM
13:32:30 1025  	   OFFER_OFFER_CHAIN
13:32:30 1026  	 WHERE
13:32:30 1027  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
13:32:30 1028  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
13:32:30 1029  
13:32:30 1030  	 IF PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
13:32:30 1031  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
13:32:30 1032  	   -- There is no next offer for this subscription
13:32:30 1033  	   RETURN NULL;
13:32:30 1034  	 END IF;
13:32:30 1035  
13:32:30 1036  	 RETURN var_license_end_date;
13:32:30 1037  
13:32:30 1038  EXCEPTION
13:32:30 1039  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1040  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1041  	   SPROC_NAME, 'No such subscription');
13:32:30 1042  WHEN NO_LICENSES_FOUND THEN
13:32:30 1043  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1044  	   SPROC_NAME, 'No licenses found');
13:32:30 1045  WHEN OTHERS THEN
13:32:30 1046  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1047  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1048  END GET_RENEWAL_DATE;
13:32:30 1049  
13:32:30 1050  /******************************************************************************/
13:32:30 1051  
13:32:30 1052  FUNCTION GET_RECENT_CHARGE (
13:32:30 1053  /*
13:32:30 1054  Throws exceptions:
13:32:30 1055  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1056  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1057  */
13:32:30 1058  	 in_subscription_id IN NUMBER
13:32:30 1059  ) RETURN NUMBER AS
13:32:30 1060  -- VARIABLES
13:32:30 1061  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
13:32:30 1062  temp_subscription_id NUMBER;
13:32:30 1063  var_recent_charge    NUMBER(10,2);
13:32:30 1064  
13:32:30 1065  -- EXCEPTIONS
13:32:30 1066  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 1067  BEGIN
13:32:30 1068  
13:32:30 1069  	 BEGIN
13:32:30 1070  	   SELECT
13:32:30 1071  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 1072  	   FROM
13:32:30 1073  	     SUBSCRIPTION
13:32:30 1074  	   WHERE
13:32:30 1075  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1076  	   EXCEPTION
13:32:30 1077  	     WHEN NO_DATA_FOUND THEN
13:32:30 1078  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1079  	 END;
13:32:30 1080  
13:32:30 1081  	 BEGIN
13:32:30 1082  	   SELECT
13:32:30 1083  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
13:32:30 1084  	   FROM
13:32:30 1085  	     LICENSE
13:32:30 1086  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 1087  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:30 1088  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
13:32:30 1089  	   WHERE
13:32:30 1090  	     -- TODO: Review
13:32:30 1091  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_PROCESSED
13:32:30 1092  	     -- AND
13:32:30 1093  	     SUBSCRIPTION.ID = in_subscription_id
13:32:30 1094  	     AND CHARGE.CHARGE_AMOUNT >= 0
13:32:30 1095  	     AND ROWNUM <= 1
13:32:30 1096  	   ORDER BY
13:32:30 1097  	     LICENSE.ID ASC, CHARGE.ID DESC;
13:32:30 1098  	   EXCEPTION
13:32:30 1099  	     WHEN NO_DATA_FOUND THEN
13:32:30 1100  	       var_recent_charge := 0;
13:32:30 1101  	 END;
13:32:30 1102  
13:32:30 1103  	 RETURN var_recent_charge;
13:32:30 1104  
13:32:30 1105  EXCEPTION
13:32:30 1106  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1107  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1108  	   SPROC_NAME, 'No such subscription');
13:32:30 1109  WHEN OTHERS THEN
13:32:30 1110  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1111  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1112  END GET_RECENT_CHARGE;
13:32:30 1113  
13:32:30 1114  /******************************************************************************/
13:32:30 1115  
13:32:30 1116  FUNCTION GET_BILLING_CYCLE (
13:32:30 1117  	 in_subscription_id IN NUMBER
13:32:30 1118  ) RETURN VARCHAR2 AS
13:32:30 1119  -- VARIABLES
13:32:30 1120  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
13:32:30 1121  temp_subscription_id NUMBER;
13:32:30 1122  var_offer_duration   VARCHAR2(30);
13:32:30 1123  
13:32:30 1124  -- EXCEPTIONS
13:32:30 1125  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 1126  BEGIN
13:32:30 1127  
13:32:30 1128  	 BEGIN
13:32:30 1129  	   SELECT
13:32:30 1130  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 1131  	   FROM
13:32:30 1132  	     SUBSCRIPTION
13:32:30 1133  	   WHERE
13:32:30 1134  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1135  	   EXCEPTION
13:32:30 1136  	     WHEN NO_DATA_FOUND THEN
13:32:30 1137  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1138  	 END;
13:32:30 1139  
13:32:30 1140  	 SELECT
13:32:30 1141  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
13:32:30 1142  	 FROM
13:32:30 1143  	   LICENSE
13:32:30 1144  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 1145  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
13:32:30 1146  	 WHERE
13:32:30 1147  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_PROCESSED
13:32:30 1148  	   --AND
13:32:30 1149  	   SUBSCRIPTION.ID = in_subscription_id
13:32:30 1150  	   AND ROWNUM <= 1
13:32:30 1151  	 ORDER BY
13:32:30 1152  	   LICENSE.ID ASC;
13:32:30 1153  
13:32:30 1154  	 RETURN var_offer_duration;
13:32:30 1155  
13:32:30 1156  EXCEPTION
13:32:30 1157  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1158  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1159  	   SPROC_NAME, 'No such subscription');
13:32:30 1160  WHEN OTHERS THEN
13:32:30 1161  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1163  END GET_BILLING_CYCLE;
13:32:30 1164  
13:32:30 1165  /******************************************************************************/
13:32:30 1166  
13:32:30 1167  PROCEDURE REFUND_SUBSCRIPTION (
13:32:30 1168  /*
13:32:30 1169  Throws exceptions:
13:32:30 1170  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1171  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1172  */
13:32:30 1173  	 in_subscription_id IN NUMBER,
13:32:30 1174  	 in_invoice_id	    IN NUMBER,
13:32:30 1175  	 in_refund_amount   IN NUMBER,
13:32:30 1176  	 in_note	    IN VARCHAR2,
13:32:30 1177  	 in_created_by	    IN VARCHAR2,
13:32:30 1178  	 out_charge_id	    OUT NUMBER
13:32:30 1179  ) AS
13:32:30 1180  -- VARIABLES
13:32:30 1181  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
13:32:30 1182  var_invoice_status_id  NUMBER;
13:32:30 1183  var_account_id	      NUMBER;
13:32:30 1184  var_account_status_id  NUMBER;
13:32:30 1185  var_new_transaction_id NUMBER;
13:32:30 1186  var_instrument_type_id NUMBER;
13:32:30 1187  var_instrument_id      NUMBER;
13:32:30 1188  var_new_charge_id      NUMBER;
13:32:30 1189  var_invoice_amount     NUMBER(10,2);
13:32:30 1190  var_refunds_before     NUMBER(10,2);
13:32:30 1191  var_charges_amount     NUMBER(10,2);
13:32:30 1192  -- EXCEPTIONS
13:32:30 1193  BAD_SUBSCRIPTION_ID	     EXCEPTION;
13:32:30 1194  ACCOUNT_IS_FROZEN	     EXCEPTION;
13:32:30 1195  BAD_INVOICE_ID		     EXCEPTION;
13:32:30 1196  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
13:32:30 1197  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
13:32:30 1198  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
13:32:30 1199  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
13:32:30 1200  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
13:32:30 1201  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
13:32:30 1202  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
13:32:30 1203  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
13:32:30 1204  EXCEPTION_MESSAGE	      VARCHAR2(1024);
13:32:30 1205  BEGIN
13:32:30 1206  
13:32:30 1207  	 BEGIN
13:32:30 1208  	   SELECT
13:32:30 1209  	     SUBSCRIPTION.INSTRUMENT_ID,
13:32:30 1210  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
13:32:30 1211  	     SUBSCRIPTION.ACCOUNT_ID
13:32:30 1212  	     into
13:32:30 1213  	     var_instrument_id,
13:32:30 1214  	     var_instrument_type_id,
13:32:30 1215  	     var_account_id
13:32:30 1216  	   FROM
13:32:30 1217  	     SUBSCRIPTION
13:32:30 1218  	   WHERE
13:32:30 1219  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1220  	   EXCEPTION
13:32:30 1221  	     WHEN NO_DATA_FOUND THEN
13:32:30 1222  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1223  	 END;
13:32:30 1224  
13:32:30 1225  	 -- Check account status. It should not to be frozen
13:32:30 1226  	 SELECT
13:32:30 1227  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
13:32:30 1228  	 FROM
13:32:30 1229  	   ACCOUNT
13:32:30 1230  	 WHERE
13:32:30 1231  	   ACCOUNT.ID = var_account_id;
13:32:30 1232  
13:32:30 1233  	 IF var_account_status_id = GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
13:32:30 1234  	   RAISE ACCOUNT_IS_FROZEN;
13:32:30 1235  	 END IF;
13:32:30 1236  
13:32:30 1237  	 BEGIN
13:32:30 1238  	   SELECT
13:32:30 1239  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
13:32:30 1240  	   FROM
13:32:30 1241  	     INVOICE
13:32:30 1242  	   WHERE
13:32:30 1243  	     INVOICE.ID = in_invoice_id;
13:32:30 1244  	   EXCEPTION
13:32:30 1245  	     WHEN NO_DATA_FOUND THEN
13:32:30 1246  	       RAISE BAD_INVOICE_ID;
13:32:30 1247  	 END;
13:32:30 1248  
13:32:30 1249  	 IF var_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
13:32:30 1250  	   RAISE INVOICE_IS_NOT_CLOSED;
13:32:30 1251  	 END IF;
13:32:30 1252  
13:32:30 1253  	 BEGIN
13:32:30 1254  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
13:32:30 1255  	     in_invoice_id => in_invoice_id,
13:32:30 1256  	     out_amount    => var_invoice_amount
13:32:30 1257  	   );
13:32:30 1258  	   EXCEPTION
13:32:30 1259  	     WHEN OTHERS THEN
13:32:30 1260  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1261  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
13:32:30 1262  	 END;
13:32:30 1263  
13:32:30 1264  	 IF ( in_refund_amount > var_invoice_amount ) THEN
13:32:30 1265  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
13:32:30 1266  	 END IF;
13:32:30 1267  
13:32:30 1268  	 SELECT /*+ STAR_TRANSFORMATION */
13:32:30 1269  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
13:32:30 1270  	 FROM
13:32:30 1271  	   CHARGE
13:32:30 1272  	 WHERE
13:32:30 1273  	   CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1274  	   AND (
13:32:30 1275  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 1276  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 1277  	   )
13:32:30 1278  	   AND CHARGE.CHARGE_AMOUNT < 0;
13:32:30 1279  
13:32:30 1280  	 -- Refunds are negative
13:32:30 1281  	 var_refunds_before := -var_refunds_before;
13:32:30 1282  
13:32:30 1283  	 var_charges_amount := 0;
13:32:30 1284  
13:32:30 1285  	 FOR f_processed_charges IN (
13:32:30 1286  	   SELECT
13:32:30 1287  	     CHARGE.CHARGE_AMOUNT
13:32:30 1288  	   FROM
13:32:30 1289  	     CHARGE
13:32:30 1290  	   WHERE
13:32:30 1291  	     CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1292  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
13:32:30 1293  	 )
13:32:30 1294  	 LOOP
13:32:30 1295  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
13:32:30 1296  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
13:32:30 1297  	   END IF;
13:32:30 1298  	 END LOOP;
13:32:30 1299  
13:32:30 1300  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
13:32:30 1301  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
13:32:30 1302  	 END IF;
13:32:30 1303  
13:32:30 1304  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
13:32:30 1305  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
13:32:30 1306  	 END IF;
13:32:30 1307  
13:32:30 1308  	 BEGIN
13:32:30 1309  	   PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 1310  	     in_transaction_id	       => NULL,
13:32:30 1311  	     in_status_id	       => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
13:32:30 1312  	     in_amount		       => -in_refund_amount,
13:32:30 1313  	     in_created_by	       => in_created_by,
13:32:30 1314  	     in_order_id	       => NULL,
13:32:30 1315  	     in_is_refund	       => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1316  	     in_transaction_type_code  => 'REFUND',
13:32:30 1317  	     out_transaction_id        => var_new_transaction_id
13:32:30 1318  	   );
13:32:30 1319  	   EXCEPTION
13:32:30 1320  	     WHEN OTHERS THEN
13:32:30 1321  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1322  	       RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 1323  	 END;
13:32:30 1324  
13:32:30 1325  	 BEGIN
13:32:30 1326  	   PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 1327  	     in_invoice_id	   => in_invoice_id,
13:32:30 1328  	     in_transaction_id	   => var_new_transaction_id,
13:32:30 1329  	     in_instrument_type_id => var_instrument_type_id,
13:32:30 1330  	     in_instrument_id	   => var_instrument_id,
13:32:30 1331  	     in_charge_amount	   => -in_refund_amount,
13:32:30 1332  	     in_created_by	   => in_created_by,
13:32:30 1333  	     in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 1334  	     out_charge_id	   => var_new_charge_id
13:32:30 1335  	   );
13:32:30 1336  	   EXCEPTION
13:32:30 1337  	     WHEN OTHERS THEN
13:32:30 1338  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1339  	       RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 1340  	 END;
13:32:30 1341  
13:32:30 1342  	 IF in_note IS NOT NULL THEN
13:32:30 1343  	   BEGIN
13:32:30 1344  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:30 1345  	       in_subscription_id => in_subscription_id,
13:32:30 1346  	       in_agent_id	  => 0, -- AGENT_ID??
13:32:30 1347  	       in_note		  => in_note,
13:32:30 1348  	       in_created_by	  => in_created_by
13:32:30 1349  	     );
13:32:30 1350  	     EXCEPTION
13:32:30 1351  	       WHEN OTHERS THEN
13:32:30 1352  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1353  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
13:32:30 1354  	   END;
13:32:30 1355  	 END IF;
13:32:30 1356  
13:32:30 1357  	 out_charge_id := var_new_charge_id;
13:32:30 1358  
13:32:30 1359  EXCEPTION
13:32:30 1360  WHEN INVOICE_IS_NOT_CLOSED THEN
13:32:30 1361  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1362  	   SPROC_NAME, 'Invoice is not closed');
13:32:30 1363  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1364  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1365  	   SPROC_NAME, 'No such subscription');
13:32:30 1366  WHEN ACCOUNT_IS_FROZEN THEN
13:32:30 1367  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1368  	   SPROC_NAME, 'Could not refund subscription for frozen account');
13:32:30 1369  WHEN BAD_INVOICE_ID THEN
13:32:30 1370  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1371  	   SPROC_NAME, 'No such invoice');
13:32:30 1372  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
13:32:30 1373  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1374  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
13:32:30 1375  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
13:32:30 1376  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1377  	   SPROC_NAME, 'Refund is greater than amount');
13:32:30 1378  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
13:32:30 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1380  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
13:32:30 1381  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
13:32:30 1382  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1383  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
13:32:30 1384  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 1385  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1386  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 1387  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 1388  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1389  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 1390  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
13:32:30 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1392  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
13:32:30 1393  WHEN OTHERS THEN
13:32:30 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1396  END REFUND_SUBSCRIPTION;
13:32:30 1397  
13:32:30 1398  /******************************************************************************/
13:32:30 1399  
13:32:30 1400  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
13:32:30 1401  /*
13:32:30 1402  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1403  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 1404  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1405  */
13:32:30 1406  	 in_subscription_id	 IN NUMBER,
13:32:30 1407  	 in_effective_start_date IN DATE,
13:32:30 1408  	 in_effective_end_date	 IN DATE,
13:32:30 1409  	 in_note		 IN VARCHAR2,
13:32:30 1410  	 in_updated_by		 IN VARCHAR2
13:32:30 1411  ) AS
13:32:30 1412  -- VARIABLES
13:32:30 1413  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
13:32:30 1414  temp_subscription_id	    NUMBER;
13:32:30 1415  var_current_license_id	    NUMBER;
13:32:30 1416  var_current_license_start_date DATE;
13:32:30 1417  var_current_license_end_date DATE;
13:32:30 1418  var_current_offer_id	    NUMBER;
13:32:30 1419  var_current_invoice_id	    NUMBER;
13:32:30 1420  var_current_date 	    DATE;
13:32:30 1421  var_current_offer_index	    NUMBER;
13:32:30 1422  var_current_offer_recurr_num NUMBER;
13:32:30 1423  var_account_tax_exempt_id    VARCHAR2(255);
13:32:30 1424  
13:32:30 1425  var_free_invoice_id NUMBER;
13:32:30 1426  var_free_license_id NUMBER;
13:32:30 1427  var_new_license_id  NUMBER;
13:32:30 1428  var_ext_license_id  NUMBER;
13:32:30 1429  -- EXCEPTIONS
13:32:30 1430  BAD_SUBSCRIPTION_ID	     EXCEPTION;
13:32:30 1431  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
13:32:30 1432  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
13:32:30 1433  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
13:32:30 1434  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
13:32:30 1435  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
13:32:30 1436  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
13:32:30 1437  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
13:32:30 1438  EXT_START_DATE_LATER_THEN_END EXCEPTION;
13:32:30 1439  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
13:32:30 1440  EXCEPTION_MESSAGE	     VARCHAR2(1024);
13:32:30 1441  BEGIN
13:32:30 1442  
13:32:30 1443  	 var_current_date := PROCS_COMMON_V20.NORMALIZE_DATE(SYSDATE);
13:32:30 1444  
13:32:30 1445  	 -- Check that subscription exists
13:32:30 1446  	 BEGIN
13:32:30 1447  	   SELECT
13:32:30 1448  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 1449  	   FROM
13:32:30 1450  	     SUBSCRIPTION
13:32:30 1451  	   WHERE
13:32:30 1452  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1453  	   EXCEPTION
13:32:30 1454  	     WHEN NO_DATA_FOUND THEN
13:32:30 1455  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1456  	 END;
13:32:30 1457  
13:32:30 1458  	 -- Get account tax exempt id
13:32:30 1459  	 SELECT DISTINCT
13:32:30 1460  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
13:32:30 1461  	 FROM
13:32:30 1462  	   ACCOUNT
13:32:30 1463  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 1464  	 WHERE
13:32:30 1465  	   SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1466  
13:32:30 1467  	 -- Select current data
13:32:30 1468  	 BEGIN
13:32:30 1469  	   SELECT
13:32:30 1470  	     LICENSE.ID,
13:32:30 1471  	     LICENSE.START_DATE,
13:32:30 1472  	     LICENSE.END_DATE,
13:32:30 1473  	     LICENSE.CURRENT_OFFER_INDEX,
13:32:30 1474  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 1475  	     OFFER.ID,
13:32:30 1476  	     INVOICE.ID
13:32:30 1477  	   INTO
13:32:30 1478  	     var_current_license_id,
13:32:30 1479  	     var_current_license_start_date,
13:32:30 1480  	     var_current_license_end_date,
13:32:30 1481  	     var_current_offer_index,
13:32:30 1482  	     var_current_offer_recurr_num,
13:32:30 1483  	     var_current_offer_id,
13:32:30 1484  	     var_current_invoice_id
13:32:30 1485  	   FROM
13:32:30 1486  	     LICENSE
13:32:30 1487  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 1488  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
13:32:30 1489  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:30 1490  	   WHERE
13:32:30 1491  	     SUBSCRIPTION.ID = in_subscription_id
13:32:30 1492  	     AND PROCS_COMMON_V20.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
13:32:30 1493  	     AND PROCS_COMMON_V20.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
13:32:30 1494  	     AND ROWNUM <= 1
13:32:30 1495  	   ORDER BY
13:32:30 1496  	     LICENSE.ID DESC;
13:32:30 1497  	   EXCEPTION
13:32:30 1498  	     WHEN NO_DATA_FOUND THEN
13:32:30 1499  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
13:32:30 1500  	 END;
13:32:30 1501  
13:32:30 1502  	 IF var_current_license_end_date < in_effective_start_date THEN
13:32:30 1503  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
13:32:30 1504  	 END IF;
13:32:30 1505  
13:32:30 1506  	 IF var_current_license_start_date > in_effective_start_date THEN
13:32:30 1507  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
13:32:30 1508  	 END IF;
13:32:30 1509  
13:32:30 1510  	 IF in_effective_start_date > in_effective_end_date THEN
13:32:30 1511  	   RAISE EXT_START_DATE_LATER_THEN_END;
13:32:30 1512  	 END IF;
13:32:30 1513  
13:32:30 1514  	 -- Closing curent license
13:32:30 1515  	 BEGIN
13:32:30 1516  	   PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 1517  	     in_license_id	   => var_current_license_id,
13:32:30 1518  	     in_updated_by	   => in_updated_by,
13:32:30 1519  	     in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
13:32:30 1520  	     in_end_date	   => in_effective_start_date,
13:32:30 1521  	     in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE
13:32:30 1522  	   );
13:32:30 1523  	   EXCEPTION
13:32:30 1524  	     WHEN OTHERS THEN
13:32:30 1525  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1526  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
13:32:30 1527  	 END;
13:32:30 1528  
13:32:30 1529  	 -- Creating new "free" invoice
13:32:30 1530  	 BEGIN
13:32:30 1531  	   PROCS_INVOICE_V20.CREATE_INVOICE(
13:32:30 1532  	     in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_CLOSED,
13:32:30 1533  	     in_created_by     => in_updated_by,
13:32:30 1534  	     in_tax_exempt_id  => var_account_tax_exempt_id,
13:32:30 1535  	     out_invoice_id    => var_free_invoice_id
13:32:30 1536  	   );
13:32:30 1537  	   EXCEPTION
13:32:30 1538  	     WHEN OTHERS THEN
13:32:30 1539  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1540  	       RAISE CAN_NOT_CREATE_INVOICE;
13:32:30 1541  	 END;
13:32:30 1542  
13:32:30 1543  	 -- Creating new "free" license
13:32:30 1544  	 BEGIN
13:32:30 1545  	   PROCS_LICENSE_V20.CREATE_LICENSE (
13:32:30 1546  	     in_status_id		 => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
13:32:30 1547  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1548  	     in_start_date		 => in_effective_start_date,
13:32:30 1549  	     in_end_date		 => in_effective_end_date,
13:32:30 1550  	     in_offer_id		 => var_current_offer_id,
13:32:30 1551  	     in_subscription_id 	 => in_subscription_id,
13:32:30 1552  	     in_invoice_id		 => var_free_invoice_id,
13:32:30 1553  	     in_created_by		 => in_updated_by,
13:32:30 1554  	     in_is_extension		 => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1555  	     in_current_offer_index	 => var_current_offer_index,
13:32:30 1556  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
13:32:30 1557  	     out_license_id		 => var_free_license_id
13:32:30 1558  	   );
13:32:30 1559  	   EXCEPTION
13:32:30 1560  	     WHEN OTHERS THEN
13:32:30 1561  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1562  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
13:32:30 1563  	 END;
13:32:30 1564  
13:32:30 1565  	 -- Creating new license
13:32:30 1566  	 IF PROCS_COMMON_V20.NORMALIZE_DATE(var_current_license_end_date) >
13:32:30 1567  	    PROCS_COMMON_V20.NORMALIZE_DATE(in_effective_start_date) THEN
13:32:30 1568  	   BEGIN
13:32:30 1569  	     PROCS_LICENSE_V20.CREATE_LICENSE (
13:32:30 1570  	       in_status_id		   => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
13:32:30 1571  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1572  	       in_start_date		   => in_effective_end_date,
13:32:30 1573  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
13:32:30 1574  	       in_offer_id		   => var_current_offer_id,
13:32:30 1575  	       in_subscription_id	   => in_subscription_id,
13:32:30 1576  	       in_invoice_id		   => var_current_invoice_id,
13:32:30 1577  	       in_created_by		   => in_updated_by,
13:32:30 1578  	       in_is_extension		   => GLOBAL_CONSTANTS_V20.FALSE,
13:32:30 1579  	       in_current_offer_index	   => var_current_offer_index,
13:32:30 1580  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
13:32:30 1581  	       out_license_id		   => var_ext_license_id
13:32:30 1582  	     );
13:32:30 1583  	     EXCEPTION
13:32:30 1584  	       WHEN OTHERS THEN
13:32:30 1585  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1586  		 RAISE CAN_NOT_CREATE_END_LICENSE;
13:32:30 1587  	   END;
13:32:30 1588  	 END IF;
13:32:30 1589  
13:32:30 1590  	 -- Create new note for subscription
13:32:30 1591  	 BEGIN
13:32:30 1592  	   PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION (
13:32:30 1593  	     in_subscription_id => in_subscription_id,
13:32:30 1594  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
13:32:30 1595  	     in_note		=> in_note,
13:32:30 1596  	     in_created_by	=> in_updated_by
13:32:30 1597  	   );
13:32:30 1598  	   EXCEPTION
13:32:30 1599  	     WHEN OTHERS THEN
13:32:30 1600  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1601  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
13:32:30 1602  	 END;
13:32:30 1603  
13:32:30 1604  EXCEPTION
13:32:30 1605  WHEN EXT_START_DATE_LATER_THEN_END THEN
13:32:30 1606  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1607  	   SPROC_NAME, 'Extension start date is bigger then end date');
13:32:30 1608  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
13:32:30 1609  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1610  	   SPROC_NAME, 'Extension start date is too far');
13:32:30 1611  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
13:32:30 1612  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1613  	   SPROC_NAME, 'Extension start date is too small');
13:32:30 1614  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1615  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1616  	   SPROC_NAME, 'No such subscription');
13:32:30 1617  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
13:32:30 1618  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1619  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
13:32:30 1620  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
13:32:30 1621  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1622  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
13:32:30 1623  WHEN CAN_NOT_CREATE_INVOICE THEN
13:32:30 1624  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1625  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
13:32:30 1626  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
13:32:30 1627  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1628  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
13:32:30 1629  WHEN CAN_NOT_CREATE_END_LICENSE THEN
13:32:30 1630  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1631  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
13:32:30 1632  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
13:32:30 1633  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1634  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
13:32:30 1635  WHEN OTHERS THEN
13:32:30 1636  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1637  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1638  END ADD_SUBSCRIPTION_EXTENSION;
13:32:30 1639  
13:32:30 1640  /******************************************************************************/
13:32:30 1641  
13:32:30 1642  FUNCTION CALC_SUBSCRIPTION_END_DATE (
13:32:30 1643  /*
13:32:30 1644  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1645  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 1646  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1647  Returns:
13:32:30 1648  NULL if it is impossible to calculate end date (for example,
13:32:30 1649  	 offer chain includes offer with infinity recurrences number)
13:32:30 1650  DATE else
13:32:30 1651  */
13:32:30 1652  	 in_subscription_id IN NUMBER
13:32:30 1653  ) RETURN DATE AS
13:32:30 1654  -- VARIABLES
13:32:30 1655  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
13:32:30 1656  last_license_id		     NUMBER;
13:32:30 1657  last_license_end_date	     DATE;
13:32:30 1658  last_license_offer_id	     NUMBER;
13:32:30 1659  last_license_offer_index      NUMBER;
13:32:30 1660  last_license_offer_recurr_num NUMBER;
13:32:30 1661  var_last_license_id	     NUMBER;
13:32:30 1662  var_offer_chain_id	     NUMBER;
13:32:30 1663  var_current_offer_rec_number  NUMBER;
13:32:30 1664  var_next_offers_set	     SYS_REFCURSOR;
13:32:30 1665  var_next_offer_duration	     VARCHAR2(30);
13:32:30 1666  var_next_offer_recur	     NUMBER;
13:32:30 1667  var_infinity_offers_number    NUMBER;
13:32:30 1668  
13:32:30 1669  var_result_date DATE;
13:32:30 1670  
13:32:30 1671  var_ym_interval	INTERVAL YEAR TO MONTH;
13:32:30 1672  var_ds_interval	INTERVAL DAY(3) TO SECOND;
13:32:30 1673  var_offer_years	NUMBER;
13:32:30 1674  var_offer_months NUMBER;
13:32:30 1675  var_offer_days	NUMBER;
13:32:30 1676  
13:32:30 1677  -- EXCEPTIONS
13:32:30 1678  BAD_SUBSCRIPTION_ID	  EXCEPTION;
13:32:30 1679  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
13:32:30 1680  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
13:32:30 1681  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
13:32:30 1682  EXCEPTION_MESSAGE	  VARCHAR2(1024);
13:32:30 1683  BEGIN
13:32:30 1684  
13:32:30 1685  	 BEGIN
13:32:30 1686  	   SELECT
13:32:30 1687  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
13:32:30 1688  	   FROM
13:32:30 1689  	     SUBSCRIPTION
13:32:30 1690  	   WHERE
13:32:30 1691  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1692  	   EXCEPTION
13:32:30 1693  	     WHEN NO_DATA_FOUND THEN
13:32:30 1694  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1695  	 END;
13:32:30 1696  
13:32:30 1697  	 BEGIN
13:32:30 1698  	   SELECT
13:32:30 1699  	     ID into var_last_license_id
13:32:30 1700  	   FROM
13:32:30 1701  	     (
13:32:30 1702  	       SELECT
13:32:30 1703  		 LICENSE.ID
13:32:30 1704  	       FROM
13:32:30 1705  		 LICENSE
13:32:30 1706  	       WHERE
13:32:30 1707  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 1708  	       ORDER BY
13:32:30 1709  		 LICENSE.END_DATE DESC
13:32:30 1710  	     )
13:32:30 1711  	   WHERE
13:32:30 1712  	     ROWNUM <= 1;
13:32:30 1713  	   EXCEPTION
13:32:30 1714  	     WHEN NO_DATA_FOUND THEN
13:32:30 1715  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
13:32:30 1716  	 END;
13:32:30 1717  
13:32:30 1718  	 SELECT
13:32:30 1719  	   COUNT(*) into var_infinity_offers_number
13:32:30 1720  	 FROM
13:32:30 1721  	   OFFER_OFFER_CHAIN
13:32:30 1722  	 WHERE
13:32:30 1723  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
13:32:30 1724  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V20.OFFER_REC_INFINITY;
13:32:30 1725  
13:32:30 1726  	 IF var_infinity_offers_number > 0 THEN
13:32:30 1727  	   RETURN NULL;
13:32:30 1728  	 END IF;
13:32:30 1729  
13:32:30 1730  	 BEGIN
13:32:30 1731  	   SELECT
13:32:30 1732  	     LICENSE.ID,
13:32:30 1733  	     LICENSE.END_DATE,
13:32:30 1734  	     LICENSE.CURRENT_OFFER_INDEX,
13:32:30 1735  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 1736  	     LICENSE.OFFER_ID
13:32:30 1737  	     into
13:32:30 1738  	     last_license_id,
13:32:30 1739  	     last_license_end_date,
13:32:30 1740  	     last_license_offer_index,
13:32:30 1741  	     last_license_offer_recurr_num,
13:32:30 1742  	     last_license_offer_id
13:32:30 1743  	   FROM
13:32:30 1744  	     LICENSE
13:32:30 1745  	   WHERE
13:32:30 1746  	     LICENSE.ID = var_last_license_id;
13:32:30 1747  	   EXCEPTION
13:32:30 1748  	     WHEN NO_DATA_FOUND THEN
13:32:30 1749  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
13:32:30 1750  	 END;
13:32:30 1751  
13:32:30 1752  	 var_result_date := last_license_end_date;
13:32:30 1753  
13:32:30 1754  	 -- Find current recurrence number
13:32:30 1755  	 SELECT
13:32:30 1756  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
13:32:30 1757  	 FROM
13:32:30 1758  	   OFFER_OFFER_CHAIN
13:32:30 1759  	 WHERE
13:32:30 1760  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
13:32:30 1761  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
13:32:30 1762  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
13:32:30 1763  
13:32:30 1764  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
13:32:30 1765  	   BEGIN
13:32:30 1766  	     PROCS_OFFER_CHAIN_V20.GET_OFFER_LENGTH(
13:32:30 1767  	       last_license_offer_id,
13:32:30 1768  	       var_offer_years,
13:32:30 1769  	       var_offer_months,
13:32:30 1770  	       var_offer_days
13:32:30 1771  	     );
13:32:30 1772  
13:32:30 1773  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
13:32:30 1774  	     var_ds_interval := var_offer_days||' 0:0:0';
13:32:30 1775  
13:32:30 1776  	     var_result_date := var_result_date
13:32:30 1777  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
13:32:30 1778  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
13:32:30 1779  	     EXCEPTION
13:32:30 1780  	       WHEN OTHERS THEN
13:32:30 1781  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1782  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
13:32:30 1783  	   END;
13:32:30 1784  	 END IF;
13:32:30 1785  
13:32:30 1786  	 OPEN var_next_offers_set FOR
13:32:30 1787  	 SELECT
13:32:30 1788  	   OFFER.ENTITLEMENT_DURATION,
13:32:30 1789  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
13:32:30 1790  	 FROM
13:32:30 1791  	   OFFER_OFFER_CHAIN
13:32:30 1792  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
13:32:30 1793  	 WHERE
13:32:30 1794  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
13:32:30 1795  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
13:32:30 1796  
13:32:30 1797  	 LOOP
13:32:30 1798  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
13:32:30 1799  	   EXIT WHEN var_next_offers_set%NOTFOUND;
13:32:30 1800  	   BEGIN
13:32:30 1801  	     PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
13:32:30 1802  	       var_next_offer_duration,
13:32:30 1803  	       var_offer_years,
13:32:30 1804  	       var_offer_months,
13:32:30 1805  	       var_offer_days
13:32:30 1806  	     );
13:32:30 1807  
13:32:30 1808  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
13:32:30 1809  	     var_ds_interval := var_offer_days||' 0:0:0';
13:32:30 1810  
13:32:30 1811  	     var_result_date := var_result_date
13:32:30 1812  	       + ( var_ym_interval * var_next_offer_recur )
13:32:30 1813  	       + ( var_ds_interval * var_next_offer_recur );
13:32:30 1814  	     EXCEPTION
13:32:30 1815  	       WHEN OTHERS THEN
13:32:30 1816  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1817  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
13:32:30 1818  	   END;
13:32:30 1819  	 END LOOP;
13:32:30 1820  
13:32:30 1821  	 RETURN var_result_date;
13:32:30 1822  
13:32:30 1823  EXCEPTION
13:32:30 1824  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1825  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1826  	   SPROC_NAME, 'No such subscription');
13:32:30 1827  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
13:32:30 1828  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1829  	   SPROC_NAME, 'Could not find last license for given subscription');
13:32:30 1830  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
13:32:30 1831  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1832  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
13:32:30 1833  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
13:32:30 1834  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1835  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
13:32:30 1836  WHEN OTHERS THEN
13:32:30 1837  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1838  	   SPROC_NAME, 'Unkown error', SQLERRM);
13:32:30 1839  END CALC_SUBSCRIPTION_END_DATE;
13:32:30 1840  
13:32:30 1841  /******************************************************************************/
13:32:30 1842  
13:32:30 1843  PROCEDURE HAS_FUTURE_LICENSE (
13:32:30 1844  /*
13:32:30 1845  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1846  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1847  --
13:32:30 1848  RETURNS:
13:32:30 1849  GLOBAL_CONSTANTS_V20.TRUE - if has,
13:32:30 1850  GLOBAL_CONSTANTS_V20.FALSE - else
13:32:30 1851  */
13:32:30 1852  	 in_license_id IN  NUMBER,
13:32:30 1853  	 out_result    OUT NUMBER
13:32:30 1854  ) AS
13:32:30 1855  -- VARIABLES
13:32:30 1856  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
13:32:30 1857  var_subscription_id	 NUMBER;
13:32:30 1858  var_future_licenses_count NUMBER;
13:32:30 1859  -- EXCEPTIONS
13:32:30 1860  BAD_LICENSE_ID	    EXCEPTION;
13:32:30 1861  BEGIN
13:32:30 1862  
13:32:30 1863  	 BEGIN
13:32:30 1864  	   SELECT
13:32:30 1865  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
13:32:30 1866  	   FROM
13:32:30 1867  	     LICENSE
13:32:30 1868  	   WHERE
13:32:30 1869  	     LICENSE.ID = in_license_id;
13:32:30 1870  	   EXCEPTION
13:32:30 1871  	     WHEN NO_DATA_FOUND THEN
13:32:30 1872  	       RAISE BAD_LICENSE_ID;
13:32:30 1873  	 END;
13:32:30 1874  
13:32:30 1875  	 SELECT
13:32:30 1876  	   COUNT(*) into var_future_licenses_count
13:32:30 1877  	 FROM
13:32:30 1878  	   LICENSE
13:32:30 1879  	 WHERE
13:32:30 1880  	   LICENSE.ID != in_license_id
13:32:30 1881  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
13:32:30 1882  	   AND LICENSE.END_DATE > sysdate;
13:32:30 1883  
13:32:30 1884  	 IF var_future_licenses_count > 0 THEN
13:32:30 1885  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 1886  	 ELSE
13:32:30 1887  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 1888  	 END IF;
13:32:30 1889  
13:32:30 1890  EXCEPTION
13:32:30 1891  WHEN BAD_LICENSE_ID THEN
13:32:30 1892  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1893  	   SPROC_NAME, 'No such license');
13:32:30 1894  WHEN OTHERS THEN
13:32:30 1895  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1896  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1897  END HAS_FUTURE_LICENSE;
13:32:30 1898  
13:32:30 1899  /******************************************************************************/
13:32:30 1900  
13:32:30 1901  PROCEDURE CLOSE_SUBSCRIPTION (
13:32:30 1902  	 in_subscription_id IN NUMBER,
13:32:30 1903  	 in_updated_by	    IN VARCHAR2
13:32:30 1904  ) AS
13:32:30 1905  -- VARIABLES
13:32:30 1906  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
13:32:30 1907  temp_subscription_id NUMBER;
13:32:30 1908  var_licenses_count   NUMBER;
13:32:30 1909  -- EXCEPTIONS
13:32:30 1910  BAD_SUBSCRIPTION_ID    EXCEPTION;
13:32:30 1911  ACTIVE_LICENSES_FOUND  EXCEPTION;
13:32:30 1912  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 1913  BEGIN
13:32:30 1914  
13:32:30 1915  	 BEGIN
13:32:30 1916  	   SELECT
13:32:30 1917  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 1918  	   FROM
13:32:30 1919  	     SUBSCRIPTION
13:32:30 1920  	   WHERE
13:32:30 1921  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1922  	   EXCEPTION
13:32:30 1923  	     WHEN NO_DATA_FOUND THEN
13:32:30 1924  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 1925  	 END;
13:32:30 1926  
13:32:30 1927  	 SELECT
13:32:30 1928  	   COUNT(*) into var_licenses_count
13:32:30 1929  	 FROM
13:32:30 1930  	   LICENSE
13:32:30 1931  	 WHERE
13:32:30 1932  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 1933  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE;
13:32:30 1934  
13:32:30 1935  	 IF var_licenses_count > 0 THEN
13:32:30 1936  	   RAISE ACTIVE_LICENSES_FOUND;
13:32:30 1937  	 END IF;
13:32:30 1938  
13:32:30 1939  	 PROCS_SUBSCRIPTION_V20.UPDATE_SUBSCRIPTION_STATUS(
13:32:30 1940  	   in_subscription_id	     => in_subscription_id,
13:32:30 1941  	   in_updated_by	     => in_updated_by,
13:32:30 1942  	   in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_CLOSED
13:32:30 1943  	 );
13:32:30 1944  
13:32:30 1945  EXCEPTION
13:32:30 1946  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 1947  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1948  	   SPROC_NAME, 'No such subscription');
13:32:30 1949  WHEN ACTIVE_LICENSES_FOUND THEN
13:32:30 1950  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1951  	   SPROC_NAME, 'Active licenses found');
13:32:30 1952  WHEN OTHERS THEN
13:32:30 1953  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1954  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1955  END CLOSE_SUBSCRIPTION;
13:32:30 1956  
13:32:30 1957  /******************************************************************************/
13:32:30 1958  
13:32:30 1959  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
13:32:30 1960  	 in_subscription_id IN NUMBER,
13:32:30 1961  	 out_group_id	    OUT NUMBER
13:32:30 1962  ) AS
13:32:30 1963  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
13:32:30 1964  BEGIN
13:32:30 1965  	 SELECT
13:32:30 1966  	   ACCOUNT.GROUP_ID into out_group_id
13:32:30 1967  	 FROM
13:32:30 1968  	   SUBSCRIPTION
13:32:30 1969  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 1970  	 WHERE
13:32:30 1971  	   SUBSCRIPTION.ID = in_subscription_id;
13:32:30 1972  EXCEPTION
13:32:30 1973  WHEN NO_DATA_FOUND THEN
13:32:30 1974  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1975  	   SPROC_NAME, 'No such subscription');
13:32:30 1976  WHEN OTHERS THEN
13:32:30 1977  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1978  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1979  END GET_GROUP_ID_BY_SBSCRPTN_ID;
13:32:30 1980  
13:32:30 1981  /******************************************************************************/
13:32:30 1982  
13:32:30 1983  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
13:32:30 1984  /*
13:32:30 1985  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 1986  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1987  */
13:32:30 1988  	 in_subscription_id IN NUMBER,
13:32:30 1989  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 1990  ) AS
13:32:30 1991  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
13:32:30 1992  -- VARIABLES
13:32:30 1993  var_offer_chain NUMBER;
13:32:30 1994  -- EXCEPTIONS
13:32:30 1995  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 1996  BEGIN
13:32:30 1997  	 BEGIN
13:32:30 1998  	   SELECT
13:32:30 1999  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
13:32:30 2000  	   FROM
13:32:30 2001  	     SUBSCRIPTION
13:32:30 2002  	   WHERE
13:32:30 2003  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2004  	   EXCEPTION
13:32:30 2005  	     WHEN NO_DATA_FOUND THEN
13:32:30 2006  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2007  	 END;
13:32:30 2008  
13:32:30 2009  	 OPEN out_result_set FOR
13:32:30 2010  	 SELECT DISTINCT
13:32:30 2011  	   PRODUCT.ID,
13:32:30 2012  	   PRODUCT.NAME
13:32:30 2013  	 FROM
13:32:30 2014  	   PRODUCT
13:32:30 2015  	 WHERE
13:32:30 2016  	   PRODUCT.ID IN (
13:32:30 2017  	     SELECT DISTINCT
13:32:30 2018  	       PRODUCT_OFFERING.PRODUCT_ID
13:32:30 2019  	     FROM
13:32:30 2020  	       PRODUCT_OFFERING
13:32:30 2021  	     WHERE
13:32:30 2022  	       PRODUCT_OFFERING.ID IN (
13:32:30 2023  		 SELECT DISTINCT
13:32:30 2024  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:30 2025  		 FROM
13:32:30 2026  		   OFFER_PRODUCT_OFFERING
13:32:30 2027  		 WHERE
13:32:30 2028  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:30 2029  		     SELECT DISTINCT
13:32:30 2030  		       OFFER_OFFER_CHAIN.OFFER_ID
13:32:30 2031  		     FROM
13:32:30 2032  		       OFFER_OFFER_CHAIN
13:32:30 2033  		     WHERE
13:32:30 2034  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
13:32:30 2035  		   )
13:32:30 2036  	       )
13:32:30 2037  	   );
13:32:30 2038  
13:32:30 2039  EXCEPTION
13:32:30 2040  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2041  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2042  	   SPROC_NAME, 'No such subscription');
13:32:30 2043  WHEN OTHERS THEN
13:32:30 2044  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2045  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2046  END GET_SUBSCRIPTION_PRODUCTS;
13:32:30 2047  
13:32:30 2048  /******************************************************************************/
13:32:30 2049  
13:32:30 2050  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
13:32:30 2051  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
13:32:30 2052  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
13:32:30 2053  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:30 2054  ) AS
13:32:30 2055  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
13:32:30 2056  BEGIN
13:32:30 2057  	 PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30 2058  	   in_subscription_id	     => in_subscription_id,
13:32:30 2059  	   in_subscription_status_id => in_subscription_status_id,
13:32:30 2060  	   in_updated_by	     => in_updated_by
13:32:30 2061  	 );
13:32:30 2062  END UPDATE_SUBSCRIPTION_STATUS;
13:32:30 2063  
13:32:30 2064  /******************************************************************************/
13:32:30 2065  
13:32:30 2066  PROCEDURE GET_ACTIVE_INVOICES_IDS (
13:32:30 2067  /*
13:32:30 2068  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2069  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2070  */
13:32:30 2071  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
13:32:30 2072  	 in_subscription_id IN NUMBER,
13:32:30 2073  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 2074  ) AS
13:32:30 2075  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
13:32:30 2076  -- VARIABLES
13:32:30 2077  temp_subscription_id SUBSCRIPTION.ID%TYPE;
13:32:30 2078  -- EXCEPTIONS
13:32:30 2079  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2080  BEGIN
13:32:30 2081  
13:32:30 2082  	 BEGIN
13:32:30 2083  	   SELECT
13:32:30 2084  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 2085  	   FROM
13:32:30 2086  	     SUBSCRIPTION
13:32:30 2087  	   WHERE
13:32:30 2088  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2089  	   EXCEPTION
13:32:30 2090  	     WHEN NO_DATA_FOUND THEN
13:32:30 2091  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2092  	 END;
13:32:30 2093  
13:32:30 2094  	 OPEN out_result_set FOR
13:32:30 2095  	 SELECT DISTINCT
13:32:30 2096  	   LICENSE.INVOICE_ID as "ID"
13:32:30 2097  	 FROM
13:32:30 2098  	   LICENSE
13:32:30 2099  	 WHERE
13:32:30 2100  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
13:32:30 2101  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
13:32:30 2102  
13:32:30 2103  EXCEPTION
13:32:30 2104  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2105  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2106  	   SPROC_NAME, 'No such subscription');
13:32:30 2107  WHEN OTHERS THEN
13:32:30 2108  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2109  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2110  END GET_ACTIVE_INVOICES_IDS;
13:32:30 2111  
13:32:30 2112  /******************************************************************************/
13:32:30 2113  
13:32:30 2114  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
13:32:30 2115  /*
13:32:30 2116  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2117  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2118  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 2119  */
13:32:30 2120  	 in_invoice_id	      IN NUMBER,
13:32:30 2121  	 in_updated_by	      IN VARCHAR2,
13:32:30 2122  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:30 2123  ) AS
13:32:30 2124  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
13:32:30 2125  -- VARIABLES
13:32:30 2126  temp_invoice_id	      INVOICE.ID%TYPE;
13:32:30 2127  var_chargeback_amount  NUMBER(10,2);
13:32:30 2128  ver_refund_charge_id   NUMBER;
13:32:30 2129  -- EXCEPTIONS
13:32:30 2130  BAD_INVOICE_ID		    EXCEPTION;
13:32:30 2131  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
13:32:30 2132  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
13:32:30 2133  EXCEPTION_MESSAGE	    VARCHAR2(1024);
13:32:30 2134  -- STUB
13:32:30 2135  var_now DATE;
13:32:30 2136  var_revoke NUMBER;
13:32:30 2137  var_refund NUMBER;
13:32:30 2138  var_billed NUMBER;
13:32:30 2139  var_subscription_in_grace NUMBER;
13:32:30 2140  BEGIN
13:32:30 2141  
13:32:30 2142  	 var_now := sysdate;
13:32:30 2143  
13:32:30 2144  	 -- Check that invoice exists
13:32:30 2145  	 BEGIN
13:32:30 2146  	   SELECT
13:32:30 2147  	     INVOICE.ID into temp_invoice_id
13:32:30 2148  	   FROM
13:32:30 2149  	     INVOICE
13:32:30 2150  	   WHERE
13:32:30 2151  	     INVOICE.ID = in_invoice_id;
13:32:30 2152  	   EXCEPTION
13:32:30 2153  	     WHEN NO_DATA_FOUND THEN
13:32:30 2154  	       RAISE BAD_INVOICE_ID;
13:32:30 2155  	 END;
13:32:30 2156  
13:32:30 2157  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V20.FALSE, GLOBAL_CONSTANTS_V20.TRUE) into var_revoke
13:32:30 2158  	 from license l, subscription s, offer_chain oc
13:32:30 2159  	 where
13:32:30 2160  	   l.subscription_id = s.id and
13:32:30 2161  	   s.offer_chain_id = oc.id and
13:32:30 2162  	   l.invoice_id = in_invoice_id and
13:32:30 2163  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V20.TRUE and
13:32:30 2164  	   rownum < 2;
13:32:30 2165  
13:32:30 2166  	 select
13:32:30 2167  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
13:32:30 2168  	 into
13:32:30 2169  	   var_subscription_in_grace
13:32:30 2170  	 from license l, subscription s
13:32:30 2171  	 where
13:32:30 2172  	   l.subscription_id = s.id and
13:32:30 2173  	   l.invoice_id = in_invoice_id and
13:32:30 2174  	   rownum < 2;
13:32:30 2175  
13:32:30 2176  	 var_billed := PROCS_INVOICE_V20.IS_INVOICE_PAYING_STARTED(in_invoice_id);
13:32:30 2177  	 var_refund := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2178  
13:32:30 2179  	 -- Check that transaction for given invoice not started
13:32:30 2180  	 -- if refund enabled calculate and apply chargeback
13:32:30 2181  	 IF (
13:32:30 2182  	     var_billed = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 2183  	   )THEN
13:32:30 2184  	   if (in_refundable = GLOBAL_CONSTANTS_V20.TRUE) then
13:32:30 2185  	     -- If started then we need to calculate refund
13:32:30 2186  	     BEGIN
13:32:30 2187  	       PROCS_INVOICE_V20.CALCULATE_INVOICE_CHARGEBACK(
13:32:30 2188  		 in_invoice_id,
13:32:30 2189  		 var_now,
13:32:30 2190  		 var_chargeback_amount
13:32:30 2191  	       );
13:32:30 2192  	       EXCEPTION
13:32:30 2193  		 WHEN OTHERS THEN
13:32:30 2194  		   EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2195  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
13:32:30 2196  	     END;
13:32:30 2197  	     IF var_chargeback_amount > 0 THEN
13:32:30 2198  	       BEGIN
13:32:30 2199  		 PROCS_INVOICE_V20.APPLY_REFUND(
13:32:30 2200  		   in_invoice_id,
13:32:30 2201  		   var_chargeback_amount,
13:32:30 2202  		   in_updated_by,
13:32:30 2203  		   ver_refund_charge_id
13:32:30 2204  		 );
13:32:30 2205  		 EXCEPTION
13:32:30 2206  		   WHEN OTHERS THEN
13:32:30 2207  		     EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2208  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
13:32:30 2209  	       END;
13:32:30 2210  	       var_refund := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2211  	     END IF;
13:32:30 2212  	   end if;
13:32:30 2213  	 ELSE
13:32:30 2214  
13:32:30 2215  	   FOR f_transaction_to_close IN (
13:32:30 2216  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 2217  	   )
13:32:30 2218  	   LOOP
13:32:30 2219  	     PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
13:32:30 2220  	       in_transaction_id	=> f_transaction_to_close.ID,
13:32:30 2221  	       in_updated_by		=> in_updated_by,
13:32:30 2222  	       in_transaction_status_id => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
13:32:30 2223  	     );
13:32:30 2224  	   END LOOP;
13:32:30 2225  	   -- Needs to close charges. No refund.
13:32:30 2226  	   FOR f_charge_to_close IN (
13:32:30 2227  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 2228  	   )
13:32:30 2229  	   LOOP
13:32:30 2230  	     PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
13:32:30 2231  	       in_charge_id	   => f_charge_to_close.ID,
13:32:30 2232  	       in_updated_by	   => in_updated_by,
13:32:30 2233  	       in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
13:32:30 2234  	     );
13:32:30 2235  	   END LOOP;
13:32:30 2236  
13:32:30 2237  	   PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
13:32:30 2238  	     in_invoice_id		    => in_invoice_id,
13:32:30 2239  	     in_updated_by		    => in_updated_by,
13:32:30 2240  	     in_invoice_status_id	    => GLOBAL_STATUSES_V20.INVOICE_CLOSED
13:32:30 2241  	   );
13:32:30 2242  
13:32:30 2243  	 END IF;
13:32:30 2244  	 -- update licenses
13:32:30 2245  	 IF(var_revoke = GLOBAL_CONSTANTS_V20.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V20.FALSE AND var_billed = GLOBAL_CONSTANTS_V20.FALSE)) THEN
13:32:30 2246  	   FOR f_license_to_cancel IN (
13:32:30 2247  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 2248  	   )
13:32:30 2249  	   LOOP
13:32:30 2250  	     PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 2251  	       in_license_id	     => f_license_to_cancel.ID,
13:32:30 2252  	       in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
13:32:30 2253  	       in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 2254  	       in_updated_by	     => in_updated_by,
13:32:30 2255  	       in_entitlement_end_date => var_now
13:32:30 2256  	     );
13:32:30 2257  	   END LOOP;
13:32:30 2258  	 ELSE
13:32:30 2259  	   FOR f_license_to_cancel IN (
13:32:30 2260  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
13:32:30 2261  	   )
13:32:30 2262  	   LOOP
13:32:30 2263  	     PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 2264  	       in_license_id	     => f_license_to_cancel.ID,
13:32:30 2265  	       in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
13:32:30 2266  	       in_updated_by	     => in_updated_by
13:32:30 2267  	     );
13:32:30 2268  	   END LOOP;
13:32:30 2269  	 END IF;
13:32:30 2270  
13:32:30 2271  
13:32:30 2272  EXCEPTION
13:32:30 2273  WHEN BAD_INVOICE_ID THEN
13:32:30 2274  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2275  	   SPROC_NAME, 'No such invoice');
13:32:30 2276  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
13:32:30 2277  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2278  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
13:32:30 2279  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
13:32:30 2280  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2281  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
13:32:30 2282  WHEN OTHERS THEN
13:32:30 2283  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2284  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2285  END CANCEL_SUBSCRIPTION_INVOICE;
13:32:30 2286  
13:32:30 2287  /******************************************************************************/
13:32:30 2288  
13:32:30 2289  PROCEDURE FINALIZE_CANCELATION (
13:32:30 2290  /*
13:32:30 2291  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2292  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2293  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 2294  */
13:32:30 2295  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
13:32:30 2296  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
13:32:30 2297  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:30 2298  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:30 2299  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:30 2300  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:30 2301  	 in_subscription_id    IN NUMBER,
13:32:30 2302  	 in_cancelation_reason IN VARCHAR2,
13:32:30 2303  	 in_cancelation_date   IN DATE,
13:32:30 2304  	 in_note	       IN VARCHAR2,
13:32:30 2305  	 in_agent_id	       IN NUMBER,
13:32:30 2306  	 in_updated_by	       IN VARCHAR2
13:32:30 2307  ) AS
13:32:30 2308  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
13:32:30 2309  -- VARIABLES
13:32:30 2310  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
13:32:30 2311  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
13:32:30 2312  var_active_invoices_count NUMBER;
13:32:30 2313  var_license_to_disgrace	 LICENSE.ID%TYPE;
13:32:30 2314  var_now			 DATE := SYSDATE;
13:32:30 2315  -- EXCEPTIONS
13:32:30 2316  BAD_SUBSCRIPTION_ID	   EXCEPTION;
13:32:30 2317  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
13:32:30 2318  BAD_CANCELATION_REASON	   EXCEPTION;
13:32:30 2319  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
13:32:30 2320  ACTIVE_INVOICES_FOUND	   EXCEPTION;
13:32:30 2321  CAN_NOT_CREATE_NOTE	   EXCEPTION;
13:32:30 2322  EXCEPTION_MESSAGE	   VARCHAR2(1024);
13:32:30 2323  BEGIN
13:32:30 2324  
13:32:30 2325  	 -- Get current subscription status
13:32:30 2326  	 BEGIN
13:32:30 2327  	   SELECT
13:32:30 2328  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
13:32:30 2329  	   FROM
13:32:30 2330  	     SUBSCRIPTION
13:32:30 2331  	   WHERE
13:32:30 2332  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2333  	   EXCEPTION
13:32:30 2334  	     WHEN NO_DATA_FOUND THEN
13:32:30 2335  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2336  	 END;
13:32:30 2337  
13:32:30 2338  	 -- Check that subscription reason is correct
13:32:30 2339  	 BEGIN
13:32:30 2340  	   SELECT
13:32:30 2341  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
13:32:30 2342  	   FROM
13:32:30 2343  	     SUBSCRIPTION_CANCEL_REASON
13:32:30 2344  	   WHERE
13:32:30 2345  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
13:32:30 2346  	     AND ROWNUM <= 1;
13:32:30 2347  	   EXCEPTION
13:32:30 2348  	     WHEN NO_DATA_FOUND THEN
13:32:30 2349  	       RAISE BAD_CANCELATION_REASON;
13:32:30 2350  	 END;
13:32:30 2351  
13:32:30 2352  	 -- Check for invoices with active licenses
13:32:30 2353  	 SELECT
13:32:30 2354  	   COUNT(*) into var_active_invoices_count
13:32:30 2355  	 FROM
13:32:30 2356  	   LICENSE
13:32:30 2357  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:30 2358  	 WHERE
13:32:30 2359  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
13:32:30 2360  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
13:32:30 2361  
13:32:30 2362  	 IF var_active_invoices_count > 0 THEN
13:32:30 2363  	   RAISE ACTIVE_INVOICES_FOUND;
13:32:30 2364  	 END IF;
13:32:30 2365  
13:32:30 2366  	 -- Check that subscription is active
13:32:30 2367  	 IF var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE AND
13:32:30 2368  	    var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED AND
13:32:30 2369  	    var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD THEN
13:32:30 2370  	   RAISE BAD_SUBSCRIPTION_STATUS;
13:32:30 2371  	 END IF;
13:32:30 2372  
13:32:30 2373  	 -- Update subscription data
13:32:30 2374  	 BEGIN
13:32:30 2375  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30 2376  	     in_subscription_id        => in_subscription_id,
13:32:30 2377  	     in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_CANCELED,
13:32:30 2378  	     in_cancelation_date       => in_cancelation_date,
13:32:30 2379  	     in_updated_by	       => in_updated_by,
13:32:30 2380  	     in_sct_id		       => var_sct_id
13:32:30 2381  	   );
13:32:30 2382  	   EXCEPTION
13:32:30 2383  	     WHEN OTHERS THEN
13:32:30 2384  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2385  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
13:32:30 2386  	 END;
13:32:30 2387  
13:32:30 2388  	 -- Terminate grace period for licenses in grace [SAR-31]
13:32:30 2389  	 BEGIN
13:32:30 2390  	   SELECT
13:32:30 2391  	     LICENSE.ID into var_license_to_disgrace
13:32:30 2392  	   FROM
13:32:30 2393  	     LICENSE
13:32:30 2394  	   WHERE
13:32:30 2395  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 2396  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
13:32:30 2397  	     AND ROWNUM <= 1
13:32:30 2398  	   ORDER BY
13:32:30 2399  	     CREATE_DATE DESC;
13:32:30 2400  	 EXCEPTION
13:32:30 2401  	   WHEN NO_DATA_FOUND THEN
13:32:30 2402  	     var_license_to_disgrace := NULL;
13:32:30 2403  	 END;
13:32:30 2404  
13:32:30 2405  	 IF var_license_to_disgrace IS NOT NULL THEN
13:32:30 2406  	   PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 2407  	     in_license_id	     => var_license_to_disgrace,
13:32:30 2408  	     in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
13:32:30 2409  	     in_updated_by	     => in_updated_by
13:32:30 2410  	   );
13:32:30 2411  	 END IF;
13:32:30 2412  
13:32:30 2413  	 -- Annotate subscription
13:32:30 2414  	 IF in_note IS NOT NULL THEN
13:32:30 2415  	   BEGIN
13:32:30 2416  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:30 2417  	       in_subscription_id,
13:32:30 2418  	       in_agent_id,
13:32:30 2419  	       in_note,
13:32:30 2420  	       in_updated_by
13:32:30 2421  	     );
13:32:30 2422  	     EXCEPTION
13:32:30 2423  	      WHEN OTHERS THEN
13:32:30 2424  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2425  		RAISE CAN_NOT_CREATE_NOTE;
13:32:30 2426  	   END;
13:32:30 2427  	 END IF;
13:32:30 2428  
13:32:30 2429  EXCEPTION
13:32:30 2430  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2431  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2432  	   SPROC_NAME, 'No such subscription');
13:32:30 2433  WHEN BAD_SUBSCRIPTION_STATUS THEN
13:32:30 2434  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2435  	   SPROC_NAME, 'Bad current subscription status');
13:32:30 2436  WHEN BAD_CANCELATION_REASON THEN
13:32:30 2437  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2438  	   SPROC_NAME, 'Bad cancellation reason');
13:32:30 2439  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
13:32:30 2440  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2441  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
13:32:30 2442  WHEN ACTIVE_INVOICES_FOUND THEN
13:32:30 2443  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 2444  	   SPROC_NAME, 'Invoices with active licenses found');
13:32:30 2445  WHEN CAN_NOT_CREATE_NOTE THEN
13:32:30 2446  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2447  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
13:32:30 2448  --WHEN OTHERS THEN
13:32:30 2449  --  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2450  --    SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2451  END FINALIZE_CANCELATION;
13:32:30 2452  
13:32:30 2453  /******************************************************************************/
13:32:30 2454  
13:32:30 2455  PROCEDURE FINALIZE_FALSE_START (
13:32:30 2456  /*
13:32:30 2457  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2458  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2459  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 2460  */
13:32:30 2461  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
13:32:30 2462  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:30 2463  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:30 2464  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:30 2465  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:30 2466  	 in_subscription_id    IN NUMBER,
13:32:30 2467  	 in_cancelation_date   IN DATE,
13:32:30 2468  	 in_note	       IN VARCHAR2,
13:32:30 2469  	 in_agent_id	       IN NUMBER,
13:32:30 2470  	 in_updated_by	       IN VARCHAR2
13:32:30 2471  ) AS
13:32:30 2472  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
13:32:30 2473  FALSE_START_REASON CONSTANT NUMBER := 41;
13:32:30 2474  -- VARIABLES
13:32:30 2475  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
13:32:30 2476  var_active_invoices_count NUMBER;
13:32:30 2477  -- EXCEPTIONS
13:32:30 2478  BAD_SUBSCRIPTION_ID	   EXCEPTION;
13:32:30 2479  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
13:32:30 2480  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
13:32:30 2481  ACTIVE_INVOICES_FOUND	   EXCEPTION;
13:32:30 2482  CAN_NOT_CREATE_NOTE	   EXCEPTION;
13:32:30 2483  EXCEPTION_MESSAGE	   VARCHAR2(1024);
13:32:30 2484  BEGIN
13:32:30 2485  
13:32:30 2486  	 -- Get current subscription status
13:32:30 2487  	 BEGIN
13:32:30 2488  	   SELECT
13:32:30 2489  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
13:32:30 2490  	   FROM
13:32:30 2491  	     SUBSCRIPTION
13:32:30 2492  	   WHERE
13:32:30 2493  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2494  	   EXCEPTION
13:32:30 2495  	     WHEN NO_DATA_FOUND THEN
13:32:30 2496  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2497  	 END;
13:32:30 2498  
13:32:30 2499  	 -- Check for invoices with active licenses
13:32:30 2500  	 SELECT
13:32:30 2501  	   COUNT(*) into var_active_invoices_count
13:32:30 2502  	 FROM
13:32:30 2503  	   LICENSE
13:32:30 2504  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:30 2505  	 WHERE
13:32:30 2506  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 2507  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
13:32:30 2508  
13:32:30 2509  	 IF var_active_invoices_count > 0 THEN
13:32:30 2510  	   RAISE ACTIVE_INVOICES_FOUND;
13:32:30 2511  	 END IF;
13:32:30 2512  
13:32:30 2513  	 -- Check that subscription is active
13:32:30 2514  	 IF var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 2515  	    AND var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED THEN
13:32:30 2516  	   RAISE BAD_SUBSCRIPTION_STATUS;
13:32:30 2517  	 END IF;
13:32:30 2518  
13:32:30 2519  	 -- Update subscription data
13:32:30 2520  	 BEGIN
13:32:30 2521  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30 2522  	     in_subscription_id        => in_subscription_id,
13:32:30 2523  	     in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_FALSE_START,
13:32:30 2524  	     in_cancelation_date       => in_cancelation_date,
13:32:30 2525  	     in_updated_by	       => in_updated_by,
13:32:30 2526  	     in_sct_id		       => FALSE_START_REASON
13:32:30 2527  	   );
13:32:30 2528  	   EXCEPTION
13:32:30 2529  	     WHEN OTHERS THEN
13:32:30 2530  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2531  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
13:32:30 2532  	 END;
13:32:30 2533  
13:32:30 2534  	 -- Annotate subscription
13:32:30 2535  	 IF in_note IS NOT NULL THEN
13:32:30 2536  	   BEGIN
13:32:30 2537  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:30 2538  	       in_subscription_id,
13:32:30 2539  	       in_agent_id,
13:32:30 2540  	       in_note,
13:32:30 2541  	       in_updated_by
13:32:30 2542  	     );
13:32:30 2543  	     EXCEPTION
13:32:30 2544  	      WHEN OTHERS THEN
13:32:30 2545  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2546  		RAISE CAN_NOT_CREATE_NOTE;
13:32:30 2547  	   END;
13:32:30 2548  	 END IF;
13:32:30 2549  
13:32:30 2550  EXCEPTION
13:32:30 2551  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2552  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2553  	   SPROC_NAME, 'No such subscription');
13:32:30 2554  WHEN BAD_SUBSCRIPTION_STATUS THEN
13:32:30 2555  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2556  	   SPROC_NAME, 'Bad current subscription status');
13:32:30 2557  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
13:32:30 2558  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2559  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
13:32:30 2560  WHEN ACTIVE_INVOICES_FOUND THEN
13:32:30 2561  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 2562  	   SPROC_NAME, 'Invoices with active licenses found');
13:32:30 2563  WHEN CAN_NOT_CREATE_NOTE THEN
13:32:30 2564  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2565  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
13:32:30 2566  WHEN OTHERS THEN
13:32:30 2567  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2568  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2569  END FINALIZE_FALSE_START;
13:32:30 2570  
13:32:30 2571  /******************************************************************************/
13:32:30 2572  
13:32:30 2573  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
13:32:30 2574  	 in_subscription_id IN NUMBER
13:32:30 2575  ) RETURN NUMBER AS
13:32:30 2576  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
13:32:30 2577  -- VARIABLES
13:32:30 2578  var_is_offer_chain_cancelable NUMBER;
13:32:30 2579  --64603
13:32:30 2580  var_end_date date;
13:32:30 2581  today_date date := current_date;
13:32:30 2582  offer_id number;
13:32:30 2583  -- EXCEPTIONS
13:32:30 2584  COULD_NOT_CHECK	   EXCEPTION;
13:32:30 2585  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2586  EXCEPTION_MESSAGE   VARCHAR2(1024);
13:32:30 2587  BEGIN
13:32:30 2588  
13:32:30 2589  	 BEGIN
13:32:30 2590  	   -- find offer_chain_id for given in_subscription_id
13:32:30 2591  	   SELECT OFFER_CHAIN_ID into offer_id
13:32:30 2592  	   FROM SUBSCRIPTION
13:32:30 2593  	   WHERE ID = in_subscription_id;
13:32:30 2594  	   EXCEPTION
13:32:30 2595  	     WHEN NO_DATA_FOUND THEN
13:32:30 2596  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2597  	     WHEN OTHERS THEN
13:32:30 2598  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 2599  	       RAISE COULD_NOT_CHECK;
13:32:30 2600  	 END;
13:32:30 2601  
13:32:30 2602  	 -- find if it was redeemed from a gift certificate
13:32:30 2603  	 BEGIN
13:32:30 2604  	   SELECT l.end_date INTO var_end_date
13:32:30 2605  	   FROM LICENSE l, GIFT_CERTIFICATE g
13:32:30 2606  	   WHERE l.invoice_id = g.finalized_invoice_id
13:32:30 2607  	   AND l.subscription_id = in_subscription_id;
13:32:30 2608  
13:32:30 2609  	   -- if the license end_date is bigger than today, we are in the
13:32:30 2610  	   -- first period, so we cannot cancel; otherwise can cancel
13:32:30 2611  	   IF var_end_date > today_date THEN
13:32:30 2612  	       RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2613  	   ELSE
13:32:30 2614  	       RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2615  	   END IF;
13:32:30 2616  
13:32:30 2617  	   EXCEPTION
13:32:30 2618  	       -- not coming from a gift certificate,
13:32:30 2619  	       -- use old logic
13:32:30 2620  	       WHEN NO_DATA_FOUND THEN
13:32:30 2621  		   SELECT
13:32:30 2622  		       PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(offer_id)
13:32:30 2623  		       INTO var_is_offer_chain_cancelable
13:32:30 2624  		   FROM DUAL;
13:32:30 2625  		   RETURN var_is_offer_chain_cancelable;
13:32:30 2626  	 END;
13:32:30 2627  
13:32:30 2628  EXCEPTION
13:32:30 2629  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2630  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2631  	   SPROC_NAME, 'No such subscription');
13:32:30 2632  WHEN COULD_NOT_CHECK THEN
13:32:30 2633  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 2634  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
13:32:30 2635  WHEN OTHERS THEN
13:32:30 2636  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2637  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2638  
13:32:30 2639  END IS_SUBSCRIPTION_CANCELABLE;
13:32:30 2640  /******************************************************************************/
13:32:30 2641  
13:32:30 2642  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
13:32:30 2643  /*
13:32:30 2644  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2645  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2646  */
13:32:30 2647  	 in_subscription_id IN NUMBER,
13:32:30 2648  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 2649  ) AS
13:32:30 2650  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
13:32:30 2651  -- VARIABLES
13:32:30 2652  var_offer NUMBER;
13:32:30 2653  -- EXCEPTIONS
13:32:30 2654  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2655  BEGIN
13:32:30 2656  
13:32:30 2657  	 OPEN out_result_set FOR
13:32:30 2658  	 SELECT DISTINCT
13:32:30 2659  	   PRODUCT_OFFERING.ID,
13:32:30 2660  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:30 2661  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:30 2662  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:30 2663  	   PRODUCT_OFFERING.QUANTITY,
13:32:30 2664  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:30 2665  	   PRODUCT_OFFERING.CREATED_BY,
13:32:30 2666  	   CAPABILITY.ID CAP_ID,
13:32:30 2667  	   CAPABILITY.CODE CAP_CODE,
13:32:30 2668  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:30 2669  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:30 2670  	 FROM
13:32:30 2671  	   OFFER_PRODUCT_OFFERING
13:32:30 2672  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:30 2673  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:30 2674  	 WHERE
13:32:30 2675  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:30 2676  	     SELECT
13:32:30 2677  	       LICENSE.OFFER_ID
13:32:30 2678  	     FROM
13:32:30 2679  	       SUBSCRIPTION
13:32:30 2680  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 2681  	     WHERE
13:32:30 2682  	       SUBSCRIPTION.ID = in_subscription_id
13:32:30 2683  	   );
13:32:30 2684  
13:32:30 2685  EXCEPTION
13:32:30 2686  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2687  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2688  	   SPROC_NAME, 'No such subscription');
13:32:30 2689  WHEN OTHERS THEN
13:32:30 2690  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2691  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2692  END GET_SUBSCR_PROD_OFFERRINGS;
13:32:30 2693  
13:32:30 2694  
13:32:30 2695  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
13:32:30 2696  /*
13:32:30 2697  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2698  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2699  */
13:32:30 2700  	 in_subscription_id IN NUMBER,
13:32:30 2701  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 2702  ) AS
13:32:30 2703  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
13:32:30 2704  -- VARIABLES
13:32:30 2705  var_offer NUMBER;
13:32:30 2706  -- EXCEPTIONS
13:32:30 2707  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2708  BEGIN
13:32:30 2709  
13:32:30 2710  	 OPEN out_result_set FOR
13:32:30 2711  	 SELECT DISTINCT
13:32:30 2712  	   PRODUCT_OFFERING.ID,
13:32:30 2713  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:30 2714  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:30 2715  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:30 2716  	   PRODUCT_OFFERING.QUANTITY,
13:32:30 2717  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:30 2718  	   PRODUCT_OFFERING.CREATED_BY,
13:32:30 2719  	   CAPABILITY.ID CAP_ID,
13:32:30 2720  	   CAPABILITY.CODE CAP_CODE,
13:32:30 2721  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:30 2722  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:30 2723  	 FROM
13:32:30 2724  	   OFFER_PRODUCT_OFFERING
13:32:30 2725  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:30 2726  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:30 2727  	 WHERE
13:32:30 2728  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:30 2729  	     SELECT
13:32:30 2730  	       LICENSE.OFFER_ID
13:32:30 2731  	     FROM
13:32:30 2732  	       SUBSCRIPTION
13:32:30 2733  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 2734  	     WHERE
13:32:30 2735  	       SUBSCRIPTION.ID = in_subscription_id
13:32:30 2736  	   );
13:32:30 2737  
13:32:30 2738  EXCEPTION
13:32:30 2739  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2740  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2741  	   SPROC_NAME, 'No such subscription');
13:32:30 2742  WHEN OTHERS THEN
13:32:30 2743  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2744  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2745  END RETRIEVE_SUB_PROD_OFFER;
13:32:30 2746  /******************************************************************************/
13:32:30 2747  
13:32:30 2748  
13:32:30 2749  
13:32:30 2750  
13:32:30 2751  PROCEDURE GET_SUBSCR_LIC_OFFER(
13:32:30 2752  /*
13:32:30 2753  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2754  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2755  */
13:32:30 2756  	 in_subscription_id IN NUMBER,
13:32:30 2757  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 2758  ) AS
13:32:30 2759  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
13:32:30 2760  -- VARIABLES
13:32:30 2761  var_offer_chain NUMBER;
13:32:30 2762  -- EXCEPTIONS
13:32:30 2763  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2764  BEGIN
13:32:30 2765  	 BEGIN
13:32:30 2766  	   SELECT
13:32:30 2767  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
13:32:30 2768  	   FROM
13:32:30 2769  	     SUBSCRIPTION
13:32:30 2770  	   WHERE
13:32:30 2771  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2772  	   EXCEPTION
13:32:30 2773  	     WHEN NO_DATA_FOUND THEN
13:32:30 2774  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2775  	 END;
13:32:30 2776  
13:32:30 2777  	 OPEN out_result_set FOR
13:32:30 2778  	 SELECT DISTINCT
13:32:30 2779  	   po.ID po_id,
13:32:30 2780  	   po.PRODUCT_ID po_product_id,
13:32:30 2781  	   po.TAX_CATEGORY_ID po_tax_category_id,
13:32:30 2782  	   po.UNIT_PRICE po_unit_price,
13:32:30 2783  	   po.QUANTITY po_quantity,
13:32:30 2784  	   po.CREATE_DATE po_create_date,
13:32:30 2785  	   po.CREATED_BY po_created_by,
13:32:30 2786  	   l.ID l_id,
13:32:30 2787  	   l.license_status_id l_license_status_id,
13:32:30 2788  	   l.start_date l_start_date,
13:32:30 2789  	   l.offer_id l_offer_id,
13:32:30 2790  	   l.subscription_id l_subscription_id,
13:32:30 2791  	   l.invoice_id l_invoice_id,
13:32:30 2792  	   l.end_date l_end_date,
13:32:30 2793  	   l.entitlement_end_date l_entitlement_end_date,
13:32:30 2794  	   l.create_date l_create_date,
13:32:30 2795  	   l.created_by l_created_by,
13:32:30 2796  	   l.is_extension l_is_extension,
13:32:30 2797  	   l.current_offer_index l_current_offer_index,
13:32:30 2798  	   l.current_offer_recurr_num l_current_offer_recurr_num,
13:32:30 2799  	   l.needs_entitlements l_needs_entitlements
13:32:30 2800  	 FROM
13:32:30 2801  	   OFFER_PRODUCT_OFFERING opo,
13:32:30 2802  	   PRODUCT_OFFERING po,
13:32:30 2803  	   SUBSCRIPTION s,
13:32:30 2804  	   LICENSE l
13:32:30 2805  	 WHERE
13:32:30 2806  	   opo.product_offering_id = po.id
13:32:30 2807  	   and po.id = l.offer_id
13:32:30 2808  	   and l.subscription_id = s.id
13:32:30 2809  	   and l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 2810  	   and s.id = in_subscription_id
13:32:30 2811  	 ;
13:32:30 2812  EXCEPTION
13:32:30 2813  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2814  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2815  	   SPROC_NAME, 'No such subscription');
13:32:30 2816  WHEN OTHERS THEN
13:32:30 2817  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2818  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2819  END GET_SUBSCR_LIC_OFFER;
13:32:30 2820  
13:32:30 2821  /******************************************************************************/
13:32:30 2822  
13:32:30 2823  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
13:32:30 2824  /*
13:32:30 2825  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2826  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2827  */
13:32:30 2828  	 in_subscription_id IN NUMBER,
13:32:30 2829  	 out_result	    OUT NUMBER
13:32:30 2830  ) AS
13:32:30 2831  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
13:32:30 2832  -- VARIABLES
13:32:30 2833  temp_subscription_id NUMBER;
13:32:30 2834  var_local_result     NUMBER;
13:32:30 2835  -- EXCEPTIONS
13:32:30 2836  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:30 2837  BEGIN
13:32:30 2838  
13:32:30 2839  	 -- Check that subscription exists
13:32:30 2840  	 BEGIN
13:32:30 2841  	   SELECT
13:32:30 2842  	     SUBSCRIPTION.ID into temp_subscription_id
13:32:30 2843  	   FROM
13:32:30 2844  	     SUBSCRIPTION
13:32:30 2845  	   WHERE
13:32:30 2846  	     SUBSCRIPTION.ID = in_subscription_id;
13:32:30 2847  	   EXCEPTION
13:32:30 2848  	     WHEN NO_DATA_FOUND THEN
13:32:30 2849  	       RAISE BAD_SUBSCRIPTION_ID;
13:32:30 2850  	 END;
13:32:30 2851  
13:32:30 2852  	 var_local_result := NULL;
13:32:30 2853  
13:32:30 2854  	 -- Check charges for each invoice associated with gived subscription
13:32:30 2855  	 FOR f_invoice IN (
13:32:30 2856  	   SELECT DISTINCT
13:32:30 2857  	     LICENSE.INVOICE_ID as "ID"
13:32:30 2858  	   FROM
13:32:30 2859  	     LICENSE
13:32:30 2860  	   WHERE
13:32:30 2861  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:30 2862  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.LICENSE_ACTIVE FROM DUAL )
13:32:30 2863  	 )
13:32:30 2864  	 LOOP
13:32:30 2865  
13:32:30 2866  	   -- Check each charge in invoice
13:32:30 2867  	   FOR f_charge IN (
13:32:30 2868  	     SELECT
13:32:30 2869  	       CHARGE.ID,
13:32:30 2870  	       CHARGE.CHARGE_STATUS_ID,
13:32:30 2871  	       CHARGE.CHARGE_AMOUNT
13:32:30 2872  	     FROM
13:32:30 2873  	       CHARGE
13:32:30 2874  	     WHERE
13:32:30 2875  	       CHARGE.INVOICE_ID = f_invoice.ID
13:32:30 2876  	   )
13:32:30 2877  	   LOOP
13:32:30 2878  
13:32:30 2879  	     -- Charge amount < 0     => it is a refund
13:32:30 2880  	     -- Charge status is OPEN => means that it is not processed yet
13:32:30 2881  	     IF f_charge.CHARGE_AMOUNT < 0
13:32:30 2882  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED THEN
13:32:30 2883  	       var_local_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2884  	     END IF;
13:32:30 2885  
13:32:30 2886  	   END LOOP;
13:32:30 2887  
13:32:30 2888  	 END LOOP;
13:32:30 2889  
13:32:30 2890  	 IF var_local_result IS NULL THEN
13:32:30 2891  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2892  	 ELSE
13:32:30 2893  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2894  	 END IF;
13:32:30 2895  
13:32:30 2896  EXCEPTION
13:32:30 2897  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:30 2898  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2899  	   SPROC_NAME, 'No such transaction id');
13:32:30 2900  WHEN OTHERS THEN
13:32:30 2901  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2902  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2903  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
13:32:30 2904  
13:32:30 2905  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
13:32:30 2906  /*
13:32:30 2907  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2908  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2909  */
13:32:30 2910  	 in_group_id	    IN NUMBER,
13:32:30 2911  	 in_offer_chain_id  IN NUMBER,
13:32:30 2912  	 out_result	    OUT NUMBER
13:32:30 2913  ) AS
13:32:30 2914  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
13:32:30 2915  -- VARIABLES
13:32:30 2916  temp_acct_id	    NUMBER;
13:32:30 2917  temp_oc_id	    NUMBER;
13:32:30 2918  -- EXCEPTIONS
13:32:30 2919  BAD_GROUP_ID EXCEPTION;
13:32:30 2920  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:30 2921  BEGIN
13:32:30 2922  	 -- Check that group id exists
13:32:30 2923  	 BEGIN
13:32:30 2924  	   SELECT
13:32:30 2925  	     ACCOUNT.ID into temp_acct_id
13:32:30 2926  	   FROM
13:32:30 2927  	     ACCOUNT
13:32:30 2928  	   WHERE
13:32:30 2929  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 2930  	   EXCEPTION
13:32:30 2931  	     WHEN NO_DATA_FOUND THEN
13:32:30 2932  	       RAISE BAD_GROUP_ID;
13:32:30 2933  	 END;
13:32:30 2934  	 -- Check that offer chain id exists
13:32:30 2935  	 BEGIN
13:32:30 2936  	   SELECT
13:32:30 2937  	     OFFER_CHAIN.ID into temp_oc_id
13:32:30 2938  	   FROM
13:32:30 2939  	     OFFER_CHAIN
13:32:30 2940  	   WHERE
13:32:30 2941  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:30 2942  	   EXCEPTION
13:32:30 2943  	     WHEN NO_DATA_FOUND THEN
13:32:30 2944  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:30 2945  	 END;
13:32:30 2946  	 SELECT
13:32:30 2947  	   COUNT(*) into out_result
13:32:30 2948  	 FROM
13:32:30 2949  	   SUBSCRIPTION
13:32:30 2950  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 2951  	 WHERE
13:32:30 2952  	   ACCOUNT.GROUP_ID = in_group_id
13:32:30 2953  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 2954  	   AND (
13:32:30 2955  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 2956  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 2957  
13:32:30 2958  EXCEPTION
13:32:30 2959  WHEN BAD_GROUP_ID THEN
13:32:30 2960  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2961  	   SPROC_NAME, 'No such transaction id');
13:32:30 2962  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:30 2963  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2964  	   SPROC_NAME, 'No such offer chain id');
13:32:30 2965  WHEN OTHERS THEN
13:32:30 2966  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2967  	   sproc_name, 'Unknown error', sqlerrm);
13:32:30 2968  END GET_EXISTING_SUBSCR_NUMBER;
13:32:30 2969  
13:32:30 2970  PROCEDURE GET_EXISTING_SUBSCR_IDS (
13:32:30 2971  /*
13:32:30 2972  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 2973  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 2974  */
13:32:30 2975  	 in_group_id	    IN NUMBER,
13:32:30 2976  	 in_offer_chain_id  IN NUMBER,
13:32:30 2977  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 2978  ) AS
13:32:30 2979  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
13:32:30 2980  -- VARIABLES
13:32:30 2981  temp_acct_id	    NUMBER;
13:32:30 2982  temp_oc_id	    NUMBER;
13:32:30 2983  -- EXCEPTIONS
13:32:30 2984  BAD_GROUP_ID EXCEPTION;
13:32:30 2985  BAD_OFFER_CHAIN_ID EXCEPTION;
13:32:30 2986  BEGIN
13:32:30 2987  
13:32:30 2988  	 -- Check that group id exists
13:32:30 2989  	 BEGIN
13:32:30 2990  	   SELECT
13:32:30 2991  	     ACCOUNT.ID into temp_acct_id
13:32:30 2992  	   FROM
13:32:30 2993  	     ACCOUNT
13:32:30 2994  	   WHERE
13:32:30 2995  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 2996  	   EXCEPTION
13:32:30 2997  	     WHEN NO_DATA_FOUND THEN
13:32:30 2998  	       RAISE BAD_GROUP_ID;
13:32:30 2999  	 END;
13:32:30 3000  	 -- Check that offer chain id exists
13:32:30 3001  	 BEGIN
13:32:30 3002  	   SELECT
13:32:30 3003  	     OFFER_CHAIN.ID into temp_oc_id
13:32:30 3004  	   FROM
13:32:30 3005  	     OFFER_CHAIN
13:32:30 3006  	   WHERE
13:32:30 3007  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:30 3008  	   EXCEPTION
13:32:30 3009  	     WHEN NO_DATA_FOUND THEN
13:32:30 3010  	       RAISE BAD_OFFER_CHAIN_ID;
13:32:30 3011  	 END;
13:32:30 3012  
13:32:30 3013  	 OPEN out_result_set FOR
13:32:30 3014  	 SELECT
13:32:30 3015  	   SUBSCRIPTION.ID
13:32:30 3016  	 FROM
13:32:30 3017  	   SUBSCRIPTION
13:32:30 3018  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 3019  	 WHERE
13:32:30 3020  	   ACCOUNT.GROUP_ID = in_group_id
13:32:30 3021  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 3022  	   AND (
13:32:30 3023  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 3024  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 3025  
13:32:30 3026  EXCEPTION
13:32:30 3027  WHEN BAD_GROUP_ID THEN
13:32:30 3028  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 3029  	   SPROC_NAME, 'No such transaction id');
13:32:30 3030  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:30 3031  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 3032  	   SPROC_NAME, 'No such offer chain id');
13:32:30 3033  WHEN OTHERS THEN
13:32:30 3034  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 3035  	   sproc_name, 'Unknown error', sqlerrm);
13:32:30 3036  END GET_EXISTING_SUBSCR_IDS;
13:32:30 3037  
13:32:30 3038  PROCEDURE ADD_META_DATA (
13:32:30 3039  /*
13:32:30 3040  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 3041  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 3042  */
13:32:30 3043  	 in_subscription_id IN NUMBER,
13:32:30 3044  	 in_name	    IN VARCHAR2,
13:32:30 3045  	 in_value	    IN VARCHAR2,
13:32:30 3046  	 in_created_by	    IN VARCHAR2
13:32:30 3047  ) AS
13:32:30 3048  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
13:32:30 3049  BEGIN
13:32:30 3050  
13:32:30 3051  	 INSERT INTO SUBSCRIPTION_META_DATA (
13:32:30 3052  	   ID,
13:32:30 3053  	   SUBSCRIPTION_ID,
13:32:30 3054  	   NAME,
13:32:30 3055  	   VALUE,
13:32:30 3056  	   CREATE_DATE,
13:32:30 3057  	   CREATED_BY
13:32:30 3058  	 ) VALUES (
13:32:30 3059  	   SUBMD_ID_SEQ.nextVal,
13:32:30 3060  	   in_subscription_id,
13:32:30 3061  	   in_name,
13:32:30 3062  	   in_value,
13:32:30 3063  	   sysdate,
13:32:30 3064  	   in_created_by
13:32:30 3065  	 );
13:32:30 3066  
13:32:30 3067  EXCEPTION
13:32:30 3068  WHEN OTHERS THEN
13:32:30 3069  	 IF SQLCODE = -2291 THEN
13:32:30 3070  	   PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 3071  	     SPROC_NAME, 'No such subscription');
13:32:30 3072  	 ELSE
13:32:30 3073  	   PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 3074  	     SPROC_NAME, 'Unknown error', sqlerrm);
13:32:30 3075  	 END IF;
13:32:30 3076  END ADD_META_DATA;
13:32:30 3077  
13:32:30 3078  /******************************************************************************/
13:32:30 3079  
13:32:30 3080  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
13:32:30 3081  /*
13:32:30 3082  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
13:32:30 3083  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 3084  */
13:32:30 3085  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
13:32:30 3086  	 out_result_set       OUT SYS_REFCURSOR
13:32:30 3087  ) AS
13:32:30 3088  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
13:32:30 3089  -- Exceptions
13:32:30 3090  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
13:32:30 3091  BEGIN
13:32:30 3092  
13:32:30 3093  	 IF in_subscriptions_ids IS NULL THEN
13:32:30 3094  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
13:32:30 3095  	 END IF;
13:32:30 3096  
13:32:30 3097  	 OPEN out_result_set FOR
13:32:30 3098  	 SELECT
13:32:30 3099  	   SMD.SUBSCRIPTION_ID,
13:32:30 3100  	   SMD.NAME,
13:32:30 3101  	   SMD.VALUE
13:32:30 3102  	 FROM
13:32:30 3103  	   SUBSCRIPTION_META_DATA SMD
13:32:30 3104  	 WHERE
13:32:30 3105  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
13:32:30 3106  
13:32:30 3107  EXCEPTION
13:32:30 3108  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
13:32:30 3109  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 3110  	   SPROC_NAME, 'Bad subscription ids parameter');
13:32:30 3111  WHEN OTHERS THEN
13:32:30 3112  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 3113  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 3114  END GET_SUBSCRIPTIONS_META_DATA;
13:32:30 3115  
13:32:30 3116  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
13:32:30 3117  /*
13:32:30 3118  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 3119  */
13:32:30 3120  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
13:32:30 3121  	 out_result_set     OUT SYS_REFCURSOR
13:32:30 3122  ) AS
13:32:30 3123  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
13:32:30 3124  BEGIN
13:32:30 3125  	 OPEN out_result_set FOR
13:32:30 3126  	 SELECT subscription.id FROM
13:32:30 3127  	   subscription
13:32:30 3128  	 INNER JOIN license ON license.subscription_id = subscription.id
13:32:30 3129  	 INNER JOIN invoice ON invoice.id = license.invoice_id
13:32:30 3130  	 INNER JOIN charge ON invoice.id = charge.invoice_id
13:32:30 3131  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
13:32:30 3132  	 WHERE transaction.order_id = in_order_id;
13:32:30 3133  EXCEPTION
13:32:30 3134  WHEN OTHERS THEN
13:32:30 3135  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 3136  	   SPROC_NAME, 'Unknown error', sqlerrm);
13:32:30 3137  END GET_SUBS_BY_TRNS_ORDER_ID;
13:32:30 3138  
13:32:30 3139  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
13:32:30 3140  	(
13:32:30 3141  /*
13:32:30 3142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 3143  */
13:32:30 3144  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:30 3145  	 out_result_set      OUT SYS_REFCURSOR
13:32:30 3146  )
13:32:30 3147  AS
13:32:30 3148  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
13:32:30 3149  BEGIN
13:32:30 3150  	 OPEN out_result_set FOR
13:32:30 3151  	 SELECT
13:32:30 3152  	   c.ID,
13:32:30 3153  	   c.TRANSACTION_ID,
13:32:30 3154  	   c.INSTRUMENT_ID,
13:32:30 3155  	   c.INSTRUMENT_TYPE_ID,
13:32:30 3156  	   c.CHARGE_AMOUNT,
13:32:30 3157  	   c.CREATE_DATE,
13:32:30 3158  	   c.CREATED_BY,
13:32:30 3159  	   c.INVOICE_ID
13:32:30 3160  	  FROM
13:32:30 3161  	   subscription s,
13:32:30 3162  	   license l,
13:32:30 3163  	   charge c
13:32:30 3164  	 WHERE
13:32:30 3165  	   s.id = l.subscription_id and
13:32:30 3166  	   l.invoice_id = c.invoice_id and
13:32:30 3167  	   c.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED and
13:32:30 3168  	   exists (
13:32:30 3169  	     select null
13:32:30 3170  	     from transaction t
13:32:30 3171  	     where
13:32:30 3172  	       t.id = c.transaction_id
13:32:30 3173  	   ) and
13:32:30 3174  	   s.id = in_subscription_id;
13:32:30 3175  EXCEPTION
13:32:30 3176  WHEN OTHERS THEN
13:32:30 3177  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 3178  	   SPROC_NAME, 'Unknown error', sqlerrm);
13:32:30 3179  END GET_OPEN_CHARGES_BY_SUBID;
13:32:30 3180  
13:32:30 3181  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
13:32:30 3182  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
13:32:30 3183  ) RETURN NUMBER
13:32:30 3184  AS
13:32:30 3185  var_gift_certificate_id NUMBER;
13:32:30 3186  BEGIN
13:32:30 3187  	     SELECT id INTO var_gift_certificate_id
13:32:30 3188  	     FROM
13:32:30 3189  	       gift_certificate gc
13:32:30 3190  	     WHERE
13:32:30 3191  	       gc.finalized_invoice_id in (
13:32:30 3192  		 SELECT invoice_id
13:32:30 3193  		 FROM (
13:32:30 3194  		   SELECT l.invoice_id
13:32:30 3195  		   FROM
13:32:30 3196  		     license l
13:32:30 3197  		   WHERE
13:32:30 3198  		     l.subscription_id = in_subscription_id
13:32:30 3199  		   ORDER BY l.create_date asc
13:32:30 3200  		 )
13:32:30 3201  	       )
13:32:30 3202  	       and rownum <= 1;
13:32:30 3203  	     return var_gift_certificate_id;
13:32:30 3204  END GET_GIFT_CERT_ID_BY_SUB_ID;
13:32:30 3205  
13:32:30 3206  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
13:32:30 3207  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
13:32:30 3208  ) RETURN VARCHAR2
13:32:30 3209  AS
13:32:30 3210  var_gift_certificate_code VARCHAR2(255 BYTE);
13:32:30 3211  BEGIN
13:32:30 3212  	     SELECT code INTO var_gift_certificate_code
13:32:30 3213  	     FROM
13:32:30 3214  	       gift_certificate gc
13:32:30 3215  	     WHERE
13:32:30 3216  	       gc.finalized_invoice_id in (
13:32:30 3217  		 SELECT invoice_id
13:32:30 3218  		 FROM (
13:32:30 3219  		   SELECT l.invoice_id
13:32:30 3220  		   FROM
13:32:30 3221  		     license l
13:32:30 3222  		   WHERE
13:32:30 3223  		     l.subscription_id = in_subscription_id
13:32:30 3224  		 )
13:32:30 3225  	       )
13:32:30 3226  	       and rownum <= 1;
13:32:30 3227  	     return var_gift_certificate_code;
13:32:30 3228  END GET_GIFT_CERT_CODE_BY_SUB_ID;
13:32:30 3229  
13:32:30 3230  PROCEDURE GET_ACTIVE_MEU_SUBS (
13:32:30 3231  	 out_result_set      OUT SYS_REFCURSOR
13:32:30 3232  )
13:32:30 3233  AS
13:32:30 3234  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
13:32:30 3235  BEGIN
13:32:30 3236  	 OPEN out_result_set FOR
13:32:30 3237  	       SELECT
13:32:30 3238  		   s.id,
13:32:30 3239  		   s.instrument_type_id,
13:32:30 3240  		   s.instrument_id,
13:32:30 3241  		   a.group_id,
13:32:30 3242  		   s.offer_chain_id
13:32:30 3243  	       FROM
13:32:30 3244  		   core_owner.subscription s,
13:32:30 3245  		   core_owner.account a
13:32:30 3246  	       WHERE
13:32:30 3247  		   a.id = s.account_id AND(
13:32:30 3248  		       s.offer_chain_id = 1745992781 OR
13:32:30 3249  		       s.offer_chain_id = 3902149773 OR
13:32:30 3250  		       s.offer_chain_id = 2240201337) AND
13:32:30 3251  		   NOT EXISTS
13:32:30 3252  		   (
13:32:30 3253  		       SELECT
13:32:30 3254  			   1
13:32:30 3255  		       FROM
13:32:30 3256  			   core_owner.subscription ss
13:32:30 3257  		       WHERE
13:32:30 3258  			   ss.account_id = a.id AND(
13:32:30 3259  			       ss.offer_chain_id = 2794122734 OR
13:32:30 3260  			       ss.offer_chain_id = 3564368005 OR
13:32:30 3261  			       ss.offer_chain_id = 757934392)) AND
13:32:30 3262  		   rownum < 5000;
13:32:30 3263  END GET_ACTIVE_MEU_SUBS;
13:32:30 3264  
13:32:30 3265  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
13:32:30 3266  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:30 3267  	 out_offer_id	     OUT LICENSE.ID%TYPE
13:32:30 3268  )
13:32:30 3269  AS
13:32:30 3270  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
13:32:30 3271  BEGIN
13:32:30 3272  	 SELECT OFFER_ID INTO out_offer_id
13:32:30 3273  	 FROM LICENSE L,
13:32:30 3274  	 (
13:32:30 3275  	   SELECT MIN(ID) ID FROM LICENSE
13:32:30 3276  	   WHERE SUBSCRIPTION_ID = in_subscription_id
13:32:30 3277  	   AND LICENSE_STATUS_ID = 2
13:32:30 3278  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
13:32:30 3279  	 ) EARLIEST_ACTIVE_LICENSE
13:32:30 3280  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
13:32:30 3281  END GET_EARLIEST_ACTIVE_OFFER_ID;
13:32:30 3282  
13:32:30 3283  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
13:32:30 3284  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
13:32:30 3285  	 out_license_id      OUT LICENSE.ID%TYPE
13:32:30 3286  )
13:32:30 3287  AS
13:32:30 3288  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
13:32:30 3289  BEGIN
13:32:30 3290  	 SELECT MIN(ID) into out_license_id
13:32:30 3291  	 FROM LICENSE
13:32:30 3292  	 WHERE SUBSCRIPTION_ID = in_subscription_id
13:32:30 3293  	   AND LICENSE_STATUS_ID = 2
13:32:30 3294  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
13:32:30 3295  END GET_EARLIEST_ACTIVE_LICENSE_ID;
13:32:30 3296  
13:32:30 3297  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
13:32:30 3298  	 out_result_set      OUT SYS_REFCURSOR
13:32:30 3299  )
13:32:30 3300  AS
13:32:30 3301  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
13:32:30 3302  BEGIN
13:32:30 3303  	 OPEN out_result_set FOR
13:32:30 3304  	   SELECT
13:32:30 3305  	     s.id
13:32:30 3306  	   FROM
13:32:30 3307  	     core_owner.transaction t
13:32:30 3308  	   INNER JOIN
13:32:30 3309  	     core_owner.charge c
13:32:30 3310  	   ON
13:32:30 3311  	     c.transaction_id = t.id
13:32:30 3312  	   INNER JOIN
13:32:30 3313  	     core_owner.invoice i
13:32:30 3314  	   ON
13:32:30 3315  	     i.id = c.invoice_id
13:32:30 3316  	   INNER JOIN
13:32:30 3317  	     core_owner.license l
13:32:30 3318  	   ON
13:32:30 3319  	     i.id = l.invoice_id
13:32:30 3320  	   INNER JOIN
13:32:30 3321  	     core_owner.subscription s
13:32:30 3322  	   ON
13:32:30 3323  	     l.subscription_id = s.id
13:32:30 3324  	   INNER JOIN
13:32:30 3325  	     core_owner.account a
13:32:30 3326  	   ON
13:32:30 3327  	     s.account_id = a.id
13:32:30 3328  	   JOIN
13:32:30 3329  	     core_owner.rcn_cpt_chargeback_act_detail ccad
13:32:30 3330  	   ON
13:32:30 3331  	     t.order_id = ccad.merchant_order_number
13:32:30 3332  	   WHERE
13:32:30 3333  	     ccad.chargeback_category = 'RECD'
13:32:30 3334  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 3335  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
13:32:30 3336  
13:32:30 3337  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
13:32:30 3338  	 out_result_set      OUT SYS_REFCURSOR
13:32:30 3339  )
13:32:30 3340  AS
13:32:30 3341  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
13:32:30 3342  BEGIN
13:32:30 3343  	 OPEN out_result_set FOR
13:32:30 3344  	   SELECT
13:32:30 3345  	     s.id
13:32:30 3346  	   FROM
13:32:30 3347  	     core_owner.transaction t
13:32:30 3348  	   INNER JOIN
13:32:30 3349  	     core_owner.charge c
13:32:30 3350  	   ON
13:32:30 3351  	     c.transaction_id = t.id
13:32:30 3352  	   INNER JOIN
13:32:30 3353  	     core_owner.invoice i
13:32:30 3354  	   ON
13:32:30 3355  	     i.id = c.invoice_id
13:32:30 3356  	   INNER JOIN
13:32:30 3357  	     core_owner.license l
13:32:30 3358  	   ON
13:32:30 3359  	     i.id = l.invoice_id
13:32:30 3360  	   INNER JOIN
13:32:30 3361  	     core_owner.subscription s
13:32:30 3362  	   ON
13:32:30 3363  	     l.subscription_id = s.id
13:32:30 3364  	   INNER JOIN
13:32:30 3365  	     core_owner.account a
13:32:30 3366  	   ON
13:32:30 3367  	     s.account_id = a.id
13:32:30 3368  	   INNER JOIN
13:32:30 3369  	     core_owner.rcn_pp_trans_detail ptd
13:32:30 3370  	   ON
13:32:30 3371  	     t.order_id = ptd.invoice_id
13:32:30 3372  	   WHERE
13:32:30 3373  	     ptd.trans_status = 'D'
13:32:30 3374  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 3375  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
13:32:30 3376  
13:32:30 3377  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
13:32:30 3378  	 in_max_days_until_close IN NUMBER,
13:32:30 3379  	 in_num_subs_to_fetch	 IN NUMBER,
13:32:30 3380  	 out_result_set 	 OUT SYS_REFCURSOR
13:32:30 3381  )
13:32:30 3382  AS
13:32:30 3383  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
13:32:30 3384  BEGIN
13:32:30 3385  	 OPEN out_result_set FOR
13:32:30 3386  	 SELECT
13:32:30 3387  	     *
13:32:30 3388  	 FROM
13:32:30 3389  	     (
13:32:30 3390  		 SELECT
13:32:30 3391  		     a.group_id group_id,
13:32:30 3392  		     l.grace_end_date grace_end_date
13:32:30 3393  		 FROM
13:32:30 3394  		     license l
13:32:30 3395  		 JOIN
13:32:30 3396  		     subscription s
13:32:30 3397  		 ON
13:32:30 3398  		     s.id = l.subscription_id
13:32:30 3399  		 JOIN
13:32:30 3400  		     account a
13:32:30 3401  		 ON
13:32:30 3402  		     a.id = s.account_id
13:32:30 3403  		 WHERE
13:32:30 3404  		     l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
13:32:30 3405  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
13:32:30 3406  		 AND NOT EXISTS
13:32:30 3407  		     (
13:32:30 3408  			 SELECT
13:32:30 3409  			     NULL
13:32:30 3410  			 FROM
13:32:30 3411  			     process_retry_throttle
13:32:30 3412  			 WHERE
13:32:30 3413  			     process_name = sproc_name
13:32:30 3414  			 AND generic_id = a.group_id)
13:32:30 3415  		 AND rownum <= in_num_subs_to_fetch * 10
13:32:30 3416  		 ORDER BY
13:32:30 3417  		     dbms_random.value)
13:32:30 3418  	 WHERE
13:32:30 3419  	     rownum <= in_num_subs_to_fetch;
13:32:30 3420  END GET_GRACE_PERIOD_SUB_REGIS;
13:32:30 3421  
13:32:30 3422  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
13:32:30 3423  	 out_result_set      OUT SYS_REFCURSOR
13:32:30 3424  )
13:32:30 3425  AS
13:32:30 3426  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
13:32:30 3427  BEGIN
13:32:30 3428  	 OPEN out_result_set FOR
13:32:30 3429  	   SELECT
13:32:30 3430  	     s.id
13:32:30 3431  	   FROM
13:32:30 3432  	     core_owner.transaction t
13:32:30 3433  	   INNER JOIN
13:32:30 3434  	     core_owner.charge c
13:32:30 3435  	   ON
13:32:30 3436  	     c.transaction_id = t.id
13:32:30 3437  	   INNER JOIN
13:32:30 3438  	     core_owner.invoice i
13:32:30 3439  	   ON
13:32:30 3440  	     i.id = c.invoice_id
13:32:30 3441  	   INNER JOIN
13:32:30 3442  	     core_owner.license l
13:32:30 3443  	   ON
13:32:30 3444  	     i.id = l.invoice_id
13:32:30 3445  	   INNER JOIN
13:32:30 3446  	     core_owner.subscription s
13:32:30 3447  	   ON
13:32:30 3448  	     l.subscription_id = s.id
13:32:30 3449  	   INNER JOIN
13:32:30 3450  	     core_owner.account a
13:32:30 3451  	   ON
13:32:30 3452  	     s.account_id = a.id
13:32:30 3453  	   INNER JOIN
13:32:30 3454  	     core_owner.rcn_amex_chargeback ac
13:32:30 3455  	   ON
13:32:30 3456  	     t.order_id = lower(ac.ind_ref_number)
13:32:30 3457  	   WHERE
13:32:30 3458  	     s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 3459  END GET_ACT_SUBS_W_AMEX_CB;
13:32:30 3460  
13:32:30 3461  END PROCS_SUBSCRIPTION_V20;
13:32:30 3462  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.24
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE GET_INVOICE_IDS(
13:32:30   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
13:32:30   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
13:32:30   6  	out_result_set OUT SYS_REFCURSOR
13:32:30   7  ) AS
13:32:30   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
13:32:30   9  BEGIN
13:32:30  10  	OPEN out_result_set FOR
13:32:30  11  	  SELECT
13:32:30  12  	    Invoice.ID
13:32:30  13  	  FROM
13:32:30  14  	      Invoice
13:32:30  15  	      INNER JOIN License
13:32:30  16  		ON
13:32:30  17  		  License.Invoice_Id = Invoice.Id
13:32:30  18  	      INNER JOIN Subscription
13:32:30  19  		ON
13:32:30  20  		  License.Subscription_Id = Subscription.Id
13:32:30  21  	      INNER JOIN account
13:32:30  22  		ON
13:32:30  23  		  Subscription.Account_Id = account.id
13:32:30  24  	  WHERE
13:32:30  25  	    Account.Group_Id = in_group_id
13:32:30  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
13:32:30  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V20.INVOICE_OPEN;
13:32:30  28  END GET_INVOICE_IDS;
13:32:30  29  
13:32:30  30  
13:32:30  31  PROCEDURE IS_INVOICE_FOR_GC (
13:32:30  32  	in_invoice_id IN NUMBER,
13:32:30  33  	out_result    OUT NUMBER
13:32:30  34  ) AS
13:32:30  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
13:32:30  36  var_is_for_gc NUMBER;
13:32:30  37  BEGIN
13:32:30  38  	SELECT
13:32:30  39  	  count(1) into var_is_for_gc
13:32:30  40  	FROM GIFT_CERTIFICATE GC
13:32:30  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
13:32:30  42  
13:32:30  43  	IF var_is_for_gc > 0 THEN
13:32:30  44  	  out_result := 1;
13:32:30  45  	ELSE
13:32:30  46  	  out_result := 0;
13:32:30  47  	END IF;
13:32:30  48  END IS_INVOICE_FOR_GC;
13:32:30  49  
13:32:30  50  PROCEDURE CREATE_INVOICE(
13:32:30  51  /*
13:32:30  52  Throws exceptions:
13:32:30  53  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30  54  */
13:32:30  55  	  in_invoice_status IN NUMBER,
13:32:30  56  	  in_created_by     IN VARCHAR2,
13:32:30  57  	  in_tax_exempt_id  IN VARCHAR2,
13:32:30  58  	  out_invoice_id    OUT NUMBER
13:32:30  59  ) AS
13:32:30  60  -- VARIABLES
13:32:30  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
13:32:30  62  var_new_invoice_id NUMBER;
13:32:30  63  -- EXCEPTIONS
13:32:30  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30  65  BEGIN
13:32:30  66  
13:32:30  67  	PROCS_INVOICE_CRU_V20.CREATE_INVOICE(
13:32:30  68  	  out_invoice_id		 => var_new_invoice_id,
13:32:30  69  	  in_created_by 		 => in_created_by,
13:32:30  70  	  in_invoice_status_id		 => in_invoice_status,
13:32:30  71  	  in_tax_exempt_id		 => in_tax_exempt_id
13:32:30  72  	);
13:32:30  73  
13:32:30  74  	out_invoice_id := var_new_invoice_id;
13:32:30  75  
13:32:30  76  EXCEPTION
13:32:30  77  WHEN OTHERS THEN
13:32:30  78  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30  80  END CREATE_INVOICE;
13:32:30  81  
13:32:30  82  /************************************************************/
13:32:30  83  
13:32:30  84  PROCEDURE GET_PENDING_INVOICES (
13:32:30  85  /*
13:32:30  86  Throws exceptions:
13:32:30  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30  88  */
13:32:30  89  	out_result_set	     OUT SYS_REFCURSOR,
13:32:30  90  	in_row_number	     IN NUMBER DEFAULT NULL
13:32:30  91  ) AS
13:32:30  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
13:32:30  93  -- COMSTANTS
13:32:30  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
13:32:30  95  -- VARIABLES
13:32:30  96  var_row_number NUMBER;
13:32:30  97  BEGIN
13:32:30  98  
13:32:30  99  	IF in_row_number IS NULL THEN
13:32:30 100  	  var_row_number := DEFAULT_ROW_NUMBER;
13:32:30 101  	ELSE
13:32:30 102  	  var_row_number := in_row_number;
13:32:30 103  	END IF;
13:32:30 104  
13:32:30 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
13:32:30 106  	OPEN out_result_set FOR
13:32:30 107  SELECT * FROM
13:32:30 108  (
13:32:30 109  	SELECT
13:32:30 110  	  INVOICE.ID
13:32:30 111  	FROM
13:32:30 112  	  CHARGE
13:32:30 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
13:32:30 114  	WHERE
13:32:30 115  	  EXISTS(
13:32:30 116  	    SELECT NULL
13:32:30 117  	    FROM TRANSACTION
13:32:30 118  	    WHERE
13:32:30 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
13:32:30 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
13:32:30 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V20.TRUE
13:32:30 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
13:32:30 123  	  )
13:32:30 124  	  AND
13:32:30 125  	  NOT EXISTS(
13:32:30 126  	    SELECT NULL
13:32:30 127  	    FROM PROCESS_RETRY_THROTTLE
13:32:30 128  	    WHERE PROCESS_NAME = SPROC_NAME
13:32:30 129  	      AND GENERIC_ID = INVOICE.ID
13:32:30 130  	  )
13:32:30 131  	  AND ROWNUM <= var_row_number*10
13:32:30 132  	  ORDER BY dbms_random.value
13:32:30 133  ) WHERE
13:32:30 134  	  ROWNUM <= var_row_number;
13:32:30 135  
13:32:30 136  EXCEPTION
13:32:30 137  WHEN OTHERS THEN
13:32:30 138  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 140  END GET_PENDING_INVOICES;
13:32:30 141  
13:32:30 142  /************************************************************/
13:32:30 143  
13:32:30 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
13:32:30 145  	in_invoice_id IN  NUMBER
13:32:30 146  ) RETURN NUMBER AS
13:32:30 147  var_amount NUMBER;
13:32:30 148  BEGIN
13:32:30 149  
13:32:30 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
13:32:30 151  	RETURN var_amount;
13:32:30 152  
13:32:30 153  END;
13:32:30 154  
13:32:30 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:30 156  /*
13:32:30 157  Throws exceptions:
13:32:30 158  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 159  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 160  */
13:32:30 161  	in_invoice_id IN  NUMBER,
13:32:30 162  	out_amount    OUT NUMBER
13:32:30 163  ) AS
13:32:30 164  -- VARIABLES
13:32:30 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
13:32:30 166  temp_invoice_id	     NUMBER;
13:32:30 167  var_total_amount	     NUMBER(10,6);
13:32:30 168  var_final_amount	     NUMBER(10,2);
13:32:30 169  var_line_item_amount   NUMBER(10,6);
13:32:30 170  
13:32:30 171  var_line_items_set     SYS_REFCURSOR;
13:32:30 172  var_line_item_id	     NUMBER;
13:32:30 173  var_line_item_quantity NUMBER;
13:32:30 174  var_line_item_price    NUMBER (10,2);
13:32:30 175  
13:32:30 176  var_discount_fixed_amount NUMBER (10,2);
13:32:30 177  var_discount_percent_amount NUMBER (10,2);
13:32:30 178  
13:32:30 179  -- EXCEPTIONS
13:32:30 180  BAD_INVOICE_ID		    EXCEPTION;
13:32:30 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
13:32:30 182  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 183  BEGIN
13:32:30 184  
13:32:30 185  	var_total_amount := 0;
13:32:30 186  
13:32:30 187  	-- Check that given invoice exists
13:32:30 188  	BEGIN
13:32:30 189  	  SELECT
13:32:30 190  	    INVOICE.ID into temp_invoice_id
13:32:30 191  	  FROM
13:32:30 192  	    INVOICE
13:32:30 193  	  WHERE
13:32:30 194  	    INVOICE.ID = in_invoice_id
13:32:30 195  	    AND ROWNUM <= 1;
13:32:30 196  	  EXCEPTION
13:32:30 197  	    WHEN NO_DATA_FOUND THEN
13:32:30 198  	      RAISE BAD_INVOICE_ID;
13:32:30 199  	END;
13:32:30 200  
13:32:30 201  	-- Calculate amount for each line item in invoice
13:32:30 202  	FOR f_line_item IN (
13:32:30 203  	  SELECT
13:32:30 204  	    LINE_ITEM.ID
13:32:30 205  	  FROM
13:32:30 206  	    LINE_ITEM
13:32:30 207  	  WHERE
13:32:30 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
13:32:30 209  	)
13:32:30 210  	LOOP
13:32:30 211  	  BEGIN
13:32:30 212  	    PROCS_LINE_ITEMS_V20.CALCULATE_LINE_ITEM_AMOUNT(
13:32:30 213  	      in_line_item_id => f_line_item.ID,
13:32:30 214  	      out_amount      => var_line_item_amount
13:32:30 215  	    );
13:32:30 216  	    var_total_amount := var_total_amount + var_line_item_amount;
13:32:30 217  	    EXCEPTION
13:32:30 218  	      WHEN OTHERS THEN
13:32:30 219  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
13:32:30 221  	  END;
13:32:30 222  	END LOOP;
13:32:30 223  	var_final_amount := var_total_amount;
13:32:30 224  	out_amount := var_final_amount;
13:32:30 225  
13:32:30 226  EXCEPTION
13:32:30 227  WHEN BAD_INVOICE_ID THEN
13:32:30 228  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 229  	  SPROC_NAME, 'No such invoice');
13:32:30 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
13:32:30 231  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
13:32:30 233  WHEN OTHERS THEN
13:32:30 234  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 236  END;
13:32:30 237  
13:32:30 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
13:32:30 239  /*
13:32:30 240  Throws exceptions:
13:32:30 241  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 242  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 243  */
13:32:30 244  	in_invoice_id  IN  NUMBER,
13:32:30 245  	out_account_id OUT NUMBER
13:32:30 246  ) AS
13:32:30 247  -- VARIABLES
13:32:30 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
13:32:30 249  temp_gc_account_id NUMBER;
13:32:30 250  temp_ss_account_id NUMBER;
13:32:30 251  temp_invoice_id	 NUMBER;
13:32:30 252  -- EXCEPTIONS
13:32:30 253  BAD_INVOICE_ID	   EXCEPTION;
13:32:30 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
13:32:30 255  BEGIN
13:32:30 256  
13:32:30 257  	-- Check that given invoice exists
13:32:30 258  	BEGIN
13:32:30 259  	  SELECT
13:32:30 260  	    INVOICE.ID into temp_invoice_id
13:32:30 261  	  FROM
13:32:30 262  	    INVOICE
13:32:30 263  	  WHERE
13:32:30 264  	    INVOICE.ID = in_invoice_id;
13:32:30 265  	  EXCEPTION
13:32:30 266  	    WHEN NO_DATA_FOUND THEN
13:32:30 267  	      RAISE BAD_INVOICE_ID;
13:32:30 268  	END;
13:32:30 269  
13:32:30 270  	-- Try to find gift certificate with given invoice
13:32:30 271  	BEGIN
13:32:30 272  	  SELECT
13:32:30 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
13:32:30 274  	  FROM
13:32:30 275  	    GIFT_CERTIFICATE
13:32:30 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
13:32:30 277  	  WHERE
13:32:30 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
13:32:30 279  	    AND ROWNUM <= 1;
13:32:30 280  	  EXCEPTION
13:32:30 281  	    WHEN NO_DATA_FOUND THEN
13:32:30 282  	      temp_gc_account_id := NULL;
13:32:30 283  	END;
13:32:30 284  
13:32:30 285  	-- check subscriptions for given invoice
13:32:30 286  	IF temp_gc_account_id IS NOT NULL THEN
13:32:30 287  	  out_account_id := temp_gc_account_id;
13:32:30 288  	ELSE
13:32:30 289  	  BEGIN
13:32:30 290  	    SELECT
13:32:30 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
13:32:30 292  	    FROM
13:32:30 293  	      LICENSE
13:32:30 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:30 296  	    WHERE
13:32:30 297  	      LICENSE.INVOICE_ID = in_invoice_id
13:32:30 298  	      AND ROWNUM <= 1;
13:32:30 299  	    EXCEPTION
13:32:30 300  	      WHEN NO_DATA_FOUND THEN
13:32:30 301  		temp_ss_account_id := NULL;
13:32:30 302  	  END;
13:32:30 303  	  IF temp_ss_account_id IS NULL THEN
13:32:30 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
13:32:30 305  	  ELSE
13:32:30 306  	    out_account_id := temp_ss_account_id;
13:32:30 307  	  END IF;
13:32:30 308  	END IF;
13:32:30 309  
13:32:30 310  EXCEPTION
13:32:30 311  WHEN BAD_INVOICE_ID THEN
13:32:30 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 313  	  SPROC_NAME, 'No such invoice');
13:32:30 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
13:32:30 315  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 316  	  SPROC_NAME, 'Could not find account by given invoice id');
13:32:30 317  WHEN OTHERS THEN
13:32:30 318  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 320  END GET_ACCOUNT_BY_INVOICE_ID;
13:32:30 321  
13:32:30 322  /*****************************************************************/
13:32:30 323  
13:32:30 324  PROCEDURE GET_INVOICE_DETAILS (
13:32:30 325  /*
13:32:30 326  Throws exceptions:
13:32:30 327  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 328  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 329  */
13:32:30 330  	in_invoice_id	   IN  NUMBER,
13:32:30 331  	out_group_id	   OUT NUMBER,
13:32:30 332  	out_status_id	   OUT NUMBER,
13:32:30 333  	out_line_items_set OUT SYS_REFCURSOR,
13:32:30 334  	out_pp_charges_set OUT SYS_REFCURSOR,
13:32:30 335  	out_cc_charges_set OUT SYS_REFCURSOR,
13:32:30 336  	out_gc_charges_set OUT SYS_REFCURSOR
13:32:30 337  ) AS
13:32:30 338  -- VARIABLES
13:32:30 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
13:32:30 340  
13:32:30 341  -- EXCEPTIONS
13:32:30 342  BAD_INVOICE_ID	     EXCEPTION;
13:32:30 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
13:32:30 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 345  BEGIN
13:32:30 346  
13:32:30 347  	-- get invoice status
13:32:30 348  	BEGIN
13:32:30 349  	  SELECT
13:32:30 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
13:32:30 351  	  FROM
13:32:30 352  	    INVOICE
13:32:30 353  	  WHERE
13:32:30 354  	    INVOICE.ID = in_invoice_id;
13:32:30 355  	  EXCEPTION
13:32:30 356  	    WHEN NO_DATA_FOUND THEN
13:32:30 357  	      RAISE BAD_INVOICE_ID;
13:32:30 358  	END;
13:32:30 359  
13:32:30 360  	-- get group id
13:32:30 361  	BEGIN
13:32:30 362  	  PROCS_INVOICE_V20.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
13:32:30 363  	  EXCEPTION
13:32:30 364  	    WHEN OTHERS THEN
13:32:30 365  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
13:32:30 367  	END;
13:32:30 368  
13:32:30 369  	-- get all line items for given invoice
13:32:30 370  	OPEN out_line_items_set FOR
13:32:30 371  	SELECT
13:32:30 372  	  LINE_ITEM.AMOUNT,
13:32:30 373  	  LINE_ITEM.ID,
13:32:30 374  	  LINE_ITEM.CREATED_BY,
13:32:30 375  	  LINE_ITEM.CREATE_DATE,
13:32:30 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
13:32:30 377  	  LINE_ITEM.TAXES_AMOUNT,
13:32:30 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
13:32:30 379  	  LINE_ITEM.INVOICE_ID
13:32:30 380  	FROM
13:32:30 381  	  LINE_ITEM
13:32:30 382  	WHERE
13:32:30 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
13:32:30 384  
13:32:30 385  	-- get all pp charges for given invoice
13:32:30 386  	OPEN out_pp_charges_set FOR
13:32:30 387  	SELECT
13:32:30 388  	  CHARGE.ID as "CHARGE_ID",
13:32:30 389  	  CHARGE_AMOUNT,
13:32:30 390  	  CHARGE.INSTRUMENT_ID,
13:32:30 391  	  CHARGE.CHARGE_STATUS_ID
13:32:30 392  	FROM
13:32:30 393  	  CHARGE
13:32:30 394  	WHERE
13:32:30 395  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL;
13:32:30 397  
13:32:30 398  	-- get all credir cards for given invoice
13:32:30 399  	OPEN out_cc_charges_set FOR
13:32:30 400  	SELECT
13:32:30 401  	  CHARGE.ID as "CHARGE_ID",
13:32:30 402  	  CHARGE.CHARGE_AMOUNT,
13:32:30 403  	  CHARGE.INSTRUMENT_ID,
13:32:30 404  	  CHARGE.CHARGE_STATUS_ID
13:32:30 405  	FROM
13:32:30 406  	  CHARGE
13:32:30 407  	WHERE
13:32:30 408  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD;
13:32:30 410  
13:32:30 411  	OPEN out_gc_charges_set FOR
13:32:30 412  	SELECT
13:32:30 413  	  CHARGE.ID as "CHARGE_ID",
13:32:30 414  	  CHARGE.CHARGE_AMOUNT,
13:32:30 415  	  CHARGE.INSTRUMENT_ID,
13:32:30 416  	  CHARGE.CHARGE_STATUS_ID
13:32:30 417  	FROM
13:32:30 418  	  CHARGE
13:32:30 419  	WHERE
13:32:30 420  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
13:32:30 422  
13:32:30 423  EXCEPTION
13:32:30 424  WHEN BAD_INVOICE_ID THEN
13:32:30 425  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 426  	  SPROC_NAME, 'No such invoice');
13:32:30 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
13:32:30 428  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
13:32:30 430  WHEN OTHERS THEN
13:32:30 431  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 433  END GET_INVOICE_DETAILS;
13:32:30 434  
13:32:30 435  /******************************************************/
13:32:30 436  -- norlov: #38796
13:32:30 437  PROCEDURE GET_TRANSACTION_INVOICE (
13:32:30 438  /*
13:32:30 439  Throws exceptions:
13:32:30 440  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 441  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 442  */
13:32:30 443  	in_transaction_id  IN  NUMBER,
13:32:30 444  	out_result_set	      OUT SYS_REFCURSOR
13:32:30 445  ) AS
13:32:30 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
13:32:30 447  -- VARIABLES
13:32:30 448  temp_transaction_id  NUMBER;
13:32:30 449  var_invoice_id	   NUMBER;
13:32:30 450  var_subscription_id  NUMBER;
13:32:30 451  var_offer_chain_id   NUMBER;
13:32:30 452  var_offer_chain_name VARCHAR2(255);
13:32:30 453  -- EXCEPTIONS
13:32:30 454  BAD_TRANSACTION_ID     EXCEPTION;
13:32:30 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 456  BEGIN
13:32:30 457   -- check if there is the transaction
13:32:30 458  	BEGIN
13:32:30 459  	  SELECT
13:32:30 460  	    TRANSACTION.ID into temp_transaction_id
13:32:30 461  	  FROM
13:32:30 462  	    TRANSACTION
13:32:30 463  	  WHERE
13:32:30 464  	    TRANSACTION.ID = in_transaction_id;
13:32:30 465  	  EXCEPTION
13:32:30 466  	    WHEN NO_DATA_FOUND THEN
13:32:30 467  	      RAISE BAD_TRANSACTION_ID;
13:32:30 468  	END;
13:32:30 469  
13:32:30 470  	-- Get invoice id
13:32:30 471  	SELECT DISTINCT
13:32:30 472  	  CHARGE.INVOICE_ID into var_invoice_id
13:32:30 473  	FROM
13:32:30 474  	  CHARGE
13:32:30 475  	WHERE
13:32:30 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
13:32:30 477  
13:32:30 478  	-- Get subscription id if exists
13:32:30 479  	BEGIN
13:32:30 480  	  SELECT DISTINCT
13:32:30 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
13:32:30 482  	  FROM
13:32:30 483  	    LICENSE
13:32:30 484  	  WHERE
13:32:30 485  	    LICENSE.INVOICE_ID = var_invoice_id;
13:32:30 486  	  EXCEPTION
13:32:30 487  	    WHEN NO_DATA_FOUND THEN
13:32:30 488  	      var_subscription_id := NULL;
13:32:30 489  	END;
13:32:30 490  
13:32:30 491  	IF var_subscription_id IS NOT NULL THEN
13:32:30 492  	  -- Fetch offer chain from subscription
13:32:30 493  	  SELECT
13:32:30 494  	    OFFER_CHAIN.ID,
13:32:30 495  	    OFFER_CHAIN.NAME
13:32:30 496  	    into
13:32:30 497  	    var_offer_chain_id,
13:32:30 498  	    var_offer_chain_name
13:32:30 499  	  FROM
13:32:30 500  	    OFFER_CHAIN
13:32:30 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 502  	  WHERE
13:32:30 503  	    SUBSCRIPTION.ID = var_subscription_id;
13:32:30 504  	ELSE
13:32:30 505  	  -- Fetch offer chain from GC
13:32:30 506  	  SELECT
13:32:30 507  	    OFFER_CHAIN.ID,
13:32:30 508  	    OFFER_CHAIN.NAME
13:32:30 509  	    into
13:32:30 510  	    var_offer_chain_id,
13:32:30 511  	    var_offer_chain_name
13:32:30 512  	  FROM
13:32:30 513  	    OFFER_CHAIN
13:32:30 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 515  	  WHERE
13:32:30 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
13:32:30 517  	END IF;
13:32:30 518  
13:32:30 519  	OPEN out_result_set FOR
13:32:30 520  	SELECT DISTINCT
13:32:30 521  	  var_invoice_id       AS "INVOICE_ID",
13:32:30 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
13:32:30 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
13:32:30 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
13:32:30 525  	FROM
13:32:30 526  	  DUAL;
13:32:30 527  
13:32:30 528  EXCEPTION
13:32:30 529  WHEN BAD_TRANSACTION_ID THEN
13:32:30 530  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 531  	  SPROC_NAME, 'No such transaction');
13:32:30 532  WHEN OTHERS THEN
13:32:30 533  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 535  END GET_TRANSACTION_INVOICE;
13:32:30 536  
13:32:30 537  /******************************************************/
13:32:30 538  
13:32:30 539  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:30 540  /*
13:32:30 541  Throws exceptions:
13:32:30 542  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 543  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 544  */
13:32:30 545  	in_invoice_id		       IN NUMBER,
13:32:30 546  	in_invoice_status_id	       IN NUMBER,
13:32:30 547  	in_updated_by		       IN VARCHAR2
13:32:30 548  ) AS
13:32:30 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
13:32:30 550  -- VARIABLES
13:32:30 551  temp_invoice_id NUMBER;
13:32:30 552  -- EXCEPTIONS
13:32:30 553  BAD_INVOICE_ID		      EXCEPTION;
13:32:30 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
13:32:30 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
13:32:30 556  BEGIN
13:32:30 557  
13:32:30 558  	-- Check if invoice exists
13:32:30 559  	BEGIN
13:32:30 560  	  SELECT
13:32:30 561  	    INVOICE.ID into temp_invoice_id
13:32:30 562  	  FROM
13:32:30 563  	    INVOICE
13:32:30 564  	  WHERE
13:32:30 565  	    INVOICE.ID = in_invoice_id;
13:32:30 566  	  EXCEPTION
13:32:30 567  	    WHEN NO_DATA_FOUND THEN
13:32:30 568  	      RAISE BAD_INVOICE_ID;
13:32:30 569  	END;
13:32:30 570  
13:32:30 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_OPEN
13:32:30 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
13:32:30 573  	  RAISE BAD_INVOICE_STATUS_ID;
13:32:30 574  	END IF;
13:32:30 575  
13:32:30 576  	PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
13:32:30 577  	  in_invoice_id 		 => in_invoice_id,
13:32:30 578  	  in_invoice_status_id		 => in_invoice_status_id,
13:32:30 579  	  in_updated_by 		 => in_updated_by
13:32:30 580  	);
13:32:30 581  
13:32:30 582  EXCEPTION
13:32:30 583  WHEN BAD_INVOICE_STATUS_ID THEN
13:32:30 584  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 585  	  SPROC_NAME, 'Bad invoice status id');
13:32:30 586  WHEN BAD_INVOICE_ID THEN
13:32:30 587  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 588  	  SPROC_NAME, 'No such invoice');
13:32:30 589  WHEN OTHERS THEN
13:32:30 590  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 592  END UPDATE_INVOICE_STATUS;
13:32:30 593  
13:32:30 594  /****************************************************************/
13:32:30 595  
13:32:30 596  FUNCTION IS_INVOICE_PAYING_STARTED (
13:32:30 597  /*
13:32:30 598  Throws exceptions:
13:32:30 599  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 600  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 601  */
13:32:30 602  	in_invoice_id IN NUMBER
13:32:30 603  ) RETURN NUMBER AS
13:32:30 604  -- VARIABLES
13:32:30 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
13:32:30 606  temp_invoice_id		 NUMBER;
13:32:30 607  var_processed_charges_num  NUMBER;
13:32:30 608  var_processed_transac_num  NUMBER;
13:32:30 609  var_success_attempts_num	 NUMBER;
13:32:30 610  var_is_gc 		 NUMBER;
13:32:30 611  -- EXCEPTIONS
13:32:30 612  BAD_INVOICE_ID EXCEPTION;
13:32:30 613  BEGIN
13:32:30 614  
13:32:30 615  	-- Check that invoice exists
13:32:30 616  	BEGIN
13:32:30 617  	  SELECT
13:32:30 618  	    INVOICE.ID into temp_invoice_id
13:32:30 619  	  FROM
13:32:30 620  	    INVOICE
13:32:30 621  	  WHERE
13:32:30 622  	    INVOICE.ID = in_invoice_id;
13:32:30 623  	  EXCEPTION
13:32:30 624  	   WHEN NO_DATA_FOUND THEN
13:32:30 625  	     RAISE BAD_INVOICE_ID;
13:32:30 626  	END;
13:32:30 627  
13:32:30 628  	-- Check that there are tansaction attempts with status success
13:32:30 629  	SELECT
13:32:30 630  	  COUNT(1) into var_success_attempts_num
13:32:30 631  	FROM
13:32:30 632  	  TRANSACTION_ATTEMPT ta,
13:32:30 633  	  TRANSACTION t,
13:32:30 634  	  CHARGE c
13:32:30 635  	WHERE
13:32:30 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS and
13:32:30 637  	  ta.transaction_id = t.id and
13:32:30 638  	  c.transaction_id = t.id and
13:32:30 639  	  t.is_refund = GLOBAL_CONSTANTS_V20.FALSE and
13:32:30 640  	  c.invoice_id = in_invoice_id
13:32:30 641  	;
13:32:30 642  
13:32:30 643  	IF var_success_attempts_num > 0 THEN
13:32:30 644  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 645  	END IF;
13:32:30 646  
13:32:30 647  	SELECT
13:32:30 648  	  COUNT(1) into var_success_attempts_num
13:32:30 649  	FROM
13:32:30 650  	  TRANSACTION t,
13:32:30 651  	  CHARGE c
13:32:30 652  	WHERE
13:32:30 653  	  c.transaction_id = t.id and
13:32:30 654  	  t.is_refund = GLOBAL_CONSTANTS_V20.FALSE and
13:32:30 655  	  t.is_settled = GLOBAL_CONSTANTS_V20.TRUE and
13:32:30 656  	  c.invoice_id = in_invoice_id
13:32:30 657  	;
13:32:30 658  
13:32:30 659  	IF var_success_attempts_num > 0 THEN
13:32:30 660  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 661  	END IF;
13:32:30 662  
13:32:30 663  	SELECT
13:32:30 664  	  COUNT(1) into var_is_gc
13:32:30 665  	FROM
13:32:30 666  	  gift_certificate gc
13:32:30 667  	WHERE
13:32:30 668  	  gc.finalized_invoice_id = in_invoice_id
13:32:30 669  	;
13:32:30 670  
13:32:30 671  	IF var_is_gc > 0 THEN
13:32:30 672  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 673  	END IF;
13:32:30 674  
13:32:30 675  	RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 676  
13:32:30 677  EXCEPTION
13:32:30 678  WHEN BAD_INVOICE_ID THEN
13:32:30 679  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 680  	  SPROC_NAME, 'No such invoice');
13:32:30 681  WHEN OTHERS THEN
13:32:30 682  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 684  END IS_INVOICE_PAYING_STARTED;
13:32:30 685  
13:32:30 686  /******************************************************************************/
13:32:30 687  
13:32:30 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
13:32:30 689  	in_invoice_id  IN NUMBER,
13:32:30 690  	out_is_started OUT NUMBER
13:32:30 691  ) AS
13:32:30 692  BEGIN
13:32:30 693  	-- Just a wrapper
13:32:30 694  	out_is_started := PROCS_INVOICE_V20.IS_INVOICE_PAYING_STARTED(in_invoice_id);
13:32:30 695  END P_IS_INVOICE_PAYING_STARTED;
13:32:30 696  
13:32:30 697  /******************************************************************************/
13:32:30 698  
13:32:30 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
13:32:30 700  	in_invoice_id	      IN NUMBER,
13:32:30 701  	in_chargeback_date    IN DATE,
13:32:30 702  	out_chargeback_amount OUT NUMBER
13:32:30 703  ) AS
13:32:30 704  -- VARIABLES
13:32:30 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
13:32:30 706  var_chargeback_date    DATE;
13:32:30 707  temp_invoice_id	     NUMBER;
13:32:30 708  var_licenses_number    NUMBER;
13:32:30 709  var_invoice_start_date DATE;
13:32:30 710  var_invoice_end_date   DATE;
13:32:30 711  var_offer_id	     NUMBER;
13:32:30 712  var_offer_days_interval NUMBER;
13:32:30 713  var_license_days_used  NUMBER;
13:32:30 714  var_invoice_amount     NUMBER(10,2);
13:32:30 715  var_offer_chain_id     NUMBER;
13:32:30 716  var_offer_chain_meta_data_val VARCHAR2(1024);
13:32:30 717  var_offer_chain_full_refund   NUMBER;
13:32:30 718  var_offer_chain_prorated_ref  NUMBER;
13:32:30 719  var_chargeback_calculated NUMBER;
13:32:30 720  var_max_invoice_refund	NUMBER;
13:32:30 721  -- EXCEPTIONS
13:32:30 722  BAD_INVOICE_ID		  EXCEPTION;
13:32:30 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
13:32:30 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
13:32:30 725  BEGIN
13:32:30 726  
13:32:30 727  	IF in_chargeback_date IS NULL THEN
13:32:30 728  	  var_chargeback_date := PROCS_COMMON_V20.NORMALIZE_DATE(current_date);
13:32:30 729  	ELSE
13:32:30 730  	  var_chargeback_date := PROCS_COMMON_V20.NORMALIZE_DATE(in_chargeback_date);
13:32:30 731  	END IF;
13:32:30 732  
13:32:30 733  	-- Check that invoice exists
13:32:30 734  	BEGIN
13:32:30 735  	  SELECT
13:32:30 736  	    INVOICE.ID into temp_invoice_id
13:32:30 737  	  FROM
13:32:30 738  	    INVOICE
13:32:30 739  	  WHERE
13:32:30 740  	    INVOICE.ID = in_invoice_id;
13:32:30 741  	  EXCEPTION
13:32:30 742  	    WHEN NO_DATA_FOUND THEN
13:32:30 743  	      RAISE BAD_INVOICE_ID;
13:32:30 744  	END;
13:32:30 745  
13:32:30 746  	-- Check that invoice has at least one license
13:32:30 747  	SELECT
13:32:30 748  	  COUNT(*) into var_licenses_number
13:32:30 749  	FROM
13:32:30 750  	  LICENSE
13:32:30 751  	WHERE
13:32:30 752  	  LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 753  
13:32:30 754  	IF var_licenses_number = 0 THEN
13:32:30 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
13:32:30 756  	END IF;
13:32:30 757  
13:32:30 758  	SELECT
13:32:30 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
13:32:30 760  	FROM
13:32:30 761  	  LICENSE
13:32:30 762  	WHERE
13:32:30 763  	  LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 764  
13:32:30 765  	var_invoice_start_date := PROCS_COMMON_V20.NORMALIZE_DATE(var_invoice_start_date);
13:32:30 766  
13:32:30 767  	SELECT DISTINCT
13:32:30 768  	  LICENSE.OFFER_ID into var_offer_id
13:32:30 769  	FROM
13:32:30 770  	  LICENSE
13:32:30 771  	WHERE
13:32:30 772  	  LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 773  
13:32:30 774  	SELECT
13:32:30 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
13:32:30 776  	FROM
13:32:30 777  	  LICENSE
13:32:30 778  	WHERE
13:32:30 779  	  LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 780  
13:32:30 781  	-- All licenses for given invoice should point into the same offer
13:32:30 782  
13:32:30 783  	PROCS_OFFER_CHAIN_V20.GET_OFFER_LENGTH_IN_DAYS(
13:32:30 784  	  in_offer_id	=> var_offer_id,
13:32:30 785  	  in_start_date => var_invoice_start_date,
13:32:30 786  	  out_days	=> var_offer_days_interval
13:32:30 787  	);
13:32:30 788  
13:32:30 789  	IF var_offer_days_interval = 0 THEN
13:32:30 790  	  RAISE OFFER_LENGTH_IS_ZERO;
13:32:30 791  	END IF;
13:32:30 792  
13:32:30 793  	PROCS_INVOICE_V20.GET_INVOICE_DAYS_USED_NUMBER(
13:32:30 794  	  in_invoice_id      => in_invoice_id,
13:32:30 795  	  in_chargeback_date => var_chargeback_date,
13:32:30 796  	  out_days_num	     => var_license_days_used
13:32:30 797  	);
13:32:30 798  
13:32:30 799  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(
13:32:30 800  	  in_invoice_id => in_invoice_id,
13:32:30 801  	  out_amount	=> var_invoice_amount
13:32:30 802  	);
13:32:30 803  
13:32:30 804  	-- 39437
13:32:30 805  	-- Get offer chain id by invoice id
13:32:30 806  	SELECT DISTINCT
13:32:30 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
13:32:30 808  	FROM
13:32:30 809  	  SUBSCRIPTION
13:32:30 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 811  	WHERE
13:32:30 812  	  LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 813  
13:32:30 814  	-- Get offer chain's meta data full amount value
13:32:30 815  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
13:32:30 816  	  in_offer_chain_id => var_offer_chain_id,
13:32:30 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V20.OFFER_CHAIN_FULL_REFUND,
13:32:30 818  	  out_value	    => var_offer_chain_meta_data_val
13:32:30 819  	);
13:32:30 820  	IF var_offer_chain_meta_data_val IS NULL THEN
13:32:30 821  	  var_offer_chain_full_refund := NULL;
13:32:30 822  	ELSE
13:32:30 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
13:32:30 824  	END IF;
13:32:30 825  
13:32:30 826  	-- Get offer chain's meta data prorated amount value
13:32:30 827  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
13:32:30 828  	  in_offer_chain_id => var_offer_chain_id,
13:32:30 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V20.OFFER_CHAIN_PRORATED_REFUND,
13:32:30 830  	  out_value	    => var_offer_chain_meta_data_val
13:32:30 831  	);
13:32:30 832  	IF var_offer_chain_meta_data_val IS NULL THEN
13:32:30 833  	  var_offer_chain_prorated_ref := NULL;
13:32:30 834  	ELSE
13:32:30 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
13:32:30 836  	END IF;
13:32:30 837  
13:32:30 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 839  
13:32:30 840  	IF var_offer_chain_full_refund IS NOT NULL
13:32:30 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
13:32:30 843  	    out_chargeback_amount := var_invoice_amount;
13:32:30 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 845  	  END IF;
13:32:30 846  	END IF;
13:32:30 847  
13:32:30 848  	IF var_offer_chain_prorated_ref IS NOT NULL
13:32:30 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
13:32:30 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
13:32:30 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 853  	  END IF;
13:32:30 854  	END IF;
13:32:30 855  
13:32:30 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 857  	  PROCS_INVOICE_V20.GET_MAX_REFUND(
13:32:30 858  	    in_invoice_id => in_invoice_id,
13:32:30 859  	    out_amount	  => var_max_invoice_refund
13:32:30 860  	  );
13:32:30 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
13:32:30 862  	    out_chargeback_amount := var_max_invoice_refund;
13:32:30 863  	  END IF;
13:32:30 864  	END IF;
13:32:30 865  
13:32:30 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 867  	  out_chargeback_amount := 0;
13:32:30 868  	END IF;
13:32:30 869  
13:32:30 870  EXCEPTION
13:32:30 871  WHEN BAD_INVOICE_ID THEN
13:32:30 872  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 873  	  SPROC_NAME, 'No such invoice');
13:32:30 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
13:32:30 875  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 876  	  SPROC_NAME, 'No licenses found');
13:32:30 877  WHEN OFFER_LENGTH_IS_ZERO THEN
13:32:30 878  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 879  	  SPROC_NAME, 'Offer length is zero');
13:32:30 880  WHEN OTHERS THEN
13:32:30 881  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 883  END CALCULATE_INVOICE_CHARGEBACK;
13:32:30 884  
13:32:30 885  /********************************************************************/
13:32:30 886  
13:32:30 887  PROCEDURE APPLY_REFUND (
13:32:30 888  	in_invoice_id	     IN NUMBER,
13:32:30 889  	in_chargeback_amount IN NUMBER,
13:32:30 890  	in_created_by	     IN VARCHAR2,
13:32:30 891  	out_charge_id	     OUT NUMBER
13:32:30 892  ) AS
13:32:30 893  -- VARIABLES
13:32:30 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
13:32:30 895  temp_invoice_id		 NUMBER;
13:32:30 896  var_total_charges_amount	 NUMBER(10,2);
13:32:30 897  var_charge_amount_to_apply NUMBER(10,2);
13:32:30 898  var_transaction_id	 NUMBER;
13:32:30 899  var_instrument_type_id	 NUMBER;
13:32:30 900  var_instrument_id 	 NUMBER;
13:32:30 901  var_charge_id		 NUMBER;
13:32:30 902  -- EXCEPTIONS
13:32:30 903  BAD_INVOICE_ID		 EXCEPTION;
13:32:30 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
13:32:30 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
13:32:30 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
13:32:30 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
13:32:30 908  BEGIN
13:32:30 909  
13:32:30 910  	BEGIN
13:32:30 911  	  SELECT
13:32:30 912  	    INVOICE.ID into temp_invoice_id
13:32:30 913  	  FROM
13:32:30 914  	    INVOICE
13:32:30 915  	  WHERE
13:32:30 916  	    INVOICE.ID = in_invoice_id;
13:32:30 917  	  EXCEPTION
13:32:30 918  	    WHEN NO_DATA_FOUND THEN
13:32:30 919  	      RAISE BAD_INVOICE_ID;
13:32:30 920  	END;
13:32:30 921  
13:32:30 922  	SELECT
13:32:30 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
13:32:30 924  	FROM
13:32:30 925  	  CHARGE
13:32:30 926  	WHERE
13:32:30 927  	  CHARGE.INVOICE_ID = in_invoice_id
13:32:30 928  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 929  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
13:32:30 930  
13:32:30 931  	-- FIXME: Maybe whe should throw exception here?
13:32:30 932  	IF var_total_charges_amount < in_chargeback_amount THEN
13:32:30 933  	  var_charge_amount_to_apply := var_total_charges_amount;
13:32:30 934  	ELSE
13:32:30 935  	  var_charge_amount_to_apply := in_chargeback_amount;
13:32:30 936  	END IF;
13:32:30 937  
13:32:30 938  	BEGIN
13:32:30 939  	  PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 940  	    in_transaction_id	      => NULL,
13:32:30 941  	    in_status_id	      => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
13:32:30 942  	    in_amount		      => -var_charge_amount_to_apply,
13:32:30 943  	    in_created_by	      => in_created_by,
13:32:30 944  	    in_order_id 	      => NULL,
13:32:30 945  	    in_is_refund	      => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 946  	    in_transaction_type_code  => 'REFUND',
13:32:30 947  	    out_transaction_id	      => var_transaction_id
13:32:30 948  	  );
13:32:30 949  	  EXCEPTION
13:32:30 950  	    WHEN OTHERS THEN
13:32:30 951  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 952  	      RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 953  	END;
13:32:30 954  
13:32:30 955  	BEGIN
13:32:30 956  	  SELECT
13:32:30 957  	    C.INSTRUMENT_TYPE_ID,
13:32:30 958  	    C.INSTRUMENT_ID
13:32:30 959  	    into
13:32:30 960  	    var_instrument_type_id,
13:32:30 961  	    var_instrument_id
13:32:30 962  	  FROM
13:32:30 963  	    CHARGE C,
13:32:30 964  	    TRANSACTION_ATTEMPT TA,
13:32:30 965  	    TRANSACTION T
13:32:30 966  	  WHERE
13:32:30 967  	    C.INVOICE_ID = in_invoice_id and
13:32:30 968  	    C.TRANSACTION_ID = T.ID and
13:32:30 969  	    TA.TRANSACTION_ID = T.ID and
13:32:30 970  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS and
13:32:30 971  	    T.IS_REFUND = GLOBAL_CONSTANTS_V20.FALSE and
13:32:30 972  	    T.TRANSACTION_AMOUNT >= 0 and
13:32:30 973  	    rownum < 2;
13:32:30 974  	EXCEPTION
13:32:30 975  	    WHEN NO_DATA_FOUND THEN
13:32:30 976  	      RAISE CAN_NOT_FIND_INSTRUMENT;
13:32:30 977  	END;
13:32:30 978  	BEGIN
13:32:30 979  	  PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 980  	    in_invoice_id	  => in_invoice_id,
13:32:30 981  	    in_transaction_id	  => var_transaction_id,
13:32:30 982  	    in_instrument_type_id => var_instrument_type_id,
13:32:30 983  	    in_instrument_id	  => var_instrument_id,
13:32:30 984  	    in_charge_amount	  => -var_charge_amount_to_apply,
13:32:30 985  	    in_created_by	  => in_created_by,
13:32:30 986  	    in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 987  	    out_charge_id	  => var_charge_id
13:32:30 988  	  );
13:32:30 989  	  EXCEPTION
13:32:30 990  	    WHEN OTHERS THEN
13:32:30 991  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 992  	      RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 993  	END;
13:32:30 994  
13:32:30 995  	out_charge_id := var_charge_id;
13:32:30 996  
13:32:30 997  EXCEPTION
13:32:30 998  WHEN BAD_INVOICE_ID THEN
13:32:30 999  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1000  	   SPROC_NAME, 'No such invoice');
13:32:30 1001  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 1002  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1003  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 1004  WHEN CAN_NOT_FIND_INSTRUMENT THEN
13:32:30 1005  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1006  	   SPROC_NAME, 'Could not find financial instrument');
13:32:30 1007  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 1008  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1009  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 1010  WHEN OTHERS THEN
13:32:30 1011  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1012  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1013  END APPLY_REFUND;
13:32:30 1014  
13:32:30 1015  /******************************************************************************/
13:32:30 1016  
13:32:30 1017  PROCEDURE GET_MAX_REFUND (
13:32:30 1018  	 in_invoice_id IN NUMBER,
13:32:30 1019  	 out_amount    OUT NUMBER
13:32:30 1020  ) AS
13:32:30 1021  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
13:32:30 1022  -- VARIABLES
13:32:30 1023  temp_invoice_id	       NUMBER;
13:32:30 1024  var_invoice_refunds_sum NUMBER(10,2);
13:32:30 1025  var_invoice_charges_sum NUMBER(10,2);
13:32:30 1026  -- EXCEPTIONS
13:32:30 1027  BAD_INVOICE_ID EXCEPTION;
13:32:30 1028  BEGIN
13:32:30 1029  
13:32:30 1030  	 BEGIN
13:32:30 1031  	   SELECT
13:32:30 1032  	     INVOICE.ID into temp_invoice_id
13:32:30 1033  	   FROM
13:32:30 1034  	     INVOICE
13:32:30 1035  	   WHERE
13:32:30 1036  	     INVOICE.ID = in_invoice_id;
13:32:30 1037  	   EXCEPTION
13:32:30 1038  	     WHEN NO_DATA_FOUND THEN
13:32:30 1039  	       RAISE BAD_INVOICE_ID;
13:32:30 1040  	 END;
13:32:30 1041  
13:32:30 1042  	 var_invoice_refunds_sum := 0;
13:32:30 1043  	 var_invoice_charges_sum := 0;
13:32:30 1044  
13:32:30 1045  	 FOR f_charge IN (
13:32:30 1046  	   SELECT
13:32:30 1047  	     CHARGE.ID,
13:32:30 1048  	     CHARGE.CHARGE_STATUS_ID,
13:32:30 1049  	     CHARGE.CHARGE_AMOUNT,
13:32:30 1050  	     CHARGE.TRANSACTION_ID
13:32:30 1051  	   FROM
13:32:30 1052  	     CHARGE
13:32:30 1053  	   WHERE
13:32:30 1054  	     CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1055  	 )
13:32:30 1056  	 LOOP
13:32:30 1057  	   -- If charge.status = canceled then continue
13:32:30 1058  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
13:32:30 1059  
13:32:30 1060  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
13:32:30 1061  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 1062  		  AND PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 1063  		 -- Transaction collected
13:32:30 1064  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
13:32:30 1065  	       ELSE
13:32:30 1066  		 -- Transaction is not collected. Do nothing
13:32:30 1067  		 NULL;
13:32:30 1068  	       END IF;
13:32:30 1069  	     ELSE
13:32:30 1070  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 1071  		  AND PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 1072  		 -- If charge is processed transaction is not collected then do nothing
13:32:30 1073  		 NULL;
13:32:30 1074  	       ELSE
13:32:30 1075  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
13:32:30 1076  	       END IF;
13:32:30 1077  	     END IF;
13:32:30 1078  
13:32:30 1079  	   END IF;
13:32:30 1080  	 END LOOP;
13:32:30 1081  
13:32:30 1082  	 -- Refunds are negative
13:32:30 1083  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
13:32:30 1084  
13:32:30 1085  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
13:32:30 1086  
13:32:30 1087  EXCEPTION
13:32:30 1088  WHEN BAD_INVOICE_ID THEN
13:32:30 1089  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1090  	   SPROC_NAME, 'No such invoice');
13:32:30 1091  WHEN OTHERS THEN
13:32:30 1092  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1093  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1094  END GET_MAX_REFUND;
13:32:30 1095  
13:32:30 1096  /******************************************************************************/
13:32:30 1097  
13:32:30 1098  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
13:32:30 1099  	 in_invoice_id	     IN NUMBER,
13:32:30 1100  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
13:32:30 1101  	 out_days_num	     OUT NUMBER
13:32:30 1102  ) AS
13:32:30 1103  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
13:32:30 1104  -- VARIABLES
13:32:30 1105  temp_invoice_id	      NUMBER;
13:32:30 1106  var_license_start_date DATE;
13:32:30 1107  var_license_end_date   DATE;
13:32:30 1108  var_chargeback_date    DATE;
13:32:30 1109  var_invoice_days_used  NUMBER;
13:32:30 1110  -- EXCEPTIONS
13:32:30 1111  BAD_INVOICE_ID EXCEPTION;
13:32:30 1112  BEGIN
13:32:30 1113  
13:32:30 1114  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
13:32:30 1115  
13:32:30 1116  	 BEGIN
13:32:30 1117  	   SELECT
13:32:30 1118  	     INVOICE.ID into temp_invoice_id
13:32:30 1119  	   FROM
13:32:30 1120  	     INVOICE
13:32:30 1121  	   WHERE
13:32:30 1122  	     INVOICE.ID = in_invoice_id;
13:32:30 1123  	   EXCEPTION
13:32:30 1124  	     WHEN NO_DATA_FOUND THEN
13:32:30 1125  	       RAISE BAD_INVOICE_ID;
13:32:30 1126  	 END;
13:32:30 1127  
13:32:30 1128  	 var_invoice_days_used := 0;
13:32:30 1129  
13:32:30 1130  	 FOR f_license IN (
13:32:30 1131  	   SELECT
13:32:30 1132  	     LICENSE.START_DATE,
13:32:30 1133  	     LICENSE.END_DATE
13:32:30 1134  	   FROM
13:32:30 1135  	     LICENSE
13:32:30 1136  	   WHERE
13:32:30 1137  	     LICENSE.INVOICE_ID = in_invoice_id
13:32:30 1138  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V20.FALSE
13:32:30 1139  	 )
13:32:30 1140  	 LOOP
13:32:30 1141  	   var_license_start_date := PROCS_COMMON_V20.NORMALIZE_DATE(f_license.START_DATE);
13:32:30 1142  	   var_license_end_date := PROCS_COMMON_V20.NORMALIZE_DATE(f_license.END_DATE);
13:32:30 1143  
13:32:30 1144  	   IF var_license_start_date <= var_chargeback_date THEN
13:32:30 1145  	     IF var_license_end_date <= var_chargeback_date THEN
13:32:30 1146  	       -- License is passed
13:32:30 1147  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
13:32:30 1148  	     ELSE
13:32:30 1149  	       -- This is current license
13:32:30 1150  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
13:32:30 1151  	     END IF;
13:32:30 1152  	   ELSE
13:32:30 1153  	     -- if var_license_start_date > in_chargeback_date then do nothing
13:32:30 1154  	     NULL;
13:32:30 1155  	   END IF;
13:32:30 1156  	 END LOOP;
13:32:30 1157  
13:32:30 1158  	 out_days_num := var_invoice_days_used;
13:32:30 1159  
13:32:30 1160  EXCEPTION
13:32:30 1161  WHEN BAD_INVOICE_ID THEN
13:32:30 1162  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1163  	   SPROC_NAME, 'No such invoice');
13:32:30 1164  WHEN OTHERS THEN
13:32:30 1165  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1166  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1167  END GET_INVOICE_DAYS_USED_NUMBER;
13:32:30 1168  
13:32:30 1169  /******************************************************************************/
13:32:30 1170  
13:32:30 1171  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:30 1172  	 in_invoice_id	IN NUMBER,
13:32:30 1173  	 out_result_set OUT SYS_REFCURSOR
13:32:30 1174  ) AS
13:32:30 1175  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
13:32:30 1176  -- VARIABLES
13:32:30 1177  temp_invoice_id NUMBER;
13:32:30 1178  -- EXCEPTIONS
13:32:30 1179  BAD_INVOICE_ID EXCEPTION;
13:32:30 1180  BEGIN
13:32:30 1181  
13:32:30 1182  	 BEGIN
13:32:30 1183  	   SELECT
13:32:30 1184  	     INVOICE.ID into temp_invoice_id
13:32:30 1185  	   FROM
13:32:30 1186  	     INVOICE
13:32:30 1187  	   WHERE
13:32:30 1188  	     INVOICE.ID = in_invoice_id;
13:32:30 1189  	   EXCEPTION
13:32:30 1190  	     WHEN NO_DATA_FOUND THEN
13:32:30 1191  	       RAISE BAD_INVOICE_ID;
13:32:30 1192  	 END;
13:32:30 1193  
13:32:30 1194  	 OPEN out_result_set FOR
13:32:30 1195  	 SELECT
13:32:30 1196  	   LINE_ITEM.ID,
13:32:30 1197  	   LINE_ITEM.PRODUCT_OFFER_ID,
13:32:30 1198  	   LINE_ITEM.INVOICE_ID,
13:32:30 1199  	   LINE_ITEM.AMOUNT,
13:32:30 1200  	   LINE_ITEM.DISCOUNT_AMOUNT,
13:32:30 1201  	   LINE_ITEM.TAXES_AMOUNT,
13:32:30 1202  	   LINE_ITEM.CREATE_DATE,
13:32:30 1203  	   LINE_ITEM.CREATED_BY
13:32:30 1204  	 FROM
13:32:30 1205  	   LINE_ITEM
13:32:30 1206  	 WHERE
13:32:30 1207  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
13:32:30 1208  
13:32:30 1209  EXCEPTION
13:32:30 1210  WHEN BAD_INVOICE_ID THEN
13:32:30 1211  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1212  	   SPROC_NAME, 'No such invoice');
13:32:30 1213  WHEN OTHERS THEN
13:32:30 1214  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1216  END GET_INVOICE_LINE_ITEMS;
13:32:30 1217  
13:32:30 1218  /******************************************************************************/
13:32:30 1219  
13:32:30 1220  PROCEDURE GET_INVOICE_LICENSES (
13:32:30 1221  	 in_invoice_id	IN NUMBER,
13:32:30 1222  	 out_result_set OUT SYS_REFCURSOR
13:32:30 1223  ) AS
13:32:30 1224  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
13:32:30 1225  -- VARIABLES
13:32:30 1226  temp_invoice_id NUMBER;
13:32:30 1227  -- EXCEPTIONS
13:32:30 1228  BAD_INVOICE_ID EXCEPTION;
13:32:30 1229  BEGIN
13:32:30 1230  
13:32:30 1231  	 BEGIN
13:32:30 1232  	   SELECT
13:32:30 1233  	     INVOICE.ID into temp_invoice_id
13:32:30 1234  	   FROM
13:32:30 1235  	     INVOICE
13:32:30 1236  	   WHERE
13:32:30 1237  	     INVOICE.ID = in_invoice_id;
13:32:30 1238  	   EXCEPTION
13:32:30 1239  	     WHEN NO_DATA_FOUND THEN
13:32:30 1240  	       RAISE BAD_INVOICE_ID;
13:32:30 1241  	 END;
13:32:30 1242  
13:32:30 1243  	 OPEN out_result_set FOR
13:32:30 1244  	 SELECT
13:32:30 1245  	   LICENSE.ID,
13:32:30 1246  	   LICENSE.INVOICE_ID,
13:32:30 1247  	   LICENSE.CREATE_DATE,
13:32:30 1248  	   LICENSE.CREATED_BY,
13:32:30 1249  	   LICENSE.CURRENT_OFFER_INDEX,
13:32:30 1250  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
13:32:30 1251  	   LICENSE.END_DATE,
13:32:30 1252  	   LICENSE.ENTITLEMENT_END_DATE,
13:32:30 1253  	   LICENSE.IS_EXTENSION,
13:32:30 1254  	   LICENSE.LICENSE_STATUS_ID,
13:32:30 1255  	   LICENSE.NEEDS_ENTITLEMENTS,
13:32:30 1256  	   LICENSE.OFFER_ID,
13:32:30 1257  	   LICENSE.START_DATE,
13:32:30 1258  	   LICENSE.SUBSCRIPTION_ID,
13:32:30 1259  	   LICENSE.UPDATE_DATE,
13:32:30 1260  	   LICENSE.UPDATED_BY
13:32:30 1261  	 FROM
13:32:30 1262  	   LICENSE
13:32:30 1263  	 WHERE
13:32:30 1264  	   LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 1265  
13:32:30 1266  EXCEPTION
13:32:30 1267  WHEN BAD_INVOICE_ID THEN
13:32:30 1268  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1269  	   SPROC_NAME, 'No such invoice');
13:32:30 1270  WHEN OTHERS THEN
13:32:30 1271  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1272  	   SPROC_NAME, 'Unknown error');
13:32:30 1273  END GET_INVOICE_LICENSES;
13:32:30 1274  
13:32:30 1275  /******************************************************************************/
13:32:30 1276  
13:32:30 1277  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
13:32:30 1278  	 in_invoice_id	    IN NUMBER,
13:32:30 1279  	 out_offer_chain_id OUT NUMBER
13:32:30 1280  ) AS
13:32:30 1281  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
13:32:30 1282  -- VARIABLES
13:32:30 1283  temp_invoice_id NUMBER;
13:32:30 1284  -- EXCEPTIONS
13:32:30 1285  BAD_INVOICE_ID EXCEPTION;
13:32:30 1286  BEGIN
13:32:30 1287  
13:32:30 1288  	 BEGIN
13:32:30 1289  	   SELECT
13:32:30 1290  	     INVOICE.ID into temp_invoice_id
13:32:30 1291  	   FROM
13:32:30 1292  	     INVOICE
13:32:30 1293  	   WHERE
13:32:30 1294  	     INVOICE.ID = in_invoice_id;
13:32:30 1295  	   EXCEPTION
13:32:30 1296  	     WHEN NO_DATA_FOUND THEN
13:32:30 1297  	       RAISE BAD_INVOICE_ID;
13:32:30 1298  	 END;
13:32:30 1299  
13:32:30 1300  	 BEGIN
13:32:30 1301  	   SELECT DISTINCT
13:32:30 1302  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
13:32:30 1303  	   FROM
13:32:30 1304  	     LICENSE
13:32:30 1305  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:30 1306  	   WHERE
13:32:30 1307  	     LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 1308  	   EXCEPTION
13:32:30 1309  	     WHEN NO_DATA_FOUND THEN
13:32:30 1310  	       out_offer_chain_id := NULL;
13:32:30 1311  	 END;
13:32:30 1312  
13:32:30 1313  EXCEPTION
13:32:30 1314  WHEN BAD_INVOICE_ID THEN
13:32:30 1315  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1316  	   SPROC_NAME, 'No such invoice');
13:32:30 1317  WHEN OTHERS THEN
13:32:30 1318  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1319  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1320  END GET_OFFER_CH_ID_BY_INVOICE_ID;
13:32:30 1321  
13:32:30 1322  /******************************************************************************/
13:32:30 1323  
13:32:30 1324  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
13:32:30 1325  -- Closing invoice without refund
13:32:30 1326  	 in_invoice_id IN NUMBER,
13:32:30 1327  	 in_updated_by IN VARCHAR2
13:32:30 1328  ) AS
13:32:30 1329  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
13:32:30 1330  -- VARIABLES
13:32:30 1331  temp_invoice_id NUMBER;
13:32:30 1332  -- EXCEPTIONS
13:32:30 1333  BAD_INVOICE_ID EXCEPTION;
13:32:30 1334  BEGIN
13:32:30 1335  
13:32:30 1336  	 BEGIN
13:32:30 1337  	   SELECT
13:32:30 1338  	     INVOICE.ID into temp_invoice_id
13:32:30 1339  	   FROM
13:32:30 1340  	     INVOICE
13:32:30 1341  	   WHERE
13:32:30 1342  	     INVOICE.ID = in_invoice_id;
13:32:30 1343  	   EXCEPTION
13:32:30 1344  	     WHEN NO_DATA_FOUND THEN
13:32:30 1345  	       RAISE BAD_INVOICE_ID;
13:32:30 1346  	 END;
13:32:30 1347  
13:32:30 1348  	 -- Needs to close charges. No refund.
13:32:30 1349  	 FOR f_charge_to_close IN (
13:32:30 1350  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1351  	 )
13:32:30 1352  	 LOOP
13:32:30 1353  	   PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
13:32:30 1354  	     in_charge_id	 => f_charge_to_close.ID,
13:32:30 1355  	     in_updated_by	 => in_updated_by,
13:32:30 1356  	     in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
13:32:30 1357  	   );
13:32:30 1358  	 END LOOP;
13:32:30 1359  
13:32:30 1360  	 --FOR f_license_to_cancel IN (
13:32:30 1361  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
13:32:30 1362  	 --)
13:32:30 1363  	 --LOOP
13:32:30 1364  	 --  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
13:32:30 1365  	 --    in_license_id	     => f_license_to_cancel.ID,
13:32:30 1366  	 --    in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
13:32:30 1367  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V20.FALSE,
13:32:30 1368  	 --    in_updated_by	     => in_updated_by
13:32:30 1369  	 --  );
13:32:30 1370  	 --END LOOP;
13:32:30 1371  
13:32:30 1372  	 PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
13:32:30 1373  	   in_invoice_id		  => in_invoice_id,
13:32:30 1374  	   in_updated_by		  => in_updated_by,
13:32:30 1375  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V20.INVOICE_CLOSED
13:32:30 1376  	 );
13:32:30 1377  
13:32:30 1378  	 FOR f_transaction_to_close IN (
13:32:30 1379  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1380  	 )
13:32:30 1381  	 LOOP
13:32:30 1382  	   PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
13:32:30 1383  	     in_transaction_id	      => f_transaction_to_close.ID,
13:32:30 1384  	     in_updated_by	      => in_updated_by,
13:32:30 1385  	     in_transaction_status_id => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
13:32:30 1386  	   );
13:32:30 1387  	 END LOOP;
13:32:30 1388  
13:32:30 1389  EXCEPTION
13:32:30 1390  WHEN BAD_INVOICE_ID THEN
13:32:30 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1392  	   SPROC_NAME, 'No such invoice');
13:32:30 1393  WHEN OTHERS THEN
13:32:30 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1396  END CLOSE_INVOICE_AS_NOT_COLLECTED;
13:32:30 1397  
13:32:30 1398  /******************************************************************************/
13:32:30 1399  
13:32:30 1400  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
13:32:30 1401  	 in_invoice_id	     IN NUMBER,
13:32:30 1402  	 out_subscription_id OUT NUMBER
13:32:30 1403  ) AS
13:32:30 1404  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
13:32:30 1405  -- VARIABLES
13:32:30 1406  temp_invoice_id NUMBER;
13:32:30 1407  -- EXCEPTIONS
13:32:30 1408  BAD_INVOICE_ID		 EXCEPTION;
13:32:30 1409  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
13:32:30 1410  BEGIN
13:32:30 1411  
13:32:30 1412  	 BEGIN
13:32:30 1413  	   SELECT
13:32:30 1414  	     INVOICE.ID into temp_invoice_id
13:32:30 1415  	   FROM
13:32:30 1416  	     INVOICE
13:32:30 1417  	   WHERE
13:32:30 1418  	     INVOICE.ID = in_invoice_id;
13:32:30 1419  	   EXCEPTION
13:32:30 1420  	     WHEN NO_DATA_FOUND THEN
13:32:30 1421  	       RAISE BAD_INVOICE_ID;
13:32:30 1422  	 END;
13:32:30 1423  
13:32:30 1424  	 BEGIN
13:32:30 1425  	   SELECT DISTINCT
13:32:30 1426  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
13:32:30 1427  	   FROM
13:32:30 1428  	     LICENSE
13:32:30 1429  	   WHERE
13:32:30 1430  	     LICENSE.INVOICE_ID = in_invoice_id;
13:32:30 1431  	   EXCEPTION
13:32:30 1432  	     WHEN NO_DATA_FOUND THEN
13:32:30 1433  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
13:32:30 1434  	 END;
13:32:30 1435  
13:32:30 1436  EXCEPTION
13:32:30 1437  WHEN BAD_INVOICE_ID THEN
13:32:30 1438  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1439  	   SPROC_NAME, 'No such invoice');
13:32:30 1440  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
13:32:30 1441  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1442  	   SPROC_NAME, 'Could not find subscription for given invoice');
13:32:30 1443  WHEN OTHERS THEN
13:32:30 1444  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1445  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1446  END GET_SUBSCR_ID_BY_INVOICE_ID;
13:32:30 1447  
13:32:30 1448  /******************************************************************************/
13:32:30 1449  
13:32:30 1450  PROCEDURE IS_INVOICE_TAX_EXEMPT (
13:32:30 1451  /*
13:32:30 1452  Throws exceptions:
13:32:30 1453  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1454  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1455  Return:
13:32:30 1456  	 GLOBAL_CONSTANTS_V20.TRUE if ACCOUNT.EXEMPT_ID is not null
13:32:30 1457  	 GLOBAL_CONSTANTS_V20.FALSE else
13:32:30 1458  */
13:32:30 1459  	 in_invoice_id	   IN NUMBER,
13:32:30 1460  	 out_is_tax_exempt OUT NUMBER
13:32:30 1461  ) AS
13:32:30 1462  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
13:32:30 1463  -- VARIABLES
13:32:30 1464  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
13:32:30 1465  -- EXCEPTIONS
13:32:30 1466  BAD_INVOICE_ID EXCEPTION;
13:32:30 1467  BEGIN
13:32:30 1468  
13:32:30 1469  	 BEGIN
13:32:30 1470  	   SELECT
13:32:30 1471  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
13:32:30 1472  	   FROM
13:32:30 1473  	     INVOICE
13:32:30 1474  	   WHERE
13:32:30 1475  	     INVOICE.ID = in_invoice_id;
13:32:30 1476  	   EXCEPTION
13:32:30 1477  	     WHEN NO_DATA_FOUND THEN
13:32:30 1478  	       RAISE BAD_INVOICE_ID;
13:32:30 1479  	 END;
13:32:30 1480  
13:32:30 1481  	 IF var_is_tax_exempt IS NULL THEN
13:32:30 1482  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 1483  	 ELSE
13:32:30 1484  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 1485  	 END IF;
13:32:30 1486  
13:32:30 1487  EXCEPTION
13:32:30 1488  WHEN BAD_INVOICE_ID THEN
13:32:30 1489  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1490  	   SPROC_NAME, 'No such invoice');
13:32:30 1491  WHEN OTHERS THEN
13:32:30 1492  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1493  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1494  END IS_INVOICE_TAX_EXEMPT;
13:32:30 1495  
13:32:30 1496  /******************************************************************************/
13:32:30 1497  
13:32:30 1498  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
13:32:30 1499  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
13:32:30 1500  	 out_result_set OUT SYS_REFCURSOR
13:32:30 1501  ) AS
13:32:30 1502  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
13:32:30 1503  -- VARIABLE
13:32:30 1504  temp_order_id TRANSACTION.ORDER_ID%TYPE;
13:32:30 1505  -- EXCEPTIONS
13:32:30 1506  BAD_ORDER_ID EXCEPTION;
13:32:30 1507  CAN_NOT_FIND_INVOICE EXCEPTION;
13:32:30 1508  BEGIN
13:32:30 1509  
13:32:30 1510  	 OPEN out_result_set FOR
13:32:30 1511  	   SELECT DISTINCT
13:32:30 1512  	     CHARGE.INVOICE_ID
13:32:30 1513  	   FROM
13:32:30 1514  	     CHARGE
13:32:30 1515  	   INNER JOIN
13:32:30 1516  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
13:32:30 1517  	   WHERE
13:32:30 1518  	     TRANSACTION.ORDER_ID = in_order_id;
13:32:30 1519  
13:32:30 1520  EXCEPTION
13:32:30 1521  WHEN BAD_ORDER_ID THEN
13:32:30 1522  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1523  	   SPROC_NAME, 'No such transaction');
13:32:30 1524  WHEN CAN_NOT_FIND_INVOICE THEN
13:32:30 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1526  	   SPROC_NAME, 'Could not find invoice for given order id');
13:32:30 1527  WHEN OTHERS THEN
13:32:30 1528  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1529  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1530  END GET_INVOICE_BY_TRNS_ORDER_ID;
13:32:30 1531  
13:32:30 1532  /******************************************************************************/
13:32:30 1533  
13:32:30 1534  PROCEDURE GET_INVOICE_BY_ID (
13:32:30 1535  	 in_invoice_id	IN NUMBER,
13:32:30 1536  	 out_result_set OUT SYS_REFCURSOR
13:32:30 1537  ) AS
13:32:30 1538  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
13:32:30 1539  -- VARIABLE
13:32:30 1540  temp_invoice_id NUMBER;
13:32:30 1541  -- EXCEPTIONS
13:32:30 1542  BAD_INVOCIE_ID EXCEPTION;
13:32:30 1543  BEGIN
13:32:30 1544  
13:32:30 1545  	 BEGIN
13:32:30 1546  	   SELECT
13:32:30 1547  	     INVOICE.ID into temp_invoice_id
13:32:30 1548  	   FROM
13:32:30 1549  	     INVOICE
13:32:30 1550  	   WHERE
13:32:30 1551  	     INVOICE.ID = in_invoice_id;
13:32:30 1552  	   EXCEPTION
13:32:30 1553  	     WHEN NO_DATA_FOUND THEN
13:32:30 1554  	       RAISE BAD_INVOCIE_ID;
13:32:30 1555  	 END;
13:32:30 1556  
13:32:30 1557  	 OPEN out_result_set FOR
13:32:30 1558  	 SELECT
13:32:30 1559  	   INVOICE.ID,
13:32:30 1560  	   INVOICE.INVOICE_STATUS_ID,
13:32:30 1561  	   INVOICE.TAX_EXEMPT_ID,
13:32:30 1562  	   INVOICE.UPDATE_DATE,
13:32:30 1563  	   INVOICE.UPDATED_BY,
13:32:30 1564  	   INVOICE.CREATE_DATE,
13:32:30 1565  	   INVOICE.CREATED_BY
13:32:30 1566  	 FROM
13:32:30 1567  	   INVOICE
13:32:30 1568  	 WHERE
13:32:30 1569  	   INVOICE.ID = in_invoice_id;
13:32:30 1570  
13:32:30 1571  EXCEPTION
13:32:30 1572  WHEN BAD_INVOCIE_ID THEN
13:32:30 1573  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1574  	   SPROC_NAME, 'No such invoice');
13:32:30 1575  WHEN OTHERS THEN
13:32:30 1576  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1577  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1578  END GET_INVOICE_BY_ID;
13:32:30 1579  
13:32:30 1580  /******************************************************************************/
13:32:30 1581  
13:32:30 1582  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
13:32:30 1583  	 in_invoice_id		       IN NUMBER,
13:32:30 1584  	 out_is_tax_calculation_needed OUT NUMBER
13:32:30 1585  ) AS
13:32:30 1586  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
13:32:30 1587  BEGIN
13:32:30 1588  
13:32:30 1589  	 SELECT
13:32:30 1590  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
13:32:30 1591  	 FROM
13:32:30 1592  	   INVOICE I
13:32:30 1593  	 WHERE
13:32:30 1594  	   I.ID = in_invoice_id;
13:32:30 1595  
13:32:30 1596  EXCEPTION
13:32:30 1597  WHEN NO_DATA_FOUND THEN
13:32:30 1598  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1599  	   SPROC_NAME, 'No such invoice');
13:32:30 1600  WHEN OTHERS THEN
13:32:30 1601  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1602  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1603  END GET_IS_TAX_CALCULATION_NEEDED;
13:32:30 1604  
13:32:30 1605  /******************************************************************************/
13:32:30 1606  
13:32:30 1607  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
13:32:30 1608  	 in_invoice_id		      IN NUMBER,
13:32:30 1609  	 in_updated_by		      IN VARCHAR2,
13:32:30 1610  	 in_is_tax_calculation_needed IN NUMBER
13:32:30 1611  ) AS
13:32:30 1612  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
13:32:30 1613  -- VARIABLES
13:32:30 1614  temp_invoice_id	      NUMBER;
13:32:30 1615  -- EXCEPTIONS
13:32:30 1616  BAD_INVOICE_ID	      EXCEPTION;
13:32:30 1617  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
13:32:30 1618  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 1619  BEGIN
13:32:30 1620  
13:32:30 1621  	 BEGIN
13:32:30 1622  	   SELECT
13:32:30 1623  	     i.id into temp_invoice_id
13:32:30 1624  	   FROM
13:32:30 1625  	     invoice i
13:32:30 1626  	   WHERE
13:32:30 1627  	     i.id = in_invoice_id;
13:32:30 1628  	   EXCEPTION
13:32:30 1629  	     WHEN NO_DATA_FOUND THEN
13:32:30 1630  	       RAISE BAD_INVOICE_ID;
13:32:30 1631  	 END;
13:32:30 1632  
13:32:30 1633  	 BEGIN
13:32:30 1634  	   PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
13:32:30 1635  	     in_invoice_id => in_invoice_id,
13:32:30 1636  	     in_updated_by => in_updated_by,
13:32:30 1637  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
13:32:30 1638  	   );
13:32:30 1639  	   EXCEPTION
13:32:30 1640  	     WHEN OTHERS THEN
13:32:30 1641  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1642  	       RAISE CAN_NOT_UPDATE_INVOCIE;
13:32:30 1643  	 END;
13:32:30 1644  
13:32:30 1645  EXCEPTION
13:32:30 1646  WHEN BAD_INVOICE_ID THEN
13:32:30 1647  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1648  	   SPROC_NAME, 'No such invoice');
13:32:30 1649  WHEN CAN_NOT_UPDATE_INVOCIE THEN
13:32:30 1650  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1651  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
13:32:30 1652  WHEN OTHERS THEN
13:32:30 1653  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1654  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1655  END SET_IS_TAX_CALCULATION_NEEDED;
13:32:30 1656  
13:32:30 1657  /******************************************************************************/
13:32:30 1658  
13:32:30 1659  PROCEDURE REFUND_INVOICE (
13:32:30 1660  	 in_invoice_id	    IN NUMBER,
13:32:30 1661  	 in_refund_amount   IN NUMBER,
13:32:30 1662  	 in_note	    IN VARCHAR2,
13:32:30 1663  	 in_created_by	    IN VARCHAR2,
13:32:30 1664  	 out_charge_id	    OUT NUMBER
13:32:30 1665  ) AS
13:32:30 1666  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
13:32:30 1667  -- VARIABLES
13:32:30 1668  var_invoice_status_id  NUMBER;
13:32:30 1669  var_subscription_id    NUMBER;
13:32:30 1670  var_account_id	      NUMBER;
13:32:30 1671  var_group_id	      NUMBER;
13:32:30 1672  var_account_status_id  NUMBER;
13:32:30 1673  var_new_transaction_id NUMBER;
13:32:30 1674  var_instrument_type_id NUMBER;
13:32:30 1675  var_instrument_id      NUMBER;
13:32:30 1676  var_new_charge_id      NUMBER;
13:32:30 1677  var_invoice_amount     NUMBER(10,2);
13:32:30 1678  var_refunds_before     NUMBER(10,2);
13:32:30 1679  var_charges_amount     NUMBER(10,2);
13:32:30 1680  -- EXCEPTIONS
13:32:30 1681  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
13:32:30 1682  ACCOUNT_IS_FROZEN	     EXCEPTION;
13:32:30 1683  BAD_INVOICE_ID		     EXCEPTION;
13:32:30 1684  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
13:32:30 1685  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
13:32:30 1686  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
13:32:30 1687  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
13:32:30 1688  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
13:32:30 1689  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
13:32:30 1690  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
13:32:30 1691  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
13:32:30 1692  EXCEPTION_MESSAGE	      VARCHAR2(1024);
13:32:30 1693  BEGIN
13:32:30 1694  
13:32:30 1695  	 BEGIN
13:32:30 1696  	   SELECT
13:32:30 1697  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
13:32:30 1698  	   FROM
13:32:30 1699  	     INVOICE
13:32:30 1700  	   WHERE
13:32:30 1701  	     INVOICE.ID = in_invoice_id;
13:32:30 1702  	   EXCEPTION
13:32:30 1703  	     WHEN NO_DATA_FOUND THEN
13:32:30 1704  	       RAISE BAD_INVOICE_ID;
13:32:30 1705  	 END;
13:32:30 1706  
13:32:30 1707  	 -- Get instrument and subscription id if exists
13:32:30 1708  	 BEGIN
13:32:30 1709  	   SELECT
13:32:30 1710  	     SUBSCRIPTION.INSTRUMENT_ID,
13:32:30 1711  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
13:32:30 1712  	     SUBSCRIPTION.ACCOUNT_ID,
13:32:30 1713  	     SUBSCRIPTION.ID
13:32:30 1714  	     into
13:32:30 1715  	     var_instrument_id,
13:32:30 1716  	     var_instrument_type_id,
13:32:30 1717  	     var_account_id,
13:32:30 1718  	     var_subscription_id
13:32:30 1719  	   FROM
13:32:30 1720  	     SUBSCRIPTION
13:32:30 1721  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
13:32:30 1722  	   WHERE
13:32:30 1723  	     LICENSE.INVOICE_ID = in_invoice_id
13:32:30 1724  	     AND ROWNUM <= 1;
13:32:30 1725  	   EXCEPTION
13:32:30 1726  	     WHEN NO_DATA_FOUND THEN
13:32:30 1727  	       BEGIN
13:32:30 1728  
13:32:30 1729  		 var_subscription_id := NULL;
13:32:30 1730  
13:32:30 1731  		 SELECT
13:32:30 1732  		   CHARGE.INSTRUMENT_ID,
13:32:30 1733  		   CHARGE.INSTRUMENT_TYPE_ID,
13:32:30 1734  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
13:32:30 1735  		   into
13:32:30 1736  		   var_instrument_id,
13:32:30 1737  		   var_instrument_type_id,
13:32:30 1738  		   var_group_id
13:32:30 1739  		 FROM
13:32:30 1740  		   INVOICE
13:32:30 1741  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
13:32:30 1742  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
13:32:30 1743  		 WHERE
13:32:30 1744  		   INVOICE.ID = in_invoice_id
13:32:30 1745  		   AND ROWNUM <= 1;
13:32:30 1746  
13:32:30 1747  		 SELECT
13:32:30 1748  		   ACCOUNT.ID into var_account_id
13:32:30 1749  		 FROM
13:32:30 1750  		   ACCOUNT
13:32:30 1751  		 WHERE
13:32:30 1752  		   ACCOUNT.GROUP_ID = var_group_id;
13:32:30 1753  
13:32:30 1754  		 EXCEPTION
13:32:30 1755  		   WHEN NO_DATA_FOUND THEN
13:32:30 1756  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
13:32:30 1757  	       END;
13:32:30 1758  	 END;
13:32:30 1759  
13:32:30 1760  	 -- Check account status. It should not to be frozen
13:32:30 1761  	 SELECT
13:32:30 1762  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
13:32:30 1763  	 FROM
13:32:30 1764  	   ACCOUNT
13:32:30 1765  	 WHERE
13:32:30 1766  	   ACCOUNT.ID = var_account_id;
13:32:30 1767  
13:32:30 1768  	 IF var_account_status_id = GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
13:32:30 1769  	   RAISE ACCOUNT_IS_FROZEN;
13:32:30 1770  	 END IF;
13:32:30 1771  
13:32:30 1772  	 IF var_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
13:32:30 1773  	   RAISE INVOICE_IS_NOT_CLOSED;
13:32:30 1774  	 END IF;
13:32:30 1775  
13:32:30 1776  	 BEGIN
13:32:30 1777  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
13:32:30 1778  	     in_invoice_id => in_invoice_id,
13:32:30 1779  	     out_amount    => var_invoice_amount
13:32:30 1780  	   );
13:32:30 1781  	   EXCEPTION
13:32:30 1782  	     WHEN OTHERS THEN
13:32:30 1783  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1784  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
13:32:30 1785  	 END;
13:32:30 1786  
13:32:30 1787  	 IF ( in_refund_amount > var_invoice_amount ) THEN
13:32:30 1788  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
13:32:30 1789  	 END IF;
13:32:30 1790  
13:32:30 1791  	 SELECT /*+ STAR_TRANSFORMATION */
13:32:30 1792  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
13:32:30 1793  	 FROM
13:32:30 1794  	   CHARGE
13:32:30 1795  	 WHERE
13:32:30 1796  	   CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1797  	   AND (
13:32:30 1798  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 1799  	     OR (
13:32:30 1800  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
13:32:30 1801  	       AND EXISTS (
13:32:30 1802  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30 1803  	       )
13:32:30 1804  	     )
13:32:30 1805  	   )
13:32:30 1806  	   AND CHARGE.CHARGE_AMOUNT < 0;
13:32:30 1807  
13:32:30 1808  	 -- Refunds are negative
13:32:30 1809  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
13:32:30 1810  	 var_refunds_before := 0 - var_refunds_before;
13:32:30 1811  
13:32:30 1812  	 var_charges_amount := 0;
13:32:30 1813  
13:32:30 1814  	 FOR f_processed_charges IN (
13:32:30 1815  	   SELECT
13:32:30 1816  	     CHARGE.CHARGE_AMOUNT
13:32:30 1817  	   FROM
13:32:30 1818  	     CHARGE
13:32:30 1819  	   WHERE
13:32:30 1820  	     CHARGE.INVOICE_ID = in_invoice_id
13:32:30 1821  	     AND CHARGE.CHARGE_AMOUNT > 0
13:32:30 1822  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
13:32:30 1823  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS)
13:32:30 1824  	 )
13:32:30 1825  	 LOOP
13:32:30 1826  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
13:32:30 1827  	 END LOOP;
13:32:30 1828  
13:32:30 1829  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
13:32:30 1830  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
13:32:30 1831  	 END IF;
13:32:30 1832  
13:32:30 1833  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
13:32:30 1834  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
13:32:30 1835  	 END IF;
13:32:30 1836  
13:32:30 1837  	 BEGIN
13:32:30 1838  	   PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 1839  	     in_transaction_id	       => NULL,
13:32:30 1840  	     in_status_id	       => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
13:32:30 1841  	     in_amount		       => -in_refund_amount,
13:32:30 1842  	     in_created_by	       => in_created_by,
13:32:30 1843  	     in_order_id	       => NULL,
13:32:30 1844  	     in_is_refund	       => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1845  	     in_transaction_type_code  => 'REFUND',
13:32:30 1846  	     out_transaction_id        => var_new_transaction_id
13:32:30 1847  	   );
13:32:30 1848  	   EXCEPTION
13:32:30 1849  	     WHEN OTHERS THEN
13:32:30 1850  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1851  	       RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 1852  	 END;
13:32:30 1853  
13:32:30 1854  	 BEGIN
13:32:30 1855  	   PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 1856  	     in_invoice_id	   => in_invoice_id,
13:32:30 1857  	     in_transaction_id	   => var_new_transaction_id,
13:32:30 1858  	     in_instrument_type_id => var_instrument_type_id,
13:32:30 1859  	     in_instrument_id	   => var_instrument_id,
13:32:30 1860  	     in_charge_amount	   => -in_refund_amount,
13:32:30 1861  	     in_created_by	   => in_created_by,
13:32:30 1862  	     in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 1863  	     out_charge_id	   => var_new_charge_id
13:32:30 1864  	   );
13:32:30 1865  	   EXCEPTION
13:32:30 1866  	     WHEN OTHERS THEN
13:32:30 1867  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1868  	       RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 1869  	 END;
13:32:30 1870  
13:32:30 1871  	 out_charge_id := var_new_charge_id;
13:32:30 1872  
13:32:30 1873  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
13:32:30 1874  	   BEGIN
13:32:30 1875  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
13:32:30 1876  	       in_subscription_id => var_subscription_id,
13:32:30 1877  	       in_agent_id	  => 0, -- AGENT_ID??
13:32:30 1878  	       in_note		  => in_note,
13:32:30 1879  	       in_created_by	  => in_created_by
13:32:30 1880  	     );
13:32:30 1881  	     EXCEPTION
13:32:30 1882  	       WHEN OTHERS THEN
13:32:30 1883  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1884  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
13:32:30 1885  	   END;
13:32:30 1886  	 END IF;
13:32:30 1887  
13:32:30 1888  EXCEPTION
13:32:30 1889  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
13:32:30 1890  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1891  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
13:32:30 1892  WHEN INVOICE_IS_NOT_CLOSED THEN
13:32:30 1893  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1894  	   SPROC_NAME, 'Invoice is not closed');
13:32:30 1895  WHEN ACCOUNT_IS_FROZEN THEN
13:32:30 1896  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1897  	   SPROC_NAME, 'Could not refund subscription for frozen account');
13:32:30 1898  WHEN BAD_INVOICE_ID THEN
13:32:30 1899  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1900  	   SPROC_NAME, 'No such invoice');
13:32:30 1901  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
13:32:30 1902  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1903  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
13:32:30 1904  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
13:32:30 1905  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1906  	   SPROC_NAME, 'Refund is greater than amount');
13:32:30 1907  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
13:32:30 1908  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1909  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
13:32:30 1910  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
13:32:30 1911  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1912  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
13:32:30 1913  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 1914  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1915  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 1916  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 1917  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1918  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 1919  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
13:32:30 1920  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1921  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
13:32:30 1922  WHEN OTHERS THEN
13:32:30 1923  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1925  END REFUND_INVOICE;
13:32:30 1926  
13:32:30 1927  /******************************************************************************/
13:32:30 1928  
13:32:30 1929  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
13:32:30 1930  	 in_invoice_id		     IN NUMBER,
13:32:30 1931  	 out_order_id		     OUT VARCHAR2,
13:32:30 1932  	 out_external_transaction_id OUT VARCHAR2
13:32:30 1933  ) AS
13:32:30 1934  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
13:32:30 1935  -- VARIABLES
13:32:30 1936  temp_invoice_id number;
13:32:30 1937  cnt_matched_instr number := 0;
13:32:30 1938  -- EXCEPTIONS
13:32:30 1939  BAD_INVOICE_ID EXCEPTION;
13:32:30 1940  BEGIN
13:32:30 1941  
13:32:30 1942  	 BEGIN
13:32:30 1943  	   SELECT
13:32:30 1944  	     i.id into temp_invoice_id
13:32:30 1945  	   from
13:32:30 1946  	     invoice i
13:32:30 1947  	   where
13:32:30 1948  	     i.id = in_invoice_id;
13:32:30 1949  	   EXCEPTION
13:32:30 1950  	     WHEN NO_DATA_FOUND THEN
13:32:30 1951  	       RAISE BAD_INVOICE_ID;
13:32:30 1952  	 END;
13:32:30 1953  
13:32:30 1954  	 select
13:32:30 1955  	   count(1) into cnt_matched_instr
13:32:30 1956  	 from
13:32:30 1957  	   charge ch
13:32:30 1958  	 inner join
13:32:30 1959  	   subscription s
13:32:30 1960  	 on
13:32:30 1961  	   s.instrument_id = ch.instrument_id
13:32:30 1962  	 where
13:32:30 1963  	   ch.invoice_id = in_invoice_id;
13:32:30 1964  
13:32:30 1965  	 if cnt_matched_instr = 0 then
13:32:30 1966  	   out_external_transaction_id := null;
13:32:30 1967  	   out_order_id := null;
13:32:30 1968  	   return;
13:32:30 1969  	 end if;
13:32:30 1970  
13:32:30 1971  	 SELECT
13:32:30 1972  	   t.order_id,
13:32:30 1973  	   ta.external_transaction_id
13:32:30 1974  	   into
13:32:30 1975  	   out_order_id,
13:32:30 1976  	   out_external_transaction_id
13:32:30 1977  	 from
13:32:30 1978  	   charge ch
13:32:30 1979  	   inner join transaction t on ch.transaction_id = t.id
13:32:30 1980  	   inner join transaction_attempt ta on ta.transaction_id = t.id
13:32:30 1981  	 where
13:32:30 1982  	   ch.invoice_id = in_invoice_id
13:32:30 1983  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30 1984  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
13:32:30 1985  
13:32:30 1986  EXCEPTION
13:32:30 1987  WHEN BAD_INVOICE_ID THEN
13:32:30 1988  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1989  	   SPROC_NAME, 'No such invoice');
13:32:30 1990  WHEN NO_DATA_FOUND THEN
13:32:30 1991  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1992  	   SPROC_NAME, 'No payment data found');
13:32:30 1993  WHEN OTHERS THEN
13:32:30 1994  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1995  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1996  END GET_PAYMENT_INFO_BY_INVOICE_ID;
13:32:30 1997  
13:32:30 1998  PROCEDURE IS_REVOKE_ENTITLEMENTS(
13:32:30 1999  	 in_invoice_id IN NUMBER,
13:32:30 2000  	 out_is_revoke OUT NUMBER
13:32:30 2001  ) AS
13:32:30 2002  BEGIN
13:32:30 2003  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V20.FALSE, GLOBAL_CONSTANTS_V20.TRUE)
13:32:30 2004  	   into out_is_revoke
13:32:30 2005  	 FROM
13:32:30 2006  	   offer_chain oc,
13:32:30 2007  	   subscription s,
13:32:30 2008  	   license l,
13:32:30 2009  	   invoice i
13:32:30 2010  	 where
13:32:30 2011  	   oc.id = s.offer_chain_id and
13:32:30 2012  	   s.id = l.subscription_id and
13:32:30 2013  	   l.invoice_id = i.id and
13:32:30 2014  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V20.TRUE and
13:32:30 2015  	   i.id = in_invoice_id and
13:32:30 2016  	   rownum < 2
13:32:30 2017  	 ;
13:32:30 2018  END IS_REVOKE_ENTITLEMENTS;
13:32:30 2019  
13:32:30 2020  END PROCS_INVOICE_V20;
13:32:30 2021  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.14
13:32:30 SQL> 
13:32:30 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V20" AS
13:32:30   2  
13:32:30   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
13:32:30   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:30   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
13:32:30   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
13:32:30   7  AS
13:32:30   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
13:32:30   9  BEGIN
13:32:30  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
13:32:30  11  	  PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE (
13:32:30  12  	    in_gift_certificate_id	  => rec.Id,
13:32:30  13  	    in_gift_certificate_status_id => in_status_id,
13:32:30  14  	    in_updated_by		  => in_updater
13:32:30  15  	  );
13:32:30  16  	END LOOP;
13:32:30  17  END UPDATE_GC_STATUS_BY_INVOICE;
13:32:30  18  
13:32:30  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
13:32:30  20  	in_invoice_id		     IN NUMBER,
13:32:30  21  	out_is_invoice_for_redeem_gc OUT NUMBER
13:32:30  22  ) AS
13:32:30  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
13:32:30  24  var_is_for_gc NUMBER;
13:32:30  25  BEGIN
13:32:30  26  	SELECT
13:32:30  27  	  count(1) into var_is_for_gc
13:32:30  28  	FROM GIFT_CERTIFICATE GC
13:32:30  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
13:32:30  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
13:32:30  31  
13:32:30  32  	IF var_is_for_gc > 0 THEN
13:32:30  33  	  out_is_invoice_for_redeem_gc := 1;
13:32:30  34  	ELSE
13:32:30  35  	  out_is_invoice_for_redeem_gc := 0;
13:32:30  36  	END IF;
13:32:30  37  END IS_INVOICE_FOR_REDEEMED_GC;
13:32:30  38  
13:32:30  39  PROCEDURE GET_UNREDEEMED_GCS (
13:32:30  40  	out_result_set		OUT SYS_REFCURSOR,
13:32:30  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:30  42  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:30  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:30  44  ) AS
13:32:30  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
13:32:30  46  BEGIN
13:32:30  47  	OPEN out_result_set FOR
13:32:30  48  SELECT * FROM
13:32:30  49  (
13:32:30  50  	SELECT
13:32:30  51  	  gc.EXPIRATION_DATE,
13:32:30  52  	  ch.name,
13:32:30  53  	  ch.id offer_chain_id,
13:32:30  54  	  gc.sender_email,
13:32:30  55  	  gc.sender_name,
13:32:30  56  	  gc.recipient_email,
13:32:30  57  	  gc.recipient_name,
13:32:30  58  	  gc.purchase_date,
13:32:30  59  	  gc.redemption_date,
13:32:30  60  	  gc.purchaser_group_id,
13:32:30  61  	  gc.redeemer_group_id,
13:32:30  62  	  gc.code,
13:32:30  63  	  gc.gift_message,
13:32:30  64  	  gc.recipient_notify_date,
13:32:30  65  	  gc.id
13:32:30  66  	FROM
13:32:30  67  	  GIFT_CERTIFICATE gc,
13:32:30  68  	  OFFER_CHAIN ch
13:32:30  69  	WHERE
13:32:30  70  	  ch.id = gc.offer_chain_id
13:32:30  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
13:32:30  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
13:32:30  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
13:32:30  74  	  AND gc.redeemer_group_id is null
13:32:30  75  	  AND NOT EXISTS(
13:32:30  76  	    SELECT NULL
13:32:30  77  	    FROM PROCESS_RETRY_THROTTLE
13:32:30  78  	    WHERE PROCESS_NAME = in_process_name
13:32:30  79  	      AND GENERIC_ID = gc.id
13:32:30  80  	  ) AND EXISTS(
13:32:30  81  	    SELECT NULL
13:32:30  82  	    FROM
13:32:30  83  	      charge c,
13:32:30  84  	      transaction_attempt ta,
13:32:30  85  	      transaction t
13:32:30  86  	    WHERE
13:32:30  87  	      c.invoice_id = gc.purchase_invoice_id and
13:32:30  88  	      c.transaction_id = t.id and
13:32:30  89  	      t.id = ta.transaction_id and
13:32:30  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
13:32:30  91  	  ) AND NOT EXISTS (
13:32:30  92  	    SELECT NULL
13:32:30  93  	    FROM
13:32:30  94  	      charge c,
13:32:30  95  	      transaction t
13:32:30  96  	    WHERE
13:32:30  97  	      c.invoice_id = gc.purchase_invoice_id and
13:32:30  98  	      c.transaction_id = t.id and
13:32:30  99  	      t.is_refund = GLOBAL_CONSTANTS_V20.TRUE
13:32:30 100  	  )
13:32:30 101  	  AND ROWNUM <= in_num_rows*10
13:32:30 102  	  ORDER BY dbms_random.value
13:32:30 103  ) WHERE
13:32:30 104  	  ROWNUM <= in_num_rows;
13:32:30 105  EXCEPTION
13:32:30 106  WHEN OTHERS THEN
13:32:30 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 109  END GET_UNREDEEMED_GCS;
13:32:30 110  
13:32:30 111  PROCEDURE ADD_CREDIT_CARD (
13:32:30 112  /*
13:32:30 113  Throws exceptions:
13:32:30 114  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 115  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 116  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 117  */
13:32:30 118  	in_group_id		  IN NUMBER,
13:32:30 119  	in_updated_by		  IN VARCHAR2,
13:32:30 120  	in_instrument_name	  IN VARCHAR2,
13:32:30 121  	in_card_holder_name	  IN VARCHAR2,
13:32:30 122  	in_street_address	  IN VARCHAR2,
13:32:30 123  	in_street_address2	  IN VARCHAR2,
13:32:30 124  	in_state		  IN VARCHAR2,
13:32:30 125  	in_city 		  IN VARCHAR2,
13:32:30 126  	in_postal_code		  IN VARCHAR2,
13:32:30 127  	in_country		  IN CHAR,
13:32:30 128  	in_last_four_cc 	  IN VARCHAR2,
13:32:30 129  	in_expiration_date	  IN DATE,
13:32:30 130  	in_credit_card_type_id	  IN NUMBER,
13:32:30 131  	in_token		  IN VARCHAR2,
13:32:30 132  	in_chase_profile_id	  IN VARCHAR2,
13:32:30 133  	in_credit_card_status_id  IN NUMBER,
13:32:30 134  	in_private_first_name	  IN VARCHAR2,
13:32:30 135  	in_private_last_name	  IN VARCHAR2,
13:32:30 136  	out_credit_card_id	  OUT NUMBER
13:32:30 137  ) AS
13:32:30 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
13:32:30 139  -- VARIABLES
13:32:30 140  var_account_id	      NUMBER;
13:32:30 141  var_account_status      NUMBER;
13:32:30 142  var_credit_card_id      NUMBER;
13:32:30 143  temp_old_credit_card_id NUMBER;
13:32:30 144  -- EXCEPTIONS
13:32:30 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
13:32:30 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
13:32:30 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
13:32:30 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
13:32:30 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
13:32:30 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
13:32:30 151  var_charges_set		SYS_REFCURSOR;
13:32:30 152  var_charge_id		NUMBER;
13:32:30 153  var_charge_invoice_id	NUMBER;
13:32:30 154  var_charge_transaction_id NUMBER;
13:32:30 155  var_charge_amount 	NUMBER(10,2);
13:32:30 156  temp_out_charge_id	NUMBER;
13:32:30 157  temp_out_transaction_id	NUMBER;
13:32:30 158  var_order_id			VARCHAR2(1024);
13:32:30 159  BEGIN
13:32:30 160  
13:32:30 161  	-- Get account id
13:32:30 162  	-- Get account status
13:32:30 163  	SELECT
13:32:30 164  	  ACCOUNT.ID,
13:32:30 165  	  ACCOUNT.ACCOUNT_STATUS_ID
13:32:30 166  	  into
13:32:30 167  	  var_account_id,
13:32:30 168  	  var_account_status
13:32:30 169  	FROM
13:32:30 170  	  ACCOUNT
13:32:30 171  	WHERE
13:32:30 172  	  ACCOUNT.GROUP_ID = in_group_id;
13:32:30 173  
13:32:30 174  	SELECT
13:32:30 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
13:32:30 176  	FROM DUAL;
13:32:30 177  
13:32:30 178  	-- Insert new row in CREDIT_CARD table
13:32:30 179  	PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_CREDIT_CARD(
13:32:30 180  	  out_credit_card_id	      => var_credit_card_id,
13:32:30 181  	  in_account_id 	      => var_account_id,
13:32:30 182  	  in_instrument_name	      => in_instrument_name,
13:32:30 183  	  in_private_card_holder_name => in_card_holder_name,
13:32:30 184  	  in_private_street_address   => in_street_address,
13:32:30 185  	  in_private_street_address2  => in_street_address2,
13:32:30 186  	  in_state		      => in_state,
13:32:30 187  	  in_city		      => in_city,
13:32:30 188  	  in_postal_code	      => in_postal_code,
13:32:30 189  	  in_country		      => in_country,
13:32:30 190  	  in_last_four_cc	      => in_last_four_cc,
13:32:30 191  	  in_expiration_date	      => in_expiration_date,
13:32:30 192  	  in_credit_card_type_id      => in_credit_card_type_id,
13:32:30 193  	  in_secret_token	      => in_token,
13:32:30 194  	  in_chase_profile_id	      => in_chase_profile_id,
13:32:30 195  	  in_created_by 	      => in_updated_by,
13:32:30 196  	  in_credit_card_status_id    => in_credit_card_status_id,
13:32:30 197  	  in_private_first_name       => in_private_first_name,
13:32:30 198  	  in_private_last_name	      => in_private_last_name
13:32:30 199  	);
13:32:30 200  
13:32:30 201  	out_credit_card_id := var_credit_card_id;
13:32:30 202  
13:32:30 203  EXCEPTION
13:32:30 204  WHEN NO_DATA_FOUND THEN
13:32:30 205  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 206  	  SPROC_NAME, 'No such account');
13:32:30 207  WHEN BAD_OLD_CREDIT_CARD THEN
13:32:30 208  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 209  	  SPROC_NAME, 'Bad old credit card id');
13:32:30 210  WHEN BAD_IS_DEFAULT_VALUE THEN
13:32:30 211  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 212  	  SPROC_NAME, 'Bad is_default value');
13:32:30 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
13:32:30 214  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
13:32:30 216  WHEN BAD_ACCOUNT_STATUS THEN
13:32:30 217  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 218  	  SPROC_NAME, 'Account is not active');
13:32:30 219  WHEN OTHERS THEN
13:32:30 220  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 222  END ADD_CREDIT_CARD;
13:32:30 223  
13:32:30 224  /******************************************************************************/
13:32:30 225  
13:32:30 226  PROCEDURE ADD_PAYPAL (
13:32:30 227  /*
13:32:30 228  Throws exceptions:
13:32:30 229  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 230  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 231  */
13:32:30 232  	in_group_id			IN NUMBER,
13:32:30 233  	in_instrument_name		IN VARCHAR2,
13:32:30 234  	in_private_email_address	IN VARCHAR2,
13:32:30 235  	in_created_by			IN VARCHAR2,
13:32:30 236  	in_paypal_status_id		IN NUMBER,
13:32:30 237  	in_paypal_prvt_street_address	IN VARCHAR2,
13:32:30 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
13:32:30 239  	in_state			IN VARCHAR2,
13:32:30 240  	in_city 			IN VARCHAR2,
13:32:30 241  	in_postal_code			IN VARCHAR2,
13:32:30 242  	in_country			IN CHAR,
13:32:30 243  	in_expiration_date		IN DATE,
13:32:30 244  	in_secret_token 		IN VARCHAR2,
13:32:30 245  	out_paypal_id			OUT NUMBER
13:32:30 246  ) AS
13:32:30 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
13:32:30 248  var_paypal_id NUMBER;
13:32:30 249  var_account_id  NUMBER;
13:32:30 250  -- EXCEPTIONS
13:32:30 251  BAD_GROUP_ID	    EXCEPTION;
13:32:30 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
13:32:30 253  BAD_PAYPAL_STATUS     EXCEPTION;
13:32:30 254  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 255  BEGIN
13:32:30 256  
13:32:30 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_ACTIVE
13:32:30 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
13:32:30 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_FROZEN THEN
13:32:30 260  	  RAISE BAD_PAYPAL_STATUS;
13:32:30 261  	END IF;
13:32:30 262  
13:32:30 263  	BEGIN
13:32:30 264  	  SELECT
13:32:30 265  	    a.id into var_account_id
13:32:30 266  	  from
13:32:30 267  	    account a
13:32:30 268  	  where
13:32:30 269  	    a.group_id = in_group_id;
13:32:30 270  	  EXCEPTION
13:32:30 271  	    WHEN NO_DATA_FOUND THEN
13:32:30 272  	      RAISE BAD_GROUP_ID;
13:32:30 273  	END;
13:32:30 274  
13:32:30 275  	BEGIN
13:32:30 276  	  PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_PAYPAL(
13:32:30 277  	    out_paypal_id		   => var_paypal_id,
13:32:30 278  	    in_paypal_id		   => NULL,
13:32:30 279  	    in_account_id		   => var_account_id,
13:32:30 280  	    in_instrument_name		   => in_instrument_name,
13:32:30 281  	    in_private_email_address	   => in_private_email_address,
13:32:30 282  	    in_created_by		   => in_created_by,
13:32:30 283  	    in_paypal_status_id 	   => in_paypal_status_id,
13:32:30 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
13:32:30 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
13:32:30 286  	    in_state			   => in_state,
13:32:30 287  	    in_city			   => in_city,
13:32:30 288  	    in_postal_code		   => in_postal_code,
13:32:30 289  	    in_country			   => in_country,
13:32:30 290  	    in_expiration_date		   => in_expiration_date,
13:32:30 291  	    in_secret_token		   => in_secret_token
13:32:30 292  	  );
13:32:30 293  	  EXCEPTION
13:32:30 294  	    WHEN OTHERS THEN
13:32:30 295  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
13:32:30 297  	END;
13:32:30 298  
13:32:30 299  	out_paypal_id := var_paypal_id;
13:32:30 300  
13:32:30 301  EXCEPTION
13:32:30 302  WHEN BAD_GROUP_ID THEN
13:32:30 303  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 304  	  SPROC_NAME, 'No such group id');
13:32:30 305  WHEN BAD_PAYPAL_STATUS THEN
13:32:30 306  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 307  	  SPROC_NAME, 'Bad paypal status');
13:32:30 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
13:32:30 309  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
13:32:30 311  WHEN OTHERS THEN
13:32:30 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 314  END ADD_PAYPAL;
13:32:30 315  
13:32:30 316  /******************************************************************************/
13:32:30 317  
13:32:30 318  PROCEDURE DISABLE_CREDIT_CARD (
13:32:30 319  /*
13:32:30 320  Throws exceptions:
13:32:30 321  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 322  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 323  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 324  */
13:32:30 325  	in_credit_card_id IN NUMBER,
13:32:30 326  	in_updated_by	  IN VARCHAR2
13:32:30 327  ) AS
13:32:30 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
13:32:30 329  -- VARIBLES
13:32:30 330  var_account_id		     NUMBER;
13:32:30 331  var_group_id		     NUMBER;
13:32:30 332  var_credit_card_status	     NUMBER;
13:32:30 333  var_pending_transactions_num   NUMBER;
13:32:30 334  var_pending_invoices_num	     NUMBER;
13:32:30 335  current_def_instrument_type_id NUMBER;
13:32:30 336  current_def_instrument_id      NUMBER;
13:32:30 337  -- EXCEPTIONS
13:32:30 338  BAD_CC_STATUS		   EXCEPTION;
13:32:30 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
13:32:30 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
13:32:30 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
13:32:30 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
13:32:30 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
13:32:30 344  BEGIN
13:32:30 345  
13:32:30 346  	-- Get credit card status
13:32:30 347  	-- Get account id
13:32:30 348  	SELECT
13:32:30 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
13:32:30 350  	  CREDIT_CARD.ACCOUNT_ID
13:32:30 351  	  into
13:32:30 352  	  var_credit_card_status,
13:32:30 353  	  var_account_id
13:32:30 354  	FROM
13:32:30 355  	  CREDIT_CARD
13:32:30 356  	WHERE
13:32:30 357  	  CREDIT_CARD.ID = in_credit_card_id;
13:32:30 358  
13:32:30 359  	-- Check that we can disable this credit card (STUB)
13:32:30 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
13:32:30 362  	END IF;
13:32:30 363  
13:32:30 364  	-- Get account id
13:32:30 365  	SELECT
13:32:30 366  	  ACCOUNT.GROUP_ID into var_group_id
13:32:30 367  	FROM
13:32:30 368  	  ACCOUNT
13:32:30 369  	WHERE
13:32:30 370  	  ACCOUNT.ID = var_account_id;
13:32:30 371  
13:32:30 372  	-- Card should to be active
13:32:30 373  	IF var_credit_card_status != GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE THEN
13:32:30 374  	  RAISE BAD_CC_STATUS;
13:32:30 375  	END IF;
13:32:30 376  
13:32:30 377  	-- Looking for pending transactions associated with given credit card
13:32:30 378  	SELECT
13:32:30 379  	  COUNT(*) into var_pending_invoices_num
13:32:30 380  	FROM
13:32:30 381  	  CHARGE
13:32:30 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 383  	WHERE
13:32:30 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
13:32:30 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
13:32:30 387  
13:32:30 388  	IF var_pending_invoices_num > 0 THEN
13:32:30 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
13:32:30 390  	END IF;
13:32:30 391  
13:32:30 392  	-- Getting current default financial instrument
13:32:30 393  	BEGIN
13:32:30 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
13:32:30 395  	    in_group_id 	   => var_group_id,
13:32:30 396  	    out_instrument_type_id => current_def_instrument_type_id,
13:32:30 397  	    out_instrument_id	   => current_def_instrument_id
13:32:30 398  	  );
13:32:30 399  	  EXCEPTION
13:32:30 400  	    WHEN OTHERS THEN
13:32:30 401  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
13:32:30 403  	END;
13:32:30 404  
13:32:30 405  	-- Checking that credit card is not default
13:32:30 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30 407  	  AND current_def_instrument_id = in_credit_card_id THEN
13:32:30 408  	  BEGIN
13:32:30 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
13:32:30 410  	      in_group_id => var_group_id
13:32:30 411  	    );
13:32:30 412  	  EXCEPTION
13:32:30 413  	    WHEN OTHERS THEN
13:32:30 414  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
13:32:30 416  	  END;
13:32:30 417  	END IF;
13:32:30 418  
13:32:30 419  	-- Update credit card status
13:32:30 420  	PROCS_FIN_INSTRUMENTS_V20.UPDATE_CREDIT_CARD_STATUS(
13:32:30 421  	  in_credit_card_id	   => in_credit_card_id,
13:32:30 422  	  in_updated_by 	   => in_updated_by,
13:32:30 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
13:32:30 424  	);
13:32:30 425  
13:32:30 426  EXCEPTION
13:32:30 427  WHEN NO_DATA_FOUND THEN
13:32:30 428  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 429  	  SPROC_NAME, 'No such credit card');
13:32:30 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
13:32:30 431  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
13:32:30 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
13:32:30 434  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
13:32:30 436  WHEN BAD_CC_STATUS THEN
13:32:30 437  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 438  	  SPROC_NAME, 'Credit card is not active');
13:32:30 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
13:32:30 440  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
13:32:30 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
13:32:30 443  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
13:32:30 445  WHEN OTHERS THEN
13:32:30 446  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 448  END DISABLE_CREDIT_CARD;
13:32:30 449  
13:32:30 450  /******************************************************************************/
13:32:30 451  
13:32:30 452  PROCEDURE DISABLE_PAYPAL (
13:32:30 453  /*
13:32:30 454  Throws exceptions:
13:32:30 455  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 456  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 457  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:30 458  */
13:32:30 459  	in_paypal_id  IN NUMBER,
13:32:30 460  	in_updated_by IN VARCHAR2
13:32:30 461  ) AS
13:32:30 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
13:32:30 463  -- VARIABLES
13:32:30 464  var_paypal_status_id NUMBER;
13:32:30 465  var_account_id	   NUMBER;
13:32:30 466  var_group_id	   NUMBER;
13:32:30 467  var_pending_invoices_num NUMBER;
13:32:30 468  current_def_instrument_type_id NUMBER;
13:32:30 469  current_def_instrument_id NUMBER;
13:32:30 470  -- EXCEPTIONS
13:32:30 471  BAD_PAYPAL_ID EXCEPTION;
13:32:30 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
13:32:30 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
13:32:30 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
13:32:30 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
13:32:30 476  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 477  BEGIN
13:32:30 478  
13:32:30 479  	-- Get Paypal status
13:32:30 480  	-- Get account
13:32:30 481  	BEGIN
13:32:30 482  	  SELECT
13:32:30 483  	    PAYPAL.PAYPAL_STATUS_ID,
13:32:30 484  	    PAYPAL.ACCOUNT_ID
13:32:30 485  	    into
13:32:30 486  	    var_paypal_status_id,
13:32:30 487  	    var_account_id
13:32:30 488  	  FROM
13:32:30 489  	    PAYPAL
13:32:30 490  	  WHERE
13:32:30 491  	    PAYPAL.ID = in_paypal_id;
13:32:30 492  	  EXCEPTION
13:32:30 493  	    WHEN NO_DATA_FOUND THEN
13:32:30 494  	      RAISE BAD_PAYPAL_ID;
13:32:30 495  	END;
13:32:30 496  
13:32:30 497  	-- Get group id
13:32:30 498  	SELECT
13:32:30 499  	  ACCOUNT.GROUP_ID into var_group_id
13:32:30 500  	FROM
13:32:30 501  	  ACCOUNT
13:32:30 502  	WHERE
13:32:30 503  	  ACCOUNT.ID = var_account_id;
13:32:30 504  
13:32:30 505  	-- Card should not be disabled
13:32:30 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V20.PAYPAL_INACTIVE THEN
13:32:30 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
13:32:30 508  	END IF;
13:32:30 509  
13:32:30 510  	-- Looking for pending transactions associated with given credit card
13:32:30 511  	SELECT
13:32:30 512  	  COUNT(*) into var_pending_invoices_num
13:32:30 513  	FROM
13:32:30 514  	  CHARGE
13:32:30 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
13:32:30 516  	WHERE
13:32:30 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
13:32:30 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
13:32:30 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
13:32:30 520  
13:32:30 521  	IF var_pending_invoices_num > 0 THEN
13:32:30 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
13:32:30 523  	END IF;
13:32:30 524  
13:32:30 525  	-- Getting current default financial instrument
13:32:30 526  	BEGIN
13:32:30 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
13:32:30 528  	    in_group_id 	   => var_group_id,
13:32:30 529  	    out_instrument_type_id => current_def_instrument_type_id,
13:32:30 530  	    out_instrument_id	   => current_def_instrument_id
13:32:30 531  	  );
13:32:30 532  	  EXCEPTION
13:32:30 533  	    WHEN OTHERS THEN
13:32:30 534  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
13:32:30 536  	END;
13:32:30 537  
13:32:30 538  	-- Checking that credit card is not default
13:32:30 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
13:32:30 540  	  AND current_def_instrument_id = in_paypal_id THEN
13:32:30 541  	  BEGIN
13:32:30 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
13:32:30 543  	      in_group_id => var_group_id
13:32:30 544  	    );
13:32:30 545  	  EXCEPTION
13:32:30 546  	    WHEN OTHERS THEN
13:32:30 547  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
13:32:30 549  	  END;
13:32:30 550  	END IF;
13:32:30 551  
13:32:30 552  	PROCS_FIN_INSTRUMENTS_V20.UPDATE_PAYPAL_STATUS(
13:32:30 553  	  in_paypal_id	      => in_paypal_id,
13:32:30 554  	  in_updated_by       => in_updated_by,
13:32:30 555  	  in_paypal_status_id => GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
13:32:30 556  	);
13:32:30 557  
13:32:30 558  EXCEPTION
13:32:30 559  WHEN BAD_PAYPAL_ID THEN
13:32:30 560  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 561  	  SPROC_NAME, 'No such paypal');
13:32:30 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
13:32:30 563  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 564  	  SPROC_NAME, 'Paypal already inactive');
13:32:30 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
13:32:30 566  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
13:32:30 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
13:32:30 569  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
13:32:30 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
13:32:30 572  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
13:32:30 574  WHEN OTHERS THEN
13:32:30 575  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 577  END DISABLE_PAYPAL;
13:32:30 578  
13:32:30 579  /******************************************************************************/
13:32:30 580  
13:32:30 581  PROCEDURE UPDATE_CREDIT_CARD (
13:32:30 582  /*
13:32:30 583  Throws exceptions:
13:32:30 584  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:30 585  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 586  */
13:32:30 587  	in_credit_card_id	  IN NUMBER,
13:32:30 588  	in_updated_by		  IN VARCHAR2,
13:32:30 589  	in_instrument_name	  IN VARCHAR2,
13:32:30 590  	in_is_default		  IN NUMBER
13:32:30 591  ) AS
13:32:30 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
13:32:30 593  -- VARIABLES
13:32:30 594  var_account_id NUMBER;
13:32:30 595  var_group_id   NUMBER;
13:32:30 596  temp_cc_rownum NUMBER;
13:32:30 597  current_def_instrument_type_id NUMBER;
13:32:30 598  current_def_instrument_id      NUMBER;
13:32:30 599  -- EXCEPTION
13:32:30 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
13:32:30 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
13:32:30 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
13:32:30 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
13:32:30 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
13:32:30 605  BEGIN
13:32:30 606  
13:32:30 607  	-- Get account id
13:32:30 608  	SELECT
13:32:30 609  	  CREDIT_CARD.ACCOUNT_ID
13:32:30 610  	  into
13:32:30 611  	  var_account_id
13:32:30 612  	FROM
13:32:30 613  	  CREDIT_CARD
13:32:30 614  	WHERE
13:32:30 615  	  CREDIT_CARD.ID = in_credit_card_id;
13:32:30 616  
13:32:30 617  	-- Get group id
13:32:30 618  	SELECT
13:32:30 619  	  ACCOUNT.GROUP_ID into var_group_id
13:32:30 620  	FROM
13:32:30 621  	  ACCOUNT
13:32:30 622  	WHERE
13:32:30 623  	  ACCOUNT.ID = var_account_id;
13:32:30 624  
13:32:30 625  	-- Check that passed data is correct
13:32:30 626  	IF in_is_default != GLOBAL_CONSTANTS_V20.TRUE
13:32:30 627  	  AND in_is_default != GLOBAL_CONSTANTS_V20.FALSE
13:32:30 628  	  AND in_is_default IS NOT NULL THEN
13:32:30 629  	  RAISE BAD_IS_DEFAULT_VALUE;
13:32:30 630  	END IF;
13:32:30 631  
13:32:30 632  	-- Update credit card
13:32:30 633  	IF in_instrument_name IS NOT NULL THEN
13:32:30 634  	  PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_CREDIT_CARD(
13:32:30 635  	    in_credit_card_id  => in_credit_card_id,
13:32:30 636  	    in_updated_by      => in_updated_by,
13:32:30 637  	    in_instrument_name => in_instrument_name
13:32:30 638  	  );
13:32:30 639  	END IF;
13:32:30 640  
13:32:30 641  	-- Set default financial instrument
13:32:30 642  	IF in_is_default = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 643  	  BEGIN
13:32:30 644  	    PROCS_FIN_INSTRUMENTS_V20.SET_DEF_FINANCIAL_INSTRUMENT(
13:32:30 645  	      in_group_id	    => var_group_id,
13:32:30 646  	      in_instrument_type_id => GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD,
13:32:30 647  	      in_instrument_id	    => in_credit_card_id,
13:32:30 648  	      in_updated_by	    => in_updated_by
13:32:30 649  	    );
13:32:30 650  	    EXCEPTION
13:32:30 651  	      WHEN OTHERS THEN
13:32:30 652  		EXCEPTION_MESSAGE := SQLERRM;
13:32:30 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
13:32:30 654  	  END;
13:32:30 655  	END IF;
13:32:30 656  
13:32:30 657  	-- Set default financial instrument
13:32:30 658  	IF in_is_default = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 659  	  BEGIN
13:32:30 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
13:32:30 661  	      in_group_id	     => var_group_id,
13:32:30 662  	      out_instrument_type_id => current_def_instrument_type_id,
13:32:30 663  	      out_instrument_id      => current_def_instrument_id
13:32:30 664  	    );
13:32:30 665  	  EXCEPTION
13:32:30 666  	    WHEN OTHERS THEN
13:32:30 667  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
13:32:30 669  	  END;
13:32:30 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30 671  	    AND current_def_instrument_id = in_credit_card_id THEN
13:32:30 672  	    BEGIN
13:32:30 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
13:32:30 674  		in_group_id => var_group_id
13:32:30 675  	      );
13:32:30 676  	      EXCEPTION
13:32:30 677  		WHEN OTHERS THEN
13:32:30 678  		  EXCEPTION_MESSAGE := SQLERRM;
13:32:30 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
13:32:30 680  	    END;
13:32:30 681  	  END IF;
13:32:30 682  	END IF;
13:32:30 683  
13:32:30 684  EXCEPTION
13:32:30 685  WHEN NO_DATA_FOUND THEN
13:32:30 686  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 687  	  SPROC_NAME, 'No such credit card');
13:32:30 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
13:32:30 689  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
13:32:30 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
13:32:30 692  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
13:32:30 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
13:32:30 695  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
13:32:30 697  WHEN OTHERS THEN
13:32:30 698  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 700  END UPDATE_CREDIT_CARD;
13:32:30 701  
13:32:30 702  /******************************************************************************/
13:32:30 703  
13:32:30 704  PROCEDURE START_GC_PURCHASING (
13:32:30 705  	in_group_id		  IN NUMBER,
13:32:30 706  	in_offer_chain_id	  IN VARCHAR2,
13:32:30 707  	in_gift_certificate_code  IN  VARCHAR2,
13:32:30 708  	in_created_by		  IN  VARCHAR2,
13:32:30 709  	in_recipient_name	  IN  VARCHAR2,
13:32:30 710  	in_recipient_email	  IN  VARCHAR2,
13:32:30 711  	in_recipient_address_id   IN NUMBER,
13:32:30 712  	in_recipient_notify_date  IN DATE,
13:32:30 713  	in_sender_name		  IN VARCHAR2,
13:32:30 714  	in_sender_email 	  IN VARCHAR2,
13:32:30 715  	in_gift_message 	  IN  VARCHAR2,
13:32:30 716  	in_expiration_date	  IN DATE,
13:32:30 717  	out_gift_certificate_id   OUT NUMBER,
13:32:30 718  	out_invoice_id		  OUT NUMBER
13:32:30 719  ) AS
13:32:30 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
13:32:30 721  -- VARIABLES
13:32:30 722  var_account_id		NUMBER;
13:32:30 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
13:32:30 724  var_och_is_gc		NUMBER;
13:32:30 725  var_offer_chain_status_id NUMBER;
13:32:30 726  var_is_for_redemption	NUMBER;
13:32:30 727  var_new_invoice_id	NUMBER;
13:32:30 728  var_gift_cert_id		NUMBER;
13:32:30 729  var_account_tax_exempt_id VARCHAR2(255);
13:32:30 730  -- EXCEPTIONS
13:32:30 731  BAD_GROUP_ID		    EXCEPTION;
13:32:30 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
13:32:30 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
13:32:30 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
13:32:30 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
13:32:30 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
13:32:30 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
13:32:30 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
13:32:30 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
13:32:30 740  
13:32:30 741  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 742  BEGIN
13:32:30 743  	-- Get account id
13:32:30 744  	BEGIN
13:32:30 745  	  SELECT
13:32:30 746  	    ACCOUNT.ID,
13:32:30 747  	    ACCOUNT.TAX_EXEMPT_ID
13:32:30 748  	    into
13:32:30 749  	    var_account_id,
13:32:30 750  	    var_account_tax_exempt_id
13:32:30 751  	  FROM
13:32:30 752  	    ACCOUNT
13:32:30 753  	  WHERE
13:32:30 754  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:30 755  	  EXCEPTION
13:32:30 756  	  WHEN NO_DATA_FOUND THEN
13:32:30 757  	    RAISE BAD_GROUP_ID;
13:32:30 758  	END;
13:32:30 759  
13:32:30 760  	-- Check for the same code
13:32:30 761  	BEGIN
13:32:30 762  	  SELECT
13:32:30 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
13:32:30 764  	  FROM
13:32:30 765  	    GIFT_CERTIFICATE
13:32:30 766  	  WHERE
13:32:30 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
13:32:30 768  
13:32:30 769  	  RAISE GC_CODE_ALREADY_EXISTS;
13:32:30 770  
13:32:30 771  	  EXCEPTION
13:32:30 772  	    WHEN NO_DATA_FOUND THEN
13:32:30 773  	      NULL;
13:32:30 774  	END;
13:32:30 775  
13:32:30 776  	-- Get offer chain flag "is_gift_certificate"
13:32:30 777  	BEGIN
13:32:30 778  	  SELECT
13:32:30 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
13:32:30 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
13:32:30 781  	    into
13:32:30 782  	    var_och_is_gc,
13:32:30 783  	    var_offer_chain_status_id
13:32:30 784  	  FROM
13:32:30 785  	    OFFER_CHAIN
13:32:30 786  	  WHERE
13:32:30 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
13:32:30 788  	  EXCEPTION
13:32:30 789  	  WHEN NO_DATA_FOUND THEN
13:32:30 790  	    RAISE BAD_OFFER_CHAIN_ID;
13:32:30 791  	END;
13:32:30 792  
13:32:30 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V20.TRUE
13:32:30 794  	  OR var_och_is_gc IS NULL THEN
13:32:30 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
13:32:30 796  	END IF;
13:32:30 797  
13:32:30 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
13:32:30 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
13:32:30 800  	END IF;
13:32:30 801  
13:32:30 802  	-- norlov: #38151 check if the OC is for Redemption:
13:32:30 803  	SELECT
13:32:30 804  	  COUNT(*) into var_is_for_redemption
13:32:30 805  	FROM
13:32:30 806  	  OFFER_CHAIN_ELIGIBILITY
13:32:30 807  	WHERE
13:32:30 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
13:32:30 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
13:32:30 811  
13:32:30 812  	IF var_is_for_redemption > 0 THEN
13:32:30 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
13:32:30 814  	END IF;
13:32:30 815  
13:32:30 816  	-- Create new invoice
13:32:30 817  	BEGIN
13:32:30 818  	  PROCS_INVOICE_V20.CREATE_INVOICE(
13:32:30 819  	    in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
13:32:30 820  	    in_created_by     => in_created_by,
13:32:30 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
13:32:30 822  	    out_invoice_id    => var_new_invoice_id
13:32:30 823  	  );
13:32:30 824  	  EXCEPTION
13:32:30 825  	    WHEN OTHERS THEN
13:32:30 826  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 827  	      RAISE CAN_NOT_CREATE_INVOICE;
13:32:30 828  	END;
13:32:30 829  
13:32:30 830  	-- Add line items for new invoice
13:32:30 831  	BEGIN
13:32:30 832  	  FOR f_offer_data IN (
13:32:30 833  	    SELECT
13:32:30 834  	      OFFER_ID,
13:32:30 835  	      NUM_RECURRENCES
13:32:30 836  	    FROM
13:32:30 837  	      OFFER_OFFER_CHAIN
13:32:30 838  	    WHERE
13:32:30 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 840  	  )
13:32:30 841  	  LOOP
13:32:30 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
13:32:30 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
13:32:30 844  	    END IF;
13:32:30 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
13:32:30 846  	    LOOP
13:32:30 847  	      PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
13:32:30 848  		in_invoice_id => var_new_invoice_id,
13:32:30 849  		in_offer_id   => f_offer_data.OFFER_ID,
13:32:30 850  		in_created_by => in_created_by
13:32:30 851  	      );
13:32:30 852  	    END LOOP;
13:32:30 853  	  END LOOP;
13:32:30 854  
13:32:30 855  	  EXCEPTION
13:32:30 856  	    WHEN OTHERS THEN
13:32:30 857  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
13:32:30 859  	END;
13:32:30 860  
13:32:30 861  	PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_GIFT_CERTIFICATE(
13:32:30 862  	  out_gift_certificate_id	=> var_gift_cert_id,
13:32:30 863  	  in_purchaser_group_id 	=> in_group_id,
13:32:30 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
13:32:30 865  	  in_offer_chain_id		=> in_offer_chain_id,
13:32:30 866  	  in_expiration_date		=> in_expiration_date,
13:32:30 867  	  in_purchase_date		=> SYSDATE,
13:32:30 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE,
13:32:30 869  	  in_code			=> in_gift_certificate_code,
13:32:30 870  	  in_created_by 		=> in_created_by,
13:32:30 871  	  in_recipient_name		=> in_recipient_name,
13:32:30 872  	  in_gift_message		=> in_gift_message,
13:32:30 873  	  in_recipient_email		=> in_recipient_email,
13:32:30 874  	  in_sender_email		=> in_sender_email,
13:32:30 875  	  in_sender_name		=> in_sender_name,
13:32:30 876  	  in_recipient_address_id	=> in_recipient_address_id,
13:32:30 877  	  in_recipient_notify_date	=> in_recipient_notify_date
13:32:30 878  	);
13:32:30 879  
13:32:30 880  	out_gift_certificate_id := var_gift_cert_id;
13:32:30 881  	out_invoice_id := var_new_invoice_id;
13:32:30 882  
13:32:30 883  EXCEPTION
13:32:30 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
13:32:30 885  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 886  	  SPROC_NAME, 'Offer chain is not active');
13:32:30 887  WHEN GC_CODE_ALREADY_EXISTS THEN
13:32:30 888  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:30 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
13:32:30 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
13:32:30 891  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
13:32:30 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
13:32:30 894  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
13:32:30 896  WHEN CAN_NOT_CREATE_INVOICE THEN
13:32:30 897  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
13:32:30 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
13:32:30 900  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
13:32:30 902  WHEN BAD_GROUP_ID THEN
13:32:30 903  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 904  	  SPROC_NAME, 'No such group id');
13:32:30 905  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:30 906  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 907  	  SPROC_NAME, 'No such offer chain');
13:32:30 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
13:32:30 909  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
13:32:30 911  WHEN OTHERS THEN
13:32:30 912  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 914  END START_GC_PURCHASING;
13:32:30 915  
13:32:30 916  /******************************************************************************/
13:32:30 917  
13:32:30 918  PROCEDURE FINALIZE_GC_PURCHASING (
13:32:30 919  	in_invoice_id	      IN NUMBER,
13:32:30 920  	in_created_by	      IN VARCHAR2,
13:32:30 921  	in_instrument_id      IN NUMBER,
13:32:30 922  	in_instrument_type_id IN NUMBER,
13:32:30 923  	in_order_id	      IN VARCHAR2,
13:32:30 924  	in_transaction_id     IN NUMBER,
13:32:30 925  	out_charge_amount     OUT NUMBER
13:32:30 926  ) AS
13:32:30 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
13:32:30 928  -- VARIABLES
13:32:30 929  temp_transaction_id_count NUMBER;
13:32:30 930  var_invoice_amount	NUMBER(10,2);
13:32:30 931  var_transaction_id	NUMBER;
13:32:30 932  var_new_charge_id 	NUMBER;
13:32:30 933  -- EXCEPTIONS
13:32:30 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
13:32:30 935  BAD_PAYPAL_ID		  EXCEPTION;
13:32:30 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
13:32:30 937  TRANSACTION_EXISTS	  EXCEPTION;
13:32:30 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
13:32:30 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
13:32:30 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
13:32:30 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
13:32:30 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
13:32:30 943  BEGIN
13:32:30 944  
13:32:30 945  	-- Check that instrument exists
13:32:30 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 948  	    RAISE BAD_CREDIT_CARD_ID;
13:32:30 949  	  END IF;
13:32:30 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 952  	    RAISE BAD_PAYPAL_ID;
13:32:30 953  	  END IF;
13:32:30 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
13:32:30 955  	  NULL;
13:32:30 956  	ELSE
13:32:30 957  	  RAISE BAD_INSTRUMENT_TYPE;
13:32:30 958  	END IF;
13:32:30 959  
13:32:30 960  	-- Check that transaction with given id do not exists
13:32:30 961  	SELECT
13:32:30 962  	  COUNT(*) into temp_transaction_id_count
13:32:30 963  	FROM
13:32:30 964  	  TRANSACTION
13:32:30 965  	WHERE
13:32:30 966  	  TRANSACTION.ID = in_transaction_id;
13:32:30 967  
13:32:30 968  	IF temp_transaction_id_count > 0 THEN
13:32:30 969  	  RAISE TRANSACTION_EXISTS;
13:32:30 970  	END IF;
13:32:30 971  
13:32:30 972  	-- Calculate new invoice amount
13:32:30 973  	BEGIN
13:32:30 974  	  PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
13:32:30 975  	  EXCEPTION
13:32:30 976  	    WHEN OTHERS THEN
13:32:30 977  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:30 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
13:32:30 979  	END;
13:32:30 980  
13:32:30 981  	IF var_invoice_amount > 0
13:32:30 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
13:32:30 983  	  RAISE CAN_NOT_USE_FCINSTR;
13:32:30 984  	END IF;
13:32:30 985  
13:32:30 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
13:32:30 987  	IF var_invoice_amount = 0 THEN
13:32:30 988  	  PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
13:32:30 989  	    in_invoice_id		   => in_invoice_id,
13:32:30 990  	    in_updated_by		   => in_created_by,
13:32:30 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V20.INVOICE_CLOSED
13:32:30 992  	  );
13:32:30 993  	END IF;
13:32:30 994  
13:32:30 995  	IF var_invoice_amount > 0 THEN
13:32:30 996  	  -- Create transaction
13:32:30 997  	  BEGIN
13:32:30 998  	    PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 999  	      in_transaction_id        => in_transaction_id,
13:32:30 1000  	       in_status_id		=> GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
13:32:30 1001  	       in_amount		=> var_invoice_amount,
13:32:30 1002  	       in_created_by		=> in_created_by,
13:32:30 1003  	       in_order_id		=> in_order_id,
13:32:30 1004  	       in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
13:32:30 1005  	       out_transaction_id	=> var_transaction_id
13:32:30 1006  	     );
13:32:30 1007  	     EXCEPTION
13:32:30 1008  	       WHEN OTHERS THEN
13:32:30 1009  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1010  		 RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 1011  	   END;
13:32:30 1012  
13:32:30 1013  	   -- Create charge
13:32:30 1014  	   BEGIN
13:32:30 1015  	     PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 1016  	       in_invoice_id	     => in_invoice_id,
13:32:30 1017  	       in_transaction_id     => var_transaction_id,
13:32:30 1018  	       in_instrument_type_id => in_instrument_type_id,
13:32:30 1019  	       in_instrument_id      => in_instrument_id,
13:32:30 1020  	       in_charge_amount      => var_invoice_amount,
13:32:30 1021  	       in_created_by	     => in_created_by,
13:32:30 1022  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 1023  	       out_charge_id	     => var_new_charge_id
13:32:30 1024  	     );
13:32:30 1025  	     out_charge_amount := var_invoice_amount;
13:32:30 1026  	     EXCEPTION
13:32:30 1027  	       WHEN OTHERS THEN
13:32:30 1028  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1029  		 RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 1030  	   END;
13:32:30 1031  	 ELSE
13:32:30 1032  	   out_charge_amount := 0;
13:32:30 1033  	 END IF;
13:32:30 1034  
13:32:30 1035  EXCEPTION
13:32:30 1036  WHEN CAN_NOT_USE_FCINSTR THEN
13:32:30 1037  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1038  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
13:32:30 1039  WHEN BAD_CREDIT_CARD_ID THEN
13:32:30 1040  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1041  	   SPROC_NAME, 'Bad credit card id');
13:32:30 1042  WHEN BAD_PAYPAL_ID THEN
13:32:30 1043  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1044  	   SPROC_NAME, 'Bad paypal id');
13:32:30 1045  WHEN BAD_INSTRUMENT_TYPE THEN
13:32:30 1046  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1047  	   SPROC_NAME, 'Bad instrument type');
13:32:30 1048  WHEN TRANSACTION_EXISTS THEN
13:32:30 1049  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:30 1050  	   SPROC_NAME, 'Transaction with given id already exists');
13:32:30 1051  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 1052  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1053  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 1054  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 1055  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1056  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 1057  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
13:32:30 1058  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1059  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
13:32:30 1060  WHEN OTHERS THEN
13:32:30 1061  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1062  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1063  END FINALIZE_GC_PURCHASING;
13:32:30 1064  
13:32:30 1065  /******************************************************************************/
13:32:30 1066  
13:32:30 1067  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
13:32:30 1068  	 in_group_id		   IN NUMBER,
13:32:30 1069  	 in_offer_chain_id	   IN VARCHAR2,
13:32:30 1070  	 in_gift_certificate_code  IN VARCHAR2,
13:32:30 1071  	 in_created_by		   IN VARCHAR2,
13:32:30 1072  	 in_recipient_name	   IN VARCHAR2,
13:32:30 1073  	 in_recipient_email	   IN VARCHAR2,
13:32:30 1074  	 in_sender_name 	   IN VARCHAR2,
13:32:30 1075  	 in_sender_email	   IN VARCHAR2,
13:32:30 1076  	 in_gift_message	   IN VARCHAR2,
13:32:30 1077  	 in_instrument_id	   IN NUMBER,
13:32:30 1078  	 in_instrument_type_id	   IN NUMBER,
13:32:30 1079  	 in_expiration_date	   IN DATE,
13:32:30 1080  	 in_order_id		   IN VARCHAR2,
13:32:30 1081  	 in_transaction_id	   IN NUMBER
13:32:30 1082  ) AS
13:32:30 1083  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
13:32:30 1084  -- VARIABLES
13:32:30 1085  var_gift_cert_id   NUMBER;
13:32:30 1086  var_account_id	  NUMBER;
13:32:30 1087  var_invoice_amount NUMBER (10,2);
13:32:30 1088  var_new_invoice_id NUMBER;
13:32:30 1089  var_new_charge_id  NUMBER;
13:32:30 1090  var_och_is_gc	  NUMBER;
13:32:30 1091  var_offer_chain_status_id NUMBER;
13:32:30 1092  var_is_for_redemption	 NUMBER;
13:32:30 1093  var_account_tax_exempt_id VARCHAR2(255);
13:32:30 1094  
13:32:30 1095  temp_transaction_id_count NUMBER;
13:32:30 1096  var_transaction_id	 NUMBER;
13:32:30 1097  temp_gc_code VARCHAR2(255);
13:32:30 1098  
13:32:30 1099  var_invoice_status_id NUMBER;
13:32:30 1100  -- EXCEPTIONS
13:32:30 1101  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
13:32:30 1102  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
13:32:30 1103  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
13:32:30 1104  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
13:32:30 1105  BAD_GROUP_ID			   EXCEPTION;
13:32:30 1106  BAD_OFFER_CHAIN_ID		   EXCEPTION;
13:32:30 1107  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
13:32:30 1108  TRANSACTION_EXISTS		   EXCEPTION;
13:32:30 1109  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
13:32:30 1110  BAD_INSTRUMENT_TYPE		   EXCEPTION;
13:32:30 1111  BAD_CREDIT_CARD_ID		   EXCEPTION;
13:32:30 1112  BAD_PAYPAL_ID			   EXCEPTION;
13:32:30 1113  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
13:32:30 1114  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
13:32:30 1115  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
13:32:30 1116  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
13:32:30 1117  CAN_NOT_USE_FCINSTR		   EXCEPTION;
13:32:30 1118  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
13:32:30 1119  EXCEPTION_MESSAGE		   VARCHAR2(1024);
13:32:30 1120  BEGIN
13:32:30 1121  
13:32:30 1122  	 -- Get account id
13:32:30 1123  	 BEGIN
13:32:30 1124  	   SELECT
13:32:30 1125  	     ACCOUNT.ID,
13:32:30 1126  	     ACCOUNT.TAX_EXEMPT_ID
13:32:30 1127  	     into
13:32:30 1128  	     var_account_id,
13:32:30 1129  	     var_account_tax_exempt_id
13:32:30 1130  	   FROM
13:32:30 1131  	     ACCOUNT
13:32:30 1132  	   WHERE
13:32:30 1133  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 1134  	   EXCEPTION
13:32:30 1135  	   WHEN NO_DATA_FOUND THEN
13:32:30 1136  	     RAISE BAD_GROUP_ID;
13:32:30 1137  	 END;
13:32:30 1138  
13:32:30 1139  	 -- Check that instrument exists
13:32:30 1140  	 IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30 1141  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 1142  	     RAISE BAD_CREDIT_CARD_ID;
13:32:30 1143  	   END IF;
13:32:30 1144  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30 1145  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 1146  	     RAISE BAD_PAYPAL_ID;
13:32:30 1147  	   END IF;
13:32:30 1148  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
13:32:30 1149  	   NULL;
13:32:30 1150  	 ELSE
13:32:30 1151  	   RAISE BAD_INSTRUMENT_TYPE;
13:32:30 1152  	 END IF;
13:32:30 1153  
13:32:30 1154  	 -- Check for the same code
13:32:30 1155  	 BEGIN
13:32:30 1156  	   SELECT
13:32:30 1157  	     GIFT_CERTIFICATE.CODE into temp_gc_code
13:32:30 1158  	   FROM
13:32:30 1159  	     GIFT_CERTIFICATE
13:32:30 1160  	   WHERE
13:32:30 1161  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
13:32:30 1162  
13:32:30 1163  	   RAISE GC_CODE_ALREADY_EXISTS;
13:32:30 1164  
13:32:30 1165  	   EXCEPTION
13:32:30 1166  	     WHEN NO_DATA_FOUND THEN
13:32:30 1167  	       NULL;
13:32:30 1168  	 END;
13:32:30 1169  
13:32:30 1170  	 -- Get offer chain flag "is_gift_certificate"
13:32:30 1171  	 BEGIN
13:32:30 1172  	   SELECT
13:32:30 1173  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
13:32:30 1174  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
13:32:30 1175  	     into
13:32:30 1176  	     var_och_is_gc,
13:32:30 1177  	     var_offer_chain_status_id
13:32:30 1178  	   FROM
13:32:30 1179  	     OFFER_CHAIN
13:32:30 1180  	   WHERE
13:32:30 1181  	     OFFER_CHAIN.ID = in_offer_chain_id;
13:32:30 1182  	   EXCEPTION
13:32:30 1183  	   WHEN NO_DATA_FOUND THEN
13:32:30 1184  	     RAISE BAD_OFFER_CHAIN_ID;
13:32:30 1185  	 END;
13:32:30 1186  
13:32:30 1187  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V20.TRUE
13:32:30 1188  	   OR var_och_is_gc IS NULL THEN
13:32:30 1189  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
13:32:30 1190  	 END IF;
13:32:30 1191  
13:32:30 1192  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
13:32:30 1193  	   RAISE BAD_OFFER_CHAIN_STATUS;
13:32:30 1194  	 END IF;
13:32:30 1195  
13:32:30 1196  	 -- norlov: #38151 check if the OC is for Redemption:
13:32:30 1197  	 SELECT
13:32:30 1198  	   COUNT(*) into var_is_for_redemption
13:32:30 1199  	 FROM
13:32:30 1200  	   OFFER_CHAIN_ELIGIBILITY
13:32:30 1201  	 WHERE
13:32:30 1202  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 1203  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
13:32:30 1204  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
13:32:30 1205  
13:32:30 1206  	 IF var_is_for_redemption > 0 THEN
13:32:30 1207  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
13:32:30 1208  	 END IF;
13:32:30 1209  
13:32:30 1210  	 -- Check that transaction with given id do not exists
13:32:30 1211  	 SELECT
13:32:30 1212  	   COUNT(*) into temp_transaction_id_count
13:32:30 1213  	 FROM
13:32:30 1214  	   TRANSACTION
13:32:30 1215  	 WHERE
13:32:30 1216  	   TRANSACTION.ID = in_transaction_id;
13:32:30 1217  
13:32:30 1218  	 IF temp_transaction_id_count > 0 THEN
13:32:30 1219  	   RAISE TRANSACTION_EXISTS;
13:32:30 1220  	 END IF;
13:32:30 1221  
13:32:30 1222  	 -- Create new invoice
13:32:30 1223  	 BEGIN
13:32:30 1224  	   PROCS_INVOICE_V20.CREATE_INVOICE(
13:32:30 1225  	     in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
13:32:30 1226  	     in_created_by     => in_created_by,
13:32:30 1227  	     in_tax_exempt_id  => var_account_tax_exempt_id,
13:32:30 1228  	     out_invoice_id    => var_new_invoice_id
13:32:30 1229  	   );
13:32:30 1230  	   EXCEPTION
13:32:30 1231  	     WHEN OTHERS THEN
13:32:30 1232  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1233  	       RAISE CAN_NOT_CREATE_INVOICE;
13:32:30 1234  	 END;
13:32:30 1235  
13:32:30 1236  	 -- Add line items for new invoice
13:32:30 1237  	 BEGIN
13:32:30 1238  	   FOR f_offer_data IN (
13:32:30 1239  	     SELECT
13:32:30 1240  	       OFFER_ID,
13:32:30 1241  	       NUM_RECURRENCES
13:32:30 1242  	     FROM
13:32:30 1243  	       OFFER_OFFER_CHAIN
13:32:30 1244  	     WHERE
13:32:30 1245  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
13:32:30 1246  	   )
13:32:30 1247  	   LOOP
13:32:30 1248  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
13:32:30 1249  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
13:32:30 1250  	     END IF;
13:32:30 1251  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
13:32:30 1252  	     LOOP
13:32:30 1253  	       PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
13:32:30 1254  		 in_invoice_id => var_new_invoice_id,
13:32:30 1255  		 in_offer_id   => f_offer_data.OFFER_ID,
13:32:30 1256  		 in_created_by => in_created_by
13:32:30 1257  	       );
13:32:30 1258  	     END LOOP;
13:32:30 1259  	   END LOOP;
13:32:30 1260  
13:32:30 1261  	   EXCEPTION
13:32:30 1262  	     WHEN OTHERS THEN
13:32:30 1263  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1264  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
13:32:30 1265  	 END;
13:32:30 1266  
13:32:30 1267  	 -- Calculate new invoice amount
13:32:30 1268  	 BEGIN
13:32:30 1269  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
13:32:30 1270  	   EXCEPTION
13:32:30 1271  	     WHEN OTHERS THEN
13:32:30 1272  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1273  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
13:32:30 1274  	 END;
13:32:30 1275  
13:32:30 1276  	 IF var_invoice_amount > 0
13:32:30 1277  	   AND in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
13:32:30 1278  	   RAISE CAN_NOT_USE_FCINSTR;
13:32:30 1279  	 END IF;
13:32:30 1280  
13:32:30 1281  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
13:32:30 1282  	 IF var_invoice_amount = 0 THEN
13:32:30 1283  	   PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
13:32:30 1284  	     in_invoice_id		    => var_new_invoice_id,
13:32:30 1285  	     in_updated_by		    => in_created_by,
13:32:30 1286  	     in_invoice_status_id	    => GLOBAL_STATUSES_V20.INVOICE_CLOSED
13:32:30 1287  	   );
13:32:30 1288  	 END IF;
13:32:30 1289  
13:32:30 1290  	 IF var_invoice_amount > 0 THEN
13:32:30 1291  	   -- Create transaction
13:32:30 1292  	   BEGIN
13:32:30 1293  	     PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:30 1294  	       in_transaction_id  => in_transaction_id,
13:32:30 1295  	       in_status_id	  => GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
13:32:30 1296  	       in_amount	  => var_invoice_amount,
13:32:30 1297  	       in_created_by	  => in_created_by,
13:32:30 1298  	       in_order_id	  => in_order_id,
13:32:30 1299  	       out_transaction_id => var_transaction_id
13:32:30 1300  	     );
13:32:30 1301  	     EXCEPTION
13:32:30 1302  	       WHEN OTHERS THEN
13:32:30 1303  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1304  		 RAISE CAN_NOT_CREATE_TRANSACTION;
13:32:30 1305  	   END;
13:32:30 1306  
13:32:30 1307  	   -- Create charge
13:32:30 1308  	   BEGIN
13:32:30 1309  	     PROCS_CHARGE_V20.CREATE_CHARGE(
13:32:30 1310  	       in_invoice_id	     => var_new_invoice_id,
13:32:30 1311  	       in_transaction_id     => var_transaction_id,
13:32:30 1312  	       in_instrument_type_id => in_instrument_type_id,
13:32:30 1313  	       in_instrument_id      => in_instrument_id,
13:32:30 1314  	       in_charge_amount      => var_invoice_amount,
13:32:30 1315  	       in_created_by	     => in_created_by,
13:32:30 1316  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 1317  	       out_charge_id	     => var_new_charge_id
13:32:30 1318  	     );
13:32:30 1319  	     EXCEPTION
13:32:30 1320  	       WHEN OTHERS THEN
13:32:30 1321  		 EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1322  		 RAISE CAN_NOT_CREATE_CHARGE;
13:32:30 1323  	   END;
13:32:30 1324  	 END IF;
13:32:30 1325  
13:32:30 1326  	 -- Create new row in GIFT_CERTIFICATE table
13:32:30 1327  	 PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_GIFT_CERTIFICATE(
13:32:30 1328  	   out_gift_certificate_id	 => var_gift_cert_id,
13:32:30 1329  	   in_purchaser_group_id	 => in_group_id,
13:32:30 1330  	   in_purchaser_invoice_id	 => var_new_invoice_id,
13:32:30 1331  	   in_offer_chain_id		 => in_offer_chain_id,
13:32:30 1332  	   in_expiration_date		 => in_expiration_date,
13:32:30 1333  	   in_purchase_date		 => SYSDATE,
13:32:30 1334  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE,
13:32:30 1335  	   in_code			 => in_gift_certificate_code,
13:32:30 1336  	   in_created_by		 => in_created_by,
13:32:30 1337  	   in_recipient_name		 => in_recipient_name,
13:32:30 1338  	   in_gift_message		 => in_gift_message,
13:32:30 1339  	   in_recipient_email		 => in_recipient_email,
13:32:30 1340  	   in_sender_email		 => in_sender_email,
13:32:30 1341  	   in_sender_name		 => in_sender_name
13:32:30 1342  	 );
13:32:30 1343  
13:32:30 1344  EXCEPTION
13:32:30 1345  WHEN CAN_NOT_USE_FCINSTR THEN
13:32:30 1346  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1347  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
13:32:30 1348  WHEN BAD_OFFER_CHAIN_STATUS THEN
13:32:30 1349  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1350  	   SPROC_NAME, 'Offer chain is not active');
13:32:30 1351  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
13:32:30 1352  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1353  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
13:32:30 1354  WHEN BAD_CREDIT_CARD_ID THEN
13:32:30 1355  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1356  	   SPROC_NAME, 'Bad credit card id');
13:32:30 1357  WHEN BAD_PAYPAL_ID THEN
13:32:30 1358  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1359  	   SPROC_NAME, 'Bad paypal id');
13:32:30 1360  WHEN BAD_INSTRUMENT_TYPE THEN
13:32:30 1361  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1362  	   SPROC_NAME, 'Bad instrument type');
13:32:30 1363  WHEN GC_CODE_ALREADY_EXISTS THEN
13:32:30 1364  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:30 1365  	   SPROC_NAME, 'Gift certificate with same code already exists');
13:32:30 1366  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
13:32:30 1367  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1368  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
13:32:30 1369  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
13:32:30 1370  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1371  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
13:32:30 1372  WHEN TRANSACTION_EXISTS THEN
13:32:30 1373  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
13:32:30 1374  	   SPROC_NAME, 'Transaction with given id already exists');
13:32:30 1375  WHEN CAN_NOT_CREATE_INVOICE THEN
13:32:30 1376  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1377  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
13:32:30 1378  WHEN CAN_NOT_CREATE_TRANSACTION THEN
13:32:30 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1380  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
13:32:30 1381  WHEN CAN_NOT_CREATE_CHARGE THEN
13:32:30 1382  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1383  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
13:32:30 1384  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
13:32:30 1385  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1386  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
13:32:30 1387  WHEN BAD_GROUP_ID THEN
13:32:30 1388  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1389  	   SPROC_NAME, 'No such group id');
13:32:30 1390  WHEN BAD_OFFER_CHAIN_ID THEN
13:32:30 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1392  	   SPROC_NAME, 'No such offer chain');
13:32:30 1393  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
13:32:30 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1395  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
13:32:30 1396  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
13:32:30 1397  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1398  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
13:32:30 1399  WHEN OTHERS THEN
13:32:30 1400  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1401  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1402  END PURCHASE_GIFT_CERTIFICATE;
13:32:30 1403  
13:32:30 1404  /******************************************************************************/
13:32:30 1405  
13:32:30 1406  PROCEDURE REDEEM_GIFT_CERTIFICATE (
13:32:30 1407  	 in_group_id			 IN NUMBER,
13:32:30 1408  	 in_gift_certificate_code	 IN VARCHAR2,
13:32:30 1409  	 in_created_by			 IN VARCHAR2,
13:32:30 1410  	 in_redeemer_address_id 	 IN NUMBER,
13:32:30 1411  	 in_fin_instrument_id		 IN NUMBER,
13:32:30 1412  	 in_fin_instrument_type_id	 IN NUMBER,
13:32:30 1413  	 in_redemption_offer_chain_id	 IN NUMBER,
13:32:30 1414  	 out_subscription_id		 OUT NUMBER,
13:32:30 1415  	 out_license_id 		 OUT NUMBER
13:32:30 1416  ) AS
13:32:30 1417  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
13:32:30 1418  -- VARIABLES
13:32:30 1419  var_gift_certificate_id NUMBER;
13:32:30 1420  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
13:32:30 1421  var_purchased_oc_id     NUMBER;
13:32:30 1422  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
13:32:30 1423  var_offer_duration      VARCHAR2(30);
13:32:30 1424  var_invoice_id	       NUMBER;
13:32:30 1425  var_succ_purch_attempts_num NUMBER;
13:32:30 1426  var_subscription_id     NUMBER;
13:32:30 1427  var_license_id	       NUMBER;
13:32:30 1428  var_account_id	       NUMBER;
13:32:30 1429  var_gc_status_id        NUMBER;
13:32:30 1430  var_gc_charges_amount   NUMBER;
13:32:30 1431  var_gc_expiration_date  DATE;
13:32:30 1432  var_gc_redeemer_group_id NUMBER;
13:32:30 1433  var_gc_purchase_invoice_id NUMBER;
13:32:30 1434  var_gc_purchase_inv_status_id NUMBER;
13:32:30 1435  var_offer_index		     NUMBER;
13:32:30 1436  var_purchaser_group_id	     NUMBER;
13:32:30 1437  temp_license_id		     NUMBER;
13:32:30 1438  var_same_offer_chains_num     NUMBER;
13:32:30 1439  var_max_concurrent_subscrs    NUMBER;
13:32:30 1440  var_account_tax_exempt_id     VARCHAR2(255);
13:32:30 1441  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
13:32:30 1442  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
13:32:30 1443  var_first_offer_id	  NUMBER;
13:32:30 1444  var_date 	     DATE := SYSDATE;
13:32:30 1445  
13:32:30 1446  var_offers SYS_REFCURSOR;
13:32:30 1447  
13:32:30 1448  -- EXCEPTIONS
13:32:30 1449  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
13:32:30 1450  BAD_GROUP_ID		      EXCEPTION;
13:32:30 1451  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
13:32:30 1452  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
13:32:30 1453  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
13:32:30 1454  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
13:32:30 1455  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
13:32:30 1456  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
13:32:30 1457  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
13:32:30 1458  LIMIT_REACHED		      EXCEPTION;
13:32:30 1459  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
13:32:30 1460  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
13:32:30 1461  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
13:32:30 1462  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
13:32:30 1463  EXCEPTION_MESSAGE	      VARCHAR2(1024);
13:32:30 1464  BEGIN
13:32:30 1465  
13:32:30 1466  	 -- Get account id
13:32:30 1467  	 BEGIN
13:32:30 1468  	   SELECT
13:32:30 1469  	     ACCOUNT.ID,
13:32:30 1470  	     ACCOUNT.TAX_EXEMPT_ID
13:32:30 1471  	     into
13:32:30 1472  	     var_account_id,
13:32:30 1473  	     var_account_tax_exempt_id
13:32:30 1474  	   FROM
13:32:30 1475  	     ACCOUNT
13:32:30 1476  	   WHERE
13:32:30 1477  	     ACCOUNT.GROUP_ID = in_group_id
13:32:30 1478  	     AND ROWNUM <= 1;
13:32:30 1479  
13:32:30 1480  	   EXCEPTION
13:32:30 1481  	   WHEN NO_DATA_FOUND THEN
13:32:30 1482  	     RAISE BAD_GROUP_ID;
13:32:30 1483  	 END;
13:32:30 1484  
13:32:30 1485  	 -- Get gift certificate data
13:32:30 1486  	 BEGIN
13:32:30 1487  	   SELECT
13:32:30 1488  	     GIFT_CERTIFICATE.ID,
13:32:30 1489  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
13:32:30 1490  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
13:32:30 1491  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
13:32:30 1492  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
13:32:30 1493  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
13:32:30 1494  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
13:32:30 1495  	     into
13:32:30 1496  	     var_gift_certificate_id,
13:32:30 1497  	     var_purchased_oc_id,
13:32:30 1498  	     var_gc_status_id,
13:32:30 1499  	     var_purchaser_group_id,
13:32:30 1500  	     var_gc_expiration_date,
13:32:30 1501  	     var_gc_redeemer_group_id,
13:32:30 1502  	     var_gc_purchase_invoice_id
13:32:30 1503  	   FROM
13:32:30 1504  	     GIFT_CERTIFICATE
13:32:30 1505  	   WHERE
13:32:30 1506  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
13:32:30 1507  	     AND ROWNUM <= 1;
13:32:30 1508  
13:32:30 1509  	   EXCEPTION
13:32:30 1510  	   WHEN NO_DATA_FOUND THEN
13:32:30 1511  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
13:32:30 1512  	 END;
13:32:30 1513  
13:32:30 1514  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
13:32:30 1515  	 -- but in that case a redemption offer chain id should always be passed in
13:32:30 1516  	 IF var_oc_id_to_redeem IS NULL THEN
13:32:30 1517  	   BEGIN
13:32:30 1518  	     SELECT
13:32:30 1519  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
13:32:30 1520  	       into
13:32:30 1521  	       var_oc_id_to_redeem
13:32:30 1522  	     FROM
13:32:30 1523  	       OFFER_CHAIN_META_DATA
13:32:30 1524  	     WHERE
13:32:30 1525  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
13:32:30 1526  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V20.REDEMPTION_OC_ID
13:32:30 1527  	       AND ROWNUM = 1;
13:32:30 1528  -- requested by ticket so (but above is correct for the actual migrated data):
13:32:30 1529  --  SELECT
13:32:30 1530  --      OFFER_CHAIN.ID
13:32:30 1531  --      into
13:32:30 1532  --      var_oc_id_to_redeem
13:32:30 1533  --    FROM
13:32:30 1534  --      OFFER_CHAIN
13:32:30 1535  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
13:32:30 1536  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
13:32:30 1537  --    WHERE
13:32:30 1538  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 1539  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
13:32:30 1540  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET
13:32:30 1541  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 1542  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V20.REDEMPTION_OC_ID
13:32:30 1543  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
13:32:30 1544  --      AND ROWNUM = 1;
13:32:30 1545  
13:32:30 1546  	     EXCEPTION
13:32:30 1547  	     WHEN NO_DATA_FOUND THEN
13:32:30 1548  	       RAISE OC_TO_REDEEM_NOT_FOUND;
13:32:30 1549  	   END;
13:32:30 1550  	 END IF;
13:32:30 1551  
13:32:30 1552  	 -- Check that purchase invoice for this GC was closed
13:32:30 1553  	 SELECT
13:32:30 1554  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
13:32:30 1555  	 FROM
13:32:30 1556  	   INVOICE
13:32:30 1557  	 WHERE
13:32:30 1558  	   INVOICE.ID = var_gc_purchase_invoice_id;
13:32:30 1559  
13:32:30 1560  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
13:32:30 1561  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
13:32:30 1562  	 END IF;
13:32:30 1563  
13:32:30 1564  	 -- Check that this invoice was successfully processed by billing
13:32:30 1565  	 SELECT
13:32:30 1566  	   COUNT(1) into var_succ_purch_attempts_num
13:32:30 1567  	 FROM
13:32:30 1568  	   TRANSACTION_ATTEMPT TA
13:32:30 1569  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
13:32:30 1570  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
13:32:30 1571  	 WHERE
13:32:30 1572  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
13:32:30 1573  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS;
13:32:30 1574  
13:32:30 1575  	 IF var_succ_purch_attempts_num = 0 THEN
13:32:30 1576  	   SELECT
13:32:30 1577  	     COUNT(1) into var_succ_purch_attempts_num
13:32:30 1578  	   FROM
13:32:30 1579  	     DUAL
13:32:30 1580  	   WHERE
13:32:30 1581  	     PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
13:32:30 1582  	 END IF;
13:32:30 1583  
13:32:30 1584  	 IF var_succ_purch_attempts_num = 0 THEN
13:32:30 1585  	   RAISE PURCHASE_INVOICES_NOT_PAID;
13:32:30 1586  	 END IF;
13:32:30 1587  
13:32:30 1588  	 -- Check limit for gc's offer chain
13:32:30 1589  	 SELECT
13:32:30 1590  	   COUNT(*) into var_same_offer_chains_num
13:32:30 1591  	 FROM
13:32:30 1592  	   SUBSCRIPTION
13:32:30 1593  	 WHERE
13:32:30 1594  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:30 1595  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
13:32:30 1596  	   AND (
13:32:30 1597  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 1598  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:30 1599  IF var_same_offer_chains_num = 0 THEN
13:32:30 1600  	   -- if user does not have any active existing subscriptions to the offer chain
13:32:30 1601  	   -- and if product from the offer chain is already owned from another offer chain
13:32:30 1602  	   -- then deny purchase
13:32:30 1603  	   FOR f_account_offer_chains IN (
13:32:30 1604  	     SELECT DISTINCT
13:32:30 1605  	       OFFER_CHAIN_ID
13:32:30 1606  	     FROM
13:32:30 1607  	       SUBSCRIPTION
13:32:30 1608  	     WHERE
13:32:30 1609  	       ACCOUNT_ID = var_account_id
13:32:30 1610  	       AND (
13:32:30 1611  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 1612  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
13:32:30 1613  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:30 1614  	   )
13:32:30 1615  	   LOOP
13:32:30 1616  	     IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 1617  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
13:32:30 1618  	     END IF;
13:32:30 1619  	   END LOOP;
13:32:30 1620  	 ELSE
13:32:30 1621  
13:32:30 1622  	   -- if user have any active existing subscriptions to the offer chain
13:32:30 1623  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
13:32:30 1624  	   -- then deny purchase
13:32:30 1625  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
13:32:30 1626  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V20.INFINITY
13:32:30 1627  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
13:32:30 1628  	     RAISE LIMIT_REACHED;
13:32:30 1629  	   END IF;
13:32:30 1630  	 END IF;
13:32:30 1631  -- norlov: END OF TODO
13:32:30 1632  
13:32:30 1633  
13:32:30 1634  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
13:32:30 1635  	   RAISE GIFT_CERTIFICATE_REDEEMED;
13:32:30 1636  	 END IF;
13:32:30 1637  
13:32:30 1638  	 IF var_gc_expiration_date < sysdate THEN
13:32:30 1639  	   RAISE GIFT_CERTIFICATE_EXPIRED;
13:32:30 1640  	 END IF;
13:32:30 1641  
13:32:30 1642  	  IF var_gc_status_id = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_REFUNDED THEN
13:32:30 1643  	   RAISE GIFT_CERT_IS_REFUNDED;
13:32:30 1644  	 END IF;
13:32:30 1645  
13:32:30 1646  	 IF var_gc_status_id = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED THEN
13:32:30 1647  	   RAISE GIFT_CERT_IS_FINALIZED;
13:32:30 1648  	 END IF;
13:32:30 1649  
13:32:30 1650  	 -- Check that user did not subscribed to same product already
13:32:30 1651  	 -- norlov: get rid of this since there is already the check?
13:32:30 1652  	 FOR f_user_offer_chain IN (
13:32:30 1653  	   SELECT DISTINCT
13:32:30 1654  	     OFFER_CHAIN_ID
13:32:30 1655  	   FROM
13:32:30 1656  	     SUBSCRIPTION
13:32:30 1657  	   WHERE
13:32:30 1658  	     ACCOUNT_ID=var_account_id
13:32:30 1659  	     AND (
13:32:30 1660  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 1661  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
13:32:30 1662  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
13:32:30 1663  	 )
13:32:30 1664  	 LOOP
13:32:30 1665  	   IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V20.TRUE THEN
13:32:30 1666  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
13:32:30 1667  	   END IF;
13:32:30 1668  	 END LOOP;
13:32:30 1669  
13:32:30 1670  	 -- Check for gift certificate amount
13:32:30 1671  	 SELECT
13:32:30 1672  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
13:32:30 1673  	 FROM
13:32:30 1674  	   CHARGE
13:32:30 1675  	 WHERE
13:32:30 1676  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
13:32:30 1677  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
13:32:30 1678  
13:32:30 1679  	 -- Create new invoice
13:32:30 1680  	 PROCS_INVOICE_V20.CREATE_INVOICE(
13:32:30 1681  	   out_invoice_id    => var_invoice_id,
13:32:30 1682  	   in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_CLOSED,
13:32:30 1683  	   in_tax_exempt_id  => var_account_tax_exempt_id,
13:32:30 1684  	   in_created_by     => in_created_by
13:32:30 1685  	 );
13:32:30 1686  
13:32:30 1687  	 -- If a financial instrument wasn't passed in, use the gift certificate id
13:32:30 1688  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
13:32:30 1689  	 IF var_fin_instrument_id is null THEN
13:32:30 1690  	   var_fin_instrument_id := var_gift_certificate_id;
13:32:30 1691  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
13:32:30 1692  	 END IF;
13:32:30 1693  
13:32:30 1694  	 -- Insert new row into subscription table
13:32:30 1695  	 PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION(
13:32:30 1696  	   out_subscription_id	     => var_subscription_id,
13:32:30 1697  	   in_account_id	     => var_account_id,
13:32:30 1698  	   in_purchase_date	     => var_date,
13:32:30 1699  	   in_offer_chain_id	     => var_oc_id_to_redeem,
13:32:30 1700  	   in_created_by	     => in_created_by,
13:32:30 1701  	   in_instrument_type_id     => var_fin_instrument_type_id,
13:32:30 1702  	   in_instrument_id	     => var_fin_instrument_id,
13:32:30 1703  	   in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:30 1704  	 );
13:32:30 1705  
13:32:30 1706  	 out_subscription_id := var_subscription_id;
13:32:30 1707  
13:32:30 1708  	 BEGIN
13:32:30 1709  	   PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
13:32:30 1710  	   EXCEPTION
13:32:30 1711  	     WHEN OTHERS THEN
13:32:30 1712  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1713  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
13:32:30 1714  	 END;
13:32:30 1715  
13:32:30 1716  	 BEGIN
13:32:30 1717  	   PROCS_LICENSE_V20.CREATE_LICENSE (
13:32:30 1718  	     out_license_id		 => out_license_id,
13:32:30 1719  	     in_status_id		 => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
13:32:30 1720  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V20.TRUE,
13:32:30 1721  	     in_start_date		 => var_date,
13:32:30 1722  	     in_offer_id		 => var_first_offer_id,
13:32:30 1723  	     in_subscription_id 	 => var_subscription_id,
13:32:30 1724  	     in_invoice_id		 => var_invoice_id,
13:32:30 1725  	     in_created_by		 => in_created_by,
13:32:30 1726  	     in_end_date		 => NULL, -- Will be calculated automatically
13:32:30 1727  	     in_is_extension		 => GLOBAL_CONSTANTS_V20.FALSE,
13:32:30 1728  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
13:32:30 1729  	     in_current_offer_recurr_num => 1
13:32:30 1730  	   );
13:32:30 1731  
13:32:30 1732  	   EXCEPTION
13:32:30 1733  	     WHEN OTHERS THEN
13:32:30 1734  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1735  	       RAISE CAN_NOT_CREATE_LICENSE;
13:32:30 1736  	 END;
13:32:30 1737  
13:32:30 1738  	 -- Update original gift certificate
13:32:30 1739  	 BEGIN
13:32:30 1740  	   PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE(
13:32:30 1741  	     in_gift_certificate_id	   => var_gift_certificate_id,
13:32:30 1742  	     in_updated_by		   => in_created_by,
13:32:30 1743  	     in_redeemer_group_id	   => in_group_id,
13:32:30 1744  	     in_finalized_invoice_id	   => var_invoice_id,
13:32:30 1745  	     in_redemption_date 	   => var_date,
13:32:30 1746  	     in_redeemer_address_id	   => in_redeemer_address_id,
13:32:30 1747  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED
13:32:30 1748  	   );
13:32:30 1749  	   EXCEPTION
13:32:30 1750  	     WHEN OTHERS THEN
13:32:30 1751  	       EXCEPTION_MESSAGE := SQLERRM;
13:32:30 1752  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
13:32:30 1753  	 END;
13:32:30 1754  
13:32:30 1755  EXCEPTION
13:32:30 1756  WHEN LIMIT_REACHED THEN
13:32:30 1757  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
13:32:30 1758  	   SPROC_NAME, 'Limit reached for given offer chain');
13:32:30 1759  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
13:32:30 1760  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
13:32:30 1761  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
13:32:30 1762  WHEN GIFT_CERTIFICATE_REDEEMED THEN
13:32:30 1763  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1764  	   SPROC_NAME, 'Gift certificate already redeemed');
13:32:30 1765  WHEN GIFT_CERTIFICATE_EXPIRED THEN
13:32:30 1766  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 1767  	   SPROC_NAME, 'Gift certificate expired');
13:32:30 1768  WHEN GIFT_CERT_IS_FINALIZED THEN
13:32:30 1769  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1770  	   SPROC_NAME, 'Gift certificate is finalized');
13:32:30 1771  WHEN GIFT_CERT_IS_REFUNDED THEN
13:32:30 1772  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1773  	   SPROC_NAME, 'Gift certificate has been refunded');
13:32:30 1774  WHEN BAD_GROUP_ID THEN
13:32:30 1775  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1776  	   SPROC_NAME, 'No such account with given group id');
13:32:30 1777  WHEN OC_TO_REDEEM_NOT_FOUND THEN
13:32:30 1778  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1779  	   SPROC_NAME, 'Offer chain to redeem not found');
13:32:30 1780  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
13:32:30 1781  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1782  	   SPROC_NAME, 'No such gift certificate code');
13:32:30 1783  WHEN CAN_NOT_CREATE_LICENSE THEN
13:32:30 1784  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1785  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
13:32:30 1786  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
13:32:30 1787  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:30 1788  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
13:32:30 1789  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
13:32:30 1790  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1791  	   SPROC_NAME, 'Purchase invoice is not closed');
13:32:30 1792  WHEN PURCHASE_INVOICES_NOT_PAID THEN
13:32:30 1793  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:30 1794  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
13:32:30 1795  WHEN OTHERS THEN
13:32:30 1796  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1797  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1798  END;
13:32:30 1799  
13:32:30 1800  /******************************************************************************/
13:32:30 1801  
13:32:30 1802  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
13:32:30 1803  /*
13:32:30 1804  Throws exceptions:
13:32:30 1805  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1806  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1807  */
13:32:30 1808  	 in_code	IN VARCHAR,
13:32:30 1809  	 out_result_set OUT SYS_REFCURSOR
13:32:30 1810  ) AS
13:32:30 1811  -- VARIABLES
13:32:30 1812  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
13:32:30 1813  temp_gift_certificate_id NUMBER;
13:32:30 1814  -- EXCEPTIONS
13:32:30 1815  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
13:32:30 1816  BEGIN
13:32:30 1817  
13:32:30 1818  	 BEGIN
13:32:30 1819  	   SELECT
13:32:30 1820  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
13:32:30 1821  	   FROM
13:32:30 1822  	     GIFT_CERTIFICATE
13:32:30 1823  	   WHERE
13:32:30 1824  	     GIFT_CERTIFICATE.CODE = in_code;
13:32:30 1825  	   EXCEPTION
13:32:30 1826  	     WHEN NO_DATA_FOUND THEN
13:32:30 1827  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
13:32:30 1828  	 END;
13:32:30 1829  
13:32:30 1830  	 -- Select all gift certificates with given code
13:32:30 1831  	 OPEN out_result_set FOR
13:32:30 1832  	 SELECT
13:32:30 1833  	   gc.EXPIRATION_DATE,
13:32:30 1834  	   ch.name,
13:32:30 1835  	   ch.id,
13:32:30 1836  	   gc.sender_email,
13:32:30 1837  	   gc.sender_name,
13:32:30 1838  	   gc.recipient_email,
13:32:30 1839  	   gc.recipient_name,
13:32:30 1840  	   gc.purchase_date,
13:32:30 1841  	   gc.redemption_date,
13:32:30 1842  	   gc.purchaser_group_id,
13:32:30 1843  	   gc.redeemer_group_id,
13:32:30 1844  	   gc.gift_message,
13:32:30 1845  	   ocmd.value redemption_offer_chain_ids,
13:32:30 1846  	   s.offer_chain_id redeemed_offer_chain_id,
13:32:30 1847  	   gc.recipient_notify_date,
13:32:30 1848  	   gc.gift_certificate_status_id,
13:32:30 1849  	   gc.purchase_invoice_id,
13:32:30 1850  	   gc.finalized_invoice_id
13:32:30 1851  	 FROM
13:32:30 1852  	   GIFT_CERTIFICATE gc
13:32:30 1853  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
13:32:30 1854  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
13:32:30 1855  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
13:32:30 1856  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
13:32:30 1857  	 WHERE
13:32:30 1858  	   gc.code = in_code;
13:32:30 1859  
13:32:30 1860  EXCEPTION
13:32:30 1861  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
13:32:30 1862  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1863  	   SPROC_NAME, 'No such gift certificate');
13:32:30 1864  WHEN OTHERS THEN
13:32:30 1865  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1866  	   SPROC_NAME, 'Unknown Error', SQLERRM);
13:32:30 1867  END;
13:32:30 1868  
13:32:30 1869  /******************************************************************************/
13:32:30 1870  
13:32:30 1871  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
13:32:30 1872  /*
13:32:30 1873  Throws exceptions:
13:32:30 1874  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1875  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:30 1876  */
13:32:30 1877  	 in_gift_certificate_id IN NUMBER,
13:32:30 1878  	 out_result_set 	OUT SYS_REFCURSOR
13:32:30 1879  ) AS
13:32:30 1880  -- VARIABLES
13:32:30 1881  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
13:32:30 1882  temp_gift_certificate_id NUMBER;
13:32:30 1883  -- EXCEPTIONS
13:32:30 1884  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
13:32:30 1885  BEGIN
13:32:30 1886  
13:32:30 1887  	 BEGIN
13:32:30 1888  	   SELECT
13:32:30 1889  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
13:32:30 1890  	   FROM
13:32:30 1891  	     GIFT_CERTIFICATE
13:32:30 1892  	   WHERE
13:32:30 1893  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
13:32:30 1894  	   EXCEPTION
13:32:30 1895  	     WHEN NO_DATA_FOUND THEN
13:32:30 1896  	       RAISE BAD_GIFT_CERTIFICATE_ID;
13:32:30 1897  	 END;
13:32:30 1898  
13:32:30 1899  	 -- Select all gift certificates with given code
13:32:30 1900  	 OPEN out_result_set FOR
13:32:30 1901  	 SELECT
13:32:30 1902  	   gc.EXPIRATION_DATE,
13:32:30 1903  	   ch.name,
13:32:30 1904  	   ch.id,
13:32:30 1905  	   gc.sender_email,
13:32:30 1906  	   gc.sender_name,
13:32:30 1907  	   gc.recipient_email,
13:32:30 1908  	   gc.recipient_name,
13:32:30 1909  	   gc.purchase_date,
13:32:30 1910  	   gc.redemption_date,
13:32:30 1911  	   gc.purchaser_group_id,
13:32:30 1912  	   gc.redeemer_group_id,
13:32:30 1913  	   gc.code,
13:32:30 1914  	   gc.gift_message,
13:32:30 1915  	   gc.recipient_notify_date
13:32:30 1916  	 FROM
13:32:30 1917  	   GIFT_CERTIFICATE gc
13:32:30 1918  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
13:32:30 1919  	 WHERE
13:32:30 1920  	   gc.id = in_gift_certificate_id;
13:32:30 1921  
13:32:30 1922  EXCEPTION
13:32:30 1923  WHEN BAD_GIFT_CERTIFICATE_ID THEN
13:32:30 1924  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1925  	   SPROC_NAME, 'No such gift certificate');
13:32:30 1926  WHEN OTHERS THEN
13:32:30 1927  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1928  	   SPROC_NAME, 'Unknown Error', SQLERRM);
13:32:30 1929  END GET_GIFT_CERTIFICATE_BY_ID;
13:32:30 1930  
13:32:30 1931  /******************************************************************************/
13:32:30 1932  
13:32:30 1933  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
13:32:30 1934  	 in_group_id		IN  NUMBER,
13:32:30 1935  	 out_instrument_type_id OUT NUMBER,
13:32:30 1936  	 out_instrument_id	OUT NUMBER
13:32:30 1937  ) AS
13:32:30 1938  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
13:32:30 1939  BEGIN
13:32:30 1940  
13:32:30 1941  	 SELECT
13:32:30 1942  	   ACCOUNT.INSTRUMENT_TYPE_ID,
13:32:30 1943  	   ACCOUNT.INSTRUMENT_ID
13:32:30 1944  	   into
13:32:30 1945  	   out_instrument_type_id,
13:32:30 1946  	   out_instrument_id
13:32:30 1947  	 FROM
13:32:30 1948  	   ACCOUNT
13:32:30 1949  	 WHERE
13:32:30 1950  	   ACCOUNT.GROUP_ID = in_group_id;
13:32:30 1951  
13:32:30 1952  EXCEPTION
13:32:30 1953  WHEN NO_DATA_FOUND THEN
13:32:30 1954  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 1955  	   SPROC_NAME, 'Bad group id');
13:32:30 1956  WHEN OTHERS THEN
13:32:30 1957  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 1958  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 1959  END GET_DEF_FINANCIAL_INSTRUMENT;
13:32:30 1960  
13:32:30 1961  /******************************************************************************/
13:32:30 1962  
13:32:30 1963  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
13:32:30 1964  	 in_group_id	       IN NUMBER,
13:32:30 1965  	 in_instrument_type_id IN NUMBER,
13:32:30 1966  	 in_instrument_id      IN NUMBER,
13:32:30 1967  	 in_updated_by	       IN VARCHAR2
13:32:30 1968  ) AS
13:32:30 1969  -- VARIABLES
13:32:30 1970  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
13:32:30 1971  var_account_id	      NUMBER;
13:32:30 1972  -- EXCEPTIONS
13:32:30 1973  BAD_GROUP_ID	      EXCEPTION;
13:32:30 1974  BAD_CREDIT_CARD	      EXCEPTION;
13:32:30 1975  BAD_PAYPAL	      EXCEPTION;
13:32:30 1976  BAD_INSTRUMENT_TYPE    EXCEPTION;
13:32:30 1977  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 1978  BEGIN
13:32:30 1979  
13:32:30 1980  	 -- get account id
13:32:30 1981  	 BEGIN
13:32:30 1982  	   SELECT
13:32:30 1983  	     ACCOUNT.ID into var_account_id
13:32:30 1984  	   FROM
13:32:30 1985  	     ACCOUNT
13:32:30 1986  	   WHERE
13:32:30 1987  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 1988  	   EXCEPTION
13:32:30 1989  	     WHEN NO_DATA_FOUND THEN
13:32:30 1990  	       RAISE BAD_GROUP_ID;
13:32:30 1991  	 END;
13:32:30 1992  
13:32:30 1993  	 -- Chech that given instrument exists
13:32:30 1994  	 IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30 1995  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 1996  	     RAISE BAD_CREDIT_CARD;
13:32:30 1997  	   END IF;
13:32:30 1998  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30 1999  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 2000  	     RAISE BAD_PAYPAL;
13:32:30 2001  	   END IF;
13:32:30 2002  	 ELSE
13:32:30 2003  	   RAISE BAD_INSTRUMENT_TYPE;
13:32:30 2004  	 END IF;
13:32:30 2005  
13:32:30 2006  	 -- update account information
13:32:30 2007  	 PROCS_ACCOUNT_CRU_V20.UPDATE_ACCOUNT(
13:32:30 2008  	   in_account_id	 => var_account_id,
13:32:30 2009  	   in_updated_by	 => in_updated_by,
13:32:30 2010  	   in_instrument_type_id => in_instrument_type_id,
13:32:30 2011  	   in_instrument_id	 => in_instrument_id
13:32:30 2012  	 );
13:32:30 2013  
13:32:30 2014  EXCEPTION
13:32:30 2015  WHEN BAD_GROUP_ID THEN
13:32:30 2016  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2017  	   SPROC_NAME, 'No such account');
13:32:30 2018  WHEN BAD_CREDIT_CARD THEN
13:32:30 2019  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2020  	   SPROC_NAME, 'Could not find credit card with given ID');
13:32:30 2021  WHEN BAD_PAYPAL THEN
13:32:30 2022  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2023  	   SPROC_NAME, 'Could not find paypal with given ID');
13:32:30 2024  WHEN BAD_INSTRUMENT_TYPE THEN
13:32:30 2025  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2026  	   SPROC_NAME, 'Bad instrument type id');
13:32:30 2027  WHEN OTHERS THEN
13:32:30 2028  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2029  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2030  END SET_DEF_FINANCIAL_INSTRUMENT;
13:32:30 2031  
13:32:30 2032  /******************************************************************************/
13:32:30 2033  
13:32:30 2034  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
13:32:30 2035  	 in_group_id IN NUMBER
13:32:30 2036  ) AS
13:32:30 2037  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
13:32:30 2038  -- VARIABLES
13:32:30 2039  var_account_id NUMBER;
13:32:30 2040  -- EXCEPTIONS
13:32:30 2041  BAD_GROUP_ID	 EXCEPTION;
13:32:30 2042  EXCEPTION_MESSAGE VARCHAR2(1024);
13:32:30 2043  BEGIN
13:32:30 2044  
13:32:30 2045  	 BEGIN
13:32:30 2046  	   SELECT
13:32:30 2047  	     ACCOUNT.ID into var_account_id
13:32:30 2048  	   FROM
13:32:30 2049  	     ACCOUNT
13:32:30 2050  	   WHERE
13:32:30 2051  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 2052  	   EXCEPTION
13:32:30 2053  	     WHEN NO_DATA_FOUND THEN
13:32:30 2054  	       RAISE BAD_GROUP_ID;
13:32:30 2055  	 END;
13:32:30 2056  
13:32:30 2057  	 PROCS_ACCOUNT_CRU_V20.UPDATE_DEF_FIN_INSTRUMENT(
13:32:30 2058  	   in_account_id => var_account_id,
13:32:30 2059  	   in_instrument_type_id => NULL,
13:32:30 2060  	   in_instrument_id => NULL,
13:32:30 2061  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
13:32:30 2062  	 );
13:32:30 2063  
13:32:30 2064  EXCEPTION
13:32:30 2065  WHEN BAD_GROUP_ID THEN
13:32:30 2066  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2067  	   SPROC_NAME, 'No such group id');
13:32:30 2068  WHEN OTHERS THEN
13:32:30 2069  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2070  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2071  END DEL_DEF_FINANCIAL_INSTRUMENT;
13:32:30 2072  
13:32:30 2073  /******************************************************************************/
13:32:30 2074  
13:32:30 2075  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:30 2076  	 in_credit_card_id IN  NUMBER,
13:32:30 2077  	 out_result_set    OUT SYS_REFCURSOR
13:32:30 2078  ) AS
13:32:30 2079  -- VARIABLES
13:32:30 2080  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
13:32:30 2081  temp_cc_count NUMBER;
13:32:30 2082  
13:32:30 2083  -- EXCEPTIONS
13:32:30 2084  BAD_CREDIT_CARD_ID EXCEPTION;
13:32:30 2085  BEGIN
13:32:30 2086  
13:32:30 2087  	 -- Check that credit card exists
13:32:30 2088  	 SELECT
13:32:30 2089  	   COUNT(*) into temp_cc_count
13:32:30 2090  	 FROM
13:32:30 2091  	   CREDIT_CARD
13:32:30 2092  	 WHERE
13:32:30 2093  	   CREDIT_CARD.ID = in_credit_card_id;
13:32:30 2094  	 IF temp_cc_count = 0 THEN
13:32:30 2095  	   RAISE BAD_CREDIT_CARD_ID;
13:32:30 2096  	 END IF;
13:32:30 2097  
13:32:30 2098  	 -- Get data
13:32:30 2099  	 OPEN out_result_set FOR
13:32:30 2100  	 SELECT
13:32:30 2101  	   CREDIT_CARD.ID,
13:32:30 2102  	   CREDIT_CARD.ACCOUNT_ID,
13:32:30 2103  	   CREDIT_CARD.INSTRUMENT_NAME,
13:32:30 2104  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
13:32:30 2105  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
13:32:30 2106  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
13:32:30 2107  	   CREDIT_CARD.STATE,
13:32:30 2108  	   CREDIT_CARD.CITY,
13:32:30 2109  	   CREDIT_CARD.POSTAL_CODE,
13:32:30 2110  	   CREDIT_CARD.COUNTRY,
13:32:30 2111  	   CREDIT_CARD.LAST_FOUR_CC,
13:32:30 2112  	   CREDIT_CARD.EXPIRATION_DATE,
13:32:30 2113  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
13:32:30 2114  	   CREDIT_CARD.SECRET_TOKEN,
13:32:30 2115  	   CREDIT_CARD.CREATE_DATE,
13:32:30 2116  	   CREDIT_CARD.CREATED_BY,
13:32:30 2117  	   CREDIT_CARD.UPDATE_DATE,
13:32:30 2118  	   CREDIT_CARD.UPDATED_BY,
13:32:30 2119  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
13:32:30 2120  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
13:32:30 2121  	   CREDIT_CARD.PRIVATE_LAST_NAME,
13:32:30 2122  	       CREDIT_CARD.CHASE_PROFILE_ID
13:32:30 2123  	 FROM
13:32:30 2124  	   CREDIT_CARD
13:32:30 2125  	 WHERE
13:32:30 2126  	   CREDIT_CARD.ID = in_credit_card_id;
13:32:30 2127  
13:32:30 2128  EXCEPTION
13:32:30 2129  WHEN BAD_CREDIT_CARD_ID THEN
13:32:30 2130  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2131  	   SPROC_NAME, 'No such credit card');
13:32:30 2132  WHEN OTHERS THEN
13:32:30 2133  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2134  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2135  END GET_CREDIT_CARD_BY_ID;
13:32:30 2136  
13:32:30 2137  /******************************************************************************/
13:32:30 2138  
13:32:30 2139  PROCEDURE GET_PAYPAL_BY_ID (
13:32:30 2140  	 in_paypal_id	IN  NUMBER,
13:32:30 2141  	 out_result_set OUT SYS_REFCURSOR
13:32:30 2142  ) AS
13:32:30 2143  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
13:32:30 2144  -- VARIABLES
13:32:30 2145  temp_pp_count NUMBER;
13:32:30 2146  -- EXCEPTIONS
13:32:30 2147  BAD_PAYPAL_ID EXCEPTION;
13:32:30 2148  BEGIN
13:32:30 2149  
13:32:30 2150  	 -- Check that credit card exists
13:32:30 2151  	 SELECT
13:32:30 2152  	   COUNT(*) into temp_pp_count
13:32:30 2153  	 FROM
13:32:30 2154  	   PAYPAL
13:32:30 2155  	 WHERE
13:32:30 2156  	   PAYPAL.ID = in_paypal_id;
13:32:30 2157  	 IF temp_pp_count = 0 THEN
13:32:30 2158  	   RAISE BAD_PAYPAL_ID;
13:32:30 2159  	 END IF;
13:32:30 2160  
13:32:30 2161  	 OPEN out_result_set FOR
13:32:30 2162  	 SELECT
13:32:30 2163  	   ID,
13:32:30 2164  	   ACCOUNT_ID,
13:32:30 2165  	   INSTRUMENT_NAME,
13:32:30 2166  	   PRIVATE_EMAIL_ADDRESS,
13:32:30 2167  	   CREATE_DATE,
13:32:30 2168  	   CREATED_BY,
13:32:30 2169  	   UPDATE_DATE,
13:32:30 2170  	   UPDATED_BY,
13:32:30 2171  	   PAYPAL_STATUS_ID,
13:32:30 2172  	   PRIVATE_STREET_ADDRESS,
13:32:30 2173  	   PRIVATE_STREET_ADDRESS2,
13:32:30 2174  	   STATE,
13:32:30 2175  	   CITY,
13:32:30 2176  	   POSTAL_CODE,
13:32:30 2177  	   COUNTRY,
13:32:30 2178  	   EXPIRATION_DATE,
13:32:30 2179  	   SECRET_TOKEN
13:32:30 2180  	 FROM
13:32:30 2181  	   PAYPAL
13:32:30 2182  	 WHERE
13:32:30 2183  	   ID = in_paypal_id;
13:32:30 2184  
13:32:30 2185  EXCEPTION
13:32:30 2186  WHEN BAD_PAYPAL_ID THEN
13:32:30 2187  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2188  	   SPROC_NAME, 'No such paypal');
13:32:30 2189  WHEN OTHERS THEN
13:32:30 2190  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2191  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2192  END GET_PAYPAL_BY_ID;
13:32:30 2193  
13:32:30 2194  /******************************************************************************/
13:32:30 2195  
13:32:30 2196  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
13:32:30 2197  /*
13:32:30 2198  	 Returns GLOBAL_CONSTANTS_V20.TRUE if system can disable credit card
13:32:30 2199  	 GLOBAL_CONSTANTS_V20.FALSE else
13:32:30 2200  */
13:32:30 2201  	 in_credit_card_id NUMBER
13:32:30 2202  ) RETURN NUMBER AS
13:32:30 2203  BEGIN
13:32:30 2204  	 -- STUB
13:32:30 2205  	 RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2206  END F_CAN_DISABLE_CREDIT_CARD;
13:32:30 2207  
13:32:30 2208  /******************************************************************************/
13:32:30 2209  
13:32:30 2210  PROCEDURE GET_PURCHASED_GCERTIFICATES (
13:32:30 2211  	 in_group_id	IN NUMBER,
13:32:30 2212  	 out_result_set OUT SYS_REFCURSOR
13:32:30 2213  ) AS
13:32:30 2214  -- VARIABLES
13:32:30 2215  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
13:32:30 2216  var_account_id NUMBER;
13:32:30 2217  -- EXCEPTIONS
13:32:30 2218  BAD_GROUP_ID EXCEPTION;
13:32:30 2219  BEGIN
13:32:30 2220  
13:32:30 2221  	 BEGIN
13:32:30 2222  	   SELECT
13:32:30 2223  	     ACCOUNT.ID into var_account_id
13:32:30 2224  	   FROM
13:32:30 2225  	     ACCOUNT
13:32:30 2226  	   WHERE
13:32:30 2227  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:30 2228  	   EXCEPTION
13:32:30 2229  	     WHEN NO_DATA_FOUND THEN
13:32:30 2230  	       RAISE BAD_GROUP_ID;
13:32:30 2231  	 END;
13:32:30 2232  
13:32:30 2233  	 OPEN out_result_set FOR
13:32:30 2234  	 SELECT
13:32:30 2235  	   GIFT_CERTIFICATE.CODE,
13:32:30 2236  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
13:32:30 2237  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
13:32:30 2238  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
13:32:30 2239  	   GIFT_CERTIFICATE.SENDER_EMAIL,
13:32:30 2240  	   GIFT_CERTIFICATE.SENDER_NAME,
13:32:30 2241  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
13:32:30 2242  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
13:32:30 2243  	   GIFT_CERTIFICATE.PURCHASE_DATE,
13:32:30 2244  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
13:32:30 2245  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
13:32:30 2246  	 FROM
13:32:30 2247  	   GIFT_CERTIFICATE
13:32:30 2248  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:30 2249  	 WHERE
13:32:30 2250  	   ROWNUM <= 100 AND
13:32:30 2251  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
13:32:30 2252  
13:32:30 2253  EXCEPTION
13:32:30 2254  WHEN BAD_GROUP_ID THEN
13:32:30 2255  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2256  	   SPROC_NAME, 'No such group id');
13:32:30 2257  WHEN OTHERS THEN
13:32:30 2258  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2259  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2260  END GET_PURCHASED_GCERTIFICATES;
13:32:30 2261  
13:32:30 2262  /******************************************************************************/
13:32:30 2263  
13:32:30 2264  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
13:32:30 2265  	 in_gift_certificate_id IN NUMBER,
13:32:30 2266  	 in_charge_id		IN NUMBER,
13:32:30 2267  	 out_result		OUT NUMBER
13:32:30 2268  ) AS
13:32:30 2269  -- VARIABLES
13:32:30 2270  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
13:32:30 2271  var_invoice_id	    NUMBER;
13:32:30 2272  var_offer_chain_id   NUMBER;
13:32:30 2273  var_offer_chain_s_id NUMBER;
13:32:30 2274  -- EXCEPTIONS
13:32:30 2275  BAD_CHARGE_ID		 EXCEPTION;
13:32:30 2276  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
13:32:30 2277  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
13:32:30 2278  BEGIN
13:32:30 2279  
13:32:30 2280  	 BEGIN
13:32:30 2281  	   SELECT
13:32:30 2282  	     CHARGE.INVOICE_ID into var_invoice_id
13:32:30 2283  	   FROM
13:32:30 2284  	     CHARGE
13:32:30 2285  	   WHERE
13:32:30 2286  	     CHARGE.ID = in_charge_id;
13:32:30 2287  	   EXCEPTION
13:32:30 2288  	     WHEN NO_DATA_FOUND THEN
13:32:30 2289  	       RAISE BAD_CHARGE_ID;
13:32:30 2290  	 END;
13:32:30 2291  
13:32:30 2292  	 BEGIN
13:32:30 2293  	   SELECT
13:32:30 2294  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
13:32:30 2295  	   FROM
13:32:30 2296  	     GIFT_CERTIFICATE
13:32:30 2297  	   WHERE
13:32:30 2298  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
13:32:30 2299  	   EXCEPTION
13:32:30 2300  	     WHEN NO_DATA_FOUND THEN
13:32:30 2301  	       RAISE BAD_GIFT_CERTIFICATE_ID;
13:32:30 2302  	 END;
13:32:30 2303  
13:32:30 2304  	 BEGIN
13:32:30 2305  	   SELECT
13:32:30 2306  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
13:32:30 2307  	   FROM
13:32:30 2308  	     SUBSCRIPTION
13:32:30 2309  	   WHERE
13:32:30 2310  	     SUBSCRIPTION.ID IN (
13:32:30 2311  	       SELECT DISTINCT
13:32:30 2312  		 LICENSE.SUBSCRIPTION_ID
13:32:30 2313  	       FROM
13:32:30 2314  		 LICENSE
13:32:30 2315  	       WHERE
13:32:30 2316  		 LICENSE.INVOICE_ID = var_invoice_id
13:32:30 2317  	     );
13:32:30 2318  	   EXCEPTION
13:32:30 2319  	     WHEN NO_DATA_FOUND THEN
13:32:30 2320  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
13:32:30 2321  	 END;
13:32:30 2322  
13:32:30 2323  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
13:32:30 2324  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2325  	 ELSE
13:32:30 2326  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2327  	 END IF;
13:32:30 2328  
13:32:30 2329  EXCEPTION
13:32:30 2330  WHEN BAD_CHARGE_ID THEN
13:32:30 2331  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2332  	   SPROC_NAME, 'No such charge');
13:32:30 2333  WHEN BAD_GIFT_CERTIFICATE_ID THEN
13:32:30 2334  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2335  	   SPROC_NAME, 'No such gift certificate');
13:32:30 2336  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
13:32:30 2337  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2338  	   SPROC_NAME, 'Could not find subscription for given charge');
13:32:30 2339  WHEN OTHERS THEN
13:32:30 2340  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2341  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2342  END IS_GCERT_FOR_PROPER_OFFER;
13:32:30 2343  
13:32:30 2344  /******************************************************************************/
13:32:30 2345  
13:32:30 2346  FUNCTION IS_CREDIT_CARD_EXISTS (
13:32:30 2347  /*
13:32:30 2348  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
13:32:30 2349  GLOBAL_CONSTANTS_V20.FALSE - else
13:32:30 2350  */
13:32:30 2351  	 in_credit_card_id IN NUMBER
13:32:30 2352  ) RETURN NUMBER AS
13:32:30 2353  -- VARIABLES
13:32:30 2354  var_cc_count NUMBER;
13:32:30 2355  BEGIN
13:32:30 2356  	 SELECT
13:32:30 2357  	   COUNT(*) into var_cc_count
13:32:30 2358  	 FROM
13:32:30 2359  	   CREDIT_CARD
13:32:30 2360  	 WHERE
13:32:30 2361  	   CREDIT_CARD.ID = in_credit_card_id;
13:32:30 2362  
13:32:30 2363  	 IF var_cc_count = 0 THEN
13:32:30 2364  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2365  	 ELSE
13:32:30 2366  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2367  	 END IF;
13:32:30 2368  
13:32:30 2369  END IS_CREDIT_CARD_EXISTS;
13:32:30 2370  
13:32:30 2371  /******************************************************************************/
13:32:30 2372  
13:32:30 2373  FUNCTION IS_PAYPAL_EXISTS (
13:32:30 2374  /*
13:32:30 2375  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
13:32:30 2376  GLOBAL_CONSTANTS_V20.FALSE - else
13:32:30 2377  */
13:32:30 2378  	 in_paypal_id IN NUMBER
13:32:30 2379  ) RETURN NUMBER AS
13:32:30 2380  -- VARIABLES
13:32:30 2381  var_pp_count NUMBER;
13:32:30 2382  BEGIN
13:32:30 2383  	 SELECT
13:32:30 2384  	   COUNT(*) into var_pp_count
13:32:30 2385  	 FROM
13:32:30 2386  	   PAYPAL
13:32:30 2387  	 WHERE
13:32:30 2388  	   PAYPAL.ID = in_paypal_id;
13:32:30 2389  
13:32:30 2390  	 IF var_pp_count = 0 THEN
13:32:30 2391  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2392  	 ELSE
13:32:30 2393  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2394  	 END IF;
13:32:30 2395  
13:32:30 2396  END IS_PAYPAL_EXISTS;
13:32:30 2397  
13:32:30 2398  /******************************************************************************/
13:32:30 2399  
13:32:30 2400  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
13:32:30 2401  /*
13:32:30 2402  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
13:32:30 2403  GLOBAL_CONSTANTS_V20.FALSE - else
13:32:30 2404  */
13:32:30 2405  	 in_gift_certificate_id IN NUMBER
13:32:30 2406  ) RETURN NUMBER AS
13:32:30 2407  -- VARIABLES
13:32:30 2408  var_gc_count NUMBER;
13:32:30 2409  BEGIN
13:32:30 2410  	 SELECT
13:32:30 2411  	   COUNT(*) into var_gc_count
13:32:30 2412  	 FROM
13:32:30 2413  	   GIFT_CERTIFICATE
13:32:30 2414  	 WHERE
13:32:30 2415  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
13:32:30 2416  
13:32:30 2417  	 IF var_gc_count = 0 THEN
13:32:30 2418  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
13:32:30 2419  	 ELSE
13:32:30 2420  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
13:32:30 2421  	 END IF;
13:32:30 2422  
13:32:30 2423  END IS_GIFT_CERTIFICATE_EXISTS;
13:32:30 2424  
13:32:30 2425  /******************************************************************************/
13:32:30 2426  
13:32:30 2427  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
13:32:30 2428  	 in_credit_card_id IN NUMBER,
13:32:30 2429  	 out_group_id	   OUT NUMBER
13:32:30 2430  ) AS
13:32:30 2431  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
13:32:30 2432  BEGIN
13:32:30 2433  	 SELECT
13:32:30 2434  	   ACCOUNT.GROUP_ID into out_group_id
13:32:30 2435  	 FROM
13:32:30 2436  	   CREDIT_CARD
13:32:30 2437  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
13:32:30 2438  	 WHERE
13:32:30 2439  	   CREDIT_CARD.ID = in_credit_card_id;
13:32:30 2440  EXCEPTION
13:32:30 2441  WHEN NO_DATA_FOUND THEN
13:32:30 2442  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2443  	   SPROC_NAME, 'No such credit card');
13:32:30 2444  WHEN OTHERS THEN
13:32:30 2445  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2446  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2447  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
13:32:30 2448  
13:32:30 2449  /******************************************************************************/
13:32:30 2450  
13:32:30 2451  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
13:32:30 2452  	 in_paypal_id IN NUMBER,
13:32:30 2453  	 out_group_id OUT NUMBER
13:32:30 2454  ) AS
13:32:30 2455  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
13:32:30 2456  BEGIN
13:32:30 2457  	 SELECT
13:32:30 2458  	   ACCOUNT.GROUP_ID into out_group_id
13:32:30 2459  	 FROM
13:32:30 2460  	   PAYPAL
13:32:30 2461  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
13:32:30 2462  	 WHERE
13:32:30 2463  	   PAYPAL.ID = in_paypal_id;
13:32:30 2464  EXCEPTION
13:32:30 2465  WHEN NO_DATA_FOUND THEN
13:32:30 2466  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2467  	   SPROC_NAME, 'No such paypal');
13:32:30 2468  WHEN OTHERS THEN
13:32:30 2469  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2470  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2471  END GET_GROUP_ID_BY_PAYPAL_ID;
13:32:30 2472  
13:32:30 2473  /******************************************************************************/
13:32:30 2474  
13:32:30 2475  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
13:32:30 2476  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
13:32:30 2477  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
13:32:30 2478  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
13:32:30 2479  ) AS
13:32:30 2480  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
13:32:30 2481  -- EXCEPTIONS
13:32:30 2482  BAD_CREDIT_CARD_ID     EXCEPTION;
13:32:30 2483  BAD_STATUS_ID	      EXCEPTION;
13:32:30 2484  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 2485  BEGIN
13:32:30 2486  
13:32:30 2487  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE
13:32:30 2488  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_INVALID
13:32:30 2489  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
13:32:30 2490  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_EXPIRED THEN
13:32:30 2491  	   RAISE BAD_STATUS_ID;
13:32:30 2492  	 END IF;
13:32:30 2493  
13:32:30 2494  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_CREDIT_CARD(
13:32:30 2495  	   in_credit_card_id	    => in_credit_card_id,
13:32:30 2496  	   in_updated_by	    => in_updated_by,
13:32:30 2497  	   in_credit_card_status_id => in_credit_card_status_id
13:32:30 2498  	 );
13:32:30 2499  
13:32:30 2500  	 IF SQL%ROWCOUNT = 0 THEN
13:32:30 2501  	   RAISE BAD_CREDIT_CARD_ID;
13:32:30 2502  	 END IF;
13:32:30 2503  
13:32:30 2504  EXCEPTION
13:32:30 2505  WHEN BAD_CREDIT_CARD_ID THEN
13:32:30 2506  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2507  	   SPROC_NAME, 'No such credit card');
13:32:30 2508  WHEN BAD_STATUS_ID THEN
13:32:30 2509  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2510  	   SPROC_NAME, 'Bad credit card status id');
13:32:30 2511  WHEN OTHERS THEN
13:32:30 2512  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2513  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2514  END UPDATE_CREDIT_CARD_STATUS;
13:32:30 2515  
13:32:30 2516  /******************************************************************************/
13:32:30 2517  
13:32:30 2518  PROCEDURE UPDATE_PAYPAL_STATUS (
13:32:30 2519  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
13:32:30 2520  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
13:32:30 2521  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
13:32:30 2522  ) AS
13:32:30 2523  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
13:32:30 2524  -- EXCEPTIONS
13:32:30 2525  BAD_PAYPAL_ID	      EXCEPTION;
13:32:30 2526  BAD_STATUS_ID	      EXCEPTION;
13:32:30 2527  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:30 2528  BEGIN
13:32:30 2529  
13:32:30 2530  	 IF in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_ACTIVE
13:32:30 2531  	   AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
13:32:30 2532  	   AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_FROZEN THEN
13:32:30 2533  	   RAISE BAD_STATUS_ID;
13:32:30 2534  	 END IF;
13:32:30 2535  
13:32:30 2536  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_PAYPAL(
13:32:30 2537  	   in_paypal_id        => in_paypal_id,
13:32:30 2538  	   in_paypal_status_id => in_paypal_status_id,
13:32:30 2539  	   in_updated_by       => in_updated_by
13:32:30 2540  	 );
13:32:30 2541  
13:32:30 2542  	 IF SQL%ROWCOUNT = 0 THEN
13:32:30 2543  	   RAISE BAD_PAYPAL_ID;
13:32:30 2544  	 END IF;
13:32:30 2545  
13:32:30 2546  EXCEPTION
13:32:30 2547  WHEN BAD_PAYPAL_ID THEN
13:32:30 2548  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2549  	   SPROC_NAME, 'No such paypal');
13:32:30 2550  WHEN BAD_STATUS_ID THEN
13:32:30 2551  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2552  	   SPROC_NAME, 'Bad paypal status id');
13:32:30 2553  WHEN OTHERS THEN
13:32:30 2554  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2555  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2556  END UPDATE_PAYPAL_STATUS;
13:32:30 2557  
13:32:30 2558  /******************************************************************************/
13:32:30 2559  
13:32:30 2560  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
13:32:30 2561  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
13:32:30 2562  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
13:32:30 2563  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
13:32:30 2564  ) AS
13:32:30 2565  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
13:32:30 2566  -- EXCEPTIONS
13:32:30 2567  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
13:32:30 2568  BAD_STATUS_ID	       EXCEPTION;
13:32:30 2569  EXCEPTION_MESSAGE       VARCHAR2(1024);
13:32:30 2570  BEGIN
13:32:30 2571  
13:32:30 2572  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
13:32:30 2573  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED THEN
13:32:30 2574  	   RAISE BAD_STATUS_ID;
13:32:30 2575  	 END IF;
13:32:30 2576  
13:32:30 2577  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE(
13:32:30 2578  	   in_gift_certificate_id	 => in_gift_certificate_id,
13:32:30 2579  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
13:32:30 2580  	   in_updated_by		 => in_updated_by
13:32:30 2581  	 );
13:32:30 2582  
13:32:30 2583  	 IF SQL%ROWCOUNT = 0 THEN
13:32:30 2584  	   RAISE BAD_GIFT_CERTIFICATE_ID;
13:32:30 2585  	 END IF;
13:32:30 2586  
13:32:30 2587  EXCEPTION
13:32:30 2588  WHEN BAD_GIFT_CERTIFICATE_ID THEN
13:32:30 2589  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2590  	   SPROC_NAME, 'No such gift certificate');
13:32:30 2591  WHEN BAD_STATUS_ID THEN
13:32:30 2592  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2593  	   SPROC_NAME, 'Bad paypal status id');
13:32:30 2594  WHEN OTHERS THEN
13:32:30 2595  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2596  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2597  END UPDATE_GIFT_CERTIFICATE_STATUS;
13:32:30 2598  
13:32:30 2599  /******************************************************************************/
13:32:30 2600  
13:32:30 2601  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:30 2602  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:30 2603  	 out_result_set OUT SYS_REFCURSOR
13:32:30 2604  ) AS
13:32:30 2605  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
13:32:30 2606  -- VARIABLES
13:32:30 2607  temp_invoice_id NUMBER;
13:32:30 2608  -- EXCEPTIONS
13:32:30 2609  BAD_INVOICE_ID EXCEPTION;
13:32:30 2610  BEGIN
13:32:30 2611  
13:32:30 2612  	 BEGIN
13:32:30 2613  	   SELECT
13:32:30 2614  	     I.ID into temp_invoice_id
13:32:30 2615  	   FROM
13:32:30 2616  	     INVOICE I
13:32:30 2617  	   WHERE
13:32:30 2618  	     I.ID = in_invoice_id;
13:32:30 2619  	   EXCEPTION
13:32:30 2620  	     WHEN NO_DATA_FOUND THEN
13:32:30 2621  	       RAISE BAD_INVOICE_ID;
13:32:30 2622  	 END;
13:32:30 2623  
13:32:30 2624  	 OPEN out_result_set FOR
13:32:30 2625  	   SELECT
13:32:30 2626  	     gc.EXPIRATION_DATE,
13:32:30 2627  	     ch.name,
13:32:30 2628  	     ch.id offer_chain_id,
13:32:30 2629  	     gc.sender_email,
13:32:30 2630  	     gc.sender_name,
13:32:30 2631  	     gc.recipient_email,
13:32:30 2632  	     gc.recipient_name,
13:32:30 2633  	     gc.purchase_date,
13:32:30 2634  	     gc.redemption_date,
13:32:30 2635  	     gc.purchaser_group_id,
13:32:30 2636  	     gc.redeemer_group_id,
13:32:30 2637  	     gc.code,
13:32:30 2638  	     gc.gift_message,
13:32:30 2639  	     gc.recipient_notify_date,
13:32:30 2640  	     gc.id
13:32:30 2641  	   FROM
13:32:30 2642  	     GIFT_CERTIFICATE gc
13:32:30 2643  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
13:32:30 2644  	   WHERE
13:32:30 2645  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
13:32:30 2646  
13:32:30 2647  EXCEPTION
13:32:30 2648  WHEN BAD_INVOICE_ID THEN
13:32:30 2649  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2650  	   SPROC_NAME, 'No such invoice');
13:32:30 2651  WHEN OTHERS THEN
13:32:30 2652  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2653  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2654  END GET_GC_BY_PURCH_INVOICE_ID;
13:32:30 2655  
13:32:30 2656  
13:32:30 2657  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
13:32:30 2658  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:30 2659  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
13:32:30 2660  ) AS
13:32:30 2661  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
13:32:30 2662  -- VARIABLES
13:32:30 2663  temp_invoice_id NUMBER;
13:32:30 2664  -- EXCEPTIONS
13:32:30 2665  BAD_INVOICE_ID EXCEPTION;
13:32:30 2666  BEGIN
13:32:30 2667  
13:32:30 2668  	 BEGIN
13:32:30 2669  	   SELECT
13:32:30 2670  	     I.ID into temp_invoice_id
13:32:30 2671  	   FROM
13:32:30 2672  	     INVOICE I
13:32:30 2673  	   WHERE
13:32:30 2674  	     I.ID = in_invoice_id;
13:32:30 2675  	   EXCEPTION
13:32:30 2676  	     WHEN NO_DATA_FOUND THEN
13:32:30 2677  	       RAISE BAD_INVOICE_ID;
13:32:30 2678  	 END;
13:32:30 2679  
13:32:30 2680  	 BEGIN
13:32:30 2681  	   SELECT
13:32:30 2682  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
13:32:30 2683  	   FROM
13:32:30 2684  	     GIFT_CERTIFICATE
13:32:30 2685  	   WHERE
13:32:30 2686  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
13:32:30 2687  	   EXCEPTION
13:32:30 2688  	     WHEN NO_DATA_FOUND THEN
13:32:30 2689  	       out_gift_certificate_id := NULL;
13:32:30 2690  	 END;
13:32:30 2691  
13:32:30 2692  EXCEPTION
13:32:30 2693  WHEN BAD_INVOICE_ID THEN
13:32:30 2694  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2695  	   SPROC_NAME, 'No such invoice');
13:32:30 2696  WHEN OTHERS THEN
13:32:30 2697  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2698  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2699  END GET_GC_ID_BY_PURCH_INVOICE_ID;
13:32:30 2700  
13:32:30 2701  /******************************************************************************/
13:32:30 2702  
13:32:30 2703  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
13:32:30 2704  	 in_old_fin_instrument_id   IN NUMBER,
13:32:30 2705  	 in_old_fin_instrument_type IN NUMBER,
13:32:30 2706  	 in_new_fin_instrument_id   IN NUMBER,
13:32:30 2707  	 in_new_fin_instrument_type IN NUMBER,
13:32:30 2708  	 in_updated_by		    IN VARCHAR2
13:32:30 2709  ) AS
13:32:30 2710  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
13:32:30 2711  -- variables
13:32:30 2712  temp_out_transaction_id NUMBER;
13:32:30 2713  temp_out_charge_id      NUMBER;
13:32:30 2714  var_accounts_count      NUMBER;
13:32:30 2715  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
13:32:30 2716  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
13:32:30 2717  -- EXCEPTIONS
13:32:30 2718  BAD_OLD_CC   EXCEPTION;
13:32:30 2719  BAD_OLD_PP   EXCEPTION;
13:32:30 2720  BAD_OLD_TYPE EXCEPTION;
13:32:30 2721  BAD_NEW_CC   EXCEPTION;
13:32:30 2722  BAD_NEW_PP   EXCEPTION;
13:32:30 2723  BAD_NEW_TYPE EXCEPTION;
13:32:30 2724  DIFFERENT_OWNERS EXCEPTION;
13:32:30 2725  BEGIN
13:32:30 2726  
13:32:30 2727  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30 2728  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 2729  	     -- throw exception: bad old credit card
13:32:30 2730  	     RAISE BAD_OLD_CC;
13:32:30 2731  	   END IF;
13:32:30 2732  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30 2733  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 2734  	     -- throw exception: bad old paypal
13:32:30 2735  	     RAISE BAD_OLD_PP;
13:32:30 2736  	   END IF;
13:32:30 2737  	 ELSE
13:32:30 2738  	   -- throw exception: bad instrument type
13:32:30 2739  	   RAISE BAD_OLD_TYPE;
13:32:30 2740  	 END IF;
13:32:30 2741  
13:32:30 2742  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
13:32:30 2743  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 2744  	     -- throw exception: bad new credit card
13:32:30 2745  	     RAISE BAD_NEW_CC;
13:32:30 2746  	   END IF;
13:32:30 2747  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
13:32:30 2748  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:30 2749  	     -- throw exception: bad new paypal
13:32:30 2750  	     RAISE BAD_NEW_PP;
13:32:30 2751  	   END IF;
13:32:30 2752  	 ELSE
13:32:30 2753  	   -- throw exception: bad new instrument type
13:32:30 2754  	   RAISE BAD_NEW_TYPE;
13:32:30 2755  	 END IF;
13:32:30 2756  
13:32:30 2757  	 -- Check that owner of both instruments - same man
13:32:30 2758  
13:32:30 2759  	 SELECT count(1) into var_accounts_count FROM (
13:32:30 2760  	   SELECT
13:32:30 2761  	     CC.ACCOUNT_ID
13:32:30 2762  	   FROM
13:32:30 2763  	     CREDIT_CARD CC
13:32:30 2764  	   WHERE
13:32:30 2765  	     (
13:32:30 2766  	       CC.ID = in_old_fin_instrument_id
13:32:30 2767  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30 2768  	     )
13:32:30 2769  	     OR
13:32:30 2770  	     (
13:32:30 2771  	       CC.ID = in_new_fin_instrument_id
13:32:30 2772  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
13:32:30 2773  	     )
13:32:30 2774  	   UNION
13:32:30 2775  	   SELECT
13:32:30 2776  	     PP.ACCOUNT_ID
13:32:30 2777  	   FROM
13:32:30 2778  	     PAYPAL PP
13:32:30 2779  	   WHERE
13:32:30 2780  	     (
13:32:30 2781  	       PP.ID = in_old_fin_instrument_id
13:32:30 2782  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
13:32:30 2783  	     )
13:32:30 2784  	     OR
13:32:30 2785  	     (
13:32:30 2786  	       PP.ID = in_new_fin_instrument_id
13:32:30 2787  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
13:32:30 2788  	     )
13:32:30 2789  	 )
13:32:30 2790  	 WHERE
13:32:30 2791  	   account_id IS NOT NULL;
13:32:30 2792  
13:32:30 2793  	 IF (var_accounts_count > 1) THEN
13:32:30 2794  	   -- Throw exception: different owners of instruments
13:32:30 2795  	   RAISE DIFFERENT_OWNERS;
13:32:30 2796  	 END IF;
13:32:30 2797  
13:32:30 2798  	 FOR f_sub IN (
13:32:30 2799  	   select
13:32:30 2800  	     s.id
13:32:30 2801  	   FROM
13:32:30 2802  	     subscription s
13:32:30 2803  	   WHERE
13:32:30 2804  	     (
13:32:30 2805  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE OR
13:32:30 2806  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED OR
13:32:30 2807  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD
13:32:30 2808  	     )
13:32:30 2809  	     AND
13:32:30 2810  	     s.instrument_type_id = in_old_fin_instrument_type AND
13:32:30 2811  	     s.instrument_id = in_old_fin_instrument_id
13:32:30 2812  	 ) LOOP
13:32:30 2813  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
13:32:30 2814  	     in_subscription_id => f_sub.id,
13:32:30 2815  	     in_instrument_type_id => in_new_fin_instrument_type,
13:32:30 2816  	     in_instrument_id => in_new_fin_instrument_id,
13:32:30 2817  	     in_updated_by => in_updated_by
13:32:30 2818  	   );
13:32:30 2819  	 END LOOP;
13:32:30 2820  
13:32:30 2821  	 FOR f_open_charge IN (
13:32:30 2822  	   select
13:32:30 2823  	     ch.id,
13:32:30 2824  	     ch.invoice_id,
13:32:30 2825  	     ch.transaction_id,
13:32:30 2826  	     ch.charge_amount
13:32:30 2827  	   FROM
13:32:30 2828  	     charge ch
13:32:30 2829  	   WHERE
13:32:30 2830  	     ch.instrument_type_id = in_old_fin_instrument_type
13:32:30 2831  	     AND ch.instrument_id = in_old_fin_instrument_id
13:32:30 2832  	     AND ch.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED
13:32:30 2833  	 ) LOOP
13:32:30 2834  
13:32:30 2835  	   FOR f_pending_transaction IN (
13:32:30 2836  	     select
13:32:30 2837  	       id, transaction_amount, order_id, is_refund
13:32:30 2838  	     from
13:32:30 2839  	       transaction
13:32:30 2840  	     where
13:32:30 2841  	       id = f_open_charge.transaction_id
13:32:30 2842  	       and transaction_status_id = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
13:32:30 2843  	   ) LOOP
13:32:30 2844  
13:32:30 2845  	     SELECT
13:32:30 2846  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
13:32:30 2847  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
13:32:30 2848  					     TRANSACTION_TYPE_CODE)
13:32:30 2849  	     INTO var_transaction_type
13:32:30 2850  	     FROM
13:32:30 2851  	       Transaction
13:32:30 2852  	     WHERE
13:32:30 2853  	       id = f_pending_transaction.id
13:32:30 2854  	       AND ROWNUM <= 1;
13:32:30 2855  
13:32:30 2856  	     PROCS_TRANSACTION_V20.CREATE_TRANSACTION (
13:32:30 2857  	       in_transaction_id => NULL,
13:32:30 2858  	       in_status_id  => GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
13:32:30 2859  	       in_amount     => f_pending_transaction.transaction_amount,
13:32:30 2860  	       in_created_by => in_updated_by,
13:32:30 2861  	       in_order_id   => null,
13:32:30 2862  	       in_is_refund  => f_pending_transaction.is_refund,
13:32:30 2863  	       in_transaction_type_code => var_transaction_type,
13:32:30 2864  	       out_transaction_id => temp_out_transaction_id
13:32:30 2865  	     );
13:32:30 2866  
13:32:30 2867  	     PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
13:32:30 2868  	       in_transaction_id => f_pending_transaction.id,
13:32:30 2869  	       in_updated_by	 => in_updated_by,
13:32:30 2870  	       in_transaction_status_id  => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
13:32:30 2871  	     );
13:32:30 2872  
13:32:30 2873  	     -- Create new charge
13:32:30 2874  	     PROCS_CHARGE_V20.CREATE_CHARGE (
13:32:30 2875  	       in_invoice_id	     => f_open_charge.invoice_id,
13:32:30 2876  	       in_transaction_id     => temp_out_transaction_id,
13:32:30 2877  	       in_instrument_type_id => in_new_fin_instrument_type,
13:32:30 2878  	       in_instrument_id      => in_new_fin_instrument_id,
13:32:30 2879  	       in_charge_amount      => f_open_charge.charge_amount,
13:32:30 2880  	       in_created_by	     => in_updated_by,
13:32:30 2881  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
13:32:30 2882  	       out_charge_id	     => temp_out_charge_id
13:32:30 2883  	     );
13:32:30 2884  	     -- Cancel old charge
13:32:30 2885  	     PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
13:32:30 2886  	       in_charge_id	   => f_open_charge.id,
13:32:30 2887  	       in_updated_by	   => in_updated_by,
13:32:30 2888  	       in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
13:32:30 2889  	     );
13:32:30 2890  
13:32:30 2891  	     PROCS_ADJUSTMENTS_V20.UPDATE_INVOICE_ADJUSTMENT(
13:32:30 2892  	       IN_INVOICE_ID => f_open_charge.invoice_id,
13:32:30 2893  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
13:32:30 2894  	       IN_CHARGE_ID => temp_out_charge_id,
13:32:30 2895  	       IN_UPDATED_BY => in_updated_by
13:32:30 2896  	     );
13:32:30 2897  
13:32:30 2898  	   END LOOP;
13:32:30 2899  	 END LOOP;
13:32:30 2900  
13:32:30 2901  EXCEPTION
13:32:30 2902  WHEN BAD_OLD_CC THEN
13:32:30 2903  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2904  	   SPROC_NAME, 'Trying to switch from non existing credit card');
13:32:30 2905  WHEN BAD_OLD_PP THEN
13:32:30 2906  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2907  	   SPROC_NAME, 'Trying to switch from non existing paypal');
13:32:30 2908  WHEN BAD_OLD_TYPE THEN
13:32:30 2909  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2910  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
13:32:30 2911  WHEN BAD_NEW_CC THEN
13:32:30 2912  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2913  	   SPROC_NAME, 'Trying to switch to non existing credit card');
13:32:30 2914  WHEN BAD_NEW_PP THEN
13:32:30 2915  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2916  	   SPROC_NAME, 'Trying to switch to non existing paypal');
13:32:30 2917  WHEN BAD_NEW_TYPE THEN
13:32:30 2918  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:30 2919  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
13:32:30 2920  WHEN DIFFERENT_OWNERS THEN
13:32:30 2921  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:30 2922  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
13:32:30 2923  WHEN OTHERS THEN
13:32:30 2924  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:30 2925  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:30 2926  END SWITCH_FINANCIAL_INSTRUMENT;
13:32:30 2927  
13:32:30 2928  END PROCS_FIN_INSTRUMENTS_V20;
13:32:30 2929  .
13:32:30 SQL> /

Package body created.

Elapsed: 00:00:00.22
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
13:32:31   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:31   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
13:32:31   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:31   7  ) AS
13:32:31   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
13:32:31   9  BEGIN
13:32:31  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_SUBSCRIPTION_SHARE (
13:32:31  11  	  in_id 		=> in_sub_share_id,
13:32:31  12  	  in_needs_entitlements => in_need_entitlements,
13:32:31  13  	  in_updated_by 	=> in_updater
13:32:31  14  	);
13:32:31  15  END UPDATE_SS_NEED_ENTITLEMENTS;
13:32:31  16  
13:32:31  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
13:32:31  18  	out_result_set OUT SYS_REFCURSOR
13:32:31  19  ) AS
13:32:31  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
13:32:31  21  BEGIN
13:32:31  22  	OPEN out_result_set FOR
13:32:31  23  	SELECT * FROM (
13:32:31  24  	  SELECT DISTINCT
13:32:31  25  	    ga.Subscription_Id,
13:32:31  26  	    A.Group_Id Borrower_Group_Id,
13:32:31  27  	    L.Offer_Id,
13:32:31  28  	    ss.id Subscription_Share_id
13:32:31  29  	  FROM
13:32:31  30  	    Subscription_Share Ss,
13:32:31  31  	    Group_Account Ga,
13:32:31  32  	    Account A,
13:32:31  33  	    License l
13:32:31  34  	  WHERE
13:32:31  35  	    Ss.Group_Account_Id        = ga.id
13:32:31  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V20.TRUE
13:32:31  37  	    AND Ss.Borrower_Account_Id = A.Id
13:32:31  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
13:32:31  39  	    AND ROWNUM <= 5000
13:32:31  40  	  ORDER BY dbms_random.value
13:32:31  41  ) WHERE
13:32:31  42  	ROWNUM <= 1000;
13:32:31  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
13:32:31  44  
13:32:31  45  PROCEDURE EXPIRE_SUB_SHARE(
13:32:31  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:31  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:31  48  ) AS
13:32:31  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
13:32:31  50  BEGIN
13:32:31  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_SUBSCRIPTION_SHARE (
13:32:31  52  	  in_id 	=> in_sub_share_id,
13:32:31  53  	  in_end_date	=> SYSDATE,
13:32:31  54  	  in_updated_by => in_updater,
13:32:31  55  	  in_needs_entitlements => 1
13:32:31  56  	);
13:32:31  57  END EXPIRE_SUB_SHARE;
13:32:31  58  
13:32:31  59  PROCEDURE EXPIRE_ALL_SHARES (
13:32:31  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
13:32:31  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:31  62  ) AS
13:32:31  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
13:32:31  64  BEGIN
13:32:31  65  	UPDATE SUBSCRIPTION_SHARE SET
13:32:31  66  	  END_DATE = SYSDATE,
13:32:31  67  	  UPDATED_BY = in_updated_by,
13:32:31  68  	  UPDATE_DATE = SYSDATE
13:32:31  69  	WHERE
13:32:31  70  	  GROUP_ACCOUNT_ID = in_group_account_id
13:32:31  71  	AND
13:32:31  72  	  SYSDATE < END_DATE;
13:32:31  73  EXCEPTION
13:32:31  74  	WHEN OTHERS THEN
13:32:31  75  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
13:32:31  77  END EXPIRE_ALL_SHARES;
13:32:31  78  
13:32:31  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
13:32:31  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
13:32:31  81  	in_start	 IN  NUMBER,
13:32:31  82  	in_end		 IN  NUMBER,
13:32:31  83  	in_expired	 IN  NUMBER,
13:32:31  84  	out_result_set	 OUT SYS_REFCURSOR,
13:32:31  85  	out_shares_count OUT NUMBER
13:32:31  86  ) AS
13:32:31  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
13:32:31  88  range_diff NUMBER := 0;
13:32:31  89  upper_bond_diff NUMBER := 0;
13:32:31  90  l_start NUMBER := 0;
13:32:31  91  l_end   NUMBER := 0;
13:32:31  92  BEGIN
13:32:31  93  	--Normalize the end points [START]
13:32:31  94  	IF (in_start IS NULL OR in_start < 0) Then
13:32:31  95  	  l_start := 0;
13:32:31  96  	ELSE
13:32:31  97  	  l_start := in_start;
13:32:31  98  	END IF;
13:32:31  99  
13:32:31 100  	IF (in_end IS NULL) Then
13:32:31 101  	  l_end := 11;
13:32:31 102  	ELSE
13:32:31 103  	  l_end := in_end;
13:32:31 104  	END IF;
13:32:31 105  
13:32:31 106  	l_start := l_start + 1;
13:32:31 107  	l_end	:= l_end   + 1;
13:32:31 108  
13:32:31 109  	range_diff := l_end - l_start;
13:32:31 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
13:32:31 111  
13:32:31 112  	IF (upper_bond_diff > 0) Then
13:32:31 113  	  l_end := l_end - upper_bond_diff;
13:32:31 114  	END IF;
13:32:31 115  	--Normalize the end points [END]
13:32:31 116  
13:32:31 117  	BEGIN
13:32:31 118  	  SELECT
13:32:31 119  	    COUNT(1) INTO out_shares_count
13:32:31 120  	  FROM
13:32:31 121  	    GROUP_ACCOUNT ga,
13:32:31 122  	    SUBSCRIPTION_SHARE ss,
13:32:31 123  	    ACCOUNT a
13:32:31 124  	  WHERE
13:32:31 125  	    a.GROUP_ID		= in_group_id AND
13:32:31 126  	    a.Id		= ss.borrower_account_id And
13:32:31 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
13:32:31 128  	END;
13:32:31 129  
13:32:31 130  	IF in_expired > 0 THEN
13:32:31 131  	BEGIN
13:32:31 132  	    OPEN out_result_set FOR
13:32:31 133  	    SELECT
13:32:31 134  	      *
13:32:31 135  	    FROM
13:32:31 136  	      (SELECT rownum rnum, q.*
13:32:31 137  	       FROM
13:32:31 138  		(SELECT
13:32:31 139  		   ga.SUBSCRIPTION_ID,
13:32:31 140  		   ss.START_DATE,
13:32:31 141  		   ss.END_DATE,
13:32:31 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
13:32:31 143  		 FROM
13:32:31 144  		   GROUP_ACCOUNT ga,
13:32:31 145  		   SUBSCRIPTION_SHARE ss,
13:32:31 146  		   ACCOUNT a,
13:32:31 147  		   SUBSCRIPTION s,
13:32:31 148  		   ACCOUNT a2
13:32:31 149  		 WHERE
13:32:31 150  		   a.GROUP_ID	       = in_group_id AND
13:32:31 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
13:32:31 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
13:32:31 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
13:32:31 154  		   s.ACCOUNT_ID        = a2.ID
13:32:31 155  		) Q
13:32:31 156  	      WHERE rownum <= l_end)
13:32:31 157  	    WHERE rnum >= l_Start;
13:32:31 158  	END;
13:32:31 159  	ELSE
13:32:31 160  	BEGIN
13:32:31 161  	    OPEN out_result_set FOR
13:32:31 162  	    SELECT
13:32:31 163  	      *
13:32:31 164  	    FROM
13:32:31 165  	      (SELECT rownum rnum, q.*
13:32:31 166  	       FROM
13:32:31 167  		(SELECT
13:32:31 168  		   ga.SUBSCRIPTION_ID,
13:32:31 169  		   ss.START_DATE,
13:32:31 170  		   ss.END_DATE,
13:32:31 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
13:32:31 172  		 FROM
13:32:31 173  		   GROUP_ACCOUNT ga,
13:32:31 174  		   SUBSCRIPTION_SHARE ss,
13:32:31 175  		   ACCOUNT a,
13:32:31 176  		   SUBSCRIPTION s,
13:32:31 177  		   ACCOUNT a2
13:32:31 178  		 WHERE
13:32:31 179  		   a.GROUP_ID	       = in_group_id AND
13:32:31 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
13:32:31 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
13:32:31 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
13:32:31 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
13:32:31 184  		   s.ACCOUNT_ID        = a2.ID
13:32:31 185  		) Q
13:32:31 186  	      WHERE rownum <= l_end)
13:32:31 187  	    WHERE rnum >= l_start;
13:32:31 188  	  END;
13:32:31 189  	END IF;
13:32:31 190  EXCEPTION
13:32:31 191  WHEN NO_DATA_FOUND THEN
13:32:31 192  	NULL;
13:32:31 193  WHEN OTHERS THEN
13:32:31 194  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
13:32:31 196  END SUB_SHARE_BY_GROUP_ID;
13:32:31 197  
13:32:31 198  PROCEDURE IS_VALID_IP_ADDRESS (
13:32:31 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:31 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:31 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:31 202  	out_is_valid	    OUT NUMBER
13:32:31 203  ) AS
13:32:31 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
13:32:31 205  BEGIN
13:32:31 206  	SELECT
13:32:31 207  	  COUNT(1) INTO out_is_valid
13:32:31 208  	FROM
13:32:31 209  	  GROUP_ACCOUNT_IP_RANGE,
13:32:31 210  	  GROUP_ACCOUNT,
13:32:31 211  	  SUBSCRIPTION,
13:32:31 212  	  OFFER_CHAIN
13:32:31 213  	WHERE
13:32:31 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
13:32:31 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
13:32:31 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
13:32:31 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
13:32:31 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 219  	 (
13:32:31 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
13:32:31 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
13:32:31 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
13:32:31 223  	 ) AND
13:32:31 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE;
13:32:31 225  EXCEPTION
13:32:31 226  WHEN OTHERS THEN
13:32:31 227  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
13:32:31 229  END IS_VALID_IP_ADDRESS;
13:32:31 230  
13:32:31 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
13:32:31 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:31 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:31 234  	out_is_valid	    OUT NUMBER
13:32:31 235  ) AS
13:32:31 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
13:32:31 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
13:32:31 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
13:32:31 239  BEGIN
13:32:31 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
13:32:31 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
13:32:31 242  
13:32:31 243  	SELECT
13:32:31 244  	  COUNT(1) INTO out_is_valid
13:32:31 245  	FROM
13:32:31 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
13:32:31 247  	  GROUP_ACCOUNT ga,
13:32:31 248  	  SUBSCRIPTION s,
13:32:31 249  	  OFFER_CHAIN oc
13:32:31 250  	WHERE
13:32:31 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
13:32:31 252  	  ga.SUBSCRIPTION_ID = s.ID AND
13:32:31 253  	  s.OFFER_CHAIN_ID = oc.ID AND
13:32:31 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
13:32:31 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
13:32:31 257  	  gaed.IS_ACTIVE = 1;
13:32:31 258  EXCEPTION
13:32:31 259  WHEN OTHERS THEN
13:32:31 260  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
13:32:31 262  END IS_VALID_EMAIL_DOMAIN;
13:32:31 263  
13:32:31 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
13:32:31 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
13:32:31 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
13:32:31 267  	out_Result_Set	       OUT Sys_Refcursor
13:32:31 268  ) AS
13:32:31 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
13:32:31 270  BEGIN
13:32:31 271  	BEGIN
13:32:31 272  	   OPEN out_result_set FOR
13:32:31 273  	   SELECT
13:32:31 274  	      ss.ID,
13:32:31 275  	      ss.GROUP_ACCOUNT_ID,
13:32:31 276  	      ss.BORROWER_ACCOUNT_ID,
13:32:31 277  	      ss.IP_ADDRESS,
13:32:31 278  	      ss.START_DATE,
13:32:31 279  	      ss.END_DATE,
13:32:31 280  	      ss.CREATED_BY,
13:32:31 281  	      ss.CREATE_DATE,
13:32:31 282  	      ss.UPDATED_BY,
13:32:31 283  	      ss.UPDATE_DATE,
13:32:31 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
13:32:31 285  	   FROM
13:32:31 286  	     SUBSCRIPTION_SHARE ss,
13:32:31 287  	     ACCOUNT a
13:32:31 288  	   WHERE
13:32:31 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
13:32:31 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
13:32:31 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
13:32:31 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
13:32:31 293  	END;
13:32:31 294  EXCEPTION
13:32:31 295  WHEN OTHERS THEN
13:32:31 296  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
13:32:31 298  END GET_SUBSCRIPTION_SHARE;
13:32:31 299  
13:32:31 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
13:32:31 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
13:32:31 302  	out_result_set	   OUT SYS_REFCURSOR
13:32:31 303  ) As
13:32:31 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
13:32:31 305  BEGIN
13:32:31 306  OPEN out_result_set FOR
13:32:31 307  	SELECT
13:32:31 308  	  ID,
13:32:31 309  	  SUBSCRIPTION_ID,
13:32:31 310  	  GROUP_NAME,
13:32:31 311  	  FIRST_NAME,
13:32:31 312  	  LAST_NAME,
13:32:31 313  	  EMAIL,
13:32:31 314  	  PHONE,
13:32:31 315  	  ORGANIZATION_TYPE,
13:32:31 316  	  SEATS,
13:32:31 317  	  SEAT_TTL_IN_HOURS,
13:32:31 318  	  CREATE_DATE,
13:32:31 319  	  CREATED_BY,
13:32:31 320  	  UPDATE_DATE,
13:32:31 321  	  UPDATED_BY
13:32:31 322  	FROM
13:32:31 323  	  GROUP_ACCOUNT
13:32:31 324  	Where
13:32:31 325  	  Subscription_Id = in_subscription_id;
13:32:31 326  EXCEPTION
13:32:31 327  WHEN OTHERS THEN
13:32:31 328  	Procs_Common_V20.Throw_Exception(APP_EXCEPTION_CODES_V20.Unknown_Error,
13:32:31 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 330  
13:32:31 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
13:32:31 332  
13:32:31 333  PROCEDURE CREATE_GROUP_ACCOUNT (
13:32:31 334  	in_subscription_id	 IN NUMBER,
13:32:31 335  	in_group_name		 IN VARCHAR2,
13:32:31 336  	in_first_name		 IN VARCHAR2,
13:32:31 337  	in_last_name		 IN VARCHAR2,
13:32:31 338  	in_email		 IN VARCHAR2,
13:32:31 339  	in_phone		 IN VARCHAR2,
13:32:31 340  	in_organization_type	 IN VARCHAR2,
13:32:31 341  	in_seats		 IN NUMBER,
13:32:31 342  	in_seat_ttl_in_hours	 IN NUMBER,
13:32:31 343  	in_ip			 IN NUMBER,
13:32:31 344  	in_created_by		 IN VARCHAR2
13:32:31 345  ) AS
13:32:31 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
13:32:31 347  BEGIN
13:32:31 348  
13:32:31 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.CREATE_GROUP_ACCOUNT(
13:32:31 350  	  in_subscription_id => in_subscription_id,
13:32:31 351  	  in_group_name => in_group_name,
13:32:31 352  	  in_first_name => in_first_name,
13:32:31 353  	  in_last_name => in_last_name,
13:32:31 354  	  in_email => in_email,
13:32:31 355  	  in_phone => in_phone,
13:32:31 356  	  in_organization_type => in_organization_type,
13:32:31 357  	  in_seats => in_seats,
13:32:31 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
13:32:31 359  	  in_ip => in_ip,
13:32:31 360  	  in_created_by => in_created_by
13:32:31 361  	);
13:32:31 362  
13:32:31 363  END CREATE_GROUP_ACCOUNT;
13:32:31 364  
13:32:31 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
13:32:31 366  	in_group_account_id IN NUMBER,
13:32:31 367  	in_start	    IN NUMBER,
13:32:31 368  	in_end		    IN NUMBER,
13:32:31 369  	out_Result_Set	    OUT Sys_Refcursor
13:32:31 370  ) AS
13:32:31 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
13:32:31 372  range_diff NUMBER := 0;
13:32:31 373  upper_bond_diff NUMBER := 0;
13:32:31 374  l_start NUMBER := 0;
13:32:31 375  l_end   NUMBER := 0;
13:32:31 376  BEGIN
13:32:31 377  	-- Normalize the end points [START]
13:32:31 378  	IF (in_start IS NULL OR in_start < 0) Then
13:32:31 379  	  l_start := 0;
13:32:31 380  	ELSE
13:32:31 381  	  l_start := in_start;
13:32:31 382  	END IF;
13:32:31 383  
13:32:31 384  	IF (in_end IS NULL) Then
13:32:31 385  	  l_end := 11;
13:32:31 386  	ELSE
13:32:31 387  	  l_end := in_end;
13:32:31 388  	END IF;
13:32:31 389  
13:32:31 390  	l_start := l_start + 1;
13:32:31 391  	l_end	:= l_end   + 1;
13:32:31 392  
13:32:31 393  	range_diff := l_end - l_start;
13:32:31 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
13:32:31 395  
13:32:31 396  	IF (upper_bond_diff > 0) Then
13:32:31 397  	  l_end := l_end - upper_bond_diff;
13:32:31 398  	END IF;
13:32:31 399  	-- Normalize the end points [END]
13:32:31 400  
13:32:31 401  	BEGIN
13:32:31 402  	   OPEN out_result_set FOR
13:32:31 403  	   SELECT *
13:32:31 404  	   FROM
13:32:31 405  	     (SELECT rownum rnum, Q.*
13:32:31 406  	      FROM
13:32:31 407  	       (SELECT
13:32:31 408  		  ss.ID,
13:32:31 409  		  ss.GROUP_ACCOUNT_ID,
13:32:31 410  		  ss.BORROWER_ACCOUNT_ID,
13:32:31 411  		  ss.IP_ADDRESS,
13:32:31 412  		  ss.START_DATE,
13:32:31 413  		  ss.END_DATE,
13:32:31 414  		  ss.CREATED_BY,
13:32:31 415  		  ss.CREATE_DATE,
13:32:31 416  		  ss.UPDATED_BY,
13:32:31 417  		  ss.UPDATE_DATE,
13:32:31 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
13:32:31 419  		FROM
13:32:31 420  		  SUBSCRIPTION_SHARE ss,
13:32:31 421  		  ACCOUNT a,
13:32:31 422  		  LICENSE l,
13:32:31 423  		  GROUP_ACCOUNT ga
13:32:31 424  		WHERE
13:32:31 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
13:32:31 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
13:32:31 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
13:32:31 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
13:32:31 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
13:32:31 431  	      ) Q
13:32:31 432  	    WHERE rownum <= l_end)
13:32:31 433  	  WHERE rnum >= l_start;
13:32:31 434  	END;
13:32:31 435  EXCEPTION
13:32:31 436  WHEN OTHERS THEN
13:32:31 437  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
13:32:31 439  END GET_SUBSCRIPTION_SHARES;
13:32:31 440  
13:32:31 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
13:32:31 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:31 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:31 444  	out_result_set	      OUT SYS_REFCURSOR
13:32:31 445  ) AS
13:32:31 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
13:32:31 447  BEGIN
13:32:31 448  	BEGIN
13:32:31 449  	  OPEN out_result_set FOR
13:32:31 450  	  SELECT
13:32:31 451  	    ID,
13:32:31 452  	    SUBSCRIPTION_ID,
13:32:31 453  	    GROUP_NAME,
13:32:31 454  	    FIRST_NAME,
13:32:31 455  	    LAST_NAME,
13:32:31 456  	    EMAIL,
13:32:31 457  	    PHONE,
13:32:31 458  	    ORGANIZATION_TYPE,
13:32:31 459  	    SEATS,
13:32:31 460  	    SEAT_TTL_IN_HOURS,
13:32:31 461  	    CREATE_DATE,
13:32:31 462  	    CREATED_BY,
13:32:31 463  	    UPDATE_DATE,
13:32:31 464  	    UPDATED_BY
13:32:31 465  	  FROM
13:32:31 466  	    GROUP_ACCOUNT
13:32:31 467  	  WHERE
13:32:31 468  	    ID IN (
13:32:31 469  	      SELECT
13:32:31 470  		GROUP_ACCOUNT_ID
13:32:31 471  	      FROM
13:32:31 472  		GROUP_ACCOUNT_IP_RANGE,
13:32:31 473  		GROUP_ACCOUNT,
13:32:31 474  		SUBSCRIPTION,
13:32:31 475  		OFFER_CHAIN
13:32:31 476  	      WHERE
13:32:31 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
13:32:31 478  	      AND
13:32:31 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
13:32:31 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
13:32:31 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
13:32:31 482  	      AND
13:32:31 483  		(
13:32:31 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
13:32:31 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
13:32:31 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
13:32:31 487  		)
13:32:31 488  	      AND
13:32:31 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
13:32:31 490  	    );
13:32:31 491  	  END;
13:32:31 492  EXCEPTION
13:32:31 493  WHEN OTHERS THEN
13:32:31 494  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 496  END GET_GROUP_ACCOUNT_BY_IP;
13:32:31 497  
13:32:31 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
13:32:31 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:31 500  	out_result_set	    OUT SYS_REFCURSOR
13:32:31 501  ) AS
13:32:31 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
13:32:31 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
13:32:31 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
13:32:31 505  BEGIN
13:32:31 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
13:32:31 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
13:32:31 508  	BEGIN
13:32:31 509  	  OPEN out_result_set FOR
13:32:31 510  	  SELECT
13:32:31 511  	    ID,
13:32:31 512  	    SUBSCRIPTION_ID,
13:32:31 513  	    GROUP_NAME,
13:32:31 514  	    FIRST_NAME,
13:32:31 515  	    LAST_NAME,
13:32:31 516  	    EMAIL,
13:32:31 517  	    PHONE,
13:32:31 518  	    ORGANIZATION_TYPE,
13:32:31 519  	    SEATS,
13:32:31 520  	    SEAT_TTL_IN_HOURS,
13:32:31 521  	    CREATE_DATE,
13:32:31 522  	    CREATED_BY,
13:32:31 523  	    UPDATE_DATE,
13:32:31 524  	    UPDATED_BY
13:32:31 525  	  FROM
13:32:31 526  	    GROUP_ACCOUNT
13:32:31 527  	  WHERE
13:32:31 528  	    ID IN (
13:32:31 529  	      SELECT
13:32:31 530  		GROUP_ACCOUNT_ID
13:32:31 531  	      FROM
13:32:31 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
13:32:31 533  		GROUP_ACCOUNT ga,
13:32:31 534  		SUBSCRIPTION s,
13:32:31 535  		OFFER_CHAIN oc
13:32:31 536  	      WHERE
13:32:31 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
13:32:31 538  		ga.SUBSCRIPTION_ID = s.ID AND
13:32:31 539  		s.OFFER_CHAIN_ID = oc.ID AND
13:32:31 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
13:32:31 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
13:32:31 542  		gaed.IS_ACTIVE = 1
13:32:31 543  	    );
13:32:31 544  	  END;
13:32:31 545  EXCEPTION
13:32:31 546  WHEN OTHERS THEN
13:32:31 547  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
13:32:31 550  
13:32:31 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
13:32:31 552  	in_group_account_id   IN NUMBER,
13:32:31 553  	in_start	      IN NUMBER,
13:32:31 554  	in_end		      IN NUMBER,
13:32:31 555  	in_status	      IN NUMBER,
13:32:31 556  	out_record_count      OUT NUMBER,
13:32:31 557  	out_result_set	      OUT SYS_REFCURSOR
13:32:31 558  ) AS
13:32:31 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
13:32:31 560  range_diff NUMBER := 0;
13:32:31 561  upper_bond_diff NUMBER := 0;
13:32:31 562  l_start NUMBER := 0;
13:32:31 563  l_end   NUMBER := 0;
13:32:31 564  BEGIN
13:32:31 565  	--Normalize the end points [START]
13:32:31 566  	IF (in_start IS NULL OR in_start < 0) Then
13:32:31 567  	  l_start := 0;
13:32:31 568  	ELSE
13:32:31 569  	  l_start := in_start;
13:32:31 570  	END IF;
13:32:31 571  
13:32:31 572  	IF (in_end IS NULL) Then
13:32:31 573  	  l_end := 11;
13:32:31 574  	ELSE
13:32:31 575  	  l_end := in_end;
13:32:31 576  	END IF;
13:32:31 577  
13:32:31 578  	l_start := l_start + 1;
13:32:31 579  	l_end	:= l_end   + 1;
13:32:31 580  
13:32:31 581  	range_diff := l_end - l_start;
13:32:31 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
13:32:31 583  
13:32:31 584  	IF (upper_bond_diff > 0) Then
13:32:31 585  	  l_end := l_end - upper_bond_diff;
13:32:31 586  	END IF;
13:32:31 587  	--Normalize the end points [END]
13:32:31 588  
13:32:31 589  	--Total count of records [START]
13:32:31 590  	SELECT
13:32:31 591  	  COUNT(1) INTO out_record_count
13:32:31 592  	FROM
13:32:31 593  	  GROUP_ACCOUNT_IP_RANGE
13:32:31 594  	WHERE
13:32:31 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
13:32:31 597  	--Total count of records [END]
13:32:31 598  
13:32:31 599  	OPEN out_result_set FOR
13:32:31 600  	SELECT
13:32:31 601  	  *
13:32:31 602  	FROM
13:32:31 603  	  (SELECT rownum rnum, q.*
13:32:31 604  	   FROM
13:32:31 605  	    (SELECT
13:32:31 606  	       ID,
13:32:31 607  	       GROUP_ACCOUNT_ID,
13:32:31 608  	       MINIMUM_IP_STRING,
13:32:31 609  	       MAXIMUM_IP_STRING,
13:32:31 610  	       GROUP_ACC_IP_RNG_STATUS_ID
13:32:31 611  	     FROM
13:32:31 612  	       GROUP_ACCOUNT_IP_RANGE
13:32:31 613  	     WHERE
13:32:31 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 615  	       (in_status IS NULL OR
13:32:31 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
13:32:31 617  	    ) Q
13:32:31 618  	  WHERE rownum <= l_end)
13:32:31 619  	WHERE rnum >= l_Start;
13:32:31 620  EXCEPTION
13:32:31 621  WHEN OTHERS THEN
13:32:31 622  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
13:32:31 624  END GET_GROUP_ACCOUNT_IP_RANGES;
13:32:31 625  
13:32:31 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
13:32:31 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:31 628  	in_start	      IN NUMBER,
13:32:31 629  	in_end		      IN NUMBER,
13:32:31 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
13:32:31 631  	out_record_count      OUT NUMBER,
13:32:31 632  	out_result_set	      OUT SYS_REFCURSOR
13:32:31 633  ) AS
13:32:31 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
13:32:31 635  range_diff NUMBER := 0;
13:32:31 636  upper_bond_diff NUMBER := 0;
13:32:31 637  l_start NUMBER := 0;
13:32:31 638  l_end   NUMBER := 0;
13:32:31 639  BEGIN
13:32:31 640  	--Normalize the end points [START]
13:32:31 641  	IF (in_start IS NULL OR in_start < 0) Then
13:32:31 642  	  l_start := 0;
13:32:31 643  	ELSE
13:32:31 644  	  l_start := in_start;
13:32:31 645  	END IF;
13:32:31 646  
13:32:31 647  	IF (in_end IS NULL) Then
13:32:31 648  	  l_end := 11;
13:32:31 649  	ELSE
13:32:31 650  	  l_end := in_end;
13:32:31 651  	END IF;
13:32:31 652  
13:32:31 653  	l_start := l_start + 1;
13:32:31 654  	l_end	:= l_end   + 1;
13:32:31 655  
13:32:31 656  	range_diff := l_end - l_start;
13:32:31 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
13:32:31 658  
13:32:31 659  	IF (upper_bond_diff > 0) Then
13:32:31 660  	  l_end := l_end - upper_bond_diff;
13:32:31 661  	END IF;
13:32:31 662  	--Normalize the end points [END]
13:32:31 663  
13:32:31 664  	--Total count of records [START]
13:32:31 665  	SELECT
13:32:31 666  	  COUNT(1) INTO out_record_count
13:32:31 667  	FROM
13:32:31 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
13:32:31 669  	WHERE
13:32:31 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
13:32:31 672  	--Total count of records [END]
13:32:31 673  
13:32:31 674  	OPEN out_result_set FOR
13:32:31 675  	SELECT
13:32:31 676  	  *
13:32:31 677  	FROM
13:32:31 678  	  (SELECT rownum rnum, q.*
13:32:31 679  	   FROM
13:32:31 680  	    (SELECT
13:32:31 681  	      ID,
13:32:31 682  	      GROUP_ACCOUNT_ID,
13:32:31 683  	      EMAIL_DOMAIN,
13:32:31 684  	      IS_ACTIVE
13:32:31 685  	     FROM
13:32:31 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
13:32:31 687  	     WHERE
13:32:31 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 689  	       (in_status IS NULL OR
13:32:31 690  		IS_ACTIVE = in_status)
13:32:31 691  	    ) Q
13:32:31 692  	  WHERE rownum <= l_end)
13:32:31 693  	WHERE rnum >= l_Start;
13:32:31 694  
13:32:31 695  EXCEPTION
13:32:31 696  WHEN OTHERS THEN
13:32:31 697  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
13:32:31 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
13:32:31 700  
13:32:31 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
13:32:31 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:31 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:31 704  ) AS
13:32:31 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
13:32:31 706  BEGIN
13:32:31 707  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
13:32:31 708  	    in_group_account_id => in_group_account_id,
13:32:31 709  	    in_updated_by => in_updated_by
13:32:31 710  	  );
13:32:31 711  EXCEPTION
13:32:31 712  WHEN OTHERS THEN
13:32:31 713  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
13:32:31 716  
13:32:31 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
13:32:31 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
13:32:31 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
13:32:31 720  ) AS
13:32:31 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
13:32:31 722  BEGIN
13:32:31 723  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_EMAIL_DOMAIN_BY_ID(
13:32:31 724  	    in_id => in_id,
13:32:31 725  	    in_updated_by => in_updated_by
13:32:31 726  	  );
13:32:31 727  EXCEPTION
13:32:31 728  WHEN OTHERS THEN
13:32:31 729  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
13:32:31 732  
13:32:31 733  PROCEDURE ADD_EMAIL_DOMAIN (
13:32:31 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
13:32:31 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
13:32:31 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
13:32:31 737  ) AS
13:32:31 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
13:32:31 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
13:32:31 740  var_is_dupe NUMBER(1);
13:32:31 741  var_group_account_count NUMBER := 0;
13:32:31 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
13:32:31 743  NOT_GL EXCEPTION;
13:32:31 744  DUPE EXCEPTION;
13:32:31 745  BEGIN
13:32:31 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
13:32:31 747  	  FROM
13:32:31 748  	    GROUP_ACCOUNT,
13:32:31 749  	    SUBSCRIPTION,
13:32:31 750  	    OFFER_CHAIN
13:32:31 751  	  WHERE
13:32:31 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
13:32:31 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
13:32:31 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 755  	  ;
13:32:31 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
13:32:31 757  	    RAISE NOT_GL;
13:32:31 758  	  END IF;
13:32:31 759  
13:32:31 760  	  --check if email domain already exists
13:32:31 761  	  SELECT count(1) into var_group_account_count
13:32:31 762  	  FROM
13:32:31 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
13:32:31 764  	  WHERE
13:32:31 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
13:32:31 766  	      EMAIL_DOMAIN = in_email_domain
13:32:31 767  	  ;
13:32:31 768  
13:32:31 769  	  IF(var_group_account_count > 0) THEN
13:32:31 770  	      SELECT ID into var_id
13:32:31 771  	      FROM
13:32:31 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
13:32:31 773  	      WHERE
13:32:31 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
13:32:31 775  		  EMAIL_DOMAIN = in_email_domain AND
13:32:31 776  		  rownum <= 1;
13:32:31 777  	      PROCS_GROUP_ACCOUNT_CRU_V20.ENABLE_EMAIL_DOMAIN_BY_ID(
13:32:31 778  		  in_id => var_id,
13:32:31 779  		  in_updated_by => in_created_by
13:32:31 780  		  );
13:32:31 781  	  ELSE
13:32:31 782  	      PROCS_GROUP_ACCOUNT_CRU_V20.ADD_EMAIL_DOMAIN(
13:32:31 783  		  in_group_account_id => in_group_account_id,
13:32:31 784  		  in_email_domain => in_email_domain,
13:32:31 785  		      in_is_active => GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT,
13:32:31 786  		  in_created_by => in_created_by
13:32:31 787  	      );
13:32:31 788  	  END IF;
13:32:31 789  
13:32:31 790  EXCEPTION
13:32:31 791  WHEN NOT_GL THEN
13:32:31 792  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
13:32:31 794  WHEN OTHERS THEN
13:32:31 795  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 797  END ADD_EMAIL_DOMAIN;
13:32:31 798  
13:32:31 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
13:32:31 800  	in_group_account_id    IN NUMBER,
13:32:31 801  	in_borrower_account_id IN NUMBER,
13:32:31 802  	in_ip_address	       IN VARCHAR2,
13:32:31 803  	in_email_domain        IN VARCHAR2,
13:32:31 804  	in_created_by	       IN VARCHAR2
13:32:31 805  ) AS
13:32:31 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
13:32:31 807  ga_ttl_in_hours NUMBER := NULL;
13:32:31 808  start_date DATE := NULL;
13:32:31 809  end_date DATE := NULL;
13:32:31 810  BEGIN
13:32:31 811  	start_date := sysdate;
13:32:31 812  	end_date   := GLOBAL_CONSTANTS_V20.MAX_DATE;
13:32:31 813  
13:32:31 814  	BEGIN
13:32:31 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
13:32:31 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
13:32:31 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
13:32:31 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
13:32:31 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
13:32:31 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
13:32:31 821  	EXCEPTION
13:32:31 822  	  WHEN no_data_found THEN
13:32:31 823  	    ga_ttl_in_hours := NULL;
13:32:31 824  	END;
13:32:31 825  
13:32:31 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
13:32:31 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
13:32:31 828  	END IF;
13:32:31 829  
13:32:31 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.CREATE_SUBSCRIPTION_SHARE(
13:32:31 831  	  in_group_account_id => in_group_account_id,
13:32:31 832  	  in_borrower_account_id => in_borrower_account_id,
13:32:31 833  	  in_ip_address => in_ip_address,
13:32:31 834  	  in_email_domain => in_email_domain,
13:32:31 835  	  in_start_date => start_date,
13:32:31 836  	  in_end_date => end_date,
13:32:31 837  	  in_created_by => in_created_by
13:32:31 838  	);
13:32:31 839  END CREATE_SUBSCRIPTION_SHARE;
13:32:31 840  
13:32:31 841  
13:32:31 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
13:32:31 843  	in_group_account_id   IN NUMBER,
13:32:31 844  	out_occupied_seats   OUT NUMBER
13:32:31 845  ) AS
13:32:31 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
13:32:31 847  BEGIN
13:32:31 848  	SELECT
13:32:31 849  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
13:32:31 850  	FROM dual;
13:32:31 851  EXCEPTION
13:32:31 852  WHEN OTHERS THEN
13:32:31 853  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
13:32:31 856  
13:32:31 857  
13:32:31 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
13:32:31 859  	in_group_account_id   IN NUMBER
13:32:31 860  ) RETURN NUMBER IS
13:32:31 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
13:32:31 862  num_seats NUMBER;
13:32:31 863  BEGIN
13:32:31 864  	SELECT
13:32:31 865  	  COUNT(1) INTO num_seats
13:32:31 866  	FROM
13:32:31 867  	  SUBSCRIPTION_SHARE
13:32:31 868  	WHERE
13:32:31 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
13:32:31 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
13:32:31 871  	RETURN num_seats;
13:32:31 872  EXCEPTION
13:32:31 873  WHEN OTHERS THEN
13:32:31 874  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
13:32:31 877  
13:32:31 878  -- *********************************************************************
13:32:31 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
13:32:31 880  -- *********************************************************************
13:32:31 881  -- I'm debating if this should be in a different package, but right now
13:32:31 882  -- I'm too lazy to move this else where.
13:32:31 883  -- *********************************************************************
13:32:31 884  
13:32:31 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
13:32:31 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:31 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:31 888  ) AS
13:32:31 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
13:32:31 890  BEGIN
13:32:31 891  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_IP_RANGES_BY_GA_ID(
13:32:31 892  	    in_group_account_id => in_group_account_id,
13:32:31 893  	    in_updated_by => in_updated_by
13:32:31 894  	  );
13:32:31 895  EXCEPTION
13:32:31 896  WHEN OTHERS THEN
13:32:31 897  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 899  END DISABLE_IP_RANGES_BY_GA_ID;
13:32:31 900  
13:32:31 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
13:32:31 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
13:32:31 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
13:32:31 904  ) AS
13:32:31 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
13:32:31 906  BEGIN
13:32:31 907  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_IP_RANGE_BY_ID(
13:32:31 908  	    in_id => in_id,
13:32:31 909  	    in_updated_by => in_updated_by
13:32:31 910  	  );
13:32:31 911  EXCEPTION
13:32:31 912  WHEN OTHERS THEN
13:32:31 913  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 915  END DISABLE_IP_RANGE_BY_ID;
13:32:31 916  
13:32:31 917  PROCEDURE ADD_IP_RANGE (
13:32:31 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
13:32:31 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
13:32:31 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
13:32:31 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
13:32:31 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
13:32:31 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
13:32:31 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
13:32:31 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
13:32:31 926  ) AS
13:32:31 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
13:32:31 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
13:32:31 929  var_is_dupe NUMBER(1);
13:32:31 930  NOT_GL EXCEPTION;
13:32:31 931  DUPE EXCEPTION;
13:32:31 932  BEGIN
13:32:31 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
13:32:31 934  	  FROM
13:32:31 935  	    GROUP_ACCOUNT,
13:32:31 936  	    SUBSCRIPTION,
13:32:31 937  	    OFFER_CHAIN
13:32:31 938  	  WHERE
13:32:31 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
13:32:31 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
13:32:31 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 942  	  ;
13:32:31 943  	  IF(var_ga_type != 'GL') THEN
13:32:31 944  	    RAISE NOT_GL;
13:32:31 945  	  END IF;
13:32:31 946  
13:32:31 947  	  PROCS_GROUP_ACCOUNT_CRU_V20.ADD_IP_RANGE(
13:32:31 948  	    in_group_account_id => in_group_account_id,
13:32:31 949  	    in_minimum_ip_string => in_minimum_ip_string,
13:32:31 950  	    in_minimum_ip_low => in_minimum_ip_low,
13:32:31 951  	    in_minimum_ip_high => in_minimum_ip_high,
13:32:31 952  	    in_maximum_ip_string => in_maximum_ip_string,
13:32:31 953  	    in_maximum_ip_low => in_maximum_ip_low,
13:32:31 954  	    in_maximum_ip_high => in_maximum_ip_high,
13:32:31 955  	    in_created_by => in_created_by
13:32:31 956  	  );
13:32:31 957  
13:32:31 958  	  -- Check for overlapping ip address range after insert.  Note that if another
13:32:31 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
13:32:31 960  	  SELECT count(1) into var_is_dupe
13:32:31 961  	  FROM
13:32:31 962  	    GROUP_ACCOUNT_IP_RANGE
13:32:31 963  	  WHERE
13:32:31 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE AND
13:32:31 965  		((
13:32:31 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
13:32:31 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
13:32:31 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
13:32:31 969  		) OR
13:32:31 970  
13:32:31 971  		(
13:32:31 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
13:32:31 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
13:32:31 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
13:32:31 975  		)) AND
13:32:31 976  	    ROWNUM < 3;
13:32:31 977  
13:32:31 978  	  If(var_is_dupe > 1) THEN
13:32:31 979  	    RAISE DUPE;
13:32:31 980  	  END IF;
13:32:31 981  EXCEPTION
13:32:31 982  WHEN NOT_GL THEN
13:32:31 983  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
13:32:31 985  WHEN DUPE THEN
13:32:31 986  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
13:32:31 988  WHEN OTHERS THEN
13:32:31 989  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 991  END ADD_IP_RANGE;
13:32:31 992  
13:32:31 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
13:32:31 994  	in_group_account_id IN NUMBER,
13:32:31 995  	out_group_id OUT NUMBER
13:32:31 996  ) AS
13:32:31 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
13:32:31 998  BEGIN
13:32:31 999  	SELECT
13:32:31 1000  	   a.group_id into out_group_id
13:32:31 1001  	 FROM
13:32:31 1002  	   account a,
13:32:31 1003  	   subscription s,
13:32:31 1004  	   group_account ga
13:32:31 1005  	 WHERE
13:32:31 1006  	   a.id = s.account_id and
13:32:31 1007  	   s.id = ga.subscription_id and
13:32:31 1008  	   ga.id = in_group_account_id and
13:32:31 1009  	   rownum < 2
13:32:31 1010  	 ;
13:32:31 1011  EXCEPTION
13:32:31 1012  WHEN NO_DATA_FOUND THEN
13:32:31 1013  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1014  	   SPROC_NAME, 'Bad group_account_id');
13:32:31 1015  WHEN OTHERS THEN
13:32:31 1016  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
13:32:31 1019  
13:32:31 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
13:32:31 1021  	 in_group_account_ip_range_id IN NUMBER,
13:32:31 1022  	 out_group_id OUT NUMBER
13:32:31 1023  ) AS
13:32:31 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
13:32:31 1025  BEGIN
13:32:31 1026  	 SELECT
13:32:31 1027  	   a.group_id into out_group_id
13:32:31 1028  	 FROM
13:32:31 1029  	   account a,
13:32:31 1030  	   subscription s,
13:32:31 1031  	   group_account ga,
13:32:31 1032  	   group_account_ip_range ir
13:32:31 1033  	 WHERE
13:32:31 1034  	   a.id = s.account_id and
13:32:31 1035  	   s.id = ga.subscription_id and
13:32:31 1036  	   ga.id = ir.group_account_id and
13:32:31 1037  	   ir.id = in_group_account_ip_range_id and
13:32:31 1038  	   rownum < 2
13:32:31 1039  	 ;
13:32:31 1040  EXCEPTION
13:32:31 1041  WHEN NO_DATA_FOUND THEN
13:32:31 1042  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
13:32:31 1044  WHEN OTHERS THEN
13:32:31 1045  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
13:32:31 1048  
13:32:31 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
13:32:31 1050  	 in_group_account_email_dom_id IN NUMBER,
13:32:31 1051  	 out_group_id OUT NUMBER
13:32:31 1052  ) AS
13:32:31 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
13:32:31 1054  BEGIN
13:32:31 1055  	 SELECT
13:32:31 1056  	   a.group_id into out_group_id
13:32:31 1057  	 FROM
13:32:31 1058  	   account a,
13:32:31 1059  	   subscription s,
13:32:31 1060  	   group_account ga,
13:32:31 1061  	   group_account_email_domain ir
13:32:31 1062  	 WHERE
13:32:31 1063  	   a.id = s.account_id and
13:32:31 1064  	   s.id = ga.subscription_id and
13:32:31 1065  	   ga.id = ir.group_account_id and
13:32:31 1066  	   ir.id = in_group_account_email_dom_id and
13:32:31 1067  	   rownum < 2
13:32:31 1068  	 ;
13:32:31 1069  EXCEPTION
13:32:31 1070  WHEN NO_DATA_FOUND THEN
13:32:31 1071  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
13:32:31 1073  WHEN OTHERS THEN
13:32:31 1074  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
13:32:31 1077  
13:32:31 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
13:32:31 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
13:32:31 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
13:32:31 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
13:32:31 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
13:32:31 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
13:32:31 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
13:32:31 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:31 1086  ) AS
13:32:31 1087  BEGIN
13:32:31 1088  	 PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_GROUP_ACCOUNT(
13:32:31 1089  	   in_group_account_id => in_group_account_id,
13:32:31 1090  	   in_group_name => in_group_name,
13:32:31 1091  	   in_first_name => in_first_name,
13:32:31 1092  	   in_last_name => in_last_name,
13:32:31 1093  	   in_email => in_email,
13:32:31 1094  	   in_phone => in_phone,
13:32:31 1095  	   in_updated_by => in_updated_by
13:32:31 1096  	 );
13:32:31 1097  END UPDATE_GROUP_ACCOUNT;
13:32:31 1098  
13:32:31 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
13:32:31 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
13:32:31 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
13:32:31 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
13:32:31 1103  ) AS
13:32:31 1104  BEGIN
13:32:31 1105  	 PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_GROUP_ACCOUNT_SEATS(
13:32:31 1106  	   in_group_account_id => in_group_account_id,
13:32:31 1107  	   in_seats => in_seats,
13:32:31 1108  	   in_updated_by => in_updated_by
13:32:31 1109  	 );
13:32:31 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
13:32:31 1111  
13:32:31 1112  END PROCS_GROUP_ACCOUNT_V20;
13:32:31 1113  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.09
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE TEST_CLEAR_ALL IS
13:32:31   4  BEGIN
13:32:31   5  	DELETE FROM TAX_ADJUSTMENT;
13:32:31   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
13:32:31   7  	DELETE FROM INVOICE_ADJUSTMENT;
13:32:31   8  	DELETE FROM LICENSE;
13:32:31   9  	DELETE FROM OFFER_OFFER_CHAIN;
13:32:31  10  	delete from offer_product_offering;
13:32:31  11  	delete from tax;
13:32:31  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
13:32:31  13  	delete from discount_line_item; -- ?
13:32:31  14  	delete from discount; -- ?
13:32:31  15  	DELETE FROM LINE_ITEM;
13:32:31  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
13:32:31  17  	DELETE FROM PRODUCT_OFFERING;
13:32:31  18  	DELETE FROM PRODUCT;
13:32:31  19  	DELETE FROM INVOICE_NOTE;
13:32:31  20  	DELETE FROM GIFT_CERTIFICATE;
13:32:31  21  	DELETE FROM OFFER;
13:32:31  22  	DELETE FROM OFFER_CHAIN_META_DATA;
13:32:31  23  	DELETE FROM SUBSCRIPTION_NOTE;
13:32:31  24  	DELETE FROM SUBSCRIPTION_META_DATA;
13:32:31  25  	DELETE FROM SUBSCRIPTION;
13:32:31  26  	DELETE FROM CREDIT_CARD;
13:32:31  27  	DELETE FROM FLAGGED_ACCOUNTS;
13:32:31  28  	DELETE FROM ACCOUNT_NOTE;
13:32:31  29  	DELETE FROM ACCOUNT_LOCK;
13:32:31  30  	DELETE FROM ACCOUNT;
13:32:31  31  	DELETE FROM CHARGE;
13:32:31  32  	DELETE FROM TRANSACTION_ATTEMPT;
13:32:31  33  	DELETE FROM CHARGEBACK;
13:32:31  34  	DELETE FROM TRANSACTION;
13:32:31  35  	DELETE FROM INVOICE_NOTE;
13:32:31  36  	DELETE FROM INVOICE;
13:32:31  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
13:32:31  38  	DELETE FROM OFFER_CHAIN;
13:32:31  39  END TEST_CLEAR_ALL;
13:32:31  40  
13:32:31  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
13:32:31  42  BEGIN
13:32:31  43  	DELETE FROM OFFER_OFFER_CHAIN;
13:32:31  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
13:32:31  45  	DELETE FROM TAX;
13:32:31  46  	DELETE FROM PRODUCT_OFFERING;
13:32:31  47  	DELETE FROM PRODUCT;
13:32:31  48  	DELETE FROM OFFER;
13:32:31  49  	DELETE FROM OFFER_CHAIN_META_DATA;
13:32:31  50  	DELETE FROM OFFER_CHAIN;
13:32:31  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
13:32:31  52  END;
13:32:31  53  
13:32:31  54  /******************************************/
13:32:31  55  
13:32:31  56  PROCEDURE TEST_GET_ACCOUNT (
13:32:31  57  	in_group_id	IN NUMBER,
13:32:31  58  	out_result_set	OUT SYS_REFCURSOR
13:32:31  59  ) AS
13:32:31  60  BEGIN
13:32:31  61  
13:32:31  62  	OPEN out_result_set FOR
13:32:31  63  	SELECT *
13:32:31  64  	FROM
13:32:31  65  	  ACCOUNT
13:32:31  66  	WHERE
13:32:31  67  	  ACCOUNT.GROUP_ID = in_group_id;
13:32:31  68  
13:32:31  69  END TEST_GET_ACCOUNT;
13:32:31  70  
13:32:31  71  /*******************************************/
13:32:31  72  
13:32:31  73  PROCEDURE TEST_GET_SUBSCRIPTION (
13:32:31  74  	in_subscription_id IN NUMBER,
13:32:31  75  	out_result_set	   OUT SYS_REFCURSOR
13:32:31  76  ) AS
13:32:31  77  BEGIN
13:32:31  78  	OPEN out_result_set FOR
13:32:31  79  	SELECT *
13:32:31  80  	FROM
13:32:31  81  	  SUBSCRIPTION
13:32:31  82  	WHERE
13:32:31  83  	  SUBSCRIPTION.ID = in_subscription_id;
13:32:31  84  
13:32:31  85  END TEST_GET_SUBSCRIPTION;
13:32:31  86  
13:32:31  87  /***************************************************/
13:32:31  88  
13:32:31  89  PROCEDURE TEST_DELETE_INVOICE (
13:32:31  90  	in_invoice_id IN NUMBER
13:32:31  91  ) AS
13:32:31  92  var_line_item_id_set SYS_REFCURSOR;
13:32:31  93  var_line_item_id	   NUMBER;
13:32:31  94  
13:32:31  95  var_charge_id_set  SYS_REFCURSOR;
13:32:31  96  var_charge_id	 NUMBER;
13:32:31  97  var_transaction_id NUMBER;
13:32:31  98  BEGIN
13:32:31  99  	-- GET ACCOUNT'S LINE_ITEMS
13:32:31 100  	OPEN var_line_item_id_set FOR
13:32:31 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
13:32:31 102  	LOOP
13:32:31 103  	  FETCH var_line_item_id_set into var_line_item_id;
13:32:31 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
13:32:31 105  
13:32:31 106  	  -- DELETE ADJUSTMENTS
13:32:31 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
13:32:31 108  	  LOOP
13:32:31 109  
13:32:31 110  	    -- DELETE DISCOUNT ADJUSTMENTS
13:32:31 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
13:32:31 112  
13:32:31 113  	    -- DELETE TAX ADJUSTMENTS
13:32:31 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
13:32:31 115  	  END LOOP;
13:32:31 116  
13:32:31 117  	  -- DELETE LINE ITEM ADJUSTMENTS
13:32:31 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
13:32:31 119  
13:32:31 120  	  -- DELETE DISCOUNT_LINE_ITEM
13:32:31 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
13:32:31 122  
13:32:31 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
13:32:31 124  
13:32:31 125  	  -- DELETE LINE ITEM
13:32:31 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
13:32:31 127  
13:32:31 128  	END LOOP;
13:32:31 129  
13:32:31 130  	-- DELETE INVOICE ADJUSTMENTS
13:32:31 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
13:32:31 132  
13:32:31 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
13:32:31 134  	OPEN var_charge_id_set FOR
13:32:31 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
13:32:31 136  	LOOP
13:32:31 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
13:32:31 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
13:32:31 139  	  -- DELETE CHARGEBACK
13:32:31 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
13:32:31 141  
13:32:31 142  	  -- DELETE TRANSACTION ATTEMP
13:32:31 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
13:32:31 144  
13:32:31 145  	  -- DELETE CHARGE
13:32:31 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
13:32:31 147  
13:32:31 148  	  -- DELETE TRANSACTION
13:32:31 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
13:32:31 150  	END LOOP;
13:32:31 151  
13:32:31 152  	-- DELETE INVOICE NOTES
13:32:31 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
13:32:31 154  
13:32:31 155  	-- DELETE INVOICE
13:32:31 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
13:32:31 157  END;
13:32:31 158  
13:32:31 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
13:32:31 160  	in_group_id IN NUMBER
13:32:31 161  ) AS
13:32:31 162  -- VARIABLES
13:32:31 163  var_account_id NUMBER;
13:32:31 164  
13:32:31 165  -- CURSORS
13:32:31 166  var_subscription_id_set SYS_REFCURSOR;
13:32:31 167  var_subscription_id     NUMBER;
13:32:31 168  
13:32:31 169  var_license_id_set SYS_REFCURSOR;
13:32:31 170  var_license_id	 NUMBER;
13:32:31 171  var_invoice_id	 NUMBER;
13:32:31 172  
13:32:31 173  var_gift_certificate_id_set SYS_REFCURSOR;
13:32:31 174  var_gift_certificate_id	  NUMBER;
13:32:31 175  var_gc_purchase_invoice_id  NUMBER;
13:32:31 176  BEGIN
13:32:31 177  
13:32:31 178   /*FOR f_account in (
13:32:31 179  	  select id from account where group_id = in_group_id
13:32:31 180  	)
13:32:31 181  	loop
13:32:31 182  
13:32:31 183  	  -- delete account
13:32:31 184  	  delete from account where id = f_account.id;
13:32:31 185  
13:32:31 186  	end loop;*/
13:32:31 187  
13:32:31 188  	BEGIN
13:32:31 189  	  SELECT
13:32:31 190  	    ACCOUNT.ID into var_account_id
13:32:31 191  	  FROM
13:32:31 192  	    ACCOUNT
13:32:31 193  	  WHERE
13:32:31 194  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 195  	  EXCEPTION
13:32:31 196  	    WHEN NO_DATA_FOUND THEN
13:32:31 197  	      -- Nothing to do
13:32:31 198  	      RETURN;
13:32:31 199  	END;
13:32:31 200  
13:32:31 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
13:32:31 202  	OPEN var_subscription_id_set FOR
13:32:31 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
13:32:31 204  	LOOP
13:32:31 205  	  FETCH var_subscription_id_set into var_subscription_id;
13:32:31 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
13:32:31 207  
13:32:31 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
13:32:31 209  	  OPEN var_license_id_set FOR
13:32:31 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
13:32:31 211  	  LOOP
13:32:31 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
13:32:31 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
13:32:31 214  
13:32:31 215  
13:32:31 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
13:32:31 217  	    OPEN var_gift_certificate_id_set FOR
13:32:31 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
13:32:31 219  	    LOOP
13:32:31 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
13:32:31 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
13:32:31 222  
13:32:31 223  	      -- DELETE GIFT_CERTIFICATE
13:32:31 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
13:32:31 225  
13:32:31 226  	      -- DELETE LICENSE
13:32:31 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
13:32:31 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
13:32:31 229  	      END IF;
13:32:31 230  
13:32:31 231  	    END LOOP;
13:32:31 232  
13:32:31 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
13:32:31 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
13:32:31 235  
13:32:31 236  	    -- DELETE LICENSE
13:32:31 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
13:32:31 238  
13:32:31 239  	    -- DELETE INVOICE
13:32:31 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
13:32:31 241  	      TEST_DELETE_INVOICE(var_invoice_id);
13:32:31 242  	    END IF;
13:32:31 243  	  END LOOP;
13:32:31 244  
13:32:31 245  	  -- DELETE SUBSCRIPTION_NOTE
13:32:31 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
13:32:31 247  
13:32:31 248  	  -- DELETE SUBSCRIPTION META_DATA
13:32:31 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
13:32:31 250  
13:32:31 251  	  -- DELETE SUBSCRIPTION
13:32:31 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
13:32:31 253  	END LOOP;
13:32:31 254  
13:32:31 255  	-- DELETE CREDIT_CARDS
13:32:31 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
13:32:31 257  
13:32:31 258  	-- DELETE PAYPAL
13:32:31 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
13:32:31 260  
13:32:31 261  	-- DELETE FLAGS
13:32:31 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
13:32:31 263  
13:32:31 264  	-- DELETE ACCOUNT NOTES
13:32:31 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
13:32:31 266  
13:32:31 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
13:32:31 268  	OPEN var_gift_certificate_id_set FOR
13:32:31 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
13:32:31 270  	LOOP
13:32:31 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
13:32:31 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
13:32:31 273  
13:32:31 274  	  -- DELETE GIFT CERTIFICATE
13:32:31 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
13:32:31 276  
13:32:31 277  	  -- DELETE INVOICE
13:32:31 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
13:32:31 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
13:32:31 280  	  END IF;
13:32:31 281  	END LOOP;
13:32:31 282  
13:32:31 283  	-- DELETE LOCKS
13:32:31 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
13:32:31 285  
13:32:31 286  	-- DELETE ACCOUNT
13:32:31 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
13:32:31 288  
13:32:31 289  END TEST_DELETE_USER_ACCOUNT;
13:32:31 290  
13:32:31 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
13:32:31 292  	in_start_group_id IN NUMBER,
13:32:31 293  	in_end_group_id   IN NUMBER
13:32:31 294  ) IS
13:32:31 295   gid ACCOUNT.GROUP_ID%TYPE;
13:32:31 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
13:32:31 297  BEGIN
13:32:31 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
13:32:31 299  	/*
13:32:31 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
13:32:31 301  	LOOP
13:32:31 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
13:32:31 303  	END LOOP;*/
13:32:31 304  	OPEN c(in_start_group_id, in_end_group_id);
13:32:31 305  	WHILE c%ISOPEN LOOP
13:32:31 306  	  FETCH c INTO gid;
13:32:31 307  	  IF c%NOTFOUND THEN
13:32:31 308  	   CLOSE c;
13:32:31 309  	  END IF;
13:32:31 310  	  TEST_DELETE_USER_ACCOUNT(gid);
13:32:31 311  	END LOOP;
13:32:31 312  END;
13:32:31 313  
13:32:31 314  /**********************************************************/
13:32:31 315  
13:32:31 316  FUNCTION TEST_IS_INVOICE_EXISTS(
13:32:31 317  /*
13:32:31 318  1 - exists
13:32:31 319  0 - not exists
13:32:31 320  */
13:32:31 321  	in_invoice_id IN NUMBER
13:32:31 322  ) RETURN NUMBER AS
13:32:31 323  var_invoice_count NUMBER;
13:32:31 324  BEGIN
13:32:31 325  	SELECT
13:32:31 326  	  COUNT(*) into var_invoice_count
13:32:31 327  	FROM
13:32:31 328  	  INVOICE
13:32:31 329  	WHERE
13:32:31 330  	  INVOICE.ID = in_invoice_id;
13:32:31 331  	IF var_invoice_count = 0 THEN
13:32:31 332  	  RETURN 0;
13:32:31 333  	ELSE
13:32:31 334  	  RETURN 1;
13:32:31 335  	END IF;
13:32:31 336  END;
13:32:31 337  
13:32:31 338  PROCEDURE TEST_GET_INVOICE_INFO (
13:32:31 339  	in_invoice_id  IN NUMBER,
13:32:31 340  	out_result_set OUT SYS_REFCURSOR
13:32:31 341  ) AS
13:32:31 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
13:32:31 343  BEGIN
13:32:31 344  
13:32:31 345  	 OPEN out_result_set FOR SELECT
13:32:31 346  	    in_invoice_id AS "INVOICE_ID",
13:32:31 347  	    INVOICE.INVOICE_STATUS_ID,
13:32:31 348  	    PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
13:32:31 349  	    CHARGE.ID AS "CHARGE_ID",
13:32:31 350  	    CHARGE.CHARGE_AMOUNT,
13:32:31 351  	    CHARGE.TRANSACTION_ID,
13:32:31 352  	    TRANSACTION.TRANSACTION_STATUS_ID
13:32:31 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
13:32:31 354  
13:32:31 355  END TEST_GET_INVOICE_INFO;
13:32:31 356  
13:32:31 357  /******************************************************************************/
13:32:31 358  
13:32:31 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
13:32:31 360  	in_offer_chain_id in number
13:32:31 361  ) as
13:32:31 362  begin
13:32:31 363  
13:32:31 364  	for v_offer_chain in (
13:32:31 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
13:32:31 366  	)
13:32:31 367  	loop
13:32:31 368  
13:32:31 369  	  for v_offer in (
13:32:31 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
13:32:31 371  	  )
13:32:31 372  	  loop
13:32:31 373  
13:32:31 374  	    for v_product_offering in (
13:32:31 375  	      select
13:32:31 376  		product_offering.id,
13:32:31 377  		product_offering.product_id
13:32:31 378  	      from
13:32:31 379  		offer_product_offering
13:32:31 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
13:32:31 381  	      where offer_product_offering.offer_id = v_offer.id
13:32:31 382  	    )
13:32:31 383  	    loop
13:32:31 384  
13:32:31 385  	      -- delete product eligibility
13:32:31 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
13:32:31 387  
13:32:31 388  	      -- delete meta data
13:32:31 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
13:32:31 390  
13:32:31 391  	      -- delete product
13:32:31 392  	      delete from product where id = v_product_offering.product_id;
13:32:31 393  
13:32:31 394  	      -- delete product_offering
13:32:31 395  	      delete from product_offering where id = v_product_offering.id;
13:32:31 396  
13:32:31 397  	    end loop;
13:32:31 398  
13:32:31 399  	    -- delete data from offer_product_offering table
13:32:31 400  	    delete from offer_product_offering where offer_id = v_offer.id;
13:32:31 401  
13:32:31 402  	    -- delete data from offer_offer_chain table
13:32:31 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
13:32:31 404  
13:32:31 405  	    -- delete offer
13:32:31 406  	    delete from offer where id = v_offer.id;
13:32:31 407  
13:32:31 408  	  end loop;
13:32:31 409  
13:32:31 410  	  -- delete offer_chain_eligibility
13:32:31 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
13:32:31 412  
13:32:31 413  	  -- delete metadata
13:32:31 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
13:32:31 415  
13:32:31 416  	  -- delete offer chain
13:32:31 417  	  delete from offer_chain where id = v_offer_chain.id;
13:32:31 418  
13:32:31 419  	end loop;
13:32:31 420  
13:32:31 421  end;
13:32:31 422  
13:32:31 423  END PROCS_TEST_V20;
13:32:31 424  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.06
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
13:32:31   4  	in_group_id    IN  NUMBER,
13:32:31   5  	out_result_set OUT SYS_REFCURSOR
13:32:31   6  ) AS
13:32:31   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
13:32:31   8  BEGIN
13:32:31   9  	OPEN out_result_set FOR
13:32:31  10  	SELECT
13:32:31  11  	  Invoice.Id
13:32:31  12  	FROM
13:32:31  13  	  LICENSE
13:32:31  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:31  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
13:32:31  18  	Where
13:32:31  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
13:32:31  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V20.INVOICE_OPEN;
13:32:31  21  END INVOICE_IDS_BY_GROUP_ID;
13:32:31  22  
13:32:31  23  FUNCTION GET_GRACE_START_DATE(
13:32:31  24  	in_subscription_id IN NUMBER
13:32:31  25  ) RETURN DATE AS
13:32:31  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
13:32:31  27  grace_start_date_var DATE;
13:32:31  28  BEGIN
13:32:31  29  	SELECT GRACE_START_DATE into grace_start_date_var
13:32:31  30  	FROM
13:32:31  31  	  (
13:32:31  32  	    SELECT
13:32:31  33  	      GRACE_START_DATE
13:32:31  34  	    FROM
13:32:31  35  	      LICENSE
13:32:31  36  	    WHERE
13:32:31  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:31  38  	    ORDER BY
13:32:31  39  	      LICENSE.END_DATE DESC
13:32:31  40  	  )
13:32:31  41  	WHERE
13:32:31  42  	  ROWNUM <= 1;
13:32:31  43  
13:32:31  44  	RETURN grace_start_date_var;
13:32:31  45  END GET_GRACE_START_DATE;
13:32:31  46  
13:32:31  47  FUNCTION GET_GRACE_END_DATE(
13:32:31  48  	in_subscription_id IN NUMBER
13:32:31  49  ) RETURN DATE AS
13:32:31  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
13:32:31  51  grace_end_date_var DATE;
13:32:31  52  BEGIN
13:32:31  53  	SELECT GRACE_END_DATE into grace_end_date_var
13:32:31  54  	FROM
13:32:31  55  	  (
13:32:31  56  	    SELECT
13:32:31  57  	      GRACE_END_DATE
13:32:31  58  	    FROM
13:32:31  59  	      LICENSE
13:32:31  60  	    WHERE
13:32:31  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
13:32:31  62  	    ORDER BY
13:32:31  63  	      LICENSE.END_DATE DESC
13:32:31  64  	  )
13:32:31  65  	WHERE ROWNUM <= 1;
13:32:31  66  
13:32:31  67  	RETURN grace_end_date_var;
13:32:31  68  END GET_GRACE_END_DATE;
13:32:31  69  
13:32:31  70  
13:32:31  71  
13:32:31  72  PROCEDURE ANNOTATE_ACCOUNT (
13:32:31  73  	in_group_id   IN  NUMBER,
13:32:31  74  	in_agent_id   IN  NUMBER,
13:32:31  75  	in_note       IN  VARCHAR2,
13:32:31  76  	in_created_by IN  VARCHAR2
13:32:31  77  ) AS
13:32:31  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
13:32:31  79  -- VARIABLES
13:32:31  80  var_account_id	  NUMBER;
13:32:31  81  var_account_note_id NUMBER;
13:32:31  82  -- EXCEPTIONS
13:32:31  83  BAD_ACCOUNT_ID EXCEPTION;
13:32:31  84  BEGIN
13:32:31  85  
13:32:31  86  	-- Get account id
13:32:31  87  	BEGIN
13:32:31  88  	  SELECT
13:32:31  89  	    ACCOUNT.ID into var_account_id
13:32:31  90  	  FROM
13:32:31  91  	    ACCOUNT
13:32:31  92  	  WHERE
13:32:31  93  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31  94  	  EXCEPTION
13:32:31  95  	    WHEN NO_DATA_FOUND THEN
13:32:31  96  	      RAISE BAD_ACCOUNT_ID;
13:32:31  97  	END;
13:32:31  98  
13:32:31  99  	-- Insert new row into ACCOUNT_NOTE table
13:32:31 100  	PROCS_ACCOUNT_CRU_V20.CREATE_ACCOUNT_NOTE(
13:32:31 101  	  inout_account_note_id => var_account_note_id,
13:32:31 102  	  in_agent_id		=> in_agent_id,
13:32:31 103  	  in_account_id 	=> var_account_id,
13:32:31 104  	  in_note		=> in_note,
13:32:31 105  	  in_created_by 	=> in_created_by
13:32:31 106  	);
13:32:31 107  
13:32:31 108  EXCEPTION
13:32:31 109  WHEN BAD_ACCOUNT_ID THEN
13:32:31 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 111  	  SPROC_NAME, 'No such group id');
13:32:31 112  WHEN OTHERS THEN
13:32:31 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 115  END ANNOTATE_ACCOUNT;
13:32:31 116  
13:32:31 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
13:32:31 118  	in_group_id IN	NUMBER,
13:32:31 119  	out_exists  OUT NUMBER
13:32:31 120  ) AS
13:32:31 121  -- VARIABLES
13:32:31 122  var_found_id  NUMBER;
13:32:31 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
13:32:31 124  BEGIN
13:32:31 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
13:32:31 126  	out_exists := GLOBAL_CONSTANTS_V20.TRUE;
13:32:31 127  EXCEPTION
13:32:31 128  WHEN NO_DATA_FOUND THEN
13:32:31 129  	out_exists := GLOBAL_CONSTANTS_V20.FALSE;
13:32:31 130  WHEN OTHERS THEN
13:32:31 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 133  END ASSERT_ACCOUNT_EXISTS;
13:32:31 134  
13:32:31 135  PROCEDURE DISABLE_ACCOUNT (
13:32:31 136  	in_group_id   IN NUMBER,
13:32:31 137  	in_updated_by IN VARCHAR2,
13:32:31 138  	in_note       IN VARCHAR2,
13:32:31 139  	in_agent_id   IN NUMBER
13:32:31 140  ) AS
13:32:31 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
13:32:31 142  var_account_id	      NUMBER;
13:32:31 143  current_account_status  NUMBER;
13:32:31 144  
13:32:31 145  var_active_subscriptions_num NUMBER;
13:32:31 146  var_pending_invoices_num	   NUMBER;
13:32:31 147  
13:32:31 148  -- EXCEPTIONS
13:32:31 149  BAD_ACOUNT_ID		EXCEPTION;
13:32:31 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
13:32:31 151  PENDING_INVOICES_FOUND	EXCEPTION;
13:32:31 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
13:32:31 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
13:32:31 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
13:32:31 155  BEGIN
13:32:31 156  
13:32:31 157  	-- Get account's status and id
13:32:31 158  	BEGIN
13:32:31 159  	  SELECT
13:32:31 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
13:32:31 161  	    ACCOUNT.ID
13:32:31 162  	  INTO
13:32:31 163  	    current_account_status,
13:32:31 164  	    var_account_id
13:32:31 165  	  FROM ACCOUNT
13:32:31 166  	  WHERE
13:32:31 167  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 168  	  EXCEPTION
13:32:31 169  	    WHEN NO_DATA_FOUND THEN
13:32:31 170  	      RAISE BAD_ACOUNT_ID;
13:32:31 171  	END;
13:32:31 172  
13:32:31 173  	-- For now, we can disable account whenever
13:32:31 174  	IF current_account_status = GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
13:32:31 175  	  RAISE BAD_CURRENT_ACC_STATUS;
13:32:31 176  	END IF;
13:32:31 177  
13:32:31 178  	-- Checks for out outstanding balances
13:32:31 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
13:32:31 180  	SELECT
13:32:31 181  	  COUNT(*) into var_pending_invoices_num
13:32:31 182  	FROM
13:32:31 183  	  LICENSE
13:32:31 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:31 186  	WHERE
13:32:31 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.INVOICE_OPEN FROM DUAL );
13:32:31 189  
13:32:31 190  	IF var_pending_invoices_num > 0 THEN
13:32:31 191  	  RAISE PENDING_INVOICES_FOUND;
13:32:31 192  	END IF;
13:32:31 193  
13:32:31 194  	SELECT
13:32:31 195  	  COUNT(*) into var_active_subscriptions_num
13:32:31 196  	FROM
13:32:31 197  	  SUBSCRIPTION
13:32:31 198  	WHERE
13:32:31 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 200  	  AND (
13:32:31 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
13:32:31 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
13:32:31 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
13:32:31 204  
13:32:31 205  	IF var_active_subscriptions_num > 0 THEN
13:32:31 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
13:32:31 207  	END IF;
13:32:31 208  
13:32:31 209  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
13:32:31 210  	  in_account_id        => var_account_id,
13:32:31 211  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_DISABLED,
13:32:31 212  	  in_updated_by        => in_updated_by
13:32:31 213  	);
13:32:31 214  
13:32:31 215  	-- Annotate account
13:32:31 216  	IF in_note IS NOT NULL THEN
13:32:31 217  	  BEGIN
13:32:31 218  	    PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
13:32:31 219  	      in_group_id   => in_group_id,
13:32:31 220  	      in_agent_id   => in_agent_id,
13:32:31 221  	      in_note	    => in_note,
13:32:31 222  	      in_created_by => in_updated_by
13:32:31 223  	    );
13:32:31 224  	    EXCEPTION
13:32:31 225  	      WHEN OTHERS THEN
13:32:31 226  		EXCEPTION_MESSAGE := SQLERRM;
13:32:31 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
13:32:31 228  	  END;
13:32:31 229  	END IF;
13:32:31 230  
13:32:31 231  EXCEPTION
13:32:31 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
13:32:31 233  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
13:32:31 235  WHEN BAD_CURRENT_ACC_STATUS THEN
13:32:31 236  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:31 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
13:32:31 238  WHEN PENDING_INVOICES_FOUND THEN
13:32:31 239  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
13:32:31 241  WHEN BAD_ACOUNT_ID THEN
13:32:31 242  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 243  	  SPROC_NAME, 'No such account');
13:32:31 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
13:32:31 245  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
13:32:31 247  WHEN OTHERS THEN
13:32:31 248  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 250  END DISABLE_ACCOUNT;
13:32:31 251  
13:32:31 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
13:32:31 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
13:32:31 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
13:32:31 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
13:32:31 256  ) AS
13:32:31 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
13:32:31 258  var_count  NUMBER  := 0;
13:32:31 259  BEGIN
13:32:31 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
13:32:31 261  
13:32:31 262  	IF (var_count = 0) THEN
13:32:31 263  	  PROCS_ACCOUNT_CRU_V20.CREATE_ACCOUNT(
13:32:31 264  	      out_account_id	    => out_new_account_id,
13:32:31 265  	      in_account_status_id  => GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE,
13:32:31 266  	      in_group_id	    => in_group_id,
13:32:31 267  	      in_created_by	    => in_created_by,
13:32:31 268  	      in_system_category_id => GLOBAL_ENUMS_V20.SYSTEM_CATEGORY_LIVE
13:32:31 269  	  );
13:32:31 270  	ELSE
13:32:31 271  	  out_new_account_id := NULL;
13:32:31 272  	END IF;
13:32:31 273  END CREATE_ACTIVE_ACCOUNT;
13:32:31 274  
13:32:31 275  PROCEDURE REACTIVATE_ACCOUNT (
13:32:31 276  	in_group_id   IN NUMBER,
13:32:31 277  	in_updated_by IN VARCHAR2,
13:32:31 278  	in_note       IN VARCHAR2,
13:32:31 279  	in_agent_id   IN NUMBER
13:32:31 280  ) AS
13:32:31 281  -- VARIABLES
13:32:31 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
13:32:31 283  var_account_id	      NUMBER;
13:32:31 284  current_account_status  NUMBER;
13:32:31 285  
13:32:31 286  -- EXCEPTIONS
13:32:31 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
13:32:31 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
13:32:31 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:31 290  BEGIN
13:32:31 291  	-- Get account id, status
13:32:31 292  	SELECT
13:32:31 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
13:32:31 294  	  ACCOUNT.ID
13:32:31 295  	INTO
13:32:31 296  	  current_account_status,
13:32:31 297  	  var_account_id
13:32:31 298  	FROM ACCOUNT
13:32:31 299  	WHERE
13:32:31 300  	  ACCOUNT.GROUP_ID = in_group_id;
13:32:31 301  
13:32:31 302  	IF current_account_status != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
13:32:31 303  	  RAISE BAD_CURRENT_ACC_STATUS;
13:32:31 304  	END IF;
13:32:31 305  
13:32:31 306  	-- Change account status
13:32:31 307  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
13:32:31 308  	  in_account_id        => var_account_id,
13:32:31 309  	  in_updated_by        => in_updated_by,
13:32:31 310  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
13:32:31 311  	);
13:32:31 312  
13:32:31 313  	-- Add note
13:32:31 314  	BEGIN
13:32:31 315  	  PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
13:32:31 316  	    in_group_id   => in_group_id,
13:32:31 317  	    in_agent_id   => in_agent_id,
13:32:31 318  	    in_note	  => in_note,
13:32:31 319  	    in_created_by => in_updated_by
13:32:31 320  	  );
13:32:31 321  	  EXCEPTION
13:32:31 322  	    WHEN OTHERS THEN
13:32:31 323  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:31 324  	      RAISE CAN_NOT_CREATE_NOTE;
13:32:31 325  	END;
13:32:31 326  
13:32:31 327  EXCEPTION
13:32:31 328  WHEN BAD_CURRENT_ACC_STATUS THEN
13:32:31 329  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:31 330  	  SPROC_NAME, 'Current account status is not "frozen"');
13:32:31 331  WHEN NO_DATA_FOUND THEN
13:32:31 332  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 333  	  SPROC_NAME, 'Could not find account with given group ID');
13:32:31 334  WHEN CAN_NOT_CREATE_NOTE THEN
13:32:31 335  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 336  	  SPROC_NAME, 'Could not annotate account');
13:32:31 337  WHEN OTHERS THEN
13:32:31 338  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 340  END REACTIVATE_ACCOUNT;
13:32:31 341  
13:32:31 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
13:32:31 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
13:32:31 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE,
13:32:31 345  	out_result_set OUT SYS_REFCURSOR
13:32:31 346  ) AS
13:32:31 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
13:32:31 348  BEGIN
13:32:31 349  	OPEN out_result_set FOR
13:32:31 350  	  SELECT
13:32:31 351  	    CREDIT_CARD.ID,
13:32:31 352  	    CREDIT_CARD.ACCOUNT_ID,
13:32:31 353  	    CREDIT_CARD.INSTRUMENT_NAME,
13:32:31 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
13:32:31 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
13:32:31 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
13:32:31 357  	    CREDIT_CARD.STATE,
13:32:31 358  	    CREDIT_CARD.CITY,
13:32:31 359  	    CREDIT_CARD.POSTAL_CODE,
13:32:31 360  	    CREDIT_CARD.COUNTRY,
13:32:31 361  	    CREDIT_CARD.LAST_FOUR_CC,
13:32:31 362  	    CREDIT_CARD.EXPIRATION_DATE,
13:32:31 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
13:32:31 364  	    CREDIT_CARD.SECRET_TOKEN,
13:32:31 365  	    CREDIT_CARD.CREATE_DATE,
13:32:31 366  	    CREDIT_CARD.CREATED_BY,
13:32:31 367  	    CREDIT_CARD.UPDATE_DATE,
13:32:31 368  	    CREDIT_CARD.UPDATED_BY,
13:32:31 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
13:32:31 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
13:32:31 371  	    Credit_Card.Private_Last_Name,
13:32:31 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
13:32:31 373  	  From
13:32:31 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
13:32:31 375  	  Where
13:32:31 376  	    Account.Group_Id = in_group_id
13:32:31 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
13:32:31 378  END GET_ACCOUNT_CREDIT_CARDS;
13:32:31 379  
13:32:31 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
13:32:31 381  	in_group_id	  IN NUMBER,
13:32:31 382  	out_result_gc_set OUT SYS_REFCURSOR,
13:32:31 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
13:32:31 384  ) AS
13:32:31 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
13:32:31 386  var_account_id NUMBER;
13:32:31 387  
13:32:31 388  -- Exceptions
13:32:31 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
13:32:31 390  BEGIN
13:32:31 391  
13:32:31 392  	-- Get account id
13:32:31 393  	SELECT
13:32:31 394  	  ACCOUNT.ID INTO var_account_id
13:32:31 395  	FROM
13:32:31 396  	  ACCOUNT
13:32:31 397  	WHERE
13:32:31 398  	  ACCOUNT.GROUP_ID = in_group_id;
13:32:31 399  
13:32:31 400  	-- Check that incoming data is correct
13:32:31 401  	IF in_instr_status != GLOBAL_CONSTANTS_V20.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V20.FALSE THEN
13:32:31 402  	  RAISE WRONG_INSTR_EXCEPTION;
13:32:31 403  	END IF;
13:32:31 404  
13:32:31 405  	OPEN out_result_gc_set FOR
13:32:31 406  	SELECT
13:32:31 407  	  GIFT_CERTIFICATE.ID,
13:32:31 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
13:32:31 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
13:32:31 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
13:32:31 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
13:32:31 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
13:32:31 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
13:32:31 414  	  GIFT_CERTIFICATE.CODE,
13:32:31 415  	  GIFT_CERTIFICATE.CREATE_DATE,
13:32:31 416  	  GIFT_CERTIFICATE.CREATED_BY,
13:32:31 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
13:32:31 418  	  GIFT_CERTIFICATE.UPDATED_BY,
13:32:31 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
13:32:31 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
13:32:31 421  	  GIFT_CERTIFICATE.SENDER_NAME,
13:32:31 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
13:32:31 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
13:32:31 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
13:32:31 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
13:32:31 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
13:32:31 427  	FROM
13:32:31 428  	  GIFT_CERTIFICATE
13:32:31 429  	WHERE
13:32:31 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
13:32:31 431  	  AND (
13:32:31 432  		( in_instr_status = GLOBAL_CONSTANTS_V20.TRUE AND
13:32:31 433  		  (
13:32:31 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
13:32:31 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
13:32:31 436  		  )
13:32:31 437  		)
13:32:31 438  		OR
13:32:31 439  		(
13:32:31 440  		  in_instr_status = GLOBAL_CONSTANTS_V20.FALSE AND
13:32:31 441  		  (
13:32:31 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
13:32:31 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
13:32:31 444  		  )
13:32:31 445  		)
13:32:31 446  	      );
13:32:31 447  
13:32:31 448  EXCEPTION
13:32:31 449  WHEN NO_DATA_FOUND THEN
13:32:31 450  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 451  	  SPROC_NAME, 'Can not find account with given group id');
13:32:31 452  WHEN WRONG_INSTR_EXCEPTION THEN
13:32:31 453  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 454  	  SPROC_NAME, 'Wrong gift certificate type');
13:32:31 455  WHEN OTHERS THEN
13:32:31 456  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
13:32:31 459  
13:32:31 460  PROCEDURE GET_ACCOUNT_INFO  (
13:32:31 461  	  in_group_id	    IN	NUMBER,
13:32:31 462  	  out_account_info  OUT SYS_REFCURSOR
13:32:31 463  ) AS
13:32:31 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
13:32:31 465  var_account_id  NUMBER;
13:32:31 466  BEGIN
13:32:31 467  
13:32:31 468  	-- Get account id
13:32:31 469  	SELECT
13:32:31 470  	  ACCOUNT.ID INTO var_account_id
13:32:31 471  	FROM
13:32:31 472  	  ACCOUNT
13:32:31 473  	WHERE
13:32:31 474  	  ACCOUNT.GROUP_ID = in_group_id;
13:32:31 475  
13:32:31 476  	-- Get account info
13:32:31 477  	OPEN out_account_info FOR
13:32:31 478  	  SELECT
13:32:31 479  	    ACCOUNT.ACCOUNT_STATUS_ID
13:32:31 480  	  FROM ACCOUNT
13:32:31 481  	  WHERE
13:32:31 482  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 483  
13:32:31 484  EXCEPTION
13:32:31 485  WHEN NO_DATA_FOUND THEN
13:32:31 486  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 487  	  SPROC_NAME, 'No such account');
13:32:31 488  WHEN OTHERS THEN
13:32:31 489  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
13:32:31 491  END GET_ACCOUNT_INFO;
13:32:31 492  
13:32:31 493  PROCEDURE GET_ACCOUNT_NOTES (
13:32:31 494  	  in_group_id	 IN  NUMBER,
13:32:31 495  	  out_result_set OUT SYS_REFCURSOR
13:32:31 496  ) AS
13:32:31 497  -- VARIABLES
13:32:31 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
13:32:31 499  var_account_id NUMBER;
13:32:31 500  -- EXCEPTIONS
13:32:31 501  BAD_ACCOUNT_ID EXCEPTION;
13:32:31 502  BEGIN
13:32:31 503  
13:32:31 504  	-- Check that account is exists
13:32:31 505  	BEGIN
13:32:31 506  	  SELECT
13:32:31 507  	    ACCOUNT.ID into var_account_id
13:32:31 508  	  FROM
13:32:31 509  	    ACCOUNT
13:32:31 510  	  WHERE
13:32:31 511  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 512  	  EXCEPTION
13:32:31 513  	    WHEN NO_DATA_FOUND THEN
13:32:31 514  	      RAISE BAD_ACCOUNT_ID;
13:32:31 515  	END;
13:32:31 516  
13:32:31 517  	-- Get account notes
13:32:31 518  	OPEN out_result_set FOR
13:32:31 519  	SELECT
13:32:31 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
13:32:31 521  	  ACCOUNT_NOTE.AGENT_ID,
13:32:31 522  	  ACCOUNT_NOTE.CREATE_DATE,
13:32:31 523  	  ACCOUNT_NOTE.CREATED_BY,
13:32:31 524  	  ACCOUNT_NOTE.ID,
13:32:31 525  	  ACCOUNT_NOTE.NOTE
13:32:31 526  	FROM
13:32:31 527  	  ACCOUNT_NOTE
13:32:31 528  	WHERE
13:32:31 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
13:32:31 530  	ORDER BY
13:32:31 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
13:32:31 532  
13:32:31 533  EXCEPTION
13:32:31 534  WHEN BAD_ACCOUNT_ID THEN
13:32:31 535  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 536  	  SPROC_NAME, 'No such account');
13:32:31 537  WHEN OTHERS THEN
13:32:31 538  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 540  END GET_ACCOUNT_NOTES;
13:32:31 541  
13:32:31 542  PROCEDURE GET_ACCOUNT_PAYPALS(
13:32:31 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
13:32:31 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.PAYPAL_ACTIVE,
13:32:31 545  	out_result_set OUT SYS_REFCURSOR
13:32:31 546  ) AS
13:32:31 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
13:32:31 548  BEGIN
13:32:31 549  	OPEN out_result_set FOR
13:32:31 550  	  SELECT
13:32:31 551  	    DISTINCT
13:32:31 552  	    PAYPAL.ID,
13:32:31 553  	    PAYPAL.ACCOUNT_ID,
13:32:31 554  	    PAYPAL.INSTRUMENT_NAME,
13:32:31 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
13:32:31 556  	    PAYPAL.CREATE_DATE,
13:32:31 557  	    PAYPAL.CREATED_BY,
13:32:31 558  	    PAYPAL.UPDATE_DATE,
13:32:31 559  	    PAYPAL.UPDATED_BY,
13:32:31 560  	    PAYPAL.PAYPAL_STATUS_ID,
13:32:31 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
13:32:31 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
13:32:31 563  	    PAYPAL.STATE,
13:32:31 564  	    PAYPAL.CITY,
13:32:31 565  	    PAYPAL.POSTAL_CODE,
13:32:31 566  	    PAYPAL.COUNTRY,
13:32:31 567  	    Paypal.Expiration_Date,
13:32:31 568  	    Paypal.Secret_Token,
13:32:31 569  	    decode((SELECT
13:32:31 570  	    Instrument_Id
13:32:31 571  		    FROM ACCOUNT
13:32:31 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
13:32:31 573  	  FROM
13:32:31 574  	      PAYPAL
13:32:31 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
13:32:31 576  	  WHERE
13:32:31 577  	    ACCOUNT.GROUP_ID = in_group_id
13:32:31 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
13:32:31 579  END GET_ACCOUNT_PAYPALS;
13:32:31 580  
13:32:31 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
13:32:31 582  	  in_group_id	 IN  NUMBER,
13:32:31 583  	  in_start_date  IN DATE,
13:32:31 584  	  in_end_date	 IN DATE,
13:32:31 585  	  in_status	 IN NUMBER,
13:32:31 586  	  in_group_account_type IN VARCHAR2,
13:32:31 587  	  out_result_set OUT SYS_REFCURSOR
13:32:31 588  ) AS
13:32:31 589  -- VARIABLES
13:32:31 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
13:32:31 591  var_account_id NUMBER;
13:32:31 592  -- EXCEPTIONS
13:32:31 593  BAD_GROUP_ID	      EXCEPTION;
13:32:31 594  BEGIN
13:32:31 595  	-- Get account id
13:32:31 596  	BEGIN
13:32:31 597  	  SELECT
13:32:31 598  	    ACCOUNT.ID INTO var_account_id
13:32:31 599  	  FROM
13:32:31 600  	    ACCOUNT
13:32:31 601  	  WHERE
13:32:31 602  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 603  	  EXCEPTION
13:32:31 604  	    WHEN NO_DATA_FOUND THEN
13:32:31 605  	      RAISE BAD_GROUP_ID;
13:32:31 606  	END;
13:32:31 607  
13:32:31 608  	-- Get information about account subscriptions
13:32:31 609  	OPEN out_result_set FOR
13:32:31 610  	SELECT
13:32:31 611  	  in_group_id AS "GROUP_ID",
13:32:31 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
13:32:31 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
13:32:31 614  	  SUBSCRIPTION.PURCHASE_DATE,
13:32:31 615  	  SUBSCRIPTION.SUSPEND_DATE,
13:32:31 616  	  SUBSCRIPTION.REACTIVATION_DATE,
13:32:31 617  	  SUBSCRIPTION.CANCELLATION_DATE,
13:32:31 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
13:32:31 619  	  SUBSCRIPTION.INSTRUMENT_ID,
13:32:31 620  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
13:32:31 621  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
13:32:31 622  	  OFFER_CHAIN.NAME,
13:32:31 623  	  OFFER_CHAIN.DESCRIPTION,
13:32:31 624  	  OFFER_CHAIN.PRODUCT_URI,
13:32:31 625  	  PROCS_SUBSCRIPTION_V20.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
13:32:31 626  	  PROCS_SUBSCRIPTION_V20.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
13:32:31 627  	  PROCS_SUBSCRIPTION_V20.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
13:32:31 628  	  PROCS_SUBSCRIPTION_V20.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
13:32:31 629  	  PROCS_SUBSCRIPTION_V20.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
13:32:31 630  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
13:32:31 631  	  (
13:32:31 632  	    SELECT
13:32:31 633  	      MAX(ENTITLEMENT_END_DATE)
13:32:31 634  	      FROM LICENSE
13:32:31 635  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 636  	  )
13:32:31 637  	  as "ENT_END_DATE",
13:32:31 638  	  (
13:32:31 639  	    SELECT
13:32:31 640  	      MIN(START_DATE)
13:32:31 641  	      FROM LICENSE
13:32:31 642  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 643  	  )
13:32:31 644  	  as "ENT_START_DATE",
13:32:31 645  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
13:32:31 646  	  GROUP_ACCOUNT.ID GA_ID,
13:32:31 647  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
13:32:31 648  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
13:32:31 649  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
13:32:31 650  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
13:32:31 651  	  GROUP_ACCOUNT.PHONE GA_PHONE,
13:32:31 652  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
13:32:31 653  	  GROUP_ACCOUNT.SEATS GA_SEATS,
13:32:31 654  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
13:32:31 655  	  GROUP_ACCOUNT.IP GA_IP,
13:32:31 656  	  PROCS_SUBSCRIPTION_V20.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
13:32:31 657  	  PROCS_ACCOUNT_V20.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
13:32:31 658  	  PROCS_ACCOUNT_V20.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
13:32:31 659  	FROM
13:32:31 660  	  SUBSCRIPTION
13:32:31 661  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 662  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
13:32:31 663  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
13:32:31 664  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
13:32:31 665  	WHERE
13:32:31 666  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 667  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V20.REAL_TIME_CANCEL_REASON)
13:32:31 668  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
13:32:31 669  	  AND PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
13:32:31 670  	  AND PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
13:32:31 671  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
13:32:31 672  
13:32:31 673  EXCEPTION
13:32:31 674  WHEN BAD_GROUP_ID THEN
13:32:31 675  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 676  	  SPROC_NAME, 'Can not find account with given group id');
13:32:31 677  WHEN OTHERS THEN
13:32:31 678  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 680  END GET_ACCOUNT_SUBSCRIPTIONS;
13:32:31 681  
13:32:31 682  PROCEDURE FREEZE_ACCOUNT (
13:32:31 683  	in_group_id   IN NUMBER,
13:32:31 684  	in_updated_by IN VARCHAR2,
13:32:31 685  	in_note       IN VARCHAR2,
13:32:31 686  	in_agent_id   IN NUMBER
13:32:31 687  ) AS
13:32:31 688  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
13:32:31 689  -- VARIABLES
13:32:31 690  var_account_id	    NUMBER;
13:32:31 691  var_account_status_id NUMBER;
13:32:31 692  -- EXCEPTIONS
13:32:31 693  BAD_GROUP_ID	    EXCEPTION;
13:32:31 694  BAD_ACCOUNT_STATUS_ID EXCEPTION;
13:32:31 695  CAN_NOT_CREATE_NOTE   EXCEPTION;
13:32:31 696  EXCEPTION_MESSAGE     VARCHAR2(1024);
13:32:31 697  BEGIN
13:32:31 698  
13:32:31 699  	-- Get account status, account id
13:32:31 700  	BEGIN
13:32:31 701  	  SELECT
13:32:31 702  	    ACCOUNT.ID,
13:32:31 703  	    ACCOUNT.ACCOUNT_STATUS_ID
13:32:31 704  	    into
13:32:31 705  	    var_account_id,
13:32:31 706  	    var_account_status_id
13:32:31 707  	  FROM
13:32:31 708  	    ACCOUNT
13:32:31 709  	  WHERE
13:32:31 710  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 711  	  EXCEPTION
13:32:31 712  	    WHEN NO_DATA_FOUND THEN
13:32:31 713  	      RAISE BAD_GROUP_ID;
13:32:31 714  	END;
13:32:31 715  
13:32:31 716  	-- We can freeze only ACTIVE accounts
13:32:31 717  	IF var_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
13:32:31 718  	  AND var_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
13:32:31 719  	  RAISE BAD_ACCOUNT_STATUS_ID;
13:32:31 720  	END IF;
13:32:31 721  
13:32:31 722  	-- Set account status
13:32:31 723  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
13:32:31 724  	  in_account_id        => var_account_id,
13:32:31 725  	  in_updated_by        => in_updated_by,
13:32:31 726  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_FROZEN
13:32:31 727  	);
13:32:31 728  
13:32:31 729  	-- Annotate account
13:32:31 730  	BEGIN
13:32:31 731  	  PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
13:32:31 732  	    in_group_id   => in_group_id,
13:32:31 733  	    in_agent_id   => in_agent_id,
13:32:31 734  	    in_note	  => in_note,
13:32:31 735  	    in_created_by => in_updated_by
13:32:31 736  	  );
13:32:31 737  	  EXCEPTION
13:32:31 738  	    WHEN OTHERS THEN
13:32:31 739  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:31 740  	      RAISE CAN_NOT_CREATE_NOTE;
13:32:31 741  	END;
13:32:31 742  
13:32:31 743  EXCEPTION
13:32:31 744  WHEN BAD_GROUP_ID THEN
13:32:31 745  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 746  	  SPROC_NAME, 'No such group id');
13:32:31 747  WHEN BAD_ACCOUNT_STATUS_ID THEN
13:32:31 748  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
13:32:31 749  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
13:32:31 750  WHEN CAN_NOT_CREATE_NOTE THEN
13:32:31 751  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 752  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
13:32:31 753  WHEN OTHERS THEN
13:32:31 754  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 755  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 756  END FREEZE_ACCOUNT;
13:32:31 757  
13:32:31 758  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
13:32:31 759  	in_group_id	   IN  NUMBER,
13:32:31 760  	in_subscription_id IN NUMBER,
13:32:31 761  	out_result_set	   OUT SYS_REFCURSOR
13:32:31 762  ) AS
13:32:31 763  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
13:32:31 764  -- VARIABLES
13:32:31 765  var_account_id	   NUMBER;
13:32:31 766  temp_subscription_id NUMBER;
13:32:31 767  -- EXCEPTIONS
13:32:31 768  BAD_GROUP_ID	  EXCEPTION;
13:32:31 769  BAD_SUBSCRIPTION_ID EXCEPTION;
13:32:31 770  BEGIN
13:32:31 771  	-- Get account id
13:32:31 772  	BEGIN
13:32:31 773  	  SELECT
13:32:31 774  	    ACCOUNT.ID into var_account_id
13:32:31 775  	  FROM
13:32:31 776  	    ACCOUNT
13:32:31 777  	  WHERE
13:32:31 778  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 779  	  EXCEPTION
13:32:31 780  	    WHEN NO_DATA_FOUND THEN
13:32:31 781  	      RAISE BAD_GROUP_ID;
13:32:31 782  	END;
13:32:31 783  
13:32:31 784  	-- Check that subscription exists
13:32:31 785  	BEGIN
13:32:31 786  	  IF in_subscription_id IS NOT NULL THEN
13:32:31 787  	    SELECT
13:32:31 788  	      SUBSCRIPTION.ID into temp_subscription_id
13:32:31 789  	    FROM
13:32:31 790  	      SUBSCRIPTION
13:32:31 791  	    WHERE
13:32:31 792  	      SUBSCRIPTION.ID = in_subscription_id;
13:32:31 793  	  END IF;
13:32:31 794  	  EXCEPTION
13:32:31 795  	    WHEN NO_DATA_FOUND THEN
13:32:31 796  	      RAISE BAD_SUBSCRIPTION_ID;
13:32:31 797  	END;
13:32:31 798  
13:32:31 799  	OPEN out_result_set FOR
13:32:31 800  	SELECT DISTINCT
13:32:31 801  	  INVOICE.ID as "INVOICE_ID",
13:32:31 802  	  INVOICE.CREATE_DATE,
13:32:31 803  	  INVOICE.INVOICE_STATUS_ID,
13:32:31 804  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
13:32:31 805  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
13:32:31 806  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
13:32:31 807  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
13:32:31 808  	  NULL as "GC_CODE",
13:32:31 809  	  NULL as "GC_ID"
13:32:31 810  	FROM
13:32:31 811  	  LICENSE
13:32:31 812  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 813  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
13:32:31 814  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 815  	WHERE
13:32:31 816  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 817  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V20.REAL_TIME_CANCEL_REASON)
13:32:31 818  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
13:32:31 819  
13:32:31 820  EXCEPTION
13:32:31 821  WHEN BAD_GROUP_ID THEN
13:32:31 822  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 823  	  SPROC_NAME, 'No such account');
13:32:31 824  WHEN BAD_SUBSCRIPTION_ID THEN
13:32:31 825  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 826  	  SPROC_NAME, 'No such subscription');
13:32:31 827  WHEN OTHERS THEN
13:32:31 828  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 830  END GET_ACCOUNT_SUBSCR_INVOICES;
13:32:31 831  
13:32:31 832  PROCEDURE GET_ACCOUNT_GC_INVOICES (
13:32:31 833  	in_group_id    IN  NUMBER,
13:32:31 834  	out_result_set OUT SYS_REFCURSOR
13:32:31 835  ) AS
13:32:31 836  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
13:32:31 837  -- VARIABLES
13:32:31 838  var_account_id NUMBER;
13:32:31 839  -- EXCEPTIONS
13:32:31 840  BAD_GROUP_ID EXCEPTION;
13:32:31 841  BEGIN
13:32:31 842  	-- Get account id
13:32:31 843  	BEGIN
13:32:31 844  	  SELECT
13:32:31 845  	    ACCOUNT.ID into var_account_id
13:32:31 846  	  FROM
13:32:31 847  	    ACCOUNT
13:32:31 848  	  WHERE
13:32:31 849  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 850  	  EXCEPTION
13:32:31 851  	    WHEN NO_DATA_FOUND THEN
13:32:31 852  	      RAISE BAD_GROUP_ID;
13:32:31 853  	END;
13:32:31 854  
13:32:31 855  	-- Get invoices
13:32:31 856  	OPEN out_result_set FOR
13:32:31 857  	SELECT DISTINCT
13:32:31 858  	  INVOICE.ID as "INVOICE_ID",
13:32:31 859  	  INVOICE.CREATE_DATE,
13:32:31 860  	  INVOICE.INVOICE_STATUS_ID,
13:32:31 861  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
13:32:31 862  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
13:32:31 863  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
13:32:31 864  	  NULL as "SUBSCRIPTION_ID",
13:32:31 865  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
13:32:31 866  	  GIFT_CERTIFICATE.ID as "GC_ID"
13:32:31 867  	FROM
13:32:31 868  	  GIFT_CERTIFICATE
13:32:31 869  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
13:32:31 870  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 871  	WHERE
13:32:31 872  	  ROWNUM <= 100 AND
13:32:31 873  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
13:32:31 874  
13:32:31 875  EXCEPTION
13:32:31 876  WHEN BAD_GROUP_ID THEN
13:32:31 877  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 878  	  SPROC_NAME, 'No such account');
13:32:31 879  WHEN OTHERS THEN
13:32:31 880  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 881  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 882  END GET_ACCOUNT_GC_INVOICES;
13:32:31 883  
13:32:31 884  -- norlov: #38580
13:32:31 885  PROCEDURE GET_GC_INVOICE (
13:32:31 886  	in_group_id    IN  NUMBER,
13:32:31 887  	in_gc_code     IN  VARCHAR2,
13:32:31 888  	out_result_set OUT SYS_REFCURSOR
13:32:31 889  ) AS
13:32:31 890  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
13:32:31 891  -- VARIABLES
13:32:31 892  var_account_id NUMBER;
13:32:31 893  -- EXCEPTIONS
13:32:31 894  BAD_GROUP_ID EXCEPTION;
13:32:31 895  BEGIN
13:32:31 896  	-- Get account id
13:32:31 897  	BEGIN
13:32:31 898  	  SELECT
13:32:31 899  	    ACCOUNT.ID into var_account_id
13:32:31 900  	  FROM
13:32:31 901  	    ACCOUNT
13:32:31 902  	  WHERE
13:32:31 903  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 904  	  EXCEPTION
13:32:31 905  	    WHEN NO_DATA_FOUND THEN
13:32:31 906  	      RAISE BAD_GROUP_ID;
13:32:31 907  	END;
13:32:31 908  
13:32:31 909  	-- Get invoice for the GC
13:32:31 910  	OPEN out_result_set FOR
13:32:31 911  	SELECT DISTINCT
13:32:31 912  	  INVOICE.ID as "INVOICE_ID",
13:32:31 913  	  INVOICE.CREATE_DATE,
13:32:31 914  	  INVOICE.INVOICE_STATUS_ID,
13:32:31 915  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
13:32:31 916  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
13:32:31 917  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
13:32:31 918  	  NULL as "SUBSCRIPTION_ID",
13:32:31 919  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
13:32:31 920  	FROM
13:32:31 921  	  GIFT_CERTIFICATE
13:32:31 922  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
13:32:31 923  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
13:32:31 924  	WHERE
13:32:31 925  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
13:32:31 926  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
13:32:31 927  
13:32:31 928  EXCEPTION
13:32:31 929  WHEN BAD_GROUP_ID THEN
13:32:31 930  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 931  	  SPROC_NAME, 'No such account');
13:32:31 932  WHEN OTHERS THEN
13:32:31 933  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 934  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 935  END GET_GC_INVOICE;
13:32:31 936  
13:32:31 937  PROCEDURE GET_ACCOUNT_PRODUCTS (
13:32:31 938  	in_group_id    IN  NUMBER,
13:32:31 939  	out_result_set OUT SYS_REFCURSOR
13:32:31 940  ) AS
13:32:31 941  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
13:32:31 942  -- VARIABLES
13:32:31 943  var_account_id NUMBER;
13:32:31 944  -- EXCEPTIONS
13:32:31 945  BAD_GROUP_ID EXCEPTION;
13:32:31 946  BEGIN
13:32:31 947  	-- Get account id
13:32:31 948  	BEGIN
13:32:31 949  	  SELECT
13:32:31 950  	    ACCOUNT.ID into var_account_id
13:32:31 951  	  FROM
13:32:31 952  	    ACCOUNT
13:32:31 953  	  WHERE
13:32:31 954  	    ACCOUNT.GROUP_ID = in_group_id;
13:32:31 955  	  EXCEPTION
13:32:31 956  	    WHEN NO_DATA_FOUND THEN
13:32:31 957  	      RAISE BAD_GROUP_ID;
13:32:31 958  	END;
13:32:31 959  
13:32:31 960  	OPEN out_result_set FOR
13:32:31 961  	SELECT DISTINCT
13:32:31 962  	  PRODUCT.ID,
13:32:31 963  	  PRODUCT.NAME
13:32:31 964  	FROM
13:32:31 965  	  PRODUCT
13:32:31 966  	WHERE
13:32:31 967  	  PRODUCT.ID IN (
13:32:31 968  	    SELECT DISTINCT
13:32:31 969  	      PRODUCT_OFFERING.PRODUCT_ID
13:32:31 970  	    FROM
13:32:31 971  	      PRODUCT_OFFERING
13:32:31 972  	    WHERE
13:32:31 973  	      PRODUCT_OFFERING.ID IN (
13:32:31 974  		SELECT DISTINCT
13:32:31 975  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:31 976  		FROM
13:32:31 977  		  OFFER_PRODUCT_OFFERING
13:32:31 978  		WHERE
13:32:31 979  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:31 980  		    SELECT DISTINCT
13:32:31 981  		      OFFER_OFFER_CHAIN.OFFER_ID
13:32:31 982  		    FROM
13:32:31 983  		      OFFER_OFFER_CHAIN
13:32:31 984  		    WHERE
13:32:31 985  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
13:32:31 986  			SELECT DISTINCT
13:32:31 987  			  SUBSCRIPTION.OFFER_CHAIN_ID
13:32:31 988  			FROM
13:32:31 989  			  SUBSCRIPTION
13:32:31 990  			WHERE
13:32:31 991  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 992  		      )
13:32:31 993  		  )
13:32:31 994  	      )
13:32:31 995  	  );
13:32:31 996  
13:32:31 997  EXCEPTION
13:32:31 998  WHEN BAD_GROUP_ID THEN
13:32:31 999  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1000  	   SPROC_NAME, 'No such account');
13:32:31 1001  WHEN OTHERS THEN
13:32:31 1002  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1003  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1004  END GET_ACCOUNT_PRODUCTS;
13:32:31 1005  
13:32:31 1006  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
13:32:31 1007  	 in_group_id IN NUMBER,
13:32:31 1008  	 out_result_set     OUT SYS_REFCURSOR
13:32:31 1009  ) AS
13:32:31 1010  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
13:32:31 1011  -- VARIABLES
13:32:31 1012  var_account_id NUMBER;
13:32:31 1013  -- EXCEPTIONS
13:32:31 1014  BAD_GROUP_ID EXCEPTION;
13:32:31 1015  BEGIN
13:32:31 1016  	  -- Get account id
13:32:31 1017  	 BEGIN
13:32:31 1018  	   SELECT
13:32:31 1019  	     ACCOUNT.ID into var_account_id
13:32:31 1020  	   FROM
13:32:31 1021  	     ACCOUNT
13:32:31 1022  	   WHERE
13:32:31 1023  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1024  	   EXCEPTION
13:32:31 1025  	     WHEN NO_DATA_FOUND THEN
13:32:31 1026  	       RAISE BAD_GROUP_ID;
13:32:31 1027  	 END;
13:32:31 1028  
13:32:31 1029  	 OPEN out_result_set FOR
13:32:31 1030  	 SELECT DISTINCT
13:32:31 1031  	   PRODUCT_OFFERING.ID,
13:32:31 1032  	   PRODUCT_OFFERING.PRODUCT_ID,
13:32:31 1033  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
13:32:31 1034  	   PRODUCT_OFFERING.UNIT_PRICE,
13:32:31 1035  	   PRODUCT_OFFERING.QUANTITY,
13:32:31 1036  	   PRODUCT_OFFERING.CREATE_DATE,
13:32:31 1037  	   PRODUCT_OFFERING.CREATED_BY,
13:32:31 1038  	   CAPABILITY.ID CAP_ID,
13:32:31 1039  	   CAPABILITY.CODE CAP_CODE,
13:32:31 1040  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
13:32:31 1041  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
13:32:31 1042  	 FROM
13:32:31 1043  	   OFFER_PRODUCT_OFFERING
13:32:31 1044  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
13:32:31 1045  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
13:32:31 1046  	 WHERE
13:32:31 1047  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
13:32:31 1048  	     SELECT DISTINCT
13:32:31 1049  	       OFFER_OFFER_CHAIN.OFFER_ID
13:32:31 1050  	     FROM
13:32:31 1051  	       OFFER_OFFER_CHAIN
13:32:31 1052  	     WHERE
13:32:31 1053  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
13:32:31 1054  		 SELECT DISTINCT
13:32:31 1055  		   SUBSCRIPTION.OFFER_CHAIN_ID
13:32:31 1056  		 FROM
13:32:31 1057  		   SUBSCRIPTION
13:32:31 1058  		 WHERE
13:32:31 1059  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 1060  	       )
13:32:31 1061  	   );
13:32:31 1062  
13:32:31 1063  EXCEPTION
13:32:31 1064  WHEN BAD_GROUP_ID THEN
13:32:31 1065  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1066  	   SPROC_NAME, 'No such account');
13:32:31 1067  WHEN OTHERS THEN
13:32:31 1068  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1070  END GET_ACCOUNT_PROD_OFFERRINGS;
13:32:31 1071  
13:32:31 1072  PROCEDURE UPDATE_ACCOUNT_STATUS (
13:32:31 1073  	 in_account_id	      IN ACCOUNT.ID%TYPE,
13:32:31 1074  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
13:32:31 1075  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
13:32:31 1076  ) AS
13:32:31 1077  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
13:32:31 1078  -- EXCEPTIONS
13:32:31 1079  BAD_ACCOUNT_ID	      EXCEPTION;
13:32:31 1080  BAD_STATUS_ID	      EXCEPTION;
13:32:31 1081  EXCEPTION_MESSAGE      VARCHAR2(1024);
13:32:31 1082  BEGIN
13:32:31 1083  
13:32:31 1084  	 IF in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
13:32:31 1085  	   AND in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN
13:32:31 1086  	   AND in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
13:32:31 1087  	   RAISE BAD_STATUS_ID;
13:32:31 1088  	 END IF;
13:32:31 1089  
13:32:31 1090  	 PROCS_ACCOUNT_CRU_V20.UPDATE_ACCOUNT(
13:32:31 1091  	   in_account_id	=> in_account_id,
13:32:31 1092  	   in_account_status_id => in_account_status_id,
13:32:31 1093  	   in_updated_by	=> in_updated_by
13:32:31 1094  	 );
13:32:31 1095  
13:32:31 1096  	 IF SQL%ROWCOUNT = 0 THEN
13:32:31 1097  	   RAISE BAD_ACCOUNT_ID;
13:32:31 1098  	 END IF;
13:32:31 1099  
13:32:31 1100  EXCEPTION
13:32:31 1101  WHEN BAD_ACCOUNT_ID THEN
13:32:31 1102  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1103  	   SPROC_NAME, 'No such account');
13:32:31 1104  WHEN BAD_STATUS_ID THEN
13:32:31 1105  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 1106  	   SPROC_NAME, 'Bad status id');
13:32:31 1107  WHEN OTHERS THEN
13:32:31 1108  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1109  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1110  END UPDATE_ACCOUNT_STATUS;
13:32:31 1111  
13:32:31 1112  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
13:32:31 1113  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
13:32:31 1114  	 out_licenses_num OUT NUMBER
13:32:31 1115  ) AS
13:32:31 1116  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
13:32:31 1117  -- VARIABLES
13:32:31 1118  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
13:32:31 1119  -- EXCEPTIONS
13:32:31 1120  BAD_ACCOUNT_ID EXCEPTION;
13:32:31 1121  BEGIN
13:32:31 1122  
13:32:31 1123  	 BEGIN
13:32:31 1124  	   SELECT
13:32:31 1125  	     ACCOUNT.ID into var_account_id
13:32:31 1126  	   FROM
13:32:31 1127  	     ACCOUNT
13:32:31 1128  	   WHERE
13:32:31 1129  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1130  	   EXCEPTION
13:32:31 1131  	     WHEN NO_DATA_FOUND THEN
13:32:31 1132  	       RAISE BAD_ACCOUNT_ID;
13:32:31 1133  	 END;
13:32:31 1134  
13:32:31 1135  	 SELECT
13:32:31 1136  	   COUNT(LICENSE.ID) into out_licenses_num
13:32:31 1137  	 FROM
13:32:31 1138  	   LICENSE
13:32:31 1139  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 1140  	 WHERE
13:32:31 1141  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
13:32:31 1142  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE;
13:32:31 1143  
13:32:31 1144  EXCEPTION
13:32:31 1145  WHEN BAD_ACCOUNT_ID THEN
13:32:31 1146  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1147  	   SPROC_NAME, 'No such group id');
13:32:31 1148  WHEN OTHERS THEN
13:32:31 1149  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1150  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1151  END GET_NEEDS_ENTTL_LICENSES_NUM;
13:32:31 1152  
13:32:31 1153  PROCEDURE SET_TAX_EXEMPT (
13:32:31 1154  	 in_group_id  IN NUMBER,
13:32:31 1155  	 in_exempt_id IN VARCHAR2
13:32:31 1156  ) AS
13:32:31 1157  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
13:32:31 1158  -- VARIABLES
13:32:31 1159  var_account_id NUMBER;
13:32:31 1160  -- EXCEPTIONS
13:32:31 1161  BAD_GROUP_ID EXCEPTION;
13:32:31 1162  BEGIN
13:32:31 1163  
13:32:31 1164  	 BEGIN
13:32:31 1165  	   SELECT
13:32:31 1166  	     ACCOUNT.ID into var_account_id
13:32:31 1167  	   FROM
13:32:31 1168  	     ACCOUNT
13:32:31 1169  	   WHERE
13:32:31 1170  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1171  	   EXCEPTION
13:32:31 1172  	     WHEN NO_DATA_FOUND THEN
13:32:31 1173  	       RAISE BAD_GROUP_ID;
13:32:31 1174  	 END;
13:32:31 1175  
13:32:31 1176  	 UPDATE
13:32:31 1177  	   ACCOUNT
13:32:31 1178  	 SET
13:32:31 1179  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
13:32:31 1180  	 WHERE
13:32:31 1181  	   ACCOUNT.ID = var_account_id;
13:32:31 1182  
13:32:31 1183  EXCEPTION
13:32:31 1184  WHEN BAD_GROUP_ID THEN
13:32:31 1185  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1186  	   SPROC_NAME, 'No such group id');
13:32:31 1187  WHEN OTHERS THEN
13:32:31 1188  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1189  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1190  END SET_TAX_EXEMPT;
13:32:31 1191  
13:32:31 1192  PROCEDURE IS_TAX_EXEMPT (
13:32:31 1193  	 in_group_id	   IN NUMBER,
13:32:31 1194  	 out_is_tax_exempt OUT NUMBER
13:32:31 1195  ) AS
13:32:31 1196  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
13:32:31 1197  -- VARIABLES
13:32:31 1198  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
13:32:31 1199  -- EXCEPTIONS
13:32:31 1200  BAD_GROUP_ID EXCEPTION;
13:32:31 1201  BEGIN
13:32:31 1202  
13:32:31 1203  	 BEGIN
13:32:31 1204  	   SELECT
13:32:31 1205  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
13:32:31 1206  	   FROM
13:32:31 1207  	     ACCOUNT
13:32:31 1208  	   WHERE
13:32:31 1209  	     ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1210  	   EXCEPTION
13:32:31 1211  	     WHEN NO_DATA_FOUND THEN
13:32:31 1212  	       RAISE BAD_GROUP_ID;
13:32:31 1213  	 END;
13:32:31 1214  
13:32:31 1215  	 IF var_is_tax_exempt IS NULL THEN
13:32:31 1216  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.FALSE;
13:32:31 1217  	 ELSE
13:32:31 1218  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.TRUE;
13:32:31 1219  	 END IF;
13:32:31 1220  
13:32:31 1221  EXCEPTION
13:32:31 1222  WHEN BAD_GROUP_ID THEN
13:32:31 1223  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1224  	   SPROC_NAME, 'No such group id');
13:32:31 1225  WHEN OTHERS THEN
13:32:31 1226  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1227  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1228  END IS_TAX_EXEMPT;
13:32:31 1229  
13:32:31 1230  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
13:32:31 1231  	 in_account_id IN NUMBER,
13:32:31 1232  	 out_group_id  OUT NUMBER
13:32:31 1233  ) AS
13:32:31 1234  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
13:32:31 1235  BEGIN
13:32:31 1236  
13:32:31 1237  	 SELECT
13:32:31 1238  	   ACCOUNT.GROUP_ID into out_group_id
13:32:31 1239  	 FROM
13:32:31 1240  	   ACCOUNT
13:32:31 1241  	 WHERE
13:32:31 1242  	   ACCOUNT.ID = in_account_id;
13:32:31 1243  
13:32:31 1244  EXCEPTION
13:32:31 1245  WHEN NO_DATA_FOUND THEN
13:32:31 1246  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1247  	   SPROC_NAME, 'No such account');
13:32:31 1248  WHEN OTHERS THEN
13:32:31 1249  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1250  	   SPROC_NAME, 'Unknown error');
13:32:31 1251  END GET_GROUP_ID_BY_ACCOUNT_ID;
13:32:31 1252  
13:32:31 1253  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:31 1254  	 in_group_id IN NUMBER,
13:32:31 1255  	 out_account_id  OUT NUMBER
13:32:31 1256  ) AS
13:32:31 1257  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
13:32:31 1258  BEGIN
13:32:31 1259  
13:32:31 1260  	 SELECT
13:32:31 1261  	   ACCOUNT.ID into out_account_id
13:32:31 1262  	 FROM
13:32:31 1263  	   ACCOUNT
13:32:31 1264  	 WHERE
13:32:31 1265  	   ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1266  
13:32:31 1267  EXCEPTION
13:32:31 1268  WHEN NO_DATA_FOUND THEN
13:32:31 1269  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1270  	   SPROC_NAME, 'No such account');
13:32:31 1271  WHEN OTHERS THEN
13:32:31 1272  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1273  	   SPROC_NAME, 'Unknown error');
13:32:31 1274  END GET_ACCOUNT_ID_BY_GROUP_ID;
13:32:31 1275  
13:32:31 1276  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
13:32:31 1277  	 in_invoice_id IN NUMBER,
13:32:31 1278  	 out_group_ids OUT SYS_REFCURSOR
13:32:31 1279  ) AS
13:32:31 1280  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
13:32:31 1281  -- VARIABLES
13:32:31 1282  temp_invoice_id		 NUMBER;
13:32:31 1283  var_subscrib_group_id	 NUMBER;
13:32:31 1284  var_gc_purchaser_group_id NUMBER;
13:32:31 1285  var_gc_redeemer_group_id  NUMBER;
13:32:31 1286  -- EXCEPTIONS
13:32:31 1287  BAD_INVOICE_ID	    EXCEPTION;
13:32:31 1288  CAN_NOT_FIND_ACCOUNT EXCEPTION;
13:32:31 1289  BEGIN
13:32:31 1290  
13:32:31 1291  	 BEGIN
13:32:31 1292  	   SELECT
13:32:31 1293  	     INVOICE.ID into temp_invoice_id
13:32:31 1294  	   FROM
13:32:31 1295  	     INVOICE
13:32:31 1296  	   WHERE
13:32:31 1297  	     INVOICE.ID = in_invoice_id;
13:32:31 1298  	   EXCEPTION
13:32:31 1299  	     WHEN NO_DATA_FOUND THEN
13:32:31 1300  	       RAISE BAD_INVOICE_ID;
13:32:31 1301  	 END;
13:32:31 1302  
13:32:31 1303  	 BEGIN
13:32:31 1304  	   SELECT DISTINCT
13:32:31 1305  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
13:32:31 1306  	   FROM
13:32:31 1307  	     ACCOUNT
13:32:31 1308  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
13:32:31 1309  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
13:32:31 1310  	   WHERE
13:32:31 1311  	     LICENSE.INVOICE_ID = in_invoice_id;
13:32:31 1312  	   EXCEPTION
13:32:31 1313  	     WHEN NO_DATA_FOUND THEN
13:32:31 1314  	       var_subscrib_group_id := NULL;
13:32:31 1315  	 END;
13:32:31 1316  
13:32:31 1317  	 IF var_subscrib_group_id IS NULL THEN
13:32:31 1318  	   BEGIN
13:32:31 1319  	     SELECT
13:32:31 1320  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
13:32:31 1321  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
13:32:31 1322  	       into
13:32:31 1323  	       var_gc_purchaser_group_id,
13:32:31 1324  	       var_gc_redeemer_group_id
13:32:31 1325  	     FROM
13:32:31 1326  	       GIFT_CERTIFICATE
13:32:31 1327  	     WHERE
13:32:31 1328  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
13:32:31 1329  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
13:32:31 1330  	     EXCEPTION
13:32:31 1331  	       WHEN NO_DATA_FOUND THEN
13:32:31 1332  		 var_gc_purchaser_group_id := NULL;
13:32:31 1333  		 var_gc_redeemer_group_id  := NULL;
13:32:31 1334  	   END;
13:32:31 1335  	 END IF;
13:32:31 1336  
13:32:31 1337  	 IF var_subscrib_group_id IS NULL
13:32:31 1338  	   AND var_gc_purchaser_group_id IS NULL
13:32:31 1339  	   AND var_gc_redeemer_group_id IS NULL THEN
13:32:31 1340  	     RAISE CAN_NOT_FIND_ACCOUNT;
13:32:31 1341  	 END IF;
13:32:31 1342  
13:32:31 1343  	 OPEN out_group_ids FOR
13:32:31 1344  	 SELECT GROUP_ID FROM (
13:32:31 1345  	   SELECT
13:32:31 1346  	     var_subscrib_group_id as "GROUP_ID"
13:32:31 1347  	   FROM
13:32:31 1348  	     DUAL
13:32:31 1349  	   UNION
13:32:31 1350  	   SELECT
13:32:31 1351  	     var_gc_purchaser_group_id as "GROUP_ID"
13:32:31 1352  	   FROM
13:32:31 1353  	     DUAL
13:32:31 1354  	   UNION
13:32:31 1355  	   SELECT
13:32:31 1356  	     var_gc_redeemer_group_id as "GROUP_ID"
13:32:31 1357  	   FROM
13:32:31 1358  	     DUAL
13:32:31 1359  	 )
13:32:31 1360  	 WHERE
13:32:31 1361  	   GROUP_ID IS NOT NULL;
13:32:31 1362  
13:32:31 1363  EXCEPTION
13:32:31 1364  WHEN BAD_INVOICE_ID THEN
13:32:31 1365  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1366  	   SPROC_NAME, 'No such invoice');
13:32:31 1367  WHEN CAN_NOT_FIND_ACCOUNT THEN
13:32:31 1368  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1369  	   SPROC_NAME, 'Could not find account for given invoice');
13:32:31 1370  WHEN OTHERS THEN
13:32:31 1371  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1372  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1373  END GET_GROUPS_ID_BY_INVOICE_ID;
13:32:31 1374  
13:32:31 1375  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
13:32:31 1376  	 in_group_id	   IN NUMBER,
13:32:31 1377  	 out_tax_exempt_id OUT VARCHAR2
13:32:31 1378  ) AS
13:32:31 1379  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
13:32:31 1380  -- VARIABLES
13:32:31 1381  -- EXCEPTIONS
13:32:31 1382  BEGIN
13:32:31 1383  
13:32:31 1384  	 SELECT
13:32:31 1385  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
13:32:31 1386  	 FROM
13:32:31 1387  	   ACCOUNT
13:32:31 1388  	 WHERE
13:32:31 1389  	   ACCOUNT.GROUP_ID = in_group_id;
13:32:31 1390  
13:32:31 1391  EXCEPTION
13:32:31 1392  WHEN NO_DATA_FOUND THEN
13:32:31 1393  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1394  	   SPROC_NAME, 'No such account');
13:32:31 1395  WHEN OTHERS THEN
13:32:31 1396  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1397  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1398  END GET_ACCOUNT_TAX_EXEMPT_ID;
13:32:31 1399  
13:32:31 1400  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
13:32:31 1401  	 in_group_id	IN NUMBER,
13:32:31 1402  	 out_result_set OUT SYS_REFCURSOR
13:32:31 1403  ) AS
13:32:31 1404  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
13:32:31 1405  -- Variables
13:32:31 1406  var_account_id NUMBER;
13:32:31 1407  -- Exceptions
13:32:31 1408  BAD_GROUP_ID   EXCEPTION;
13:32:31 1409  BEGIN
13:32:31 1410  
13:32:31 1411  	 BEGIN
13:32:31 1412  	   SELECT
13:32:31 1413  	     ID into var_account_id
13:32:31 1414  	   FROM
13:32:31 1415  	     ACCOUNT
13:32:31 1416  	   WHERE
13:32:31 1417  	     GROUP_ID = in_group_id;
13:32:31 1418  	   EXCEPTION
13:32:31 1419  	     WHEN NO_DATA_FOUND THEN
13:32:31 1420  	       RAISE BAD_GROUP_ID;
13:32:31 1421  	 END;
13:32:31 1422  
13:32:31 1423  	 OPEN out_result_set FOR
13:32:31 1424  	 SELECT
13:32:31 1425  	   S.ID as SUBSCRIPTION_ID,
13:32:31 1426  	   OCHMD.OFFER_CHAIN_ID
13:32:31 1427  	 FROM
13:32:31 1428  	   SUBSCRIPTION S
13:32:31 1429  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
13:32:31 1430  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V20.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
13:32:31 1431  	 WHERE
13:32:31 1432  	   S.ACCOUNT_ID = var_account_id;
13:32:31 1433  
13:32:31 1434  EXCEPTION
13:32:31 1435  WHEN BAD_GROUP_ID THEN
13:32:31 1436  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1437  	   SPROC_NAME, 'No such account');
13:32:31 1438  WHEN OTHERS THEN
13:32:31 1439  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1440  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1441  END GET_UPGRADABLE_SUBSCRIPTIONS;
13:32:31 1442  
13:32:31 1443  PROCEDURE GET_USR_ALL_SBSCR_IDS (
13:32:31 1444  	 in_group_id	    IN NUMBER,
13:32:31 1445  	 out_result_set     OUT SYS_REFCURSOR
13:32:31 1446  ) AS
13:32:31 1447  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
13:32:31 1448  -- VARIABLES
13:32:31 1449  var_account_id NUMBER;
13:32:31 1450  -- EXCEPTIONS
13:32:31 1451  BAD_GROUP_ID EXCEPTION;
13:32:31 1452  BEGIN
13:32:31 1453  
13:32:31 1454  	 BEGIN
13:32:31 1455  	   SELECT
13:32:31 1456  	     A.ID INTO var_account_id
13:32:31 1457  	   FROM
13:32:31 1458  	     ACCOUNT A
13:32:31 1459  	   WHERE
13:32:31 1460  	     A.GROUP_ID = in_group_id;
13:32:31 1461  	   EXCEPTION
13:32:31 1462  	     WHEN NO_DATA_FOUND THEN
13:32:31 1463  	       RAISE BAD_GROUP_ID;
13:32:31 1464  	 END;
13:32:31 1465  
13:32:31 1466  	 OPEN out_result_set FOR
13:32:31 1467  	 SELECT
13:32:31 1468  	   S.ID
13:32:31 1469  	 FROM
13:32:31 1470  	   SUBSCRIPTION S
13:32:31 1471  	 WHERE
13:32:31 1472  	   S.ACCOUNT_ID = var_account_id
13:32:31 1473  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
13:32:31 1474  
13:32:31 1475  EXCEPTION
13:32:31 1476  WHEN BAD_GROUP_ID THEN
13:32:31 1477  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1478  	   SPROC_NAME, 'No such account');
13:32:31 1479  WHEN OTHERS THEN
13:32:31 1480  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1481  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1482  END GET_USR_ALL_SBSCR_IDS;
13:32:31 1483  
13:32:31 1484  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
13:32:31 1485  	 in_group_id	    IN NUMBER,
13:32:31 1486  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
13:32:31 1487  	 out_result_set     OUT SYS_REFCURSOR
13:32:31 1488  ) AS
13:32:31 1489  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
13:32:31 1490  -- VARIABLES
13:32:31 1491  var_account_id NUMBER;
13:32:31 1492  -- EXCEPTIONS
13:32:31 1493  BAD_GROUP_ID	   EXCEPTION;
13:32:31 1494  BAD_OFFER_CHAIN_IDS EXCEPTION;
13:32:31 1495  BEGIN
13:32:31 1496  
13:32:31 1497  	 IF in_offer_chain_ids IS NULL THEN
13:32:31 1498  	   RAISE BAD_OFFER_CHAIN_IDS;
13:32:31 1499  	 END IF;
13:32:31 1500  
13:32:31 1501  	 BEGIN
13:32:31 1502  	   SELECT
13:32:31 1503  	     A.ID INTO var_account_id
13:32:31 1504  	   FROM
13:32:31 1505  	     ACCOUNT A
13:32:31 1506  	   WHERE
13:32:31 1507  	     A.GROUP_ID = in_group_id;
13:32:31 1508  	   EXCEPTION
13:32:31 1509  	     WHEN NO_DATA_FOUND THEN
13:32:31 1510  	       RAISE BAD_GROUP_ID;
13:32:31 1511  	 END;
13:32:31 1512  
13:32:31 1513  	 OPEN out_result_set FOR
13:32:31 1514  	 SELECT
13:32:31 1515  	   S.ID
13:32:31 1516  	 FROM
13:32:31 1517  	   SUBSCRIPTION S
13:32:31 1518  	 WHERE
13:32:31 1519  	   S.ACCOUNT_ID = var_account_id
13:32:31 1520  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
13:32:31 1521  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
13:32:31 1522  
13:32:31 1523  EXCEPTION
13:32:31 1524  WHEN BAD_OFFER_CHAIN_IDS THEN
13:32:31 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
13:32:31 1526  	   SPROC_NAME, 'Offer chains ids parameter is null');
13:32:31 1527  WHEN BAD_GROUP_ID THEN
13:32:31 1528  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 1529  	   SPROC_NAME, 'No such account');
13:32:31 1530  WHEN OTHERS THEN
13:32:31 1531  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1532  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1533  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
13:32:31 1534  
13:32:31 1535  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
13:32:31 1536  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
13:32:31 1537  	 in_expiration_date IN DATE,
13:32:31 1538  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
13:32:31 1539  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
13:32:31 1540  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
13:32:31 1541  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
13:32:31 1542  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
13:32:31 1543  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
13:32:31 1544  	 in_lower_bound IN NUMBER DEFAULT 1,
13:32:31 1545  	 in_upper_bound IN NUMBER DEFAULT 11,
13:32:31 1546  	 out_result_set OUT SYS_REFCURSOR
13:32:31 1547  ) AS
13:32:31 1548  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
13:32:31 1549  BEGIN
13:32:31 1550  
13:32:31 1551  	 OPEN out_result_set FOR
13:32:31 1552  	     SELECT
13:32:31 1553  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
13:32:31 1554  	     FROM
13:32:31 1555  	       account a,
13:32:31 1556  	       credit_card cc
13:32:31 1557  	     WHERE
13:32:31 1558  	       cc.expiration_date = in_expiration_date and
13:32:31 1559  	       cc.last_four_cc = in_last_four_cc and
13:32:31 1560  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
13:32:31 1561  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
13:32:31 1562  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
13:32:31 1563  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
13:32:31 1564  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
13:32:31 1565  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
13:32:31 1566  	       a.id = cc.account_id and
13:32:31 1567  	       rownum >= in_lower_bound and
13:32:31 1568  	       rownum <= in_upper_bound
13:32:31 1569  	   ;
13:32:31 1570  
13:32:31 1571  EXCEPTION
13:32:31 1572  WHEN OTHERS THEN
13:32:31 1573  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 1574  	   SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 1575  END GET_GROUP_IDS_BY_CC_INFO;
13:32:31 1576  
13:32:31 1577  END PROCS_ACCOUNT_V20;
13:32:31 1578  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.13
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE LOG_RETRY(
13:32:31   4  	  in_process_name IN VARCHAR2,
13:32:31   5  	  in_generic_id   IN NUMBER,
13:32:31   6  	  in_date	  IN VARCHAR2,
13:32:31   7  	  out_success	   OUT NUMBER
13:32:31   8  ) AS
13:32:31   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V20';
13:32:31  10  BEGIN
13:32:31  11  
13:32:31  12  	out_success := 1;
13:32:31  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
13:32:31  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
13:32:31  15  	commit;
13:32:31  16  EXCEPTION
13:32:31  17  WHEN DUP_VAL_ON_INDEX THEN
13:32:31  18  	rollback;
13:32:31  19  	out_success := 0;
13:32:31  20  WHEN OTHERS THEN
13:32:31  21  	rollback;
13:32:31  22  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31  24  
13:32:31  25  END;
13:32:31  26  
13:32:31  27  PROCEDURE LOG_RETRY_DATE(
13:32:31  28  	  in_process_name IN VARCHAR2,
13:32:31  29  	  in_generic_id   IN NUMBER,
13:32:31  30  	  in_date	  IN DATE,
13:32:31  31  	  out_success	   OUT NUMBER
13:32:31  32  ) AS
13:32:31  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V20';
13:32:31  34  BEGIN
13:32:31  35  
13:32:31  36  	out_success := 1;
13:32:31  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
13:32:31  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
13:32:31  39  	commit;
13:32:31  40  EXCEPTION
13:32:31  41  WHEN DUP_VAL_ON_INDEX THEN
13:32:31  42  	rollback;
13:32:31  43  	out_success := 0;
13:32:31  44  WHEN OTHERS THEN
13:32:31  45  	rollback;
13:32:31  46  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31  48  
13:32:31  49  END;
13:32:31  50  
13:32:31  51  PROCEDURE DELETE_RETRY(
13:32:31  52  	  in_process_name IN VARCHAR2,
13:32:31  53  	  in_remove_minutes  IN NUMBER
13:32:31  54  ) AS
13:32:31  55  BEGIN
13:32:31  56  
13:32:31  57  delete from PROCESS_RETRY_THROTTLE
13:32:31  58  where
13:32:31  59  	process_name = in_process_name and
13:32:31  60  	create_date <= sysdate-in_remove_minutes/1440;
13:32:31  61  commit;
13:32:31  62  END;
13:32:31  63  
13:32:31  64  PROCEDURE GET_SYSDATE (
13:32:31  65  	out_date  OUT VARCHAR2
13:32:31  66  ) AS
13:32:31  67  BEGIN
13:32:31  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
13:32:31  69  END;
13:32:31  70  
13:32:31  71  END PROCS_PROCESS_RETRY_V20;
13:32:31  72  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.03
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
13:32:31   4  /*
13:32:31   5  Throws exceptions:
13:32:31   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31   8  */
13:32:31   9  	in_notification_type_name IN VARCHAR2,
13:32:31  10  	out_notification_type_id  OUT NUMBER
13:32:31  11  ) AS
13:32:31  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
13:32:31  13  BEGIN
13:32:31  14  	SELECT
13:32:31  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
13:32:31  16  	FROM
13:32:31  17  	  NOTIFICATION_TYPE
13:32:31  18  	WHERE
13:32:31  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
13:32:31  20  EXCEPTION
13:32:31  21  WHEN NO_DATA_FOUND THEN
13:32:31  22  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31  23  	  SPROC_NAME, 'No such type');
13:32:31  24  WHEN OTHERS THEN
13:32:31  25  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31  27  END GET_NOTIFICATION_TYPE_BY_NAME;
13:32:31  28  
13:32:31  29  /******************************************************************/
13:32:31  30  
13:32:31  31  PROCEDURE ADD_NOTIFICATION (
13:32:31  32  /*
13:32:31  33  Throws exceptions:
13:32:31  34  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  35  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  36  */
13:32:31  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
13:32:31  38  	in_recipient_group_id	 IN NUMBER,
13:32:31  39  	in_notification_type_id  IN NUMBER,
13:32:31  40  	in_date_to_notify	 IN DATE,
13:32:31  41  	in_email_template_params IN CLOB
13:32:31  42  ) AS
13:32:31  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
13:32:31  44  -- VARIABLES
13:32:31  45  temp_type_count NUMBER;
13:32:31  46  var_create_date DATE := SYSDATE;
13:32:31  47  -- EXCEPTIONS
13:32:31  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
13:32:31  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
13:32:31  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
13:32:31  51  BEGIN
13:32:31  52  
13:32:31  53  	SELECT
13:32:31  54  	  COUNT(*) into temp_type_count
13:32:31  55  	FROM
13:32:31  56  	  NOTIFICATION_TYPE
13:32:31  57  	WHERE
13:32:31  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
13:32:31  59  
13:32:31  60  	IF temp_type_count = 0 THEN
13:32:31  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
13:32:31  62  	END IF;
13:32:31  63  
13:32:31  64  	INSERT INTO NOTIFICATION (
13:32:31  65  	  ID,
13:32:31  66  	  ACCOUNT_ID,
13:32:31  67  	  GROUP_ID,
13:32:31  68  	  NOTIFICATION_TYPE_ID,
13:32:31  69  	  NOTIFICATION_STATUS_ID,
13:32:31  70  	  EMAIL_TEMPLATE_PARAMS,
13:32:31  71  	  UPDATE_DATE,
13:32:31  72  	  CREATE_DATE,
13:32:31  73  	  DATE_TO_NOTIFY
13:32:31  74  	) VALUES (
13:32:31  75  	  NOT_ID_SEQ.nextVal,
13:32:31  76  	  in_sender_account_id,
13:32:31  77  	  in_recipient_group_id,
13:32:31  78  	  in_notification_type_id,
13:32:31  79  	  NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING,
13:32:31  80  	  in_email_template_params,
13:32:31  81  	  var_create_date,
13:32:31  82  	  var_create_date,
13:32:31  83  	  in_date_to_notify
13:32:31  84  	);
13:32:31  85  
13:32:31  86  	--BEGIN
13:32:31  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V20.CREATE_NOTIFICATION_HISTORY (
13:32:31  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
13:32:31  89  	--    in_group_id		  => in_recipient_group_id,
13:32:31  90  	--    notification_reason_type_id => in_notification_type_id,
13:32:31  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING,
13:32:31  92  	--    email_template_params	  => in_email_template_params,
13:32:31  93  	--    in_create_date		  => var_create_date
13:32:31  94  	--  );
13:32:31  95  	--  EXCEPTION
13:32:31  96  	--    WHEN OTHERS THEN
13:32:31  97  	--	EXCEPTION_MESSAGE := SQLERRM;
13:32:31  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
13:32:31  99  	--END;
13:32:31 100  
13:32:31 101  EXCEPTION
13:32:31 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
13:32:31 103  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 104  	  SPROC_NAME, 'No such notification status');
13:32:31 105  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:31 106  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:31 108  WHEN OTHERS THEN
13:32:31 109  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 111  END ADD_NOTIFICATION;
13:32:31 112  
13:32:31 113  /******************************************************************************/
13:32:31 114  
13:32:31 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
13:32:31 116  /*
13:32:31 117  Throws exceptions:
13:32:31 118  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 119  */
13:32:31 120  	out_result_set OUT SYS_REFCURSOR
13:32:31 121  ) AS
13:32:31 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
13:32:31 123  -- CONSTANTS
13:32:31 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
13:32:31 125  BEGIN
13:32:31 126  	OPEN out_result_set FOR
13:32:31 127  SELECT * FROM
13:32:31 128  (
13:32:31 129  	SELECT
13:32:31 130  	  NOTIFICATION.ID
13:32:31 131  	FROM
13:32:31 132  	  NOTIFICATION
13:32:31 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
13:32:31 134  	WHERE
13:32:31 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
13:32:31 136  	  AND NOT EXISTS (
13:32:31 137  	    SELECT NULL
13:32:31 138  	    FROM PROCESS_RETRY_THROTTLE
13:32:31 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
13:32:31 140  	  )
13:32:31 141  	  AND (
13:32:31 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
13:32:31 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED
13:32:31 144  	  )
13:32:31 145  	  AND (
13:32:31 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
13:32:31 147  	  )ORDER BY dbms_random.value
13:32:31 148  ) WHERE
13:32:31 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
13:32:31 150  
13:32:31 151  EXCEPTION
13:32:31 152  WHEN OTHERS THEN
13:32:31 153  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 155  END GET_PENDING_NOTIFICATIONS;
13:32:31 156  
13:32:31 157  /******************************************************************************/
13:32:31 158  
13:32:31 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
13:32:31 160  /*
13:32:31 161  Throws exceptions:
13:32:31 162  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 163  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 164  */
13:32:31 165  	in_notification_id IN NUMBER
13:32:31 166  ) AS
13:32:31 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
13:32:31 168  -- VARIABLES
13:32:31 169  temp_notification_id NUMBER;
13:32:31 170  -- EXCEPTIONS
13:32:31 171  BAD_NOTIFICATION_ID EXCEPTION;
13:32:31 172  BEGIN
13:32:31 173  
13:32:31 174  	BEGIN
13:32:31 175  	  SELECT
13:32:31 176  	    NOTIFICATION.ID into temp_notification_id
13:32:31 177  	  FROM
13:32:31 178  	    NOTIFICATION
13:32:31 179  	  WHERE
13:32:31 180  	    NOTIFICATION.ID = in_notification_id;
13:32:31 181  	  EXCEPTION
13:32:31 182  	    WHEN NO_DATA_FOUND THEN
13:32:31 183  	      RAISE BAD_NOTIFICATION_ID;
13:32:31 184  	END;
13:32:31 185  
13:32:31 186  	UPDATE
13:32:31 187  	  NOTIFICATION
13:32:31 188  	SET
13:32:31 189  	  NOTIFICATION.UPDATE_DATE = sysdate
13:32:31 190  	WHERE
13:32:31 191  	  NOTIFICATION.ID = in_notification_id;
13:32:31 192  
13:32:31 193  EXCEPTION
13:32:31 194  WHEN BAD_NOTIFICATION_ID THEN
13:32:31 195  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 196  	  SPROC_NAME, 'No such notification');
13:32:31 197  WHEN OTHERS THEN
13:32:31 198  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 200  END UPDATE_NOTIFICATION_TIMESTAMP;
13:32:31 201  
13:32:31 202  /******************************************************************************/
13:32:31 203  
13:32:31 204  PROCEDURE SET_NOTIFICATION_STATUS (
13:32:31 205  /*
13:32:31 206  Throws exceptions:
13:32:31 207  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 208  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 209  */
13:32:31 210  	in_notification_id	  IN NUMBER,
13:32:31 211  	in_notification_status_id IN NUMBER,
13:32:31 212  	in_error_message	  IN VARCHAR2
13:32:31 213  ) AS
13:32:31 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
13:32:31 215  -- VARIABLES
13:32:31 216  var_group_id		NUMBER;
13:32:31 217  var_account_id		NUMBER;
13:32:31 218  var_notification_type_id	NUMBER;
13:32:31 219  var_email_template_params CLOB;
13:32:31 220  var_create_history_date	DATE := SYSDATE;
13:32:31 221  var_notification_status_id   NUMBER;
13:32:31 222  var_date_to_notify	DATE;
13:32:31 223  max_fails   NUMBER := 5;
13:32:31 224  num_fails   NUMBER;
13:32:31 225  -- EXCEPTIONS
13:32:31 226  BAD_NOTIFICATION_ID	 EXCEPTION;
13:32:31 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
13:32:31 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
13:32:31 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
13:32:31 230  BEGIN
13:32:31 231  
13:32:31 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_SENT
13:32:31 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
13:32:31 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED THEN
13:32:31 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
13:32:31 236  	END IF;
13:32:31 237  
13:32:31 238  	BEGIN
13:32:31 239  	  SELECT
13:32:31 240  	    NOTIFICATION.GROUP_ID,
13:32:31 241  	    NOTIFICATION.ACCOUNT_ID,
13:32:31 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
13:32:31 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
13:32:31 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
13:32:31 245  	    NOTIFICATION.DATE_TO_NOTIFY
13:32:31 246  	    into
13:32:31 247  	    var_group_id,
13:32:31 248  	    var_account_id,
13:32:31 249  	    var_notification_type_id,
13:32:31 250  	    var_notification_status_id,
13:32:31 251  	    var_email_template_params,
13:32:31 252  	    var_date_to_notify
13:32:31 253  	  FROM
13:32:31 254  	    NOTIFICATION
13:32:31 255  	  WHERE
13:32:31 256  	    NOTIFICATION.ID = in_notification_id;
13:32:31 257  	  EXCEPTION
13:32:31 258  	    WHEN NO_DATA_FOUND THEN
13:32:31 259  	      RAISE BAD_NOTIFICATION_ID;
13:32:31 260  	END;
13:32:31 261  
13:32:31 262  	BEGIN
13:32:31 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIFICATION_HISTORY (
13:32:31 264  	    in_notification_id		=> in_notification_id,
13:32:31 265  	    in_account_id		=> var_account_id,
13:32:31 266  	    in_group_id 		=> var_group_id,
13:32:31 267  	    notification_reason_type_id => var_notification_type_id,
13:32:31 268  	    notification_status_id	=> var_notification_status_id,
13:32:31 269  	    email_template_params	=> var_email_template_params,
13:32:31 270  	    in_create_date		=> var_create_history_date,
13:32:31 271  	    in_date_to_notify		=> var_date_to_notify
13:32:31 272  	  );
13:32:31 273  	  EXCEPTION
13:32:31 274  	    WHEN OTHERS THEN
13:32:31 275  	      EXCEPTION_MESSAGE := SQLERRM;
13:32:31 276  	      RAISE CAN_NOT_CREATE_HISTORY;
13:32:31 277  	END;
13:32:31 278  
13:32:31 279  	UPDATE
13:32:31 280  	  NOTIFICATION
13:32:31 281  	SET
13:32:31 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
13:32:31 283  	  NOTIFICATION.UPDATE_DATE = sysdate
13:32:31 284  	WHERE
13:32:31 285  	  NOTIFICATION.ID = in_notification_id;
13:32:31 286  
13:32:31 287  	IF ( in_error_message IS NOT NULL ) THEN
13:32:31 288  	  ADD_NOTIFICATION_FAILURE(
13:32:31 289  	    in_notification_id => in_notification_id,
13:32:31 290  	    in_error_message => in_error_message
13:32:31 291  	  );
13:32:31 292  	END IF;
13:32:31 293  
13:32:31 294  	SELECT COUNT(1) INTO num_fails
13:32:31 295  	FROM NOTIFICATION_FAILURE
13:32:31 296  	WHERE NOTIFICATION_ID = in_notification_id;
13:32:31 297  
13:32:31 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V20.NOTIFICATION_SENT OR num_fails >= max_fails) then
13:32:31 299  	  FOR REC IN (
13:32:31 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
13:32:31 301  	      FROM NOTIFICATION_FAILURE
13:32:31 302  	      WHERE NOTIFICATION_ID = in_notification_id
13:32:31 303  	      ) LOOP
13:32:31 304  	      BEGIN
13:32:31 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIF_FAILURE_HISTORY(
13:32:31 306  		  in_error_message	   => REC.ERROR_MESSAGE,
13:32:31 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
13:32:31 308  		  in_create_date	   => REC.CREATE_DATE
13:32:31 309  		);
13:32:31 310  		EXCEPTION
13:32:31 311  		  WHEN OTHERS THEN
13:32:31 312  		    EXCEPTION_MESSAGE := SQLERRM;
13:32:31 313  		    RAISE CAN_NOT_CREATE_HISTORY;
13:32:31 314  	      END;
13:32:31 315  	  END LOOP;
13:32:31 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
13:32:31 317  
13:32:31 318  	  BEGIN
13:32:31 319  	    SELECT
13:32:31 320  	      NOTIFICATION.GROUP_ID,
13:32:31 321  	      NOTIFICATION.ACCOUNT_ID,
13:32:31 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
13:32:31 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
13:32:31 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
13:32:31 325  	      NOTIFICATION.DATE_TO_NOTIFY
13:32:31 326  	      into
13:32:31 327  	      var_group_id,
13:32:31 328  	      var_account_id,
13:32:31 329  	      var_notification_type_id,
13:32:31 330  	      var_notification_status_id,
13:32:31 331  	      var_email_template_params,
13:32:31 332  	      var_date_to_notify
13:32:31 333  	    FROM
13:32:31 334  	      NOTIFICATION
13:32:31 335  	    WHERE
13:32:31 336  	      NOTIFICATION.ID = in_notification_id;
13:32:31 337  	    EXCEPTION
13:32:31 338  	      WHEN NO_DATA_FOUND THEN
13:32:31 339  		RAISE BAD_NOTIFICATION_ID;
13:32:31 340  	  END;
13:32:31 341  
13:32:31 342  	  BEGIN
13:32:31 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIFICATION_HISTORY (
13:32:31 344  	      in_notification_id	  => in_notification_id,
13:32:31 345  	      in_account_id		  => var_account_id,
13:32:31 346  	      in_group_id		  => var_group_id,
13:32:31 347  	      notification_reason_type_id => var_notification_type_id,
13:32:31 348  	      notification_status_id	  => var_notification_status_id,
13:32:31 349  	      email_template_params	  => var_email_template_params,
13:32:31 350  	      in_create_date		  => var_create_history_date,
13:32:31 351  	      in_date_to_notify 	  => var_date_to_notify
13:32:31 352  	    );
13:32:31 353  	    EXCEPTION
13:32:31 354  	      WHEN OTHERS THEN
13:32:31 355  		EXCEPTION_MESSAGE := SQLERRM;
13:32:31 356  		RAISE CAN_NOT_CREATE_HISTORY;
13:32:31 357  	  END;
13:32:31 358  
13:32:31 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
13:32:31 360  
13:32:31 361  	END IF;
13:32:31 362  	commit;
13:32:31 363  
13:32:31 364  EXCEPTION
13:32:31 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
13:32:31 366  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 367  	  SPROC_NAME, 'Bad notification status');
13:32:31 368  WHEN BAD_NOTIFICATION_ID THEN
13:32:31 369  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 370  	  SPROC_NAME, 'No such notification');
13:32:31 371  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:31 372  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:31 374  WHEN OTHERS THEN
13:32:31 375  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 377  END SET_NOTIFICATION_STATUS;
13:32:31 378  
13:32:31 379  /******************************************************************************/
13:32:31 380  
13:32:31 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
13:32:31 382  /*
13:32:31 383  Throws exceptions:
13:32:31 384  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 385  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 386  */
13:32:31 387  	in_notification_id IN NUMBER,
13:32:31 388  	in_error_message   IN VARCHAR2
13:32:31 389  ) AS
13:32:31 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
13:32:31 391  -- VARIABLES
13:32:31 392  temp_notification_id NUMBER;
13:32:31 393  var_create_date	   DATE := SYSDATE;
13:32:31 394  -- EXCEPTIONS
13:32:31 395  BAD_NOTIFICATION_ID	 EXCEPTION;
13:32:31 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
13:32:31 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
13:32:31 398  BEGIN
13:32:31 399  
13:32:31 400  	BEGIN
13:32:31 401  	  SELECT
13:32:31 402  	    NOTIFICATION.ID into temp_notification_id
13:32:31 403  	  FROM
13:32:31 404  	    NOTIFICATION
13:32:31 405  	  WHERE
13:32:31 406  	    NOTIFICATION.ID = in_notification_id;
13:32:31 407  	  EXCEPTION
13:32:31 408  	    WHEN NO_DATA_FOUND THEN
13:32:31 409  	      RAISE BAD_NOTIFICATION_ID;
13:32:31 410  	END;
13:32:31 411  
13:32:31 412  	INSERT INTO NOTIFICATION_FAILURE (
13:32:31 413  	  ID,
13:32:31 414  	  NOTIFICATION_ID,
13:32:31 415  	  ERROR_MESSAGE,
13:32:31 416  	  CREATE_DATE
13:32:31 417  	) VALUES (
13:32:31 418  	  NOTF_ID_SEQ.nextVal,
13:32:31 419  	  in_notification_id,
13:32:31 420  	  in_error_message,
13:32:31 421  	  sysdate
13:32:31 422  	);
13:32:31 423  
13:32:31 424  	--BEGIN
13:32:31 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V20.CREATE_NOTIF_FAILURE_HISTORY(
13:32:31 426  	--    in_error_message	       => in_error_message,
13:32:31 427  	--    in_notification_queue_id => in_notification_id,
13:32:31 428  	--    in_create_date	       => var_create_date
13:32:31 429  	--  );
13:32:31 430  	--  EXCEPTION
13:32:31 431  	--    WHEN OTHERS THEN
13:32:31 432  	--	EXCEPTION_MESSAGE := SQLERRM;
13:32:31 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
13:32:31 434  	--END;
13:32:31 435  
13:32:31 436  EXCEPTION
13:32:31 437  WHEN BAD_NOTIFICATION_ID THEN
13:32:31 438  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 439  	  SPROC_NAME, 'No such notification');
13:32:31 440  WHEN CAN_NOT_CREATE_HISTORY THEN
13:32:31 441  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
13:32:31 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
13:32:31 443  WHEN OTHERS THEN
13:32:31 444  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 446  END ADD_NOTIFICATION_FAILURE;
13:32:31 447  
13:32:31 448  /******************************************************************************/
13:32:31 449  
13:32:31 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
13:32:31 451  /*
13:32:31 452  Result: GLOBAL_STATUSES.TRUE if notification locked
13:32:31 453  GLOBA_STATUSES.FALSE - else
13:32:31 454  */
13:32:31 455  	in_notification_id IN NUMBER,
13:32:31 456  	out_lock_status    OUT NUMBER
13:32:31 457  ) AS
13:32:31 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
13:32:31 459  -- VARIABLE
13:32:31 460  temp_notification_id NUMBER;
13:32:31 461  BEGIN
13:32:31 462  	SELECT
13:32:31 463  	  NOTIFICATION.ID into temp_notification_id
13:32:31 464  	FROM
13:32:31 465  	  NOTIFICATION
13:32:31 466  	WHERE
13:32:31 467  	  NOTIFICATION.ID = in_notification_id
13:32:31 468  	  AND (
13:32:31 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
13:32:31 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED
13:32:31 471  	  )
13:32:31 472  	FOR UPDATE;
13:32:31 473  
13:32:31 474  	out_lock_status := 1;
13:32:31 475  
13:32:31 476  EXCEPTION
13:32:31 477  WHEN NO_DATA_FOUND THEN
13:32:31 478  	out_lock_status := 0;
13:32:31 479  WHEN OTHERS THEN
13:32:31 480  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 482  END LOCK_PENDING_NOTIFICATION;
13:32:31 483  
13:32:31 484  /******************************************************************************/
13:32:31 485  
13:32:31 486  PROCEDURE GET_NOTIFICATION_DATA (
13:32:31 487  	in_notification_id IN NUMBER,
13:32:31 488  	out_result_set	   OUT SYS_REFCURSOR
13:32:31 489  ) AS
13:32:31 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
13:32:31 491  BEGIN
13:32:31 492  	OPEN out_result_set FOR
13:32:31 493  	SELECT
13:32:31 494  	  NOTIFICATION.ID,
13:32:31 495  	  NOTIFICATION.GROUP_ID,
13:32:31 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
13:32:31 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
13:32:31 498  	  NOTIFICATION.CREATE_DATE,
13:32:31 499  	  NOTIFICATION.UPDATE_DATE,
13:32:31 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
13:32:31 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
13:32:31 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
13:32:31 503  	FROM
13:32:31 504  	  NOTIFICATION
13:32:31 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
13:32:31 506  	WHERE
13:32:31 507  	  NOTIFICATION.ID = in_notification_id;
13:32:31 508  
13:32:31 509  EXCEPTION
13:32:31 510  WHEN OTHERS THEN
13:32:31 511  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
13:32:31 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
13:32:31 513  END GET_NOTIFICATION_DATA;
13:32:31 514  
13:32:31 515  END PROCS_NOTIFICATION_V20;
13:32:31 516  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.04
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:31   4  /*
13:32:31   5  Throws exceptions:
13:32:31   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31   8  */
13:32:31   9  	  in_offer_chain_id IN	 NUMBER,
13:32:31  10  	  out_result_set    OUT  SYS_REFCURSOR
13:32:31  11  ) AS
13:32:31  12  BEGIN
13:32:31  13  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_BY_ID (
13:32:31  14  	  in_offer_chain_id => in_offer_chain_id,
13:32:31  15  	  out_result_set => out_result_set
13:32:31  16  	);
13:32:31  17  END GET_OFFER_CHAIN_BY_ID;
13:32:31  18  
13:32:31  19  PROCEDURE GET_PENDING_INVOICES (
13:32:31  20  /*
13:32:31  21  Throws exceptions:
13:32:31  22  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  23  */
13:32:31  24  	out_result_set	     OUT SYS_REFCURSOR,
13:32:31  25  	in_row_number	     IN NUMBER DEFAULT NULL
13:32:31  26  ) AS
13:32:31  27  BEGIN
13:32:31  28  	PROCS_INVOICE_V20.GET_PENDING_INVOICES(
13:32:31  29  	  out_result_set,
13:32:31  30  	  in_row_number
13:32:31  31  	);
13:32:31  32  END GET_PENDING_INVOICES;
13:32:31  33  
13:32:31  34  /********************************************************/
13:32:31  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
13:32:31  36  /*
13:32:31  37  Throws exceptions:
13:32:31  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  39  */
13:32:31  40  	out_result_set	    OUT SYS_REFCURSOR,
13:32:31  41  	in_row_number	    IN NUMBER DEFAULT NULL
13:32:31  42  ) AS
13:32:31  43  BEGIN
13:32:31  44  	PROCS_CHARGE_V20.GET_PENDING_REFUND_CHARGES(
13:32:31  45  	  out_result_set,
13:32:31  46  	  in_row_number
13:32:31  47  	);
13:32:31  48  END GET_PENDING_REFUND_CHARGES;
13:32:31  49  /********************************************************/
13:32:31  50  
13:32:31  51  PROCEDURE GET_UNPROCESSED_CHARGES (
13:32:31  52  /*
13:32:31  53  Throws exceptions:
13:32:31  54  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  56  */
13:32:31  57  	in_invoice_id  IN NUMBER,
13:32:31  58  	out_result_set OUT SYS_REFCURSOR
13:32:31  59  ) AS
13:32:31  60  BEGIN
13:32:31  61  	PROCS_CHARGE_V20.GET_UNPROCESSED_CHARGES(
13:32:31  62  	  in_invoice_id,
13:32:31  63  	  out_result_set
13:32:31  64  	);
13:32:31  65  END GET_UNPROCESSED_CHARGES;
13:32:31  66  
13:32:31  67  /********************************************************/
13:32:31  68  
13:32:31  69  PROCEDURE GET_PROCESSED_CHARGES (
13:32:31  70  /*
13:32:31  71  Throws exceptions:
13:32:31  72  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  73  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  74  */
13:32:31  75  	in_invoice_id  IN NUMBER,
13:32:31  76  	out_result_set OUT SYS_REFCURSOR
13:32:31  77  ) AS
13:32:31  78  BEGIN
13:32:31  79  	PROCS_CHARGE_V20.GET_PROCESSED_CHARGES(
13:32:31  80  	  in_invoice_id,
13:32:31  81  	  out_result_set
13:32:31  82  	);
13:32:31  83  END GET_PROCESSED_CHARGES;
13:32:31  84  
13:32:31  85  /********************************************************/
13:32:31  86  
13:32:31  87  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
13:32:31  88  /*
13:32:31  89  Throws exceptions:
13:32:31  90  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  91  */
13:32:31  92  	in_transaction_id	      IN NUMBER,
13:32:31  93  	in_transaction_attempt_status IN NUMBER,
13:32:31  94  	out_result_set		      OUT SYS_REFCURSOR
13:32:31  95  ) AS
13:32:31  96  BEGIN
13:32:31  97  	PROCS_TRANSACTION_V20.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
13:32:31  98  	  in_transaction_id,
13:32:31  99  	  in_transaction_attempt_status,
13:32:31 100  	  out_result_set
13:32:31 101  	);
13:32:31 102  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
13:32:31 103  
13:32:31 104  /********************************************************/
13:32:31 105  
13:32:31 106  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
13:32:31 107  /*
13:32:31 108  Throws exceptions:
13:32:31 109  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 110  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 111  */
13:32:31 112  	in_transaction_attempt_id     IN NUMBER,
13:32:31 113  	in_transaction_attempt_status IN NUMBER
13:32:31 114  ) AS
13:32:31 115  BEGIN
13:32:31 116  	PROCS_TRANSACTION_V20.UPDATE_TRNSCTN_ATTEMPT_STATUS(
13:32:31 117  	   in_transaction_attempt_id,
13:32:31 118  	   in_transaction_attempt_status
13:32:31 119  	);
13:32:31 120  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
13:32:31 121  
13:32:31 122  /********************************************************/
13:32:31 123  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
13:32:31 124  /*
13:32:31 125  Throws exceptions:
13:32:31 126  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 127  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 128  */
13:32:31 129  	in_invoice_id	IN  NUMBER,
13:32:31 130  	out_result_set OUT SYS_REFCURSOR
13:32:31 131  ) AS
13:32:31 132  BEGIN
13:32:31 133  	PROCS_TRANSACTION_V20.GET_CLOSED_REFUNDS_BY_INVOICE(
13:32:31 134  	   in_invoice_id,
13:32:31 135  	   out_result_set
13:32:31 136  	);
13:32:31 137  END GET_CLOSED_REFUNDS_BY_INVOICE;
13:32:31 138  
13:32:31 139  /********************************************************/
13:32:31 140  
13:32:31 141  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
13:32:31 142  /*
13:32:31 143  Throws exceptions:
13:32:31 144  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 145  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 146  */
13:32:31 147  	in_transaction_attempt_id IN NUMBER,
13:32:31 148  	in_updated_by		  IN VARCHAR2
13:32:31 149  ) AS
13:32:31 150  BEGIN
13:32:31 151  	PROCS_TRANSACTION_V20.UPDATE_TRNSCTN_ATTEMPT_TIME(
13:32:31 152  	  in_transaction_attempt_id,
13:32:31 153  	  in_updated_by
13:32:31 154  	);
13:32:31 155  END UPDATE_TRNSCTN_ATTEMPT_TIME;
13:32:31 156  
13:32:31 157  /********************************************************/
13:32:31 158  
13:32:31 159  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
13:32:31 160  /*
13:32:31 161  Throws exceptions:
13:32:31 162  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 163  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 164  */
13:32:31 165  	in_transaction_id	   IN NUMBER,
13:32:31 166  	in_trans_attempt_status    IN NUMBER,
13:32:31 167  	in_external_status_code    IN VARCHAR2,
13:32:31 168  	in_external_status_message IN VARCHAR2,
13:32:31 169  	in_created_by		   IN VARCHAR2,
13:32:31 170  	in_ext_transaction_id	   IN VARCHAR2,
13:32:31 171  	out_transaction_attempt_id OUT NUMBER
13:32:31 172  ) AS
13:32:31 173  BEGIN
13:32:31 174  	PROCS_TRANSACTION_V20.CREATE_TRANSACTION_ATTEMPT(
13:32:31 175  	  in_transaction_id,
13:32:31 176  	  in_trans_attempt_status,
13:32:31 177  	  in_external_status_code,
13:32:31 178  	  in_external_status_message,
13:32:31 179  	  in_created_by,
13:32:31 180  	  in_ext_transaction_id,
13:32:31 181  	  out_transaction_attempt_id
13:32:31 182  	);
13:32:31 183  END CREATE_TRANSACTION_ATTEMPT;
13:32:31 184  
13:32:31 185  /********************************************************/
13:32:31 186  
13:32:31 187  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
13:32:31 188  /*
13:32:31 189  Throws exceptions:
13:32:31 190  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 191  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 192  */
13:32:31 193  	in_transaction_attempt_id IN NUMBER,
13:32:31 194  	in_ext_status_code	  IN VARCHAR2,
13:32:31 195  	in_ext_status_message	  IN VARCHAR2,
13:32:31 196  	in_ext_transaction_id	  IN VARCHAR2
13:32:31 197  ) AS
13:32:31 198  BEGIN
13:32:31 199  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_ATTEMPT_INF(
13:32:31 200  	  in_transaction_attempt_id,
13:32:31 201  	  in_ext_status_code,
13:32:31 202  	  in_ext_status_message,
13:32:31 203  	  in_ext_transaction_id
13:32:31 204  	);
13:32:31 205  END UPDATE_TRANSACTION_ATTEMPT_INF;
13:32:31 206  
13:32:31 207  /********************************************************/
13:32:31 208  
13:32:31 209  PROCEDURE UPDATE_TRANSACTION_STATUS (
13:32:31 210  /*
13:32:31 211  Throws exceptions:
13:32:31 212  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 213  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 214  */
13:32:31 215  	in_transaction_id	 IN NUMBER,
13:32:31 216  	in_updated_by		 IN VARCHAR2,
13:32:31 217  	in_transaction_status_id IN NUMBER
13:32:31 218  ) AS
13:32:31 219  BEGIN
13:32:31 220  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
13:32:31 221  	  in_transaction_id,
13:32:31 222  	  in_updated_by,
13:32:31 223  	  in_transaction_status_id
13:32:31 224  	);
13:32:31 225  END UPDATE_TRANSACTION_STATUS;
13:32:31 226  
13:32:31 227  /********************************************************/
13:32:31 228  
13:32:31 229  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
13:32:31 230  /*
13:32:31 231  Throws exceptions:
13:32:31 232  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 233  */
13:32:31 234  	in_transaction_id IN  NUMBER,
13:32:31 235  	out_attempts_num  OUT NUMBER
13:32:31 236  ) AS
13:32:31 237  BEGIN
13:32:31 238  	PROCS_TRANSACTION_V20.GET_FAILED_ATTEMPTS_NUMBER(
13:32:31 239  	  in_transaction_id,
13:32:31 240  	  out_attempts_num
13:32:31 241  	);
13:32:31 242  END GET_FAILED_ATTEMPTS_NUMBER;
13:32:31 243  
13:32:31 244  /********************************************************/
13:32:31 245  
13:32:31 246  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
13:32:31 247  /*
13:32:31 248  Throws exceptions:
13:32:31 249  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 250  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 251  */
13:32:31 252  	in_transaction_id IN  NUMBER,
13:32:31 253  	out_is_successfull  OUT NUMBER
13:32:31 254  ) AS
13:32:31 255  BEGIN
13:32:31 256  	PROCS_TRANSACTION_V20.IS_TRANSACTION_SUCCESSFULL(
13:32:31 257  	  in_transaction_id,
13:32:31 258  	  out_is_successfull
13:32:31 259  	);
13:32:31 260  END IS_TRANSACTION_SUCCESSFULL;
13:32:31 261  /********************************************************/
13:32:31 262  
13:32:31 263  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:31 264  /*
13:32:31 265  Throws exceptions:
13:32:31 266  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 267  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 268  */
13:32:31 269  	in_invoice_id		       IN NUMBER,
13:32:31 270  	in_invoice_status_id	       IN NUMBER,
13:32:31 271  	in_updated_by		       IN VARCHAR2
13:32:31 272  ) AS
13:32:31 273  BEGIN
13:32:31 274  	PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
13:32:31 275  	  in_invoice_id,
13:32:31 276  	  in_invoice_status_id,
13:32:31 277  	  in_updated_by
13:32:31 278  	);
13:32:31 279  END UPDATE_INVOICE_STATUS;
13:32:31 280  
13:32:31 281  /********************************************************/
13:32:31 282  
13:32:31 283  PROCEDURE SUSPEND_SUBSCRIPTION(
13:32:31 284  /*
13:32:31 285  Throws exceptions:
13:32:31 286  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 287  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:31 288  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 289  */
13:32:31 290  	  in_subs_id	IN NUMBER ,
13:32:31 291  	  in_updated_by IN VARCHAR2
13:32:31 292  ) AS
13:32:31 293  BEGIN
13:32:31 294  	PROCS_SUBSCRIPTION_V20.SUSPEND_SUBSCRIPTION(
13:32:31 295  	  in_subs_id,
13:32:31 296  	  in_updated_by
13:32:31 297  	);
13:32:31 298  END SUSPEND_SUBSCRIPTION;
13:32:31 299  
13:32:31 300  /********************************************************/
13:32:31 301  
13:32:31 302  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:31 303  /*
13:32:31 304  Throws exceptions:
13:32:31 305  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 306  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 307  */
13:32:31 308  	in_credit_card_id IN  NUMBER,
13:32:31 309  	out_result_set	  OUT SYS_REFCURSOR
13:32:31 310  ) AS
13:32:31 311  BEGIN
13:32:31 312  	PROCS_FIN_INSTRUMENTS_V20.GET_CREDIT_CARD_BY_ID(
13:32:31 313  	  in_credit_card_id,
13:32:31 314  	  out_result_set
13:32:31 315  	);
13:32:31 316  END GET_CREDIT_CARD_BY_ID;
13:32:31 317  
13:32:31 318  /*********************************************************/
13:32:31 319  
13:32:31 320  PROCEDURE GET_TRANSACTION_AMOUNT (
13:32:31 321  /*
13:32:31 322  Throws exceptions:
13:32:31 323  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 324  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 325  */
13:32:31 326  	in_transaction_id      IN  NUMBER,
13:32:31 327  	out_transaction_amount OUT NUMBER
13:32:31 328  ) AS
13:32:31 329  BEGIN
13:32:31 330  	PROCS_TRANSACTION_V20.GET_TRANSACTION_AMOUNT(
13:32:31 331  	  in_transaction_id,
13:32:31 332  	  out_transaction_amount
13:32:31 333  	);
13:32:31 334  END GET_TRANSACTION_AMOUNT;
13:32:31 335  
13:32:31 336  /***********************************************************/
13:32:31 337  
13:32:31 338  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
13:32:31 339  /*
13:32:31 340  Throws exceptions:
13:32:31 341  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 343  */
13:32:31 344  	in_invoice_id  IN  NUMBER,
13:32:31 345  	out_account_id OUT NUMBER
13:32:31 346  ) AS
13:32:31 347  BEGIN
13:32:31 348  	PROCS_INVOICE_V20.GET_ACCOUNT_BY_INVOICE_ID(
13:32:31 349  	  in_invoice_id,
13:32:31 350  	  out_account_id
13:32:31 351  	);
13:32:31 352  END GET_ACCOUNT_BY_INVOICE_ID;
13:32:31 353  
13:32:31 354  /************************************************************/
13:32:31 355  
13:32:31 356  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
13:32:31 357  /*
13:32:31 358  Throws exceptions:
13:32:31 359  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 360  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 361  */
13:32:31 362  	in_gift_certificate_id IN NUMBER,
13:32:31 363  	out_result_set	       OUT SYS_REFCURSOR
13:32:31 364  ) AS
13:32:31 365  BEGIN
13:32:31 366  	PROCS_FIN_INSTRUMENTS_V20.GET_GIFT_CERTIFICATE_BY_ID (
13:32:31 367  	  in_gift_certificate_id,
13:32:31 368  	  out_result_set
13:32:31 369  	);
13:32:31 370  END GET_GIFT_CERTIFICATE_BY_ID;
13:32:31 371  
13:32:31 372  /**************************************************************/
13:32:31 373  
13:32:31 374  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
13:32:31 375  /*
13:32:31 376  Throws exceptions:
13:32:31 377  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 378  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 379  */
13:32:31 380  	in_charge_id	    IN NUMBER,
13:32:31 381  	out_subscription_id OUT NUMBER
13:32:31 382  ) AS
13:32:31 383  BEGIN
13:32:31 384  	PROCS_CHARGE_V20.GET_SUBSCR_ID_BY_CHARGE_ID(
13:32:31 385  	  in_charge_id,
13:32:31 386  	  out_subscription_id
13:32:31 387  	);
13:32:31 388  END GET_SUBSCR_ID_BY_CHARGE_ID;
13:32:31 389  
13:32:31 390  /**************************************************************/
13:32:31 391  
13:32:31 392  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
13:32:31 393  /*
13:32:31 394  Throws exceptions:
13:32:31 395  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 396  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 397  */
13:32:31 398  	in_gift_certificate_id IN NUMBER,
13:32:31 399  	in_charge_id	       IN NUMBER,
13:32:31 400  	out_result	       OUT NUMBER
13:32:31 401  ) AS
13:32:31 402  BEGIN
13:32:31 403  	PROCS_FIN_INSTRUMENTS_V20.IS_GCERT_FOR_PROPER_OFFER (
13:32:31 404  	  in_gift_certificate_id,
13:32:31 405  	  in_charge_id,
13:32:31 406  	  out_result
13:32:31 407  	);
13:32:31 408  END IS_GCERT_FOR_PROPER_OFFER;
13:32:31 409  
13:32:31 410  /**************************************************************/
13:32:31 411  
13:32:31 412  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:31 413  /*
13:32:31 414  Throws exceptions:
13:32:31 415  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 416  */
13:32:31 417  	  in_subscription_id IN  NUMBER,
13:32:31 418  	  out_result_set      OUT SYS_REFCURSOR
13:32:31 419  ) AS
13:32:31 420  BEGIN
13:32:31 421  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTION_INFO (
13:32:31 422  	  in_subscription_id,
13:32:31 423  	  out_result_set
13:32:31 424  	);
13:32:31 425  END GET_SUBSCRIPTION_INFO;
13:32:31 426  
13:32:31 427  /****************************************************************/
13:32:31 428  
13:32:31 429  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:31 430  /*
13:32:31 431  Throws exceptions:
13:32:31 432  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 433  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 434  */
13:32:31 435  	in_invoice_id IN  NUMBER,
13:32:31 436  	out_amount    OUT NUMBER
13:32:31 437  ) AS
13:32:31 438  BEGIN
13:32:31 439  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
13:32:31 440  	  in_invoice_id,
13:32:31 441  	  out_amount
13:32:31 442  	);
13:32:31 443  END CALCULATE_INVOICE_AMOUNT;
13:32:31 444  
13:32:31 445  /****************************************************************/
13:32:31 446  
13:32:31 447  PROCEDURE GET_TRANSACTION_BY_ID (
13:32:31 448  /*
13:32:31 449  Throws exceptions:
13:32:31 450  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 451  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 452  */
13:32:31 453  	in_transaction_id IN NUMBER,
13:32:31 454  	out_result_set	  OUT SYS_REFCURSOR
13:32:31 455  ) AS
13:32:31 456  BEGIN
13:32:31 457  	PROCS_TRANSACTION_V20.GET_TRANSACTION_BY_ID(
13:32:31 458  	  in_transaction_id,
13:32:31 459  	  out_result_set
13:32:31 460  	);
13:32:31 461  END GET_TRANSACTION_BY_ID;
13:32:31 462  
13:32:31 463  /****************************************************************/
13:32:31 464  
13:32:31 465  PROCEDURE UPDATE_CHARGE_STATUS (
13:32:31 466  /*
13:32:31 467  Throws exceptions:
13:32:31 468  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 469  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 470  */
13:32:31 471  	in_charge_id	    IN CHARGE.ID%TYPE,
13:32:31 472  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
13:32:31 473  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
13:32:31 474  ) AS
13:32:31 475  BEGIN
13:32:31 476  	PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
13:32:31 477  	  in_charge_id,
13:32:31 478  	  in_charge_status_id,
13:32:31 479  	  in_updated_by
13:32:31 480  	);
13:32:31 481  END UPDATE_CHARGE_STATUS;
13:32:31 482  
13:32:31 483  /****************************************************************/
13:32:31 484  
13:32:31 485  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:31 486  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:31 487  	out_result_set OUT SYS_REFCURSOR
13:32:31 488  ) AS
13:32:31 489  BEGIN
13:32:31 490  	PROCS_FIN_INSTRUMENTS_V20.GET_GC_BY_PURCH_INVOICE_ID(
13:32:31 491  	  in_invoice_id,
13:32:31 492  	  out_result_set
13:32:31 493  	);
13:32:31 494  END GET_GC_BY_PURCH_INVOICE_ID;
13:32:31 495  
13:32:31 496  /****************************************************************/
13:32:31 497  
13:32:31 498  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
13:32:31 499  /*
13:32:31 500  Throws exceptions:
13:32:31 501  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 502  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
13:32:31 503  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 504  */
13:32:31 505  	in_transaction_id IN TRANSACTION.ID%TYPE,
13:32:31 506  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
13:32:31 507  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
13:32:31 508  ) AS
13:32:31 509  BEGIN
13:32:31 510  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_ORDER_ID(
13:32:31 511  	  in_transaction_id,
13:32:31 512  	  in_order_id,
13:32:31 513  	  in_updated_by
13:32:31 514  	);
13:32:31 515  END UPDATE_TRANSACTION_ORDER_ID;
13:32:31 516  
13:32:31 517  /****************************************************************/
13:32:31 518  
13:32:31 519  PROCEDURE GET_ACTIVE_INVOICES_IDS (
13:32:31 520  /*
13:32:31 521  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 522  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 523  */
13:32:31 524  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
13:32:31 525  	in_subscription_id IN NUMBER,
13:32:31 526  	out_result_set	   OUT SYS_REFCURSOR
13:32:31 527  ) AS
13:32:31 528  BEGIN
13:32:31 529  	PROCS_SUBSCRIPTION_V20.GET_ACTIVE_INVOICES_IDS(
13:32:31 530  	  in_subscription_id,
13:32:31 531  	  out_result_set
13:32:31 532  	);
13:32:31 533  END GET_ACTIVE_INVOICES_IDS;
13:32:31 534  
13:32:31 535  /****************************************************************/
13:32:31 536  
13:32:31 537  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
13:32:31 538  /*
13:32:31 539  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 540  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 541  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:31 542  */
13:32:31 543  --  in_invoice_id        IN INVOICE.ID%TYPE,
13:32:31 544  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
13:32:31 545  -- norlov: in_refundable	      IN refund enabled
13:32:31 546  	in_invoice_id	     IN NUMBER,
13:32:31 547  	in_updated_by	     IN VARCHAR2,
13:32:31 548  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
13:32:31 549  --  in_cancellation_date IN DATE DEFAULT current_timestamp
13:32:31 550  ) AS
13:32:31 551  BEGIN
13:32:31 552  	PROCS_SUBSCRIPTION_V20.CANCEL_SUBSCRIPTION_INVOICE(
13:32:31 553  	  in_invoice_id,
13:32:31 554  	  in_updated_by,
13:32:31 555  	  in_refundable
13:32:31 556  	);
13:32:31 557  END CANCEL_SUBSCRIPTION_INVOICE;
13:32:31 558  
13:32:31 559  /****************************************************************/
13:32:31 560  
13:32:31 561  PROCEDURE FINALIZE_CANCELATION (
13:32:31 562  /*
13:32:31 563  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 564  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 565  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:31 566  */
13:32:31 567  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
13:32:31 568  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
13:32:31 569  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
13:32:31 570  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
13:32:31 571  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
13:32:31 572  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
13:32:31 573  	in_subscription_id    IN NUMBER,
13:32:31 574  	in_cancelation_reason IN VARCHAR2,
13:32:31 575  	in_cancelation_date   IN DATE,
13:32:31 576  	in_note 	      IN VARCHAR2,
13:32:31 577  	in_agent_id	      IN NUMBER,
13:32:31 578  	in_updated_by	      IN VARCHAR2
13:32:31 579  ) AS
13:32:31 580  BEGIN
13:32:31 581  	PROCS_SUBSCRIPTION_V20.FINALIZE_CANCELATION(
13:32:31 582  	  in_subscription_id,
13:32:31 583  	  in_cancelation_reason,
13:32:31 584  	  in_cancelation_date,
13:32:31 585  	  in_note,
13:32:31 586  	  in_agent_id,
13:32:31 587  	  in_updated_by
13:32:31 588  	);
13:32:31 589  END FINALIZE_CANCELATION;
13:32:31 590  
13:32:31 591  /****************************************************************/
13:32:31 592  
13:32:31 593  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
13:32:31 594  /*
13:32:31 595  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 596  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 597  */
13:32:31 598  	in_subscription_id IN NUMBER,
13:32:31 599  	out_result_set	   OUT SYS_REFCURSOR
13:32:31 600  ) AS
13:32:31 601  BEGIN
13:32:31 602  	PROCS_SUBSCRIPTION_V20.GET_SUBSCR_PROD_OFFERRINGS(
13:32:31 603  	  in_subscription_id,
13:32:31 604  	  out_result_set
13:32:31 605  	);
13:32:31 606  END GET_SUBSCR_PROD_OFFERRINGS;
13:32:31 607  
13:32:31 608  /****************************************************************/
13:32:31 609  
13:32:31 610  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:31 611  /*
13:32:31 612  Throws exceptions (codes):
13:32:31 613  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 614  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 615  */
13:32:31 616  	in_offer_chain_id IN NUMBER,
13:32:31 617  	in_meta_data_name IN VARCHAR2,
13:32:31 618  	out_result_set	  OUT SYS_REFCURSOR
13:32:31 619  )AS
13:32:31 620  BEGIN
13:32:31 621  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_META_DATA(
13:32:31 622  	  in_offer_chain_id,
13:32:31 623  	  in_meta_data_name,
13:32:31 624  	  out_result_set
13:32:31 625  	);
13:32:31 626  END GET_OFFER_CHAIN_META_DATA;
13:32:31 627  
13:32:31 628  /****************************************************************/
13:32:31 629  
13:32:31 630  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:31 631  /*
13:32:31 632  Throws exceptions (codes):
13:32:31 633  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 634  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 635  */
13:32:31 636  	in_product_offering_id IN NUMBER,
13:32:31 637  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
13:32:31 638  	out_result_set	       OUT SYS_REFCURSOR
13:32:31 639  )AS
13:32:31 640  BEGIN
13:32:31 641  	PROCS_OFFER_CHAIN_V20.GET_PRODUCT_OFFERING_META_DATA(
13:32:31 642  	  in_product_offering_id,
13:32:31 643  	  in_meta_data_name,
13:32:31 644  	  out_result_set
13:32:31 645  	);
13:32:31 646  END GET_PRODUCT_OFFERING_META_DATA;
13:32:31 647  
13:32:31 648  /****************************************************************/
13:32:31 649  
13:32:31 650  PROCEDURE READ_ACCOUNT (
13:32:31 651  	in_account_id  IN ACCOUNT.ID%TYPE,
13:32:31 652  	out_result_set OUT SYS_REFCURSOR
13:32:31 653  )AS
13:32:31 654  BEGIN
13:32:31 655  	PROCS_ACCOUNT_CRU_V20.READ_ACCOUNT(
13:32:31 656  	  in_account_id,
13:32:31 657  	  out_result_set
13:32:31 658  	);
13:32:31 659  END READ_ACCOUNT;
13:32:31 660  
13:32:31 661  /****************************************************************/
13:32:31 662  
13:32:31 663  PROCEDURE GET_COLLECTED_CHARGES (
13:32:31 664  /*
13:32:31 665  Throws exceptions:
13:32:31 666  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 667  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 668  */
13:32:31 669  	in_invoice_id  IN NUMBER,
13:32:31 670  	out_result_set OUT SYS_REFCURSOR
13:32:31 671  ) AS
13:32:31 672  BEGIN
13:32:31 673  	PROCS_CHARGE_V20.GET_COLLECTED_CHARGES(
13:32:31 674  	  in_invoice_id,
13:32:31 675  	  out_result_set
13:32:31 676  	);
13:32:31 677  END GET_COLLECTED_CHARGES;
13:32:31 678  
13:32:31 679  /****************************************************************/
13:32:31 680  
13:32:31 681  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
13:32:31 682  /*
13:32:31 683  Throws exceptions:
13:32:31 684  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 685  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 686  */
13:32:31 687  	in_invoice_id IN NUMBER,
13:32:31 688  	out_group_ids OUT SYS_REFCURSOR
13:32:31 689  ) AS
13:32:31 690  BEGIN
13:32:31 691  
13:32:31 692  	PROCS_ACCOUNT_V20.GET_GROUPS_ID_BY_INVOICE_ID(
13:32:31 693  	  in_invoice_id,
13:32:31 694  	  out_group_ids
13:32:31 695  	);
13:32:31 696  
13:32:31 697  END GET_GROUPS_ID_BY_INVOICE_ID;
13:32:31 698  
13:32:31 699  /****************************************************************/
13:32:31 700  
13:32:31 701  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:31 702  /*
13:32:31 703  Throws exceptions:
13:32:31 704  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 705  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 706  */
13:32:31 707  	in_group_id IN NUMBER,
13:32:31 708  	out_account_id	OUT NUMBER
13:32:31 709  ) AS
13:32:31 710  BEGIN
13:32:31 711  
13:32:31 712  	PROCS_ACCOUNT_V20.GET_ACCOUNT_ID_BY_GROUP_ID(
13:32:31 713  	  in_group_id,
13:32:31 714  	  out_account_id
13:32:31 715  	);
13:32:31 716  
13:32:31 717  END GET_ACCOUNT_ID_BY_GROUP_ID;
13:32:31 718  
13:32:31 719  /****************************************************************/
13:32:31 720  
13:32:31 721  PROCEDURE LOCK_ACCOUNT (
13:32:31 722  	in_group_id    IN NUMBER,
13:32:31 723  	in_lock_key    IN VARCHAR2,
13:32:31 724  	in_seconds_num IN NUMBER,
13:32:31 725  	in_created_by  IN VARCHAR2,
13:32:31 726  	in_reason      IN VARCHAR2
13:32:31 727  ) AS
13:32:31 728  BEGIN
13:32:31 729  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
13:32:31 730  	  in_group_id,
13:32:31 731  	  in_lock_key,
13:32:31 732  	  in_seconds_num,
13:32:31 733  	  in_created_by,
13:32:31 734  	  in_reason
13:32:31 735  	);
13:32:31 736  END LOCK_ACCOUNT;
13:32:31 737  
13:32:31 738  /****************************************************************/
13:32:31 739  
13:32:31 740  PROCEDURE RELEASE_LOCK (
13:32:31 741  	in_group_id IN NUMBER,
13:32:31 742  	in_lock_key IN VARCHAR2
13:32:31 743  ) AS
13:32:31 744  BEGIN
13:32:31 745  	PROCS_LOCKING_V20.RELEASE_LOCK(
13:32:31 746  	  in_group_id,
13:32:31 747  	  in_lock_key
13:32:31 748  	);
13:32:31 749  END RELEASE_LOCK;
13:32:31 750  
13:32:31 751  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
13:32:31 752  	in_invoice_id		    IN NUMBER,
13:32:31 753  	out_order_id		    OUT VARCHAR2,
13:32:31 754  	out_external_transaction_id OUT VARCHAR2
13:32:31 755  ) AS
13:32:31 756  BEGIN
13:32:31 757  	PROCS_INVOICE_V20.GET_PAYMENT_INFO_BY_INVOICE_ID(
13:32:31 758  	  in_invoice_id,
13:32:31 759  	  out_order_id,
13:32:31 760  	  out_external_transaction_id
13:32:31 761  	);
13:32:31 762  END GET_PAYMENT_INFO_BY_INVOICE_ID;
13:32:31 763  
13:32:31 764  /******************************************************************************/
13:32:31 765  
13:32:31 766  PROCEDURE GET_PAYPAL_BY_ID (
13:32:31 767  	in_paypal_id   IN  NUMBER,
13:32:31 768  	out_result_set OUT SYS_REFCURSOR
13:32:31 769  ) AS
13:32:31 770  BEGIN
13:32:31 771  	PROCS_FIN_INSTRUMENTS_V20.GET_PAYPAL_BY_ID(
13:32:31 772  	  in_paypal_id,
13:32:31 773  	  out_result_set
13:32:31 774  	);
13:32:31 775  END GET_PAYPAL_BY_ID;
13:32:31 776  
13:32:31 777  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
13:32:31 778  /*
13:32:31 779  Throws exceptions:
13:32:31 780  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 781  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 782  */
13:32:31 783  	in_charge_id   in  number,
13:32:31 784  	out_attempt_count out number
13:32:31 785  ) as
13:32:31 786  begin
13:32:31 787  	PROCS_TRANSACTION_V20.GET_NEXT_ATTEMPT_NUMBER(
13:32:31 788  	  in_charge_id,
13:32:31 789  	  out_attempt_count
13:32:31 790  	);
13:32:31 791  end GET_NEXT_ATTEMPT_NUMBER;
13:32:31 792  
13:32:31 793  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:31 794  	in_offer_chain_id	 IN NUMBER,
13:32:31 795  	in_action_name		 IN VARCHAR2,
13:32:31 796  	out_notification_type_id out number
13:32:31 797  ) as
13:32:31 798  begin
13:32:31 799  	PROCS_OFFER_CHAIN_V20.GET_NOTIFICATION_TYPE_ID(
13:32:31 800  	  in_offer_chain_id,
13:32:31 801  	  in_action_name,
13:32:31 802  	  out_notification_type_id
13:32:31 803  	);
13:32:31 804  end GET_NOTIFICATION_TYPE_ID;
13:32:31 805  
13:32:31 806  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
13:32:31 807  /*
13:32:31 808  Throws exceptions:
13:32:31 809  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 810  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 811  */
13:32:31 812  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:31 813  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
13:32:31 814  ) AS
13:32:31 815  BEGIN
13:32:31 816  PROCS_FIN_INSTRUMENTS_V20.GET_GC_ID_BY_PURCH_INVOICE_ID(
13:32:31 817  in_invoice_id,
13:32:31 818  out_gift_certificate_id
13:32:31 819  );
13:32:31 820  END GET_GC_ID_BY_PURCH_INVOICE_ID;
13:32:31 821  
13:32:31 822  /****************************************************************************/
13:32:31 823  
13:32:31 824  PROCEDURE SHOULD_MOVE_TO_GRACE(
13:32:31 825  	in_invoice_id  IN INVOICE.ID%TYPE,
13:32:31 826  	out_result     OUT NUMBER
13:32:31 827  ) AS
13:32:31 828  BEGIN
13:32:31 829  	-- if the invoice preceding the given invoice has no transaction attempts, then
13:32:31 830  	-- it is not billed out of Sartre. if so, then the associated subscription
13:32:31 831  	-- should be canceled after a final failed billing attempt--not moved to grace.
13:32:31 832  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
13:32:31 833  	FROM CHARGE c
13:32:31 834  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
13:32:31 835  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
13:32:31 836  	WHERE c.INVOICE_ID = (
13:32:31 837  	  -- select previous invoice_id, or -1 if there is none
13:32:31 838  	  SELECT PREV_INVOICE_ID FROM (
13:32:31 839  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
13:32:31 840  	    FROM INVOICE i
13:32:31 841  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
13:32:31 842  	    WHERE l.SUBSCRIPTION_ID = (
13:32:31 843  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
13:32:31 844  	    )
13:32:31 845  	  ) WHERE ID = in_invoice_id
13:32:31 846  	);
13:32:31 847  END SHOULD_MOVE_TO_GRACE;
13:32:31 848  
13:32:31 849  /****************************************************************************/
13:32:31 850  
13:32:31 851  PROCEDURE MOVE_TO_GRACE(
13:32:31 852  	in_invoice_id		      IN INVOICE.ID%TYPE,
13:32:31 853  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
13:32:31 854  	in_grace_period_length_hours  IN NUMBER
13:32:31 855  ) AS
13:32:31 856  BEGIN
13:32:31 857  	PROCS_SUBSCRIPTION_V20.START_GRACE_BY_INVOICE_ID(
13:32:31 858  	  in_invoice_id        => in_invoice_id,
13:32:31 859  	  in_updater	       => in_updated_by,
13:32:31 860  	  in_duration_in_hours => in_grace_period_length_hours
13:32:31 861  	);
13:32:31 862  END MOVE_TO_GRACE;
13:32:31 863  
13:32:31 864  /****************************************************************************/
13:32:31 865  
13:32:31 866  PROCEDURE MOVE_OUT_OF_GRACE(
13:32:31 867  	in_invoice_id	IN INVOICE.ID%TYPE,
13:32:31 868  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
13:32:31 869  ) AS
13:32:31 870  BEGIN
13:32:31 871  	PROCS_SUBSCRIPTION_V20.STOP_GRACE_BY_INVOICE_ID(
13:32:31 872  	  in_invoice_id => in_invoice_id,
13:32:31 873  	  in_updater	=> in_updated_by
13:32:31 874  	);
13:32:31 875  END MOVE_OUT_OF_GRACE;
13:32:31 876  
13:32:31 877  END PUBLIC_PROCS_BILLING_V20;
13:32:31 878  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.07
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE LOCK_ACCOUNT (
13:32:31   4  	in_group_id    IN NUMBER,
13:32:31   5  	in_lock_key    IN VARCHAR2,
13:32:31   6  	in_seconds_num IN NUMBER,
13:32:31   7  	in_created_by  IN VARCHAR2,
13:32:31   8  	in_reason      IN VARCHAR2
13:32:31   9  ) AS
13:32:31  10  BEGIN
13:32:31  11  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
13:32:31  12  	  in_group_id,
13:32:31  13  	  in_lock_key,
13:32:31  14  	  in_seconds_num,
13:32:31  15  	  in_created_by,
13:32:31  16  	  in_reason
13:32:31  17  	);
13:32:31  18  END LOCK_ACCOUNT;
13:32:31  19  
13:32:31  20  /******************************************************************************/
13:32:31  21  
13:32:31  22  PROCEDURE RELEASE_LOCK (
13:32:31  23  	in_group_id IN NUMBER,
13:32:31  24  	in_lock_key IN VARCHAR2
13:32:31  25  ) AS
13:32:31  26  BEGIN
13:32:31  27  	PROCS_LOCKING_V20.RELEASE_LOCK(
13:32:31  28  	  in_group_id,
13:32:31  29  	  in_lock_key
13:32:31  30  	);
13:32:31  31  END RELEASE_LOCK;
13:32:31  32  
13:32:31  33  END PUBLIC_PROCS_NOTIFICATION_V20;
13:32:31  34  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
13:32:31   4  	out_result_set OUT SYS_REFCURSOR
13:32:31   5  ) AS
13:32:31   6  BEGIN
13:32:31   7  	PROCS_GROUP_ACCOUNT_V20.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
13:32:31   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
13:32:31   9  
13:32:31  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
13:32:31  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
13:32:31  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
13:32:31  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
13:32:31  14  ) AS
13:32:31  15  BEGIN
13:32:31  16  	PROCS_GROUP_ACCOUNT_V20.UPDATE_SS_NEED_ENTITLEMENTS(
13:32:31  17  	  in_sub_share_id => in_sub_share_id,
13:32:31  18  	  in_need_entitlements => in_need_entitlements,
13:32:31  19  	  in_updater => in_updater
13:32:31  20  	);
13:32:31  21  END UPDATE_SS_NEED_ENTITLEMENTS;
13:32:31  22  
13:32:31  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
13:32:31  24  /*
13:32:31  25  Throws exceptions:
13:32:31  26  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  27  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  28  */
13:32:31  29  	  in_offer_chain_id IN	 NUMBER,
13:32:31  30  	  out_result_set    OUT  SYS_REFCURSOR
13:32:31  31  ) AS
13:32:31  32  BEGIN
13:32:31  33  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_BY_ID (
13:32:31  34  	  in_offer_chain_id => in_offer_chain_id,
13:32:31  35  	  out_result_set => out_result_set
13:32:31  36  	);
13:32:31  37  END GET_OFFER_CHAIN_BY_ID;
13:32:31  38  
13:32:31  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
13:32:31  40  /*
13:32:31  41  Throws exceptions (codes):
13:32:31  42  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  43  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  44  */
13:32:31  45  	in_offer_chain_id IN NUMBER,
13:32:31  46  	in_meta_data_name IN VARCHAR2,
13:32:31  47  	out_result_set	  OUT SYS_REFCURSOR
13:32:31  48  )AS
13:32:31  49  BEGIN
13:32:31  50  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_META_DATA(
13:32:31  51  	  in_offer_chain_id,
13:32:31  52  	  in_meta_data_name,
13:32:31  53  	  out_result_set
13:32:31  54  	);
13:32:31  55  END GET_OFFER_CHAIN_META_DATA;
13:32:31  56  
13:32:31  57  PROCEDURE GET_ENDING_LICENSES (
13:32:31  58  /*
13:32:31  59  Throws exceptions:
13:32:31  60  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  61  */
13:32:31  62  	in_hours_number IN NUMBER,
13:32:31  63  	out_result_set OUT SYS_REFCURSOR
13:32:31  64  ) AS
13:32:31  65  BEGIN
13:32:31  66  	PROCS_LICENSE_V20.GET_ENDING_LICENSES(in_hours_number,out_result_set);
13:32:31  67  END GET_ENDING_LICENSES;
13:32:31  68  
13:32:31  69  PROCEDURE GET_ENDING_LICENSES_CC (
13:32:31  70  /*
13:32:31  71  Throws exceptions:
13:32:31  72  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  73  */
13:32:31  74  	in_hours_number IN NUMBER,
13:32:31  75  	out_result_set OUT SYS_REFCURSOR,
13:32:31  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:31  77  ) AS
13:32:31  78  BEGIN
13:32:31  79  	PROCS_LICENSE_V20.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
13:32:31  80  END GET_ENDING_LICENSES_CC;
13:32:31  81  
13:32:31  82  /*******************************************************/
13:32:31  83  
13:32:31  84  PROCEDURE GET_RECURRING_OFFER (
13:32:31  85  /*
13:32:31  86  Throws exceptions:
13:32:31  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  88  */
13:32:31  89  	in_license_id  IN NUMBER,
13:32:31  90  	out_result_set OUT SYS_REFCURSOR
13:32:31  91  ) AS
13:32:31  92  BEGIN
13:32:31  93  	PROCS_LICENSE_V20.GET_RECURRING_OFFER (
13:32:31  94  	  in_license_id,
13:32:31  95  	  out_result_set
13:32:31  96  	);
13:32:31  97  END GET_RECURRING_OFFER;
13:32:31  98  
13:32:31  99  /********************************************************/
13:32:31 100  
13:32:31 101  PROCEDURE GET_NEXT_OFFER (
13:32:31 102  /*
13:32:31 103  Throws exceptions:
13:32:31 104  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 105  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:31 106  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 107  */
13:32:31 108  	in_license_id  IN NUMBER,
13:32:31 109  	out_result_set OUT SYS_REFCURSOR
13:32:31 110  ) AS
13:32:31 111  BEGIN
13:32:31 112  	PROCS_LICENSE_V20.GET_NEXT_OFFER (
13:32:31 113  	  in_license_id,
13:32:31 114  	  out_result_set
13:32:31 115  	);
13:32:31 116  END GET_NEXT_OFFER;
13:32:31 117  
13:32:31 118  /*********************************************************/
13:32:31 119  
13:32:31 120  PROCEDURE UPDATE_LICENSE_STATUS(
13:32:31 121  /*
13:32:31 122  Throws exceptions:
13:32:31 123  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 124  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 125  */
13:32:31 126  	  in_license_id     IN NUMBER,
13:32:31 127  	  in_license_status IN NUMBER,
13:32:31 128  	  in_updated_by     IN VARCHAR2
13:32:31 129  ) AS
13:32:31 130  BEGIN
13:32:31 131  	PROCS_LICENSE_V20.UPDATE_LICENSE_STATUS (
13:32:31 132  	  in_license_id,
13:32:31 133  	  in_license_status,
13:32:31 134  	  in_updated_by
13:32:31 135  	);
13:32:31 136  END UPDATE_LICENSE_STATUS;
13:32:31 137  
13:32:31 138  /**********************************************************/
13:32:31 139  
13:32:31 140  PROCEDURE UPDATE_INVOICE_STATUS (
13:32:31 141  /*
13:32:31 142  Throws exceptions:
13:32:31 143  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 144  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 145  */
13:32:31 146  	in_invoice_id		       IN NUMBER,
13:32:31 147  	in_invoice_status_id	       IN NUMBER,
13:32:31 148  	in_updated_by		       IN VARCHAR2
13:32:31 149  ) AS
13:32:31 150  BEGIN
13:32:31 151  	PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
13:32:31 152  	  in_invoice_id,
13:32:31 153  	  in_invoice_status_id,
13:32:31 154  	  in_updated_by
13:32:31 155  	);
13:32:31 156  END UPDATE_INVOICE_STATUS;
13:32:31 157  
13:32:31 158  /***********************************************************/
13:32:31 159  
13:32:31 160  PROCEDURE CREATE_LICENSE(
13:32:31 161  /*
13:32:31 162  Throws exceptions:
13:32:31 163  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 164  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 165  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
13:32:31 166  */
13:32:31 167  	in_status_id		    IN NUMBER,
13:32:31 168  	in_needs_entitlements	    IN NUMBER,
13:32:31 169  	in_start_date		    IN DATE,
13:32:31 170  	in_end_date		    IN DATE,
13:32:31 171  	in_offer_id		    IN NUMBER,
13:32:31 172  	in_subscription_id	    IN NUMBER,
13:32:31 173  	in_invoice_id		    IN NUMBER,
13:32:31 174  	in_created_by		    IN VARCHAR2,
13:32:31 175  	in_is_extension 	    IN NUMBER,
13:32:31 176  	in_current_offer_index	    IN NUMBER,
13:32:31 177  	in_current_offer_recurr_num IN NUMBER,
13:32:31 178  	out_license_id		    OUT NUMBER
13:32:31 179  ) AS
13:32:31 180  BEGIN
13:32:31 181  	PROCS_LICENSE_V20.CREATE_LICENSE (
13:32:31 182  	  in_status_id,
13:32:31 183  	  in_needs_entitlements,
13:32:31 184  	  in_start_date,
13:32:31 185  	  in_end_date,
13:32:31 186  	  in_offer_id,
13:32:31 187  	  in_subscription_id,
13:32:31 188  	  in_invoice_id,
13:32:31 189  	  in_created_by,
13:32:31 190  	  in_is_extension,
13:32:31 191  	  in_current_offer_index,
13:32:31 192  	  in_current_offer_recurr_num,
13:32:31 193  	  out_license_id
13:32:31 194  	);
13:32:31 195  END CREATE_LICENSE;
13:32:31 196  
13:32:31 197  /******************************************************/
13:32:31 198  
13:32:31 199  PROCEDURE CREATE_INVOICE(
13:32:31 200  /*
13:32:31 201  Throws exceptions:
13:32:31 202  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 203  */
13:32:31 204  	  in_invoice_status IN NUMBER,
13:32:31 205  	  in_created_by     IN VARCHAR2,
13:32:31 206  	  in_tax_exempt_id  IN VARCHAR2,
13:32:31 207  	  out_invoice_id    OUT NUMBER
13:32:31 208  ) AS
13:32:31 209  BEGIN
13:32:31 210  	PROCS_INVOICE_V20.CREATE_INVOICE (
13:32:31 211  	  in_invoice_status,
13:32:31 212  	  in_created_by,
13:32:31 213  	  in_tax_exempt_id,
13:32:31 214  	  out_invoice_id
13:32:31 215  	);
13:32:31 216  END CREATE_INVOICE;
13:32:31 217  
13:32:31 218  /*******************************************************/
13:32:31 219  
13:32:31 220  PROCEDURE CREATE_CHARGE(
13:32:31 221  /*
13:32:31 222  Throws exceptions:
13:32:31 223  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 224  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 225  */
13:32:31 226  	in_invoice_id	      IN NUMBER,
13:32:31 227  	in_transaction_id     IN NUMBER,
13:32:31 228  	in_instrument_type_id IN NUMBER,
13:32:31 229  	in_instrument_id      IN NUMBER,
13:32:31 230  	in_charge_amount      IN NUMBER,
13:32:31 231  	in_created_by	      IN VARCHAR2,
13:32:31 232  	in_charge_status_id   IN NUMBER,
13:32:31 233  	out_charge_id	      OUT NUMBER
13:32:31 234  ) AS
13:32:31 235  BEGIN
13:32:31 236  	PROCS_CHARGE_V20.CREATE_CHARGE (
13:32:31 237  	  in_invoice_id,
13:32:31 238  	  in_transaction_id,
13:32:31 239  	  in_instrument_type_id,
13:32:31 240  	  in_instrument_id,
13:32:31 241  	  in_charge_amount,
13:32:31 242  	  in_created_by,
13:32:31 243  	  in_charge_status_id,
13:32:31 244  	  out_charge_id
13:32:31 245  	);
13:32:31 246  END CREATE_CHARGE;
13:32:31 247  
13:32:31 248  /**********************************************************/
13:32:31 249  
13:32:31 250  PROCEDURE HAS_FUTURE_LICENSE (
13:32:31 251  /*
13:32:31 252  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 253  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 254  --
13:32:31 255  RETURNS:
13:32:31 256  1 - if has,
13:32:31 257  0 - else
13:32:31 258  */
13:32:31 259  	in_license_id IN NUMBER,
13:32:31 260  	out_result	   OUT NUMBER
13:32:31 261  ) AS
13:32:31 262  BEGIN
13:32:31 263  	PROCS_SUBSCRIPTION_V20.HAS_FUTURE_LICENSE (
13:32:31 264  	  in_license_id,
13:32:31 265  	  out_result
13:32:31 266  	);
13:32:31 267  END HAS_FUTURE_LICENSE;
13:32:31 268  
13:32:31 269  /***********************************************************/
13:32:31 270  
13:32:31 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
13:32:31 272  /*
13:32:31 273  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 274  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 275  */
13:32:31 276  	in_license_id IN NUMBER,
13:32:31 277  	out_group_id  OUT NUMBER
13:32:31 278  ) AS
13:32:31 279  BEGIN
13:32:31 280  	PROCS_LICENSE_V20.GET_GROUP_ID_BY_LICENSE_ID (
13:32:31 281  	  in_license_id,
13:32:31 282  	  out_group_id
13:32:31 283  	);
13:32:31 284  END GET_GROUP_ID_BY_LICENSE_ID;
13:32:31 285  
13:32:31 286  /**********************************************************/
13:32:31 287  
13:32:31 288  PROCEDURE GET_OFFER_PRODUCTS (
13:32:31 289  /*
13:32:31 290  Throws exceptions (codes):
13:32:31 291  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 292  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 293  */
13:32:31 294  	in_offer_id    IN NUMBER,
13:32:31 295  	out_result_set OUT SYS_REFCURSOR
13:32:31 296  ) AS
13:32:31 297  BEGIN
13:32:31 298  	PROCS_OFFER_CHAIN_V20.GET_OFFER_PRODUCTS (
13:32:31 299  	  in_offer_id,
13:32:31 300  	  out_result_set
13:32:31 301  	);
13:32:31 302  END GET_OFFER_PRODUCTS;
13:32:31 303  
13:32:31 304  /***********************************************************/
13:32:31 305  
13:32:31 306  PROCEDURE CREATE_TRANSACTION (
13:32:31 307  /*
13:32:31 308  Throws exceptions:
13:32:31 309  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 310  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 311  */
13:32:31 312  	in_transaction_id	  IN NUMBER,
13:32:31 313  	in_status_id		  IN NUMBER,
13:32:31 314  	in_amount		  IN NUMBER,
13:32:31 315  	in_created_by		  IN VARCHAR2,
13:32:31 316  	in_order_id		  IN VARCHAR2,
13:32:31 317  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
13:32:31 318  	out_transaction_id	  OUT NUMBER
13:32:31 319  ) AS
13:32:31 320  BEGIN
13:32:31 321  	PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
13:32:31 322  	  in_transaction_id,
13:32:31 323  	  in_status_id,
13:32:31 324  	  in_amount,
13:32:31 325  	  in_created_by,
13:32:31 326  	  in_order_id,
13:32:31 327  	  GLOBAL_CONSTANTS_V20.FALSE, -- is_refund should be false in renewal
13:32:31 328  	  in_transaction_type_code,
13:32:31 329  	  out_transaction_id
13:32:31 330  	);
13:32:31 331  END CREATE_TRANSACTION;
13:32:31 332  
13:32:31 333  /************************************************************/
13:32:31 334  
13:32:31 335  PROCEDURE ADD_LINE_ITEMS(
13:32:31 336  /*
13:32:31 337  Throws exceptions:
13:32:31 338  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 339  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 340  */
13:32:31 341  	in_invoice_id IN NUMBER,
13:32:31 342  	in_offer_id   IN NUMBER,
13:32:31 343  	in_created_by IN VARCHAR2
13:32:31 344  ) AS
13:32:31 345  BEGIN
13:32:31 346  	PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
13:32:31 347  	  in_invoice_id,
13:32:31 348  	  in_offer_id,
13:32:31 349  	  in_created_by
13:32:31 350  	);
13:32:31 351  END ADD_LINE_ITEMS;
13:32:31 352  
13:32:31 353  /************************************************************/
13:32:31 354  
13:32:31 355  PROCEDURE CALCULATE_INVOICE_AMOUNT (
13:32:31 356  /*
13:32:31 357  Throws exceptions:
13:32:31 358  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 359  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 360  */
13:32:31 361  	in_invoice_id IN  NUMBER,
13:32:31 362  	out_amount    OUT NUMBER
13:32:31 363  ) AS
13:32:31 364  BEGIN
13:32:31 365  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
13:32:31 366  	  in_invoice_id,
13:32:31 367  	  out_amount
13:32:31 368  	);
13:32:31 369  END CALCULATE_INVOICE_AMOUNT;
13:32:31 370  
13:32:31 371  /*************************************************************/
13:32:31 372  
13:32:31 373  PROCEDURE RESERVE_TRANSACTION_ID (
13:32:31 374  /*
13:32:31 375  Throws exceptions:
13:32:31 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 377  */
13:32:31 378  	out_transaction_id OUT NUMBER
13:32:31 379  ) AS
13:32:31 380  BEGIN
13:32:31 381  	PROCS_TRANSACTION_V20.RESERVE_TRANSACTION_ID (
13:32:31 382  	  out_transaction_id
13:32:31 383  	);
13:32:31 384  END RESERVE_TRANSACTION_ID;
13:32:31 385  
13:32:31 386  /***************************************************************/
13:32:31 387  
13:32:31 388  PROCEDURE P_GET_NEXT_OFFER_INDEX (
13:32:31 389  	in_offer_chain_id	     IN NUMBER,
13:32:31 390  	in_offer_chain_current_index IN NUMBER,
13:32:31 391  	out_next_offer_index	     OUT NUMBER
13:32:31 392  ) AS
13:32:31 393  BEGIN
13:32:31 394  	PROCS_OFFER_CHAIN_V20.P_GET_NEXT_OFFER_INDEX(
13:32:31 395  	  in_offer_chain_id,
13:32:31 396  	  in_offer_chain_current_index,
13:32:31 397  	  out_next_offer_index
13:32:31 398  	);
13:32:31 399  END P_GET_NEXT_OFFER_INDEX;
13:32:31 400  
13:32:31 401  /***************************************************************/
13:32:31 402  
13:32:31 403  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
13:32:31 404  	in_license_id		     IN NUMBER,
13:32:31 405  	in_offer_chain_current_index IN NUMBER,
13:32:31 406  	out_next_offer_index	     OUT NUMBER
13:32:31 407  ) AS
13:32:31 408  BEGIN
13:32:31 409  	PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX_BY_LCNS(
13:32:31 410  	  in_license_id,
13:32:31 411  	  in_offer_chain_current_index,
13:32:31 412  	  out_next_offer_index
13:32:31 413  	);
13:32:31 414  END GET_NEXT_OFFER_INDEX_BY_LCNS;
13:32:31 415  
13:32:31 416  /******************************************************************/
13:32:31 417  
13:32:31 418  PROCEDURE GET_SUBSCRIPTION_INFO (
13:32:31 419  /*
13:32:31 420  Throws exceptions:
13:32:31 421  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 422  */
13:32:31 423  	  in_subscription_id IN  NUMBER,
13:32:31 424  	  out_result_set      OUT SYS_REFCURSOR
13:32:31 425  ) AS
13:32:31 426  BEGIN
13:32:31 427  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTION_INFO(
13:32:31 428  	  in_subscription_id,
13:32:31 429  	  out_result_set
13:32:31 430  	);
13:32:31 431  END GET_SUBSCRIPTION_INFO;
13:32:31 432  
13:32:31 433  /*******************************************************************/
13:32:31 434  
13:32:31 435  PROCEDURE CLOSE_SUBSCRIPTION (
13:32:31 436  	in_subscription_id IN NUMBER,
13:32:31 437  	in_updated_by	   IN VARCHAR2
13:32:31 438  ) AS
13:32:31 439  BEGIN
13:32:31 440  	PROCS_SUBSCRIPTION_V20.CLOSE_SUBSCRIPTION(
13:32:31 441  	  in_subscription_id,
13:32:31 442  	  in_updated_by
13:32:31 443  	);
13:32:31 444  END CLOSE_SUBSCRIPTION;
13:32:31 445  
13:32:31 446  /*******************************************************************/
13:32:31 447  
13:32:31 448  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
13:32:31 449  	out_result_set OUT SYS_REFCURSOR
13:32:31 450  ) AS
13:32:31 451  BEGIN
13:32:31 452  	PROCS_LICENSE_V20.GET_NEED_ENTITLEMENTS_LICENSES(
13:32:31 453  	  out_result_set
13:32:31 454  	);
13:32:31 455  END GET_NEED_ENTITLEMENTS_LICENSES;
13:32:31 456  
13:32:31 457  /*******************************************************************/
13:32:31 458  
13:32:31 459  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
13:32:31 460  	in_license_id	      IN NUMBER,
13:32:31 461  	in_needs_entitlements IN NUMBER,
13:32:31 462  	in_updated_by	      IN VARCHAR2
13:32:31 463  ) AS
13:32:31 464  BEGIN
13:32:31 465  	PROCS_LICENSE_V20.UPDATE_NEED_ENTITLEMENTS_FLAG(
13:32:31 466  	  in_license_id,
13:32:31 467  	  in_needs_entitlements,
13:32:31 468  	  in_updated_by
13:32:31 469  	);
13:32:31 470  END UPDATE_NEED_ENTITLEMENTS_FLAG;
13:32:31 471  
13:32:31 472  /*******************************************************/
13:32:31 473  
13:32:31 474  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
13:32:31 475  /*
13:32:31 476  Throws exceptions (codes):
13:32:31 477  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 478  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 479  */
13:32:31 480  	in_offer_id    IN NUMBER,
13:32:31 481  	out_result_set OUT SYS_REFCURSOR
13:32:31 482  ) AS
13:32:31 483  BEGIN
13:32:31 484  	PROCS_OFFER_CHAIN_V20.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
13:32:31 485  END GET_PROD_OFFERINGS_BY_OFFER_ID;
13:32:31 486  
13:32:31 487  /*******************************************************/
13:32:31 488  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
13:32:31 489  /*
13:32:31 490  Throws exceptions (codes):
13:32:31 491  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 492  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 493  */
13:32:31 494  	in_product_offering_id IN NUMBER,
13:32:31 495  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
13:32:31 496  	out_result_set	       OUT SYS_REFCURSOR
13:32:31 497  ) AS
13:32:31 498  BEGIN
13:32:31 499  	PROCS_OFFER_CHAIN_V20.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
13:32:31 500  END GET_PRODUCT_OFFERING_META_DATA;
13:32:31 501  
13:32:31 502  /*******************************************************/
13:32:31 503  
13:32:31 504  PROCEDURE LOCK_ACCOUNT (
13:32:31 505  	in_group_id    IN NUMBER,
13:32:31 506  	in_lock_key    IN VARCHAR2,
13:32:31 507  	in_seconds_num IN NUMBER,
13:32:31 508  	in_created_by  IN VARCHAR2,
13:32:31 509  	in_reason      IN VARCHAR2
13:32:31 510  ) AS
13:32:31 511  BEGIN
13:32:31 512  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
13:32:31 513  	  in_group_id,
13:32:31 514  	  in_lock_key,
13:32:31 515  	  in_seconds_num,
13:32:31 516  	  in_created_by,
13:32:31 517  	  in_reason
13:32:31 518  	);
13:32:31 519  END LOCK_ACCOUNT;
13:32:31 520  
13:32:31 521  /****************************************************************/
13:32:31 522  
13:32:31 523  PROCEDURE RELEASE_LOCK (
13:32:31 524  	in_group_id IN NUMBER,
13:32:31 525  	in_lock_key IN VARCHAR2
13:32:31 526  ) AS
13:32:31 527  BEGIN
13:32:31 528  	PROCS_LOCKING_V20.RELEASE_LOCK(
13:32:31 529  	  in_group_id,
13:32:31 530  	  in_lock_key
13:32:31 531  	);
13:32:31 532  END RELEASE_LOCK;
13:32:31 533  
13:32:31 534  /******************************************************************************/
13:32:31 535  
13:32:31 536  PROCEDURE GET_INVOICE_LINE_ITEMS (
13:32:31 537  	in_invoice_id  IN NUMBER,
13:32:31 538  	out_result_set OUT SYS_REFCURSOR
13:32:31 539  ) AS
13:32:31 540  BEGIN
13:32:31 541  	PROCS_INVOICE_V20.GET_INVOICE_LINE_ITEMS(
13:32:31 542  	  in_invoice_id,
13:32:31 543  	  out_result_set
13:32:31 544  	);
13:32:31 545  END GET_INVOICE_LINE_ITEMS;
13:32:31 546  
13:32:31 547  /******************************************************************************/
13:32:31 548  
13:32:31 549  PROCEDURE ADD_TAX (
13:32:31 550  	in_tax_type_id		 IN NUMBER,
13:32:31 551  	in_calculated_amount	 IN NUMBER,
13:32:31 552  	in_created_by		 IN VARCHAR2,
13:32:31 553  	in_line_item_id 	 IN NUMBER,
13:32:31 554  	in_effective_rate	 IN VARCHAR2,
13:32:31 555  	in_taxable_amount	 IN NUMBER,
13:32:31 556  	in_tax_rule_id		 IN NUMBER,
13:32:31 557  	in_jurisdiction_level_id IN NUMBER,
13:32:31 558  	in_jurisdiction_name	 IN VARCHAR2,
13:32:31 559  	in_jurisdiction_id	 IN VARCHAR2,
13:32:31 560  	in_ext_tax_type 	 IN VARCHAR2,
13:32:31 561  	in_ext_result		 IN VARCHAR2,
13:32:31 562  	in_imposition_type	 IN VARCHAR2,
13:32:31 563  	in_imposition		 IN VARCHAR2
13:32:31 564  ) AS
13:32:31 565  BEGIN
13:32:31 566  	PROCS_TAXES_V20.ADD_TAX(
13:32:31 567  	  in_tax_type_id,
13:32:31 568  	  in_calculated_amount,
13:32:31 569  	  in_created_by,
13:32:31 570  	  in_line_item_id,
13:32:31 571  	  in_effective_rate,
13:32:31 572  	  in_taxable_amount,
13:32:31 573  	  in_tax_rule_id,
13:32:31 574  	  in_jurisdiction_level_id,
13:32:31 575  	  in_jurisdiction_name,
13:32:31 576  	  in_jurisdiction_id,
13:32:31 577  	  in_ext_tax_type,
13:32:31 578  	  in_ext_result,
13:32:31 579  	  in_imposition_type,
13:32:31 580  	  in_imposition
13:32:31 581  	);
13:32:31 582  END ADD_TAX;
13:32:31 583  
13:32:31 584  /******************************************************************************/
13:32:31 585  
13:32:31 586  PROCEDURE GET_CREDIT_CARD_BY_ID (
13:32:31 587  	in_credit_card_id IN  NUMBER,
13:32:31 588  	out_result_set	  OUT SYS_REFCURSOR
13:32:31 589  ) AS
13:32:31 590  BEGIN
13:32:31 591  	PROCS_FIN_INSTRUMENTS_V20.GET_CREDIT_CARD_BY_ID(
13:32:31 592  	  in_credit_card_id,
13:32:31 593  	  out_result_set
13:32:31 594  	);
13:32:31 595  END GET_CREDIT_CARD_BY_ID;
13:32:31 596  
13:32:31 597  /******************************************************************************/
13:32:31 598  
13:32:31 599  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
13:32:31 600  	in_line_item_id IN NUMBER,
13:32:31 601  	out_result_set	OUT SYS_REFCURSOR
13:32:31 602  ) AS
13:32:31 603  BEGIN
13:32:31 604  	PROCS_PRODUCT_V20.GET_PRD_OFFERING_BY_LINE_IT_ID(
13:32:31 605  	  in_line_item_id,
13:32:31 606  	  out_result_set
13:32:31 607  	);
13:32:31 608  END GET_PRD_OFFERING_BY_LINE_IT_ID;
13:32:31 609  
13:32:31 610  /******************************************************************************/
13:32:31 611  
13:32:31 612  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
13:32:31 613  /*
13:32:31 614  Throws exceptions:
13:32:31 615  APP_EXCEPTION_CODES_V20.NOT_FOUND,
13:32:31 616  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 617  */
13:32:31 618  	in_group_id IN NUMBER,
13:32:31 619  	out_account_id	OUT NUMBER
13:32:31 620  ) AS
13:32:31 621  BEGIN
13:32:31 622  	PROCS_ACCOUNT_V20.GET_ACCOUNT_ID_BY_GROUP_ID(
13:32:31 623  	  in_group_id,
13:32:31 624  	  out_account_id
13:32:31 625  	);
13:32:31 626  END GET_ACCOUNT_ID_BY_GROUP_ID;
13:32:31 627  
13:32:31 628  /******************************************************************************/
13:32:31 629  
13:32:31 630  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
13:32:31 631  /*
13:32:31 632  Throws exceptions:
13:32:31 633  APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31 634  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 635  */
13:32:31 636  	in_line_item_id IN  NUMBER,
13:32:31 637  	out_result_set	OUT SYS_REFCURSOR
13:32:31 638  ) AS
13:32:31 639  BEGIN
13:32:31 640  	PROCS_LINE_ITEMS_V20.GET_LINE_ITEM_DISCOUNTS(
13:32:31 641  	  in_line_item_id,
13:32:31 642  	  out_result_set
13:32:31 643  	);
13:32:31 644  END GET_LINE_ITEM_DISCOUNTS;
13:32:31 645  
13:32:31 646  /******************************************************************************/
13:32:31 647  
13:32:31 648  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
13:32:31 649  	in_line_item_id    IN NUMBER,
13:32:31 650  	in_amount	   IN NUMBER,
13:32:31 651  	in_discount_amount IN NUMBER,
13:32:31 652  	in_taxes_amount    IN NUMBER
13:32:31 653  ) AS
13:32:31 654  BEGIN
13:32:31 655  	PROCS_LINE_ITEMS_V20.UPDATE_LINE_ITEM_AMOUNT(
13:32:31 656  	  in_line_item_id,
13:32:31 657  	  in_amount,
13:32:31 658  	  in_discount_amount,
13:32:31 659  	  in_taxes_amount
13:32:31 660  	);
13:32:31 661  END UPDATE_LINE_ITEM_AMOUNT;
13:32:31 662  
13:32:31 663  /******************************************************************************/
13:32:31 664  
13:32:31 665  PROCEDURE GET_PAYPAL_BY_ID (
13:32:31 666  	in_paypal_id   IN  NUMBER,
13:32:31 667  	out_result_set OUT SYS_REFCURSOR
13:32:31 668  ) AS
13:32:31 669  BEGIN
13:32:31 670  	PROCS_FIN_INSTRUMENTS_V20.GET_PAYPAL_BY_ID(
13:32:31 671  	  in_paypal_id,
13:32:31 672  	  out_result_set
13:32:31 673  	);
13:32:31 674  END GET_PAYPAL_BY_ID;
13:32:31 675  
13:32:31 676  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
13:32:31 677  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
13:32:31 678  	out_result_set OUT SYS_REFCURSOR
13:32:31 679  ) AS
13:32:31 680  BEGIN
13:32:31 681  	PROCS_FIN_INSTRUMENTS_V20.GET_GC_BY_PURCH_INVOICE_ID (
13:32:31 682  	  in_invoice_id,
13:32:31 683  	  out_result_set
13:32:31 684  	);
13:32:31 685  END GET_GC_BY_PURCH_INVOICE_ID;
13:32:31 686  
13:32:31 687  PROCEDURE GET_LICENSE_BY_ID (
13:32:31 688  	in_license_id  IN NUMBER,
13:32:31 689  	out_result_set OUT SYS_REFCURSOR
13:32:31 690  ) AS
13:32:31 691  BEGIN
13:32:31 692  	PROCS_LICENSE_V20.GET_LICENSE_BY_ID (
13:32:31 693  	  in_license_id,
13:32:31 694  	  out_result_set
13:32:31 695  	);
13:32:31 696  END GET_LICENSE_BY_ID;
13:32:31 697  
13:32:31 698  /******************************************************************************/
13:32:31 699  
13:32:31 700  PROCEDURE GET_NOTIFICATION_TYPE_ID (
13:32:31 701  	in_offer_chain_id	 IN NUMBER,
13:32:31 702  	in_action_name		 IN VARCHAR2,
13:32:31 703  	out_notification_type_id OUT NUMBER
13:32:31 704  ) AS
13:32:31 705  BEGIN
13:32:31 706  	PROCS_OFFER_CHAIN_V20.GET_NOTIFICATION_TYPE_ID(
13:32:31 707  	  in_offer_chain_id,
13:32:31 708  	  in_action_name,
13:32:31 709  	  out_notification_type_id
13:32:31 710  	);
13:32:31 711  END GET_NOTIFICATION_TYPE_ID;
13:32:31 712  
13:32:31 713  /******************************************************************************/
13:32:31 714  
13:32:31 715  PROCEDURE GET_ALL_OCH_META_DATA (
13:32:31 716  	in_offer_chain_id IN NUMBER,
13:32:31 717  	out_result_set	  OUT SYS_REFCURSOR
13:32:31 718  ) AS
13:32:31 719  BEGIN
13:32:31 720  	PROCS_OFFER_CHAIN_V20.GET_ALL_META_DATA (
13:32:31 721  	  in_offer_chain_id,
13:32:31 722  	  out_result_set
13:32:31 723  	);
13:32:31 724  END GET_ALL_OCH_META_DATA;
13:32:31 725  
13:32:31 726  /******************************************************************************/
13:32:31 727  
13:32:31 728  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
13:32:31 729  /*
13:32:31 730  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
13:32:31 731  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31 732  */
13:32:31 733  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
13:32:31 734  	out_result_set	     OUT SYS_REFCURSOR
13:32:31 735  ) AS
13:32:31 736  BEGIN
13:32:31 737  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTIONS_META_DATA(
13:32:31 738  	  in_subscriptions_ids,
13:32:31 739  	  out_result_set
13:32:31 740  	);
13:32:31 741  END GET_SUBSCRIPTIONS_META_DATA;
13:32:31 742  
13:32:31 743  PROCEDURE GET_UNREDEEMED_GCS (
13:32:31 744  	out_result_set		OUT SYS_REFCURSOR,
13:32:31 745  	in_hours_number 	IN NUMBER DEFAULT 14*24,
13:32:31 746  	in_num_rows		IN NUMBER DEFAULT 10000,
13:32:31 747  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
13:32:31 748  ) AS
13:32:31 749  BEGIN
13:32:31 750  	PROCS_FIN_INSTRUMENTS_V20.GET_UNREDEEMED_GCS(
13:32:31 751  	  out_result_set => out_result_set,
13:32:31 752  	  in_hours_number => in_hours_number,
13:32:31 753  	  in_num_rows => in_num_rows,
13:32:31 754  	  in_process_name => in_process_name
13:32:31 755  	);
13:32:31 756  END GET_UNREDEEMED_GCS;
13:32:31 757  
13:32:31 758  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
13:32:31 759  	in_offer_chain_id IN NUMBER,
13:32:31 760  	in_meta_data_name IN VARCHAR2,
13:32:31 761  	out_value	  OUT VARCHAR2
13:32:31 762  ) AS
13:32:31 763  BEGIN
13:32:31 764  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
13:32:31 765  	  in_offer_chain_id => in_offer_chain_id,
13:32:31 766  	  in_meta_data_name => in_meta_data_name,
13:32:31 767  	  out_value => out_value
13:32:31 768  	);
13:32:31 769  END GET_OFFER_CHAIN_MD_VALUE;
13:32:31 770  
13:32:31 771  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
13:32:31 772  	out_result_set	    OUT SYS_REFCURSOR
13:32:31 773  )
13:32:31 774  AS
13:32:31 775  BEGIN
13:32:31 776  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
13:32:31 777  	  out_result_set => out_result_set
13:32:31 778  	);
13:32:31 779  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
13:32:31 780  
13:32:31 781  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
13:32:31 782  	out_result_set	    OUT SYS_REFCURSOR
13:32:31 783  )
13:32:31 784  AS
13:32:31 785  BEGIN
13:32:31 786  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_PP_CHARGEBACKS(
13:32:31 787  	  out_result_set => out_result_set
13:32:31 788  	);
13:32:31 789  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
13:32:31 790  
13:32:31 791  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
13:32:31 792  	in_max_days_until_close IN NUMBER,
13:32:31 793  	in_num_subs_to_fetch	IN NUMBER,
13:32:31 794  	out_result_set		OUT SYS_REFCURSOR
13:32:31 795  )
13:32:31 796  AS
13:32:31 797  BEGIN
13:32:31 798  	PROCS_SUBSCRIPTION_V20.GET_GRACE_PERIOD_SUB_REGIS(
13:32:31 799  	  in_max_days_until_close => in_max_days_until_close,
13:32:31 800  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
13:32:31 801  	  out_result_set => out_result_set
13:32:31 802  	);
13:32:31 803  END GET_GRACE_PERIOD_SUB_REGIS;
13:32:31 804  
13:32:31 805  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
13:32:31 806  	out_result_set	    OUT SYS_REFCURSOR
13:32:31 807  )
13:32:31 808  AS
13:32:31 809  BEGIN
13:32:31 810  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_AMEX_CB(
13:32:31 811  	  out_result_set => out_result_set
13:32:31 812  	);
13:32:31 813  END GET_ACT_SUBS_W_AMEX_CB;
13:32:31 814  
13:32:31 815  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
13:32:31 816  	in_days_before_close	 IN NUMBER,
13:32:31 817  	in_num_licenses_to_fetch IN NUMBER,
13:32:31 818  	out_result_set		 OUT SYS_REFCURSOR
13:32:31 819  ) AS
13:32:31 820  BEGIN
13:32:31 821  	PROCS_LICENSE_V20.GET_GRACE_LICE_FOR_FINAL_TRANS(
13:32:31 822  	  in_days_before_close => in_days_before_close,
13:32:31 823  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
13:32:31 824  	  out_result_set => out_result_set
13:32:31 825  	);
13:32:31 826  END GET_GRACE_LICE_FOR_FINAL_TRANS;
13:32:31 827  
13:32:31 828  END PUBLIC_PROCS_RENEWAL_V20;
13:32:31 829  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.05
13:32:31 SQL> 
13:32:31 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V20" AS
13:32:31   2  
13:32:31   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
13:32:31   4  /*
13:32:31   5  Throws exceptions:
13:32:31   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31   8  */
13:32:31   9  	in_notification_type_name IN VARCHAR2,
13:32:31  10  	out_notification_type_id  OUT NUMBER
13:32:31  11  ) AS
13:32:31  12  BEGIN
13:32:31  13  	PROCS_NOTIFICATION_V20.GET_NOTIFICATION_TYPE_BY_NAME (
13:32:31  14  	  in_notification_type_name,
13:32:31  15  	  out_notification_type_id
13:32:31  16  	);
13:32:31  17  END;
13:32:31  18  
13:32:31  19  /*****************************************************************/
13:32:31  20  
13:32:31  21  PROCEDURE ADD_NOTIFICATION (
13:32:31  22  /*
13:32:31  23  Throws exceptions:
13:32:31  24  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
13:32:31  25  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
13:32:31  26  */
13:32:31  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
13:32:31  28  	in_recipient_group_id	 IN NUMBER,
13:32:31  29  	in_notification_type_id  IN NUMBER,
13:32:31  30  	in_date_to_notify	 IN DATE,
13:32:31  31  	in_email_template_params IN CLOB
13:32:31  32  ) AS
13:32:31  33  BEGIN
13:32:31  34  	PROCS_NOTIFICATION_V20.ADD_NOTIFICATION (
13:32:31  35  	  in_sender_account_id,
13:32:31  36  	  in_recipient_group_id,
13:32:31  37  	  in_notification_type_id,
13:32:31  38  	  in_date_to_notify,
13:32:31  39  	  in_email_template_params
13:32:31  40  	);
13:32:31  41  END;
13:32:31  42  
13:32:31  43  END PUBLIC_PROCS_CLIENT_V20;
13:32:31  44  .
13:32:31 SQL> /

Package body created.

Elapsed: 00:00:00.02
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ADX_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_TEST_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.02
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> 
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.02
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:31 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.02
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> 
13:32:32 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
13:32:32 SQL> 
13:32:32 SQL> Grant Execute On Core_Owner.Global_Statuses_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
13:32:32 SQL> 
13:32:32 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
13:32:32 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECPR@rac01.prd.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.prd.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECPR
        Schema: core_owner
        Migration: 47.2-release-1.14.0-3-CORE-all
        SVN Revision: 12320
        Duration: 5 sec.
        DBA: sbao
        Service Request: https://jira.em.nytimes.com/browse/ORA-755