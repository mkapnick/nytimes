16:00:44 SQL> @/dbbackups/ECST/migrations/core_owner/47.2-release-1.14.0-3-CORE-all/upgrade.sql
16:00:44 SQL> --------------------------------------------------------------------------------
16:00:44 SQL> -- DDL for package PROCS_ACCOUNT
16:00:44 SQL> --------------------------------------------------------------------------------
16:00:44 SQL> 
16:00:44 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_V20" AS
16:00:44   2  
16:00:44   3  FUNCTION GET_GRACE_START_DATE(
16:00:44   4  	in_subscription_id IN NUMBER
16:00:44   5  ) RETURN DATE;
16:00:44   6  
16:00:44   7  FUNCTION GET_GRACE_END_DATE(
16:00:44   8  	in_subscription_id IN NUMBER
16:00:44   9  ) RETURN DATE;
16:00:44  10  
16:00:44  11  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
16:00:44  12  	in_group_id    IN  NUMBER,
16:00:44  13  	out_result_set OUT SYS_REFCURSOR
16:00:44  14  );
16:00:44  15  
16:00:44  16  PROCEDURE ANNOTATE_ACCOUNT (
16:00:44  17  	in_group_id   IN  NUMBER,
16:00:44  18  	in_agent_id   IN  NUMBER,
16:00:44  19  	in_note       IN  VARCHAR2,
16:00:44  20  	in_created_by IN  VARCHAR2
16:00:44  21  );
16:00:44  22  
16:00:44  23  PROCEDURE ASSERT_ACCOUNT_EXISTS (
16:00:44  24  	in_group_id IN	NUMBER,
16:00:44  25  	out_exists  OUT NUMBER
16:00:44  26  );
16:00:44  27  
16:00:44  28  PROCEDURE DISABLE_ACCOUNT (
16:00:44  29  	in_group_id   IN NUMBER,
16:00:44  30  	in_updated_by IN VARCHAR2,
16:00:44  31  	in_note       IN VARCHAR2,
16:00:44  32  	in_agent_id   IN NUMBER
16:00:44  33  );
16:00:44  34  
16:00:44  35  PROCEDURE CREATE_ACTIVE_ACCOUNT(
16:00:44  36  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
16:00:44  37  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
16:00:44  38  	out_new_account_id OUT ACCOUNT.ID%TYPE
16:00:44  39  );
16:00:44  40  
16:00:44  41  PROCEDURE REACTIVATE_ACCOUNT (
16:00:44  42  	in_group_id	  IN NUMBER,
16:00:44  43  	in_updated_by	  IN VARCHAR2,
16:00:44  44  	in_note 	  IN VARCHAR2,
16:00:44  45  	in_agent_id	  IN NUMBER
16:00:44  46  );
16:00:44  47  
16:00:44  48  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
16:00:44  49  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
16:00:44  50  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE,
16:00:44  51  	out_result_set OUT SYS_REFCURSOR
16:00:44  52  );
16:00:44  53  
16:00:44  54  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
16:00:44  55  	in_group_id	  IN NUMBER,
16:00:44  56  	out_result_gc_set OUT SYS_REFCURSOR,
16:00:44  57  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
16:00:44  58  );
16:00:44  59  
16:00:44  60  PROCEDURE GET_ACCOUNT_INFO  (
16:00:44  61  	  in_group_id	    IN	NUMBER,
16:00:44  62  	  out_account_info  OUT SYS_REFCURSOR
16:00:44  63  );
16:00:44  64  
16:00:44  65  PROCEDURE GET_ACCOUNT_NOTES (
16:00:44  66  	  in_group_id	 IN  NUMBER,
16:00:44  67  	  out_result_set OUT SYS_REFCURSOR
16:00:44  68  );
16:00:44  69  
16:00:44  70  PROCEDURE GET_ACCOUNT_PAYPALS(
16:00:44  71  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
16:00:44  72  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.PAYPAL_ACTIVE,
16:00:44  73  	out_result_set OUT SYS_REFCURSOR
16:00:44  74  );
16:00:44  75  
16:00:44  76  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
16:00:44  77  	  in_group_id	 IN  NUMBER,
16:00:44  78  	  in_start_date  IN DATE,
16:00:44  79  	  in_end_date	 IN DATE,
16:00:44  80  	  in_status	 IN NUMBER,
16:00:44  81  	  in_group_account_type IN VARCHAR2,
16:00:44  82  	  out_result_set  OUT SYS_REFCURSOR
16:00:44  83  );
16:00:44  84  
16:00:44  85  PROCEDURE FREEZE_ACCOUNT (
16:00:44  86  	in_group_id   IN NUMBER,
16:00:44  87  	in_updated_by IN VARCHAR2,
16:00:44  88  	in_note       IN VARCHAR2,
16:00:44  89  	in_agent_id   IN NUMBER
16:00:44  90  );
16:00:44  91  
16:00:44  92  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
16:00:44  93  	in_group_id	   IN  NUMBER,
16:00:44  94  	in_subscription_id IN NUMBER,
16:00:44  95  	out_result_set	   OUT SYS_REFCURSOR
16:00:44  96  );
16:00:44  97  
16:00:44  98  PROCEDURE GET_ACCOUNT_GC_INVOICES (
16:00:44  99  	in_group_id    IN  NUMBER,
16:00:44 100  	out_result_set OUT SYS_REFCURSOR
16:00:44 101  );
16:00:44 102  
16:00:44 103  PROCEDURE GET_GC_INVOICE (
16:00:44 104  	in_group_id    IN  NUMBER,
16:00:44 105  	in_gc_code     IN  VARCHAR2,
16:00:44 106  	out_result_set OUT SYS_REFCURSOR
16:00:44 107  );
16:00:44 108  
16:00:44 109  PROCEDURE GET_ACCOUNT_PRODUCTS (
16:00:44 110  	in_group_id    IN  NUMBER,
16:00:44 111  	out_result_set OUT SYS_REFCURSOR
16:00:44 112  );
16:00:44 113  
16:00:44 114  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
16:00:44 115  	in_group_id IN NUMBER,
16:00:44 116  	out_result_set	   OUT SYS_REFCURSOR
16:00:44 117  );
16:00:44 118  
16:00:44 119  PROCEDURE UPDATE_ACCOUNT_STATUS (
16:00:44 120  	in_account_id	     IN ACCOUNT.ID%TYPE,
16:00:44 121  	in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:00:44 122  	in_updated_by	     IN ACCOUNT.UPDATED_BY%TYPE
16:00:44 123  );
16:00:44 124  
16:00:44 125  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
16:00:44 126  	in_group_id	 IN ACCOUNT.GROUP_ID%TYPE,
16:00:44 127  	out_licenses_num OUT NUMBER
16:00:44 128  );
16:00:44 129  
16:00:44 130  PROCEDURE SET_TAX_EXEMPT (
16:00:44 131  	in_group_id  IN NUMBER,
16:00:44 132  	in_exempt_id IN VARCHAR2
16:00:44 133  );
16:00:44 134  
16:00:44 135  PROCEDURE IS_TAX_EXEMPT (
16:00:44 136  	in_group_id	  IN NUMBER,
16:00:44 137  	out_is_tax_exempt OUT NUMBER
16:00:44 138  );
16:00:44 139  
16:00:44 140  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:00:44 141  	in_account_id IN NUMBER,
16:00:44 142  	out_group_id  OUT NUMBER
16:00:44 143  );
16:00:44 144  
16:00:44 145  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:44 146  	in_group_id IN NUMBER,
16:00:44 147  	out_account_id	OUT NUMBER
16:00:44 148  );
16:00:44 149  
16:00:44 150  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:00:44 151  	in_invoice_id IN NUMBER,
16:00:44 152  	out_group_ids OUT SYS_REFCURSOR
16:00:44 153  );
16:00:44 154  
16:00:44 155  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
16:00:44 156  	in_group_id	  IN NUMBER,
16:00:44 157  	out_tax_exempt_id OUT VARCHAR2
16:00:44 158  );
16:00:44 159  
16:00:44 160  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
16:00:44 161  	in_group_id    IN NUMBER,
16:00:44 162  	out_result_set OUT SYS_REFCURSOR
16:00:44 163  );
16:00:44 164  
16:00:44 165  PROCEDURE GET_USR_ALL_SBSCR_IDS (
16:00:44 166  	in_group_id	   IN NUMBER,
16:00:44 167  	out_result_set	   OUT SYS_REFCURSOR
16:00:44 168  );
16:00:44 169  
16:00:44 170  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
16:00:44 171  	in_group_id	   IN NUMBER,
16:00:44 172  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:44 173  	out_result_set	   OUT SYS_REFCURSOR
16:00:44 174  );
16:00:44 175  
16:00:44 176  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
16:00:44 177  	in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:44 178  	in_expiration_date IN DATE,
16:00:44 179  	in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:00:44 180  	in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:44 181  	in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:00:44 182  	in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:00:44 183  	in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:00:44 184  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:00:44 185  	in_lower_bound IN NUMBER DEFAULT 1,
16:00:44 186  	in_upper_bound IN NUMBER DEFAULT 11,
16:00:44 187  	out_result_set OUT SYS_REFCURSOR
16:00:44 188  );
16:00:44 189  
16:00:44 190  END PROCS_ACCOUNT_V20;
16:00:44 191  .
16:00:44 SQL> /

Package created.

Elapsed: 00:00:00.22
16:00:45 SQL> 
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> -- DDL for package PROCS_ACCOUNT_CRU
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ACCOUNT_CRU_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_ACCOUNT (
16:00:45   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
16:00:45   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:00:45   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:45   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
16:00:45   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
16:00:45   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
16:00:45  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:45  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:00:45  12  );
16:00:45  13  
16:00:45  14  PROCEDURE UPDATE_ACCOUNT (
16:00:45  15  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:00:45  16  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
16:00:45  17  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:45  18  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
16:00:45  19  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
16:00:45  20  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:45  21  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:00:45  22  );
16:00:45  23  
16:00:45  24  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
16:00:45  25  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:00:45  26  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
16:00:45  27  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
16:00:45  28  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:00:45  29  );
16:00:45  30  
16:00:45  31  PROCEDURE READ_ACCOUNT (
16:00:45  32  	in_account_id  IN ACCOUNT.ID%TYPE,
16:00:45  33  	out_result_set OUT SYS_REFCURSOR
16:00:45  34  );
16:00:45  35  
16:00:45  36  PROCEDURE CREATE_ACCOUNT_NOTE (
16:00:45  37  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
16:00:45  38  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
16:00:45  39  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
16:00:45  40  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
16:00:45  41  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
16:00:45  42  );
16:00:45  43  
16:00:45  44  END PROCS_ACCOUNT_CRU_V20;
16:00:45  45  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.08
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_ADDRESS(
16:00:45   4  /*
16:00:45   5  Throws exceptions:
16:00:45   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45   7  */
16:00:45   8  	  out_address_id	OUT NUMBER,
16:00:45   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:45  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:45  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:45  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:45  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:45  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:45  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
16:00:45  16  );
16:00:45  17  
16:00:45  18  PROCEDURE UPDATE_ADDRESS(
16:00:45  19  /*
16:00:45  20  Throws exceptions:
16:00:45  21  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  22  */
16:00:45  23  	  in_address_id 	IN ADDRESS.ID%TYPE,
16:00:45  24  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:45  25  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:45  26  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:45  27  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:45  28  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:45  29  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:45  30  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
16:00:45  31  );
16:00:45  32  
16:00:45  33  PROCEDURE GET_ADDRESS (
16:00:45  34  /*
16:00:45  35  Throws exceptions:
16:00:45  36  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  37  */
16:00:45  38  	  in_id 		IN ADDRESS.ID%TYPE,
16:00:45  39  	  out_result_set	OUT SYS_REFCURSOR
16:00:45  40  );
16:00:45  41  
16:00:45  42  END PROCS_ADDRESS_V20;
16:00:45  43  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.09
16:00:45 SQL> 
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> -- DDL for package PROCS_ADDRESS_CRU
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADDRESS_CRU_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_ADDRESS(
16:00:45   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
16:00:45   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
16:00:45   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:45   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:45   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:45   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:45  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:45  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:45  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
16:00:45  13  );
16:00:45  14  
16:00:45  15  PROCEDURE UPDATE_ADDRESS(
16:00:45  16  	in_address_id	      IN ADDRESS.ID%TYPE,
16:00:45  17  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:45  18  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:45  19  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:45  20  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:45  21  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:45  22  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:45  23  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
16:00:45  24  );
16:00:45  25  
16:00:45  26  END PROCS_ADDRESS_CRU_V20;
16:00:45  27  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:45 SQL> 
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> -- DDL for package PROCS_ADJUSTMENTS
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADJUSTMENTS_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
16:00:45   4  	in_invoice_id		  IN NUMBER,
16:00:45   5  	in_adjustment_reason	  IN VARCHAR2,
16:00:45   6  	in_is_credit		  IN NUMBER,
16:00:45   7  	in_charge_id		  IN NUMBER,
16:00:45   8  	in_business_date	  IN DATE,
16:00:45   9  	in_created_by		  IN VARCHAR2,
16:00:45  10  	out_invoice_adjustment_id OUT NUMBER
16:00:45  11  );
16:00:45  12  
16:00:45  13  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
16:00:45  14  	in_invoice_id		  IN NUMBER,
16:00:45  15  	in_original_charge_id	  IN NUMBER,
16:00:45  16  	in_charge_id		  IN NUMBER,
16:00:45  17  	in_updated_by		  IN VARCHAR2
16:00:45  18  );
16:00:45  19  
16:00:45  20  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
16:00:45  21  	in_line_item_id 	    IN NUMBER,
16:00:45  22  	in_invoice_adjustment_id    IN NUMBER,
16:00:45  23  	in_amount		    IN NUMBER,
16:00:45  24  	in_tax			    IN NUMBER,
16:00:45  25  	in_discount		    IN NUMBER,
16:00:45  26  	in_created_by		    IN VARCHAR2,
16:00:45  27  	out_line_item_adjustment_id OUT NUMBER
16:00:45  28  );
16:00:45  29  
16:00:45  30  PROCEDURE CREATE_TAX_ADJUSTMENT (
16:00:45  31  	in_tax_id		   IN NUMBER,
16:00:45  32  	in_line_item_adjustment_id IN NUMBER,
16:00:45  33  	in_amount		   IN NUMBER,
16:00:45  34  	in_created_by		   IN VARCHAR2,
16:00:45  35  	out_tax_adjustment_id	   OUT NUMBER
16:00:45  36  );
16:00:45  37  
16:00:45  38  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
16:00:45  39  	in_discount_id		   NUMBER,
16:00:45  40  	in_line_item_id 	   NUMBER,
16:00:45  41  	in_line_item_adjustment_id IN NUMBER,
16:00:45  42  	in_amount		   IN NUMBER,
16:00:45  43  	in_created_by		   IN VARCHAR2,
16:00:45  44  	out_discount_li_id	   OUT NUMBER
16:00:45  45  );
16:00:45  46  
16:00:45  47  END PROCS_ADJUSTMENTS_V20;
16:00:45  48  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.05
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_ADX_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE GET_SUB_ADX_INFO (
16:00:45   4  /*
16:00:45   5  Throws exceptions:
16:00:45   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45   7  */
16:00:45   8  	out_result_set	    OUT SYS_REFCURSOR,
16:00:45   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
16:00:45  10  );
16:00:45  11  
16:00:45  12  END PROCS_ADX_V20;
16:00:45  13  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.03
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE ADD_AMAZON_APPSTORE(
16:00:45   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
16:00:45   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:45   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
16:00:45   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
16:00:45   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
16:00:45   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:45  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
16:00:45  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
16:00:45  12  );
16:00:45  13  
16:00:45  14  PROCEDURE GET_ACTIVE_AMAZON_APPSTORE(
16:00:45  15  	in_user_id IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:45  16  	in_sku	   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:45  17  	out_data   OUT SYS_REFCURSOR
16:00:45  18  );
16:00:45  19  
16:00:45  20  PROCEDURE CREATE_AMAZON_SUB(
16:00:45  21  /*
16:00:45  22  Throws exceptions:
16:00:45  23  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  24  */
16:00:45  25  	  out_id	      OUT NUMBER,
16:00:45  26  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:00:45  27  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:00:45  28  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:00:45  29  );
16:00:45  30  
16:00:45  31  PROCEDURE GET_ACTIVE_SUB_IDS (
16:00:45  32  /*
16:00:45  33  Throws exceptions:
16:00:45  34  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  35  */
16:00:45  36  	out_result_set	    OUT SYS_REFCURSOR,
16:00:45  37  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:00:45  38  );
16:00:45  39  
16:00:45  40  PROCEDURE GET_ACTIVE_GROUP_IDS (
16:00:45  41  /*
16:00:45  42  Throws exceptions:
16:00:45  43  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  44  */
16:00:45  45  	out_result_set	    OUT SYS_REFCURSOR,
16:00:45  46  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:00:45  47  );
16:00:45  48  
16:00:45  49  END PROCS_AMAZON_V20;
16:00:45  50  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.08
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_AMAZON_CRU_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE ADD_AMAZON_APPSTORE(
16:00:45   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
16:00:45   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:45   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
16:00:45   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
16:00:45   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
16:00:45   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:45  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
16:00:45  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
16:00:45  12  );
16:00:45  13  
16:00:45  14  PROCEDURE CREATE_AMAZON_SUB(
16:00:45  15  /*
16:00:45  16  Throws exceptions:
16:00:45  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  18  */
16:00:45  19  	  out_id	      OUT NUMBER,
16:00:45  20  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:00:45  21  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:00:45  22  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:00:45  23  );
16:00:45  24  
16:00:45  25  END PROCS_AMAZON_CRU_V20;
16:00:45  26  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:45 SQL> 
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> -- DDL for package PROCS_CHARGE
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_CHARGE(
16:00:45   4  /*
16:00:45   5  Throws exceptions:
16:00:45   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45   8  */
16:00:45   9  	in_invoice_id	      IN NUMBER,
16:00:45  10  	in_transaction_id     IN NUMBER,
16:00:45  11  	in_instrument_type_id IN NUMBER,
16:00:45  12  	in_instrument_id      IN NUMBER,
16:00:45  13  	in_charge_amount      IN NUMBER,
16:00:45  14  	in_created_by	      IN VARCHAR2,
16:00:45  15  	in_charge_status_id   IN NUMBER,
16:00:45  16  	out_charge_id	      OUT NUMBER
16:00:45  17  );
16:00:45  18  
16:00:45  19  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:00:45  20  /*
16:00:45  21  Throws exceptions:
16:00:45  22  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  23  */
16:00:45  24  	out_result_set	    OUT SYS_REFCURSOR,
16:00:45  25  	in_row_number	    IN NUMBER DEFAULT NULL
16:00:45  26  );
16:00:45  27  
16:00:45  28  PROCEDURE GET_UNPROCESSED_CHARGES (
16:00:45  29  /*
16:00:45  30  Throws exceptions:
16:00:45  31  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  32  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  33  */
16:00:45  34  	in_invoice_id  IN NUMBER,
16:00:45  35  	out_result_set OUT SYS_REFCURSOR
16:00:45  36  );
16:00:45  37  
16:00:45  38  PROCEDURE GET_PROCESSED_CHARGES (
16:00:45  39  /*
16:00:45  40  Throws exceptions:
16:00:45  41  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  42  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  43  */
16:00:45  44  	in_invoice_id  IN NUMBER,
16:00:45  45  	out_result_set OUT SYS_REFCURSOR
16:00:45  46  );
16:00:45  47  
16:00:45  48  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:00:45  49  /*
16:00:45  50  Throws exceptions:
16:00:45  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  53  */
16:00:45  54  	in_charge_id	    IN NUMBER,
16:00:45  55  	out_subscription_id OUT NUMBER
16:00:45  56  );
16:00:45  57  
16:00:45  58  PROCEDURE UPDATE_CHARGE_STATUS (
16:00:45  59  /*
16:00:45  60  Throws exceptions:
16:00:45  61  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  63  */
16:00:45  64  	in_charge_id	    IN CHARGE.ID%TYPE,
16:00:45  65  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:45  66  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:00:45  67  );
16:00:45  68  
16:00:45  69  FUNCTION IS_CHARGE_COLLECTED (
16:00:45  70  /*
16:00:45  71  Throws:
16:00:45  72  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  73  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  74  Returns:
16:00:45  75  GLOBAL_CONST.TRUE if transaction collected,
16:00:45  76  GLOBAL_CONST.FALSE else
16:00:45  77  */
16:00:45  78  	in_charge_id IN NUMBER
16:00:45  79  ) RETURN NUMBER;
16:00:45  80  
16:00:45  81  PROCEDURE GET_COLLECTED_CHARGES (
16:00:45  82  /*
16:00:45  83  Throws exceptions:
16:00:45  84  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:45  85  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:45  86  */
16:00:45  87  	in_invoice_id  IN NUMBER,
16:00:45  88  	out_result_set OUT SYS_REFCURSOR
16:00:45  89  );
16:00:45  90  
16:00:45  91  END PROCS_CHARGE_V20;
16:00:45  92  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.05
16:00:45 SQL> 
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> -- DDL for package PROCS_CHARGE_CRU
16:00:45 SQL> --------------------------------------------------------------------------------
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CHARGE_CRU_V20" AS
16:00:45   2  
16:00:45   3  PROCEDURE CREATE_CHARGE(
16:00:45   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
16:00:45   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
16:00:45   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
16:00:45   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:45   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
16:00:45   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
16:00:45  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
16:00:45  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:45  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
16:00:45  13  );
16:00:45  14  
16:00:45  15  PROCEDURE UPDATE_CHARGE(
16:00:45  16  	in_charge_id	      IN CHARGE.ID%TYPE,
16:00:45  17  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:45  18  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:00:45  19  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
16:00:45  20  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
16:00:45  21  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
16:00:45  22  );
16:00:45  23  
16:00:45  24  END PROCS_CHARGE_CRU_V20;
16:00:45  25  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.11
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE PACKAGE "PROCS_CUPY" AS
16:00:45   2  
16:00:45   3  	PROCEDURE POPULATE_REQUEST_INFO(
16:00:45   4  	  in_hours_prior    IN	NUMBER,
16:00:45   5  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
16:00:45   6  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
16:00:45   7  	);
16:00:45   8  
16:00:45   9  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
16:00:45  10  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:45  11  	  in_start	     IN NUMBER,
16:00:45  12  	  in_end	     IN NUMBER,
16:00:45  13  	  out_result_set     OUT SYS_REFCURSOR
16:00:45  14  	);
16:00:45  15  
16:00:45  16  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
16:00:45  17  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
16:00:45  18  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:00:45  19  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
16:00:45  20  	);
16:00:45  21  
16:00:45  22  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
16:00:45  23  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:45  24  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:45  25  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:00:45  26  	);
16:00:45  27  
16:00:45  28  	PROCEDURE REQUEST_FILES_BY_STATUS (
16:00:45  29  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:00:45  30  	  in_older_than_hours IN  NUMBER DEFAULT -288,
16:00:45  31  	  out_request_files   OUT SYS_REFCURSOR
16:00:45  32  	);
16:00:45  33  
16:00:45  34  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
16:00:45  35  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:45  36  	  out_count OUT NUMBER
16:00:45  37  	);
16:00:45  38  
16:00:45  39  	PROCEDURE GET_CREDIT_CARD_INFO (
16:00:45  40  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:00:45  41  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
16:00:45  42  	  out_card_info        OUT SYS_REFCURSOR
16:00:45  43  	);
16:00:45  44  
16:00:45  45  	PROCEDURE UPDATE_CC_UPDATE(
16:00:45  46  	  in_id 	     IN CC_UPDATE.ID%TYPE,
16:00:45  47  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:45  48  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
16:00:45  49  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
16:00:45  50  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
16:00:45  51  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:45  52  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:00:45  53  	);
16:00:45  54  
16:00:45  55  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
16:00:45  56  	  in_id 	IN CC_UPDATE.ID%TYPE,
16:00:45  57  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:45  58  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
16:00:45  59  	);
16:00:45  60  
16:00:45  61  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
16:00:45  62  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
16:00:45  63  	  out_request_file     OUT SYS_REFCURSOR
16:00:45  64  	);
16:00:45  65  
16:00:45  66  	PROCEDURE SUSPEND_CREDIT_CARD (
16:00:45  67  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
16:00:45  68  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:45  69  	);
16:00:45  70  
16:00:45  71  	PROCEDURE UPDATE_CREDIT_CARD (
16:00:45  72  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
16:00:45  73  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:45  74  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:00:45  75  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:45  76  	);
16:00:45  77  
16:00:45  78  	PROCEDURE COMPLETABLE_REQUESTS (
16:00:45  79  	  out_request_files OUT SYS_REFCURSOR
16:00:45  80  	);
16:00:45  81  
16:00:45  82  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
16:00:45  83  	  in_max_hours_before_report IN  NUMBER,
16:00:45  84  	  out_request_files	     OUT SYS_REFCURSOR
16:00:45  85  	);
16:00:45  86  
16:00:45  87  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:00:45  88  	  in_account_id IN NUMBER,
16:00:45  89  	  out_group_id	OUT NUMBER
16:00:45  90  	);
16:00:45  91  
16:00:45  92  	PROCEDURE GET_LICENSE_BY_ID (
16:00:45  93  	  in_license_id  IN NUMBER,
16:00:45  94  	  out_result_set OUT SYS_REFCURSOR
16:00:45  95  	);
16:00:45  96  
16:00:45  97  END PROCS_CUPY;
16:00:45  98  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.20
16:00:45 SQL> 
16:00:45 SQL> CREATE OR REPLACE
16:00:45   2  PACKAGE PROCS_ENTITLEMENT_V20 AS
16:00:45   3  
16:00:45   4  PROCEDURE GET_ALL_ENTITLEMENTS(
16:00:45   5  	in_group_id IN NUMBER,
16:00:45   6  	out_result_set OUT SYS_REFCURSOR);
16:00:45   7  
16:00:45   8  PROCEDURE GET_ITUNES_ENTITLEMENTS(
16:00:45   9  	in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:45  10  	out_result_set OUT SYS_REFCURSOR);
16:00:45  11  
16:00:45  12  PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
16:00:45  13  	in_subscription_id IN NUMBER,
16:00:45  14  	out_uri OUT VARCHAR2);
16:00:45  15  
16:00:45  16  END PROCS_ENTITLEMENT_V20;
16:00:45  17  .
16:00:45 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE (
16:00:46   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:46   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
16:00:46   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:00:46   7  );
16:00:46   8  
16:00:46   9  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
16:00:46  10  	in_invoice_id		     IN NUMBER,
16:00:46  11  	out_is_invoice_for_redeem_gc OUT NUMBER
16:00:46  12  );
16:00:46  13  
16:00:46  14  PROCEDURE GET_UNREDEEMED_GCS (
16:00:46  15  	out_result_set		OUT SYS_REFCURSOR,
16:00:46  16  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:46  17  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:46  18  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:46  19  );
16:00:46  20  
16:00:46  21  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:00:46  22  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:46  23  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:00:46  24  );
16:00:46  25  
16:00:46  26  PROCEDURE ADD_CREDIT_CARD (
16:00:46  27  /*
16:00:46  28  Throws exceptions:
16:00:46  29  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  31  */
16:00:46  32  	in_group_id		  IN NUMBER,
16:00:46  33  	in_updated_by		  IN VARCHAR2,
16:00:46  34  	in_instrument_name	  IN VARCHAR2,
16:00:46  35  	in_card_holder_name	  IN VARCHAR2,
16:00:46  36  	in_street_address	  IN VARCHAR2,
16:00:46  37  	in_street_address2	  IN VARCHAR2,
16:00:46  38  	in_state		  IN VARCHAR2,
16:00:46  39  	in_city 		  IN VARCHAR2,
16:00:46  40  	in_postal_code		  IN VARCHAR2,
16:00:46  41  	in_country		  IN CHAR,
16:00:46  42  	in_last_four_cc 	  IN VARCHAR2,
16:00:46  43  	in_expiration_date	  IN DATE,
16:00:46  44  	in_credit_card_type_id	  IN NUMBER,
16:00:46  45  	in_token		  IN VARCHAR2,
16:00:46  46  	in_chase_profile_id	  IN VARCHAR2,
16:00:46  47  	in_credit_card_status_id  IN NUMBER,
16:00:46  48  	in_private_first_name	  IN VARCHAR2,
16:00:46  49  	in_private_last_name	  IN VARCHAR2,
16:00:46  50  	out_credit_card_id	  OUT NUMBER
16:00:46  51  );
16:00:46  52  
16:00:46  53  /******************************************************************************/
16:00:46  54  
16:00:46  55  PROCEDURE ADD_PAYPAL (
16:00:46  56  /*
16:00:46  57  Throws exceptions:
16:00:46  58  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  59  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  60  */
16:00:46  61  	in_group_id			IN NUMBER,
16:00:46  62  	in_instrument_name		IN VARCHAR2,
16:00:46  63  	in_private_email_address	IN VARCHAR2,
16:00:46  64  	in_created_by			IN VARCHAR2,
16:00:46  65  	in_paypal_status_id		IN NUMBER,
16:00:46  66  	in_paypal_prvt_street_address	IN VARCHAR2,
16:00:46  67  	in_paypal_prvt_street_address2	IN VARCHAR2,
16:00:46  68  	in_state			IN VARCHAR2,
16:00:46  69  	in_city 			IN VARCHAR2,
16:00:46  70  	in_postal_code			IN VARCHAR2,
16:00:46  71  	in_country			IN CHAR,
16:00:46  72  	in_expiration_date		IN DATE,
16:00:46  73  	in_secret_token 		IN VARCHAR2,
16:00:46  74  	out_paypal_id			OUT NUMBER
16:00:46  75  );
16:00:46  76  
16:00:46  77  /********************************************/
16:00:46  78  
16:00:46  79  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
16:00:46  80  /*
16:00:46  81  Throws exceptions:
16:00:46  82  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:46  83  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  84  */
16:00:46  85  	in_code       IN VARCHAR,
16:00:46  86  	out_result_set OUT SYS_REFCURSOR
16:00:46  87  );
16:00:46  88  
16:00:46  89  /********************************************/
16:00:46  90  
16:00:46  91  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:00:46  92  /*
16:00:46  93  Throws exceptions:
16:00:46  94  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:46  95  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  96  */
16:00:46  97  	in_gift_certificate_id IN NUMBER,
16:00:46  98  	out_result_set	       OUT SYS_REFCURSOR
16:00:46  99  );
16:00:46 100  
16:00:46 101  /********************************************/
16:00:46 102  
16:00:46 103  PROCEDURE DISABLE_CREDIT_CARD (
16:00:46 104  /*
16:00:46 105  Throws exceptions:
16:00:46 106  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46 107  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46 108  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46 109  */
16:00:46 110  	in_credit_card_id IN NUMBER,
16:00:46 111  	in_updated_by	  IN VARCHAR2
16:00:46 112  );
16:00:46 113  
16:00:46 114  /********************************************/
16:00:46 115  
16:00:46 116  PROCEDURE DISABLE_PAYPAL (
16:00:46 117  /*
16:00:46 118  Throws exceptions:
16:00:46 119  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46 120  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46 121  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46 122  */
16:00:46 123  	in_paypal_id  IN NUMBER,
16:00:46 124  	in_updated_by IN VARCHAR2
16:00:46 125  );
16:00:46 126  
16:00:46 127  /********************************************/
16:00:46 128  
16:00:46 129  PROCEDURE UPDATE_CREDIT_CARD (
16:00:46 130  /*
16:00:46 131  Throws exceptions:
16:00:46 132  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46 133  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46 134  */
16:00:46 135  	in_credit_card_id	  IN NUMBER,
16:00:46 136  	in_updated_by		  IN VARCHAR2,
16:00:46 137  	in_instrument_name	  IN VARCHAR2,
16:00:46 138  	in_is_default		  IN NUMBER
16:00:46 139  );
16:00:46 140  
16:00:46 141  /********************************************/
16:00:46 142  
16:00:46 143  PROCEDURE START_GC_PURCHASING (
16:00:46 144  	in_group_id		  IN NUMBER,
16:00:46 145  	in_offer_chain_id	  IN VARCHAR2,
16:00:46 146  	in_gift_certificate_code  IN  VARCHAR2,
16:00:46 147  	in_created_by		  IN  VARCHAR2,
16:00:46 148  	in_recipient_name	  IN  VARCHAR2,
16:00:46 149  	in_recipient_email	  IN  VARCHAR2,
16:00:46 150  	in_recipient_address_id   IN NUMBER,
16:00:46 151  	in_recipient_notify_date  IN DATE,
16:00:46 152  	in_sender_name		  IN VARCHAR2,
16:00:46 153  	in_sender_email 	  IN VARCHAR2,
16:00:46 154  	in_gift_message 	  IN  VARCHAR2,
16:00:46 155  	in_expiration_date	  IN DATE,
16:00:46 156  	out_gift_certificate_id   OUT NUMBER,
16:00:46 157  	out_invoice_id		  OUT NUMBER
16:00:46 158  );
16:00:46 159  
16:00:46 160  PROCEDURE FINALIZE_GC_PURCHASING (
16:00:46 161  	in_invoice_id	      IN NUMBER,
16:00:46 162  	in_created_by	      IN VARCHAR2,
16:00:46 163  	in_instrument_id      IN NUMBER,
16:00:46 164  	in_instrument_type_id IN NUMBER,
16:00:46 165  	in_order_id	      IN VARCHAR2,
16:00:46 166  	in_transaction_id     IN NUMBER,
16:00:46 167  	out_charge_amount     OUT NUMBER
16:00:46 168  );
16:00:46 169  
16:00:46 170  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
16:00:46 171  	in_group_id	  IN NUMBER,
16:00:46 172  	in_offer_chain_id IN VARCHAR2,
16:00:46 173  	in_gift_certificate_code  IN  VARCHAR2,
16:00:46 174  	in_created_by IN  VARCHAR2,
16:00:46 175  	in_recipient_name IN  VARCHAR2,
16:00:46 176  	in_recipient_email IN  VARCHAR2,
16:00:46 177  	in_sender_name IN VARCHAR2,
16:00:46 178  	in_sender_email IN VARCHAR2,
16:00:46 179  	in_gift_message IN  VARCHAR2,
16:00:46 180  	in_instrument_id  IN  NUMBER,
16:00:46 181  	in_instrument_type_id IN NUMBER,
16:00:46 182  	in_expiration_date IN DATE,
16:00:46 183  	in_order_id IN VARCHAR2,
16:00:46 184  	in_transaction_id IN NUMBER
16:00:46 185  );
16:00:46 186  
16:00:46 187  /*********************************************/
16:00:46 188  
16:00:46 189  PROCEDURE REDEEM_GIFT_CERTIFICATE (
16:00:46 190  	in_group_id			IN NUMBER,
16:00:46 191  	in_gift_certificate_code	IN VARCHAR2,
16:00:46 192  	in_created_by			IN VARCHAR2,
16:00:46 193  	in_redeemer_address_id		IN NUMBER,
16:00:46 194  	in_fin_instrument_id		IN NUMBER,
16:00:46 195  	in_fin_instrument_type_id	IN NUMBER,
16:00:46 196  	in_redemption_offer_chain_id	IN NUMBER,
16:00:46 197  	out_subscription_id		OUT NUMBER,
16:00:46 198  	out_license_id			OUT NUMBER
16:00:46 199  );
16:00:46 200  
16:00:46 201  /********************************************/
16:00:46 202  
16:00:46 203  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
16:00:46 204  	in_group_id	       IN  NUMBER,
16:00:46 205  	out_instrument_type_id OUT NUMBER,
16:00:46 206  	out_instrument_id      OUT NUMBER
16:00:46 207  );
16:00:46 208  
16:00:46 209  /************************************************/
16:00:46 210  
16:00:46 211  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
16:00:46 212  	in_group_id	      IN NUMBER,
16:00:46 213  	in_instrument_type_id IN NUMBER,
16:00:46 214  	in_instrument_id      IN NUMBER,
16:00:46 215  	in_updated_by	      IN VARCHAR2
16:00:46 216  );
16:00:46 217  
16:00:46 218  /***************************************************/
16:00:46 219  
16:00:46 220  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
16:00:46 221  	in_group_id	      IN NUMBER
16:00:46 222  );
16:00:46 223  
16:00:46 224  /****************************************************/
16:00:46 225  
16:00:46 226  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:46 227  	in_credit_card_id IN  NUMBER,
16:00:46 228  	out_result_set	  OUT SYS_REFCURSOR
16:00:46 229  );
16:00:46 230  
16:00:46 231  /****************************************************/
16:00:46 232  
16:00:46 233  PROCEDURE GET_PAYPAL_BY_ID (
16:00:46 234  	in_paypal_id   IN  NUMBER,
16:00:46 235  	out_result_set OUT SYS_REFCURSOR
16:00:46 236  );
16:00:46 237  
16:00:46 238  /***********************************************/
16:00:46 239  
16:00:46 240  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
16:00:46 241  	in_credit_card_id NUMBER
16:00:46 242  ) RETURN NUMBER;
16:00:46 243  
16:00:46 244  /*************************************************/
16:00:46 245  
16:00:46 246  PROCEDURE GET_PURCHASED_GCERTIFICATES (
16:00:46 247  	in_group_id    IN NUMBER,
16:00:46 248  	out_result_set OUT SYS_REFCURSOR
16:00:46 249  );
16:00:46 250  
16:00:46 251  /*************************************************/
16:00:46 252  
16:00:46 253  -- isGiftCertificateForProperOffer
16:00:46 254  
16:00:46 255  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:00:46 256  	in_gift_certificate_id IN NUMBER,
16:00:46 257  	in_charge_id	       IN NUMBER,
16:00:46 258  	out_result	       OUT NUMBER
16:00:46 259  );
16:00:46 260  
16:00:46 261  FUNCTION IS_CREDIT_CARD_EXISTS (
16:00:46 262  /*
16:00:46 263  1 - if instrument exists
16:00:46 264  0 - else
16:00:46 265  */
16:00:46 266  	in_credit_card_id IN NUMBER
16:00:46 267  ) RETURN NUMBER;
16:00:46 268  
16:00:46 269  FUNCTION IS_PAYPAL_EXISTS (
16:00:46 270  /*
16:00:46 271  1 - if instrument exists
16:00:46 272  0 - else
16:00:46 273  */
16:00:46 274  	in_paypal_id IN NUMBER
16:00:46 275  ) RETURN NUMBER;
16:00:46 276  
16:00:46 277  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
16:00:46 278  /*
16:00:46 279  1 - if instrument exists
16:00:46 280  0 - else
16:00:46 281  */
16:00:46 282  	in_gift_certificate_id IN NUMBER
16:00:46 283  ) RETURN NUMBER;
16:00:46 284  
16:00:46 285  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
16:00:46 286  	in_credit_card_id IN NUMBER,
16:00:46 287  	out_group_id	  OUT NUMBER
16:00:46 288  );
16:00:46 289  
16:00:46 290  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
16:00:46 291  	in_paypal_id IN NUMBER,
16:00:46 292  	out_group_id	  OUT NUMBER
16:00:46 293  );
16:00:46 294  
16:00:46 295  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
16:00:46 296  	in_credit_card_id	 IN CREDIT_CARD.ID%TYPE,
16:00:46 297  	in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:00:46 298  	in_updated_by		 IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:46 299  );
16:00:46 300  
16:00:46 301  PROCEDURE UPDATE_PAYPAL_STATUS (
16:00:46 302  	in_paypal_id	    IN PAYPAL.ID%TYPE,
16:00:46 303  	in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:00:46 304  	in_updated_by	    IN PAYPAL.UPDATED_BY%TYPE
16:00:46 305  );
16:00:46 306  
16:00:46 307  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
16:00:46 308  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:00:46 309  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:00:46 310  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:00:46 311  );
16:00:46 312  
16:00:46 313  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:46 314  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:46 315  	out_result_set OUT SYS_REFCURSOR
16:00:46 316  );
16:00:46 317  
16:00:46 318  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
16:00:46 319  	/*in_group_id		     IN NUMBER	-- TODO: should we pass group_id here?*/
16:00:46 320  	in_old_fin_instrument_id   IN NUMBER,
16:00:46 321  	in_old_fin_instrument_type IN NUMBER,
16:00:46 322  	in_new_fin_instrument_id   IN NUMBER,
16:00:46 323  	in_new_fin_instrument_type IN NUMBER,
16:00:46 324  	in_updated_by		   IN VARCHAR2
16:00:46 325  );
16:00:46 326  
16:00:46 327  END PROCS_FIN_INSTRUMENTS_V20;
16:00:46 328  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.13
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_FIN_INSTRUMENTS_CRU
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_FIN_INSTRUMENTS_CRU_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE CREATE_CREDIT_CARD(
16:00:46   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
16:00:46   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
16:00:46   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
16:00:46   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
16:00:46   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
16:00:46   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
16:00:46  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:00:46  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
16:00:46  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
16:00:46  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
16:00:46  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
16:00:46  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:46  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:00:46  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
16:00:46  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
16:00:46  19  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:00:46  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
16:00:46  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:00:46  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
16:00:46  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
16:00:46  24  );
16:00:46  25  
16:00:46  26  PROCEDURE UPDATE_CREDIT_CARD(
16:00:46  27  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
16:00:46  28  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:46  29  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
16:00:46  30  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:46  31  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:00:46  32  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:00:46  33  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:00:46  34  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:46  35  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:00:46  36  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
16:00:46  37  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:46  38  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:00:46  39  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
16:00:46  40  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
16:00:46  41  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
16:00:46  42  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:00:46  43  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
16:00:46  44  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
16:00:46  45  );
16:00:46  46  
16:00:46  47  PROCEDURE CREATE_PAYPAL(
16:00:46  48  	out_paypal_id			OUT PAYPAL.ID%TYPE,
16:00:46  49  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
16:00:46  50  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
16:00:46  51  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:46  52  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:00:46  53  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
16:00:46  54  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:00:46  55  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:00:46  56  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:00:46  57  	in_state			IN PAYPAL.STATE%TYPE,
16:00:46  58  	in_city 			IN PAYPAL.CITY%TYPE,
16:00:46  59  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
16:00:46  60  	in_country			IN PAYPAL.COUNTRY%TYPE,
16:00:46  61  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
16:00:46  62  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:00:46  63  );
16:00:46  64  
16:00:46  65  PROCEDURE UPDATE_PAYPAL(
16:00:46  66  	in_paypal_id			IN PAYPAL.ID%TYPE,
16:00:46  67  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:46  68  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:00:46  69  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
16:00:46  70  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
16:00:46  71  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:46  72  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:46  73  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
16:00:46  74  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
16:00:46  75  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:46  76  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
16:00:46  77  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:46  78  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE DEFAULT NULL
16:00:46  79  );
16:00:46  80  
16:00:46  81  PROCEDURE CREATE_GIFT_CERTIFICATE(
16:00:46  82  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
16:00:46  83  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
16:00:46  84  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
16:00:46  85  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:46  86  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
16:00:46  87  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:46  88  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
16:00:46  89  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:00:46  90  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
16:00:46  91  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
16:00:46  92  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:00:46  93  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:00:46  94  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:00:46  95  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:00:46  96  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
16:00:46  97  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
16:00:46  98  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:00:46  99  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:00:46 100  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:00:46 101  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:46 102  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:00:46 103  );
16:00:46 104  
16:00:46 105  PROCEDURE UPDATE_GIFT_CERTIFICATE(
16:00:46 106  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:00:46 107  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:46 108  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
16:00:46 109  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
16:00:46 110  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
16:00:46 111  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:00:46 112  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:00:46 113  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:00:46 114  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:00:46 115  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
16:00:46 116  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
16:00:46 117  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:00:46 118  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:00:46 119  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:00:46 120  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:46 121  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:46 122  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:00:46 123  );
16:00:46 124  
16:00:46 125  END PROCS_FIN_INSTRUMENTS_CRU_V20;
16:00:46 126  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.22
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_V20" As
16:00:46   2  
16:00:46   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:00:46   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:46   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:00:46   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:46   7  );
16:00:46   8  
16:00:46   9  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:00:46  10  	out_result_set OUT SYS_REFCURSOR
16:00:46  11  );
16:00:46  12  
16:00:46  13  PROCEDURE EXPIRE_SUB_SHARE (
16:00:46  14  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:46  15  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:46  16  );
16:00:46  17  
16:00:46  18  PROCEDURE EXPIRE_ALL_SHARES (
16:00:46  19  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:00:46  20  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:46  21  );
16:00:46  22  
16:00:46  23  PROCEDURE SUB_SHARE_BY_GROUP_ID (
16:00:46  24  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
16:00:46  25  	in_start	 IN  NUMBER,
16:00:46  26  	in_end		 IN  NUMBER,
16:00:46  27  	in_expired	 IN  NUMBER,
16:00:46  28  	out_result_set	 OUT SYS_REFCURSOR,
16:00:46  29  	out_shares_count OUT NUMBER
16:00:46  30  );
16:00:46  31  
16:00:46  32  PROCEDURE IS_VALID_IP_ADDRESS (
16:00:46  33  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:46  34  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:46  35  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:46  36  	out_is_valid	    OUT NUMBER
16:00:46  37  );
16:00:46  38  
16:00:46  39  PROCEDURE IS_VALID_EMAIL_DOMAIN (
16:00:46  40  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46  41  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:46  42  	out_is_valid	    OUT NUMBER
16:00:46  43  );
16:00:46  44  
16:00:46  45  PROCEDURE GET_SUBSCRIPTION_SHARE (
16:00:46  46  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:00:46  47  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE,
16:00:46  48  	Out_Result_Set	       Out Sys_Refcursor
16:00:46  49  );
16:00:46  50  
16:00:46  51  PROCEDURE GET_SUBSCRIPTION_SHARES (
16:00:46  52  	in_group_account_id IN NUMBER,
16:00:46  53  	in_start	    IN NUMBER,
16:00:46  54  	in_end		    IN NUMBER,
16:00:46  55  	Out_Result_Set	    OUT Sys_Refcursor
16:00:46  56  );
16:00:46  57  
16:00:46  58  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
16:00:46  59  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
16:00:46  60  	Out_Result_Set	   Out Sys_Refcursor
16:00:46  61  );
16:00:46  62  
16:00:46  63  PROCEDURE CREATE_GROUP_ACCOUNT (
16:00:46  64  	in_subscription_id	 IN NUMBER,
16:00:46  65  	in_group_name		 IN VARCHAR2,
16:00:46  66  	in_first_name		 IN VARCHAR2,
16:00:46  67  	in_last_name		 IN VARCHAR2,
16:00:46  68  	in_email		 IN VARCHAR2,
16:00:46  69  	in_phone		 IN VARCHAR2,
16:00:46  70  	in_organization_type	 IN VARCHAR2,
16:00:46  71  	in_seats		 IN NUMBER,
16:00:46  72  	in_seat_ttl_in_hours	 IN NUMBER,
16:00:46  73  	in_ip			 IN NUMBER,
16:00:46  74  	in_created_by		 IN VARCHAR2
16:00:46  75  );
16:00:46  76  
16:00:46  77  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
16:00:46  78  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:46  79  	out_result_set	    OUT SYS_REFCURSOR
16:00:46  80  );
16:00:46  81  
16:00:46  82  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
16:00:46  83  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:46  84  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:46  85  	out_result_set	    OUT SYS_REFCURSOR
16:00:46  86  );
16:00:46  87  
16:00:46  88  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
16:00:46  89  	in_group_account_id   IN NUMBER,
16:00:46  90  	in_start	      IN NUMBER,
16:00:46  91  	in_end		      IN NUMBER,
16:00:46  92  	in_status	      IN NUMBER,
16:00:46  93  	out_record_count      OUT NUMBER,
16:00:46  94  	out_result_set	      OUT SYS_REFCURSOR
16:00:46  95  );
16:00:46  96  
16:00:46  97  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
16:00:46  98  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46  99  	in_start	      IN NUMBER,
16:00:46 100  	in_end		      IN NUMBER,
16:00:46 101  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:00:46 102  	out_record_count      OUT NUMBER,
16:00:46 103  	out_result_set	      OUT SYS_REFCURSOR
16:00:46 104  );
16:00:46 105  
16:00:46 106  PROCEDURE ADD_EMAIL_DOMAIN (
16:00:46 107  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46 108  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:46 109  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:00:46 110  );
16:00:46 111  
16:00:46 112  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:00:46 113  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46 114  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:46 115  );
16:00:46 116  
16:00:46 117  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:00:46 118  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:46 119  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:46 120  );
16:00:46 121  
16:00:46 122  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:00:46 123  	in_group_account_id    IN NUMBER,
16:00:46 124  	in_borrower_account_id IN NUMBER,
16:00:46 125  	in_ip_address	       IN VARCHAR2,
16:00:46 126  	in_email_domain        IN VARCHAR2,
16:00:46 127  	in_created_by	       IN VARCHAR2
16:00:46 128  );
16:00:46 129  
16:00:46 130  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
16:00:46 131  	in_group_account_id   IN NUMBER,
16:00:46 132  	out_occupied_seats   OUT NUMBER
16:00:46 133  );
16:00:46 134  
16:00:46 135  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
16:00:46 136  	in_group_account_id   IN NUMBER
16:00:46 137  ) RETURN NUMBER;
16:00:46 138  
16:00:46 139  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:00:46 140  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:46 141  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:46 142  );
16:00:46 143  
16:00:46 144  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:00:46 145  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:00:46 146  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:46 147  );
16:00:46 148  
16:00:46 149  PROCEDURE ADD_IP_RANGE (
16:00:46 150  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:46 151  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:00:46 152  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:46 153  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:46 154  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:00:46 155  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:00:46 156  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:00:46 157  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:00:46 158  );
16:00:46 159  
16:00:46 160  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
16:00:46 161  	in_group_account_id IN NUMBER,
16:00:46 162  	out_group_id OUT NUMBER
16:00:46 163  );
16:00:46 164  
16:00:46 165  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
16:00:46 166  	in_group_account_ip_range_id IN NUMBER,
16:00:46 167  	out_group_id OUT NUMBER
16:00:46 168  );
16:00:46 169  
16:00:46 170  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
16:00:46 171  	in_group_account_email_dom_id IN NUMBER,
16:00:46 172  	out_group_id OUT NUMBER
16:00:46 173  );
16:00:46 174  
16:00:46 175  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:00:46 176  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:46 177  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:00:46 178  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:00:46 179  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:00:46 180  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:00:46 181  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:00:46 182  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:46 183  );
16:00:46 184  
16:00:46 185  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:00:46 186  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:46 187  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:00:46 188  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:46 189  );
16:00:46 190  
16:00:46 191  END PROCS_GROUP_ACCOUNT_V20;
16:00:46 192  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.11
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_GROUP_ACCOUNT
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_GROUP_ACCOUNT_CRU_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
16:00:46   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:46   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
16:00:46   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
16:00:46   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
16:00:46   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
16:00:46   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
16:00:46  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:00:46  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:46  12  );
16:00:46  13  
16:00:46  14  PROCEDURE CREATE_GROUP_ACCOUNT (
16:00:46  15  	in_subscription_id	 IN NUMBER,
16:00:46  16  	in_group_name		 IN VARCHAR2,
16:00:46  17  	in_first_name		 IN VARCHAR2,
16:00:46  18  	in_last_name		 IN VARCHAR2,
16:00:46  19  	in_email		 IN VARCHAR2,
16:00:46  20  	in_phone		 IN VARCHAR2,
16:00:46  21  	in_organization_type	 IN VARCHAR2,
16:00:46  22  	in_seats		 IN NUMBER,
16:00:46  23  	in_seat_ttl_in_hours	 IN NUMBER,
16:00:46  24  	in_ip			 IN NUMBER,
16:00:46  25  	in_created_by		 IN VARCHAR2
16:00:46  26  );
16:00:46  27  
16:00:46  28  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:00:46  29  	in_group_account_id    IN NUMBER,
16:00:46  30  	in_borrower_account_id IN NUMBER,
16:00:46  31  	in_ip_address	       IN VARCHAR2,
16:00:46  32  	in_email_domain        IN VARCHAR2,
16:00:46  33  	in_start_date	       IN DATE,
16:00:46  34  	in_end_date	       IN DATE,
16:00:46  35  	in_created_by	       IN VARCHAR2
16:00:46  36  );
16:00:46  37  
16:00:46  38  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:00:46  39  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:46  40  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:46  41  );
16:00:46  42  
16:00:46  43  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:00:46  44  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:00:46  45  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:46  46  );
16:00:46  47  
16:00:46  48  PROCEDURE ADD_IP_RANGE (
16:00:46  49  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:46  50  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:00:46  51  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:46  52  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:46  53  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:00:46  54  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:00:46  55  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:00:46  56  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:00:46  57  );
16:00:46  58  
16:00:46  59  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:00:46  60  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46  61  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:46  62  );
16:00:46  63  
16:00:46  64  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:00:46  65  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:46  66  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:46  67  );
16:00:46  68  
16:00:46  69  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
16:00:46  70  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:46  71  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:46  72  );
16:00:46  73  
16:00:46  74  PROCEDURE ADD_EMAIL_DOMAIN (
16:00:46  75  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:46  76  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:46  77  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:00:46  78  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:00:46  79  );
16:00:46  80  
16:00:46  81  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:00:46  82  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:46  83  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:00:46  84  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:00:46  85  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:00:46  86  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:00:46  87  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:00:46  88  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:46  89  );
16:00:46  90  
16:00:46  91  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:00:46  92  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:46  93  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:00:46  94  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:46  95  );
16:00:46  96  END PROCS_GROUP_ACCOUNT_CRU_V20;
16:00:46  97  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_HISTORY
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_HISTORY_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE CREATE_ADDRESS_HISTORY(
16:00:46   4  /*
16:00:46   5  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46   7  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46   8  */
16:00:46   9  	in_address_id		     IN NUMBER,
16:00:46  10  	in_system_activity_reason_id IN NUMBER
16:00:46  11  );
16:00:46  12  
16:00:46  13  PROCEDURE CREATE_ACCOUNT_HISTORY(
16:00:46  14  /*
16:00:46  15  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  16  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  17  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  18  */
16:00:46  19  	in_account_id		     IN NUMBER,
16:00:46  20  	in_system_activity_reason_id IN NUMBER
16:00:46  21  );
16:00:46  22  
16:00:46  23  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
16:00:46  24  /*
16:00:46  25  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  27  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  28  */
16:00:46  29  	in_subscription_id	     IN NUMBER,
16:00:46  30  	in_system_activity_reason_id IN NUMBER
16:00:46  31  );
16:00:46  32  
16:00:46  33  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
16:00:46  34  /*
16:00:46  35  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  36  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  37  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  38  */
16:00:46  39  	in_credit_card_id	      IN NUMBER,
16:00:46  40  	in_system_activity_reason_id  IN  NUMBER
16:00:46  41  );
16:00:46  42  
16:00:46  43  PROCEDURE CREATE_PAYPAL_HISTORY(
16:00:46  44  /*
16:00:46  45  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  46  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  47  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  48  */
16:00:46  49  	in_paypal_id		      IN NUMBER,
16:00:46  50  	in_system_activity_reason_id  IN NUMBER
16:00:46  51  );
16:00:46  52  
16:00:46  53  PROCEDURE CREATE_GIFT_CERT_HISTORY(
16:00:46  54  /*
16:00:46  55  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  56  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  57  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  58  */
16:00:46  59  	in_gift_certificate_id	      IN NUMBER,
16:00:46  60  	in_system_activity_reason_id  IN  NUMBER
16:00:46  61  );
16:00:46  62  
16:00:46  63  PROCEDURE CREATE_TRANSACTION_HISTORY (
16:00:46  64  /*
16:00:46  65  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  66  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  67  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  68  */
16:00:46  69  	in_transaction_id	     IN NUMBER,
16:00:46  70  	in_system_activity_reason_id IN NUMBER
16:00:46  71  );
16:00:46  72  
16:00:46  73  PROCEDURE CREATE_INVOICE_HISTORY (
16:00:46  74  /*
16:00:46  75  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  76  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  77  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  78  */
16:00:46  79  	in_invoice_id		     IN NUMBER,
16:00:46  80  	in_system_activity_reason_id IN NUMBER
16:00:46  81  );
16:00:46  82  
16:00:46  83  PROCEDURE CREATE_LICENSE_HISTORY (
16:00:46  84  /*
16:00:46  85  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  86  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  87  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  88  */
16:00:46  89  	in_license_id		     IN NUMBER,
16:00:46  90  	in_system_activity_reason_id IN NUMBER
16:00:46  91  );
16:00:46  92  
16:00:46  93  PROCEDURE CREATE_CHARGE_HISTORY (
16:00:46  94  /*
16:00:46  95  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  96  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  97  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46  98  */
16:00:46  99  	in_charge_id		    IN NUMBER,
16:00:46 100  	in_system_activity_reason_id IN NUMBER
16:00:46 101  );
16:00:46 102  
16:00:46 103  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
16:00:46 104  /*
16:00:46 105  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46 106  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46 107  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:46 108  */
16:00:46 109  	in_invoice_adjustment_id     IN NUMBER,
16:00:46 110  	in_system_activity_reason_id IN NUMBER
16:00:46 111  );
16:00:46 112  
16:00:46 113  
16:00:46 114  END PROCS_HISTORY_V20;
16:00:46 115  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.12
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_INVOICE
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE GET_INVOICE_IDS(
16:00:46   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
16:00:46   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:00:46   6  	out_result_set OUT SYS_REFCURSOR
16:00:46   7  );
16:00:46   8  
16:00:46   9  PROCEDURE IS_INVOICE_FOR_GC (
16:00:46  10  	in_invoice_id  IN NUMBER,
16:00:46  11  	out_result     OUT NUMBER
16:00:46  12  );
16:00:46  13  
16:00:46  14  PROCEDURE CREATE_INVOICE(
16:00:46  15  /*
16:00:46  16  Throws exceptions:
16:00:46  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  18  */
16:00:46  19  	  in_invoice_status IN NUMBER,
16:00:46  20  	  in_created_by     IN VARCHAR2,
16:00:46  21  	  in_tax_exempt_id  IN VARCHAR2,
16:00:46  22  	  out_invoice_id    OUT NUMBER
16:00:46  23  );
16:00:46  24  
16:00:46  25  PROCEDURE GET_PENDING_INVOICES (
16:00:46  26  /*
16:00:46  27  Throws exceptions:
16:00:46  28  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  29  */
16:00:46  30  	out_result_set	     OUT SYS_REFCURSOR,
16:00:46  31  	in_row_number	     IN NUMBER DEFAULT NULL
16:00:46  32  );
16:00:46  33  
16:00:46  34  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:46  35  /*
16:00:46  36  Throws exceptions:
16:00:46  37  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  39  */
16:00:46  40  	in_invoice_id IN  NUMBER,
16:00:46  41  	out_amount    OUT NUMBER
16:00:46  42  );
16:00:46  43  
16:00:46  44  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
16:00:46  45  	in_invoice_id IN  NUMBER
16:00:46  46  ) RETURN NUMBER;
16:00:46  47  
16:00:46  48  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:00:46  49  /*
16:00:46  50  Throws exceptions:
16:00:46  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  53  */
16:00:46  54  	in_invoice_id  IN  NUMBER,
16:00:46  55  	out_account_id OUT NUMBER
16:00:46  56  );
16:00:46  57  
16:00:46  58  PROCEDURE GET_INVOICE_DETAILS (
16:00:46  59  /*
16:00:46  60  Throws exceptions:
16:00:46  61  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  63  */
16:00:46  64  	in_invoice_id	   IN  NUMBER,
16:00:46  65  	out_group_id	   OUT NUMBER,
16:00:46  66  	out_status_id	   OUT NUMBER,
16:00:46  67  	out_line_items_set OUT SYS_REFCURSOR,
16:00:46  68  	out_pp_charges_set OUT SYS_REFCURSOR,
16:00:46  69  	out_cc_charges_set OUT SYS_REFCURSOR,
16:00:46  70  	out_gc_charges_set OUT SYS_REFCURSOR
16:00:46  71  );
16:00:46  72  -- norlov: #38796
16:00:46  73  PROCEDURE GET_TRANSACTION_INVOICE (
16:00:46  74  /*
16:00:46  75  Throws exceptions:
16:00:46  76  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  77  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  78  */
16:00:46  79  	in_transaction_id  IN  NUMBER,
16:00:46  80  	out_result_set	      OUT SYS_REFCURSOR
16:00:46  81  );
16:00:46  82  
16:00:46  83  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:46  84  /*
16:00:46  85  Throws exceptions:
16:00:46  86  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  88  */
16:00:46  89  	in_invoice_id		       IN NUMBER,
16:00:46  90  	in_invoice_status_id	       IN NUMBER,
16:00:46  91  	in_updated_by		       IN VARCHAR2
16:00:46  92  );
16:00:46  93  
16:00:46  94  FUNCTION IS_INVOICE_PAYING_STARTED (
16:00:46  95  /*
16:00:46  96  Throws exceptions:
16:00:46  97  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:46  98  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  99  */
16:00:46 100  	in_invoice_id IN NUMBER
16:00:46 101  ) RETURN NUMBER;
16:00:46 102  
16:00:46 103  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
16:00:46 104  	in_invoice_id  IN NUMBER,
16:00:46 105  	out_is_started OUT NUMBER
16:00:46 106  );
16:00:46 107  
16:00:46 108  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
16:00:46 109  	in_invoice_id	      IN NUMBER,
16:00:46 110  	in_chargeback_date    IN DATE,
16:00:46 111  	out_chargeback_amount OUT NUMBER
16:00:46 112  );
16:00:46 113  
16:00:46 114  PROCEDURE APPLY_REFUND (
16:00:46 115  	in_invoice_id	     IN NUMBER,
16:00:46 116  	in_chargeback_amount IN NUMBER,
16:00:46 117  	in_created_by	     IN VARCHAR2,
16:00:46 118  	out_charge_id	     OUT NUMBER
16:00:46 119  );
16:00:46 120  
16:00:46 121  PROCEDURE GET_MAX_REFUND (
16:00:46 122  	in_invoice_id IN NUMBER,
16:00:46 123  	out_amount    OUT NUMBER
16:00:46 124  );
16:00:46 125  
16:00:46 126  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
16:00:46 127  	in_invoice_id	    IN NUMBER,
16:00:46 128  	in_chargeback_date  IN DATE DEFAULT SYSDATE,
16:00:46 129  	out_days_num	    OUT NUMBER
16:00:46 130  );
16:00:46 131  
16:00:46 132  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:46 133  	in_invoice_id  IN NUMBER,
16:00:46 134  	out_result_set OUT SYS_REFCURSOR
16:00:46 135  );
16:00:46 136  
16:00:46 137  PROCEDURE GET_INVOICE_LICENSES (
16:00:46 138  	in_invoice_id  IN NUMBER,
16:00:46 139  	out_result_set OUT SYS_REFCURSOR
16:00:46 140  );
16:00:46 141  
16:00:46 142  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
16:00:46 143  	in_invoice_id	   IN NUMBER,
16:00:46 144  	out_offer_chain_id OUT NUMBER
16:00:46 145  );
16:00:46 146  
16:00:46 147  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
16:00:46 148  -- Closing invoice without refund
16:00:46 149  	in_invoice_id IN NUMBER,
16:00:46 150  	in_updated_by IN VARCHAR2
16:00:46 151  );
16:00:46 152  
16:00:46 153  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
16:00:46 154  	in_invoice_id	    IN NUMBER,
16:00:46 155  	out_subscription_id OUT NUMBER
16:00:46 156  );
16:00:46 157  
16:00:46 158  PROCEDURE IS_INVOICE_TAX_EXEMPT (
16:00:46 159  /*
16:00:46 160  Throws exceptions:
16:00:46 161  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:46 162  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46 163  Return:
16:00:46 164  	GLOBAL_CONSTANTS_V20.TRUE if ACCOUNT.EXEMPT_ID is not null
16:00:46 165  	GLOBAL_CONSTANTS_V20.FALSE else
16:00:46 166  */
16:00:46 167  	in_invoice_id	  IN NUMBER,
16:00:46 168  	out_is_tax_exempt OUT NUMBER
16:00:46 169  );
16:00:46 170  
16:00:46 171  PROCEDURE GET_INVOICE_BY_ID (
16:00:46 172  	in_invoice_id  IN NUMBER,
16:00:46 173  	out_result_set OUT SYS_REFCURSOR
16:00:46 174  );
16:00:46 175  
16:00:46 176  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
16:00:46 177  	in_invoice_id		      IN NUMBER,
16:00:46 178  	out_is_tax_calculation_needed OUT NUMBER
16:00:46 179  );
16:00:46 180  
16:00:46 181  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
16:00:46 182  	in_invoice_id		     IN NUMBER,
16:00:46 183  	in_updated_by		     IN VARCHAR2,
16:00:46 184  	in_is_tax_calculation_needed IN NUMBER
16:00:46 185  );
16:00:46 186  
16:00:46 187  PROCEDURE REFUND_INVOICE (
16:00:46 188  	in_invoice_id	   IN NUMBER,
16:00:46 189  	in_refund_amount   IN NUMBER,
16:00:46 190  	in_note 	   IN VARCHAR2,
16:00:46 191  	in_created_by	   IN VARCHAR2,
16:00:46 192  	out_charge_id	   OUT NUMBER
16:00:46 193  );
16:00:46 194  
16:00:46 195  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:00:46 196  	in_invoice_id		    IN NUMBER,
16:00:46 197  	out_order_id		    OUT VARCHAR2,
16:00:46 198  	out_external_transaction_id OUT VARCHAR2
16:00:46 199  );
16:00:46 200  
16:00:46 201  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
16:00:46 202  	in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
16:00:46 203  	out_result_set OUT SYS_REFCURSOR
16:00:46 204  );
16:00:46 205  
16:00:46 206  PROCEDURE IS_REVOKE_ENTITLEMENTS(
16:00:46 207  	in_invoice_id IN NUMBER,
16:00:46 208  	out_is_revoke OUT NUMBER
16:00:46 209  );
16:00:46 210  
16:00:46 211  END PROCS_INVOICE_V20;
16:00:46 212  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.10
16:00:46 SQL> 
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> -- DDL for package PROCS_INVOICE_CRU
16:00:46 SQL> --------------------------------------------------------------------------------
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_INVOICE_CRU_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE CREATE_INVOICE (
16:00:46   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
16:00:46   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
16:00:46   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
16:00:46   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
16:00:46   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
16:00:46   9  );
16:00:46  10  
16:00:46  11  PROCEDURE UPDATE_INVOICE (
16:00:46  12  	in_invoice_id		       IN INVOICE.ID%TYPE,
16:00:46  13  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
16:00:46  14  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
16:00:46  15  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
16:00:46  16  );
16:00:46  17  
16:00:46  18  END PROCS_INVOICE_CRU_V20;
16:00:46  19  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:46 SQL> 
16:00:46 SQL> /*
16:00:46 SQL> CREATE TABLE ITUNES_RECEIPT (
16:00:46 SQL> 	id NUMBER NOT NULL ENABLE,
16:00:46 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
16:00:46 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
16:00:46 SQL> 	status NUMBER,
16:00:46 SQL> 	quantity NUMBER,
16:00:46 SQL> 	product_id VARCHAR(1024),
16:00:46 SQL> 	transaction_id VARCHAR(1024),
16:00:46 SQL> 	purchase_date TIMESTAMP,
16:00:46 SQL> 	original_transaction_id VARCHAR(1024),
16:00:46 SQL> 	original_purchase_date TIMESTAMP,
16:00:46 SQL> 	app_item_id VARCHAR(1024),
16:00:46 SQL> 	version_external_id NUMBER,
16:00:46 SQL> 	bid VARCHAR(1024),
16:00:46 SQL> 	bvrs VARCHAR(255),
16:00:46 SQL> 	expires_date TIMESTAMP,
16:00:46 SQL> 	create_date DATE NOT NULL,
16:00:46 SQL> 	created_by VARCHAR(255) NOT NULL,
16:00:46 SQL> 	update_date DATE NOT NULL,
16:00:46 SQL> 	updated_by VARCHAR(255) NOT NULL,
16:00:46 SQL> 	last_check_date DATE NOT NULL,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
16:00:46 SQL> )
16:00:46 SQL> TABLESPACE CORE;
16:00:46 SQL> */
16:00:46 SQL> 
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION(
16:00:46   4  	      /*
16:00:46   5  	      Throws exceptions:
16:00:46   6  	      APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46   7  	      */
16:00:46   8  	      in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:46   9  	      out_result_set	  OUT SYS_REFCURSOR
16:00:46  10  );
16:00:46  11  
16:00:46  12  PROCEDURE CREATE_RECEIPT(
16:00:46  13  /*
16:00:46  14  Throws exceptions:
16:00:46  15  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  16  */
16:00:46  17  	  out_id	      OUT NUMBER,
16:00:46  18  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:46  19  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:46  20  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:00:46  21  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:46  22  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:46  23  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:46  24  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:46  25  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:46  26  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:46  27  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:46  28  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:46  29  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:00:46  30  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:00:46  31  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:46  32  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
16:00:46  33  );
16:00:46  34  
16:00:46  35  PROCEDURE UPDATE_RECEIPT(
16:00:46  36  /*
16:00:46  37  Throws exceptions:
16:00:46  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  39  */
16:00:46  40  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:00:46  41  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:46  42  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:00:46  43  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:46  44  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:46  45  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:46  46  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:46  47  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:46  48  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:46  49  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:46  50  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:46  51  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:00:46  52  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:00:46  53  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:46  54  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:00:46  55  	  in_is_expired       IN NUMBER
16:00:46  56  );
16:00:46  57  
16:00:46  58  PROCEDURE LINK_ITUNES_RECEIPT(
16:00:46  59  /*
16:00:46  60  Throws exceptions:
16:00:46  61  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  62  */
16:00:46  63  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:00:46  64  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:46  65  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
16:00:46  66  );
16:00:46  67  
16:00:46  68  PROCEDURE MARK_RECEIPT_CHECKED(
16:00:46  69  /*
16:00:46  70  Throws exceptions:
16:00:46  71  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  72  */
16:00:46  73  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
16:00:46  74  );
16:00:46  75  
16:00:46  76  PROCEDURE GET_ITUNES_RECEIPTS (
16:00:46  77  /*
16:00:46  78  Throws exceptions:
16:00:46  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  80  */
16:00:46  81  	out_result_set	    OUT SYS_REFCURSOR,
16:00:46  82  	in_row_number	    IN NUMBER DEFAULT 500
16:00:46  83  );
16:00:46  84  
16:00:46  85  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
16:00:46  86  /*
16:00:46  87  Throws exceptions:
16:00:46  88  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  89  */
16:00:46  90  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
16:00:46  91  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
16:00:46  92  );
16:00:46  93  
16:00:46  94  END PROCS_ITUNES_RECEIPT_V20;
16:00:46  95  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.09
16:00:46 SQL> 
16:00:46 SQL> /*
16:00:46 SQL> CREATE TABLE ITUNES_RECEIPT (
16:00:46 SQL> 	id NUMBER NOT NULL ENABLE,
16:00:46 SQL> 	subscription_id NUMBER NOT NULL ENABLE,
16:00:46 SQL> 	receipt VARCHAR(1024) NOT NULL ENABLE,
16:00:46 SQL> 	status NUMBER,
16:00:46 SQL> 	quantity NUMBER,
16:00:46 SQL> 	product_id VARCHAR(1024),
16:00:46 SQL> 	transaction_id VARCHAR(1024),
16:00:46 SQL> 	purchase_date TIMESTAMP,
16:00:46 SQL> 	original_transaction_id VARCHAR(1024),
16:00:46 SQL> 	original_purchase_date TIMESTAMP,
16:00:46 SQL> 	app_item_id VARCHAR(1024),
16:00:46 SQL> 	version_external_id NUMBER,
16:00:46 SQL> 	bid VARCHAR(1024),
16:00:46 SQL> 	bvrs VARCHAR(255),
16:00:46 SQL> 	expires_date TIMESTAMP,
16:00:46 SQL> 	create_date DATE NOT NULL,
16:00:46 SQL> 	created_by VARCHAR(255) NOT NULL,
16:00:46 SQL> 	update_date DATE NOT NULL,
16:00:46 SQL> 	updated_by VARCHAR(255) NOT NULL,
16:00:46 SQL> 	last_check_date DATE NOT NULL,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_PK" PRIMARY KEY ("ID") USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_FK" FOREIGN KEY ("SUBSCRIPTION_ID") REFERENCES SUBSCRIPTION(ID) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_RECEIPT_UK" UNIQUE(receipt) USING INDEX TABLESPACE "CORE_IDX" ENABLE,
16:00:46 SQL> 	CONSTRAINT "ITUNESRECEIPT_SUBID_UK" UNIQUE(subscription_id) USING INDEX TABLESPACE "CORE_IDX" ENABLE
16:00:46 SQL> )
16:00:46 SQL> TABLESPACE CORE;
16:00:46 SQL> */
16:00:46 SQL> 
16:00:46 SQL> 
16:00:46 SQL> CREATE OR REPLACE PACKAGE "PROCS_ITUNES_RECEIPT_CRU_V20" AS
16:00:46   2  
16:00:46   3  PROCEDURE CREATE_RECEIPT(
16:00:46   4  /*
16:00:46   5  Throws exceptions:
16:00:46   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46   7  */
16:00:46   8  	  out_id	      OUT NUMBER,
16:00:46   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:46  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:46  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:00:46  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:46  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:46  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:46  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:46  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:46  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:46  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:46  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:46  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:00:46  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:00:46  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:46  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
16:00:46  24  );
16:00:46  25  
16:00:46  26  PROCEDURE UPDATE_RECEIPT(
16:00:46  27  /*
16:00:46  28  Throws exceptions:
16:00:46  29  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  30  */
16:00:46  31  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:00:46  32  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:46  33  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:00:46  34  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:46  35  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:46  36  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:46  37  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:46  38  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:46  39  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:46  40  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:46  41  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:46  42  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:00:46  43  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:00:46  44  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:46  45  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:00:46  46  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
16:00:46  47  );
16:00:46  48  
16:00:46  49  PROCEDURE LINK_ITUNES_RECEIPT(
16:00:46  50  /*
16:00:46  51  Throws exceptions:
16:00:46  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  53  */
16:00:46  54  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:00:46  55  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:46  56  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
16:00:46  57  );
16:00:46  58  
16:00:46  59  PROCEDURE MARK_RECEIPT_CHECKED(
16:00:46  60  /*
16:00:46  61  Throws exceptions:
16:00:46  62  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:46  63  */
16:00:46  64  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
16:00:46  65  );
16:00:46  66  
16:00:46  67  END PROCS_ITUNES_RECEIPT_CRU_V20;
16:00:46  68  .
16:00:46 SQL> /

Package created.

Elapsed: 00:00:00.05
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_LICENSE
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE CREATE_LICENSE(
16:00:47   4  /*
16:00:47   5  Throws exceptions:
16:00:47   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47   8  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47   9  */
16:00:47  10  	in_status_id		    IN NUMBER,
16:00:47  11  	in_needs_entitlements	    IN NUMBER,
16:00:47  12  	in_start_date		    IN DATE,
16:00:47  13  	in_end_date		    IN DATE,
16:00:47  14  	in_offer_id		    IN NUMBER,
16:00:47  15  	in_subscription_id	    IN NUMBER,
16:00:47  16  	in_invoice_id		    IN NUMBER,
16:00:47  17  	in_created_by		    IN VARCHAR2,
16:00:47  18  	in_is_extension 	    IN NUMBER,
16:00:47  19  	in_current_offer_index	    IN NUMBER,
16:00:47  20  	in_current_offer_recurr_num IN NUMBER,
16:00:47  21  	out_license_id		    OUT NUMBER
16:00:47  22  );
16:00:47  23  
16:00:47  24  /*********************************************/
16:00:47  25  
16:00:47  26  PROCEDURE UPDATE_LICENSE_STATUS(
16:00:47  27  /*
16:00:47  28  Throws exceptions:
16:00:47  29  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  31  */
16:00:47  32  	  in_license_id     IN NUMBER,
16:00:47  33  	  in_license_status IN NUMBER,
16:00:47  34  	  in_updated_by     IN VARCHAR2,
16:00:47  35  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:47  36  );
16:00:47  37  
16:00:47  38  /*********************************************/
16:00:47  39  
16:00:47  40  PROCEDURE GET_ENDING_LICENSES (
16:00:47  41  	in_hours_number IN NUMBER,
16:00:47  42  	out_result_set OUT SYS_REFCURSOR
16:00:47  43  );
16:00:47  44  
16:00:47  45  /*********************************************/
16:00:47  46  
16:00:47  47  PROCEDURE GET_ENDING_LICENSES_CC (
16:00:47  48  	in_hours_number IN NUMBER,
16:00:47  49  	out_result_set OUT SYS_REFCURSOR,
16:00:47  50  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:47  51  );
16:00:47  52  
16:00:47  53  /**********************************************/
16:00:47  54  
16:00:47  55  PROCEDURE GET_RECURRING_OFFER (
16:00:47  56  	in_license_id  IN NUMBER,
16:00:47  57  	out_result_set OUT SYS_REFCURSOR
16:00:47  58  );
16:00:47  59  
16:00:47  60  /**********************************************/
16:00:47  61  
16:00:47  62  PROCEDURE GET_NEXT_OFFER (
16:00:47  63  	in_license_id  IN NUMBER,
16:00:47  64  	out_result_set OUT SYS_REFCURSOR
16:00:47  65  );
16:00:47  66  
16:00:47  67  /**********************************************/
16:00:47  68  
16:00:47  69  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:00:47  70  	in_license_id IN NUMBER,
16:00:47  71  	out_group_id  OUT NUMBER
16:00:47  72  );
16:00:47  73  
16:00:47  74  /**************************************************/
16:00:47  75  
16:00:47  76  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:00:47  77  	out_result_set OUT SYS_REFCURSOR
16:00:47  78  );
16:00:47  79  
16:00:47  80  /**************************************************/
16:00:47  81  
16:00:47  82  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:00:47  83  	in_license_id	      IN NUMBER,
16:00:47  84  	in_needs_entitlements IN NUMBER,
16:00:47  85  	in_updated_by	      IN VARCHAR2
16:00:47  86  );
16:00:47  87  
16:00:47  88  PROCEDURE GET_ENDED_GC_LICENSES (
16:00:47  89  	out_result_set		OUT SYS_REFCURSOR,
16:00:47  90  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:47  91  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:47  92  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:47  93  );
16:00:47  94  
16:00:47  95  PROCEDURE GET_LICENSE_BY_ID (
16:00:47  96  
16:00:47  97  	in_license_id  IN NUMBER,
16:00:47  98  
16:00:47  99  	out_result_set OUT SYS_REFCURSOR
16:00:47 100  
16:00:47 101  );
16:00:47 102  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
16:00:47 103  	in_subscription_id IN NUMBER,
16:00:47 104  	in_end_date IN DATE,
16:00:47 105  	in_updated_by IN VARCHAR2
16:00:47 106  );
16:00:47 107  
16:00:47 108  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
16:00:47 109  	in_days_before_close	 IN NUMBER,
16:00:47 110  	in_num_licenses_to_fetch IN NUMBER,
16:00:47 111  	out_result_set		 OUT SYS_REFCURSOR
16:00:47 112  );
16:00:47 113  
16:00:47 114  END PROCS_LICENSE_V20;
16:00:47 115  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.06
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_LICENSE_CRU
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_LICENSE_CRU_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE CREATE_LICENSE(
16:00:47   4  	out_license_id		    OUT LICENSE.ID%TYPE,
16:00:47   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
16:00:47   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
16:00:47   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
16:00:47   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
16:00:47   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
16:00:47  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
16:00:47  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
16:00:47  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
16:00:47  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
16:00:47  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
16:00:47  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
16:00:47  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
16:00:47  17  );
16:00:47  18  
16:00:47  19  PROCEDURE UPDATE_LICENSE (
16:00:47  20  	in_license_id		    IN LICENSE.ID%TYPE,
16:00:47  21  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
16:00:47  22  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:00:47  23  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
16:00:47  24  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
16:00:47  25  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
16:00:47  26  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
16:00:47  27  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
16:00:47  28  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
16:00:47  29  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
16:00:47  30  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
16:00:47  31  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
16:00:47  32  );
16:00:47  33  
16:00:47  34  END PROCS_LICENSE_CRU_V20;
16:00:47  35  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_LINE_ITEMS
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE ADD_LINE_ITEMS(
16:00:47   4  /*
16:00:47   5  Throws exceptions:
16:00:47   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47   8  */
16:00:47   9  	in_invoice_id IN NUMBER,
16:00:47  10  	in_offer_id   IN NUMBER,
16:00:47  11  	in_created_by IN VARCHAR2
16:00:47  12  );
16:00:47  13  
16:00:47  14  /****************************************************/
16:00:47  15  
16:00:47  16  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:00:47  17  	in_line_item_id    IN NUMBER,
16:00:47  18  	in_amount	   IN NUMBER,
16:00:47  19  	in_discount_amount IN NUMBER,
16:00:47  20  	in_taxes_amount    IN NUMBER
16:00:47  21  );
16:00:47  22  
16:00:47  23  /****************************************************/
16:00:47  24  
16:00:47  25  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:47  26  /*
16:00:47  27  Throws exceptions:
16:00:47  28  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  29  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  30  */
16:00:47  31  	in_invoice_id  IN NUMBER,
16:00:47  32  	out_result_set OUT SYS_REFCURSOR
16:00:47  33  );
16:00:47  34  
16:00:47  35  /****************************************************/
16:00:47  36  
16:00:47  37  PROCEDURE GET_LINE_ITEM_TAXES (
16:00:47  38  /*
16:00:47  39  Throws exceptions:
16:00:47  40  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  41  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  42  */
16:00:47  43  	in_line_item_id IN  NUMBER,
16:00:47  44  	out_result_set	OUT SYS_REFCURSOR
16:00:47  45  );
16:00:47  46  /****************************************************/
16:00:47  47  
16:00:47  48  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:00:47  49  /*
16:00:47  50  Throws exceptions:
16:00:47  51  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  52  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  53  */
16:00:47  54  	in_line_item_id IN  NUMBER,
16:00:47  55  	out_result_set	OUT SYS_REFCURSOR
16:00:47  56  );
16:00:47  57  
16:00:47  58  /****************************************************/
16:00:47  59  
16:00:47  60  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
16:00:47  61  /*
16:00:47  62  Throws exceptions:
16:00:47  63  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  65  */
16:00:47  66  	in_line_item_id     IN	NUMBER,
16:00:47  67  	out_amount	    OUT NUMBER
16:00:47  68  );
16:00:47  69  
16:00:47  70  /****************************************************/
16:00:47  71  
16:00:47  72  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
16:00:47  73  /*
16:00:47  74  Throws exceptions:
16:00:47  75  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  76  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  77  */
16:00:47  78  	in_line_item_id     IN	NUMBER
16:00:47  79  ) RETURN NUMBER;
16:00:47  80  
16:00:47  81  END PROCS_LINE_ITEMS_V20;
16:00:47  82  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_LINE_ITEMS_CRU
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_LINE_ITEMS_CRU_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE CREATE_LINE_ITEM (
16:00:47   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
16:00:47   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
16:00:47   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
16:00:47   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
16:00:47   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
16:00:47   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
16:00:47  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
16:00:47  11  );
16:00:47  12  
16:00:47  13  PROCEDURE UPDATE_LINE_ITEM (
16:00:47  14  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
16:00:47  15  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
16:00:47  16  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
16:00:47  17  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
16:00:47  18  );
16:00:47  19  
16:00:47  20  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
16:00:47  21  	in_discount_id	IN DISCOUNT.ID%TYPE,
16:00:47  22  	in_line_item_id IN LINE_ITEM.ID%TYPE
16:00:47  23  );
16:00:47  24  
16:00:47  25  END PROCS_LINE_ITEMS_CRU_V20;
16:00:47  26  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.05
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_LOCKING
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_LOCKING_V20" AS
16:00:47   2  
16:00:47   3  /*
16:00:47   4  Removed by Sergey
16:00:47   5  10.12.2010
16:00:47   6  PROCEDURE INITIALIZE_SYSTEM;
16:00:47   7  
16:00:47   8  PROCEDURE INITIALIZE_ACCOUNT (
16:00:47   9  	in_account_id IN NUMBER
16:00:47  10  );
16:00:47  11  
16:00:47  12  PROCEDURE INITIALIZE_GROUP (
16:00:47  13  	in_group_id IN NUMBER
16:00:47  14  );
16:00:47  15  */
16:00:47  16  
16:00:47  17  PROCEDURE LOCK_ACCOUNT (
16:00:47  18  	in_group_id    IN NUMBER,
16:00:47  19  	in_lock_key    IN VARCHAR2,
16:00:47  20  	in_seconds_num IN NUMBER,
16:00:47  21  	in_created_by  IN VARCHAR2,
16:00:47  22  	in_reason      IN VARCHAR2
16:00:47  23  );
16:00:47  24  
16:00:47  25  PROCEDURE RELEASE_LOCK (
16:00:47  26  	in_group_id IN NUMBER,
16:00:47  27  	in_lock_key IN VARCHAR2
16:00:47  28  );
16:00:47  29  
16:00:47  30  END PROCS_LOCKING_V20;
16:00:47  31  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_NOTIFICATION
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_NOTIFICATION_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
16:00:47   4  /*
16:00:47   5  Throws exceptions:
16:00:47   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47   8  */
16:00:47   9  	in_notification_type_name IN VARCHAR2,
16:00:47  10  	out_notification_type_id  OUT NUMBER
16:00:47  11  );
16:00:47  12  
16:00:47  13  PROCEDURE ADD_NOTIFICATION (
16:00:47  14  /*
16:00:47  15  Throws exceptions:
16:00:47  16  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  17  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  18  */
16:00:47  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
16:00:47  20  	in_recipient_group_id	 IN NUMBER,
16:00:47  21  	in_notification_type_id  IN NUMBER,
16:00:47  22  	in_date_to_notify	 IN DATE,
16:00:47  23  	in_email_template_params IN CLOB
16:00:47  24  );
16:00:47  25  
16:00:47  26  PROCEDURE GET_PENDING_NOTIFICATIONS (
16:00:47  27  /*
16:00:47  28  Throws exceptions:
16:00:47  29  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  30  */
16:00:47  31  	out_result_set OUT SYS_REFCURSOR
16:00:47  32  );
16:00:47  33  
16:00:47  34  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
16:00:47  35  /*
16:00:47  36  Throws exceptions:
16:00:47  37  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  38  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  39  */
16:00:47  40  	in_notification_id IN NUMBER
16:00:47  41  );
16:00:47  42  
16:00:47  43  PROCEDURE SET_NOTIFICATION_STATUS (
16:00:47  44  /*
16:00:47  45  Throws exceptions:
16:00:47  46  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  47  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  48  */
16:00:47  49  	in_notification_id	  IN NUMBER,
16:00:47  50  	in_notification_status_id IN NUMBER,
16:00:47  51  	in_error_message	  IN VARCHAR2
16:00:47  52  );
16:00:47  53  
16:00:47  54  PROCEDURE ADD_NOTIFICATION_FAILURE (
16:00:47  55  /*
16:00:47  56  Throws exceptions:
16:00:47  57  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  58  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  59  */
16:00:47  60  	in_notification_id IN NUMBER,
16:00:47  61  	in_error_message   IN VARCHAR2
16:00:47  62  );
16:00:47  63  
16:00:47  64  PROCEDURE LOCK_PENDING_NOTIFICATION (
16:00:47  65  /*
16:00:47  66  Result: 1 if notification locked
16:00:47  67  2 - else
16:00:47  68  */
16:00:47  69  	in_notification_id IN NUMBER,
16:00:47  70  	out_lock_status    OUT NUMBER
16:00:47  71  );
16:00:47  72  
16:00:47  73  PROCEDURE GET_NOTIFICATION_DATA (
16:00:47  74  	in_notification_id IN NUMBER,
16:00:47  75  	out_result_set	   OUT SYS_REFCURSOR
16:00:47  76  );
16:00:47  77  
16:00:47  78  END PROCS_NOTIFICATION_V20;
16:00:47  79  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_OFFER_CHAIN_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
16:00:47   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
16:00:47   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
16:00:47   6  );
16:00:47   7  
16:00:47   8  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
16:00:47   9  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
16:00:47  10  	out_data	       OUT OFFER_CHAIN.ID%TYPE
16:00:47  11  );
16:00:47  12  
16:00:47  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:47  14  	  in_offer_chain_id IN	 NUMBER,
16:00:47  15  	  out_result_set    OUT  SYS_REFCURSOR
16:00:47  16  );
16:00:47  17  
16:00:47  18  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
16:00:47  19  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:47  20  	out_result_set	   OUT SYS_REFCURSOR
16:00:47  21  );
16:00:47  22  
16:00:47  23  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
16:00:47  24  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:47  25  	out_result_set	   OUT SYS_REFCURSOR
16:00:47  26  );
16:00:47  27  
16:00:47  28  PROCEDURE GET_OFFER_CHAINS_OFFERS (
16:00:47  29  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:47  30  	out_result_set	   OUT SYS_REFCURSOR
16:00:47  31  );
16:00:47  32  
16:00:47  33  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
16:00:47  34  	in_product_id  IN  NUMBER,
16:00:47  35  	out_result_set OUT SYS_REFCURSOR
16:00:47  36  );
16:00:47  37  
16:00:47  38  PROCEDURE GET_OFFER_CHAIN_PRICE (
16:00:47  39  	in_offer_chain_id IN NUMBER,
16:00:47  40  	out_price	  OUT NUMBER
16:00:47  41  );
16:00:47  42  
16:00:47  43  PROCEDURE GET_FIRST_OFFER(
16:00:47  44  	in_offer_chain_id IN  NUMBER,
16:00:47  45  	out_offer_id	  OUT NUMBER
16:00:47  46  );
16:00:47  47  
16:00:47  48  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
16:00:47  49  	out_result_set OUT SYS_REFCURSOR
16:00:47  50  );
16:00:47  51  
16:00:47  52  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
16:00:47  53  	in_offer_chain_id IN NUMBER,
16:00:47  54  	out_result_set	  OUT SYS_REFCURSOR
16:00:47  55  );
16:00:47  56  
16:00:47  57  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
16:00:47  58  	in_offer_chain_id	  IN NUMBER,
16:00:47  59  	in_offer_chain_start_date IN DATE
16:00:47  60  ) RETURN DATE;
16:00:47  61  
16:00:47  62  FUNCTION CALCULATE_OFFER_AMOUNT (
16:00:47  63  	in_offer_id IN NUMBER
16:00:47  64  ) RETURN NUMBER;
16:00:47  65  
16:00:47  66  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
16:00:47  67  	in_offer_chain_id IN NUMBER
16:00:47  68  ) RETURN NUMBER;
16:00:47  69  
16:00:47  70  FUNCTION GET_FIRST_OFFER_INDEX (
16:00:47  71  	in_offer_chain_id IN NUMBER
16:00:47  72  ) RETURN NUMBER;
16:00:47  73  
16:00:47  74  FUNCTION GET_NEXT_OFFER_INDEX (
16:00:47  75  	in_offer_chain_id	     IN NUMBER,
16:00:47  76  	in_offer_chain_current_index IN NUMBER
16:00:47  77  ) RETURN NUMBER;
16:00:47  78  
16:00:47  79  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:00:47  80  	in_offer_chain_id	     IN NUMBER,
16:00:47  81  	in_offer_chain_current_index IN NUMBER,
16:00:47  82  	out_next_offer_index	     OUT NUMBER
16:00:47  83  );
16:00:47  84  
16:00:47  85  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:00:47  86  	in_license_id		     IN NUMBER,
16:00:47  87  	in_offer_chain_current_index IN NUMBER,
16:00:47  88  	out_next_offer_index	     OUT NUMBER
16:00:47  89  );
16:00:47  90  
16:00:47  91  FUNCTION IS_OFFER_INDEX_EXISTS (
16:00:47  92  	in_offer_chain_id	   IN NUMBER,
16:00:47  93  	in_offer_chain_offer_index IN NUMBER
16:00:47  94  ) RETURN NUMBER;
16:00:47  95  
16:00:47  96  PROCEDURE GET_OFFER_LENGTH (
16:00:47  97  	in_offer_id IN NUMBER,
16:00:47  98  	out_years   OUT NUMBER,
16:00:47  99  	out_months  OUT NUMBER,
16:00:47 100  	out_days    OUT NUMBER
16:00:47 101  );
16:00:47 102  
16:00:47 103  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
16:00:47 104  	in_offer_id   IN NUMBER,
16:00:47 105  	in_start_date IN DATE DEFAULT SYSDATE,
16:00:47 106  	out_days      OUT NUMBER
16:00:47 107  );
16:00:47 108  
16:00:47 109  PROCEDURE GET_OFFER_PRODUCTS (
16:00:47 110  	in_offer_id    IN NUMBER,
16:00:47 111  	out_result_set OUT SYS_REFCURSOR
16:00:47 112  );
16:00:47 113  
16:00:47 114  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
16:00:47 115  	in_offer_chain_id IN NUMBER,
16:00:47 116  	out_result_set	  OUT SYS_REFCURSOR
16:00:47 117  );
16:00:47 118  
16:00:47 119  FUNCTION CHECK_FOR_SAME_PRODUCTS (
16:00:47 120  	in_offer_chain_1	 IN OFFER_CHAIN.ID%TYPE,
16:00:47 121  	in_offer_chain_2	 IN OFFER_CHAIN.ID%TYPE,
16:00:47 122  	in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:47 123  ) RETURN NUMBER;
16:00:47 124  
16:00:47 125  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
16:00:47 126  	in_offer_chain_id IN NUMBER
16:00:47 127  ) RETURN NUMBER;
16:00:47 128  
16:00:47 129  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
16:00:47 130  	in_offer_chain_id IN NUMBER
16:00:47 131  ) RETURN NUMBER;
16:00:47 132  
16:00:47 133  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
16:00:47 134  	in_offer_chain_id   IN NUMBER,
16:00:47 135  	in_eligibility_name IN VARCHAR2,
16:00:47 136  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 137  );
16:00:47 138  
16:00:47 139  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
16:00:47 140  	in_offer_chain_ids  IN VARCHAR2,
16:00:47 141  	in_eligibility_name IN VARCHAR2,
16:00:47 142  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 143  );
16:00:47 144  
16:00:47 145  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:47 146  	in_offer_chain_id IN NUMBER,
16:00:47 147  	in_meta_data_name IN VARCHAR2,
16:00:47 148  	out_result_set	  OUT SYS_REFCURSOR
16:00:47 149  );
16:00:47 150  
16:00:47 151  PROCEDURE GET_OFFER_CHAINS_META_DATA (
16:00:47 152  	in_offer_chain_ids IN VARCHAR2,
16:00:47 153  	in_meta_data_name  IN VARCHAR2,
16:00:47 154  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 155  );
16:00:47 156  
16:00:47 157  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:00:47 158  	in_offer_id    IN NUMBER,
16:00:47 159  	out_result_set OUT SYS_REFCURSOR
16:00:47 160  );
16:00:47 161  
16:00:47 162  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:47 163  	in_product_offering_id IN NUMBER,
16:00:47 164  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:00:47 165  	out_result_set	       OUT SYS_REFCURSOR
16:00:47 166  );
16:00:47 167  
16:00:47 168  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
16:00:47 169  	in_offer_chain_1 IN NUMBER,
16:00:47 170  	in_offer_chain_2 IN NUMBER,
16:00:47 171  	out_result_set	OUT SYS_REFCURSOR
16:00:47 172  );
16:00:47 173  
16:00:47 174  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:00:47 175  	in_offer_chain_id IN NUMBER,
16:00:47 176  	in_meta_data_name IN VARCHAR2,
16:00:47 177  	out_value	  OUT VARCHAR2
16:00:47 178  );
16:00:47 179  
16:00:47 180  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
16:00:47 181  	in_offer_chain_id   IN NUMBER,
16:00:47 182  	in_eligibility_name IN VARCHAR2,
16:00:47 183  	out_value	    OUT VARCHAR2
16:00:47 184  );
16:00:47 185  
16:00:47 186  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
16:00:47 187  	in_offer_id    IN NUMBER,
16:00:47 188  	out_result_set OUT SYS_REFCURSOR
16:00:47 189  );
16:00:47 190  
16:00:47 191  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
16:00:47 192  	in_meta_data_name  IN VARCHAR2,
16:00:47 193  	in_meta_data_value IN VARCHAR2,
16:00:47 194  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 195  );
16:00:47 196  
16:00:47 197  PROCEDURE GET_ALL_META_DATA (
16:00:47 198  	in_offer_chain_id IN NUMBER,
16:00:47 199  	out_result_set	  OUT SYS_REFCURSOR
16:00:47 200  );
16:00:47 201  
16:00:47 202  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
16:00:47 203  	in_group_id	  IN NUMBER,
16:00:47 204  	in_offer_chain_id IN NUMBER,
16:00:47 205  	out_is_eligible   OUT NUMBER,
16:00:47 206  	out_concurrent_subscription_id OUT NUMBER
16:00:47 207  );
16:00:47 208  
16:00:47 209  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:47 210  	in_offer_chain_id	 IN NUMBER,
16:00:47 211  	in_action_name		 IN VARCHAR2,
16:00:47 212  	out_notification_type_id OUT NUMBER
16:00:47 213  );
16:00:47 214  
16:00:47 215  END PROCS_OFFER_CHAIN_V20;
16:00:47 216  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE 		  "PROCS_POLLING_SYNC"
16:00:47   2  AS
16:00:47   3  
16:00:47   4  ----
16:00:47   5  --------------------------------------------------------------------------------
16:00:47   6  ----
16:00:47   7  	  /* Call the Gather Events on a timer. Pass in the timestamp
16:00:47   8  	      returned from the previous call and store the result for the
16:00:47   9  	      next call.
16:00:47  10  	     This method will identify and create new Sync Events from trigger activity data */
16:00:47  11  	  procedure GATHER_SYNC_EVENTS(in_last_timestamp timestamp, out_new_timestamp out timestamp);
16:00:47  12  ----
16:00:47  13  --------------------------------------------------------------------------------
16:00:47  14  ----
16:00:47  15  	  /* Internal logic call may need to be used to fix poller data */
16:00:47  16  	  procedure GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number);
16:00:47  17  ----
16:00:47  18  --------------------------------------------------------------------------------
16:00:47  19  ----
16:00:47  20  	  /* User request for sync events. Params should be hard-coded in the application
16:00:47  21  	      layer. Unconfirmed transfer sets will be resent up to maximum before being
16:00:47  22  	      skipped. Last read time is logged.
16:00:47  23  	     Params:
16:00:47  24  		  set_maximum: Size of each transfer set
16:00:47  25  		  max_retries: Number of times to resend unconfirmed sets before skipping
16:00:47  26  	     Returns:
16:00:47  27  		  set_id: Transfer set id, duplicated for all entries
16:00:47  28  		  group_id: regi_id value
16:00:47  29  		  event_type: Financial (I)nstrument, (S)ubscription, (G)ift Cert
16:00:47  30  	  */
16:00:47  31  	  procedure GET_TRANSFER_SET(in_set_maximum number, in_max_retries number, out_refcursor out sys_refcursor);
16:00:47  32  ----
16:00:47  33  --------------------------------------------------------------------------------
16:00:47  34  ----
16:00:47  35  	  /* Confirmation from user of receipt of sync transfer set. Will only allow a
16:00:47  36  	      single confirmation per transfer set.
16:00:47  37  	  */
16:00:47  38  	  procedure CONFIRM_TRANSFER_SET(in_set_id core_owner.polling_sync.set_id%type);
16:00:47  39  ----
16:00:47  40  --------------------------------------------------------------------------------
16:00:47  41  ----
16:00:47  42  	  procedure SET_LAST_RUN(ts in timestamp);
16:00:47  43  	  procedure GET_LAST_RUN(ts out timestamp);
16:00:47  44  END PROCS_POLLING_SYNC;
16:00:47  45  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.07
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_PROCESS_RETRY_THROTTLE
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_PROCESS_RETRY_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE LOG_RETRY(
16:00:47   4  	  in_process_name IN VARCHAR2,
16:00:47   5  	  in_generic_id   IN NUMBER,
16:00:47   6  	  in_date	  IN VARCHAR2,
16:00:47   7  	  out_success	   OUT NUMBER
16:00:47   8  );
16:00:47   9  
16:00:47  10  PROCEDURE LOG_RETRY_DATE(
16:00:47  11  	  in_process_name IN VARCHAR2,
16:00:47  12  	  in_generic_id   IN NUMBER,
16:00:47  13  	  in_date	  IN DATE,
16:00:47  14  	  out_success	   OUT NUMBER
16:00:47  15  );
16:00:47  16  
16:00:47  17  PROCEDURE DELETE_RETRY(
16:00:47  18  	  in_process_name IN VARCHAR2,
16:00:47  19  	  in_remove_minutes  IN NUMBER
16:00:47  20  );
16:00:47  21  
16:00:47  22  PROCEDURE GET_SYSDATE (
16:00:47  23  	  out_date OUT VARCHAR2
16:00:47  24  );
16:00:47  25  
16:00:47  26  END PROCS_PROCESS_RETRY_V20;
16:00:47  27  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.03
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_PRODUCT
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_PRODUCT_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE GET_PRODUCTS (
16:00:47   4  /*
16:00:47   5  Throws exceptions:
16:00:47   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47   7  */
16:00:47   8  	in_status_id   IN  NUMBER,
16:00:47   9  	out_result_set OUT SYS_REFCURSOR
16:00:47  10  );
16:00:47  11  
16:00:47  12  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:47  13  /*
16:00:47  14  Throws exceptions:
16:00:47  15  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  16  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  17  */
16:00:47  18  	in_product_offering_id	IN NUMBER,
16:00:47  19  	out_result_set OUT SYS_REFCURSOR
16:00:47  20  );
16:00:47  21  
16:00:47  22  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
16:00:47  23  /*
16:00:47  24  Throws exceptions:
16:00:47  25  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  27  */
16:00:47  28  	in_product_id	    IN NUMBER,
16:00:47  29  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
16:00:47  30  	out_result_set	    OUT SYS_REFCURSOR
16:00:47  31  );
16:00:47  32  
16:00:47  33  PROCEDURE GET_PRODUCT_BY_ID (
16:00:47  34  	in_product_id  IN NUMBER,
16:00:47  35  	out_result_set OUT SYS_REFCURSOR
16:00:47  36  );
16:00:47  37  
16:00:47  38  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:00:47  39  	in_line_item_id IN NUMBER,
16:00:47  40  	out_result_set	OUT SYS_REFCURSOR
16:00:47  41  );
16:00:47  42  
16:00:47  43  PROCEDURE GET_PRD_OFFERING_BY_ID (
16:00:47  44  	in_product_offering_id IN NUMBER,
16:00:47  45  	out_result_set	OUT SYS_REFCURSOR
16:00:47  46  );
16:00:47  47  
16:00:47  48  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
16:00:47  49  	in_product_offering_id IN NUMBER,
16:00:47  50  	out_result_set	       OUT SYS_REFCURSOR
16:00:47  51  );
16:00:47  52  
16:00:47  53  END PROCS_PRODUCT_V20;
16:00:47  54  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_RECONCILIATION_CRU
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_RECONCILIATION_CRU_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
16:00:47   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
16:00:47   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
16:00:47   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
16:00:47   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
16:00:47   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
16:00:47  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
16:00:47  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
16:00:47  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:47  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
16:00:47  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
16:00:47  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
16:00:47  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:47  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:47  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
16:00:47  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
16:00:47  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
16:00:47  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
16:00:47  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
16:00:47  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
16:00:47  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
16:00:47  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
16:00:47  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
16:00:47  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
16:00:47  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
16:00:47  29  );
16:00:47  30  
16:00:47  31  PROCEDURE CREATE_EXT_SOURCE_LOG (
16:00:47  32  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
16:00:47  33  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
16:00:47  34  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
16:00:47  35  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
16:00:47  36  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
16:00:47  37  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:47  38  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:00:47  39  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
16:00:47  40  );
16:00:47  41  
16:00:47  42  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
16:00:47  43  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
16:00:47  44  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
16:00:47  45  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47  46  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
16:00:47  47  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
16:00:47  48  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
16:00:47  49  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
16:00:47  50  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
16:00:47  51  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
16:00:47  52  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
16:00:47  53  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
16:00:47  54  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
16:00:47  55  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
16:00:47  56  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
16:00:47  57  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
16:00:47  58  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
16:00:47  59  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
16:00:47  60  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
16:00:47  61  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
16:00:47  62  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
16:00:47  63  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
16:00:47  64  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
16:00:47  65  );
16:00:47  66  
16:00:47  67  PROCEDURE CREATE_CPT_EXCEPTION (
16:00:47  68  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
16:00:47  69  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
16:00:47  70  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47  71  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
16:00:47  72  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
16:00:47  73  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
16:00:47  74  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
16:00:47  75  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
16:00:47  76  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
16:00:47  77  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
16:00:47  78  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
16:00:47  79  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:47  80  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:47  81  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
16:00:47  82  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:47  83  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
16:00:47  84  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
16:00:47  85  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
16:00:47  86  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
16:00:47  87  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
16:00:47  88  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
16:00:47  89  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:00:47  90  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
16:00:47  91  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:00:47  92  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
16:00:47  93  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
16:00:47  94  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
16:00:47  95  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
16:00:47  96  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
16:00:47  97  );
16:00:47  98  
16:00:47  99  PROCEDURE CREATE_CPT_DEPOSIT (
16:00:47 100  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
16:00:47 101  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
16:00:47 102  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47 103  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
16:00:47 104  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
16:00:47 105  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
16:00:47 106  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
16:00:47 107  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
16:00:47 108  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
16:00:47 109  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
16:00:47 110  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
16:00:47 111  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:47 112  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:47 113  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
16:00:47 114  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:47 115  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
16:00:47 116  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
16:00:47 117  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
16:00:47 118  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
16:00:47 119  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
16:00:47 120  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
16:00:47 121  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:00:47 122  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
16:00:47 123  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:00:47 124  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
16:00:47 125  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
16:00:47 126  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
16:00:47 127  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
16:00:47 128  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
16:00:47 129  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
16:00:47 130  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
16:00:47 131  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
16:00:47 132  );
16:00:47 133  
16:00:47 134  PROCEDURE CREATE_PP_SETTLEMENT (
16:00:47 135  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
16:00:47 136  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
16:00:47 137  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47 138  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
16:00:47 139  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
16:00:47 140  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
16:00:47 141  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
16:00:47 142  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
16:00:47 143  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
16:00:47 144  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
16:00:47 145  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
16:00:47 146  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
16:00:47 147  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
16:00:47 148  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
16:00:47 149  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
16:00:47 150  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
16:00:47 151  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
16:00:47 152  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
16:00:47 153  );
16:00:47 154  
16:00:47 155  PROCEDURE CREATE_PP_DISPUTE (
16:00:47 156  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
16:00:47 157  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
16:00:47 158  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47 159  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
16:00:47 160  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
16:00:47 161  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
16:00:47 162  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
16:00:47 163  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
16:00:47 164  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
16:00:47 165  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
16:00:47 166  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
16:00:47 167  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
16:00:47 168  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
16:00:47 169  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
16:00:47 170  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
16:00:47 171  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
16:00:47 172  );
16:00:47 173  
16:00:47 174  PROCEDURE CREATE_PP_TRANS_DETAIL (
16:00:47 175  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
16:00:47 176  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
16:00:47 177  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:47 178  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
16:00:47 179  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
16:00:47 180  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
16:00:47 181  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
16:00:47 182  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
16:00:47 183  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
16:00:47 184  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
16:00:47 185  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
16:00:47 186  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
16:00:47 187  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
16:00:47 188  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
16:00:47 189  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
16:00:47 190  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
16:00:47 191  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
16:00:47 192  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
16:00:47 193  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
16:00:47 194  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
16:00:47 195  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
16:00:47 196  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
16:00:47 197  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
16:00:47 198  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
16:00:47 199  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
16:00:47 200  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
16:00:47 201  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
16:00:47 202  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
16:00:47 203  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
16:00:47 204  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
16:00:47 205  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
16:00:47 206  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
16:00:47 207  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
16:00:47 208  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
16:00:47 209  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
16:00:47 210  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
16:00:47 211  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
16:00:47 212  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
16:00:47 213  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
16:00:47 214  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
16:00:47 215  );
16:00:47 216  
16:00:47 217  PROCEDURE GET_EXT_SOURCE_LOG (
16:00:47 218  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:47 219  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:00:47 220  	out_result_set		 OUT SYS_REFCURSOR
16:00:47 221  );
16:00:47 222  
16:00:47 223  FUNCTION CHECK_EXT_SOURCE_LOG (
16:00:47 224  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:47 225  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
16:00:47 226  ) RETURN NUMBER;
16:00:47 227  
16:00:47 228  PROCEDURE CREATE_AMEX_CHARGEBACK (
16:00:47 229  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
16:00:47 230  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
16:00:47 231  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
16:00:47 232  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
16:00:47 233  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
16:00:47 234  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
16:00:47 235  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
16:00:47 236  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
16:00:47 237  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
16:00:47 238  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
16:00:47 239  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
16:00:47 240  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
16:00:47 241  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
16:00:47 242  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
16:00:47 243  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
16:00:47 244  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
16:00:47 245  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
16:00:47 246  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
16:00:47 247  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
16:00:47 248  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
16:00:47 249  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
16:00:47 250  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
16:00:47 251  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
16:00:47 252  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
16:00:47 253  );
16:00:47 254  
16:00:47 255  END PROCS_RECONCILIATION_CRU_V20;
16:00:47 256  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.20
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "CORE_OWNER"."PROCS_REPORTING" AS
16:00:47   2  
16:00:47   3  ----
16:00:47   4  --------------------------------------------------------------------------------
16:00:47   5  ----
16:00:47   6  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47   7  ----
16:00:47   8  --------------------------------------------------------------------------------
16:00:47   9  ----
16:00:47  10  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  11  ----
16:00:47  12  --------------------------------------------------------------------------------
16:00:47  13  ----
16:00:47  14  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  15  ----
16:00:47  16  --------------------------------------------------------------------------------
16:00:47  17  ----
16:00:47  18  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  19  ----
16:00:47  20  --------------------------------------------------------------------------------
16:00:47  21  ----
16:00:47  22  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  23  ----
16:00:47  24  --------------------------------------------------------------------------------
16:00:47  25  ----
16:00:47  26  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  27  ----
16:00:47  28  --------------------------------------------------------------------------------
16:00:47  29  ----
16:00:47  30  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  31  ----
16:00:47  32  --------------------------------------------------------------------------------
16:00:47  33  ----
16:00:47  34  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  35  ----
16:00:47  36  --------------------------------------------------------------------------------
16:00:47  37  ----
16:00:47  38  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  39  ----
16:00:47  40  --------------------------------------------------------------------------------
16:00:47  41  ----
16:00:47  42  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  43  ----
16:00:47  44  --------------------------------------------------------------------------------
16:00:47  45  ----
16:00:47  46  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  47  ----
16:00:47  48  --------------------------------------------------------------------------------
16:00:47  49  ----
16:00:47  50  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  51  ----
16:00:47  52  --------------------------------------------------------------------------------
16:00:47  53  ----
16:00:47  54  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  55  ----
16:00:47  56  --------------------------------------------------------------------------------
16:00:47  57  ----
16:00:47  58  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  59  ----
16:00:47  60  --------------------------------------------------------------------------------
16:00:47  61  ----
16:00:47  62  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  63  ----
16:00:47  64  --------------------------------------------------------------------------------
16:00:47  65  ----
16:00:47  66  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  67  ----
16:00:47  68  --------------------------------------------------------------------------------
16:00:47  69  ----
16:00:47  70  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  71  ----
16:00:47  72  --------------------------------------------------------------------------------
16:00:47  73  ----
16:00:47  74  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  75  ----
16:00:47  76  --------------------------------------------------------------------------------
16:00:47  77  ----
16:00:47  78  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  79  ----
16:00:47  80  --------------------------------------------------------------------------------
16:00:47  81  ----
16:00:47  82  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  83  ----
16:00:47  84  --------------------------------------------------------------------------------
16:00:47  85  ----
16:00:47  86  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  87  ----
16:00:47  88  --------------------------------------------------------------------------------
16:00:47  89  ----
16:00:47  90  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  91  ----
16:00:47  92  --------------------------------------------------------------------------------
16:00:47  93  ----
16:00:47  94  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  95  ----
16:00:47  96  --------------------------------------------------------------------------------
16:00:47  97  ----
16:00:47  98  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47  99  ----
16:00:47 100  --------------------------------------------------------------------------------
16:00:47 101  ----
16:00:47 102  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 103  ----
16:00:47 104  --------------------------------------------------------------------------------
16:00:47 105  ----
16:00:47 106  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 107  ----
16:00:47 108  --------------------------------------------------------------------------------
16:00:47 109  ----
16:00:47 110  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 111  ----
16:00:47 112  --------------------------------------------------------------------------------
16:00:47 113  ----
16:00:47 114  /**/
16:00:47 115  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 116  ----
16:00:47 117  --------------------------------------------------------------------------------
16:00:47 118  ----
16:00:47 119  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 120  ----
16:00:47 121  --------------------------------------------------------------------------------
16:00:47 122  ----
16:00:47 123  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 124  ----
16:00:47 125  --------------------------------------------------------------------------------
16:00:47 126  ----
16:00:47 127  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 128  ----
16:00:47 129  --------------------------------------------------------------------------------
16:00:47 130  ----
16:00:47 131  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 132  ----
16:00:47 133  --------------------------------------------------------------------------------
16:00:47 134  ----
16:00:47 135  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 136  ----
16:00:47 137  --------------------------------------------------------------------------------
16:00:47 138  ----
16:00:47 139  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 140  ----
16:00:47 141  --------------------------------------------------------------------------------
16:00:47 142  ----
16:00:47 143  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 144  ----
16:00:47 145  --------------------------------------------------------------------------------
16:00:47 146  ----
16:00:47 147  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 148  ----
16:00:47 149  --------------------------------------------------------------------------------
16:00:47 150  ----
16:00:47 151  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 152  ----
16:00:47 153  --------------------------------------------------------------------------------
16:00:47 154  ----
16:00:47 155  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor);
16:00:47 156  ----
16:00:47 157  --------------------------------------------------------------------------------
16:00:47 158  ----
16:00:47 159  /**/
16:00:47 160  END PROCS_REPORTING;
16:00:47 161  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.03
16:00:47 SQL> 
16:00:47 SQL> prompt Compiling Package PROCS_REPORTING_1A
Compiling Package PROCS_REPORTING_1A
16:00:47 SQL> 
16:00:47 SQL> whenever sqlerror exit failure
16:00:47 SQL> 
16:00:47 SQL> create or replace PACKAGE 	     "PROCS_REPORTING_1A" AS
16:00:47   2  
16:00:47   3  ----
16:00:47   4  --------------------------------------------------------------------------------
16:00:47   5  ----
16:00:47   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
16:00:47   7  	      return line_item.amount%type;
16:00:47   8  ----
16:00:47   9  --------------------------------------------------------------------------------
16:00:47  10  ----
16:00:47  11  	  function getRefundAmount(in_line_item_id line_item.id%type)
16:00:47  12  	      return line_item.amount%type;
16:00:47  13  ----
16:00:47  14  --------------------------------------------------------------------------------
16:00:47  15  ----
16:00:47  16  	  PROCEDURE EXTRACT_LINE_ITEMS(
16:00:47  17  	      in_lower_date_bound DATE,
16:00:47  18  	      in_upper_date_bound DATE,
16:00:47  19  	      out_lic_cur OUT sys_refcursor
16:00:47  20  	  );
16:00:47  21  ----
16:00:47  22  --------------------------------------------------------------------------------
16:00:47  23  ----
16:00:47  24  END PROCS_REPORTING_1A;
16:00:47  25  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.02
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_REPORTS
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_REPORTS_V5" AS
16:00:47   2  
16:00:47   3  FUNCTION GET_PRODUCT_NAMES(
16:00:47   4  	in_offer_id IN NUMBER
16:00:47   5  ) RETURN VARCHAR2;
16:00:47   6  
16:00:47   7  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
16:00:47   8  	in_start_date  IN DATE,
16:00:47   9  	in_end_date    IN DATE,
16:00:47  10  	out_result_set OUT SYS_REFCURSOR
16:00:47  11  );
16:00:47  12  
16:00:47  13  PROCEDURE GET_FLASH_REPORT_PURCHASES (
16:00:47  14  	in_offer_id	       IN NUMBER,
16:00:47  15  	in_start_date	       IN DATE,
16:00:47  16  	in_end_date	       IN DATE,
16:00:47  17  	out_new_purchasers_num OUT NUMBER,
16:00:47  18  	out_renewals_num       OUT NUMBER,
16:00:47  19  	out_product_names      OUT VARCHAR2,
16:00:47  20  	out_total_dollar_value OUT NUMBER,
16:00:47  21  	out_unique_purchasers  OUT NUMBER
16:00:47  22  );
16:00:47  23  
16:00:47  24  /*
16:00:47  25  FUNCTIONS FOR THE FLASH REPORT
16:00:47  26  */
16:00:47  27  
16:00:47  28  FUNCTION FLR_NEW_PURCHASERS_NUM (
16:00:47  29  	in_offer_id	       IN NUMBER,
16:00:47  30  	in_start_date	       IN DATE,
16:00:47  31  	in_end_date	       IN DATE
16:00:47  32  ) RETURN NUMBER;
16:00:47  33  
16:00:47  34  FUNCTION FLR_RENEWALS_NUM (
16:00:47  35  	in_offer_id	       IN NUMBER,
16:00:47  36  	in_start_date	       IN DATE,
16:00:47  37  	in_end_date	       IN DATE
16:00:47  38  ) RETURN NUMBER;
16:00:47  39  
16:00:47  40  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
16:00:47  41  	in_offer_id	       IN NUMBER,
16:00:47  42  	in_start_date	       IN DATE,
16:00:47  43  	in_end_date	       IN DATE
16:00:47  44  ) RETURN NUMBER;
16:00:47  45  
16:00:47  46  FUNCTION FLR_UNIQUE_PURCHASERS (
16:00:47  47  	in_offer_id	       IN NUMBER,
16:00:47  48  	in_start_date	       IN DATE,
16:00:47  49  	in_end_date	       IN DATE
16:00:47  50  ) RETURN NUMBER;
16:00:47  51  
16:00:47  52  END PROCS_REPORTS_V5;
16:00:47  53  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.06
16:00:47 SQL> 
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> -- DDL for package PROCS_SUBSCRIPTION
16:00:47 SQL> --------------------------------------------------------------------------------
16:00:47 SQL> 
16:00:47 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_V20" AS
16:00:47   2  
16:00:47   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
16:00:47   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
16:00:47   5  	in_updater	     IN VARCHAR2,
16:00:47   6  	in_duration_in_hours IN NUMBER
16:00:47   7  );
16:00:47   8  
16:00:47   9  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
16:00:47  10  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
16:00:47  11  	in_updater    IN VARCHAR2
16:00:47  12  );
16:00:47  13  
16:00:47  14  PROCEDURE START_SUBSCRIPTION_CREATION (
16:00:47  15  	in_group_id	      IN NUMBER,
16:00:47  16  	in_created_by	      IN VARCHAR2,
16:00:47  17  	in_offer_chain_id     IN NUMBER,
16:00:47  18  	in_instrument_type_id IN NUMBER,
16:00:47  19  	in_instrument_id      IN NUMBER,
16:00:47  20  	in_agent_id	      IN NUMBER,
16:00:47  21  	in_note 	      IN VARCHAR2,
16:00:47  22  	out_subscription_id   OUT NUMBER,
16:00:47  23  	out_invoice_id	      OUT NUMBER,
16:00:47  24  	out_new_license_id    OUT NUMBER,
16:00:47  25  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
16:00:47  26  );
16:00:47  27  
16:00:47  28  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
16:00:47  29  	in_subscription_id    IN NUMBER,
16:00:47  30  	in_invoice_id	      IN NUMBER,
16:00:47  31  	in_instrument_type_id IN NUMBER,
16:00:47  32  	in_instrument_id      IN NUMBER,
16:00:47  33  	in_created_by	      IN VARCHAR2
16:00:47  34  );
16:00:47  35  
16:00:47  36  PROCEDURE SUSPEND_SUBSCRIPTION(
16:00:47  37  /*
16:00:47  38  Throws exceptions:
16:00:47  39  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47  40  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47  41  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  42  */
16:00:47  43  	  in_subs_id	IN NUMBER ,
16:00:47  44  	  in_updated_by IN VARCHAR2
16:00:47  45  );
16:00:47  46  
16:00:47  47  PROCEDURE REACTIVATE_SUBSCRIPTION (
16:00:47  48  	in_subscription_id IN  NUMBER,
16:00:47  49  	in_updated_by	   IN  VARCHAR2
16:00:47  50  );
16:00:47  51  
16:00:47  52  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:47  53  /*
16:00:47  54  Throws exceptions:
16:00:47  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  56  */
16:00:47  57  	  in_subscription_id IN  NUMBER,
16:00:47  58  	  out_result_set      OUT SYS_REFCURSOR
16:00:47  59  );
16:00:47  60  
16:00:47  61  PROCEDURE GET_SUBSCRIPTION_INVOICES (
16:00:47  62  /*
16:00:47  63  Throws exceptions:
16:00:47  64  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:47  65  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  66  */
16:00:47  67  	in_subscription_id  IN	NUMBER,
16:00:47  68  	out_result_set	    OUT SYS_REFCURSOR
16:00:47  69  );
16:00:47  70  
16:00:47  71  PROCEDURE GET_SUBSCRIPTION_NOTES (
16:00:47  72  /*
16:00:47  73  Throws exceptions:
16:00:47  74  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  75  */
16:00:47  76  	in_subscription_id  IN	NUMBER,
16:00:47  77  	out_result_set	    OUT SYS_REFCURSOR
16:00:47  78  );
16:00:47  79  
16:00:47  80  PROCEDURE ANNOTATE_SUBSCRIPTION (
16:00:47  81  /*
16:00:47  82  Throws exceptions:
16:00:47  83  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:47  84  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47  85  */
16:00:47  86  	in_subscription_id IN  NUMBER,
16:00:47  87  	in_agent_id	   IN  NUMBER,
16:00:47  88  	in_note 	   IN  VARCHAR2,
16:00:47  89  	in_created_by	   IN  VARCHAR2
16:00:47  90  );
16:00:47  91  
16:00:47  92  PROCEDURE GET_CANCEL_REASONS (
16:00:47  93  	out_result_set OUT    SYS_REFCURSOR
16:00:47  94  );
16:00:47  95  
16:00:47  96  FUNCTION GET_RENEWAL_DATE (
16:00:47  97  /*
16:00:47  98  Throws exceptions:
16:00:47  99  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 100  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 101  */
16:00:47 102  	in_subscription_id in NUMBER
16:00:47 103  ) RETURN DATE;
16:00:47 104  
16:00:47 105  FUNCTION GET_RECENT_CHARGE (
16:00:47 106  /*
16:00:47 107  Throws exceptions:
16:00:47 108  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 109  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 110  */
16:00:47 111  	in_subscription_id IN NUMBER
16:00:47 112  ) RETURN NUMBER;
16:00:47 113  
16:00:47 114  FUNCTION GET_BILLING_CYCLE (
16:00:47 115  /*
16:00:47 116  Throws exceptions:
16:00:47 117  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 118  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 119  */
16:00:47 120  	in_subscription_id IN NUMBER
16:00:47 121  ) RETURN VARCHAR2;
16:00:47 122  
16:00:47 123  PROCEDURE REFUND_SUBSCRIPTION (
16:00:47 124  /*
16:00:47 125  Throws exceptions:
16:00:47 126  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 127  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 128  */
16:00:47 129  	in_subscription_id IN NUMBER,
16:00:47 130  	in_invoice_id	   IN NUMBER,
16:00:47 131  	in_refund_amount   IN NUMBER,
16:00:47 132  	in_note 	   IN VARCHAR2,
16:00:47 133  	in_created_by	   IN VARCHAR2,
16:00:47 134  	out_charge_id	   OUT NUMBER
16:00:47 135  );
16:00:47 136  
16:00:47 137  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
16:00:47 138  /*
16:00:47 139  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 140  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47 141  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 142  */
16:00:47 143  	in_subscription_id	IN NUMBER,
16:00:47 144  	in_effective_start_date IN DATE,
16:00:47 145  	in_effective_end_date	IN DATE,
16:00:47 146  	in_note 		IN VARCHAR2,
16:00:47 147  	in_updated_by		IN VARCHAR2
16:00:47 148  );
16:00:47 149  
16:00:47 150  FUNCTION CALC_SUBSCRIPTION_END_DATE (
16:00:47 151  /*
16:00:47 152  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 153  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47 154  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 155  Returns:
16:00:47 156  NULL if it is impossible to calculate end date (for example,
16:00:47 157  	offer chain includes offer with infinity recurrences number)
16:00:47 158  DATE else
16:00:47 159  */
16:00:47 160  	in_subscription_id IN NUMBER
16:00:47 161  ) RETURN DATE;
16:00:47 162  
16:00:47 163  PROCEDURE HAS_FUTURE_LICENSE (
16:00:47 164  /*
16:00:47 165  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 166  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 167  */
16:00:47 168  	in_license_id IN  NUMBER,
16:00:47 169  	out_result    OUT NUMBER
16:00:47 170  );
16:00:47 171  
16:00:47 172  PROCEDURE CLOSE_SUBSCRIPTION (
16:00:47 173  	in_subscription_id IN NUMBER,
16:00:47 174  	in_updated_by	   IN VARCHAR2
16:00:47 175  );
16:00:47 176  
16:00:47 177  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
16:00:47 178  	in_subscription_id IN NUMBER,
16:00:47 179  	out_group_id	   OUT NUMBER
16:00:47 180  );
16:00:47 181  
16:00:47 182  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
16:00:47 183  /*
16:00:47 184  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 185  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 186  */
16:00:47 187  	in_subscription_id IN NUMBER,
16:00:47 188  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 189  );
16:00:47 190  
16:00:47 191  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
16:00:47 192  /*
16:00:47 193  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 194  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 195  */
16:00:47 196  	in_subscription_id	  IN SUBSCRIPTION.ID%TYPE,
16:00:47 197  	in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:00:47 198  	in_updated_by		  IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:47 199  );
16:00:47 200  
16:00:47 201  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:00:47 202  /*
16:00:47 203  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 204  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 205  */
16:00:47 206  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:00:47 207  	in_subscription_id IN NUMBER,
16:00:47 208  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 209  );
16:00:47 210  
16:00:47 211  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:00:47 212  /*
16:00:47 213  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 214  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 215  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47 216  */
16:00:47 217  	in_invoice_id	     IN NUMBER,
16:00:47 218  	in_updated_by	     IN VARCHAR2,
16:00:47 219  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:47 220  );
16:00:47 221  
16:00:47 222  PROCEDURE FINALIZE_CANCELATION (
16:00:47 223  /*
16:00:47 224  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 225  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 226  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47 227  */
16:00:47 228  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:00:47 229  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:00:47 230  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:47 231  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:47 232  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:47 233  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:47 234  	in_subscription_id    IN NUMBER,
16:00:47 235  	in_cancelation_reason IN VARCHAR2,
16:00:47 236  	in_cancelation_date   IN DATE,
16:00:47 237  	in_note 	      IN VARCHAR2,
16:00:47 238  	in_agent_id	      IN NUMBER,
16:00:47 239  	in_updated_by	      IN VARCHAR2
16:00:47 240  );
16:00:47 241  
16:00:47 242  PROCEDURE FINALIZE_FALSE_START (
16:00:47 243  /*
16:00:47 244  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 245  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 246  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:47 247  */
16:00:47 248  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:00:47 249  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:47 250  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:47 251  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:47 252  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:47 253  	in_subscription_id    IN NUMBER,
16:00:47 254  	in_cancelation_date   IN DATE,
16:00:47 255  	in_note 	      IN VARCHAR2,
16:00:47 256  	in_agent_id	      IN NUMBER,
16:00:47 257  	in_updated_by	      IN VARCHAR2
16:00:47 258  );
16:00:47 259  
16:00:47 260  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
16:00:47 261  	in_subscription_id IN NUMBER
16:00:47 262  ) RETURN NUMBER;
16:00:47 263  
16:00:47 264  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:00:47 265  /*
16:00:47 266  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 267  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 268  */
16:00:47 269  	in_subscription_id IN NUMBER,
16:00:47 270  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 271  );
16:00:47 272  
16:00:47 273  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
16:00:47 274  /*
16:00:47 275  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 276  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 277  */
16:00:47 278  	in_subscription_id IN NUMBER,
16:00:47 279  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 280  );
16:00:47 281  
16:00:47 282  PROCEDURE GET_SUBSCR_LIC_OFFER (
16:00:47 283  /*
16:00:47 284  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 285  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 286  */
16:00:47 287  	in_subscription_id IN NUMBER,
16:00:47 288  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 289  );
16:00:47 290  
16:00:47 291  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
16:00:47 292  /*
16:00:47 293  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 294  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 295  */
16:00:47 296  	in_subscription_id IN NUMBER,
16:00:47 297  	out_result	   OUT NUMBER
16:00:47 298  );
16:00:47 299  
16:00:47 300  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
16:00:47 301  /*
16:00:47 302  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 303  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 304  */
16:00:47 305  	in_group_id	   IN NUMBER,
16:00:47 306  	in_offer_chain_id  IN NUMBER,
16:00:47 307  	out_result	   out number
16:00:47 308  );
16:00:47 309  
16:00:47 310  PROCEDURE GET_EXISTING_SUBSCR_IDS (
16:00:47 311  /*
16:00:47 312  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 313  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 314  */
16:00:47 315  	in_group_id	   IN NUMBER,
16:00:47 316  	in_offer_chain_id  IN NUMBER,
16:00:47 317  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 318  );
16:00:47 319  
16:00:47 320  PROCEDURE ADD_META_DATA (
16:00:47 321  /*
16:00:47 322  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:47 323  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 324  */
16:00:47 325  	in_subscription_id IN NUMBER,
16:00:47 326  	in_name 	   IN VARCHAR2,
16:00:47 327  	in_value	   IN VARCHAR2,
16:00:47 328  	in_created_by	   IN VARCHAR2
16:00:47 329  );
16:00:47 330  
16:00:47 331  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:00:47 332  /*
16:00:47 333  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
16:00:47 334  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 335  */
16:00:47 336  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:00:47 337  	out_result_set	     OUT SYS_REFCURSOR
16:00:47 338  );
16:00:47 339  
16:00:47 340  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
16:00:47 341  /*
16:00:47 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 343  */
16:00:47 344  	in_order_id	   IN TRANSACTION.ORDER_ID%TYPE,
16:00:47 345  	out_result_set	   OUT SYS_REFCURSOR
16:00:47 346  );
16:00:47 347  
16:00:47 348  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
16:00:47 349   (
16:00:47 350  /*
16:00:47 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:47 352  */
16:00:47 353  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:47 354  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 355  );
16:00:47 356  
16:00:47 357  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
16:00:47 358  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:00:47 359  ) RETURN NUMBER;
16:00:47 360  
16:00:47 361  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
16:00:47 362  	in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:00:47 363  ) RETURN VARCHAR2;
16:00:47 364  
16:00:47 365  
16:00:47 366  
16:00:47 367  PROCEDURE GET_ACTIVE_MEU_SUBS (
16:00:47 368  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 369  );
16:00:47 370  
16:00:47 371  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
16:00:47 372  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:47 373  	out_offer_id	    OUT LICENSE.ID%TYPE
16:00:47 374  );
16:00:47 375  
16:00:47 376  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
16:00:47 377  	in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:47 378  	out_license_id	    OUT LICENSE.ID%TYPE
16:00:47 379  );
16:00:47 380  
16:00:47 381  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:00:47 382  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 383  );
16:00:47 384  
16:00:47 385  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:00:47 386  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 387  );
16:00:47 388  
16:00:47 389  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
16:00:47 390  	out_result_set	    OUT SYS_REFCURSOR
16:00:47 391  );
16:00:47 392  
16:00:47 393  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
16:00:47 394  	in_max_days_until_close IN NUMBER,
16:00:47 395  	in_num_subs_to_fetch	IN NUMBER,
16:00:47 396  	out_result_set		OUT SYS_REFCURSOR
16:00:47 397  );
16:00:47 398  
16:00:47 399  
16:00:47 400  END PROCS_SUBSCRIPTION_V20;
16:00:47 401  .
16:00:47 SQL> /

Package created.

Elapsed: 00:00:00.17
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_SUBSCRIPTION_CRU
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_SUBSCRIPTION_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_SUBSCRIPTION(
16:00:48   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
16:00:48   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:48   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
16:00:48   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
16:00:48   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
16:00:48  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:00:48  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:00:48  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:00:48  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:00:48  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
16:00:48  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:00:48  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:00:48  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:00:48  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:00:48  19  );
16:00:48  20  
16:00:48  21  PROCEDURE UPDATE_SUBSCRIPTION(
16:00:48  22  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
16:00:48  23  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:48  24  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
16:00:48  25  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:00:48  26  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:00:48  27  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:00:48  28  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE DEFAULT NULL,
16:00:48  29  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:48  30  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:00:48  31  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
16:00:48  32  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:00:48  33  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:00:48  34  );
16:00:48  35  
16:00:48  36  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
16:00:48  37  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
16:00:48  38  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:48  39  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
16:00:48  40  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:48  41  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
16:00:48  42  );
16:00:48  43  
16:00:48  44  END PROCS_SUBSCRIPTION_CRU_V20;
16:00:48  45  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_SYSTEM
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_SYSTEM_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE INCREMENT_VERSION;
16:00:48   4  
16:00:48   5  PROCEDURE CHECK_VERSION(
16:00:48   6  	  in_vers    IN NUMBER,
16:00:48   7  	  out_result OUT NUMBER
16:00:48   8  );
16:00:48   9  
16:00:48  10  END PROCS_SYSTEM_V20;
16:00:48  11  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_TAXES
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE ADD_TAX (
16:00:48   4  	in_tax_type_id		 IN NUMBER,
16:00:48   5  	in_calculated_amount	 IN NUMBER,
16:00:48   6  	in_created_by		 IN VARCHAR2,
16:00:48   7  	in_line_item_id 	 IN NUMBER,
16:00:48   8  	in_effective_rate	 IN VARCHAR2,
16:00:48   9  	in_taxable_amount	 IN NUMBER,
16:00:48  10  	in_tax_rule_id		 IN NUMBER,
16:00:48  11  	in_jurisdiction_level_id IN NUMBER,
16:00:48  12  	in_jurisdiction_name	 IN VARCHAR2,
16:00:48  13  	in_jurisdiction_id	 IN VARCHAR2,
16:00:48  14  	in_ext_tax_type 	 IN VARCHAR2,
16:00:48  15  	in_ext_result		 IN VARCHAR2,
16:00:48  16  	in_imposition_type	 IN VARCHAR2,
16:00:48  17  	in_imposition		 IN VARCHAR2
16:00:48  18  );
16:00:48  19  
16:00:48  20  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
16:00:48  21  	in_country_code IN CHAR,
16:00:48  22  	in_check_date IN DATE,
16:00:48  23  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V20.FALSE
16:00:48  24  );
16:00:48  25  
16:00:48  26  PROCEDURE GET_TAX_CATEGORY (
16:00:48  27  	in_tax_category_id IN NUMBER,
16:00:48  28  	out_result_set	   OUT SYS_REFCURSOR
16:00:48  29  );
16:00:48  30  
16:00:48  31  END PROCS_TAXES_V20;
16:00:48  32  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.08
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_TAXES_CRU
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_TAXES_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_TAX (
16:00:48   4  	inout_tax_id		 IN OUT NUMBER,
16:00:48   5  	in_tax_type_id		 IN NUMBER,
16:00:48   6  	in_calculated_amount	 IN NUMBER,
16:00:48   7  	in_created_by		 IN VARCHAR2,
16:00:48   8  	in_line_item_id 	 IN NUMBER,
16:00:48   9  	in_effective_rate	 IN VARCHAR2,
16:00:48  10  	in_taxable_amount	 IN NUMBER,
16:00:48  11  	in_tax_rule_id		 IN NUMBER,
16:00:48  12  	in_jurisdiction_level_id IN NUMBER,
16:00:48  13  	in_jurisdiction_name	 IN VARCHAR2,
16:00:48  14  	in_jurisdiction_id	 IN VARCHAR2,
16:00:48  15  	in_ext_tax_type 	 IN VARCHAR2,
16:00:48  16  	in_ext_result		 IN VARCHAR2,
16:00:48  17  	in_imposition_type	 IN VARCHAR2,
16:00:48  18  	in_imposition		 IN VARCHAR2
16:00:48  19  );
16:00:48  20  
16:00:48  21  END PROCS_TAXES_CRU_V20;
16:00:48  22  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.03
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_TEST
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_TEST_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE TEST_CLEAR_ALL;
16:00:48   4  PROCEDURE TEST_CLEAR_PRODUCTS;
16:00:48   5  
16:00:48   6  /********************************************/
16:00:48   7  
16:00:48   8  PROCEDURE TEST_GET_ACCOUNT (
16:00:48   9  	in_group_id	IN NUMBER,
16:00:48  10  	out_result_set	OUT SYS_REFCURSOR
16:00:48  11  );
16:00:48  12  
16:00:48  13  /********************************************/
16:00:48  14  
16:00:48  15  PROCEDURE TEST_GET_SUBSCRIPTION (
16:00:48  16  	in_subscription_id IN NUMBER,
16:00:48  17  	out_result_set	   OUT SYS_REFCURSOR
16:00:48  18  );
16:00:48  19  
16:00:48  20  /*********************************************/
16:00:48  21  
16:00:48  22  PROCEDURE TEST_DELETE_INVOICE (
16:00:48  23  	in_invoice_id IN NUMBER
16:00:48  24  );
16:00:48  25  
16:00:48  26  PROCEDURE TEST_DELETE_USER_ACCOUNT (
16:00:48  27  	in_group_id IN NUMBER
16:00:48  28  );
16:00:48  29  
16:00:48  30  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
16:00:48  31  	in_start_group_id IN NUMBER,
16:00:48  32  	in_end_group_id   IN NUMBER
16:00:48  33  );
16:00:48  34  
16:00:48  35  /**********************************************/
16:00:48  36  
16:00:48  37  FUNCTION TEST_IS_INVOICE_EXISTS(
16:00:48  38  /*
16:00:48  39  1 - exists
16:00:48  40  0 - not exists
16:00:48  41  */
16:00:48  42  	in_invoice_id IN NUMBER
16:00:48  43  ) RETURN NUMBER;
16:00:48  44  
16:00:48  45  PROCEDURE TEST_GET_INVOICE_INFO (
16:00:48  46  	in_invoice_id  IN NUMBER,
16:00:48  47  	out_result_set OUT SYS_REFCURSOR
16:00:48  48  );
16:00:48  49  
16:00:48  50  /******************************************************************************/
16:00:48  51  
16:00:48  52  PROCEDURE TEST_DELETE_OFFER_CHAIN(
16:00:48  53  	in_offer_chain_id in number
16:00:48  54  );
16:00:48  55  
16:00:48  56  END PROCS_TEST_V20;
16:00:48  57  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.04
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_TRANSACTION
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_TRANSACTION (
16:00:48   4  /*
16:00:48   5  Throws exceptions:
16:00:48   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48   8  */
16:00:48   9  	in_transaction_id	  IN NUMBER,
16:00:48  10  	in_status_id		  IN NUMBER,
16:00:48  11  	in_amount		  IN NUMBER,
16:00:48  12  	in_created_by		  IN VARCHAR2,
16:00:48  13  	in_order_id		  IN VARCHAR2,
16:00:48  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
16:00:48  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
16:00:48  16  	out_transaction_id	  OUT NUMBER
16:00:48  17  );
16:00:48  18  
16:00:48  19  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:00:48  20  /*
16:00:48  21  Throws exceptions:
16:00:48  22  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  23  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  24  */
16:00:48  25  	in_transaction_id	   IN NUMBER,
16:00:48  26  	in_trans_attempt_status    IN NUMBER,
16:00:48  27  	in_external_status_code    IN VARCHAR2,
16:00:48  28  	in_external_status_message IN VARCHAR2,
16:00:48  29  	in_created_by		   IN VARCHAR2,
16:00:48  30  	in_ext_transaction_id	   IN VARCHAR2,
16:00:48  31  	out_transaction_attempt_id OUT NUMBER
16:00:48  32  );
16:00:48  33  
16:00:48  34  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:00:48  35  /*
16:00:48  36  Throws exceptions:
16:00:48  37  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  39  */
16:00:48  40  	in_transaction_id	 IN NUMBER,
16:00:48  41  	in_updated_by		 IN VARCHAR2,
16:00:48  42  	in_transaction_status_id IN NUMBER
16:00:48  43  );
16:00:48  44  
16:00:48  45  PROCEDURE UPDATE_TRANSACTION_SETTLED (
16:00:48  46  /*
16:00:48  47  Throws exceptions:
16:00:48  48  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  49  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  50  */
16:00:48  51  	in_transaction_id	 IN NUMBER,
16:00:48  52  	in_updated_by		 IN VARCHAR2,
16:00:48  53  	in_is_settled		 IN NUMBER
16:00:48  54  );
16:00:48  55  
16:00:48  56  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:00:48  57  /*
16:00:48  58  Throws exceptions:
16:00:48  59  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  60  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  61  */
16:00:48  62  	in_transaction_attempt_id IN NUMBER,
16:00:48  63  	in_updated_by		  IN VARCHAR2
16:00:48  64  );
16:00:48  65  
16:00:48  66  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:00:48  67  /*
16:00:48  68  Throws exceptions:
16:00:48  69  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  70  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  71  */
16:00:48  72  	in_transaction_attempt_id     IN NUMBER,
16:00:48  73  	in_transaction_attempt_status IN NUMBER
16:00:48  74  );
16:00:48  75  
16:00:48  76  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:00:48  77  /*
16:00:48  78  Throws exceptions:
16:00:48  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  80  */
16:00:48  81  	in_transaction_id	      IN NUMBER,
16:00:48  82  	in_transaction_attempt_status IN NUMBER,
16:00:48  83  	out_result_set		      OUT SYS_REFCURSOR
16:00:48  84  );
16:00:48  85  
16:00:48  86  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:00:48  87  /*
16:00:48  88  Throws exceptions:
16:00:48  89  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  90  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  91  */
16:00:48  92  	in_transaction_attempt_id IN NUMBER,
16:00:48  93  	in_ext_status_code	  IN VARCHAR2,
16:00:48  94  	in_ext_status_message	  IN VARCHAR2,
16:00:48  95  	in_ext_transaction_id	  IN VARCHAR2
16:00:48  96  );
16:00:48  97  
16:00:48  98  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:00:48  99  /*
16:00:48 100  Throws exceptions:
16:00:48 101  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 102  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 103  */
16:00:48 104  	in_transaction_id IN  NUMBER,
16:00:48 105  	out_attempts_num  OUT NUMBER
16:00:48 106  );
16:00:48 107  
16:00:48 108  PROCEDURE GET_TRANSACTION_AMOUNT (
16:00:48 109  /*
16:00:48 110  Throws exceptions:
16:00:48 111  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 112  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 113  */
16:00:48 114  	in_transaction_id      IN  NUMBER,
16:00:48 115  	out_transaction_amount OUT NUMBER
16:00:48 116  );
16:00:48 117  
16:00:48 118  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
16:00:48 119  /*
16:00:48 120  Throws exceptions:
16:00:48 121  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 122  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 123  */
16:00:48 124  	in_charge_id   IN  NUMBER,
16:00:48 125  	out_result_set OUT SYS_REFCURSOR
16:00:48 126  );
16:00:48 127  
16:00:48 128  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
16:00:48 129  /*
16:00:48 130  Throws exceptions:
16:00:48 131  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 132  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 133  */
16:00:48 134  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:00:48 135  	out_result_set OUT SYS_REFCURSOR
16:00:48 136  );
16:00:48 137  
16:00:48 138  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
16:00:48 139  /*
16:00:48 140  Throws exceptions:
16:00:48 141  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 143  */
16:00:48 144  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:00:48 145  	out_result_set OUT SYS_REFCURSOR
16:00:48 146  );
16:00:48 147  
16:00:48 148  PROCEDURE GET_TRANSACTION_ATTEMPTS (
16:00:48 149  /*
16:00:48 150  Throws exceptions:
16:00:48 151  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 153  */
16:00:48 154  	in_transaction_id IN  NUMBER,
16:00:48 155  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 156  );
16:00:48 157  
16:00:48 158  PROCEDURE RESERVE_TRANSACTION_ID (
16:00:48 159  /*
16:00:48 160  Throws exceptions:
16:00:48 161  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 162  */
16:00:48 163  	out_transaction_id OUT NUMBER
16:00:48 164  );
16:00:48 165  
16:00:48 166  PROCEDURE GET_TRANSACTION_BY_ID (
16:00:48 167  /*
16:00:48 168  Throws exceptions:
16:00:48 169  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 170  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 171  */
16:00:48 172  	in_transaction_id IN NUMBER,
16:00:48 173  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 174  );
16:00:48 175  
16:00:48 176  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:48 177  /*
16:00:48 178  Throws exceptions:
16:00:48 179  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 180  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:48 181  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 182  */
16:00:48 183  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:48 184  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:48 185  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:48 186  );
16:00:48 187  
16:00:48 188  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:00:48 189  /*
16:00:48 190  Throws exceptions:
16:00:48 191  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 192  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 193  */
16:00:48 194  	in_invoice_id	IN  NUMBER,
16:00:48 195  	out_result_set OUT SYS_REFCURSOR
16:00:48 196  );
16:00:48 197  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:00:48 198  /*
16:00:48 199  Throws exceptions:
16:00:48 200  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 201  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 202  */
16:00:48 203  	in_transaction_id IN  NUMBER,
16:00:48 204  	out_is_successfull  OUT NUMBER
16:00:48 205  );
16:00:48 206  
16:00:48 207  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
16:00:48 208  	in_transaction_id IN NUMBER
16:00:48 209  ) RETURN NUMBER;
16:00:48 210  
16:00:48 211  FUNCTION GET_TRANSACTION_INTRL_TAXES (
16:00:48 212  	in_transaction_id IN NUMBER
16:00:48 213  ) RETURN NUMBER;
16:00:48 214  
16:00:48 215  -- norlov: #38796
16:00:48 216  PROCEDURE GET_TRANSACTIONS (
16:00:48 217  /*
16:00:48 218  Throws exceptions:
16:00:48 219  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 220  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 221  */
16:00:48 222  	in_group_id	      IN  NUMBER,
16:00:48 223  	in_invoice_id	      IN NUMBER DEFAULT NULL,
16:00:48 224  	in_subscription_id    IN NUMBER DEFAULT NULL,
16:00:48 225  	in_start_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:00:48 226  	in_end_date	      IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:00:48 227  	in_transaction_status IN NUMBER DEFAULT NULL,
16:00:48 228  	out_result_set	      OUT SYS_REFCURSOR
16:00:48 229  );
16:00:48 230  
16:00:48 231  FUNCTION IS_TRANSACTION_COLLECTED (
16:00:48 232  /*
16:00:48 233  Throws:
16:00:48 234  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 235  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 236  Returns:
16:00:48 237  GLOBAL_CONST.TRUE if transaction collected,
16:00:48 238  GLOBAL_CONST.FALSE else
16:00:48 239  */
16:00:48 240  	in_transaction_id IN NUMBER
16:00:48 241  ) RETURN NUMBER;
16:00:48 242  
16:00:48 243  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
16:00:48 244  /*
16:00:48 245  Throws exceptions:
16:00:48 246  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 247  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 248  */
16:00:48 249  	in_charge_id   in  number,
16:00:48 250  	out_attempt_count out number
16:00:48 251  );
16:00:48 252  
16:00:48 253  END PROCS_TRANSACTION_V20;
16:00:48 254  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.09
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PROCS_TRANSACTION_CRU
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PROCS_TRANSACTION_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_TRANSACTION (
16:00:48   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
16:00:48   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
16:00:48   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
16:00:48   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:00:48   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
16:00:48  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
16:00:48  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
16:00:48  12  );
16:00:48  13  
16:00:48  14  PROCEDURE UPDATE_TRANSACTION (
16:00:48  15  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
16:00:48  16  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
16:00:48  17  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
16:00:48  18  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:00:48  19  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
16:00:48  20  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
16:00:48  21  );
16:00:48  22  
16:00:48  23  PROCEDURE READ_TRANSACTION (
16:00:48  24  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:48  25  	out_result_set	  OUT SYS_REFCURSOR
16:00:48  26  );
16:00:48  27  
16:00:48  28  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
16:00:48  29  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
16:00:48  30  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
16:00:48  31  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:00:48  32  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:48  33  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
16:00:48  34  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:48  35  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:00:48  36  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:00:48  37  );
16:00:48  38  
16:00:48  39  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:48  40  /*
16:00:48  41  Throws exceptions:
16:00:48  42  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  43  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:48  44  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  45  */
16:00:48  46  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:48  47  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:48  48  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:48  49  );
16:00:48  50  
16:00:48  51  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
16:00:48  52  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
16:00:48  53  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:00:48  54  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:48  55  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:48  56  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:00:48  57  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE DEFAULT NULL
16:00:48  58  );
16:00:48  59  
16:00:48  60  END PROCS_TRANSACTION_CRU_V20;
16:00:48  61  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.05
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PUBLIC_PROCS_BILLING
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_BILLING_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:48   4  /*
16:00:48   5  Throws exceptions:
16:00:48   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48   8  */
16:00:48   9  	  in_offer_chain_id IN	 NUMBER,
16:00:48  10  	  out_result_set    OUT  SYS_REFCURSOR
16:00:48  11  );
16:00:48  12  
16:00:48  13  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:00:48  14  /*
16:00:48  15  Throws exceptions:
16:00:48  16  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  18  */
16:00:48  19  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:48  20  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:00:48  21  );
16:00:48  22  
16:00:48  23  PROCEDURE GET_PENDING_INVOICES (
16:00:48  24  /*
16:00:48  25  Throws exceptions:
16:00:48  26  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  27  */
16:00:48  28  	out_result_set	     OUT SYS_REFCURSOR,
16:00:48  29  	in_row_number	     IN NUMBER DEFAULT NULL
16:00:48  30  );
16:00:48  31  
16:00:48  32  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:00:48  33  /*
16:00:48  34  Throws exceptions:
16:00:48  35  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  36  */
16:00:48  37  	out_result_set	    OUT SYS_REFCURSOR,
16:00:48  38  	in_row_number	    IN NUMBER DEFAULT NULL
16:00:48  39  );
16:00:48  40  
16:00:48  41  PROCEDURE GET_UNPROCESSED_CHARGES (
16:00:48  42  /*
16:00:48  43  Throws exceptions:
16:00:48  44  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  45  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  46  */
16:00:48  47  	in_invoice_id  IN NUMBER,
16:00:48  48  	out_result_set OUT SYS_REFCURSOR
16:00:48  49  );
16:00:48  50  
16:00:48  51  PROCEDURE GET_PROCESSED_CHARGES (
16:00:48  52  /*
16:00:48  53  Throws exceptions:
16:00:48  54  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  56  */
16:00:48  57  	in_invoice_id  IN NUMBER,
16:00:48  58  	out_result_set OUT SYS_REFCURSOR
16:00:48  59  );
16:00:48  60  
16:00:48  61  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:00:48  62  /*
16:00:48  63  Throws exceptions:
16:00:48  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  65  */
16:00:48  66  	in_transaction_id	      IN NUMBER,
16:00:48  67  	in_transaction_attempt_status IN NUMBER,
16:00:48  68  	out_result_set		      OUT SYS_REFCURSOR
16:00:48  69  );
16:00:48  70  
16:00:48  71  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:00:48  72  /*
16:00:48  73  Throws exceptions:
16:00:48  74  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  75  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  76  */
16:00:48  77  	in_transaction_attempt_id     IN NUMBER,
16:00:48  78  	in_transaction_attempt_status IN NUMBER
16:00:48  79  );
16:00:48  80  
16:00:48  81  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:00:48  82  /*
16:00:48  83  Throws exceptions:
16:00:48  84  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  85  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  86  */
16:00:48  87  	in_transaction_attempt_id IN NUMBER,
16:00:48  88  	in_updated_by		  IN VARCHAR2
16:00:48  89  );
16:00:48  90  
16:00:48  91  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:00:48  92  /*
16:00:48  93  Throws exceptions:
16:00:48  94  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  95  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  96  */
16:00:48  97  	in_transaction_id	   IN NUMBER,
16:00:48  98  	in_trans_attempt_status    IN NUMBER,
16:00:48  99  	in_external_status_code    IN VARCHAR2,
16:00:48 100  	in_external_status_message IN VARCHAR2,
16:00:48 101  	in_created_by		   IN VARCHAR2,
16:00:48 102  	in_ext_transaction_id	   IN VARCHAR2,
16:00:48 103  	out_transaction_attempt_id OUT NUMBER
16:00:48 104  );
16:00:48 105  
16:00:48 106  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:00:48 107  /*
16:00:48 108  Throws exceptions:
16:00:48 109  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 110  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 111  */
16:00:48 112  	in_transaction_attempt_id IN NUMBER,
16:00:48 113  	in_ext_status_code	  IN VARCHAR2,
16:00:48 114  	in_ext_status_message	  IN VARCHAR2,
16:00:48 115  	in_ext_transaction_id	  IN VARCHAR2
16:00:48 116  );
16:00:48 117  
16:00:48 118  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:00:48 119  /*
16:00:48 120  Throws exceptions:
16:00:48 121  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 122  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 123  */
16:00:48 124  	in_transaction_id	 IN NUMBER,
16:00:48 125  	in_updated_by		 IN VARCHAR2,
16:00:48 126  	in_transaction_status_id IN NUMBER
16:00:48 127  );
16:00:48 128  
16:00:48 129  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:00:48 130  /*
16:00:48 131  Throws exceptions:
16:00:48 132  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 133  */
16:00:48 134  	in_transaction_id IN  NUMBER,
16:00:48 135  	out_attempts_num  OUT NUMBER
16:00:48 136  );
16:00:48 137  
16:00:48 138  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:00:48 139  /*
16:00:48 140  Throws exceptions:
16:00:48 141  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 143  */
16:00:48 144  	in_transaction_id IN  NUMBER,
16:00:48 145  	out_is_successfull  OUT NUMBER
16:00:48 146  );
16:00:48 147  
16:00:48 148  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:48 149  /*
16:00:48 150  Throws exceptions:
16:00:48 151  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 153  */
16:00:48 154  	in_invoice_id		       IN NUMBER,
16:00:48 155  	in_invoice_status_id	       IN NUMBER,
16:00:48 156  	in_updated_by		       IN VARCHAR2
16:00:48 157  );
16:00:48 158  
16:00:48 159  PROCEDURE SUSPEND_SUBSCRIPTION(
16:00:48 160  /*
16:00:48 161  Throws exceptions:
16:00:48 162  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 163  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:48 164  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 165  */
16:00:48 166  	  in_subs_id	IN NUMBER ,
16:00:48 167  	  in_updated_by IN VARCHAR2
16:00:48 168  );
16:00:48 169  
16:00:48 170  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:48 171  /*
16:00:48 172  Throws exceptions:
16:00:48 173  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 174  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 175  */
16:00:48 176  	in_credit_card_id IN  NUMBER,
16:00:48 177  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 178  );
16:00:48 179  
16:00:48 180  PROCEDURE GET_TRANSACTION_AMOUNT (
16:00:48 181  /*
16:00:48 182  Throws exceptions:
16:00:48 183  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 184  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 185  */
16:00:48 186  	in_transaction_id      IN  NUMBER,
16:00:48 187  	out_transaction_amount OUT NUMBER
16:00:48 188  );
16:00:48 189  
16:00:48 190  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:00:48 191  /*
16:00:48 192  Throws exceptions:
16:00:48 193  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 194  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 195  */
16:00:48 196  	in_invoice_id  IN  NUMBER,
16:00:48 197  	out_account_id OUT NUMBER
16:00:48 198  );
16:00:48 199  
16:00:48 200  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:00:48 201  /*
16:00:48 202  Throws exceptions:
16:00:48 203  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 204  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 205  */
16:00:48 206  	in_gift_certificate_id IN NUMBER,
16:00:48 207  	out_result_set	       OUT SYS_REFCURSOR
16:00:48 208  );
16:00:48 209  
16:00:48 210  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:00:48 211  /*
16:00:48 212  Throws exceptions:
16:00:48 213  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 214  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 215  */
16:00:48 216  	in_charge_id	    IN NUMBER,
16:00:48 217  	out_subscription_id OUT NUMBER
16:00:48 218  );
16:00:48 219  
16:00:48 220  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:00:48 221  /*
16:00:48 222  Throws exceptions:
16:00:48 223  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 224  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 225  */
16:00:48 226  	in_gift_certificate_id IN NUMBER,
16:00:48 227  	in_charge_id	       IN NUMBER,
16:00:48 228  	out_result	       OUT NUMBER
16:00:48 229  );
16:00:48 230  
16:00:48 231  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:48 232  /*
16:00:48 233  Throws exceptions:
16:00:48 234  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 235  */
16:00:48 236  	  in_subscription_id IN  NUMBER,
16:00:48 237  	  out_result_set      OUT SYS_REFCURSOR
16:00:48 238  );
16:00:48 239  
16:00:48 240  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:48 241  /*
16:00:48 242  Throws exceptions:
16:00:48 243  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 244  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 245  */
16:00:48 246  	in_invoice_id IN  NUMBER,
16:00:48 247  	out_amount    OUT NUMBER
16:00:48 248  );
16:00:48 249  
16:00:48 250  PROCEDURE GET_TRANSACTION_BY_ID (
16:00:48 251  /*
16:00:48 252  Throws exceptions:
16:00:48 253  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 254  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 255  */
16:00:48 256  	in_transaction_id IN NUMBER,
16:00:48 257  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 258  );
16:00:48 259  
16:00:48 260  PROCEDURE UPDATE_CHARGE_STATUS (
16:00:48 261  /*
16:00:48 262  Throws exceptions:
16:00:48 263  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 264  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 265  */
16:00:48 266  	in_charge_id	    IN CHARGE.ID%TYPE,
16:00:48 267  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:48 268  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:00:48 269  );
16:00:48 270  
16:00:48 271  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:48 272  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:48 273  	out_result_set OUT SYS_REFCURSOR
16:00:48 274  );
16:00:48 275  
16:00:48 276  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:48 277  /*
16:00:48 278  Throws exceptions:
16:00:48 279  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 280  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:48 281  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 282  */
16:00:48 283  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:48 284  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:48 285  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:48 286  );
16:00:48 287  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:00:48 288  /*
16:00:48 289  Throws exceptions:
16:00:48 290  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 291  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 292  */
16:00:48 293  	in_invoice_id	IN  NUMBER,
16:00:48 294  	out_result_set OUT SYS_REFCURSOR
16:00:48 295  );
16:00:48 296  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:00:48 297  /*
16:00:48 298  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 299  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 300  */
16:00:48 301  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:00:48 302  	in_subscription_id IN NUMBER,
16:00:48 303  	out_result_set	   OUT SYS_REFCURSOR
16:00:48 304  );
16:00:48 305  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:00:48 306  /*
16:00:48 307  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 308  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 309  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:48 310  */
16:00:48 311  --  in_invoice_id        IN INVOICE.ID%TYPE,
16:00:48 312  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
16:00:48 313  -- norlov: in_refundable	      IN refund enabled
16:00:48 314  	in_invoice_id	     IN NUMBER,
16:00:48 315  	in_updated_by	     IN VARCHAR2,
16:00:48 316  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:48 317  --  in_cancellation_date IN DATE DEFAULT current_timestamp
16:00:48 318  );
16:00:48 319  
16:00:48 320  PROCEDURE FINALIZE_CANCELATION (
16:00:48 321  /*
16:00:48 322  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 323  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 324  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:48 325  */
16:00:48 326  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:00:48 327  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:00:48 328  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:48 329  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:48 330  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:48 331  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:48 332  	in_subscription_id    IN NUMBER,
16:00:48 333  	in_cancelation_reason IN VARCHAR2,
16:00:48 334  	in_cancelation_date   IN DATE,
16:00:48 335  	in_note 	      IN VARCHAR2,
16:00:48 336  	in_agent_id	      IN NUMBER,
16:00:48 337  	in_updated_by	      IN VARCHAR2
16:00:48 338  );
16:00:48 339  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:00:48 340  /*
16:00:48 341  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 343  */
16:00:48 344  	in_subscription_id IN NUMBER,
16:00:48 345  	out_result_set	   OUT SYS_REFCURSOR
16:00:48 346  );
16:00:48 347  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:48 348  /*
16:00:48 349  Throws exceptions (codes):
16:00:48 350  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 352  */
16:00:48 353  	in_offer_chain_id IN NUMBER,
16:00:48 354  	in_meta_data_name IN VARCHAR2,
16:00:48 355  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 356  );
16:00:48 357  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:48 358  /*
16:00:48 359  Throws exceptions (codes):
16:00:48 360  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 361  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 362  */
16:00:48 363  	in_product_offering_id IN NUMBER,
16:00:48 364  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:00:48 365  	out_result_set	       OUT SYS_REFCURSOR
16:00:48 366  );
16:00:48 367  PROCEDURE READ_ACCOUNT (
16:00:48 368  	in_account_id  IN ACCOUNT.ID%TYPE,
16:00:48 369  	out_result_set OUT SYS_REFCURSOR
16:00:48 370  );
16:00:48 371  
16:00:48 372  PROCEDURE GET_COLLECTED_CHARGES (
16:00:48 373  /*
16:00:48 374  Throws exceptions:
16:00:48 375  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 377  */
16:00:48 378  	in_invoice_id  IN NUMBER,
16:00:48 379  	out_result_set OUT SYS_REFCURSOR
16:00:48 380  );
16:00:48 381  
16:00:48 382  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:00:48 383  /*
16:00:48 384  Throws exceptions:
16:00:48 385  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 386  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 387  */
16:00:48 388  	in_invoice_id IN NUMBER,
16:00:48 389  	out_group_ids OUT SYS_REFCURSOR
16:00:48 390  );
16:00:48 391  
16:00:48 392  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:48 393  /*
16:00:48 394  Throws exceptions:
16:00:48 395  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 396  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 397  */
16:00:48 398  	in_group_id IN NUMBER,
16:00:48 399  	out_account_id	OUT NUMBER
16:00:48 400  );
16:00:48 401  
16:00:48 402  PROCEDURE LOCK_ACCOUNT (
16:00:48 403  	in_group_id    IN NUMBER,
16:00:48 404  	in_lock_key    IN VARCHAR2,
16:00:48 405  	in_seconds_num IN NUMBER,
16:00:48 406  	in_created_by  IN VARCHAR2,
16:00:48 407  	in_reason      IN VARCHAR2
16:00:48 408  );
16:00:48 409  
16:00:48 410  PROCEDURE RELEASE_LOCK (
16:00:48 411  	in_group_id IN NUMBER,
16:00:48 412  	in_lock_key IN VARCHAR2
16:00:48 413  );
16:00:48 414  
16:00:48 415  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:00:48 416  	in_invoice_id		    IN NUMBER,
16:00:48 417  	out_order_id		    OUT VARCHAR2,
16:00:48 418  	out_external_transaction_id OUT VARCHAR2
16:00:48 419  );
16:00:48 420  
16:00:48 421  PROCEDURE GET_PAYPAL_BY_ID (
16:00:48 422  	in_paypal_id   IN  NUMBER,
16:00:48 423  	out_result_set OUT SYS_REFCURSOR
16:00:48 424  );
16:00:48 425  
16:00:48 426  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
16:00:48 427  /*
16:00:48 428  Throws exceptions:
16:00:48 429  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 430  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 431  */
16:00:48 432  	in_charge_id   in  number,
16:00:48 433  	out_attempt_count out number
16:00:48 434  );
16:00:48 435  
16:00:48 436  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:48 437  	in_offer_chain_id	 IN NUMBER,
16:00:48 438  	in_action_name		 IN VARCHAR2,
16:00:48 439  	out_notification_type_id out number
16:00:48 440  );
16:00:48 441  
16:00:48 442  PROCEDURE SHOULD_MOVE_TO_GRACE(
16:00:48 443  	in_invoice_id  IN INVOICE.ID%TYPE,
16:00:48 444  	out_result     OUT NUMBER
16:00:48 445  );
16:00:48 446  
16:00:48 447  PROCEDURE MOVE_TO_GRACE(
16:00:48 448  	in_invoice_id		      IN INVOICE.ID%TYPE,
16:00:48 449  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
16:00:48 450  	in_grace_period_length_hours  IN NUMBER
16:00:48 451  );
16:00:48 452  
16:00:48 453  PROCEDURE MOVE_OUT_OF_GRACE(
16:00:48 454  	in_invoice_id	IN INVOICE.ID%TYPE,
16:00:48 455  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
16:00:48 456  );
16:00:48 457  
16:00:48 458  END PUBLIC_PROCS_BILLING_V20;
16:00:48 459  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.08
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PUBLIC_PROCS_CLIENT
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_CLIENT_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
16:00:48   4  /*
16:00:48   5  Throws exceptions:
16:00:48   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48   8  */
16:00:48   9  	in_notification_type_name IN VARCHAR2,
16:00:48  10  	out_notification_type_id  OUT NUMBER
16:00:48  11  );
16:00:48  12  
16:00:48  13  PROCEDURE ADD_NOTIFICATION (
16:00:48  14  /*
16:00:48  15  Throws exceptions:
16:00:48  16  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  17  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  18  */
16:00:48  19  	in_sender_account_id	 IN NUMBER DEFAULT 0,
16:00:48  20  	in_recipient_group_id	 IN NUMBER,
16:00:48  21  	in_notification_type_id  IN NUMBER,
16:00:48  22  	in_date_to_notify	 IN DATE,
16:00:48  23  	in_email_template_params IN CLOB
16:00:48  24  );
16:00:48  25  
16:00:48  26  END PUBLIC_PROCS_CLIENT_V20;
16:00:48  27  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.02
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PUBLIC_PROCS_NOTIFICATION
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_NOTIFICATION_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE LOCK_ACCOUNT (
16:00:48   4  	in_group_id    IN NUMBER,
16:00:48   5  	in_lock_key    IN VARCHAR2,
16:00:48   6  	in_seconds_num IN NUMBER,
16:00:48   7  	in_created_by  IN VARCHAR2,
16:00:48   8  	in_reason      IN VARCHAR2
16:00:48   9  );
16:00:48  10  
16:00:48  11  PROCEDURE RELEASE_LOCK (
16:00:48  12  	in_group_id IN NUMBER,
16:00:48  13  	in_lock_key IN VARCHAR2
16:00:48  14  );
16:00:48  15  
16:00:48  16  END PUBLIC_PROCS_NOTIFICATION_V20;
16:00:48  17  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.03
16:00:48 SQL> 
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> -- DDL for package PUBLIC_PROCS_RENEWAL
16:00:48 SQL> --------------------------------------------------------------------------------
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE "PUBLIC_PROCS_RENEWAL_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:00:48   4  	out_result_set OUT SYS_REFCURSOR
16:00:48   5  );
16:00:48   6  
16:00:48   7  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:00:48   8  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:48   9  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:00:48  10  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:48  11  );
16:00:48  12  
16:00:48  13  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:48  14  /*
16:00:48  15  Throws exceptions:
16:00:48  16  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  17  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  18  */
16:00:48  19  	  in_offer_chain_id IN	 NUMBER,
16:00:48  20  	  out_result_set    OUT  SYS_REFCURSOR
16:00:48  21  );
16:00:48  22  
16:00:48  23  PROCEDURE GET_UNREDEEMED_GCS (
16:00:48  24  	out_result_set		OUT SYS_REFCURSOR,
16:00:48  25  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:48  26  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:48  27  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:48  28  );
16:00:48  29  
16:00:48  30  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:00:48  31  /*
16:00:48  32  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
16:00:48  33  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  34  */
16:00:48  35  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:00:48  36  	out_result_set	     OUT SYS_REFCURSOR
16:00:48  37  );
16:00:48  38  
16:00:48  39  PROCEDURE GET_ALL_OCH_META_DATA (
16:00:48  40  	in_offer_chain_id IN NUMBER,
16:00:48  41  	out_result_set	  OUT SYS_REFCURSOR
16:00:48  42  );
16:00:48  43  
16:00:48  44  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:48  45  /*
16:00:48  46  Throws exceptions (codes):
16:00:48  47  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  48  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  49  */
16:00:48  50  	in_offer_chain_id IN NUMBER,
16:00:48  51  	in_meta_data_name IN VARCHAR2,
16:00:48  52  	out_result_set	  OUT SYS_REFCURSOR
16:00:48  53  );
16:00:48  54  
16:00:48  55  PROCEDURE GET_ENDING_LICENSES (
16:00:48  56  /*
16:00:48  57  Throws exceptions:
16:00:48  58  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  59  */
16:00:48  60  	in_hours_number IN NUMBER,
16:00:48  61  	out_result_set OUT SYS_REFCURSOR
16:00:48  62  );
16:00:48  63  
16:00:48  64  PROCEDURE GET_ENDING_LICENSES_CC (
16:00:48  65  /*
16:00:48  66  Throws exceptions:
16:00:48  67  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  68  */
16:00:48  69  	in_hours_number IN NUMBER,
16:00:48  70  	out_result_set OUT SYS_REFCURSOR,
16:00:48  71  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:48  72  );
16:00:48  73  
16:00:48  74  /************************************************/
16:00:48  75  
16:00:48  76  PROCEDURE GET_RECURRING_OFFER (
16:00:48  77  /*
16:00:48  78  Throws exceptions:
16:00:48  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  80  */
16:00:48  81  	in_license_id  IN NUMBER,
16:00:48  82  	out_result_set OUT SYS_REFCURSOR
16:00:48  83  );
16:00:48  84  
16:00:48  85  /*************************************************/
16:00:48  86  
16:00:48  87  PROCEDURE GET_NEXT_OFFER (
16:00:48  88  /*
16:00:48  89  Throws exceptions:
16:00:48  90  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48  91  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:48  92  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  93  */
16:00:48  94  	in_license_id  IN NUMBER,
16:00:48  95  	out_result_set OUT SYS_REFCURSOR
16:00:48  96  );
16:00:48  97  
16:00:48  98  /**************************************************/
16:00:48  99  
16:00:48 100  PROCEDURE UPDATE_LICENSE_STATUS(
16:00:48 101  /*
16:00:48 102  Throws exceptions:
16:00:48 103  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 104  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 105  */
16:00:48 106  	  in_license_id     IN NUMBER,
16:00:48 107  	  in_license_status IN NUMBER,
16:00:48 108  	  in_updated_by     IN VARCHAR2
16:00:48 109  );
16:00:48 110  
16:00:48 111  /***************************************************/
16:00:48 112  
16:00:48 113  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:48 114  /*
16:00:48 115  Throws exceptions:
16:00:48 116  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 117  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 118  */
16:00:48 119  	in_invoice_id		       IN NUMBER,
16:00:48 120  	in_invoice_status_id	       IN NUMBER,
16:00:48 121  	in_updated_by		       IN VARCHAR2
16:00:48 122  );
16:00:48 123  
16:00:48 124  /***************************************************/
16:00:48 125  
16:00:48 126  PROCEDURE CREATE_LICENSE(
16:00:48 127  /*
16:00:48 128  Throws exceptions:
16:00:48 129  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 130  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 131  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:48 132  */
16:00:48 133  	in_status_id		    IN NUMBER,
16:00:48 134  	in_needs_entitlements	    IN NUMBER,
16:00:48 135  	in_start_date		    IN DATE,
16:00:48 136  	in_end_date		    IN DATE,
16:00:48 137  	in_offer_id		    IN NUMBER,
16:00:48 138  	in_subscription_id	    IN NUMBER,
16:00:48 139  	in_invoice_id		    IN NUMBER,
16:00:48 140  	in_created_by		    IN VARCHAR2,
16:00:48 141  	in_is_extension 	    IN NUMBER,
16:00:48 142  	in_current_offer_index	    IN NUMBER,
16:00:48 143  	in_current_offer_recurr_num IN NUMBER,
16:00:48 144  	out_license_id		    OUT NUMBER
16:00:48 145  );
16:00:48 146  
16:00:48 147  /**************************************************/
16:00:48 148  
16:00:48 149  PROCEDURE CREATE_INVOICE(
16:00:48 150  /*
16:00:48 151  Throws exceptions:
16:00:48 152  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 153  */
16:00:48 154  	  in_invoice_status IN NUMBER,
16:00:48 155  	  in_created_by     IN VARCHAR2,
16:00:48 156  	  in_tax_exempt_id  IN VARCHAR2,
16:00:48 157  	  out_invoice_id    OUT NUMBER
16:00:48 158  );
16:00:48 159  
16:00:48 160  /*****************************************************/
16:00:48 161  
16:00:48 162  PROCEDURE CREATE_CHARGE(
16:00:48 163  /*
16:00:48 164  Throws exceptions:
16:00:48 165  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 166  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 167  */
16:00:48 168  	in_invoice_id	      IN NUMBER,
16:00:48 169  	in_transaction_id     IN NUMBER,
16:00:48 170  	in_instrument_type_id IN NUMBER,
16:00:48 171  	in_instrument_id      IN NUMBER,
16:00:48 172  	in_charge_amount      IN NUMBER,
16:00:48 173  	in_created_by	      IN VARCHAR2,
16:00:48 174  	in_charge_status_id   IN NUMBER,
16:00:48 175  	out_charge_id	      OUT NUMBER
16:00:48 176  );
16:00:48 177  
16:00:48 178  /*****************************************************/
16:00:48 179  
16:00:48 180  PROCEDURE HAS_FUTURE_LICENSE (
16:00:48 181  /*
16:00:48 182  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 183  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 184  --
16:00:48 185  RETURNS:
16:00:48 186  1 - if has,
16:00:48 187  0 - else
16:00:48 188  */
16:00:48 189  	in_license_id IN NUMBER,
16:00:48 190  	out_result	   OUT NUMBER
16:00:48 191  );
16:00:48 192  
16:00:48 193  /*****************************************************/
16:00:48 194  
16:00:48 195  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:00:48 196  /*
16:00:48 197  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 198  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 199  */
16:00:48 200  	in_license_id IN NUMBER,
16:00:48 201  	out_group_id  OUT NUMBER
16:00:48 202  );
16:00:48 203  
16:00:48 204  /*****************************************************/
16:00:48 205  
16:00:48 206  PROCEDURE GET_OFFER_PRODUCTS (
16:00:48 207  /*
16:00:48 208  Throws exceptions (codes):
16:00:48 209  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 210  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 211  */
16:00:48 212  	in_offer_id    IN NUMBER,
16:00:48 213  	out_result_set OUT SYS_REFCURSOR
16:00:48 214  );
16:00:48 215  
16:00:48 216  /*******************************************************/
16:00:48 217  
16:00:48 218  PROCEDURE CREATE_TRANSACTION (
16:00:48 219  /*
16:00:48 220  Throws exceptions:
16:00:48 221  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 222  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 223  */
16:00:48 224  	in_transaction_id	  IN NUMBER,
16:00:48 225  	in_status_id		  IN NUMBER,
16:00:48 226  	in_amount		  IN NUMBER,
16:00:48 227  	in_created_by		  IN VARCHAR2,
16:00:48 228  	in_order_id		  IN VARCHAR2,
16:00:48 229  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
16:00:48 230  	out_transaction_id	  OUT NUMBER
16:00:48 231  );
16:00:48 232  
16:00:48 233  /*********************************************************/
16:00:48 234  
16:00:48 235  PROCEDURE ADD_LINE_ITEMS(
16:00:48 236  /*
16:00:48 237  Throws exceptions:
16:00:48 238  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 239  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 240  */
16:00:48 241  	in_invoice_id IN NUMBER,
16:00:48 242  	in_offer_id   IN NUMBER,
16:00:48 243  	in_created_by IN VARCHAR2
16:00:48 244  );
16:00:48 245  
16:00:48 246  /**********************************************************/
16:00:48 247  
16:00:48 248  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:48 249  /*
16:00:48 250  Throws exceptions:
16:00:48 251  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 252  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 253  */
16:00:48 254  	in_invoice_id IN  NUMBER,
16:00:48 255  	out_amount    OUT NUMBER
16:00:48 256  );
16:00:48 257  
16:00:48 258  /*********************************************************/
16:00:48 259  
16:00:48 260  PROCEDURE RESERVE_TRANSACTION_ID (
16:00:48 261  /*
16:00:48 262  Throws exceptions:
16:00:48 263  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 264  */
16:00:48 265  	out_transaction_id OUT NUMBER
16:00:48 266  );
16:00:48 267  
16:00:48 268  /**********************************************************/
16:00:48 269  
16:00:48 270  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:00:48 271  	in_offer_chain_id	     IN NUMBER,
16:00:48 272  	in_offer_chain_current_index IN NUMBER,
16:00:48 273  	out_next_offer_index	     OUT NUMBER
16:00:48 274  );
16:00:48 275  
16:00:48 276  /***********************************************************/
16:00:48 277  
16:00:48 278  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:00:48 279  	in_license_id		     IN NUMBER,
16:00:48 280  	in_offer_chain_current_index IN NUMBER,
16:00:48 281  	out_next_offer_index	     OUT NUMBER
16:00:48 282  );
16:00:48 283  
16:00:48 284  /**********************************************************/
16:00:48 285  
16:00:48 286  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:48 287  /*
16:00:48 288  Throws exceptions:
16:00:48 289  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 290  */
16:00:48 291  	  in_subscription_id IN  NUMBER,
16:00:48 292  	  out_result_set      OUT SYS_REFCURSOR
16:00:48 293  );
16:00:48 294  
16:00:48 295  /***********************************************************/
16:00:48 296  
16:00:48 297  PROCEDURE CLOSE_SUBSCRIPTION (
16:00:48 298  	in_subscription_id IN NUMBER,
16:00:48 299  	in_updated_by	   IN VARCHAR2
16:00:48 300  );
16:00:48 301  
16:00:48 302  /***********************************************************/
16:00:48 303  
16:00:48 304  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:00:48 305  	out_result_set OUT SYS_REFCURSOR
16:00:48 306  );
16:00:48 307  
16:00:48 308  /***********************************************************/
16:00:48 309  
16:00:48 310  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:00:48 311  	in_license_id	      IN NUMBER,
16:00:48 312  	in_needs_entitlements IN NUMBER,
16:00:48 313  	in_updated_by	      IN VARCHAR2
16:00:48 314  );
16:00:48 315  /***********************************************************/
16:00:48 316  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:00:48 317  	in_offer_id    IN NUMBER,
16:00:48 318  	out_result_set OUT SYS_REFCURSOR
16:00:48 319  );
16:00:48 320  /***********************************************************/
16:00:48 321  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:48 322  	in_product_offering_id IN NUMBER,
16:00:48 323  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:00:48 324  	out_result_set	       OUT SYS_REFCURSOR
16:00:48 325  );
16:00:48 326  
16:00:48 327  PROCEDURE LOCK_ACCOUNT (
16:00:48 328  	in_group_id    IN NUMBER,
16:00:48 329  	in_lock_key    IN VARCHAR2,
16:00:48 330  	in_seconds_num IN NUMBER,
16:00:48 331  	in_created_by  IN VARCHAR2,
16:00:48 332  	in_reason      IN VARCHAR2
16:00:48 333  );
16:00:48 334  
16:00:48 335  PROCEDURE RELEASE_LOCK (
16:00:48 336  	in_group_id IN NUMBER,
16:00:48 337  	in_lock_key IN VARCHAR2
16:00:48 338  );
16:00:48 339  
16:00:48 340  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:48 341  	in_invoice_id  IN NUMBER,
16:00:48 342  	out_result_set OUT SYS_REFCURSOR
16:00:48 343  );
16:00:48 344  
16:00:48 345  PROCEDURE ADD_TAX (
16:00:48 346  	in_tax_type_id		 IN NUMBER,
16:00:48 347  	in_calculated_amount	 IN NUMBER,
16:00:48 348  	in_created_by		 IN VARCHAR2,
16:00:48 349  	in_line_item_id 	 IN NUMBER,
16:00:48 350  	in_effective_rate	 IN VARCHAR2,
16:00:48 351  	in_taxable_amount	 IN NUMBER,
16:00:48 352  	in_tax_rule_id		 IN NUMBER,
16:00:48 353  	in_jurisdiction_level_id IN NUMBER,
16:00:48 354  	in_jurisdiction_name	 IN VARCHAR2,
16:00:48 355  	in_jurisdiction_id	 IN VARCHAR2,
16:00:48 356  	in_ext_tax_type 	 IN VARCHAR2,
16:00:48 357  	in_ext_result		 IN VARCHAR2,
16:00:48 358  	in_imposition_type	 IN VARCHAR2,
16:00:48 359  	in_imposition		 IN VARCHAR2
16:00:48 360  );
16:00:48 361  
16:00:48 362  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:48 363  	in_credit_card_id IN  NUMBER,
16:00:48 364  	out_result_set	  OUT SYS_REFCURSOR
16:00:48 365  );
16:00:48 366  
16:00:48 367  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:00:48 368  	in_line_item_id IN NUMBER,
16:00:48 369  	out_result_set	OUT SYS_REFCURSOR
16:00:48 370  );
16:00:48 371  
16:00:48 372  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:48 373  /*
16:00:48 374  Throws exceptions:
16:00:48 375  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 377  */
16:00:48 378  	in_group_id IN NUMBER,
16:00:48 379  	out_account_id	OUT NUMBER
16:00:48 380  );
16:00:48 381  
16:00:48 382  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:00:48 383  /*
16:00:48 384  Throws exceptions:
16:00:48 385  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:48 386  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 387  */
16:00:48 388  	in_line_item_id IN  NUMBER,
16:00:48 389  	out_result_set	OUT SYS_REFCURSOR
16:00:48 390  );
16:00:48 391  
16:00:48 392  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:00:48 393  	in_line_item_id    IN NUMBER,
16:00:48 394  	in_amount	   IN NUMBER,
16:00:48 395  	in_discount_amount IN NUMBER,
16:00:48 396  	in_taxes_amount    IN NUMBER
16:00:48 397  );
16:00:48 398  
16:00:48 399  PROCEDURE GET_PAYPAL_BY_ID (
16:00:48 400  	in_paypal_id   IN  NUMBER,
16:00:48 401  	out_result_set OUT SYS_REFCURSOR
16:00:48 402  );
16:00:48 403  
16:00:48 404  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:48 405  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:48 406  	out_result_set OUT SYS_REFCURSOR
16:00:48 407  );
16:00:48 408  
16:00:48 409  PROCEDURE GET_LICENSE_BY_ID (
16:00:48 410  	in_license_id  IN NUMBER,
16:00:48 411  	out_result_set OUT SYS_REFCURSOR
16:00:48 412  );
16:00:48 413  
16:00:48 414  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:48 415  	in_offer_chain_id	 IN NUMBER,
16:00:48 416  	in_action_name		 IN VARCHAR2,
16:00:48 417  	out_notification_type_id OUT NUMBER
16:00:48 418  );
16:00:48 419  
16:00:48 420  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:00:48 421  	in_offer_chain_id IN NUMBER,
16:00:48 422  	in_meta_data_name IN VARCHAR2,
16:00:48 423  	out_value	  OUT VARCHAR2
16:00:48 424  );
16:00:48 425  
16:00:48 426  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:00:48 427  	out_result_set	    OUT SYS_REFCURSOR
16:00:48 428  );
16:00:48 429  
16:00:48 430  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:00:48 431  	out_result_set	    OUT SYS_REFCURSOR
16:00:48 432  );
16:00:48 433  
16:00:48 434  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
16:00:48 435  	out_result_set	    OUT SYS_REFCURSOR
16:00:48 436  );
16:00:48 437  
16:00:48 438  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
16:00:48 439  	in_max_days_until_close IN NUMBER,
16:00:48 440  	in_num_subs_to_fetch	IN NUMBER,
16:00:48 441  	out_result_set		OUT SYS_REFCURSOR
16:00:48 442  );
16:00:48 443  
16:00:48 444  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
16:00:48 445  	in_days_before_close	 IN NUMBER,
16:00:48 446  	in_num_licenses_to_fetch IN NUMBER,
16:00:48 447  	out_result_set		 OUT SYS_REFCURSOR
16:00:48 448  );
16:00:48 449  
16:00:48 450  END PUBLIC_PROCS_RENEWAL_V20;
16:00:48 451  .
16:00:48 SQL> /

Package created.

Elapsed: 00:00:00.10
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_ACCOUNT (
16:00:48   4  	out_account_id	      OUT ACCOUNT.ID%TYPE,
16:00:48   5  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:00:48   6  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:48   7  	in_group_id	      IN ACCOUNT.GROUP_ID%TYPE,
16:00:48   8  	in_created_by	      IN ACCOUNT.CREATED_BY%TYPE,
16:00:48   9  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE,
16:00:48  10  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:48  11  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:00:48  12  ) AS
16:00:48  13  -- VARIABLES
16:00:48  14  var_new_account_id ACCOUNT.ID%TYPE;
16:00:48  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48  16  var_date DATE := SYSDATE;
16:00:48  17  BEGIN
16:00:48  18  	SELECT
16:00:48  19  	  ACC_ID_SEQ.nextVal into var_new_account_id
16:00:48  20  	FROM DUAL;
16:00:48  21  	INSERT INTO ACCOUNT (
16:00:48  22  	  ID,
16:00:48  23  	  ACCOUNT_STATUS_ID,
16:00:48  24  	  SUSPEND_DATE,
16:00:48  25  	  GROUP_ID,
16:00:48  26  	  CREATE_DATE,
16:00:48  27  	  CREATED_BY,
16:00:48  28  	  UPDATE_DATE,
16:00:48  29  	  UPDATED_BY,
16:00:48  30  	  SYSTEM_CATEGORY_ID,
16:00:48  31  	  INSTRUMENT_TYPE_ID,
16:00:48  32  	  INSTRUMENT_ID,
16:00:48  33  	  TAX_EXEMPT_ID
16:00:48  34  	) VALUES (
16:00:48  35  	  var_new_account_id,
16:00:48  36  	  in_account_status_id,
16:00:48  37  	  in_suspend_date,
16:00:48  38  	  in_group_id,
16:00:48  39  	  var_date,
16:00:48  40  	  in_created_by,
16:00:48  41  	  var_date,
16:00:48  42  	  in_created_by,
16:00:48  43  	  in_system_category_id,
16:00:48  44  	  in_instrument_type_id,
16:00:48  45  	  in_instrument_id,
16:00:48  46  	  NULL
16:00:48  47  	);
16:00:48  48  
16:00:48  49  	out_account_id := var_new_account_id;
16:00:48  50  END CREATE_ACCOUNT;
16:00:48  51  
16:00:48  52  /*************************************************************/
16:00:48  53  
16:00:48  54  PROCEDURE UPDATE_ACCOUNT (
16:00:48  55  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:00:48  56  	in_account_status_id  IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE DEFAULT NULL,
16:00:48  57  	in_suspend_date       IN ACCOUNT.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:48  58  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE,
16:00:48  59  	in_system_category_id IN ACCOUNT.SYSTEM_CATEGORY_ID%TYPE DEFAULT NULL,
16:00:48  60  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:48  61  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE DEFAULT NULL
16:00:48  62  ) AS
16:00:48  63  BEGIN
16:00:48  64  
16:00:48  65  	-- CREATE HISTORY
16:00:48  66  	PROCS_HISTORY_V20.CREATE_ACCOUNT_HISTORY(
16:00:48  67  	  in_account_id 	       => in_account_id,
16:00:48  68  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48  69  	);
16:00:48  70  
16:00:48  71  	UPDATE ACCOUNT SET
16:00:48  72  	  ACCOUNT_STATUS_ID  = NVL(in_account_status_id, ACCOUNT_STATUS_ID),
16:00:48  73  	  SUSPEND_DATE	     = NVL(in_suspend_date, SUSPEND_DATE),
16:00:48  74  	  UPDATED_BY	     = in_updated_by,
16:00:48  75  	  UPDATE_DATE	     = SYSDATE,
16:00:48  76  	  SYSTEM_CATEGORY_ID = NVL(in_system_category_id, SYSTEM_CATEGORY_ID),
16:00:48  77  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:00:48  78  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID)
16:00:48  79  	WHERE
16:00:48  80  	  ACCOUNT.ID = in_account_id;
16:00:48  81  
16:00:48  82  END UPDATE_ACCOUNT;
16:00:48  83  
16:00:48  84  /*************************************************************/
16:00:48  85  
16:00:48  86  PROCEDURE UPDATE_DEF_FIN_INSTRUMENT(
16:00:48  87  	in_account_id	      IN ACCOUNT.ID%TYPE,
16:00:48  88  	in_instrument_type_id IN ACCOUNT.INSTRUMENT_TYPE_ID%TYPE,
16:00:48  89  	in_instrument_id      IN ACCOUNT.INSTRUMENT_ID%TYPE,
16:00:48  90  	in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:00:48  91  ) AS
16:00:48  92  BEGIN
16:00:48  93  
16:00:48  94  	-- CREATE HISTORY
16:00:48  95  	PROCS_HISTORY_V20.CREATE_ACCOUNT_HISTORY(
16:00:48  96  	  in_account_id 	       => in_account_id,
16:00:48  97  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48  98  	);
16:00:48  99  
16:00:48 100  	UPDATE ACCOUNT SET
16:00:48 101  	  INSTRUMENT_TYPE_ID = in_instrument_type_id,
16:00:48 102  	  INSTRUMENT_ID      = in_instrument_id
16:00:48 103  	WHERE
16:00:48 104  	  ACCOUNT.ID = in_account_id;
16:00:48 105  
16:00:48 106  END;
16:00:48 107  
16:00:48 108  /*************************************************************/
16:00:48 109  
16:00:48 110  PROCEDURE READ_ACCOUNT (
16:00:48 111  	in_account_id  IN ACCOUNT.ID%TYPE,
16:00:48 112  	out_result_set OUT SYS_REFCURSOR
16:00:48 113  ) AS
16:00:48 114  BEGIN
16:00:48 115  	OPEN out_result_set FOR
16:00:48 116  	SELECT
16:00:48 117  	  ACCOUNT_STATUS_ID,
16:00:48 118  	  SUSPEND_DATE,
16:00:48 119  	  GROUP_ID
16:00:48 120  	FROM
16:00:48 121  	  ACCOUNT
16:00:48 122  	WHERE
16:00:48 123  	  ID = in_account_id;
16:00:48 124  END READ_ACCOUNT;
16:00:48 125  
16:00:48 126  /*************************************************************/
16:00:48 127  
16:00:48 128  PROCEDURE CREATE_ACCOUNT_NOTE (
16:00:48 129  	inout_account_note_id IN OUT ACCOUNT_NOTE.ID%TYPE,
16:00:48 130  	in_agent_id	      IN ACCOUNT_NOTE.AGENT_ID%TYPE,
16:00:48 131  	in_account_id	      IN ACCOUNT_NOTE.ACCOUNT_ID%TYPE,
16:00:48 132  	in_note 	      IN ACCOUNT_NOTE.NOTE%TYPE,
16:00:48 133  	in_created_by	      IN ACCOUNT_NOTE.CREATED_BY%TYPE
16:00:48 134  ) AS
16:00:48 135  BEGIN
16:00:48 136  	IF inout_account_note_id IS NULL THEN
16:00:48 137  	  SELECT
16:00:48 138  	    ACCN_ID_SEQ.nextVal into inout_account_note_id
16:00:48 139  	  FROM DUAL;
16:00:48 140  	END IF;
16:00:48 141  	INSERT INTO ACCOUNT_NOTE(
16:00:48 142  	  ID,
16:00:48 143  	  AGENT_ID,
16:00:48 144  	  ACCOUNT_ID,
16:00:48 145  	  NOTE,
16:00:48 146  	  CREATE_DATE,
16:00:48 147  	  CREATED_BY
16:00:48 148  	) VALUES (
16:00:48 149  	  inout_account_note_id,
16:00:48 150  	  in_agent_id,
16:00:48 151  	  in_account_id,
16:00:48 152  	  in_note,
16:00:48 153  	  SYSDATE,
16:00:48 154  	  in_created_by
16:00:48 155  	);
16:00:48 156  END CREATE_ACCOUNT_NOTE;
16:00:48 157  
16:00:48 158  END PROCS_ACCOUNT_CRU_V20;
16:00:48 159  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_ADDRESS(
16:00:48   4  	out_address_id	      OUT ADDRESS.ID%TYPE,
16:00:48   5  	in_address_id	      IN ADDRESS.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:48   7  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:48   8  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:48   9  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:48  10  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:48  11  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:48  12  	in_created_by	      IN ADDRESS.CREATED_BY%TYPE
16:00:48  13  ) AS
16:00:48  14  -- VARIABLES
16:00:48  15  var_address_id ADDRESS.ID%TYPE;
16:00:48  16  var_date DATE := SYSDATE;
16:00:48  17  BEGIN
16:00:48  18  	IF in_address_id IS NULL THEN
16:00:48  19  	  SELECT
16:00:48  20  	    ADDRESS_ID_SEQ.nextVal into var_address_id
16:00:48  21  	  FROM DUAL;
16:00:48  22  	ELSE
16:00:48  23  	  var_address_id := in_address_id;
16:00:48  24  	END IF;
16:00:48  25  	INSERT INTO
16:00:48  26  	  ADDRESS (
16:00:48  27  	    ID,
16:00:48  28  	    ADDRESS1,
16:00:48  29  	    ADDRESS2,
16:00:48  30  	    CITY,
16:00:48  31  	    STATE,
16:00:48  32  	    POSTAL_CODE,
16:00:48  33  	    COUNTRY,
16:00:48  34  	    CREATE_DATE,
16:00:48  35  	    CREATED_BY,
16:00:48  36  	    UPDATE_DATE,
16:00:48  37  	    UPDATED_BY
16:00:48  38  	  ) VALUES (
16:00:48  39  	    var_address_id,
16:00:48  40  	    in_address1,
16:00:48  41  	    in_address2,
16:00:48  42  	    in_city,
16:00:48  43  	    in_state,
16:00:48  44  	    in_postal_code,
16:00:48  45  	    in_country,
16:00:48  46  	    var_date,
16:00:48  47  	    in_created_by,
16:00:48  48  	    var_date,
16:00:48  49  	    in_created_by
16:00:48  50  	  );
16:00:48  51  
16:00:48  52  	out_address_id := var_address_id;
16:00:48  53  END CREATE_ADDRESS;
16:00:48  54  
16:00:48  55  PROCEDURE UPDATE_ADDRESS(
16:00:48  56  	in_address_id	      IN ADDRESS.ID%TYPE,
16:00:48  57  	in_address1	      IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:48  58  	in_address2	      IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:48  59  	in_city 	      IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:48  60  	in_state	      IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:48  61  	in_postal_code	      IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:48  62  	in_country	      IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:48  63  	in_updated_by	      IN ADDRESS.UPDATED_BY%TYPE
16:00:48  64  ) AS
16:00:48  65  BEGIN
16:00:48  66  
16:00:48  67  	-- Create history
16:00:48  68  	PROCS_HISTORY_V20.CREATE_ADDRESS_HISTORY(
16:00:48  69  	  in_address_id 		=> in_address_id,
16:00:48  70  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48  71  	);
16:00:48  72  
16:00:48  73  	UPDATE
16:00:48  74  	  ADDRESS
16:00:48  75  	SET
16:00:48  76  	  ADDRESS1 = NVL(in_address1, ADDRESS1),
16:00:48  77  	  ADDRESS2 = NVL(in_address2, ADDRESS2),
16:00:48  78  	  CITY = NVL(in_city, CITY),
16:00:48  79  	  STATE = NVL(in_state, STATE),
16:00:48  80  	  POSTAL_CODE = NVL(in_postal_code, POSTAL_CODE),
16:00:48  81  	  COUNTRY = NVL(in_country, COUNTRY),
16:00:48  82  	  UPDATE_DATE = SYSDATE,
16:00:48  83  	  UPDATED_BY = in_updated_by
16:00:48  84  	WHERE
16:00:48  85  	  ID = in_address_id;
16:00:48  86  
16:00:48  87  END UPDATE_ADDRESS;
16:00:48  88  
16:00:48  89  END PROCS_ADDRESS_CRU_V20;
16:00:48  90  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE ADD_AMAZON_APPSTORE(
16:00:48   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
16:00:48   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:48   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
16:00:48   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
16:00:48   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
16:00:48   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:48  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
16:00:48  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
16:00:48  12  ) AS
16:00:48  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE';
16:00:48  14  var_now	 DATE := SYSDATE;
16:00:48  15  BEGIN
16:00:48  16  	INSERT INTO CORE_OWNER.AMAZON_APPSTORE (
16:00:48  17  	  ID,
16:00:48  18  	  SUBSCRIPTION_ID,
16:00:48  19  	  USER_ID,
16:00:48  20  	  ITEM_TYPE,
16:00:48  21  	  START_DATE,
16:00:48  22  	  END_DATE,
16:00:48  23  	  SKU,
16:00:48  24  	  PURCHASE_TOKEN,
16:00:48  25  	  CREATE_DATE,
16:00:48  26  	  CREATED_BY,
16:00:48  27  	  UPDATE_DATE,
16:00:48  28  	  UPDATED_BY
16:00:48  29  	) VALUES (
16:00:48  30  	  CORE_OWNER.AAS_ID_SEQ.nextval,
16:00:48  31  	  in_subscription_id,
16:00:48  32  	  in_user_id,
16:00:48  33  	  in_item_type,
16:00:48  34  	  in_start_date,
16:00:48  35  	  in_end_date,
16:00:48  36  	  in_sku,
16:00:48  37  	  in_purchase_token,
16:00:48  38  	  var_now,
16:00:48  39  	  in_created_by,
16:00:48  40  	  var_now,
16:00:48  41  	  in_created_by
16:00:48  42  	);
16:00:48  43  END ADD_AMAZON_APPSTORE;
16:00:48  44  
16:00:48  45  	PROCEDURE CREATE_AMAZON_SUB(
16:00:48  46  /*
16:00:48  47  Throws exceptions:
16:00:48  48  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48  49  */
16:00:48  50  	  out_id	      OUT NUMBER,
16:00:48  51  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:00:48  52  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:00:48  53  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:00:48  54  ) AS
16:00:48  55  -- VARIABLES
16:00:48  56  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
16:00:48  57  var_current_date	DATE;
16:00:48  58  var_count 	NUMBER;
16:00:48  59  AMAZON_SUB_USED	EXCEPTION;
16:00:48  60  BEGIN
16:00:48  61  
16:00:48  62  	SELECT COUNT(1) INTO var_count
16:00:48  63  	FROM SUBSCRIPTION s, AMAZON_SUB am
16:00:48  64  	WHERE
16:00:48  65  	  am.AMAZON_ID = in_amazon_id
16:00:48  66  	  and am.subscription_id = s.id
16:00:48  67  	  and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
16:00:48  68  
16:00:48  69  	if var_count > 0 then
16:00:48  70  	  raise AMAZON_SUB_USED;
16:00:48  71  	end if;
16:00:48  72  
16:00:48  73  	SELECT
16:00:48  74  	  CORE_OWNER.AMAZON_SUB_ID_SEQ.NEXTVAL
16:00:48  75  	INTO
16:00:48  76  	  out_id
16:00:48  77  	FROM
16:00:48  78  	  dual
16:00:48  79  	;
16:00:48  80  
16:00:48  81  	SELECT
16:00:48  82  	  sysdate
16:00:48  83  	INTO
16:00:48  84  	  var_current_date
16:00:48  85  	FROM
16:00:48  86  	  dual
16:00:48  87  	;
16:00:48  88  
16:00:48  89  	INSERT INTO CORE_OWNER.AMAZON_SUB
16:00:48  90  	(
16:00:48  91  	  id,
16:00:48  92  	  subscription_id,
16:00:48  93  	  amazon_id,
16:00:48  94  	  create_date,
16:00:48  95  	  created_by,
16:00:48  96  	  update_date,
16:00:48  97  	  updated_by
16:00:48  98  	)
16:00:48  99  	VALUES
16:00:48 100  	(
16:00:48 101  	  out_id,
16:00:48 102  	  in_subscription_id,
16:00:48 103  	  in_amazon_id,
16:00:48 104  	  var_current_date,
16:00:48 105  	  in_created_by,
16:00:48 106  	  var_current_date,
16:00:48 107  	  in_created_by
16:00:48 108  	);
16:00:48 109  
16:00:48 110  EXCEPTION
16:00:48 111  WHEN AMAZON_SUB_USED THEN
16:00:48 112  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 113  	  SPROC_NAME, 'Amazon sub already used', SQLERRM);
16:00:48 114  WHEN DUP_VAL_ON_INDEX THEN
16:00:48 115  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 116  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:00:48 117  WHEN OTHERS THEN
16:00:48 118  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 119  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 120  END CREATE_AMAZON_SUB;
16:00:48 121  
16:00:48 122  END PROCS_AMAZON_CRU_V20;
16:00:48 123  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_CHARGE(
16:00:48   4  	out_charge_id	      OUT CHARGE.ID%TYPE,
16:00:48   5  	in_charge_id	      IN CHARGE.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_invoice_id	      IN CHARGE.INVOICE_ID%TYPE,
16:00:48   7  	in_transaction_id     IN CHARGE.TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:48   8  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE,
16:00:48   9  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE,
16:00:48  10  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE,
16:00:48  11  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:48  12  	in_created_by	      IN CHARGE.CREATED_BY%TYPE
16:00:48  13  ) AS
16:00:48  14  -- VARIABLES
16:00:48  15  var_charge_id CHARGE.ID%TYPE;
16:00:48  16  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48  17  var_date DATE := SYSDATE;
16:00:48  18  BEGIN
16:00:48  19  	IF in_charge_id IS NULL THEN
16:00:48  20  	  SELECT
16:00:48  21  	    CRG_ID_SEQ.nextVal into var_charge_id
16:00:48  22  	  FROM DUAL;
16:00:48  23  	ELSE
16:00:48  24  	  var_charge_id := in_charge_id;
16:00:48  25  	END IF;
16:00:48  26  	INSERT INTO
16:00:48  27  	  CHARGE (
16:00:48  28  	    ID,
16:00:48  29  	    INVOICE_ID,
16:00:48  30  	    TRANSACTION_ID,
16:00:48  31  	    INSTRUMENT_TYPE_ID,
16:00:48  32  	    INSTRUMENT_ID,
16:00:48  33  	    CHARGE_AMOUNT,
16:00:48  34  	    CHARGE_STATUS_ID,
16:00:48  35  	    CREATE_DATE,
16:00:48  36  	    CREATED_BY,
16:00:48  37  	    UPDATE_DATE,
16:00:48  38  	    UPDATED_BY
16:00:48  39  	  ) VALUES (
16:00:48  40  	    var_charge_id,
16:00:48  41  	    in_invoice_id,
16:00:48  42  	    in_transaction_id,
16:00:48  43  	    in_instrument_type_id,
16:00:48  44  	    in_instrument_id,
16:00:48  45  	    in_charge_amount,
16:00:48  46  	    in_charge_status_id,
16:00:48  47  	    var_date,
16:00:48  48  	    in_created_by,
16:00:48  49  	    var_date,
16:00:48  50  	    in_created_by
16:00:48  51  	  );
16:00:48  52  
16:00:48  53  	out_charge_id := var_charge_id;
16:00:48  54  END CREATE_CHARGE;
16:00:48  55  
16:00:48  56  PROCEDURE UPDATE_CHARGE(
16:00:48  57  	in_charge_id	      IN CHARGE.ID%TYPE,
16:00:48  58  	in_instrument_type_id IN CHARGE.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:48  59  	in_instrument_id      IN CHARGE.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:00:48  60  	in_charge_amount      IN CHARGE.CHARGE_AMOUNT%TYPE DEFAULT NULL,
16:00:48  61  	in_charge_status_id   IN CHARGE.CHARGE_STATUS_ID%TYPE DEFAULT NULL,
16:00:48  62  	in_updated_by	      IN CHARGE.UPDATED_BY%TYPE
16:00:48  63  ) AS
16:00:48  64  BEGIN
16:00:48  65  
16:00:48  66  	-- Create history
16:00:48  67  	PROCS_HISTORY_V20.CREATE_CHARGE_HISTORY(
16:00:48  68  	  in_charge_id		       => in_charge_id,
16:00:48  69  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48  70  	);
16:00:48  71  
16:00:48  72  	UPDATE
16:00:48  73  	  CHARGE
16:00:48  74  	SET
16:00:48  75  	  INSTRUMENT_TYPE_ID = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:00:48  76  	  INSTRUMENT_ID      = NVL(in_instrument_id, INSTRUMENT_ID),
16:00:48  77  	  CHARGE_AMOUNT      = NVL(in_charge_amount, CHARGE_AMOUNT),
16:00:48  78  	  CHARGE_STATUS_ID   = NVL(in_charge_status_id, CHARGE_STATUS_ID),
16:00:48  79  	  UPDATE_DATE	     = SYSDATE,
16:00:48  80  	  UPDATED_BY	     = in_updated_by
16:00:48  81  	WHERE
16:00:48  82  	  ID = in_charge_id;
16:00:48  83  
16:00:48  84  END UPDATE_CHARGE;
16:00:48  85  
16:00:48  86  END PROCS_CHARGE_CRU_V20;
16:00:48  87  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_CREDIT_CARD(
16:00:48   4  	out_credit_card_id	    OUT CREDIT_CARD.ID%TYPE,
16:00:48   5  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_account_id		    IN CREDIT_CARD.ACCOUNT_ID%TYPE,
16:00:48   7  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE,
16:00:48   8  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE,
16:00:48   9  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE,
16:00:48  10  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:00:48  11  	in_state		    IN CREDIT_CARD.STATE%TYPE,
16:00:48  12  	in_city 		    IN CREDIT_CARD.CITY%TYPE,
16:00:48  13  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE,
16:00:48  14  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE,
16:00:48  15  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:48  16  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:00:48  17  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE,
16:00:48  18  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE,
16:00:48  19  	in_chase_profile_id		in CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:00:48  20  	in_created_by		    IN CREDIT_CARD.CREATED_BY%TYPE,
16:00:48  21  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:00:48  22  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE,
16:00:48  23  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE
16:00:48  24  ) AS
16:00:48  25  -- VARIABLES
16:00:48  26  var_credit_card_id CREDIT_CARD.ID%TYPE;
16:00:48  27  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48  28  var_date DATE := SYSDATE;
16:00:48  29  BEGIN
16:00:48  30  	IF in_credit_card_id IS NULL THEN
16:00:48  31  	  SELECT
16:00:48  32  	    CC_ID_SEQ.nextVal into var_credit_card_id
16:00:48  33  	  FROM DUAL;
16:00:48  34  	ELSE
16:00:48  35  	  var_credit_card_id := in_credit_card_id;
16:00:48  36  	END IF;
16:00:48  37  	INSERT INTO CREDIT_CARD(
16:00:48  38  	    ID,
16:00:48  39  	    ACCOUNT_ID,
16:00:48  40  	    INSTRUMENT_NAME,
16:00:48  41  	    PRIVATE_CARD_HOLDER_NAME,
16:00:48  42  	    PRIVATE_STREET_ADDRESS,
16:00:48  43  	    PRIVATE_STREET_ADDRESS2,
16:00:48  44  	    STATE,
16:00:48  45  	    CITY,
16:00:48  46  	    POSTAL_CODE,
16:00:48  47  	    COUNTRY,
16:00:48  48  	    LAST_FOUR_CC,
16:00:48  49  	    EXPIRATION_DATE,
16:00:48  50  	    CREDIT_CARD_TYPE_ID,
16:00:48  51  	    SECRET_TOKEN,
16:00:48  52  	    CHASE_PROFILE_ID,
16:00:48  53  	    CREATE_DATE,
16:00:48  54  	    CREATED_BY,
16:00:48  55  	    UPDATE_DATE,
16:00:48  56  	    UPDATED_BY,
16:00:48  57  	    CREDIT_CARD_STATUS_ID,
16:00:48  58  	    PRIVATE_FIRST_NAME,
16:00:48  59  	    PRIVATE_LAST_NAME
16:00:48  60  	  ) VALUES (
16:00:48  61  	    var_credit_card_id,
16:00:48  62  	    in_account_id,
16:00:48  63  	    in_instrument_name,
16:00:48  64  	    in_private_card_holder_name,
16:00:48  65  	    in_private_street_address,
16:00:48  66  	    in_private_street_address2,
16:00:48  67  	    in_state,
16:00:48  68  	    in_city,
16:00:48  69  	    in_postal_code,
16:00:48  70  	    in_country,
16:00:48  71  	    in_last_four_cc,
16:00:48  72  	    in_expiration_date,
16:00:48  73  	    in_credit_card_type_id,
16:00:48  74  	    in_secret_token,
16:00:48  75  	    in_chase_profile_id,
16:00:48  76  	    var_date,
16:00:48  77  	    in_created_by,
16:00:48  78  	    var_date,
16:00:48  79  	    in_created_by,
16:00:48  80  	    in_credit_card_status_id,
16:00:48  81  	    in_private_first_name,
16:00:48  82  	    in_private_last_name
16:00:48  83  	  );
16:00:48  84  
16:00:48  85  	out_credit_card_id := var_credit_card_id;
16:00:48  86  END CREATE_CREDIT_CARD;
16:00:48  87  
16:00:48  88  /******************************************************************************/
16:00:48  89  
16:00:48  90  PROCEDURE UPDATE_CREDIT_CARD(
16:00:48  91  	in_credit_card_id	    IN CREDIT_CARD.ID%TYPE,
16:00:48  92  	in_instrument_name	    IN CREDIT_CARD.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:48  93  	in_private_card_holder_name IN CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME%TYPE DEFAULT NULL,
16:00:48  94  	in_private_street_address   IN CREDIT_CARD.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:48  95  	in_private_street_address2  IN CREDIT_CARD.PRIVATE_STREET_ADDRESS2%TYPE DEFAULT NULL,
16:00:48  96  	in_state		    IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:00:48  97  	in_city 		    IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:00:48  98  	in_postal_code		    IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:48  99  	in_country		    IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:00:48 100  	in_last_four_cc 	    IN CREDIT_CARD.LAST_FOUR_CC%TYPE DEFAULT NULL,
16:00:48 101  	in_expiration_date	    IN CREDIT_CARD.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:48 102  	in_credit_card_type_id	    IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:00:48 103  	in_secret_token 	    IN CREDIT_CARD.SECRET_TOKEN%TYPE DEFAULT NULL,
16:00:48 104  	in_chase_profile_id	    IN CREDIT_CARD.CHASE_PROFILE_ID%TYPE DEFAULT NULL,
16:00:48 105  	in_updated_by		    IN CREDIT_CARD.UPDATED_BY%TYPE,
16:00:48 106  	in_credit_card_status_id    IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:00:48 107  	in_private_first_name	    IN CREDIT_CARD.PRIVATE_FIRST_NAME%TYPE DEFAULT NULL,
16:00:48 108  	in_private_last_name	    IN CREDIT_CARD.PRIVATE_LAST_NAME%TYPE DEFAULT NULL
16:00:48 109  ) AS
16:00:48 110  BEGIN
16:00:48 111  
16:00:48 112  	-- Create history
16:00:48 113  	PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
16:00:48 114  	  in_credit_card_id	       => in_credit_card_id,
16:00:48 115  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48 116  	);
16:00:48 117  
16:00:48 118  	UPDATE CREDIT_CARD SET
16:00:48 119  	  INSTRUMENT_NAME	   = NVL(in_instrument_name, INSTRUMENT_NAME),
16:00:48 120  	  PRIVATE_CARD_HOLDER_NAME = NVL(in_private_card_holder_name, PRIVATE_CARD_HOLDER_NAME),
16:00:48 121  	  PRIVATE_STREET_ADDRESS   = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS),
16:00:48 122  	  PRIVATE_STREET_ADDRESS2  = NVL(in_private_street_address, PRIVATE_STREET_ADDRESS2),
16:00:48 123  	  STATE 		   = NVL(in_state, STATE),
16:00:48 124  	  CITY			   = NVL(in_city, CITY),
16:00:48 125  	  POSTAL_CODE		   = NVL(in_postal_code, POSTAL_CODE),
16:00:48 126  	  COUNTRY		   = NVL(in_country, COUNTRY),
16:00:48 127  	  LAST_FOUR_CC		   = NVL(in_last_four_cc, LAST_FOUR_CC),
16:00:48 128  	  EXPIRATION_DATE	   = NVL(in_expiration_date, EXPIRATION_DATE),
16:00:48 129  	  CREDIT_CARD_TYPE_ID	   = NVL(in_credit_card_type_id, CREDIT_CARD_TYPE_ID),
16:00:48 130  	  SECRET_TOKEN		   = NVL(in_secret_token, SECRET_TOKEN),
16:00:48 131  	  CHASE_PROFILE_ID	   = NVL(in_chase_profile_id, CHASE_PROFILE_ID),
16:00:48 132  	  UPDATE_DATE		   = SYSDATE,
16:00:48 133  	  UPDATED_BY		   = in_updated_by,
16:00:48 134  	  CREDIT_CARD_STATUS_ID    = NVL(in_credit_card_status_id, CREDIT_CARD_STATUS_ID),
16:00:48 135  	  PRIVATE_FIRST_NAME	   = NVL(in_private_first_name, PRIVATE_FIRST_NAME),
16:00:48 136  	  PRIVATE_LAST_NAME	   = NVL(in_private_last_name, PRIVATE_LAST_NAME)
16:00:48 137  	WHERE
16:00:48 138  	  ID = in_credit_card_id;
16:00:48 139  
16:00:48 140  END UPDATE_CREDIT_CARD;
16:00:48 141  
16:00:48 142  /******************************************************************************/
16:00:48 143  
16:00:48 144  PROCEDURE CREATE_PAYPAL(
16:00:48 145  	out_paypal_id			OUT PAYPAL.ID%TYPE,
16:00:48 146  	in_paypal_id			IN PAYPAL.ID%TYPE DEFAULT NULL,
16:00:48 147  	in_account_id			IN PAYPAL.ACCOUNT_ID%TYPE,
16:00:48 148  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:48 149  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:00:48 150  	in_created_by			IN PAYPAL.CREATED_BY%TYPE,
16:00:48 151  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:00:48 152  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:00:48 153  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE,
16:00:48 154  	in_state			IN PAYPAL.STATE%TYPE,
16:00:48 155  	in_city 			IN PAYPAL.CITY%TYPE,
16:00:48 156  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE,
16:00:48 157  	in_country			IN PAYPAL.COUNTRY%TYPE,
16:00:48 158  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE,
16:00:48 159  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:00:48 160  ) AS
16:00:48 161  -- VARIABLES
16:00:48 162  var_paypal_id PAYPAL.ID%TYPE;
16:00:48 163  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48 164  var_date DATE := SYSDATE;
16:00:48 165  BEGIN
16:00:48 166  	IF in_paypal_id IS NULL THEN
16:00:48 167  	  SELECT
16:00:48 168  	    PP_ID_SEQ.nextVal into var_paypal_id
16:00:48 169  	  FROM DUAL;
16:00:48 170  	ELSE
16:00:48 171  	  var_paypal_id := in_paypal_id;
16:00:48 172  	END IF;
16:00:48 173  	INSERT INTO PAYPAL(
16:00:48 174  	    ID,
16:00:48 175  	    ACCOUNT_ID,
16:00:48 176  	    INSTRUMENT_NAME,
16:00:48 177  	    PRIVATE_EMAIL_ADDRESS,
16:00:48 178  	    CREATE_DATE,
16:00:48 179  	    CREATED_BY,
16:00:48 180  	    UPDATE_DATE,
16:00:48 181  	    UPDATED_BY,
16:00:48 182  	    PAYPAL_STATUS_ID,
16:00:48 183  	    PRIVATE_STREET_ADDRESS,
16:00:48 184  	    PRIVATE_STREET_ADDRESS2,
16:00:48 185  	    STATE,
16:00:48 186  	    CITY,
16:00:48 187  	    POSTAL_CODE,
16:00:48 188  	    COUNTRY,
16:00:48 189  	    EXPIRATION_DATE,
16:00:48 190  	    SECRET_TOKEN
16:00:48 191  	  ) VALUES (
16:00:48 192  	    var_paypal_id,
16:00:48 193  	    in_account_id,
16:00:48 194  	    in_instrument_name,
16:00:48 195  	    in_private_email_address,
16:00:48 196  	    var_date,
16:00:48 197  	    in_created_by,
16:00:48 198  	    var_date,
16:00:48 199  	    in_created_by,
16:00:48 200  	    in_paypal_status_id,
16:00:48 201  	    in_paypal_prvt_street_address,
16:00:48 202  	    in_paypal_prvt_street_address2,
16:00:48 203  	    in_state,
16:00:48 204  	    in_city,
16:00:48 205  	    in_postal_code,
16:00:48 206  	    in_country,
16:00:48 207  	    in_expiration_date,
16:00:48 208  	    in_secret_token
16:00:48 209  	  );
16:00:48 210  	out_paypal_id := var_paypal_id;
16:00:48 211  END CREATE_PAYPAL;
16:00:48 212  
16:00:48 213  /******************************************************************************/
16:00:48 214  
16:00:48 215  PROCEDURE UPDATE_PAYPAL(
16:00:48 216  	in_paypal_id			IN PAYPAL.ID%TYPE,
16:00:48 217  	in_instrument_name		IN PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL,
16:00:48 218  	in_private_email_address	IN PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL,
16:00:48 219  	in_updated_by			IN PAYPAL.UPDATED_BY%TYPE,
16:00:48 220  	in_paypal_status_id		IN PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT NULL,
16:00:48 221  	in_paypal_prvt_street_address	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:48 222  	in_paypal_prvt_street_address2	IN PAYPAL.PRIVATE_STREET_ADDRESS%TYPE DEFAULT NULL,
16:00:48 223  	in_state			IN PAYPAL.STATE%TYPE DEFAULT NULL,
16:00:48 224  	in_city 			IN PAYPAL.CITY%TYPE DEFAULT NULL,
16:00:48 225  	in_postal_code			IN PAYPAL.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:48 226  	in_country			IN PAYPAL.COUNTRY%TYPE DEFAULT NULL,
16:00:48 227  	in_expiration_date		IN PAYPAL.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:48 228  	in_secret_token 		IN PAYPAL.SECRET_TOKEN%TYPE
16:00:48 229  ) AS
16:00:48 230  BEGIN
16:00:48 231  	-- Create history
16:00:48 232  	PROCS_HISTORY_V20.CREATE_PAYPAL_HISTORY(
16:00:48 233  	  in_paypal_id		       => in_paypal_id,
16:00:48 234  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48 235  	);
16:00:48 236  
16:00:48 237  	UPDATE PAYPAL SET
16:00:48 238  	  INSTRUMENT_NAME  = NVL(in_instrument_name, INSTRUMENT_NAME),
16:00:48 239  	  PRIVATE_EMAIL_ADDRESS    = NVL(in_private_email_address, PRIVATE_EMAIL_ADDRESS),
16:00:48 240  	  UPDATE_DATE	   = SYSDATE,
16:00:48 241  	  UPDATED_BY	   = in_updated_by,
16:00:48 242  	  PAYPAL_STATUS_ID = NVL(in_paypal_status_id, PAYPAL_STATUS_ID),
16:00:48 243  	  PRIVATE_STREET_ADDRESS  = NVL(in_paypal_prvt_street_address, PRIVATE_STREET_ADDRESS),
16:00:48 244  	  PRIVATE_STREET_ADDRESS2 = NVL(in_paypal_prvt_street_address2, PRIVATE_STREET_ADDRESS2),
16:00:48 245  	  STATE 		  = NVL(in_state, STATE),
16:00:48 246  	  CITY			  = NVL(in_city, CITY),
16:00:48 247  	  POSTAL_CODE		  = NVL(in_postal_code, POSTAL_CODE),
16:00:48 248  	  COUNTRY		  = NVL(in_country, COUNTRY),
16:00:48 249  	  EXPIRATION_DATE	  = NVL(in_expiration_date, EXPIRATION_DATE),
16:00:48 250  	  SECRET_TOKEN		  = NVL(in_secret_token, SECRET_TOKEN)
16:00:48 251  	WHERE
16:00:48 252  	  ID = in_paypal_id;
16:00:48 253  END UPDATE_PAYPAL;
16:00:48 254  
16:00:48 255  /******************************************************************************/
16:00:48 256  
16:00:48 257  PROCEDURE CREATE_GIFT_CERTIFICATE(
16:00:48 258  	out_gift_certificate_id       OUT GIFT_CERTIFICATE.ID%TYPE,
16:00:48 259  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE DEFAULT NULL,
16:00:48 260  	in_purchaser_group_id	      IN GIFT_CERTIFICATE.PURCHASER_GROUP_ID%TYPE,
16:00:48 261  	in_purchaser_invoice_id       IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:48 262  	in_offer_chain_id	      IN GIFT_CERTIFICATE.OFFER_CHAIN_ID%TYPE,
16:00:48 263  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:48 264  	in_purchase_date	      IN GIFT_CERTIFICATE.PURCHASE_DATE%TYPE,
16:00:48 265  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:00:48 266  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE,
16:00:48 267  	in_created_by		      IN GIFT_CERTIFICATE.CREATED_BY%TYPE,
16:00:48 268  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:00:48 269  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:00:48 270  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:00:48 271  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:00:48 272  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE,
16:00:48 273  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE,
16:00:48 274  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:00:48 275  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:00:48 276  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:00:48 277  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:48 278  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:00:48 279  ) AS
16:00:48 280  -- VARIABLES
16:00:48 281  var_gift_certificate_id GIFT_CERTIFICATE.ID%TYPE;
16:00:48 282  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48 283  var_date DATE := SYSDATE;
16:00:48 284  BEGIN
16:00:48 285  	IF in_gift_certificate_id IS NULL THEN
16:00:48 286  	  SELECT
16:00:48 287  	    GC_ID_SEQ.nextVal into var_gift_certificate_id
16:00:48 288  	  FROM DUAL;
16:00:48 289  	ELSE
16:00:48 290  	  var_gift_certificate_id := in_gift_certificate_id;
16:00:48 291  	END IF;
16:00:48 292  	INSERT INTO GIFT_CERTIFICATE (
16:00:48 293  	    ID,
16:00:48 294  	    PURCHASER_GROUP_ID,
16:00:48 295  	    PURCHASE_INVOICE_ID,
16:00:48 296  	    OFFER_CHAIN_ID,
16:00:48 297  	    EXPIRATION_DATE,
16:00:48 298  	    PURCHASE_DATE,
16:00:48 299  	    GIFT_CERTIFICATE_STATUS_ID,
16:00:48 300  	    CODE,
16:00:48 301  	    CREATE_DATE,
16:00:48 302  	    CREATED_BY,
16:00:48 303  	    UPDATE_DATE,
16:00:48 304  	    UPDATED_BY,
16:00:48 305  	    RECIPIENT_NAME,
16:00:48 306  	    GIFT_MESSAGE,
16:00:48 307  	    RECIPIENT_EMAIL,
16:00:48 308  	    FINALIZED_INVOICE_ID,
16:00:48 309  	    SENDER_EMAIL,
16:00:48 310  	    SENDER_NAME,
16:00:48 311  	    REDEMPTION_DATE,
16:00:48 312  	    CANCELATION_DATE,
16:00:48 313  	    REDEEMER_GROUP_ID,
16:00:48 314  	    RECIPIENT_ADDRESS_ID,
16:00:48 315  	    RECIPIENT_NOTIFY_DATE
16:00:48 316  	  ) VALUES(
16:00:48 317  	    var_gift_certificate_id,
16:00:48 318  	    in_purchaser_group_id,
16:00:48 319  	    in_purchaser_invoice_id,
16:00:48 320  	    in_offer_chain_id,
16:00:48 321  	    in_expiration_date,
16:00:48 322  	    in_purchase_date,
16:00:48 323  	    in_gift_certificate_status_id,
16:00:48 324  	    in_code,
16:00:48 325  	    var_date,
16:00:48 326  	    in_created_by,
16:00:48 327  	    var_date,
16:00:48 328  	    in_created_by,
16:00:48 329  	    in_recipient_name,
16:00:48 330  	    in_gift_message,
16:00:48 331  	    in_recipient_email,
16:00:48 332  	    in_finalized_invoice_id,
16:00:48 333  	    in_sender_email,
16:00:48 334  	    in_sender_name,
16:00:48 335  	    in_redemption_date,
16:00:48 336  	    in_cancelation_date,
16:00:48 337  	    in_redeemer_group_id,
16:00:48 338  	    in_recipient_address_id,
16:00:48 339  	    in_recipient_notify_date
16:00:48 340  	  );
16:00:48 341  
16:00:48 342  	out_gift_certificate_id := var_gift_certificate_id;
16:00:48 343  END CREATE_GIFT_CERTIFICATE;
16:00:48 344  
16:00:48 345  /******************************************************************************/
16:00:48 346  
16:00:48 347  PROCEDURE UPDATE_GIFT_CERTIFICATE(
16:00:48 348  	in_gift_certificate_id	      IN GIFT_CERTIFICATE.ID%TYPE,
16:00:48 349  	in_expiration_date	      IN GIFT_CERTIFICATE.EXPIRATION_DATE%TYPE DEFAULT NULL,
16:00:48 350  	in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE DEFAULT NULL,
16:00:48 351  	in_code 		      IN GIFT_CERTIFICATE.CODE%TYPE DEFAULT NULL,
16:00:48 352  	in_updated_by		      IN GIFT_CERTIFICATE.UPDATED_BY%TYPE,
16:00:48 353  	in_recipient_name	      IN GIFT_CERTIFICATE.RECIPIENT_NAME%TYPE DEFAULT NULL,
16:00:48 354  	in_gift_message 	      IN GIFT_CERTIFICATE.GIFT_MESSAGE%TYPE DEFAULT NULL,
16:00:48 355  	in_recipient_email	      IN GIFT_CERTIFICATE.RECIPIENT_EMAIL%TYPE DEFAULT NULL,
16:00:48 356  	in_finalized_invoice_id       IN GIFT_CERTIFICATE.FINALIZED_INVOICE_ID%TYPE DEFAULT NULL,
16:00:48 357  	in_sender_email 	      IN GIFT_CERTIFICATE.SENDER_EMAIL%TYPE DEFAULT NULL,
16:00:48 358  	in_sender_name		      IN GIFT_CERTIFICATE.SENDER_NAME%TYPE DEFAULT NULL,
16:00:48 359  	in_redemption_date	      IN GIFT_CERTIFICATE.REDEMPTION_DATE%TYPE DEFAULT NULL,
16:00:48 360  	in_cancelation_date	      IN GIFT_CERTIFICATE.CANCELATION_DATE%TYPE DEFAULT NULL,
16:00:48 361  	in_redeemer_group_id	      IN GIFT_CERTIFICATE.REDEEMER_GROUP_ID%TYPE DEFAULT NULL,
16:00:48 362  	in_recipient_address_id       IN GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:48 363  	in_redeemer_address_id	      IN GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID%TYPE DEFAULT NULL,
16:00:48 364  	in_recipient_notify_date      IN GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE%TYPE DEFAULT NULL
16:00:48 365  ) AS
16:00:48 366  BEGIN
16:00:48 367  
16:00:48 368  	-- Create history
16:00:48 369  	PROCS_HISTORY_V20.CREATE_GIFT_CERT_HISTORY(
16:00:48 370  	  in_gift_certificate_id       => in_gift_certificate_id,
16:00:48 371  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48 372  	);
16:00:48 373  
16:00:48 374  	UPDATE GIFT_CERTIFICATE SET
16:00:48 375  	  EXPIRATION_DATE	     = NVL(in_expiration_date, EXPIRATION_DATE),
16:00:48 376  	  GIFT_CERTIFICATE_STATUS_ID = NVL(in_gift_certificate_status_id, GIFT_CERTIFICATE_STATUS_ID),
16:00:48 377  	  CODE			     = NVL(in_code, CODE),
16:00:48 378  	  UPDATE_DATE		     = SYSDATE,
16:00:48 379  	  UPDATED_BY		     = in_updated_by,
16:00:48 380  	  RECIPIENT_NAME	     = NVL(in_recipient_name, RECIPIENT_NAME),
16:00:48 381  	  GIFT_MESSAGE		     = NVL(in_gift_message, GIFT_MESSAGE),
16:00:48 382  	  RECIPIENT_EMAIL	     = NVL(in_recipient_email, RECIPIENT_EMAIL),
16:00:48 383  	  FINALIZED_INVOICE_ID	     = NVL(in_finalized_invoice_id, FINALIZED_INVOICE_ID),
16:00:48 384  	  SENDER_EMAIL		     = NVL(in_sender_email, SENDER_EMAIL),
16:00:48 385  	  SENDER_NAME		     = NVL(in_sender_name, SENDER_NAME),
16:00:48 386  	  REDEMPTION_DATE	     = NVL(in_redemption_date, REDEMPTION_DATE),
16:00:48 387  	  CANCELATION_DATE	     = NVL(in_cancelation_date, CANCELATION_DATE),
16:00:48 388  	  REDEEMER_GROUP_ID	     = NVL(in_redeemer_group_id, REDEEMER_GROUP_ID),
16:00:48 389  	  RECIPIENT_ADDRESS_ID	     = NVL(in_recipient_address_id, RECIPIENT_ADDRESS_ID),
16:00:48 390  	  REDEEMER_ADDRESS_ID	     = NVL(in_redeemer_address_id, REDEEMER_ADDRESS_ID),
16:00:48 391  	  RECIPIENT_NOTIFY_DATE      = NVL(in_recipient_notify_date, RECIPIENT_NOTIFY_DATE)
16:00:48 392  	WHERE
16:00:48 393  	  ID = in_gift_certificate_id;
16:00:48 394  
16:00:48 395  END UPDATE_GIFT_CERTIFICATE;
16:00:48 396  
16:00:48 397  END PROCS_FIN_INSTRUMENTS_CRU_V20;
16:00:48 398  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE UPDATE_SUBSCRIPTION_SHARE (
16:00:48   4  	in_id		       IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:48   5  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE DEFAULT NULL,
16:00:48   6  	in_borrower_account_id IN SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%TYPE DEFAULT NULL,
16:00:48   7  	in_ip_address	       IN SUBSCRIPTION_SHARE.IP_ADDRESS%TYPE DEFAULT NULL,
16:00:48   8  	in_start_date	       IN SUBSCRIPTION_SHARE.START_DATE%TYPE DEFAULT NULL,
16:00:48   9  	in_end_date	       IN SUBSCRIPTION_SHARE.END_DATE%TYPE DEFAULT NULL,
16:00:48  10  	in_needs_entitlements  IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:00:48  11  	in_updated_by	       IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:48  12  ) AS
16:00:48  13  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SUBSCRIPTION_SHARE';
16:00:48  14  BEGIN
16:00:48  15  	UPDATE SUBSCRIPTION_SHARE SET
16:00:48  16  	  GROUP_ACCOUNT_ID     = NVL(in_group_account_id,GROUP_ACCOUNT_ID),
16:00:48  17  	  BORROWER_ACCOUNT_ID  = NVL(in_borrower_account_id,BORROWER_ACCOUNT_ID),
16:00:48  18  	  IP_ADDRESS	       = NVL(in_ip_address,IP_ADDRESS),
16:00:48  19  	  START_DATE	       = NVL(in_start_date,START_DATE),
16:00:48  20  	  END_DATE	       = NVL(in_end_date,END_DATE),
16:00:48  21  	  NEEDS_ENTITLEMENTS   = NVL(in_needs_entitlements,NEEDS_ENTITLEMENTS),
16:00:48  22  	  UPDATED_BY	       = in_updated_by,
16:00:48  23  	  UPDATE_DATE	       = SYSDATE
16:00:48  24  	WHERE
16:00:48  25  	  SUBSCRIPTION_SHARE.ID = in_id;
16:00:48  26  EXCEPTION
16:00:48  27  	WHEN OTHERS THEN
16:00:48  28  	  Procs_Common_V20.Throw_Exception(APP_EXCEPTION_CODES_V20.Internal_Error,
16:00:48  29  	    SPROC_NAME, 'Error while updating subscription share', SQLERRM);
16:00:48  30  END UPDATE_SUBSCRIPTION_SHARE;
16:00:48  31  
16:00:48  32  PROCEDURE CREATE_GROUP_ACCOUNT (
16:00:48  33  	in_subscription_id	 IN NUMBER,
16:00:48  34  	in_group_name		 IN VARCHAR2,
16:00:48  35  	in_first_name		 IN VARCHAR2,
16:00:48  36  	in_last_name		 IN VARCHAR2,
16:00:48  37  	in_email		 IN VARCHAR2,
16:00:48  38  	in_phone		 IN VARCHAR2,
16:00:48  39  	in_organization_type	 IN VARCHAR2,
16:00:48  40  	in_seats		 IN NUMBER,
16:00:48  41  	in_seat_ttl_in_hours	 IN NUMBER,
16:00:48  42  	in_ip			 IN NUMBER,
16:00:48  43  	in_created_by		 IN VARCHAR2
16:00:48  44  ) AS
16:00:48  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
16:00:48  46  var_now DATE;
16:00:48  47  BEGIN
16:00:48  48  
16:00:48  49  	SELECT
16:00:48  50  	  SYSDATE INTO var_now
16:00:48  51  	FROM dual;
16:00:48  52  
16:00:48  53  	INSERT INTO GROUP_ACCOUNT (
16:00:48  54  	  id,
16:00:48  55  	  subscription_id,
16:00:48  56  	  group_name,
16:00:48  57  	  first_name,
16:00:48  58  	  last_name,
16:00:48  59  	  email,
16:00:48  60  	  phone,
16:00:48  61  	  organization_type,
16:00:48  62  	  seats,
16:00:48  63  	  seat_ttl_in_hours,
16:00:48  64  	  ip,
16:00:48  65  	  create_date,
16:00:48  66  	  created_by,
16:00:48  67  	  update_date,
16:00:48  68  	  updated_by
16:00:48  69  	) VALUES (
16:00:48  70  	  core_owner.GRPACCNT_ID_SEQ.NEXTVAL,
16:00:48  71  	  in_subscription_id,
16:00:48  72  	  in_group_name,
16:00:48  73  	  in_first_name,
16:00:48  74  	  in_last_name,
16:00:48  75  	  in_email,
16:00:48  76  	  in_phone,
16:00:48  77  	  in_organization_type,
16:00:48  78  	  in_seats,
16:00:48  79  	  in_seat_ttl_in_hours,
16:00:48  80  	  in_ip,
16:00:48  81  	  var_now,
16:00:48  82  	  in_created_by,
16:00:48  83  	  var_now,
16:00:48  84  	  in_created_by
16:00:48  85  	);
16:00:48  86  
16:00:48  87  EXCEPTION
16:00:48  88  	WHEN PROGRAM_ERROR THEN
16:00:48  89  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:48  90  	    SPROC_NAME, 'Program error when inserting group account', SQLERRM);
16:00:48  91  	WHEN OTHERS THEN
16:00:48  92  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48  93  	    SPROC_NAME, 'Unknown error when inserting group account', SQLERRM);
16:00:48  94  END CREATE_GROUP_ACCOUNT;
16:00:48  95  
16:00:48  96  
16:00:48  97  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:00:48  98  	in_group_account_id    IN NUMBER,
16:00:48  99  	in_borrower_account_id IN NUMBER,
16:00:48 100  	in_ip_address	       IN VARCHAR2,
16:00:48 101  	in_email_domain        IN VARCHAR2,
16:00:48 102  	in_start_date	       IN DATE,
16:00:48 103  	in_end_date	       IN DATE,
16:00:48 104  	in_created_by	       IN VARCHAR2
16:00:48 105  ) AS
16:00:48 106  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
16:00:48 107  var_now DATE;
16:00:48 108  BEGIN
16:00:48 109  
16:00:48 110  	SELECT
16:00:48 111  	  SYSDATE INTO var_now
16:00:48 112  	FROM dual;
16:00:48 113  
16:00:48 114  	INSERT INTO SUBSCRIPTION_SHARE (
16:00:48 115  	  id,
16:00:48 116  	  group_account_id,
16:00:48 117  	  borrower_account_id,
16:00:48 118  	  ip_address,
16:00:48 119  	  email_domain,
16:00:48 120  	  start_date,
16:00:48 121  	  end_date,
16:00:48 122  	  create_date,
16:00:48 123  	  created_by,
16:00:48 124  	  update_date,
16:00:48 125  	  updated_by
16:00:48 126  	) VALUES (
16:00:48 127  	  core_owner.SUBSCRIPTIONSHARE_ID_SEQ.NEXTVAL,
16:00:48 128  	  in_group_account_id,
16:00:48 129  	  in_borrower_account_id,
16:00:48 130  	  in_ip_address,
16:00:48 131  	  in_email_domain,
16:00:48 132  	  in_start_date,
16:00:48 133  	  in_end_date,
16:00:48 134  	  var_now,
16:00:48 135  	  in_created_by,
16:00:48 136  	  var_now,
16:00:48 137  	  in_created_by
16:00:48 138  	);
16:00:48 139  
16:00:48 140  EXCEPTION
16:00:48 141  	WHEN PROGRAM_ERROR THEN
16:00:48 142  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:48 143  	    SPROC_NAME, 'Program error when inserting subscription share', SQLERRM);
16:00:48 144  END CREATE_SUBSCRIPTION_SHARE;
16:00:48 145  
16:00:48 146  -- Eh, I don't like the cru packages at all
16:00:48 147  -- the idea of code reuse in PL/SQL is still lost on me
16:00:48 148  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID(
16:00:48 149  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:48 150  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:48 151  ) AS
16:00:48 152  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
16:00:48 153  BEGIN
16:00:48 154  	update
16:00:48 155  	  GROUP_ACCOUNT_IP_RANGE IR
16:00:48 156  	set
16:00:48 157  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_INACTIVE,
16:00:48 158  	  IR.UPDATED_BY = in_updated_by,
16:00:48 159  	  IR.UPDATE_DATE = sysdate
16:00:48 160  	where
16:00:48 161  	  IR.GROUP_ACCOUNT_ID = in_group_account_id and
16:00:48 162  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
16:00:48 163  	;
16:00:48 164  EXCEPTION
16:00:48 165  WHEN OTHERS THEN
16:00:48 166  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 167  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 168  END DISABLE_IP_RANGES_BY_GA_ID;
16:00:48 169  
16:00:48 170  PROCEDURE DISABLE_IP_RANGE_BY_ID(
16:00:48 171  	in_id	IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:00:48 172  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:48 173  ) AS
16:00:48 174  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
16:00:48 175  BEGIN
16:00:48 176  	update
16:00:48 177  	  GROUP_ACCOUNT_IP_RANGE IR
16:00:48 178  	set
16:00:48 179  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_INACTIVE,
16:00:48 180  	  IR.UPDATED_BY = in_updated_by,
16:00:48 181  	  IR.UPDATE_DATE = sysdate
16:00:48 182  	where
16:00:48 183  	  IR.ID = in_id and
16:00:48 184  	  IR.GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
16:00:48 185  	;
16:00:48 186  raise no_data_found;
16:00:48 187  EXCEPTION
16:00:48 188  WHEN OTHERS THEN
16:00:48 189  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 190  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:00:48 191  END DISABLE_IP_RANGE_BY_ID;
16:00:48 192  
16:00:48 193  PROCEDURE ADD_IP_RANGE (
16:00:48 194  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:48 195  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:00:48 196  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:48 197  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:48 198  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:00:48 199  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:00:48 200  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:00:48 201  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:00:48 202  ) AS
16:00:48 203  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
16:00:48 204  BEGIN
16:00:48 205  	  INSERT INTO GROUP_ACCOUNT_IP_RANGE (
16:00:48 206  	    ID,
16:00:48 207  	    GROUP_ACCOUNT_ID,
16:00:48 208  	    MINIMUM_IP_STRING,
16:00:48 209  	    MINIMUM_IP_LOW,
16:00:48 210  	    MINIMUM_IP_HIGH,
16:00:48 211  	    MAXIMUM_IP_STRING,
16:00:48 212  	    MAXIMUM_IP_LOW,
16:00:48 213  	    MAXIMUM_IP_HIGH,
16:00:48 214  	    CREATED_BY,
16:00:48 215  	    CREATE_DATE,
16:00:48 216  	    UPDATED_BY,
16:00:48 217  	    UPDATE_DATE,
16:00:48 218  	    GROUP_ACC_IP_RNG_STATUS_ID
16:00:48 219  	  )
16:00:48 220  	  VALUES (
16:00:48 221  	    GROUPACCOUNTIPRANGE_ID_SEQ.nextval,
16:00:48 222  	    in_group_account_id,
16:00:48 223  	    in_minimum_ip_string,
16:00:48 224  	    in_minimum_ip_low,
16:00:48 225  	    in_minimum_ip_high,
16:00:48 226  	    in_maximum_ip_string,
16:00:48 227  	    in_maximum_ip_low,
16:00:48 228  	    in_maximum_ip_high,
16:00:48 229  	    in_created_by,
16:00:48 230  	    sysdate,
16:00:48 231  	    in_created_by,
16:00:48 232  	    sysdate,
16:00:48 233  	    GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
16:00:48 234  	  );
16:00:48 235  EXCEPTION
16:00:48 236  WHEN OTHERS THEN
16:00:48 237  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 238  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 239  END ADD_IP_RANGE;
16:00:48 240  
16:00:48 241  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:00:48 242  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:48 243  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:48 244  ) AS
16:00:48 245  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
16:00:48 246  BEGIN
16:00:48 247  	update
16:00:48 248  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:00:48 249  	set
16:00:48 250  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT,
16:00:48 251  	  ED.UPDATED_BY = in_updated_by,
16:00:48 252  	  ED.UPDATE_DATE = sysdate
16:00:48 253  	where
16:00:48 254  	  ED.GROUP_ACCOUNT_ID = in_group_account_id and
16:00:48 255  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT
16:00:48 256  	;
16:00:48 257  EXCEPTION
16:00:48 258  WHEN OTHERS THEN
16:00:48 259  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 260  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 261  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
16:00:48 262  
16:00:48 263  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID(
16:00:48 264  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:48 265  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:48 266  ) AS
16:00:48 267  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
16:00:48 268  BEGIN
16:00:48 269  	update
16:00:48 270  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:00:48 271  	set
16:00:48 272  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT,
16:00:48 273  	  ED.UPDATED_BY = in_updated_by,
16:00:48 274  	  ED.UPDATE_DATE = sysdate
16:00:48 275  	where
16:00:48 276  	  ED.ID = in_id and
16:00:48 277  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT
16:00:48 278  	;
16:00:48 279  EXCEPTION
16:00:48 280  WHEN OTHERS THEN
16:00:48 281  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 282  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:00:48 283  END DISABLE_EMAIL_DOMAIN_BY_ID;
16:00:48 284  
16:00:48 285  
16:00:48 286  PROCEDURE ENABLE_EMAIL_DOMAIN_BY_ID(
16:00:48 287  	in_id	IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:48 288  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:48 289  ) AS
16:00:48 290  SPROC_NAME CONSTANT VARCHAR2(32) := 'ENABLE_EMAIL_DOMAIN_BY_ID';
16:00:48 291  BEGIN
16:00:48 292  	update
16:00:48 293  	  GROUP_ACCOUNT_EMAIL_DOMAIN ED
16:00:48 294  	set
16:00:48 295  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT,
16:00:48 296  	  ED.UPDATED_BY = in_updated_by,
16:00:48 297  	  ED.UPDATE_DATE = sysdate
16:00:48 298  	where
16:00:48 299  	  ED.ID = in_id and
16:00:48 300  	  ED.IS_ACTIVE = GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_INACT
16:00:48 301  	;
16:00:48 302  EXCEPTION
16:00:48 303  WHEN OTHERS THEN
16:00:48 304  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 305  	  SPROC_NAME, 'Unknown error '||in_id, SQLERRM);
16:00:48 306  END ENABLE_EMAIL_DOMAIN_BY_ID;
16:00:48 307  
16:00:48 308  
16:00:48 309  PROCEDURE ADD_EMAIL_DOMAIN (
16:00:48 310  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:48 311  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:48 312  	in_is_active IN  GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:00:48 313  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:00:48 314  ) AS
16:00:48 315  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
16:00:48 316  BEGIN
16:00:48 317  	  INSERT INTO GROUP_ACCOUNT_EMAIL_DOMAIN (
16:00:48 318  	    ID,
16:00:48 319  	    GROUP_ACCOUNT_ID,
16:00:48 320  	    EMAIL_DOMAIN,
16:00:48 321  		IS_ACTIVE,
16:00:48 322  	    CREATED_BY,
16:00:48 323  	    CREATE_DATE,
16:00:48 324  	    UPDATED_BY,
16:00:48 325  	    UPDATE_DATE
16:00:48 326  	  )
16:00:48 327  	  VALUES (
16:00:48 328  	    GROUPACCOUNTEMAILDOMAIN_SEQ.nextval,
16:00:48 329  	    in_group_account_id,
16:00:48 330  		in_email_domain,
16:00:48 331  		in_is_active,
16:00:48 332  		in_created_by,
16:00:48 333  	    sysdate,
16:00:48 334  	    in_created_by,
16:00:48 335  	    sysdate
16:00:48 336  	  );
16:00:48 337  EXCEPTION
16:00:48 338  WHEN DUP_VAL_ON_INDEX THEN
16:00:48 339  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:48 340  	  SPROC_NAME, 'Unique Constraint Violated', SQLERRM);
16:00:48 341  WHEN OTHERS THEN
16:00:48 342  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 343  	  SPROC_NAME, 'Unknown error 1', SQLERRM);
16:00:48 344  END ADD_EMAIL_DOMAIN;
16:00:48 345  
16:00:48 346  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:00:48 347  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:48 348  	in_group_name		 IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:00:48 349  	in_first_name		 IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:00:48 350  	in_last_name		 IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:00:48 351  	in_email		 IN GROUP_ACCOUNT.EMAIL%TYPE,
16:00:48 352  	in_phone		 IN GROUP_ACCOUNT.PHONE%TYPE,
16:00:48 353  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:48 354  ) AS
16:00:48 355  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT';
16:00:48 356  BEGIN
16:00:48 357  	update
16:00:48 358  	  group_account
16:00:48 359  	set
16:00:48 360  	  group_name = nvl(in_group_name, group_name),
16:00:48 361  	  first_name = nvl(in_first_name, first_name),
16:00:48 362  	  last_name = nvl(in_last_name, last_name),
16:00:48 363  	  email = nvl(in_email, email),
16:00:48 364  	  phone = nvl(in_phone, phone),
16:00:48 365  	  updated_by = in_updated_by,
16:00:48 366  	  update_date = sysdate
16:00:48 367  	where
16:00:48 368  	  id = in_group_account_id;
16:00:48 369  
16:00:48 370  	if(sql%rowcount = 0) then
16:00:48 371  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 372  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:00:48 373  	end if;
16:00:48 374  EXCEPTION
16:00:48 375  	WHEN OTHERS THEN
16:00:48 376  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:48 377  	    SPROC_NAME, 'Error while updating group account', SQLERRM);
16:00:48 378  END UPDATE_GROUP_ACCOUNT;
16:00:48 379  
16:00:48 380  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:00:48 381  	in_group_account_id	 IN GROUP_ACCOUNT.ID%TYPE,
16:00:48 382  	in_seats		 IN GROUP_ACCOUNT.SEATS%TYPE,
16:00:48 383  	in_updated_by		 IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:48 384  ) AS
16:00:48 385  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GROUP_ACCOUNT_SEATS';
16:00:48 386  var_subscription_id NUMBER;
16:00:48 387  var_seats NUMBER;
16:00:48 388  BEGIN
16:00:48 389  	select subscription_id, seats into var_subscription_id, var_seats
16:00:48 390  	from group_account
16:00:48 391  	where id = in_group_account_id;
16:00:48 392  
16:00:48 393  	update
16:00:48 394  	  group_account
16:00:48 395  	set
16:00:48 396  	  seats = in_seats,
16:00:48 397  	  updated_by = in_updated_by,
16:00:48 398  	  update_date = sysdate
16:00:48 399  	where
16:00:48 400  	  id = in_group_account_id;
16:00:48 401  
16:00:48 402  	if(sql%rowcount = 0) then
16:00:48 403  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 404  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:00:48 405  	end if;
16:00:48 406  
16:00:48 407  	PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:48 408  	  in_subscription_id => var_subscription_id,
16:00:48 409  	  in_agent_id	     => 0,
16:00:48 410  	  in_note	     => 'seats updated from '||var_seats||' to '||in_seats,
16:00:48 411  	  in_created_by      => in_updated_by
16:00:48 412  	);
16:00:48 413  EXCEPTION
16:00:48 414  	WHEN NO_DATA_FOUND THEN
16:00:48 415  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:48 416  	  SPROC_NAME, 'Group Account not found', SQLERRM);
16:00:48 417  	WHEN OTHERS THEN
16:00:48 418  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:48 419  	    SPROC_NAME, 'Error while updating group account seats', SQLERRM);
16:00:48 420  END UPDATE_GROUP_ACCOUNT_SEATS;
16:00:48 421  
16:00:48 422  END PROCS_GROUP_ACCOUNT_CRU_V20;
16:00:48 423  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_INVOICE (
16:00:48   4  	out_invoice_id		       OUT INVOICE.ID%TYPE,
16:00:48   5  	in_invoice_id		       IN INVOICE.ID%TYPE DEFAULT NULL,
16:00:48   6  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE,
16:00:48   7  	in_tax_exempt_id	       IN INVOICE.TAX_EXEMPT_ID%TYPE,
16:00:48   8  	in_created_by		       IN INVOICE.CREATED_BY%TYPE
16:00:48   9  ) AS
16:00:48  10  -- VARIABLES
16:00:48  11  var_invoice_id INVOICE.ID%TYPE;
16:00:48  12  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:48  13  var_date DATE := SYSDATE;
16:00:48  14  BEGIN
16:00:48  15  	IF in_invoice_id IS NULL THEN
16:00:48  16  	  SELECT
16:00:48  17  	    INV_ID_SEQ.nextVal into var_invoice_id
16:00:48  18  	  FROM DUAL;
16:00:48  19  	ELSE
16:00:48  20  	  var_invoice_id := in_invoice_id;
16:00:48  21  	END IF;
16:00:48  22  	INSERT INTO
16:00:48  23  	  INVOICE (
16:00:48  24  	    ID,
16:00:48  25  	    INVOICE_STATUS_ID,
16:00:48  26  	    CREATE_DATE,
16:00:48  27  	    CREATED_BY,
16:00:48  28  	    UPDATE_DATE,
16:00:48  29  	    UPDATED_BY,
16:00:48  30  	    TAX_EXEMPT_ID,
16:00:48  31  	    IS_TAX_CALCULATION_NEEDED
16:00:48  32  	  ) VALUES (
16:00:48  33  	    var_invoice_id,
16:00:48  34  	    in_invoice_status_id,
16:00:48  35  	    var_date,
16:00:48  36  	    in_created_by,
16:00:48  37  	    var_date,
16:00:48  38  	    in_created_by,
16:00:48  39  	    in_tax_exempt_id,
16:00:48  40  	    0 -- DEFAULT VALUE
16:00:48  41  	  );
16:00:48  42  
16:00:48  43  	out_invoice_id := var_invoice_id;
16:00:48  44  END;
16:00:48  45  
16:00:48  46  /*****************************************************************/
16:00:48  47  
16:00:48  48  PROCEDURE UPDATE_INVOICE (
16:00:48  49  	in_invoice_id		       IN INVOICE.ID%TYPE,
16:00:48  50  	in_updated_by		       IN INVOICE.UPDATED_BY%TYPE,
16:00:48  51  	in_invoice_status_id	       IN INVOICE.INVOICE_STATUS_ID%TYPE DEFAULT NULL,
16:00:48  52  	in_is_tax_calculation_needed   IN INVOICE.IS_TAX_CALCULATION_NEEDED%TYPE DEFAULT NULL
16:00:48  53  ) AS
16:00:48  54  BEGIN
16:00:48  55  	-- Create history
16:00:48  56  	PROCS_HISTORY_V20.CREATE_INVOICE_HISTORY(
16:00:48  57  	  in_invoice_id 	       => in_invoice_id,
16:00:48  58  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:48  59  	);
16:00:48  60  
16:00:48  61  	UPDATE
16:00:48  62  	  INVOICE
16:00:48  63  	SET
16:00:48  64  	  INVOICE_STATUS_ID	    = NVL(in_invoice_status_id, INVOICE_STATUS_ID),
16:00:48  65  	  UPDATE_DATE		    = SYSDATE,
16:00:48  66  	  UPDATED_BY		    = in_updated_by,
16:00:48  67  	  IS_TAX_CALCULATION_NEEDED = NVL(in_is_tax_calculation_needed, IS_TAX_CALCULATION_NEEDED)
16:00:48  68  	WHERE
16:00:48  69  	  ID = in_invoice_id;
16:00:48  70  END;
16:00:48  71  
16:00:48  72  END PROCS_INVOICE_CRU_V20;
16:00:48  73  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:48 SQL> 
16:00:48 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_CRU_V20" AS
16:00:48   2  
16:00:48   3  PROCEDURE CREATE_RECEIPT(
16:00:48   4  /*
16:00:48   5  Throws exceptions:
16:00:48   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48   7  */
16:00:48   8  	  out_id	      OUT NUMBER,
16:00:48   9  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:48  10  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:48  11  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:00:48  12  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:48  13  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:48  14  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:48  15  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:48  16  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:48  17  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:48  18  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:48  19  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:48  20  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:00:48  21  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:00:48  22  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:48  23  	  in_created_by       IN CORE_OWNER.ITUNES_RECEIPT.CREATED_BY%TYPE
16:00:48  24  ) AS
16:00:48  25  -- VARIABLES
16:00:48  26  SPROC_NAME	CONSTANT VARCHAR2(32) := 'CREATE_RECEIPT';
16:00:48  27  var_current_date	    DATE;
16:00:48  28  var_count 	    NUMBER;
16:00:48  29  ITUNES_ORG_TNX_USED   EXCEPTION;
16:00:48  30  BEGIN
16:00:48  31  	SELECT COUNT(1) into var_count
16:00:48  32  	FROM
16:00:48  33  	  ITUNES_RECEIPT IR, SUBSCRIPTION S
16:00:48  34  	WHERE
16:00:48  35  	  IR.ORIGINAL_TRANSACTION_ID = in_original_transaction_id AND
16:00:48  36  	  IR.SUBSCRIPTION_ID = S.ID AND
16:00:48  37  	  S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
16:00:48  38  
16:00:48  39  	if var_count > 0 then
16:00:48  40  	  raise ITUNES_ORG_TNX_USED;
16:00:48  41  	end if;
16:00:48  42  
16:00:48  43  	SELECT
16:00:48  44  	  CORE_OWNER.ITUNES_RECEIPT_ID_SEQ.NEXTVAL
16:00:48  45  	INTO
16:00:48  46  	  out_id
16:00:48  47  	FROM
16:00:48  48  	  dual
16:00:48  49  	;
16:00:48  50  
16:00:48  51  	SELECT
16:00:48  52  	  sysdate
16:00:48  53  	INTO
16:00:48  54  	  var_current_date
16:00:48  55  	FROM
16:00:48  56  	  dual
16:00:48  57  	;
16:00:48  58  
16:00:48  59  	INSERT INTO CORE_OWNER.ITUNES_RECEIPT
16:00:48  60  	(
16:00:48  61  	  id,
16:00:48  62  	  subscription_id,
16:00:48  63  	  receipt,
16:00:48  64  	  status,
16:00:48  65  	  quantity,
16:00:48  66  	  product_id,
16:00:48  67  	  transaction_id,
16:00:48  68  	  purchase_date,
16:00:48  69  	  original_transaction_id,
16:00:48  70  	  original_purchase_date,
16:00:48  71  	  app_item_id,
16:00:48  72  	  version_external_id,
16:00:48  73  	  bid,
16:00:48  74  	  bvrs,
16:00:48  75  	  expires_date,
16:00:48  76  	  create_date,
16:00:48  77  	  created_by,
16:00:48  78  	  update_date,
16:00:48  79  	  updated_by,
16:00:48  80  	  last_check_date
16:00:48  81  	)
16:00:48  82  	VALUES
16:00:48  83  	(
16:00:48  84  	  out_id,
16:00:48  85  	  in_subscription_id,
16:00:48  86  	  in_receipt,
16:00:48  87  	  in_status,
16:00:48  88  	  in_quantity,
16:00:48  89  	  in_product_id,
16:00:48  90  	  in_transaction_id,
16:00:48  91  	  in_purchase_date,
16:00:48  92  	  in_original_transaction_id,
16:00:48  93  	  in_original_purchase_date,
16:00:48  94  	  in_app_item_id,
16:00:48  95  	  in_version_external_id,
16:00:48  96  	  in_bid,
16:00:48  97  	  in_bvrs,
16:00:48  98  	  in_expires_date,
16:00:48  99  	  var_current_date,
16:00:48 100  	  in_created_by,
16:00:48 101  	  var_current_date,
16:00:48 102  	  in_created_by,
16:00:48 103  	  var_current_date
16:00:48 104  	);
16:00:48 105  
16:00:48 106  EXCEPTION
16:00:48 107  WHEN ITUNES_ORG_TNX_USED THEN
16:00:48 108  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 109  	  SPROC_NAME, 'iTunes orginal transaction id already in use', SQLERRM);
16:00:48 110  WHEN DUP_VAL_ON_INDEX THEN
16:00:48 111  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 112  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:00:48 113  WHEN OTHERS THEN
16:00:48 114  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 115  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 116  END CREATE_RECEIPT;
16:00:48 117  
16:00:48 118  PROCEDURE UPDATE_RECEIPT(
16:00:48 119  /*
16:00:48 120  Throws exceptions:
16:00:48 121  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 122  */
16:00:48 123  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:00:48 124  	  in_receipt	      IN CORE_OWNER.ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:48 125  	  in_status	      IN CORE_OWNER.ITUNES_RECEIPT.STATUS%TYPE,
16:00:48 126  	  in_quantity	      IN CORE_OWNER.ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:48 127  	  in_product_id       IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:48 128  	  in_transaction_id   IN CORE_OWNER.ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:48 129  	  in_purchase_date    IN CORE_OWNER.ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:48 130  	  in_original_transaction_id IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:48 131  	  in_original_purchase_date IN CORE_OWNER.ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:48 132  	  in_app_item_id      IN CORE_OWNER.ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:48 133  	  in_version_external_id IN CORE_OWNER.ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:48 134  	  in_bid	      IN CORE_OWNER.ITUNES_RECEIPT.BID%TYPE,
16:00:48 135  	  in_bvrs	      IN CORE_OWNER.ITUNES_RECEIPT.BVRS%TYPE,
16:00:48 136  	  in_expires_date     IN CORE_OWNER.ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:48 137  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:00:48 138  	  in_cancel_date      IN CORE_OWNER.ITUNES_RECEIPT.CANCEL_DATE%TYPE
16:00:48 139  ) AS
16:00:48 140  -- VARIABLES
16:00:48 141  SPROC_NAME	CONSTANT VARCHAR2(32) := 'UPDATE_RECEIPT';
16:00:48 142  var_current_date	    DATE;
16:00:48 143  BEGIN
16:00:48 144  
16:00:48 145  	SELECT
16:00:48 146  	  sysdate
16:00:48 147  	INTO
16:00:48 148  	  var_current_date
16:00:48 149  	FROM
16:00:48 150  	  dual
16:00:48 151  	;
16:00:48 152  
16:00:48 153  	FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
16:00:48 154  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ITUNES_RECEIPT_HISTORY
16:00:48 155  	  (
16:00:48 156  	      rec.id,
16:00:48 157  	      rec.subscription_id,
16:00:48 158  	      rec.receipt,
16:00:48 159  	      rec.status,
16:00:48 160  	      rec.quantity,
16:00:48 161  	      rec.product_id,
16:00:48 162  	      rec.transaction_id,
16:00:48 163  	      rec.purchase_date,
16:00:48 164  	      rec.original_transaction_id,
16:00:48 165  	      rec.original_purchase_date,
16:00:48 166  	      rec.app_item_id,
16:00:48 167  	      rec.version_external_id,
16:00:48 168  	      rec.bid,
16:00:48 169  	      rec.bvrs,
16:00:48 170  	      rec.expires_date,
16:00:48 171  	      rec.create_date,
16:00:48 172  	      rec.created_by,
16:00:48 173  	      rec.update_date,
16:00:48 174  	      rec.updated_by,
16:00:48 175  	      rec.last_check_date,
16:00:48 176  	      rec.cancel_date
16:00:48 177  	  );
16:00:48 178  	END LOOP;
16:00:48 179  
16:00:48 180  	UPDATE CORE_OWNER.ITUNES_RECEIPT
16:00:48 181  	SET
16:00:48 182  	  receipt = in_receipt,
16:00:48 183  	  status = in_status,
16:00:48 184  	  quantity = in_quantity,
16:00:48 185  	  product_id = in_product_id,
16:00:48 186  	  transaction_id = in_transaction_id,
16:00:48 187  	  purchase_date = in_purchase_date,
16:00:48 188  	  original_transaction_id = in_original_transaction_id,
16:00:48 189  	  original_purchase_date = in_original_purchase_date,
16:00:48 190  	  app_item_id = in_app_item_id,
16:00:48 191  	  version_external_id = in_version_external_id,
16:00:48 192  	  bid = in_bid,
16:00:48 193  	  bvrs = in_bvrs,
16:00:48 194  	  expires_date = in_expires_date,
16:00:48 195  	  update_date = var_current_date,
16:00:48 196  	  updated_by = in_updated_by,
16:00:48 197  	  last_check_date = var_current_date,
16:00:48 198  	  cancel_date = in_cancel_date
16:00:48 199  	WHERE
16:00:48 200  	  id = in_id
16:00:48 201  	;
16:00:48 202  
16:00:48 203  EXCEPTION
16:00:48 204  WHEN DUP_VAL_ON_INDEX THEN
16:00:48 205  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 206  	  SPROC_NAME, 'Duplicate value', SQLERRM);
16:00:48 207  WHEN OTHERS THEN
16:00:48 208  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 209  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 210  
16:00:48 211  END UPDATE_RECEIPT;
16:00:48 212  
16:00:48 213  PROCEDURE LINK_ITUNES_RECEIPT(
16:00:48 214  /*
16:00:48 215  Throws exceptions:
16:00:48 216  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 217  */
16:00:48 218  	  in_id 	      IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE,
16:00:48 219  	  in_subscription_id  IN CORE_OWNER.ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:48 220  	  in_updated_by       IN CORE_OWNER.ITUNES_RECEIPT.UPDATED_BY%TYPE
16:00:48 221  ) AS
16:00:48 222  -- VARIABLES
16:00:48 223  SPROC_NAME	CONSTANT VARCHAR2(32) := 'LINK_ITUNES_RECEIPT';
16:00:48 224  var_current_date	    DATE;
16:00:48 225  BEGIN
16:00:48 226  
16:00:48 227  	      SELECT
16:00:48 228  	  sysdate
16:00:48 229  	      INTO
16:00:48 230  	  var_current_date
16:00:48 231  	      FROM
16:00:48 232  	  dual
16:00:48 233  	      ;
16:00:48 234  
16:00:48 235  	      FOR REC IN (SELECT * FROM CORE_OWNER.ITUNES_RECEIPT WHERE ID = in_id) LOOP
16:00:48 236  	      CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ITUNES_RECEIPT_HISTORY
16:00:48 237  	      (
16:00:48 238  	    rec.id,
16:00:48 239  	    rec.subscription_id,
16:00:48 240  	    rec.receipt,
16:00:48 241  	    rec.status,
16:00:48 242  	    rec.quantity,
16:00:48 243  	    rec.product_id,
16:00:48 244  	    rec.transaction_id,
16:00:48 245  	    rec.purchase_date,
16:00:48 246  	    rec.original_transaction_id,
16:00:48 247  	    rec.original_purchase_date,
16:00:48 248  	    rec.app_item_id,
16:00:48 249  	    rec.version_external_id,
16:00:48 250  	    rec.bid,
16:00:48 251  	    rec.bvrs,
16:00:48 252  	    rec.expires_date,
16:00:48 253  	    rec.create_date,
16:00:48 254  	    rec.created_by,
16:00:48 255  	    rec.update_date,
16:00:48 256  	    rec.updated_by,
16:00:48 257  	    rec.last_check_date,
16:00:48 258  	    rec.cancel_date
16:00:48 259  	      );
16:00:48 260  	      END LOOP;
16:00:48 261  
16:00:48 262  	      UPDATE CORE_OWNER.ITUNES_RECEIPT
16:00:48 263  		SET
16:00:48 264  		      subscription_id = in_subscription_id,
16:00:48 265  		      update_date = var_current_date,
16:00:48 266  	      updated_by = in_updated_by,
16:00:48 267  	      last_check_date = var_current_date
16:00:48 268  	      WHERE
16:00:48 269  		  id = in_id
16:00:48 270  	      ;
16:00:48 271  
16:00:48 272  	      EXCEPTION
16:00:48 273  	      WHEN DUP_VAL_ON_INDEX THEN
16:00:48 274  		PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:48 275  		  SPROC_NAME, 'Duplicate value', SQLERRM);
16:00:48 276  	      WHEN OTHERS THEN
16:00:48 277  		PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 278  		  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 279  END LINK_ITUNES_RECEIPT;
16:00:48 280  
16:00:48 281  
16:00:48 282  PROCEDURE MARK_RECEIPT_CHECKED(
16:00:48 283  /*
16:00:48 284  Throws exceptions:
16:00:48 285  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:48 286  */
16:00:48 287  	  in_id       IN CORE_OWNER.ITUNES_RECEIPT.ID%TYPE
16:00:48 288  ) AS
16:00:48 289  SPROC_NAME	CONSTANT VARCHAR2(32) := 'MARK_RECEIPT_CHECKED';
16:00:48 290  BEGIN
16:00:48 291  	UPDATE
16:00:48 292  	  CORE_OWNER.ITUNES_RECEIPT
16:00:48 293  	SET
16:00:48 294  	  last_check_date = sysdate
16:00:48 295  	WHERE
16:00:48 296  	  id = in_id
16:00:48 297  	;
16:00:48 298  EXCEPTION
16:00:48 299  WHEN OTHERS THEN
16:00:48 300  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:48 301  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:48 302  END MARK_RECEIPT_CHECKED;
16:00:48 303  
16:00:48 304  END PROCS_ITUNES_RECEIPT_CRU_V20;
16:00:48 305  .
16:00:48 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_LICENSE(
16:00:49   4  	out_license_id		    OUT LICENSE.ID%TYPE,
16:00:49   5  	in_license_id		    IN LICENSE.ID%TYPE DEFAULT NULL,
16:00:49   6  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE,
16:00:49   7  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE,
16:00:49   8  	in_start_date		    IN LICENSE.START_DATE%TYPE,
16:00:49   9  	in_offer_id		    IN LICENSE.OFFER_ID%TYPE,
16:00:49  10  	in_subscription_id	    IN LICENSE.SUBSCRIPTION_ID%TYPE,
16:00:49  11  	in_invoice_id		    IN LICENSE.INVOICE_ID%TYPE,
16:00:49  12  	in_end_date		    IN LICENSE.END_DATE%TYPE,
16:00:49  13  	in_created_by		    IN LICENSE.CREATED_BY%TYPE,
16:00:49  14  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE,
16:00:49  15  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE,
16:00:49  16  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE
16:00:49  17  ) AS
16:00:49  18  -- VARIABLES
16:00:49  19  var_license_id LICENSE.ID%TYPE;
16:00:49  20  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:49  21  var_date DATE := SYSDATE;
16:00:49  22  BEGIN
16:00:49  23  	IF in_license_id IS NULL THEN
16:00:49  24  	  SELECT
16:00:49  25  	    LCN_ID_SEQ.nextVal into var_license_id
16:00:49  26  	  FROM DUAL;
16:00:49  27  	ELSE
16:00:49  28  	  var_license_id := in_license_id;
16:00:49  29  	END IF;
16:00:49  30  	INSERT INTO
16:00:49  31  	  LICENSE (
16:00:49  32  	    ID,
16:00:49  33  	    LICENSE_STATUS_ID,
16:00:49  34  	    NEEDS_ENTITLEMENTS,
16:00:49  35  	    START_DATE,
16:00:49  36  	    OFFER_ID,
16:00:49  37  	    SUBSCRIPTION_ID,
16:00:49  38  	    INVOICE_ID,
16:00:49  39  	    END_DATE,
16:00:49  40  	    CREATE_DATE,
16:00:49  41  	    CREATED_BY,
16:00:49  42  	    UPDATE_DATE,
16:00:49  43  	    UPDATED_BY,
16:00:49  44  	    IS_EXTENSION,
16:00:49  45  	    CURRENT_OFFER_INDEX,
16:00:49  46  	    CURRENT_OFFER_RECURR_NUM,
16:00:49  47  	    ENTITLEMENT_END_DATE
16:00:49  48  	  ) VALUES (
16:00:49  49  	    var_license_id,
16:00:49  50  	    in_license_status_id,
16:00:49  51  	    in_needs_entitlements,
16:00:49  52  	    in_start_date,
16:00:49  53  	    in_offer_id,
16:00:49  54  	    in_subscription_id,
16:00:49  55  	    in_invoice_id,
16:00:49  56  	    in_end_date,
16:00:49  57  	    var_date,
16:00:49  58  	    in_created_by,
16:00:49  59  	    var_date,
16:00:49  60  	    in_created_by,
16:00:49  61  	    in_is_extension,
16:00:49  62  	    in_current_offer_index,
16:00:49  63  	    in_current_offer_recurr_num,
16:00:49  64  	    in_end_date
16:00:49  65  	  );
16:00:49  66  
16:00:49  67  	out_license_id := var_license_id;
16:00:49  68  END CREATE_LICENSE;
16:00:49  69  
16:00:49  70  /********************************************************************/
16:00:49  71  
16:00:49  72  PROCEDURE UPDATE_LICENSE (
16:00:49  73  	in_license_id		    IN LICENSE.ID%TYPE,
16:00:49  74  	in_license_status_id	    IN LICENSE.LICENSE_STATUS_ID%TYPE DEFAULT NULL,
16:00:49  75  	in_needs_entitlements	    IN LICENSE.NEEDS_ENTITLEMENTS%TYPE DEFAULT NULL,
16:00:49  76  	in_start_date		    IN LICENSE.START_DATE%TYPE DEFAULT NULL,
16:00:49  77  	in_end_date		    IN LICENSE.END_DATE%TYPE DEFAULT NULL,
16:00:49  78  	in_updated_by		    IN LICENSE.CREATED_BY%TYPE,
16:00:49  79  	in_is_extension 	    IN LICENSE.IS_EXTENSION%TYPE DEFAULT NULL,
16:00:49  80  	in_current_offer_index	    IN LICENSE.CURRENT_OFFER_INDEX%TYPE DEFAULT NULL,
16:00:49  81  	in_current_offer_recurr_num IN LICENSE.CURRENT_OFFER_RECURR_NUM%TYPE DEFAULT NULL,
16:00:49  82  	in_entitlement_end_date     IN LICENSE.ENTITLEMENT_END_DATE%TYPE DEFAULT NULL,
16:00:49  83  	in_grace_start_date	    IN LICENSE.GRACE_START_DATE%TYPE DEFAULT NULL,
16:00:49  84  	in_grace_end_date	    IN LICENSE.GRACE_END_DATE%TYPE DEFAULT NULL
16:00:49  85  ) AS
16:00:49  86  BEGIN
16:00:49  87  	-- Create history
16:00:49  88  	PROCS_HISTORY_V20.CREATE_LICENSE_HISTORY(
16:00:49  89  	  in_license_id 	       => in_license_id,
16:00:49  90  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49  91  	);
16:00:49  92  
16:00:49  93  	UPDATE
16:00:49  94  	  LICENSE
16:00:49  95  	SET
16:00:49  96  	  LICENSE_STATUS_ID	   = NVL(in_license_status_id, LICENSE_STATUS_ID),
16:00:49  97  	  NEEDS_ENTITLEMENTS	   = NVL(in_needs_entitlements, NEEDS_ENTITLEMENTS),
16:00:49  98  	  START_DATE		   = NVL(in_start_date, START_DATE),
16:00:49  99  	  END_DATE		   = NVL(in_end_date, END_DATE),
16:00:49 100  	  UPDATE_DATE		   = SYSDATE,
16:00:49 101  	  UPDATED_BY		   = in_updated_by,
16:00:49 102  	  IS_EXTENSION		   = NVL(in_is_extension, IS_EXTENSION),
16:00:49 103  	  CURRENT_OFFER_INDEX	   = NVL(in_current_offer_index, CURRENT_OFFER_INDEX),
16:00:49 104  	  CURRENT_OFFER_RECURR_NUM = NVL(in_current_offer_recurr_num, CURRENT_OFFER_RECURR_NUM),
16:00:49 105  	  ENTITLEMENT_END_DATE	   = NVL(in_entitlement_end_date, ENTITLEMENT_END_DATE),
16:00:49 106  	  GRACE_START_DATE	   = NVL(in_grace_start_date, GRACE_START_DATE),
16:00:49 107  	  GRACE_END_DATE	   = NVL(in_grace_end_date, GRACE_END_DATE)
16:00:49 108  	WHERE
16:00:49 109  	  LICENSE.ID = in_license_id;
16:00:49 110  END UPDATE_LICENSE;
16:00:49 111  
16:00:49 112  END PROCS_LICENSE_CRU_V20;
16:00:49 113  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_LINE_ITEM (
16:00:49   4  	inout_line_item_id  IN OUT LINE_ITEM.ID%TYPE,
16:00:49   5  	in_product_offer_id IN LINE_ITEM.PRODUCT_OFFER_ID%TYPE,
16:00:49   6  	in_invoice_id	    IN LINE_ITEM.INVOICE_ID%TYPE,
16:00:49   7  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE,
16:00:49   8  	in_created_by	    IN LINE_ITEM.CREATED_BY%TYPE,
16:00:49   9  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE,
16:00:49  10  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE
16:00:49  11  ) AS
16:00:49  12  BEGIN
16:00:49  13  	IF inout_line_item_id IS NULL THEN
16:00:49  14  	  SELECT
16:00:49  15  	    LI_ID_SEQ.nextVal into inout_line_item_id
16:00:49  16  	  FROM DUAL;
16:00:49  17  	END IF;
16:00:49  18  	INSERT INTO LINE_ITEM (
16:00:49  19  	  ID,
16:00:49  20  	  PRODUCT_OFFER_ID,
16:00:49  21  	  INVOICE_ID,
16:00:49  22  	  AMOUNT,
16:00:49  23  	  QUANTITY,
16:00:49  24  	  CREATE_DATE,
16:00:49  25  	  CREATED_BY,
16:00:49  26  	  DISCOUNT_AMOUNT,
16:00:49  27  	  TAXES_AMOUNT
16:00:49  28  	) VALUES (
16:00:49  29  	  inout_line_item_id,
16:00:49  30  	  in_product_offer_id,
16:00:49  31  	  in_invoice_id,
16:00:49  32  	  in_amount,
16:00:49  33  	  1, -- [REVU]: Deprecated. Ignore this field
16:00:49  34  	  SYSDATE,
16:00:49  35  	  in_created_by,
16:00:49  36  	  in_discount_amount,
16:00:49  37  	  in_taxes_amount
16:00:49  38  	);
16:00:49  39  END CREATE_LINE_ITEM;
16:00:49  40  
16:00:49  41  /******************************************************************************/
16:00:49  42  
16:00:49  43  PROCEDURE UPDATE_LINE_ITEM (
16:00:49  44  	in_line_item_id     IN LINE_ITEM.ID%TYPE,
16:00:49  45  	in_amount	    IN LINE_ITEM.AMOUNT%TYPE DEFAULT NULL,
16:00:49  46  	in_discount_amount  IN LINE_ITEM.DISCOUNT_AMOUNT%TYPE  DEFAULT NULL,
16:00:49  47  	in_taxes_amount     IN LINE_ITEM.TAXES_AMOUNT%TYPE DEFAULT NULL
16:00:49  48  ) AS
16:00:49  49  BEGIN
16:00:49  50  	UPDATE
16:00:49  51  	  LINE_ITEM
16:00:49  52  	SET
16:00:49  53  	  LINE_ITEM.AMOUNT	    = NVL(in_amount, LINE_ITEM.AMOUNT),
16:00:49  54  	  LINE_ITEM.DISCOUNT_AMOUNT = NVL(in_discount_amount, LINE_ITEM.DISCOUNT_AMOUNT),
16:00:49  55  	  LINE_ITEM.TAXES_AMOUNT    = NVL(in_taxes_amount, LINE_ITEM.TAXES_AMOUNT)
16:00:49  56  	WHERE
16:00:49  57  	  LINE_ITEM.ID = in_line_item_id;
16:00:49  58  END UPDATE_LINE_ITEM;
16:00:49  59  
16:00:49  60  /******************************************************************************/
16:00:49  61  
16:00:49  62  PROCEDURE CREATE_DISCOUNT_LINE_ITEM (
16:00:49  63  	in_discount_id	IN DISCOUNT.ID%TYPE,
16:00:49  64  	in_line_item_id IN LINE_ITEM.ID%TYPE
16:00:49  65  ) AS
16:00:49  66  BEGIN
16:00:49  67  	INSERT INTO DISCOUNT_LINE_ITEM(
16:00:49  68  	  DISCOUNT_ID,
16:00:49  69  	  LINE_ITEM_ID
16:00:49  70  	) VALUES (
16:00:49  71  	  in_discount_id,
16:00:49  72  	  in_line_item_id
16:00:49  73  	);
16:00:49  74  END CREATE_DISCOUNT_LINE_ITEM;
16:00:49  75  
16:00:49  76  END PROCS_LINE_ITEMS_CRU_V20;
16:00:49  77  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_RECONCILIATION_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_CPT_CHARGEBACK_ACT (
16:00:49   4  	out_cpt_chargeback_act_id   OUT RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE,
16:00:49   5  	in_cpt_chargeback_act_id    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE DEFAULT NULL,
16:00:49   6  	in_ext_source_log_id	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49   7  	in_record_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.RECORD_TYPE%TYPE,
16:00:49   8  	in_entity_type		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_TYPE%TYPE,
16:00:49   9  	in_entity_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ENTITY_NUMBER%TYPE,
16:00:49  10  	in_chargeback_amount_issuer IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ISSUER%TYPE,
16:00:49  11  	in_prev_partial_repres	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PREV_PARTIAL_REPRESENTMENT%TYPE,
16:00:49  12  	in_presentment_currency     IN RCN_CPT_CHARGEBACK_ACT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:49  13  	in_chargeback_category	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_CATEGORY%TYPE,
16:00:49  14  	in_status_flag		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.STATUS_FLAG%TYPE,
16:00:49  15  	in_sequence_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.SEQUENCE_NUMBER%TYPE,
16:00:49  16  	in_merchant_order_number    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:49  17  	in_account_number	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:49  18  	in_reason_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.REASON_CODE%TYPE,
16:00:49  19  	in_transaction_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.TRANSACTION_DATE%TYPE,
16:00:49  20  	in_chargeback_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DATE%TYPE,
16:00:49  21  	in_activity_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.ACTIVITY_DATE%TYPE,
16:00:49  22  	in_chargeback_amount_action IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_AMOUNT_ACTION%TYPE,
16:00:49  23  	in_fee_amount		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.FEE_AMOUNT%TYPE,
16:00:49  24  	in_usage_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.USAGE_CODE%TYPE,
16:00:49  25  	in_mop_code		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.MOP_CODE%TYPE,
16:00:49  26  	in_authorization_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.AUTHORIZATION_DATE%TYPE,
16:00:49  27  	in_chargeback_due_date	    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CHARGEBACK_DUE_DATE%TYPE,
16:00:49  28  	in_created_by		    IN RCN_CPT_CHARGEBACK_ACT_DETAIL.CREATED_BY%TYPE
16:00:49  29  ) AS
16:00:49  30  -- VARIABLES
16:00:49  31  var_cpt_chargeback_act_id RCN_CPT_CHARGEBACK_ACT_DETAIL.ID%TYPE;
16:00:49  32  var_date DATE := SYSDATE;
16:00:49  33  BEGIN
16:00:49  34  	IF in_cpt_chargeback_act_id IS NULL THEN
16:00:49  35  	  SELECT
16:00:49  36  	    RCN_CPT_CHRGBK_ACT_DETAIL_SEQ.nextVal into var_cpt_chargeback_act_id
16:00:49  37  	  FROM DUAL;
16:00:49  38  	ELSE
16:00:49  39  	  var_cpt_chargeback_act_id := in_cpt_chargeback_act_id;
16:00:49  40  	END IF;
16:00:49  41  	INSERT INTO
16:00:49  42  	  RCN_CPT_CHARGEBACK_ACT_DETAIL (
16:00:49  43  	    id,
16:00:49  44  	    rcn_ext_source_log_id,
16:00:49  45  	    record_type,
16:00:49  46  	    entity_type,
16:00:49  47  	    entity_number,
16:00:49  48  	    chargeback_amount_issuer,
16:00:49  49  	    prev_partial_representment,
16:00:49  50  	    presentment_currency,
16:00:49  51  	    chargeback_category,
16:00:49  52  	    status_flag,
16:00:49  53  	    sequence_number,
16:00:49  54  	    merchant_order_number,
16:00:49  55  	    account_number,
16:00:49  56  	    reason_code,
16:00:49  57  	    transaction_date,
16:00:49  58  	    chargeback_date,
16:00:49  59  	    activity_date,
16:00:49  60  	    chargeback_amount_action,
16:00:49  61  	    fee_amount,
16:00:49  62  	    usage_code,
16:00:49  63  	    mop_code,
16:00:49  64  	    authorization_date,
16:00:49  65  	    chargeback_due_date,
16:00:49  66  	    create_date,
16:00:49  67  	    created_by
16:00:49  68  	  ) VALUES (
16:00:49  69  	    var_cpt_chargeback_act_id,
16:00:49  70  	    in_ext_source_log_id,
16:00:49  71  	    in_record_type,
16:00:49  72  	    in_entity_type,
16:00:49  73  	    in_entity_number,
16:00:49  74  	    in_chargeback_amount_issuer,
16:00:49  75  	    in_prev_partial_repres,
16:00:49  76  	    in_presentment_currency,
16:00:49  77  	    in_chargeback_category,
16:00:49  78  	    in_status_flag,
16:00:49  79  	    in_sequence_number,
16:00:49  80  	    in_merchant_order_number,
16:00:49  81  	    in_account_number,
16:00:49  82  	    in_reason_code,
16:00:49  83  	    in_transaction_date,
16:00:49  84  	    in_chargeback_date,
16:00:49  85  	    in_activity_date,
16:00:49  86  	    in_chargeback_amount_action,
16:00:49  87  	    in_fee_amount,
16:00:49  88  	    in_usage_code,
16:00:49  89  	    in_mop_code,
16:00:49  90  	    in_authorization_date,
16:00:49  91  	    in_chargeback_due_date,
16:00:49  92  	    var_date,
16:00:49  93  	    in_created_by
16:00:49  94  	  );
16:00:49  95  
16:00:49  96  	out_cpt_chargeback_act_id := var_cpt_chargeback_act_id;
16:00:49  97  END CREATE_CPT_CHARGEBACK_ACT;
16:00:49  98  
16:00:49  99  PROCEDURE CREATE_EXT_SOURCE_LOG (
16:00:49 100  	out_ext_source_log_id	    OUT RCN_EXT_SOURCE_LOG.ID%TYPE,
16:00:49 101  	in_ext_source_log_id	    IN RCN_EXT_SOURCE_LOG.ID%TYPE DEFAULT NULL,
16:00:49 102  	in_extraction_timestamp     IN RCN_EXT_SOURCE_LOG.EXTRACTION_TIMESTAMP%TYPE,
16:00:49 103  	in_report_date		    IN RCN_EXT_SOURCE_LOG.REPORT_DATE%TYPE,
16:00:49 104  	in_report_gen_datetime	    IN RCN_EXT_SOURCE_LOG.REPORT_GENERATION_DATETIME%TYPE,
16:00:49 105  	in_record_type		    IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:49 106  	in_report_file_name	    IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:00:49 107  	in_created_by		    IN RCN_EXT_SOURCE_LOG.CREATED_BY%TYPE
16:00:49 108  ) AS
16:00:49 109  -- VARIABLES
16:00:49 110  var_ext_source_log_id RCN_EXT_SOURCE_LOG.ID%TYPE;
16:00:49 111  var_date DATE := SYSDATE;
16:00:49 112  BEGIN
16:00:49 113  	IF in_ext_source_log_id IS NULL THEN
16:00:49 114  	  SELECT
16:00:49 115  	    RCN_EXT_SOURCE_LOG_SEQ.nextVal into var_ext_source_log_id
16:00:49 116  	  FROM DUAL;
16:00:49 117  	ELSE
16:00:49 118  	  var_ext_source_log_id := in_ext_source_log_id;
16:00:49 119  	END IF;
16:00:49 120  	INSERT INTO
16:00:49 121  	  RCN_EXT_SOURCE_LOG (
16:00:49 122  	    id,
16:00:49 123  	    extraction_timestamp,
16:00:49 124  	    report_date,
16:00:49 125  	    report_generation_datetime,
16:00:49 126  	    record_type,
16:00:49 127  	    report_file_name,
16:00:49 128  	    create_date,
16:00:49 129  	    created_by
16:00:49 130  	  ) VALUES (
16:00:49 131  	    var_ext_source_log_id,
16:00:49 132  	    in_extraction_timestamp,
16:00:49 133  	    in_report_date,
16:00:49 134  	    in_report_gen_datetime,
16:00:49 135  	    in_record_type,
16:00:49 136  	    in_report_file_name,
16:00:49 137  	    var_date,
16:00:49 138  	    in_created_by
16:00:49 139  	  );
16:00:49 140  
16:00:49 141  	out_ext_source_log_id := var_ext_source_log_id;
16:00:49 142  END CREATE_EXT_SOURCE_LOG;
16:00:49 143  
16:00:49 144  PROCEDURE CREATE_CPT_SERVICE_CHARGE (
16:00:49 145  	out_cpt_service_charge_id   OUT RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE,
16:00:49 146  	in_cpt_service_charge_id    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE DEFAULT NULL,
16:00:49 147  	in_ext_source_log_id	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 148  	in_record_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.RECORD_TYPE%TYPE,
16:00:49 149  	in_category		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CATEGORY%TYPE,
16:00:49 150  	in_sub_category 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SUB_CATEGORY%TYPE,
16:00:49 151  	in_entity_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_TYPE%TYPE,
16:00:49 152  	in_entity_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ENTITY_NUMBER%TYPE,
16:00:49 153  	in_funds_trans_inst_number  IN RCN_CPT_SERVICE_CHARGE_DETAIL.FUNDS_TRANSFER_INST_NUMBER%TYPE,
16:00:49 154  	in_secure_ba_number	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SECURE_BA_NUMBER%TYPE,
16:00:49 155  	in_settlement_currency	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.SETTLEMENT_CURRENCY%TYPE,
16:00:49 156  	in_fee_schedule 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_SCHEDULE%TYPE,
16:00:49 157  	in_mop			    IN RCN_CPT_SERVICE_CHARGE_DETAIL.MOP%TYPE,
16:00:49 158  	in_interchange_qual	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.INTERCHANGE_QUALIFICATION%TYPE,
16:00:49 159  	in_fee_type_description     IN RCN_CPT_SERVICE_CHARGE_DETAIL.FEE_TYPE_DESCRIPTION%TYPE,
16:00:49 160  	in_action_type		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.ACTION_TYPE%TYPE,
16:00:49 161  	in_unit_quantity	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_QUANTITY%TYPE,
16:00:49 162  	in_unit_fee		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.UNIT_FEE%TYPE,
16:00:49 163  	in_amount		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.AMOUNT%TYPE,
16:00:49 164  	in_percentage_rate	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.PERCENTAGE_RATE%TYPE,
16:00:49 165  	in_total_charge 	    IN RCN_CPT_SERVICE_CHARGE_DETAIL.TOTAL_CHARGE%TYPE,
16:00:49 166  	in_created_by		    IN RCN_CPT_SERVICE_CHARGE_DETAIL.CREATED_BY%TYPE
16:00:49 167  ) AS
16:00:49 168  -- VARIABLES
16:00:49 169  var_cpt_service_charge_id RCN_CPT_SERVICE_CHARGE_DETAIL.ID%TYPE;
16:00:49 170  var_date DATE := SYSDATE;
16:00:49 171  BEGIN
16:00:49 172  	IF in_cpt_service_charge_id IS NULL THEN
16:00:49 173  	  SELECT
16:00:49 174  	    RCN_CPT_SERV_CHARGE_DETAIL_SEQ.nextVal into var_cpt_service_charge_id
16:00:49 175  	  FROM DUAL;
16:00:49 176  	ELSE
16:00:49 177  	  var_cpt_service_charge_id := in_cpt_service_charge_id;
16:00:49 178  	END IF;
16:00:49 179  	INSERT INTO
16:00:49 180  	  RCN_CPT_SERVICE_CHARGE_DETAIL (
16:00:49 181  	    id,
16:00:49 182  	    rcn_ext_source_log_id,
16:00:49 183  	    record_type,
16:00:49 184  	    category,
16:00:49 185  	    sub_category,
16:00:49 186  	    entity_type,
16:00:49 187  	    entity_number,
16:00:49 188  	    funds_transfer_inst_number,
16:00:49 189  	    secure_ba_number,
16:00:49 190  	    settlement_currency,
16:00:49 191  	    fee_schedule,
16:00:49 192  	    mop,
16:00:49 193  	    interchange_qualification,
16:00:49 194  	    fee_type_description,
16:00:49 195  	    action_type,
16:00:49 196  	    unit_quantity,
16:00:49 197  	    unit_fee,
16:00:49 198  	    amount,
16:00:49 199  	    percentage_rate,
16:00:49 200  	    total_charge,
16:00:49 201  	    create_date,
16:00:49 202  	    created_by
16:00:49 203  	  ) VALUES (
16:00:49 204  	    var_cpt_service_charge_id,
16:00:49 205  	    in_ext_source_log_id,
16:00:49 206  	    in_record_type,
16:00:49 207  	    in_category,
16:00:49 208  	    in_sub_category,
16:00:49 209  	    in_entity_type,
16:00:49 210  	    in_entity_number,
16:00:49 211  	    in_funds_trans_inst_number,
16:00:49 212  	    in_secure_ba_number,
16:00:49 213  	    in_settlement_currency,
16:00:49 214  	    in_fee_schedule,
16:00:49 215  	    in_mop,
16:00:49 216  	    in_interchange_qual,
16:00:49 217  	    in_fee_type_description,
16:00:49 218  	    in_action_type,
16:00:49 219  	    in_unit_quantity,
16:00:49 220  	    in_unit_fee,
16:00:49 221  	    in_amount,
16:00:49 222  	    in_percentage_rate,
16:00:49 223  	    in_total_charge,
16:00:49 224  	    var_date,
16:00:49 225  	    in_created_by
16:00:49 226  	  );
16:00:49 227  
16:00:49 228  	out_cpt_service_charge_id := var_cpt_service_charge_id;
16:00:49 229  END CREATE_CPT_SERVICE_CHARGE;
16:00:49 230  
16:00:49 231  PROCEDURE CREATE_CPT_EXCEPTION (
16:00:49 232  	out_cpt_exception_id	 OUT RCN_CPT_EXCEPTION_DETAIL.ID%TYPE,
16:00:49 233  	in_cpt_exception_id	 IN RCN_CPT_EXCEPTION_DETAIL.ID%TYPE DEFAULT NULL,
16:00:49 234  	in_ext_source_log_id	 IN RCN_CPT_EXCEPTION_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 235  	in_record_type		 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_TYPE%TYPE,
16:00:49 236  	in_submission_date	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_DATE%TYPE,
16:00:49 237  	in_pid_number		 IN RCN_CPT_EXCEPTION_DETAIL.PID_NUMBER%TYPE,
16:00:49 238  	in_pid_short_name	 IN RCN_CPT_EXCEPTION_DETAIL.PID_SHORT_NAME%TYPE,
16:00:49 239  	in_submission_number	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_NUMBER%TYPE,
16:00:49 240  	in_record_number	 IN RCN_CPT_EXCEPTION_DETAIL.RECORD_NUMBER%TYPE,
16:00:49 241  	in_entity_type		 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_TYPE%TYPE,
16:00:49 242  	in_entity_number	 IN RCN_CPT_EXCEPTION_DETAIL.ENTITY_NUMBER%TYPE,
16:00:49 243  	in_presentment_currency  IN RCN_CPT_EXCEPTION_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:49 244  	in_merchant_order_number IN RCN_CPT_EXCEPTION_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:49 245  	in_rdfi_number		 IN RCN_CPT_EXCEPTION_DETAIL.RDFI_NUMBER%TYPE,
16:00:49 246  	in_account_number	 IN RCN_CPT_EXCEPTION_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:49 247  	in_expiration_date	 IN RCN_CPT_EXCEPTION_DETAIL.EXPIRATION_DATE%TYPE,
16:00:49 248  	in_amount		 IN RCN_CPT_EXCEPTION_DETAIL.AMOUNT%TYPE,
16:00:49 249  	in_mop			 IN RCN_CPT_EXCEPTION_DETAIL.MOP%TYPE,
16:00:49 250  	in_action_code		 IN RCN_CPT_EXCEPTION_DETAIL.ACTION_CODE%TYPE,
16:00:49 251  	in_auth_date		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_DATE%TYPE,
16:00:49 252  	in_auth_code		 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_CODE%TYPE,
16:00:49 253  	in_auth_response_code	 IN RCN_CPT_EXCEPTION_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:00:49 254  	in_trace_number 	 IN RCN_CPT_EXCEPTION_DETAIL.TRACE_NUMBER%TYPE,
16:00:49 255  	in_consumer_country_code IN RCN_CPT_EXCEPTION_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:00:49 256  	in_category		 IN RCN_CPT_EXCEPTION_DETAIL.CATEGORY%TYPE,
16:00:49 257  	in_mcc			 IN RCN_CPT_EXCEPTION_DETAIL.MCC%TYPE,
16:00:49 258  	in_reject_code		 IN RCN_CPT_EXCEPTION_DETAIL.REJECT_CODE%TYPE,
16:00:49 259  	in_submission_status	 IN RCN_CPT_EXCEPTION_DETAIL.SUBMISSION_STATUS%TYPE,
16:00:49 260  	in_created_by		 IN RCN_CPT_EXCEPTION_DETAIL.CREATED_BY%TYPE
16:00:49 261  ) AS
16:00:49 262  -- VARIABLES
16:00:49 263  var_cpt_exception_id RCN_CPT_EXCEPTION_DETAIL.ID%TYPE;
16:00:49 264  var_date DATE := SYSDATE;
16:00:49 265  BEGIN
16:00:49 266  	IF in_cpt_exception_id IS NULL THEN
16:00:49 267  	  SELECT
16:00:49 268  	    RCN_CPT_EXCEPTION_DETAIL_SEQ.nextVal into var_cpt_exception_id
16:00:49 269  	  FROM DUAL;
16:00:49 270  	ELSE
16:00:49 271  	  var_cpt_exception_id := in_cpt_exception_id;
16:00:49 272  	END IF;
16:00:49 273  	INSERT INTO
16:00:49 274  	  RCN_CPT_EXCEPTION_DETAIL (
16:00:49 275  	    id,
16:00:49 276  	    rcn_ext_source_log_id,
16:00:49 277  	    record_type,
16:00:49 278  	    submission_date,
16:00:49 279  	    pid_number,
16:00:49 280  	    pid_short_name,
16:00:49 281  	    submission_number,
16:00:49 282  	    record_number,
16:00:49 283  	    entity_type,
16:00:49 284  	    entity_number,
16:00:49 285  	    presentment_currency,
16:00:49 286  	    merchant_order_number,
16:00:49 287  	    rdfi_number,
16:00:49 288  	    account_number,
16:00:49 289  	    expiration_date,
16:00:49 290  	    amount,
16:00:49 291  	    mop,
16:00:49 292  	    action_code,
16:00:49 293  	    auth_date,
16:00:49 294  	    auth_code,
16:00:49 295  	    auth_response_code,
16:00:49 296  	    trace_number,
16:00:49 297  	    consumer_country_code,
16:00:49 298  	    category,
16:00:49 299  	    mcc,
16:00:49 300  	    reject_code,
16:00:49 301  	    submission_status,
16:00:49 302  	    create_date,
16:00:49 303  	    created_by
16:00:49 304  	  ) VALUES (
16:00:49 305  	    var_cpt_exception_id,
16:00:49 306  	    in_ext_source_log_id,
16:00:49 307  	    in_record_type,
16:00:49 308  	    in_submission_date,
16:00:49 309  	    in_pid_number,
16:00:49 310  	    in_pid_short_name,
16:00:49 311  	    in_submission_number,
16:00:49 312  	    in_record_number,
16:00:49 313  	    in_entity_type,
16:00:49 314  	    in_entity_number,
16:00:49 315  	    in_presentment_currency,
16:00:49 316  	    in_merchant_order_number,
16:00:49 317  	    in_rdfi_number,
16:00:49 318  	    in_account_number,
16:00:49 319  	    in_expiration_date,
16:00:49 320  	    in_amount,
16:00:49 321  	    in_mop,
16:00:49 322  	    in_action_code,
16:00:49 323  	    in_auth_date,
16:00:49 324  	    in_auth_code,
16:00:49 325  	    in_auth_response_code,
16:00:49 326  	    in_trace_number,
16:00:49 327  	    in_consumer_country_code,
16:00:49 328  	    in_category,
16:00:49 329  	    in_mcc,
16:00:49 330  	    in_reject_code,
16:00:49 331  	    in_submission_status,
16:00:49 332  	    var_date,
16:00:49 333  	    in_created_by
16:00:49 334  	  );
16:00:49 335  
16:00:49 336  	out_cpt_exception_id := var_cpt_exception_id;
16:00:49 337  END CREATE_CPT_EXCEPTION;
16:00:49 338  
16:00:49 339  PROCEDURE CREATE_CPT_DEPOSIT (
16:00:49 340  	out_cpt_deposit_id	  OUT RCN_CPT_DEPOSIT_DETAIL.ID%TYPE,
16:00:49 341  	in_cpt_deposit_id	  IN RCN_CPT_DEPOSIT_DETAIL.ID%TYPE DEFAULT NULL,
16:00:49 342  	in_ext_source_log_id	  IN RCN_CPT_DEPOSIT_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 343  	in_record_type		  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_TYPE%TYPE,
16:00:49 344  	in_submission_date	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_DATE%TYPE,
16:00:49 345  	in_pid_number		  IN RCN_CPT_DEPOSIT_DETAIL.PID_NUMBER%TYPE,
16:00:49 346  	in_pid_short_name	  IN RCN_CPT_DEPOSIT_DETAIL.PID_SHORT_NAME%TYPE,
16:00:49 347  	in_submission_number	  IN RCN_CPT_DEPOSIT_DETAIL.SUBMISSION_NUMBER%TYPE,
16:00:49 348  	in_record_number	  IN RCN_CPT_DEPOSIT_DETAIL.RECORD_NUMBER%TYPE,
16:00:49 349  	in_entity_type		  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_TYPE%TYPE,
16:00:49 350  	in_entity_number	  IN RCN_CPT_DEPOSIT_DETAIL.ENTITY_NUMBER%TYPE,
16:00:49 351  	in_presentment_currency   IN RCN_CPT_DEPOSIT_DETAIL.PRESENTMENT_CURRENCY%TYPE,
16:00:49 352  	in_merchant_order_number  IN RCN_CPT_DEPOSIT_DETAIL.MERCHANT_ORDER_NUMBER%TYPE,
16:00:49 353  	in_rdfi_number		  IN RCN_CPT_DEPOSIT_DETAIL.RDFI_NUMBER%TYPE,
16:00:49 354  	in_account_number	  IN RCN_CPT_DEPOSIT_DETAIL.ACCOUNT_NUMBER%TYPE,
16:00:49 355  	in_expiration_date	  IN RCN_CPT_DEPOSIT_DETAIL.EXPIRATION_DATE%TYPE,
16:00:49 356  	in_amount		  IN RCN_CPT_DEPOSIT_DETAIL.AMOUNT%TYPE,
16:00:49 357  	in_mop			  IN RCN_CPT_DEPOSIT_DETAIL.MOP%TYPE,
16:00:49 358  	in_action_code		  IN RCN_CPT_DEPOSIT_DETAIL.ACTION_CODE%TYPE,
16:00:49 359  	in_auth_date		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_DATE%TYPE,
16:00:49 360  	in_auth_code		  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_CODE%TYPE,
16:00:49 361  	in_auth_response_code	  IN RCN_CPT_DEPOSIT_DETAIL.AUTH_RESPONSE_CODE%TYPE,
16:00:49 362  	in_trace_number 	  IN RCN_CPT_DEPOSIT_DETAIL.TRACE_NUMBER%TYPE,
16:00:49 363  	in_consumer_country_code  IN RCN_CPT_DEPOSIT_DETAIL.CONSUMER_COUNTRY_CODE%TYPE,
16:00:49 364  	in_mcc			  IN RCN_CPT_DEPOSIT_DETAIL.MCC%TYPE,
16:00:49 365  	in_fee_code		  IN RCN_CPT_DEPOSIT_DETAIL.FEE_CODE%TYPE,
16:00:49 366  	in_unit_fee		  IN RCN_CPT_DEPOSIT_DETAIL.UNIT_FEE%TYPE,
16:00:49 367  	in_percent_fee		  IN RCN_CPT_DEPOSIT_DETAIL.PERCENT_FEE%TYPE,
16:00:49 368  	in_total_interchange_fee  IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_INTERCHANGE_FEE%TYPE,
16:00:49 369  	in_total_assessment_fee   IN RCN_CPT_DEPOSIT_DETAIL.TOTAL_ASSESSMENT_FEE%TYPE,
16:00:49 370  	in_other_fee		  IN RCN_CPT_DEPOSIT_DETAIL.OTHER_FEE%TYPE,
16:00:49 371  	in_created_by		  IN RCN_CPT_DEPOSIT_DETAIL.CREATED_BY%TYPE
16:00:49 372  ) AS
16:00:49 373  -- VARIABLES
16:00:49 374  var_cpt_deposit_id RCN_CPT_DEPOSIT_DETAIL.ID%TYPE;
16:00:49 375  var_date DATE := SYSDATE;
16:00:49 376  BEGIN
16:00:49 377  	IF in_cpt_deposit_id IS NULL THEN
16:00:49 378  	  SELECT
16:00:49 379  	    RCN_CPT_DEPOSIT_DETAIL_SEQ.nextVal into var_cpt_deposit_id
16:00:49 380  	  FROM DUAL;
16:00:49 381  	ELSE
16:00:49 382  	  var_cpt_deposit_id := in_cpt_deposit_id;
16:00:49 383  	END IF;
16:00:49 384  	INSERT INTO
16:00:49 385  	  RCN_CPT_DEPOSIT_DETAIL (
16:00:49 386  	    id,
16:00:49 387  	    rcn_ext_source_log_id,
16:00:49 388  	    record_type,
16:00:49 389  	    submission_date,
16:00:49 390  	    pid_number,
16:00:49 391  	    pid_short_name,
16:00:49 392  	    submission_number,
16:00:49 393  	    record_number,
16:00:49 394  	    entity_type,
16:00:49 395  	    entity_number,
16:00:49 396  	    presentment_currency,
16:00:49 397  	    merchant_order_number,
16:00:49 398  	    rdfi_number,
16:00:49 399  	    account_number,
16:00:49 400  	    expiration_date,
16:00:49 401  	    amount,
16:00:49 402  	    mop,
16:00:49 403  	    action_code,
16:00:49 404  	    auth_date,
16:00:49 405  	    auth_code,
16:00:49 406  	    auth_response_code,
16:00:49 407  	    trace_number,
16:00:49 408  	    consumer_country_code,
16:00:49 409  	    mcc,
16:00:49 410  	    fee_code,
16:00:49 411  	    unit_fee,
16:00:49 412  	    percent_fee,
16:00:49 413  	    total_interchange_fee,
16:00:49 414  	    total_assessment_fee,
16:00:49 415  	    other_fee,
16:00:49 416  	    create_date,
16:00:49 417  	    created_by
16:00:49 418  	  ) VALUES (
16:00:49 419  	    var_cpt_deposit_id,
16:00:49 420  	    in_ext_source_log_id,
16:00:49 421  	    in_record_type,
16:00:49 422  	    in_submission_date,
16:00:49 423  	    in_pid_number,
16:00:49 424  	    in_pid_short_name,
16:00:49 425  	    in_submission_number,
16:00:49 426  	    in_record_number,
16:00:49 427  	    in_entity_type,
16:00:49 428  	    in_entity_number,
16:00:49 429  	    in_presentment_currency,
16:00:49 430  	    in_merchant_order_number,
16:00:49 431  	    in_rdfi_number,
16:00:49 432  	    in_account_number,
16:00:49 433  	    in_expiration_date,
16:00:49 434  	    in_amount,
16:00:49 435  	    in_mop,
16:00:49 436  	    in_action_code,
16:00:49 437  	    in_auth_date,
16:00:49 438  	    in_auth_code,
16:00:49 439  	    in_auth_response_code,
16:00:49 440  	    in_trace_number,
16:00:49 441  	    in_consumer_country_code,
16:00:49 442  	    in_mcc,
16:00:49 443  	    in_fee_code,
16:00:49 444  	    in_unit_fee,
16:00:49 445  	    in_percent_fee,
16:00:49 446  	    in_total_interchange_fee,
16:00:49 447  	    in_total_assessment_fee,
16:00:49 448  	    in_other_fee,
16:00:49 449  	    var_date,
16:00:49 450  	    in_created_by
16:00:49 451  	  );
16:00:49 452  
16:00:49 453  	out_cpt_deposit_id := var_cpt_deposit_id;
16:00:49 454  END CREATE_CPT_DEPOSIT;
16:00:49 455  
16:00:49 456  PROCEDURE CREATE_PP_SETTLEMENT (
16:00:49 457  	out_pp_settlement_id	   OUT RCN_PP_SETTLEMENT.ID%TYPE,
16:00:49 458  	in_pp_settlement_id	   IN RCN_PP_SETTLEMENT.ID%TYPE DEFAULT NULL,
16:00:49 459  	in_ext_source_log_id	   IN RCN_PP_SETTLEMENT.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 460  	in_transaction_id	   IN RCN_PP_SETTLEMENT.TRANSACTION_ID%TYPE,
16:00:49 461  	in_invoice_id		   IN RCN_PP_SETTLEMENT.INVOICE_ID%TYPE,
16:00:49 462  	in_pp_ref_id		   IN RCN_PP_SETTLEMENT.PP_REF_ID%TYPE,
16:00:49 463  	in_pp_ref_id_type	   IN RCN_PP_SETTLEMENT.PP_REF_ID_TYPE%TYPE,
16:00:49 464  	in_trans_event_code	   IN RCN_PP_SETTLEMENT.TRANS_EVENT_CODE%TYPE,
16:00:49 465  	in_trans_init_date	   IN RCN_PP_SETTLEMENT.TRANS_INIT_DATE%TYPE,
16:00:49 466  	in_trans_comp_date	   IN RCN_PP_SETTLEMENT.TRANS_COMP_DATE%TYPE,
16:00:49 467  	in_trans_deb_or_cred	   IN RCN_PP_SETTLEMENT.TRANS_DEB_OR_CRED%TYPE,
16:00:49 468  	in_gross_trans_amount	   IN RCN_PP_SETTLEMENT.GROSS_TRANS_AMOUNT%TYPE,
16:00:49 469  	in_gross_trans_currency    IN RCN_PP_SETTLEMENT.GROSS_TRANS_CURRENCY%TYPE,
16:00:49 470  	in_fee_deb_or_cred	   IN RCN_PP_SETTLEMENT.FEE_DEB_OR_CRED%TYPE,
16:00:49 471  	in_fee_amount		   IN RCN_PP_SETTLEMENT.FEE_AMOUNT%TYPE,
16:00:49 472  	in_fee_currency 	   IN RCN_PP_SETTLEMENT.FEE_CURRENCY%TYPE,
16:00:49 473  	in_custom_field 	   IN RCN_PP_SETTLEMENT.CUSTOM_FIELD%TYPE,
16:00:49 474  	in_created_by		   IN RCN_PP_SETTLEMENT.CREATED_BY%TYPE
16:00:49 475  ) AS
16:00:49 476  -- VARIABLES
16:00:49 477  var_pp_settlement_id RCN_PP_SETTLEMENT.ID%TYPE;
16:00:49 478  var_date DATE := SYSDATE;
16:00:49 479  BEGIN
16:00:49 480  	IF in_pp_settlement_id IS NULL THEN
16:00:49 481  	  SELECT
16:00:49 482  	    RCN_PP_SETTLEMENT_SEQ.nextVal into var_pp_settlement_id
16:00:49 483  	  FROM DUAL;
16:00:49 484  	ELSE
16:00:49 485  	  var_pp_settlement_id := in_pp_settlement_id;
16:00:49 486  	END IF;
16:00:49 487  	INSERT INTO
16:00:49 488  	  RCN_PP_SETTLEMENT (
16:00:49 489  	    id,
16:00:49 490  	    rcn_ext_source_log_id,
16:00:49 491  	    transaction_id,
16:00:49 492  	    invoice_id,
16:00:49 493  	    pp_ref_id,
16:00:49 494  	    pp_ref_id_type,
16:00:49 495  	    trans_event_code,
16:00:49 496  	    trans_init_date,
16:00:49 497  	    trans_comp_date,
16:00:49 498  	    trans_deb_or_cred,
16:00:49 499  	    gross_trans_amount,
16:00:49 500  	    gross_trans_currency,
16:00:49 501  	    fee_deb_or_cred,
16:00:49 502  	    fee_amount,
16:00:49 503  	    fee_currency,
16:00:49 504  	    custom_field,
16:00:49 505  	    create_date,
16:00:49 506  	    created_by
16:00:49 507  	  ) VALUES (
16:00:49 508  	    var_pp_settlement_id,
16:00:49 509  	    in_ext_source_log_id,
16:00:49 510  	    in_transaction_id,
16:00:49 511  	    in_invoice_id,
16:00:49 512  	    in_pp_ref_id,
16:00:49 513  	    in_pp_ref_id_type,
16:00:49 514  	    in_trans_event_code,
16:00:49 515  	    in_trans_init_date,
16:00:49 516  	    in_trans_comp_date,
16:00:49 517  	    in_trans_deb_or_cred,
16:00:49 518  	    in_gross_trans_amount,
16:00:49 519  	    in_gross_trans_currency,
16:00:49 520  	    in_fee_deb_or_cred,
16:00:49 521  	    in_fee_amount,
16:00:49 522  	    in_fee_currency,
16:00:49 523  	    in_custom_field,
16:00:49 524  	    var_date,
16:00:49 525  	    in_created_by
16:00:49 526  	  );
16:00:49 527  
16:00:49 528  	out_pp_settlement_id := var_pp_settlement_id;
16:00:49 529  END CREATE_PP_SETTLEMENT;
16:00:49 530  
16:00:49 531  PROCEDURE CREATE_PP_DISPUTE (
16:00:49 532  	out_pp_dispute_id	     OUT RCN_PP_DISPUTE.ID%TYPE,
16:00:49 533  	in_pp_dispute_id	     IN RCN_PP_DISPUTE.ID%TYPE DEFAULT NULL,
16:00:49 534  	in_ext_source_log_id	     IN RCN_PP_DISPUTE.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 535  	in_dispute_type 	     IN RCN_PP_DISPUTE.DISPUTE_TYPE%TYPE,
16:00:49 536  	in_claimant_name	     IN RCN_PP_DISPUTE.CLAIMANT_NAME%TYPE,
16:00:49 537  	in_claimant_email	     IN RCN_PP_DISPUTE.CLAIMANT_EMAIL%TYPE,
16:00:49 538  	in_transaction_id	     IN RCN_PP_DISPUTE.TRANSACTION_ID%TYPE,
16:00:49 539  	in_trans_date		     IN RCN_PP_DISPUTE.TRANS_DATE%TYPE,
16:00:49 540  	in_disputed_amount	     IN RCN_PP_DISPUTE.DISPUTED_AMOUNT%TYPE,
16:00:49 541  	in_disputed_amount_currency  IN RCN_PP_DISPUTE.DISPUTED_AMOUNT_CURRENCY%TYPE,
16:00:49 542  	in_dispute_reason	     IN RCN_PP_DISPUTE.DISPUTE_REASON%TYPE,
16:00:49 543  	in_dispute_filing_date	     IN RCN_PP_DISPUTE.DISPUTE_FILING_DATE%TYPE,
16:00:49 544  	in_dispute_status	     IN RCN_PP_DISPUTE.DISPUTE_STATUS%TYPE,
16:00:49 545  	in_dispute_case_id	     IN RCN_PP_DISPUTE.DISPUTE_CASE_ID%TYPE,
16:00:49 546  	in_invoice_id		     IN RCN_PP_DISPUTE.INVOICE_ID%TYPE,
16:00:49 547  	in_created_by		     IN RCN_PP_DISPUTE.CREATED_BY%TYPE
16:00:49 548  ) AS
16:00:49 549  -- VARIABLES
16:00:49 550  var_pp_dispute_id RCN_PP_DISPUTE.ID%TYPE;
16:00:49 551  var_date DATE := SYSDATE;
16:00:49 552  BEGIN
16:00:49 553  	IF in_pp_dispute_id IS NULL THEN
16:00:49 554  	  SELECT
16:00:49 555  	    RCN_PP_DISPUTE_SEQ.nextVal into var_pp_dispute_id
16:00:49 556  	  FROM DUAL;
16:00:49 557  	ELSE
16:00:49 558  	  var_pp_dispute_id := in_pp_dispute_id;
16:00:49 559  	END IF;
16:00:49 560  	INSERT INTO
16:00:49 561  	  RCN_PP_DISPUTE (
16:00:49 562  	    id,
16:00:49 563  	    rcn_ext_source_log_id,
16:00:49 564  	    dispute_type,
16:00:49 565  	    claimant_name,
16:00:49 566  	    claimant_email,
16:00:49 567  	    transaction_id,
16:00:49 568  	    trans_date,
16:00:49 569  	    disputed_amount,
16:00:49 570  	    disputed_amount_currency,
16:00:49 571  	    dispute_reason,
16:00:49 572  	    dispute_filing_date,
16:00:49 573  	    dispute_status,
16:00:49 574  	    dispute_case_id,
16:00:49 575  	    invoice_id,
16:00:49 576  	    create_date,
16:00:49 577  	    created_by
16:00:49 578  	  ) VALUES (
16:00:49 579  	    var_pp_dispute_id,
16:00:49 580  	    in_ext_source_log_id,
16:00:49 581  	    in_dispute_type,
16:00:49 582  	    in_claimant_name,
16:00:49 583  	    in_claimant_email,
16:00:49 584  	    in_transaction_id,
16:00:49 585  	    in_trans_date,
16:00:49 586  	    in_disputed_amount,
16:00:49 587  	    in_disputed_amount_currency,
16:00:49 588  	    in_dispute_reason,
16:00:49 589  	    in_dispute_filing_date,
16:00:49 590  	    in_dispute_status,
16:00:49 591  	    in_dispute_case_id,
16:00:49 592  	    in_invoice_id,
16:00:49 593  	    var_date,
16:00:49 594  	    in_created_by
16:00:49 595  	  );
16:00:49 596  
16:00:49 597  	out_pp_dispute_id := var_pp_dispute_id;
16:00:49 598  END CREATE_PP_DISPUTE;
16:00:49 599  
16:00:49 600  PROCEDURE CREATE_PP_TRANS_DETAIL (
16:00:49 601  	out_pp_trans_detail_id	     OUT RCN_PP_TRANS_DETAIL.ID%TYPE,
16:00:49 602  	in_pp_trans_detail_id	     IN RCN_PP_TRANS_DETAIL.ID%TYPE DEFAULT NULL,
16:00:49 603  	in_ext_source_log_id	     IN RCN_PP_TRANS_DETAIL.RCN_EXT_SOURCE_LOG_ID%TYPE,
16:00:49 604  	in_invoice_id		     IN RCN_PP_TRANS_DETAIL.INVOICE_ID%TYPE,
16:00:49 605  	in_transaction_id	     IN RCN_PP_TRANS_DETAIL.TRANSACTION_ID%TYPE,
16:00:49 606  	in_pp_ref_id		     IN RCN_PP_TRANS_DETAIL.PP_REF_ID%TYPE,
16:00:49 607  	in_trans_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.TRANS_DEB_OR_CRED%TYPE,
16:00:49 608  	in_trans_init_date	     IN RCN_PP_TRANS_DETAIL.TRANS_INIT_DATE%TYPE,
16:00:49 609  	in_trans_comp_date	     IN RCN_PP_TRANS_DETAIL.TRANS_COMP_DATE%TYPE,
16:00:49 610  	in_gross_trans_amount	     IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_AMOUNT%TYPE,
16:00:49 611  	in_gross_trans_currency      IN RCN_PP_TRANS_DETAIL.GROSS_TRANS_CURRENCY%TYPE,
16:00:49 612  	in_fee_amount		     IN RCN_PP_TRANS_DETAIL.FEE_AMOUNT%TYPE,
16:00:49 613  	in_fee_currency 	     IN RCN_PP_TRANS_DETAIL.FEE_CURRENCY%TYPE,
16:00:49 614  	in_fee_deb_or_cred	     IN RCN_PP_TRANS_DETAIL.FEE_DEB_OR_CRED%TYPE,
16:00:49 615  	in_trans_event_code	     IN RCN_PP_TRANS_DETAIL.TRANS_EVENT_CODE%TYPE,
16:00:49 616  	in_trans_status 	     IN RCN_PP_TRANS_DETAIL.TRANS_STATUS%TYPE,
16:00:49 617  	in_insurance_amount	     IN RCN_PP_TRANS_DETAIL.INSURANCE_AMOUNT%TYPE,
16:00:49 618  	in_sales_tax_amount	     IN RCN_PP_TRANS_DETAIL.SALES_TAX_AMOUNT%TYPE,
16:00:49 619  	in_shipping_amount	     IN RCN_PP_TRANS_DETAIL.SHIPPING_AMOUNT%TYPE,
16:00:49 620  	in_trans_subject	     IN RCN_PP_TRANS_DETAIL.TRANS_SUBJECT%TYPE,
16:00:49 621  	in_trans_note		     IN RCN_PP_TRANS_DETAIL.TRANS_NOTE%TYPE,
16:00:49 622  	in_payer_acct_id	     IN RCN_PP_TRANS_DETAIL.PAYER_ACCT_ID%TYPE,
16:00:49 623  	in_payer_addr_status	     IN RCN_PP_TRANS_DETAIL.PAYER_ADDR_STATUS%TYPE,
16:00:49 624  	in_item_name		     IN RCN_PP_TRANS_DETAIL.ITEM_NAME%TYPE,
16:00:49 625  	in_item_id		     IN RCN_PP_TRANS_DETAIL.ITEM_ID%TYPE,
16:00:49 626  	in_option_1_name	     IN RCN_PP_TRANS_DETAIL.OPTION_1_NAME%TYPE,
16:00:49 627  	in_option_1_value	     IN RCN_PP_TRANS_DETAIL.OPTION_1_VALUE%TYPE,
16:00:49 628  	in_option_2_name	     IN RCN_PP_TRANS_DETAIL.OPTION_2_NAME%TYPE,
16:00:49 629  	in_option_2_value	     IN RCN_PP_TRANS_DETAIL.OPTION_2_VALUE%TYPE,
16:00:49 630  	in_auction_site 	     IN RCN_PP_TRANS_DETAIL.AUCTION_SITE%TYPE,
16:00:49 631  	in_auction_buyer_id	     IN RCN_PP_TRANS_DETAIL.AUCTION_BUYER_ID%TYPE,
16:00:49 632  	in_auction_closing_date      IN RCN_PP_TRANS_DETAIL.AUCTION_CLOSING_DATE%TYPE,
16:00:49 633  	in_shipping_addr_line_1      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_1%TYPE,
16:00:49 634  	in_shipping_addr_line_2      IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_LINE_2%TYPE,
16:00:49 635  	in_shipping_addr_city	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_CITY%TYPE,
16:00:49 636  	in_shipping_addr_state	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_STATE%TYPE,
16:00:49 637  	in_shipping_addr_zip	     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_ZIP%TYPE,
16:00:49 638  	in_shipping_addr_country     IN RCN_PP_TRANS_DETAIL.SHIPPING_ADDR_COUNTRY%TYPE,
16:00:49 639  	in_custom_field 	     IN RCN_PP_TRANS_DETAIL.CUSTOM_FIELD%TYPE,
16:00:49 640  	in_created_by		     IN RCN_PP_TRANS_DETAIL.CREATED_BY%TYPE
16:00:49 641  ) AS
16:00:49 642  -- VARIABLES
16:00:49 643  var_pp_trans_detail_id RCN_PP_TRANS_DETAIL.ID%TYPE;
16:00:49 644  var_date DATE := SYSDATE;
16:00:49 645  BEGIN
16:00:49 646  	IF in_pp_trans_detail_id IS NULL THEN
16:00:49 647  	  SELECT
16:00:49 648  	    RCN_PP_TRANS_DETAIL_SEQ.nextVal into var_pp_trans_detail_id
16:00:49 649  	  FROM DUAL;
16:00:49 650  	ELSE
16:00:49 651  	  var_pp_trans_detail_id := in_pp_trans_detail_id;
16:00:49 652  	END IF;
16:00:49 653  	INSERT INTO
16:00:49 654  	  RCN_PP_TRANS_DETAIL (
16:00:49 655  	    id,
16:00:49 656  	    rcn_ext_source_log_id,
16:00:49 657  	    transaction_id,
16:00:49 658  	    invoice_id,
16:00:49 659  	    pp_ref_id,
16:00:49 660  	    trans_event_code,
16:00:49 661  	    trans_init_date,
16:00:49 662  	    trans_comp_date,
16:00:49 663  	    trans_deb_or_cred,
16:00:49 664  	    gross_trans_amount,
16:00:49 665  	    gross_trans_currency,
16:00:49 666  	    fee_deb_or_cred,
16:00:49 667  	    fee_amount,
16:00:49 668  	    fee_currency,
16:00:49 669  	    trans_status,
16:00:49 670  	    insurance_amount,
16:00:49 671  	    sales_tax_amount,
16:00:49 672  	    shipping_amount,
16:00:49 673  	    trans_subject,
16:00:49 674  	    trans_note,
16:00:49 675  	    payer_acct_id,
16:00:49 676  	    payer_addr_status,
16:00:49 677  	    item_name,
16:00:49 678  	    item_id,
16:00:49 679  	    option_1_name,
16:00:49 680  	    option_1_value,
16:00:49 681  	    option_2_name,
16:00:49 682  	    option_2_value,
16:00:49 683  	    auction_site,
16:00:49 684  	    auction_buyer_id,
16:00:49 685  	    auction_closing_date,
16:00:49 686  	    shipping_addr_line_1,
16:00:49 687  	    shipping_addr_line_2,
16:00:49 688  	    shipping_addr_city,
16:00:49 689  	    shipping_addr_state,
16:00:49 690  	    shipping_addr_zip,
16:00:49 691  	    shipping_addr_country,
16:00:49 692  	    custom_field,
16:00:49 693  	    create_date,
16:00:49 694  	    created_by
16:00:49 695  	  ) VALUES (
16:00:49 696  	    var_pp_trans_detail_id,
16:00:49 697  	    in_ext_source_log_id,
16:00:49 698  	    in_transaction_id,
16:00:49 699  	    in_invoice_id,
16:00:49 700  	    in_pp_ref_id,
16:00:49 701  	    in_trans_event_code,
16:00:49 702  	    in_trans_init_date,
16:00:49 703  	    in_trans_comp_date,
16:00:49 704  	    in_trans_deb_or_cred,
16:00:49 705  	    in_gross_trans_amount,
16:00:49 706  	    in_gross_trans_currency,
16:00:49 707  	    in_fee_deb_or_cred,
16:00:49 708  	    in_fee_amount,
16:00:49 709  	    in_fee_currency,
16:00:49 710  	    in_trans_status,
16:00:49 711  	    in_insurance_amount,
16:00:49 712  	    in_sales_tax_amount,
16:00:49 713  	    in_shipping_amount,
16:00:49 714  	    in_trans_subject,
16:00:49 715  	    in_trans_note,
16:00:49 716  	    in_payer_acct_id,
16:00:49 717  	    in_payer_addr_status,
16:00:49 718  	    in_item_name,
16:00:49 719  	    in_item_id,
16:00:49 720  	    in_option_1_name,
16:00:49 721  	    in_option_1_value,
16:00:49 722  	    in_option_2_name,
16:00:49 723  	    in_option_2_value,
16:00:49 724  	    in_auction_site,
16:00:49 725  	    in_auction_buyer_id,
16:00:49 726  	    in_auction_closing_date,
16:00:49 727  	    in_shipping_addr_line_1,
16:00:49 728  	    in_shipping_addr_line_2,
16:00:49 729  	    in_shipping_addr_city,
16:00:49 730  	    in_shipping_addr_state,
16:00:49 731  	    in_shipping_addr_zip,
16:00:49 732  	    in_shipping_addr_country,
16:00:49 733  	    in_custom_field,
16:00:49 734  	    var_date,
16:00:49 735  	    in_created_by
16:00:49 736  	  );
16:00:49 737  
16:00:49 738  	out_pp_trans_detail_id := var_pp_trans_detail_id;
16:00:49 739  END CREATE_PP_TRANS_DETAIL;
16:00:49 740  
16:00:49 741  PROCEDURE DELETE_EXT_SOURCE_LOG (
16:00:49 742  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:49 743  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
16:00:49 744  ) AS
16:00:49 745  BEGIN
16:00:49 746  	DELETE FROM
16:00:49 747  	  RCN_EXT_SOURCE_LOG
16:00:49 748  	WHERE
16:00:49 749  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
16:00:49 750  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
16:00:49 751  END DELETE_EXT_SOURCE_LOG;
16:00:49 752  
16:00:49 753  PROCEDURE GET_EXT_SOURCE_LOG (
16:00:49 754  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:49 755  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE,
16:00:49 756  	out_result_set		 OUT SYS_REFCURSOR
16:00:49 757  ) AS
16:00:49 758  BEGIN
16:00:49 759  	OPEN out_result_set FOR
16:00:49 760  	SELECT * FROM
16:00:49 761  	  RCN_EXT_SOURCE_LOG
16:00:49 762  	WHERE
16:00:49 763  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
16:00:49 764  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
16:00:49 765  END GET_EXT_SOURCE_LOG;
16:00:49 766  
16:00:49 767  FUNCTION CHECK_EXT_SOURCE_LOG (
16:00:49 768  	in_record_type		 IN RCN_EXT_SOURCE_LOG.RECORD_TYPE%TYPE,
16:00:49 769  	in_report_file_name	 IN RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME%TYPE
16:00:49 770  ) RETURN NUMBER AS
16:00:49 771  var_exists NUMBER;
16:00:49 772  BEGIN
16:00:49 773  	SELECT count(1) INTO var_exists
16:00:49 774  	FROM
16:00:49 775  	  RCN_EXT_SOURCE_LOG
16:00:49 776  	WHERE
16:00:49 777  	  RCN_EXT_SOURCE_LOG.RECORD_TYPE = in_record_type AND
16:00:49 778  	  RCN_EXT_SOURCE_LOG.REPORT_FILE_NAME = in_report_file_name;
16:00:49 779  
16:00:49 780  	IF var_exists > 1 THEN
16:00:49 781  	  var_exists := 1;
16:00:49 782  	END IF;
16:00:49 783  
16:00:49 784  	RETURN var_exists;
16:00:49 785  END;
16:00:49 786  
16:00:49 787  PROCEDURE CREATE_AMEX_CHARGEBACK (
16:00:49 788  	  in_rcn_ext_source_log_id IN RCN_EXT_SOURCE_LOG.ID%TYPE,
16:00:49 789  	  in_resolution IN RCN_AMEX_CHARGEBACK.RESOLUTION%TYPE,
16:00:49 790  	  in_from_system IN RCN_AMEX_CHARGEBACK.FROM_SYSTEM%TYPE,
16:00:49 791  	  in_rejects_to_system IN RCN_AMEX_CHARGEBACK.REJECTS_TO_SYSTEM%TYPE,
16:00:49 792  	  in_disputes_to_system IN RCN_AMEX_CHARGEBACK.DISPUTES_TO_SYSTEM%TYPE,
16:00:49 793  	  in_date_of_adjustment IN RCN_AMEX_CHARGEBACK.DATE_OF_ADJUSTMENT%TYPE,
16:00:49 794  	  in_date_of_charge IN RCN_AMEX_CHARGEBACK.DATE_OF_CHARGE%TYPE,
16:00:49 795  	  in_case_type IN RCN_AMEX_CHARGEBACK.CASE_TYPE%TYPE,
16:00:49 796  	  in_cb_reas_code IN RCN_AMEX_CHARGEBACK.CB_REAS_CODE%TYPE,
16:00:49 797  	  in_cb_amount IN RCN_AMEX_CHARGEBACK.CB_AMOUNT%TYPE,
16:00:49 798  	  in_cb_adjustment_number IN RCN_AMEX_CHARGEBACK.CB_ADJUSTMENT_NUMBER%TYPE,
16:00:49 799  	  in_billed_amount IN RCN_AMEX_CHARGEBACK.BILLED_AMOUNT%TYPE,
16:00:49 800  	  in_soc_amount IN RCN_AMEX_CHARGEBACK.SOC_AMOUNT%TYPE,
16:00:49 801  	  in_foreign_amount IN RCN_AMEX_CHARGEBACK.FOREIGN_AMOUNT%TYPE,
16:00:49 802  	  in_currency IN RCN_AMEX_CHARGEBACK.CURRENCY%TYPE,
16:00:49 803  	  in_note1 IN RCN_AMEX_CHARGEBACK.NOTE1%TYPE,
16:00:49 804  	  in_note2 IN RCN_AMEX_CHARGEBACK.NOTE2%TYPE,
16:00:49 805  	  in_note3 IN RCN_AMEX_CHARGEBACK.NOTE3%TYPE,
16:00:49 806  	  in_note4 IN RCN_AMEX_CHARGEBACK.NOTE4%TYPE,
16:00:49 807  	  in_note5 IN RCN_AMEX_CHARGEBACK.NOTE5%TYPE,
16:00:49 808  	  in_note6 IN RCN_AMEX_CHARGEBACK.NOTE6%TYPE,
16:00:49 809  	  in_note7 IN RCN_AMEX_CHARGEBACK.NOTE7%TYPE,
16:00:49 810  	  in_ind_ref_number IN RCN_AMEX_CHARGEBACK.IND_REF_NUMBER%TYPE,
16:00:49 811  	  in_created_by IN RCN_AMEX_CHARGEBACK.CREATED_BY%TYPE
16:00:49 812  ) AS
16:00:49 813  var_amex_chargeback_id RCN_AMEX_CHARGEBACK.ID%TYPE;
16:00:49 814  var_date DATE := SYSDATE;
16:00:49 815  BEGIN
16:00:49 816  	SELECT
16:00:49 817  	  RCNAMEXCB_ID_SEQ.nextVal into var_amex_chargeback_id
16:00:49 818  	FROM DUAL;
16:00:49 819  
16:00:49 820  	INSERT INTO
16:00:49 821  	  RCN_AMEX_CHARGEBACK (
16:00:49 822  	    id,
16:00:49 823  	    rcn_ext_source_log_id,
16:00:49 824  	    resolution,
16:00:49 825  	    from_system,
16:00:49 826  	    rejects_to_system,
16:00:49 827  	    disputes_to_system,
16:00:49 828  	    date_of_adjustment,
16:00:49 829  	    date_of_charge,
16:00:49 830  	    case_type,
16:00:49 831  	    cb_reas_code,
16:00:49 832  	    cb_amount,
16:00:49 833  	    cb_adjustment_number,
16:00:49 834  	    billed_amount,
16:00:49 835  	    soc_amount,
16:00:49 836  	    foreign_amount,
16:00:49 837  	    currency,
16:00:49 838  	    note1,
16:00:49 839  	    note2,
16:00:49 840  	    note3,
16:00:49 841  	    note4,
16:00:49 842  	    note5,
16:00:49 843  	    note6,
16:00:49 844  	    note7,
16:00:49 845  	    ind_ref_number,
16:00:49 846  	    create_date,
16:00:49 847  	    created_by,
16:00:49 848  	    update_date,
16:00:49 849  	    updated_by
16:00:49 850  	  ) VALUES (
16:00:49 851  	    var_amex_chargeback_id,
16:00:49 852  	    in_rcn_ext_source_log_id,
16:00:49 853  	    in_resolution,
16:00:49 854  	    in_from_system,
16:00:49 855  	    in_rejects_to_system,
16:00:49 856  	    in_disputes_to_system,
16:00:49 857  	    in_date_of_adjustment,
16:00:49 858  	    in_date_of_charge,
16:00:49 859  	    in_case_type,
16:00:49 860  	    in_cb_reas_code,
16:00:49 861  	    in_cb_amount,
16:00:49 862  	    in_cb_adjustment_number,
16:00:49 863  	    in_billed_amount,
16:00:49 864  	    in_soc_amount,
16:00:49 865  	    in_foreign_amount,
16:00:49 866  	    in_currency,
16:00:49 867  	    in_note1,
16:00:49 868  	    in_note2,
16:00:49 869  	    in_note3,
16:00:49 870  	    in_note4,
16:00:49 871  	    in_note5,
16:00:49 872  	    in_note6,
16:00:49 873  	    in_note7,
16:00:49 874  	    in_ind_ref_number,
16:00:49 875  	    var_date,
16:00:49 876  	    in_created_by,
16:00:49 877  	    var_date,
16:00:49 878  	    in_created_by
16:00:49 879  	  );
16:00:49 880  
16:00:49 881  END CREATE_AMEX_CHARGEBACK;
16:00:49 882  
16:00:49 883  END PROCS_RECONCILIATION_CRU_V20;
16:00:49 884  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.09
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_SUBSCRIPTION(
16:00:49   4  	out_subscription_id	     OUT SUBSCRIPTION.ID%TYPE,
16:00:49   5  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE DEFAULT NULL,
16:00:49   6  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:49   7  	in_account_id		     IN SUBSCRIPTION.ACCOUNT_ID%TYPE,
16:00:49   8  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE,
16:00:49   9  	in_offer_chain_id	     IN SUBSCRIPTION.OFFER_CHAIN_ID%TYPE,
16:00:49  10  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:00:49  11  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:00:49  12  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:00:49  13  	in_created_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:00:49  14  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE,
16:00:49  15  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:00:49  16  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:00:49  17  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:00:49  18  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:00:49  19  ) AS
16:00:49  20  -- VARIABLES
16:00:49  21  var_new_subscription_id SUBSCRIPTION.ID%TYPE;
16:00:49  22  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:49  23  var_date DATE := SYSDATE;
16:00:49  24  BEGIN
16:00:49  25  	IF in_subscription_id IS NULL THEN
16:00:49  26  	  SELECT
16:00:49  27  	    SUB_ID_SEQ.nextVal into var_new_subscription_id
16:00:49  28  	  FROM DUAL;
16:00:49  29  	ELSE
16:00:49  30  	  var_new_subscription_id := in_subscription_id;
16:00:49  31  	END IF;
16:00:49  32  	INSERT INTO SUBSCRIPTION (
16:00:49  33  	  ID,
16:00:49  34  	  SUSPEND_DATE,
16:00:49  35  	  ACCOUNT_ID,
16:00:49  36  	  PURCHASE_DATE,
16:00:49  37  	  OFFER_CHAIN_ID,
16:00:49  38  	  TERMINATION_DATE,
16:00:49  39  	  DAYS_REMAINING_ADJUSTMENT,
16:00:49  40  	  SCT_ID,
16:00:49  41  	  CREATE_DATE,
16:00:49  42  	  CREATED_BY,
16:00:49  43  	  UPDATE_DATE,
16:00:49  44  	  UPDATED_BY,
16:00:49  45  	  INSTRUMENT_TYPE_ID,
16:00:49  46  	  INSTRUMENT_ID,
16:00:49  47  	  SUBSCRIPTION_STATUS_ID,
16:00:49  48  	  CANCELLATION_DATE,
16:00:49  49  	  REACTIVATION_DATE
16:00:49  50  	) VALUES (
16:00:49  51  	  var_new_subscription_id,
16:00:49  52  	  in_suspend_date,
16:00:49  53  	  in_account_id,
16:00:49  54  	  in_purchase_date,
16:00:49  55  	  in_offer_chain_id,
16:00:49  56  	  in_termination_date,
16:00:49  57  	  in_days_remainning_ajustment,
16:00:49  58  	  in_sct_id,
16:00:49  59  	  var_date,
16:00:49  60  	  in_created_by,
16:00:49  61  	  var_date,
16:00:49  62  	  in_created_by,
16:00:49  63  	  in_instrument_type_id,
16:00:49  64  	  in_instrument_id,
16:00:49  65  	  in_subscription_status_id,
16:00:49  66  	  in_cancelation_date,
16:00:49  67  	  in_reactivation_date
16:00:49  68  	);
16:00:49  69  
16:00:49  70  	out_subscription_id := var_new_subscription_id;
16:00:49  71  END CREATE_SUBSCRIPTION;
16:00:49  72  
16:00:49  73  /******************************************************************************/
16:00:49  74  
16:00:49  75  PROCEDURE UPDATE_SUBSCRIPTION(
16:00:49  76  	in_subscription_id	     IN SUBSCRIPTION.ID%TYPE,
16:00:49  77  	in_suspend_date 	     IN SUBSCRIPTION.SUSPEND_DATE%TYPE DEFAULT NULL,
16:00:49  78  	in_purchase_date	     IN SUBSCRIPTION.PURCHASE_DATE%TYPE DEFAULT NULL,
16:00:49  79  	in_termination_date	     IN SUBSCRIPTION.TERMINATION_DATE%TYPE DEFAULT NULL,
16:00:49  80  	in_days_remainning_ajustment IN SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT%TYPE DEFAULT NULL,
16:00:49  81  	in_sct_id		     IN SUBSCRIPTION.SCT_ID%TYPE DEFAULT NULL,
16:00:49  82  	in_updated_by		     IN SUBSCRIPTION.CREATED_BY%TYPE,
16:00:49  83  	in_instrument_type_id	     IN SUBSCRIPTION.INSTRUMENT_TYPE_ID%TYPE DEFAULT NULL,
16:00:49  84  	in_instrument_id	     IN SUBSCRIPTION.INSTRUMENT_ID%TYPE DEFAULT NULL,
16:00:49  85  	in_subscription_status_id    IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE DEFAULT NULL,
16:00:49  86  	in_cancelation_date	     IN SUBSCRIPTION.CANCELLATION_DATE%TYPE DEFAULT NULL,
16:00:49  87  	in_reactivation_date	     IN SUBSCRIPTION.REACTIVATION_DATE%TYPE DEFAULT NULL
16:00:49  88  ) AS
16:00:49  89  BEGIN
16:00:49  90  	-- Create history
16:00:49  91  	PROCS_HISTORY_V20.CREATE_SUBSCRIPTION_HISTORY(
16:00:49  92  	  in_subscription_id	       => in_subscription_id,
16:00:49  93  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49  94  	);
16:00:49  95  
16:00:49  96  	UPDATE SUBSCRIPTION SET
16:00:49  97  	  SUSPEND_DATE		    = NVL(in_suspend_date, SUSPEND_DATE),
16:00:49  98  	  PURCHASE_DATE 	    = NVL(in_purchase_date, PURCHASE_DATE),
16:00:49  99  	  TERMINATION_DATE	    = NVL(in_termination_date, TERMINATION_DATE),
16:00:49 100  	  DAYS_REMAINING_ADJUSTMENT = NVL(days_remaining_adjustment, DAYS_REMAINING_ADJUSTMENT),
16:00:49 101  	  SCT_ID		    = NVL(in_sct_id, SCT_ID),
16:00:49 102  	  UPDATE_DATE		    = SYSDATE,
16:00:49 103  	  UPDATED_BY		    = in_updated_by,
16:00:49 104  	  INSTRUMENT_TYPE_ID	    = NVL(in_instrument_type_id, INSTRUMENT_TYPE_ID),
16:00:49 105  	  INSTRUMENT_ID 	    = NVL(in_instrument_id, INSTRUMENT_ID),
16:00:49 106  	  SUBSCRIPTION_STATUS_ID    = NVL(in_subscription_status_id, SUBSCRIPTION_STATUS_ID),
16:00:49 107  	  CANCELLATION_DATE	    = NVL(in_cancelation_date, CANCELLATION_DATE),
16:00:49 108  	  REACTIVATION_DATE	    = NVL(in_reactivation_date, REACTIVATION_DATE)
16:00:49 109  	WHERE
16:00:49 110  	  ID = in_subscription_id;
16:00:49 111  END UPDATE_SUBSCRIPTION;
16:00:49 112  
16:00:49 113  /******************************************************************************/
16:00:49 114  
16:00:49 115  PROCEDURE CREATE_SUBSCRIPTION_NOTE (
16:00:49 116  	inout_subscription_note_id IN OUT SUBSCRIPTION_NOTE.ID%TYPE,
16:00:49 117  	in_agent_id		   IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:49 118  	in_subscription_id	   IN SUBSCRIPTION_NOTE.ID%TYPE,
16:00:49 119  	in_note 		   IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:49 120  	in_created_by		   IN SUBSCRIPTION_NOTE.CREATED_BY%TYPE
16:00:49 121  ) AS
16:00:49 122  BEGIN
16:00:49 123  	IF inout_subscription_note_id IS NULL THEN
16:00:49 124  	  SELECT
16:00:49 125  	    SUBN_ID_SEQ.nextVal into inout_subscription_note_id
16:00:49 126  	  FROM DUAL;
16:00:49 127  	END IF;
16:00:49 128  	INSERT INTO SUBSCRIPTION_NOTE (
16:00:49 129  	  ID,
16:00:49 130  	  AGENT_ID,
16:00:49 131  	  SUBSCRIPTION_ID,
16:00:49 132  	  NOTE,
16:00:49 133  	  CREATE_DATE,
16:00:49 134  	  CREATED_BY
16:00:49 135  	) VALUES (
16:00:49 136  	  inout_subscription_note_id,
16:00:49 137  	  in_agent_id,
16:00:49 138  	  in_subscription_id,
16:00:49 139  	  in_note,
16:00:49 140  	  SYSDATE,
16:00:49 141  	  in_created_by
16:00:49 142  	);
16:00:49 143  END CREATE_SUBSCRIPTION_NOTE;
16:00:49 144  
16:00:49 145  END PROCS_SUBSCRIPTION_CRU_V20;
16:00:49 146  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_TAX (
16:00:49   4  	inout_tax_id		 IN OUT NUMBER,
16:00:49   5  	in_tax_type_id		 IN NUMBER,
16:00:49   6  	in_calculated_amount	 IN NUMBER,
16:00:49   7  	in_created_by		 IN VARCHAR2,
16:00:49   8  	in_line_item_id 	 IN NUMBER,
16:00:49   9  	in_effective_rate	 IN VARCHAR2,
16:00:49  10  	in_taxable_amount	 IN NUMBER,
16:00:49  11  	in_tax_rule_id		 IN NUMBER,
16:00:49  12  	in_jurisdiction_level_id IN NUMBER,
16:00:49  13  	in_jurisdiction_name	 IN VARCHAR2,
16:00:49  14  	in_jurisdiction_id	 IN VARCHAR2,
16:00:49  15  	in_ext_tax_type 	 IN VARCHAR2,
16:00:49  16  	in_ext_result		 IN VARCHAR2,
16:00:49  17  	in_imposition_type	 IN VARCHAR2,
16:00:49  18  	in_imposition		 IN VARCHAR2
16:00:49  19  ) AS
16:00:49  20  var_date DATE := SYSDATE;
16:00:49  21  BEGIN
16:00:49  22  
16:00:49  23  	IF inout_tax_id IS NULL THEN
16:00:49  24  	  SELECT
16:00:49  25  	    TAX_ID_SEQ.nextVal into inout_tax_id
16:00:49  26  	  FROM DUAL;
16:00:49  27  	END IF;
16:00:49  28  
16:00:49  29  	INSERT INTO TAX (
16:00:49  30  	  ID,
16:00:49  31  	  TAX_TYPE_ID,
16:00:49  32  	  CALCULATED_AMOUNT,
16:00:49  33  	  CREATE_DATE,
16:00:49  34  	  CREATED_BY,
16:00:49  35  	  LINE_ITEM_ID,
16:00:49  36  	  EFFECTIVE_RATE,
16:00:49  37  	  TAXABLE_AMOUNT,
16:00:49  38  	  TAX_RULE_ID,
16:00:49  39  	  JURISDICTION_LEVEL_ID,
16:00:49  40  	  JURISDICTION_NAME,
16:00:49  41  	  JURISDICTION_ID,
16:00:49  42  	  EXT_TAX_TYPE,
16:00:49  43  	  EXT_RESULT,
16:00:49  44  	  IMPOSITION_TYPE,
16:00:49  45  	  IMPOSITION
16:00:49  46  	) VALUES (
16:00:49  47  	  inout_tax_id,
16:00:49  48  	  in_tax_type_id,
16:00:49  49  	  in_calculated_amount,
16:00:49  50  	  var_date,
16:00:49  51  	  in_created_by,
16:00:49  52  	  in_line_item_id,
16:00:49  53  	  in_effective_rate,
16:00:49  54  	  in_taxable_amount,
16:00:49  55  	  in_tax_rule_id,
16:00:49  56  	  in_jurisdiction_level_id,
16:00:49  57  	  in_jurisdiction_name,
16:00:49  58  	  in_jurisdiction_id,
16:00:49  59  	  in_ext_tax_type,
16:00:49  60  	  in_ext_result,
16:00:49  61  	  in_imposition_type,
16:00:49  62  	  in_imposition
16:00:49  63  	);
16:00:49  64  
16:00:49  65  END CREATE_TAX;
16:00:49  66  
16:00:49  67  END PROCS_TAXES_CRU_V20;
16:00:49  68  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_CRU_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_TRANSACTION (
16:00:49   4  	out_transaction_id	 OUT TRANSACTION.ID%TYPE,
16:00:49   5  	in_transaction_id	 IN TRANSACTION.ID%TYPE DEFAULT NULL,
16:00:49   6  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE,
16:00:49   7  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE,
16:00:49   8  	in_created_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:00:49   9  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE,
16:00:49  10  	in_is_refund		 IN TRANSACTION.IS_REFUND%TYPE DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
16:00:49  11  	in_transaction_type_code IN TRANSACTION.TRANSACTION_TYPE_CODE%TYPE DEFAULT NULL
16:00:49  12  ) AS
16:00:49  13  -- VARIABLES
16:00:49  14  var_transaction_id TRANSACTION.ID%TYPE;
16:00:49  15  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:49  16  var_date DATE := SYSDATE;
16:00:49  17  BEGIN
16:00:49  18  	IF in_transaction_id IS NULL THEN
16:00:49  19  	  SELECT
16:00:49  20  	    TRN_ID_SEQ.nextVal into var_transaction_id
16:00:49  21  	  FROM DUAL;
16:00:49  22  	ELSE
16:00:49  23  	  var_transaction_id := in_transaction_id;
16:00:49  24  	END IF;
16:00:49  25  	INSERT INTO
16:00:49  26  	  TRANSACTION (
16:00:49  27  	    ID,
16:00:49  28  	    TRANSACTION_STATUS_ID,
16:00:49  29  	    TRANSACTION_AMOUNT,
16:00:49  30  	    CREATE_DATE,
16:00:49  31  	    CREATED_BY,
16:00:49  32  	    UPDATE_DATE,
16:00:49  33  	    UPDATED_BY,
16:00:49  34  	    ORDER_ID,
16:00:49  35  	    IS_REFUND,
16:00:49  36  	    TRANSACTION_TYPE_CODE
16:00:49  37  	  ) VALUES (
16:00:49  38  	    var_transaction_id,
16:00:49  39  	    in_transaction_status_id,
16:00:49  40  	    in_transaction_amount,
16:00:49  41  	    var_date,
16:00:49  42  	    in_created_by,
16:00:49  43  	    var_date,
16:00:49  44  	    in_created_by,
16:00:49  45  	    in_order_id,
16:00:49  46  	    in_is_refund,
16:00:49  47  	    in_transaction_type_code
16:00:49  48  	  );
16:00:49  49  
16:00:49  50  	out_transaction_id := var_transaction_id;
16:00:49  51  END CREATE_TRANSACTION;
16:00:49  52  
16:00:49  53  /*******************************************************************/
16:00:49  54  
16:00:49  55  PROCEDURE UPDATE_TRANSACTION (
16:00:49  56  	in_transaction_id	 IN TRANSACTION.ID%TYPE,
16:00:49  57  	in_transaction_status_id IN TRANSACTION.TRANSACTION_STATUS_ID%TYPE DEFAULT NULL,
16:00:49  58  	in_transaction_amount	 IN TRANSACTION.TRANSACTION_AMOUNT%TYPE DEFAULT NULL,
16:00:49  59  	in_updated_by		 IN TRANSACTION.CREATED_BY%TYPE,
16:00:49  60  	in_order_id		 IN TRANSACTION.ORDER_ID%TYPE DEFAULT NULL,
16:00:49  61  	in_is_settled		 IN TRANSACTION.IS_SETTLED%TYPE DEFAULT NULL
16:00:49  62  ) AS
16:00:49  63  BEGIN
16:00:49  64  	-- Create history
16:00:49  65  	PROCS_HISTORY_V20.CREATE_TRANSACTION_HISTORY(
16:00:49  66  	  in_transaction_id	       => in_transaction_id,
16:00:49  67  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49  68  	);
16:00:49  69  	UPDATE
16:00:49  70  	  TRANSACTION
16:00:49  71  	SET
16:00:49  72  	  TRANSACTION_STATUS_ID = NVL(in_transaction_status_id, TRANSACTION_STATUS_ID),
16:00:49  73  	  TRANSACTION_AMOUNT	= NVL(in_transaction_amount, TRANSACTION_AMOUNT),
16:00:49  74  	  UPDATE_DATE		= SYSDATE,
16:00:49  75  	  UPDATED_BY		= in_updated_by,
16:00:49  76  	  ORDER_ID		= NVL(in_order_id, ORDER_ID),
16:00:49  77  	  IS_SETTLED		= NVL(in_is_settled, IS_SETTLED)
16:00:49  78  	WHERE
16:00:49  79  	  ID = in_transaction_id;
16:00:49  80  END UPDATE_TRANSACTION;
16:00:49  81  
16:00:49  82  /*******************************************************************/
16:00:49  83  
16:00:49  84  PROCEDURE READ_TRANSACTION (
16:00:49  85  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:49  86  	out_result_set	  OUT SYS_REFCURSOR
16:00:49  87  ) AS
16:00:49  88  BEGIN
16:00:49  89  	OPEN out_result_set FOR
16:00:49  90  	SELECT
16:00:49  91  	  ID,
16:00:49  92  	  TRANSACTION_STATUS_ID,
16:00:49  93  	  TRANSACTION_TYPE_CODE,
16:00:49  94  	  TRANSACTION_AMOUNT,
16:00:49  95  	  CREATE_DATE,
16:00:49  96  	  CREATED_BY,
16:00:49  97  	  UPDATE_DATE,
16:00:49  98  	  UPDATED_BY,
16:00:49  99  	  ORDER_ID,
16:00:49 100  	  IS_REFUND,
16:00:49 101  	  IS_SETTLED
16:00:49 102  	FROM
16:00:49 103  	  TRANSACTION
16:00:49 104  	WHERE
16:00:49 105  	  ID = in_transaction_id;
16:00:49 106  END READ_TRANSACTION;
16:00:49 107  
16:00:49 108  /*******************************************************************/
16:00:49 109  
16:00:49 110  PROCEDURE CREATE_TRANSACTION_ATTEMPT(
16:00:49 111  	inout_transaction_attempt_id IN OUT TRANSACTION_ATTEMPT.ID%TYPE,
16:00:49 112  	in_transaction_id	     IN TRANSACTION_ATTEMPT.TRANSACTION_ID%TYPE,
16:00:49 113  	in_external_status_code      IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:00:49 114  	in_external_status_message   IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:49 115  	in_created_by		     IN TRANSACTION_ATTEMPT.CREATED_BY%TYPE,
16:00:49 116  	in_external_transaction_id   IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:49 117  	in_transaction_start_time    IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:00:49 118  	in_status_id		     IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:00:49 119  ) AS
16:00:49 120  BEGIN
16:00:49 121  	IF inout_transaction_attempt_id IS NULL THEN
16:00:49 122  	  SELECT
16:00:49 123  	    TRNA_ID_SEQ.nextVal into inout_transaction_attempt_id
16:00:49 124  	  FROM DUAL;
16:00:49 125  	END IF;
16:00:49 126  	INSERT INTO TRANSACTION_ATTEMPT (
16:00:49 127  	  ID,
16:00:49 128  	  TRANSACTION_ID,
16:00:49 129  	  EXTERNAL_STATUS_CODE,
16:00:49 130  	  EXTERNAL_STATUS_MESSAGE,
16:00:49 131  	  CREATE_DATE,
16:00:49 132  	  CREATED_BY,
16:00:49 133  	  EXTERNAL_TRANSACTION_ID,
16:00:49 134  	  TRANSACTION_START_TIME,
16:00:49 135  	  TRANSACTION_ATTEMPT_STATUS_ID
16:00:49 136  	) VALUES (
16:00:49 137  	  inout_transaction_attempt_id,
16:00:49 138  	  in_transaction_id,
16:00:49 139  	  in_external_status_code,
16:00:49 140  	  in_external_status_message,
16:00:49 141  	  SYSDATE,
16:00:49 142  	  in_created_by,
16:00:49 143  	  in_external_transaction_id,
16:00:49 144  	  in_transaction_start_time,
16:00:49 145  	  in_status_id
16:00:49 146  	);
16:00:49 147  END;
16:00:49 148  
16:00:49 149  /*******************************************************************/
16:00:49 150  
16:00:49 151  PROCEDURE UPDATE_TRANSACTION_ATTEMPT (
16:00:49 152  	in_transaction_attempt_id  IN TRANSACTION_ATTEMPT.ID%TYPE,
16:00:49 153  	in_external_status_code    IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE%TYPE DEFAULT NULL,
16:00:49 154  	in_external_status_message IN TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:49 155  	in_external_transaction_id IN TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID%TYPE DEFAULT NULL,
16:00:49 156  	in_transaction_start_time  IN TRANSACTION_ATTEMPT.TRANSACTION_START_TIME%TYPE DEFAULT NULL,
16:00:49 157  	in_status_id		   IN TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID%TYPE
16:00:49 158  ) AS
16:00:49 159  BEGIN
16:00:49 160  	UPDATE
16:00:49 161  	  TRANSACTION_ATTEMPT
16:00:49 162  	SET
16:00:49 163  	  EXTERNAL_STATUS_CODE		= NVL(in_external_status_code, EXTERNAL_STATUS_CODE),
16:00:49 164  	  EXTERNAL_STATUS_MESSAGE	= NVL(in_external_status_message, EXTERNAL_STATUS_MESSAGE),
16:00:49 165  	  EXTERNAL_TRANSACTION_ID	= NVL(in_external_transaction_id, EXTERNAL_TRANSACTION_ID),
16:00:49 166  	  TRANSACTION_START_TIME	= NVL(in_transaction_start_time, TRANSACTION_START_TIME),
16:00:49 167  	  TRANSACTION_ATTEMPT_STATUS_ID = NVL(in_status_id, TRANSACTION_ATTEMPT_STATUS_ID)
16:00:49 168  	WHERE
16:00:49 169  	  ID = in_transaction_attempt_id;
16:00:49 170  END;
16:00:49 171  
16:00:49 172  /*******************************************************************/
16:00:49 173  
16:00:49 174  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:49 175  /*
16:00:49 176  Throws exceptions:
16:00:49 177  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 178  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:49 179  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 180  */
16:00:49 181  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:49 182  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:49 183  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:49 184  ) AS
16:00:49 185  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
16:00:49 186  -- EXCEPTIONS
16:00:49 187  BAD_TRANSACTION_ID EXCEPTION;
16:00:49 188  BEGIN
16:00:49 189  
16:00:49 190  	PROCS_HISTORY_V20.CREATE_TRANSACTION_HISTORY(
16:00:49 191  	  in_transaction_id	       => in_transaction_id,
16:00:49 192  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49 193  	);
16:00:49 194  
16:00:49 195  	UPDATE
16:00:49 196  	  TRANSACTION
16:00:49 197  	SET
16:00:49 198  	  TRANSACTION.ORDER_ID	 = in_order_id,
16:00:49 199  	  TRANSACTION.UPDATED_BY = in_updated_by,
16:00:49 200  	  TRANSACTION.UPDATE_DATE= SYSDATE
16:00:49 201  	WHERE
16:00:49 202  	  TRANSACTION.ID = in_transaction_id
16:00:49 203  	  AND TRANSACTION.ORDER_ID IS NULL;
16:00:49 204  
16:00:49 205  	IF SQL%ROWCOUNT = 0 THEN
16:00:49 206  	  RAISE BAD_TRANSACTION_ID;
16:00:49 207  	END IF;
16:00:49 208  EXCEPTION
16:00:49 209  WHEN BAD_TRANSACTION_ID THEN
16:00:49 210  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 211  	  SPROC_NAME, 'No such transaction');
16:00:49 212  END UPDATE_TRANSACTION_ORDER_ID;
16:00:49 213  
16:00:49 214  END PROCS_TRANSACTION_CRU_V20;
16:00:49 215  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADDRESS_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_ADDRESS(
16:00:49   4  /*
16:00:49   5  Throws exceptions:
16:00:49   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49   7  */
16:00:49   8  	  out_address_id	OUT NUMBER,
16:00:49   9  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:49  10  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:49  11  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:49  12  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:49  13  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:49  14  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:49  15  	  in_created_by 	IN ADDRESS.CREATED_BY%TYPE
16:00:49  16  ) AS
16:00:49  17  -- VARIABLES
16:00:49  18  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_ADDRESS';
16:00:49  19  -- EXCEPTIONS
16:00:49  20  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49  21  BEGIN
16:00:49  22  
16:00:49  23  	CORE_OWNER.PROCS_ADDRESS_CRU_V20.CREATE_ADDRESS(
16:00:49  24  	  out_address_id      => out_address_id,
16:00:49  25  	  in_address_id       => null,
16:00:49  26  	  in_address1	      => in_address1,
16:00:49  27  	  in_address2	      => in_address2,
16:00:49  28  	  in_city	      => in_city,
16:00:49  29  	  in_state	      => in_state,
16:00:49  30  	  in_postal_code      => in_postal_code,
16:00:49  31  	  in_country	      => in_country,
16:00:49  32  	  in_created_by       => in_created_by
16:00:49  33  	);
16:00:49  34  
16:00:49  35  END CREATE_ADDRESS;
16:00:49  36  
16:00:49  37  PROCEDURE UPDATE_ADDRESS(
16:00:49  38  /*
16:00:49  39  Throws exceptions:
16:00:49  40  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  41  */
16:00:49  42  	  in_address_id 	IN ADDRESS.ID%TYPE,
16:00:49  43  	  in_address1		IN ADDRESS.ADDRESS1%TYPE DEFAULT NULL,
16:00:49  44  	  in_address2		IN ADDRESS.ADDRESS2%TYPE DEFAULT NULL,
16:00:49  45  	  in_city		IN ADDRESS.CITY%TYPE DEFAULT NULL,
16:00:49  46  	  in_state		IN ADDRESS.STATE%TYPE DEFAULT NULL,
16:00:49  47  	  in_postal_code	IN ADDRESS.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:49  48  	  in_country		IN ADDRESS.COUNTRY%TYPE DEFAULT NULL,
16:00:49  49  	  in_updated_by 	IN ADDRESS.UPDATED_BY%TYPE
16:00:49  50  ) AS
16:00:49  51  BEGIN
16:00:49  52  	CORE_OWNER.PROCS_ADDRESS_CRU_V20.UPDATE_ADDRESS(
16:00:49  53  	  in_address_id 	=> in_address_id,
16:00:49  54  	  in_address1		=> in_address1,
16:00:49  55  	  in_address2		=> in_address2,
16:00:49  56  	  in_city		=> in_city,
16:00:49  57  	  in_state		=> in_state,
16:00:49  58  	  in_postal_code	=> in_postal_code,
16:00:49  59  	  in_country		=> in_country,
16:00:49  60  	  in_updated_by 	=> in_updated_by
16:00:49  61  	);
16:00:49  62  END UPDATE_ADDRESS;
16:00:49  63  
16:00:49  64  PROCEDURE GET_ADDRESS (
16:00:49  65  /*
16:00:49  66  Throws exceptions:
16:00:49  67  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  68  */
16:00:49  69  	  in_id 		IN ADDRESS.ID%TYPE,
16:00:49  70  	  out_result_set	OUT SYS_REFCURSOR
16:00:49  71  ) AS
16:00:49  72  SPROC_NAME CONSTANT VARCHAR2(11) := 'GET_ADDRESS';
16:00:49  73  BEGIN
16:00:49  74  
16:00:49  75  OPEN out_result_set FOR
16:00:49  76  SELECT * FROM ADDRESS WHERE ADDRESS.ID = in_id;
16:00:49  77  
16:00:49  78  END GET_ADDRESS;
16:00:49  79  
16:00:49  80  END PROCS_ADDRESS_V20;
16:00:49  81  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADJUSTMENTS_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_INVOICE_ADJUSTMENT (
16:00:49   4  	in_invoice_id		  IN NUMBER,
16:00:49   5  	in_adjustment_reason	  IN VARCHAR2,
16:00:49   6  	in_is_credit		  IN NUMBER,
16:00:49   7  	in_charge_id		  IN NUMBER,
16:00:49   8  	in_business_date	  IN DATE,
16:00:49   9  	in_created_by		  IN VARCHAR2,
16:00:49  10  	out_invoice_adjustment_id OUT NUMBER
16:00:49  11  ) AS
16:00:49  12  SPROC_NAME CONSTANT VARCHAR2(25) := 'CREATE_INVOICE_ADJUSTMENT';
16:00:49  13  -- VARIABLES
16:00:49  14  var_current_date	    DATE := SYSDATE;
16:00:49  15  var_new_entity_id     NUMBER;
16:00:49  16  var_inv_adj_reason_id NUMBER;
16:00:49  17  -- EXCEPTIONS
16:00:49  18  BAD_IN_IS_CREDIT_VALUE EXCEPTION;
16:00:49  19  DAB_ADJUSTMENT_REASON  EXCEPTION;
16:00:49  20  BEGIN
16:00:49  21  
16:00:49  22  	IF in_is_credit != GLOBAL_CONSTANTS_V20.TRUE AND in_is_credit != GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:49  23  	  RAISE BAD_IN_IS_CREDIT_VALUE;
16:00:49  24  	END IF;
16:00:49  25  
16:00:49  26  	BEGIN
16:00:49  27  	  SELECT
16:00:49  28  	    ID into var_inv_adj_reason_id
16:00:49  29  	  FROM
16:00:49  30  	    INVOICE_ADJUSTMENT_REASON
16:00:49  31  	  WHERE
16:00:49  32  	    UPPER(VALUE) = UPPER(in_adjustment_reason);
16:00:49  33  	  EXCEPTION
16:00:49  34  	    WHEN NO_DATA_FOUND THEN
16:00:49  35  	      RAISE DAB_ADJUSTMENT_REASON;
16:00:49  36  	END;
16:00:49  37  
16:00:49  38  	SELECT
16:00:49  39  	  INV_ADJ_ID_SEQ.nextVal into var_new_entity_id
16:00:49  40  	FROM
16:00:49  41  	  DUAL;
16:00:49  42  
16:00:49  43  	INSERT INTO INVOICE_ADJUSTMENT (
16:00:49  44  	  ID,
16:00:49  45  	  INVOICE_ID,
16:00:49  46  	  INVOICE_ADJUSTMENT_REASON_ID,
16:00:49  47  	  IS_CREDIT,
16:00:49  48  	  CHARGE_ID,
16:00:49  49  	  ADJUSTMENT_DATE,
16:00:49  50  	  CREATE_DATE,
16:00:49  51  	  CREATED_BY,
16:00:49  52  	  UPDATE_DATE,
16:00:49  53  	  UPDATED_BY
16:00:49  54  	)
16:00:49  55  	VALUES (
16:00:49  56  	  var_new_entity_id,
16:00:49  57  	  in_invoice_id,
16:00:49  58  	  var_inv_adj_reason_id,
16:00:49  59  	  in_is_credit,
16:00:49  60  	  in_charge_id,
16:00:49  61  	  in_business_date,
16:00:49  62  	  var_current_date,
16:00:49  63  	  in_created_by,
16:00:49  64  	  var_current_date,
16:00:49  65  	  in_created_by
16:00:49  66  	);
16:00:49  67  
16:00:49  68  	out_invoice_adjustment_id := var_new_entity_id;
16:00:49  69  
16:00:49  70  EXCEPTION
16:00:49  71  WHEN BAD_IN_IS_CREDIT_VALUE THEN
16:00:49  72  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:49  73  	  SPROC_NAME, 'Bad in_is_credit value');
16:00:49  74  WHEN DAB_ADJUSTMENT_REASON THEN
16:00:49  75  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:49  76  	  SPROC_NAME, 'Bad adjustment reason');
16:00:49  77  WHEN OTHERS THEN
16:00:49  78  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49  80  END CREATE_INVOICE_ADJUSTMENT;
16:00:49  81  
16:00:49  82  /******************************************************************************/
16:00:49  83  
16:00:49  84  PROCEDURE UPDATE_INVOICE_ADJUSTMENT (
16:00:49  85  	  in_invoice_id 	    IN NUMBER,
16:00:49  86  	  in_original_charge_id     IN NUMBER,
16:00:49  87  	  in_charge_id		    IN NUMBER,
16:00:49  88  	  in_updated_by 	    IN VARCHAR2
16:00:49  89  ) AS
16:00:49  90  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_INVOICE_ADJUSTMENT';
16:00:49  91  var_invoice_adjustment_id NUMBER;
16:00:49  92  BEGIN
16:00:49  93  	SELECT
16:00:49  94  	  id into var_invoice_adjustment_id
16:00:49  95  	FROM
16:00:49  96  	  INVOICE_ADJUSTMENT
16:00:49  97  	WHERE INVOICE_ID = in_invoice_id
16:00:49  98  	      AND CHARGE_ID = in_original_charge_id;
16:00:49  99  
16:00:49 100  	--create history
16:00:49 101  	PROCS_HISTORY_V20.CREATE_INVOICE_ADJ_HISTORY(
16:00:49 102  	  in_invoice_adjustment_id    => var_invoice_adjustment_id,
16:00:49 103  	  in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49 104  	);
16:00:49 105  
16:00:49 106  	UPDATE INVOICE_ADJUSTMENT
16:00:49 107  	SET CHARGE_ID = in_charge_id, UPDATE_DATE=sysdate, UPDATED_BY=in_updated_by
16:00:49 108  	WHERE ID = var_invoice_adjustment_id;
16:00:49 109  
16:00:49 110  EXCEPTION
16:00:49 111  WHEN NO_DATA_FOUND THEN
16:00:49 112  	    NULL;
16:00:49 113  END UPDATE_INVOICE_ADJUSTMENT;
16:00:49 114  
16:00:49 115  /******************************************************************************/
16:00:49 116  
16:00:49 117  PROCEDURE CREATE_LINE_ITEM_ADJUSTMENT (
16:00:49 118  	in_line_item_id 	    IN NUMBER,
16:00:49 119  	in_invoice_adjustment_id    IN NUMBER,
16:00:49 120  	in_amount		    IN NUMBER,
16:00:49 121  	in_tax			    IN NUMBER,
16:00:49 122  	in_discount		    IN NUMBER,
16:00:49 123  	in_created_by		    IN VARCHAR2,
16:00:49 124  	out_line_item_adjustment_id OUT NUMBER
16:00:49 125  ) AS
16:00:49 126  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_LINE_ITEM_ADJUSTMENT';
16:00:49 127  -- VARIABLES
16:00:49 128  var_current_date DATE := SYSDATE;
16:00:49 129  var_new_entity_id NUMBER;
16:00:49 130  BEGIN
16:00:49 131  
16:00:49 132  	SELECT
16:00:49 133  	  LI_ADJ_ID_SEQ.nextVal into var_new_entity_id
16:00:49 134  	FROM
16:00:49 135  	  DUAL;
16:00:49 136  
16:00:49 137  	INSERT INTO LINE_ITEM_ADJUSTMENT (
16:00:49 138  	  ID,
16:00:49 139  	  LINE_ITEM_ID,
16:00:49 140  	  INVOICE_ADJUSTMENT_ID,
16:00:49 141  	  AMOUNT,
16:00:49 142  	  TAX,
16:00:49 143  	  DISCOUNT,
16:00:49 144  	  CREATE_DATE,
16:00:49 145  	  CREATED_BY
16:00:49 146  	)
16:00:49 147  	VALUES (
16:00:49 148  	  var_new_entity_id,
16:00:49 149  	  in_line_item_id,
16:00:49 150  	  in_invoice_adjustment_id,
16:00:49 151  	  in_amount,
16:00:49 152  	  in_tax,
16:00:49 153  	  in_discount,
16:00:49 154  	  var_current_date,
16:00:49 155  	  in_created_by
16:00:49 156  	);
16:00:49 157  
16:00:49 158  	out_line_item_adjustment_id := var_new_entity_id;
16:00:49 159  
16:00:49 160  EXCEPTION
16:00:49 161  WHEN OTHERS THEN
16:00:49 162  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 163  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 164  END CREATE_LINE_ITEM_ADJUSTMENT;
16:00:49 165  
16:00:49 166  /******************************************************************************/
16:00:49 167  
16:00:49 168  PROCEDURE CREATE_TAX_ADJUSTMENT (
16:00:49 169  	in_tax_id		   IN NUMBER,
16:00:49 170  	in_line_item_adjustment_id IN NUMBER,
16:00:49 171  	in_amount		   IN NUMBER,
16:00:49 172  	in_created_by		   IN VARCHAR2,
16:00:49 173  	out_tax_adjustment_id	   OUT NUMBER
16:00:49 174  ) AS
16:00:49 175  SPROC_NAME CONSTANT VARCHAR2(30) := 'CREATE_TAX_ADJUSTMENT';
16:00:49 176  -- VARIABLES
16:00:49 177  var_current_date DATE := SYSDATE;
16:00:49 178  var_new_entity_id NUMBER;
16:00:49 179  BEGIN
16:00:49 180  
16:00:49 181  	SELECT
16:00:49 182  	  TAXADJ_ID_SEQ.nextVal into var_new_entity_id
16:00:49 183  	FROM
16:00:49 184  	  DUAL;
16:00:49 185  
16:00:49 186  	INSERT INTO TAX_ADJUSTMENT (
16:00:49 187  	  ID,
16:00:49 188  	  TAX_ID,
16:00:49 189  	  LINE_ITEM_ADJUSTMENT_ID,
16:00:49 190  	  AMOUNT,
16:00:49 191  	  CREATE_DATE,
16:00:49 192  	  CREATED_BY
16:00:49 193  	)
16:00:49 194  	VALUES (
16:00:49 195  	  var_new_entity_id,
16:00:49 196  	  in_tax_id,
16:00:49 197  	  in_line_item_adjustment_id,
16:00:49 198  	  in_amount,
16:00:49 199  	  var_current_date,
16:00:49 200  	  in_created_by
16:00:49 201  	);
16:00:49 202  
16:00:49 203  	out_tax_adjustment_id := var_new_entity_id;
16:00:49 204  
16:00:49 205  EXCEPTION
16:00:49 206  WHEN OTHERS THEN
16:00:49 207  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 208  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 209  END CREATE_TAX_ADJUSTMENT;
16:00:49 210  
16:00:49 211  /******************************************************************************/
16:00:49 212  
16:00:49 213  PROCEDURE CREATE_DISCOUNT_LI_ADJUSTMENT (
16:00:49 214  	in_discount_id		   NUMBER,
16:00:49 215  	in_line_item_id 	   NUMBER,
16:00:49 216  	in_line_item_adjustment_id IN NUMBER,
16:00:49 217  	in_amount		   IN NUMBER,
16:00:49 218  	in_created_by		   IN VARCHAR2,
16:00:49 219  	out_discount_li_id	   OUT NUMBER
16:00:49 220  ) AS
16:00:49 221  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_DISCOUNT_LI_ADJUSTMENT';
16:00:49 222  -- VARIABLES
16:00:49 223  var_current_date DATE := SYSDATE;
16:00:49 224  var_new_entity_id NUMBER;
16:00:49 225  BEGIN
16:00:49 226  
16:00:49 227  	SELECT
16:00:49 228  	  DLIADJ_ID_SEQ.nextVal into var_new_entity_id
16:00:49 229  	FROM
16:00:49 230  	  DUAL;
16:00:49 231  
16:00:49 232  	INSERT INTO DISCOUNT_LINEITEM_ADJUSTMENT (
16:00:49 233  	  ID,
16:00:49 234  	  DISCOUNT_ID,
16:00:49 235  	  LINE_ITEM_ID,
16:00:49 236  	  LINE_ITEM_ADJUSTMENT_ID,
16:00:49 237  	  AMOUNT,
16:00:49 238  	  CREATE_DATE,
16:00:49 239  	  CREATED_BY
16:00:49 240  	)
16:00:49 241  	VALUES (
16:00:49 242  	  var_new_entity_id,
16:00:49 243  	  in_discount_id,
16:00:49 244  	  in_line_item_id,
16:00:49 245  	  in_line_item_adjustment_id,
16:00:49 246  	  in_amount,
16:00:49 247  	  var_current_date,
16:00:49 248  	  in_created_by
16:00:49 249  	);
16:00:49 250  
16:00:49 251  	out_discount_li_id := var_new_entity_id;
16:00:49 252  
16:00:49 253  EXCEPTION
16:00:49 254  WHEN OTHERS THEN
16:00:49 255  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 256  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 257  END CREATE_DISCOUNT_LI_ADJUSTMENT;
16:00:49 258  
16:00:49 259  END PROCS_ADJUSTMENTS_V20;
16:00:49 260  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ADX_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE GET_SUB_ADX_INFO (
16:00:49   4  /*
16:00:49   5  Throws exceptions:
16:00:49   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49   7  */
16:00:49   8  	out_result_set	    OUT SYS_REFCURSOR,
16:00:49   9  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE
16:00:49  10  ) AS
16:00:49  11  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUB_ADX_INFO';
16:00:49  12  BEGIN
16:00:49  13  OPEN out_result_set FOR
16:00:49  14  SELECT /*+ FIRST_ROWS(5) */
16:00:49  15  	s.offer_chain_id,
16:00:49  16  	s.create_date,
16:00:49  17  	decode(s.subscription_status_id, 1, 'a', 'c') status,
16:00:49  18  	ocmd.value,
16:00:49  19  	a.group_id,
16:00:49  20  	s.id subscription_id
16:00:49  21  FROM
16:00:49  22  	account a,
16:00:49  23  	subscription s,
16:00:49  24  	offer_chain_meta_data ocmd,
16:00:49  25  	group_account g,
16:00:49  26  	subscription_share ss,
16:00:49  27  	account a2
16:00:49  28  WHERE
16:00:49  29  	s.account_id = a.id and
16:00:49  30  	s.offer_chain_id = ocmd.offer_chain_id and
16:00:49  31  	g.id = ss.group_account_id and
16:00:49  32  	ss.borrower_account_id = a2.id and
16:00:49  33  	s.id = g.subscription_id and
16:00:49  34  	ocmd.name = 'ADX_BUNDLE' and
16:00:49  35  	a2.group_id = in_group_id and
16:00:49  36  	rownum < 5
16:00:49  37  union all
16:00:49  38  SELECT /*+ FIRST_ROWS(5) */
16:00:49  39  	s.offer_chain_id,
16:00:49  40  	s.create_date,
16:00:49  41  	decode(s.subscription_status_id, 1, 'a', 'c') status,
16:00:49  42  	ocmd.value,
16:00:49  43  	a.group_id,
16:00:49  44  	s.id subscription_id
16:00:49  45  FROM
16:00:49  46  	account a,
16:00:49  47  	subscription s,
16:00:49  48  	offer_chain_meta_data ocmd
16:00:49  49  WHERE
16:00:49  50  	s.account_id = a.id and
16:00:49  51  	s.offer_chain_id = ocmd.offer_chain_id and
16:00:49  52  	ocmd.name = 'ADX_BUNDLE' and
16:00:49  53  	a.group_id = in_group_id and
16:00:49  54  	rownum < 5
16:00:49  55  ;
16:00:49  56  
16:00:49  57  END GET_SUB_ADX_INFO;
16:00:49  58  
16:00:49  59  END PROCS_ADX_V20;
16:00:49  60  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_AMAZON_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE ADD_AMAZON_APPSTORE(
16:00:49   4  	in_subscription_id IN AMAZON_APPSTORE.SUBSCRIPTION_ID%TYPE,
16:00:49   5  	in_user_id	   IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:49   6  	in_item_type	   IN AMAZON_APPSTORE.ITEM_TYPE%TYPE,
16:00:49   7  	in_start_date	   IN AMAZON_APPSTORE.START_DATE%TYPE,
16:00:49   8  	in_end_date	   IN AMAZON_APPSTORE.END_DATE%TYPE DEFAULT NULL,
16:00:49   9  	in_sku		   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:49  10  	in_purchase_token  IN AMAZON_APPSTORE.PURCHASE_TOKEN%TYPE,
16:00:49  11  	in_created_by	   IN AMAZON_APPSTORE.CREATED_BY%TYPE
16:00:49  12  ) AS
16:00:49  13  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'ADD_AMAZON_APPSTORE';
16:00:49  14  BEGIN
16:00:49  15  	CORE_OWNER.PROCS_AMAZON_CRU_V20.ADD_AMAZON_APPSTORE(
16:00:49  16  	    in_subscription_id =>  in_subscription_id,
16:00:49  17  	    in_user_id	       =>  in_user_id,
16:00:49  18  	    in_item_type       =>  in_item_type,
16:00:49  19  	    in_start_date      =>  in_start_date,
16:00:49  20  	    in_end_date        =>  in_end_date,
16:00:49  21  	    in_sku	       =>  in_sku,
16:00:49  22  	    in_purchase_token  =>  in_purchase_token,
16:00:49  23  	    in_created_by      =>  in_created_by
16:00:49  24  	);
16:00:49  25  END ADD_AMAZON_APPSTORE;
16:00:49  26  
16:00:49  27  PROCEDURE GET_ACTIVE_AMAZON_APPSTORE(
16:00:49  28  	in_user_id IN AMAZON_APPSTORE.USER_ID%TYPE,
16:00:49  29  	in_sku	   IN AMAZON_APPSTORE.SKU%TYPE,
16:00:49  30  	out_data   OUT SYS_REFCURSOR
16:00:49  31  ) AS
16:00:49  32  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_ACTIVE_AMAZON_APPSTORE';
16:00:49  33  BEGIN
16:00:49  34  	OPEN out_data FOR
16:00:49  35  	SELECT
16:00:49  36  	  AMAZON_APPSTORE.ID,
16:00:49  37  	  AMAZON_APPSTORE.SUBSCRIPTION_ID,
16:00:49  38  	  AMAZON_APPSTORE.USER_ID,
16:00:49  39  	  AMAZON_APPSTORE.ITEM_TYPE,
16:00:49  40  	  AMAZON_APPSTORE.START_DATE,
16:00:49  41  	  AMAZON_APPSTORE.END_DATE,
16:00:49  42  	  AMAZON_APPSTORE.SKU,
16:00:49  43  	  AMAZON_APPSTORE.PURCHASE_TOKEN,
16:00:49  44  	  AMAZON_APPSTORE.CREATE_DATE,
16:00:49  45  	  AMAZON_APPSTORE.CREATED_BY,
16:00:49  46  	  AMAZON_APPSTORE.UPDATE_DATE,
16:00:49  47  	  AMAZON_APPSTORE.UPDATED_BY
16:00:49  48  	FROM AMAZON_APPSTORE
16:00:49  49  	  INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ID = AMAZON_APPSTORE.SUBSCRIPTION_ID
16:00:49  50  	WHERE AMAZON_APPSTORE.USER_ID = in_user_id AND
16:00:49  51  	      AMAZON_APPSTORE.SKU     = in_sku AND
16:00:49  52  	      SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
16:00:49  53  END GET_ACTIVE_AMAZON_APPSTORE;
16:00:49  54  
16:00:49  55  PROCEDURE CREATE_AMAZON_SUB(
16:00:49  56  /*
16:00:49  57  Throws exceptions:
16:00:49  58  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  59  */
16:00:49  60  	  out_id	      OUT NUMBER,
16:00:49  61  	  in_subscription_id  IN AMAZON_SUB.SUBSCRIPTION_ID%TYPE,
16:00:49  62  	  in_amazon_id	      IN AMAZON_SUB.AMAZON_ID%TYPE,
16:00:49  63  	  in_created_by       IN AMAZON_SUB.CREATED_BY%TYPE
16:00:49  64  ) AS
16:00:49  65  -- VARIABLES
16:00:49  66  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'CREATE_AMAZON_SUB';
16:00:49  67  -- EXCEPTIONS
16:00:49  68  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49  69  BEGIN
16:00:49  70  
16:00:49  71  	CORE_OWNER.PROCS_AMAZON_CRU_V20.CREATE_AMAZON_SUB(
16:00:49  72  	  out_id	      =>  out_id,
16:00:49  73  	  in_subscription_id  =>  in_subscription_id,
16:00:49  74  	  in_amazon_id	      =>  in_amazon_id,
16:00:49  75  	  in_created_by       =>  in_created_by
16:00:49  76  	);
16:00:49  77  
16:00:49  78  END CREATE_AMAZON_SUB;
16:00:49  79  
16:00:49  80  PROCEDURE GET_ACTIVE_SUB_IDS (
16:00:49  81  /*
16:00:49  82  Throws exceptions:
16:00:49  83  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  84  */
16:00:49  85  	out_result_set	    OUT SYS_REFCURSOR,
16:00:49  86  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:00:49  87  ) AS
16:00:49  88  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_SUB_IDS';
16:00:49  89  BEGIN
16:00:49  90  OPEN out_result_set FOR
16:00:49  91  SELECT s.id
16:00:49  92  FROM subscription s, amazon_sub am
16:00:49  93  WHERE
16:00:49  94  	s.id = am.subscription_id
16:00:49  95  	and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:49  96  	and am.amazon_id = in_amazon_id
16:00:49  97  ;
16:00:49  98  
16:00:49  99  END GET_ACTIVE_SUB_IDS;
16:00:49 100  
16:00:49 101  PROCEDURE GET_ACTIVE_GROUP_IDS (
16:00:49 102  /*
16:00:49 103  Throws exceptions:
16:00:49 104  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 105  */
16:00:49 106  	out_result_set	    OUT SYS_REFCURSOR,
16:00:49 107  	in_amazon_id	IN AMAZON_SUB.AMAZON_ID%TYPE
16:00:49 108  ) AS
16:00:49 109  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACTIVE_GROUP_IDS';
16:00:49 110  BEGIN
16:00:49 111  OPEN out_result_set FOR
16:00:49 112  SELECT distinct a.group_id id
16:00:49 113  FROM subscription s, amazon_sub am, account a
16:00:49 114  WHERE
16:00:49 115  	s.id = am.subscription_id
16:00:49 116  	and a.id = s.account_id
16:00:49 117  	and s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:49 118  	and am.amazon_id = in_amazon_id
16:00:49 119  ;
16:00:49 120  
16:00:49 121  END GET_ACTIVE_GROUP_IDS;
16:00:49 122  
16:00:49 123  END PROCS_AMAZON_V20;
16:00:49 124  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CUPY" AS
16:00:49   2  
16:00:49   3  	/****************************************************************************/
16:00:49   4  
16:00:49   5  	PROCEDURE POPULATE_REQUEST_INFO(
16:00:49   6  	  in_hours_prior    IN	NUMBER,
16:00:49   7  	  in_filename	    IN	CC_REQUEST_FILE.FILE_NAME%TYPE,
16:00:49   8  	  in_creator	    IN	CC_REQUEST_FILE.UPDATED_BY%TYPE
16:00:49   9  	) AS
16:00:49  10  	SPROC_NAME CONSTANT VARCHAR2(32) := 'POPULATE_REQUEST_INFO';
16:00:49  11  	var_start_date	    DATE := SYSDATE;
16:00:49  12  	var_end_date	    DATE := var_start_date + (in_hours_prior/24);
16:00:49  13  	var_request_file_id NUMBER := 0;
16:00:49  14  	var_license_count   NUMBER := 0;
16:00:49  15  	var_cc_update_count NUMBER := 0;
16:00:49  16  	BEGIN
16:00:49  17  	    SELECT CC_REQUEST_FILE_ID_SEQ.NEXTVAL INTO var_request_file_id  FROM DUAL;
16:00:49  18  	    INSERT INTO CC_REQUEST_FILE (ID,
16:00:49  19  					 FILE_NAME,
16:00:49  20  					 CC_REQUEST_FILE_STATUS,
16:00:49  21  					 CREATE_DATE,
16:00:49  22  					 CREATED_BY,
16:00:49  23  					 UPDATE_DATE,
16:00:49  24  					 UPDATED_BY)
16:00:49  25  					 VALUES (
16:00:49  26  					 var_request_file_id,
16:00:49  27  					 in_filename,
16:00:49  28  					 'NOT_CREATED',
16:00:49  29  					 var_start_date,
16:00:49  30  					 in_creator,
16:00:49  31  					 var_start_date,
16:00:49  32  					 in_creator);
16:00:49  33  
16:00:49  34  	   FOR record IN (SELECT
16:00:49  35  			    l.ID LICENSE_ID, cc.ID CREDIT_CARD_ID
16:00:49  36  			  FROM
16:00:49  37  			    LICENSE l INNER JOIN SUBSCRIPTION s ON L.SUBSCRIPTION_ID = s.ID
16:00:49  38  				      INNER JOIN CREDIT_CARD cc ON S.INSTRUMENT_ID   = cc.ID
16:00:49  39  			  WHERE
16:00:49  40  			    s.INSTRUMENT_TYPE_ID	 = 1
16:00:49  41  			    AND cc.CREDIT_CARD_STATUS_ID = 1
16:00:49  42  			    AND s.SUBSCRIPTION_STATUS_ID = 1
16:00:49  43  			    AND l.LICENSE_STATUS_ID	 = 2
16:00:49  44  			    AND cc.CREDIT_CARD_TYPE_ID IN (2,3)
16:00:49  45  			    AND l.END_DATE BETWEEN var_start_date AND var_end_date
16:00:49  46  			    AND l.ID NOT IN (SELECT LICENSE_ID FROM CC_UPDATE))
16:00:49  47  	   LOOP
16:00:49  48  	     var_license_count := 0;
16:00:49  49  	     SELECT COUNT(1) INTO  var_license_count FROM CC_UPDATE WHERE LICENSE_ID = record.LICENSE_ID;
16:00:49  50  
16:00:49  51  	     IF var_license_count = 0 THEN
16:00:49  52  		INSERT INTO CC_UPDATE (ID,
16:00:49  53  				       CREDIT_CARD_ID,
16:00:49  54  				       LICENSE_ID,
16:00:49  55  				       CC_UPDATE_STATUS,
16:00:49  56  				       CC_REQUEST_FILE_ID,
16:00:49  57  				       CREATE_DATE,
16:00:49  58  				       UPDATE_DATE,
16:00:49  59  				       CREATED_BY,
16:00:49  60  				       UPDATED_BY
16:00:49  61  				       ) VALUES (
16:00:49  62  				       CC_UPDATE_SEQ.NEXTVAL,
16:00:49  63  				       record.CREDIT_CARD_ID,
16:00:49  64  				       record.LICENSE_ID,
16:00:49  65  				       'NOT_ADDED_TO_FILE',
16:00:49  66  				       var_request_file_id,
16:00:49  67  				       var_start_date,
16:00:49  68  				       var_start_date,
16:00:49  69  				       in_creator,
16:00:49  70  				       in_creator
16:00:49  71  				       );
16:00:49  72  	     END IF;
16:00:49  73  	   END LOOP;
16:00:49  74  
16:00:49  75  	   SELECT COUNT(1) INTO var_cc_update_count
16:00:49  76  	   FROM CC_UPDATE
16:00:49  77  	   WHERE CC_REQUEST_FILE_ID = var_request_file_id;
16:00:49  78  	   IF var_cc_update_count <= 0 THEN
16:00:49  79  	     UPDATE CC_REQUEST_FILE
16:00:49  80  	     SET CC_REQUEST_FILE_STATUS = 'EMPTY'
16:00:49  81  	     WHERE ID = var_request_file_id;
16:00:49  82  	   END IF;
16:00:49  83  
16:00:49  84  	END POPULATE_REQUEST_INFO;
16:00:49  85  
16:00:49  86  	/****************************************************************************/
16:00:49  87  
16:00:49  88  	PROCEDURE CHASE_PROFILE_BY_REQ_FILE_ID(
16:00:49  89  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:49  90  	  in_start	     IN NUMBER,
16:00:49  91  	  in_end	     IN NUMBER,
16:00:49  92  	  out_result_set     OUT SYS_REFCURSOR
16:00:49  93  	) AS
16:00:49  94  	SPROC_NAME CONSTANT VARCHAR2(32) := 'CHASE_PROFILE_BY_REQ_FILE_ID';
16:00:49  95  	var_range_diff	    NUMBER := 0;
16:00:49  96  	var_upper_bond_diff NUMBER := 0;
16:00:49  97  	var_l_start	    NUMBER := 0;
16:00:49  98  	var_l_end	    NUMBER := 0;
16:00:49  99  	BEGIN
16:00:49 100  	  --Normalize the end points [START]
16:00:49 101  	  IF (in_start IS NULL OR in_start < 0) Then
16:00:49 102  	    var_l_start := 0;
16:00:49 103  	  ELSE
16:00:49 104  	    var_l_start := in_start;
16:00:49 105  	  END IF;
16:00:49 106  
16:00:49 107  	  IF (in_end IS NULL) Then
16:00:49 108  	    var_l_end := 500;
16:00:49 109  	  ELSE
16:00:49 110  	    var_l_end := in_end;
16:00:49 111  	  END IF;
16:00:49 112  
16:00:49 113  	  var_l_start := var_l_start + 1;
16:00:49 114  	  var_l_end   := var_l_end   + 1;
16:00:49 115  
16:00:49 116  	  var_range_diff  := var_l_end - var_l_start;
16:00:49 117  	  var_upper_bond_diff :=  var_range_diff - 1000;
16:00:49 118  
16:00:49 119  	  IF (var_upper_bond_diff > 0) Then
16:00:49 120  	    var_l_end := var_l_end - var_upper_bond_diff;
16:00:49 121  	  END IF;
16:00:49 122  	  --Normalize the end points [END]
16:00:49 123  
16:00:49 124  	  OPEN out_result_set FOR
16:00:49 125  	    SELECT CHASE_PROFILE_ID FROM
16:00:49 126  	      (SELECT rownum rnum, q.* FROM
16:00:49 127  		 (SELECT
16:00:49 128  		    cc.CHASE_PROFILE_ID
16:00:49 129  		  FROM
16:00:49 130  		    CREDIT_CARD cc,
16:00:49 131  		    CC_UPDATE ccu
16:00:49 132  		  WHERE
16:00:49 133  		    ccu.CC_REQUEST_FILE_ID = in_request_file_id
16:00:49 134  		    AND ccu.CREDIT_CARD_ID = cc.id
16:00:49 135  		) Q
16:00:49 136  	      WHERE rownum <= var_l_end)
16:00:49 137  	    WHERE rnum >= var_l_Start;
16:00:49 138  	END CHASE_PROFILE_BY_REQ_FILE_ID;
16:00:49 139  
16:00:49 140  	/****************************************************************************/
16:00:49 141  
16:00:49 142  	PROCEDURE UPDATE_REQUEST_FILE_STATUS(
16:00:49 143  	  in_request_file_id IN CC_REQUEST_FILE.ID%TYPE,
16:00:49 144  	  in_status	     IN CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:00:49 145  	  in_updated_by      IN CC_REQUEST_FILE.UPDATED_BY%TYPE
16:00:49 146  	)AS
16:00:49 147  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_REQUEST_FILE_STATUS';
16:00:49 148  	BEGIN
16:00:49 149  	  UPDATE CC_REQUEST_FILE
16:00:49 150  	  SET CC_REQUEST_FILE_STATUS = in_status,
16:00:49 151  	      UPDATE_DATE = SYSDATE,
16:00:49 152  	      UPDATED_BY  = in_updated_by
16:00:49 153  	  WHERE ID = in_request_file_id;
16:00:49 154  	END UPDATE_REQUEST_FILE_STATUS;
16:00:49 155  
16:00:49 156  	/****************************************************************************/
16:00:49 157  
16:00:49 158  	PROCEDURE UPDATE_CC_REQUEST_STATUS(
16:00:49 159  	  in_request_file_id IN CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:49 160  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:49 161  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:00:49 162  	) AS
16:00:49 163  	SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_CC_REQUEST_STATUS';
16:00:49 164  	BEGIN
16:00:49 165  	  UPDATE CC_UPDATE
16:00:49 166  	  SET CC_UPDATE_STATUS = in_status,
16:00:49 167  	      UPDATE_DATE      = SYSDATE,
16:00:49 168  	      UPDATED_BY       = in_updated_by
16:00:49 169  	  WHERE
16:00:49 170  	    CC_REQUEST_FILE_ID = in_request_file_id;
16:00:49 171  	END UPDATE_CC_REQUEST_STATUS;
16:00:49 172  
16:00:49 173  	/****************************************************************************/
16:00:49 174  
16:00:49 175  	PROCEDURE REQUEST_FILES_BY_STATUS (
16:00:49 176  	  in_status	      IN  CC_REQUEST_FILE.CC_REQUEST_FILE_STATUS%TYPE,
16:00:49 177  	  in_older_than_hours IN  NUMBER DEFAULT -288,
16:00:49 178  	  out_request_files   OUT SYS_REFCURSOR
16:00:49 179  	) AS
16:00:49 180  	var_older_than_hours NUMBER := in_older_than_hours;
16:00:49 181  	BEGIN
16:00:49 182  	 IF (var_older_than_hours IS NULL) THEN
16:00:49 183  	   var_older_than_hours := -288;
16:00:49 184  	 END IF;
16:00:49 185  
16:00:49 186  	 OPEN out_request_files FOR
16:00:49 187  	 SELECT
16:00:49 188  	   ID,
16:00:49 189  	   FILE_NAME
16:00:49 190  	 FROM
16:00:49 191  	   CC_REQUEST_FILE
16:00:49 192  	 WHERE
16:00:49 193  	   CC_REQUEST_FILE_STATUS = in_status
16:00:49 194  	 AND
16:00:49 195  	   UPDATE_DATE < SYSDATE - (var_older_than_hours / 24);
16:00:49 196  	END REQUEST_FILES_BY_STATUS;
16:00:49 197  
16:00:49 198  	/****************************************************************************/
16:00:49 199  
16:00:49 200  	PROCEDURE COUNT_BY_REQUEST_FILE_ID (
16:00:49 201  	  in_id     IN	CC_UPDATE.CC_REQUEST_FILE_ID%TYPE,
16:00:49 202  	  out_count OUT NUMBER
16:00:49 203  	) AS
16:00:49 204  	SPROC_NAME CONSTANT VARCHAR2(32) := 'COUNT_BY_REQUEST_FILE_ID';
16:00:49 205  	BEGIN
16:00:49 206  	  SELECT COUNT(1) INTO out_count
16:00:49 207  	  FROM CC_UPDATE
16:00:49 208  	  WHERE CC_REQUEST_FILE_ID = in_id;
16:00:49 209  	END COUNT_BY_REQUEST_FILE_ID;
16:00:49 210  
16:00:49 211  	/****************************************************************************/
16:00:49 212  
16:00:49 213  	PROCEDURE GET_CREDIT_CARD_INFO (
16:00:49 214  	  in_chase_profile_id  IN  CREDIT_CARD.CHASE_PROFILE_ID%TYPE,
16:00:49 215  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE DEFAULT NULL,
16:00:49 216  	  out_card_info        OUT SYS_REFCURSOR
16:00:49 217  	) AS
16:00:49 218  	BEGIN
16:00:49 219  	  OPEN out_card_info FOR
16:00:49 220  	  SELECT
16:00:49 221  	    u.LICENSE_ID,
16:00:49 222  	    cc.ACCOUNT_ID,
16:00:49 223  	    cc.ID CREDIT_CARD_ID,
16:00:49 224  	    cc.CHASE_PROFILE_ID,
16:00:49 225  	    cc.LAST_FOUR_CC CREDIT_CARD_LAST_DIGITS,
16:00:49 226  	    cc.UPDATE_DATE CREDIT_CARD_UPDATE_DATE,
16:00:49 227  	    cc.UPDATED_BY CREDIT_CARD_UPDATED_BY,
16:00:49 228  	    cc.EXPIRATION_DATE CREDIT_CARD_EXPIRATION_DATE,
16:00:49 229  	    u.ID CC_UPDATE_ID,
16:00:49 230  	    DECODE(cc.CREDIT_CARD_STATUS_ID, 1, 1, 0) ACTIVE
16:00:49 231  	  FROM CREDIT_CARD cc, CC_UPDATE u, CC_REQUEST_FILE rf
16:00:49 232  	  WHERE cc.ID = u.CREDIT_CARD_ID
16:00:49 233  	  AND u.CC_REQUEST_FILE_ID = rf.ID
16:00:49 234  	  AND rf.CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE', 'NO_RESPONSE')
16:00:49 235  	  AND rf.FILE_NAME = NVL(in_request_filename, rf.FILE_NAME)
16:00:49 236  	  AND upper(cc.CHASE_PROFILE_ID) = in_chase_profile_id
16:00:49 237  	  AND u.CC_UPDATE_STATUS NOT IN ('NO_UPDATE', 'UPDATED')
16:00:49 238  	  ORDER BY cc.UPDATE_DATE DESC;
16:00:49 239  	END GET_CREDIT_CARD_INFO;
16:00:49 240  
16:00:49 241  	/****************************************************************************/
16:00:49 242  
16:00:49 243  	PROCEDURE UPDATE_CC_UPDATE(
16:00:49 244  	  in_id 	     IN CC_UPDATE.ID%TYPE,
16:00:49 245  	  in_status	     IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:49 246  	  in_action	     IN CC_UPDATE.CC_UPDATE_ACTION%TYPE DEFAULT NULL,
16:00:49 247  	  in_reason	     IN CC_UPDATE.CC_UPDATE_REASON%TYPE DEFAULT NULL,
16:00:49 248  	  in_response_proc_status_code IN CC_UPDATE.RESPONSE_PROC_STATUS_CODE%TYPE DEFAULT NULL,
16:00:49 249  	  in_response_proc_status_msg  IN CC_UPDATE.RESPONSE_PROC_STATUS_MESSAGE%TYPE DEFAULT NULL,
16:00:49 250  	  in_updated_by      IN CC_UPDATE.UPDATED_BY%TYPE
16:00:49 251  	) AS
16:00:49 252  	BEGIN
16:00:49 253  	  UPDATE CC_UPDATE
16:00:49 254  	  SET CC_UPDATE_STATUS = in_status,
16:00:49 255  	  CC_UPDATE_ACTION = NVL(in_action, CC_UPDATE_ACTION),
16:00:49 256  	  CC_UPDATE_REASON = NVL(in_reason, CC_UPDATE_REASON),
16:00:49 257  	  RESPONSE_PROC_STATUS_CODE = NVL(RESPONSE_PROC_STATUS_CODE, in_response_proc_status_code),
16:00:49 258  	  RESPONSE_PROC_STATUS_MESSAGE = NVL(RESPONSE_PROC_STATUS_MESSAGE, in_response_proc_status_msg),
16:00:49 259  	  UPDATE_DATE = SYSDATE,
16:00:49 260  	  UPDATED_BY = in_updated_by
16:00:49 261  	  WHERE ID = in_id;
16:00:49 262  	END UPDATE_CC_UPDATE;
16:00:49 263  
16:00:49 264  	/****************************************************************************/
16:00:49 265  
16:00:49 266  	PROCEDURE UPDATE_CC_UPDATE_STATUS(
16:00:49 267  	  in_id 	IN CC_UPDATE.ID%TYPE,
16:00:49 268  	  in_status	IN CC_UPDATE.CC_UPDATE_STATUS%TYPE,
16:00:49 269  	  in_updated_by IN CC_UPDATE.UPDATED_BY%TYPE
16:00:49 270  	) AS
16:00:49 271  	BEGIN
16:00:49 272  	  UPDATE CC_UPDATE
16:00:49 273  	  SET CC_UPDATE_STATUS = in_status,
16:00:49 274  	  UPDATE_DATE = SYSDATE,
16:00:49 275  	  UPDATED_BY = in_updated_by
16:00:49 276  	  WHERE ID = in_id;
16:00:49 277  	END UPDATE_CC_UPDATE_STATUS;
16:00:49 278  
16:00:49 279  	/****************************************************************************/
16:00:49 280  
16:00:49 281  	PROCEDURE GET_REQUEST_FILE_BY_FILENAME (
16:00:49 282  	  in_request_filename  IN  CC_REQUEST_FILE.FILE_NAME%TYPE,
16:00:49 283  	  out_request_file     OUT SYS_REFCURSOR
16:00:49 284  	) AS
16:00:49 285  	BEGIN
16:00:49 286  	  OPEN out_request_file FOR
16:00:49 287  	  SELECT ID, FILE_NAME
16:00:49 288  	  FROM CC_REQUEST_FILE
16:00:49 289  	  WHERE FILE_NAME = in_request_filename;
16:00:49 290  	END GET_REQUEST_FILE_BY_FILENAME;
16:00:49 291  
16:00:49 292  	/****************************************************************************/
16:00:49 293  
16:00:49 294  	PROCEDURE SUSPEND_CREDIT_CARD (
16:00:49 295  	  in_credit_card_id  IN CREDIT_CARD.ID%TYPE,
16:00:49 296  	  in_updated_by      IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:49 297  	) AS
16:00:49 298  	BEGIN
16:00:49 299  	  -- Create history
16:00:49 300  	  PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
16:00:49 301  	      in_credit_card_id 	   => in_credit_card_id,
16:00:49 302  	      in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49 303  	  );
16:00:49 304  
16:00:49 305  	  UPDATE CREDIT_CARD
16:00:49 306  	  SET UPDATE_DATE = SYSDATE,
16:00:49 307  	  UPDATED_BY = in_updated_by,
16:00:49 308  	  CREDIT_CARD_STATUS_ID = GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
16:00:49 309  	  WHERE ID = in_credit_card_id;
16:00:49 310  	END SUSPEND_CREDIT_CARD;
16:00:49 311  
16:00:49 312  	/****************************************************************************/
16:00:49 313  
16:00:49 314  	PROCEDURE UPDATE_CREDIT_CARD (
16:00:49 315  	  in_credit_card_id   IN CREDIT_CARD.ID%TYPE,
16:00:49 316  	  in_last_four_cc     IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:49 317  	  in_expiration_date  IN CREDIT_CARD.EXPIRATION_DATE%TYPE,
16:00:49 318  	  in_updated_by       IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:49 319  	) AS
16:00:49 320  	BEGIN
16:00:49 321  	  -- Create history
16:00:49 322  	  PROCS_HISTORY_V20.CREATE_CREDIT_CARD_HISTORY(
16:00:49 323  	      in_credit_card_id 	   => in_credit_card_id,
16:00:49 324  	      in_system_activity_reason_id => GLOBAL_ENUMS_V20.SAC_SYSTEM_APPLIED_RULE
16:00:49 325  	  );
16:00:49 326  
16:00:49 327  	  UPDATE CREDIT_CARD
16:00:49 328  	  SET UPDATE_DATE = SYSDATE,
16:00:49 329  	  UPDATED_BY = in_updated_by,
16:00:49 330  	  LAST_FOUR_CC = NVL(in_last_four_cc, LAST_FOUR_CC),
16:00:49 331  	  EXPIRATION_DATE = NVL(in_expiration_date, EXPIRATION_DATE)
16:00:49 332  	  WHERE ID = in_credit_card_id;
16:00:49 333  	END UPDATE_CREDIT_CARD;
16:00:49 334  
16:00:49 335  	/****************************************************************************/
16:00:49 336  
16:00:49 337  	PROCEDURE COMPLETABLE_REQUESTS (
16:00:49 338  	  out_request_files OUT SYS_REFCURSOR
16:00:49 339  	) AS
16:00:49 340  	BEGIN
16:00:49 341  	  OPEN out_request_files FOR
16:00:49 342  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
16:00:49 343  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:00:49 344  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:00:49 345  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:00:49 346  	  AND u.CC_UPDATE_STATUS IN ('UPDATED', 'NO_UPDATE')
16:00:49 347  	  MINUS
16:00:49 348  	  SELECT rf.ID, rf.FILE_NAME
16:00:49 349  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:00:49 350  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:00:49 351  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:00:49 352  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE');
16:00:49 353  	END COMPLETABLE_REQUESTS;
16:00:49 354  
16:00:49 355  	/****************************************************************************/
16:00:49 356  
16:00:49 357  	PROCEDURE COMPLETABLE_REQUESTS_W_FAILS (
16:00:49 358  	  in_max_hours_before_report IN  NUMBER,
16:00:49 359  	  out_request_files	     OUT SYS_REFCURSOR
16:00:49 360  	) AS
16:00:49 361  	BEGIN
16:00:49 362  	  OPEN out_request_files FOR
16:00:49 363  	  SELECT DISTINCT rf.ID, rf.FILE_NAME
16:00:49 364  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:00:49 365  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:00:49 366  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:00:49 367  	  AND u.CC_UPDATE_STATUS  = 'REQUEST_FAILED'
16:00:49 368  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
16:00:49 369  	  MINUS
16:00:49 370  	  SELECT rf.ID, rf.FILE_NAME
16:00:49 371  	  FROM CC_REQUEST_FILE rf, CC_UPDATE u
16:00:49 372  	  WHERE CC_REQUEST_FILE_STATUS in ('SENT', 'RESPONSE_DOWNLOADED', 'REPORT_DOWNLOADED', 'RESPONSE_COMPLETE')
16:00:49 373  	  AND rf.ID = u.CC_REQUEST_FILE_ID
16:00:49 374  	  AND u.UPDATE_DATE < SYSDATE - (in_max_hours_before_report / 24)
16:00:49 375  	  AND u.CC_UPDATE_STATUS NOT IN ('UPDATED', 'NO_UPDATE', 'REQUEST_FAILED');
16:00:49 376  	END COMPLETABLE_REQUESTS_W_FAILS;
16:00:49 377  
16:00:49 378  	/****************************************************************************/
16:00:49 379  
16:00:49 380  	PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:00:49 381  	  in_account_id IN NUMBER,
16:00:49 382  	  out_group_id	OUT NUMBER
16:00:49 383  	) AS
16:00:49 384  	BEGIN
16:00:49 385  	  PROCS_ACCOUNT_V18.GET_GROUP_ID_BY_ACCOUNT_ID(
16:00:49 386  	    in_account_id => in_account_id,
16:00:49 387  	    out_group_id => out_group_id
16:00:49 388  	  );
16:00:49 389  	END GET_GROUP_ID_BY_ACCOUNT_ID;
16:00:49 390  
16:00:49 391  	/****************************************************************************/
16:00:49 392  
16:00:49 393  	PROCEDURE GET_LICENSE_BY_ID (
16:00:49 394  	  in_license_id  IN NUMBER,
16:00:49 395  	  out_result_set OUT SYS_REFCURSOR
16:00:49 396  	) AS
16:00:49 397  	BEGIN
16:00:49 398  	  PROCS_LICENSE_V18.GET_LICENSE_BY_ID(
16:00:49 399  	    in_license_id => in_license_id,
16:00:49 400  	    out_result_set => out_result_set
16:00:49 401  	  );
16:00:49 402  	END GET_LICENSE_BY_ID;
16:00:49 403  
16:00:49 404  END PROCS_CUPY;
16:00:49 405  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.34
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE
16:00:49   2  PACKAGE BODY PROCS_ENTITLEMENT_V20 AS
16:00:49   3  
16:00:49   4  	PROCEDURE GET_ARCHIVE_ENTITLEMENT_URI(
16:00:49   5  	  in_subscription_id IN NUMBER,
16:00:49   6  	  out_uri OUT VARCHAR2)
16:00:49   7  	AS
16:00:49   8  	  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_ARCHIVE_ENTITLEMENT_URI';
16:00:49   9  	  UNKNOWN_ERROR   EXCEPTION;
16:00:49  10  	BEGIN
16:00:49  11  	  SELECT
16:00:49  12  	    POMD.VALUE INTO out_uri
16:00:49  13  	  FROM
16:00:49  14  	     OFFER_PRODUCT_OFFERING OPO,
16:00:49  15  	     PRODUCT_OFFERING PO,
16:00:49  16  	     OFFER_OFFER_CHAIN OOC,
16:00:49  17  	     SUBSCRIPTION S,
16:00:49  18  	     LICENSE LL,
16:00:49  19  	     PRODUCT_OFFERING_META_DATA POMD
16:00:49  20  	  WHERE
16:00:49  21  	     OPO.OFFER_ID = OOC.OFFER_ID AND
16:00:49  22  	     OOC.OFFER_CHAIN_ID = S.OFFER_CHAIN_ID AND
16:00:49  23  	     S.ID = in_subscription_id AND
16:00:49  24  	     PO.ID = OPO.PRODUCT_OFFERING_ID AND
16:00:49  25  	     PO.ID = POMD.PRODUCT_OFFERING_ID AND
16:00:49  26  	     PO.CAPABILITY_ID = 1 AND
16:00:49  27  	     S.ID = LL.SUBSCRIPTION_ID AND
16:00:49  28  	     SYSDATE BETWEEN LL.START_DATE AND LL.ENTITLEMENT_END_DATE AND
16:00:49  29  	     NAME = 'entitlement_uri' AND
16:00:49  30  	     rownum < 2;
16:00:49  31  	EXCEPTION
16:00:49  32  	  WHEN OTHERS THEN
16:00:49  33  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49  34  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49  35  	END GET_ARCHIVE_ENTITLEMENT_URI;
16:00:49  36  
16:00:49  37  	PROCEDURE GET_ALL_ENTITLEMENTS(
16:00:49  38  	  in_group_id	 IN  NUMBER,
16:00:49  39  	  out_result_set OUT SYS_REFCURSOR)
16:00:49  40  	AS
16:00:49  41  	  -- CONSTANTS
16:00:49  42  	  SPROC_NAME	  CONSTANT VARCHAR2(20) := 'GET_ALL_ENTITLEMENTS';
16:00:49  43  	  -- EXCEPTIONS
16:00:49  44  	  NOT_FOUND	  EXCEPTION;
16:00:49  45  	  UNKNOWN_ERROR   EXCEPTION;
16:00:49  46  	  -- VARIABLES
16:00:49  47  	  var_subs	  SYS_REFCURSOR;
16:00:49  48  	BEGIN
16:00:49  49  	  OPEN out_result_set FOR
16:00:49  50  
16:00:49  51  	SELECT
16:00:49  52  	  C.CODE NAME,
16:00:49  53  	  C.DESCRIPTION,
16:00:49  54  	  0 INHERITED,
16:00:49  55  	  C.SHAREABLE,
16:00:49  56  	  MAX(LIC.ENTITLEMENT_END_DATE) EXPIRES
16:00:49  57  	FROM
16:00:49  58  	  SUBSCRIPTION SB
16:00:49  59  	  INNER JOIN ACCOUNT AC ON AC.ID = SB.ACCOUNT_ID
16:00:49  60  	  INNER JOIN LICENSE LIC ON LIC.SUBSCRIPTION_ID = SB.ID
16:00:49  61  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.OFFER_ID = LIC.OFFER_ID
16:00:49  62  	  INNER JOIN PRODUCT_OFFERING PO ON PO.ID = OPO.PRODUCT_OFFERING_ID
16:00:49  63  	  INNER JOIN CAPABILITY C ON PO.CAPABILITY_ID = C.ID
16:00:49  64  	WHERE
16:00:49  65  	  LIC.ENTITLEMENT_END_DATE >= TRUNC(SYSDATE)
16:00:49  66  	  AND LIC.START_DATE <= SYSDATE
16:00:49  67  	  AND AC.GROUP_ID = in_group_id
16:00:49  68  	GROUP BY
16:00:49  69  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION
16:00:49  70  UNION ALL
16:00:49  71  	SELECT
16:00:49  72  	  C.CODE NAME,
16:00:49  73  	  C.DESCRIPTION,
16:00:49  74  	  1 INHERITED,
16:00:49  75  	  C.SHAREABLE,
16:00:49  76  	  MAX(LEAST(SS.END_DATE, LIC.ENTITLEMENT_END_DATE)) EXPIRES
16:00:49  77  	FROM
16:00:49  78  	  ACCOUNT BORROWER,
16:00:49  79  	  SUBSCRIPTION S,
16:00:49  80  	  LICENSE LIC,
16:00:49  81  	  OFFER_PRODUCT_OFFERING OPO,
16:00:49  82  	  PRODUCT_OFFERING PO,
16:00:49  83  	  CAPABILITY C,
16:00:49  84  	  GROUP_ACCOUNT GA,
16:00:49  85  	  SUBSCRIPTION_SHARE SS
16:00:49  86  	WHERE
16:00:49  87  	  BORROWER.GROUP_ID = in_group_id
16:00:49  88  	  AND LIC.SUBSCRIPTION_ID = S.ID
16:00:49  89  	  AND OPO.OFFER_ID = LIC.OFFER_ID
16:00:49  90  	  AND PO.ID = OPO.PRODUCT_OFFERING_ID
16:00:49  91  	  AND PO.CAPABILITY_ID = C.ID
16:00:49  92  	  AND GA.SUBSCRIPTION_ID = S.ID
16:00:49  93  	  AND SS.BORROWER_ACCOUNT_ID = BORROWER.ID
16:00:49  94  	  AND SS.GROUP_ACCOUNT_ID = GA.ID
16:00:49  95  	  AND SYSDATE BETWEEN SS.START_DATE AND SS.END_DATE
16:00:49  96  	  AND SYSDATE BETWEEN LIC.START_DATE AND LIC.ENTITLEMENT_END_DATE
16:00:49  97  	  AND C.SHAREABLE = 1
16:00:49  98  	GROUP BY
16:00:49  99  	  C.CODE, 0, C.SHAREABLE, C.DESCRIPTION;
16:00:49 100  
16:00:49 101  	EXCEPTION
16:00:49 102  	  WHEN OTHERS THEN
16:00:49 103  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 104  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 105  	END GET_ALL_ENTITLEMENTS;
16:00:49 106  
16:00:49 107  	PROCEDURE GET_ITUNES_ENTITLEMENTS(
16:00:49 108  	  in_product_id IN CORE_OWNER.ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:49 109  	  out_result_set OUT SYS_REFCURSOR)
16:00:49 110  	AS
16:00:49 111  	  -- CONSTANTS
16:00:49 112  	  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'GET_ITUNES_ENTITLEMENTS';
16:00:49 113  	  -- EXCEPTIONS
16:00:49 114  	  NOT_FOUND	  EXCEPTION;
16:00:49 115  	  UNKNOWN_ERROR   EXCEPTION;
16:00:49 116  	  -- VARIABLES
16:00:49 117  	  var_subs	  SYS_REFCURSOR;
16:00:49 118  	BEGIN
16:00:49 119  	  OPEN out_result_set FOR
16:00:49 120  
16:00:49 121  	      SELECT
16:00:49 122  		c.code NAME,
16:00:49 123  		C.DESCRIPTION,
16:00:49 124  		0 INHERITED,
16:00:49 125  		C.SHAREABLE,
16:00:49 126  		sysdate as EXPIRES
16:00:49 127  	      FROM
16:00:49 128  		offer_offer_chain ooc,
16:00:49 129  		offer o,
16:00:49 130  		offer_product_offering opo,
16:00:49 131  		product_offering po,
16:00:49 132  		capability c
16:00:49 133  	      WHERE
16:00:49 134  		o.id = ooc.offer_id AND
16:00:49 135  		opo.offer_id = o.id AND
16:00:49 136  		po.id = opo.product_offering_id AND
16:00:49 137  		c.id = po.capability_id AND
16:00:49 138  		c.id !=0 AND
16:00:49 139  		ooc.offer_chain_id =
16:00:49 140  		(SELECT
16:00:49 141  		    ocmd.offer_chain_id
16:00:49 142  		  FROM
16:00:49 143  		      offer_chain_meta_data ocmd
16:00:49 144  		  WHERE
16:00:49 145  			      ocmd.name = 'ITUNES_PRODUCT_ID' AND
16:00:49 146  		      ocmd.value = in_product_id AND
16:00:49 147  		      rownum < 2
16:00:49 148  		)
16:00:49 149  	      ;
16:00:49 150  
16:00:49 151  	EXCEPTION
16:00:49 152  	  WHEN OTHERS THEN
16:00:49 153  	    PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 154  	      SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 155  	END GET_ITUNES_ENTITLEMENTS;
16:00:49 156  
16:00:49 157  END PROCS_ENTITLEMENT_V20;
16:00:49 158  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_HISTORY_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE CREATE_ADDRESS_HISTORY(
16:00:49   4  	in_address_id		     IN NUMBER,
16:00:49   5  	in_system_activity_reason_id IN NUMBER
16:00:49   6  ) AS
16:00:49   7  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ADDRESS_HISTORY';
16:00:49   8  -- VARIABLES
16:00:49   9  var_address1    ADDRESS.ADDRESS1%TYPE;
16:00:49  10  var_address2    ADDRESS.ADDRESS2%TYPE;
16:00:49  11  var_city	      ADDRESS.CITY%TYPE;
16:00:49  12  var_state       ADDRESS.STATE%TYPE;
16:00:49  13  var_postal_code ADDRESS.POSTAL_CODE%TYPE;
16:00:49  14  var_country     ADDRESS.COUNTRY%TYPE;
16:00:49  15  var_created_by  ADDRESS.CREATED_BY%TYPE;
16:00:49  16  var_create_date ADDRESS.CREATE_DATE%TYPE;
16:00:49  17  var_updated_by  ADDRESS.UPDATED_BY%TYPE;
16:00:49  18  var_update_date ADDRESS.UPDATE_DATE%TYPE;
16:00:49  19  -- EXCEPTIONS
16:00:49  20  BAD_ADDRESS_ID	     EXCEPTION;
16:00:49  21  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49  22  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49  23  BEGIN
16:00:49  24  
16:00:49  25  	BEGIN
16:00:49  26  	  SELECT
16:00:49  27  	    ADDRESS.ADDRESS1,
16:00:49  28  	    ADDRESS.ADDRESS2,
16:00:49  29  	    ADDRESS.CITY,
16:00:49  30  	    ADDRESS.STATE,
16:00:49  31  	    ADDRESS.POSTAL_CODE,
16:00:49  32  	    ADDRESS.COUNTRY,
16:00:49  33  	    ADDRESS.CREATED_BY,
16:00:49  34  	    ADDRESS.CREATE_DATE,
16:00:49  35  	    ADDRESS.UPDATED_BY,
16:00:49  36  	    ADDRESS.UPDATE_DATE
16:00:49  37  	    into
16:00:49  38  	    var_address1,
16:00:49  39  	    var_address2,
16:00:49  40  	    var_city,
16:00:49  41  	    var_state,
16:00:49  42  	    var_postal_code,
16:00:49  43  	    var_country,
16:00:49  44  	    var_created_by,
16:00:49  45  	    var_create_date,
16:00:49  46  	    var_updated_by,
16:00:49  47  	    var_update_date
16:00:49  48  	  FROM
16:00:49  49  	    ADDRESS
16:00:49  50  	  WHERE
16:00:49  51  	    ADDRESS.ID = in_address_id;
16:00:49  52  	  EXCEPTION
16:00:49  53  	    WHEN NO_DATA_FOUND THEN
16:00:49  54  	      RAISE BAD_ADDRESS_ID;
16:00:49  55  	END;
16:00:49  56  
16:00:49  57  	BEGIN
16:00:49  58  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ADDRESS_HISTORY(
16:00:49  59  	    in_address_id,
16:00:49  60  	    in_system_activity_reason_id,
16:00:49  61  	    var_address1,
16:00:49  62  	    var_address2,
16:00:49  63  	    var_city,
16:00:49  64  	    var_state,
16:00:49  65  	    var_postal_code,
16:00:49  66  	    var_country,
16:00:49  67  	    var_created_by,
16:00:49  68  	    var_create_date,
16:00:49  69  	    var_updated_by,
16:00:49  70  	    var_update_date
16:00:49  71  	  );
16:00:49  72  	  EXCEPTION
16:00:49  73  	    WHEN OTHERS THEN
16:00:49  74  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49  75  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49  76  	END;
16:00:49  77  
16:00:49  78  EXCEPTION
16:00:49  79  WHEN BAD_ADDRESS_ID THEN
16:00:49  80  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49  81  	  SPROC_NAME, 'Bad recipientAddress id');
16:00:49  82  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49  83  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49  84  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49  85  WHEN OTHERS THEN
16:00:49  86  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49  87  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49  88  END CREATE_ADDRESS_HISTORY;
16:00:49  89  
16:00:49  90  /********************************************************************/
16:00:49  91  
16:00:49  92  PROCEDURE CREATE_ACCOUNT_HISTORY(
16:00:49  93  	in_account_id		     IN NUMBER,
16:00:49  94  	in_system_activity_reason_id IN NUMBER
16:00:49  95  ) AS
16:00:49  96  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_ACCOUNT_HISTORY';
16:00:49  97  -- VARIABLES
16:00:49  98  var_account_status_id  NUMBER;
16:00:49  99  var_suspend_date	     DATE;
16:00:49 100  var_group_id	     NUMBER;
16:00:49 101  var_instrument_type_id NUMBER;
16:00:49 102  var_instrument_id      NUMBER;
16:00:49 103  var_updated_by	     VARCHAR2(255);
16:00:49 104  var_update_date	     DATE;
16:00:49 105  -- EXCEPTIONS
16:00:49 106  BAD_ACCOUNT_ID	     EXCEPTION;
16:00:49 107  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 108  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 109  BEGIN
16:00:49 110  
16:00:49 111  	BEGIN
16:00:49 112  	  SELECT
16:00:49 113  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:00:49 114  	    ACCOUNT.GROUP_ID,
16:00:49 115  	    ACCOUNT.INSTRUMENT_TYPE_ID,
16:00:49 116  	    ACCOUNT.INSTRUMENT_ID,
16:00:49 117  	    ACCOUNT.UPDATED_BY,
16:00:49 118  	    ACCOUNT.UPDATE_DATE
16:00:49 119  	    into
16:00:49 120  	    var_account_status_id,
16:00:49 121  	    var_group_id,
16:00:49 122  	    var_instrument_type_id,
16:00:49 123  	    var_instrument_id,
16:00:49 124  	    var_updated_by,
16:00:49 125  	    var_update_date
16:00:49 126  	  FROM
16:00:49 127  	    ACCOUNT
16:00:49 128  	  WHERE
16:00:49 129  	    ACCOUNT.ID = in_account_id;
16:00:49 130  	  EXCEPTION
16:00:49 131  	    WHEN NO_DATA_FOUND THEN
16:00:49 132  	      RAISE BAD_ACCOUNT_ID;
16:00:49 133  	END;
16:00:49 134  
16:00:49 135  	BEGIN
16:00:49 136  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_ACCOUNT_HISTORY(
16:00:49 137  	    in_account_id,
16:00:49 138  	    var_suspend_date,
16:00:49 139  	    var_group_id,
16:00:49 140  	    var_updated_by,
16:00:49 141  	    var_update_date,
16:00:49 142  	    in_system_activity_reason_id,
16:00:49 143  	    var_account_status_id,
16:00:49 144  	    var_instrument_type_id,
16:00:49 145  	    var_instrument_id
16:00:49 146  	  );
16:00:49 147  	  EXCEPTION
16:00:49 148  	    WHEN OTHERS THEN
16:00:49 149  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 150  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 151  	END;
16:00:49 152  
16:00:49 153  EXCEPTION
16:00:49 154  WHEN BAD_ACCOUNT_ID THEN
16:00:49 155  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 156  	  SPROC_NAME, 'Bad account id');
16:00:49 157  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 158  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 159  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 160  WHEN OTHERS THEN
16:00:49 161  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 162  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 163  END CREATE_ACCOUNT_HISTORY;
16:00:49 164  
16:00:49 165  /********************************************************************/
16:00:49 166  
16:00:49 167  PROCEDURE CREATE_SUBSCRIPTION_HISTORY (
16:00:49 168  /*
16:00:49 169  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 170  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 171  */
16:00:49 172  	in_subscription_id	     IN NUMBER,
16:00:49 173  	in_system_activity_reason_id IN NUMBER
16:00:49 174  ) AS
16:00:49 175  SPROC_NAME CONSTANT VARCHAR2(27) := 'CREATE_SUBSCRIPTION_HISTORY';
16:00:49 176  -- VARIABLES
16:00:49 177  var_account_id		    NUMBER;
16:00:49 178  var_purchase_date 	    DATE;
16:00:49 179  var_offer_chain_id	    NUMBER;
16:00:49 180  var_suspend_date		    DATE;
16:00:49 181  var_termination_date	    DATE;
16:00:49 182  var_days_ramaining_adjustment NUMBER;
16:00:49 183  var_sct_id		    NUMBER;
16:00:49 184  var_updated_by		    VARCHAR2(255);
16:00:49 185  var_update_date		    DATE;
16:00:49 186  -- EXCEPTIONS
16:00:49 187  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:00:49 188  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 189  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 190  BEGIN
16:00:49 191  
16:00:49 192  	BEGIN
16:00:49 193  	  SELECT
16:00:49 194  	    SUBSCRIPTION.account_id,
16:00:49 195  	    SUBSCRIPTION.PURCHASE_DATE,
16:00:49 196  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:00:49 197  	    SUBSCRIPTION.SUSPEND_DATE,
16:00:49 198  	    SUBSCRIPTION.TERMINATION_DATE,
16:00:49 199  	    SUBSCRIPTION.DAYS_REMAINING_ADJUSTMENT,
16:00:49 200  	    SUBSCRIPTION.SCT_ID,
16:00:49 201  	    SUBSCRIPTION.UPDATED_BY,
16:00:49 202  	    SUBSCRIPTION.UPDATE_DATE
16:00:49 203  	    into
16:00:49 204  	    var_account_id,
16:00:49 205  	    var_purchase_date,
16:00:49 206  	    var_offer_chain_id,
16:00:49 207  	    var_suspend_date,
16:00:49 208  	    var_termination_date,
16:00:49 209  	    var_days_ramaining_adjustment,
16:00:49 210  	    var_sct_id,
16:00:49 211  	    var_updated_by,
16:00:49 212  	    var_update_date
16:00:49 213  	  FROM
16:00:49 214  	    SUBSCRIPTION
16:00:49 215  	  WHERE
16:00:49 216  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:49 217  	  EXCEPTION
16:00:49 218  	    WHEN NO_DATA_FOUND THEN
16:00:49 219  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:49 220  	END;
16:00:49 221  
16:00:49 222  	BEGIN
16:00:49 223  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_SUBSCRIPTION_HISTORY(
16:00:49 224  	    in_subscription_id,
16:00:49 225  	    var_account_id,
16:00:49 226  	    var_purchase_date,
16:00:49 227  	    var_offer_chain_id,
16:00:49 228  	    var_suspend_date,
16:00:49 229  	    var_termination_date,
16:00:49 230  	    var_days_ramaining_adjustment,
16:00:49 231  	    var_sct_id,
16:00:49 232  	    var_updated_by,
16:00:49 233  	    var_update_date,
16:00:49 234  	    in_system_activity_reason_id
16:00:49 235  	  );
16:00:49 236  	  EXCEPTION
16:00:49 237  	    WHEN OTHERS THEN
16:00:49 238  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 239  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 240  	END;
16:00:49 241  
16:00:49 242  EXCEPTION
16:00:49 243  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:49 244  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 245  	  SPROC_NAME, 'No such subscription');
16:00:49 246  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 247  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 248  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 249  WHEN OTHERS THEN
16:00:49 250  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 251  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 252  END CREATE_SUBSCRIPTION_HISTORY;
16:00:49 253  
16:00:49 254  /********************************************************************/
16:00:49 255  
16:00:49 256  PROCEDURE CREATE_CREDIT_CARD_HISTORY(
16:00:49 257  	in_credit_card_id	      IN NUMBER,
16:00:49 258  	in_system_activity_reason_id  IN NUMBER
16:00:49 259  ) AS
16:00:49 260  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_CREDIT_CARD_HISTORY';
16:00:49 261  -- VARIABLES
16:00:49 262  var_account_id		     NUMBER;
16:00:49 263  var_instrument_name	     VARCHAR2(255);
16:00:49 264  var_private_card_holder_name   VARCHAR2(256);
16:00:49 265  var_private_street_address     VARCHAR2(256);
16:00:49 266  var_private_street_address2    VARCHAR2(256);
16:00:49 267  var_state 		     VARCHAR2(50);
16:00:49 268  var_city			     VARCHAR2(50);
16:00:49 269  var_postal_code		     VARCHAR2(20);
16:00:49 270  var_country		     CHAR(2);
16:00:49 271  var_last_four_cc		     VARCHAR2(4);
16:00:49 272  var_expiration_date	     DATE;
16:00:49 273  var_credit_card_type_id	     NUMBER;
16:00:49 274  var_secret_token		     VARCHAR2(255);
16:00:49 275  var_chase_profile_id	     VARCHAR2(255);
16:00:49 276  var_credit_card_status_id      NUMBER;
16:00:49 277  var_updated_by		     VARCHAR2(255);
16:00:49 278  var_update_date		     DATE;
16:00:49 279  -- EXCEPTIONS
16:00:49 280  BAD_CREDIT_CARD_ID     EXCEPTION;
16:00:49 281  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 282  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 283  BEGIN
16:00:49 284  
16:00:49 285  	BEGIN
16:00:49 286  	  SELECT
16:00:49 287  	    ACCOUNT_ID,
16:00:49 288  	    INSTRUMENT_NAME,
16:00:49 289  	    PRIVATE_CARD_HOLDER_NAME,
16:00:49 290  	    PRIVATE_STREET_ADDRESS,
16:00:49 291  	    PRIVATE_STREET_ADDRESS2,
16:00:49 292  	    STATE,
16:00:49 293  	    CITY,
16:00:49 294  	    POSTAL_CODE,
16:00:49 295  	    COUNTRY,
16:00:49 296  	    LAST_FOUR_CC,
16:00:49 297  	    EXPIRATION_DATE,
16:00:49 298  	    CREDIT_CARD_TYPE_ID,
16:00:49 299  	    SECRET_TOKEN,
16:00:49 300  	    CHASE_PROFILE_ID,
16:00:49 301  	    CREDIT_CARD_STATUS_ID,
16:00:49 302  	    UPDATED_BY,
16:00:49 303  	    UPDATE_DATE
16:00:49 304  	    into
16:00:49 305  	    var_account_id,
16:00:49 306  	    var_instrument_name,
16:00:49 307  	    var_private_card_holder_name,
16:00:49 308  	    var_private_street_address,
16:00:49 309  	    var_private_street_address2,
16:00:49 310  	    var_state,
16:00:49 311  	    var_city,
16:00:49 312  	    var_postal_code,
16:00:49 313  	    var_country,
16:00:49 314  	    var_last_four_cc,
16:00:49 315  	    var_expiration_date,
16:00:49 316  	    var_credit_card_type_id,
16:00:49 317  	    var_secret_token,
16:00:49 318  	    var_chase_profile_id,
16:00:49 319  	    var_credit_card_status_id,
16:00:49 320  	    var_updated_by,
16:00:49 321  	    var_update_date
16:00:49 322  	  FROM
16:00:49 323  	    CREDIT_CARD
16:00:49 324  	  WHERE
16:00:49 325  	    CREDIT_CARD.ID = in_credit_card_id;
16:00:49 326  	  EXCEPTION
16:00:49 327  	    WHEN NO_DATA_FOUND THEN
16:00:49 328  	      RAISE BAD_CREDIT_CARD_ID;
16:00:49 329  	END;
16:00:49 330  
16:00:49 331  	BEGIN
16:00:49 332  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_CREDIT_CARD_HISTORY(
16:00:49 333  	    in_credit_card_id,
16:00:49 334  	    var_account_id,
16:00:49 335  	    var_instrument_name,
16:00:49 336  	    var_private_card_holder_name,
16:00:49 337  	    var_private_street_address,
16:00:49 338  	    var_private_street_address2,
16:00:49 339  	    var_state,
16:00:49 340  	    var_city,
16:00:49 341  	    var_postal_code,
16:00:49 342  	    var_country,
16:00:49 343  	    var_last_four_cc,
16:00:49 344  	    var_expiration_date,
16:00:49 345  	    var_credit_card_type_id,
16:00:49 346  	    var_secret_token,
16:00:49 347  	    var_chase_profile_id,
16:00:49 348  	    var_credit_card_status_id,
16:00:49 349  	    var_updated_by,
16:00:49 350  	    var_update_date,
16:00:49 351  	    in_system_activity_reason_id
16:00:49 352  	  );
16:00:49 353  	  EXCEPTION
16:00:49 354  	    WHEN OTHERS THEN
16:00:49 355  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 356  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 357  	END;
16:00:49 358  
16:00:49 359  EXCEPTION
16:00:49 360  WHEN BAD_CREDIT_CARD_ID THEN
16:00:49 361  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 362  	  SPROC_NAME, 'No such credit card');
16:00:49 363  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 364  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 365  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 366  WHEN OTHERS THEN
16:00:49 367  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 368  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 369  END CREATE_CREDIT_CARD_HISTORY;
16:00:49 370  
16:00:49 371  /********************************************************************/
16:00:49 372  
16:00:49 373  PROCEDURE CREATE_PAYPAL_HISTORY(
16:00:49 374  /*
16:00:49 375  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 377  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:49 378  */
16:00:49 379  	in_paypal_id		      IN NUMBER,
16:00:49 380  	in_system_activity_reason_id  IN NUMBER
16:00:49 381  ) AS
16:00:49 382  SPROC_NAME CONSTANT VARCHAR(21) := 'CREATE_PAYPAL_HISTORY';
16:00:49 383  -- VARIABLES
16:00:49 384  var_account_id		   PAYPAL.ACCOUNT_ID%TYPE;
16:00:49 385  var_instrument_name	   PAYPAL.INSTRUMENT_NAME%TYPE DEFAULT NULL;
16:00:49 386  var_private_email_address    PAYPAL.PRIVATE_EMAIL_ADDRESS%TYPE DEFAULT NULL;
16:00:49 387  var_created_by		   PAYPAL.CREATED_BY%TYPE;
16:00:49 388  var_paypal_status_id	   PAYPAL.PAYPAL_STATUS_ID%TYPE;
16:00:49 389  var_paypal_prvt_street_addr  PAYPAL.PRIVATE_STREET_ADDRESS%TYPE;
16:00:49 390  var_paypal_prvt_street_addr2 PAYPAL.PRIVATE_STREET_ADDRESS2%TYPE;
16:00:49 391  var_state 		   PAYPAL.STATE%TYPE;
16:00:49 392  var_city			   PAYPAL.CITY%TYPE;
16:00:49 393  var_postal_code		   PAYPAL.POSTAL_CODE%TYPE;
16:00:49 394  var_country		   PAYPAL.COUNTRY%TYPE;
16:00:49 395  var_expiration_date	   PAYPAL.EXPIRATION_DATE%TYPE;
16:00:49 396  var_update_date		   PAYPAL.UPDATE_DATE%TYPE;
16:00:49 397  var_updated_by		   PAYPAL.UPDATED_BY%TYPE;
16:00:49 398  var_secret_token		   PAYPAL.SECRET_TOKEN%TYPE;
16:00:49 399  -- EXCEPTION
16:00:49 400  BAD_PAYPAL_ID	  EXCEPTION;
16:00:49 401  CAN_NOT_ADD_HISTORY EXCEPTION;
16:00:49 402  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:00:49 403  BEGIN
16:00:49 404  
16:00:49 405  	BEGIN
16:00:49 406  	  SELECT
16:00:49 407  	    ACCOUNT_ID,
16:00:49 408  	    INSTRUMENT_NAME,
16:00:49 409  	    PRIVATE_EMAIL_ADDRESS,
16:00:49 410  	    UPDATE_DATE,
16:00:49 411  	    UPDATED_BY,
16:00:49 412  	    PAYPAL_STATUS_ID,
16:00:49 413  	    PRIVATE_STREET_ADDRESS,
16:00:49 414  	    PRIVATE_STREET_ADDRESS2,
16:00:49 415  	    STATE,
16:00:49 416  	    CITY,
16:00:49 417  	    POSTAL_CODE,
16:00:49 418  	    COUNTRY,
16:00:49 419  	    EXPIRATION_DATE,
16:00:49 420  	    SECRET_TOKEN
16:00:49 421  	  INTO
16:00:49 422  	    var_account_id,
16:00:49 423  	    var_instrument_name,
16:00:49 424  	    var_private_email_address,
16:00:49 425  	    var_update_date,
16:00:49 426  	    var_updated_by,
16:00:49 427  	    var_paypal_status_id,
16:00:49 428  	    var_paypal_prvt_street_addr,
16:00:49 429  	    var_paypal_prvt_street_addr2,
16:00:49 430  	    var_state,
16:00:49 431  	    var_city,
16:00:49 432  	    var_postal_code,
16:00:49 433  	    var_country,
16:00:49 434  	    var_expiration_date,
16:00:49 435  	    var_secret_token
16:00:49 436  	  FROM
16:00:49 437  	    PAYPAL
16:00:49 438  	  WHERE
16:00:49 439  	    ID = in_paypal_id;
16:00:49 440  	  EXCEPTION
16:00:49 441  	    WHEN NO_DATA_FOUND THEN
16:00:49 442  	      RAISE BAD_PAYPAL_ID;
16:00:49 443  	END;
16:00:49 444  
16:00:49 445  	BEGIN
16:00:49 446  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_PAYPAL_HISTORY(
16:00:49 447  	    in_paypal_id,
16:00:49 448  	    var_account_id,
16:00:49 449  	    var_instrument_name,
16:00:49 450  	    var_private_email_address,
16:00:49 451  	    var_updated_by,
16:00:49 452  	    var_update_date,
16:00:49 453  	    var_paypal_status_id,
16:00:49 454  	    var_paypal_prvt_street_addr,
16:00:49 455  	    var_paypal_prvt_street_addr2,
16:00:49 456  	    var_state,
16:00:49 457  	    var_city,
16:00:49 458  	    var_postal_code,
16:00:49 459  	    var_country,
16:00:49 460  	    var_expiration_date,
16:00:49 461  	    in_system_activity_reason_id,
16:00:49 462  	    var_secret_token
16:00:49 463  	  );
16:00:49 464  	  EXCEPTION
16:00:49 465  	    WHEN OTHERS THEN
16:00:49 466  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 467  	      RAISE CAN_NOT_ADD_HISTORY;
16:00:49 468  	END;
16:00:49 469  
16:00:49 470  EXCEPTION
16:00:49 471  WHEN BAD_PAYPAL_ID THEN
16:00:49 472  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 473  	  SPROC_NAME, 'No such paypal');
16:00:49 474  WHEN CAN_NOT_ADD_HISTORY THEN
16:00:49 475  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 476  	  SPROC_NAME, 'Could not add history', EXCEPTION_MESSAGE);
16:00:49 477  WHEN OTHERS THEN
16:00:49 478  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 479  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 480  END CREATE_PAYPAL_HISTORY;
16:00:49 481  
16:00:49 482  /********************************************************************/
16:00:49 483  
16:00:49 484  PROCEDURE CREATE_GIFT_CERT_HISTORY(
16:00:49 485  	in_gift_certificate_id	      IN NUMBER,
16:00:49 486  	in_system_activity_reason_id  IN NUMBER
16:00:49 487  ) AS
16:00:49 488  SPROC_NAME CONSTANT VARCHAR2(24) := 'CREATE_GIFT_CERT_HISTORY';
16:00:49 489  -- VARIABLES
16:00:49 490  var_purchaser_group_id	     NUMBER;
16:00:49 491  var_purchase_invoice_id	     NUMBER;
16:00:49 492  var_offer_chain_id	     NUMBER;
16:00:49 493  var_expiration_date	     DATE;
16:00:49 494  var_purchase_date 	     DATE;
16:00:49 495  var_gift_certificate_status_id NUMBER;
16:00:49 496  var_code			     VARCHAR2(255);
16:00:49 497  var_recipient_name	     VARCHAR2(255);
16:00:49 498  var_gift_message		     VARCHAR2(500);
16:00:49 499  var_recipient_email	     VARCHAR2(255);
16:00:49 500  var_finalized_invoice_id	     NUMBER;
16:00:49 501  var_sender_email		     VARCHAR2(50);
16:00:49 502  var_sender_name		     VARCHAR2(50);
16:00:49 503  var_redemption_date	     DATE;
16:00:49 504  var_redeemer_group_id	     NUMBER;
16:00:49 505  var_cancelation_date	     DATE;
16:00:49 506  var_updated_by		     VARCHAR2(255);
16:00:49 507  var_update_date		     DATE;
16:00:49 508  var_recipient_address_id	     NUMBER;
16:00:49 509  var_redeemer_address_id	     NUMBER;
16:00:49 510  var_recipient_notify_date      DATE;
16:00:49 511  -- EXCEPTIONS
16:00:49 512  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:00:49 513  CAN_NOT_CREATE_HISTORY  EXCEPTION;
16:00:49 514  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:49 515  BEGIN
16:00:49 516  
16:00:49 517  	BEGIN
16:00:49 518  	  SELECT
16:00:49 519  	    GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:00:49 520  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
16:00:49 521  	    GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:00:49 522  	    GIFT_CERTIFICATE.EXPIRATION_DATE,
16:00:49 523  	    GIFT_CERTIFICATE.PURCHASE_DATE,
16:00:49 524  	    GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:00:49 525  	    GIFT_CERTIFICATE.CODE,
16:00:49 526  	    GIFT_CERTIFICATE.RECIPIENT_NAME,
16:00:49 527  	    GIFT_CERTIFICATE.GIFT_MESSAGE,
16:00:49 528  	    GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:00:49 529  	    GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
16:00:49 530  	    GIFT_CERTIFICATE.SENDER_EMAIL,
16:00:49 531  	    GIFT_CERTIFICATE.SENDER_NAME,
16:00:49 532  	    GIFT_CERTIFICATE.REDEMPTION_DATE,
16:00:49 533  	    GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:00:49 534  	    GIFT_CERTIFICATE.CANCELATION_DATE,
16:00:49 535  	    GIFT_CERTIFICATE.UPDATED_BY,
16:00:49 536  	    GIFT_CERTIFICATE.UPDATE_DATE,
16:00:49 537  	    GIFT_CERTIFICATE.RECIPIENT_ADDRESS_ID,
16:00:49 538  	    GIFT_CERTIFICATE.REDEEMER_ADDRESS_ID,
16:00:49 539  	    GIFT_CERTIFICATE.RECIPIENT_NOTIFY_DATE
16:00:49 540  	    into
16:00:49 541  	    var_purchaser_group_id,
16:00:49 542  	    var_purchase_invoice_id,
16:00:49 543  	    var_offer_chain_id,
16:00:49 544  	    var_expiration_date,
16:00:49 545  	    var_purchase_date,
16:00:49 546  	    var_gift_certificate_status_id,
16:00:49 547  	    var_code,
16:00:49 548  	    var_recipient_name,
16:00:49 549  	    var_gift_message,
16:00:49 550  	    var_recipient_email,
16:00:49 551  	    var_finalized_invoice_id,
16:00:49 552  	    var_sender_email,
16:00:49 553  	    var_sender_name,
16:00:49 554  	    var_redemption_date,
16:00:49 555  	    var_redeemer_group_id,
16:00:49 556  	    var_cancelation_date,
16:00:49 557  	    var_updated_by,
16:00:49 558  	    var_update_date,
16:00:49 559  	    var_recipient_address_id,
16:00:49 560  	    var_redeemer_address_id,
16:00:49 561  	    var_recipient_notify_date
16:00:49 562  	  FROM
16:00:49 563  	    GIFT_CERTIFICATE
16:00:49 564  	  WHERE
16:00:49 565  	    GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:00:49 566  	END;
16:00:49 567  
16:00:49 568  	BEGIN
16:00:49 569  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_GIFT_CERT_HISTORY(
16:00:49 570  	    in_gift_certificate_id,
16:00:49 571  	    var_purchaser_group_id,
16:00:49 572  	    var_purchase_invoice_id,
16:00:49 573  	    var_offer_chain_id,
16:00:49 574  	    var_expiration_date,
16:00:49 575  	    var_purchase_date,
16:00:49 576  	    var_gift_certificate_status_id,
16:00:49 577  	    var_code,
16:00:49 578  	    var_updated_by,
16:00:49 579  	    var_update_date,
16:00:49 580  	    in_system_activity_reason_id,
16:00:49 581  	    var_recipient_name,
16:00:49 582  	    var_gift_message,
16:00:49 583  	    var_recipient_email,
16:00:49 584  	    var_finalized_invoice_id,
16:00:49 585  	    var_sender_email,
16:00:49 586  	    var_sender_name,
16:00:49 587  	    var_redemption_date,
16:00:49 588  	    var_redeemer_group_id,
16:00:49 589  	    var_cancelation_date,
16:00:49 590  	    var_recipient_address_id,
16:00:49 591  	    var_redeemer_address_id,
16:00:49 592  	    var_recipient_notify_date
16:00:49 593  	  );
16:00:49 594  	  EXCEPTION
16:00:49 595  	    WHEN OTHERS THEN
16:00:49 596  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 597  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 598  	END;
16:00:49 599  
16:00:49 600  EXCEPTION
16:00:49 601  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:00:49 602  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 603  	  SPROC_NAME, 'No such gift certificate');
16:00:49 604  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 605  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 606  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 607  WHEN OTHERS THEN
16:00:49 608  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 609  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 610  END CREATE_GIFT_CERT_HISTORY;
16:00:49 611  
16:00:49 612  /********************************************************************/
16:00:49 613  
16:00:49 614  PROCEDURE CREATE_TRANSACTION_HISTORY (
16:00:49 615  	in_transaction_id	     IN NUMBER,
16:00:49 616  	in_system_activity_reason_id IN NUMBER
16:00:49 617  ) AS
16:00:49 618  SPROC_NAME CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_HISTORY';
16:00:49 619  -- VARIABLES
16:00:49 620  var_transaction_status_id  TRANSACTION.TRANSACTION_STATUS_ID%TYPE;
16:00:49 621  var_transaction_amount	 TRANSACTION.TRANSACTION_AMOUNT%TYPE;
16:00:49 622  var_updated_by		 TRANSACTION.UPDATED_BY%TYPE;
16:00:49 623  var_update_date		 TRANSACTION.UPDATE_DATE%TYPE;
16:00:49 624  var_order_id		 TRANSACTION.ORDER_ID%TYPE;
16:00:49 625  var_charge_id		 TRANSACTION.CHARGE_ID%TYPE;
16:00:49 626  var_is_refund		 TRANSACTION.IS_REFUND%TYPE;
16:00:49 627  var_is_settled		 TRANSACTION.IS_SETTLED%TYPE;
16:00:49 628  var_transaction_type_code  TRANSACTION.TRANSACTION_TYPE_CODE%TYPE;
16:00:49 629  -- EXCEPTIONS
16:00:49 630  BAD_TRANSACTION_ID     EXCEPTION;
16:00:49 631  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 632  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 633  BEGIN
16:00:49 634  
16:00:49 635  	BEGIN
16:00:49 636  	  SELECT
16:00:49 637  	    TRANSACTION.TRANSACTION_STATUS_ID,
16:00:49 638  	    TRANSACTION.TRANSACTION_AMOUNT,
16:00:49 639  	    TRANSACTION.UPDATED_BY,
16:00:49 640  	    TRANSACTION.UPDATE_DATE,
16:00:49 641  	    TRANSACTION.ORDER_ID,
16:00:49 642  	    TRANSACTION.CHARGE_ID,
16:00:49 643  	    TRANSACTION.IS_REFUND,
16:00:49 644  	    TRANSACTION.IS_SETTLED,
16:00:49 645  	    TRANSACTION.TRANSACTION_TYPE_CODE
16:00:49 646  	    into
16:00:49 647  	    var_transaction_status_id,
16:00:49 648  	    var_transaction_amount,
16:00:49 649  	    var_updated_by,
16:00:49 650  	    var_update_date,
16:00:49 651  	    var_order_id,
16:00:49 652  	    var_charge_id,
16:00:49 653  	    var_is_refund,
16:00:49 654  	    var_is_settled,
16:00:49 655  	    var_transaction_type_code
16:00:49 656  	  FROM
16:00:49 657  	    TRANSACTION
16:00:49 658  	  WHERE
16:00:49 659  	    TRANSACTION.ID = in_transaction_id;
16:00:49 660  	  EXCEPTION
16:00:49 661  	    WHEN NO_DATA_FOUND THEN
16:00:49 662  	      RAISE BAD_TRANSACTION_ID;
16:00:49 663  	END;
16:00:49 664  
16:00:49 665  	BEGIN
16:00:49 666  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_TRANSACTION_HISTORY(
16:00:49 667  	    in_transaction_id,
16:00:49 668  	    var_transaction_status_id,
16:00:49 669  	    var_transaction_amount,
16:00:49 670  	    var_updated_by,
16:00:49 671  	    var_update_date,
16:00:49 672  	    var_order_id,
16:00:49 673  	    var_charge_id,
16:00:49 674  	    var_is_refund,
16:00:49 675  	    var_is_settled,
16:00:49 676  	    var_transaction_type_code,
16:00:49 677  	    in_system_activity_reason_id
16:00:49 678  	  );
16:00:49 679  	  EXCEPTION
16:00:49 680  	    WHEN OTHERS THEN
16:00:49 681  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 682  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 683  	END;
16:00:49 684  
16:00:49 685  EXCEPTION
16:00:49 686  WHEN BAD_TRANSACTION_ID THEN
16:00:49 687  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 688  	  SPROC_NAME, 'No such transaction');
16:00:49 689  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 690  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 691  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 692  WHEN OTHERS THEN
16:00:49 693  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 694  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 695  END CREATE_TRANSACTION_HISTORY;
16:00:49 696  
16:00:49 697  /********************************************************************/
16:00:49 698  
16:00:49 699  PROCEDURE CREATE_INVOICE_HISTORY (
16:00:49 700  /*
16:00:49 701  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 702  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 703  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:49 704  */
16:00:49 705  	in_invoice_id		     IN NUMBER,
16:00:49 706  	in_system_activity_reason_id IN NUMBER
16:00:49 707  ) AS
16:00:49 708  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_INVOICE_HISTORY';
16:00:49 709  -- VARIABLES
16:00:49 710  var_invoice_status_id NUMBER;
16:00:49 711  var_updated_by	    VARCHAR2(255);
16:00:49 712  var_update_date	    DATE;
16:00:49 713  -- EXCEPTIONS
16:00:49 714  BAD_INVOICE_ID	     EXCEPTION;
16:00:49 715  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 716  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 717  BEGIN
16:00:49 718  
16:00:49 719  	BEGIN
16:00:49 720  	  SELECT
16:00:49 721  	    INVOICE.INVOICE_STATUS_ID,
16:00:49 722  	    INVOICE.UPDATED_BY,
16:00:49 723  	    INVOICE.UPDATE_DATE
16:00:49 724  	    into
16:00:49 725  	    var_invoice_status_id,
16:00:49 726  	    var_updated_by,
16:00:49 727  	    var_update_date
16:00:49 728  	  FROM
16:00:49 729  	    INVOICE
16:00:49 730  	  WHERE
16:00:49 731  	    INVOICE.ID = in_invoice_id;
16:00:49 732  	  EXCEPTION
16:00:49 733  	    WHEN NO_DATA_FOUND THEN
16:00:49 734  	      RAISE BAD_INVOICE_ID;
16:00:49 735  	END;
16:00:49 736  
16:00:49 737  	BEGIN
16:00:49 738  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_INVOICE_HISTORY(
16:00:49 739  	    in_invoice_id,
16:00:49 740  	    var_invoice_status_id,
16:00:49 741  	    var_updated_by,
16:00:49 742  	    var_update_date,
16:00:49 743  	    in_system_activity_reason_id
16:00:49 744  	  );
16:00:49 745  	  EXCEPTION
16:00:49 746  	    WHEN OTHERS THEN
16:00:49 747  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 748  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 749  	END;
16:00:49 750  
16:00:49 751  EXCEPTION
16:00:49 752  WHEN BAD_INVOICE_ID THEN
16:00:49 753  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 754  	  SPROC_NAME, 'No such invoice');
16:00:49 755  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 756  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 757  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 758  WHEN OTHERS THEN
16:00:49 759  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 760  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 761  END CREATE_INVOICE_HISTORY;
16:00:49 762  
16:00:49 763  /********************************************************************/
16:00:49 764  
16:00:49 765  PROCEDURE CREATE_LICENSE_HISTORY (
16:00:49 766  /*
16:00:49 767  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 768  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 769  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:49 770  */
16:00:49 771  	in_license_id		     IN NUMBER,
16:00:49 772  	in_system_activity_reason_id IN NUMBER
16:00:49 773  ) AS
16:00:49 774  SPROC_NAME CONSTANT VARCHAR2(22) := 'CREATE_LICENSE_HISTORY';
16:00:49 775  -- VARIABLES
16:00:49 776  var_license_status_id	    NUMBER;
16:00:49 777  var_needs_entitlements	    NUMBER;
16:00:49 778  var_start_date		    DATE;
16:00:49 779  var_offer_id		    NUMBER;
16:00:49 780  var_subscription_id	    NUMBER;
16:00:49 781  var_invoice_id		    NUMBER;
16:00:49 782  var_end_date		    DATE;
16:00:49 783  var_is_extension		    NUMBER;
16:00:49 784  var_current_offer_index	    NUMBER;
16:00:49 785  var_current_offer_recurr_num  NUMBER;
16:00:49 786  var_updated_by		    VARCHAR2(255);
16:00:49 787  var_update_date		    DATE;
16:00:49 788  var_entitlement_end_date	    DATE;
16:00:49 789  var_grace_start_date	    DATE;
16:00:49 790  var_grace_end_date	    DATE;
16:00:49 791  -- EXCEPTIONS
16:00:49 792  BAD_LICENSE_ID	     EXCEPTION;
16:00:49 793  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 794  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 795  BEGIN
16:00:49 796  
16:00:49 797  	BEGIN
16:00:49 798  	  SELECT
16:00:49 799  	    LICENSE.LICENSE_STATUS_ID,
16:00:49 800  	    LICENSE.NEEDS_ENTITLEMENTS,
16:00:49 801  	    LICENSE.START_DATE,
16:00:49 802  	    LICENSE.OFFER_ID,
16:00:49 803  	    LICENSE.SUBSCRIPTION_ID,
16:00:49 804  	    LICENSE.INVOICE_ID,
16:00:49 805  	    LICENSE.END_DATE,
16:00:49 806  	    LICENSE.IS_EXTENSION,
16:00:49 807  	    LICENSE.CURRENT_OFFER_INDEX,
16:00:49 808  	    LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:49 809  	    LICENSE.UPDATED_BY,
16:00:49 810  	    LICENSE.UPDATE_DATE,
16:00:49 811  	    LICENSE.ENTITLEMENT_END_DATE,
16:00:49 812  	    LICENSE.GRACE_START_DATE,
16:00:49 813  	    LICENSE.GRACE_END_DATE
16:00:49 814  	    into
16:00:49 815  	    var_license_status_id,
16:00:49 816  	    var_needs_entitlements,
16:00:49 817  	    var_start_date,
16:00:49 818  	    var_offer_id,
16:00:49 819  	    var_subscription_id,
16:00:49 820  	    var_invoice_id,
16:00:49 821  	    var_end_date,
16:00:49 822  	    var_is_extension,
16:00:49 823  	    var_current_offer_index,
16:00:49 824  	    var_current_offer_recurr_num,
16:00:49 825  	    var_updated_by,
16:00:49 826  	    var_update_date,
16:00:49 827  	    var_entitlement_end_date,
16:00:49 828  	    var_grace_start_date,
16:00:49 829  	    var_grace_end_date
16:00:49 830  	  FROM
16:00:49 831  	    LICENSE
16:00:49 832  	  WHERE
16:00:49 833  	    LICENSE.ID = in_license_id;
16:00:49 834  	  EXCEPTION
16:00:49 835  	    WHEN NO_DATA_FOUND THEN
16:00:49 836  	      RAISE BAD_LICENSE_ID;
16:00:49 837  	END;
16:00:49 838  
16:00:49 839  	BEGIN
16:00:49 840  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_LICENSE_HISTORY(
16:00:49 841  	    in_license_id,
16:00:49 842  	    var_license_status_id,
16:00:49 843  	    var_needs_entitlements,
16:00:49 844  	    var_start_date,
16:00:49 845  	    var_offer_id,
16:00:49 846  	    var_subscription_id,
16:00:49 847  	    var_invoice_id,
16:00:49 848  	    var_end_date,
16:00:49 849  	    var_updated_by,
16:00:49 850  	    var_update_date,
16:00:49 851  	    var_is_extension,
16:00:49 852  	    var_current_offer_index,
16:00:49 853  	    var_current_offer_recurr_num,
16:00:49 854  	    in_system_activity_reason_id,
16:00:49 855  	    var_entitlement_end_date,
16:00:49 856  	    var_grace_start_date,
16:00:49 857  	    var_grace_end_date
16:00:49 858  	  );
16:00:49 859  	  EXCEPTION
16:00:49 860  	    WHEN OTHERS THEN
16:00:49 861  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 862  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 863  	END;
16:00:49 864  
16:00:49 865  EXCEPTION
16:00:49 866  WHEN BAD_LICENSE_ID THEN
16:00:49 867  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 868  	  SPROC_NAME, 'No such license');
16:00:49 869  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 870  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 871  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 872  WHEN OTHERS THEN
16:00:49 873  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 874  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 875  END CREATE_LICENSE_HISTORY;
16:00:49 876  
16:00:49 877  /********************************************************************/
16:00:49 878  
16:00:49 879  PROCEDURE CREATE_CHARGE_HISTORY (
16:00:49 880  /*
16:00:49 881  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 882  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 883  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:49 884  */
16:00:49 885  	in_charge_id		    IN NUMBER,
16:00:49 886  	in_system_activity_reason_id IN NUMBER
16:00:49 887  ) AS
16:00:49 888  SPROC_NAME CONSTANT VARCHAR2(21) := 'CREATE_CHARGE_HISTORY';
16:00:49 889  -- VARIABLES
16:00:49 890  var_invoice_id	     NUMBER;
16:00:49 891  var_transaction_id     NUMBER;
16:00:49 892  var_instrument_type_id NUMBER;
16:00:49 893  var_instrument_id      NUMBER;
16:00:49 894  var_charge_amount      NUMBER;
16:00:49 895  var_charge_status_id   NUMBER;
16:00:49 896  var_updated_by	     VARCHAR2(255);
16:00:49 897  var_update_date	     DATE;
16:00:49 898  -- EXCEPTIONS
16:00:49 899  BAD_CHARGE_ID	     EXCEPTION;
16:00:49 900  CAN_NOT_CREATE_HISTORY EXCEPTION;
16:00:49 901  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 902  BEGIN
16:00:49 903  
16:00:49 904  	BEGIN
16:00:49 905  	  SELECT
16:00:49 906  	    CHARGE.INVOICE_ID,
16:00:49 907  	    CHARGE.TRANSACTION_ID,
16:00:49 908  	    CHARGE.INSTRUMENT_TYPE_ID,
16:00:49 909  	    CHARGE.INSTRUMENT_ID,
16:00:49 910  	    CHARGE.CHARGE_AMOUNT,
16:00:49 911  	    CHARGE.CHARGE_STATUS_ID,
16:00:49 912  	    CHARGE.UPDATED_BY,
16:00:49 913  	    CHARGE.UPDATE_DATE
16:00:49 914  	    into
16:00:49 915  	    var_invoice_id,
16:00:49 916  	    var_transaction_id,
16:00:49 917  	    var_instrument_type_id,
16:00:49 918  	    var_instrument_id,
16:00:49 919  	    var_charge_amount,
16:00:49 920  	    var_charge_status_id,
16:00:49 921  	    var_updated_by,
16:00:49 922  	    var_update_date
16:00:49 923  	  FROM
16:00:49 924  	    CHARGE
16:00:49 925  	  WHERE
16:00:49 926  	    CHARGE.ID = in_charge_id;
16:00:49 927  	  EXCEPTION
16:00:49 928  	    WHEN NO_DATA_FOUND THEN
16:00:49 929  	      RAISE BAD_CHARGE_ID;
16:00:49 930  	END;
16:00:49 931  
16:00:49 932  	BEGIN
16:00:49 933  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_CHARGE_HISTORY (
16:00:49 934  	    in_charge_id,
16:00:49 935  	    var_invoice_id,
16:00:49 936  	    var_transaction_id,
16:00:49 937  	    var_instrument_type_id,
16:00:49 938  	    var_instrument_id,
16:00:49 939  	    var_charge_amount,
16:00:49 940  	    var_updated_by,
16:00:49 941  	    var_update_date,
16:00:49 942  	    var_charge_status_id,
16:00:49 943  	    in_system_activity_reason_id
16:00:49 944  	  );
16:00:49 945  	  EXCEPTION
16:00:49 946  	    WHEN OTHERS THEN
16:00:49 947  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:49 948  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 949  	END;
16:00:49 950  
16:00:49 951  EXCEPTION
16:00:49 952  WHEN BAD_CHARGE_ID THEN
16:00:49 953  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 954  	  SPROC_NAME, 'No such license');
16:00:49 955  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 956  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 957  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 958  WHEN OTHERS THEN
16:00:49 959  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 960  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 961  END CREATE_CHARGE_HISTORY;
16:00:49 962  
16:00:49 963  PROCEDURE CREATE_INVOICE_ADJ_HISTORY (
16:00:49 964  /*
16:00:49 965  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 966  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 967  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:49 968  */
16:00:49 969  	in_invoice_adjustment_id  IN NUMBER,
16:00:49 970  	in_system_activity_reason_id IN NUMBER
16:00:49 971  ) AS
16:00:49 972  SPROC_NAME CONSTANT VARCHAR(32) := 'CREATE_INVOICE_ADJ_HISTORY';
16:00:49 973  --VARIABLED
16:00:49 974  var_invoice_adj_id	  INVOICE_ADJUSTMENT.ID%TYPE;
16:00:49 975  var_invoice_id		  INVOICE_ADJUSTMENT.INVOICE_ID%TYPE;
16:00:49 976  var_is_credit		  INVOICE_ADJUSTMENT.IS_CREDIT%TYPE;
16:00:49 977  var_charge_id		  INVOICE_ADJUSTMENT.CHARGE_ID%TYPE;
16:00:49 978  var_adjustment_date	  INVOICE_ADJUSTMENT.ADJUSTMENT_DATE%TYPE;
16:00:49 979  var_create_date		  INVOICE_ADJUSTMENT.CREATE_DATE%TYPE;
16:00:49 980  var_created_by		  INVOICE_ADJUSTMENT.CREATED_BY%TYPE;
16:00:49 981  var_invoice_adj_reason_id INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID%TYPE;
16:00:49 982  var_update_date		  INVOICE_ADJUSTMENT.UPDATE_DATE%TYPE;
16:00:49 983  var_updated_by		  INVOICE_ADJUSTMENT.UPDATED_BY%TYPE;
16:00:49 984  BAD_INVOICE_ADJ_ID	  EXCEPTION;
16:00:49 985  CAN_NOT_CREATE_HISTORY	  EXCEPTION;
16:00:49 986  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49 987  BEGIN
16:00:49 988  
16:00:49 989  	BEGIN
16:00:49 990  	  SELECT
16:00:49 991  	    INVOICE_ADJUSTMENT.ID,
16:00:49 992  	    INVOICE_ADJUSTMENT.INVOICE_ID,
16:00:49 993  	    INVOICE_ADJUSTMENT.IS_CREDIT,
16:00:49 994  	    INVOICE_ADJUSTMENT.CHARGE_ID,
16:00:49 995  	    INVOICE_ADJUSTMENT.ADJUSTMENT_DATE,
16:00:49 996  	    INVOICE_ADJUSTMENT.CREATE_DATE,
16:00:49 997  	    INVOICE_ADJUSTMENT.CREATED_BY,
16:00:49 998  	    INVOICE_ADJUSTMENT.INVOICE_ADJUSTMENT_REASON_ID,
16:00:49 999  	    INVOICE_ADJUSTMENT.UPDATE_DATE,
16:00:49 1000  	     INVOICE_ADJUSTMENT.UPDATED_BY
16:00:49 1001  	     into
16:00:49 1002  	     var_invoice_adj_id,
16:00:49 1003  	     var_invoice_id,
16:00:49 1004  	     var_is_credit,
16:00:49 1005  	     var_charge_id,
16:00:49 1006  	     var_adjustment_date,
16:00:49 1007  	     var_create_date,
16:00:49 1008  	     var_created_by,
16:00:49 1009  	     var_invoice_adj_reason_id,
16:00:49 1010  	     var_update_date,
16:00:49 1011  	     var_updated_by
16:00:49 1012  	   FROM
16:00:49 1013  	     INVOICE_ADJUSTMENT
16:00:49 1014  	   WHERE
16:00:49 1015  	     INVOICE_ADJUSTMENT.ID = in_invoice_adjustment_id;
16:00:49 1016  	   EXCEPTION
16:00:49 1017  	     WHEN NO_DATA_FOUND THEN
16:00:49 1018  	       RAISE BAD_INVOICE_ADJ_ID;
16:00:49 1019  	 END;
16:00:49 1020  
16:00:49 1021  	 BEGIN
16:00:49 1022  	   CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_INVOICE_ADJ_HISTORY (
16:00:49 1023  	     var_invoice_adj_id,
16:00:49 1024  	     var_invoice_id,
16:00:49 1025  	     var_is_credit,
16:00:49 1026  	     var_charge_id,
16:00:49 1027  	     var_adjustment_date,
16:00:49 1028  	     var_create_date,
16:00:49 1029  	     var_created_by,
16:00:49 1030  	     var_invoice_adj_reason_id,
16:00:49 1031  	     var_update_date,
16:00:49 1032  	     var_updated_by
16:00:49 1033  	   );
16:00:49 1034  	   EXCEPTION
16:00:49 1035  	     WHEN OTHERS THEN
16:00:49 1036  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:49 1037  	       RAISE CAN_NOT_CREATE_HISTORY;
16:00:49 1038  	 END;
16:00:49 1039  
16:00:49 1040  EXCEPTION
16:00:49 1041  WHEN BAD_INVOICE_ADJ_ID THEN
16:00:49 1042  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 1043  	   SPROC_NAME, 'No such invoice adjustment');
16:00:49 1044  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:49 1045  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:49 1046  	   SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:49 1047  WHEN OTHERS THEN
16:00:49 1048  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 1049  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 1050  END CREATE_INVOICE_ADJ_HISTORY;
16:00:49 1051  
16:00:49 1052  END PROCS_HISTORY_V20;
16:00:49 1053  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.10
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ITUNES_RECEIPT_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE ITUNES_RECEIPT_SUBSCRIPTION (
16:00:49   4  /*
16:00:49   5  Throws exceptions:
16:00:49   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49   7  */
16:00:49   8  	in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:49   9  	out_result_set	    OUT SYS_REFCURSOR
16:00:49  10  ) AS
16:00:49  11  SPROC_NAME CONSTANT VARCHAR2(28) := 'ITUNES_RECEIPT_SUBSCRIPTION';
16:00:49  12  BEGIN
16:00:49  13  OPEN out_result_set FOR
16:00:49  14  	      SELECT
16:00:49  15  	      i.id as ITUNES_RECEIPT_ID,
16:00:49  16  	      s.id as SUBSCRIPTION_ID,
16:00:49  17  	      s.SUBSCRIPTION_STATUS_ID,
16:00:49  18  	      i.STATUS,
16:00:49  19  	      a.GROUP_ID
16:00:49  20  	      FROM ITUNES_RECEIPT i, SUBSCRIPTION s, ACCOUNT a
16:00:49  21  	      WHERE i.ORIGINAL_TRANSACTION_ID = in_original_transaction_id
16:00:49  22  	      AND s.ID(+) = i.SUBSCRIPTION_ID
16:00:49  23  	      AND a.ID(+) = s.ACCOUNT_ID;
16:00:49  24  END ITUNES_RECEIPT_SUBSCRIPTION;
16:00:49  25  
16:00:49  26  
16:00:49  27  PROCEDURE CREATE_RECEIPT(
16:00:49  28  /*
16:00:49  29  Throws exceptions:
16:00:49  30  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  31  */
16:00:49  32  	  out_id      OUT NUMBER,
16:00:49  33  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:49  34  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:49  35  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:00:49  36  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:49  37  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:49  38  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:49  39  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:49  40  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:49  41  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:49  42  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:49  43  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:49  44  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:00:49  45  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:00:49  46  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:49  47  	  in_created_by       IN ITUNES_RECEIPT.CREATED_BY%TYPE
16:00:49  48  ) AS
16:00:49  49  -- VARIABLES
16:00:49  50  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_RECEIPT';
16:00:49  51  -- EXCEPTIONS
16:00:49  52  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:49  53  BEGIN
16:00:49  54  
16:00:49  55  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.CREATE_RECEIPT(
16:00:49  56  	  out_id	      =>  out_id,
16:00:49  57  	  in_subscription_id  =>  in_subscription_id,
16:00:49  58  	  in_receipt	      =>  in_receipt,
16:00:49  59  	  in_status	      =>  in_status,
16:00:49  60  	  in_quantity	      =>  in_quantity,
16:00:49  61  	  in_product_id       =>  in_product_id,
16:00:49  62  	  in_transaction_id   =>  in_transaction_id,
16:00:49  63  	  in_purchase_date    =>  in_purchase_date,
16:00:49  64  	  in_original_transaction_id  =>  in_original_transaction_id,
16:00:49  65  	  in_original_purchase_date => in_original_purchase_date,
16:00:49  66  	  in_app_item_id      =>  in_app_item_id,
16:00:49  67  	  in_version_external_id  =>  in_version_external_id,
16:00:49  68  	  in_bid	      =>  in_bid,
16:00:49  69  	  in_bvrs	      =>  in_bvrs,
16:00:49  70  	  in_expires_date     =>  in_expires_date,
16:00:49  71  	  in_created_by       =>  in_created_by
16:00:49  72  	);
16:00:49  73  
16:00:49  74  END CREATE_RECEIPT;
16:00:49  75  
16:00:49  76  PROCEDURE UPDATE_RECEIPT(
16:00:49  77  /*
16:00:49  78  Throws exceptions:
16:00:49  79  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49  80  */
16:00:49  81  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:00:49  82  	  in_receipt	      IN ITUNES_RECEIPT.RECEIPT%TYPE,
16:00:49  83  	  in_status	      IN ITUNES_RECEIPT.STATUS%TYPE,
16:00:49  84  	  in_quantity	      IN ITUNES_RECEIPT.QUANTITY%TYPE,
16:00:49  85  	  in_product_id       IN ITUNES_RECEIPT.PRODUCT_ID%TYPE,
16:00:49  86  	  in_transaction_id   IN ITUNES_RECEIPT.TRANSACTION_ID%TYPE,
16:00:49  87  	  in_purchase_date    IN ITUNES_RECEIPT.PURCHASE_DATE%TYPE,
16:00:49  88  	  in_original_transaction_id IN ITUNES_RECEIPT.ORIGINAL_TRANSACTION_ID%TYPE,
16:00:49  89  	  in_original_purchase_date IN ITUNES_RECEIPT.ORIGINAL_PURCHASE_DATE%TYPE,
16:00:49  90  	  in_app_item_id      IN ITUNES_RECEIPT.APP_ITEM_ID%TYPE,
16:00:49  91  	  in_version_external_id IN ITUNES_RECEIPT.VERSION_EXTERNAL_ID%TYPE,
16:00:49  92  	  in_bid	      IN ITUNES_RECEIPT.BID%TYPE,
16:00:49  93  	  in_bvrs	      IN ITUNES_RECEIPT.BVRS%TYPE,
16:00:49  94  	  in_expires_date     IN ITUNES_RECEIPT.EXPIRES_DATE%TYPE,
16:00:49  95  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE,
16:00:49  96  	  in_is_expired       IN NUMBER
16:00:49  97  ) AS
16:00:49  98  CANCEL_DATE DATE;
16:00:49  99  BEGIN
16:00:49 100  	-- see if cancel date is already set
16:00:49 101  	BEGIN
16:00:49 102  	  SELECT
16:00:49 103  	    IR.CANCEL_DATE INTO CANCEL_DATE
16:00:49 104  	  FROM
16:00:49 105  	    ITUNES_RECEIPT IR
16:00:49 106  	  WHERE
16:00:49 107  	    IR.ID = in_id;
16:00:49 108  	EXCEPTION
16:00:49 109  	  WHEN NO_DATA_FOUND THEN
16:00:49 110  	    CANCEL_DATE := NULL;
16:00:49 111  	END;
16:00:49 112  
16:00:49 113  	-- only update cancel date if it isn't already set and the receipt is expired
16:00:49 114  	IF in_is_expired = 1 THEN
16:00:49 115  	  IF CANCEL_DATE IS NULL THEN
16:00:49 116  	    CANCEL_DATE := SYSDATE;
16:00:49 117  	  END IF;
16:00:49 118  	ELSE
16:00:49 119  	  CANCEL_DATE := NULL;
16:00:49 120  	END IF;
16:00:49 121  
16:00:49 122  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.UPDATE_RECEIPT(
16:00:49 123  	  in_id => in_id,
16:00:49 124  	  in_receipt => in_receipt,
16:00:49 125  	  in_status => in_status,
16:00:49 126  	  in_quantity => in_quantity,
16:00:49 127  	  in_product_id => in_product_id,
16:00:49 128  	  in_transaction_id => in_transaction_id,
16:00:49 129  	  in_purchase_date => in_purchase_date,
16:00:49 130  	  in_original_transaction_id => in_original_transaction_id,
16:00:49 131  	  in_original_purchase_date => in_original_purchase_date,
16:00:49 132  	  in_app_item_id => in_app_item_id,
16:00:49 133  	  in_version_external_id => in_version_external_id,
16:00:49 134  	  in_bid => in_bid,
16:00:49 135  	  in_bvrs => in_bvrs,
16:00:49 136  	  in_expires_date => in_expires_date,
16:00:49 137  	  in_updated_by => in_updated_by,
16:00:49 138  	  in_cancel_date => CANCEL_DATE
16:00:49 139  	);
16:00:49 140  END UPDATE_RECEIPT;
16:00:49 141  
16:00:49 142  PROCEDURE LINK_ITUNES_RECEIPT(
16:00:49 143  /*
16:00:49 144  Throws exceptions:
16:00:49 145  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 146  */
16:00:49 147  	  in_id 	      IN ITUNES_RECEIPT.ID%TYPE,
16:00:49 148  	  in_subscription_id  IN ITUNES_RECEIPT.SUBSCRIPTION_ID%TYPE,
16:00:49 149  	  in_updated_by       IN ITUNES_RECEIPT.UPDATED_BY%TYPE
16:00:49 150  ) AS
16:00:49 151  BEGIN
16:00:49 152  	      CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.LINK_ITUNES_RECEIPT(
16:00:49 153  		      in_id => in_id,
16:00:49 154  		      in_subscription_id => in_subscription_id,
16:00:49 155  		      in_updated_by => in_updated_by
16:00:49 156  		      );
16:00:49 157  END LINK_ITUNES_RECEIPT;
16:00:49 158  
16:00:49 159  PROCEDURE MARK_RECEIPT_CHECKED(
16:00:49 160  /*
16:00:49 161  Throws exceptions:
16:00:49 162  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 163  */
16:00:49 164  	  in_id       IN ITUNES_RECEIPT.ID%TYPE
16:00:49 165  ) AS
16:00:49 166  BEGIN
16:00:49 167  	CORE_OWNER.PROCS_ITUNES_RECEIPT_CRU_V20.MARK_RECEIPT_CHECKED(
16:00:49 168  	  in_id => in_id
16:00:49 169  	);
16:00:49 170  END MARK_RECEIPT_CHECKED;
16:00:49 171  
16:00:49 172  PROCEDURE GET_ITUNES_RECEIPTS (
16:00:49 173  /*
16:00:49 174  Throws exceptions:
16:00:49 175  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 176  */
16:00:49 177  	out_result_set	    OUT SYS_REFCURSOR,
16:00:49 178  	in_row_number	    IN NUMBER DEFAULT 500
16:00:49 179  ) AS
16:00:49 180  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ITUNES_RECEIPTS';
16:00:49 181  BEGIN
16:00:49 182  OPEN out_result_set FOR
16:00:49 183  SELECT * FROM
16:00:49 184  (
16:00:49 185  	SELECT * FROM
16:00:49 186  	(
16:00:49 187  	  SELECT
16:00:49 188  	    IR.ID,
16:00:49 189  	    IR.SUBSCRIPTION_ID,
16:00:49 190  	    IR.RECEIPT,
16:00:49 191  	    IR.STATUS,
16:00:49 192  	    IR.QUANTITY,
16:00:49 193  	    IR.PRODUCT_ID,
16:00:49 194  	    IR.TRANSACTION_ID,
16:00:49 195  	    IR.PURCHASE_DATE,
16:00:49 196  	    IR.ORIGINAL_TRANSACTION_ID,
16:00:49 197  	    IR.ORIGINAL_PURCHASE_DATE,
16:00:49 198  	    IR.APP_ITEM_ID,
16:00:49 199  	    IR.VERSION_EXTERNAL_ID,
16:00:49 200  	    IR.BID,
16:00:49 201  	    IR.BVRS,
16:00:49 202  	    IR.EXPIRES_DATE,
16:00:49 203  	    IR.CREATE_DATe,
16:00:49 204  	    IR.CREATED_BY,
16:00:49 205  	    IR.UPDATE_DATE,
16:00:49 206  	    IR.UPDATED_BY,
16:00:49 207  	    IR.LAST_CHECK_DATE,
16:00:49 208  	    OC.VENDOR_SOURCE_ID
16:00:49 209  	  FROM
16:00:49 210  	    CORE_OWNER.ITUNES_RECEIPT IR
16:00:49 211  	    LEFT JOIN CORE_OWNER.SUBSCRIPTION S ON IR.subscription_id = S.id
16:00:49 212  	    LEFT JOIN CORE_OWNER.OFFER_CHAIN OC ON S.offer_chain_id = OC.id
16:00:49 213  	  WHERE
16:00:49 214  	    NOT EXISTS
16:00:49 215  	    (
16:00:49 216  	      SELECT NULL
16:00:49 217  	      FROM PROCESS_RETRY_THROTTLE
16:00:49 218  	      WHERE PROCESS_NAME = SPROC_NAME
16:00:49 219  		AND GENERIC_ID = IR.ID
16:00:49 220  	    ) AND
16:00:49 221  	    (S.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED, GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE) or (S.subscription_status_id is null and IR.status != 21006)) AND
16:00:49 222  	    ROWNUM <= in_row_number*10
16:00:49 223  	)
16:00:49 224  	ORDER BY dbms_random.value
16:00:49 225  )
16:00:49 226  WHERE
16:00:49 227  	ROWNUM <= in_row_number;
16:00:49 228  
16:00:49 229  END GET_ITUNES_RECEIPTS;
16:00:49 230  
16:00:49 231  PROCEDURE GET_VENDOR_FROM_ITUNES_PID(
16:00:49 232  /*
16:00:49 233  Throws exceptions:
16:00:49 234  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 235  */
16:00:49 236  	  out_vendor_source_id OUT OFFER_CHAIN.VENDOR_SOURCE_ID%TYPE,
16:00:49 237  	  in_itunes_pid        IN ITUNES_RECEIPT.PRODUCT_ID%TYPE
16:00:49 238  ) AS
16:00:49 239  BEGIN
16:00:49 240  
16:00:49 241  SELECT
16:00:49 242  	  oc.vendor_source_id
16:00:49 243  INTO
16:00:49 244  	  out_vendor_source_id
16:00:49 245  FROM
16:00:49 246  	  offer_chain_meta_data ocmd
16:00:49 247  JOIN
16:00:49 248  	  offer_chain oc
16:00:49 249  ON
16:00:49 250  	  ocmd.offer_chain_id = oc.id
16:00:49 251  WHERE
16:00:49 252  	  ocmd.name = 'ITUNES_PRODUCT_ID'
16:00:49 253  AND ocmd.value = in_itunes_pid
16:00:49 254  AND rownum <= 1;
16:00:49 255  
16:00:49 256  END GET_VENDOR_FROM_ITUNES_PID;
16:00:49 257  
16:00:49 258  END PROCS_ITUNES_RECEIPT_V20;
16:00:49 259  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LINE_ITEMS_V20" AS
16:00:49   2  
16:00:49   3  PROCEDURE ADD_LINE_ITEMS(
16:00:49   4  /*
16:00:49   5  Throws exceptions:
16:00:49   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49   8  */
16:00:49   9  	in_invoice_id IN NUMBER,
16:00:49  10  	in_offer_id   IN NUMBER,
16:00:49  11  	in_created_by IN VARCHAR2
16:00:49  12  ) AS
16:00:49  13  -- VARIABLES
16:00:49  14  SPROC_NAME      CONSTANT VARCHAR2(14) := 'ADD_LINE_ITEMS';
16:00:49  15  temp_invoice_id NUMBER;
16:00:49  16  temp_offer_id   NUMBER;
16:00:49  17  
16:00:49  18  var_line_item_data SYS_REFCURSOR;
16:00:49  19  var_new_line_item_id NUMBER;
16:00:49  20  var_product_unit_price NUMBER (10,6);
16:00:49  21  var_product_offering_price NUMBER(10,6);
16:00:49  22  var_product_offering_oprice NUMBER(10,6);
16:00:49  23  var_product_quantity NUMBER;
16:00:49  24  var_product_offering_id NUMBER;
16:00:49  25  
16:00:49  26  var_line_item_price	  NUMBER(10,2);
16:00:49  27  var_discount_fixed_amount   NUMBER(10,6);
16:00:49  28  var_discount_percent_amount NUMBER(10,2);
16:00:49  29  
16:00:49  30  
16:00:49  31  -- EXCEPTIONS
16:00:49  32  BAD_INVOICE_ID EXCEPTION;
16:00:49  33  BAD_OFFER_ID EXCEPTION;
16:00:49  34  BAD_DISCOUNT EXCEPTION;
16:00:49  35  BEGIN
16:00:49  36  
16:00:49  37  	-- Check that given invoice exists
16:00:49  38  	BEGIN
16:00:49  39  	  SELECT
16:00:49  40  	    INVOICE.ID into temp_invoice_id
16:00:49  41  	  FROM
16:00:49  42  	    INVOICE
16:00:49  43  	  WHERE
16:00:49  44  	    INVOICE.ID = in_invoice_id;
16:00:49  45  
16:00:49  46  	  EXCEPTION
16:00:49  47  	    WHEN NO_DATA_FOUND THEN
16:00:49  48  	      RAISE BAD_INVOICE_ID;
16:00:49  49  	END;
16:00:49  50  
16:00:49  51  	-- Check that given offer exists
16:00:49  52  	BEGIN
16:00:49  53  	  SELECT
16:00:49  54  	    OFFER.ID into temp_offer_id
16:00:49  55  	  FROM
16:00:49  56  	    OFFER
16:00:49  57  	  WHERE
16:00:49  58  	    OFFER.ID = in_offer_id;
16:00:49  59  
16:00:49  60  	  EXCEPTION
16:00:49  61  	    WHEN NO_DATA_FOUND THEN
16:00:49  62  	      RAISE BAD_OFFER_ID;
16:00:49  63  	END;
16:00:49  64  
16:00:49  65  	-- Get product_offering data
16:00:49  66  	OPEN var_line_item_data FOR
16:00:49  67  	SELECT
16:00:49  68  	  PRODUCT_OFFERING.ID,
16:00:49  69  	  PRODUCT_OFFERING.UNIT_PRICE,
16:00:49  70  	  PRODUCT_OFFERING.QUANTITY
16:00:49  71  	FROM
16:00:49  72  	  OFFER_PRODUCT_OFFERING
16:00:49  73  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:49  74  	WHERE
16:00:49  75  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:00:49  76  
16:00:49  77  	-- insert line items
16:00:49  78  	-- add discounts to line items
16:00:49  79  	LOOP
16:00:49  80  	  FETCH var_line_item_data INTO
16:00:49  81  	    var_product_offering_id,
16:00:49  82  	    var_product_unit_price,
16:00:49  83  	    var_product_quantity;
16:00:49  84  	  EXIT WHEN var_line_item_data%NOTFOUND;
16:00:49  85  
16:00:49  86  	  var_product_offering_oprice := var_product_unit_price * var_product_quantity;
16:00:49  87  	  var_product_offering_price := var_product_offering_oprice;
16:00:49  88  
16:00:49  89  	  -- Apply discounts to line_item
16:00:49  90  	  BEGIN
16:00:49  91  	    SELECT
16:00:49  92  	      SUM (DISCOUNT.FIXED_AMOUNT) into var_discount_fixed_amount
16:00:49  93  	    FROM
16:00:49  94  	      DISCOUNT_PRODUCT_OFFERING
16:00:49  95  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:00:49  96  	    WHERE
16:00:49  97  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:00:49  98  	      AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
16:00:49  99  	    EXCEPTION
16:00:49 100  	    WHEN NO_DATA_FOUND THEN
16:00:49 101  	      var_discount_fixed_amount := NULL;
16:00:49 102  	  END;
16:00:49 103  
16:00:49 104  	  BEGIN
16:00:49 105  	    SELECT
16:00:49 106  	      SUM (DISCOUNT.PERCENT_AMOUNT) into var_discount_percent_amount
16:00:49 107  	    FROM
16:00:49 108  	      DISCOUNT_PRODUCT_OFFERING
16:00:49 109  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:00:49 110  	    WHERE
16:00:49 111  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:00:49 112  	      AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
16:00:49 113  	    EXCEPTION
16:00:49 114  	    WHEN NO_DATA_FOUND THEN
16:00:49 115  	      var_discount_percent_amount := NULL;
16:00:49 116  	  END;
16:00:49 117  
16:00:49 118  	  IF (var_discount_percent_amount IS NOT NULL) THEN
16:00:49 119  	    var_product_offering_price := var_product_offering_price * ( 1 - var_discount_percent_amount / 100 );
16:00:49 120  	  END IF;
16:00:49 121  
16:00:49 122  	  IF (var_discount_fixed_amount IS NOT NULL) THEN
16:00:49 123  	    var_product_offering_price := var_product_offering_price - var_discount_fixed_amount;
16:00:49 124  	  END IF;
16:00:49 125  
16:00:49 126  	  var_line_item_price := PROCS_COMMON_V20.ROUND_10_6_TO_10_2(var_product_offering_price);
16:00:49 127  
16:00:49 128  	  IF (var_line_item_price < 0) THEN
16:00:49 129  	      RAISE BAD_DISCOUNT;
16:00:49 130  	  END IF;
16:00:49 131  
16:00:49 132  	  var_new_line_item_id := NULL;
16:00:49 133  	  PROCS_LINE_ITEMS_CRU_V20.CREATE_LINE_ITEM(
16:00:49 134  	    inout_line_item_id	=> var_new_line_item_id,
16:00:49 135  	    in_product_offer_id => var_product_offering_id,
16:00:49 136  	    in_invoice_id	=> in_invoice_id,
16:00:49 137  	    in_amount		=> var_line_item_price,
16:00:49 138  	    in_created_by	=> in_created_by,
16:00:49 139  	    in_discount_amount	=> var_product_offering_oprice - var_line_item_price,
16:00:49 140  	    in_taxes_amount	=> NULL
16:00:49 141  	  );
16:00:49 142  
16:00:49 143  	  FOR f_discount IN (
16:00:49 144  	    SELECT
16:00:49 145  	      DISCOUNT.ID
16:00:49 146  	    FROM
16:00:49 147  	      DISCOUNT_PRODUCT_OFFERING
16:00:49 148  	      INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:00:49 149  	    WHERE
16:00:49 150  	      DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:00:49 151  	  )
16:00:49 152  	  LOOP
16:00:49 153  	    PROCS_LINE_ITEMS_CRU_V20.CREATE_DISCOUNT_LINE_ITEM(
16:00:49 154  	      in_discount_id =>  f_discount.ID,
16:00:49 155  	      in_line_item_id => var_new_line_item_id
16:00:49 156  	    );
16:00:49 157  	  END LOOP;
16:00:49 158  	END LOOP;
16:00:49 159  
16:00:49 160  EXCEPTION
16:00:49 161  WHEN BAD_INVOICE_ID THEN
16:00:49 162  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 163  	  SPROC_NAME, 'No such license');
16:00:49 164  WHEN BAD_OFFER_ID THEN
16:00:49 165  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 166  	  SPROC_NAME, 'No such offer');
16:00:49 167  WHEN BAD_DISCOUNT THEN
16:00:49 168  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 169  	  SPROC_NAME, 'Bad Discount');
16:00:49 170  WHEN OTHERS THEN
16:00:49 171  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 172  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 173  END ADD_LINE_ITEMS;
16:00:49 174  
16:00:49 175  /******************************************************************************/
16:00:49 176  
16:00:49 177  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:00:49 178  	in_line_item_id    IN NUMBER,
16:00:49 179  	in_amount	   IN NUMBER,
16:00:49 180  	in_discount_amount IN NUMBER,
16:00:49 181  	in_taxes_amount    IN NUMBER
16:00:49 182  ) AS
16:00:49 183  SPROC_NAME CONSTANT VARCHAR2(24) := 'UPDATE_LINE_ITEM_AMOUNTS';
16:00:49 184  -- VARIABLES
16:00:49 185  temp_line_item_id NUMBER;
16:00:49 186  -- EXCEPTIONS
16:00:49 187  BAD_LINE_ITEM_ID EXCEPTION;
16:00:49 188  BEGIN
16:00:49 189  
16:00:49 190  	-- Check that line item exists
16:00:49 191  	BEGIN
16:00:49 192  	  SELECT
16:00:49 193  	    LINE_ITEM.ID into temp_line_item_id
16:00:49 194  	  FROM
16:00:49 195  	    LINE_ITEM
16:00:49 196  	  WHERE
16:00:49 197  	    LINE_ITEM.ID = in_line_item_id;
16:00:49 198  	  EXCEPTION
16:00:49 199  	    WHEN NO_DATA_FOUND THEN
16:00:49 200  	      RAISE BAD_LINE_ITEM_ID;
16:00:49 201  	END;
16:00:49 202  
16:00:49 203  	-- Update line item
16:00:49 204  	PROCS_LINE_ITEMS_CRU_V20.UPDATE_LINE_ITEM(
16:00:49 205  	  in_line_item_id    => in_line_item_id,
16:00:49 206  	  in_amount	     => in_amount,
16:00:49 207  	  in_discount_amount => in_discount_amount,
16:00:49 208  	  in_taxes_amount    => in_taxes_amount
16:00:49 209  	);
16:00:49 210  
16:00:49 211  EXCEPTION
16:00:49 212  WHEN BAD_LINE_ITEM_ID THEN
16:00:49 213  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 214  	  SPROC_NAME, 'No such line item');
16:00:49 215  WHEN OTHERS THEN
16:00:49 216  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 217  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 218  END UPDATE_LINE_ITEM_AMOUNT;
16:00:49 219  
16:00:49 220  /******************************************************************************/
16:00:49 221  
16:00:49 222  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:49 223  /*
16:00:49 224  Throws exceptions:
16:00:49 225  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 226  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 227  */
16:00:49 228  	in_invoice_id  IN NUMBER,
16:00:49 229  	out_result_set OUT SYS_REFCURSOR
16:00:49 230  ) AS
16:00:49 231  -- VARIABLES
16:00:49 232  SPROC_NAME      CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
16:00:49 233  temp_invoice_id NUMBER;
16:00:49 234  
16:00:49 235  -- EXCEPTIONS
16:00:49 236  BAD_INVOICE_ID EXCEPTION;
16:00:49 237  BEGIN
16:00:49 238  
16:00:49 239  	-- Check that given invoice exists
16:00:49 240  	BEGIN
16:00:49 241  	  SELECT
16:00:49 242  	    INVOICE.ID into temp_invoice_id
16:00:49 243  	  FROM
16:00:49 244  	    INVOICE
16:00:49 245  	  WHERE
16:00:49 246  	    INVOICE.ID = in_invoice_id;
16:00:49 247  	  EXCEPTION
16:00:49 248  	    WHEN NO_DATA_FOUND THEN
16:00:49 249  	      RAISE BAD_INVOICE_ID;
16:00:49 250  	END;
16:00:49 251  
16:00:49 252  	-- Select line items
16:00:49 253  	OPEN out_result_set FOR
16:00:49 254  	SELECT
16:00:49 255  	  LINE_ITEM.ID,
16:00:49 256  	  LINE_ITEM.AMOUNT,
16:00:49 257  	  LINE_ITEM.CREATE_DATE,
16:00:49 258  	  LINE_ITEM.CREATED_BY,
16:00:49 259  	  LINE_ITEM.INVOICE_ID,
16:00:49 260  	  LINE_ITEM.DISCOUNT_AMOUNT,
16:00:49 261  	  LINE_ITEM.TAXES_AMOUNT,
16:00:49 262  	  LINE_ITEM.PRODUCT_OFFER_ID
16:00:49 263  	FROM
16:00:49 264  	  LINE_ITEM
16:00:49 265  	WHERE
16:00:49 266  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
16:00:49 267  
16:00:49 268  EXCEPTION
16:00:49 269  WHEN BAD_INVOICE_ID THEN
16:00:49 270  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 271  	  SPROC_NAME, 'No such invoice');
16:00:49 272  WHEN OTHERS THEN
16:00:49 273  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 274  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 275  END GET_INVOICE_LINE_ITEMS;
16:00:49 276  
16:00:49 277  /******************************************************************************/
16:00:49 278  
16:00:49 279  PROCEDURE GET_LINE_ITEM_TAXES (
16:00:49 280  /*
16:00:49 281  Throws exceptions:
16:00:49 282  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 283  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 284  */
16:00:49 285  	in_line_item_id IN  NUMBER,
16:00:49 286  	out_result_set	OUT SYS_REFCURSOR
16:00:49 287  ) AS
16:00:49 288  -- VARIABLES
16:00:49 289  SPROC_NAME	CONSTANT VARCHAR2(19) := 'GET_LINE_ITEM_TAXES';
16:00:49 290  temp_line_item_id NUMBER;
16:00:49 291  -- EXCEPTIONS
16:00:49 292  BAD_LINE_ITEM_ID EXCEPTION;
16:00:49 293  BEGIN
16:00:49 294  
16:00:49 295  	-- Check that line item exists
16:00:49 296  	BEGIN
16:00:49 297  	  SELECT
16:00:49 298  	    LINE_ITEM.ID into temp_line_item_id
16:00:49 299  	  FROM
16:00:49 300  	    LINE_ITEM
16:00:49 301  	  WHERE
16:00:49 302  	    LINE_ITEM.ID = in_line_item_id;
16:00:49 303  	  EXCEPTION
16:00:49 304  	    WHEN NO_DATA_FOUND THEN
16:00:49 305  	      RAISE BAD_LINE_ITEM_ID;
16:00:49 306  	END;
16:00:49 307  
16:00:49 308  	-- Get all taxes for given line item
16:00:49 309  	OPEN out_result_set FOR
16:00:49 310  	SELECT
16:00:49 311  	  TAX.ID,
16:00:49 312  	  TAX.CALCULATED_AMOUNT,
16:00:49 313  	  TAX.CREATE_DATE,
16:00:49 314  	  TAX.CREATED_BY,
16:00:49 315  	  TAX.EFFECTIVE_RATE,
16:00:49 316  	  TAX.EXT_RESULT,
16:00:49 317  	  TAX.EXT_TAX_TYPE,
16:00:49 318  	  TAX.IMPOSITION,
16:00:49 319  	  TAX.IMPOSITION_TYPE,
16:00:49 320  	  TAX.JURISDICTION_ID,
16:00:49 321  	  TAX.JURISDICTION_LEVEL_ID,
16:00:49 322  	  TAX.JURISDICTION_NAME,
16:00:49 323  	  TAX.LINE_ITEM_ID,
16:00:49 324  	  TAX.TAX_RULE_ID,
16:00:49 325  	  TAX.TAX_TYPE_ID,
16:00:49 326  	  TAX.TAXABLE_AMOUNT
16:00:49 327  	FROM
16:00:49 328  	  TAX
16:00:49 329  	WHERE
16:00:49 330  	  TAX.LINE_ITEM_ID = in_line_item_id;
16:00:49 331  
16:00:49 332  EXCEPTION
16:00:49 333  WHEN BAD_LINE_ITEM_ID THEN
16:00:49 334  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 335  	  SPROC_NAME, 'No such line item');
16:00:49 336  WHEN OTHERS THEN
16:00:49 337  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 338  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 339  END GET_LINE_ITEM_TAXES;
16:00:49 340  
16:00:49 341  -- norlov: #38770
16:00:49 342  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:00:49 343  /*
16:00:49 344  Throws exceptions:
16:00:49 345  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 346  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 347  */
16:00:49 348  	in_line_item_id IN  NUMBER,
16:00:49 349  	out_result_set	OUT SYS_REFCURSOR
16:00:49 350  ) AS
16:00:49 351  -- VARIABLES
16:00:49 352  SPROC_NAME	CONSTANT VARCHAR2(23) := 'GET_LINE_ITEM_DISCOUNTS';
16:00:49 353  temp_line_item_id NUMBER;
16:00:49 354  -- EXCEPTIONS
16:00:49 355  BAD_LINE_ITEM_ID EXCEPTION;
16:00:49 356  BEGIN
16:00:49 357  
16:00:49 358  	-- Check that line item exists
16:00:49 359  	BEGIN
16:00:49 360  	  SELECT
16:00:49 361  	    LINE_ITEM.ID into temp_line_item_id
16:00:49 362  	  FROM
16:00:49 363  	    LINE_ITEM
16:00:49 364  	  WHERE
16:00:49 365  	    LINE_ITEM.ID = in_line_item_id;
16:00:49 366  	  EXCEPTION
16:00:49 367  	    WHEN NO_DATA_FOUND THEN
16:00:49 368  	      RAISE BAD_LINE_ITEM_ID;
16:00:49 369  	END;
16:00:49 370  
16:00:49 371  	-- Get all discounts for given line item
16:00:49 372  	OPEN out_result_set FOR
16:00:49 373  	SELECT
16:00:49 374  	  DISCOUNT.FIXED_AMOUNT,
16:00:49 375  	  DISCOUNT.NAME,
16:00:49 376  	  DISCOUNT.ID,
16:00:49 377  	  DISCOUNT.PERCENT_AMOUNT
16:00:49 378  	FROM
16:00:49 379  	  DISCOUNT_LINE_ITEM
16:00:49 380  	  INNER JOIN DISCOUNT ON DISCOUNT_LINE_ITEM.DISCOUNT_ID = DISCOUNT.ID
16:00:49 381  	WHERE
16:00:49 382  	  DISCOUNT_LINE_ITEM.LINE_ITEM_ID = in_line_item_id;
16:00:49 383  
16:00:49 384  EXCEPTION
16:00:49 385  WHEN BAD_LINE_ITEM_ID THEN
16:00:49 386  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 387  	  SPROC_NAME, 'No such line item');
16:00:49 388  WHEN OTHERS THEN
16:00:49 389  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 390  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 391  END GET_LINE_ITEM_DISCOUNTS;
16:00:49 392  /******************************************************************************/
16:00:49 393  
16:00:49 394  PROCEDURE CALCULATE_LINE_ITEM_AMOUNT (
16:00:49 395  /*
16:00:49 396  Throws exceptions:
16:00:49 397  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 398  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 399  */
16:00:49 400  	in_line_item_id     IN	NUMBER,
16:00:49 401  	out_amount	    OUT NUMBER
16:00:49 402  ) AS
16:00:49 403  -- VARIABLES
16:00:49 404  SPROC_NAME CONSTANT VARCHAR2(26) := 'CALCULATE_LINE_ITEM_AMOUNT';
16:00:49 405  -- EXCEPTIONS
16:00:49 406  BAD_LINE_ITEM_ID EXCEPTION;
16:00:49 407  BEGIN
16:00:49 408  
16:00:49 409  	BEGIN
16:00:49 410  	  SELECT
16:00:49 411  	    LINE_ITEM.AMOUNT into out_amount
16:00:49 412  	  FROM
16:00:49 413  	    LINE_ITEM
16:00:49 414  	  WHERE
16:00:49 415  	    LINE_ITEM.ID = in_line_item_id;
16:00:49 416  	  EXCEPTION
16:00:49 417  	    WHEN NO_DATA_FOUND THEN
16:00:49 418  	      RAISE BAD_LINE_ITEM_ID;
16:00:49 419  	END;
16:00:49 420  
16:00:49 421  EXCEPTION
16:00:49 422  WHEN BAD_LINE_ITEM_ID THEN
16:00:49 423  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 424  	  SPROC_NAME, 'No such line item');
16:00:49 425  WHEN OTHERS THEN
16:00:49 426  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 427  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 428  END CALCULATE_LINE_ITEM_AMOUNT;
16:00:49 429  
16:00:49 430  /******************************************************************************/
16:00:49 431  
16:00:49 432  FUNCTION F_CALCULATE_LINE_ITEM_AMOUNT (
16:00:49 433  /*
16:00:49 434  Throws exceptions:
16:00:49 435  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:49 436  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:49 437  */
16:00:49 438  	in_line_item_id     IN	NUMBER
16:00:49 439  ) RETURN NUMBER AS
16:00:49 440  var_invoice_amount NUMBER(10, 2);
16:00:49 441  BEGIN
16:00:49 442  	PROCS_LINE_ITEMS_V20.CALCULATE_LINE_ITEM_AMOUNT(in_line_item_id, var_invoice_amount);
16:00:49 443  	RETURN var_invoice_amount;
16:00:49 444  END F_CALCULATE_LINE_ITEM_AMOUNT;
16:00:49 445  
16:00:49 446  END PROCS_LINE_ITEMS_V20;
16:00:49 447  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:00:49 SQL> 
16:00:49 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LOCKING_V20" AS
16:00:49   2  
16:00:49   3  /*
16:00:49   4  PROCEDURE INITIALIZE_SYSTEM AS
16:00:49   5  SPROC_NAME CONSTANT VARCHAR2(17) := 'INITIALIZE_SYSTEM';
16:00:49   6  -- VARIABLES
16:00:49   7  var_account_ids SYS_REFCURSOR;
16:00:49   8  var_account_id  NUMBER;
16:00:49   9  BEGIN
16:00:49  10  
16:00:49  11  	OPEN var_account_ids FOR
16:00:49  12  	SELECT
16:00:49  13  	  ACCOUNT.ID
16:00:49  14  	FROM
16:00:49  15  	  ACCOUNT;
16:00:49  16  
16:00:49  17  	LOOP
16:00:49  18  	  FETCH var_account_ids into var_account_id;
16:00:49  19  	  EXIT WHEN var_account_ids%NOTFOUND;
16:00:49  20  	  BEGIN
16:00:49  21  	    INITIALIZE_ACCOUNT(var_account_id);
16:00:49  22  	    EXCEPTION
16:00:49  23  	      WHEN OTHERS THEN
16:00:49  24  		NULL;
16:00:49  25  	  END;
16:00:49  26  	END LOOP;
16:00:49  27  
16:00:49  28  END INITIALIZE_SYSTEM;
16:00:49  29  
16:00:49  30  PROCEDURE INITIALIZE_ACCOUNT (
16:00:49  31  	in_account_id IN NUMBER
16:00:49  32  ) AS
16:00:49  33  SPROC_NAME CONSTANT VARCHAR2(18) := 'INITIALIZE_ACCOUNT';
16:00:49  34  -- EXCEPTIONS
16:00:49  35  ACCOUNT_ALREADY_INITIALIZED EXCEPTION;
16:00:49  36  BEGIN
16:00:49  37  
16:00:49  38  	BEGIN
16:00:49  39  	  INSERT INTO ACCOUNT_LOCK(
16:00:49  40  	    ACCOUNT_ID,
16:00:49  41  	    LOCK_KEY,
16:00:49  42  	    END_DATE,
16:00:49  43  	    CREATED_BY,
16:00:49  44  	    REASON
16:00:49  45  	  ) VALUES (
16:00:49  46  	    in_account_id,
16:00:49  47  	    'initialization key',
16:00:49  48  	    SYSDATE,
16:00:49  49  	    'system',
16:00:49  50  	    'initialization'
16:00:49  51  	  );
16:00:49  52  	  EXCEPTION
16:00:49  53  	    WHEN DUP_VAL_ON_INDEX THEN
16:00:49  54  	      RAISE ACCOUNT_ALREADY_INITIALIZED;
16:00:49  55  	END;
16:00:49  56  
16:00:49  57  EXCEPTION
16:00:49  58  WHEN ACCOUNT_ALREADY_INITIALIZED THEN
16:00:49  59  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:49  60  	  SPROC_NAME, 'Account already initialized');
16:00:49  61  WHEN OTHERS THEN
16:00:49  62  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49  63  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49  64  END;
16:00:49  65  
16:00:49  66  PROCEDURE INITIALIZE_GROUP (
16:00:49  67  	in_group_id IN NUMBER
16:00:49  68  ) AS
16:00:49  69  SPROC_NAME CONSTANT VARCHAR2(16) := 'INITIALIZE_GROUP';
16:00:49  70  -- VARIABLES
16:00:49  71  var_account_id NUMBER;
16:00:49  72  -- EXCEPTIONS
16:00:49  73  BAD_GROUP_ID		EXCEPTION;
16:00:49  74  GROUP_ALREADY_INITIALIZED EXCEPTION;
16:00:49  75  BEGIN
16:00:49  76  
16:00:49  77  	BEGIN
16:00:49  78  	  SELECT
16:00:49  79  	    ACCOUNT.ID into var_account_id
16:00:49  80  	  FROM
16:00:49  81  	    ACCOUNT
16:00:49  82  	  WHERE
16:00:49  83  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:49  84  	  EXCEPTION
16:00:49  85  	    WHEN NO_DATA_FOUND THEN
16:00:49  86  	     RAISE BAD_GROUP_ID;
16:00:49  87  	END;
16:00:49  88  
16:00:49  89  	BEGIN
16:00:49  90  	  INSERT INTO ACCOUNT_LOCK (
16:00:49  91  	    ACCOUNT_ID,
16:00:49  92  	    LOCK_KEY,
16:00:49  93  	    END_DATE,
16:00:49  94  	    CREATED_BY,
16:00:49  95  	    REASON
16:00:49  96  	  ) VALUES (
16:00:49  97  	    var_account_id,
16:00:49  98  	    'initialization key',
16:00:49  99  	    SYSDATE,
16:00:49 100  	    'system',
16:00:49 101  	    'initialization'
16:00:49 102  	  );
16:00:49 103  	  EXCEPTION
16:00:49 104  	    WHEN DUP_VAL_ON_INDEX THEN
16:00:49 105  	      RAISE GROUP_ALREADY_INITIALIZED;
16:00:49 106  	END;
16:00:49 107  
16:00:49 108  EXCEPTION
16:00:49 109  WHEN BAD_GROUP_ID THEN
16:00:49 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 111  	  SPROC_NAME, 'No such account with given group id');
16:00:49 112  WHEN GROUP_ALREADY_INITIALIZED THEN
16:00:49 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:49 114  	  SPROC_NAME, 'Group already initialized');
16:00:49 115  WHEN OTHERS THEN
16:00:49 116  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 117  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 118  END INITIALIZE_GROUP;
16:00:49 119  */
16:00:49 120  
16:00:49 121  PROCEDURE LOCK_ACCOUNT (
16:00:49 122  	in_group_id    IN NUMBER,
16:00:49 123  	in_lock_key    IN VARCHAR2,
16:00:49 124  	in_seconds_num IN NUMBER,
16:00:49 125  	in_created_by  IN VARCHAR2,
16:00:49 126  	in_reason      IN VARCHAR2
16:00:49 127  ) AS
16:00:49 128  SPROC_NAME CONSTANT VARCHAR2(12) := 'LOCK_ACCOUNT';
16:00:49 129  -- CONSTANTS
16:00:49 130  one_second_interval CONSTANT INTERVAL DAY TO SECOND := INTERVAL '0 00:00:01' DAY TO SECOND;
16:00:49 131  -- VARIABLES
16:00:49 132  var_account_id NUMBER;
16:00:49 133  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:49 134  var_date		DATE := SYSDATE;
16:00:49 135  var_lock_end_date DATE;
16:00:49 136  -- EXCEPTIONS
16:00:49 137  BAD_GROUP_ID   EXCEPTION;
16:00:49 138  ALREADY_LOCKED EXCEPTION;
16:00:49 139  BEGIN
16:00:49 140  
16:00:49 141  	BEGIN
16:00:49 142  	  SELECT
16:00:49 143  	    ACCOUNT.ID into var_account_id
16:00:49 144  	  FROM
16:00:49 145  	    ACCOUNT
16:00:49 146  	  WHERE
16:00:49 147  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:49 148  	  EXCEPTION
16:00:49 149  	    WHEN NO_DATA_FOUND THEN
16:00:49 150  	      RAISE BAD_GROUP_ID;
16:00:49 151  	END;
16:00:49 152  
16:00:49 153  	var_lock_end_date := var_date + ( in_seconds_num * one_second_interval );
16:00:49 154  
16:00:49 155  	BEGIN
16:00:49 156  
16:00:49 157  	  INSERT INTO ACCOUNT_LOCK (
16:00:49 158  	    ACCOUNT_ID,
16:00:49 159  	    LOCK_KEY,
16:00:49 160  	    END_DATE,
16:00:49 161  	    CREATED_BY,
16:00:49 162  	    REASON
16:00:49 163  	  ) VALUES (
16:00:49 164  	    var_account_id,
16:00:49 165  	    in_lock_key,
16:00:49 166  	    var_lock_end_date,
16:00:49 167  	    in_created_by,
16:00:49 168  	    in_reason
16:00:49 169  	  );
16:00:49 170  
16:00:49 171  	  EXCEPTION
16:00:49 172  	    WHEN DUP_VAL_ON_INDEX THEN
16:00:49 173  	      -- This rows was created before... I will try to update it
16:00:49 174  	      BEGIN
16:00:49 175  
16:00:49 176  		UPDATE
16:00:49 177  		  ACCOUNT_LOCK
16:00:49 178  		SET
16:00:49 179  		  ACCOUNT_LOCK.LOCK_KEY = in_lock_key,
16:00:49 180  		  ACCOUNT_LOCK.END_DATE = var_lock_end_date,
16:00:49 181  		  ACCOUNT_LOCK.CREATED_BY = in_created_by,
16:00:49 182  		  ACCOUNT_LOCK.REASON = in_reason
16:00:49 183  		WHERE
16:00:49 184  		  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
16:00:49 185  		  AND ACCOUNT_LOCK.END_DATE <= var_date;
16:00:49 186  
16:00:49 187  		IF SQL%ROWCOUNT = 0 THEN
16:00:49 188  		  RAISE ALREADY_LOCKED;
16:00:49 189  		END IF;
16:00:49 190  
16:00:49 191  	      END;
16:00:49 192  	END;
16:00:49 193  
16:00:49 194  EXCEPTION
16:00:49 195  WHEN BAD_GROUP_ID THEN
16:00:49 196  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 197  	  SPROC_NAME, 'No such group id');
16:00:49 198  WHEN ALREADY_LOCKED THEN
16:00:49 199  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:49 200  	  SPROC_NAME, 'Account already locked');
16:00:49 201  WHEN OTHERS THEN
16:00:49 202  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 203  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:49 204  END LOCK_ACCOUNT;
16:00:49 205  
16:00:49 206  /******************************************************************************/
16:00:49 207  
16:00:49 208  PROCEDURE RELEASE_LOCK (
16:00:49 209  	in_group_id IN NUMBER,
16:00:49 210  	in_lock_key IN VARCHAR2
16:00:49 211  ) AS
16:00:49 212  SPROC_NAME CONSTANT VARCHAR2(12) := 'RELEASE_LOCK';
16:00:49 213  -- VARIABLES
16:00:49 214  var_account_id NUMBER;
16:00:49 215  -- arosolovskiy: using data variable instead of direct get data calls (#38860)
16:00:49 216  var_date DATE := SYSDATE;
16:00:49 217  -- EXCEPTIONS
16:00:49 218  BAD_GROUP_ID		EXCEPTION;
16:00:49 219  COULD_NOT_RELEASE_ACCOUNT EXCEPTION;
16:00:49 220  BEGIN
16:00:49 221  
16:00:49 222  	BEGIN
16:00:49 223  	  SELECT
16:00:49 224  	    ACCOUNT.ID into var_account_id
16:00:49 225  	  FROM
16:00:49 226  	    ACCOUNT
16:00:49 227  	  WHERE
16:00:49 228  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:49 229  	  EXCEPTION
16:00:49 230  	    WHEN NO_DATA_FOUND THEN
16:00:49 231  	      RAISE BAD_GROUP_ID;
16:00:49 232  	END;
16:00:49 233  
16:00:49 234  	UPDATE
16:00:49 235  	  ACCOUNT_LOCK
16:00:49 236  	SET
16:00:49 237  	  ACCOUNT_LOCK.END_DATE = var_date
16:00:49 238  	WHERE
16:00:49 239  	  ACCOUNT_LOCK.ACCOUNT_ID = var_account_id
16:00:49 240  	  -- AND ACCOUNT_LOCK.END_DATE > var_date
16:00:49 241  	  AND ACCOUNT_LOCK.LOCK_KEY = in_lock_key;
16:00:49 242  
16:00:49 243  	IF SQL%ROWCOUNT = 0 THEN
16:00:49 244  	  RAISE COULD_NOT_RELEASE_ACCOUNT;
16:00:49 245  	END IF;
16:00:49 246  
16:00:49 247  EXCEPTION
16:00:49 248  WHEN BAD_GROUP_ID THEN
16:00:49 249  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:49 250  	  SPROC_NAME, 'No such group id');
16:00:49 251  WHEN COULD_NOT_RELEASE_ACCOUNT THEN
16:00:49 252  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:49 253  	  SPROC_NAME, 'Could not release account. Maybe you are not owner of this lock, or lock is expired');
16:00:49 254  WHEN OTHERS THEN
16:00:49 255  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:49 256  	  SPROC_NAME, 'Unknown error');
16:00:49 257  END RELEASE_LOCK;
16:00:49 258  
16:00:49 259  END PROCS_LOCKING_V20;
16:00:49 260  .
16:00:49 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_OFFER_CHAIN_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE OC_ID_BY_ITUNES_PRODUCT_ID(
16:00:50   4  	in_itunes_product_id IN  OFFER_CHAIN.ITUNES_PRODUCT_ID%TYPE,
16:00:50   5  	out_data	     OUT OFFER_CHAIN.ID%TYPE
16:00:50   6  ) AS
16:00:50   7  	SPROC_NAME CONSTANT VARCHAR2(32) := 'OC_ID_BY_ITUNES_PRODUCT_ID';
16:00:50   8  BEGIN
16:00:50   9  	SELECT
16:00:50  10  	  ID INTO out_data
16:00:50  11  	FROM
16:00:50  12  	  OFFER_CHAIN
16:00:50  13  	WHERE
16:00:50  14  	  ITUNES_PRODUCT_ID = in_itunes_product_id;
16:00:50  15  EXCEPTION
16:00:50  16  	WHEN NO_DATA_FOUND THEN NULL;
16:00:50  17  END OC_ID_BY_ITUNES_PRODUCT_ID;
16:00:50  18  
16:00:50  19  PROCEDURE OFFER_CHAIN_ID_BY_AMAZON_SKU(
16:00:50  20  	in_amazon_appstore_sku IN  OFFER_CHAIN.AMAZON_APPSTORE_SKU%TYPE,
16:00:50  21  	out_data	       OUT OFFER_CHAIN.ID%TYPE
16:00:50  22  ) AS
16:00:50  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'OFFER_CHAIN_ID_BY_AMAZON_SKU';
16:00:50  24  BEGIN
16:00:50  25  	SELECT
16:00:50  26  	  ID INTO out_data
16:00:50  27  	FROM
16:00:50  28  	  OFFER_CHAIN
16:00:50  29  	WHERE
16:00:50  30  	  AMAZON_APPSTORE_SKU = in_amazon_appstore_sku;
16:00:50  31  EXCEPTION
16:00:50  32  	WHEN NO_DATA_FOUND THEN NULL;
16:00:50  33  END OFFER_CHAIN_ID_BY_AMAZON_SKU;
16:00:50  34  
16:00:50  35  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:50  36  	in_offer_chain_id IN   NUMBER,
16:00:50  37  	out_result_set	  OUT  SYS_REFCURSOR
16:00:50  38  ) AS
16:00:50  39  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OFFER_CHAIN_BY_ID';
16:00:50  40  BEGIN
16:00:50  41  
16:00:50  42  	-- Get offer chain informations
16:00:50  43  	OPEN out_result_set FOR
16:00:50  44  	  SELECT
16:00:50  45  	    OC.ID,
16:00:50  46  	    OC.NAME,
16:00:50  47  	    OC.ADOPTABILITY_WINDOW_START_DATE,
16:00:50  48  	    OC.ADOPTABILITY_WINDOW_END_DATE,
16:00:50  49  	    OC.DESCRIPTION,
16:00:50  50  	    OC.IS_GIFT_CERTIFICATE,
16:00:50  51  	    OC.OFFER_CHAIN_STATUS_ID,
16:00:50  52  	    OC.PRODUCT_URI,
16:00:50  53  	    OC.BILLING_SOURCE_ID,
16:00:50  54  	    OC.VENDOR_SOURCE_ID,
16:00:50  55  	    OC.GROUP_ACCOUNT_TYPE_ID,
16:00:50  56  	    DECODE(OC.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED,
16:00:50  57  	    OC.AMAZON_APPSTORE_SKU,
16:00:50  58  	    OC.ITUNES_PRODUCT_ID
16:00:50  59  	  FROM
16:00:50  60  	    OFFER_CHAIN OC
16:00:50  61  	  WHERE
16:00:50  62  	    OC.ID = in_offer_chain_id
16:00:50  63  	    AND ROWNUM <= 1;
16:00:50  64  
16:00:50  65  EXCEPTION
16:00:50  66  WHEN OTHERS THEN
16:00:50  67  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50  68  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50  69  END GET_OFFER_CHAIN_BY_ID;
16:00:50  70  
16:00:50  71  PROCEDURE GET_OFFER_CHAINS_BY_IDS (
16:00:50  72  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:50  73  	out_result_set	   OUT SYS_REFCURSOR
16:00:50  74  ) AS
16:00:50  75  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_BY_IDS';
16:00:50  76  -- EXCEPTIONS
16:00:50  77  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:00:50  78  BEGIN
16:00:50  79  
16:00:50  80  	IF (in_offer_chain_ids IS NULL) THEN
16:00:50  81  	  RAISE BAD_OFFER_CHAINS_IDS;
16:00:50  82  	END IF;
16:00:50  83  
16:00:50  84  	OPEN out_result_set FOR
16:00:50  85  	SELECT
16:00:50  86  	  OCH.ID,
16:00:50  87  	  OCH.NAME,
16:00:50  88  	  OCH.DESCRIPTION,
16:00:50  89  	  OCH.OFFER_CHAIN_STATUS_ID,
16:00:50  90  	  OCH.ADOPTABILITY_WINDOW_START_DATE,
16:00:50  91  	  OCH.ADOPTABILITY_WINDOW_END_DATE,
16:00:50  92  	  OCH.IS_GIFT_CERTIFICATE,
16:00:50  93  	  PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_CHAIN_AMOUNT(OCH.ID) AS PRICE,
16:00:50  94  	  PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(OCH.ID) AS IS_CANCELABLE,
16:00:50  95  	  OCH.VENDOR_SOURCE_ID,
16:00:50  96  	  DECODE(OCH.IS_ADDRESS_REQUIRED,1,'true','false') IS_ADDRESS_REQUIRED
16:00:50  97  	FROM
16:00:50  98  	  OFFER_CHAIN OCH
16:00:50  99  	WHERE
16:00:50 100  	  OCH.ID IN (SELECT * FROM TABLE(in_offer_chain_ids));
16:00:50 101  
16:00:50 102  EXCEPTION
16:00:50 103  WHEN BAD_OFFER_CHAINS_IDS THEN
16:00:50 104  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 105  	  SPROC_NAME, 'Invalid offer chains ids');
16:00:50 106  WHEN OTHERS THEN
16:00:50 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 109  END GET_OFFER_CHAINS_BY_IDS;
16:00:50 110  
16:00:50 111  PROCEDURE GET_OFFER_CHAINS_PRODUCTS (
16:00:50 112  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:50 113  	out_result_set	   OUT SYS_REFCURSOR
16:00:50 114  ) AS
16:00:50 115  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_OFFER_CHAINS_PRODUCTS';
16:00:50 116  -- EXCEPTIONS
16:00:50 117  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:00:50 118  BEGIN
16:00:50 119  
16:00:50 120  	IF (in_offer_chain_ids IS NULL) THEN
16:00:50 121  	  RAISE BAD_OFFER_CHAINS_IDS;
16:00:50 122  	END IF;
16:00:50 123  
16:00:50 124  	OPEN out_result_set FOR
16:00:50 125  	SELECT
16:00:50 126  	  OOCH.OFFER_CHAIN_ID,
16:00:50 127  	  PO.PRODUCT_ID
16:00:50 128  	FROM
16:00:50 129  	  PRODUCT_OFFERING PO
16:00:50 130  	  INNER JOIN OFFER_PRODUCT_OFFERING OPO ON OPO.PRODUCT_OFFERING_ID = PO.ID
16:00:50 131  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = OPO.OFFER_ID
16:00:50 132  	WHERE
16:00:50 133  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
16:00:50 134  
16:00:50 135  EXCEPTION
16:00:50 136  WHEN BAD_OFFER_CHAINS_IDS THEN
16:00:50 137  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 138  	  SPROC_NAME, 'Invalid offer chains ids');
16:00:50 139  WHEN OTHERS THEN
16:00:50 140  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 141  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 142  END GET_OFFER_CHAINS_PRODUCTS;
16:00:50 143  
16:00:50 144  PROCEDURE GET_OFFER_CHAINS_OFFERS (
16:00:50 145  	in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:50 146  	out_result_set	   OUT SYS_REFCURSOR
16:00:50 147  ) AS
16:00:50 148  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_OFFER_CHAINS_OFFERS';
16:00:50 149  -- EXCEPTIONS
16:00:50 150  BAD_OFFER_CHAINS_IDS EXCEPTION;
16:00:50 151  BEGIN
16:00:50 152  
16:00:50 153  	IF (in_offer_chain_ids IS NULL) THEN
16:00:50 154  	  RAISE BAD_OFFER_CHAINS_IDS;
16:00:50 155  	END IF;
16:00:50 156  
16:00:50 157  	OPEN out_result_set FOR
16:00:50 158  	SELECT
16:00:50 159  	  OOCH.OFFER_CHAIN_ID,
16:00:50 160  	  OOCH.OFFER_ID,
16:00:50 161  	  OOCH.INDEX_VALUE,
16:00:50 162  	  OOCH.NUM_RECURRENCES,
16:00:50 163  	  O.ENTITLEMENT_DURATION,
16:00:50 164  	  PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_AMOUNT(OOCH.OFFER_ID) AS PRICE
16:00:50 165  	FROM
16:00:50 166  	  OFFER O
16:00:50 167  	  INNER JOIN OFFER_OFFER_CHAIN OOCH ON OOCH.OFFER_ID = O.ID
16:00:50 168  	WHERE
16:00:50 169  	  OOCH.OFFER_CHAIN_ID IN (SELECT * FROM TABLE (in_offer_chain_ids));
16:00:50 170  
16:00:50 171  EXCEPTION
16:00:50 172  WHEN BAD_OFFER_CHAINS_IDS THEN
16:00:50 173  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 174  	  SPROC_NAME, 'Invalid offer chains ids');
16:00:50 175  WHEN OTHERS THEN
16:00:50 176  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 177  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 178  END GET_OFFER_CHAINS_OFFERS;
16:00:50 179  
16:00:50 180  PROCEDURE GET_OFFER_CHAINS_BY_PRODUCT (
16:00:50 181  	in_product_id  IN  NUMBER,
16:00:50 182  	out_result_set OUT SYS_REFCURSOR
16:00:50 183  )AS
16:00:50 184  -- VARIBLES
16:00:50 185  SPROC_NAME      CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAINS_BY_PRODUCT';
16:00:50 186  temp_product_id NUMBER;
16:00:50 187  
16:00:50 188  -- EXCEPTIONS
16:00:50 189  BAD_PRODUCT_ID EXCEPTION;
16:00:50 190  BEGIN
16:00:50 191  
16:00:50 192  	-- Check that given product exists
16:00:50 193  	BEGIN
16:00:50 194  	  SELECT
16:00:50 195  	    PRODUCT.ID into temp_product_id
16:00:50 196  	  FROM
16:00:50 197  	    PRODUCT
16:00:50 198  	  WHERE
16:00:50 199  	    PRODUCT.ID = in_product_id;
16:00:50 200  	  EXCEPTION
16:00:50 201  	    WHEN NO_DATA_FOUND THEN
16:00:50 202  	      RAISE BAD_PRODUCT_ID;
16:00:50 203  	END;
16:00:50 204  
16:00:50 205  	-- Select all offer chains that contains given product
16:00:50 206  	OPEN out_result_set FOR
16:00:50 207  	SELECT
16:00:50 208  	  OFFER_CHAIN.ID,
16:00:50 209  	  OFFER_CHAIN.NAME,
16:00:50 210  	  OFFER_CHAIN.DESCRIPTION,
16:00:50 211  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
16:00:50 212  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
16:00:50 213  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:00:50 214  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE
16:00:50 215  	FROM
16:00:50 216  	  OFFER_CHAIN
16:00:50 217  	WHERE
16:00:50 218  	  OFFER_CHAIN.ID IN (
16:00:50 219  	    SELECT DISTINCT
16:00:50 220  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
16:00:50 221  	    FROM
16:00:50 222  	      OFFER_OFFER_CHAIN
16:00:50 223  	    WHERE
16:00:50 224  	      OFFER_OFFER_CHAIN.OFFER_ID IN (
16:00:50 225  		SELECT DISTINCT
16:00:50 226  		  OFFER_PRODUCT_OFFERING.OFFER_ID
16:00:50 227  		FROM
16:00:50 228  		  OFFER_PRODUCT_OFFERING
16:00:50 229  		WHERE
16:00:50 230  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_id
16:00:50 231  	      )
16:00:50 232  	  );
16:00:50 233  
16:00:50 234  EXCEPTION
16:00:50 235  WHEN BAD_PRODUCT_ID THEN
16:00:50 236  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 237  	  SPROC_NAME, 'No such product');
16:00:50 238  WHEN OTHERS THEN
16:00:50 239  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 240  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 241  END GET_OFFER_CHAINS_BY_PRODUCT;
16:00:50 242  
16:00:50 243  PROCEDURE GET_OFFER_CHAIN_PRICE (
16:00:50 244  	in_offer_chain_id IN NUMBER,
16:00:50 245  	out_price	  OUT NUMBER
16:00:50 246  ) AS
16:00:50 247  -- VARIABLES
16:00:50 248  SPROC_NAME	  CONSTANT VARCHAR2(21) := 'GET_OFFER_CHAIN_PRICE';
16:00:50 249  temp_offer_chain_id NUMBER;
16:00:50 250  
16:00:50 251  -- EXCEPTION
16:00:50 252  BAD_OFFER_CHAIN_ID       EXCEPTION;
16:00:50 253  CAN_NOT_CALCULATE_AMOUNT EXCEPTION;
16:00:50 254  EXCEPTION_MESSAGE        VARCHAR2(1024);
16:00:50 255  BEGIN
16:00:50 256  
16:00:50 257  	-- Check that given offer chain exists
16:00:50 258  	BEGIN
16:00:50 259  	  SELECT
16:00:50 260  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 261  	  FROM
16:00:50 262  	    OFFER_CHAIN
16:00:50 263  	  WHERE
16:00:50 264  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 265  
16:00:50 266  	  EXCEPTION
16:00:50 267  	  WHEN NO_DATA_FOUND THEN
16:00:50 268  	    RAISE BAD_OFFER_CHAIN_ID;
16:00:50 269  	END;
16:00:50 270  
16:00:50 271  	BEGIN
16:00:50 272  	  out_price := CALCULATE_OFFER_CHAIN_AMOUNT(in_offer_chain_id);
16:00:50 273  	  EXCEPTION
16:00:50 274  	    WHEN OTHERS THEN
16:00:50 275  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 276  	      RAISE CAN_NOT_CALCULATE_AMOUNT;
16:00:50 277  	END;
16:00:50 278  
16:00:50 279  EXCEPTION
16:00:50 280  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 281  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 282  	  SPROC_NAME, 'Bad offer chain id');
16:00:50 283  WHEN CAN_NOT_CALCULATE_AMOUNT THEN
16:00:50 284  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 285  	  SPROC_NAME, 'Caould not calculate offer chain amount', EXCEPTION_MESSAGE);
16:00:50 286  WHEN OTHERS THEN
16:00:50 287  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 288  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 289  END GET_OFFER_CHAIN_PRICE;
16:00:50 290  
16:00:50 291  PROCEDURE GET_FIRST_OFFER(
16:00:50 292  	in_offer_chain_id IN  NUMBER,
16:00:50 293  	out_offer_id	  OUT NUMBER
16:00:50 294  ) AS
16:00:50 295  SPROC_NAME CONSTANT VARCHAR2(15) := 'GET_FIRST_OFFER';
16:00:50 296  BEGIN
16:00:50 297  	-- Seect first offer in offer chain
16:00:50 298  	SELECT
16:00:50 299  	  OFFER_ID into out_offer_id
16:00:50 300  	FROM (
16:00:50 301  	  SELECT
16:00:50 302  	    OFFER_OFFER_CHAIN.OFFER_ID
16:00:50 303  	  FROM
16:00:50 304  	    OFFER_OFFER_CHAIN
16:00:50 305  	  WHERE
16:00:50 306  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 307  	  ORDER BY
16:00:50 308  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:00:50 309  	)
16:00:50 310  	WHERE
16:00:50 311  	  ROWNUM <= 1;
16:00:50 312  
16:00:50 313  EXCEPTION
16:00:50 314  WHEN NO_DATA_FOUND THEN
16:00:50 315  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 316  	  SPROC_NAME, 'No such offer chain');
16:00:50 317  WHEN OTHERS THEN
16:00:50 318  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 320  END GET_FIRST_OFFER;
16:00:50 321  
16:00:50 322  PROCEDURE GET_ACTIVE_OFFER_CHAINS (
16:00:50 323  	out_result_set OUT SYS_REFCURSOR
16:00:50 324  ) AS
16:00:50 325  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_OFFER_CHAINS';
16:00:50 326  BEGIN
16:00:50 327  	OPEN out_result_set FOR
16:00:50 328  	SELECT
16:00:50 329  	  OFFER_CHAIN.ID,
16:00:50 330  	  OFFER_CHAIN.NAME,
16:00:50 331  	  OFFER_CHAIN.DESCRIPTION,
16:00:50 332  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_START_DATE,
16:00:50 333  	  OFFER_CHAIN.ADOPTABILITY_WINDOW_END_DATE,
16:00:50 334  	  OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:00:50 335  	  OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:00:50 336  	  PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(OFFER_CHAIN.ID) AS "IS_CANCELABLE",
16:00:50 337  	  PRODUCT_OFFERING.PRODUCT_ID
16:00:50 338  	FROM
16:00:50 339  	  OFFER_CHAIN,
16:00:50 340  	  OFFER_OFFER_CHAIN,
16:00:50 341  	  OFFER_PRODUCT_OFFERING,
16:00:50 342  	  PRODUCT_OFFERING
16:00:50 343  	WHERE
16:00:50 344  	  OFFER_CHAIN.ID = OFFER_OFFER_CHAIN.OFFER_CHAIN_ID
16:00:50 345  	  and OFFER_OFFER_CHAIN.OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:00:50 346  	  and OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50 347  	  and OFFER_CHAIN.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE;
16:00:50 348  
16:00:50 349  EXCEPTION
16:00:50 350  WHEN OTHERS THEN
16:00:50 351  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 352  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 353  END GET_ACTIVE_OFFER_CHAINS;
16:00:50 354  
16:00:50 355  PROCEDURE GET_OFFER_CHAIN_PRODUCTS (
16:00:50 356  	in_offer_chain_id IN NUMBER,
16:00:50 357  	out_result_set	  OUT SYS_REFCURSOR
16:00:50 358  ) AS
16:00:50 359  -- VARIABLES
16:00:50 360  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_OFFER_CHAIN_PRODUCTS';
16:00:50 361  temp_offer_chain_id NUMBER;
16:00:50 362  
16:00:50 363  -- EXCEPTIONS
16:00:50 364  BAD_OFFER_CHAIN EXCEPTION;
16:00:50 365  BEGIN
16:00:50 366  
16:00:50 367  	-- Check that offer chain exists
16:00:50 368  	BEGIN
16:00:50 369  	  SELECT
16:00:50 370  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 371  	  FROM
16:00:50 372  	    OFFER_CHAIN
16:00:50 373  	  WHERE
16:00:50 374  	    OFFER_CHAIN.ID = in_offer_chain_id
16:00:50 375  	    AND ROWNUM <= 1;
16:00:50 376  
16:00:50 377  	  EXCEPTION
16:00:50 378  	    WHEN OTHERS THEN
16:00:50 379  	      RAISE BAD_OFFER_CHAIN;
16:00:50 380  	END;
16:00:50 381  
16:00:50 382  	-- Select all products for given offer chain
16:00:50 383  	OPEN out_result_set FOR
16:00:50 384  	SELECT DISTINCT
16:00:50 385  	  PRODUCT_OFFERING.PRODUCT_ID
16:00:50 386  	FROM
16:00:50 387  	  PRODUCT_OFFERING
16:00:50 388  	WHERE
16:00:50 389  	  PRODUCT_OFFERING.ID IN (
16:00:50 390  	    SELECT DISTINCT
16:00:50 391  	      OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 392  	    FROM
16:00:50 393  	      OFFER_PRODUCT_OFFERING
16:00:50 394  	    WHERE
16:00:50 395  	      OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:50 396  		SELECT
16:00:50 397  		  OFFER_OFFER_CHAIN.OFFER_ID
16:00:50 398  		FROM
16:00:50 399  		  OFFER_OFFER_CHAIN
16:00:50 400  		WHERE
16:00:50 401  		  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 402  	      )
16:00:50 403  	  );
16:00:50 404  
16:00:50 405  EXCEPTION
16:00:50 406  WHEN BAD_OFFER_CHAIN THEN
16:00:50 407  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 408  	  SPROC_NAME, 'No such offer chain');
16:00:50 409  WHEN OTHERS THEN
16:00:50 410  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 411  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 412  END GET_OFFER_CHAIN_PRODUCTS;
16:00:50 413  
16:00:50 414  FUNCTION CALCULATE_OFFER_CHAIN_END_DATE (
16:00:50 415  	in_offer_chain_id	  IN NUMBER,
16:00:50 416  	in_offer_chain_start_date IN DATE
16:00:50 417  ) RETURN DATE AS
16:00:50 418  -- VARIABLES
16:00:50 419  SPROC_NAME	     CONSTANT VARCHAR2(30) := 'CALCULATE_OFFER_CHAIN_END_DATE';
16:00:50 420  temp_offer_chain_id    NUMBER;
16:00:50 421  var_offer_chain_length NUMBER;
16:00:50 422  var_offer_duration     VARCHAR2(30);
16:00:50 423  var_offer_recurrences  NUMBER;
16:00:50 424  var_end_date	     DATE;
16:00:50 425  
16:00:50 426  var_offer_ym_interval INTERVAL YEAR TO MONTH;
16:00:50 427  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
16:00:50 428  var_offer_years	    NUMBER;
16:00:50 429  var_offer_months	    NUMBER;
16:00:50 430  var_offer_days	    NUMBER;
16:00:50 431  var_infinity_offers_count NUMBER;
16:00:50 432  
16:00:50 433  var_offers_set SYS_REFCURSOR;
16:00:50 434  
16:00:50 435  -- EXCEPTIONS
16:00:50 436  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 437  BEGIN
16:00:50 438  
16:00:50 439  	var_end_date := in_offer_chain_start_date;
16:00:50 440  
16:00:50 441  	-- Check that offer chain exists
16:00:50 442  	BEGIN
16:00:50 443  	  SELECT
16:00:50 444  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 445  	  FROM
16:00:50 446  	    OFFER_CHAIN
16:00:50 447  	  WHERE
16:00:50 448  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 449  	  EXCEPTION
16:00:50 450  	    WHEN NO_DATA_FOUND
16:00:50 451  	      THEN RAISE BAD_OFFER_CHAIN_ID;
16:00:50 452  	END;
16:00:50 453  
16:00:50 454  	SELECT
16:00:50 455  	  COUNT(*) into var_infinity_offers_count
16:00:50 456  	FROM
16:00:50 457  	  OFFER_OFFER_CHAIN
16:00:50 458  	WHERE
16:00:50 459  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 460  	  AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V20.OFFER_REC_INFINITY;
16:00:50 461  
16:00:50 462  	IF var_infinity_offers_count > 0 THEN
16:00:50 463  	  -- Offer chain contains offers with infinity num of recurrences
16:00:50 464  	  RETURN NULL;
16:00:50 465  	END IF;
16:00:50 466  
16:00:50 467  	-- Select offers durations
16:00:50 468  	OPEN var_offers_set FOR
16:00:50 469  	SELECT
16:00:50 470  	  OFFER.ENTITLEMENT_DURATION,
16:00:50 471  	  OFFER_OFFER_CHAIN.NUM_RECURRENCES
16:00:50 472  	FROM
16:00:50 473  	  OFFER_OFFER_CHAIN
16:00:50 474  	  INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 475  	WHERE
16:00:50 476  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id;
16:00:50 477  
16:00:50 478  	-- Calculate sum of offers durations
16:00:50 479  	LOOP
16:00:50 480  	  FETCH var_offers_set INTO var_offer_duration, var_offer_recurrences;
16:00:50 481  	  EXIT WHEN var_offers_set%NOTFOUND;
16:00:50 482  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(var_offer_duration, var_offer_years, var_offer_months, var_offer_days);
16:00:50 483  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
16:00:50 484  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
16:00:50 485  	  var_end_date := var_end_date + ( var_offer_ym_interval * ( var_offer_recurrences + 1) ) + ( var_offer_ds_interval * ( var_offer_recurrences + 1) );
16:00:50 486  	END LOOP;
16:00:50 487  
16:00:50 488  	RETURN var_end_date;
16:00:50 489  
16:00:50 490  EXCEPTION
16:00:50 491  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 492  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 493  	  SPROC_NAME, 'No such offer chain');
16:00:50 494  WHEN OTHERS THEN
16:00:50 495  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 496  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 497  END CALCULATE_OFFER_CHAIN_END_DATE;
16:00:50 498  
16:00:50 499  FUNCTION CALCULATE_OFFER_AMOUNT (
16:00:50 500  	in_offer_id IN NUMBER
16:00:50 501  ) RETURN NUMBER AS
16:00:50 502  -- VARIABLES
16:00:50 503  SPROC_NAME    CONSTANT VARCHAR2(22) := 'CALCULATE_OFFER_AMOUNT';
16:00:50 504  temp_offer_id NUMBER;
16:00:50 505  
16:00:50 506  var_product_offering_set	    SYS_REFCURSOR;
16:00:50 507  var_product_offering_id	    NUMBER;
16:00:50 508  var_product_offering_price    NUMBER(10,6);
16:00:50 509  var_product_offering_t_amount NUMBER(10,6);
16:00:50 510  var_product_offering_quantity NUMBER;
16:00:50 511  
16:00:50 512  var_total_amount NUMBER(10,6);
16:00:50 513  var_final_amount NUMBER(10,2);
16:00:50 514  
16:00:50 515  var_percent_discount NUMBER(10,2);
16:00:50 516  var_fixed_discount NUMBER(10,6);
16:00:50 517  
16:00:50 518  -- EXCEPTIONS
16:00:50 519  BAD_OFFER_ID EXCEPTION;
16:00:50 520  BEGIN
16:00:50 521  
16:00:50 522  	BEGIN
16:00:50 523  	  SELECT
16:00:50 524  	    OFFER.ID into temp_offer_id
16:00:50 525  	  FROM
16:00:50 526  	    OFFER
16:00:50 527  	  WHERE
16:00:50 528  	    OFFER.ID = in_offer_id;
16:00:50 529  	  EXCEPTION
16:00:50 530  	    WHEN NO_DATA_FOUND THEN
16:00:50 531  	      RAISE BAD_OFFER_ID;
16:00:50 532  	END;
16:00:50 533  
16:00:50 534  	OPEN var_product_offering_set FOR
16:00:50 535  	SELECT
16:00:50 536  	  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID,
16:00:50 537  	  PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 538  	  PRODUCT_OFFERING.QUANTITY
16:00:50 539  	FROM
16:00:50 540  	  OFFER_PRODUCT_OFFERING
16:00:50 541  	  INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50 542  	WHERE
16:00:50 543  	  OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:00:50 544  
16:00:50 545  	var_total_amount := 0;
16:00:50 546  
16:00:50 547  	LOOP
16:00:50 548  	  FETCH var_product_offering_set into
16:00:50 549  	    var_product_offering_id,
16:00:50 550  	    var_product_offering_price,
16:00:50 551  	    var_product_offering_quantity;
16:00:50 552  	  EXIT WHEN var_product_offering_set%NOTFOUND;
16:00:50 553  
16:00:50 554  	  SELECT
16:00:50 555  	    SUM(DISCOUNT.FIXED_AMOUNT) into var_fixed_discount
16:00:50 556  	  FROM
16:00:50 557  	    DISCOUNT_PRODUCT_OFFERING
16:00:50 558  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:00:50 559  	  WHERE
16:00:50 560  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:00:50 561  	    AND DISCOUNT.FIXED_AMOUNT IS NOT NULL;
16:00:50 562  
16:00:50 563  	  SELECT
16:00:50 564  	    SUM(DISCOUNT.PERCENT_AMOUNT) into var_percent_discount
16:00:50 565  	  FROM
16:00:50 566  	    DISCOUNT_PRODUCT_OFFERING
16:00:50 567  	    INNER JOIN DISCOUNT ON DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID = DISCOUNT.ID
16:00:50 568  	  WHERE
16:00:50 569  	    DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = var_product_offering_id
16:00:50 570  	    AND DISCOUNT.PERCENT_AMOUNT IS NOT NULL;
16:00:50 571  
16:00:50 572  	  var_product_offering_t_amount := var_product_offering_price * var_product_offering_quantity;
16:00:50 573  
16:00:50 574  	  IF var_percent_discount IS NOT NULL THEN
16:00:50 575  	    var_product_offering_t_amount := var_product_offering_t_amount - ( var_product_offering_t_amount * var_percent_discount / 100 );
16:00:50 576  	  END IF;
16:00:50 577  
16:00:50 578  	  IF var_fixed_discount IS NOT NULL THEN
16:00:50 579  	    var_product_offering_t_amount := var_product_offering_t_amount - var_fixed_discount;
16:00:50 580  	  END IF;
16:00:50 581  
16:00:50 582  	  var_total_amount := var_total_amount + var_product_offering_t_amount;
16:00:50 583  	END LOOP;
16:00:50 584  	var_final_amount := var_total_amount;
16:00:50 585  	RETURN var_final_amount;
16:00:50 586  
16:00:50 587  EXCEPTION
16:00:50 588  WHEN BAD_OFFER_ID THEN
16:00:50 589  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 590  	  SPROC_NAME, 'No such offer');
16:00:50 591  WHEN OTHERS THEN
16:00:50 592  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 593  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 594  END CALCULATE_OFFER_AMOUNT;
16:00:50 595  
16:00:50 596  FUNCTION CALCULATE_OFFER_CHAIN_AMOUNT (
16:00:50 597  	in_offer_chain_id IN NUMBER
16:00:50 598  ) RETURN NUMBER AS
16:00:50 599  -- VARIABLES
16:00:50 600  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_OFFER_CHAIN_AMOUNT';
16:00:50 601  temp_offer_chain_id    NUMBER;
16:00:50 602  var_first_offer_id     NUMBER;
16:00:50 603  -- EXCEPTIONS
16:00:50 604  BAD_OFFER_CHAIN_ID      EXCEPTION;
16:00:50 605  CAN_NOT_GET_FIRST_OFFER EXCEPTION;
16:00:50 606  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:50 607  BEGIN
16:00:50 608  
16:00:50 609  	BEGIN
16:00:50 610  	  SELECT
16:00:50 611  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 612  	  FROM
16:00:50 613  	    OFFER_CHAIN
16:00:50 614  	  WHERE
16:00:50 615  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 616  	  EXCEPTION
16:00:50 617  	    WHEN NO_DATA_FOUND THEN
16:00:50 618  	      RAISE BAD_OFFER_CHAIN_ID;
16:00:50 619  	END;
16:00:50 620  
16:00:50 621  	BEGIN
16:00:50 622  	  PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(
16:00:50 623  	    in_offer_chain_id => in_offer_chain_id,
16:00:50 624  	    out_offer_id      => var_first_offer_id
16:00:50 625  	  );
16:00:50 626  	  EXCEPTION
16:00:50 627  	    WHEN OTHERS THEN
16:00:50 628  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 629  	      RAISE CAN_NOT_GET_FIRST_OFFER;
16:00:50 630  	END;
16:00:50 631  
16:00:50 632  	RETURN CALCULATE_OFFER_AMOUNT(var_first_offer_id);
16:00:50 633  
16:00:50 634  EXCEPTION
16:00:50 635  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 636  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 637  	  SPROC_NAME, 'No such offer chain');
16:00:50 638  WHEN CAN_NOT_GET_FIRST_OFFER THEN
16:00:50 639  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 640  	  SPROC_NAME, 'Could not find first offer', EXCEPTION_MESSAGE);
16:00:50 641  WHEN OTHERS THEN
16:00:50 642  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 643  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 644  END CALCULATE_OFFER_CHAIN_AMOUNT;
16:00:50 645  
16:00:50 646  FUNCTION GET_FIRST_OFFER_INDEX (
16:00:50 647  	in_offer_chain_id IN NUMBER
16:00:50 648  ) RETURN NUMBER AS
16:00:50 649  -- VARIABLES
16:00:50 650  SPROC_NAME	    CONSTANT VARCHAR2(21) := 'GET_FIRST_OFFER_INDEX';
16:00:50 651  var_first_offer_index NUMBER;
16:00:50 652  BEGIN
16:00:50 653  
16:00:50 654  	SELECT
16:00:50 655  	  INDEX_VALUE into var_first_offer_index
16:00:50 656  	FROM (
16:00:50 657  	  SELECT
16:00:50 658  	    OFFER_OFFER_CHAIN.INDEX_VALUE
16:00:50 659  	  FROM
16:00:50 660  	    OFFER_OFFER_CHAIN
16:00:50 661  	  WHERE
16:00:50 662  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 663  	  ORDER BY
16:00:50 664  	    OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:00:50 665  	)
16:00:50 666  	WHERE
16:00:50 667  	  ROWNUM <= 1;
16:00:50 668  
16:00:50 669  	RETURN var_first_offer_index;
16:00:50 670  
16:00:50 671  EXCEPTION
16:00:50 672  WHEN NO_DATA_FOUND THEN
16:00:50 673  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 674  	  SPROC_NAME, 'No such offer chain');
16:00:50 675  WHEN OTHERS THEN
16:00:50 676  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 677  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 678  END GET_FIRST_OFFER_INDEX;
16:00:50 679  
16:00:50 680  FUNCTION GET_NEXT_OFFER_INDEX (
16:00:50 681  	in_offer_chain_id	     IN NUMBER,
16:00:50 682  	in_offer_chain_current_index IN NUMBER
16:00:50 683  ) RETURN NUMBER AS
16:00:50 684  -- VARIABLES
16:00:50 685  SPROC_NAME		     CONSTANT VARCHAR2(20) := 'GET_NEXT_OFFER_INDEX';
16:00:50 686  temp_offer_chain_id	     NUMBER;
16:00:50 687  temp_offer_chain_current_index NUMBER;
16:00:50 688  var_result		     NUMBER;
16:00:50 689  -- EXCEPTIONS
16:00:50 690  BAD_OFFER_CHAIN_ID      EXCEPTION;
16:00:50 691  BAD_CURRENT_INDEX_VALUE EXCEPTION;
16:00:50 692  BEGIN
16:00:50 693  
16:00:50 694  	-- Check that offer chain exists
16:00:50 695  	BEGIN
16:00:50 696  	  SELECT
16:00:50 697  	    OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 698  	  FROM
16:00:50 699  	    OFFER_CHAIN
16:00:50 700  	  WHERE
16:00:50 701  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 702  	  EXCEPTION
16:00:50 703  	    WHEN NO_DATA_FOUND THEN
16:00:50 704  	      RAISE BAD_OFFER_CHAIN_ID;
16:00:50 705  	END;
16:00:50 706  
16:00:50 707  	-- Check that current offer index exists
16:00:50 708  	BEGIN
16:00:50 709  	  SELECT
16:00:50 710  	    OFFER_OFFER_CHAIN.INDEX_VALUE into temp_offer_chain_current_index
16:00:50 711  	  FROM
16:00:50 712  	    OFFER_OFFER_CHAIN
16:00:50 713  	  WHERE
16:00:50 714  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 715  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_current_index
16:00:50 716  	    -- TODO: delete next line
16:00:50 717  	    AND ROWNUM <= 1;
16:00:50 718  	  EXCEPTION
16:00:50 719  	    WHEN NO_DATA_FOUND THEN
16:00:50 720  	      RAISE BAD_CURRENT_INDEX_VALUE;
16:00:50 721  	END;
16:00:50 722  
16:00:50 723  	-- Get next offer index
16:00:50 724  	BEGIN
16:00:50 725  	  SELECT
16:00:50 726  	    INDEX_VALUE into var_result
16:00:50 727  	  FROM (
16:00:50 728  	    SELECT
16:00:50 729  	      OFFER_OFFER_CHAIN.INDEX_VALUE
16:00:50 730  	    FROM
16:00:50 731  	      OFFER_OFFER_CHAIN
16:00:50 732  	    WHERE
16:00:50 733  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 734  	      AND OFFER_OFFER_CHAIN.INDEX_VALUE > in_offer_chain_current_index
16:00:50 735  	    ORDER BY
16:00:50 736  	      OFFER_OFFER_CHAIN.INDEX_VALUE ASC
16:00:50 737  	  )
16:00:50 738  	  WHERE
16:00:50 739  	    ROWNUM <= 1;
16:00:50 740  	  EXCEPTION
16:00:50 741  	    WHEN NO_DATA_FOUND THEN
16:00:50 742  	      var_result := NULL;
16:00:50 743  	END;
16:00:50 744  
16:00:50 745  	RETURN var_result;
16:00:50 746  
16:00:50 747  EXCEPTION
16:00:50 748  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 749  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 750  	  SPROC_NAME, 'No such offer chain');
16:00:50 751  WHEN BAD_CURRENT_INDEX_VALUE THEN
16:00:50 752  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 753  	  SPROC_NAME, 'Bad current index value');
16:00:50 754  WHEN OTHERS THEN
16:00:50 755  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 756  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 757  END GET_NEXT_OFFER_INDEX;
16:00:50 758  
16:00:50 759  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:00:50 760  	in_offer_chain_id	     IN NUMBER,
16:00:50 761  	in_offer_chain_current_index IN NUMBER,
16:00:50 762  	out_next_offer_index	     OUT NUMBER
16:00:50 763  ) AS
16:00:50 764  BEGIN
16:00:50 765  	out_next_offer_index := GET_NEXT_OFFER_INDEX(
16:00:50 766  	  in_offer_chain_id,
16:00:50 767  	  in_offer_chain_current_index
16:00:50 768  	);
16:00:50 769  END P_GET_NEXT_OFFER_INDEX;
16:00:50 770  
16:00:50 771  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:00:50 772  	in_license_id		     IN NUMBER,
16:00:50 773  	in_offer_chain_current_index IN NUMBER,
16:00:50 774  	out_next_offer_index	     OUT NUMBER
16:00:50 775  ) AS
16:00:50 776  -- VARIABLES
16:00:50 777  SPROC_NAME	 CONSTANT VARCHAR2(28) := 'GET_NEXT_OFFER_INDEX_BY_LCNS';
16:00:50 778  var_offer_chain_id NUMBER;
16:00:50 779  -- EXCEPTIONS
16:00:50 780  BAD_LICENSE_ID		   EXCEPTION;
16:00:50 781  CAN_NOT_GET_NEXT_OFFER_INDEX EXCEPTION;
16:00:50 782  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
16:00:50 783  BEGIN
16:00:50 784  
16:00:50 785  	BEGIN
16:00:50 786  	  SELECT
16:00:50 787  	    SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:00:50 788  	  FROM
16:00:50 789  	    SUBSCRIPTION
16:00:50 790  	  WHERE
16:00:50 791  	    SUBSCRIPTION.ID = (
16:00:50 792  	      SELECT
16:00:50 793  		LICENSE.SUBSCRIPTION_ID
16:00:50 794  	      FROM
16:00:50 795  		LICENSE
16:00:50 796  	      WHERE
16:00:50 797  		LICENSE.ID = in_license_id
16:00:50 798  	    );
16:00:50 799  	  EXCEPTION
16:00:50 800  	    WHEN NO_DATA_FOUND THEN
16:00:50 801  	      RAISE BAD_LICENSE_ID;
16:00:50 802  	END;
16:00:50 803  
16:00:50 804  	BEGIN
16:00:50 805  	  out_next_offer_index := GET_NEXT_OFFER_INDEX(
16:00:50 806  	    var_offer_chain_id,
16:00:50 807  	    in_offer_chain_current_index
16:00:50 808  	  );
16:00:50 809  	  EXCEPTION
16:00:50 810  	    WHEN OTHERS THEN
16:00:50 811  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 812  	      RAISE CAN_NOT_GET_NEXT_OFFER_INDEX;
16:00:50 813  	END;
16:00:50 814  
16:00:50 815  EXCEPTION
16:00:50 816  WHEN BAD_LICENSE_ID THEN
16:00:50 817  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 818  	  SPROC_NAME, 'No such license');
16:00:50 819  WHEN CAN_NOT_GET_NEXT_OFFER_INDEX THEN
16:00:50 820  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 821  	  SPROC_NAME, 'Could not get next offer index', EXCEPTION_MESSAGE);
16:00:50 822  WHEN OTHERS THEN
16:00:50 823  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 824  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 825  END GET_NEXT_OFFER_INDEX_BY_LCNS;
16:00:50 826  
16:00:50 827  FUNCTION IS_OFFER_INDEX_EXISTS (
16:00:50 828  	in_offer_chain_id	   IN NUMBER,
16:00:50 829  	in_offer_chain_offer_index IN NUMBER
16:00:50 830  ) RETURN NUMBER AS
16:00:50 831  -- VARIABLES
16:00:50 832  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_OFFER_INDEX_EXISTS';
16:00:50 833  temp_count NUMBER;
16:00:50 834  BEGIN
16:00:50 835  
16:00:50 836  	SELECT
16:00:50 837  	  COUNT(*) into temp_count
16:00:50 838  	FROM
16:00:50 839  	  OFFER_OFFER_CHAIN
16:00:50 840  	WHERE
16:00:50 841  	  OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 842  	  AND OFFER_OFFER_CHAIN.INDEX_VALUE = in_offer_chain_offer_index;
16:00:50 843  
16:00:50 844  	IF temp_count > 0 THEN
16:00:50 845  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 846  	ELSE
16:00:50 847  	  RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 848  	END IF;
16:00:50 849  
16:00:50 850  EXCEPTION
16:00:50 851  WHEN OTHERS THEN
16:00:50 852  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 853  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 854  END IS_OFFER_INDEX_EXISTS;
16:00:50 855  
16:00:50 856  PROCEDURE GET_OFFER_LENGTH (
16:00:50 857  	in_offer_id IN NUMBER,
16:00:50 858  	out_years   OUT NUMBER,
16:00:50 859  	out_months  OUT NUMBER,
16:00:50 860  	out_days    OUT NUMBER
16:00:50 861  ) AS
16:00:50 862  -- VARIABLES
16:00:50 863  var_offer_duration VARCHAR2(30);
16:00:50 864  SPROC_NAME	 CONSTANT VARCHAR2(16) := 'GET_OFFER_LENGTH';
16:00:50 865  -- EXCEPTIONS
16:00:50 866  BAD_OFFER_ID	     EXCEPTION;
16:00:50 867  CAN_NOT_PARSE_DURATION EXCEPTION;
16:00:50 868  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:50 869  BEGIN
16:00:50 870  
16:00:50 871  	BEGIN
16:00:50 872  	  SELECT
16:00:50 873  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:00:50 874  	  FROM
16:00:50 875  	    OFFER
16:00:50 876  	  WHERE
16:00:50 877  	    OFFER.ID = in_offer_id;
16:00:50 878  	  EXCEPTION
16:00:50 879  	    WHEN NO_DATA_FOUND THEN
16:00:50 880  	      RAISE BAD_OFFER_ID;
16:00:50 881  	END;
16:00:50 882  
16:00:50 883  	BEGIN
16:00:50 884  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
16:00:50 885  	    var_offer_duration,
16:00:50 886  	    out_years,
16:00:50 887  	    out_months,
16:00:50 888  	    out_days
16:00:50 889  	  );
16:00:50 890  	  EXCEPTION
16:00:50 891  	    WHEN OTHERS THEN
16:00:50 892  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 893  	      RAISE CAN_NOT_PARSE_DURATION;
16:00:50 894  	END;
16:00:50 895  
16:00:50 896  EXCEPTION
16:00:50 897  WHEN BAD_OFFER_ID THEN
16:00:50 898  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 899  	  SPROC_NAME, 'No such offer');
16:00:50 900  WHEN CAN_NOT_PARSE_DURATION THEN
16:00:50 901  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 902  	  SPROC_NAME, 'Can not parse offer duration', EXCEPTION_MESSAGE);
16:00:50 903  WHEN OTHERS THEN
16:00:50 904  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 905  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 906  END GET_OFFER_LENGTH;
16:00:50 907  
16:00:50 908  PROCEDURE GET_OFFER_LENGTH_IN_DAYS (
16:00:50 909  	in_offer_id   IN NUMBER,
16:00:50 910  	in_start_date IN DATE DEFAULT SYSDATE,
16:00:50 911  	out_days      OUT NUMBER
16:00:50 912  ) AS
16:00:50 913  SPROC_NAME CONSTANT VARCHAR2(24) := 'GET_OFFER_LENGTH_IN_DAYS';
16:00:50 914  -- VARIABLES
16:00:50 915  var_offer_duration VARCHAR2(30);
16:00:50 916  var_offer_years	 NUMBER;
16:00:50 917  var_offer_months	 NUMBER;
16:00:50 918  var_offer_days	 NUMBER;
16:00:50 919  var_offer_end_date DATE;
16:00:50 920  -- EXCEPTIONS
16:00:50 921  BAD_OFFER_ID EXCEPTION;
16:00:50 922  BEGIN
16:00:50 923  
16:00:50 924  	BEGIN
16:00:50 925  	  SELECT
16:00:50 926  	    OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:00:50 927  	  FROM
16:00:50 928  	    OFFER
16:00:50 929  	  WHERE
16:00:50 930  	    OFFER.ID = in_offer_id;
16:00:50 931  	  EXCEPTION
16:00:50 932  	    WHEN NO_DATA_FOUND THEN
16:00:50 933  	      RAISE BAD_OFFER_ID;
16:00:50 934  	END;
16:00:50 935  
16:00:50 936  	PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS (
16:00:50 937  	  var_offer_duration,
16:00:50 938  	  var_offer_years,
16:00:50 939  	  var_offer_months,
16:00:50 940  	  var_offer_days
16:00:50 941  	);
16:00:50 942  
16:00:50 943  	var_offer_end_date := ( ( in_start_date
16:00:50 944  	  + GLOBAL_CONSTANTS_V20.ONE_DAY_INTERVAL * var_offer_days )
16:00:50 945  	  + GLOBAL_CONSTANTS_V20.ONE_MONTH_INTERVAL * var_offer_months )
16:00:50 946  	  + GLOBAL_CONSTANTS_V20.ONE_YEAR_INTERVAL * var_offer_years;
16:00:50 947  
16:00:50 948  	out_days := var_offer_end_date - in_start_date;
16:00:50 949  
16:00:50 950  EXCEPTION
16:00:50 951  WHEN BAD_OFFER_ID THEN
16:00:50 952  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 953  	  SPROC_NAME, 'No such offer');
16:00:50 954  WHEN OTHERS THEN
16:00:50 955  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 956  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 957  END GET_OFFER_LENGTH_IN_DAYS;
16:00:50 958  
16:00:50 959  PROCEDURE GET_OFFER_PRODUCTS (
16:00:50 960  	in_offer_id    IN NUMBER,
16:00:50 961  	out_result_set OUT SYS_REFCURSOR
16:00:50 962  ) AS
16:00:50 963  -- VARIABLES
16:00:50 964  SPROC_NAME     CONSTANT VARCHAR2(18) := 'GET_OFFER_PRODUCTS';
16:00:50 965  temp_offerr_id NUMBER;
16:00:50 966  -- EXCEPTIONS
16:00:50 967  BAD_OFFER_ID EXCEPTION;
16:00:50 968  BEGIN
16:00:50 969  
16:00:50 970  	BEGIN
16:00:50 971  	  SELECT
16:00:50 972  	    OFFER.ID into temp_offerr_id
16:00:50 973  	  FROM
16:00:50 974  	    OFFER
16:00:50 975  	  WHERE
16:00:50 976  	    OFFER.ID = in_offer_id;
16:00:50 977  	  EXCEPTION
16:00:50 978  	    WHEN NO_DATA_FOUND THEN
16:00:50 979  	      RAISE BAD_OFFER_ID;
16:00:50 980  	END;
16:00:50 981  
16:00:50 982  	OPEN out_result_set FOR
16:00:50 983  	SELECT DISTINCT
16:00:50 984  	  PRODUCT.ID,
16:00:50 985  	  PRODUCT.NAME
16:00:50 986  	FROM
16:00:50 987  	  PRODUCT
16:00:50 988  	WHERE
16:00:50 989  	  PRODUCT.ID IN (
16:00:50 990  	      SELECT
16:00:50 991  		PRODUCT_OFFERING.PRODUCT_ID
16:00:50 992  	      FROM
16:00:50 993  		OFFER_PRODUCT_OFFERING
16:00:50 994  		INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50 995  	      WHERE
16:00:50 996  		OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
16:00:50 997  	    );
16:00:50 998  
16:00:50 999  EXCEPTION
16:00:50 1000  WHEN BAD_OFFER_ID THEN
16:00:50 1001  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1002  	   SPROC_NAME, 'No such offer');
16:00:50 1003  WHEN OTHERS THEN
16:00:50 1004  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1005  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1006  END GET_OFFER_PRODUCTS;
16:00:50 1007  
16:00:50 1008  PROCEDURE GET_OFFER_CHAIN_PROD_OFFERINGS (
16:00:50 1009  	 in_offer_chain_id IN NUMBER,
16:00:50 1010  	 out_result_set    OUT SYS_REFCURSOR
16:00:50 1011  ) AS
16:00:50 1012  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_PROD_OFFERINGS';
16:00:50 1013  -- VARIABLES
16:00:50 1014  temp_offer_chain_id NUMBER;
16:00:50 1015  -- EXCEPTIONS
16:00:50 1016  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 1017  BEGIN
16:00:50 1018  
16:00:50 1019  	 BEGIN
16:00:50 1020  	   SELECT
16:00:50 1021  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 1022  	   FROM
16:00:50 1023  	     OFFER_CHAIN
16:00:50 1024  	   WHERE
16:00:50 1025  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 1026  	   EXCEPTION
16:00:50 1027  	     WHEN NO_DATA_FOUND THEN
16:00:50 1028  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 1029  	 END;
16:00:50 1030  
16:00:50 1031  	 OPEN out_result_set FOR
16:00:50 1032  	 SELECT
16:00:50 1033  	   PRODUCT_OFFERING.ID,
16:00:50 1034  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 1035  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 1036  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 1037  	   PRODUCT_OFFERING.QUANTITY,
16:00:50 1038  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:50 1039  	   PRODUCT_OFFERING.CREATED_BY,
16:00:50 1040  	   PRODUCT.NAME,
16:00:50 1041  	   PRODUCT.PRODUCT_URI,
16:00:50 1042  	   CAPABILITY.ID CAP_ID,
16:00:50 1043  	   CAPABILITY.CODE CAP_CODE,
16:00:50 1044  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 1045  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 1046  	 FROM
16:00:50 1047  	   PRODUCT_OFFERING
16:00:50 1048  	   INNER JOIN PRODUCT ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
16:00:50 1049  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 1050  	 WHERE
16:00:50 1051  	   PRODUCT_OFFERING.ID IN (
16:00:50 1052  	     SELECT DISTINCT
16:00:50 1053  	       PRODUCT_OFFERING_ID
16:00:50 1054  	     FROM
16:00:50 1055  	       OFFER_PRODUCT_OFFERING
16:00:50 1056  	     WHERE
16:00:50 1057  	       OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:50 1058  		 SELECT DISTINCT
16:00:50 1059  		   OFFER_ID
16:00:50 1060  		 FROM
16:00:50 1061  		   OFFER_OFFER_CHAIN
16:00:50 1062  		 WHERE
16:00:50 1063  		   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1064  	       )
16:00:50 1065  	   );
16:00:50 1066  
16:00:50 1067  EXCEPTION
16:00:50 1068  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 1069  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1070  	   SPROC_NAME, 'Bad offer chain id');
16:00:50 1071  WHEN OTHERS THEN
16:00:50 1072  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1073  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1074  END GET_OFFER_CHAIN_PROD_OFFERINGS;
16:00:50 1075  
16:00:50 1076  FUNCTION CHECK_FOR_SAME_PRODUCTS (
16:00:50 1077  	 in_offer_chain_1	  IN OFFER_CHAIN.ID%TYPE,
16:00:50 1078  	 in_offer_chain_2	  IN OFFER_CHAIN.ID%TYPE,
16:00:50 1079  	 in_use_eligibility_rules IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:50 1080  ) RETURN NUMBER AS
16:00:50 1081  SPROC_NAME CONSTANT VARCHAR2(23) := 'CHECK_FOR_SAME_PRODUCTS';
16:00:50 1082  -- CONSTANTS
16:00:50 1083  PRODUCT_ELIGIBILITY_NAME CONSTANT VARCHAR2(19) := 'MAX_CONCURRENT_SUBS';
16:00:50 1084  -- VARIABLES
16:00:50 1085  temp_offer_chain_id	OFFER_CHAIN.ID%TYPE;
16:00:50 1086  var_same_products	SYS_REFCURSOR;
16:00:50 1087  var_same_product_id	NUMBER;
16:00:50 1088  same_product_count	NUMBER;
16:00:50 1089  var_product_eligibility_limit NUMBER;
16:00:50 1090  s_product_eligibility_limit   VARCHAR2(100);
16:00:50 1091  -- EXCEPTIONS
16:00:50 1092  BAD_FIRST_OFFER_CHAIN	      EXCEPTION;
16:00:50 1093  BAD_SECOND_OFFER_CHAIN	      EXCEPTION;
16:00:50 1094  BEGIN
16:00:50 1095  
16:00:50 1096  	 -- Check that first offer chain exists
16:00:50 1097  	 BEGIN
16:00:50 1098  	   SELECT
16:00:50 1099  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 1100  	   FROM
16:00:50 1101  	     OFFER_CHAIN
16:00:50 1102  	   WHERE
16:00:50 1103  	     OFFER_CHAIN.ID = in_offer_chain_1;
16:00:50 1104  	   EXCEPTION
16:00:50 1105  	     WHEN NO_DATA_FOUND THEN
16:00:50 1106  	       RAISE BAD_FIRST_OFFER_CHAIN;
16:00:50 1107  	 END;
16:00:50 1108  
16:00:50 1109  	 -- Check that second offer chain exists
16:00:50 1110  	 BEGIN
16:00:50 1111  	   SELECT
16:00:50 1112  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 1113  	   FROM
16:00:50 1114  	     OFFER_CHAIN
16:00:50 1115  	   WHERE
16:00:50 1116  	     OFFER_CHAIN.ID = in_offer_chain_2;
16:00:50 1117  	   EXCEPTION
16:00:50 1118  	     WHEN NO_DATA_FOUND THEN
16:00:50 1119  	       RAISE BAD_SECOND_OFFER_CHAIN;
16:00:50 1120  	 END;
16:00:50 1121  
16:00:50 1122  	 PROCS_OFFER_CHAIN_V20.GET_OFF_CHAINS_SAME_PRODUCTS(
16:00:50 1123  	   in_offer_chain_1 => in_offer_chain_1,
16:00:50 1124  	   in_offer_chain_2 => in_offer_chain_2,
16:00:50 1125  	   out_result_set   => var_same_products
16:00:50 1126  	 );
16:00:50 1127  
16:00:50 1128  	 LOOP
16:00:50 1129  	   FETCH var_same_products INTO var_same_product_id, same_product_count;
16:00:50 1130  	   EXIT WHEN var_same_products%NOTFOUND;
16:00:50 1131  
16:00:50 1132  	   IF in_use_eligibility_rules = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:50 1133  	     -- Return false because this offer chains having same products
16:00:50 1134  	     RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1135  	   ELSE
16:00:50 1136  
16:00:50 1137  	     -- Get eligibility rule for given product
16:00:50 1138  	     BEGIN
16:00:50 1139  	       SELECT
16:00:50 1140  		 PRODUCT_ELIGIBILITY.VALUE into s_product_eligibility_limit
16:00:50 1141  	       FROM
16:00:50 1142  		 PRODUCT_ELIGIBILITY
16:00:50 1143  	       WHERE
16:00:50 1144  		 PRODUCT_ELIGIBILITY.PRODUCT_ID = var_same_product_id
16:00:50 1145  		 AND PRODUCT_ELIGIBILITY.NAME = PRODUCT_ELIGIBILITY_NAME;
16:00:50 1146  
16:00:50 1147  	       -- REVU: What should to be here? 1?
16:00:50 1148  	       EXCEPTION
16:00:50 1149  		 WHEN NO_DATA_FOUND THEN
16:00:50 1150  		   s_product_eligibility_limit := '1';
16:00:50 1151  	     END;
16:00:50 1152  
16:00:50 1153  	     IF UPPER(s_product_eligibility_limit) = GLOBAL_CONSTANTS_V20.MAX_CONSURRENT_PRD_UNLIM THEN
16:00:50 1154  	       RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1155  	     END IF;
16:00:50 1156  
16:00:50 1157  	     var_product_eligibility_limit := TO_NUMBER(s_product_eligibility_limit);
16:00:50 1158  
16:00:50 1159  	     -- Check for limit
16:00:50 1160  	     IF var_product_eligibility_limit < same_product_count THEN
16:00:50 1161  	       RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1162  	     END IF;
16:00:50 1163  
16:00:50 1164  	   END IF;
16:00:50 1165  	 END LOOP;
16:00:50 1166  
16:00:50 1167  	 RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1168  
16:00:50 1169  EXCEPTION
16:00:50 1170  WHEN BAD_FIRST_OFFER_CHAIN THEN
16:00:50 1171  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1172  	   SPROC_NAME, 'First offer chain not found');
16:00:50 1173  WHEN BAD_SECOND_OFFER_CHAIN THEN
16:00:50 1174  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1175  	   SPROC_NAME, 'Second offer chain not found');
16:00:50 1176  WHEN OTHERS THEN
16:00:50 1177  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1178  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1179  END CHECK_FOR_SAME_PRODUCTS;
16:00:50 1180  
16:00:50 1181  FUNCTION IS_OFFER_CHAIN_CANCELABLE (
16:00:50 1182  	 in_offer_chain_id IN NUMBER
16:00:50 1183  ) RETURN NUMBER AS
16:00:50 1184  SPROC_NAME CONSTANT VARCHAR2(25) := 'IS_OFFER_CHAIN_CANCELABLE';
16:00:50 1185  -- VARIABLES
16:00:50 1186  var_is_cancelable_str VARCHAR2(1);
16:00:50 1187  var_is_cancelable     NUMBER;
16:00:50 1188  BEGIN
16:00:50 1189  
16:00:50 1190  	 BEGIN
16:00:50 1191  	   SELECT
16:00:50 1192  	     VALUE INTO var_is_cancelable_str
16:00:50 1193  	   FROM (
16:00:50 1194  	     SELECT
16:00:50 1195  	       VALUE, NAME
16:00:50 1196  	     FROM
16:00:50 1197  	       OFFER_CHAIN_META_DATA
16:00:50 1198  	     WHERE
16:00:50 1199  	       OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1200  	     )
16:00:50 1201  	   WHERE
16:00:50 1202  	     UPPER(NAME) = 'CANCELABLE';
16:00:50 1203  	   var_is_cancelable := TO_NUMBER(var_is_cancelable_str);
16:00:50 1204  	   EXCEPTION
16:00:50 1205  	     WHEN NO_DATA_FOUND THEN
16:00:50 1206  	       var_is_cancelable := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1207  	 END;
16:00:50 1208  
16:00:50 1209  	 IF var_is_cancelable = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:50 1210  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1211  	 END IF;
16:00:50 1212  
16:00:50 1213  	 RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1214  
16:00:50 1215  EXCEPTION
16:00:50 1216  WHEN OTHERS THEN
16:00:50 1217  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1218  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1219  END IS_OFFER_CHAIN_CANCELABLE;
16:00:50 1220  
16:00:50 1221  FUNCTION GET_OFFER_CHAIN_MAX_CONC_SUBSC (
16:00:50 1222  	 in_offer_chain_id IN NUMBER
16:00:50 1223  ) RETURN NUMBER AS
16:00:50 1224  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_OFFER_CHAIN_MAX_CONC_SUBSC';
16:00:50 1225  -- VARIABLES
16:00:50 1226  var_max_concurrent_subs_str VARCHAR2(100);
16:00:50 1227  var_max_concurrent_subs	   NUMBER;
16:00:50 1228  BEGIN
16:00:50 1229  
16:00:50 1230  	 BEGIN
16:00:50 1231  	   SELECT
16:00:50 1232  	     VALUE into var_max_concurrent_subs_str
16:00:50 1233  	   FROM
16:00:50 1234  	     (
16:00:50 1235  	       SELECT
16:00:50 1236  		 NAME,
16:00:50 1237  		 VALUE
16:00:50 1238  	       FROM
16:00:50 1239  		 OFFER_CHAIN_ELIGIBILITY
16:00:50 1240  	       WHERE
16:00:50 1241  		 OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1242  	     )
16:00:50 1243  	   WHERE
16:00:50 1244  	     NAME LIKE GLOBAL_CONSTANTS_V20.MAX_CONCURRENT_SUBS;
16:00:50 1245  
16:00:50 1246  	   IF var_max_concurrent_subs_str = GLOBAL_CONSTANTS_V20.MAX_CONCURRENT_SUBS_UNLIM THEN
16:00:50 1247  	     var_max_concurrent_subs := GLOBAL_CONSTANTS_V20.INFINITY;
16:00:50 1248  	   ELSE
16:00:50 1249  	     var_max_concurrent_subs := TO_NUMBER(var_max_concurrent_subs_str);
16:00:50 1250  	   END IF;
16:00:50 1251  
16:00:50 1252  	   EXCEPTION
16:00:50 1253  	     WHEN NO_DATA_FOUND THEN
16:00:50 1254  	       var_max_concurrent_subs := 1;
16:00:50 1255  	 END;
16:00:50 1256  
16:00:50 1257  	 RETURN var_max_concurrent_subs;
16:00:50 1258  
16:00:50 1259  EXCEPTION
16:00:50 1260  WHEN OTHERS THEN
16:00:50 1261  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1262  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1263  END GET_OFFER_CHAIN_MAX_CONC_SUBSC;
16:00:50 1264  
16:00:50 1265  PROCEDURE GET_OFFER_CHAIN_ELIGIBILITY (
16:00:50 1266  	 in_offer_chain_id   IN NUMBER,
16:00:50 1267  	 in_eligibility_name IN VARCHAR2,
16:00:50 1268  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 1269  ) AS
16:00:50 1270  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_ELIGIBILITY';
16:00:50 1271  -- VARIABLES
16:00:50 1272  temp_offer_chain_id NUMBER;
16:00:50 1273  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
16:00:50 1274  -- EXCEPTIONS
16:00:50 1275  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 1276  BEGIN
16:00:50 1277  
16:00:50 1278  	 BEGIN
16:00:50 1279  	   SELECT
16:00:50 1280  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 1281  	   FROM
16:00:50 1282  	     OFFER_CHAIN
16:00:50 1283  	   WHERE
16:00:50 1284  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 1285  	   EXCEPTION
16:00:50 1286  	     WHEN NO_DATA_FOUND THEN
16:00:50 1287  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 1288  	 END;
16:00:50 1289  
16:00:50 1290  	 var_eligibility_name := UPPER(in_eligibility_name);
16:00:50 1291  
16:00:50 1292  	 OPEN out_result_set FOR
16:00:50 1293  	 SELECT
16:00:50 1294  	   OFFER_CHAIN_ELIGIBILITY.ID,
16:00:50 1295  	   OFFER_CHAIN_ELIGIBILITY.NAME,
16:00:50 1296  	   OFFER_CHAIN_ELIGIBILITY.VALUE,
16:00:50 1297  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID,
16:00:50 1298  	   OFFER_CHAIN_ELIGIBILITY.CREATE_DATE,
16:00:50 1299  	   OFFER_CHAIN_ELIGIBILITY.CREATED_BY
16:00:50 1300  	 FROM
16:00:50 1301  	   OFFER_CHAIN_ELIGIBILITY
16:00:50 1302  	 WHERE
16:00:50 1303  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1304  	   AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = var_eligibility_name;
16:00:50 1305  
16:00:50 1306  EXCEPTION
16:00:50 1307  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 1308  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1309  	   SPROC_NAME, 'No such offer chain');
16:00:50 1310  WHEN OTHERS THEN
16:00:50 1311  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1312  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1313  END GET_OFFER_CHAIN_ELIGIBILITY;
16:00:50 1314  
16:00:50 1315  PROCEDURE GET_OFFER_CHAINS_ELIGIBILITY (
16:00:50 1316  	 in_offer_chain_ids  IN VARCHAR2,
16:00:50 1317  	 in_eligibility_name IN VARCHAR2,
16:00:50 1318  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 1319  ) AS
16:00:50 1320  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_ELIGIBILITY';
16:00:50 1321  -- VARIABLES
16:00:50 1322  var_eligibility_name OFFER_CHAIN_ELIGIBILITY.NAME%TYPE;
16:00:50 1323  BEGIN
16:00:50 1324  
16:00:50 1325  	 var_eligibility_name := UPPER(in_eligibility_name);
16:00:50 1326  
16:00:50 1327  	 -- TODO: Reveiw this procedure and fine a normal way to implement this feature
16:00:50 1328  
16:00:50 1329  	 open out_result_set for
16:00:50 1330  	 'SELECT
16:00:50 1331  	   ID,
16:00:50 1332  	   NAME,
16:00:50 1333  	   VALUE,
16:00:50 1334  	   OFFER_CHAIN_ID,
16:00:50 1335  	   CREATE_DATE,
16:00:50 1336  	   CREATED_BY
16:00:50 1337  	 FROM
16:00:50 1338  	   OFFER_CHAIN_ELIGIBILITY
16:00:50 1339  	 WHERE
16:00:50 1340  	   OFFER_CHAIN_ID in ( '|| in_offer_chain_ids ||' )
16:00:50 1341  	   AND UPPER(NAME) = :1'
16:00:50 1342  	 using var_eligibility_name;
16:00:50 1343  
16:00:50 1344  EXCEPTION
16:00:50 1345  WHEN OTHERS THEN
16:00:50 1346  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1347  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1348  END GET_OFFER_CHAINS_ELIGIBILITY;
16:00:50 1349  
16:00:50 1350  PROCEDURE GET_OFFER_CHAINS_META_DATA (
16:00:50 1351  	 in_offer_chain_ids IN VARCHAR2,
16:00:50 1352  	 in_meta_data_name  IN VARCHAR2,
16:00:50 1353  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 1354  ) AS
16:00:50 1355  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_OFFER_CHAINS_META_DATA';
16:00:50 1356  -- VARIABLES
16:00:50 1357  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
16:00:50 1358  BEGIN
16:00:50 1359  
16:00:50 1360  	 var_meta_data_name := UPPER(in_meta_data_name);
16:00:50 1361  
16:00:50 1362  	 open out_result_set for
16:00:50 1363  	 'select
16:00:50 1364  	   ID,
16:00:50 1365  	   NAME,
16:00:50 1366  	   VALUE,
16:00:50 1367  	   OFFER_CHAIN_ID,
16:00:50 1368  	   CREATED_BY,
16:00:50 1369  	   CREATE_DATE
16:00:50 1370  	 from
16:00:50 1371  	   OFFER_CHAIN_META_DATA
16:00:50 1372  	 where
16:00:50 1373  	   OFFER_CHAIN_ID in ( '||in_offer_chain_ids||' )
16:00:50 1374  	   and UPPER(OFFER_CHAIN_META_DATA.NAME) = :1'
16:00:50 1375  	 using var_meta_data_name;
16:00:50 1376  
16:00:50 1377  EXCEPTION
16:00:50 1378  WHEN OTHERS THEN
16:00:50 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1380  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1381  END GET_OFFER_CHAINS_META_DATA;
16:00:50 1382  
16:00:50 1383  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:50 1384  	 in_offer_chain_id IN NUMBER,
16:00:50 1385  	 in_meta_data_name IN VARCHAR2,
16:00:50 1386  	 out_result_set    OUT SYS_REFCURSOR
16:00:50 1387  ) AS
16:00:50 1388  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_CHAIN_META_DATA';
16:00:50 1389  -- VARIABLES
16:00:50 1390  temp_offer_chain_id NUMBER;
16:00:50 1391  var_meta_data_name  OFFER_CHAIN_META_DATA.NAME%TYPE;
16:00:50 1392  -- EXCEPTIONS
16:00:50 1393  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 1394  BEGIN
16:00:50 1395  
16:00:50 1396  	 BEGIN
16:00:50 1397  	   SELECT
16:00:50 1398  	     OFFER_CHAIN.ID into temp_offer_chain_id
16:00:50 1399  	   FROM
16:00:50 1400  	     OFFER_CHAIN
16:00:50 1401  	   WHERE
16:00:50 1402  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 1403  	   EXCEPTION
16:00:50 1404  	     WHEN NO_DATA_FOUND THEN
16:00:50 1405  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 1406  	 END;
16:00:50 1407  
16:00:50 1408  	 var_meta_data_name := UPPER(in_meta_data_name);
16:00:50 1409  
16:00:50 1410  	 OPEN out_result_set FOR
16:00:50 1411  	 SELECT
16:00:50 1412  	   OFFER_CHAIN_META_DATA.ID,
16:00:50 1413  	   OFFER_CHAIN_META_DATA.NAME,
16:00:50 1414  	   OFFER_CHAIN_META_DATA.VALUE,
16:00:50 1415  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID,
16:00:50 1416  	   OFFER_CHAIN_META_DATA.CREATED_BY,
16:00:50 1417  	   OFFER_CHAIN_META_DATA.CREATE_DATE
16:00:50 1418  	 FROM
16:00:50 1419  	   OFFER_CHAIN_META_DATA
16:00:50 1420  	 WHERE
16:00:50 1421  	   OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1422  	   AND UPPER(OFFER_CHAIN_META_DATA.NAME) = var_meta_data_name;
16:00:50 1423  
16:00:50 1424  EXCEPTION
16:00:50 1425  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 1426  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1427  	   SPROC_NAME, 'No such offer chain');
16:00:50 1428  WHEN OTHERS THEN
16:00:50 1429  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1430  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1431  END GET_OFFER_CHAIN_META_DATA;
16:00:50 1432  
16:00:50 1433  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:00:50 1434  	 in_offer_id	IN NUMBER,
16:00:50 1435  	 out_result_set OUT SYS_REFCURSOR
16:00:50 1436  ) AS
16:00:50 1437  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PROD_OFFERINGS_BY_OFFER_ID';
16:00:50 1438  -- VARIABLES
16:00:50 1439  temp_offer_id NUMBER;
16:00:50 1440  -- EXCEPTIONS
16:00:50 1441  BAD_OFFER_ID EXCEPTION;
16:00:50 1442  BEGIN
16:00:50 1443  
16:00:50 1444  	 BEGIN
16:00:50 1445  	   SELECT
16:00:50 1446  	     OFFER.ID into temp_offer_id
16:00:50 1447  	   FROM
16:00:50 1448  	     OFFER
16:00:50 1449  	   WHERE
16:00:50 1450  	     OFFER.ID = in_offer_id;
16:00:50 1451  	   EXCEPTION
16:00:50 1452  	     WHEN NO_DATA_FOUND THEN
16:00:50 1453  	       RAISE BAD_OFFER_ID;
16:00:50 1454  	 END;
16:00:50 1455  
16:00:50 1456  	 OPEN out_result_set FOR
16:00:50 1457  	 SELECT DISTINCT
16:00:50 1458  	   PRODUCT_OFFERING.ID,
16:00:50 1459  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 1460  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 1461  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 1462  	   PRODUCT_OFFERING.QUANTITY,
16:00:50 1463  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:50 1464  	   PRODUCT_OFFERING.CREATED_BY,
16:00:50 1465  	   CAPABILITY.ID CAP_ID,
16:00:50 1466  	   CAPABILITY.CODE CAP_CODE,
16:00:50 1467  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 1468  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 1469  	 FROM
16:00:50 1470  	   OFFER_PRODUCT_OFFERING
16:00:50 1471  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 1472  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 1473  	 WHERE
16:00:50 1474  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:00:50 1475  
16:00:50 1476  EXCEPTION
16:00:50 1477  WHEN BAD_OFFER_ID THEN
16:00:50 1478  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1479  	   SPROC_NAME, 'No such offer');
16:00:50 1480  WHEN OTHERS THEN
16:00:50 1481  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1482  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1483  END GET_PROD_OFFERINGS_BY_OFFER_ID;
16:00:50 1484  
16:00:50 1485  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:50 1486  	 in_product_offering_id IN NUMBER,
16:00:50 1487  	 in_meta_data_name	IN VARCHAR2 DEFAULT NULL,
16:00:50 1488  	 out_result_set 	OUT SYS_REFCURSOR
16:00:50 1489  ) AS
16:00:50 1490  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
16:00:50 1491  -- VARIABLES
16:00:50 1492  temp_product_offering_id NUMBER;
16:00:50 1493  -- EXCEPTIONS
16:00:50 1494  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:00:50 1495  BEGIN
16:00:50 1496  
16:00:50 1497  	 BEGIN
16:00:50 1498  	   SELECT
16:00:50 1499  	     PRODUCT_OFFERING.ID into temp_product_offering_id
16:00:50 1500  	   FROM
16:00:50 1501  	     PRODUCT_OFFERING
16:00:50 1502  	   WHERE
16:00:50 1503  	     PRODUCT_OFFERING.ID = in_product_offering_id;
16:00:50 1504  	   EXCEPTION
16:00:50 1505  	     WHEN NO_DATA_FOUND THEN
16:00:50 1506  	       RAISE BAD_PRODUCT_OFFERING_ID;
16:00:50 1507  	 END;
16:00:50 1508  
16:00:50 1509  	 OPEN out_result_set FOR
16:00:50 1510  	 SELECT
16:00:50 1511  	   PRODUCT_OFFERING_META_DATA.ID,
16:00:50 1512  	   PRODUCT_OFFERING_META_DATA.NAME,
16:00:50 1513  	   PRODUCT_OFFERING_META_DATA.VALUE,
16:00:50 1514  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID,
16:00:50 1515  	   PRODUCT_OFFERING_META_DATA.CREATE_DATE,
16:00:50 1516  	   PRODUCT_OFFERING_META_DATA.CREATED_BY
16:00:50 1517  	 FROM
16:00:50 1518  	   PRODUCT_OFFERING_META_DATA
16:00:50 1519  	 WHERE
16:00:50 1520  	   PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id
16:00:50 1521  	   AND UPPER(PRODUCT_OFFERING_META_DATA.NAME) = UPPER(NVL(in_meta_data_name, PRODUCT_OFFERING_META_DATA.NAME));
16:00:50 1522  
16:00:50 1523  EXCEPTION
16:00:50 1524  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:00:50 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1526  	   SPROC_NAME, 'No such product offering');
16:00:50 1527  END GET_PRODUCT_OFFERING_META_DATA;
16:00:50 1528  
16:00:50 1529  PROCEDURE GET_OFF_CHAINS_SAME_PRODUCTS (
16:00:50 1530  	 in_offer_chain_1 IN NUMBER,
16:00:50 1531  	 in_offer_chain_2 IN NUMBER,
16:00:50 1532  	 out_result_set   OUT SYS_REFCURSOR
16:00:50 1533  ) AS
16:00:50 1534  BEGIN
16:00:50 1535  
16:00:50 1536  	 OPEN out_result_set FOR
16:00:50 1537  	 SELECT
16:00:50 1538  	   PRODUCT_ID_IN_OFFER_CH_1 AS "PRODUCT_ID",
16:00:50 1539  	   COUNT_1 + COUNT_2	    AS "COUNT"
16:00:50 1540  	 FROM
16:00:50 1541  	   (
16:00:50 1542  	     SELECT
16:00:50 1543  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_1",
16:00:50 1544  	       COUNT(*) 		   as "COUNT_1"
16:00:50 1545  	     FROM
16:00:50 1546  	       (
16:00:50 1547  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_1
16:00:50 1548  	       )
16:00:50 1549  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:00:50 1550  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50 1551  	     GROUP BY
16:00:50 1552  	       PRODUCT_OFFERING.PRODUCT_ID
16:00:50 1553  	   )
16:00:50 1554  	   INNER JOIN
16:00:50 1555  	   (
16:00:50 1556  	     SELECT
16:00:50 1557  	       PRODUCT_OFFERING.PRODUCT_ID as "PRODUCT_ID_IN_OFFER_CH_2",
16:00:50 1558  	       COUNT(*) 		   as "COUNT_2"
16:00:50 1559  	     FROM
16:00:50 1560  	       (
16:00:50 1561  		 SELECT OFFER_ID as "OFFER_OFFER_CHAIN_OFFER_ID" FROM OFFER_OFFER_CHAIN WHERE OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_2
16:00:50 1562  	       )
16:00:50 1563  	       INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_OFFER_CHAIN_OFFER_ID = OFFER_PRODUCT_OFFERING.OFFER_ID
16:00:50 1564  	       INNER JOIN PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50 1565  	     GROUP BY
16:00:50 1566  	       PRODUCT_OFFERING.PRODUCT_ID
16:00:50 1567  	   ) ON PRODUCT_ID_IN_OFFER_CH_1 = PRODUCT_ID_IN_OFFER_CH_2;
16:00:50 1568  
16:00:50 1569  END GET_OFF_CHAINS_SAME_PRODUCTS;
16:00:50 1570  
16:00:50 1571  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:00:50 1572  	 in_offer_chain_id IN NUMBER,
16:00:50 1573  	 in_meta_data_name IN VARCHAR2,
16:00:50 1574  	 out_value	   OUT VARCHAR2
16:00:50 1575  ) AS
16:00:50 1576  BEGIN
16:00:50 1577  	 BEGIN
16:00:50 1578  	   SELECT
16:00:50 1579  	     OFFER_CHAIN_META_DATA.VALUE into out_value
16:00:50 1580  	   FROM
16:00:50 1581  	     OFFER_CHAIN_META_DATA
16:00:50 1582  	   WHERE
16:00:50 1583  	     OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1584  	     AND UPPER(OFFER_CHAIN_META_DATA.NAME) = UPPER(in_meta_data_name);
16:00:50 1585  
16:00:50 1586  	   EXCEPTION
16:00:50 1587  	     WHEN NO_DATA_FOUND THEN
16:00:50 1588  	       out_value := NULL;
16:00:50 1589  	 END;
16:00:50 1590  END GET_OFFER_CHAIN_MD_VALUE;
16:00:50 1591  
16:00:50 1592  PROCEDURE GET_OFFER_CHAIN_EL_VALUE (
16:00:50 1593  	 in_offer_chain_id   IN NUMBER,
16:00:50 1594  	 in_eligibility_name IN VARCHAR2,
16:00:50 1595  	 out_value	     OUT VARCHAR2
16:00:50 1596  ) AS
16:00:50 1597  BEGIN
16:00:50 1598  	 BEGIN
16:00:50 1599  	   SELECT
16:00:50 1600  	     OFFER_CHAIN_ELIGIBILITY.VALUE into out_value
16:00:50 1601  	   FROM
16:00:50 1602  	     OFFER_CHAIN_ELIGIBILITY
16:00:50 1603  	   WHERE
16:00:50 1604  	     OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1605  	     AND UPPER(OFFER_CHAIN_ELIGIBILITY.NAME) = UPPER(in_eligibility_name);
16:00:50 1606  
16:00:50 1607  	   EXCEPTION
16:00:50 1608  	     WHEN NO_DATA_FOUND THEN
16:00:50 1609  	       out_value := NULL;
16:00:50 1610  	 END;
16:00:50 1611  END GET_OFFER_CHAIN_EL_VALUE;
16:00:50 1612  
16:00:50 1613  PROCEDURE GET_OFFER_PRODUCT_OFFERINGS (
16:00:50 1614  	 in_offer_id	IN NUMBER,
16:00:50 1615  	 out_result_set OUT SYS_REFCURSOR
16:00:50 1616  ) AS
16:00:50 1617  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_OFFER_PRODUCT_OFFERINGS';
16:00:50 1618  -- VARIABLES
16:00:50 1619  temp_offer_id NUMBER;
16:00:50 1620  -- EXCEPTIONS
16:00:50 1621  BAD_OFFER_ID EXCEPTION;
16:00:50 1622  BEGIN
16:00:50 1623  
16:00:50 1624  	 BEGIN
16:00:50 1625  	   SELECT
16:00:50 1626  	     OFFER.ID into temp_offer_id
16:00:50 1627  	   FROM
16:00:50 1628  	     OFFER
16:00:50 1629  	   WHERE
16:00:50 1630  	     OFFER.ID = in_offer_id;
16:00:50 1631  	   EXCEPTION
16:00:50 1632  	     WHEN NO_DATA_FOUND THEN
16:00:50 1633  	       RAISE BAD_OFFER_ID;
16:00:50 1634  	 END;
16:00:50 1635  
16:00:50 1636  	 OPEN out_result_set FOR
16:00:50 1637  	 SELECT
16:00:50 1638  	   PRODUCT_OFFERING.ID,
16:00:50 1639  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 1640  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 1641  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 1642  	   PRODUCT_OFFERING.QUANTITY,
16:00:50 1643  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:50 1644  	   PRODUCT_OFFERING.CREATED_BY,
16:00:50 1645  	   PRODUCT_OFFERING.TAX_POLICY_TYPE_ID
16:00:50 1646  	 FROM
16:00:50 1647  	   PRODUCT_OFFERING
16:00:50 1648  	   INNER JOIN OFFER_PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 1649  	 WHERE
16:00:50 1650  	   OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id;
16:00:50 1651  
16:00:50 1652  EXCEPTION
16:00:50 1653  WHEN BAD_OFFER_ID THEN
16:00:50 1654  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1655  	   SPROC_NAME, 'No such offer');
16:00:50 1656  WHEN OTHERS THEN
16:00:50 1657  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1658  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1659  END GET_OFFER_PRODUCT_OFFERINGS;
16:00:50 1660  
16:00:50 1661  PROCEDURE GET_OFFER_CHAINS_BY_META_DATA (
16:00:50 1662  	 in_meta_data_name  IN VARCHAR2,
16:00:50 1663  	 in_meta_data_value IN VARCHAR2,
16:00:50 1664  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 1665  ) AS
16:00:50 1666  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CHAINS_BY_META_DATA';
16:00:50 1667  -- VARIABLES
16:00:50 1668  v_meta_data_name  CONSTANT OFFER_CHAIN_META_DATA.NAME%TYPE  := UPPER(in_meta_data_name);
16:00:50 1669  v_meta_data_value CONSTANT OFFER_CHAIN_META_DATA.VALUE%TYPE := UPPER(in_meta_data_value);
16:00:50 1670  BEGIN
16:00:50 1671  
16:00:50 1672  	 OPEN out_result_set FOR
16:00:50 1673  	 SELECT
16:00:50 1674  	   och.ID,
16:00:50 1675  	   och.NAME,
16:00:50 1676  	   och.DESCRIPTION,
16:00:50 1677  	   och.OFFER_CHAIN_STATUS_ID,
16:00:50 1678  	   PROCS_OFFER_CHAIN_V20.CALCULATE_OFFER_CHAIN_AMOUNT(och.id) as amount,
16:00:50 1679  	   och.ADOPTABILITY_WINDOW_START_DATE,
16:00:50 1680  	   och.ADOPTABILITY_WINDOW_END_DATE,
16:00:50 1681  	   PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(och.id) as is_cancelable,
16:00:50 1682  	   och.IS_GIFT_CERTIFICATE,
16:00:50 1683  	   'false' as comf_offer_chain, -- TODO
16:00:50 1684  	   po.PRODUCT_ID,
16:00:50 1685  	   och.GROUP_ACCOUNT_TYPE_ID
16:00:50 1686  	 FROM
16:00:50 1687  	   OFFER_CHAIN och,
16:00:50 1688  	   OFFER_OFFER_CHAIN ooch,
16:00:50 1689  	   OFFER_PRODUCT_OFFERING opo,
16:00:50 1690  	   PRODUCT_OFFERING po
16:00:50 1691  	 WHERE
16:00:50 1692  	   och.ID = ooch.OFFER_CHAIN_ID
16:00:50 1693  	   and ooch.OFFER_ID = opo.OFFER_ID
16:00:50 1694  	   and opo.PRODUCT_OFFERING_ID = po.ID
16:00:50 1695  	   and och.OFFER_CHAIN_STATUS_ID = GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE
16:00:50 1696  	   and och.id in (
16:00:50 1697  	     SELECT DISTINCT
16:00:50 1698  	       och2.id
16:00:50 1699  	     from
16:00:50 1700  	       offer_chain och2
16:00:50 1701  	       inner join offer_chain_meta_data ochmd on och2.id = ochmd.offer_chain_id
16:00:50 1702  	     where
16:00:50 1703  	       UPPER(ochmd.name) = v_meta_data_name
16:00:50 1704  	       AND UPPER(ochmd.value) = v_meta_data_value
16:00:50 1705  	   );
16:00:50 1706  
16:00:50 1707  EXCEPTION
16:00:50 1708  WHEN OTHERS THEN
16:00:50 1709  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1710  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1711  END GET_OFFER_CHAINS_BY_META_DATA;
16:00:50 1712  
16:00:50 1713  PROCEDURE GET_ALL_META_DATA (
16:00:50 1714  	 in_offer_chain_id IN NUMBER,
16:00:50 1715  	 out_result_set    OUT SYS_REFCURSOR
16:00:50 1716  ) AS
16:00:50 1717  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_ALL_META_DATA';
16:00:50 1718  -- Variables
16:00:50 1719  temp_offer_chain_id NUMBER;
16:00:50 1720  -- Exceptions
16:00:50 1721  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 1722  BEGIN
16:00:50 1723  
16:00:50 1724  	 BEGIN
16:00:50 1725  	   SELECT
16:00:50 1726  	     OCH.ID into temp_offer_chain_id
16:00:50 1727  	   FROM
16:00:50 1728  	     OFFER_CHAIN OCH
16:00:50 1729  	   WHERE
16:00:50 1730  	     OCH.ID = in_offer_chain_id;
16:00:50 1731  	   EXCEPTION
16:00:50 1732  	     WHEN NO_DATA_FOUND THEN
16:00:50 1733  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 1734  	 END;
16:00:50 1735  
16:00:50 1736  	 OPEN out_result_set FOR
16:00:50 1737  	 SELECT
16:00:50 1738  	   OCHMD.ID,
16:00:50 1739  	   OCHMD.OFFER_CHAIN_ID,
16:00:50 1740  	   OCHMD.NAME,
16:00:50 1741  	   OCHMD.VALUE,
16:00:50 1742  	   OCHMD.CREATE_DATE,
16:00:50 1743  	   OCHMD.CREATED_BY
16:00:50 1744  	 FROM
16:00:50 1745  	   OFFER_CHAIN_META_DATA OCHMD
16:00:50 1746  	 WHERE
16:00:50 1747  	   OCHMD.OFFER_CHAIN_ID = in_offer_chain_id;
16:00:50 1748  
16:00:50 1749  EXCEPTION
16:00:50 1750  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 1751  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1752  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:00:50 1753  WHEN OTHERS THEN
16:00:50 1754  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1755  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1756  END GET_ALL_META_DATA;
16:00:50 1757  
16:00:50 1758  PROCEDURE CHECK_PRODUCT_ELIGIBILITY (
16:00:50 1759  	 in_group_id	   IN NUMBER,
16:00:50 1760  	 in_offer_chain_id IN NUMBER,
16:00:50 1761  	 out_is_eligible   OUT NUMBER,
16:00:50 1762  	 out_concurrent_subscription_id OUT NUMBER
16:00:50 1763  ) AS
16:00:50 1764  SPROC_NAME CONSTANT VARCHAR2(25) := 'CHECK_PRODUCT_ELIGIBILITY';
16:00:50 1765  -- Variables
16:00:50 1766  var_account_id  NUMBER;
16:00:50 1767  var_is_eligible NUMBER;
16:00:50 1768  var_is_gc       NUMBER;
16:00:50 1769  -- Exceptions
16:00:50 1770  BAD_GROUP_ID		   EXCEPTION;
16:00:50 1771  CAN_NOT_CHECK_SAME_PRODUCTS EXCEPTION;
16:00:50 1772  BAD_OC_ID		   EXCEPTION;
16:00:50 1773  EXCEPTION_MESSAGE	   VARCHAR(1024);
16:00:50 1774  BEGIN
16:00:50 1775  
16:00:50 1776  	 var_is_eligible := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1777  
16:00:50 1778  	 out_concurrent_subscription_id := NULL;
16:00:50 1779  
16:00:50 1780  	 BEGIN
16:00:50 1781  	   SELECT
16:00:50 1782  	     OC.IS_GIFT_CERTIFICATE into var_is_gc
16:00:50 1783  	   FROM
16:00:50 1784  	     OFFER_CHAIN OC
16:00:50 1785  	   WHERE
16:00:50 1786  	     OC.ID = in_offer_chain_id;
16:00:50 1787  	   EXCEPTION
16:00:50 1788  	     WHEN NO_DATA_FOUND THEN
16:00:50 1789  	       RAISE BAD_OC_ID;
16:00:50 1790  	 END;
16:00:50 1791  
16:00:50 1792  	 -- only check eligibility if this is not a gift certificate
16:00:50 1793  	 IF (var_is_gc IS NULL OR var_is_gc != 1) THEN
16:00:50 1794  	   BEGIN
16:00:50 1795  	     SELECT
16:00:50 1796  	       A.ID into var_account_id
16:00:50 1797  	     FROM
16:00:50 1798  	       ACCOUNT A
16:00:50 1799  	     WHERE
16:00:50 1800  	       A.GROUP_ID = in_group_id;
16:00:50 1801  	     EXCEPTION
16:00:50 1802  	       WHEN NO_DATA_FOUND THEN
16:00:50 1803  		 RAISE BAD_GROUP_ID;
16:00:50 1804  	   END;
16:00:50 1805  
16:00:50 1806  
16:00:50 1807  	   FOR f_offer_chain IN (
16:00:50 1808  	       SELECT
16:00:50 1809  		 S.ID as SUBSCRIPTION_ID,
16:00:50 1810  		 S.OFFER_CHAIN_ID
16:00:50 1811  	       FROM
16:00:50 1812  		 SUBSCRIPTION S
16:00:50 1813  	       WHERE
16:00:50 1814  		 S.ACCOUNT_ID = var_account_id
16:00:50 1815  		 AND (S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 1816  		      OR S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:50 1817  	   )
16:00:50 1818  	   LOOP
16:00:50 1819  	     BEGIN
16:00:50 1820  	       IF (
16:00:50 1821  		 PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(
16:00:50 1822  		   in_offer_chain_id,
16:00:50 1823  		   f_offer_chain.offer_chain_id,
16:00:50 1824  		   GLOBAL_CONSTANTS_V20.TRUE
16:00:50 1825  		 ) = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 1826  	       ) THEN
16:00:50 1827  		 var_is_eligible := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1828  		 out_concurrent_subscription_id := f_offer_chain.SUBSCRIPTION_ID;
16:00:50 1829  	       END IF;
16:00:50 1830  	       EXCEPTION
16:00:50 1831  		 WHEN OTHERS THEN
16:00:50 1832  		   EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1833  		   RAISE CAN_NOT_CHECK_SAME_PRODUCTS;
16:00:50 1834  	     END;
16:00:50 1835  	   END LOOP;
16:00:50 1836  	 END IF;
16:00:50 1837  	 out_is_eligible := var_is_eligible;
16:00:50 1838  
16:00:50 1839  EXCEPTION
16:00:50 1840  WHEN BAD_GROUP_ID THEN
16:00:50 1841  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1842  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:00:50 1843  WHEN BAD_OC_ID THEN
16:00:50 1844  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1845  	   SPROC_NAME, 'No such offer chain', SQLERRM);
16:00:50 1846  WHEN CAN_NOT_CHECK_SAME_PRODUCTS THEN
16:00:50 1847  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1848  	   SPROC_NAME, 'Could not check offers for same products', EXCEPTION_MESSAGE);
16:00:50 1849  WHEN OTHERS THEN
16:00:50 1850  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1851  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1852  END CHECK_PRODUCT_ELIGIBILITY;
16:00:50 1853  
16:00:50 1854  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:50 1855  	 in_offer_chain_id	  IN NUMBER,
16:00:50 1856  	 in_action_name 	  IN VARCHAR2,
16:00:50 1857  	 out_notification_type_id OUT NUMBER
16:00:50 1858  ) AS
16:00:50 1859  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NOTIFICATION_TEMPLATE_ID';
16:00:50 1860  -- Variables
16:00:50 1861  var_action_id NUMBER;
16:00:50 1862  -- Exceptions
16:00:50 1863  BAD_ACTION_NAME	      EXCEPTION;
16:00:50 1864  MULTIPLY_ACTIONS_FOUND EXCEPTION;
16:00:50 1865  BEGIN
16:00:50 1866  
16:00:50 1867  	 BEGIN
16:00:50 1868  	   SELECT
16:00:50 1869  	     A.ID into var_action_id
16:00:50 1870  	   FROM
16:00:50 1871  	     ACTION A
16:00:50 1872  	   WHERE
16:00:50 1873  	     UPPER(A.NAME) = UPPER(in_action_name);
16:00:50 1874  	   EXCEPTION
16:00:50 1875  	     WHEN NO_DATA_FOUND THEN
16:00:50 1876  	       RAISE BAD_ACTION_NAME;
16:00:50 1877  	     WHEN TOO_MANY_ROWS THEN
16:00:50 1878  	       RAISE MULTIPLY_ACTIONS_FOUND;
16:00:50 1879  	 END;
16:00:50 1880  
16:00:50 1881  	 SELECT
16:00:50 1882  	   OCNT.NOTIFICATION_TYPE_ID into out_notification_type_id
16:00:50 1883  	 FROM
16:00:50 1884  	   OFFER_CHAIN_NOTIFICATION_TYPE OCNT
16:00:50 1885  	 WHERE
16:00:50 1886  	   OCNT.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 1887  	   AND OCNT.ACTION_ID = var_action_id;
16:00:50 1888  
16:00:50 1889  EXCEPTION
16:00:50 1890  WHEN NO_DATA_FOUND THEN
16:00:50 1891  	 out_notification_type_id := NULL;
16:00:50 1892  WHEN BAD_ACTION_NAME THEN
16:00:50 1893  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1894  	   SPROC_NAME, 'Bad action name', SQLERRM);
16:00:50 1895  WHEN MULTIPLY_ACTIONS_FOUND THEN
16:00:50 1896  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1897  	   SPROC_NAME, 'Found more then one action with given name', SQLERRM);
16:00:50 1898  WHEN OTHERS THEN
16:00:50 1899  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1900  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1901  END GET_NOTIFICATION_TYPE_ID;
16:00:50 1902  
16:00:50 1903  END PROCS_OFFER_CHAIN_V20;
16:00:50 1904  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.14
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_POLLING_SYNC"
16:00:50   2  AS
16:00:50   3  	  --------------------------------------------------------------------------------
16:00:50   4  PROCEDURE GATHER_SYNC_EVENTS
16:00:50   5  	  (
16:00:50   6  	      in_last_timestamp TIMESTAMP,
16:00:50   7  	      out_new_timestamp OUT TIMESTAMP)
16:00:50   8  IS
16:00:50   9  BEGIN
16:00:50  10  	  out_new_timestamp := systimestamp;
16:00:50  11  	  GATHER_SYNC_EVENTS_RANGE(in_last_timestamp, out_new_timestamp, (3 / 24 / 60));
16:00:50  12  END;
16:00:50  13  	  --------------------------------------------------------------------------------
16:00:50  14  PROCEDURE GATHER_SYNC_EVENTS_RANGE(in_start_ts timestamp, in_end_ts timestamp, in_offset number)
16:00:50  15  IS
16:00:50  16  BEGIN
16:00:50  17  	  INSERT
16:00:50  18  	  INTO
16:00:50  19  	      core_owner.polling_sync
16:00:50  20  	      (
16:00:50  21  		  account_id,
16:00:50  22  		  group_id,
16:00:50  23  		  event_type,
16:00:50  24  		  event_date
16:00:50  25  	      )
16:00:50  26  	  select id, group_id, event_type, event_date from (
16:00:50  27  	      SELECT
16:00:50  28  		  a.id,
16:00:50  29  		  a.group_id,
16:00:50  30  		  'I' event_type,
16:00:50  31  		  in_end_ts event_date,
16:00:50  32  		  max(cl.change_time) last_change_time
16:00:50  33  	      FROM
16:00:50  34  		  core_hist_owner.change_log cl,
16:00:50  35  		  core_owner.credit_card cc,
16:00:50  36  		  core_owner.account a
16:00:50  37  	      WHERE
16:00:50  38  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:00:50  39  	      AND cl.item = 'CREDIT_CARD'
16:00:50  40  	      AND cl.id = cc.id
16:00:50  41  	      AND cc.account_id = a.id
16:00:50  42  	      GROUP BY a.id, a.group_id
16:00:50  43  	      UNION ALL
16:00:50  44  	      SELECT
16:00:50  45  		  a.id,
16:00:50  46  		  a.group_id,
16:00:50  47  		  'I',
16:00:50  48  		  in_end_ts,
16:00:50  49  		  max(cl.change_time) last_change_time
16:00:50  50  	      FROM
16:00:50  51  		  core_hist_owner.change_log cl,
16:00:50  52  		  core_owner.paypal p,
16:00:50  53  		  core_owner.account a
16:00:50  54  	      WHERE
16:00:50  55  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:00:50  56  	      AND cl.item = 'PAYPAL'
16:00:50  57  	      AND cl.id = p.id
16:00:50  58  	      AND p.account_id = a.id
16:00:50  59  	      GROUP BY a.id, a.group_id
16:00:50  60  	      UNION ALL
16:00:50  61  	      SELECT
16:00:50  62  		  a.id,
16:00:50  63  		  a.group_id,
16:00:50  64  		  'S',
16:00:50  65  		  in_end_ts,
16:00:50  66  		  max(cl.change_time) last_change_time
16:00:50  67  	      FROM
16:00:50  68  		  core_hist_owner.change_log cl,
16:00:50  69  		  core_owner.subscription s,
16:00:50  70  		  core_owner.account a
16:00:50  71  	      WHERE
16:00:50  72  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:00:50  73  	      AND cl.item = 'SUBSCRIPTION'
16:00:50  74  	      AND cl.id = s.id
16:00:50  75  	      AND s.account_id = a.id
16:00:50  76  	      GROUP BY a.id, a.group_id
16:00:50  77  	      UNION ALL
16:00:50  78  	      SELECT
16:00:50  79  		  a.id,
16:00:50  80  		  a.group_id,
16:00:50  81  		  'G',
16:00:50  82  		  in_end_ts,
16:00:50  83  		  max(cl.change_time) last_change_time
16:00:50  84  	      FROM
16:00:50  85  		  core_hist_owner.change_log cl,
16:00:50  86  		  core_owner.gift_certificate gc,
16:00:50  87  		  core_owner.account a
16:00:50  88  	      WHERE
16:00:50  89  		  cl.change_time between in_start_ts-in_offset and in_end_ts
16:00:50  90  	      AND cl.item = 'GIFT_CERTIFICATE'
16:00:50  91  	      AND cl.id = gc.id
16:00:50  92  	      AND gc.purchaser_group_id = a.group_id
16:00:50  93  	      GROUP BY a.id, a.group_id
16:00:50  94  	  ) t
16:00:50  95  	  where not exists (
16:00:50  96  	      select 1 --ps.account_id, ps.group_id, ps.event_type
16:00:50  97  	      from polling_sync ps
16:00:50  98  	      where ps.account_id = t.id
16:00:50  99  		and ps.group_id = t.group_id
16:00:50 100  		and ps.event_type = t.event_type
16:00:50 101  		and ps.event_date >= t.last_change_time
16:00:50 102  	  )
16:00:50 103  	  ;
16:00:50 104  END;
16:00:50 105  --------------------------------------------------------------------------------
16:00:50 106  FUNCTION CREATE_NEW_TRANSFER_SET
16:00:50 107  	  (
16:00:50 108  	      in_set_maximum NUMBER)
16:00:50 109  	  RETURN core_owner.polling_sync.set_id%type
16:00:50 110  IS
16:00:50 111  	  pragma autonomous_transaction;
16:00:50 112  	  v_set_id core_owner.polling_sync.set_id%type;
16:00:50 113  BEGIN
16:00:50 114  	  SELECT
16:00:50 115  	      pollsync_setid_seq.nextval
16:00:50 116  	  INTO
16:00:50 117  	      v_set_id
16:00:50 118  	  FROM
16:00:50 119  	      dual;
16:00:50 120  	  update
16:00:50 121  	    core_owner.polling_sync ps
16:00:50 122  	  set
16:00:50 123  	    ps.set_id = v_set_id
16:00:50 124  	  where
16:00:50 125  	    ps.set_id IS NULL and
16:00:50 126  	    rownum <= in_set_maximum
16:00:50 127  	  ;
16:00:50 128  	  COMMIT;
16:00:50 129  	  RETURN v_set_id;
16:00:50 130  END;
16:00:50 131  --------------------------------------------------------------------------------
16:00:50 132  FUNCTION RETREIVE_TRANSFER_SET
16:00:50 133  	  (
16:00:50 134  	      in_set_id core_owner.polling_sync.set_id%type)
16:00:50 135  	  RETURN sys_refcursor
16:00:50 136  IS
16:00:50 137  	  v_refcursor sys_refcursor;
16:00:50 138  BEGIN
16:00:50 139  	  UPDATE
16:00:50 140  	      core_owner.polling_sync ps
16:00:50 141  	  SET
16:00:50 142  	      ps.last_send_date = sysdate,
16:00:50 143  	      ps.num_calls = ps.num_calls + 1
16:00:50 144  	  WHERE
16:00:50 145  	      ps.set_id = in_set_id ;
16:00:50 146  	  OPEN v_refcursor FOR
16:00:50 147  	  SELECT
16:00:50 148  	      ps.set_id,
16:00:50 149  	      ps.group_id,
16:00:50 150  	      ps.event_type,
16:00:50 151  	      ps.event_date
16:00:50 152  	  FROM
16:00:50 153  	      core_owner.polling_sync ps
16:00:50 154  	  WHERE
16:00:50 155  	      ps.set_id = in_set_id
16:00:50 156  	  AND ps.group_id IS NOT NULL ;
16:00:50 157  	  RETURN v_refcursor;
16:00:50 158  END;
16:00:50 159  --------------------------------------------------------------------------------
16:00:50 160  PROCEDURE GET_TRANSFER_SET
16:00:50 161  	  (
16:00:50 162  	      in_set_maximum NUMBER,
16:00:50 163  	      in_max_retries NUMBER,
16:00:50 164  	      out_refcursor OUT sys_refcursor)
16:00:50 165  IS
16:00:50 166  	  v_set_id core_owner.polling_sync.set_id%type;
16:00:50 167  BEGIN
16:00:50 168  	  /* Look for previously sent but unconfirmed sets and
16:00:50 169  	  send again until max_retries calls */
16:00:50 170  	  FOR x IN
16:00:50 171  	  (
16:00:50 172  	      SELECT
16:00:50 173  		  ps.set_id,
16:00:50 174  		  COUNT( *) set_size
16:00:50 175  	      FROM
16:00:50 176  		  core_owner.polling_sync ps
16:00:50 177  	      WHERE
16:00:50 178  		  ps.event_date > sysdate - 14
16:00:50 179  	      AND ps.confirm_date IS NULL
16:00:50 180  	      AND ps.last_send_date IS NOT NULL
16:00:50 181  	      AND ps.num_calls < in_max_retries
16:00:50 182  	      GROUP BY
16:00:50 183  		  ps.set_id
16:00:50 184  	      ORDER BY
16:00:50 185  		  ps.set_id
16:00:50 186  	  )
16:00:50 187  	  LOOP
16:00:50 188  	      out_refcursor := Retreive_Transfer_Set(x.set_id) ;
16:00:50 189  	      RETURN;
16:00:50 190  	  END LOOP;
16:00:50 191  	  v_set_id := Create_New_Transfer_Set(in_set_maximum) ;
16:00:50 192  	  out_refcursor := Retreive_Transfer_Set(v_set_id) ;
16:00:50 193  	  RETURN;
16:00:50 194  END;
16:00:50 195  --------------------------------------------------------------------------------
16:00:50 196  PROCEDURE CONFIRM_TRANSFER_SET
16:00:50 197  	  (
16:00:50 198  	      in_set_id core_owner.polling_sync.set_id%type)
16:00:50 199  IS
16:00:50 200  	  v_unconfirmable EXCEPTION;
16:00:50 201  BEGIN
16:00:50 202  	  UPDATE
16:00:50 203  	      core_owner.polling_sync ps
16:00:50 204  	  SET
16:00:50 205  	      ps.confirm_date = systimestamp
16:00:50 206  	  WHERE
16:00:50 207  	      ps.set_id = in_set_id
16:00:50 208  	  AND ps.confirm_date IS NULL ;
16:00:50 209  	  IF(sql%rowcount < 1) THEN
16:00:50 210  	      raise v_unconfirmable;
16:00:50 211  	  END IF;
16:00:50 212  END;
16:00:50 213  PROCEDURE SET_LAST_RUN(ts in timestamp)
16:00:50 214  IS
16:00:50 215  BEGIN
16:00:50 216  	  UPDATE POLLING_SYNC_LASTRUN
16:00:50 217  	  SET last_run = current_timestamp;
16:00:50 218  	  IF ( sql%rowcount = 0 )
16:00:50 219  	  THEN
16:00:50 220  	    INSERT INTO POLLING_SYNC_LASTRUN VALUES (ts);
16:00:50 221  	  END if;
16:00:50 222  	  COMMIT;
16:00:50 223  END;
16:00:50 224  PROCEDURE GET_LAST_RUN(ts out timestamp)
16:00:50 225  IS
16:00:50 226  BEGIN
16:00:50 227  	  SELECT LAST_RUN INTO ts
16:00:50 228  	  FROM POLLING_SYNC_LASTRUN
16:00:50 229  	  WHERE ROWNUM < 2;
16:00:50 230  EXCEPTION
16:00:50 231  	WHEN NO_DATA_FOUND
16:00:50 232  	THEN
16:00:50 233  	  ts := current_timestamp;
16:00:50 234  END;
16:00:50 235  END PROCS_POLLING_SYNC;
16:00:50 236  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PRODUCT_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE GET_PRODUCTS (
16:00:50   4  /*
16:00:50   5  Throws exceptions:
16:00:50   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50   7  */
16:00:50   8  	in_status_id   IN  NUMBER,
16:00:50   9  	out_result_set OUT SYS_REFCURSOR
16:00:50  10  ) AS
16:00:50  11  SPROC_NAME CONSTANT VARCHAR2(12) := 'GET_PRODUCTS';
16:00:50  12  BEGIN
16:00:50  13  	OPEN out_result_set FOR
16:00:50  14  	SELECT
16:00:50  15  	  PRODUCT.ID,
16:00:50  16  	  PRODUCT.NAME,
16:00:50  17  	  PRODUCT.UNIT_PRICE,
16:00:50  18  	  PRODUCT.PRODUCTION_COST,
16:00:50  19  	  PRODUCT.CREATE_DATE,
16:00:50  20  	  PRODUCT.CREATED_BY,
16:00:50  21  	  PRODUCT.PRODUCT_STATUS_ID,
16:00:50  22  	  PRODUCT.PRODUCT_URI
16:00:50  23  	FROM
16:00:50  24  	  PRODUCT
16:00:50  25   WHERE
16:00:50  26  	  PRODUCT.PRODUCT_STATUS_ID = NVL(in_status_id, PRODUCT.PRODUCT_STATUS_ID);
16:00:50  27  EXCEPTION
16:00:50  28  WHEN OTHERS THEN
16:00:50  29  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50  30  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50  31  END GET_PRODUCTS;
16:00:50  32  
16:00:50  33  /******************************************************************************/
16:00:50  34  
16:00:50  35  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:50  36  	in_product_offering_id	IN NUMBER,
16:00:50  37  	out_result_set OUT SYS_REFCURSOR
16:00:50  38  ) AS
16:00:50  39  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_META_DATA';
16:00:50  40  -- VARIABLES
16:00:50  41  temp_product_offering_id NUMBER;
16:00:50  42  -- EXCEPTIONS
16:00:50  43  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:00:50  44  BEGIN
16:00:50  45  
16:00:50  46  	-- Check that product offering exists
16:00:50  47  	BEGIN
16:00:50  48  	  SELECT
16:00:50  49  	    PRODUCT_OFFERING.ID into temp_product_offering_id
16:00:50  50  	  FROM
16:00:50  51  	    PRODUCT_OFFERING
16:00:50  52  	  WHERE
16:00:50  53  	    PRODUCT_OFFERING.ID = in_product_offering_id;
16:00:50  54  	  EXCEPTION
16:00:50  55  	    WHEN NO_DATA_FOUND THEN
16:00:50  56  	      RAISE BAD_PRODUCT_OFFERING_ID;
16:00:50  57  	END;
16:00:50  58  
16:00:50  59  	OPEN out_result_set FOR
16:00:50  60  	SELECT
16:00:50  61  	  PRODUCT_OFFERING_META_DATA.ID,
16:00:50  62  	  PRODUCT_OFFERING_META_DATA.NAME,
16:00:50  63  	  PRODUCT_OFFERING_META_DATA.VALUE,
16:00:50  64  	  PRODUCT_OFFERING_META_DATA.CREATED_BY,
16:00:50  65  	  PRODUCT_OFFERING_META_DATA.CREATE_DATE
16:00:50  66  	FROM
16:00:50  67  	  PRODUCT_OFFERING_META_DATA
16:00:50  68  	WHERE
16:00:50  69  	  PRODUCT_OFFERING_META_DATA.PRODUCT_OFFERING_ID = in_product_offering_id;
16:00:50  70  
16:00:50  71  EXCEPTION
16:00:50  72  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:00:50  73  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50  74  	  SPROC_NAME, 'No such product offering id');
16:00:50  75  WHEN OTHERS THEN
16:00:50  76  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50  77  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50  78  END GET_PRODUCT_OFFERING_META_DATA;
16:00:50  79  
16:00:50  80  /******************************************************************************/
16:00:50  81  
16:00:50  82  PROCEDURE GET_PRODUCT_ELIGIBIL_BY_NAME (
16:00:50  83  /*
16:00:50  84  Throws exceptions:
16:00:50  85  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50  86  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50  87  */
16:00:50  88  	in_product_id	    IN NUMBER,
16:00:50  89  	in_eligibility_name IN VARCHAR2 DEFAULT NULL,
16:00:50  90  	out_result_set	    OUT SYS_REFCURSOR
16:00:50  91  ) AS
16:00:50  92  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_PRODUCT_ELIGIBIL_BY_NAME';
16:00:50  93  -- VARIABLES
16:00:50  94  temp_product_id NUMBER;
16:00:50  95  -- EXCEPTIONS
16:00:50  96  BAD_PRODUCT_ID EXCEPTION;
16:00:50  97  BEGIN
16:00:50  98  
16:00:50  99  	BEGIN
16:00:50 100  	  SELECT
16:00:50 101  	    PRODUCT.ID into temp_product_id
16:00:50 102  	  FROM
16:00:50 103  	    PRODUCT
16:00:50 104  	  WHERE
16:00:50 105  	    PRODUCT.ID = in_product_id;
16:00:50 106  	  EXCEPTION
16:00:50 107  	    WHEN NO_DATA_FOUND THEN
16:00:50 108  	      RAISE BAD_PRODUCT_ID;
16:00:50 109  	END;
16:00:50 110  
16:00:50 111  	OPEN out_result_set FOR
16:00:50 112  	SELECT
16:00:50 113  	  PRODUCT_ELIGIBILITY.ID
16:00:50 114  	FROM
16:00:50 115  	  PRODUCT_ELIGIBILITY
16:00:50 116  	WHERE
16:00:50 117  	  PRODUCT_ELIGIBILITY.ID = in_product_id
16:00:50 118  	  AND UPPER(PRODUCT_ELIGIBILITY.NAME) = UPPER(NVL(in_eligibility_name, PRODUCT_ELIGIBILITY.NAME));
16:00:50 119  
16:00:50 120  EXCEPTION
16:00:50 121  WHEN BAD_PRODUCT_ID THEN
16:00:50 122  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 123  	  SPROC_NAME, 'No such product');
16:00:50 124  WHEN OTHERS THEN
16:00:50 125  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 126  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 127  END GET_PRODUCT_ELIGIBIL_BY_NAME;
16:00:50 128  
16:00:50 129  /******************************************************************************/
16:00:50 130  
16:00:50 131  PROCEDURE GET_PRODUCT_BY_ID (
16:00:50 132  	in_product_id  IN NUMBER,
16:00:50 133  	out_result_set OUT SYS_REFCURSOR
16:00:50 134  ) AS
16:00:50 135  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_PRODUCT_BY_ID';
16:00:50 136  -- VARIABLES
16:00:50 137  temp_product_id NUMBER;
16:00:50 138  -- EXCEPTIONS
16:00:50 139  BAD_PRODUCT_ID EXCEPTION;
16:00:50 140  BEGIN
16:00:50 141  
16:00:50 142  	BEGIN
16:00:50 143  	  SELECT
16:00:50 144  	    PRODUCT.ID into temp_product_id
16:00:50 145  	  FROM
16:00:50 146  	    PRODUCT
16:00:50 147  	  WHERE
16:00:50 148  	    PRODUCT.ID = in_product_id;
16:00:50 149  	  EXCEPTION
16:00:50 150  	    WHEN NO_DATA_FOUND THEN
16:00:50 151  	      RAISE BAD_PRODUCT_ID;
16:00:50 152  	END;
16:00:50 153  
16:00:50 154  	OPEN out_result_set FOR
16:00:50 155  	SELECT
16:00:50 156  	  PRODUCT.ID,
16:00:50 157  	  PRODUCT.NAME,
16:00:50 158  	  PRODUCT.PRODUCT_STATUS_ID,
16:00:50 159  	  PRODUCT.PRODUCT_URI,
16:00:50 160  	  PRODUCT.PRODUCTION_COST,
16:00:50 161  	  PRODUCT.UNIT_PRICE,
16:00:50 162  	  PRODUCT.CREATE_DATE,
16:00:50 163  	  PRODUCT.CREATED_BY
16:00:50 164  	FROM
16:00:50 165  	  PRODUCT
16:00:50 166  	WHERE
16:00:50 167  	  PRODUCT.ID = in_product_id;
16:00:50 168  
16:00:50 169  EXCEPTION
16:00:50 170  WHEN BAD_PRODUCT_ID THEN
16:00:50 171  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 172  	  SPROC_NAME, 'No such product');
16:00:50 173  WHEN OTHERS THEN
16:00:50 174  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 175  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 176  END GET_PRODUCT_BY_ID;
16:00:50 177  
16:00:50 178  /******************************************************************************/
16:00:50 179  
16:00:50 180  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:00:50 181  	in_line_item_id IN NUMBER,
16:00:50 182  	out_result_set	OUT SYS_REFCURSOR
16:00:50 183  ) AS
16:00:50 184  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_LINE_IT_ID';
16:00:50 185  -- VARIABLES
16:00:50 186  temp_line_item_id NUMBER;
16:00:50 187  -- EXCEPTIONS
16:00:50 188  BAD_LINE_ITEM_ID EXCEPTION;
16:00:50 189  BEGIN
16:00:50 190  
16:00:50 191  	BEGIN
16:00:50 192  	  SELECT
16:00:50 193  	    LINE_ITEM.ID into temp_line_item_id
16:00:50 194  	  FROM
16:00:50 195  	    LINE_ITEM
16:00:50 196  	  WHERE
16:00:50 197  	    LINE_ITEM.ID = in_line_item_id;
16:00:50 198  	  EXCEPTION
16:00:50 199  	    WHEN NO_DATA_FOUND THEN
16:00:50 200  	      RAISE BAD_LINE_ITEM_ID;
16:00:50 201  	END;
16:00:50 202  
16:00:50 203  	OPEN out_result_set FOR
16:00:50 204  	SELECT
16:00:50 205  	  PRODUCT_OFFERING.ID,
16:00:50 206  	  PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 207  	  PRODUCT_OFFERING.QUANTITY,
16:00:50 208  	  PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 209  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 210  	  PRODUCT_OFFERING.CREATE_DATE,
16:00:50 211  	  PRODUCT_OFFERING.CREATED_BY,
16:00:50 212  	  PRODUCT_OFFERING.TAX_POLICY_TYPE_ID,
16:00:50 213  	  CAPABILITY.ID CAP_ID,
16:00:50 214  	  CAPABILITY.CODE CAP_CODE,
16:00:50 215  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 216  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 217  	FROM
16:00:50 218  	  PRODUCT_OFFERING
16:00:50 219  	  INNER JOIN LINE_ITEM ON LINE_ITEM.PRODUCT_OFFER_ID = PRODUCT_OFFERING.ID
16:00:50 220  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 221  	WHERE
16:00:50 222  	  LINE_ITEM.ID = in_line_item_id;
16:00:50 223  
16:00:50 224  EXCEPTION
16:00:50 225  WHEN BAD_LINE_ITEM_ID THEN
16:00:50 226  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 227  	  SPROC_NAME, 'No such line item');
16:00:50 228  WHEN OTHERS THEN
16:00:50 229  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 230  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 231  END GET_PRD_OFFERING_BY_LINE_IT_ID;
16:00:50 232  
16:00:50 233  /******************************************************************************/
16:00:50 234  
16:00:50 235  PROCEDURE GET_PRD_OFFERING_BY_ID (
16:00:50 236  	in_product_offering_id IN NUMBER,
16:00:50 237  	out_result_set	OUT SYS_REFCURSOR
16:00:50 238  ) AS
16:00:50 239  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRD_OFFERING_BY_ID';
16:00:50 240  BEGIN
16:00:50 241  	OPEN out_result_set FOR
16:00:50 242  	SELECT
16:00:50 243  	  PRODUCT_OFFERING.ID,
16:00:50 244  	  PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 245  	  PRODUCT_OFFERING.QUANTITY,
16:00:50 246  	  PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 247  	  PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 248  	  PRODUCT_OFFERING.CREATE_DATE,
16:00:50 249  	  PRODUCT_OFFERING.CREATED_BY,
16:00:50 250  	  CAPABILITY.ID CAP_ID,
16:00:50 251  	  CAPABILITY.CODE CAP_CODE,
16:00:50 252  	  CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 253  	  CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 254  	FROM
16:00:50 255  	  PRODUCT_OFFERING
16:00:50 256  	  INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 257  	WHERE
16:00:50 258  	  PRODUCT_OFFERING.ID = in_product_offering_id;
16:00:50 259  
16:00:50 260  EXCEPTION
16:00:50 261  WHEN OTHERS THEN
16:00:50 262  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 264  END GET_PRD_OFFERING_BY_ID;
16:00:50 265  
16:00:50 266  /******************************************************************************/
16:00:50 267  
16:00:50 268  PROCEDURE GET_PRODUCT_OFFERING_DISCOUNTS(
16:00:50 269  	in_product_offering_id IN NUMBER,
16:00:50 270  	out_result_set	       OUT SYS_REFCURSOR
16:00:50 271  ) AS
16:00:50 272  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PRODUCT_OFFERING_DISCOUNTS';
16:00:50 273  -- VARIABLES
16:00:50 274  temp_product_offering_id NUMBER;
16:00:50 275  -- EXCEPTIONS
16:00:50 276  BAD_PRODUCT_OFFERING_ID EXCEPTION;
16:00:50 277  BEGIN
16:00:50 278  
16:00:50 279  	BEGIN
16:00:50 280  	  SELECT
16:00:50 281  	    PRODUCT_OFFERING.ID into temp_product_offering_id
16:00:50 282  	  FROM
16:00:50 283  	    PRODUCT_OFFERING
16:00:50 284  	  WHERE
16:00:50 285  	    PRODUCT_OFFERING.ID = in_product_offering_id;
16:00:50 286  	  EXCEPTION
16:00:50 287  	    WHEN NO_DATA_FOUND THEN
16:00:50 288  	      RAISE BAD_PRODUCT_OFFERING_ID;
16:00:50 289  	END;
16:00:50 290  
16:00:50 291  	OPEN out_result_set FOR
16:00:50 292  	SELECT
16:00:50 293  	  DISCOUNT.ID,
16:00:50 294  	  DISCOUNT.NAME,
16:00:50 295  	  DISCOUNT.FIXED_AMOUNT,
16:00:50 296  	  DISCOUNT.PERCENT_AMOUNT,
16:00:50 297  	  DISCOUNT.DISCOUNT_TYPE_ID,
16:00:50 298  	  DISCOUNT.CREATE_DATE,
16:00:50 299  	  DISCOUNT.CREATED_BY,
16:00:50 300  	  DISCOUNT.DESCRIPTION
16:00:50 301  	FROM
16:00:50 302  	  DISCOUNT
16:00:50 303  	  INNER JOIN DISCOUNT_PRODUCT_OFFERING on DISCOUNT.ID = DISCOUNT_PRODUCT_OFFERING.DISCOUNT_ID
16:00:50 304  	WHERE
16:00:50 305  	  DISCOUNT_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = in_product_offering_id;
16:00:50 306  
16:00:50 307  EXCEPTION
16:00:50 308  WHEN BAD_PRODUCT_OFFERING_ID THEN
16:00:50 309  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 310  	  SPROC_NAME, 'No such product offering');
16:00:50 311  WHEN OTHERS THEN
16:00:50 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 314  END GET_PRODUCT_OFFERING_DISCOUNTS;
16:00:50 315  
16:00:50 316  END PROCS_PRODUCT_V20;
16:00:50 317  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE
16:00:50   2  PACKAGE BODY PROCS_REPORTING AS
16:00:50   3  
16:00:50   4  ----
16:00:50   5  --------------------------------------------------------------------------------
16:00:50   6  ----
16:00:50   7  	  procedure ext_charge(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50   8  	  is
16:00:50   9  	  begin
16:00:50  10  	      open out_cursor for
16:00:50  11  		  with ids as ( select id from change_log cl where cl.item = 'CHARGE' and cl.change_time between in_start_date and in_end_date group by id )
16:00:50  12  		  select c.id charge_id, c.invoice_id, c.transaction_id, c.instrument_type_id, it.value instrument_type
16:00:50  13  			,c.instrument_id, c.charge_amount, c.charge_status_id, cs.value charge_status
16:00:50  14  			,c.create_date, c.update_date
16:00:50  15  		  from charge c
16:00:50  16  		      ,charge_status cs
16:00:50  17  		      ,instrument_type it
16:00:50  18  		      ,ids
16:00:50  19  		  where c.id = ids.id
16:00:50  20  		    and c.charge_status_id = cs.id
16:00:50  21  		    and c.instrument_type_id = it.id
16:00:50  22  	      ;
16:00:50  23  	  end;
16:00:50  24  ----
16:00:50  25  --------------------------------------------------------------------------------
16:00:50  26  ----
16:00:50  27  	  procedure ext_license(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50  28  	  is
16:00:50  29  	  begin
16:00:50  30  	      open out_cursor for
16:00:50  31  		  with ids as (select id from change_log cl where cl.item = 'LICENSE' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50  32  		  select l.id license_id, l.start_date, l.end_date, l.offer_id, l.subscription_id, l.invoice_id
16:00:50  33  			,l.license_status_id, ls.value license_status ,l.create_date, l.update_date
16:00:50  34  			,l.current_offer_index, l.current_offer_recurr_num, l.entitlement_end_date, l.grace_start_date, l.grace_end_date
16:00:50  35  		  from license l
16:00:50  36  		      ,license_status ls
16:00:50  37  		      ,ids
16:00:50  38  		  where l.id = ids.id
16:00:50  39  		    and l.license_status_id = ls.id
16:00:50  40  	      ;
16:00:50  41  	  end;
16:00:50  42  ----
16:00:50  43  --------------------------------------------------------------------------------
16:00:50  44  ----
16:00:50  45  	  procedure ext_invoice(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50  46  	  is
16:00:50  47  	  begin
16:00:50  48  	      open out_cursor for
16:00:50  49  		  with ids as ( select id from change_log cl where cl.item = 'INVOICE' and cl.change_time between in_start_date and in_end_date group by id )
16:00:50  50  		  select
16:00:50  51  		    i.id invoice_id,
16:00:50  52  		    i.create_date,
16:00:50  53  		    i.update_date,
16:00:50  54  		    i.invoice_status_id,
16:00:50  55  		    istat.value invoice_status,
16:00:50  56  		    NVL(
16:00:50  57  		       (select offer_chain_id from gift_certificate g where g.purchase_invoice_id = i.id and rownum <= 1),
16:00:50  58  		       (select offer_chain_id from subscription s, license l where l.subscription_id = s.id and l.invoice_id = i.id and rownum <= 1)
16:00:50  59  		    ) offer_chain_id
16:00:50  60  		  from	   invoice i
16:00:50  61  		      join invoice_status istat ON istat.id = i.invoice_status_id
16:00:50  62  		      join ids			on ids.id = i.id
16:00:50  63  		  where 1 = 1
16:00:50  64  	      ;
16:00:50  65  	  end;
16:00:50  66  ----
16:00:50  67  --------------------------------------------------------------------------------
16:00:50  68  ----
16:00:50  69  	  procedure ext_line_item(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50  70  	  is
16:00:50  71  	  begin
16:00:50  72  	      open out_cursor for
16:00:50  73  		  with ids as ( select id from change_log cl where cl.item = 'LINE_ITEM' and cl.change_time between in_start_date and in_end_date group by id )
16:00:50  74  		  select li.id line_item_id, li.invoice_id, li.product_offer_id, li.amount, li.quantity
16:00:50  75  		    ,li.discount_amount, li.taxes_amount, li.create_date
16:00:50  76  		  from line_item li
16:00:50  77  		    , ids
16:00:50  78  		  where li.id = ids.id
16:00:50  79  	      ;
16:00:50  80  	  end;
16:00:50  81  ----
16:00:50  82  --------------------------------------------------------------------------------
16:00:50  83  ----
16:00:50  84  	  procedure ext_account(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50  85  	  is
16:00:50  86  	  begin
16:00:50  87  	      open out_cursor for
16:00:50  88  		  with ids as (select id from change_log cl where cl.item = 'ACCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50  89  		  select a.id account_id, a.account_status_id, astat.value account_status, a.group_id, a.suspend_date
16:00:50  90  			,a.create_date, a.update_date, a.instrument_type_id, it.value instrument_type
16:00:50  91  			,a.instrument_id, a.tax_exempt_id
16:00:50  92  			-- need system category??
16:00:50  93  		  from account a
16:00:50  94  		      ,account_status astat
16:00:50  95  		      ,instrument_type it
16:00:50  96  		      , ids
16:00:50  97  		  where a.id = ids.id
16:00:50  98  		    and astat.id = a.account_status_id
16:00:50  99  		    and a.instrument_type_id = it.id(+)
16:00:50 100  	      ;
16:00:50 101  	  end;
16:00:50 102  ----
16:00:50 103  --------------------------------------------------------------------------------
16:00:50 104  ----
16:00:50 105  	  procedure ext_subscription(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 106  	  is
16:00:50 107  	  begin
16:00:50 108  	      open out_cursor for
16:00:50 109  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 110  		  select s.id subscription_id, s.account_id, s.purchase_date, s.offer_chain_id
16:00:50 111  			,s.cancellation_date, sct.value cancellation_reason,0 cancellation_is_credit
16:00:50 112  			,s.create_date, s.update_date, s.subscription_status_id, ss.value subscription_status
16:00:50 113  			,s.instrument_type_id, it.value instrument_type, s.instrument_id, s.updated_by
16:00:50 114  		  from subscription s
16:00:50 115  		      ,subscription_status ss
16:00:50 116  		      ,subscription_cancel_reason sct
16:00:50 117  		      ,instrument_type it
16:00:50 118  		      , ids
16:00:50 119  		  where s.id = ids.id
16:00:50 120  		    and ss.id = s.subscription_status_id
16:00:50 121  		    and s.instrument_type_id = it.id
16:00:50 122  		    and sct.id(+) = s.sct_id
16:00:50 123  	      ;
16:00:50 124  	  end;
16:00:50 125  ----
16:00:50 126  --------------------------------------------------------------------------------
16:00:50 127  ----
16:00:50 128  	  procedure ext_transaction(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 129  	  is
16:00:50 130  	  begin
16:00:50 131  	      open out_cursor for
16:00:50 132  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 133  		  select t.id transaction_id, t.transaction_amount
16:00:50 134  			,t.transaction_status_id, ts.value transaction_status, t.order_id
16:00:50 135  			,t.create_date, t.update_date, t.is_settled
16:00:50 136  		  from transaction t
16:00:50 137  		      ,transaction_status ts
16:00:50 138  		      , ids
16:00:50 139  		  where t.id = ids.id
16:00:50 140  		    and t.transaction_status_id = ts.id
16:00:50 141  	      ;
16:00:50 142  	  end;
16:00:50 143  ----
16:00:50 144  --------------------------------------------------------------------------------
16:00:50 145  ----
16:00:50 146  	  procedure ext_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 147  	  is
16:00:50 148  	  begin
16:00:50 149  	      open out_cursor for
16:00:50 150  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 151  		  select oc.id offer_chain_id, oc.name, oc.description, oc.offer_chain_status_id, ocs.value offer_chain_status
16:00:50 152  			,oc.adoptability_window_start_date adoptability_start_date, oc.adoptability_window_end_date adoptability_end_date
16:00:50 153  			,oc.is_gift_certificate, oc.product_uri, oc.create_date, oc.update_date, oc.vendor_source_id, vs.name vendor_source_name
16:00:50 154  			,oc.billing_source_id, bs.name billing_source_name
16:00:50 155  			,oc.is_seat_license,oc.group_account_type_id
16:00:50 156  		  from offer_chain oc
16:00:50 157  		      , offer_chain_status ocs
16:00:50 158  		      , ids
16:00:50 159  		      , vendor_source vs
16:00:50 160  		      , billing_source bs
16:00:50 161  		  where oc.id = ids.id
16:00:50 162  		    and oc.offer_chain_status_id = ocs.id
16:00:50 163  		    and oc.vendor_source_id = vs.id
16:00:50 164  		    and oc.billing_source_id = bs.id
16:00:50 165  	      ;
16:00:50 166  	  end;
16:00:50 167  ----
16:00:50 168  --------------------------------------------------------------------------------
16:00:50 169  ----
16:00:50 170  	  procedure ext_offer_offer_chain(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 171  	  is
16:00:50 172  	  begin
16:00:50 173  	      open out_cursor for
16:00:50 174  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_OFFER_CHAIN' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:00:50 175  		  select ooc.offer_id||'~'||ooc.offer_chain_id offer_offer_chain_id, ooc.offer_id, ooc.offer_chain_id
16:00:50 176  			,ooc.index_value, ooc.num_recurrences, ooc.create_date, ooc.update_date
16:00:50 177  		  from offer_offer_chain ooc
16:00:50 178  		  , ids
16:00:50 179  		  where ooc.offer_id||'~'||ooc.offer_chain_id = ids.id
16:00:50 180  	      ;
16:00:50 181  	  end;
16:00:50 182  ----
16:00:50 183  --------------------------------------------------------------------------------
16:00:50 184  ----
16:00:50 185  	  procedure ext_offer(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 186  	  is
16:00:50 187  	  begin
16:00:50 188  	      open out_cursor for
16:00:50 189  		  with ids as (select id from change_log cl where cl.item = 'OFFER' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 190  		  select o.id offer_id, o.offer_status_id, os.value offer_status, o.entitlement_duration, o.create_date, o.update_date
16:00:50 191  		  from offer o
16:00:50 192  		      ,offer_status os
16:00:50 193  		      , ids
16:00:50 194  		  where o.id = ids.id
16:00:50 195  		    and o.offer_status_id = os.id
16:00:50 196  	      ;
16:00:50 197  	  end;
16:00:50 198  ----
16:00:50 199  --------------------------------------------------------------------------------
16:00:50 200  ----
16:00:50 201  	  procedure ext_gift_certificate(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 202  	  is
16:00:50 203  	  begin
16:00:50 204  	      open out_cursor for
16:00:50 205  		  with ids as (select id from change_log cl where cl.item = 'GIFT_CERTIFICATE' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 206  		  select  gc.id gift_certificate_id, gc.purchaser_group_id, gc.purchase_invoice_id, gc.offer_chain_id
16:00:50 207  			 ,gc.expiration_date, gc.purchase_date
16:00:50 208  			 ,gc.gift_certificate_status_id, gcs.value gift_certificate_status, gc.redeemer_group_id
16:00:50 209  			 ,gc.finalized_invoice_id, gc.create_date, gc.update_date
16:00:50 210  			 ,recipient_address_id
16:00:50 211  			 ,redeemer_address_id
16:00:50 212  			 ,recipient_notify_date
16:00:50 213  			 ,recipient_name
16:00:50 214  			 ,redemption_date
16:00:50 215  			 ,recipient_email
16:00:50 216  		  from gift_certificate gc
16:00:50 217  		      ,gift_certificate_status gcs
16:00:50 218  		      , ids
16:00:50 219  		  where gc.id = ids.id
16:00:50 220  		    and gc.gift_certificate_status_id = gcs.id
16:00:50 221  	      ;
16:00:50 222  	  end;
16:00:50 223  ----
16:00:50 224  --------------------------------------------------------------------------------
16:00:50 225  ----
16:00:50 226  	  procedure ext_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 227  	  is
16:00:50 228  	  begin
16:00:50 229  	      open out_cursor for
16:00:50 230  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 231  		  select po.id product_offering_id, po.product_id, po.unit_price, po.quantity, po.create_date
16:00:50 232  		  from product_offering po
16:00:50 233  		  , ids
16:00:50 234  		  where po.id = ids.id
16:00:50 235  	      ;
16:00:50 236  	  end;
16:00:50 237  ----
16:00:50 238  --------------------------------------------------------------------------------
16:00:50 239  ----
16:00:50 240  	  procedure ext_product(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 241  	  is
16:00:50 242  	  begin
16:00:50 243  	      open out_cursor for
16:00:50 244  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 245  		  select p.id product_id, p.name, p.unit_price, p.production_cost, p.product_status_id, ps.value product_status
16:00:50 246  			,product_uri, p.create_date
16:00:50 247  		  from product p
16:00:50 248  		      ,product_status ps
16:00:50 249  		      , ids
16:00:50 250  		  where p.id = ids.id
16:00:50 251  		    and p.product_status_id = ps.id
16:00:50 252  	      ;
16:00:50 253  	  end;
16:00:50 254  ----
16:00:50 255  --------------------------------------------------------------------------------
16:00:50 256  ----
16:00:50 257  	  procedure ext_offer_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 258  	  is
16:00:50 259  	  begin
16:00:50 260  	      open out_cursor for
16:00:50 261  		  with ids as (select combined_id id from change_log cl where cl.item = 'OFFER_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:00:50 262  		  select opo.product_offering_id||'~'||opo.offer_id, opo.product_offering_id, opo.offer_id, opo.create_date
16:00:50 263  		  from offer_product_offering opo
16:00:50 264  		  , ids
16:00:50 265  		  where opo.product_offering_id||'~'||opo.offer_id = ids.id
16:00:50 266  	      ;
16:00:50 267  	  end;
16:00:50 268  ----
16:00:50 269  --------------------------------------------------------------------------------
16:00:50 270  ----
16:00:50 271  	  procedure ext_discount_product_offering(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 272  	  is
16:00:50 273  	  begin
16:00:50 274  	      open out_cursor for
16:00:50 275  		  with ids as (select combined_id id from change_log cl where cl.item = 'DISCOUNT_PRODUCT_OFFERING' and cl.change_time between in_start_date and in_end_date group by combined_id)
16:00:50 276  		  select dpo.discount_id||'~'||dpo.product_offering_id, dpo.discount_id, dpo.product_offering_id, dpo.create_date
16:00:50 277  		  from discount_product_offering dpo
16:00:50 278  		  , ids
16:00:50 279  		  where dpo.discount_id||'~'||dpo.product_offering_id = ids.id
16:00:50 280  	      ;
16:00:50 281  	  end;
16:00:50 282  ----
16:00:50 283  --------------------------------------------------------------------------------
16:00:50 284  ----
16:00:50 285  	  procedure ext_discount(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 286  	  is
16:00:50 287  	  begin
16:00:50 288  	      open out_cursor for
16:00:50 289  		  with ids as (select id from change_log cl where cl.item = 'DISCOUNT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 290  		  select d.id discount_id, d.name, d.description, d.fixed_amount, d.percent_amount
16:00:50 291  			,d.discount_type_id, dt.value discount_type, d.create_date
16:00:50 292  		  from discount d
16:00:50 293  		      ,discount_type dt
16:00:50 294  		      , ids
16:00:50 295  		  where d.id = ids.id
16:00:50 296  		    and d.discount_type_id = dt.id
16:00:50 297  	      ;
16:00:50 298  	  end;
16:00:50 299  ----
16:00:50 300  --------------------------------------------------------------------------------
16:00:50 301  ----
16:00:50 302  	  procedure ext_product_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 303  	  is
16:00:50 304  	  begin
16:00:50 305  	      open out_cursor for
16:00:50 306  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 307  		  select pg.id product_eligibility_id, pg.product_id, pg.name, pg.value, pg.create_date
16:00:50 308  		  from product_eligibility pg
16:00:50 309  		  , ids
16:00:50 310  		  where pg.id = ids.id
16:00:50 311  	      ;
16:00:50 312  	  end;
16:00:50 313  ----
16:00:50 314  --------------------------------------------------------------------------------
16:00:50 315  ----
16:00:50 316  	  procedure ext_offer_chain_eligibility(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 317  	  is
16:00:50 318  	  begin
16:00:50 319  	      open out_cursor for
16:00:50 320  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_ELIGIBILITY' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 321  		  select oce.id offer_chain_eligibility_id, oce.offer_chain_id, oce.name, oce.value, oce.create_date
16:00:50 322  		  from offer_chain_eligibility oce
16:00:50 323  		  , ids
16:00:50 324  		  where oce.id = ids.id
16:00:50 325  	      ;
16:00:50 326  	  end;
16:00:50 327  ----
16:00:50 328  --------------------------------------------------------------------------------
16:00:50 329  ----
16:00:50 330  	  procedure ext_offer_chain_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 331  	  is
16:00:50 332  	  begin
16:00:50 333  	      open out_cursor for
16:00:50 334  		  with ids as (select id from change_log cl where cl.item = 'OFFER_CHAIN_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 335  		  select ocm.id offer_chain_meta_data_id, ocm.offer_chain_id, ocm.name, ocm.value, ocm.create_date
16:00:50 336  		  from offer_chain_meta_data ocm
16:00:50 337  		  , ids
16:00:50 338  		  where ocm.id = ids.id
16:00:50 339  	      ;
16:00:50 340  	  end;
16:00:50 341  ----
16:00:50 342  --------------------------------------------------------------------------------
16:00:50 343  ----
16:00:50 344  	  procedure ext_product_offering_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 345  	  is
16:00:50 346  	  begin
16:00:50 347  	      open out_cursor for
16:00:50 348  		  with ids as (select id from change_log cl where cl.item = 'PRODUCT_OFFERING_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 349  		  select pom.id prod_offer_meta_data_id, pom.product_offering_id, pom.name, pom.value, pom.create_date
16:00:50 350  		  from product_offering_meta_data pom
16:00:50 351  		  , ids
16:00:50 352  		  where pom.id = ids.id
16:00:50 353  	      ;
16:00:50 354  	  end;
16:00:50 355  ----
16:00:50 356  --------------------------------------------------------------------------------
16:00:50 357  ----
16:00:50 358  	  procedure ext_subscription_metadata(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 359  	  is
16:00:50 360  	  begin
16:00:50 361  	      open out_cursor for
16:00:50 362  		  with ids as (select id from change_log cl where cl.item = 'SUBSCRIPTION_META_DATA' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 363  		  select sm.id subscription_meta_data_id, sm.subscription_id, sm.name, sm.value, sm.create_date
16:00:50 364  		  from subscription_meta_data sm
16:00:50 365  		  , ids
16:00:50 366  		  where sm.id = ids.id
16:00:50 367  	      ;
16:00:50 368  	  end;
16:00:50 369  ----
16:00:50 370  --------------------------------------------------------------------------------
16:00:50 371  ----
16:00:50 372  	  procedure ext_credit_card(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 373  	  is
16:00:50 374  	  begin
16:00:50 375  	      open out_cursor for
16:00:50 376  		  with ids as (select id from change_log cl where cl.item = 'CREDIT_CARD' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 377  		  select cc.id credit_card_id, cc.account_id, cc.instrument_name, cc.state, cc.city, cc.postal_code
16:00:50 378  			,cc.country, cc.expiration_date, cc.credit_card_type_id, cct.value credit_card_type
16:00:50 379  			,cc.credit_card_status_id, ccs.value credit_card_status, cc.create_date, cc.update_date
16:00:50 380  		  from credit_card cc
16:00:50 381  		      ,credit_card_type cct
16:00:50 382  		      ,credit_card_status ccs
16:00:50 383  		      , ids
16:00:50 384  		  where cc.id = ids.id
16:00:50 385  		    and cc.credit_card_type_id = cct.id(+)
16:00:50 386  		    and cc.credit_card_status_id = ccs.id
16:00:50 387  	      ;
16:00:50 388  	  end;
16:00:50 389  ----
16:00:50 390  --------------------------------------------------------------------------------
16:00:50 391  ----
16:00:50 392  	  procedure ext_transaction_attempt(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 393  	  is
16:00:50 394  	  begin
16:00:50 395  	      open out_cursor for
16:00:50 396  		  with ids as (select id from change_log cl where cl.item = 'TRANSACTION_ATTEMPT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 397  		  select ta.id transaction_attempt_id, ta.transaction_id, ta.external_transaction_id
16:00:50 398  			,ta.transaction_start_time, ta.external_status_code, ta.external_status_message
16:00:50 399  			,ta.transaction_attempt_status_id trans_attempt_status_id, tas.value transaction_attempt_status
16:00:50 400  			,ta.create_date
16:00:50 401  		  from transaction_attempt ta
16:00:50 402  		      ,transaction_attempt_status tas
16:00:50 403  		      , ids
16:00:50 404  		  where ta.id = ids.id
16:00:50 405  		    and ta.transaction_attempt_status_id = tas.id
16:00:50 406  	      ;
16:00:50 407  	  end;
16:00:50 408  ----
16:00:50 409  --------------------------------------------------------------------------------
16:00:50 410  ----
16:00:50 411  	  procedure ext_invoice_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 412  	  is
16:00:50 413  	  begin
16:00:50 414  	      open out_cursor for
16:00:50 415  		  with ids as (select id from change_log cl where cl.item = 'INVOICE_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 416  		  select ia.id invoice_adjustment_id, ia.invoice_id, ia.is_credit, ir.value adjustment_reason, ia.charge_id
16:00:50 417  			,ia.adjustment_date, ia.create_date
16:00:50 418  		  from invoice_adjustment ia, invoice_adjustment_reason ir
16:00:50 419  		  , ids
16:00:50 420  		  where ia.id = ids.id
16:00:50 421  		  and ir.id = ia.invoice_adjustment_reason_id
16:00:50 422  	      ;
16:00:50 423  	  end;
16:00:50 424  ----
16:00:50 425  --------------------------------------------------------------------------------
16:00:50 426  ----
16:00:50 427  
16:00:50 428  	  procedure ext_line_item_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 429  	  is
16:00:50 430  	  begin
16:00:50 431  	      open out_cursor for
16:00:50 432  		  with ids as (select id from change_log cl where cl.item = 'LINE_ITEM_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 433  		  select lia.id line_item_adjustment_id, lia.line_item_id, lia.invoice_adjustment_id, lia.amount, lia.tax, lia.discount, lia.create_date
16:00:50 434  		  from line_item_adjustment lia
16:00:50 435  		  , ids
16:00:50 436  		  where lia.id = ids.id
16:00:50 437  	      ;
16:00:50 438  	  end;
16:00:50 439  ----
16:00:50 440  --------------------------------------------------------------------------------
16:00:50 441  ----
16:00:50 442  
16:00:50 443  	  procedure ext_tax(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 444  	  is
16:00:50 445  	  begin
16:00:50 446  	      open out_cursor for
16:00:50 447  		  with ids as (select id from change_log cl where cl.item = 'TAX' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 448  		  select
16:00:50 449  		    tax.id tax_id,
16:00:50 450  		    ttype.code tax_type,
16:00:50 451  		    tax.calculated_amount,
16:00:50 452  		    tax.create_date,
16:00:50 453  		    tax.line_item_id,
16:00:50 454  		    tax.effective_rate,
16:00:50 455  		    tax.taxable_amount,
16:00:50 456  		    tax.tax_rule_id,
16:00:50 457  		    j.name jurisdiction_level,
16:00:50 458  		    tax.jurisdiction_name,
16:00:50 459  		    tax.jurisdiction_id,
16:00:50 460  		    tax.ext_tax_type,
16:00:50 461  		    tax.ext_result,
16:00:50 462  		    tax.imposition_type,
16:00:50 463  		    tax.imposition
16:00:50 464  		  from tax
16:00:50 465  		  , tax_type ttype
16:00:50 466  		  , jurisdiction_level j
16:00:50 467  		  , ids
16:00:50 468  		  where tax.id = ids.id and ttype.id = tax.tax_type_id and j.id = tax.jurisdiction_level_id
16:00:50 469  	      ;
16:00:50 470  	  end;
16:00:50 471  ----
16:00:50 472  --------------------------------------------------------------------------------
16:00:50 473  ----
16:00:50 474  	  procedure ext_tax_adjustment(in_start_date date, in_end_date date, out_cursor out sys_refcursor)
16:00:50 475  	  is
16:00:50 476  	  begin
16:00:50 477  	      open out_cursor for
16:00:50 478  		  with ids as (select id from change_log cl where cl.item = 'TAX_ADJUSTMENT' and cl.change_time between in_start_date and in_end_date group by id)
16:00:50 479  		  select
16:00:50 480  		    tax.id tad_adjustment_id,
16:00:50 481  		    tax.tax_id tax_id,
16:00:50 482  		    tax.line_item_adjustment_id line_item_adjustment_id,
16:00:50 483  		    tax.amount tax_amount,
16:00:50 484  		    tax.create_date create_date
16:00:50 485  		  from tax_adjustment tax
16:00:50 486  		  , ids
16:00:50 487  		  where tax.id = ids.id
16:00:50 488  	      ;
16:00:50 489  	  end;
16:00:50 490  ----
16:00:50 491  --------------------------------------------------------------------------------
16:00:50 492  ----
16:00:50 493  /**/
16:00:50 494  	  procedure ext_rcn_ext_source_log(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 495  	  BEGIN
16:00:50 496  	    OPEN OUT_CURSOR FOR
16:00:50 497  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_EXT_SOURCE_LOG' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 498  	    SELECT
16:00:50 499  		t.id rcn_ext_source_log_id
16:00:50 500  	      , t.extraction_timestamp
16:00:50 501  	      , t.report_date
16:00:50 502  	      , t.report_generation_datetime
16:00:50 503  	      , t.record_type
16:00:50 504  	      , t.report_file_name
16:00:50 505  	      , t.create_date
16:00:50 506  	      , t.created_by
16:00:50 507  	    FROM rcn_ext_source_log t, ids
16:00:50 508  	    WHERE ids.id = t.id;
16:00:50 509  	  END;
16:00:50 510  
16:00:50 511  	  procedure ext_rcn_cpt_svc_chg_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 512  	  BEGIN
16:00:50 513  	    OPEN OUT_CURSOR FOR
16:00:50 514  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_SERVICE_CHARGE_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 515  	    SELECT
16:00:50 516  		t.id rcn_cpt_svc_chg_dtl_id
16:00:50 517  	      , t.rcn_ext_source_log_id
16:00:50 518  	      , t.record_type
16:00:50 519  	      , t.category
16:00:50 520  	      , t.sub_category
16:00:50 521  	      , t.entity_type
16:00:50 522  	      , t.entity_number
16:00:50 523  	      , t.funds_transfer_inst_number
16:00:50 524  	      , t.secure_ba_number
16:00:50 525  	      , t.settlement_currency
16:00:50 526  	      , t.fee_schedule
16:00:50 527  	      , t.mop
16:00:50 528  	      , t.interchange_qualification
16:00:50 529  	      , t.fee_type_description
16:00:50 530  	      , t.action_type
16:00:50 531  	      , t.unit_quantity
16:00:50 532  	      , t.unit_fee
16:00:50 533  	      , t.amount
16:00:50 534  	      , t.percentage_rate
16:00:50 535  	      , t.total_charge
16:00:50 536  	      , t.create_date
16:00:50 537  	      , t.created_by
16:00:50 538  	    FROM rcn_cpt_service_charge_detail t, ids
16:00:50 539  	    WHERE ids.id = t.id;
16:00:50 540  	  END;
16:00:50 541  ----
16:00:50 542  --------------------------------------------------------------------------------
16:00:50 543  ----
16:00:50 544  
16:00:50 545  	  procedure ext_rcn_cpt_excpt_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 546  	  BEGIN
16:00:50 547  	    OPEN OUT_CURSOR FOR
16:00:50 548  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_EXCEPTION_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 549  	    SELECT
16:00:50 550  		t.id rcn_cpt_excp_dtl_id
16:00:50 551  	      , t.rcn_ext_source_log_id
16:00:50 552  	      , t.record_type
16:00:50 553  	      , t.submission_date
16:00:50 554  	      , t.pid_number
16:00:50 555  	      , t.pid_short_name
16:00:50 556  	      , t.submission_number
16:00:50 557  	      , t.record_number
16:00:50 558  	      , t.entity_type
16:00:50 559  	      , t.entity_number
16:00:50 560  	      , t.presentment_currency
16:00:50 561  	      , t.merchant_order_number
16:00:50 562  	      , t.rdfi_number
16:00:50 563  	      , t.account_number
16:00:50 564  	      , t.expiration_date
16:00:50 565  	      , t.amount
16:00:50 566  	      , t.mop
16:00:50 567  	      , t.action_code
16:00:50 568  	      , t.auth_date
16:00:50 569  	      , t.auth_code
16:00:50 570  	      , t.auth_response_code
16:00:50 571  	      , t.trace_number
16:00:50 572  	      , t.consumer_country_code
16:00:50 573  	      , t.category
16:00:50 574  	      , t.mcc
16:00:50 575  	      , t.reject_code
16:00:50 576  	      , t.submission_status
16:00:50 577  	      , t.create_date
16:00:50 578  	      , t.created_by
16:00:50 579  	    FROM rcn_cpt_exception_detail t, ids
16:00:50 580  	    WHERE ids.id = t.id;
16:00:50 581  	  END;
16:00:50 582  ----
16:00:50 583  --------------------------------------------------------------------------------
16:00:50 584  ----
16:00:50 585  
16:00:50 586  	  procedure ext_rcn_cpt_dpst_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 587  	  BEGIN
16:00:50 588  	    OPEN OUT_CURSOR FOR
16:00:50 589  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_DEPOSIT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 590  	      SELECT
16:00:50 591  		t.id rcn_cpt_deposit_dtl_id
16:00:50 592  	      , t.rcn_ext_source_log_id
16:00:50 593  	      , t.record_type
16:00:50 594  	      , t.submission_date
16:00:50 595  	      , t.pid_number
16:00:50 596  	      , t.pid_short_name
16:00:50 597  	      , t.submission_number
16:00:50 598  	      , t.record_number
16:00:50 599  	      , t.entity_type
16:00:50 600  	      , t.entity_number
16:00:50 601  	      , t.presentment_currency
16:00:50 602  	      , t.merchant_order_number
16:00:50 603  	      , t.rdfi_number
16:00:50 604  	      , t.account_number
16:00:50 605  	      , t.expiration_date
16:00:50 606  	      , t.amount
16:00:50 607  	      , t.mop
16:00:50 608  	      , t.action_code
16:00:50 609  	      , t.auth_date
16:00:50 610  	      , t.auth_code
16:00:50 611  	      , t.auth_response_code
16:00:50 612  	      , t.trace_number
16:00:50 613  	      , t.consumer_country_code
16:00:50 614  	      , t.mcc
16:00:50 615  	      , t.create_date
16:00:50 616  	      , t.created_by
16:00:50 617  	      , t.fee_code
16:00:50 618  	      , t.unit_fee
16:00:50 619  	      , t.percent_fee
16:00:50 620  	      , t.total_interchange_fee
16:00:50 621  	      , t.total_assessment_fee
16:00:50 622  	      , t.other_fee
16:00:50 623  	    FROM rcn_cpt_deposit_detail t, ids
16:00:50 624  	    WHERE ids.id = t.id;
16:00:50 625  	  END;
16:00:50 626  ----
16:00:50 627  --------------------------------------------------------------------------------
16:00:50 628  ----
16:00:50 629  
16:00:50 630  	  procedure ext_rcn_cpt_chgbk_act_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 631  	  BEGIN
16:00:50 632  	    OPEN OUT_CURSOR FOR
16:00:50 633  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_CPT_CHARGEBACK_ACT_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 634  	    SELECT
16:00:50 635  		t.id rcn_cpt_chgbk_act_dtl_id
16:00:50 636  	      , t.rcn_ext_source_log_id
16:00:50 637  	      , t.record_type
16:00:50 638  	      , t.entity_type
16:00:50 639  	      , t.entity_number
16:00:50 640  	      , t.chargeback_amount_issuer
16:00:50 641  	      , t.prev_partial_representment
16:00:50 642  	      , t.presentment_currency
16:00:50 643  	      , t.chargeback_category
16:00:50 644  	      , t.status_flag
16:00:50 645  	      , t.sequence_number
16:00:50 646  	      , t.merchant_order_number
16:00:50 647  	      , t.account_number
16:00:50 648  	      , t.reason_code
16:00:50 649  	      , t.transaction_date
16:00:50 650  	      , t.chargeback_date
16:00:50 651  	      , t.activity_date
16:00:50 652  	      , t.chargeback_amount_action
16:00:50 653  	      , t.fee_amount
16:00:50 654  	      , t.usage_code
16:00:50 655  	      , t.mop_code
16:00:50 656  	      , t.authorization_date
16:00:50 657  	      , t.chargeback_due_date
16:00:50 658  	      , t.create_date
16:00:50 659  	      , t.created_by
16:00:50 660  	    FROM rcn_cpt_chargeback_act_detail t, ids
16:00:50 661  	    WHERE ids.id = t.id;
16:00:50 662  	  END;
16:00:50 663  ----
16:00:50 664  --------------------------------------------------------------------------------
16:00:50 665  ----
16:00:50 666  
16:00:50 667  	  procedure ext_rcn_pp_sttlmnt(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 668  	  BEGIN
16:00:50 669  	    OPEN OUT_CURSOR FOR
16:00:50 670  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_SETTLEMENT' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 671  	    SELECT
16:00:50 672  		t.id rcn_pp_settlement_id
16:00:50 673  	      , t.rcn_ext_source_log_id
16:00:50 674  	      , t.transaction_id
16:00:50 675  	      , t.invoice_id
16:00:50 676  	      , t.pp_ref_id
16:00:50 677  	      , t.pp_ref_id_type
16:00:50 678  	      , t.trans_event_code
16:00:50 679  	      , t.trans_init_date
16:00:50 680  	      , t.trans_comp_date
16:00:50 681  	      , t.trans_deb_or_cred
16:00:50 682  	      , t.gross_trans_amount
16:00:50 683  	      , t.gross_trans_currency
16:00:50 684  	      , t.fee_deb_or_cred
16:00:50 685  	      , t.fee_amount
16:00:50 686  	      , t.fee_currency
16:00:50 687  	      , t.custom_field
16:00:50 688  	      , t.create_date
16:00:50 689  	      , t.created_by
16:00:50 690  	    FROM rcn_pp_settlement t, ids
16:00:50 691  	    WHERE ids.id = t.id;
16:00:50 692  	  END;
16:00:50 693  ----
16:00:50 694  --------------------------------------------------------------------------------
16:00:50 695  ----
16:00:50 696  
16:00:50 697  	  procedure ext_rcn_pp_dispute(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 698  	  BEGIN
16:00:50 699  	    OPEN OUT_CURSOR FOR
16:00:50 700  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_DISPUTE' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 701  	    SELECT
16:00:50 702  		t.id rcn_pp_dispute_id
16:00:50 703  	      , t.rcn_ext_source_log_id
16:00:50 704  	      , t.dispute_type
16:00:50 705  	      , t.claimant_name
16:00:50 706  	      , t.claimant_email
16:00:50 707  	      , t.transaction_id
16:00:50 708  	      , t.trans_date
16:00:50 709  	      , t.disputed_amount
16:00:50 710  	      , t.disputed_amount_currency
16:00:50 711  	      , t.dispute_reason
16:00:50 712  	      , t.dispute_filing_date
16:00:50 713  	      , t.dispute_status
16:00:50 714  	      , t.dispute_case_id
16:00:50 715  	      , t.invoice_id
16:00:50 716  	      , t.create_date
16:00:50 717  	      , t.created_by
16:00:50 718  	    FROM
16:00:50 719  	    rcn_pp_dispute t, ids
16:00:50 720  	    WHERE ids.id = t.id;
16:00:50 721  	  END;
16:00:50 722  ----
16:00:50 723  --------------------------------------------------------------------------------
16:00:50 724  ----
16:00:50 725  
16:00:50 726  	  procedure ext_rcn_pp_trns_dtl(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 727  	  BEGIN
16:00:50 728  	    OPEN OUT_CURSOR FOR
16:00:50 729  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_PP_TRANS_DETAIL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 730  	    SELECT
16:00:50 731  		t.id rcn_pp_trans_dtl_id
16:00:50 732  	      , t.rcn_ext_source_log_id
16:00:50 733  	      , t.transaction_id
16:00:50 734  	      , t.invoice_id
16:00:50 735  	      , t.pp_ref_id
16:00:50 736  	      , t.trans_event_code
16:00:50 737  	      , t.trans_init_date
16:00:50 738  	      , t.trans_comp_date
16:00:50 739  	      , t.trans_deb_or_cred
16:00:50 740  	      , t.gross_trans_amount
16:00:50 741  	      , t.gross_trans_currency
16:00:50 742  	      , t.fee_deb_or_cred
16:00:50 743  	      , t.fee_amount
16:00:50 744  	      , t.fee_currency
16:00:50 745  	      , t.trans_status
16:00:50 746  	      , t.insurance_amount
16:00:50 747  	      , t.sales_tax_amount
16:00:50 748  	      , t.shipping_amount
16:00:50 749  	      , t.trans_subject
16:00:50 750  	      , t.trans_note
16:00:50 751  	      , t.payer_acct_id
16:00:50 752  	      , t.payer_addr_status
16:00:50 753  	      , t.item_name
16:00:50 754  	      , t.item_id
16:00:50 755  	      , t.option_1_name
16:00:50 756  	      , t.option_1_value
16:00:50 757  	      , t.option_2_name
16:00:50 758  	      , t.option_2_value
16:00:50 759  	      , t.auction_site
16:00:50 760  	      , t.auction_buyer_id
16:00:50 761  	      , t.auction_closing_date
16:00:50 762  	      , t.shipping_addr_line_1
16:00:50 763  	      , t.shipping_addr_line_2
16:00:50 764  	      , t.shipping_addr_city
16:00:50 765  	      , t.shipping_addr_state
16:00:50 766  	      , t.shipping_addr_zip
16:00:50 767  	      , t.shipping_addr_country
16:00:50 768  	      , t.custom_field
16:00:50 769  	      , t.create_date
16:00:50 770  	      , t.created_by
16:00:50 771  	    FROM rcn_pp_trans_detail t, ids
16:00:50 772  	    WHERE ids.id = t.id;
16:00:50 773  	  END;
16:00:50 774  ----
16:00:50 775  --------------------------------------------------------------------------------
16:00:50 776  ----
16:00:50 777  	  procedure ext_rcn_amex_chargeback(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 778  	  BEGIN
16:00:50 779  	    OPEN OUT_CURSOR FOR
16:00:50 780  	    with ids As ( SELECT cl.id FROM change_log cl where cl.item = 'RCN_AMEX_CHARGEBACK' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 781  	    SELECT
16:00:50 782  	      rac.id
16:00:50 783  	    , rac.rcn_ext_source_log_id
16:00:50 784  	    , rac.resolution
16:00:50 785  	    , rac.from_system
16:00:50 786  	    , rac.rejects_to_system
16:00:50 787  	    , rac.disputes_to_system
16:00:50 788  	    , rac.date_of_adjustment
16:00:50 789  	    , rac.date_of_charge
16:00:50 790  	    , rac.case_type
16:00:50 791  	    , rac.cb_reas_code
16:00:50 792  	    , rac.cb_amount
16:00:50 793  	    , rac.cb_adjustment_number
16:00:50 794  	    , rac.billed_amount
16:00:50 795  	    , rac.soc_amount
16:00:50 796  	    , rac.foreign_amount
16:00:50 797  	    , rac.currency
16:00:50 798  	    , rac.note1
16:00:50 799  	    , rac.note2
16:00:50 800  	    , rac.note3
16:00:50 801  	    , rac.note4
16:00:50 802  	    , rac.note5
16:00:50 803  	    , rac.note6
16:00:50 804  	    , rac.note7
16:00:50 805  	    , rac.ind_ref_number
16:00:50 806  	    , rac.create_date
16:00:50 807  	    , rac.created_by
16:00:50 808  	    , rac.update_date
16:00:50 809  	    , rac.updated_by
16:00:50 810  	    FROM rcn_amex_chargeback rac, ids
16:00:50 811  	    WHERE ids.id = rac.id;
16:00:50 812  	  END;
16:00:50 813  ----
16:00:50 814  --------------------------------------------------------------------------------
16:00:50 815  ----
16:00:50 816  	  procedure ext_paypal(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 817  	  BEGIN
16:00:50 818  	    OPEN OUT_CURSOR FOR
16:00:50 819  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'PAYPAL' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 820  	    SELECT
16:00:50 821  		t.ID PAYPAL_ID
16:00:50 822  	      , ACCOUNT_ID
16:00:50 823  	      , INSTRUMENT_NAME
16:00:50 824  	      , CREATE_DATE
16:00:50 825  	      , CREATED_BY
16:00:50 826  	      , UPDATE_DATE
16:00:50 827  	      , UPDATED_BY
16:00:50 828  	      , s.value PAYPAL_STATUS
16:00:50 829  	      , STATE
16:00:50 830  	      , CITY
16:00:50 831  	      , POSTAL_CODE
16:00:50 832  	      , COUNTRY
16:00:50 833  	      , EXPIRATION_DATE
16:00:50 834  	    FROM paypal t, paypal_status s, ids
16:00:50 835  	    WHERE ids.id = t.id and t.paypal_status_id = s.id;
16:00:50 836  	  END;
16:00:50 837  ----
16:00:50 838  --------------------------------------------------------------------------------
16:00:50 839  ----
16:00:50 840  	  procedure ext_address(in_start_date date, in_end_date date, out_cursor out sys_refcursor) IS
16:00:50 841  	  BEGIN
16:00:50 842  	    OPEN OUT_CURSOR FOR
16:00:50 843  	    with ids as ( SELECT cl.id FROM change_log cl where cl.item = 'ADDRESS' and change_time between in_start_date and in_end_date group by cl.id )
16:00:50 844  	    SELECT
16:00:50 845  	      a.id ADDRESS_ID,
16:00:50 846  	      address1,
16:00:50 847  	      address2,
16:00:50 848  	      city,
16:00:50 849  	      state,
16:00:50 850  	      postal_code,
16:00:50 851  	      country,
16:00:50 852  	      create_date,
16:00:50 853  	      created_by,
16:00:50 854  	      update_date,
16:00:50 855  	      updated_by
16:00:50 856  	    FROM address a, ids
16:00:50 857  	    WHERE ids.id = a.id;
16:00:50 858  	  END;
16:00:50 859  ----
16:00:50 860  --------------------------------------------------------------------------------
16:00:50 861  ----
16:00:50 862  /**/
16:00:50 863  END PROCS_REPORTING;
16:00:50 864  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.17
16:00:50 SQL> 
16:00:50 SQL> create or replace PACKAGE BODY		  "PROCS_REPORTING_1A" AS
16:00:50   2  
16:00:50   3  ----
16:00:50   4  --------------------------------------------------------------------------------
16:00:50   5  ----
16:00:50   6  	  function getDiscountAmount(in_line_item_id line_item.id%type)
16:00:50   7  	      return line_item.amount%type
16:00:50   8  	  is
16:00:50   9  	      v_discount  line_item.amount%type := 0;
16:00:50  10  	  begin
16:00:50  11  	      for x in (
16:00:50  12  		  select d.id discount_id
16:00:50  13  			,nvl(d.fixed_amount, d.percent_amount * (po.quantity * po.unit_price)) discount_amount
16:00:50  14  		  from discount d
16:00:50  15  		      join discount_line_item dli	      on dli.discount_id = d.id
16:00:50  16  		      join discount_product_offering dop      on dop.discount_id = d.id
16:00:50  17  		      join product_offering po		      on po.id = dop.product_offering_id
16:00:50  18  		      join line_item li 		      on li.id = dli.line_item_id and li.product_offer_id = po.id
16:00:50  19  		  where dli.line_item_id = in_line_item_id
16:00:50  20  	      )
16:00:50  21  	      loop
16:00:50  22  		  v_discount := v_discount + x.discount_amount;
16:00:50  23  	      end loop;
16:00:50  24  
16:00:50  25  	      return v_discount;
16:00:50  26  	  end;
16:00:50  27  ----
16:00:50  28  --------------------------------------------------------------------------------
16:00:50  29  ----
16:00:50  30  	  function getRefundAmount(in_line_item_id line_item.id%type)
16:00:50  31  	      return line_item.amount%type
16:00:50  32  	  is
16:00:50  33  	      v_li_total  line_item.amount%type;
16:00:50  34  	      v_inv_total line_item.amount%type;
16:00:50  35  	      v_ref_total line_item.amount%type;
16:00:50  36  	  begin
16:00:50  37  
16:00:50  38  	      for li in (
16:00:50  39  		  select li.invoice_id, po.*
16:00:50  40  		  from line_item li
16:00:50  41  			  join core_owner.product_offering po on li.product_offer_id = po.id
16:00:50  42  		  where li.id = in_line_item_id
16:00:50  43  	      )
16:00:50  44  	      loop
16:00:50  45  		  v_li_total := (li.quantity * li.unit_price) - getDiscountAmount(in_line_item_id);
16:00:50  46  
16:00:50  47  		  v_inv_total := 0;
16:00:50  48  		  v_ref_total := 0;
16:00:50  49  		  for x in (
16:00:50  50  		      select case when c.charge_amount < 0 then -1 else 1 end type, sum(c.charge_amount) total
16:00:50  51  		      from charge c
16:00:50  52  		      where c.invoice_id = li.invoice_id
16:00:50  53  		      group by case when c.charge_amount < 0 then -1 else 1 end
16:00:50  54  		  )
16:00:50  55  		  loop
16:00:50  56  		      if (x.type = 1) then
16:00:50  57  			  v_inv_total := x.total;
16:00:50  58  		      else
16:00:50  59  			  v_ref_total := x.total;
16:00:50  60  		      end if;
16:00:50  61  		  end loop;
16:00:50  62  
16:00:50  63  		  if (v_inv_total > 0) then
16:00:50  64  		      return (v_ref_total / v_inv_total) * v_li_total;
16:00:50  65  		  else
16:00:50  66  		      return 0;
16:00:50  67  		  end if;
16:00:50  68  
16:00:50  69  	      end loop;
16:00:50  70  
16:00:50  71  	      return 0;
16:00:50  72  	  end;
16:00:50  73  ----
16:00:50  74  --------------------------------------------------------------------------------
16:00:50  75  ----
16:00:50  76  	PROCEDURE EXTRACT_LINE_ITEMS(
16:00:50  77  	  in_lower_date_bound DATE,
16:00:50  78  	  in_upper_date_bound DATE,
16:00:50  79  	  out_lic_cur OUT sys_refcursor
16:00:50  80  	) AS
16:00:50  81  	BEGIN
16:00:50  82  	  OPEN out_lic_cur FOR
16:00:50  83  	  with liq as (
16:00:50  84  		SELECT li2.id
16:00:50  85  		      FROM
16:00:50  86  			   line_item li2
16:00:50  87  		      WHERE
16:00:50  88  		      TRUNC(li2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50  89  		UNION
16:00:50  90  		SELECT li2.id
16:00:50  91  		      FROM
16:00:50  92  			   line_item li2
16:00:50  93  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:00:50  94  		      WHERE
16:00:50  95  		      TRUNC(i2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50  96  		UNION
16:00:50  97  		SELECT li2.id
16:00:50  98  		      FROM
16:00:50  99  			   line_item li2
16:00:50 100  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
16:00:50 101  		      WHERE
16:00:50 102  		      TRUNC(l2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50 103  		UNION
16:00:50 104  		SELECT li2.id
16:00:50 105  		      FROM
16:00:50 106  			   line_item li2
16:00:50 107  		      JOIN license l2 ON li2.invoice_id = l2.invoice_id
16:00:50 108  		      JOIN subscription s2 ON s2.id = l2.subscription_id
16:00:50 109  		      WHERE
16:00:50 110  		      TRUNC(s2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50 111  		UNION
16:00:50 112  		SELECT li2.id
16:00:50 113  		      FROM
16:00:50 114  			   line_item li2
16:00:50 115  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:00:50 116  		      JOIN charge c2 ON i2.id = c2.invoice_id
16:00:50 117  		      WHERE
16:00:50 118  		      TRUNC(c2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50 119  		UNION
16:00:50 120  		SELECT li2.id
16:00:50 121  		      FROM
16:00:50 122  			   line_item li2
16:00:50 123  		      JOIN invoice i2 ON i2.id = li2.invoice_id
16:00:50 124  		      JOIN charge c2 ON i2.id = c2.invoice_id
16:00:50 125  		      JOIN transaction t2 ON t2.id = c2.transaction_id
16:00:50 126  		      WHERE
16:00:50 127  		      TRUNC(t2.create_date, 'HH') BETWEEN TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50 128  	  )
16:00:50 129  	  SELECT distinct
16:00:50 130  	    line_item.id				 line_item_id
16:00:50 131  	  , product.name				 product_name
16:00:50 132  	  , product.unit_price				 product_unit_price
16:00:50 133  	  , product.production_cost			 product_production_cost
16:00:50 134  	  , offer_chain.name				 offer_chain_name
16:00:50 135  	  , offer_chain_meta_data.value 		 offer_chain_metadata
16:00:50 136  	  , gclicense.purchase_date			 subscription_start_date
16:00:50 137  	  , gclicense.start_date			 license_start_date
16:00:50 138  	  , gclicense.end_date				 license_end_date
16:00:50 139  	  , credit_card.city				 cc_city
16:00:50 140  	  , credit_card.state				 cc_state
16:00:50 141  	  , credit_card.postal_code			 cc_postal_code
16:00:50 142  	  , line_item.create_date			 line_item_purchase_date
16:00:50 143  	  , gclicense.account_regi_id
16:00:50 144  	  , product_offering.quantity			 purchase_quantity
16:00:50 145  	  , case when charge.charge_amount > 0 then charge.charge_amount else 0 end purchase_amount
16:00:50 146  	  , PROCS_REPORTING_1A.getDiscountAmount(line_item.id) discount_amount
16:00:50 147  	  , PROCS_REPORTING_1A.getRefundAmount(line_item.id) refund_amount
16:00:50 148  	  , decode(gclicense.sct_id,null,0, 1)		 is_refund_cancel
16:00:50 149  	  , 0						 purchase_tax_amount
16:00:50 150  	  , transaction_attempt.external_transaction_id  external_transaction_id
16:00:50 151  	  , invoice.id					 invoice_number
16:00:50 152  	  , NVL2(transaction.id, 1, 0)			 has_transaction
16:00:50 153  	  , NVL2(credit_card.id, 1, 0)			 is_cc_transaction
16:00:50 154  	  , NVL2(gift_certificate.id, 1, 0)		 is_gc_transaction
16:00:50 155  	  FROM
16:00:50 156  	       line_item
16:00:50 157  	  JOIN invoice				ON invoice.id	       = line_item.invoice_id
16:00:50 158  	  JOIN product_offering 		ON product_offering.id = line_item.product_offer_id
16:00:50 159  	  JOIN product				ON product.id	       = product_offering.product_id
16:00:50 160  	  join (
16:00:50 161  		select license.invoice_id, subscription.offer_chain_id, subscription.purchase_date
16:00:50 162  		      ,subscription.sct_id, license.start_date, license.end_date
16:00:50 163  		      ,account.group_id account_regi_id
16:00:50 164  		from	 license
16:00:50 165  		    join subscription ON subscription.id = license.subscription_id
16:00:50 166  		    join account      ON account.id	 = subscription.account_id
16:00:50 167  		union all
16:00:50 168  		select gc.purchase_invoice_id invoice_id, gc.offer_chain_id, gc.purchase_date
16:00:50 169  		      ,null sct_id, gc.purchase_date start_date, gc.expiration_date end_date
16:00:50 170  		      ,gc.purchaser_group_id account_regi_id
16:00:50 171  		from	 gift_certificate gc
16:00:50 172  		where
16:00:50 173  		      TRUNC(gc.create_date, 'HH') between TRUNC(in_lower_date_bound,'HH') AND TRUNC(in_upper_date_bound,'HH')
16:00:50 174  
16:00:50 175  	  ) gclicense
16:00:50 176  						on gclicense.invoice_id = invoice.id
16:00:50 177  	  JOIN offer_chain			ON offer_chain.id      = gclicense.offer_chain_id
16:00:50 178  	  JOIN charge				ON invoice.id	       = charge.invoice_id and charge.charge_status_id = 2
16:00:50 179  	  JOIN transaction			ON transaction.id      = charge.transaction_id and transaction.transaction_status_id = 2
16:00:50 180  	  JOIN transaction_attempt		ON transaction.id	= transaction_attempt.transaction_id AND transaction_attempt.transaction_attempt_status_id = 2
16:00:50 181  	  LEFT OUTER JOIN credit_card		ON charge.instrument_id = credit_card.id AND charge.instrument_type_id = 1
16:00:50 182  	  LEFT OUTER JOIN gift_certificate	ON charge.instrument_id = gift_certificate.id AND charge.instrument_type_id = 3
16:00:50 183  	  LEFT OUTER JOIN offer_chain_meta_data ON offer_chain.id	= offer_chain_meta_data.offer_chain_id
16:00:50 184  	  join liq				on line_item.id 	= liq.id
16:00:50 185  	    ;
16:00:50 186  	END EXTRACT_LINE_ITEMS;
16:00:50 187  ----
16:00:50 188  --------------------------------------------------------------------------------
16:00:50 189  ----
16:00:50 190  END PROCS_REPORTING_1A;
16:00:50 191  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_REPORTS_V5" AS
16:00:50   2  
16:00:50   3  FUNCTION GET_PRODUCT_NAMES(
16:00:50   4  	in_offer_id IN NUMBER
16:00:50   5  ) RETURN VARCHAR2 AS
16:00:50   6  var_result_names VARCHAR2(1024);
16:00:50   7  BEGIN
16:00:50   8  
16:00:50   9  	var_result_names := NULL;
16:00:50  10  
16:00:50  11  	FOR f_product IN (
16:00:50  12  	  SELECT
16:00:50  13  	    PRODUCT.NAME
16:00:50  14  	  FROM
16:00:50  15  	    PRODUCT
16:00:50  16  	    INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.PRODUCT_ID = PRODUCT.ID
16:00:50  17  	    INNER JOIN OFFER_PRODUCT_OFFERING ON OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID = PRODUCT_OFFERING.ID
16:00:50  18  	  WHERE
16:00:50  19  	    OFFER_PRODUCT_OFFERING.OFFER_ID = in_offer_id
16:00:50  20  	)
16:00:50  21  	LOOP
16:00:50  22  
16:00:50  23  	  IF var_result_names IS NULL THEN
16:00:50  24  	    var_result_names := f_product.NAME;
16:00:50  25  	  ELSE
16:00:50  26  	    var_result_names := var_result_names || ',' || CHR(13) || f_product.NAME;
16:00:50  27  	  END IF;
16:00:50  28  
16:00:50  29  	END LOOP;
16:00:50  30  
16:00:50  31  	RETURN var_result_names;
16:00:50  32  
16:00:50  33  END GET_PRODUCT_NAMES;
16:00:50  34  
16:00:50  35  /******************************************************************************/
16:00:50  36  
16:00:50  37  PROCEDURE GET_FULL_FLASH_REPORT_PURCH (
16:00:50  38  	in_start_date  IN DATE,
16:00:50  39  	in_end_date    IN DATE,
16:00:50  40  	out_result_set OUT SYS_REFCURSOR
16:00:50  41  ) AS
16:00:50  42  -- CONSTANTS
16:00:50  43  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:00:50  44  BEGIN
16:00:50  45  
16:00:50  46  	OPEN out_result_set FOR
16:00:50  47  	SELECT
16:00:50  48  	  GET_PRODUCT_NAMES("Offer_Id") as "Product_Names",
16:00:50  49  	  "Offer_Id",
16:00:50  50  	  "New_Purchases_Num",
16:00:50  51  	  "Number_Of_renewals",
16:00:50  52  	  FLR_TOTAL_DOLLAR_VALUE("Offer_Id", in_start_date, in_end_date) as "Total_Dollar_Value",
16:00:50  53  	  FLR_UNIQUE_PURCHASERS("Offer_Id", in_start_date, in_end_date) as "Unique_Purchasers_num"
16:00:50  54  	FROM (
16:00:50  55  	  SELECT
16:00:50  56  	    "Offer_Id",
16:00:50  57  	    "Number_Of_renewals",
16:00:50  58  	    "New_Purchases_Num"
16:00:50  59  	  FROM (
16:00:50  60  	    SELECT
16:00:50  61  	      OFFER.ID as "Offer_Id",
16:00:50  62  	      FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
16:00:50  63  	      FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num"
16:00:50  64  	    FROM
16:00:50  65  	      OFFER
16:00:50  66  	  )
16:00:50  67  	  WHERE
16:00:50  68  	    "New_Purchases_Num" > 0
16:00:50  69  	    OR "Number_Of_renewals" > 0
16:00:50  70  	);
16:00:50  71  
16:00:50  72  	/*
16:00:50  73  	OPEN out_result_set FOR
16:00:50  74  	SELECT
16:00:50  75  	  "Product_Names",
16:00:50  76  	  "Offer_Id",
16:00:50  77  	  "New_Purchases_Num",
16:00:50  78  	  "Number_Of_renewals",
16:00:50  79  	  "Total_Dollar_Value",
16:00:50  80  	  "Unique_Purchasers_num"
16:00:50  81  	FROM (
16:00:50  82  	  SELECT
16:00:50  83  	    GET_PRODUCT_NAMES(offer.id) as "Product_Names",
16:00:50  84  	    offer.id as "Offer_Id",
16:00:50  85  	    FLR_NEW_PURCHASERS_NUM(offer.id, in_start_date, in_end_date) as "New_Purchases_Num",
16:00:50  86  	    FLR_RENEWALS_NUM(offer.id, in_start_date, in_end_date) as "Number_Of_renewals",
16:00:50  87  	    FLR_TOTAL_DOLLAR_VALUE(offer.id, in_start_date, in_end_date) as "Total_Dollar_Value",
16:00:50  88  	    FLR_UNIQUE_PURCHASERS(offer.id, in_start_date, in_end_date) as "Unique_Purchasers_num"
16:00:50  89  	  FROM
16:00:50  90  	    OFFER
16:00:50  91  	)
16:00:50  92  	WHERE
16:00:50  93  	  "New_Purchases_Num" > 0
16:00:50  94  	  OR "Number_Of_renewals" > 0
16:00:50  95  	  OR "Total_Dollar_Value" > 0
16:00:50  96  	  OR "Unique_Purchasers_num" > 0;
16:00:50  97  	*/
16:00:50  98  
16:00:50  99  END GET_FULL_FLASH_REPORT_PURCH;
16:00:50 100  
16:00:50 101  /******************************************************************************/
16:00:50 102  
16:00:50 103  PROCEDURE GET_FLASH_REPORT_PURCHASES (
16:00:50 104  	in_offer_id	       IN NUMBER,
16:00:50 105  	in_start_date	       IN DATE,
16:00:50 106  	in_end_date	       IN DATE,
16:00:50 107  	out_new_purchasers_num OUT NUMBER,
16:00:50 108  	out_renewals_num       OUT NUMBER,
16:00:50 109  	out_product_names      OUT VARCHAR2,
16:00:50 110  	out_total_dollar_value OUT NUMBER,
16:00:50 111  	out_unique_purchasers  OUT NUMBER
16:00:50 112  ) AS
16:00:50 113  -- CONSTANTS
16:00:50 114  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:00:50 115  BEGIN
16:00:50 116  
16:00:50 117  	out_product_names := GET_PRODUCT_NAMES(in_offer_id);
16:00:50 118  
16:00:50 119  	out_total_dollar_value := FLR_TOTAL_DOLLAR_VALUE(
16:00:50 120  	  in_offer_id,
16:00:50 121  	  in_start_date,
16:00:50 122  	  in_end_date
16:00:50 123  	);
16:00:50 124  
16:00:50 125  	out_new_purchasers_num := FLR_NEW_PURCHASERS_NUM(
16:00:50 126  	  in_offer_id,
16:00:50 127  	  in_start_date,
16:00:50 128  	  in_end_date
16:00:50 129  	);
16:00:50 130  
16:00:50 131  	out_renewals_num := FLR_RENEWALS_NUM(
16:00:50 132  	  in_offer_id,
16:00:50 133  	  in_start_date,
16:00:50 134  	  in_end_date
16:00:50 135  	);
16:00:50 136  
16:00:50 137  	out_unique_purchasers := FLR_UNIQUE_PURCHASERS(
16:00:50 138  	  in_offer_id,
16:00:50 139  	  in_start_date,
16:00:50 140  	  in_end_date
16:00:50 141  	);
16:00:50 142  
16:00:50 143  END GET_FLASH_REPORT_PURCHASES;
16:00:50 144  
16:00:50 145  /******************************************************************************/
16:00:50 146  
16:00:50 147  FUNCTION FLR_NEW_PURCHASERS_NUM (
16:00:50 148  	in_offer_id	       IN NUMBER,
16:00:50 149  	in_start_date	       IN DATE,
16:00:50 150  	in_end_date	       IN DATE
16:00:50 151  ) RETURN NUMBER AS
16:00:50 152  -- CONSTANTS
16:00:50 153  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:00:50 154  -- VARIABLES
16:00:50 155  var_new_purchases_num NUMBER;
16:00:50 156  BEGIN
16:00:50 157  	SELECT
16:00:50 158  	  COUNT(LICENSE.ID)
16:00:50 159  	  into
16:00:50 160  	  var_new_purchases_num
16:00:50 161  	FROM
16:00:50 162  	  LICENSE
16:00:50 163  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:00:50 164  	WHERE
16:00:50 165  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
16:00:50 166  	  AND LICENSE.OFFER_ID = in_offer_id
16:00:50 167  	  AND CHARGE.CHARGE_AMOUNT > 0
16:00:50 168  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:00:50 169  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:00:50 170  
16:00:50 171  	RETURN var_new_purchases_num;
16:00:50 172  END FLR_NEW_PURCHASERS_NUM;
16:00:50 173  
16:00:50 174  /******************************************************************************/
16:00:50 175  
16:00:50 176  FUNCTION FLR_RENEWALS_NUM (
16:00:50 177  	in_offer_id	       IN NUMBER,
16:00:50 178  	in_start_date	       IN DATE,
16:00:50 179  	in_end_date	       IN DATE
16:00:50 180  ) RETURN NUMBER AS
16:00:50 181  -- CONSTANTS
16:00:50 182  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:00:50 183  -- VARIABLES
16:00:50 184  var_renewals_num NUMBER;
16:00:50 185  BEGIN
16:00:50 186  	SELECT
16:00:50 187  	  COUNT(LICENSE.ID)
16:00:50 188  	  into
16:00:50 189  	  var_renewals_num
16:00:50 190  	FROM
16:00:50 191  	  LICENSE
16:00:50 192  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:00:50 193  	WHERE
16:00:50 194  	  LICENSE.CREATED_BY LIKE const_license_process_name
16:00:50 195  	  AND LICENSE.OFFER_ID = in_offer_id
16:00:50 196  	  AND CHARGE.CHARGE_AMOUNT > 0
16:00:50 197  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:00:50 198  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:00:50 199  
16:00:50 200  	RETURN var_renewals_num;
16:00:50 201  END FLR_RENEWALS_NUM;
16:00:50 202  
16:00:50 203  /******************************************************************************/
16:00:50 204  
16:00:50 205  FUNCTION FLR_TOTAL_DOLLAR_VALUE (
16:00:50 206  	in_offer_id	       IN NUMBER,
16:00:50 207  	in_start_date	       IN DATE,
16:00:50 208  	in_end_date	       IN DATE
16:00:50 209  ) RETURN NUMBER AS
16:00:50 210  var_dollar_value NUMBER(10,2);
16:00:50 211  BEGIN
16:00:50 212  	SELECT
16:00:50 213  	  SUM(CHARGE.CHARGE_AMOUNT)
16:00:50 214  	  into
16:00:50 215  	  var_dollar_value
16:00:50 216  	FROM
16:00:50 217  	  LICENSE
16:00:50 218  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:00:50 219  	WHERE
16:00:50 220  	  LICENSE.OFFER_ID = in_offer_id
16:00:50 221  	  AND CHARGE.CHARGE_AMOUNT > 0
16:00:50 222  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:00:50 223  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:00:50 224  
16:00:50 225  	RETURN var_dollar_value;
16:00:50 226  END FLR_TOTAL_DOLLAR_VALUE;
16:00:50 227  
16:00:50 228  /******************************************************************************/
16:00:50 229  
16:00:50 230  FUNCTION FLR_UNIQUE_PURCHASERS (
16:00:50 231  	in_offer_id	       IN NUMBER,
16:00:50 232  	in_start_date	       IN DATE,
16:00:50 233  	in_end_date	       IN DATE
16:00:50 234  ) RETURN NUMBER AS
16:00:50 235  -- CONSTANTS
16:00:50 236  const_license_process_name CONSTANT VARCHAR2(9) := 'LICENSING';
16:00:50 237  -- VARIABLES
16:00:50 238  var_unique_purchasers NUMBER;
16:00:50 239  BEGIN
16:00:50 240  	SELECT
16:00:50 241  	  COUNT(DISTINCT SUBSCRIPTION.ACCOUNT_ID) into var_unique_purchasers
16:00:50 242  	FROM
16:00:50 243  	  LICENSE
16:00:50 244  	  INNER JOIN CHARGE ON LICENSE.INVOICE_ID = CHARGE.INVOICE_ID
16:00:50 245  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 246  	WHERE
16:00:50 247  	  LICENSE.CREATED_BY NOT LIKE const_license_process_name
16:00:50 248  	  AND LICENSE.OFFER_ID = in_offer_id
16:00:50 249  	  AND CHARGE.CHARGE_AMOUNT > 0
16:00:50 250  	  AND PROCS_CHARGE_V5.IS_CHARGE_COLLECTED(CHARGE.ID) = 1 -- GLOBAL_CONSTANTS_V5.TRUE
16:00:50 251  	  AND LICENSE.START_DATE BETWEEN in_start_date AND in_end_date;
16:00:50 252  
16:00:50 253  	RETURN var_unique_purchasers;
16:00:50 254  END;
16:00:50 255  
16:00:50 256  END PROCS_REPORTS_V5;
16:00:50 257  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SYSTEM_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE INCREMENT_VERSION
16:00:50   4  /*
16:00:50   5  Throws exceptions:
16:00:50   6  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50   7  */
16:00:50   8  AS
16:00:50   9  BEGIN
16:00:50  10  
16:00:50  11  	UPDATE SYS_VERSION SET version=version+1;
16:00:50  12  
16:00:50  13  END INCREMENT_VERSION;
16:00:50  14  
16:00:50  15  /*************************************************************/
16:00:50  16  
16:00:50  17  PROCEDURE CHECK_VERSION(
16:00:50  18  	  in_vers    IN NUMBER,
16:00:50  19  	  out_result OUT NUMBER
16:00:50  20  ) AS
16:00:50  21  	current_version NUMBER;
16:00:50  22  BEGIN
16:00:50  23  	SELECT version INTO current_version FROM SYS_VERSION;
16:00:50  24  	IF(current_version != in_vers) THEN
16:00:50  25  	  out_result := 1;
16:00:50  26  	ELSE
16:00:50  27  	  out_result := 0;
16:00:50  28  	END IF;
16:00:50  29  END CHECK_VERSION;
16:00:50  30  
16:00:50  31  END PROCS_SYSTEM_V20;
16:00:50  32  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.01
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TAXES_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE ADD_TAX (
16:00:50   4  	in_tax_type_id		 IN NUMBER,
16:00:50   5  	in_calculated_amount	 IN NUMBER,
16:00:50   6  	in_created_by		 IN VARCHAR2,
16:00:50   7  	in_line_item_id 	 IN NUMBER,
16:00:50   8  	in_effective_rate	 IN VARCHAR2,
16:00:50   9  	in_taxable_amount	 IN NUMBER,
16:00:50  10  	in_tax_rule_id		 IN NUMBER,
16:00:50  11  	in_jurisdiction_level_id IN NUMBER,
16:00:50  12  	in_jurisdiction_name	 IN VARCHAR2,
16:00:50  13  	in_jurisdiction_id	 IN VARCHAR2,
16:00:50  14  	in_ext_tax_type 	 IN VARCHAR2,
16:00:50  15  	in_ext_result		 IN VARCHAR2,
16:00:50  16  	in_imposition_type	 IN VARCHAR2,
16:00:50  17  	in_imposition		 IN VARCHAR2
16:00:50  18  ) AS
16:00:50  19  SPROC_NAME CONSTANT VARCHAR2(7) := 'ADD_TAX';
16:00:50  20  -- VARIABLES
16:00:50  21  var_new_tax_id	NUMBER;
16:00:50  22  temp_line_item_id NUMBER;
16:00:50  23  -- EXCEPTIONS
16:00:50  24  BAD_LINE_ITEM_ID EXCEPTION;
16:00:50  25  BEGIN
16:00:50  26  
16:00:50  27  	BEGIN
16:00:50  28  	  SELECT
16:00:50  29  	    LINE_ITEM.ID into temp_line_item_id
16:00:50  30  	  FROM
16:00:50  31  	    LINE_ITEM
16:00:50  32  	  WHERE
16:00:50  33  	    LINE_ITEM.ID = in_line_item_id;
16:00:50  34  	  EXCEPTION
16:00:50  35  	    WHEN NO_DATA_FOUND THEN
16:00:50  36  	      RAISE BAD_LINE_ITEM_ID;
16:00:50  37  	END;
16:00:50  38  
16:00:50  39  	var_new_tax_id := NULL;
16:00:50  40  
16:00:50  41  	PROCS_TAXES_CRU_V20.CREATE_TAX(
16:00:50  42  	  var_new_tax_id,
16:00:50  43  	  in_tax_type_id,
16:00:50  44  	  in_calculated_amount,
16:00:50  45  	  in_created_by,
16:00:50  46  	  in_line_item_id,
16:00:50  47  	  in_effective_rate,
16:00:50  48  	  in_taxable_amount,
16:00:50  49  	  in_tax_rule_id,
16:00:50  50  	  in_jurisdiction_level_id,
16:00:50  51  	  in_jurisdiction_name,
16:00:50  52  	  in_jurisdiction_id,
16:00:50  53  	  in_ext_tax_type,
16:00:50  54  	  in_ext_result,
16:00:50  55  	  in_imposition_type,
16:00:50  56  	  in_imposition
16:00:50  57  	);
16:00:50  58  
16:00:50  59  EXCEPTION
16:00:50  60  WHEN BAD_LINE_ITEM_ID THEN
16:00:50  61  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50  62  	  SPROC_NAME, 'No such line item');
16:00:50  63  WHEN OTHERS THEN
16:00:50  64  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50  65  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50  66  END ADD_TAX;
16:00:50  67  
16:00:50  68  /******************************************************************************/
16:00:50  69  
16:00:50  70  PROCEDURE CHECK_COUNTRY_FOR_EXCLUSION (
16:00:50  71  	in_country_code IN CHAR,
16:00:50  72  	in_check_date IN DATE,
16:00:50  73  	out_is_founded	OUT NUMBER -- GLOBAL_CONSTANT.TRUE of GLOBAL_CONSTANTS_V20.FALSE
16:00:50  74  ) AS
16:00:50  75  SPROC_NAME CONSTANT VARCHAR2(27) := 'CHECK_COUNTRY_FOR_EXCLUSION';
16:00:50  76  -- VARIABLES
16:00:50  77  var_countries_count NUMBER;
16:00:50  78  var_result	  NUMBER;
16:00:50  79  BEGIN
16:00:50  80  
16:00:50  81  	SELECT
16:00:50  82  	  COUNT(1) into var_countries_count
16:00:50  83  	FROM
16:00:50  84  	  TAX_COUNTRY_EXCLUSION_LIST
16:00:50  85  	WHERE
16:00:50  86  	  country_code = in_country_code
16:00:50  87  	  AND TRUNC(EFFECTIVE_DATE) <= TRUNC(in_check_date)
16:00:50  88  	  AND (
16:00:50  89  	    end_date is null
16:00:50  90  	    OR TRUNC(END_DATE) >= TRUNC(in_check_date)
16:00:50  91  	  );
16:00:50  92  
16:00:50  93  	IF var_countries_count > 1 THEN
16:00:50  94  	  -- [REVU] Should not happen. DB structure error
16:00:50  95  	  var_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50  96  	ELSIF var_countries_count = 1 THEN
16:00:50  97  	  var_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50  98  	ELSE
16:00:50  99  	  var_result := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 100  	END IF;
16:00:50 101  
16:00:50 102  	out_is_founded := var_result;
16:00:50 103  
16:00:50 104  EXCEPTION
16:00:50 105  WHEN OTHERS THEN
16:00:50 106  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 107  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 108  END CHECK_COUNTRY_FOR_EXCLUSION;
16:00:50 109  
16:00:50 110  /******************************************************************************/
16:00:50 111  
16:00:50 112  PROCEDURE GET_TAX_CATEGORY (
16:00:50 113  	in_tax_category_id IN NUMBER,
16:00:50 114  	out_result_set	   OUT SYS_REFCURSOR
16:00:50 115  ) AS
16:00:50 116  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TAX_CATEGORY';
16:00:50 117  BEGIN
16:00:50 118  
16:00:50 119  	OPEN out_result_set FOR
16:00:50 120  	SELECT
16:00:50 121  	  ID,
16:00:50 122  	  CODE,
16:00:50 123  	  DESCRIPTION
16:00:50 124  	FROM
16:00:50 125  	  TAX_CATEGORY
16:00:50 126  	WHERE
16:00:50 127  	  ID = in_tax_category_id;
16:00:50 128  
16:00:50 129  EXCEPTION
16:00:50 130  WHEN OTHERS THEN
16:00:50 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 133  END GET_TAX_CATEGORY;
16:00:50 134  
16:00:50 135  END PROCS_TAXES_V20;
16:00:50 136  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.04
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TRANSACTION_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE CREATE_TRANSACTION (
16:00:50   4  /*
16:00:50   5  Throws exceptions:
16:00:50   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50   8  */
16:00:50   9  	in_transaction_id	  IN NUMBER,
16:00:50  10  	in_status_id		  IN NUMBER,
16:00:50  11  	in_amount		  IN NUMBER,
16:00:50  12  	in_created_by		  IN VARCHAR2,
16:00:50  13  	in_order_id		  IN VARCHAR2,
16:00:50  14  	in_is_refund		  IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE,
16:00:50  15  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
16:00:50  16  	out_transaction_id	  OUT NUMBER
16:00:50  17  ) AS
16:00:50  18  -- VARIABLES
16:00:50  19  SPROC_NAME	     CONSTANT VARCHAR2(18) := 'CREATE_TRANSACTION';
16:00:50  20  var_transaction_count  NUMBER;
16:00:50  21  -- EXCEPTIONS
16:00:50  22  BAD_TRANSACTION_ID     EXCEPTION;
16:00:50  23  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50  24  BEGIN
16:00:50  25  
16:00:50  26  	IF in_transaction_id IS NOT NULL THEN
16:00:50  27  	  SELECT
16:00:50  28  	    COUNT(*) into var_transaction_count
16:00:50  29  	  FROM
16:00:50  30  	    TRANSACTION
16:00:50  31  	  WHERE
16:00:50  32  	    TRANSACTION.ID = in_transaction_id;
16:00:50  33  	  IF var_transaction_count > 0 THEN
16:00:50  34  	    RAISE BAD_TRANSACTION_ID;
16:00:50  35  	  END IF;
16:00:50  36  	END IF;
16:00:50  37  
16:00:50  38  	PROCS_TRANSACTION_CRU_V20.CREATE_TRANSACTION(
16:00:50  39  	  out_transaction_id	   => out_transaction_id,
16:00:50  40  	  in_transaction_id	   => in_transaction_id,
16:00:50  41  	  in_transaction_status_id => in_status_id,
16:00:50  42  	  in_transaction_amount    => in_amount,
16:00:50  43  	  in_created_by 	   => in_created_by,
16:00:50  44  	  in_order_id		   => in_order_id,
16:00:50  45  	  in_is_refund		   => in_is_refund,
16:00:50  46  	  in_transaction_type_code => in_transaction_type_code
16:00:50  47  	);
16:00:50  48  
16:00:50  49  EXCEPTION
16:00:50  50  WHEN BAD_TRANSACTION_ID THEN
16:00:50  51  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:50  52  	  SPROC_NAME, 'Transaction with given id already exists');
16:00:50  53  WHEN OTHERS THEN
16:00:50  54  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50  55  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50  56  END CREATE_TRANSACTION;
16:00:50  57  
16:00:50  58  /******************************************************************************/
16:00:50  59  
16:00:50  60  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:00:50  61  /*
16:00:50  62  Throws exceptions:
16:00:50  63  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50  64  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50  65  */
16:00:50  66  	in_transaction_id	   IN NUMBER,
16:00:50  67  	in_trans_attempt_status    IN NUMBER,
16:00:50  68  	in_external_status_code    IN VARCHAR2,
16:00:50  69  	in_external_status_message IN VARCHAR2,
16:00:50  70  	in_created_by		   IN VARCHAR2,
16:00:50  71  	in_ext_transaction_id	   IN VARCHAR2,
16:00:50  72  	out_transaction_attempt_id OUT NUMBER
16:00:50  73  ) AS
16:00:50  74  -- VARIABLES
16:00:50  75  SPROC_NAME		 CONSTANT VARCHAR2(26) := 'CREATE_TRANSACTION_ATTEMPT';
16:00:50  76  var_transaction_create_date DATE;
16:00:50  77  var_transaction_attempt_id  NUMBER;
16:00:50  78  
16:00:50  79  -- EXCEPTIONS
16:00:50  80  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
16:00:50  81  BAD_TRANSACTION_ID       EXCEPTION;
16:00:50  82  BEGIN
16:00:50  83  
16:00:50  84  	-- Check that transaction exists
16:00:50  85  	BEGIN
16:00:50  86  	  SELECT
16:00:50  87  	    TRANSACTION.CREATE_DATE into var_transaction_create_date
16:00:50  88  	  FROM
16:00:50  89  	    TRANSACTION
16:00:50  90  	  WHERE
16:00:50  91  	    TRANSACTION.ID = in_transaction_id;
16:00:50  92  	  EXCEPTION
16:00:50  93  	    WHEN OTHERS THEN
16:00:50  94  	      RAISE BAD_TRANSACTION_ID;
16:00:50  95  	END;
16:00:50  96  
16:00:50  97  	-- Check that transaction status is correct
16:00:50  98  	IF in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
16:00:50  99  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:50 100  	  AND in_trans_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
16:00:50 101  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:00:50 102  	END IF;
16:00:50 103  
16:00:50 104  	var_transaction_attempt_id := NULL;
16:00:50 105  	PROCS_TRANSACTION_CRU_V20.CREATE_TRANSACTION_ATTEMPT(
16:00:50 106  	  inout_transaction_attempt_id => var_transaction_attempt_id,
16:00:50 107  	  in_transaction_id	       => in_transaction_id,
16:00:50 108  	  in_external_status_code      => in_external_status_code,
16:00:50 109  	  in_external_status_message   => in_external_status_message,
16:00:50 110  	  in_created_by 	       => in_created_by,
16:00:50 111  	  in_external_transaction_id   => in_ext_transaction_id,
16:00:50 112  	  in_transaction_start_time    => var_transaction_create_date,
16:00:50 113  	  in_status_id		       => in_trans_attempt_status
16:00:50 114  	);
16:00:50 115  
16:00:50 116  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
16:00:50 117  	  in_transaction_id => in_transaction_id,
16:00:50 118  	  in_updated_by     => in_created_by
16:00:50 119  	);
16:00:50 120  
16:00:50 121  	out_transaction_attempt_id := var_transaction_attempt_id;
16:00:50 122  
16:00:50 123  EXCEPTION
16:00:50 124  WHEN BAD_TRANSACTION_ID THEN
16:00:50 125  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 126  	  SPROC_NAME, 'No such transaction');
16:00:50 127  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:00:50 128  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 129  	  SPROC_NAME, 'Bad transaction attempt status');
16:00:50 130  WHEN OTHERS THEN
16:00:50 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 133  END CREATE_TRANSACTION_ATTEMPT;
16:00:50 134  
16:00:50 135  /******************************************************************************/
16:00:50 136  
16:00:50 137  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:00:50 138  /*
16:00:50 139  Throws exceptions:
16:00:50 140  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 141  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 142  */
16:00:50 143  	in_transaction_id	 IN NUMBER,
16:00:50 144  	in_updated_by		 IN VARCHAR2,
16:00:50 145  	in_transaction_status_id IN NUMBER
16:00:50 146  ) AS
16:00:50 147  -- VARIABLES
16:00:50 148  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'UPDATE_TRANSACTION_STATUS';
16:00:50 149  temp_transaction_id NUMBER;
16:00:50 150  
16:00:50 151  -- EXCEPTIONS
16:00:50 152  BAD_TRANSACTION_ID     EXCEPTION;
16:00:50 153  BAD_TRANSACTION_STATUS EXCEPTION;
16:00:50 154  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 155  BEGIN
16:00:50 156  
16:00:50 157  	-- Check that transaction exists
16:00:50 158  	BEGIN
16:00:50 159  	  SELECT
16:00:50 160  	    TRANSACTION.ID into temp_transaction_id
16:00:50 161  	  FROM
16:00:50 162  	    TRANSACTION
16:00:50 163  	  WHERE
16:00:50 164  	    TRANSACTION.ID = in_transaction_id;
16:00:50 165  	  EXCEPTION
16:00:50 166  	    WHEN OTHERS THEN
16:00:50 167  	      RAISE BAD_TRANSACTION_ID;
16:00:50 168  	END;
16:00:50 169  
16:00:50 170  	-- Check that transaction status is correct
16:00:50 171  	IF    in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_PENDING
16:00:50 172  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
16:00:50 173  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_CHARGEBACK
16:00:50 174  	  AND in_transaction_status_id != GLOBAL_STATUSES_V20.TRANSACTION_DECLINED THEN
16:00:50 175  	  RAISE BAD_TRANSACTION_STATUS;
16:00:50 176  	END IF;
16:00:50 177  
16:00:50 178  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
16:00:50 179  	  in_transaction_id	   => in_transaction_id,
16:00:50 180  	  in_updated_by 	   => in_updated_by,
16:00:50 181  	  in_transaction_status_id => in_transaction_status_id
16:00:50 182  	);
16:00:50 183  
16:00:50 184  EXCEPTION
16:00:50 185  WHEN BAD_TRANSACTION_ID THEN
16:00:50 186  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 187  	  SPROC_NAME, 'No such transaction');
16:00:50 188  WHEN BAD_TRANSACTION_STATUS THEN
16:00:50 189  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 190  	  SPROC_NAME, 'Bad transaction status');
16:00:50 191  WHEN OTHERS THEN
16:00:50 192  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 193  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 194  END UPDATE_TRANSACTION_STATUS;
16:00:50 195  
16:00:50 196  /******************************************************************************/
16:00:50 197  
16:00:50 198  PROCEDURE UPDATE_TRANSACTION_SETTLED (
16:00:50 199  /*
16:00:50 200  Throws exceptions:
16:00:50 201  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 202  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 203  */
16:00:50 204  	in_transaction_id	 IN NUMBER,
16:00:50 205  	in_updated_by		 IN VARCHAR2,
16:00:50 206  	in_is_settled		 IN NUMBER
16:00:50 207  ) AS
16:00:50 208  -- VARIABLES
16:00:50 209  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'UPDATE_TRANSACTION_SETTLED';
16:00:50 210  temp_transaction_id NUMBER;
16:00:50 211  
16:00:50 212  -- EXCEPTIONS
16:00:50 213  BAD_TRANSACTION_ID     EXCEPTION;
16:00:50 214  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 215  BEGIN
16:00:50 216  
16:00:50 217  	-- Check that transaction exists
16:00:50 218  	BEGIN
16:00:50 219  	  SELECT
16:00:50 220  	    TRANSACTION.ID into temp_transaction_id
16:00:50 221  	  FROM
16:00:50 222  	    TRANSACTION
16:00:50 223  	  WHERE
16:00:50 224  	    TRANSACTION.ID = in_transaction_id;
16:00:50 225  	  EXCEPTION
16:00:50 226  	    WHEN OTHERS THEN
16:00:50 227  	      RAISE BAD_TRANSACTION_ID;
16:00:50 228  	END;
16:00:50 229  
16:00:50 230  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
16:00:50 231  	  in_transaction_id	   => in_transaction_id,
16:00:50 232  	  in_updated_by 	   => in_updated_by,
16:00:50 233  	  in_is_settled 	   => in_is_settled
16:00:50 234  	);
16:00:50 235  
16:00:50 236  EXCEPTION
16:00:50 237  WHEN BAD_TRANSACTION_ID THEN
16:00:50 238  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 239  	  SPROC_NAME, 'No such transaction');
16:00:50 240  WHEN OTHERS THEN
16:00:50 241  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 242  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 243  END UPDATE_TRANSACTION_SETTLED;
16:00:50 244  
16:00:50 245  /******************************************************************************/
16:00:50 246  
16:00:50 247  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:00:50 248  /*
16:00:50 249  Throws exceptions:
16:00:50 250  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 251  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 252  */
16:00:50 253  	in_transaction_attempt_id IN NUMBER,
16:00:50 254  	in_updated_by		  IN VARCHAR2
16:00:50 255  ) AS
16:00:50 256  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRNSCTN_ATTEMPT_TIME';
16:00:50 257  -- VARIABLES
16:00:50 258  var_transaction_id NUMBER;
16:00:50 259  -- EXCEPTION
16:00:50 260  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
16:00:50 261  BEGIN
16:00:50 262  
16:00:50 263  	BEGIN
16:00:50 264  	  SELECT
16:00:50 265  	    TRANSACTION_ATTEMPT.TRANSACTION_ID into var_transaction_id
16:00:50 266  	  FROM
16:00:50 267  	    TRANSACTION_ATTEMPT
16:00:50 268  	  WHERE
16:00:50 269  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:00:50 270  	  EXCEPTION
16:00:50 271  	    WHEN NO_DATA_FOUND THEN
16:00:50 272  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
16:00:50 273  	END;
16:00:50 274  
16:00:50 275  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION(
16:00:50 276  	  in_transaction_id => var_transaction_id,
16:00:50 277  	  in_updated_by     => in_updated_by
16:00:50 278  	);
16:00:50 279  
16:00:50 280  EXCEPTION
16:00:50 281  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
16:00:50 282  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 283  	  SPROC_NAME, 'No such transaction attempt');
16:00:50 284  WHEN OTHERS THEN
16:00:50 285  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 286  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 287  END UPDATE_TRNSCTN_ATTEMPT_TIME;
16:00:50 288  
16:00:50 289  /******************************************************************************/
16:00:50 290  
16:00:50 291  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:00:50 292  /*
16:00:50 293  Throws exceptions:
16:00:50 294  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 295  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 296  */
16:00:50 297  	in_transaction_attempt_id     IN NUMBER,
16:00:50 298  	in_transaction_attempt_status IN NUMBER
16:00:50 299  ) AS
16:00:50 300  -- VARIABLES
16:00:50 301  SPROC_NAME		  CONSTANT VARCHAR2(29) := 'UPDATE_TRNSCTN_ATTEMPT_STATUS';
16:00:50 302  temp_transaction_attempt_id NUMBER;
16:00:50 303  
16:00:50 304  -- EXCEPTION
16:00:50 305  BAD_TRANSACTION_ATTEMPT_ID EXCEPTION;
16:00:50 306  BAD_TRANS_ATTEMPT_STATUS	 EXCEPTION;
16:00:50 307  BEGIN
16:00:50 308  
16:00:50 309  	-- Check that transaction attempt exists
16:00:50 310  	BEGIN
16:00:50 311  	  SELECT
16:00:50 312  	    TRANSACTION_ATTEMPT.ID into temp_transaction_attempt_id
16:00:50 313  	  FROM
16:00:50 314  	    TRANSACTION_ATTEMPT
16:00:50 315  	  WHERE
16:00:50 316  	    TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:00:50 317  	  EXCEPTION
16:00:50 318  	    WHEN NO_DATA_FOUND THEN
16:00:50 319  	      RAISE BAD_TRANSACTION_ATTEMPT_ID;
16:00:50 320  	END;
16:00:50 321  
16:00:50 322  	-- Check that transaction attempt is correct
16:00:50 323  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
16:00:50 324  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:50 325  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
16:00:50 326  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:00:50 327  	END IF;
16:00:50 328  
16:00:50 329  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ATTEMPT(
16:00:50 330  	  in_transaction_attempt_id => in_transaction_attempt_id,
16:00:50 331  	  in_status_id		    => in_transaction_attempt_status
16:00:50 332  	);
16:00:50 333  
16:00:50 334  EXCEPTION
16:00:50 335  WHEN BAD_TRANSACTION_ATTEMPT_ID THEN
16:00:50 336  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 337  	  SPROC_NAME, 'No such transaction attempt');
16:00:50 338  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:00:50 339  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 340  	  SPROC_NAME, 'Bad transaction attempt status');
16:00:50 341  WHEN OTHERS THEN
16:00:50 342  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 343  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 344  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
16:00:50 345  
16:00:50 346  /******************************************************************************/
16:00:50 347  
16:00:50 348  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:00:50 349  /*
16:00:50 350  Throws exceptions:
16:00:50 351  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 352  */
16:00:50 353  	in_transaction_id	      IN NUMBER,
16:00:50 354  	in_transaction_attempt_status IN NUMBER,
16:00:50 355  	out_result_set		      OUT SYS_REFCURSOR
16:00:50 356  ) AS
16:00:50 357  -- VARIABLES
16:00:50 358  SPROC_NAME	  CONSTANT VARCHAR2(30) := 'GET_TRNSCTN_ATTEMPTS_BY_STATUS';
16:00:50 359  temp_transaction_id NUMBER;
16:00:50 360  -- EXCEPTIONS
16:00:50 361  BAD_TRANSACTION_ID       EXCEPTION;
16:00:50 362  BAD_TRANS_ATTEMPT_STATUS EXCEPTION;
16:00:50 363  BEGIN
16:00:50 364  
16:00:50 365  	-- Check that transaction exists
16:00:50 366  	BEGIN
16:00:50 367  	  SELECT
16:00:50 368  	    TRANSACTION.ID into temp_transaction_id
16:00:50 369  	  FROM
16:00:50 370  	    TRANSACTION
16:00:50 371  	  WHERE
16:00:50 372  	    TRANSACTION.ID = in_transaction_id;
16:00:50 373  	  EXCEPTION
16:00:50 374  	    WHEN OTHERS THEN
16:00:50 375  	      RAISE BAD_TRANSACTION_ID;
16:00:50 376  	END;
16:00:50 377  
16:00:50 378  	-- Check that transaction attempt status is correct
16:00:50 379  	IF in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_IN_PROGRESS
16:00:50 380  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:50 381  	  AND in_transaction_attempt_status != GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED THEN
16:00:50 382  	  RAISE BAD_TRANS_ATTEMPT_STATUS;
16:00:50 383  	END IF;
16:00:50 384  
16:00:50 385  	OPEN out_result_set FOR
16:00:50 386  	SELECT
16:00:50 387  	  TRANSACTION_ATTEMPT.ID,
16:00:50 388  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
16:00:50 389  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
16:00:50 390  	  TRANSACTION_ATTEMPT.CREATE_DATE,
16:00:50 391  	  TRANSACTION_ATTEMPT.CREATED_BY,
16:00:50 392  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID,
16:00:50 393  	  TRANSACTION_ATTEMPT.TRANSACTION_START_TIME,
16:00:50 394  	  TRANSACTION.TRANSACTION_AMOUNT,
16:00:50 395  	  TRANSACTION.ID as "TRANSACTION_ID",
16:00:50 396  	  TRANSACTION.UPDATE_DATE as "TRANSACTION_UPDATE_TIME"
16:00:50 397  	FROM
16:00:50 398  	  TRANSACTION_ATTEMPT
16:00:50 399  	  INNER JOIN TRANSACTION ON TRANSACTION_ATTEMPT.TRANSACTION_ID = TRANSACTION.ID
16:00:50 400  	WHERE
16:00:50 401  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:00:50 402  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = in_transaction_attempt_status;
16:00:50 403  
16:00:50 404  EXCEPTION
16:00:50 405  WHEN BAD_TRANSACTION_ID THEN
16:00:50 406  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 407  	  SPROC_NAME, 'No such transaction');
16:00:50 408  WHEN BAD_TRANS_ATTEMPT_STATUS THEN
16:00:50 409  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 410  	  SPROC_NAME, 'Bad transaction attempt status');
16:00:50 411  WHEN OTHERS THEN
16:00:50 412  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 413  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 414  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
16:00:50 415  
16:00:50 416  /******************************************************************************/
16:00:50 417  
16:00:50 418  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:00:50 419  /*
16:00:50 420  Throws exceptions:
16:00:50 421  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 422  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 423  */
16:00:50 424  	in_transaction_attempt_id IN NUMBER,
16:00:50 425  	in_ext_status_code	  IN VARCHAR2,
16:00:50 426  	in_ext_status_message	  IN VARCHAR2,
16:00:50 427  	in_ext_transaction_id	  IN VARCHAR2
16:00:50 428  ) AS
16:00:50 429  -- VARIABLES
16:00:50 430  SPROC_NAME	       CONSTANT VARCHAR2(30) := 'UPDATE_TRANSACTION_ATTEMPT_INF';
16:00:50 431  temp_trans_attempt_count NUMBER;
16:00:50 432  -- EXCEPTIONS
16:00:50 433  BAD_ATTEMPT_ID EXCEPTION;
16:00:50 434  BEGIN
16:00:50 435  
16:00:50 436  	SELECT
16:00:50 437  	  COUNT(*) into temp_trans_attempt_count
16:00:50 438  	FROM
16:00:50 439  	  TRANSACTION_ATTEMPT
16:00:50 440  	WHERE
16:00:50 441  	  TRANSACTION_ATTEMPT.ID = in_transaction_attempt_id;
16:00:50 442  
16:00:50 443  	IF temp_trans_attempt_count = 0 THEN
16:00:50 444  	  RAISE BAD_ATTEMPT_ID;
16:00:50 445  	END IF;
16:00:50 446  
16:00:50 447  	PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ATTEMPT(
16:00:50 448  	  in_transaction_attempt_id  => in_transaction_attempt_id,
16:00:50 449  	  in_external_status_code    => in_ext_status_code,
16:00:50 450  	  in_external_status_message => in_ext_status_message,
16:00:50 451  	  in_external_transaction_id => in_ext_transaction_id
16:00:50 452  	);
16:00:50 453  
16:00:50 454  EXCEPTION
16:00:50 455  WHEN BAD_ATTEMPT_ID THEN
16:00:50 456  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 457  	  SPROC_NAME, 'No such attempt');
16:00:50 458  WHEN OTHERS THEN
16:00:50 459  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 460  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 461  END UPDATE_TRANSACTION_ATTEMPT_INF;
16:00:50 462  
16:00:50 463  /******************************************************************************/
16:00:50 464  
16:00:50 465  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:00:50 466  /*
16:00:50 467  Throws exceptions:
16:00:50 468  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 469  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 470  */
16:00:50 471  	in_transaction_id IN  NUMBER,
16:00:50 472  	out_attempts_num  OUT NUMBER
16:00:50 473  ) AS
16:00:50 474  -- VARIABLES
16:00:50 475  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'GET_FAILED_ATTEMPTS_NUMBER';
16:00:50 476  temp_transaction_count NUMBER;
16:00:50 477  
16:00:50 478  -- EXCEPTIONS
16:00:50 479  BAD_TRANSACTION_ID EXCEPTION;
16:00:50 480  BEGIN
16:00:50 481  
16:00:50 482  	SELECT
16:00:50 483  	  COUNT(*) into temp_transaction_count
16:00:50 484  	FROM
16:00:50 485  	  TRANSACTION
16:00:50 486  	WHERE
16:00:50 487  	  TRANSACTION.ID = in_transaction_id;
16:00:50 488  
16:00:50 489  	IF temp_transaction_count = 0 THEN
16:00:50 490  	  RAISE BAD_TRANSACTION_ID;
16:00:50 491  	END IF;
16:00:50 492  
16:00:50 493  	SELECT
16:00:50 494  	  COUNT(*) into out_attempts_num
16:00:50 495  	FROM
16:00:50 496  	  TRANSACTION_ATTEMPT
16:00:50 497  	WHERE
16:00:50 498  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:00:50 499  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_FAILED;
16:00:50 500  
16:00:50 501  EXCEPTION
16:00:50 502  WHEN BAD_TRANSACTION_ID THEN
16:00:50 503  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 504  	  SPROC_NAME, 'No such transaction');
16:00:50 505  WHEN OTHERS THEN
16:00:50 506  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 507  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 508  END GET_FAILED_ATTEMPTS_NUMBER;
16:00:50 509  /******************************************************************************/
16:00:50 510  
16:00:50 511  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:00:50 512  /*
16:00:50 513  Throws exceptions:
16:00:50 514  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 515  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 516  */
16:00:50 517  	in_transaction_id IN  NUMBER,
16:00:50 518  	out_is_successfull  OUT NUMBER
16:00:50 519  ) AS
16:00:50 520  -- VARIABLES
16:00:50 521  SPROC_NAME	     CONSTANT VARCHAR2(26) := 'IS_TRANSACTION_SUCCESSFULL';
16:00:50 522  temp_transaction_count NUMBER;
16:00:50 523  
16:00:50 524  -- EXCEPTIONS
16:00:50 525  BAD_TRANSACTION_ID EXCEPTION;
16:00:50 526  BEGIN
16:00:50 527  
16:00:50 528  	SELECT
16:00:50 529  	  COUNT(*) into temp_transaction_count
16:00:50 530  	FROM
16:00:50 531  	  TRANSACTION
16:00:50 532  	WHERE
16:00:50 533  	  TRANSACTION.ID = in_transaction_id;
16:00:50 534  
16:00:50 535  	IF temp_transaction_count = 0 THEN
16:00:50 536  	  RAISE BAD_TRANSACTION_ID;
16:00:50 537  	END IF;
16:00:50 538  
16:00:50 539  	SELECT
16:00:50 540  	  COUNT(*) into out_is_successfull
16:00:50 541  	FROM
16:00:50 542  	  TRANSACTION_ATTEMPT
16:00:50 543  	WHERE
16:00:50 544  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:00:50 545  	  AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS;
16:00:50 546  
16:00:50 547  EXCEPTION
16:00:50 548  WHEN BAD_TRANSACTION_ID THEN
16:00:50 549  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 550  	  SPROC_NAME, 'No such transaction');
16:00:50 551  WHEN OTHERS THEN
16:00:50 552  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 553  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 554  END IS_TRANSACTION_SUCCESSFULL;
16:00:50 555  /******************************************************************************/
16:00:50 556  
16:00:50 557  PROCEDURE GET_TRANSACTION_AMOUNT (
16:00:50 558  /*
16:00:50 559  Throws exceptions:
16:00:50 560  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 561  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 562  */
16:00:50 563  	in_transaction_id      IN  NUMBER,
16:00:50 564  	out_transaction_amount OUT NUMBER
16:00:50 565  ) AS
16:00:50 566  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_TRANSACTION_AMOUNT';
16:00:50 567  BEGIN
16:00:50 568  
16:00:50 569  	SELECT
16:00:50 570  	  TRANSACTION.TRANSACTION_AMOUNT into out_transaction_amount
16:00:50 571  	FROM
16:00:50 572  	  TRANSACTION
16:00:50 573  	WHERE
16:00:50 574  	  TRANSACTION.ID = in_transaction_id;
16:00:50 575  
16:00:50 576  EXCEPTION
16:00:50 577  WHEN NO_DATA_FOUND THEN
16:00:50 578  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 579  	  SPROC_NAME, 'No such transaction');
16:00:50 580  WHEN OTHERS THEN
16:00:50 581  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 582  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 583  END GET_TRANSACTION_AMOUNT;
16:00:50 584  
16:00:50 585  /******************************************************************************/
16:00:50 586  
16:00:50 587  PROCEDURE GET_TRANSACTIONS_BY_CHARGE_ID (
16:00:50 588  /*
16:00:50 589  Throws exceptions:
16:00:50 590  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 591  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 592  */
16:00:50 593  	in_charge_id   IN  NUMBER,
16:00:50 594  	out_result_set OUT SYS_REFCURSOR
16:00:50 595  ) AS
16:00:50 596  -- VARIABLES
16:00:50 597  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_TRANSACTIONS_BY_CHARGE_ID';
16:00:50 598  temp_charge_id NUMBER;
16:00:50 599  -- EXCEPTIONS
16:00:50 600  BAD_CHARGE_ID EXCEPTION;
16:00:50 601  BEGIN
16:00:50 602  
16:00:50 603  	BEGIN
16:00:50 604  	  SELECT
16:00:50 605  	    CHARGE.ID into temp_charge_id
16:00:50 606  	  FROM
16:00:50 607  	    CHARGE
16:00:50 608  	  WHERE
16:00:50 609  	    CHARGE.ID = in_charge_id;
16:00:50 610  	  EXCEPTION
16:00:50 611  	    WHEN NO_DATA_FOUND THEN
16:00:50 612  	      RAISE BAD_CHARGE_ID;
16:00:50 613  	END;
16:00:50 614  
16:00:50 615  	OPEN out_result_set FOR
16:00:50 616  	SELECT DISTINCT
16:00:50 617  	  TRANSACTION.ID,
16:00:50 618  	  TRANSACTION.TRANSACTION_STATUS_ID,
16:00:50 619  	  TRANSACTION.CREATE_DATE,
16:00:50 620  	  TRANSACTION.TRANSACTION_AMOUNT,
16:00:50 621  	  TRANSACTION.IS_REFUND,
16:00:50 622  	  TRANSACTION.ORDER_ID
16:00:50 623  	FROM
16:00:50 624  	  CHARGE INNER JOIN TRANSACTION ON
16:00:50 625  	      CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:50 626  	WHERE
16:00:50 627  	  CHARGE.ID = in_charge_id;
16:00:50 628  
16:00:50 629  EXCEPTION
16:00:50 630  WHEN BAD_CHARGE_ID THEN
16:00:50 631  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 632  	  SPROC_NAME, 'No such charge');
16:00:50 633  WHEN OTHERS THEN
16:00:50 634  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 635  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 636  END GET_TRANSACTIONS_BY_CHARGE_ID;
16:00:50 637  /******************************************************************************/
16:00:50 638  
16:00:50 639  PROCEDURE GET_TRANSACTION_BY_ORDER_ID (
16:00:50 640  /*
16:00:50 641  Throws exceptions:
16:00:50 642  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 643  */
16:00:50 644  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:00:50 645  	out_result_set OUT SYS_REFCURSOR
16:00:50 646  ) AS
16:00:50 647  -- VARIABLES
16:00:50 648  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_BY_ORDER_ID';
16:00:50 649  BEGIN
16:00:50 650  	OPEN out_result_set FOR
16:00:50 651  	SELECT DISTINCT
16:00:50 652  	  TRANSACTION.ID
16:00:50 653  	FROM
16:00:50 654  	  TRANSACTION
16:00:50 655  	WHERE
16:00:50 656  	  TRANSACTION.ORDER_ID = in_order_id;
16:00:50 657  
16:00:50 658  EXCEPTION
16:00:50 659  WHEN OTHERS THEN
16:00:50 660  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 661  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 662  END GET_TRANSACTION_BY_ORDER_ID;
16:00:50 663  /******************************************************************************/
16:00:50 664  
16:00:50 665  PROCEDURE GET_TRANSACTIONS_BY_ORDER_ID (
16:00:50 666  /*
16:00:50 667  Throws exceptions:
16:00:50 668  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 669  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 670  */
16:00:50 671  	in_order_id   IN  TRANSACTION.ORDER_ID%TYPE,
16:00:50 672  	out_result_set OUT SYS_REFCURSOR
16:00:50 673  ) AS
16:00:50 674  -- VARIABLES
16:00:50 675  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_TRANSACTIONS_BY_ORDER_ID';
16:00:50 676  temp_order_id TRANSACTION.ORDER_ID%TYPE;
16:00:50 677  -- EXCEPTIONS
16:00:50 678  BAD_ORDER_ID EXCEPTION;
16:00:50 679  BEGIN
16:00:50 680  
16:00:50 681  	--TODO BOO, REMOVE ME
16:00:50 682  	BEGIN
16:00:50 683  	  SELECT
16:00:50 684  	    distinct TRANSACTION.ORDER_ID INTO temp_order_id
16:00:50 685  	  FROM
16:00:50 686  	    TRANSACTION
16:00:50 687  	  WHERE
16:00:50 688  	    TRANSACTION.ORDER_ID = in_order_id;
16:00:50 689  	  EXCEPTION
16:00:50 690  	    WHEN NO_DATA_FOUND THEN
16:00:50 691  	      RAISE BAD_ORDER_ID;
16:00:50 692  	END;
16:00:50 693  
16:00:50 694  	OPEN out_result_set FOR
16:00:50 695  	SELECT c.ID CHARGE_ID,
16:00:50 696  	  c.CHARGE_AMOUNT,
16:00:50 697  	  c.CHARGE_STATUS_ID,
16:00:50 698  	  c.INSTRUMENT_ID,
16:00:50 699  	  c.INSTRUMENT_TYPE_ID,
16:00:50 700  	  c.INVOICE_ID,
16:00:50 701  	  t.ID TRANSACTION_ID,
16:00:50 702  	  t.IS_REFUND,
16:00:50 703  	  t.IS_SETTLED,
16:00:50 704  	  t.ORDER_ID,
16:00:50 705  	  t.TRANSACTION_AMOUNT,
16:00:50 706  	  t.TRANSACTION_STATUS_ID,
16:00:50 707  	  t.CREATE_DATE TRANSACTION_CREATE_DATE,
16:00:50 708  	  t.CREATED_BY TRANSACTION_CREATED_BY,
16:00:50 709  	  t.UPDATE_DATE TRANSACTION_UPDATE_DATE,
16:00:50 710  	  t.UPDATED_BY TRANSACTION_UPDATED_BY
16:00:50 711  	FROM CHARGE c
16:00:50 712  	JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
16:00:50 713  	WHERE TRANSACTION_ID IN (
16:00:50 714  	  SELECT ID FROM TRANSACTION WHERE ORDER_ID = in_order_id
16:00:50 715  	);
16:00:50 716  
16:00:50 717  EXCEPTION
16:00:50 718  WHEN BAD_ORDER_ID THEN
16:00:50 719  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 720  	  SPROC_NAME, 'No such order');
16:00:50 721  WHEN OTHERS THEN
16:00:50 722  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 723  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 724  END GET_TRANSACTIONS_BY_ORDER_ID;
16:00:50 725  /******************************************************************************/
16:00:50 726  
16:00:50 727  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:00:50 728  /*
16:00:50 729  Throws exceptions:
16:00:50 730  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 731  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 732  */
16:00:50 733  	in_invoice_id	IN  NUMBER,
16:00:50 734  	out_result_set OUT SYS_REFCURSOR
16:00:50 735  ) AS
16:00:50 736  -- VARIABLES
16:00:50 737  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_CLOSED_REFUNDS_BY_INVOICE';
16:00:50 738  temp_invoice_id NUMBER;
16:00:50 739  -- EXCEPTIONS
16:00:50 740  BAD_INVOICE_ID EXCEPTION;
16:00:50 741  BEGIN
16:00:50 742  
16:00:50 743  	BEGIN
16:00:50 744  	  SELECT
16:00:50 745  	    INVOICE.ID into temp_invoice_id
16:00:50 746  	  FROM
16:00:50 747  	    INVOICE
16:00:50 748  	  WHERE
16:00:50 749  	    INVOICE.ID = in_invoice_id;
16:00:50 750  	  EXCEPTION
16:00:50 751  	    WHEN NO_DATA_FOUND THEN
16:00:50 752  	      RAISE BAD_INVOICE_ID;
16:00:50 753  	END;
16:00:50 754  
16:00:50 755  	OPEN out_result_set FOR
16:00:50 756  	SELECT DISTINCT
16:00:50 757  	  TRANSACTION.ID,
16:00:50 758  	  TRANSACTION.TRANSACTION_STATUS_ID,
16:00:50 759  	  TRANSACTION.CREATE_DATE,
16:00:50 760  	  TRANSACTION.UPDATE_DATE,
16:00:50 761  	  TRANSACTION.ORDER_ID,
16:00:50 762  	  TRANSACTION.TRANSACTION_AMOUNT
16:00:50 763  	FROM
16:00:50 764  	  INVOICE INNER JOIN CHARGE ON	(INVOICE.ID = CHARGE.INVOICE_ID)
16:00:50 765  	  INNER JOIN TRANSACTION ON (CHARGE.TRANSACTION_ID = TRANSACTION.ID)
16:00:50 766  	WHERE
16:00:50 767  	  INVOICE.ID = in_invoice_id
16:00:50 768  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 769  	  AND TRANSACTION.TRANSACTION_AMOUNT <= 0
16:00:50 770  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_CLOSED;
16:00:50 771  
16:00:50 772  EXCEPTION
16:00:50 773  WHEN BAD_INVOICE_ID THEN
16:00:50 774  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 775  	  SPROC_NAME, 'No such invoice');
16:00:50 776  WHEN OTHERS THEN
16:00:50 777  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 778  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 779  END GET_CLOSED_REFUNDS_BY_INVOICE;
16:00:50 780  
16:00:50 781  /******************************************************************************/
16:00:50 782  
16:00:50 783  PROCEDURE GET_TRANSACTION_ATTEMPTS (
16:00:50 784  /*
16:00:50 785  Throws exceptions:
16:00:50 786  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 787  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 788  */
16:00:50 789  	in_transaction_id IN  NUMBER,
16:00:50 790  	out_result_set	  OUT SYS_REFCURSOR
16:00:50 791  ) AS
16:00:50 792  -- VARIABLES
16:00:50 793  SPROC_NAME	  CONSTANT VARCHAR2(24) := 'GET_TRANSACTION_ATTEMPTS';
16:00:50 794  temp_transaction_id NUMBER;
16:00:50 795  -- EXCEPTIONS
16:00:50 796  BAD_TRANSACTION_ID EXCEPTION;
16:00:50 797  BEGIN
16:00:50 798  
16:00:50 799  	BEGIN
16:00:50 800  	  SELECT
16:00:50 801  	    TRANSACTION.ID into temp_transaction_id
16:00:50 802  	  FROM
16:00:50 803  	    TRANSACTION
16:00:50 804  	  WHERE
16:00:50 805  	    TRANSACTION.ID = in_transaction_id;
16:00:50 806  	  EXCEPTION
16:00:50 807  	    WHEN NO_DATA_FOUND THEN
16:00:50 808  	      RAISE BAD_TRANSACTION_ID;
16:00:50 809  	END;
16:00:50 810  
16:00:50 811  	OPEN out_result_set FOR
16:00:50 812  	SELECT
16:00:50 813  	  TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID,
16:00:50 814  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_CODE,
16:00:50 815  	  TRANSACTION_ATTEMPT.EXTERNAL_STATUS_MESSAGE,
16:00:50 816  	  TRANSACTION_ATTEMPT.CREATE_DATE,
16:00:50 817  	  TRANSACTION_ATTEMPT.EXTERNAL_TRANSACTION_ID
16:00:50 818  	FROM
16:00:50 819  	  TRANSACTION_ATTEMPT
16:00:50 820  	WHERE
16:00:50 821  	  TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id;
16:00:50 822  
16:00:50 823  EXCEPTION
16:00:50 824  WHEN BAD_TRANSACTION_ID THEN
16:00:50 825  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 826  	  SPROC_NAME, 'No such transaction');
16:00:50 827  WHEN OTHERS THEN
16:00:50 828  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 830  END GET_TRANSACTION_ATTEMPTS;
16:00:50 831  
16:00:50 832  /******************************************************************************/
16:00:50 833  
16:00:50 834  PROCEDURE RESERVE_TRANSACTION_ID (
16:00:50 835  /*
16:00:50 836  Throws exceptions:
16:00:50 837  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 838  */
16:00:50 839  	out_transaction_id OUT NUMBER
16:00:50 840  ) AS
16:00:50 841  SPROC_NAME CONSTANT VARCHAR2(22) := 'RESERVE_TRANSACTION_ID';
16:00:50 842  BEGIN
16:00:50 843  	SELECT
16:00:50 844  	  TRN_ID_SEQ.nextVal into out_transaction_id
16:00:50 845  	FROM DUAL;
16:00:50 846  EXCEPTION
16:00:50 847  WHEN OTHERS THEN
16:00:50 848  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 849  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 850  END RESERVE_TRANSACTION_ID;
16:00:50 851  
16:00:50 852  /******************************************************************************/
16:00:50 853  
16:00:50 854  PROCEDURE GET_TRANSACTION_BY_ID (
16:00:50 855  /*
16:00:50 856  Throws exceptions:
16:00:50 857  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 858  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 859  */
16:00:50 860  	in_transaction_id IN NUMBER,
16:00:50 861  	out_result_set	  OUT SYS_REFCURSOR
16:00:50 862  ) AS
16:00:50 863  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_TRANSACTION_BY_ID';
16:00:50 864  -- VARIABLES
16:00:50 865  temp_transaction_id NUMBER;
16:00:50 866  -- EXCPTIONS
16:00:50 867  BAD_TRANSACTION_ID EXCEPTION;
16:00:50 868  BEGIN
16:00:50 869  	BEGIN
16:00:50 870  	  SELECT
16:00:50 871  	    TRANSACTION.ID into temp_transaction_id
16:00:50 872  	  FROM
16:00:50 873  	    TRANSACTION
16:00:50 874  	  WHERE
16:00:50 875  	    TRANSACTION.ID = in_transaction_id;
16:00:50 876  	  EXCEPTION
16:00:50 877  	    WHEN NO_DATA_FOUND THEN
16:00:50 878  	      RAISE BAD_TRANSACTION_ID;
16:00:50 879  	END;
16:00:50 880  
16:00:50 881  	PROCS_TRANSACTION_CRU_V20.READ_TRANSACTION(
16:00:50 882  	  in_transaction_id => in_transaction_id,
16:00:50 883  	  out_result_set    => out_result_set
16:00:50 884  	);
16:00:50 885  
16:00:50 886  EXCEPTION
16:00:50 887  WHEN NO_DATA_FOUND THEN
16:00:50 888  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 889  	  SPROC_NAME, 'No such transaction');
16:00:50 890  WHEN OTHERS THEN
16:00:50 891  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 892  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 893  END GET_TRANSACTION_BY_ID;
16:00:50 894  
16:00:50 895  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:50 896  /*
16:00:50 897  Throws exceptions:
16:00:50 898  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 899  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:50 900  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 901  */
16:00:50 902  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:50 903  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:50 904  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:50 905  ) AS
16:00:50 906  SPROC_NAME CONSTANT VARCHAR2(27) := 'UPDATE_TRANSACTION_ORDER_ID';
16:00:50 907  -- VARIABLES
16:00:50 908  temp_transaction_id TRANSACTION.ID%TYPE;
16:00:50 909  -- EXCEPTIONS
16:00:50 910  BAD_TRANSACTION_ID   EXCEPTION;
16:00:50 911  ORDER_ID_IS_NOT_NULL EXCEPTION;
16:00:50 912  CRU_UNKNOWN_ERROR    EXCEPTION;
16:00:50 913  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:50 914  BEGIN
16:00:50 915  	BEGIN
16:00:50 916  	  SELECT
16:00:50 917  	    TRANSACTION.ID into temp_transaction_id
16:00:50 918  	  FROM
16:00:50 919  	    TRANSACTION
16:00:50 920  	  WHERE
16:00:50 921  	    TRANSACTION.ID = in_transaction_id;
16:00:50 922  	  EXCEPTION
16:00:50 923  	    WHEN NO_DATA_FOUND THEN
16:00:50 924  	      RAISE BAD_TRANSACTION_ID;
16:00:50 925  	END;
16:00:50 926  
16:00:50 927  	BEGIN
16:00:50 928  	  PROCS_TRANSACTION_CRU_V20.UPDATE_TRANSACTION_ORDER_ID(
16:00:50 929  	    in_transaction_id => in_transaction_id,
16:00:50 930  	    in_order_id       => in_order_id,
16:00:50 931  	    in_updated_by     => in_updated_by
16:00:50 932  	  );
16:00:50 933  	  EXCEPTION
16:00:50 934  	    WHEN OTHERS THEN
16:00:50 935  	      IF SQLCODE = APP_EXCEPTION_CODES_V20.NOT_FOUND THEN
16:00:50 936  		RAISE ORDER_ID_IS_NOT_NULL;
16:00:50 937  	      ELSE
16:00:50 938  		EXCEPTION_MESSAGE := SQLERRM;
16:00:50 939  		RAISE CRU_UNKNOWN_ERROR;
16:00:50 940  	      END IF;
16:00:50 941  	END;
16:00:50 942  
16:00:50 943  EXCEPTION
16:00:50 944  WHEN BAD_TRANSACTION_ID THEN
16:00:50 945  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 946  	  SPROC_NAME, 'No such transaction');
16:00:50 947  WHEN ORDER_ID_IS_NOT_NULL THEN
16:00:50 948  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 949  	  SPROC_NAME, 'Order id is not null');
16:00:50 950  WHEN CRU_UNKNOWN_ERROR THEN
16:00:50 951  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 952  	  SPROC_NAME, 'Unknown error while updating order id', EXCEPTION_MESSAGE);
16:00:50 953  WHEN OTHERS THEN
16:00:50 954  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 955  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 956  END UPDATE_TRANSACTION_ORDER_ID;
16:00:50 957  
16:00:50 958  /******************************************************************************/
16:00:50 959  
16:00:50 960  FUNCTION GET_TRANSACTION_TAX_AMOUNT (
16:00:50 961  	in_transaction_id IN NUMBER
16:00:50 962  ) RETURN NUMBER AS
16:00:50 963  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_TRANSACTION_TAX_AMOUNT';
16:00:50 964  -- Variables
16:00:50 965  var_tax_amount NUMBER(10,2);
16:00:50 966  BEGIN
16:00:50 967  
16:00:50 968  	SELECT
16:00:50 969  	  SUM(LI.TAXES_AMOUNT) into var_tax_amount
16:00:50 970  	FROM
16:00:50 971  	  LINE_ITEM LI
16:00:50 972  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
16:00:50 973  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID = I.ID
16:00:50 974  	WHERE
16:00:50 975  	  CH.TRANSACTION_ID = in_transaction_id;
16:00:50 976  
16:00:50 977  	IF var_tax_amount IS NULL THEN
16:00:50 978  	  var_tax_amount := 0;
16:00:50 979  	END IF;
16:00:50 980  
16:00:50 981  	RETURN var_tax_amount;
16:00:50 982  
16:00:50 983  END GET_TRANSACTION_TAX_AMOUNT;
16:00:50 984  
16:00:50 985  /******************************************************************************/
16:00:50 986  
16:00:50 987  FUNCTION GET_TRANSACTION_INTRL_TAXES (
16:00:50 988  	in_transaction_id IN NUMBER
16:00:50 989  ) RETURN NUMBER AS
16:00:50 990  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_TRANSACTION_INTRL_TAXES';
16:00:50 991  -- Variables
16:00:50 992  var_intrl_tax_amount NUMBER(10, 2);
16:00:50 993  BEGIN
16:00:50 994  
16:00:50 995  	SELECT SUM(T.CALCULATED_AMOUNT) into var_intrl_tax_amount
16:00:50 996  	FROM
16:00:50 997  	  LINE_ITEM LI
16:00:50 998  	  INNER JOIN INVOICE I ON LI.INVOICE_ID = I.ID
16:00:50 999  	  INNER JOIN CHARGE CH ON CH.INVOICE_ID=  I.ID
16:00:50 1000  	   INNER JOIN TAX T ON T.LINE_ITEM_ID = LI.ID
16:00:50 1001  	 WHERE
16:00:50 1002  	   CH.TRANSACTION_ID = in_transaction_id
16:00:50 1003  	   AND T.TAX_TYPE_ID IN (
16:00:50 1004  	     SELECT GLOBAL_ENUMS_V20.TAX_TYPE_VAT FROM DUAL
16:00:50 1005  	   );
16:00:50 1006  
16:00:50 1007  	 IF var_intrl_tax_amount IS NULL THEN
16:00:50 1008  	   var_intrl_tax_amount := 0;
16:00:50 1009  	 END IF;
16:00:50 1010  
16:00:50 1011  	 RETURN var_intrl_tax_amount;
16:00:50 1012  
16:00:50 1013  END GET_TRANSACTION_INTRL_TAXES;
16:00:50 1014  
16:00:50 1015  /******************************************************************************/
16:00:50 1016  -- norlov: #38796
16:00:50 1017  PROCEDURE GET_TRANSACTIONS (
16:00:50 1018  /*
16:00:50 1019  Throws exceptions:
16:00:50 1020  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1021  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1022  */
16:00:50 1023  	 in_group_id	       IN  NUMBER,
16:00:50 1024  	 in_invoice_id	       IN NUMBER DEFAULT NULL,
16:00:50 1025  	 in_subscription_id    IN NUMBER DEFAULT NULL,
16:00:50 1026  	 in_start_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:00:50 1027  	 in_end_date	       IN TRANSACTION.CREATE_DATE%TYPE DEFAULT NULL,
16:00:50 1028  	 in_transaction_status IN NUMBER DEFAULT NULL,
16:00:50 1029  	 out_result_set        OUT SYS_REFCURSOR
16:00:50 1030  ) AS
16:00:50 1031  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_TRANSACTIONS';
16:00:50 1032  -- VARIABLES
16:00:50 1033  var_account_id ACCOUNT.ID%TYPE;
16:00:50 1034  statement VARCHAR2(2000);
16:00:50 1035  -- EXCEPTIONS
16:00:50 1036  BAD_GROUP_ID   EXCEPTION;
16:00:50 1037  BEGIN
16:00:50 1038  	-- check group id
16:00:50 1039  	BEGIN
16:00:50 1040  	   SELECT
16:00:50 1041  	     ACCOUNT.ID into var_account_id
16:00:50 1042  	   FROM
16:00:50 1043  	     ACCOUNT
16:00:50 1044  	   WHERE
16:00:50 1045  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:50 1046  	   EXCEPTION
16:00:50 1047  	     WHEN NO_DATA_FOUND THEN
16:00:50 1048  	       RAISE BAD_GROUP_ID;
16:00:50 1049  	 END;
16:00:50 1050  
16:00:50 1051  	 OPEN out_result_set FOR
16:00:50 1052  	 SELECT
16:00:50 1053  	   TRANSACTION.ID,
16:00:50 1054  	   TRANSACTION.TRANSACTION_STATUS_ID,
16:00:50 1055  	   TRANSACTION.TRANSACTION_AMOUNT,
16:00:50 1056  	   TRANSACTION.CREATE_DATE,
16:00:50 1057  	   TRANSACTION.CREATED_BY,
16:00:50 1058  	   TRANSACTION.IS_REFUND,
16:00:50 1059  	   GET_TRANSACTION_TAX_AMOUNT(TRANSACTION.ID) as TRANSACTION_TAX_AMOUNT,
16:00:50 1060  	   GET_TRANSACTION_INTRL_TAXES(TRANSACTION.ID) as INTERNATIONAL_TOTAL
16:00:50 1061  	 FROM
16:00:50 1062  	   TRANSACTION
16:00:50 1063  	   INNER JOIN CHARGE ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:00:50 1064  	   INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID
16:00:50 1065  	 WHERE
16:00:50 1066  	   -- Filter by invoice ID
16:00:50 1067  	   (
16:00:50 1068  	     INVOICE.ID IN (
16:00:50 1069  	       -- Gift certificate invoices
16:00:50 1070  	       SELECT
16:00:50 1071  		 GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
16:00:50 1072  	       FROM
16:00:50 1073  		 GIFT_CERTIFICATE
16:00:50 1074  	       WHERE
16:00:50 1075  		 GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:00:50 1076  		 -- If subscription_id is set then return nothing
16:00:50 1077  		 AND EXISTS (SELECT 1 FROM DUAL WHERE in_subscription_id IS NULL)
16:00:50 1078  	     )
16:00:50 1079  	     OR
16:00:50 1080  	     INVOICE.ID IN (
16:00:50 1081  	       SELECT
16:00:50 1082  		 LICENSE.INVOICE_ID
16:00:50 1083  	       FROM
16:00:50 1084  		 LICENSE
16:00:50 1085  		 INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 1086  	       WHERE
16:00:50 1087  		 SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:50 1088  		 -- Filter by subscription id
16:00:50 1089  		 AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID)
16:00:50 1090  	     )
16:00:50 1091  	   )
16:00:50 1092  	   -- Filter by invoice id
16:00:50 1093  	   AND INVOICE.ID = NVL(in_invoice_id, INVOICE.ID)
16:00:50 1094  	   -- Filter by start date
16:00:50 1095  	   AND TRANSACTION.CREATE_DATE >= NVL(in_start_date, TRANSACTION.CREATE_DATE)
16:00:50 1096  	   -- Filter by end date
16:00:50 1097  	   AND TRANSACTION.CREATE_DATE <= NVL(in_end_date, TRANSACTION.CREATE_DATE)
16:00:50 1098  	   -- Filter by transaction status
16:00:50 1099  	   AND TRANSACTION.TRANSACTION_STATUS_ID IN ( SELECT NVL(in_transaction_status, TRANSACTION.TRANSACTION_STATUS_ID) FROM DUAL);
16:00:50 1100  
16:00:50 1101  /*
16:00:50 1102  
16:00:50 1103  statement :=  'select distinct '||CHR(10)
16:00:50 1104  || ' TRANSACTION.ID,'||CHR(10)
16:00:50 1105  || ' TRANSACTION.TRANSACTION_STATUS_ID, '||CHR(10)
16:00:50 1106  || ' TRANSACTION.TRANSACTION_AMOUNT, '||CHR(10)
16:00:50 1107  || ' TRANSACTION.CREATE_DATE, '||CHR(10)
16:00:50 1108  || ' TRANSACTION.CREATED_BY, '||CHR(10)
16:00:50 1109  || ' TRANSACTION.IS_REFUND from TRANSACTION '||CHR(10)
16:00:50 1110  || ' inner join CHARGE on (CHARGE.TRANSACTION_ID = TRANSACTION.ID)'||CHR(10)
16:00:50 1111  || ' inner join INVOICE on (INVOICE.ID = CHARGE.INVOICE_ID)'||CHR(10)
16:00:50 1112  || ' inner join LICENSE on (LICENSE.INVOICE_ID = INVOICE.ID)'||CHR(10)
16:00:50 1113  || ' inner join SUBSCRIPTION on (SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID)'||CHR(10)
16:00:50 1114  || ' inner join ACCOUNT on (ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID)'||CHR(10)
16:00:50 1115  || ' where ACCOUNT.GROUP_ID = '||in_group_id;
16:00:50 1116  
16:00:50 1117  IF (in_transaction_status IS NOT NULL) THEN
16:00:50 1118  	 statement := statement || CHR(10) || 'AND TRANSACTION.TRANSACTION_STATUS_ID=' || in_transaction_status;
16:00:50 1119  END IF;
16:00:50 1120  
16:00:50 1121  IF (in_invoice_id IS NOT NULL) THEN
16:00:50 1122  	 statement := statement || CHR(10) || 'AND INVOICE.ID=' || in_invoice_id;
16:00:50 1123  END IF;
16:00:50 1124  
16:00:50 1125  IF (in_subscription_id IS NOT NULL) THEN
16:00:50 1126  	 statement := statement || CHR(10) || 'AND SUBSCRIPTION.ID=' || in_subscription_id;
16:00:50 1127  END IF;
16:00:50 1128  
16:00:50 1129  IF (in_start_date IS NOT NULL) THEN
16:00:50 1130  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE>= TO_DATE(''' || TO_CHAR(in_start_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')';  -- norlov: ??
16:00:50 1131  END IF;
16:00:50 1132  
16:00:50 1133  IF (in_end_date IS NOT NULL) THEN
16:00:50 1134  	 statement := statement || CHR(10) || 'AND TRANSACTION.CREATE_DATE<= TO_DATE(''' || TO_CHAR(in_end_date,'yyyy/mm/dd:hh:mi:ss') || ''',''yyyy/mm/dd:hh:mi:ss'')'; -- norlov: ??
16:00:50 1135  END IF;
16:00:50 1136  dbms_output.put_line(statement);
16:00:50 1137  OPEN out_result_set FOR statement;
16:00:50 1138  
16:00:50 1139  */
16:00:50 1140  
16:00:50 1141  EXCEPTION
16:00:50 1142  WHEN BAD_GROUP_ID THEN
16:00:50 1143  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1144  	   SPROC_NAME, 'No such group');
16:00:50 1145  WHEN OTHERS THEN
16:00:50 1146  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1147  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1148  END GET_TRANSACTIONS;
16:00:50 1149  
16:00:50 1150  FUNCTION IS_TRANSACTION_COLLECTED (
16:00:50 1151  /*
16:00:50 1152  Throws:
16:00:50 1153  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1154  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1155  Returns:
16:00:50 1156  GLOBAL_CONST.TRUE if transaction collected,
16:00:50 1157  GLOBAL_CONST.FALSE else
16:00:50 1158  */
16:00:50 1159  	 in_transaction_id IN NUMBER
16:00:50 1160  ) RETURN NUMBER AS
16:00:50 1161  SPROC_NAME CONSTANT VARCHAR2(24) := 'IS_TRANSACTION_COLLECTED';
16:00:50 1162  -- VARIABLES
16:00:50 1163  temp_transaction_id     NUMBER;
16:00:50 1164  var_success_attemps_num NUMBER;
16:00:50 1165  -- EXCEPTIONS
16:00:50 1166  BAD_TRANSACTION_ID EXCEPTION;
16:00:50 1167  BEGIN
16:00:50 1168  
16:00:50 1169  	 BEGIN
16:00:50 1170  	   SELECT
16:00:50 1171  	     TRANSACTION.ID into temp_transaction_id
16:00:50 1172  	   FROM
16:00:50 1173  	     TRANSACTION
16:00:50 1174  	   WHERE
16:00:50 1175  	     TRANSACTION.ID = in_transaction_id;
16:00:50 1176  	   EXCEPTION
16:00:50 1177  	     WHEN NO_DATA_FOUND THEN
16:00:50 1178  	       RAISE BAD_TRANSACTION_ID;
16:00:50 1179  	 END;
16:00:50 1180  
16:00:50 1181  	 SELECT
16:00:50 1182  	   COUNT(*) into var_success_attemps_num
16:00:50 1183  	 FROM
16:00:50 1184  	   TRANSACTION_ATTEMPT
16:00:50 1185  	 WHERE
16:00:50 1186  	   TRANSACTION_ATTEMPT.TRANSACTION_ID = in_transaction_id
16:00:50 1187  	   AND TRANSACTION_ATTEMPT.TRANSACTION_ATTEMPT_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS FROM DUAL );
16:00:50 1188  
16:00:50 1189  	 IF var_success_attemps_num > 0 THEN
16:00:50 1190  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1191  	 ELSE
16:00:50 1192  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1193  	 END IF;
16:00:50 1194  
16:00:50 1195  EXCEPTION
16:00:50 1196  WHEN BAD_TRANSACTION_ID THEN
16:00:50 1197  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1198  	   SPROC_NAME, 'No such transaction');
16:00:50 1199  WHEN OTHERS THEN
16:00:50 1200  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1201  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1202  END IS_TRANSACTION_COLLECTED;
16:00:50 1203  
16:00:50 1204  
16:00:50 1205  /******************************************************************************/
16:00:50 1206  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
16:00:50 1207  /*
16:00:50 1208  Throws exceptions:
16:00:50 1209  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1210  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1211  */
16:00:50 1212  	 in_charge_id	in  number,
16:00:50 1213  	 out_attempt_count OUT NUMBER
16:00:50 1214  ) AS
16:00:50 1215  -- VARIABLES
16:00:50 1216  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_NEXT_ATTEMPT_NUMBER';
16:00:50 1217  temp_transaction_id NUMBER;
16:00:50 1218  -- EXCEPTIONS
16:00:50 1219  BAD_CHARGE_ID EXCEPTION;
16:00:50 1220  BEGIN
16:00:50 1221  
16:00:50 1222  	 BEGIN
16:00:50 1223  	   SELECT
16:00:50 1224  	     TRANSACTION_ID into temp_transaction_id
16:00:50 1225  	   FROM
16:00:50 1226  	     CHARGE
16:00:50 1227  	   WHERE
16:00:50 1228  	     CHARGE.ID = in_charge_id;
16:00:50 1229  	   EXCEPTION
16:00:50 1230  	     WHEN NO_DATA_FOUND THEN
16:00:50 1231  	       RAISE BAD_CHARGE_ID;
16:00:50 1232  	 END;
16:00:50 1233  
16:00:50 1234  	 select
16:00:50 1235  	   count(1)
16:00:50 1236  	 into
16:00:50 1237  	   out_attempt_count
16:00:50 1238  	 from
16:00:50 1239  	   transaction tr
16:00:50 1240  	 inner join
16:00:50 1241  	   transaction_attempt ta
16:00:50 1242  	 on (tr.id = ta.transaction_id)
16:00:50 1243  	 where
16:00:50 1244  	   tr.ID = temp_transaction_id;
16:00:50 1245  
16:00:50 1246  	 out_attempt_count := out_attempt_count + 1;
16:00:50 1247  
16:00:50 1248  EXCEPTION
16:00:50 1249  WHEN BAD_CHARGE_ID THEN
16:00:50 1250  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1251  	   SPROC_NAME, 'No such charge');
16:00:50 1252  WHEN OTHERS THEN
16:00:50 1253  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1254  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1255  end GET_NEXT_ATTEMPT_NUMBER;
16:00:50 1256  /******************************************************************************/
16:00:50 1257  
16:00:50 1258  END PROCS_TRANSACTION_V20;
16:00:50 1259  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.08
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_LICENSE_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE CREATE_LICENSE(
16:00:50   4  /*
16:00:50   5  Throws exceptions:
16:00:50   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50   8  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50   9  */
16:00:50  10  	in_status_id		    IN NUMBER,
16:00:50  11  	in_needs_entitlements	    IN NUMBER,
16:00:50  12  	in_start_date		    IN DATE,
16:00:50  13  	in_end_date		    IN DATE,
16:00:50  14  	in_offer_id		    IN NUMBER,
16:00:50  15  	in_subscription_id	    IN NUMBER,
16:00:50  16  	in_invoice_id		    IN NUMBER,
16:00:50  17  	in_created_by		    IN VARCHAR2,
16:00:50  18  	in_is_extension 	    IN NUMBER,
16:00:50  19  	in_current_offer_index	    IN NUMBER,
16:00:50  20  	in_current_offer_recurr_num IN NUMBER,
16:00:50  21  	out_license_id		    OUT NUMBER
16:00:50  22  ) AS
16:00:50  23  -- VARIABLES
16:00:50  24  SPROC_NAME	   CONSTANT VARCHAR2(14) := 'CREATE_LICENSE';
16:00:50  25  temp_offer_id	   NUMBER;
16:00:50  26  temp_subscription_id NUMBER;
16:00:50  27  temp_invoice_id	   NUMBER;
16:00:50  28  
16:00:50  29  var_new_license_id NUMBER;
16:00:50  30  var_offer_duration VARCHAR2(30);
16:00:50  31  
16:00:50  32  var_offer_ym_interval INTERVAL YEAR TO MONTH;
16:00:50  33  var_offer_ds_interval INTERVAL DAY(3) TO SECOND;
16:00:50  34  var_offer_years	    NUMBER;
16:00:50  35  var_offer_months	    NUMBER;
16:00:50  36  var_offer_days	    NUMBER;
16:00:50  37  
16:00:50  38  -- EXCEPTIONS
16:00:50  39  BAD_OFFER_ID	     EXCEPTION;
16:00:50  40  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:00:50  41  BAD_INVOICE_ID	     EXCEPTION;
16:00:50  42  BAD_OFFER_DURATION     EXCEPTION;
16:00:50  43  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50  44  BEGIN
16:00:50  45  
16:00:50  46  	-- TODO:
16:00:50  47  	---- check incoming data: in_current_offer_index, in_current_offer_recurr_num, in_is_extension
16:00:50  48  
16:00:50  49  	out_license_id := NULL;
16:00:50  50  
16:00:50  51  	-- get offer id and offer entitlement duration
16:00:50  52  	BEGIN
16:00:50  53  	  SELECT
16:00:50  54  	    OFFER.ID,
16:00:50  55  	    OFFER.ENTITLEMENT_DURATION
16:00:50  56  	    into
16:00:50  57  	    temp_offer_id,
16:00:50  58  	    var_offer_duration
16:00:50  59  	  FROM
16:00:50  60  	    OFFER
16:00:50  61  	  WHERE
16:00:50  62  	    OFFER.ID = in_offer_id;
16:00:50  63  	  EXCEPTION
16:00:50  64  	  WHEN NO_DATA_FOUND THEN
16:00:50  65  	    RAISE BAD_OFFER_ID;
16:00:50  66  	END;
16:00:50  67  
16:00:50  68  	-- Check that subscription exists
16:00:50  69  	BEGIN
16:00:50  70  	  SELECT
16:00:50  71  	    SUBSCRIPTION.ID into temp_subscription_id
16:00:50  72  	  FROM
16:00:50  73  	    SUBSCRIPTION
16:00:50  74  	  WHERE
16:00:50  75  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:50  76  	  EXCEPTION
16:00:50  77  	  WHEN NO_DATA_FOUND THEN
16:00:50  78  	    RAISE BAD_SUBSCRIPTION_ID;
16:00:50  79  	END;
16:00:50  80  
16:00:50  81  	-- Check that invoice exists
16:00:50  82  	BEGIN
16:00:50  83  	  SELECT
16:00:50  84  	    INVOICE.ID into temp_invoice_id
16:00:50  85  	  FROM
16:00:50  86  	    INVOICE
16:00:50  87  	  WHERE
16:00:50  88  	    INVOICE.ID = in_invoice_id;
16:00:50  89  	  EXCEPTION
16:00:50  90  	  WHEN NO_DATA_FOUND THEN
16:00:50  91  	    RAISE BAD_INVOICE_ID;
16:00:50  92  	END;
16:00:50  93  
16:00:50  94  	-- convert offer duration into intervals
16:00:50  95  	BEGIN
16:00:50  96  	  PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
16:00:50  97  	    var_offer_duration,
16:00:50  98  	    var_offer_years,
16:00:50  99  	    var_offer_months,
16:00:50 100  	    var_offer_days);
16:00:50 101  	  var_offer_ym_interval := var_offer_years||'-'||var_offer_months;
16:00:50 102  	  var_offer_ds_interval := var_offer_days||' 0:0:0';
16:00:50 103  	  EXCEPTION
16:00:50 104  	    WHEN OTHERS THEN
16:00:50 105  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 106  	      RAISE BAD_OFFER_DURATION;
16:00:50 107  	END;
16:00:50 108  
16:00:50 109  	-- insert new row into license table
16:00:50 110  	PROCS_LICENSE_CRU_V20.CREATE_LICENSE(
16:00:50 111  	  out_license_id	      => var_new_license_id,
16:00:50 112  	  in_license_status_id	      => in_status_id,
16:00:50 113  	  in_needs_entitlements       => in_needs_entitlements,
16:00:50 114  	  in_start_date 	      => in_start_date,
16:00:50 115  	  in_offer_id		      => in_offer_id,
16:00:50 116  	  in_subscription_id	      => in_subscription_id,
16:00:50 117  	  in_invoice_id 	      => in_invoice_id,
16:00:50 118  	  in_end_date		      => NVL(in_end_date, in_start_date + var_offer_ym_interval + var_offer_ds_interval),
16:00:50 119  	  in_created_by 	      => in_created_by,
16:00:50 120  	  in_is_extension	      => in_is_extension,
16:00:50 121  	  in_current_offer_index      => in_current_offer_index,
16:00:50 122  	  in_current_offer_recurr_num => in_current_offer_recurr_num
16:00:50 123  	);
16:00:50 124  
16:00:50 125  	out_license_id := var_new_license_id;
16:00:50 126  
16:00:50 127  EXCEPTION
16:00:50 128  WHEN BAD_OFFER_DURATION THEN
16:00:50 129  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 130  	  SPROC_NAME, 'Bad offer duration format', EXCEPTION_MESSAGE);
16:00:50 131  WHEN BAD_OFFER_ID THEN
16:00:50 132  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 133  	  SPROC_NAME, 'No such offer');
16:00:50 134  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 135  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 136  	  SPROC_NAME, 'No such subscription');
16:00:50 137  WHEN BAD_INVOICE_ID THEN
16:00:50 138  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 139  	  SPROC_NAME, 'No such invoice');
16:00:50 140  WHEN OTHERS THEN
16:00:50 141  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 142  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 143  END;
16:00:50 144  
16:00:50 145  /******************************************************************************/
16:00:50 146  
16:00:50 147  PROCEDURE UPDATE_LICENSE_STATUS(
16:00:50 148  	  in_license_id     IN NUMBER,
16:00:50 149  	  in_license_status IN NUMBER,
16:00:50 150  	  in_updated_by     IN VARCHAR2,
16:00:50 151  	  in_ent_end	    IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:50 152  ) AS
16:00:50 153  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_LICENSE_STATUS';
16:00:50 154  -- VARIABLES
16:00:50 155  temp_license_id NUMBER;
16:00:50 156  -- EXCEPTIONS
16:00:50 157  BAD_LICENSE_ID	     EXCEPTION;
16:00:50 158  BAD_LICENSE_STATUS     EXCEPTION;
16:00:50 159  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 160  BEGIN
16:00:50 161  
16:00:50 162  	BEGIN
16:00:50 163  	  SELECT
16:00:50 164  	    ID into temp_license_id
16:00:50 165  	  FROM
16:00:50 166  	    LICENSE
16:00:50 167  	  WHERE
16:00:50 168  	    LICENSE.ID = in_license_id;
16:00:50 169  	  EXCEPTION
16:00:50 170  	    WHEN NO_DATA_FOUND THEN
16:00:50 171  	      RAISE BAD_LICENSE_ID;
16:00:50 172  	END;
16:00:50 173  
16:00:50 174  	IF in_license_status != GLOBAL_STATUSES_V20.LICENSE_CLOSED
16:00:50 175  	   AND in_license_status != GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 176  	   AND in_license_status != GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD THEN
16:00:50 177  	  RAISE BAD_LICENSE_STATUS;
16:00:50 178  	END IF;
16:00:50 179  
16:00:50 180  	IF (in_ent_end is not null and in_ent_end = GLOBAL_CONSTANTS_V20.TRUE) then
16:00:50 181  	  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 182  	    in_license_id	 => in_license_id,
16:00:50 183  	    in_updated_by	 => in_updated_by,
16:00:50 184  	    in_license_status_id => in_license_status,
16:00:50 185  	    in_entitlement_end_date	 => sysdate
16:00:50 186  	  );
16:00:50 187  	ELSE
16:00:50 188  	  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 189  	    in_license_id	 => in_license_id,
16:00:50 190  	    in_updated_by	 => in_updated_by,
16:00:50 191  	    in_license_status_id => in_license_status
16:00:50 192  	  );
16:00:50 193  	END IF;
16:00:50 194  
16:00:50 195  EXCEPTION
16:00:50 196  WHEN BAD_LICENSE_STATUS THEN
16:00:50 197  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 198  	  SPROC_NAME, 'Bad status id');
16:00:50 199  WHEN BAD_LICENSE_ID THEN
16:00:50 200  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 201  	  SPROC_NAME, 'No such license');
16:00:50 202  WHEN OTHERS THEN
16:00:50 203  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 204  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 205  END UPDATE_LICENSE_STATUS;
16:00:50 206  
16:00:50 207  /******************************************************************************/
16:00:50 208  
16:00:50 209  PROCEDURE GET_ENDING_LICENSES (
16:00:50 210  	in_hours_number IN NUMBER,
16:00:50 211  	out_result_set	OUT SYS_REFCURSOR
16:00:50 212  ) AS
16:00:50 213  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES';
16:00:50 214  -- VARIABLES
16:00:50 215  var_days		NUMBER;
16:00:50 216  var_hours 	NUMBER;
16:00:50 217  var_time_interval INTERVAL DAY (3) TO SECOND;
16:00:50 218  BEGIN
16:00:50 219  
16:00:50 220  	var_hours := mod(in_hours_number,24);
16:00:50 221  	var_days := (in_hours_number - var_hours) / 24;
16:00:50 222  	var_time_interval := var_days||' '||var_hours||':0:0';
16:00:50 223  
16:00:50 224  	OPEN out_result_set FOR
16:00:50 225  SELECT * FROM
16:00:50 226  (
16:00:50 227  	SELECT
16:00:50 228  	  LICENSE.ID,
16:00:50 229  	  LICENSE.CREATE_DATE,
16:00:50 230  	  LICENSE.CREATED_BY,
16:00:50 231  	  LICENSE.CURRENT_OFFER_INDEX,
16:00:50 232  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:50 233  	  LICENSE.END_DATE,
16:00:50 234  	  LICENSE.ENTITLEMENT_END_DATE,
16:00:50 235  	  LICENSE.INVOICE_ID,
16:00:50 236  	  LICENSE.IS_EXTENSION,
16:00:50 237  	  LICENSE.LICENSE_STATUS_ID,
16:00:50 238  	  LICENSE.OFFER_ID,
16:00:50 239  	  LICENSE.START_DATE,
16:00:50 240  	  LICENSE.SUBSCRIPTION_ID,
16:00:50 241  	  LICENSE.UPDATE_DATE,
16:00:50 242  	  LICENSE.UPDATED_BY
16:00:50 243  	FROM
16:00:50 244  	  LICENSE
16:00:50 245  	WHERE
16:00:50 246  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
16:00:50 247  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 248  	  AND NOT EXISTS
16:00:50 249  	  (
16:00:50 250  	    SELECT NULL
16:00:50 251  	    FROM PROCESS_RETRY_THROTTLE
16:00:50 252  	    WHERE PROCESS_NAME = SPROC_NAME
16:00:50 253  	      AND GENERIC_ID = LICENSE.ID
16:00:50 254  	  )
16:00:50 255  	  AND ROWNUM <= 10000
16:00:50 256  	  ORDER BY dbms_random.value
16:00:50 257  ) WHERE
16:00:50 258  	  ROWNUM <= 1000
16:00:50 259  	  ;
16:00:50 260  EXCEPTION
16:00:50 261  WHEN OTHERS THEN
16:00:50 262  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 263  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 264  END GET_ENDING_LICENSES;
16:00:50 265  
16:00:50 266  
16:00:50 267  /******************************************************************************/
16:00:50 268  
16:00:50 269  PROCEDURE GET_ENDING_LICENSES_CC (
16:00:50 270  	in_hours_number IN NUMBER,
16:00:50 271  	out_result_set	OUT SYS_REFCURSOR,
16:00:50 272  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:50 273  ) AS
16:00:50 274  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDING_LICENSES_CC';
16:00:50 275  -- VARIABLES
16:00:50 276  var_days		NUMBER;
16:00:50 277  var_hours 	NUMBER;
16:00:50 278  var_time_interval INTERVAL DAY (3) TO SECOND;
16:00:50 279  BEGIN
16:00:50 280  
16:00:50 281  	var_hours := mod(in_hours_number,24);
16:00:50 282  	var_days := (in_hours_number - var_hours) / 24;
16:00:50 283  	var_time_interval := var_days||' '||var_hours||':0:0';
16:00:50 284  
16:00:50 285  	OPEN out_result_set FOR
16:00:50 286  SELECT * FROM
16:00:50 287  (
16:00:50 288  	SELECT
16:00:50 289  	  LICENSE.ID,
16:00:50 290  	  LICENSE.CREATE_DATE,
16:00:50 291  	  LICENSE.CREATED_BY,
16:00:50 292  	  LICENSE.CURRENT_OFFER_INDEX,
16:00:50 293  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:50 294  	  LICENSE.END_DATE,
16:00:50 295  	  LICENSE.ENTITLEMENT_END_DATE,
16:00:50 296  	  LICENSE.INVOICE_ID,
16:00:50 297  	  LICENSE.IS_EXTENSION,
16:00:50 298  	  LICENSE.LICENSE_STATUS_ID,
16:00:50 299  	  LICENSE.OFFER_ID,
16:00:50 300  	  LICENSE.START_DATE,
16:00:50 301  	  LICENSE.SUBSCRIPTION_ID,
16:00:50 302  	  LICENSE.UPDATE_DATE,
16:00:50 303  	  LICENSE.UPDATED_BY
16:00:50 304  	FROM
16:00:50 305  	  LICENSE
16:00:50 306  	WHERE
16:00:50 307  	  TO_DATE(LICENSE.END_DATE) <= (current_timestamp + var_time_interval)
16:00:50 308  	  AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 309  	  AND NOT EXISTS
16:00:50 310  	  (
16:00:50 311  	    SELECT NULL
16:00:50 312  	    FROM PROCESS_RETRY_THROTTLE
16:00:50 313  	    WHERE PROCESS_NAME = in_process_name
16:00:50 314  	      AND GENERIC_ID = LICENSE.INVOICE_ID
16:00:50 315  	  )
16:00:50 316  	  AND ROWNUM <= 10000
16:00:50 317  	  ORDER BY dbms_random.value
16:00:50 318  ) WHERE
16:00:50 319  	  ROWNUM <= 1000
16:00:50 320  	  ;
16:00:50 321  EXCEPTION
16:00:50 322  WHEN OTHERS THEN
16:00:50 323  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 324  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 325  END GET_ENDING_LICENSES_CC;
16:00:50 326  
16:00:50 327  /******************************************************************************/
16:00:50 328  
16:00:50 329  PROCEDURE GET_RECURRING_OFFER (
16:00:50 330  	in_license_id  IN NUMBER,
16:00:50 331  	out_result_set OUT SYS_REFCURSOR
16:00:50 332  ) AS
16:00:50 333  -- VARIABLES
16:00:50 334  SPROC_NAME		    CONSTANT VARCHAR2(19) := 'GET_RECURRING_OFFER';
16:00:50 335  var_offer_chain_id	    NUMBER;
16:00:50 336  var_offer_id		    NUMBER;
16:00:50 337  var_offer_num_recurrences     NUMBER;
16:00:50 338  var_license_cur_offer_rec_num NUMBER;
16:00:50 339  var_offer_index		    NUMBER;
16:00:50 340  -- EXCEPTIONS
16:00:50 341  BAD_LICENSE_ID	     EXCEPTION;
16:00:50 342  CAN_NOT_GET_OFFER_INFO EXCEPTION;
16:00:50 343  BEGIN
16:00:50 344  
16:00:50 345  	BEGIN
16:00:50 346  	  SELECT
16:00:50 347  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:00:50 348  	    LICENSE.OFFER_ID,
16:00:50 349  	    LICENSE.CURRENT_OFFER_RECURR_NUM
16:00:50 350  	    into
16:00:50 351  	    var_offer_chain_id,
16:00:50 352  	    var_offer_id,
16:00:50 353  	    var_license_cur_offer_rec_num
16:00:50 354  	  FROM
16:00:50 355  	    LICENSE
16:00:50 356  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 357  	  WHERE
16:00:50 358  	    LICENSE.ID = in_license_id;
16:00:50 359  	  EXCEPTION
16:00:50 360  	    WHEN NO_DATA_FOUND THEN
16:00:50 361  	      RAISE BAD_LICENSE_ID;
16:00:50 362  	END;
16:00:50 363  
16:00:50 364  	BEGIN
16:00:50 365  	  SELECT
16:00:50 366  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES,
16:00:50 367  	    OFFER_OFFER_CHAIN.INDEX_VALUE
16:00:50 368  	    into
16:00:50 369  	    var_offer_num_recurrences,
16:00:50 370  	    var_offer_index
16:00:50 371  	  FROM
16:00:50 372  	    OFFER_OFFER_CHAIN
16:00:50 373  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 374  	  WHERE
16:00:50 375  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:00:50 376  	    AND OFFER_OFFER_CHAIN.OFFER_ID = var_offer_id;
16:00:50 377  	  EXCEPTION
16:00:50 378  	    WHEN NO_DATA_FOUND THEN
16:00:50 379  	      RAISE CAN_NOT_GET_OFFER_INFO;
16:00:50 380  	END;
16:00:50 381  
16:00:50 382  	IF var_offer_num_recurrences = 0 THEN
16:00:50 383  	  --out_result_set := NULL;
16:00:50 384  	  -- TODO: Remove this hardcode
16:00:50 385  	  OPEN out_result_set FOR
16:00:50 386  	  SELECT
16:00:50 387  	    OFFER.ID,
16:00:50 388  	    OFFER.OFFER_STATUS_ID,
16:00:50 389  	    OFFER.ENTITLEMENT_DURATION,
16:00:50 390  	    OFFER.CREATED_BY,
16:00:50 391  	    OFFER.CREATE_DATE,
16:00:50 392  	    OFFER.UPDATED_BY,
16:00:50 393  	    OFFER.UPDATE_DATE,
16:00:50 394  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:00:50 395  	    var_offer_index as "OFFER_INDEX"
16:00:50 396  	  FROM
16:00:50 397  	    OFFER_OFFER_CHAIN
16:00:50 398  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 399  	  WHERE ROWNUM = 0;
16:00:50 400  	ELSIF var_license_cur_offer_rec_num = var_offer_num_recurrences THEN
16:00:50 401  	  --out_result_set := NULL;
16:00:50 402  	  -- TODO: Remove this hardcode
16:00:50 403  	  OPEN out_result_set FOR
16:00:50 404  	  SELECT
16:00:50 405  	    OFFER.ID,
16:00:50 406  	    OFFER.OFFER_STATUS_ID,
16:00:50 407  	    OFFER.ENTITLEMENT_DURATION,
16:00:50 408  	    OFFER.CREATED_BY,
16:00:50 409  	    OFFER.CREATE_DATE,
16:00:50 410  	    OFFER.UPDATED_BY,
16:00:50 411  	    OFFER.UPDATE_DATE,
16:00:50 412  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:00:50 413  	    var_offer_index as "OFFER_INDEX"
16:00:50 414  	  FROM
16:00:50 415  	    OFFER_OFFER_CHAIN
16:00:50 416  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 417  	  WHERE ROWNUM = 0;
16:00:50 418  	ELSE
16:00:50 419  	  OPEN out_result_set FOR
16:00:50 420  	  SELECT
16:00:50 421  	    OFFER.ID,
16:00:50 422  	    OFFER.OFFER_STATUS_ID,
16:00:50 423  	    OFFER.ENTITLEMENT_DURATION,
16:00:50 424  	    OFFER.CREATED_BY,
16:00:50 425  	    OFFER.CREATE_DATE,
16:00:50 426  	    OFFER.UPDATED_BY,
16:00:50 427  	    OFFER.UPDATE_DATE,
16:00:50 428  	    var_offer_num_recurrences as "RECURRENCE_NUMBER",
16:00:50 429  	    var_offer_index as "OFFER_INDEX"
16:00:50 430  	  FROM
16:00:50 431  	    OFFER
16:00:50 432  	  WHERE
16:00:50 433  	    OFFER.ID = var_offer_id;
16:00:50 434  	END IF;
16:00:50 435  
16:00:50 436  EXCEPTION
16:00:50 437  WHEN BAD_LICENSE_ID THEN
16:00:50 438  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 439  	  SPROC_NAME, 'No such license');
16:00:50 440  WHEN CAN_NOT_GET_OFFER_INFO THEN
16:00:50 441  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 442  	  SPROC_NAME, 'Could not get offer information. Offer id = '||var_offer_id||', Offer chain id = '||var_offer_chain_id);
16:00:50 443  WHEN OTHERS THEN
16:00:50 444  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 446  END GET_RECURRING_OFFER;
16:00:50 447  
16:00:50 448  /******************************************************************************/
16:00:50 449  
16:00:50 450  PROCEDURE GET_NEXT_OFFER (
16:00:50 451  /*
16:00:50 452  Throws exceptions:
16:00:50 453  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 454  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 455  */
16:00:50 456  	in_license_id  IN NUMBER,
16:00:50 457  	out_result_set OUT SYS_REFCURSOR
16:00:50 458  ) AS
16:00:50 459  -- VARIABLES
16:00:50 460  SPROC_NAME		CONSTANT VARCHAR2(14) := 'GET_NEXT_OFFER';
16:00:50 461  var_offer_chain_id	NUMBER;
16:00:50 462  var_offer_id		NUMBER;
16:00:50 463  var_license_current_index NUMBER;
16:00:50 464  var_next_offer_index	NUMBER;
16:00:50 465  -- EXCEPTIONS
16:00:50 466  BAD_LICENSE_ID	      EXCEPTION;
16:00:50 467  CAN_NOT_FIND_NEXT_OFFER EXCEPTION;
16:00:50 468  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:50 469  BEGIN
16:00:50 470  
16:00:50 471  	BEGIN
16:00:50 472  	  SELECT
16:00:50 473  	    SUBSCRIPTION.OFFER_CHAIN_ID,
16:00:50 474  	    LICENSE.OFFER_ID,
16:00:50 475  	    LICENSE.CURRENT_OFFER_INDEX
16:00:50 476  	    into
16:00:50 477  	    var_offer_chain_id,
16:00:50 478  	    var_offer_id,
16:00:50 479  	    var_license_current_index
16:00:50 480  	  FROM
16:00:50 481  	    LICENSE
16:00:50 482  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 483  	  WHERE
16:00:50 484  	    LICENSE.ID = in_license_id;
16:00:50 485  	  EXCEPTION
16:00:50 486  	    WHEN NO_DATA_FOUND THEN
16:00:50 487  	      RAISE BAD_LICENSE_ID;
16:00:50 488  	END;
16:00:50 489  
16:00:50 490  	BEGIN
16:00:50 491  	  var_next_offer_index := PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX(
16:00:50 492  	    var_offer_chain_id,
16:00:50 493  	    var_license_current_index
16:00:50 494  	  );
16:00:50 495  	  EXCEPTION
16:00:50 496  	    WHEN OTHERS THEN
16:00:50 497  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 498  	      RAISE CAN_NOT_FIND_NEXT_OFFER;
16:00:50 499  	END;
16:00:50 500  
16:00:50 501  	IF var_next_offer_index IS NULL THEN
16:00:50 502  	  -- RETURN NULL;
16:00:50 503  	  -- TODO: Remove this hardcode
16:00:50 504  	  OPEN out_result_set FOR
16:00:50 505  	  SELECT
16:00:50 506  	    OFFER.ID,
16:00:50 507  	    OFFER.OFFER_STATUS_ID,
16:00:50 508  	    OFFER.ENTITLEMENT_DURATION,
16:00:50 509  	    OFFER.CREATED_BY,
16:00:50 510  	    OFFER.CREATE_DATE,
16:00:50 511  	    OFFER.UPDATED_BY,
16:00:50 512  	    OFFER.UPDATE_DATE,
16:00:50 513  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
16:00:50 514  	  FROM
16:00:50 515  	    OFFER_OFFER_CHAIN
16:00:50 516  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 517  	  WHERE
16:00:50 518  	    1=2;
16:00:50 519  	ELSE
16:00:50 520  	  OPEN out_result_set FOR
16:00:50 521  	  SELECT
16:00:50 522  	    OFFER.ID,
16:00:50 523  	    OFFER.OFFER_STATUS_ID,
16:00:50 524  	    OFFER.ENTITLEMENT_DURATION,
16:00:50 525  	    OFFER.CREATED_BY,
16:00:50 526  	    OFFER.CREATE_DATE,
16:00:50 527  	    OFFER.UPDATED_BY,
16:00:50 528  	    OFFER.UPDATE_DATE,
16:00:50 529  	    OFFER_OFFER_CHAIN.NUM_RECURRENCES as "RECURRENCE_NUMBER"
16:00:50 530  	  FROM
16:00:50 531  	    OFFER_OFFER_CHAIN
16:00:50 532  	    INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 533  	  WHERE
16:00:50 534  	    OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:00:50 535  	    AND OFFER_OFFER_CHAIN.INDEX_VALUE = var_next_offer_index;
16:00:50 536  	END IF;
16:00:50 537  
16:00:50 538  EXCEPTION
16:00:50 539  WHEN BAD_LICENSE_ID THEN
16:00:50 540  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 541  	  SPROC_NAME, 'No such license');
16:00:50 542  WHEN CAN_NOT_FIND_NEXT_OFFER THEN
16:00:50 543  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 544  	  SPROC_NAME, 'Could not find next offer', EXCEPTION_MESSAGE);
16:00:50 545  WHEN OTHERS THEN
16:00:50 546  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 547  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 548  END GET_NEXT_OFFER;
16:00:50 549  
16:00:50 550  /******************************************************************************/
16:00:50 551  
16:00:50 552  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:00:50 553  	in_license_id IN NUMBER,
16:00:50 554  	out_group_id  OUT NUMBER
16:00:50 555  ) AS
16:00:50 556  -- VARIABLES
16:00:50 557  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_LICENSE_ID';
16:00:50 558  var_subscription_id NUMBER;
16:00:50 559  var_group_id	  NUMBER;
16:00:50 560  -- EXCEPTIONS
16:00:50 561  BAD_LICENSE_ID	   EXCEPTION;
16:00:50 562  CAN_NOT_GET_GROUP_ID EXCEPTION;
16:00:50 563  BEGIN
16:00:50 564  
16:00:50 565  	-- Get subscription id
16:00:50 566  	BEGIN
16:00:50 567  	  SELECT
16:00:50 568  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:00:50 569  	  FROM
16:00:50 570  	    LICENSE
16:00:50 571  	  WHERE
16:00:50 572  	    LICENSE.ID = in_license_id;
16:00:50 573  	  EXCEPTION
16:00:50 574  	    WHEN NO_DATA_FOUND THEN
16:00:50 575  	      RAISE BAD_LICENSE_ID;
16:00:50 576  	END;
16:00:50 577  
16:00:50 578  	-- Get group id
16:00:50 579  	BEGIN
16:00:50 580  	  SELECT
16:00:50 581  	    ACCOUNT.GROUP_ID into var_group_id
16:00:50 582  	  FROM
16:00:50 583  	    SUBSCRIPTION
16:00:50 584  	    INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:50 585  	  WHERE
16:00:50 586  	    SUBSCRIPTION.ID = var_subscription_id;
16:00:50 587  	  EXCEPTION
16:00:50 588  	    WHEN NO_DATA_FOUND THEN
16:00:50 589  	      RAISE CAN_NOT_GET_GROUP_ID;
16:00:50 590  	END;
16:00:50 591  
16:00:50 592  	out_group_id := var_group_id;
16:00:50 593  
16:00:50 594  EXCEPTION
16:00:50 595  WHEN BAD_LICENSE_ID THEN
16:00:50 596  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 597  	  SPROC_NAME, 'No such license');
16:00:50 598  WHEN CAN_NOT_GET_GROUP_ID THEN
16:00:50 599  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 600  	  SPROC_NAME, 'Could not get group id');
16:00:50 601  WHEN OTHERS THEN
16:00:50 602  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 603  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 604  END GET_GROUP_ID_BY_LICENSE_ID;
16:00:50 605  
16:00:50 606  /******************************************************************************/
16:00:50 607  
16:00:50 608  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:00:50 609  	out_result_set OUT SYS_REFCURSOR
16:00:50 610  ) AS
16:00:50 611  BEGIN
16:00:50 612  	OPEN out_result_set FOR
16:00:50 613  SELECT * FROM
16:00:50 614  (
16:00:50 615  	SELECT
16:00:50 616  	  LICENSE.ID,
16:00:50 617  	  LICENSE.INVOICE_ID,
16:00:50 618  	  LICENSE.IS_EXTENSION,
16:00:50 619  	  LICENSE.START_DATE,
16:00:50 620  	  LICENSE.END_DATE,
16:00:50 621  	  LICENSE.ENTITLEMENT_END_DATE,
16:00:50 622  	  LICENSE.CURRENT_OFFER_INDEX,
16:00:50 623  	  LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:50 624  	  LICENSE.CREATE_DATE,
16:00:50 625  	  LICENSE.CREATED_BY,
16:00:50 626  	  LICENSE.LICENSE_STATUS_ID,
16:00:50 627  	  LICENSE.OFFER_ID,
16:00:50 628  	  LICENSE.SUBSCRIPTION_ID,
16:00:50 629  	  LICENSE.UPDATE_DATE,
16:00:50 630  	  LICENSE.UPDATED_BY,
16:00:50 631  	  LICENSE.NEEDS_ENTITLEMENTS
16:00:50 632  	FROM
16:00:50 633  	  LICENSE
16:00:50 634  	WHERE
16:00:50 635  	  LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 636  	AND ROWNUM <= 5000
16:00:50 637  	ORDER BY dbms_random.value
16:00:50 638  ) WHERE
16:00:50 639  	ROWNUM <= 500;
16:00:50 640  
16:00:50 641  END GET_NEED_ENTITLEMENTS_LICENSES;
16:00:50 642  
16:00:50 643  /******************************************************************************/
16:00:50 644  
16:00:50 645  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:00:50 646  	in_license_id	      IN NUMBER,
16:00:50 647  	in_needs_entitlements IN NUMBER,
16:00:50 648  	in_updated_by	      IN VARCHAR2
16:00:50 649  ) AS
16:00:50 650  SPROC_NAME CONSTANT VARCHAR2(29) := 'UPDATE_NEED_ENTITLEMENTS_FLAG';
16:00:50 651  -- VARIABLES
16:00:50 652  temp_license_id NUMBER;
16:00:50 653  -- EXCEPTIONS
16:00:50 654  BAD_LICENSE_ID	     EXCEPTION;
16:00:50 655  BAD_ENTITLEMENTS_FLAG  EXCEPTION;
16:00:50 656  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 657  BEGIN
16:00:50 658  
16:00:50 659  	IF in_needs_entitlements != GLOBAL_CONSTANTS_V20.TRUE
16:00:50 660  	  AND in_needs_entitlements != GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:50 661  	  RAISE BAD_ENTITLEMENTS_FLAG;
16:00:50 662  	END IF;
16:00:50 663  
16:00:50 664  	BEGIN
16:00:50 665  	  SELECT
16:00:50 666  	    LICENSE.ID into temp_license_id
16:00:50 667  	  FROM
16:00:50 668  	    LICENSE
16:00:50 669  	  WHERE
16:00:50 670  	    LICENSE.ID = in_license_id;
16:00:50 671  	  EXCEPTION
16:00:50 672  	    WHEN NO_DATA_FOUND THEN
16:00:50 673  	      RAISE BAD_LICENSE_ID;
16:00:50 674  	END;
16:00:50 675  
16:00:50 676  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 677  	  in_license_id 	=> in_license_id,
16:00:50 678  	  in_needs_entitlements => in_needs_entitlements,
16:00:50 679  	  in_updated_by 	=> in_updated_by
16:00:50 680  	);
16:00:50 681  
16:00:50 682  EXCEPTION
16:00:50 683  WHEN BAD_ENTITLEMENTS_FLAG THEN
16:00:50 684  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 685  	  SPROC_NAME, 'Bad entitlements flag value');
16:00:50 686  WHEN BAD_LICENSE_ID THEN
16:00:50 687  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 688  	  SPROC_NAME, 'No such license');
16:00:50 689  WHEN OTHERS THEN
16:00:50 690  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 691  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 692  END UPDATE_NEED_ENTITLEMENTS_FLAG;
16:00:50 693  
16:00:50 694  
16:00:50 695  /******************************************************************************/
16:00:50 696  
16:00:50 697  PROCEDURE GET_ENDED_GC_LICENSES (
16:00:50 698  	out_result_set		OUT SYS_REFCURSOR,
16:00:50 699  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:50 700  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:50 701  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:50 702  ) AS
16:00:50 703  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ENDED_GC_INVOICES';
16:00:50 704  var_days		NUMBER;
16:00:50 705  var_hours 	NUMBER;
16:00:50 706  var_time_interval INTERVAL DAY (3) TO SECOND;
16:00:50 707  BEGIN
16:00:50 708  	var_hours := mod(in_hours_number,24);
16:00:50 709  	var_days := (in_hours_number - var_hours) / 24;
16:00:50 710  	var_time_interval := var_days||' '||var_hours||':0:0';
16:00:50 711  	OPEN out_result_set FOR
16:00:50 712  SELECT * FROM
16:00:50 713  (
16:00:50 714  	SELECT
16:00:50 715  	  l.ID,
16:00:50 716  	  l.CREATE_DATE,
16:00:50 717  	  l.CREATED_BY,
16:00:50 718  	  l.CURRENT_OFFER_INDEX,
16:00:50 719  	  l.CURRENT_OFFER_RECURR_NUM,
16:00:50 720  	  l.END_DATE,
16:00:50 721  	  l.ENTITLEMENT_END_DATE,
16:00:50 722  	  l.INVOICE_ID,
16:00:50 723  	  l.IS_EXTENSION,
16:00:50 724  	  l.LICENSE_STATUS_ID,
16:00:50 725  	  l.OFFER_ID,
16:00:50 726  	  l.START_DATE,
16:00:50 727  	  l.SUBSCRIPTION_ID,
16:00:50 728  	  l.UPDATE_DATE,
16:00:50 729  	  l.UPDATED_BY
16:00:50 730  	FROM
16:00:50 731  	  GIFT_CERTIFICATE gc
16:00:50 732  	  INNER JOIN INVOICE i ON i.id = gc.PURCHASE_INVOICE_ID
16:00:50 733  	  INNER JOIN LICENSE l ON l.invoice_id = i.id
16:00:50 734  	  LEFT JOIN SUBSCRIPTION s ON s.id = l.subscription_id
16:00:50 735  	WHERE
16:00:50 736  	  l.LICENSE_STATUS_ID != GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 737  	  AND l.ENTITLEMENT_END_DATE <= (current_timestamp)
16:00:50 738  	  AND l.ENTITLEMENT_END_DATE > (current_timestamp - var_time_interval)
16:00:50 739  	  AND s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_CLOSED
16:00:50 740  	  AND NOT EXISTS (
16:00:50 741  	    SELECT NULL
16:00:50 742  	    FROM PROCESS_RETRY_THROTTLE
16:00:50 743  	    WHERE PROCESS_NAME = in_process_name
16:00:50 744  	      AND GENERIC_ID = l.ID
16:00:50 745  	  )
16:00:50 746  	  AND ROWNUM <= in_num_rows*10
16:00:50 747  	  ORDER BY dbms_random.value
16:00:50 748  ) WHERE
16:00:50 749  	  ROWNUM <= in_num_rows
16:00:50 750  	  GROUP BY SUBSCRIPTION_ID;
16:00:50 751  EXCEPTION
16:00:50 752  WHEN OTHERS THEN
16:00:50 753  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 754  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 755  END GET_ENDED_GC_LICENSES;
16:00:50 756  
16:00:50 757  PROCEDURE GET_LICENSE_BY_ID (
16:00:50 758  	in_license_id  IN NUMBER,
16:00:50 759  	out_result_set OUT SYS_REFCURSOR
16:00:50 760  ) AS
16:00:50 761  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_LICENSE_BY_ID';
16:00:50 762  -- VARIABLES
16:00:50 763  temp_license_id NUMBER;
16:00:50 764  -- EXCEPTIONS
16:00:50 765  BAD_LICENSE_ID EXCEPTION;
16:00:50 766  BEGIN
16:00:50 767  
16:00:50 768  	BEGIN
16:00:50 769  	  SELECT
16:00:50 770  	    l.id into temp_license_id
16:00:50 771  	  FROM
16:00:50 772  	    license l
16:00:50 773  	  WHERE
16:00:50 774  	    l.id = in_license_id;
16:00:50 775  	  EXCEPTION
16:00:50 776  	    WHEN NO_DATA_FOUND THEN
16:00:50 777  	      RAISE BAD_LICENSE_ID;
16:00:50 778  	END;
16:00:50 779  
16:00:50 780  	OPEN out_result_set FOR
16:00:50 781  	SELECT
16:00:50 782  	  l.id,
16:00:50 783  	  l.license_status_id,
16:00:50 784  	  l.subscription_id,
16:00:50 785  	  l.invoice_id,
16:00:50 786  	  l.offer_id,
16:00:50 787  	  l.start_date,
16:00:50 788  	  l.end_date,
16:00:50 789  	  l.entitlement_end_date,
16:00:50 790  	  l.is_extension,
16:00:50 791  	  l.create_date,
16:00:50 792  	  l.created_by,
16:00:50 793  	  l.update_date,
16:00:50 794  	  l.updated_by,
16:00:50 795  	  l.current_offer_index,
16:00:50 796  	  l.current_offer_recurr_num,
16:00:50 797  	  l.needs_entitlements
16:00:50 798  	FROM
16:00:50 799  	  LICENSE l
16:00:50 800  	WHERE
16:00:50 801  	  l.id = in_license_id;
16:00:50 802  
16:00:50 803  EXCEPTION
16:00:50 804  WHEN BAD_LICENSE_ID THEN
16:00:50 805  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 806  	  SPROC_NAME, 'No such license');
16:00:50 807  WHEN OTHERS THEN
16:00:50 808  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 809  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 810  END GET_LICENSE_BY_ID;
16:00:50 811  
16:00:50 812  PROCEDURE UP_LATEST_LICE_END_BY_SUBID (
16:00:50 813  	in_subscription_id IN NUMBER,
16:00:50 814  	in_end_date IN DATE,
16:00:50 815  	in_updated_by IN VARCHAR2
16:00:50 816  ) AS
16:00:50 817  SPROC_NAME CONSTANT VARCHAR2(32) := 'UP_LATEST_LICE_END_BY_SUBID';
16:00:50 818  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 819  var_latest_lice NUMBER;
16:00:50 820  BEGIN
16:00:50 821  	SELECT max(id)
16:00:50 822  	INTO  var_latest_lice
16:00:50 823  	FROM LICENSE
16:00:50 824  	WHERE
16:00:50 825  	  subscription_id = in_subscription_id
16:00:50 826  	;
16:00:50 827  
16:00:50 828  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 829  	  in_license_id        => var_latest_lice,
16:00:50 830  	  in_updated_by        => in_updated_by,
16:00:50 831  	  in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 832  	  in_end_date	       => in_end_date,
16:00:50 833  	  in_entitlement_end_date => in_end_date
16:00:50 834  	);
16:00:50 835  
16:00:50 836  EXCEPTION
16:00:50 837  WHEN NO_DATA_FOUND THEN
16:00:50 838  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 839  	  SPROC_NAME, 'No licenses from subscription', SQLERRM);
16:00:50 840  WHEN OTHERS THEN
16:00:50 841  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 842  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 843  END UP_LATEST_LICE_END_BY_SUBID;
16:00:50 844  
16:00:50 845  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
16:00:50 846  	in_days_before_close	 IN NUMBER,
16:00:50 847  	in_num_licenses_to_fetch IN NUMBER,
16:00:50 848  	out_result_set		 OUT SYS_REFCURSOR
16:00:50 849  ) AS
16:00:50 850  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRACE_LICE_FOR_FINAL_TRANS';
16:00:50 851  BEGIN
16:00:50 852  	OPEN out_result_set FOR
16:00:50 853  	SELECT
16:00:50 854  	    *
16:00:50 855  	FROM
16:00:50 856  	    (
16:00:50 857  		SELECT
16:00:50 858  		    l.id
16:00:50 859  		FROM
16:00:50 860  		    license l
16:00:50 861  		JOIN
16:00:50 862  		    invoice i
16:00:50 863  		ON
16:00:50 864  		    l.invoice_id = i.id
16:00:50 865  		WHERE
16:00:50 866  		    i.invoice_status_id = GLOBAL_STATUSES_V20.INVOICE_OPEN
16:00:50 867  		AND l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
16:00:50 868  		AND SYSDATE + in_days_before_close >= l.grace_end_date
16:00:50 869  		AND NOT EXISTS
16:00:50 870  		    (
16:00:50 871  			SELECT
16:00:50 872  			    1
16:00:50 873  			FROM
16:00:50 874  			    charge c
16:00:50 875  			WHERE
16:00:50 876  			    c.invoice_id = i.id
16:00:50 877  			AND c.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED)
16:00:50 878  		AND rownum <= in_num_licenses_to_fetch * 10
16:00:50 879  		ORDER BY
16:00:50 880  		    dbms_random.value)
16:00:50 881  	WHERE
16:00:50 882  	    rownum <= in_num_licenses_to_fetch;
16:00:50 883  END GET_GRACE_LICE_FOR_FINAL_TRANS;
16:00:50 884  
16:00:50 885  END PROCS_LICENSE_V20;
16:00:50 886  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.08
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_CHARGE_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE CREATE_CHARGE(
16:00:50   4  /*
16:00:50   5  Throws exceptions:
16:00:50   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50   8  */
16:00:50   9  	in_invoice_id	      IN NUMBER,
16:00:50  10  	in_transaction_id     IN NUMBER,
16:00:50  11  	in_instrument_type_id IN NUMBER,
16:00:50  12  	in_instrument_id      IN NUMBER,
16:00:50  13  	in_charge_amount      IN NUMBER,
16:00:50  14  	in_created_by	      IN VARCHAR2,
16:00:50  15  	in_charge_status_id   IN NUMBER,
16:00:50  16  	out_charge_id	      OUT NUMBER
16:00:50  17  ) AS
16:00:50  18  PROCS_NAME	  CONSTANT VARCHAR2(13) := 'CREATE_CHARGE';
16:00:50  19  -- VARIABLES
16:00:50  20  temp_invoice_id	  NUMBER;
16:00:50  21  temp_transaction_id NUMBER;
16:00:50  22  var_new_charge_id   NUMBER;
16:00:50  23  -- EXCEPTIONS
16:00:50  24  BAD_INVOICE_ID	     EXCEPTION;
16:00:50  25  BAD_TRANSACTION_ID     EXCEPTION;
16:00:50  26  BAD_PAYPAL_ID	     EXCEPTION;
16:00:50  27  BAD_CREDIT_CARD_ID     EXCEPTION;
16:00:50  28  BAD_INSTRUMENT_TYPE    EXCEPTION;
16:00:50  29  BAD_CHARGE_STATUS_ID   EXCEPTION;
16:00:50  30  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50  31  BEGIN
16:00:50  32  	-- Check that incoming data is correct
16:00:50  33  	IF in_instrument_type_id != GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:50  34  	  AND in_instrument_type_id != GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:50  35  	  RAISE BAD_INSTRUMENT_TYPE;
16:00:50  36  	END IF;
16:00:50  37  
16:00:50  38  	-- Check that status is correct
16:00:50  39  	IF in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50  40  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:50  41  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
16:00:50  42  	  RAISE BAD_CHARGE_STATUS_ID;
16:00:50  43  	END IF;
16:00:50  44  
16:00:50  45  	-- Check that invoice exists
16:00:50  46  	BEGIN
16:00:50  47  	  SELECT
16:00:50  48  	    INVOICE.ID into temp_invoice_id
16:00:50  49  	  FROM
16:00:50  50  	    INVOICE
16:00:50  51  	  WHERE
16:00:50  52  	    INVOICE.ID = in_invoice_id;
16:00:50  53  	  EXCEPTION
16:00:50  54  	    WHEN NO_DATA_FOUND THEN
16:00:50  55  	      RAISE BAD_INVOICE_ID;
16:00:50  56  	END;
16:00:50  57  
16:00:50  58  	-- Check that transaction exists
16:00:50  59  	BEGIN
16:00:50  60  	  SELECT
16:00:50  61  	    TRANSACTION.ID into temp_transaction_id
16:00:50  62  	  FROM
16:00:50  63  	    TRANSACTION
16:00:50  64  	  WHERE
16:00:50  65  	    TRANSACTION.ID = in_transaction_id;
16:00:50  66  	  EXCEPTION
16:00:50  67  	    WHEN NO_DATA_FOUND THEN
16:00:50  68  	      RAISE BAD_TRANSACTION_ID;
16:00:50  69  	END;
16:00:50  70  
16:00:50  71  	-- Check that instrument exists
16:00:50  72  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:50  73  	  IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:50  74  	    RAISE BAD_CREDIT_CARD_ID;
16:00:50  75  	  END IF;
16:00:50  76  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:50  77  	  IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:50  78  	    RAISE BAD_PAYPAL_ID;
16:00:50  79  	  END IF;
16:00:50  80  	END IF;
16:00:50  81  
16:00:50  82  	-- Create new charge
16:00:50  83  	PROCS_CHARGE_CRU_V20.CREATE_CHARGE(
16:00:50  84  	  out_charge_id 	=> var_new_charge_id,
16:00:50  85  	  in_invoice_id 	=> in_invoice_id,
16:00:50  86  	  in_transaction_id	=> in_transaction_id,
16:00:50  87  	  in_instrument_type_id => in_instrument_type_id,
16:00:50  88  	  in_instrument_id	=> in_instrument_id,
16:00:50  89  	  in_charge_amount	=> in_charge_amount,
16:00:50  90  	  in_charge_status_id	=> in_charge_status_id,
16:00:50  91  	  in_created_by 	=> in_created_by
16:00:50  92  	);
16:00:50  93  
16:00:50  94  	out_charge_id := var_new_charge_id;
16:00:50  95  
16:00:50  96  EXCEPTION
16:00:50  97  WHEN BAD_CHARGE_STATUS_ID THEN
16:00:50  98  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50  99  	  PROCS_NAME, 'Bad charge status: '||in_charge_status_id);
16:00:50 100  WHEN BAD_INSTRUMENT_TYPE THEN
16:00:50 101  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 102  	  PROCS_NAME, 'Bad instrument type id');
16:00:50 103  WHEN BAD_INVOICE_ID THEN
16:00:50 104  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 105  	  PROCS_NAME, 'No such invoice');
16:00:50 106  WHEN BAD_TRANSACTION_ID THEN
16:00:50 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 108  	  PROCS_NAME, 'No such transaction');
16:00:50 109  WHEN BAD_PAYPAL_ID THEN
16:00:50 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 111  	  PROCS_NAME, 'No such paypal');
16:00:50 112  WHEN BAD_CREDIT_CARD_ID THEN
16:00:50 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 114  	  PROCS_NAME, 'No such credit card');
16:00:50 115  WHEN OTHERS THEN
16:00:50 116  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 117  	  PROCS_NAME, 'Unknown error', SQLERRM);
16:00:50 118  END CREATE_CHARGE;
16:00:50 119  
16:00:50 120  /********************************************************/
16:00:50 121  -- norlov #38562 :
16:00:50 122  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:00:50 123  /*
16:00:50 124  Throws exceptions:
16:00:50 125  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 126  */
16:00:50 127  	out_result_set	    OUT SYS_REFCURSOR,
16:00:50 128  	in_row_number	    IN NUMBER DEFAULT NULL
16:00:50 129  ) AS
16:00:50 130  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_PENDING_REFUND_CHARGES';
16:00:50 131  -- COMSTANTS
16:00:50 132  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
16:00:50 133  -- VARIABLES
16:00:50 134  var_row_number NUMBER;
16:00:50 135  BEGIN
16:00:50 136  	IF in_row_number IS NULL THEN
16:00:50 137  	  var_row_number := DEFAULT_ROW_NUMBER;
16:00:50 138  	ELSE
16:00:50 139  	  var_row_number := in_row_number;
16:00:50 140  	END IF;
16:00:50 141  
16:00:50 142  	-- Select charges
16:00:50 143  	OPEN out_result_set FOR
16:00:50 144  SELECT * FROM
16:00:50 145  (
16:00:50 146  	SELECT
16:00:50 147  	  CHARGE.ID,
16:00:50 148  	  CHARGE.TRANSACTION_ID,
16:00:50 149  	  CHARGE.INSTRUMENT_ID,
16:00:50 150  	  CHARGE.INSTRUMENT_TYPE_ID,
16:00:50 151  	  CHARGE.CHARGE_AMOUNT,
16:00:50 152  	  CHARGE.CREATE_DATE,
16:00:50 153  	  CHARGE.CREATED_BY,
16:00:50 154  	  CHARGE.INVOICE_ID
16:00:50 155  	FROM
16:00:50 156  	  CHARGE
16:00:50 157  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:50 158  	WHERE
16:00:50 159  	  TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
16:00:50 160  	  AND TRANSACTION.IS_REFUND = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 161  	  AND TRANSACTION.TRANSACTION_AMOUNT < 0
16:00:50 162  	  AND NOT EXISTS
16:00:50 163  	  (
16:00:50 164  	    SELECT NULL
16:00:50 165  	    FROM PROCESS_RETRY_THROTTLE
16:00:50 166  	    WHERE PROCESS_NAME = SPROC_NAME
16:00:50 167  	      AND GENERIC_ID = CHARGE.ID
16:00:50 168  	  )
16:00:50 169  	  AND ROWNUM <= var_row_number*10
16:00:50 170  	  ORDER BY dbms_random.value
16:00:50 171  ) WHERE
16:00:50 172  	  ROWNUM <= var_row_number;
16:00:50 173  
16:00:50 174  END GET_PENDING_REFUND_CHARGES;
16:00:50 175  /******************************************************************************/
16:00:50 176  
16:00:50 177  PROCEDURE GET_UNPROCESSED_CHARGES (
16:00:50 178  /*
16:00:50 179  Throws exceptions:
16:00:50 180  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 181  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 182  */
16:00:50 183  	in_invoice_id  IN NUMBER,
16:00:50 184  	out_result_set OUT SYS_REFCURSOR
16:00:50 185  ) AS
16:00:50 186  SPROC_NAME      CONSTANT VARCHAR2(24) := 'GET_UNPROCESSED_CHARGES';
16:00:50 187  -- VARIABLES
16:00:50 188  temp_invoice_id NUMBER;
16:00:50 189  -- EXCEPTIONS
16:00:50 190  BAD_INVOICE_ID EXCEPTION;
16:00:50 191  BEGIN
16:00:50 192  
16:00:50 193  	-- Check that invoice exists
16:00:50 194  	BEGIN
16:00:50 195  	  SELECT
16:00:50 196  	    INVOICE.ID into temp_invoice_id
16:00:50 197  	  FROM
16:00:50 198  	    INVOICE
16:00:50 199  	  WHERE
16:00:50 200  	    INVOICE.ID = in_invoice_id;
16:00:50 201  	  EXCEPTION
16:00:50 202  	    WHEN NO_DATA_FOUND THEN
16:00:50 203  	      RAISE BAD_INVOICE_ID;
16:00:50 204  	END;
16:00:50 205  
16:00:50 206  	-- Select charges
16:00:50 207  	OPEN out_result_set FOR
16:00:50 208  	SELECT
16:00:50 209  	  CHARGE.ID,
16:00:50 210  	  CHARGE.TRANSACTION_ID,
16:00:50 211  	  CHARGE.INSTRUMENT_ID,
16:00:50 212  	  CHARGE.INSTRUMENT_TYPE_ID,
16:00:50 213  	  CHARGE.CHARGE_AMOUNT,
16:00:50 214  	  CHARGE.CREATE_DATE,
16:00:50 215  	  CHARGE.CREATED_BY,
16:00:50 216  	  CHARGE.INVOICE_ID
16:00:50 217  	FROM
16:00:50 218  	  CHARGE
16:00:50 219  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:50 220  	WHERE
16:00:50 221  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:50 222  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50 223  	  AND
16:00:50 224  	    TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
16:00:50 225  
16:00:50 226  EXCEPTION
16:00:50 227  WHEN BAD_INVOICE_ID THEN
16:00:50 228  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 229  	  SPROC_NAME, 'No such invoice');
16:00:50 230  WHEN OTHERS THEN
16:00:50 231  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 232  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 233  END GET_UNPROCESSED_CHARGES;
16:00:50 234  
16:00:50 235  /******************************************************************************/
16:00:50 236  
16:00:50 237  PROCEDURE GET_PROCESSED_CHARGES (
16:00:50 238  /*
16:00:50 239  Throws exceptions:
16:00:50 240  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 241  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 242  */
16:00:50 243  	in_invoice_id  IN NUMBER,
16:00:50 244  	out_result_set OUT SYS_REFCURSOR
16:00:50 245  ) AS
16:00:50 246  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_PROCESSED_CHARGES';
16:00:50 247  -- VARIABLES
16:00:50 248  temp_invoice_id NUMBER;
16:00:50 249  -- EXCEPTIONS
16:00:50 250  BAD_INVOICE_ID  EXCEPTION;
16:00:50 251  BEGIN
16:00:50 252  
16:00:50 253  	-- Check that invoice exists
16:00:50 254  	BEGIN
16:00:50 255  	  SELECT
16:00:50 256  	    INVOICE.ID into temp_invoice_id
16:00:50 257  	  FROM
16:00:50 258  	    INVOICE
16:00:50 259  	  WHERE
16:00:50 260  	    INVOICE.ID = in_invoice_id;
16:00:50 261  	  EXCEPTION
16:00:50 262  	    WHEN NO_DATA_FOUND THEN
16:00:50 263  	      RAISE BAD_INVOICE_ID;
16:00:50 264  	END;
16:00:50 265  
16:00:50 266  	-- Select charges
16:00:50 267  	OPEN out_result_set FOR
16:00:50 268  	SELECT /*+ STAR_TRANSFORMATION */
16:00:50 269  	  CHARGE.ID,
16:00:50 270  	  CHARGE.TRANSACTION_ID,
16:00:50 271  	  CHARGE.INSTRUMENT_ID,
16:00:50 272  	  CHARGE.INSTRUMENT_TYPE_ID,
16:00:50 273  	  CHARGE.CHARGE_AMOUNT,
16:00:50 274  	  CHARGE.CREATE_DATE,
16:00:50 275  	  CHARGE.CREATED_BY,
16:00:50 276  	  CHARGE.INVOICE_ID
16:00:50 277  	FROM
16:00:50 278  	  CHARGE
16:00:50 279  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:50 280  	WHERE
16:00:50 281  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:50 282  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:50 283  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_CLOSED;
16:00:50 284  
16:00:50 285  EXCEPTION
16:00:50 286  WHEN BAD_INVOICE_ID THEN
16:00:50 287  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 288  	  SPROC_NAME, 'No such invoice');
16:00:50 289  WHEN OTHERS THEN
16:00:50 290  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 291  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 292  END GET_PROCESSED_CHARGES;
16:00:50 293  
16:00:50 294  /******************************************************************************/
16:00:50 295  
16:00:50 296  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:00:50 297  /*
16:00:50 298  Throws exceptions:
16:00:50 299  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 300  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 301  */
16:00:50 302  	in_charge_id	    IN NUMBER,
16:00:50 303  	out_subscription_id OUT NUMBER
16:00:50 304  ) AS
16:00:50 305  SPROC_NAME	  CONSTANT VARCHAR2(26) := 'GET_SUBSCR_ID_BY_CHARGE_ID';
16:00:50 306  -- VARIABLES
16:00:50 307  var_invoice_id	  NUMBER;
16:00:50 308  var_subscription_id NUMBER;
16:00:50 309  -- EXCEPTIONS
16:00:50 310  BAD_CHARGE_ID		EXCEPTION;
16:00:50 311  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:00:50 312  BEGIN
16:00:50 313  
16:00:50 314  	BEGIN
16:00:50 315  	  SELECT
16:00:50 316  	    CHARGE.INVOICE_ID into var_invoice_id
16:00:50 317  	  FROM
16:00:50 318  	    CHARGE
16:00:50 319  	  WHERE
16:00:50 320  	    CHARGE.ID = in_charge_id;
16:00:50 321  	  EXCEPTION
16:00:50 322  	    WHEN NO_DATA_FOUND THEN
16:00:50 323  	      RAISE BAD_CHARGE_ID;
16:00:50 324  	END;
16:00:50 325  
16:00:50 326  	BEGIN
16:00:50 327  	  SELECT
16:00:50 328  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:00:50 329  	  FROM
16:00:50 330  	    LICENSE
16:00:50 331  	  WHERE
16:00:50 332  	    LICENSE.INVOICE_ID = var_invoice_id
16:00:50 333  	    AND ROWNUM <= 1; -- That's because many licenses could be pointed to the same invoice
16:00:50 334  	  EXCEPTION
16:00:50 335  	    WHEN NO_DATA_FOUND THEN
16:00:50 336  	      RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:00:50 337  	END;
16:00:50 338  
16:00:50 339  	out_subscription_id := var_subscription_id;
16:00:50 340  
16:00:50 341  EXCEPTION
16:00:50 342  WHEN BAD_CHARGE_ID THEN
16:00:50 343  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 344  	  SPROC_NAME, 'No such charge');
16:00:50 345  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:00:50 346  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 347  	  SPROC_NAME, 'Could not find subscription for given charge');
16:00:50 348  WHEN OTHERS THEN
16:00:50 349  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 350  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 351  END GET_SUBSCR_ID_BY_CHARGE_ID;
16:00:50 352  
16:00:50 353  /******************************************************************************/
16:00:50 354  
16:00:50 355  PROCEDURE UPDATE_CHARGE_STATUS (
16:00:50 356  /*
16:00:50 357  Throws exceptions:
16:00:50 358  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 359  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 360  */
16:00:50 361  	in_charge_id	    IN CHARGE.ID%TYPE,
16:00:50 362  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:50 363  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:00:50 364  ) AS
16:00:50 365  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_CHARGE_STATUS';
16:00:50 366  -- EXCEPTIONS
16:00:50 367  BAD_CHARGE_ID	     EXCEPTION;
16:00:50 368  BAD_STATUS_ID	     EXCEPTION;
16:00:50 369  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 370  BEGIN
16:00:50 371  
16:00:50 372  	IF in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50 373  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:50 374  	  AND in_charge_status_id != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
16:00:50 375  	  RAISE BAD_STATUS_ID;
16:00:50 376  	END IF;
16:00:50 377  
16:00:50 378  	PROCS_CHARGE_CRU_V20.UPDATE_CHARGE(
16:00:50 379  	  in_charge_id	      => in_charge_id,
16:00:50 380  	  in_charge_status_id => in_charge_status_id,
16:00:50 381  	  in_updated_by       => in_updated_by
16:00:50 382  	);
16:00:50 383  
16:00:50 384  	IF SQL%ROWCOUNT = 0 THEN
16:00:50 385  	  RAISE BAD_CHARGE_ID;
16:00:50 386  	END IF;
16:00:50 387  
16:00:50 388  EXCEPTION
16:00:50 389  WHEN BAD_CHARGE_ID THEN
16:00:50 390  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 391  	  SPROC_NAME, 'No such charge');
16:00:50 392  WHEN BAD_STATUS_ID THEN
16:00:50 393  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 394  	  SPROC_NAME, 'Bad status id');
16:00:50 395  WHEN OTHERS THEN
16:00:50 396  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 397  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 398  END UPDATE_CHARGE_STATUS;
16:00:50 399  
16:00:50 400  FUNCTION IS_CHARGE_COLLECTED (
16:00:50 401  /*
16:00:50 402  Throws:
16:00:50 403  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 404  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 405  Returns:
16:00:50 406  GLOBAL_CONST.TRUE if transaction collected,
16:00:50 407  GLOBAL_CONST.FALSE else
16:00:50 408  */
16:00:50 409  	in_charge_id IN NUMBER
16:00:50 410  ) RETURN NUMBER AS
16:00:50 411  SPROC_NAME CONSTANT VARCHAR2(19) := 'IS_CHARGE_COLLECTED';
16:00:50 412  -- VARIABLES
16:00:50 413  var_transaction_id NUMBER;
16:00:50 414  is_transaction_collected NUMBER;
16:00:50 415  -- EXCEPTIONS
16:00:50 416  BAD_CHARGE_ID	       EXCEPTION;
16:00:50 417  CAN_NOT_CHECK_TRANSACTION EXCEPTION;
16:00:50 418  EXCEPTION_MESSAGE        VARCHAR2(1024);
16:00:50 419  BEGIN
16:00:50 420  
16:00:50 421  	BEGIN
16:00:50 422  	  SELECT
16:00:50 423  	    CHARGE.TRANSACTION_ID into var_transaction_id
16:00:50 424  	  FROM
16:00:50 425  	    CHARGE
16:00:50 426  	  WHERE
16:00:50 427  	    CHARGE.ID = in_charge_id;
16:00:50 428  	  EXCEPTION
16:00:50 429  	    WHEN NO_DATA_FOUND THEN
16:00:50 430  	      RAISE BAD_CHARGE_ID;
16:00:50 431  	END;
16:00:50 432  
16:00:50 433  	BEGIN
16:00:50 434  	  is_transaction_collected := PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(var_transaction_id);
16:00:50 435  	  EXCEPTION
16:00:50 436  	    WHEN OTHERS THEN
16:00:50 437  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 438  	      RAISE CAN_NOT_CHECK_TRANSACTION;
16:00:50 439  	END;
16:00:50 440  
16:00:50 441  	RETURN is_transaction_collected;
16:00:50 442  
16:00:50 443  EXCEPTION
16:00:50 444  WHEN BAD_CHARGE_ID THEN
16:00:50 445  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 446  	  SPROC_NAME, 'No such charge');
16:00:50 447  WHEN CAN_NOT_CHECK_TRANSACTION THEN
16:00:50 448  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 449  	  SPROC_NAME, 'Could not check if transaction was collected', EXCEPTION_MESSAGE);
16:00:50 450  WHEN OTHERS THEN
16:00:50 451  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 452  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 453  END;
16:00:50 454  
16:00:50 455  PROCEDURE GET_COLLECTED_CHARGES (
16:00:50 456  /*
16:00:50 457  Throws exceptions:
16:00:50 458  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 459  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 460  */
16:00:50 461  	in_invoice_id  IN NUMBER,
16:00:50 462  	out_result_set OUT SYS_REFCURSOR
16:00:50 463  ) AS
16:00:50 464  SPROC_NAME      CONSTANT VARCHAR2(21) := 'GET_COLLECTED_CHARGES';
16:00:50 465  -- VARIABLES
16:00:50 466  temp_invoice_id NUMBER;
16:00:50 467  -- EXCEPTIONS
16:00:50 468  BAD_INVOICE_ID  EXCEPTION;
16:00:50 469  BEGIN
16:00:50 470  
16:00:50 471  	-- Check that invoice exists
16:00:50 472  	BEGIN
16:00:50 473  	  SELECT
16:00:50 474  	    INVOICE.ID into temp_invoice_id
16:00:50 475  	  FROM
16:00:50 476  	    INVOICE
16:00:50 477  	  WHERE
16:00:50 478  	    INVOICE.ID = in_invoice_id;
16:00:50 479  	  EXCEPTION
16:00:50 480  	    WHEN NO_DATA_FOUND THEN
16:00:50 481  	      RAISE BAD_INVOICE_ID;
16:00:50 482  	END;
16:00:50 483  
16:00:50 484  	-- Select charges
16:00:50 485  	OPEN out_result_set FOR
16:00:50 486  	SELECT
16:00:50 487  	  CHARGE.ID,
16:00:50 488  	  CHARGE.TRANSACTION_ID,
16:00:50 489  	  CHARGE.INSTRUMENT_ID,
16:00:50 490  	  CHARGE.INSTRUMENT_TYPE_ID,
16:00:50 491  	  CHARGE.CHARGE_AMOUNT,
16:00:50 492  	  CHARGE.CREATE_DATE,
16:00:50 493  	  CHARGE.CREATED_BY,
16:00:50 494  	  CHARGE.INVOICE_ID
16:00:50 495  	FROM
16:00:50 496  	  CHARGE
16:00:50 497  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:50 498  	WHERE
16:00:50 499  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:50 500  	  AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
16:00:50 501  	  AND PROCS_CHARGE_V20.IS_CHARGE_COLLECTED(CHARGE.ID) = GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 502  
16:00:50 503  EXCEPTION
16:00:50 504  WHEN BAD_INVOICE_ID THEN
16:00:50 505  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 506  	  SPROC_NAME, 'No such invoice');
16:00:50 507  WHEN OTHERS THEN
16:00:50 508  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 509  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 510  END GET_COLLECTED_CHARGES;
16:00:50 511  
16:00:50 512  END PROCS_CHARGE_V20;
16:00:50 513  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:00:50 SQL> 
16:00:50 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_SUBSCRIPTION_V20" AS
16:00:50   2  
16:00:50   3  PROCEDURE START_GRACE_BY_INVOICE_ID(
16:00:50   4  	in_invoice_id	     IN LICENSE.INVOICE_ID%TYPE,
16:00:50   5  	in_updater	     IN VARCHAR2,
16:00:50   6  	in_duration_in_hours IN NUMBER
16:00:50   7  ) AS
16:00:50   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
16:00:50   9  var_subs_id	  SUBSCRIPTION.ID%TYPE;
16:00:50  10  var_lic_id	  LICENSE.ID%TYPE;
16:00:50  11  var_grace_start	  DATE;
16:00:50  12  var_grace_end	  DATE;
16:00:50  13  BEGIN
16:00:50  14  	SELECT
16:00:50  15  	  ID,
16:00:50  16  	  SUBSCRIPTION_ID,
16:00:50  17  	  START_DATE,
16:00:50  18  	  START_DATE + (in_duration_in_hours / 24)
16:00:50  19  	INTO var_lic_id, var_subs_id, var_grace_start, var_grace_end
16:00:50  20  	FROM
16:00:50  21  	  LICENSE
16:00:50  22  	WHERE
16:00:50  23  	  INVOICE_ID = in_invoice_id
16:00:50  24  	  AND ROWNUM <= 1;
16:00:50  25  
16:00:50  26  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50  27  	    in_license_id	    => var_lic_id,
16:00:50  28  	    in_updated_by	    => in_updater,
16:00:50  29  	    in_grace_start_date     => var_grace_start,
16:00:50  30  	    in_grace_end_date	    => var_grace_end,
16:00:50  31  	    in_entitlement_end_date => var_grace_end,
16:00:50  32  	    in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
16:00:50  33  	);
16:00:50  34  
16:00:50  35  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50  36  	    in_subscription_id	      => var_subs_id,
16:00:50  37  	    in_updated_by	      => in_updater,
16:00:50  38  	    in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD
16:00:50  39  	  );
16:00:50  40  END START_GRACE_BY_INVOICE_ID;
16:00:50  41  
16:00:50  42  PROCEDURE STOP_GRACE_BY_INVOICE_ID(
16:00:50  43  	in_invoice_id IN LICENSE.INVOICE_ID%TYPE,
16:00:50  44  	in_updater    IN VARCHAR2
16:00:50  45  ) AS
16:00:50  46  SPROC_NAME CONSTANT VARCHAR2(32) := 'START_GRACE_BY_INVOICE_ID';
16:00:50  47  var_subs_id	  SUBSCRIPTION.ID%TYPE;
16:00:50  48  var_lic_id	  LICENSE.ID%TYPE;
16:00:50  49  var_lic_end_date	  DATE;
16:00:50  50  BEGIN
16:00:50  51  	SELECT
16:00:50  52  	  ID,
16:00:50  53  	  SUBSCRIPTION_ID,
16:00:50  54  	  END_DATE
16:00:50  55  	INTO var_lic_id, var_subs_id, var_lic_end_date
16:00:50  56  	FROM
16:00:50  57  	  LICENSE
16:00:50  58  	WHERE
16:00:50  59  	  INVOICE_ID = in_invoice_id
16:00:50  60  	  AND ROWNUM <= 1;
16:00:50  61  
16:00:50  62  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50  63  	    in_license_id	    => var_lic_id,
16:00:50  64  	    in_updated_by	    => in_updater,
16:00:50  65  	    in_grace_end_date	    => SYSDATE,
16:00:50  66  	    in_entitlement_end_date => var_lic_end_date,
16:00:50  67  	    in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50  68  	);
16:00:50  69  
16:00:50  70  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50  71  	    in_subscription_id	      => var_subs_id,
16:00:50  72  	    in_updated_by	      => in_updater,
16:00:50  73  	    in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50  74  	);
16:00:50  75  END STOP_GRACE_BY_INVOICE_ID;
16:00:50  76  
16:00:50  77  
16:00:50  78  PROCEDURE START_SUBSCRIPTION_CREATION (
16:00:50  79  	in_group_id	      IN NUMBER,
16:00:50  80  	in_created_by	      IN VARCHAR2,
16:00:50  81  	in_offer_chain_id     IN NUMBER,
16:00:50  82  	in_instrument_type_id IN NUMBER,
16:00:50  83  	in_instrument_id      IN NUMBER,
16:00:50  84  	in_agent_id	      IN NUMBER,
16:00:50  85  	in_note 	      IN VARCHAR2,
16:00:50  86  	out_subscription_id   OUT NUMBER,
16:00:50  87  	out_invoice_id	      OUT NUMBER,
16:00:50  88  	out_new_license_id    OUT NUMBER,
16:00:50  89  	in_check_dupe_products	 IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
16:00:50  90  ) AS
16:00:50  91  SPROC_NAME CONSTANT VARCHAR2(27) := 'START_SUBSCRIPTION_CREATION';
16:00:50  92  -- VARIABLES
16:00:50  93  var_account_id		 NUMBER;
16:00:50  94  var_account_status	 NUMBER;
16:00:50  95  var_offer_chain_status_id  NUMBER;
16:00:50  96  var_is_gift_certificate	 NUMBER;
16:00:50  97  var_is_for_redemption	 NUMBER;
16:00:50  98  var_same_offer_chains_num  NUMBER;
16:00:50  99  var_max_concurrent_subscrs NUMBER;
16:00:50 100  var_first_offer_id	 NUMBER;
16:00:50 101  var_new_invoice_id	 NUMBER;
16:00:50 102  var_new_subscription_id	 NUMBER;
16:00:50 103  var_date			 DATE := SYSDATE;
16:00:50 104  var_account_tax_exempt_id  VARCHAR2(255);
16:00:50 105  var_concur_subscription_id NUMBER;
16:00:50 106  -- EXCEPTIONS
16:00:50 107  BAD_GROUP_ID		    EXCEPTION;
16:00:50 108  CAN_NOT_CREATE_FOR_DISABLE    EXCEPTION;
16:00:50 109  BAD_OFFER_CHAIN		    EXCEPTION;
16:00:50 110  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
16:00:50 111  CAN_NOT_SUBSCRIBE_TO_GC	    EXCEPTION;
16:00:50 112  CAN_NOT_SUBSCRIBE_TO_RGC	    EXCEPTION;
16:00:50 113  LIMIT_REACHED		    EXCEPTION;
16:00:50 114  PRODUCT_ALREADY_PURCHASED     EXCEPTION;
16:00:50 115  CAN_NOT_GET_FIRST_OFFER_CHAIN EXCEPTION;
16:00:50 116  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
16:00:50 117  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
16:00:50 118  CAN_NOT_CREATE_LICENSE	    EXCEPTION;
16:00:50 119  CAN_NOT_CREATE_NOTE	    EXCEPTION;
16:00:50 120  
16:00:50 121  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:50 122  BEGIN
16:00:50 123  
16:00:50 124  	-- Get account id and status
16:00:50 125  	BEGIN
16:00:50 126  	  SELECT
16:00:50 127  	    ACCOUNT.ID,
16:00:50 128  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:00:50 129  	    ACCOUNT.TAX_EXEMPT_ID
16:00:50 130  	    into
16:00:50 131  	    var_account_id,
16:00:50 132  	    var_account_status,
16:00:50 133  	    var_account_tax_exempt_id
16:00:50 134  	  FROM
16:00:50 135  	    ACCOUNT
16:00:50 136  	  WHERE
16:00:50 137  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:50 138  	  EXCEPTION
16:00:50 139  	  WHEN NO_DATA_FOUND THEN
16:00:50 140  	    RAISE BAD_GROUP_ID;
16:00:50 141  	END;
16:00:50 142  
16:00:50 143  	-- Could not create subscription for disabled account
16:00:50 144  	IF var_account_status = GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
16:00:50 145  	  RAISE CAN_NOT_CREATE_FOR_DISABLE;
16:00:50 146  	END IF;
16:00:50 147  
16:00:50 148  	-- Get offer chain status
16:00:50 149  	BEGIN
16:00:50 150  	  SELECT
16:00:50 151  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID,
16:00:50 152  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE
16:00:50 153  	    into
16:00:50 154  	    var_offer_chain_status_id,
16:00:50 155  	    var_is_gift_certificate
16:00:50 156  	  FROM
16:00:50 157  	    OFFER_CHAIN
16:00:50 158  	  WHERE
16:00:50 159  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 160  
16:00:50 161  	  EXCEPTION
16:00:50 162  	    WHEN NO_DATA_FOUND THEN
16:00:50 163  	      RAISE BAD_OFFER_CHAIN;
16:00:50 164  	END;
16:00:50 165  
16:00:50 166  	-- Could not subscribe to inactive/disabled offer chain
16:00:50 167  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
16:00:50 168  	  RAISE BAD_OFFER_CHAIN_STATUS;
16:00:50 169  	END IF;
16:00:50 170  
16:00:50 171  	-- Can not subscribe to Offer Chain for a Gift Certfiicate
16:00:50 172  	IF var_is_gift_certificate = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:50 173  	  RAISE CAN_NOT_SUBSCRIBE_TO_GC;
16:00:50 174  	END IF;
16:00:50 175  
16:00:50 176  	-- check if the OC is for Redemption:
16:00:50 177  	SELECT
16:00:50 178  	  COUNT(*) into var_is_for_redemption
16:00:50 179  	FROM
16:00:50 180  	  OFFER_CHAIN_ELIGIBILITY
16:00:50 181  	WHERE
16:00:50 182  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 183  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
16:00:50 184  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
16:00:50 185  
16:00:50 186  	IF var_is_for_redemption > 0 THEN
16:00:50 187  	  RAISE CAN_NOT_SUBSCRIBE_TO_RGC;
16:00:50 188  	END IF;
16:00:50 189  
16:00:50 190  	SELECT
16:00:50 191  	  COUNT(*) into var_same_offer_chains_num
16:00:50 192  	FROM
16:00:50 193  	  SUBSCRIPTION
16:00:50 194  	WHERE
16:00:50 195  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:50 196  	  AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 197  	  AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 198  	       OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 199  
16:00:50 200  	-- ELIGIBILITY LOGIC CHANGED TO:
16:00:50 201  	-- FOR EACH offer chain eligibility rule in OC:
16:00:50 202  	--   IF offer chain eligibility rule fails:
16:00:50 203  	--     deny purchase;
16:00:50 204  	--   END IF
16:00:50 205  	-- END FOR
16:00:50 206  	-- FOR EACH product eligibility rule in OC:
16:00:50 207  	--   IF product eligibilty rule fails:
16:00:50 208  	--     deny purchase;
16:00:50 209  	--   END IF
16:00:50 210  	-- END FOR
16:00:50 211  	-- allow purchase;
16:00:50 212  
16:00:50 213  	-- if user have any active existing subscriptions to the offer chain
16:00:50 214  	-- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
16:00:50 215  	-- then deny purchase
16:00:50 216  	var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MAX_CONC_SUBSC(in_offer_chain_id);
16:00:50 217  	IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V20.INFINITY
16:00:50 218  	  AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
16:00:50 219  	  -- Find first concurrent subscription id:
16:00:50 220  	  SELECT
16:00:50 221  	    ID into var_concur_subscription_id
16:00:50 222  	  FROM (
16:00:50 223  	    SELECT
16:00:50 224  	      ID
16:00:50 225  	    FROM
16:00:50 226  	      SUBSCRIPTION
16:00:50 227  	    WHERE
16:00:50 228  	      SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:50 229  	      AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 230  	      AND (SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 231  		   OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:50 232  	    ORDER BY
16:00:50 233  	      ID
16:00:50 234  	  )
16:00:50 235  	  WHERE
16:00:50 236  	    ROWNUM <= 1;
16:00:50 237  	  RAISE LIMIT_REACHED;
16:00:50 238  	END IF;
16:00:50 239  
16:00:50 240  	-- if user does not have any active existing subscriptions to the offer chain
16:00:50 241  	-- and if product from the offer chain is already owned from another offer chain
16:00:50 242  	-- then deny purchase
16:00:50 243  	IF (in_check_dupe_products != GLOBAL_CONSTANTS_V20.FALSE) THEN
16:00:50 244  	  FOR f_account_offer_chains IN (
16:00:50 245  	    SELECT DISTINCT
16:00:50 246  	      OFFER_CHAIN_ID
16:00:50 247  	    FROM
16:00:50 248  	      SUBSCRIPTION
16:00:50 249  	    WHERE
16:00:50 250  	      ACCOUNT_ID = var_account_id
16:00:50 251  	      AND (
16:00:50 252  		SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 253  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
16:00:50 254  		OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:50 255  	  )
16:00:50 256  	  LOOP
16:00:50 257  	    IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(
16:00:50 258  	      in_offer_chain_1	       => in_offer_chain_id,
16:00:50 259  	      in_offer_chain_2	       => f_account_offer_chains.OFFER_CHAIN_ID,
16:00:50 260  	      in_use_eligibility_rules => GLOBAL_CONSTANTS_V20.TRUE
16:00:50 261  	    ) = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:50 262  
16:00:50 263  	      -- Find first concurrent subscription id:
16:00:50 264  	      SELECT
16:00:50 265  		ID into var_concur_subscription_id
16:00:50 266  	      FROM (
16:00:50 267  		SELECT
16:00:50 268  		  ID
16:00:50 269  		FROM
16:00:50 270  		  SUBSCRIPTION
16:00:50 271  		WHERE
16:00:50 272  		  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:50 273  		  AND SUBSCRIPTION.OFFER_CHAIN_ID = f_account_offer_chains.OFFER_CHAIN_ID
16:00:50 274  		  AND (
16:00:50 275  		    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 276  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
16:00:50 277  		    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:50 278  		ORDER BY
16:00:50 279  		  ID
16:00:50 280  	      )
16:00:50 281  	      WHERE
16:00:50 282  		ROWNUM <= 1;
16:00:50 283  
16:00:50 284  	      RAISE PRODUCT_ALREADY_PURCHASED;
16:00:50 285  	    END IF;
16:00:50 286  	  END LOOP;
16:00:50 287  	END IF;
16:00:50 288  
16:00:50 289  	BEGIN
16:00:50 290  	  PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(in_offer_chain_id, var_first_offer_id);
16:00:50 291  	  EXCEPTION
16:00:50 292  	    WHEN OTHERS THEN
16:00:50 293  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 294  	      RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
16:00:50 295  	END;
16:00:50 296  
16:00:50 297  	BEGIN
16:00:50 298  	  PROCS_INVOICE_V20.CREATE_INVOICE(
16:00:50 299  	    in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
16:00:50 300  	    in_created_by     => in_created_by,
16:00:50 301  	    in_tax_exempt_id  => var_account_tax_exempt_id,
16:00:50 302  	    out_invoice_id    => var_new_invoice_id
16:00:50 303  	  );
16:00:50 304  	  EXCEPTION
16:00:50 305  	    WHEN OTHERS THEN
16:00:50 306  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 307  	      RAISE CAN_NOT_CREATE_INVOICE;
16:00:50 308  	END;
16:00:50 309  
16:00:50 310  	BEGIN
16:00:50 311  	  PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
16:00:50 312  	    in_invoice_id => var_new_invoice_id,
16:00:50 313  	    in_offer_id   => var_first_offer_id,
16:00:50 314  	    in_created_by => in_created_by
16:00:50 315  	  );
16:00:50 316  	  EXCEPTION
16:00:50 317  	    WHEN OTHERS THEN
16:00:50 318  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 319  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:00:50 320  	END;
16:00:50 321  
16:00:50 322  	PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION(
16:00:50 323  	  out_subscription_id	    => var_new_subscription_id,
16:00:50 324  	  in_account_id 	    => var_account_id,
16:00:50 325  	  in_purchase_date	    => var_date,
16:00:50 326  	  in_offer_chain_id	    => in_offer_chain_id,
16:00:50 327  	  in_created_by 	    => in_created_by,
16:00:50 328  	  in_instrument_type_id     => in_instrument_type_id,
16:00:50 329  	  in_instrument_id	    => in_instrument_id,
16:00:50 330  	  in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 331  	);
16:00:50 332  
16:00:50 333  	BEGIN
16:00:50 334  	  PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:50 335  	    in_subscription_id => var_new_subscription_id,
16:00:50 336  	    in_agent_id        => in_agent_id,
16:00:50 337  	    in_note	       => in_note,
16:00:50 338  	    in_created_by      => in_created_by
16:00:50 339  	  );
16:00:50 340  	  EXCEPTION
16:00:50 341  	   WHEN OTHERS THEN
16:00:50 342  	     EXCEPTION_MESSAGE := SQLERRM;
16:00:50 343  	     RAISE CAN_NOT_CREATE_NOTE;
16:00:50 344  	END;
16:00:50 345  
16:00:50 346  	BEGIN
16:00:50 347  	  PROCS_LICENSE_V20.CREATE_LICENSE(
16:00:50 348  	    in_status_id		=> GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
16:00:50 349  	    in_needs_entitlements	=> GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 350  	    in_start_date		=> var_date,
16:00:50 351  	    in_end_date 		=> NULL, -- Will be calculated automatically
16:00:50 352  	    in_offer_id 		=> var_first_offer_id,
16:00:50 353  	    in_subscription_id		=> var_new_subscription_id,
16:00:50 354  	    in_invoice_id		=> var_new_invoice_id,
16:00:50 355  	    in_created_by		=> in_created_by,
16:00:50 356  	    in_is_extension		=> GLOBAL_CONSTANTS_V20.FALSE,
16:00:50 357  	    in_current_offer_index	=> PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER_INDEX(in_offer_chain_id),
16:00:50 358  	    in_current_offer_recurr_num => 1,
16:00:50 359  	    out_license_id		=> out_new_license_id
16:00:50 360  	  );
16:00:50 361  	  EXCEPTION
16:00:50 362  	    WHEN OTHERS THEN
16:00:50 363  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:50 364  	      RAISE CAN_NOT_CREATE_LICENSE;
16:00:50 365  	END;
16:00:50 366  
16:00:50 367  	out_subscription_id := var_new_subscription_id;
16:00:50 368  	out_invoice_id := var_new_invoice_id;
16:00:50 369  
16:00:50 370  EXCEPTION
16:00:50 371  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:00:50 372  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 373  	  SPROC_NAME, 'Offer chain is not active');
16:00:50 374  WHEN LIMIT_REACHED THEN
16:00:50 375  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
16:00:50 376  	  SPROC_NAME, 'Limit reached for given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
16:00:50 377  WHEN CAN_NOT_CREATE_FOR_DISABLE THEN
16:00:50 378  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 379  	  SPROC_NAME, 'Can not create subsscription for disabled account');
16:00:50 380  WHEN CAN_NOT_SUBSCRIBE_TO_GC THEN
16:00:50 381  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 382  	  SPROC_NAME, 'Can not subscribe to Offer Chain for Gift Certificate');
16:00:50 383  WHEN CAN_NOT_SUBSCRIBE_TO_RGC THEN
16:00:50 384  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 385  	  SPROC_NAME, 'Can not subscribe to Offer Chain that is for redemption');
16:00:50 386  WHEN BAD_OFFER_CHAIN THEN
16:00:50 387  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 388  	  SPROC_NAME, 'No such offer chain');
16:00:50 389  WHEN PRODUCT_ALREADY_PURCHASED THEN
16:00:50 390  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
16:00:50 391  	  SPROC_NAME, 'User already subscribed to some product in given offer chain. Concurrent subscription id: ' || var_concur_subscription_id);
16:00:50 392  WHEN CAN_NOT_GET_FIRST_OFFER_CHAIN THEN
16:00:50 393  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 394  	  SPROC_NAME, 'Could not find first offer in offer chain', EXCEPTION_MESSAGE);
16:00:50 395  WHEN CAN_NOT_CREATE_INVOICE THEN
16:00:50 396  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 397  	  SPROC_NAME, 'Could not create invoice', EXCEPTION_MESSAGE);
16:00:50 398  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:00:50 399  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 400  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:00:50 401  WHEN CAN_NOT_CREATE_LICENSE THEN
16:00:50 402  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 403  	  SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:00:50 404  WHEN BAD_GROUP_ID THEN
16:00:50 405  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 406  	  SPROC_NAME, 'Bad group id');
16:00:50 407  WHEN CAN_NOT_CREATE_NOTE THEN
16:00:50 408  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 409  	  SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:00:50 410  WHEN OTHERS THEN
16:00:50 411  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 412  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 413  END START_SUBSCRIPTION_CREATION;
16:00:50 414  
16:00:50 415  /******************************************************************************/
16:00:50 416  
16:00:50 417  PROCEDURE FINALIZE_SUBSCRIPTION_CREATION (
16:00:50 418  	in_subscription_id    IN NUMBER,
16:00:50 419  	in_invoice_id	      IN NUMBER,
16:00:50 420  	in_instrument_type_id IN NUMBER,
16:00:50 421  	in_instrument_id      IN NUMBER,
16:00:50 422  	in_created_by	      IN VARCHAR2
16:00:50 423  ) AS
16:00:50 424  SPROC_NAME CONSTANT VARCHAR2(30) := 'FINALIZE_SUBSCRIPTION_CREATION';
16:00:50 425  -- VARIABLES
16:00:50 426  var_invoice_amount     NUMBER(10, 2);
16:00:50 427  var_new_transaction_id NUMBER;
16:00:50 428  var_new_charge_id      NUMBER;
16:00:50 429  -- EXCEPTIONS
16:00:50 430  CAN_NOT_USE_FCINSTR	  EXCEPTION;
16:00:50 431  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
16:00:50 432  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
16:00:50 433  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
16:00:50 434  
16:00:50 435  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:50 436  BEGIN
16:00:50 437  
16:00:50 438  	-- Calculate invoice amount ( + discounts, taxes)
16:00:50 439  	BEGIN
16:00:50 440  	  PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(
16:00:50 441  	    in_invoice_id => in_invoice_id,
16:00:50 442  	    out_amount	  => var_invoice_amount
16:00:50 443  	  );
16:00:50 444  	  EXCEPTION
16:00:50 445  	   WHEN OTHERS THEN
16:00:50 446  	     EXCEPTION_MESSAGE := SQLERRM;
16:00:50 447  	     RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:00:50 448  	END;
16:00:50 449  
16:00:50 450  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT
16:00:50 451  	  AND var_invoice_amount > 0 THEN
16:00:50 452  	  RAISE CAN_NOT_USE_FCINSTR;
16:00:50 453  	END IF;
16:00:50 454  
16:00:50 455  	IF var_invoice_amount = 0 THEN
16:00:50 456  	  -- UPDATE INVOICE. SET STATUS TO PROCESSED
16:00:50 457  	  PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
16:00:50 458  	    in_invoice_id		   => in_invoice_id,
16:00:50 459  	    in_updated_by		   => in_created_by,
16:00:50 460  	    in_invoice_status_id	   => GLOBAL_STATUSES_V20.INVOICE_CLOSED
16:00:50 461  	  );
16:00:50 462  	ELSE
16:00:50 463  	  -- Create transaction and charge
16:00:50 464  	  BEGIN
16:00:50 465  	    PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:50 466  	      in_transaction_id 	=> NULL,
16:00:50 467  	      in_status_id		=> GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
16:00:50 468  	      in_amount 		=> var_invoice_amount,
16:00:50 469  	      in_created_by		=> in_created_by,
16:00:50 470  	      in_order_id		=> NULL,
16:00:50 471  	      in_transaction_type_code	=> 'START_SUBSCRIPTION',
16:00:50 472  	      out_transaction_id	=> var_new_transaction_id
16:00:50 473  	    );
16:00:50 474  	    EXCEPTION
16:00:50 475  	      WHEN OTHERS THEN
16:00:50 476  		EXCEPTION_MESSAGE := SQLERRM;
16:00:50 477  		RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:50 478  	  END;
16:00:50 479  
16:00:50 480  	  BEGIN
16:00:50 481  	    PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:50 482  	      in_invoice_id	    => in_invoice_id,
16:00:50 483  	      in_transaction_id     => var_new_transaction_id,
16:00:50 484  	      in_instrument_type_id => in_instrument_type_id,
16:00:50 485  	      in_instrument_id	    => in_instrument_id,
16:00:50 486  	      in_charge_amount	    => var_invoice_amount,
16:00:50 487  	      in_created_by	    => in_created_by,
16:00:50 488  	      in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:50 489  	      out_charge_id	    => var_new_charge_id
16:00:50 490  	    );
16:00:50 491  	    EXCEPTION
16:00:50 492  	      WHEN OTHERS THEN
16:00:50 493  		EXCEPTION_MESSAGE := SQLERRM;
16:00:50 494  		RAISE CAN_NOT_CREATE_CHARGE;
16:00:50 495  	  END;
16:00:50 496  	END IF;
16:00:50 497  
16:00:50 498  EXCEPTION
16:00:50 499  WHEN CAN_NOT_USE_FCINSTR THEN
16:00:50 500  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 501  	  SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:00:50 502  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:00:50 503  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 504  	  SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:00:50 505  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:50 506  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 507  	  SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:50 508  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:50 509  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 510  	  SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:50 511  WHEN OTHERS THEN
16:00:50 512  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 513  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 514  END FINALIZE_SUBSCRIPTION_CREATION;
16:00:50 515  
16:00:50 516  /******************************************************************************/
16:00:50 517  
16:00:50 518  PROCEDURE SUSPEND_SUBSCRIPTION(
16:00:50 519  /*
16:00:50 520  Throws exceptions:
16:00:50 521  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 522  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 523  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 524  */
16:00:50 525  	  in_subs_id	IN NUMBER,
16:00:50 526  	  in_updated_by IN VARCHAR2
16:00:50 527  ) AS
16:00:50 528  SPROC_NAME		  CONSTANT VARCHAR2(20) := 'SUSPEND_SUBSCRIPTION';
16:00:50 529  var_subscription_status_id  NUMBER;
16:00:50 530  var_license_id		  NUMBER;
16:00:50 531  var_offer_id		  NUMBER;
16:00:50 532  var_license_start_date	  DATE;
16:00:50 533  var_license_end_date	  DATE;
16:00:50 534  
16:00:50 535  var_entitlement_dupration   VARCHAR2(30);
16:00:50 536  var_d_entitlement_dupration NUMBER;
16:00:50 537  
16:00:50 538  var_ym_interval INTERVAL YEAR TO MONTH;
16:00:50 539  var_ds_interval INTERVAL DAY(3) TO SECOND;
16:00:50 540  
16:00:50 541  -- EXCEPTIONS
16:00:50 542  BAD_SUBSCRIPTION_ID     EXCEPTION;
16:00:50 543  BAD_SUBSCRIPTION_STATUS EXCEPTION;
16:00:50 544  NO_LICENSE_FOUND	      EXCEPTION;
16:00:50 545  NO_OFFER_FOUND	      EXCEPTION;
16:00:50 546  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:50 547  BEGIN
16:00:50 548  	-- TODO: Finish this prcedure (in Phase II)
16:00:50 549  
16:00:50 550  	-- Get subscription by id. FAULT if no such subscription.
16:00:50 551  	-- begin TX
16:00:50 552  	--   Get for update associated license (subscription.license_id). FAULT if not found.
16:00:50 553  	--   Set status to PROCESSED.
16:00:50 554  	--   updated record.
16:00:50 555  	--   compute days remaining in the subscription: original end_date - today = days_remaining_adjustment
16:00:50 556  	--   new subscription status is SUSPENDED.
16:00:50 557  	--   suspend_date is now.
16:00:50 558  	--   update subscription record.
16:00:50 559  	-- end TX
16:00:50 560  
16:00:50 561  	BEGIN
16:00:50 562  	  SELECT
16:00:50 563  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_subscription_status_id
16:00:50 564  	  FROM
16:00:50 565  	    SUBSCRIPTION
16:00:50 566  	  WHERE
16:00:50 567  	    SUBSCRIPTION.ID = in_subs_id;
16:00:50 568  	  EXCEPTION
16:00:50 569  	  WHEN NO_DATA_FOUND THEN
16:00:50 570  	    RAISE BAD_SUBSCRIPTION_ID;
16:00:50 571  	END;
16:00:50 572  
16:00:50 573  	IF var_subscription_status_id != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE THEN
16:00:50 574  	  RAISE BAD_SUBSCRIPTION_STATUS;
16:00:50 575  	END IF;
16:00:50 576  
16:00:50 577  	BEGIN
16:00:50 578  	  SELECT
16:00:50 579  	    LICENSE.ID,
16:00:50 580  	    LICENSE.OFFER_ID,
16:00:50 581  	    LICENSE.START_DATE
16:00:50 582  	    into
16:00:50 583  	    var_license_id,
16:00:50 584  	    var_offer_id,
16:00:50 585  	    var_license_start_date
16:00:50 586  	  FROM
16:00:50 587  	    LICENSE
16:00:50 588  	  WHERE
16:00:50 589  	    LICENSE.SUBSCRIPTION_ID = in_subs_id
16:00:50 590  	      AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE;
16:00:50 591  	  EXCEPTION
16:00:50 592  	  WHEN NO_DATA_FOUND THEN
16:00:50 593  	    RAISE NO_LICENSE_FOUND;
16:00:50 594  	END;
16:00:50 595  
16:00:50 596  	PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 597  	  in_license_id        => var_license_id,
16:00:50 598  	  in_updated_by        => in_updated_by,
16:00:50 599  	  in_license_status_id => GLOBAL_STATUSES_V20.LICENSE_CLOSED
16:00:50 600  	);
16:00:50 601  
16:00:50 602  	BEGIN
16:00:50 603  	  SELECT
16:00:50 604  	    OFFER.ENTITLEMENT_DURATION into var_entitlement_dupration
16:00:50 605  	  FROM
16:00:50 606  	    OFFER
16:00:50 607  	  WHERE
16:00:50 608  	    OFFER.ID = var_offer_id;
16:00:50 609  	  EXCEPTION
16:00:50 610  	  WHEN NO_DATA_FOUND THEN
16:00:50 611  	    RAISE NO_OFFER_FOUND;
16:00:50 612  	END;
16:00:50 613  
16:00:50 614  	var_ym_interval := substr(var_entitlement_dupration, 0, 4);
16:00:50 615  	var_ds_interval := substr(var_entitlement_dupration, 4);
16:00:50 616  
16:00:50 617  	var_license_end_date := var_license_start_date + var_ym_interval + var_ds_interval;
16:00:50 618  
16:00:50 619  	var_d_entitlement_dupration := var_license_end_date - current_date;
16:00:50 620  
16:00:50 621  	PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50 622  	  in_subscription_id	       => in_subs_id,
16:00:50 623  	  in_updated_by 	       => in_updated_by,
16:00:50 624  	  in_suspend_date	       => SYSDATE,
16:00:50 625  	  in_subscription_status_id    => GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED,
16:00:50 626  	  in_days_remainning_ajustment => var_d_entitlement_dupration
16:00:50 627  	);
16:00:50 628  
16:00:50 629  EXCEPTION
16:00:50 630  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 631  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 632  	  SPROC_NAME, 'No such subscription');
16:00:50 633  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:00:50 634  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 635  	  SPROC_NAME, 'Subscription is not active');
16:00:50 636  WHEN NO_LICENSE_FOUND THEN
16:00:50 637  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 638  	  SPROC_NAME, 'Can not find license associated with given subscription ID');
16:00:50 639  WHEN NO_OFFER_FOUND THEN
16:00:50 640  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 641  	  SPROC_NAME, 'Can not find offer associated with given subscription ID');
16:00:50 642  WHEN OTHERS THEN
16:00:50 643  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 644  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 645  END SUSPEND_SUBSCRIPTION;
16:00:50 646  
16:00:50 647  /******************************************************************************/
16:00:50 648  
16:00:50 649  PROCEDURE REACTIVATE_SUBSCRIPTION (
16:00:50 650  	in_subscription_id IN  NUMBER,
16:00:50 651  	in_updated_by	   IN  VARCHAR2
16:00:50 652  ) AS
16:00:50 653  BEGIN
16:00:50 654  	-- TODO: finish this function (in Phase II)
16:00:50 655  	NULL;
16:00:50 656  END REACTIVATE_SUBSCRIPTION;
16:00:50 657  
16:00:50 658  /******************************************************************************/
16:00:50 659  
16:00:50 660  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:50 661  /*
16:00:50 662  Throws exceptions:
16:00:50 663  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 664  */
16:00:50 665  	  in_subscription_id  IN  NUMBER,
16:00:50 666  	  out_result_set      OUT SYS_REFCURSOR
16:00:50 667  ) AS
16:00:50 668  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_SUBSCRIPTION_INFO';
16:00:50 669  -- VARIABLES
16:00:50 670  temp_subscription_id NUMBER;
16:00:50 671  -- EXCEPTIONS
16:00:50 672  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 673  BEGIN
16:00:50 674  	-- Find subscription by id
16:00:50 675  	-- Return its details
16:00:50 676  
16:00:50 677  	BEGIN
16:00:50 678  	  SELECT
16:00:50 679  	    SUBSCRIPTION.ID into temp_subscription_id
16:00:50 680  	  FROM
16:00:50 681  	    SUBSCRIPTION
16:00:50 682  	  WHERE
16:00:50 683  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:50 684  	  EXCEPTION
16:00:50 685  	    WHEN NO_DATA_FOUND THEN
16:00:50 686  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:50 687  	END;
16:00:50 688  
16:00:50 689  	OPEN out_result_set FOR
16:00:50 690  	SELECT
16:00:50 691  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
16:00:50 692  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:00:50 693  	  SUBSCRIPTION.PURCHASE_DATE,
16:00:50 694  	  SUBSCRIPTION.SUSPEND_DATE,
16:00:50 695  	  SUBSCRIPTION.REACTIVATION_DATE,
16:00:50 696  	  SUBSCRIPTION.CANCELLATION_DATE,
16:00:50 697  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
16:00:50 698  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:00:50 699  	  OFFER_CHAIN.NAME,
16:00:50 700  	  OFFER_CHAIN.DESCRIPTION,
16:00:50 701  	  OFFER_CHAIN.PRODUCT_URI,
16:00:50 702  	  SUBSCRIPTION.INSTRUMENT_ID,
16:00:50 703  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:00:50 704  	  PROCS_SUBSCRIPTION_V20.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
16:00:50 705  	  PROCS_SUBSCRIPTION_V20.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
16:00:50 706  	  PROCS_SUBSCRIPTION_V20.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
16:00:50 707  	  PROCS_SUBSCRIPTION_V20.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
16:00:50 708  	  (
16:00:50 709  	    SELECT
16:00:50 710  	      ACCOUNT.GROUP_ID
16:00:50 711  	      FROM ACCOUNT
16:00:50 712  	      WHERE ACCOUNT.ID = SUBSCRIPTION.ACCOUNT_ID
16:00:50 713  	  ) as "GROUP_ID",
16:00:50 714  	  (
16:00:50 715  	    SELECT
16:00:50 716  	      MAX(ENTITLEMENT_END_DATE)
16:00:50 717  	      FROM LICENSE
16:00:50 718  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 719  	  )
16:00:50 720  	  as "ENT_END_DATE",
16:00:50 721  	  (
16:00:50 722  	    SELECT
16:00:50 723  	      MIN(START_DATE)
16:00:50 724  	      FROM LICENSE
16:00:50 725  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 726  	  )
16:00:50 727  	  as "ENT_START_DATE",
16:00:50 728  	  PROCS_SUBSCRIPTION_V20.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
16:00:50 729  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
16:00:50 730  	  GROUP_ACCOUNT.ID GA_ID,
16:00:50 731  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
16:00:50 732  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
16:00:50 733  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
16:00:50 734  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
16:00:50 735  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
16:00:50 736  	  GROUP_ACCOUNT.PHONE GA_PHONE,
16:00:50 737  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
16:00:50 738  	  GROUP_ACCOUNT.SEATS GA_SEATS,
16:00:50 739  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
16:00:50 740  	  GROUP_ACCOUNT.IP GA_IP,
16:00:50 741  	  PROCS_SUBSCRIPTION_V20.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) gift_certificate_code,
16:00:50 742  	  PROCS_ACCOUNT_V20.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
16:00:50 743  	  PROCS_ACCOUNT_V20.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
16:00:50 744  	FROM
16:00:50 745  	  SUBSCRIPTION
16:00:50 746  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:50 747  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
16:00:50 748  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
16:00:50 749  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
16:00:50 750  	WHERE
16:00:50 751  	  SUBSCRIPTION.ID = in_subscription_id;
16:00:50 752  
16:00:50 753  EXCEPTION
16:00:50 754  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 755  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 756  	  SPROC_NAME, 'No such subscription');
16:00:50 757  WHEN OTHERS THEN
16:00:50 758  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 759  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 760  END GET_SUBSCRIPTION_INFO;
16:00:50 761  
16:00:50 762  /******************************************************************************/
16:00:50 763  
16:00:50 764  PROCEDURE GET_SUBSCRIPTION_INVOICES (
16:00:50 765  /*
16:00:50 766  Throws exceptions:
16:00:50 767  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 768  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 769  */
16:00:50 770  	in_subscription_id  IN	NUMBER,
16:00:50 771  	out_result_set	    OUT SYS_REFCURSOR
16:00:50 772  ) AS
16:00:50 773  SPROC_NAME	   CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_INVOICES';
16:00:50 774  temp_subscription_id NUMBER;
16:00:50 775  BEGIN
16:00:50 776  	-- Note: A subscription has one or more associated licenses, each of which has an associated invoice.
16:00:50 777  	-- Find associated LICENSES for the subscription by "LICENSE.subscription_id"
16:00:50 778  	--   for each license
16:00:50 779  	--     get associated invoice
16:00:50 780  	--     add to results list
16:00:50 781  	--   end loop
16:00:50 782  	-- end
16:00:50 783  
16:00:50 784  	SELECT
16:00:50 785  	  SUBSCRIPTION.ID into temp_subscription_id
16:00:50 786  	FROM
16:00:50 787  	  SUBSCRIPTION
16:00:50 788  	WHERE
16:00:50 789  	  SUBSCRIPTION.ID = in_subscription_id;
16:00:50 790  
16:00:50 791  	OPEN out_result_set FOR
16:00:50 792  	SELECT
16:00:50 793  	  INVOICE.ID,
16:00:50 794  	  INVOICE.INVOICE_STATUS_ID,
16:00:50 795  	  INVOICE.CREATE_DATE,
16:00:50 796  	  INVOICE.CREATED_BY,
16:00:50 797  	  INVOICE.UPDATE_DATE,
16:00:50 798  	  INVOICE.UPDATED_BY,
16:00:50 799  	  INVOICE.TAX_EXEMPT_ID
16:00:50 800  	FROM
16:00:50 801  	  LICENSE
16:00:50 802  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:50 803  	WHERE
16:00:50 804  	  LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:00:50 805  
16:00:50 806  EXCEPTION
16:00:50 807  WHEN NO_DATA_FOUND THEN
16:00:50 808  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 809  	  SPROC_NAME, 'Could not find subscription with given ID');
16:00:50 810  WHEN OTHERS THEN
16:00:50 811  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 812  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 813  END GET_SUBSCRIPTION_INVOICES;
16:00:50 814  
16:00:50 815  /******************************************************************************/
16:00:50 816  
16:00:50 817  PROCEDURE GET_SUBSCRIPTION_NOTES (
16:00:50 818  /*
16:00:50 819  Throws exceptions:
16:00:50 820  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 821  */
16:00:50 822  	in_subscription_id  IN	NUMBER,
16:00:50 823  	out_result_set	    OUT SYS_REFCURSOR
16:00:50 824  ) AS
16:00:50 825  -- VARIABLES
16:00:50 826  SPROC_NAME	   CONSTANT VARCHAR2(22) := 'GET_SUBSCRIPTION_NOTES';
16:00:50 827  temp_subscription_id NUMBER;
16:00:50 828  -- EXCEPTIONS
16:00:50 829  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 830  BEGIN
16:00:50 831  
16:00:50 832  	-- Check that subscription exists
16:00:50 833  	BEGIN
16:00:50 834  	  SELECT
16:00:50 835  	    SUBSCRIPTION.ID into temp_subscription_id
16:00:50 836  	  FROM
16:00:50 837  	    SUBSCRIPTION
16:00:50 838  	  WHERE
16:00:50 839  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:50 840  	  EXCEPTION
16:00:50 841  	    WHEN NO_DATA_FOUND THEN
16:00:50 842  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:50 843  	END;
16:00:50 844  
16:00:50 845  	OPEN out_result_set FOR
16:00:50 846  	SELECT
16:00:50 847  	  SUBSCRIPTION_NOTE.NOTE,
16:00:50 848  	  SUBSCRIPTION_NOTE.CREATED_BY,
16:00:50 849  	  SUBSCRIPTION_NOTE.CREATE_DATE
16:00:50 850  	FROM
16:00:50 851  	  SUBSCRIPTION_NOTE
16:00:50 852  	WHERE
16:00:50 853  	  SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 854  	ORDER BY
16:00:50 855  	  SUBSCRIPTION_NOTE.CREATE_DATE ASC;
16:00:50 856  
16:00:50 857  EXCEPTION
16:00:50 858  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 859  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 860  	  SPROC_NAME, 'No such subscription');
16:00:50 861  WHEN OTHERS THEN
16:00:50 862  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 863  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 864  END GET_SUBSCRIPTION_NOTES;
16:00:50 865  
16:00:50 866  /******************************************************************************/
16:00:50 867  
16:00:50 868  PROCEDURE ANNOTATE_SUBSCRIPTION (
16:00:50 869  /*
16:00:50 870  Throws exceptions:
16:00:50 871  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 872  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 873  */
16:00:50 874  	in_subscription_id IN  NUMBER,
16:00:50 875  	in_agent_id	   IN  NUMBER,
16:00:50 876  	in_note 	   IN  VARCHAR2,
16:00:50 877  	in_created_by	   IN  VARCHAR2
16:00:50 878  ) AS
16:00:50 879  -- VARIABLES
16:00:50 880  SPROC_NAME	       CONSTANT VARCHAR2(21) := 'ANNOTATE_SUBSCRIPTION';
16:00:50 881  temp_subscription_id     NUMBER;
16:00:50 882  var_subscription_note_id NUMBER;
16:00:50 883  -- EXCEPTIONS
16:00:50 884  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 885  BEGIN
16:00:50 886  
16:00:50 887  	-- Check that subscription exists
16:00:50 888  	BEGIN
16:00:50 889  	  SELECT
16:00:50 890  	    SUBSCRIPTION.ID into temp_subscription_id
16:00:50 891  	  FROM
16:00:50 892  	    SUBSCRIPTION
16:00:50 893  	  WHERE
16:00:50 894  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:50 895  	  EXCEPTION
16:00:50 896  	    WHEN NO_DATA_FOUND THEN
16:00:50 897  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:50 898  	END;
16:00:50 899  
16:00:50 900  	PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION_NOTE(
16:00:50 901  	  inout_subscription_note_id => var_subscription_note_id,
16:00:50 902  	  in_agent_id		     => in_agent_id,
16:00:50 903  	  in_subscription_id	     => in_subscription_id,
16:00:50 904  	  in_note		     => in_note,
16:00:50 905  	  in_created_by 	     => in_created_by
16:00:50 906  	);
16:00:50 907  
16:00:50 908  EXCEPTION
16:00:50 909  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 910  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 911  	  SPROC_NAME, 'No such subscription');
16:00:50 912  WHEN OTHERS THEN
16:00:50 913  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 915  END ANNOTATE_SUBSCRIPTION;
16:00:50 916  
16:00:50 917  /******************************************************************************/
16:00:50 918  
16:00:50 919  PROCEDURE GET_CANCEL_REASONS (
16:00:50 920  	out_result_set	  OUT SYS_REFCURSOR
16:00:50 921  ) AS
16:00:50 922  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_CANCEL_REASONS';
16:00:50 923  BEGIN
16:00:50 924  	OPEN out_result_set FOR
16:00:50 925  	SELECT
16:00:50 926  	  SUBSCRIPTION_CANCEL_REASON.ID,
16:00:50 927  	  SUBSCRIPTION_CANCEL_REASON.VALUE,
16:00:50 928  	  SUBSCRIPTION_CANCEL_REASON.DESCRIPTION,
16:00:50 929  	  SUBSCRIPTION_CANCEL_REASON.CANCELATION_STATUS_ID AS STATUS_ID
16:00:50 930  	FROM
16:00:50 931  	  SUBSCRIPTION_CANCEL_REASON;
16:00:50 932  
16:00:50 933  END GET_CANCEL_REASONS;
16:00:50 934  
16:00:50 935  /******************************************************************************/
16:00:50 936  
16:00:50 937  FUNCTION GET_RENEWAL_DATE (
16:00:50 938  /*
16:00:50 939  Throws exceptions:
16:00:50 940  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 941  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 942  */
16:00:50 943  	in_subscription_id in NUMBER
16:00:50 944  ) RETURN DATE AS
16:00:50 945  -- VARIABLES
16:00:50 946  SPROC_NAME	      CONSTANT VARCHAR2(16) := 'GET_RENEWAL_DATE';
16:00:50 947  var_subscription_status NUMBER;
16:00:50 948  var_licenses_count      NUMBER;
16:00:50 949  var_license_end_date    DATE;
16:00:50 950  var_last_offer_id       NUMBER;
16:00:50 951  var_offer_chain_id      NUMBER;
16:00:50 952  var_last_license_id     NUMBER;
16:00:50 953  var_current_offer_index NUMBER;
16:00:50 954  var_current_offer_recurr_num NUMBER;
16:00:50 955  var_offer_recurr_num    NUMBER;
16:00:50 956  -- EXCEPTIONS
16:00:50 957  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 958  NO_LICENSES_FOUND EXCEPTION;
16:00:50 959  BEGIN
16:00:50 960  
16:00:50 961  	-- Get subscription id and offer chain id
16:00:50 962  	BEGIN
16:00:50 963  	  SELECT
16:00:50 964  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:00:50 965  	    SUBSCRIPTION.OFFER_CHAIN_ID
16:00:50 966  	    into
16:00:50 967  	    var_subscription_status,
16:00:50 968  	    var_offer_chain_id
16:00:50 969  	  FROM
16:00:50 970  	    SUBSCRIPTION
16:00:50 971  	  WHERE
16:00:50 972  	    SUBSCRIPTION.ID = in_subscription_id;
16:00:50 973  	  EXCEPTION
16:00:50 974  	    WHEN NO_DATA_FOUND THEN
16:00:50 975  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:50 976  	END;
16:00:50 977  
16:00:50 978  	IF var_subscription_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE THEN
16:00:50 979  	  -- TODO: Is suspended subscription has renewal date? (For the phase II)
16:00:50 980  	  -- AND var_subscription_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED THEN
16:00:50 981  	  RETURN NULL;
16:00:50 982  	END IF;
16:00:50 983  
16:00:50 984  	BEGIN
16:00:50 985  	  SELECT
16:00:50 986  	    LICENSE_ID,
16:00:50 987  	    END_DATE,
16:00:50 988  	    OFFER_ID,
16:00:50 989  	    CURRENT_OFFER_INDEX,
16:00:50 990  	    CURRENT_OFFER_RECURR_NUM
16:00:50 991  	    into
16:00:50 992  	    var_last_license_id,
16:00:50 993  	    var_license_end_date,
16:00:50 994  	    var_last_offer_id,
16:00:50 995  	    var_current_offer_index,
16:00:50 996  	    var_current_offer_recurr_num
16:00:50 997  	  FROM
16:00:50 998  	    (
16:00:50 999  	      SELECT
16:00:50 1000  		 LICENSE.ID as "LICENSE_ID",
16:00:50 1001  		 LICENSE.END_DATE,
16:00:50 1002  		 LICENSE.OFFER_ID,
16:00:50 1003  		 LICENSE.CURRENT_OFFER_INDEX,
16:00:50 1004  		 LICENSE.CURRENT_OFFER_RECURR_NUM
16:00:50 1005  	       FROM
16:00:50 1006  		 LICENSE
16:00:50 1007  	       WHERE
16:00:50 1008  		 LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 1009  		 AND LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 1010  	       ORDER BY END_DATE DESC
16:00:50 1011  	     )
16:00:50 1012  	     INNER JOIN OFFER ON OFFER_ID = OFFER.ID
16:00:50 1013  	   WHERE
16:00:50 1014  	     ROWNUM <= 1;
16:00:50 1015  
16:00:50 1016  	   EXCEPTION
16:00:50 1017  	     WHEN NO_DATA_FOUND THEN
16:00:50 1018  	       -- RAISE NO_LICENSES_FOUND;
16:00:50 1019  	       RETURN NULL;
16:00:50 1020  	 END;
16:00:50 1021  
16:00:50 1022  	 SELECT
16:00:50 1023  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_offer_recurr_num
16:00:50 1024  	 FROM
16:00:50 1025  	   OFFER_OFFER_CHAIN
16:00:50 1026  	 WHERE
16:00:50 1027  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:00:50 1028  	   AND OFFER_OFFER_CHAIN.OFFER_ID = var_last_offer_id;
16:00:50 1029  
16:00:50 1030  	 IF PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX(var_offer_chain_id, var_current_offer_index) IS NULL
16:00:50 1031  	   AND var_offer_recurr_num = var_current_offer_recurr_num THEN
16:00:50 1032  	   -- There is no next offer for this subscription
16:00:50 1033  	   RETURN NULL;
16:00:50 1034  	 END IF;
16:00:50 1035  
16:00:50 1036  	 RETURN var_license_end_date;
16:00:50 1037  
16:00:50 1038  EXCEPTION
16:00:50 1039  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1040  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1041  	   SPROC_NAME, 'No such subscription');
16:00:50 1042  WHEN NO_LICENSES_FOUND THEN
16:00:50 1043  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1044  	   SPROC_NAME, 'No licenses found');
16:00:50 1045  WHEN OTHERS THEN
16:00:50 1046  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1047  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1048  END GET_RENEWAL_DATE;
16:00:50 1049  
16:00:50 1050  /******************************************************************************/
16:00:50 1051  
16:00:50 1052  FUNCTION GET_RECENT_CHARGE (
16:00:50 1053  /*
16:00:50 1054  Throws exceptions:
16:00:50 1055  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1056  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1057  */
16:00:50 1058  	 in_subscription_id IN NUMBER
16:00:50 1059  ) RETURN NUMBER AS
16:00:50 1060  -- VARIABLES
16:00:50 1061  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_RECENT_CHARGE';
16:00:50 1062  temp_subscription_id NUMBER;
16:00:50 1063  var_recent_charge    NUMBER(10,2);
16:00:50 1064  
16:00:50 1065  -- EXCEPTIONS
16:00:50 1066  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 1067  BEGIN
16:00:50 1068  
16:00:50 1069  	 BEGIN
16:00:50 1070  	   SELECT
16:00:50 1071  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 1072  	   FROM
16:00:50 1073  	     SUBSCRIPTION
16:00:50 1074  	   WHERE
16:00:50 1075  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1076  	   EXCEPTION
16:00:50 1077  	     WHEN NO_DATA_FOUND THEN
16:00:50 1078  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1079  	 END;
16:00:50 1080  
16:00:50 1081  	 BEGIN
16:00:50 1082  	   SELECT
16:00:50 1083  	     CHARGE.CHARGE_AMOUNT into var_recent_charge
16:00:50 1084  	   FROM
16:00:50 1085  	     LICENSE
16:00:50 1086  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 1087  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:50 1088  	     INNER JOIN CHARGE ON CHARGE.INVOICE_ID = INVOICE.ID
16:00:50 1089  	   WHERE
16:00:50 1090  	     -- TODO: Review
16:00:50 1091  	     -- LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_PROCESSED
16:00:50 1092  	     -- AND
16:00:50 1093  	     SUBSCRIPTION.ID = in_subscription_id
16:00:50 1094  	     AND CHARGE.CHARGE_AMOUNT >= 0
16:00:50 1095  	     AND ROWNUM <= 1
16:00:50 1096  	   ORDER BY
16:00:50 1097  	     LICENSE.ID ASC, CHARGE.ID DESC;
16:00:50 1098  	   EXCEPTION
16:00:50 1099  	     WHEN NO_DATA_FOUND THEN
16:00:50 1100  	       var_recent_charge := 0;
16:00:50 1101  	 END;
16:00:50 1102  
16:00:50 1103  	 RETURN var_recent_charge;
16:00:50 1104  
16:00:50 1105  EXCEPTION
16:00:50 1106  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1107  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1108  	   SPROC_NAME, 'No such subscription');
16:00:50 1109  WHEN OTHERS THEN
16:00:50 1110  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1111  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1112  END GET_RECENT_CHARGE;
16:00:50 1113  
16:00:50 1114  /******************************************************************************/
16:00:50 1115  
16:00:50 1116  FUNCTION GET_BILLING_CYCLE (
16:00:50 1117  	 in_subscription_id IN NUMBER
16:00:50 1118  ) RETURN VARCHAR2 AS
16:00:50 1119  -- VARIABLES
16:00:50 1120  SPROC_NAME	    CONSTANT VARCHAR2(17) := 'GET_BILLING_CYCLE';
16:00:50 1121  temp_subscription_id NUMBER;
16:00:50 1122  var_offer_duration   VARCHAR2(30);
16:00:50 1123  
16:00:50 1124  -- EXCEPTIONS
16:00:50 1125  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 1126  BEGIN
16:00:50 1127  
16:00:50 1128  	 BEGIN
16:00:50 1129  	   SELECT
16:00:50 1130  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 1131  	   FROM
16:00:50 1132  	     SUBSCRIPTION
16:00:50 1133  	   WHERE
16:00:50 1134  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1135  	   EXCEPTION
16:00:50 1136  	     WHEN NO_DATA_FOUND THEN
16:00:50 1137  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1138  	 END;
16:00:50 1139  
16:00:50 1140  	 SELECT
16:00:50 1141  	   OFFER.ENTITLEMENT_DURATION into var_offer_duration
16:00:50 1142  	 FROM
16:00:50 1143  	   LICENSE
16:00:50 1144  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 1145  	   INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
16:00:50 1146  	 WHERE
16:00:50 1147  	   --LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_PROCESSED
16:00:50 1148  	   --AND
16:00:50 1149  	   SUBSCRIPTION.ID = in_subscription_id
16:00:50 1150  	   AND ROWNUM <= 1
16:00:50 1151  	 ORDER BY
16:00:50 1152  	   LICENSE.ID ASC;
16:00:50 1153  
16:00:50 1154  	 RETURN var_offer_duration;
16:00:50 1155  
16:00:50 1156  EXCEPTION
16:00:50 1157  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1158  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1159  	   SPROC_NAME, 'No such subscription');
16:00:50 1160  WHEN OTHERS THEN
16:00:50 1161  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1162  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1163  END GET_BILLING_CYCLE;
16:00:50 1164  
16:00:50 1165  /******************************************************************************/
16:00:50 1166  
16:00:50 1167  PROCEDURE REFUND_SUBSCRIPTION (
16:00:50 1168  /*
16:00:50 1169  Throws exceptions:
16:00:50 1170  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1171  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1172  */
16:00:50 1173  	 in_subscription_id IN NUMBER,
16:00:50 1174  	 in_invoice_id	    IN NUMBER,
16:00:50 1175  	 in_refund_amount   IN NUMBER,
16:00:50 1176  	 in_note	    IN VARCHAR2,
16:00:50 1177  	 in_created_by	    IN VARCHAR2,
16:00:50 1178  	 out_charge_id	    OUT NUMBER
16:00:50 1179  ) AS
16:00:50 1180  -- VARIABLES
16:00:50 1181  SPROC_NAME	      CONSTANT VARCHAR2(19) := 'REFUND_SUBSCRIPTION';
16:00:50 1182  var_invoice_status_id  NUMBER;
16:00:50 1183  var_account_id	      NUMBER;
16:00:50 1184  var_account_status_id  NUMBER;
16:00:50 1185  var_new_transaction_id NUMBER;
16:00:50 1186  var_instrument_type_id NUMBER;
16:00:50 1187  var_instrument_id      NUMBER;
16:00:50 1188  var_new_charge_id      NUMBER;
16:00:50 1189  var_invoice_amount     NUMBER(10,2);
16:00:50 1190  var_refunds_before     NUMBER(10,2);
16:00:50 1191  var_charges_amount     NUMBER(10,2);
16:00:50 1192  -- EXCEPTIONS
16:00:50 1193  BAD_SUBSCRIPTION_ID	     EXCEPTION;
16:00:50 1194  ACCOUNT_IS_FROZEN	     EXCEPTION;
16:00:50 1195  BAD_INVOICE_ID		     EXCEPTION;
16:00:50 1196  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
16:00:50 1197  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
16:00:50 1198  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
16:00:50 1199  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:00:50 1200  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:00:50 1201  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:00:50 1202  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
16:00:50 1203  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
16:00:50 1204  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:00:50 1205  BEGIN
16:00:50 1206  
16:00:50 1207  	 BEGIN
16:00:50 1208  	   SELECT
16:00:50 1209  	     SUBSCRIPTION.INSTRUMENT_ID,
16:00:50 1210  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:00:50 1211  	     SUBSCRIPTION.ACCOUNT_ID
16:00:50 1212  	     into
16:00:50 1213  	     var_instrument_id,
16:00:50 1214  	     var_instrument_type_id,
16:00:50 1215  	     var_account_id
16:00:50 1216  	   FROM
16:00:50 1217  	     SUBSCRIPTION
16:00:50 1218  	   WHERE
16:00:50 1219  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1220  	   EXCEPTION
16:00:50 1221  	     WHEN NO_DATA_FOUND THEN
16:00:50 1222  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1223  	 END;
16:00:50 1224  
16:00:50 1225  	 -- Check account status. It should not to be frozen
16:00:50 1226  	 SELECT
16:00:50 1227  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
16:00:50 1228  	 FROM
16:00:50 1229  	   ACCOUNT
16:00:50 1230  	 WHERE
16:00:50 1231  	   ACCOUNT.ID = var_account_id;
16:00:50 1232  
16:00:50 1233  	 IF var_account_status_id = GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
16:00:50 1234  	   RAISE ACCOUNT_IS_FROZEN;
16:00:50 1235  	 END IF;
16:00:50 1236  
16:00:50 1237  	 BEGIN
16:00:50 1238  	   SELECT
16:00:50 1239  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
16:00:50 1240  	   FROM
16:00:50 1241  	     INVOICE
16:00:50 1242  	   WHERE
16:00:50 1243  	     INVOICE.ID = in_invoice_id;
16:00:50 1244  	   EXCEPTION
16:00:50 1245  	     WHEN NO_DATA_FOUND THEN
16:00:50 1246  	       RAISE BAD_INVOICE_ID;
16:00:50 1247  	 END;
16:00:50 1248  
16:00:50 1249  	 IF var_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
16:00:50 1250  	   RAISE INVOICE_IS_NOT_CLOSED;
16:00:50 1251  	 END IF;
16:00:50 1252  
16:00:50 1253  	 BEGIN
16:00:50 1254  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
16:00:50 1255  	     in_invoice_id => in_invoice_id,
16:00:50 1256  	     out_amount    => var_invoice_amount
16:00:50 1257  	   );
16:00:50 1258  	   EXCEPTION
16:00:50 1259  	     WHEN OTHERS THEN
16:00:50 1260  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1261  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:00:50 1262  	 END;
16:00:50 1263  
16:00:50 1264  	 IF ( in_refund_amount > var_invoice_amount ) THEN
16:00:50 1265  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
16:00:50 1266  	 END IF;
16:00:50 1267  
16:00:50 1268  	 SELECT /*+ STAR_TRANSFORMATION */
16:00:50 1269  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
16:00:50 1270  	 FROM
16:00:50 1271  	   CHARGE
16:00:50 1272  	 WHERE
16:00:50 1273  	   CHARGE.INVOICE_ID = in_invoice_id
16:00:50 1274  	   AND (
16:00:50 1275  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50 1276  	     OR CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:50 1277  	   )
16:00:50 1278  	   AND CHARGE.CHARGE_AMOUNT < 0;
16:00:50 1279  
16:00:50 1280  	 -- Refunds are negative
16:00:50 1281  	 var_refunds_before := -var_refunds_before;
16:00:50 1282  
16:00:50 1283  	 var_charges_amount := 0;
16:00:50 1284  
16:00:50 1285  	 FOR f_processed_charges IN (
16:00:50 1286  	   SELECT
16:00:50 1287  	     CHARGE.CHARGE_AMOUNT
16:00:50 1288  	   FROM
16:00:50 1289  	     CHARGE
16:00:50 1290  	   WHERE
16:00:50 1291  	     CHARGE.INVOICE_ID = in_invoice_id
16:00:50 1292  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
16:00:50 1293  	 )
16:00:50 1294  	 LOOP
16:00:50 1295  	   IF f_processed_charges.CHARGE_AMOUNT > 0 THEN
16:00:50 1296  	     var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
16:00:50 1297  	   END IF;
16:00:50 1298  	 END LOOP;
16:00:50 1299  
16:00:50 1300  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
16:00:50 1301  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
16:00:50 1302  	 END IF;
16:00:50 1303  
16:00:50 1304  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
16:00:50 1305  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
16:00:50 1306  	 END IF;
16:00:50 1307  
16:00:50 1308  	 BEGIN
16:00:50 1309  	   PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:50 1310  	     in_transaction_id	       => NULL,
16:00:50 1311  	     in_status_id	       => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
16:00:50 1312  	     in_amount		       => -in_refund_amount,
16:00:50 1313  	     in_created_by	       => in_created_by,
16:00:50 1314  	     in_order_id	       => NULL,
16:00:50 1315  	     in_is_refund	       => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 1316  	     in_transaction_type_code  => 'REFUND',
16:00:50 1317  	     out_transaction_id        => var_new_transaction_id
16:00:50 1318  	   );
16:00:50 1319  	   EXCEPTION
16:00:50 1320  	     WHEN OTHERS THEN
16:00:50 1321  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1322  	       RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:50 1323  	 END;
16:00:50 1324  
16:00:50 1325  	 BEGIN
16:00:50 1326  	   PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:50 1327  	     in_invoice_id	   => in_invoice_id,
16:00:50 1328  	     in_transaction_id	   => var_new_transaction_id,
16:00:50 1329  	     in_instrument_type_id => var_instrument_type_id,
16:00:50 1330  	     in_instrument_id	   => var_instrument_id,
16:00:50 1331  	     in_charge_amount	   => -in_refund_amount,
16:00:50 1332  	     in_created_by	   => in_created_by,
16:00:50 1333  	     in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:50 1334  	     out_charge_id	   => var_new_charge_id
16:00:50 1335  	   );
16:00:50 1336  	   EXCEPTION
16:00:50 1337  	     WHEN OTHERS THEN
16:00:50 1338  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1339  	       RAISE CAN_NOT_CREATE_CHARGE;
16:00:50 1340  	 END;
16:00:50 1341  
16:00:50 1342  	 IF in_note IS NOT NULL THEN
16:00:50 1343  	   BEGIN
16:00:50 1344  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:50 1345  	       in_subscription_id => in_subscription_id,
16:00:50 1346  	       in_agent_id	  => 0, -- AGENT_ID??
16:00:50 1347  	       in_note		  => in_note,
16:00:50 1348  	       in_created_by	  => in_created_by
16:00:50 1349  	     );
16:00:50 1350  	     EXCEPTION
16:00:50 1351  	       WHEN OTHERS THEN
16:00:50 1352  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1353  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:00:50 1354  	   END;
16:00:50 1355  	 END IF;
16:00:50 1356  
16:00:50 1357  	 out_charge_id := var_new_charge_id;
16:00:50 1358  
16:00:50 1359  EXCEPTION
16:00:50 1360  WHEN INVOICE_IS_NOT_CLOSED THEN
16:00:50 1361  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 1362  	   SPROC_NAME, 'Invoice is not closed');
16:00:50 1363  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1364  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1365  	   SPROC_NAME, 'No such subscription');
16:00:50 1366  WHEN ACCOUNT_IS_FROZEN THEN
16:00:50 1367  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 1368  	   SPROC_NAME, 'Could not refund subscription for frozen account');
16:00:50 1369  WHEN BAD_INVOICE_ID THEN
16:00:50 1370  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1371  	   SPROC_NAME, 'No such invoice');
16:00:50 1372  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:00:50 1373  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1374  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:00:50 1375  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
16:00:50 1376  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1377  	   SPROC_NAME, 'Refund is greater than amount');
16:00:50 1378  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
16:00:50 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1380  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
16:00:50 1381  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
16:00:50 1382  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1383  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
16:00:50 1384  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:50 1385  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1386  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:50 1387  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:50 1388  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1389  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:50 1390  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:00:50 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1392  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:00:50 1393  WHEN OTHERS THEN
16:00:50 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1396  END REFUND_SUBSCRIPTION;
16:00:50 1397  
16:00:50 1398  /******************************************************************************/
16:00:50 1399  
16:00:50 1400  PROCEDURE ADD_SUBSCRIPTION_EXTENSION (
16:00:50 1401  /*
16:00:50 1402  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1403  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 1404  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1405  */
16:00:50 1406  	 in_subscription_id	 IN NUMBER,
16:00:50 1407  	 in_effective_start_date IN DATE,
16:00:50 1408  	 in_effective_end_date	 IN DATE,
16:00:50 1409  	 in_note		 IN VARCHAR2,
16:00:50 1410  	 in_updated_by		 IN VARCHAR2
16:00:50 1411  ) AS
16:00:50 1412  -- VARIABLES
16:00:50 1413  SPROC_NAME		    CONSTANT VARCHAR2(26) := 'ADD_SUBSCRIPTION_EXTENSION';
16:00:50 1414  temp_subscription_id	    NUMBER;
16:00:50 1415  var_current_license_id	    NUMBER;
16:00:50 1416  var_current_license_start_date DATE;
16:00:50 1417  var_current_license_end_date DATE;
16:00:50 1418  var_current_offer_id	    NUMBER;
16:00:50 1419  var_current_invoice_id	    NUMBER;
16:00:50 1420  var_current_date 	    DATE;
16:00:50 1421  var_current_offer_index	    NUMBER;
16:00:50 1422  var_current_offer_recurr_num NUMBER;
16:00:50 1423  var_account_tax_exempt_id    VARCHAR2(255);
16:00:50 1424  
16:00:50 1425  var_free_invoice_id NUMBER;
16:00:50 1426  var_free_license_id NUMBER;
16:00:50 1427  var_new_license_id  NUMBER;
16:00:50 1428  var_ext_license_id  NUMBER;
16:00:50 1429  -- EXCEPTIONS
16:00:50 1430  BAD_SUBSCRIPTION_ID	     EXCEPTION;
16:00:50 1431  CAN_NOT_FIND_OFFER_OR_LICENSE EXCEPTION;
16:00:50 1432  CAN_NOT_CHANGE_LICENSE_STATUS EXCEPTION;
16:00:50 1433  CAN_NOT_CREATE_INVOICE	     EXCEPTION;
16:00:50 1434  CAN_NOT_CREATE_NEW_LICENSE    EXCEPTION;
16:00:50 1435  CAN_NOT_CREATE_END_LICENSE    EXCEPTION;
16:00:50 1436  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:00:50 1437  EXTENS_START_DATE_IS_TOO_FAR  EXCEPTION;
16:00:50 1438  EXT_START_DATE_LATER_THEN_END EXCEPTION;
16:00:50 1439  EXTENS_START_DATE_IS_TOO_SMALL EXCEPTION;
16:00:50 1440  EXCEPTION_MESSAGE	     VARCHAR2(1024);
16:00:50 1441  BEGIN
16:00:50 1442  
16:00:50 1443  	 var_current_date := PROCS_COMMON_V20.NORMALIZE_DATE(SYSDATE);
16:00:50 1444  
16:00:50 1445  	 -- Check that subscription exists
16:00:50 1446  	 BEGIN
16:00:50 1447  	   SELECT
16:00:50 1448  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 1449  	   FROM
16:00:50 1450  	     SUBSCRIPTION
16:00:50 1451  	   WHERE
16:00:50 1452  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1453  	   EXCEPTION
16:00:50 1454  	     WHEN NO_DATA_FOUND THEN
16:00:50 1455  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1456  	 END;
16:00:50 1457  
16:00:50 1458  	 -- Get account tax exempt id
16:00:50 1459  	 SELECT DISTINCT
16:00:50 1460  	   ACCOUNT.TAX_EXEMPT_ID into var_account_tax_exempt_id
16:00:50 1461  	 FROM
16:00:50 1462  	   ACCOUNT
16:00:50 1463  	   INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:50 1464  	 WHERE
16:00:50 1465  	   SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1466  
16:00:50 1467  	 -- Select current data
16:00:50 1468  	 BEGIN
16:00:50 1469  	   SELECT
16:00:50 1470  	     LICENSE.ID,
16:00:50 1471  	     LICENSE.START_DATE,
16:00:50 1472  	     LICENSE.END_DATE,
16:00:50 1473  	     LICENSE.CURRENT_OFFER_INDEX,
16:00:50 1474  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:50 1475  	     OFFER.ID,
16:00:50 1476  	     INVOICE.ID
16:00:50 1477  	   INTO
16:00:50 1478  	     var_current_license_id,
16:00:50 1479  	     var_current_license_start_date,
16:00:50 1480  	     var_current_license_end_date,
16:00:50 1481  	     var_current_offer_index,
16:00:50 1482  	     var_current_offer_recurr_num,
16:00:50 1483  	     var_current_offer_id,
16:00:50 1484  	     var_current_invoice_id
16:00:50 1485  	   FROM
16:00:50 1486  	     LICENSE
16:00:50 1487  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 1488  	     INNER JOIN OFFER ON LICENSE.OFFER_ID = OFFER.ID
16:00:50 1489  	     INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:50 1490  	   WHERE
16:00:50 1491  	     SUBSCRIPTION.ID = in_subscription_id
16:00:50 1492  	     AND PROCS_COMMON_V20.NORMALIZE_DATE(LICENSE.END_DATE) > var_current_date
16:00:50 1493  	     AND PROCS_COMMON_V20.NORMALIZE_DATE(LICENSE.START_DATE) <= var_current_date
16:00:50 1494  	     AND ROWNUM <= 1
16:00:50 1495  	   ORDER BY
16:00:50 1496  	     LICENSE.ID DESC;
16:00:50 1497  	   EXCEPTION
16:00:50 1498  	     WHEN NO_DATA_FOUND THEN
16:00:50 1499  	       RAISE CAN_NOT_FIND_OFFER_OR_LICENSE;
16:00:50 1500  	 END;
16:00:50 1501  
16:00:50 1502  	 IF var_current_license_end_date < in_effective_start_date THEN
16:00:50 1503  	   RAISE EXTENS_START_DATE_IS_TOO_FAR;
16:00:50 1504  	 END IF;
16:00:50 1505  
16:00:50 1506  	 IF var_current_license_start_date > in_effective_start_date THEN
16:00:50 1507  	   RAISE EXTENS_START_DATE_IS_TOO_SMALL;
16:00:50 1508  	 END IF;
16:00:50 1509  
16:00:50 1510  	 IF in_effective_start_date > in_effective_end_date THEN
16:00:50 1511  	   RAISE EXT_START_DATE_LATER_THEN_END;
16:00:50 1512  	 END IF;
16:00:50 1513  
16:00:50 1514  	 -- Closing curent license
16:00:50 1515  	 BEGIN
16:00:50 1516  	   PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 1517  	     in_license_id	   => var_current_license_id,
16:00:50 1518  	     in_updated_by	   => in_updated_by,
16:00:50 1519  	     in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
16:00:50 1520  	     in_end_date	   => in_effective_start_date,
16:00:50 1521  	     in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE
16:00:50 1522  	   );
16:00:50 1523  	   EXCEPTION
16:00:50 1524  	     WHEN OTHERS THEN
16:00:50 1525  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1526  	       RAISE CAN_NOT_CHANGE_LICENSE_STATUS;
16:00:50 1527  	 END;
16:00:50 1528  
16:00:50 1529  	 -- Creating new "free" invoice
16:00:50 1530  	 BEGIN
16:00:50 1531  	   PROCS_INVOICE_V20.CREATE_INVOICE(
16:00:50 1532  	     in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_CLOSED,
16:00:50 1533  	     in_created_by     => in_updated_by,
16:00:50 1534  	     in_tax_exempt_id  => var_account_tax_exempt_id,
16:00:50 1535  	     out_invoice_id    => var_free_invoice_id
16:00:50 1536  	   );
16:00:50 1537  	   EXCEPTION
16:00:50 1538  	     WHEN OTHERS THEN
16:00:50 1539  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1540  	       RAISE CAN_NOT_CREATE_INVOICE;
16:00:50 1541  	 END;
16:00:50 1542  
16:00:50 1543  	 -- Creating new "free" license
16:00:50 1544  	 BEGIN
16:00:50 1545  	   PROCS_LICENSE_V20.CREATE_LICENSE (
16:00:50 1546  	     in_status_id		 => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
16:00:50 1547  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 1548  	     in_start_date		 => in_effective_start_date,
16:00:50 1549  	     in_end_date		 => in_effective_end_date,
16:00:50 1550  	     in_offer_id		 => var_current_offer_id,
16:00:50 1551  	     in_subscription_id 	 => in_subscription_id,
16:00:50 1552  	     in_invoice_id		 => var_free_invoice_id,
16:00:50 1553  	     in_created_by		 => in_updated_by,
16:00:50 1554  	     in_is_extension		 => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 1555  	     in_current_offer_index	 => var_current_offer_index,
16:00:50 1556  	     in_current_offer_recurr_num => var_current_offer_recurr_num,
16:00:50 1557  	     out_license_id		 => var_free_license_id
16:00:50 1558  	   );
16:00:50 1559  	   EXCEPTION
16:00:50 1560  	     WHEN OTHERS THEN
16:00:50 1561  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1562  	       RAISE CAN_NOT_CREATE_NEW_LICENSE;
16:00:50 1563  	 END;
16:00:50 1564  
16:00:50 1565  	 -- Creating new license
16:00:50 1566  	 IF PROCS_COMMON_V20.NORMALIZE_DATE(var_current_license_end_date) >
16:00:50 1567  	    PROCS_COMMON_V20.NORMALIZE_DATE(in_effective_start_date) THEN
16:00:50 1568  	   BEGIN
16:00:50 1569  	     PROCS_LICENSE_V20.CREATE_LICENSE (
16:00:50 1570  	       in_status_id		   => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
16:00:50 1571  	       in_needs_entitlements	   => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 1572  	       in_start_date		   => in_effective_end_date,
16:00:50 1573  	       in_end_date		   => var_current_license_end_date + (in_effective_end_date - in_effective_start_date),
16:00:50 1574  	       in_offer_id		   => var_current_offer_id,
16:00:50 1575  	       in_subscription_id	   => in_subscription_id,
16:00:50 1576  	       in_invoice_id		   => var_current_invoice_id,
16:00:50 1577  	       in_created_by		   => in_updated_by,
16:00:50 1578  	       in_is_extension		   => GLOBAL_CONSTANTS_V20.FALSE,
16:00:50 1579  	       in_current_offer_index	   => var_current_offer_index,
16:00:50 1580  	       in_current_offer_recurr_num => var_current_offer_recurr_num,
16:00:50 1581  	       out_license_id		   => var_ext_license_id
16:00:50 1582  	     );
16:00:50 1583  	     EXCEPTION
16:00:50 1584  	       WHEN OTHERS THEN
16:00:50 1585  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1586  		 RAISE CAN_NOT_CREATE_END_LICENSE;
16:00:50 1587  	   END;
16:00:50 1588  	 END IF;
16:00:50 1589  
16:00:50 1590  	 -- Create new note for subscription
16:00:50 1591  	 BEGIN
16:00:50 1592  	   PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION (
16:00:50 1593  	     in_subscription_id => in_subscription_id,
16:00:50 1594  	     in_agent_id	=> 0, -- FIXME: What should to be here (agent id)?
16:00:50 1595  	     in_note		=> in_note,
16:00:50 1596  	     in_created_by	=> in_updated_by
16:00:50 1597  	   );
16:00:50 1598  	   EXCEPTION
16:00:50 1599  	     WHEN OTHERS THEN
16:00:50 1600  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1601  	       RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:00:50 1602  	 END;
16:00:50 1603  
16:00:50 1604  EXCEPTION
16:00:50 1605  WHEN EXT_START_DATE_LATER_THEN_END THEN
16:00:50 1606  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1607  	   SPROC_NAME, 'Extension start date is bigger then end date');
16:00:50 1608  WHEN EXTENS_START_DATE_IS_TOO_FAR THEN
16:00:50 1609  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1610  	   SPROC_NAME, 'Extension start date is too far');
16:00:50 1611  WHEN EXTENS_START_DATE_IS_TOO_SMALL THEN
16:00:50 1612  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 1613  	   SPROC_NAME, 'Extension start date is too small');
16:00:50 1614  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1615  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1616  	   SPROC_NAME, 'No such subscription');
16:00:50 1617  WHEN CAN_NOT_FIND_OFFER_OR_LICENSE THEN
16:00:50 1618  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1619  	   SPROC_NAME, 'Could not find license and/or offer for given subscription');
16:00:50 1620  WHEN CAN_NOT_CHANGE_LICENSE_STATUS THEN
16:00:50 1621  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1622  	   SPROC_NAME, 'Could not change license status', EXCEPTION_MESSAGE);
16:00:50 1623  WHEN CAN_NOT_CREATE_INVOICE THEN
16:00:50 1624  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1625  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:00:50 1626  WHEN CAN_NOT_CREATE_NEW_LICENSE THEN
16:00:50 1627  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1628  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:00:50 1629  WHEN CAN_NOT_CREATE_END_LICENSE THEN
16:00:50 1630  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1631  	   SPROC_NAME, 'Could not create last license', EXCEPTION_MESSAGE);
16:00:50 1632  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:00:50 1633  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1634  	   SPROC_NAME, 'Could not create new note for subscription', EXCEPTION_MESSAGE);
16:00:50 1635  WHEN OTHERS THEN
16:00:50 1636  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1637  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1638  END ADD_SUBSCRIPTION_EXTENSION;
16:00:50 1639  
16:00:50 1640  /******************************************************************************/
16:00:50 1641  
16:00:50 1642  FUNCTION CALC_SUBSCRIPTION_END_DATE (
16:00:50 1643  /*
16:00:50 1644  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1645  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 1646  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1647  Returns:
16:00:50 1648  NULL if it is impossible to calculate end date (for example,
16:00:50 1649  	 offer chain includes offer with infinity recurrences number)
16:00:50 1650  DATE else
16:00:50 1651  */
16:00:50 1652  	 in_subscription_id IN NUMBER
16:00:50 1653  ) RETURN DATE AS
16:00:50 1654  -- VARIABLES
16:00:50 1655  SPROC_NAME		     CONSTANT VARCHAR2(26) := 'CALC_SUBSCRIPTION_END_DATE';
16:00:50 1656  last_license_id		     NUMBER;
16:00:50 1657  last_license_end_date	     DATE;
16:00:50 1658  last_license_offer_id	     NUMBER;
16:00:50 1659  last_license_offer_index      NUMBER;
16:00:50 1660  last_license_offer_recurr_num NUMBER;
16:00:50 1661  var_last_license_id	     NUMBER;
16:00:50 1662  var_offer_chain_id	     NUMBER;
16:00:50 1663  var_current_offer_rec_number  NUMBER;
16:00:50 1664  var_next_offers_set	     SYS_REFCURSOR;
16:00:50 1665  var_next_offer_duration	     VARCHAR2(30);
16:00:50 1666  var_next_offer_recur	     NUMBER;
16:00:50 1667  var_infinity_offers_number    NUMBER;
16:00:50 1668  
16:00:50 1669  var_result_date DATE;
16:00:50 1670  
16:00:50 1671  var_ym_interval	INTERVAL YEAR TO MONTH;
16:00:50 1672  var_ds_interval	INTERVAL DAY(3) TO SECOND;
16:00:50 1673  var_offer_years	NUMBER;
16:00:50 1674  var_offer_months NUMBER;
16:00:50 1675  var_offer_days	NUMBER;
16:00:50 1676  
16:00:50 1677  -- EXCEPTIONS
16:00:50 1678  BAD_SUBSCRIPTION_ID	  EXCEPTION;
16:00:50 1679  CAN_NOT_FIND_LAST_LICENSE  EXCEPTION;
16:00:50 1680  CAN_NOT_CALC_OFFER_LENGTH  EXCEPTION;
16:00:50 1681  CAN_NOT_CALC_OFFER_LENGTH2 EXCEPTION;
16:00:50 1682  EXCEPTION_MESSAGE	  VARCHAR2(1024);
16:00:50 1683  BEGIN
16:00:50 1684  
16:00:50 1685  	 BEGIN
16:00:50 1686  	   SELECT
16:00:50 1687  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:00:50 1688  	   FROM
16:00:50 1689  	     SUBSCRIPTION
16:00:50 1690  	   WHERE
16:00:50 1691  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1692  	   EXCEPTION
16:00:50 1693  	     WHEN NO_DATA_FOUND THEN
16:00:50 1694  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1695  	 END;
16:00:50 1696  
16:00:50 1697  	 BEGIN
16:00:50 1698  	   SELECT
16:00:50 1699  	     ID into var_last_license_id
16:00:50 1700  	   FROM
16:00:50 1701  	     (
16:00:50 1702  	       SELECT
16:00:50 1703  		 LICENSE.ID
16:00:50 1704  	       FROM
16:00:50 1705  		 LICENSE
16:00:50 1706  	       WHERE
16:00:50 1707  		 LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 1708  	       ORDER BY
16:00:50 1709  		 LICENSE.END_DATE DESC
16:00:50 1710  	     )
16:00:50 1711  	   WHERE
16:00:50 1712  	     ROWNUM <= 1;
16:00:50 1713  	   EXCEPTION
16:00:50 1714  	     WHEN NO_DATA_FOUND THEN
16:00:50 1715  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
16:00:50 1716  	 END;
16:00:50 1717  
16:00:50 1718  	 SELECT
16:00:50 1719  	   COUNT(*) into var_infinity_offers_number
16:00:50 1720  	 FROM
16:00:50 1721  	   OFFER_OFFER_CHAIN
16:00:50 1722  	 WHERE
16:00:50 1723  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:00:50 1724  	   AND OFFER_OFFER_CHAIN.NUM_RECURRENCES = GLOBAL_ENUMS_V20.OFFER_REC_INFINITY;
16:00:50 1725  
16:00:50 1726  	 IF var_infinity_offers_number > 0 THEN
16:00:50 1727  	   RETURN NULL;
16:00:50 1728  	 END IF;
16:00:50 1729  
16:00:50 1730  	 BEGIN
16:00:50 1731  	   SELECT
16:00:50 1732  	     LICENSE.ID,
16:00:50 1733  	     LICENSE.END_DATE,
16:00:50 1734  	     LICENSE.CURRENT_OFFER_INDEX,
16:00:50 1735  	     LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:50 1736  	     LICENSE.OFFER_ID
16:00:50 1737  	     into
16:00:50 1738  	     last_license_id,
16:00:50 1739  	     last_license_end_date,
16:00:50 1740  	     last_license_offer_index,
16:00:50 1741  	     last_license_offer_recurr_num,
16:00:50 1742  	     last_license_offer_id
16:00:50 1743  	   FROM
16:00:50 1744  	     LICENSE
16:00:50 1745  	   WHERE
16:00:50 1746  	     LICENSE.ID = var_last_license_id;
16:00:50 1747  	   EXCEPTION
16:00:50 1748  	     WHEN NO_DATA_FOUND THEN
16:00:50 1749  	       RAISE CAN_NOT_FIND_LAST_LICENSE;
16:00:50 1750  	 END;
16:00:50 1751  
16:00:50 1752  	 var_result_date := last_license_end_date;
16:00:50 1753  
16:00:50 1754  	 -- Find current recurrence number
16:00:50 1755  	 SELECT
16:00:50 1756  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES into var_current_offer_rec_number
16:00:50 1757  	 FROM
16:00:50 1758  	   OFFER_OFFER_CHAIN
16:00:50 1759  	 WHERE
16:00:50 1760  	   OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id
16:00:50 1761  	   AND OFFER_OFFER_CHAIN.OFFER_ID = last_license_offer_id
16:00:50 1762  	   AND OFFER_OFFER_CHAIN.INDEX_VALUE = last_license_offer_index;
16:00:50 1763  
16:00:50 1764  	 IF var_current_offer_rec_number > last_license_offer_recurr_num THEN
16:00:50 1765  	   BEGIN
16:00:50 1766  	     PROCS_OFFER_CHAIN_V20.GET_OFFER_LENGTH(
16:00:50 1767  	       last_license_offer_id,
16:00:50 1768  	       var_offer_years,
16:00:50 1769  	       var_offer_months,
16:00:50 1770  	       var_offer_days
16:00:50 1771  	     );
16:00:50 1772  
16:00:50 1773  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
16:00:50 1774  	     var_ds_interval := var_offer_days||' 0:0:0';
16:00:50 1775  
16:00:50 1776  	     var_result_date := var_result_date
16:00:50 1777  	       + ( var_ym_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) )
16:00:50 1778  	       + ( var_ds_interval * ( var_current_offer_rec_number - last_license_offer_recurr_num ) );
16:00:50 1779  	     EXCEPTION
16:00:50 1780  	       WHEN OTHERS THEN
16:00:50 1781  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1782  		 RAISE CAN_NOT_CALC_OFFER_LENGTH;
16:00:50 1783  	   END;
16:00:50 1784  	 END IF;
16:00:50 1785  
16:00:50 1786  	 OPEN var_next_offers_set FOR
16:00:50 1787  	 SELECT
16:00:50 1788  	   OFFER.ENTITLEMENT_DURATION,
16:00:50 1789  	   OFFER_OFFER_CHAIN.NUM_RECURRENCES
16:00:50 1790  	 FROM
16:00:50 1791  	   OFFER_OFFER_CHAIN
16:00:50 1792  	   INNER JOIN OFFER ON OFFER_OFFER_CHAIN.OFFER_ID = OFFER.ID
16:00:50 1793  	 WHERE
16:00:50 1794  	   OFFER_OFFER_CHAIN.INDEX_VALUE > last_license_offer_index
16:00:50 1795  	   AND OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain_id;
16:00:50 1796  
16:00:50 1797  	 LOOP
16:00:50 1798  	   FETCH var_next_offers_set into var_next_offer_duration, var_next_offer_recur;
16:00:50 1799  	   EXIT WHEN var_next_offers_set%NOTFOUND;
16:00:50 1800  	   BEGIN
16:00:50 1801  	     PROCS_COMMON_V20.ISO8601DURATION_TO_INTERVALS(
16:00:50 1802  	       var_next_offer_duration,
16:00:50 1803  	       var_offer_years,
16:00:50 1804  	       var_offer_months,
16:00:50 1805  	       var_offer_days
16:00:50 1806  	     );
16:00:50 1807  
16:00:50 1808  	     var_ym_interval := var_offer_years||'-'||var_offer_months;
16:00:50 1809  	     var_ds_interval := var_offer_days||' 0:0:0';
16:00:50 1810  
16:00:50 1811  	     var_result_date := var_result_date
16:00:50 1812  	       + ( var_ym_interval * var_next_offer_recur )
16:00:50 1813  	       + ( var_ds_interval * var_next_offer_recur );
16:00:50 1814  	     EXCEPTION
16:00:50 1815  	       WHEN OTHERS THEN
16:00:50 1816  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:50 1817  		 RAISE CAN_NOT_CALC_OFFER_LENGTH2;
16:00:50 1818  	   END;
16:00:50 1819  	 END LOOP;
16:00:50 1820  
16:00:50 1821  	 RETURN var_result_date;
16:00:50 1822  
16:00:50 1823  EXCEPTION
16:00:50 1824  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1825  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1826  	   SPROC_NAME, 'No such subscription');
16:00:50 1827  WHEN CAN_NOT_FIND_LAST_LICENSE THEN
16:00:50 1828  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1829  	   SPROC_NAME, 'Could not find last license for given subscription');
16:00:50 1830  WHEN CAN_NOT_CALC_OFFER_LENGTH THEN
16:00:50 1831  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1832  	   SPROC_NAME, 'Could not calculate offer length', EXCEPTION_MESSAGE);
16:00:50 1833  WHEN CAN_NOT_CALC_OFFER_LENGTH2 THEN
16:00:50 1834  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 1835  	   SPROC_NAME, 'Could not calculate last offer length', EXCEPTION_MESSAGE);
16:00:50 1836  WHEN OTHERS THEN
16:00:50 1837  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1838  	   SPROC_NAME, 'Unkown error', SQLERRM);
16:00:50 1839  END CALC_SUBSCRIPTION_END_DATE;
16:00:50 1840  
16:00:50 1841  /******************************************************************************/
16:00:50 1842  
16:00:50 1843  PROCEDURE HAS_FUTURE_LICENSE (
16:00:50 1844  /*
16:00:50 1845  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1846  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1847  --
16:00:50 1848  RETURNS:
16:00:50 1849  GLOBAL_CONSTANTS_V20.TRUE - if has,
16:00:50 1850  GLOBAL_CONSTANTS_V20.FALSE - else
16:00:50 1851  */
16:00:50 1852  	 in_license_id IN  NUMBER,
16:00:50 1853  	 out_result    OUT NUMBER
16:00:50 1854  ) AS
16:00:50 1855  -- VARIABLES
16:00:50 1856  SPROC_NAME		 CONSTANT VARCHAR2(18) := 'HAS_FUTURE_LICENSE';
16:00:50 1857  var_subscription_id	 NUMBER;
16:00:50 1858  var_future_licenses_count NUMBER;
16:00:50 1859  -- EXCEPTIONS
16:00:50 1860  BAD_LICENSE_ID	    EXCEPTION;
16:00:50 1861  BEGIN
16:00:50 1862  
16:00:50 1863  	 BEGIN
16:00:50 1864  	   SELECT
16:00:50 1865  	     LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:00:50 1866  	   FROM
16:00:50 1867  	     LICENSE
16:00:50 1868  	   WHERE
16:00:50 1869  	     LICENSE.ID = in_license_id;
16:00:50 1870  	   EXCEPTION
16:00:50 1871  	     WHEN NO_DATA_FOUND THEN
16:00:50 1872  	       RAISE BAD_LICENSE_ID;
16:00:50 1873  	 END;
16:00:50 1874  
16:00:50 1875  	 SELECT
16:00:50 1876  	   COUNT(*) into var_future_licenses_count
16:00:50 1877  	 FROM
16:00:50 1878  	   LICENSE
16:00:50 1879  	 WHERE
16:00:50 1880  	   LICENSE.ID != in_license_id
16:00:50 1881  	   AND LICENSE.SUBSCRIPTION_ID = var_subscription_id
16:00:50 1882  	   AND LICENSE.END_DATE > sysdate;
16:00:50 1883  
16:00:50 1884  	 IF var_future_licenses_count > 0 THEN
16:00:50 1885  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 1886  	 ELSE
16:00:50 1887  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 1888  	 END IF;
16:00:50 1889  
16:00:50 1890  EXCEPTION
16:00:50 1891  WHEN BAD_LICENSE_ID THEN
16:00:50 1892  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1893  	   SPROC_NAME, 'No such license');
16:00:50 1894  WHEN OTHERS THEN
16:00:50 1895  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1896  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1897  END HAS_FUTURE_LICENSE;
16:00:50 1898  
16:00:50 1899  /******************************************************************************/
16:00:50 1900  
16:00:50 1901  PROCEDURE CLOSE_SUBSCRIPTION (
16:00:50 1902  	 in_subscription_id IN NUMBER,
16:00:50 1903  	 in_updated_by	    IN VARCHAR2
16:00:50 1904  ) AS
16:00:50 1905  -- VARIABLES
16:00:50 1906  SPROC_NAME	    CONSTANT VARCHAR2(18) := 'CLOSE_SUBSCRIPTION';
16:00:50 1907  temp_subscription_id NUMBER;
16:00:50 1908  var_licenses_count   NUMBER;
16:00:50 1909  -- EXCEPTIONS
16:00:50 1910  BAD_SUBSCRIPTION_ID    EXCEPTION;
16:00:50 1911  ACTIVE_LICENSES_FOUND  EXCEPTION;
16:00:50 1912  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:50 1913  BEGIN
16:00:50 1914  
16:00:50 1915  	 BEGIN
16:00:50 1916  	   SELECT
16:00:50 1917  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 1918  	   FROM
16:00:50 1919  	     SUBSCRIPTION
16:00:50 1920  	   WHERE
16:00:50 1921  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1922  	   EXCEPTION
16:00:50 1923  	     WHEN NO_DATA_FOUND THEN
16:00:50 1924  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 1925  	 END;
16:00:50 1926  
16:00:50 1927  	 SELECT
16:00:50 1928  	   COUNT(*) into var_licenses_count
16:00:50 1929  	 FROM
16:00:50 1930  	   LICENSE
16:00:50 1931  	 WHERE
16:00:50 1932  	   LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 1933  	   AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE;
16:00:50 1934  
16:00:50 1935  	 IF var_licenses_count > 0 THEN
16:00:50 1936  	   RAISE ACTIVE_LICENSES_FOUND;
16:00:50 1937  	 END IF;
16:00:50 1938  
16:00:50 1939  	 PROCS_SUBSCRIPTION_V20.UPDATE_SUBSCRIPTION_STATUS(
16:00:50 1940  	   in_subscription_id	     => in_subscription_id,
16:00:50 1941  	   in_updated_by	     => in_updated_by,
16:00:50 1942  	   in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_CLOSED
16:00:50 1943  	 );
16:00:50 1944  
16:00:50 1945  EXCEPTION
16:00:50 1946  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 1947  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1948  	   SPROC_NAME, 'No such subscription');
16:00:50 1949  WHEN ACTIVE_LICENSES_FOUND THEN
16:00:50 1950  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 1951  	   SPROC_NAME, 'Active licenses found');
16:00:50 1952  WHEN OTHERS THEN
16:00:50 1953  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1954  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1955  END CLOSE_SUBSCRIPTION;
16:00:50 1956  
16:00:50 1957  /******************************************************************************/
16:00:50 1958  
16:00:50 1959  PROCEDURE GET_GROUP_ID_BY_SBSCRPTN_ID (
16:00:50 1960  	 in_subscription_id IN NUMBER,
16:00:50 1961  	 out_group_id	    OUT NUMBER
16:00:50 1962  ) AS
16:00:50 1963  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUP_ID_BY_SBSCRPTN_ID';
16:00:50 1964  BEGIN
16:00:50 1965  	 SELECT
16:00:50 1966  	   ACCOUNT.GROUP_ID into out_group_id
16:00:50 1967  	 FROM
16:00:50 1968  	   SUBSCRIPTION
16:00:50 1969  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:50 1970  	 WHERE
16:00:50 1971  	   SUBSCRIPTION.ID = in_subscription_id;
16:00:50 1972  EXCEPTION
16:00:50 1973  WHEN NO_DATA_FOUND THEN
16:00:50 1974  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 1975  	   SPROC_NAME, 'No such subscription');
16:00:50 1976  WHEN OTHERS THEN
16:00:50 1977  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 1978  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 1979  END GET_GROUP_ID_BY_SBSCRPTN_ID;
16:00:50 1980  
16:00:50 1981  /******************************************************************************/
16:00:50 1982  
16:00:50 1983  PROCEDURE GET_SUBSCRIPTION_PRODUCTS (
16:00:50 1984  /*
16:00:50 1985  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 1986  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 1987  */
16:00:50 1988  	 in_subscription_id IN NUMBER,
16:00:50 1989  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 1990  ) AS
16:00:50 1991  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBSCRIPTION_PRODUCTS';
16:00:50 1992  -- VARIABLES
16:00:50 1993  var_offer_chain NUMBER;
16:00:50 1994  -- EXCEPTIONS
16:00:50 1995  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 1996  BEGIN
16:00:50 1997  	 BEGIN
16:00:50 1998  	   SELECT
16:00:50 1999  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
16:00:50 2000  	   FROM
16:00:50 2001  	     SUBSCRIPTION
16:00:50 2002  	   WHERE
16:00:50 2003  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2004  	   EXCEPTION
16:00:50 2005  	     WHEN NO_DATA_FOUND THEN
16:00:50 2006  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2007  	 END;
16:00:50 2008  
16:00:50 2009  	 OPEN out_result_set FOR
16:00:50 2010  	 SELECT DISTINCT
16:00:50 2011  	   PRODUCT.ID,
16:00:50 2012  	   PRODUCT.NAME
16:00:50 2013  	 FROM
16:00:50 2014  	   PRODUCT
16:00:50 2015  	 WHERE
16:00:50 2016  	   PRODUCT.ID IN (
16:00:50 2017  	     SELECT DISTINCT
16:00:50 2018  	       PRODUCT_OFFERING.PRODUCT_ID
16:00:50 2019  	     FROM
16:00:50 2020  	       PRODUCT_OFFERING
16:00:50 2021  	     WHERE
16:00:50 2022  	       PRODUCT_OFFERING.ID IN (
16:00:50 2023  		 SELECT DISTINCT
16:00:50 2024  		   OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 2025  		 FROM
16:00:50 2026  		   OFFER_PRODUCT_OFFERING
16:00:50 2027  		 WHERE
16:00:50 2028  		   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:50 2029  		     SELECT DISTINCT
16:00:50 2030  		       OFFER_OFFER_CHAIN.OFFER_ID
16:00:50 2031  		     FROM
16:00:50 2032  		       OFFER_OFFER_CHAIN
16:00:50 2033  		     WHERE
16:00:50 2034  		       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = var_offer_chain
16:00:50 2035  		   )
16:00:50 2036  	       )
16:00:50 2037  	   );
16:00:50 2038  
16:00:50 2039  EXCEPTION
16:00:50 2040  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2041  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2042  	   SPROC_NAME, 'No such subscription');
16:00:50 2043  WHEN OTHERS THEN
16:00:50 2044  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2045  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2046  END GET_SUBSCRIPTION_PRODUCTS;
16:00:50 2047  
16:00:50 2048  /******************************************************************************/
16:00:50 2049  
16:00:50 2050  PROCEDURE UPDATE_SUBSCRIPTION_STATUS (
16:00:50 2051  	 in_subscription_id	   IN SUBSCRIPTION.ID%TYPE,
16:00:50 2052  	 in_subscription_status_id IN SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE,
16:00:50 2053  	 in_updated_by		   IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:50 2054  ) AS
16:00:50 2055  SPROC_NAME CONSTANT VARCHAR2(26) := 'UPDATE_SUBSCRIPTION_STATUS';
16:00:50 2056  BEGIN
16:00:50 2057  	 PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50 2058  	   in_subscription_id	     => in_subscription_id,
16:00:50 2059  	   in_subscription_status_id => in_subscription_status_id,
16:00:50 2060  	   in_updated_by	     => in_updated_by
16:00:50 2061  	 );
16:00:50 2062  END UPDATE_SUBSCRIPTION_STATUS;
16:00:50 2063  
16:00:50 2064  /******************************************************************************/
16:00:50 2065  
16:00:50 2066  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:00:50 2067  /*
16:00:50 2068  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2069  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2070  */
16:00:50 2071  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:00:50 2072  	 in_subscription_id IN NUMBER,
16:00:50 2073  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 2074  ) AS
16:00:50 2075  SPROC_NAME CONSTANT VARCHAR2(23) := 'GET_ACTIVE_INVOICES_IDS';
16:00:50 2076  -- VARIABLES
16:00:50 2077  temp_subscription_id SUBSCRIPTION.ID%TYPE;
16:00:50 2078  -- EXCEPTIONS
16:00:50 2079  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2080  BEGIN
16:00:50 2081  
16:00:50 2082  	 BEGIN
16:00:50 2083  	   SELECT
16:00:50 2084  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 2085  	   FROM
16:00:50 2086  	     SUBSCRIPTION
16:00:50 2087  	   WHERE
16:00:50 2088  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2089  	   EXCEPTION
16:00:50 2090  	     WHEN NO_DATA_FOUND THEN
16:00:50 2091  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2092  	 END;
16:00:50 2093  
16:00:50 2094  	 OPEN out_result_set FOR
16:00:50 2095  	 SELECT DISTINCT
16:00:50 2096  	   LICENSE.INVOICE_ID as "ID"
16:00:50 2097  	 FROM
16:00:50 2098  	   LICENSE
16:00:50 2099  	 WHERE
16:00:50 2100  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
16:00:50 2101  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:00:50 2102  
16:00:50 2103  EXCEPTION
16:00:50 2104  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2105  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2106  	   SPROC_NAME, 'No such subscription');
16:00:50 2107  WHEN OTHERS THEN
16:00:50 2108  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2109  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2110  END GET_ACTIVE_INVOICES_IDS;
16:00:50 2111  
16:00:50 2112  /******************************************************************************/
16:00:50 2113  
16:00:50 2114  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:00:50 2115  /*
16:00:50 2116  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2117  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2118  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 2119  */
16:00:50 2120  	 in_invoice_id	      IN NUMBER,
16:00:50 2121  	 in_updated_by	      IN VARCHAR2,
16:00:50 2122  	 in_refundable	      IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:50 2123  ) AS
16:00:50 2124  SPROC_NAME CONSTANT VARCHAR2(27) := 'CANCEL_SUBSCRIPTION_INVOICE';
16:00:50 2125  -- VARIABLES
16:00:50 2126  temp_invoice_id	      INVOICE.ID%TYPE;
16:00:50 2127  var_chargeback_amount  NUMBER(10,2);
16:00:50 2128  ver_refund_charge_id   NUMBER;
16:00:50 2129  -- EXCEPTIONS
16:00:50 2130  BAD_INVOICE_ID		    EXCEPTION;
16:00:50 2131  CAN_NOT_CALCULATE_CHARGEBACK EXCEPTION;
16:00:50 2132  CAN_NOT_APPLY_CHARGEBACK     EXCEPTION;
16:00:50 2133  EXCEPTION_MESSAGE	    VARCHAR2(1024);
16:00:50 2134  -- STUB
16:00:50 2135  var_now DATE;
16:00:50 2136  var_revoke NUMBER;
16:00:50 2137  var_refund NUMBER;
16:00:50 2138  var_billed NUMBER;
16:00:50 2139  var_subscription_in_grace NUMBER;
16:00:50 2140  BEGIN
16:00:50 2141  
16:00:50 2142  	 var_now := sysdate;
16:00:50 2143  
16:00:50 2144  	 -- Check that invoice exists
16:00:50 2145  	 BEGIN
16:00:50 2146  	   SELECT
16:00:50 2147  	     INVOICE.ID into temp_invoice_id
16:00:50 2148  	   FROM
16:00:50 2149  	     INVOICE
16:00:50 2150  	   WHERE
16:00:50 2151  	     INVOICE.ID = in_invoice_id;
16:00:50 2152  	   EXCEPTION
16:00:50 2153  	     WHEN NO_DATA_FOUND THEN
16:00:50 2154  	       RAISE BAD_INVOICE_ID;
16:00:50 2155  	 END;
16:00:50 2156  
16:00:50 2157  	 select decode(count(1), 0, GLOBAL_CONSTANTS_V20.FALSE, GLOBAL_CONSTANTS_V20.TRUE) into var_revoke
16:00:50 2158  	 from license l, subscription s, offer_chain oc
16:00:50 2159  	 where
16:00:50 2160  	   l.subscription_id = s.id and
16:00:50 2161  	   s.offer_chain_id = oc.id and
16:00:50 2162  	   l.invoice_id = in_invoice_id and
16:00:50 2163  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V20.TRUE and
16:00:50 2164  	   rownum < 2;
16:00:50 2165  
16:00:50 2166  	 select
16:00:50 2167  	   decode(s.subscription_status_id, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD, 1, 0)
16:00:50 2168  	 into
16:00:50 2169  	   var_subscription_in_grace
16:00:50 2170  	 from license l, subscription s
16:00:50 2171  	 where
16:00:50 2172  	   l.subscription_id = s.id and
16:00:50 2173  	   l.invoice_id = in_invoice_id and
16:00:50 2174  	   rownum < 2;
16:00:50 2175  
16:00:50 2176  	 var_billed := PROCS_INVOICE_V20.IS_INVOICE_PAYING_STARTED(in_invoice_id);
16:00:50 2177  	 var_refund := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 2178  
16:00:50 2179  	 -- Check that transaction for given invoice not started
16:00:50 2180  	 -- if refund enabled calculate and apply chargeback
16:00:50 2181  	 IF (
16:00:50 2182  	     var_billed = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 2183  	   )THEN
16:00:50 2184  	   if (in_refundable = GLOBAL_CONSTANTS_V20.TRUE) then
16:00:50 2185  	     -- If started then we need to calculate refund
16:00:50 2186  	     BEGIN
16:00:50 2187  	       PROCS_INVOICE_V20.CALCULATE_INVOICE_CHARGEBACK(
16:00:50 2188  		 in_invoice_id,
16:00:50 2189  		 var_now,
16:00:50 2190  		 var_chargeback_amount
16:00:50 2191  	       );
16:00:50 2192  	       EXCEPTION
16:00:50 2193  		 WHEN OTHERS THEN
16:00:50 2194  		   EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2195  		   RAISE CAN_NOT_CALCULATE_CHARGEBACK;
16:00:50 2196  	     END;
16:00:50 2197  	     IF var_chargeback_amount > 0 THEN
16:00:50 2198  	       BEGIN
16:00:50 2199  		 PROCS_INVOICE_V20.APPLY_REFUND(
16:00:50 2200  		   in_invoice_id,
16:00:50 2201  		   var_chargeback_amount,
16:00:50 2202  		   in_updated_by,
16:00:50 2203  		   ver_refund_charge_id
16:00:50 2204  		 );
16:00:50 2205  		 EXCEPTION
16:00:50 2206  		   WHEN OTHERS THEN
16:00:50 2207  		     EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2208  		     RAISE CAN_NOT_APPLY_CHARGEBACK;
16:00:50 2209  	       END;
16:00:50 2210  	       var_refund := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 2211  	     END IF;
16:00:50 2212  	   end if;
16:00:50 2213  	 ELSE
16:00:50 2214  
16:00:50 2215  	   FOR f_transaction_to_close IN (
16:00:50 2216  	     SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50 2217  	   )
16:00:50 2218  	   LOOP
16:00:50 2219  	     PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
16:00:50 2220  	       in_transaction_id	=> f_transaction_to_close.ID,
16:00:50 2221  	       in_updated_by		=> in_updated_by,
16:00:50 2222  	       in_transaction_status_id => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
16:00:50 2223  	     );
16:00:50 2224  	   END LOOP;
16:00:50 2225  	   -- Needs to close charges. No refund.
16:00:50 2226  	   FOR f_charge_to_close IN (
16:00:50 2227  	     SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id and CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:50 2228  	   )
16:00:50 2229  	   LOOP
16:00:50 2230  	     PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
16:00:50 2231  	       in_charge_id	   => f_charge_to_close.ID,
16:00:50 2232  	       in_updated_by	   => in_updated_by,
16:00:50 2233  	       in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
16:00:50 2234  	     );
16:00:50 2235  	   END LOOP;
16:00:50 2236  
16:00:50 2237  	   PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
16:00:50 2238  	     in_invoice_id		    => in_invoice_id,
16:00:50 2239  	     in_updated_by		    => in_updated_by,
16:00:50 2240  	     in_invoice_status_id	    => GLOBAL_STATUSES_V20.INVOICE_CLOSED
16:00:50 2241  	   );
16:00:50 2242  
16:00:50 2243  	 END IF;
16:00:50 2244  	 -- update licenses
16:00:50 2245  	 IF(var_revoke = GLOBAL_CONSTANTS_V20.TRUE OR var_chargeback_amount > 0 OR (var_subscription_in_grace = GLOBAL_CONSTANTS_V20.FALSE AND var_billed = GLOBAL_CONSTANTS_V20.FALSE)) THEN
16:00:50 2246  	   FOR f_license_to_cancel IN (
16:00:50 2247  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 2248  	   )
16:00:50 2249  	   LOOP
16:00:50 2250  	     PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 2251  	       in_license_id	     => f_license_to_cancel.ID,
16:00:50 2252  	       in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
16:00:50 2253  	       in_needs_entitlements => GLOBAL_CONSTANTS_V20.TRUE,
16:00:50 2254  	       in_updated_by	     => in_updated_by,
16:00:50 2255  	       in_entitlement_end_date => var_now
16:00:50 2256  	     );
16:00:50 2257  	   END LOOP;
16:00:50 2258  	 ELSE
16:00:50 2259  	   FOR f_license_to_cancel IN (
16:00:50 2260  	     SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
16:00:50 2261  	   )
16:00:50 2262  	   LOOP
16:00:50 2263  	     PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 2264  	       in_license_id	     => f_license_to_cancel.ID,
16:00:50 2265  	       in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
16:00:50 2266  	       in_updated_by	     => in_updated_by
16:00:50 2267  	     );
16:00:50 2268  	   END LOOP;
16:00:50 2269  	 END IF;
16:00:50 2270  
16:00:50 2271  
16:00:50 2272  EXCEPTION
16:00:50 2273  WHEN BAD_INVOICE_ID THEN
16:00:50 2274  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2275  	   SPROC_NAME, 'No such invoice');
16:00:50 2276  WHEN CAN_NOT_CALCULATE_CHARGEBACK THEN
16:00:50 2277  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2278  	   SPROC_NAME, 'Could not calculate invoice refund', EXCEPTION_MESSAGE);
16:00:50 2279  WHEN CAN_NOT_APPLY_CHARGEBACK THEN
16:00:50 2280  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2281  	   SPROC_NAME, 'Could not apply chargeback', EXCEPTION_MESSAGE);
16:00:50 2282  WHEN OTHERS THEN
16:00:50 2283  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2284  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2285  END CANCEL_SUBSCRIPTION_INVOICE;
16:00:50 2286  
16:00:50 2287  /******************************************************************************/
16:00:50 2288  
16:00:50 2289  PROCEDURE FINALIZE_CANCELATION (
16:00:50 2290  /*
16:00:50 2291  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2292  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2293  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 2294  */
16:00:50 2295  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
16:00:50 2296  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:00:50 2297  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:50 2298  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:50 2299  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:50 2300  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:50 2301  	 in_subscription_id    IN NUMBER,
16:00:50 2302  	 in_cancelation_reason IN VARCHAR2,
16:00:50 2303  	 in_cancelation_date   IN DATE,
16:00:50 2304  	 in_note	       IN VARCHAR2,
16:00:50 2305  	 in_agent_id	       IN NUMBER,
16:00:50 2306  	 in_updated_by	       IN VARCHAR2
16:00:50 2307  ) AS
16:00:50 2308  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_CANCELATION';
16:00:50 2309  -- VARIABLES
16:00:50 2310  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
16:00:50 2311  var_sct_id		 SUBSCRIPTION.SCT_ID%TYPE;
16:00:50 2312  var_active_invoices_count NUMBER;
16:00:50 2313  var_license_to_disgrace	 LICENSE.ID%TYPE;
16:00:50 2314  var_now			 DATE := SYSDATE;
16:00:50 2315  -- EXCEPTIONS
16:00:50 2316  BAD_SUBSCRIPTION_ID	   EXCEPTION;
16:00:50 2317  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
16:00:50 2318  BAD_CANCELATION_REASON	   EXCEPTION;
16:00:50 2319  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
16:00:50 2320  ACTIVE_INVOICES_FOUND	   EXCEPTION;
16:00:50 2321  CAN_NOT_CREATE_NOTE	   EXCEPTION;
16:00:50 2322  EXCEPTION_MESSAGE	   VARCHAR2(1024);
16:00:50 2323  BEGIN
16:00:50 2324  
16:00:50 2325  	 -- Get current subscription status
16:00:50 2326  	 BEGIN
16:00:50 2327  	   SELECT
16:00:50 2328  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
16:00:50 2329  	   FROM
16:00:50 2330  	     SUBSCRIPTION
16:00:50 2331  	   WHERE
16:00:50 2332  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2333  	   EXCEPTION
16:00:50 2334  	     WHEN NO_DATA_FOUND THEN
16:00:50 2335  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2336  	 END;
16:00:50 2337  
16:00:50 2338  	 -- Check that subscription reason is correct
16:00:50 2339  	 BEGIN
16:00:50 2340  	   SELECT
16:00:50 2341  	     SUBSCRIPTION_CANCEL_REASON.ID into var_sct_id
16:00:50 2342  	   FROM
16:00:50 2343  	     SUBSCRIPTION_CANCEL_REASON
16:00:50 2344  	   WHERE
16:00:50 2345  	     SUBSCRIPTION_CANCEL_REASON.VALUE LIKE in_cancelation_reason
16:00:50 2346  	     AND ROWNUM <= 1;
16:00:50 2347  	   EXCEPTION
16:00:50 2348  	     WHEN NO_DATA_FOUND THEN
16:00:50 2349  	       RAISE BAD_CANCELATION_REASON;
16:00:50 2350  	 END;
16:00:50 2351  
16:00:50 2352  	 -- Check for invoices with active licenses
16:00:50 2353  	 SELECT
16:00:50 2354  	   COUNT(*) into var_active_invoices_count
16:00:50 2355  	 FROM
16:00:50 2356  	   LICENSE
16:00:50 2357  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:50 2358  	 WHERE
16:00:50 2359  	   LICENSE.LICENSE_STATUS_ID in (GLOBAL_STATUSES_V20.LICENSE_ACTIVE, GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD)
16:00:50 2360  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:00:50 2361  
16:00:50 2362  	 IF var_active_invoices_count > 0 THEN
16:00:50 2363  	   RAISE ACTIVE_INVOICES_FOUND;
16:00:50 2364  	 END IF;
16:00:50 2365  
16:00:50 2366  	 -- Check that subscription is active
16:00:50 2367  	 IF var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE AND
16:00:50 2368  	    var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED AND
16:00:50 2369  	    var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD THEN
16:00:50 2370  	   RAISE BAD_SUBSCRIPTION_STATUS;
16:00:50 2371  	 END IF;
16:00:50 2372  
16:00:50 2373  	 -- Update subscription data
16:00:50 2374  	 BEGIN
16:00:50 2375  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50 2376  	     in_subscription_id        => in_subscription_id,
16:00:50 2377  	     in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_CANCELED,
16:00:50 2378  	     in_cancelation_date       => in_cancelation_date,
16:00:50 2379  	     in_updated_by	       => in_updated_by,
16:00:50 2380  	     in_sct_id		       => var_sct_id
16:00:50 2381  	   );
16:00:50 2382  	   EXCEPTION
16:00:50 2383  	     WHEN OTHERS THEN
16:00:50 2384  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2385  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
16:00:50 2386  	 END;
16:00:50 2387  
16:00:50 2388  	 -- Terminate grace period for licenses in grace [SAR-31]
16:00:50 2389  	 BEGIN
16:00:50 2390  	   SELECT
16:00:50 2391  	     LICENSE.ID into var_license_to_disgrace
16:00:50 2392  	   FROM
16:00:50 2393  	     LICENSE
16:00:50 2394  	   WHERE
16:00:50 2395  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 2396  	     AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
16:00:50 2397  	     AND ROWNUM <= 1
16:00:50 2398  	   ORDER BY
16:00:50 2399  	     CREATE_DATE DESC;
16:00:50 2400  	 EXCEPTION
16:00:50 2401  	   WHEN NO_DATA_FOUND THEN
16:00:50 2402  	     var_license_to_disgrace := NULL;
16:00:50 2403  	 END;
16:00:50 2404  
16:00:50 2405  	 IF var_license_to_disgrace IS NOT NULL THEN
16:00:50 2406  	   PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:50 2407  	     in_license_id	     => var_license_to_disgrace,
16:00:50 2408  	     in_license_status_id    => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
16:00:50 2409  	     in_updated_by	     => in_updated_by
16:00:50 2410  	   );
16:00:50 2411  	 END IF;
16:00:50 2412  
16:00:50 2413  	 -- Annotate subscription
16:00:50 2414  	 IF in_note IS NOT NULL THEN
16:00:50 2415  	   BEGIN
16:00:50 2416  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:50 2417  	       in_subscription_id,
16:00:50 2418  	       in_agent_id,
16:00:50 2419  	       in_note,
16:00:50 2420  	       in_updated_by
16:00:50 2421  	     );
16:00:50 2422  	     EXCEPTION
16:00:50 2423  	      WHEN OTHERS THEN
16:00:50 2424  		EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2425  		RAISE CAN_NOT_CREATE_NOTE;
16:00:50 2426  	   END;
16:00:50 2427  	 END IF;
16:00:50 2428  
16:00:50 2429  EXCEPTION
16:00:50 2430  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2431  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2432  	   SPROC_NAME, 'No such subscription');
16:00:50 2433  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:00:50 2434  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 2435  	   SPROC_NAME, 'Bad current subscription status');
16:00:50 2436  WHEN BAD_CANCELATION_REASON THEN
16:00:50 2437  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 2438  	   SPROC_NAME, 'Bad cancellation reason');
16:00:50 2439  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
16:00:50 2440  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2441  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
16:00:50 2442  WHEN ACTIVE_INVOICES_FOUND THEN
16:00:50 2443  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 2444  	   SPROC_NAME, 'Invoices with active licenses found');
16:00:50 2445  WHEN CAN_NOT_CREATE_NOTE THEN
16:00:50 2446  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2447  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:00:50 2448  --WHEN OTHERS THEN
16:00:50 2449  --  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2450  --    SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2451  END FINALIZE_CANCELATION;
16:00:50 2452  
16:00:50 2453  /******************************************************************************/
16:00:50 2454  
16:00:50 2455  PROCEDURE FINALIZE_FALSE_START (
16:00:50 2456  /*
16:00:50 2457  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2458  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2459  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:50 2460  */
16:00:50 2461  --  in_subscription_id	 IN SUBSCRIPTION.ID%TYPE,
16:00:50 2462  --  in_cancelation_date	 IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:50 2463  --  in_note		 IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:50 2464  --  in_agent_id		 IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:50 2465  --  in_updated_by	 IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:50 2466  	 in_subscription_id    IN NUMBER,
16:00:50 2467  	 in_cancelation_date   IN DATE,
16:00:50 2468  	 in_note	       IN VARCHAR2,
16:00:50 2469  	 in_agent_id	       IN NUMBER,
16:00:50 2470  	 in_updated_by	       IN VARCHAR2
16:00:50 2471  ) AS
16:00:50 2472  SPROC_NAME CONSTANT VARCHAR2(20) := 'FINALIZE_FALSE_START';
16:00:50 2473  FALSE_START_REASON CONSTANT NUMBER := 41;
16:00:50 2474  -- VARIABLES
16:00:50 2475  var_current_subscr_status SUBSCRIPTION.SUBSCRIPTION_STATUS_ID%TYPE;
16:00:50 2476  var_active_invoices_count NUMBER;
16:00:50 2477  -- EXCEPTIONS
16:00:50 2478  BAD_SUBSCRIPTION_ID	   EXCEPTION;
16:00:50 2479  BAD_SUBSCRIPTION_STATUS	   EXCEPTION;
16:00:50 2480  CAN_NOT_UPDATE_SUBSCRIPTION EXCEPTION;
16:00:50 2481  ACTIVE_INVOICES_FOUND	   EXCEPTION;
16:00:50 2482  CAN_NOT_CREATE_NOTE	   EXCEPTION;
16:00:50 2483  EXCEPTION_MESSAGE	   VARCHAR2(1024);
16:00:50 2484  BEGIN
16:00:50 2485  
16:00:50 2486  	 -- Get current subscription status
16:00:50 2487  	 BEGIN
16:00:50 2488  	   SELECT
16:00:50 2489  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID into var_current_subscr_status
16:00:50 2490  	   FROM
16:00:50 2491  	     SUBSCRIPTION
16:00:50 2492  	   WHERE
16:00:50 2493  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2494  	   EXCEPTION
16:00:50 2495  	     WHEN NO_DATA_FOUND THEN
16:00:50 2496  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2497  	 END;
16:00:50 2498  
16:00:50 2499  	 -- Check for invoices with active licenses
16:00:50 2500  	 SELECT
16:00:50 2501  	   COUNT(*) into var_active_invoices_count
16:00:50 2502  	 FROM
16:00:50 2503  	   LICENSE
16:00:50 2504  	   INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:50 2505  	 WHERE
16:00:50 2506  	   LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 2507  	   AND LICENSE.SUBSCRIPTION_ID = in_subscription_id;
16:00:50 2508  
16:00:50 2509  	 IF var_active_invoices_count > 0 THEN
16:00:50 2510  	   RAISE ACTIVE_INVOICES_FOUND;
16:00:50 2511  	 END IF;
16:00:50 2512  
16:00:50 2513  	 -- Check that subscription is active
16:00:50 2514  	 IF var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 2515  	    AND var_current_subscr_status != GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED THEN
16:00:50 2516  	   RAISE BAD_SUBSCRIPTION_STATUS;
16:00:50 2517  	 END IF;
16:00:50 2518  
16:00:50 2519  	 -- Update subscription data
16:00:50 2520  	 BEGIN
16:00:50 2521  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:50 2522  	     in_subscription_id        => in_subscription_id,
16:00:50 2523  	     in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_FALSE_START,
16:00:50 2524  	     in_cancelation_date       => in_cancelation_date,
16:00:50 2525  	     in_updated_by	       => in_updated_by,
16:00:50 2526  	     in_sct_id		       => FALSE_START_REASON
16:00:50 2527  	   );
16:00:50 2528  	   EXCEPTION
16:00:50 2529  	     WHEN OTHERS THEN
16:00:50 2530  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2531  	       RAISE CAN_NOT_UPDATE_SUBSCRIPTION;
16:00:50 2532  	 END;
16:00:50 2533  
16:00:50 2534  	 -- Annotate subscription
16:00:50 2535  	 IF in_note IS NOT NULL THEN
16:00:50 2536  	   BEGIN
16:00:50 2537  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:50 2538  	       in_subscription_id,
16:00:50 2539  	       in_agent_id,
16:00:50 2540  	       in_note,
16:00:50 2541  	       in_updated_by
16:00:50 2542  	     );
16:00:50 2543  	     EXCEPTION
16:00:50 2544  	      WHEN OTHERS THEN
16:00:50 2545  		EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2546  		RAISE CAN_NOT_CREATE_NOTE;
16:00:50 2547  	   END;
16:00:50 2548  	 END IF;
16:00:50 2549  
16:00:50 2550  EXCEPTION
16:00:50 2551  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2552  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2553  	   SPROC_NAME, 'No such subscription');
16:00:50 2554  WHEN BAD_SUBSCRIPTION_STATUS THEN
16:00:50 2555  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 2556  	   SPROC_NAME, 'Bad current subscription status');
16:00:50 2557  WHEN CAN_NOT_UPDATE_SUBSCRIPTION THEN
16:00:50 2558  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2559  	   SPROC_NAME, 'Could not update subscription data', EXCEPTION_MESSAGE);
16:00:50 2560  WHEN ACTIVE_INVOICES_FOUND THEN
16:00:50 2561  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:50 2562  	   SPROC_NAME, 'Invoices with active licenses found');
16:00:50 2563  WHEN CAN_NOT_CREATE_NOTE THEN
16:00:50 2564  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2565  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:00:50 2566  WHEN OTHERS THEN
16:00:50 2567  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2568  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2569  END FINALIZE_FALSE_START;
16:00:50 2570  
16:00:50 2571  /******************************************************************************/
16:00:50 2572  
16:00:50 2573  FUNCTION IS_SUBSCRIPTION_CANCELABLE (
16:00:50 2574  	 in_subscription_id IN NUMBER
16:00:50 2575  ) RETURN NUMBER AS
16:00:50 2576  SPROC_NAME CONSTANT VARCHAR2(26) := 'IS_SUBSCRIPTION_CANCELABLE';
16:00:50 2577  -- VARIABLES
16:00:50 2578  var_is_offer_chain_cancelable NUMBER;
16:00:50 2579  --64603
16:00:50 2580  var_end_date date;
16:00:50 2581  today_date date := current_date;
16:00:50 2582  offer_id number;
16:00:50 2583  -- EXCEPTIONS
16:00:50 2584  COULD_NOT_CHECK	   EXCEPTION;
16:00:50 2585  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2586  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:00:50 2587  BEGIN
16:00:50 2588  
16:00:50 2589  	 BEGIN
16:00:50 2590  	   -- find offer_chain_id for given in_subscription_id
16:00:50 2591  	   SELECT OFFER_CHAIN_ID into offer_id
16:00:50 2592  	   FROM SUBSCRIPTION
16:00:50 2593  	   WHERE ID = in_subscription_id;
16:00:50 2594  	   EXCEPTION
16:00:50 2595  	     WHEN NO_DATA_FOUND THEN
16:00:50 2596  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2597  	     WHEN OTHERS THEN
16:00:50 2598  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:50 2599  	       RAISE COULD_NOT_CHECK;
16:00:50 2600  	 END;
16:00:50 2601  
16:00:50 2602  	 -- find if it was redeemed from a gift certificate
16:00:50 2603  	 BEGIN
16:00:50 2604  	   SELECT l.end_date INTO var_end_date
16:00:50 2605  	   FROM LICENSE l, GIFT_CERTIFICATE g
16:00:50 2606  	   WHERE l.invoice_id = g.finalized_invoice_id
16:00:50 2607  	   AND l.subscription_id = in_subscription_id;
16:00:50 2608  
16:00:50 2609  	   -- if the license end_date is bigger than today, we are in the
16:00:50 2610  	   -- first period, so we cannot cancel; otherwise can cancel
16:00:50 2611  	   IF var_end_date > today_date THEN
16:00:50 2612  	       RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 2613  	   ELSE
16:00:50 2614  	       RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 2615  	   END IF;
16:00:50 2616  
16:00:50 2617  	   EXCEPTION
16:00:50 2618  	       -- not coming from a gift certificate,
16:00:50 2619  	       -- use old logic
16:00:50 2620  	       WHEN NO_DATA_FOUND THEN
16:00:50 2621  		   SELECT
16:00:50 2622  		       PROCS_OFFER_CHAIN_V20.IS_OFFER_CHAIN_CANCELABLE(offer_id)
16:00:50 2623  		       INTO var_is_offer_chain_cancelable
16:00:50 2624  		   FROM DUAL;
16:00:50 2625  		   RETURN var_is_offer_chain_cancelable;
16:00:50 2626  	 END;
16:00:50 2627  
16:00:50 2628  EXCEPTION
16:00:50 2629  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2630  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2631  	   SPROC_NAME, 'No such subscription');
16:00:50 2632  WHEN COULD_NOT_CHECK THEN
16:00:50 2633  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:50 2634  	   SPROC_NAME, 'Could not check if offer chain calcelable', EXCEPTION_MESSAGE);
16:00:50 2635  WHEN OTHERS THEN
16:00:50 2636  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2637  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2638  
16:00:50 2639  END IS_SUBSCRIPTION_CANCELABLE;
16:00:50 2640  /******************************************************************************/
16:00:50 2641  
16:00:50 2642  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:00:50 2643  /*
16:00:50 2644  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2645  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2646  */
16:00:50 2647  	 in_subscription_id IN NUMBER,
16:00:50 2648  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 2649  ) AS
16:00:50 2650  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_PROD_OFFERRINGS';
16:00:50 2651  -- VARIABLES
16:00:50 2652  var_offer NUMBER;
16:00:50 2653  -- EXCEPTIONS
16:00:50 2654  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2655  BEGIN
16:00:50 2656  
16:00:50 2657  	 OPEN out_result_set FOR
16:00:50 2658  	 SELECT DISTINCT
16:00:50 2659  	   PRODUCT_OFFERING.ID,
16:00:50 2660  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 2661  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 2662  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 2663  	   PRODUCT_OFFERING.QUANTITY,
16:00:50 2664  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:50 2665  	   PRODUCT_OFFERING.CREATED_BY,
16:00:50 2666  	   CAPABILITY.ID CAP_ID,
16:00:50 2667  	   CAPABILITY.CODE CAP_CODE,
16:00:50 2668  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 2669  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 2670  	 FROM
16:00:50 2671  	   OFFER_PRODUCT_OFFERING
16:00:50 2672  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 2673  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 2674  	 WHERE
16:00:50 2675  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:50 2676  	     SELECT
16:00:50 2677  	       LICENSE.OFFER_ID
16:00:50 2678  	     FROM
16:00:50 2679  	       SUBSCRIPTION
16:00:50 2680  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE
16:00:50 2681  	     WHERE
16:00:50 2682  	       SUBSCRIPTION.ID = in_subscription_id
16:00:50 2683  	   );
16:00:50 2684  
16:00:50 2685  EXCEPTION
16:00:50 2686  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2687  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2688  	   SPROC_NAME, 'No such subscription');
16:00:50 2689  WHEN OTHERS THEN
16:00:50 2690  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2691  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2692  END GET_SUBSCR_PROD_OFFERRINGS;
16:00:50 2693  
16:00:50 2694  
16:00:50 2695  PROCEDURE RETRIEVE_SUB_PROD_OFFER (
16:00:50 2696  /*
16:00:50 2697  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2698  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2699  */
16:00:50 2700  	 in_subscription_id IN NUMBER,
16:00:50 2701  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 2702  ) AS
16:00:50 2703  SPROC_NAME CONSTANT VARCHAR2(27) := 'RETRIEVE_SUB_PROD_OFFER';
16:00:50 2704  -- VARIABLES
16:00:50 2705  var_offer NUMBER;
16:00:50 2706  -- EXCEPTIONS
16:00:50 2707  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2708  BEGIN
16:00:50 2709  
16:00:50 2710  	 OPEN out_result_set FOR
16:00:50 2711  	 SELECT DISTINCT
16:00:50 2712  	   PRODUCT_OFFERING.ID,
16:00:50 2713  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:50 2714  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:50 2715  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:50 2716  	   PRODUCT_OFFERING.QUANTITY,
16:00:50 2717  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:50 2718  	   PRODUCT_OFFERING.CREATED_BY,
16:00:50 2719  	   CAPABILITY.ID CAP_ID,
16:00:50 2720  	   CAPABILITY.CODE CAP_CODE,
16:00:50 2721  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:50 2722  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:50 2723  	 FROM
16:00:50 2724  	   OFFER_PRODUCT_OFFERING
16:00:50 2725  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:50 2726  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:50 2727  	 WHERE
16:00:50 2728  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:50 2729  	     SELECT
16:00:50 2730  	       LICENSE.OFFER_ID
16:00:50 2731  	     FROM
16:00:50 2732  	       SUBSCRIPTION
16:00:50 2733  	       JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:50 2734  	     WHERE
16:00:50 2735  	       SUBSCRIPTION.ID = in_subscription_id
16:00:50 2736  	   );
16:00:50 2737  
16:00:50 2738  EXCEPTION
16:00:50 2739  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2740  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2741  	   SPROC_NAME, 'No such subscription');
16:00:50 2742  WHEN OTHERS THEN
16:00:50 2743  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2744  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2745  END RETRIEVE_SUB_PROD_OFFER;
16:00:50 2746  /******************************************************************************/
16:00:50 2747  
16:00:50 2748  
16:00:50 2749  
16:00:50 2750  
16:00:50 2751  PROCEDURE GET_SUBSCR_LIC_OFFER(
16:00:50 2752  /*
16:00:50 2753  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2754  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2755  */
16:00:50 2756  	 in_subscription_id IN NUMBER,
16:00:50 2757  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 2758  ) AS
16:00:50 2759  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_SUBSCR_LIC_OFFER';
16:00:50 2760  -- VARIABLES
16:00:50 2761  var_offer_chain NUMBER;
16:00:50 2762  -- EXCEPTIONS
16:00:50 2763  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2764  BEGIN
16:00:50 2765  	 BEGIN
16:00:50 2766  	   SELECT
16:00:50 2767  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain
16:00:50 2768  	   FROM
16:00:50 2769  	     SUBSCRIPTION
16:00:50 2770  	   WHERE
16:00:50 2771  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2772  	   EXCEPTION
16:00:50 2773  	     WHEN NO_DATA_FOUND THEN
16:00:50 2774  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2775  	 END;
16:00:50 2776  
16:00:50 2777  	 OPEN out_result_set FOR
16:00:50 2778  	 SELECT DISTINCT
16:00:50 2779  	   po.ID po_id,
16:00:50 2780  	   po.PRODUCT_ID po_product_id,
16:00:50 2781  	   po.TAX_CATEGORY_ID po_tax_category_id,
16:00:50 2782  	   po.UNIT_PRICE po_unit_price,
16:00:50 2783  	   po.QUANTITY po_quantity,
16:00:50 2784  	   po.CREATE_DATE po_create_date,
16:00:50 2785  	   po.CREATED_BY po_created_by,
16:00:50 2786  	   l.ID l_id,
16:00:50 2787  	   l.license_status_id l_license_status_id,
16:00:50 2788  	   l.start_date l_start_date,
16:00:50 2789  	   l.offer_id l_offer_id,
16:00:50 2790  	   l.subscription_id l_subscription_id,
16:00:50 2791  	   l.invoice_id l_invoice_id,
16:00:50 2792  	   l.end_date l_end_date,
16:00:50 2793  	   l.entitlement_end_date l_entitlement_end_date,
16:00:50 2794  	   l.create_date l_create_date,
16:00:50 2795  	   l.created_by l_created_by,
16:00:50 2796  	   l.is_extension l_is_extension,
16:00:50 2797  	   l.current_offer_index l_current_offer_index,
16:00:50 2798  	   l.current_offer_recurr_num l_current_offer_recurr_num,
16:00:50 2799  	   l.needs_entitlements l_needs_entitlements
16:00:50 2800  	 FROM
16:00:50 2801  	   OFFER_PRODUCT_OFFERING opo,
16:00:50 2802  	   PRODUCT_OFFERING po,
16:00:50 2803  	   SUBSCRIPTION s,
16:00:50 2804  	   LICENSE l
16:00:50 2805  	 WHERE
16:00:50 2806  	   opo.product_offering_id = po.id
16:00:50 2807  	   and po.id = l.offer_id
16:00:50 2808  	   and l.subscription_id = s.id
16:00:50 2809  	   and l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:50 2810  	   and s.id = in_subscription_id
16:00:50 2811  	 ;
16:00:50 2812  EXCEPTION
16:00:50 2813  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2814  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2815  	   SPROC_NAME, 'No such subscription');
16:00:50 2816  WHEN OTHERS THEN
16:00:50 2817  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2818  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2819  END GET_SUBSCR_LIC_OFFER;
16:00:50 2820  
16:00:50 2821  /******************************************************************************/
16:00:50 2822  
16:00:50 2823  PROCEDURE ARE_REFUNDS_PENDING_FOR_SUBSCR (
16:00:50 2824  /*
16:00:50 2825  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2826  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2827  */
16:00:50 2828  	 in_subscription_id IN NUMBER,
16:00:50 2829  	 out_result	    OUT NUMBER
16:00:50 2830  ) AS
16:00:50 2831  SPROC_NAME CONSTANT VARCHAR2(30) := 'ARE_REFUNDS_PENDING_FOR_SUBSCR';
16:00:50 2832  -- VARIABLES
16:00:50 2833  temp_subscription_id NUMBER;
16:00:50 2834  var_local_result     NUMBER;
16:00:50 2835  -- EXCEPTIONS
16:00:50 2836  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:50 2837  BEGIN
16:00:50 2838  
16:00:50 2839  	 -- Check that subscription exists
16:00:50 2840  	 BEGIN
16:00:50 2841  	   SELECT
16:00:50 2842  	     SUBSCRIPTION.ID into temp_subscription_id
16:00:50 2843  	   FROM
16:00:50 2844  	     SUBSCRIPTION
16:00:50 2845  	   WHERE
16:00:50 2846  	     SUBSCRIPTION.ID = in_subscription_id;
16:00:50 2847  	   EXCEPTION
16:00:50 2848  	     WHEN NO_DATA_FOUND THEN
16:00:50 2849  	       RAISE BAD_SUBSCRIPTION_ID;
16:00:50 2850  	 END;
16:00:50 2851  
16:00:50 2852  	 var_local_result := NULL;
16:00:50 2853  
16:00:50 2854  	 -- Check charges for each invoice associated with gived subscription
16:00:50 2855  	 FOR f_invoice IN (
16:00:50 2856  	   SELECT DISTINCT
16:00:50 2857  	     LICENSE.INVOICE_ID as "ID"
16:00:50 2858  	   FROM
16:00:50 2859  	     LICENSE
16:00:50 2860  	   WHERE
16:00:50 2861  	     LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:50 2862  	     AND LICENSE.LICENSE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.LICENSE_ACTIVE FROM DUAL )
16:00:50 2863  	 )
16:00:50 2864  	 LOOP
16:00:50 2865  
16:00:50 2866  	   -- Check each charge in invoice
16:00:50 2867  	   FOR f_charge IN (
16:00:50 2868  	     SELECT
16:00:50 2869  	       CHARGE.ID,
16:00:50 2870  	       CHARGE.CHARGE_STATUS_ID,
16:00:50 2871  	       CHARGE.CHARGE_AMOUNT
16:00:50 2872  	     FROM
16:00:50 2873  	       CHARGE
16:00:50 2874  	     WHERE
16:00:50 2875  	       CHARGE.INVOICE_ID = f_invoice.ID
16:00:50 2876  	   )
16:00:50 2877  	   LOOP
16:00:50 2878  
16:00:50 2879  	     -- Charge amount < 0     => it is a refund
16:00:50 2880  	     -- Charge status is OPEN => means that it is not processed yet
16:00:50 2881  	     IF f_charge.CHARGE_AMOUNT < 0
16:00:50 2882  		AND f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED THEN
16:00:50 2883  	       var_local_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 2884  	     END IF;
16:00:50 2885  
16:00:50 2886  	   END LOOP;
16:00:50 2887  
16:00:50 2888  	 END LOOP;
16:00:50 2889  
16:00:50 2890  	 IF var_local_result IS NULL THEN
16:00:50 2891  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
16:00:50 2892  	 ELSE
16:00:50 2893  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:50 2894  	 END IF;
16:00:50 2895  
16:00:50 2896  EXCEPTION
16:00:50 2897  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:50 2898  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2899  	   SPROC_NAME, 'No such transaction id');
16:00:50 2900  WHEN OTHERS THEN
16:00:50 2901  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2902  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 2903  END ARE_REFUNDS_PENDING_FOR_SUBSCR;
16:00:50 2904  
16:00:50 2905  PROCEDURE GET_EXISTING_SUBSCR_NUMBER (
16:00:50 2906  /*
16:00:50 2907  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2908  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2909  */
16:00:50 2910  	 in_group_id	    IN NUMBER,
16:00:50 2911  	 in_offer_chain_id  IN NUMBER,
16:00:50 2912  	 out_result	    OUT NUMBER
16:00:50 2913  ) AS
16:00:50 2914  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_EXISTING_SUBSCR_NUMBER';
16:00:50 2915  -- VARIABLES
16:00:50 2916  temp_acct_id	    NUMBER;
16:00:50 2917  temp_oc_id	    NUMBER;
16:00:50 2918  -- EXCEPTIONS
16:00:50 2919  BAD_GROUP_ID EXCEPTION;
16:00:50 2920  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 2921  BEGIN
16:00:50 2922  	 -- Check that group id exists
16:00:50 2923  	 BEGIN
16:00:50 2924  	   SELECT
16:00:50 2925  	     ACCOUNT.ID into temp_acct_id
16:00:50 2926  	   FROM
16:00:50 2927  	     ACCOUNT
16:00:50 2928  	   WHERE
16:00:50 2929  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:50 2930  	   EXCEPTION
16:00:50 2931  	     WHEN NO_DATA_FOUND THEN
16:00:50 2932  	       RAISE BAD_GROUP_ID;
16:00:50 2933  	 END;
16:00:50 2934  	 -- Check that offer chain id exists
16:00:50 2935  	 BEGIN
16:00:50 2936  	   SELECT
16:00:50 2937  	     OFFER_CHAIN.ID into temp_oc_id
16:00:50 2938  	   FROM
16:00:50 2939  	     OFFER_CHAIN
16:00:50 2940  	   WHERE
16:00:50 2941  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 2942  	   EXCEPTION
16:00:50 2943  	     WHEN NO_DATA_FOUND THEN
16:00:50 2944  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 2945  	 END;
16:00:50 2946  	 SELECT
16:00:50 2947  	   COUNT(*) into out_result
16:00:50 2948  	 FROM
16:00:50 2949  	   SUBSCRIPTION
16:00:50 2950  	     INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:50 2951  	 WHERE
16:00:50 2952  	   ACCOUNT.GROUP_ID = in_group_id
16:00:50 2953  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 2954  	   AND (
16:00:50 2955  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 2956  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 2957  
16:00:50 2958  EXCEPTION
16:00:50 2959  WHEN BAD_GROUP_ID THEN
16:00:50 2960  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2961  	   SPROC_NAME, 'No such transaction id');
16:00:50 2962  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 2963  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 2964  	   SPROC_NAME, 'No such offer chain id');
16:00:50 2965  WHEN OTHERS THEN
16:00:50 2966  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 2967  	   sproc_name, 'Unknown error', sqlerrm);
16:00:50 2968  END GET_EXISTING_SUBSCR_NUMBER;
16:00:50 2969  
16:00:50 2970  PROCEDURE GET_EXISTING_SUBSCR_IDS (
16:00:50 2971  /*
16:00:50 2972  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 2973  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 2974  */
16:00:50 2975  	 in_group_id	    IN NUMBER,
16:00:50 2976  	 in_offer_chain_id  IN NUMBER,
16:00:50 2977  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 2978  ) AS
16:00:50 2979  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_EXISTING_SUBSCR_NUMBER';
16:00:50 2980  -- VARIABLES
16:00:50 2981  temp_acct_id	    NUMBER;
16:00:50 2982  temp_oc_id	    NUMBER;
16:00:50 2983  -- EXCEPTIONS
16:00:50 2984  BAD_GROUP_ID EXCEPTION;
16:00:50 2985  BAD_OFFER_CHAIN_ID EXCEPTION;
16:00:50 2986  BEGIN
16:00:50 2987  
16:00:50 2988  	 -- Check that group id exists
16:00:50 2989  	 BEGIN
16:00:50 2990  	   SELECT
16:00:50 2991  	     ACCOUNT.ID into temp_acct_id
16:00:50 2992  	   FROM
16:00:50 2993  	     ACCOUNT
16:00:50 2994  	   WHERE
16:00:50 2995  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:50 2996  	   EXCEPTION
16:00:50 2997  	     WHEN NO_DATA_FOUND THEN
16:00:50 2998  	       RAISE BAD_GROUP_ID;
16:00:50 2999  	 END;
16:00:50 3000  	 -- Check that offer chain id exists
16:00:50 3001  	 BEGIN
16:00:50 3002  	   SELECT
16:00:50 3003  	     OFFER_CHAIN.ID into temp_oc_id
16:00:50 3004  	   FROM
16:00:50 3005  	     OFFER_CHAIN
16:00:50 3006  	   WHERE
16:00:50 3007  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:50 3008  	   EXCEPTION
16:00:50 3009  	     WHEN NO_DATA_FOUND THEN
16:00:50 3010  	       RAISE BAD_OFFER_CHAIN_ID;
16:00:50 3011  	 END;
16:00:50 3012  
16:00:50 3013  	 OPEN out_result_set FOR
16:00:50 3014  	 SELECT
16:00:50 3015  	   SUBSCRIPTION.ID
16:00:50 3016  	 FROM
16:00:50 3017  	   SUBSCRIPTION
16:00:50 3018  	   INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:50 3019  	 WHERE
16:00:50 3020  	   ACCOUNT.GROUP_ID = in_group_id
16:00:50 3021  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = in_offer_chain_id
16:00:50 3022  	   AND (
16:00:50 3023  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:50 3024  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 3025  
16:00:50 3026  EXCEPTION
16:00:50 3027  WHEN BAD_GROUP_ID THEN
16:00:50 3028  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 3029  	   SPROC_NAME, 'No such transaction id');
16:00:50 3030  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:50 3031  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 3032  	   SPROC_NAME, 'No such offer chain id');
16:00:50 3033  WHEN OTHERS THEN
16:00:50 3034  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 3035  	   sproc_name, 'Unknown error', sqlerrm);
16:00:50 3036  END GET_EXISTING_SUBSCR_IDS;
16:00:50 3037  
16:00:50 3038  PROCEDURE ADD_META_DATA (
16:00:50 3039  /*
16:00:50 3040  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:50 3041  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 3042  */
16:00:50 3043  	 in_subscription_id IN NUMBER,
16:00:50 3044  	 in_name	    IN VARCHAR2,
16:00:50 3045  	 in_value	    IN VARCHAR2,
16:00:50 3046  	 in_created_by	    IN VARCHAR2
16:00:50 3047  ) AS
16:00:50 3048  SPROC_NAME CONSTANT VARCHAR2(13) := 'ADD_META_DATA';
16:00:50 3049  BEGIN
16:00:50 3050  
16:00:50 3051  	 INSERT INTO SUBSCRIPTION_META_DATA (
16:00:50 3052  	   ID,
16:00:50 3053  	   SUBSCRIPTION_ID,
16:00:50 3054  	   NAME,
16:00:50 3055  	   VALUE,
16:00:50 3056  	   CREATE_DATE,
16:00:50 3057  	   CREATED_BY
16:00:50 3058  	 ) VALUES (
16:00:50 3059  	   SUBMD_ID_SEQ.nextVal,
16:00:50 3060  	   in_subscription_id,
16:00:50 3061  	   in_name,
16:00:50 3062  	   in_value,
16:00:50 3063  	   sysdate,
16:00:50 3064  	   in_created_by
16:00:50 3065  	 );
16:00:50 3066  
16:00:50 3067  EXCEPTION
16:00:50 3068  WHEN OTHERS THEN
16:00:50 3069  	 IF SQLCODE = -2291 THEN
16:00:50 3070  	   PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:50 3071  	     SPROC_NAME, 'No such subscription');
16:00:50 3072  	 ELSE
16:00:50 3073  	   PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 3074  	     SPROC_NAME, 'Unknown error', sqlerrm);
16:00:50 3075  	 END IF;
16:00:50 3076  END ADD_META_DATA;
16:00:50 3077  
16:00:50 3078  /******************************************************************************/
16:00:50 3079  
16:00:50 3080  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:00:50 3081  /*
16:00:50 3082  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
16:00:50 3083  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 3084  */
16:00:50 3085  	 in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:00:50 3086  	 out_result_set       OUT SYS_REFCURSOR
16:00:50 3087  ) AS
16:00:50 3088  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCRIPTIONS_META_DATA';
16:00:50 3089  -- Exceptions
16:00:50 3090  SUBSCRIPTION_IDS_IS_NULL EXCEPTION;
16:00:50 3091  BEGIN
16:00:50 3092  
16:00:50 3093  	 IF in_subscriptions_ids IS NULL THEN
16:00:50 3094  	   RAISE SUBSCRIPTION_IDS_IS_NULL;
16:00:50 3095  	 END IF;
16:00:50 3096  
16:00:50 3097  	 OPEN out_result_set FOR
16:00:50 3098  	 SELECT
16:00:50 3099  	   SMD.SUBSCRIPTION_ID,
16:00:50 3100  	   SMD.NAME,
16:00:50 3101  	   SMD.VALUE
16:00:50 3102  	 FROM
16:00:50 3103  	   SUBSCRIPTION_META_DATA SMD
16:00:50 3104  	 WHERE
16:00:50 3105  	   SMD.SUBSCRIPTION_ID IN (SELECT * FROM TABLE(in_subscriptions_ids));
16:00:50 3106  
16:00:50 3107  EXCEPTION
16:00:50 3108  WHEN SUBSCRIPTION_IDS_IS_NULL THEN
16:00:50 3109  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:50 3110  	   SPROC_NAME, 'Bad subscription ids parameter');
16:00:50 3111  WHEN OTHERS THEN
16:00:50 3112  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 3113  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:50 3114  END GET_SUBSCRIPTIONS_META_DATA;
16:00:50 3115  
16:00:50 3116  PROCEDURE GET_SUBS_BY_TRNS_ORDER_ID (
16:00:50 3117  /*
16:00:50 3118  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 3119  */
16:00:50 3120  	 in_order_id	    IN TRANSACTION.ORDER_ID%TYPE,
16:00:50 3121  	 out_result_set     OUT SYS_REFCURSOR
16:00:50 3122  ) AS
16:00:50 3123  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_SUBS_BY_TRNS_ORDER_ID';
16:00:50 3124  BEGIN
16:00:50 3125  	 OPEN out_result_set FOR
16:00:50 3126  	 SELECT subscription.id FROM
16:00:50 3127  	   subscription
16:00:50 3128  	 INNER JOIN license ON license.subscription_id = subscription.id
16:00:50 3129  	 INNER JOIN invoice ON invoice.id = license.invoice_id
16:00:50 3130  	 INNER JOIN charge ON invoice.id = charge.invoice_id
16:00:50 3131  	 INNER JOIN transaction ON charge.transaction_id = transaction.id
16:00:50 3132  	 WHERE transaction.order_id = in_order_id;
16:00:50 3133  EXCEPTION
16:00:50 3134  WHEN OTHERS THEN
16:00:50 3135  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 3136  	   SPROC_NAME, 'Unknown error', sqlerrm);
16:00:50 3137  END GET_SUBS_BY_TRNS_ORDER_ID;
16:00:50 3138  
16:00:50 3139  PROCEDURE GET_OPEN_CHARGES_BY_SUBID
16:00:50 3140  	(
16:00:50 3141  /*
16:00:50 3142  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:50 3143  */
16:00:50 3144  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:50 3145  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 3146  )
16:00:50 3147  AS
16:00:50 3148  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_OPEN_CHARGES_BY_SUBID';
16:00:50 3149  BEGIN
16:00:50 3150  	 OPEN out_result_set FOR
16:00:50 3151  	 SELECT
16:00:50 3152  	   c.ID,
16:00:50 3153  	   c.TRANSACTION_ID,
16:00:50 3154  	   c.INSTRUMENT_ID,
16:00:50 3155  	   c.INSTRUMENT_TYPE_ID,
16:00:50 3156  	   c.CHARGE_AMOUNT,
16:00:50 3157  	   c.CREATE_DATE,
16:00:50 3158  	   c.CREATED_BY,
16:00:50 3159  	   c.INVOICE_ID
16:00:50 3160  	  FROM
16:00:50 3161  	   subscription s,
16:00:50 3162  	   license l,
16:00:50 3163  	   charge c
16:00:50 3164  	 WHERE
16:00:50 3165  	   s.id = l.subscription_id and
16:00:50 3166  	   l.invoice_id = c.invoice_id and
16:00:50 3167  	   c.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED and
16:00:50 3168  	   exists (
16:00:50 3169  	     select null
16:00:50 3170  	     from transaction t
16:00:50 3171  	     where
16:00:50 3172  	       t.id = c.transaction_id
16:00:50 3173  	   ) and
16:00:50 3174  	   s.id = in_subscription_id;
16:00:50 3175  EXCEPTION
16:00:50 3176  WHEN OTHERS THEN
16:00:50 3177  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:50 3178  	   SPROC_NAME, 'Unknown error', sqlerrm);
16:00:50 3179  END GET_OPEN_CHARGES_BY_SUBID;
16:00:50 3180  
16:00:50 3181  FUNCTION GET_GIFT_CERT_ID_BY_SUB_ID (
16:00:50 3182  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:00:50 3183  ) RETURN NUMBER
16:00:50 3184  AS
16:00:50 3185  var_gift_certificate_id NUMBER;
16:00:50 3186  BEGIN
16:00:50 3187  	     SELECT id INTO var_gift_certificate_id
16:00:50 3188  	     FROM
16:00:50 3189  	       gift_certificate gc
16:00:50 3190  	     WHERE
16:00:50 3191  	       gc.finalized_invoice_id in (
16:00:50 3192  		 SELECT invoice_id
16:00:50 3193  		 FROM (
16:00:50 3194  		   SELECT l.invoice_id
16:00:50 3195  		   FROM
16:00:50 3196  		     license l
16:00:50 3197  		   WHERE
16:00:50 3198  		     l.subscription_id = in_subscription_id
16:00:50 3199  		   ORDER BY l.create_date asc
16:00:50 3200  		 )
16:00:50 3201  	       )
16:00:50 3202  	       and rownum <= 1;
16:00:50 3203  	     return var_gift_certificate_id;
16:00:50 3204  END GET_GIFT_CERT_ID_BY_SUB_ID;
16:00:50 3205  
16:00:50 3206  FUNCTION GET_GIFT_CERT_CODE_BY_SUB_ID (
16:00:50 3207  	 in_subscription_id IN SUBSCRIPTION.ID%TYPE
16:00:50 3208  ) RETURN VARCHAR2
16:00:50 3209  AS
16:00:50 3210  var_gift_certificate_code VARCHAR2(255 BYTE);
16:00:50 3211  BEGIN
16:00:50 3212  	     SELECT code INTO var_gift_certificate_code
16:00:50 3213  	     FROM
16:00:50 3214  	       gift_certificate gc
16:00:50 3215  	     WHERE
16:00:50 3216  	       gc.finalized_invoice_id in (
16:00:50 3217  		 SELECT invoice_id
16:00:50 3218  		 FROM (
16:00:50 3219  		   SELECT l.invoice_id
16:00:50 3220  		   FROM
16:00:50 3221  		     license l
16:00:50 3222  		   WHERE
16:00:50 3223  		     l.subscription_id = in_subscription_id
16:00:50 3224  		 )
16:00:50 3225  	       )
16:00:50 3226  	       and rownum <= 1;
16:00:50 3227  	     return var_gift_certificate_code;
16:00:50 3228  END GET_GIFT_CERT_CODE_BY_SUB_ID;
16:00:50 3229  
16:00:50 3230  PROCEDURE GET_ACTIVE_MEU_SUBS (
16:00:50 3231  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 3232  )
16:00:50 3233  AS
16:00:50 3234  SPROC_NAME     CONSTANT VARCHAR2(19) := 'GET_ACTIVE_MEU_SUBS';
16:00:50 3235  BEGIN
16:00:50 3236  	 OPEN out_result_set FOR
16:00:50 3237  	       SELECT
16:00:50 3238  		   s.id,
16:00:50 3239  		   s.instrument_type_id,
16:00:50 3240  		   s.instrument_id,
16:00:50 3241  		   a.group_id,
16:00:50 3242  		   s.offer_chain_id
16:00:50 3243  	       FROM
16:00:50 3244  		   core_owner.subscription s,
16:00:50 3245  		   core_owner.account a
16:00:50 3246  	       WHERE
16:00:50 3247  		   a.id = s.account_id AND(
16:00:50 3248  		       s.offer_chain_id = 1745992781 OR
16:00:50 3249  		       s.offer_chain_id = 3902149773 OR
16:00:50 3250  		       s.offer_chain_id = 2240201337) AND
16:00:50 3251  		   NOT EXISTS
16:00:50 3252  		   (
16:00:50 3253  		       SELECT
16:00:50 3254  			   1
16:00:50 3255  		       FROM
16:00:50 3256  			   core_owner.subscription ss
16:00:50 3257  		       WHERE
16:00:50 3258  			   ss.account_id = a.id AND(
16:00:50 3259  			       ss.offer_chain_id = 2794122734 OR
16:00:50 3260  			       ss.offer_chain_id = 3564368005 OR
16:00:50 3261  			       ss.offer_chain_id = 757934392)) AND
16:00:50 3262  		   rownum < 5000;
16:00:50 3263  END GET_ACTIVE_MEU_SUBS;
16:00:50 3264  
16:00:50 3265  PROCEDURE GET_EARLIEST_ACTIVE_OFFER_ID (
16:00:50 3266  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:50 3267  	 out_offer_id	     OUT LICENSE.ID%TYPE
16:00:50 3268  )
16:00:50 3269  AS
16:00:50 3270  SPROC_NAME     CONSTANT VARCHAR2(28) := 'GET_EARLIEST_ACTIVE_OFFER_ID';
16:00:50 3271  BEGIN
16:00:50 3272  	 SELECT OFFER_ID INTO out_offer_id
16:00:50 3273  	 FROM LICENSE L,
16:00:50 3274  	 (
16:00:50 3275  	   SELECT MIN(ID) ID FROM LICENSE
16:00:50 3276  	   WHERE SUBSCRIPTION_ID = in_subscription_id
16:00:50 3277  	   AND LICENSE_STATUS_ID = 2
16:00:50 3278  	   AND SYSDATE BETWEEN START_DATE AND END_DATE
16:00:50 3279  	 ) EARLIEST_ACTIVE_LICENSE
16:00:50 3280  	 WHERE L.ID = EARLIEST_ACTIVE_LICENSE.ID;
16:00:50 3281  END GET_EARLIEST_ACTIVE_OFFER_ID;
16:00:50 3282  
16:00:50 3283  PROCEDURE GET_EARLIEST_ACTIVE_LICENSE_ID (
16:00:50 3284  	 in_subscription_id  IN SUBSCRIPTION.ID%TYPE,
16:00:50 3285  	 out_license_id      OUT LICENSE.ID%TYPE
16:00:50 3286  )
16:00:50 3287  AS
16:00:50 3288  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_EARLIEST_ACTIVE_LICENSE_ID';
16:00:50 3289  BEGIN
16:00:50 3290  	 SELECT MIN(ID) into out_license_id
16:00:50 3291  	 FROM LICENSE
16:00:50 3292  	 WHERE SUBSCRIPTION_ID = in_subscription_id
16:00:50 3293  	   AND LICENSE_STATUS_ID = 2
16:00:50 3294  	 AND SYSDATE BETWEEN START_DATE AND END_DATE;
16:00:50 3295  END GET_EARLIEST_ACTIVE_LICENSE_ID;
16:00:50 3296  
16:00:50 3297  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:00:50 3298  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 3299  )
16:00:50 3300  AS
16:00:50 3301  SPROC_NAME     CONSTANT VARCHAR2(30) := 'GET_ACT_SUBS_W_CPT_CHARGEBACKS';
16:00:50 3302  BEGIN
16:00:50 3303  	 OPEN out_result_set FOR
16:00:50 3304  	   SELECT
16:00:50 3305  	     s.id
16:00:50 3306  	   FROM
16:00:50 3307  	     core_owner.transaction t
16:00:50 3308  	   INNER JOIN
16:00:50 3309  	     core_owner.charge c
16:00:50 3310  	   ON
16:00:50 3311  	     c.transaction_id = t.id
16:00:50 3312  	   INNER JOIN
16:00:50 3313  	     core_owner.invoice i
16:00:50 3314  	   ON
16:00:50 3315  	     i.id = c.invoice_id
16:00:50 3316  	   INNER JOIN
16:00:50 3317  	     core_owner.license l
16:00:50 3318  	   ON
16:00:50 3319  	     i.id = l.invoice_id
16:00:50 3320  	   INNER JOIN
16:00:50 3321  	     core_owner.subscription s
16:00:50 3322  	   ON
16:00:50 3323  	     l.subscription_id = s.id
16:00:50 3324  	   INNER JOIN
16:00:50 3325  	     core_owner.account a
16:00:50 3326  	   ON
16:00:50 3327  	     s.account_id = a.id
16:00:50 3328  	   JOIN
16:00:50 3329  	     core_owner.rcn_cpt_chargeback_act_detail ccad
16:00:50 3330  	   ON
16:00:50 3331  	     t.order_id = ccad.merchant_order_number
16:00:50 3332  	   WHERE
16:00:50 3333  	     ccad.chargeback_category = 'RECD'
16:00:50 3334  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 3335  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
16:00:50 3336  
16:00:50 3337  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:00:50 3338  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 3339  )
16:00:50 3340  AS
16:00:50 3341  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_PP_CHARGEBACKS';
16:00:50 3342  BEGIN
16:00:50 3343  	 OPEN out_result_set FOR
16:00:50 3344  	   SELECT
16:00:50 3345  	     s.id
16:00:50 3346  	   FROM
16:00:50 3347  	     core_owner.transaction t
16:00:50 3348  	   INNER JOIN
16:00:50 3349  	     core_owner.charge c
16:00:50 3350  	   ON
16:00:50 3351  	     c.transaction_id = t.id
16:00:50 3352  	   INNER JOIN
16:00:50 3353  	     core_owner.invoice i
16:00:50 3354  	   ON
16:00:50 3355  	     i.id = c.invoice_id
16:00:50 3356  	   INNER JOIN
16:00:50 3357  	     core_owner.license l
16:00:50 3358  	   ON
16:00:50 3359  	     i.id = l.invoice_id
16:00:50 3360  	   INNER JOIN
16:00:50 3361  	     core_owner.subscription s
16:00:50 3362  	   ON
16:00:50 3363  	     l.subscription_id = s.id
16:00:50 3364  	   INNER JOIN
16:00:50 3365  	     core_owner.account a
16:00:50 3366  	   ON
16:00:50 3367  	     s.account_id = a.id
16:00:50 3368  	   INNER JOIN
16:00:50 3369  	     core_owner.rcn_pp_trans_detail ptd
16:00:50 3370  	   ON
16:00:50 3371  	     t.order_id = ptd.invoice_id
16:00:50 3372  	   WHERE
16:00:50 3373  	     ptd.trans_status = 'D'
16:00:50 3374  	   AND s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 3375  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
16:00:50 3376  
16:00:50 3377  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
16:00:50 3378  	 in_max_days_until_close IN NUMBER,
16:00:50 3379  	 in_num_subs_to_fetch	 IN NUMBER,
16:00:50 3380  	 out_result_set 	 OUT SYS_REFCURSOR
16:00:50 3381  )
16:00:50 3382  AS
16:00:50 3383  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GRACE_PERIOD_SUB_REGIS';
16:00:50 3384  BEGIN
16:00:50 3385  	 OPEN out_result_set FOR
16:00:50 3386  	 SELECT
16:00:50 3387  	     *
16:00:50 3388  	 FROM
16:00:50 3389  	     (
16:00:50 3390  		 SELECT
16:00:50 3391  		     a.group_id group_id,
16:00:50 3392  		     l.grace_end_date grace_end_date
16:00:50 3393  		 FROM
16:00:50 3394  		     license l
16:00:50 3395  		 JOIN
16:00:50 3396  		     subscription s
16:00:50 3397  		 ON
16:00:50 3398  		     s.id = l.subscription_id
16:00:50 3399  		 JOIN
16:00:50 3400  		     account a
16:00:50 3401  		 ON
16:00:50 3402  		     a.id = s.account_id
16:00:50 3403  		 WHERE
16:00:50 3404  		     l.license_status_id = GLOBAL_STATUSES_V20.LICENSE_IN_GRACE_PERIOD
16:00:50 3405  		 AND l.grace_end_date - SYSDATE <= in_max_days_until_close
16:00:50 3406  		 AND NOT EXISTS
16:00:50 3407  		     (
16:00:50 3408  			 SELECT
16:00:50 3409  			     NULL
16:00:50 3410  			 FROM
16:00:50 3411  			     process_retry_throttle
16:00:50 3412  			 WHERE
16:00:50 3413  			     process_name = sproc_name
16:00:50 3414  			 AND generic_id = a.group_id)
16:00:50 3415  		 AND rownum <= in_num_subs_to_fetch * 10
16:00:50 3416  		 ORDER BY
16:00:50 3417  		     dbms_random.value)
16:00:50 3418  	 WHERE
16:00:50 3419  	     rownum <= in_num_subs_to_fetch;
16:00:50 3420  END GET_GRACE_PERIOD_SUB_REGIS;
16:00:50 3421  
16:00:50 3422  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
16:00:50 3423  	 out_result_set      OUT SYS_REFCURSOR
16:00:50 3424  )
16:00:50 3425  AS
16:00:50 3426  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACT_SUBS_W_AMEX_CB';
16:00:50 3427  BEGIN
16:00:50 3428  	 OPEN out_result_set FOR
16:00:50 3429  	   SELECT
16:00:50 3430  	     s.id
16:00:50 3431  	   FROM
16:00:50 3432  	     core_owner.transaction t
16:00:50 3433  	   INNER JOIN
16:00:50 3434  	     core_owner.charge c
16:00:50 3435  	   ON
16:00:50 3436  	     c.transaction_id = t.id
16:00:50 3437  	   INNER JOIN
16:00:50 3438  	     core_owner.invoice i
16:00:50 3439  	   ON
16:00:50 3440  	     i.id = c.invoice_id
16:00:50 3441  	   INNER JOIN
16:00:50 3442  	     core_owner.license l
16:00:50 3443  	   ON
16:00:50 3444  	     i.id = l.invoice_id
16:00:50 3445  	   INNER JOIN
16:00:50 3446  	     core_owner.subscription s
16:00:50 3447  	   ON
16:00:50 3448  	     l.subscription_id = s.id
16:00:50 3449  	   INNER JOIN
16:00:50 3450  	     core_owner.account a
16:00:50 3451  	   ON
16:00:50 3452  	     s.account_id = a.id
16:00:50 3453  	   INNER JOIN
16:00:50 3454  	     core_owner.rcn_amex_chargeback ac
16:00:50 3455  	   ON
16:00:50 3456  	     t.order_id = lower(ac.ind_ref_number)
16:00:50 3457  	   WHERE
16:00:50 3458  	     s.subscription_status_id in (GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE, GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:50 3459  END GET_ACT_SUBS_W_AMEX_CB;
16:00:50 3460  
16:00:50 3461  END PROCS_SUBSCRIPTION_V20;
16:00:50 3462  .
16:00:50 SQL> /

Package body created.

Elapsed: 00:00:00.25
16:00:51 SQL> 
16:00:51 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_INVOICE_V20" AS
16:00:51   2  
16:00:51   3  PROCEDURE GET_INVOICE_IDS(
16:00:51   4  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
16:00:51   5  	in_fin_id      IN SUBSCRIPTION.INSTRUMENT_ID%TYPE,
16:00:51   6  	out_result_set OUT SYS_REFCURSOR
16:00:51   7  ) AS
16:00:51   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_INVOICE_IDS';
16:00:51   9  BEGIN
16:00:51  10  	OPEN out_result_set FOR
16:00:51  11  	  SELECT
16:00:51  12  	    Invoice.ID
16:00:51  13  	  FROM
16:00:51  14  	      Invoice
16:00:51  15  	      INNER JOIN License
16:00:51  16  		ON
16:00:51  17  		  License.Invoice_Id = Invoice.Id
16:00:51  18  	      INNER JOIN Subscription
16:00:51  19  		ON
16:00:51  20  		  License.Subscription_Id = Subscription.Id
16:00:51  21  	      INNER JOIN account
16:00:51  22  		ON
16:00:51  23  		  Subscription.Account_Id = account.id
16:00:51  24  	  WHERE
16:00:51  25  	    Account.Group_Id = in_group_id
16:00:51  26  	    AND SUBSCRIPTION.INSTRUMENT_ID = in_fin_id
16:00:51  27  	    AND Invoice.Invoice_Status_Id = GLOBAL_STATUSES_V20.INVOICE_OPEN;
16:00:51  28  END GET_INVOICE_IDS;
16:00:51  29  
16:00:51  30  
16:00:51  31  PROCEDURE IS_INVOICE_FOR_GC (
16:00:51  32  	in_invoice_id IN NUMBER,
16:00:51  33  	out_result    OUT NUMBER
16:00:51  34  ) AS
16:00:51  35  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_GC';
16:00:51  36  var_is_for_gc NUMBER;
16:00:51  37  BEGIN
16:00:51  38  	SELECT
16:00:51  39  	  count(1) into var_is_for_gc
16:00:51  40  	FROM GIFT_CERTIFICATE GC
16:00:51  41  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id;
16:00:51  42  
16:00:51  43  	IF var_is_for_gc > 0 THEN
16:00:51  44  	  out_result := 1;
16:00:51  45  	ELSE
16:00:51  46  	  out_result := 0;
16:00:51  47  	END IF;
16:00:51  48  END IS_INVOICE_FOR_GC;
16:00:51  49  
16:00:51  50  PROCEDURE CREATE_INVOICE(
16:00:51  51  /*
16:00:51  52  Throws exceptions:
16:00:51  53  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51  54  */
16:00:51  55  	  in_invoice_status IN NUMBER,
16:00:51  56  	  in_created_by     IN VARCHAR2,
16:00:51  57  	  in_tax_exempt_id  IN VARCHAR2,
16:00:51  58  	  out_invoice_id    OUT NUMBER
16:00:51  59  ) AS
16:00:51  60  -- VARIABLES
16:00:51  61  SPROC_NAME	 CONSTANT VARCHAR2(14) := 'CREATE_INVOICE';
16:00:51  62  var_new_invoice_id NUMBER;
16:00:51  63  -- EXCEPTIONS
16:00:51  64  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51  65  BEGIN
16:00:51  66  
16:00:51  67  	PROCS_INVOICE_CRU_V20.CREATE_INVOICE(
16:00:51  68  	  out_invoice_id		 => var_new_invoice_id,
16:00:51  69  	  in_created_by 		 => in_created_by,
16:00:51  70  	  in_invoice_status_id		 => in_invoice_status,
16:00:51  71  	  in_tax_exempt_id		 => in_tax_exempt_id
16:00:51  72  	);
16:00:51  73  
16:00:51  74  	out_invoice_id := var_new_invoice_id;
16:00:51  75  
16:00:51  76  EXCEPTION
16:00:51  77  WHEN OTHERS THEN
16:00:51  78  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51  79  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51  80  END CREATE_INVOICE;
16:00:51  81  
16:00:51  82  /************************************************************/
16:00:51  83  
16:00:51  84  PROCEDURE GET_PENDING_INVOICES (
16:00:51  85  /*
16:00:51  86  Throws exceptions:
16:00:51  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51  88  */
16:00:51  89  	out_result_set	     OUT SYS_REFCURSOR,
16:00:51  90  	in_row_number	     IN NUMBER DEFAULT NULL
16:00:51  91  ) AS
16:00:51  92  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_PENDING_INVOICES';
16:00:51  93  -- COMSTANTS
16:00:51  94  DEFAULT_ROW_NUMBER CONSTANT NUMBER := 1;
16:00:51  95  -- VARIABLES
16:00:51  96  var_row_number NUMBER;
16:00:51  97  BEGIN
16:00:51  98  
16:00:51  99  	IF in_row_number IS NULL THEN
16:00:51 100  	  var_row_number := DEFAULT_ROW_NUMBER;
16:00:51 101  	ELSE
16:00:51 102  	  var_row_number := in_row_number;
16:00:51 103  	END IF;
16:00:51 104  
16:00:51 105  	-- Invoices with one or more payments(charges) with transaction status PENDING
16:00:51 106  	OPEN out_result_set FOR
16:00:51 107  SELECT * FROM
16:00:51 108  (
16:00:51 109  	SELECT
16:00:51 110  	  INVOICE.ID
16:00:51 111  	FROM
16:00:51 112  	  CHARGE
16:00:51 113  	  INNER JOIN INVOICE ON CHARGE.INVOICE_ID = INVOICE.ID
16:00:51 114  	WHERE
16:00:51 115  	  EXISTS(
16:00:51 116  	    SELECT NULL
16:00:51 117  	    FROM TRANSACTION
16:00:51 118  	    WHERE
16:00:51 119  	      TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
16:00:51 120  	      AND TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:00:51 121  	      AND TRANSACTION.IS_REFUND != GLOBAL_CONSTANTS_V20.TRUE
16:00:51 122  	      AND TRANSACTION.TRANSACTION_AMOUNT >= 0
16:00:51 123  	  )
16:00:51 124  	  AND
16:00:51 125  	  NOT EXISTS(
16:00:51 126  	    SELECT NULL
16:00:51 127  	    FROM PROCESS_RETRY_THROTTLE
16:00:51 128  	    WHERE PROCESS_NAME = SPROC_NAME
16:00:51 129  	      AND GENERIC_ID = INVOICE.ID
16:00:51 130  	  )
16:00:51 131  	  AND ROWNUM <= var_row_number*10
16:00:51 132  	  ORDER BY dbms_random.value
16:00:51 133  ) WHERE
16:00:51 134  	  ROWNUM <= var_row_number;
16:00:51 135  
16:00:51 136  EXCEPTION
16:00:51 137  WHEN OTHERS THEN
16:00:51 138  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 139  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 140  END GET_PENDING_INVOICES;
16:00:51 141  
16:00:51 142  /************************************************************/
16:00:51 143  
16:00:51 144  FUNCTION F_CALCULATE_INVOICE_AMOUNT(
16:00:51 145  	in_invoice_id IN  NUMBER
16:00:51 146  ) RETURN NUMBER AS
16:00:51 147  var_amount NUMBER;
16:00:51 148  BEGIN
16:00:51 149  
16:00:51 150  	CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_amount);
16:00:51 151  	RETURN var_amount;
16:00:51 152  
16:00:51 153  END;
16:00:51 154  
16:00:51 155  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:51 156  /*
16:00:51 157  Throws exceptions:
16:00:51 158  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 159  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 160  */
16:00:51 161  	in_invoice_id IN  NUMBER,
16:00:51 162  	out_amount    OUT NUMBER
16:00:51 163  ) AS
16:00:51 164  -- VARIABLES
16:00:51 165  SPROC_NAME	     CONSTANT VARCHAR2(24) := 'CALCULATE_INVOICE_AMOUNT';
16:00:51 166  temp_invoice_id	     NUMBER;
16:00:51 167  var_total_amount	     NUMBER(10,6);
16:00:51 168  var_final_amount	     NUMBER(10,2);
16:00:51 169  var_line_item_amount   NUMBER(10,6);
16:00:51 170  
16:00:51 171  var_line_items_set     SYS_REFCURSOR;
16:00:51 172  var_line_item_id	     NUMBER;
16:00:51 173  var_line_item_quantity NUMBER;
16:00:51 174  var_line_item_price    NUMBER (10,2);
16:00:51 175  
16:00:51 176  var_discount_fixed_amount NUMBER (10,2);
16:00:51 177  var_discount_percent_amount NUMBER (10,2);
16:00:51 178  
16:00:51 179  -- EXCEPTIONS
16:00:51 180  BAD_INVOICE_ID		    EXCEPTION;
16:00:51 181  CAN_NOT_CALC_LINE_ITEM_AMOUNT EXCEPTION;
16:00:51 182  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:51 183  BEGIN
16:00:51 184  
16:00:51 185  	var_total_amount := 0;
16:00:51 186  
16:00:51 187  	-- Check that given invoice exists
16:00:51 188  	BEGIN
16:00:51 189  	  SELECT
16:00:51 190  	    INVOICE.ID into temp_invoice_id
16:00:51 191  	  FROM
16:00:51 192  	    INVOICE
16:00:51 193  	  WHERE
16:00:51 194  	    INVOICE.ID = in_invoice_id
16:00:51 195  	    AND ROWNUM <= 1;
16:00:51 196  	  EXCEPTION
16:00:51 197  	    WHEN NO_DATA_FOUND THEN
16:00:51 198  	      RAISE BAD_INVOICE_ID;
16:00:51 199  	END;
16:00:51 200  
16:00:51 201  	-- Calculate amount for each line item in invoice
16:00:51 202  	FOR f_line_item IN (
16:00:51 203  	  SELECT
16:00:51 204  	    LINE_ITEM.ID
16:00:51 205  	  FROM
16:00:51 206  	    LINE_ITEM
16:00:51 207  	  WHERE
16:00:51 208  	    LINE_ITEM.INVOICE_ID = in_invoice_id
16:00:51 209  	)
16:00:51 210  	LOOP
16:00:51 211  	  BEGIN
16:00:51 212  	    PROCS_LINE_ITEMS_V20.CALCULATE_LINE_ITEM_AMOUNT(
16:00:51 213  	      in_line_item_id => f_line_item.ID,
16:00:51 214  	      out_amount      => var_line_item_amount
16:00:51 215  	    );
16:00:51 216  	    var_total_amount := var_total_amount + var_line_item_amount;
16:00:51 217  	    EXCEPTION
16:00:51 218  	      WHEN OTHERS THEN
16:00:51 219  		EXCEPTION_MESSAGE := SQLERRM;
16:00:51 220  		RAISE CAN_NOT_CALC_LINE_ITEM_AMOUNT;
16:00:51 221  	  END;
16:00:51 222  	END LOOP;
16:00:51 223  	var_final_amount := var_total_amount;
16:00:51 224  	out_amount := var_final_amount;
16:00:51 225  
16:00:51 226  EXCEPTION
16:00:51 227  WHEN BAD_INVOICE_ID THEN
16:00:51 228  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 229  	  SPROC_NAME, 'No such invoice');
16:00:51 230  WHEN CAN_NOT_CALC_LINE_ITEM_AMOUNT THEN
16:00:51 231  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 232  	  SPROC_NAME, 'Could not calculate line item amount', EXCEPTION_MESSAGE);
16:00:51 233  WHEN OTHERS THEN
16:00:51 234  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 235  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 236  END;
16:00:51 237  
16:00:51 238  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:00:51 239  /*
16:00:51 240  Throws exceptions:
16:00:51 241  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 242  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 243  */
16:00:51 244  	in_invoice_id  IN  NUMBER,
16:00:51 245  	out_account_id OUT NUMBER
16:00:51 246  ) AS
16:00:51 247  -- VARIABLES
16:00:51 248  SPROC_NAME	 CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_BY_INVOICE_ID';
16:00:51 249  temp_gc_account_id NUMBER;
16:00:51 250  temp_ss_account_id NUMBER;
16:00:51 251  temp_invoice_id	 NUMBER;
16:00:51 252  -- EXCEPTIONS
16:00:51 253  BAD_INVOICE_ID	   EXCEPTION;
16:00:51 254  CAN_NOT_FIND_ACCOUNT EXCEPTION;
16:00:51 255  BEGIN
16:00:51 256  
16:00:51 257  	-- Check that given invoice exists
16:00:51 258  	BEGIN
16:00:51 259  	  SELECT
16:00:51 260  	    INVOICE.ID into temp_invoice_id
16:00:51 261  	  FROM
16:00:51 262  	    INVOICE
16:00:51 263  	  WHERE
16:00:51 264  	    INVOICE.ID = in_invoice_id;
16:00:51 265  	  EXCEPTION
16:00:51 266  	    WHEN NO_DATA_FOUND THEN
16:00:51 267  	      RAISE BAD_INVOICE_ID;
16:00:51 268  	END;
16:00:51 269  
16:00:51 270  	-- Try to find gift certificate with given invoice
16:00:51 271  	BEGIN
16:00:51 272  	  SELECT
16:00:51 273  	    ACCOUNT.GROUP_ID into temp_gc_account_id
16:00:51 274  	  FROM
16:00:51 275  	    GIFT_CERTIFICATE
16:00:51 276  	    INNER JOIN ACCOUNT ON GIFT_CERTIFICATE.PURCHASER_GROUP_ID = ACCOUNT.GROUP_ID
16:00:51 277  	  WHERE
16:00:51 278  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
16:00:51 279  	    AND ROWNUM <= 1;
16:00:51 280  	  EXCEPTION
16:00:51 281  	    WHEN NO_DATA_FOUND THEN
16:00:51 282  	      temp_gc_account_id := NULL;
16:00:51 283  	END;
16:00:51 284  
16:00:51 285  	-- check subscriptions for given invoice
16:00:51 286  	IF temp_gc_account_id IS NOT NULL THEN
16:00:51 287  	  out_account_id := temp_gc_account_id;
16:00:51 288  	ELSE
16:00:51 289  	  BEGIN
16:00:51 290  	    SELECT
16:00:51 291  	      ACCOUNT.GROUP_ID into temp_ss_account_id
16:00:51 292  	    FROM
16:00:51 293  	      LICENSE
16:00:51 294  	      INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 295  	      INNER JOIN ACCOUNT ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:51 296  	    WHERE
16:00:51 297  	      LICENSE.INVOICE_ID = in_invoice_id
16:00:51 298  	      AND ROWNUM <= 1;
16:00:51 299  	    EXCEPTION
16:00:51 300  	      WHEN NO_DATA_FOUND THEN
16:00:51 301  		temp_ss_account_id := NULL;
16:00:51 302  	  END;
16:00:51 303  	  IF temp_ss_account_id IS NULL THEN
16:00:51 304  	    RAISE CAN_NOT_FIND_ACCOUNT;
16:00:51 305  	  ELSE
16:00:51 306  	    out_account_id := temp_ss_account_id;
16:00:51 307  	  END IF;
16:00:51 308  	END IF;
16:00:51 309  
16:00:51 310  EXCEPTION
16:00:51 311  WHEN BAD_INVOICE_ID THEN
16:00:51 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 313  	  SPROC_NAME, 'No such invoice');
16:00:51 314  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:00:51 315  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 316  	  SPROC_NAME, 'Could not find account by given invoice id');
16:00:51 317  WHEN OTHERS THEN
16:00:51 318  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 319  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 320  END GET_ACCOUNT_BY_INVOICE_ID;
16:00:51 321  
16:00:51 322  /*****************************************************************/
16:00:51 323  
16:00:51 324  PROCEDURE GET_INVOICE_DETAILS (
16:00:51 325  /*
16:00:51 326  Throws exceptions:
16:00:51 327  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 328  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 329  */
16:00:51 330  	in_invoice_id	   IN  NUMBER,
16:00:51 331  	out_group_id	   OUT NUMBER,
16:00:51 332  	out_status_id	   OUT NUMBER,
16:00:51 333  	out_line_items_set OUT SYS_REFCURSOR,
16:00:51 334  	out_pp_charges_set OUT SYS_REFCURSOR,
16:00:51 335  	out_cc_charges_set OUT SYS_REFCURSOR,
16:00:51 336  	out_gc_charges_set OUT SYS_REFCURSOR
16:00:51 337  ) AS
16:00:51 338  -- VARIABLES
16:00:51 339  SPROC_NAME CONSTANT VARCHAR2(19) := 'GET_INVOICE_DETAILS';
16:00:51 340  
16:00:51 341  -- EXCEPTIONS
16:00:51 342  BAD_INVOICE_ID	     EXCEPTION;
16:00:51 343  CAN_NOT_FIND_ACCOUNT   EXCEPTION;
16:00:51 344  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 345  BEGIN
16:00:51 346  
16:00:51 347  	-- get invoice status
16:00:51 348  	BEGIN
16:00:51 349  	  SELECT
16:00:51 350  	    INVOICE.INVOICE_STATUS_ID into out_status_id
16:00:51 351  	  FROM
16:00:51 352  	    INVOICE
16:00:51 353  	  WHERE
16:00:51 354  	    INVOICE.ID = in_invoice_id;
16:00:51 355  	  EXCEPTION
16:00:51 356  	    WHEN NO_DATA_FOUND THEN
16:00:51 357  	      RAISE BAD_INVOICE_ID;
16:00:51 358  	END;
16:00:51 359  
16:00:51 360  	-- get group id
16:00:51 361  	BEGIN
16:00:51 362  	  PROCS_INVOICE_V20.GET_ACCOUNT_BY_INVOICE_ID(in_invoice_id, out_group_id);
16:00:51 363  	  EXCEPTION
16:00:51 364  	    WHEN OTHERS THEN
16:00:51 365  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 366  	      RAISE CAN_NOT_FIND_ACCOUNT;
16:00:51 367  	END;
16:00:51 368  
16:00:51 369  	-- get all line items for given invoice
16:00:51 370  	OPEN out_line_items_set FOR
16:00:51 371  	SELECT
16:00:51 372  	  LINE_ITEM.AMOUNT,
16:00:51 373  	  LINE_ITEM.ID,
16:00:51 374  	  LINE_ITEM.CREATED_BY,
16:00:51 375  	  LINE_ITEM.CREATE_DATE,
16:00:51 376  	  LINE_ITEM.DISCOUNT_AMOUNT,
16:00:51 377  	  LINE_ITEM.TAXES_AMOUNT,
16:00:51 378  	  LINE_ITEM.PRODUCT_OFFER_ID,
16:00:51 379  	  LINE_ITEM.INVOICE_ID
16:00:51 380  	FROM
16:00:51 381  	  LINE_ITEM
16:00:51 382  	WHERE
16:00:51 383  	  LINE_ITEM.INVOICE_ID = in_invoice_id;
16:00:51 384  
16:00:51 385  	-- get all pp charges for given invoice
16:00:51 386  	OPEN out_pp_charges_set FOR
16:00:51 387  	SELECT
16:00:51 388  	  CHARGE.ID as "CHARGE_ID",
16:00:51 389  	  CHARGE_AMOUNT,
16:00:51 390  	  CHARGE.INSTRUMENT_ID,
16:00:51 391  	  CHARGE.CHARGE_STATUS_ID
16:00:51 392  	FROM
16:00:51 393  	  CHARGE
16:00:51 394  	WHERE
16:00:51 395  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:51 396  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL;
16:00:51 397  
16:00:51 398  	-- get all credir cards for given invoice
16:00:51 399  	OPEN out_cc_charges_set FOR
16:00:51 400  	SELECT
16:00:51 401  	  CHARGE.ID as "CHARGE_ID",
16:00:51 402  	  CHARGE.CHARGE_AMOUNT,
16:00:51 403  	  CHARGE.INSTRUMENT_ID,
16:00:51 404  	  CHARGE.CHARGE_STATUS_ID
16:00:51 405  	FROM
16:00:51 406  	  CHARGE
16:00:51 407  	WHERE
16:00:51 408  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:51 409  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD;
16:00:51 410  
16:00:51 411  	OPEN out_gc_charges_set FOR
16:00:51 412  	SELECT
16:00:51 413  	  CHARGE.ID as "CHARGE_ID",
16:00:51 414  	  CHARGE.CHARGE_AMOUNT,
16:00:51 415  	  CHARGE.INSTRUMENT_ID,
16:00:51 416  	  CHARGE.CHARGE_STATUS_ID
16:00:51 417  	FROM
16:00:51 418  	  CHARGE
16:00:51 419  	WHERE
16:00:51 420  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:51 421  	  AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
16:00:51 422  
16:00:51 423  EXCEPTION
16:00:51 424  WHEN BAD_INVOICE_ID THEN
16:00:51 425  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 426  	  SPROC_NAME, 'No such invoice');
16:00:51 427  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:00:51 428  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 429  	  SPROC_NAME, 'Could not find account for given invoice id', EXCEPTION_MESSAGE);
16:00:51 430  WHEN OTHERS THEN
16:00:51 431  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 432  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 433  END GET_INVOICE_DETAILS;
16:00:51 434  
16:00:51 435  /******************************************************/
16:00:51 436  -- norlov: #38796
16:00:51 437  PROCEDURE GET_TRANSACTION_INVOICE (
16:00:51 438  /*
16:00:51 439  Throws exceptions:
16:00:51 440  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 441  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 442  */
16:00:51 443  	in_transaction_id  IN  NUMBER,
16:00:51 444  	out_result_set	      OUT SYS_REFCURSOR
16:00:51 445  ) AS
16:00:51 446  SPROC_NAME CONSTANT  VARCHAR2(23) := 'GET_TRANSACTION_INVOICE';
16:00:51 447  -- VARIABLES
16:00:51 448  temp_transaction_id  NUMBER;
16:00:51 449  var_invoice_id	   NUMBER;
16:00:51 450  var_subscription_id  NUMBER;
16:00:51 451  var_offer_chain_id   NUMBER;
16:00:51 452  var_offer_chain_name VARCHAR2(255);
16:00:51 453  -- EXCEPTIONS
16:00:51 454  BAD_TRANSACTION_ID     EXCEPTION;
16:00:51 455  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 456  BEGIN
16:00:51 457   -- check if there is the transaction
16:00:51 458  	BEGIN
16:00:51 459  	  SELECT
16:00:51 460  	    TRANSACTION.ID into temp_transaction_id
16:00:51 461  	  FROM
16:00:51 462  	    TRANSACTION
16:00:51 463  	  WHERE
16:00:51 464  	    TRANSACTION.ID = in_transaction_id;
16:00:51 465  	  EXCEPTION
16:00:51 466  	    WHEN NO_DATA_FOUND THEN
16:00:51 467  	      RAISE BAD_TRANSACTION_ID;
16:00:51 468  	END;
16:00:51 469  
16:00:51 470  	-- Get invoice id
16:00:51 471  	SELECT DISTINCT
16:00:51 472  	  CHARGE.INVOICE_ID into var_invoice_id
16:00:51 473  	FROM
16:00:51 474  	  CHARGE
16:00:51 475  	WHERE
16:00:51 476  	  CHARGE.TRANSACTION_ID = in_transaction_id;
16:00:51 477  
16:00:51 478  	-- Get subscription id if exists
16:00:51 479  	BEGIN
16:00:51 480  	  SELECT DISTINCT
16:00:51 481  	    LICENSE.SUBSCRIPTION_ID into var_subscription_id
16:00:51 482  	  FROM
16:00:51 483  	    LICENSE
16:00:51 484  	  WHERE
16:00:51 485  	    LICENSE.INVOICE_ID = var_invoice_id;
16:00:51 486  	  EXCEPTION
16:00:51 487  	    WHEN NO_DATA_FOUND THEN
16:00:51 488  	      var_subscription_id := NULL;
16:00:51 489  	END;
16:00:51 490  
16:00:51 491  	IF var_subscription_id IS NOT NULL THEN
16:00:51 492  	  -- Fetch offer chain from subscription
16:00:51 493  	  SELECT
16:00:51 494  	    OFFER_CHAIN.ID,
16:00:51 495  	    OFFER_CHAIN.NAME
16:00:51 496  	    into
16:00:51 497  	    var_offer_chain_id,
16:00:51 498  	    var_offer_chain_name
16:00:51 499  	  FROM
16:00:51 500  	    OFFER_CHAIN
16:00:51 501  	    INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 502  	  WHERE
16:00:51 503  	    SUBSCRIPTION.ID = var_subscription_id;
16:00:51 504  	ELSE
16:00:51 505  	  -- Fetch offer chain from GC
16:00:51 506  	  SELECT
16:00:51 507  	    OFFER_CHAIN.ID,
16:00:51 508  	    OFFER_CHAIN.NAME
16:00:51 509  	    into
16:00:51 510  	    var_offer_chain_id,
16:00:51 511  	    var_offer_chain_name
16:00:51 512  	  FROM
16:00:51 513  	    OFFER_CHAIN
16:00:51 514  	    INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 515  	  WHERE
16:00:51 516  	    GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = var_invoice_id;
16:00:51 517  	END IF;
16:00:51 518  
16:00:51 519  	OPEN out_result_set FOR
16:00:51 520  	SELECT DISTINCT
16:00:51 521  	  var_invoice_id       AS "INVOICE_ID",
16:00:51 522  	  var_subscription_id  AS "SUBSCRIPTION_ID",
16:00:51 523  	  var_offer_chain_id   AS "OFFER_CHAIN_ID",
16:00:51 524  	  var_offer_chain_name AS "OFFER_CHAIN_NAME"
16:00:51 525  	FROM
16:00:51 526  	  DUAL;
16:00:51 527  
16:00:51 528  EXCEPTION
16:00:51 529  WHEN BAD_TRANSACTION_ID THEN
16:00:51 530  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 531  	  SPROC_NAME, 'No such transaction');
16:00:51 532  WHEN OTHERS THEN
16:00:51 533  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 534  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 535  END GET_TRANSACTION_INVOICE;
16:00:51 536  
16:00:51 537  /******************************************************/
16:00:51 538  
16:00:51 539  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:51 540  /*
16:00:51 541  Throws exceptions:
16:00:51 542  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 543  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 544  */
16:00:51 545  	in_invoice_id		       IN NUMBER,
16:00:51 546  	in_invoice_status_id	       IN NUMBER,
16:00:51 547  	in_updated_by		       IN VARCHAR2
16:00:51 548  ) AS
16:00:51 549  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_INVOICE_STATUS';
16:00:51 550  -- VARIABLES
16:00:51 551  temp_invoice_id NUMBER;
16:00:51 552  -- EXCEPTIONS
16:00:51 553  BAD_INVOICE_ID		      EXCEPTION;
16:00:51 554  BAD_INVOICE_STATUS_ID	      EXCEPTION;
16:00:51 555  EXCEPTION_MESSAGE 	      VARCHAR2(1024);
16:00:51 556  BEGIN
16:00:51 557  
16:00:51 558  	-- Check if invoice exists
16:00:51 559  	BEGIN
16:00:51 560  	  SELECT
16:00:51 561  	    INVOICE.ID into temp_invoice_id
16:00:51 562  	  FROM
16:00:51 563  	    INVOICE
16:00:51 564  	  WHERE
16:00:51 565  	    INVOICE.ID = in_invoice_id;
16:00:51 566  	  EXCEPTION
16:00:51 567  	    WHEN NO_DATA_FOUND THEN
16:00:51 568  	      RAISE BAD_INVOICE_ID;
16:00:51 569  	END;
16:00:51 570  
16:00:51 571  	IF in_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_OPEN
16:00:51 572  	  AND in_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
16:00:51 573  	  RAISE BAD_INVOICE_STATUS_ID;
16:00:51 574  	END IF;
16:00:51 575  
16:00:51 576  	PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
16:00:51 577  	  in_invoice_id 		 => in_invoice_id,
16:00:51 578  	  in_invoice_status_id		 => in_invoice_status_id,
16:00:51 579  	  in_updated_by 		 => in_updated_by
16:00:51 580  	);
16:00:51 581  
16:00:51 582  EXCEPTION
16:00:51 583  WHEN BAD_INVOICE_STATUS_ID THEN
16:00:51 584  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 585  	  SPROC_NAME, 'Bad invoice status id');
16:00:51 586  WHEN BAD_INVOICE_ID THEN
16:00:51 587  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 588  	  SPROC_NAME, 'No such invoice');
16:00:51 589  WHEN OTHERS THEN
16:00:51 590  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 591  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 592  END UPDATE_INVOICE_STATUS;
16:00:51 593  
16:00:51 594  /****************************************************************/
16:00:51 595  
16:00:51 596  FUNCTION IS_INVOICE_PAYING_STARTED (
16:00:51 597  /*
16:00:51 598  Throws exceptions:
16:00:51 599  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 600  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 601  */
16:00:51 602  	in_invoice_id IN NUMBER
16:00:51 603  ) RETURN NUMBER AS
16:00:51 604  -- VARIABLES
16:00:51 605  SPROC_NAME		 CONSTANT VARCHAR2(30) := 'IS_INVOICE_PAYING_STARTED';
16:00:51 606  temp_invoice_id		 NUMBER;
16:00:51 607  var_processed_charges_num  NUMBER;
16:00:51 608  var_processed_transac_num  NUMBER;
16:00:51 609  var_success_attempts_num	 NUMBER;
16:00:51 610  var_is_gc 		 NUMBER;
16:00:51 611  -- EXCEPTIONS
16:00:51 612  BAD_INVOICE_ID EXCEPTION;
16:00:51 613  BEGIN
16:00:51 614  
16:00:51 615  	-- Check that invoice exists
16:00:51 616  	BEGIN
16:00:51 617  	  SELECT
16:00:51 618  	    INVOICE.ID into temp_invoice_id
16:00:51 619  	  FROM
16:00:51 620  	    INVOICE
16:00:51 621  	  WHERE
16:00:51 622  	    INVOICE.ID = in_invoice_id;
16:00:51 623  	  EXCEPTION
16:00:51 624  	   WHEN NO_DATA_FOUND THEN
16:00:51 625  	     RAISE BAD_INVOICE_ID;
16:00:51 626  	END;
16:00:51 627  
16:00:51 628  	-- Check that there are tansaction attempts with status success
16:00:51 629  	SELECT
16:00:51 630  	  COUNT(1) into var_success_attempts_num
16:00:51 631  	FROM
16:00:51 632  	  TRANSACTION_ATTEMPT ta,
16:00:51 633  	  TRANSACTION t,
16:00:51 634  	  CHARGE c
16:00:51 635  	WHERE
16:00:51 636  	  ta.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS and
16:00:51 637  	  ta.transaction_id = t.id and
16:00:51 638  	  c.transaction_id = t.id and
16:00:51 639  	  t.is_refund = GLOBAL_CONSTANTS_V20.FALSE and
16:00:51 640  	  c.invoice_id = in_invoice_id
16:00:51 641  	;
16:00:51 642  
16:00:51 643  	IF var_success_attempts_num > 0 THEN
16:00:51 644  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 645  	END IF;
16:00:51 646  
16:00:51 647  	SELECT
16:00:51 648  	  COUNT(1) into var_success_attempts_num
16:00:51 649  	FROM
16:00:51 650  	  TRANSACTION t,
16:00:51 651  	  CHARGE c
16:00:51 652  	WHERE
16:00:51 653  	  c.transaction_id = t.id and
16:00:51 654  	  t.is_refund = GLOBAL_CONSTANTS_V20.FALSE and
16:00:51 655  	  t.is_settled = GLOBAL_CONSTANTS_V20.TRUE and
16:00:51 656  	  c.invoice_id = in_invoice_id
16:00:51 657  	;
16:00:51 658  
16:00:51 659  	IF var_success_attempts_num > 0 THEN
16:00:51 660  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 661  	END IF;
16:00:51 662  
16:00:51 663  	SELECT
16:00:51 664  	  COUNT(1) into var_is_gc
16:00:51 665  	FROM
16:00:51 666  	  gift_certificate gc
16:00:51 667  	WHERE
16:00:51 668  	  gc.finalized_invoice_id = in_invoice_id
16:00:51 669  	;
16:00:51 670  
16:00:51 671  	IF var_is_gc > 0 THEN
16:00:51 672  	  RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 673  	END IF;
16:00:51 674  
16:00:51 675  	RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 676  
16:00:51 677  EXCEPTION
16:00:51 678  WHEN BAD_INVOICE_ID THEN
16:00:51 679  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 680  	  SPROC_NAME, 'No such invoice');
16:00:51 681  WHEN OTHERS THEN
16:00:51 682  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 683  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 684  END IS_INVOICE_PAYING_STARTED;
16:00:51 685  
16:00:51 686  /******************************************************************************/
16:00:51 687  
16:00:51 688  PROCEDURE P_IS_INVOICE_PAYING_STARTED (
16:00:51 689  	in_invoice_id  IN NUMBER,
16:00:51 690  	out_is_started OUT NUMBER
16:00:51 691  ) AS
16:00:51 692  BEGIN
16:00:51 693  	-- Just a wrapper
16:00:51 694  	out_is_started := PROCS_INVOICE_V20.IS_INVOICE_PAYING_STARTED(in_invoice_id);
16:00:51 695  END P_IS_INVOICE_PAYING_STARTED;
16:00:51 696  
16:00:51 697  /******************************************************************************/
16:00:51 698  
16:00:51 699  PROCEDURE CALCULATE_INVOICE_CHARGEBACK (
16:00:51 700  	in_invoice_id	      IN NUMBER,
16:00:51 701  	in_chargeback_date    IN DATE,
16:00:51 702  	out_chargeback_amount OUT NUMBER
16:00:51 703  ) AS
16:00:51 704  -- VARIABLES
16:00:51 705  SPROC_NAME	     CONSTANT VARCHAR2(28) := 'CALCULATE_INVOICE_CHARGEBACK';
16:00:51 706  var_chargeback_date    DATE;
16:00:51 707  temp_invoice_id	     NUMBER;
16:00:51 708  var_licenses_number    NUMBER;
16:00:51 709  var_invoice_start_date DATE;
16:00:51 710  var_invoice_end_date   DATE;
16:00:51 711  var_offer_id	     NUMBER;
16:00:51 712  var_offer_days_interval NUMBER;
16:00:51 713  var_license_days_used  NUMBER;
16:00:51 714  var_invoice_amount     NUMBER(10,2);
16:00:51 715  var_offer_chain_id     NUMBER;
16:00:51 716  var_offer_chain_meta_data_val VARCHAR2(1024);
16:00:51 717  var_offer_chain_full_refund   NUMBER;
16:00:51 718  var_offer_chain_prorated_ref  NUMBER;
16:00:51 719  var_chargeback_calculated NUMBER;
16:00:51 720  var_max_invoice_refund	NUMBER;
16:00:51 721  -- EXCEPTIONS
16:00:51 722  BAD_INVOICE_ID		  EXCEPTION;
16:00:51 723  NO_LICENSES_FOUND_EXCEPTION EXCEPTION;
16:00:51 724  OFFER_LENGTH_IS_ZERO	  EXCEPTION;
16:00:51 725  BEGIN
16:00:51 726  
16:00:51 727  	IF in_chargeback_date IS NULL THEN
16:00:51 728  	  var_chargeback_date := PROCS_COMMON_V20.NORMALIZE_DATE(current_date);
16:00:51 729  	ELSE
16:00:51 730  	  var_chargeback_date := PROCS_COMMON_V20.NORMALIZE_DATE(in_chargeback_date);
16:00:51 731  	END IF;
16:00:51 732  
16:00:51 733  	-- Check that invoice exists
16:00:51 734  	BEGIN
16:00:51 735  	  SELECT
16:00:51 736  	    INVOICE.ID into temp_invoice_id
16:00:51 737  	  FROM
16:00:51 738  	    INVOICE
16:00:51 739  	  WHERE
16:00:51 740  	    INVOICE.ID = in_invoice_id;
16:00:51 741  	  EXCEPTION
16:00:51 742  	    WHEN NO_DATA_FOUND THEN
16:00:51 743  	      RAISE BAD_INVOICE_ID;
16:00:51 744  	END;
16:00:51 745  
16:00:51 746  	-- Check that invoice has at least one license
16:00:51 747  	SELECT
16:00:51 748  	  COUNT(*) into var_licenses_number
16:00:51 749  	FROM
16:00:51 750  	  LICENSE
16:00:51 751  	WHERE
16:00:51 752  	  LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 753  
16:00:51 754  	IF var_licenses_number = 0 THEN
16:00:51 755  	  RAISE NO_LICENSES_FOUND_EXCEPTION;
16:00:51 756  	END IF;
16:00:51 757  
16:00:51 758  	SELECT
16:00:51 759  	  MIN(LICENSE.START_DATE) into var_invoice_start_date
16:00:51 760  	FROM
16:00:51 761  	  LICENSE
16:00:51 762  	WHERE
16:00:51 763  	  LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 764  
16:00:51 765  	var_invoice_start_date := PROCS_COMMON_V20.NORMALIZE_DATE(var_invoice_start_date);
16:00:51 766  
16:00:51 767  	SELECT DISTINCT
16:00:51 768  	  LICENSE.OFFER_ID into var_offer_id
16:00:51 769  	FROM
16:00:51 770  	  LICENSE
16:00:51 771  	WHERE
16:00:51 772  	  LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 773  
16:00:51 774  	SELECT
16:00:51 775  	  MAX (LICENSE.END_DATE) into var_invoice_end_date
16:00:51 776  	FROM
16:00:51 777  	  LICENSE
16:00:51 778  	WHERE
16:00:51 779  	  LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 780  
16:00:51 781  	-- All licenses for given invoice should point into the same offer
16:00:51 782  
16:00:51 783  	PROCS_OFFER_CHAIN_V20.GET_OFFER_LENGTH_IN_DAYS(
16:00:51 784  	  in_offer_id	=> var_offer_id,
16:00:51 785  	  in_start_date => var_invoice_start_date,
16:00:51 786  	  out_days	=> var_offer_days_interval
16:00:51 787  	);
16:00:51 788  
16:00:51 789  	IF var_offer_days_interval = 0 THEN
16:00:51 790  	  RAISE OFFER_LENGTH_IS_ZERO;
16:00:51 791  	END IF;
16:00:51 792  
16:00:51 793  	PROCS_INVOICE_V20.GET_INVOICE_DAYS_USED_NUMBER(
16:00:51 794  	  in_invoice_id      => in_invoice_id,
16:00:51 795  	  in_chargeback_date => var_chargeback_date,
16:00:51 796  	  out_days_num	     => var_license_days_used
16:00:51 797  	);
16:00:51 798  
16:00:51 799  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(
16:00:51 800  	  in_invoice_id => in_invoice_id,
16:00:51 801  	  out_amount	=> var_invoice_amount
16:00:51 802  	);
16:00:51 803  
16:00:51 804  	-- 39437
16:00:51 805  	-- Get offer chain id by invoice id
16:00:51 806  	SELECT DISTINCT
16:00:51 807  	  SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_id
16:00:51 808  	FROM
16:00:51 809  	  SUBSCRIPTION
16:00:51 810  	  INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 811  	WHERE
16:00:51 812  	  LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 813  
16:00:51 814  	-- Get offer chain's meta data full amount value
16:00:51 815  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
16:00:51 816  	  in_offer_chain_id => var_offer_chain_id,
16:00:51 817  	  in_meta_data_name => GLOBAL_CONSTANTS_V20.OFFER_CHAIN_FULL_REFUND,
16:00:51 818  	  out_value	    => var_offer_chain_meta_data_val
16:00:51 819  	);
16:00:51 820  	IF var_offer_chain_meta_data_val IS NULL THEN
16:00:51 821  	  var_offer_chain_full_refund := NULL;
16:00:51 822  	ELSE
16:00:51 823  	  var_offer_chain_full_refund := TO_NUMBER(var_offer_chain_meta_data_val);
16:00:51 824  	END IF;
16:00:51 825  
16:00:51 826  	-- Get offer chain's meta data prorated amount value
16:00:51 827  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
16:00:51 828  	  in_offer_chain_id => var_offer_chain_id,
16:00:51 829  	  in_meta_data_name => GLOBAL_CONSTANTS_V20.OFFER_CHAIN_PRORATED_REFUND,
16:00:51 830  	  out_value	    => var_offer_chain_meta_data_val
16:00:51 831  	);
16:00:51 832  	IF var_offer_chain_meta_data_val IS NULL THEN
16:00:51 833  	  var_offer_chain_prorated_ref := NULL;
16:00:51 834  	ELSE
16:00:51 835  	  var_offer_chain_prorated_ref := TO_NUMBER(var_offer_chain_meta_data_val);
16:00:51 836  	END IF;
16:00:51 837  
16:00:51 838  	var_chargeback_calculated := GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 839  
16:00:51 840  	IF var_offer_chain_full_refund IS NOT NULL
16:00:51 841  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 842  	  IF var_license_days_used < var_offer_chain_full_refund THEN
16:00:51 843  	    out_chargeback_amount := var_invoice_amount;
16:00:51 844  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 845  	  END IF;
16:00:51 846  	END IF;
16:00:51 847  
16:00:51 848  	IF var_offer_chain_prorated_ref IS NOT NULL
16:00:51 849  	   AND var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 850  	  IF var_license_days_used < var_offer_chain_prorated_ref THEN
16:00:51 851  	    out_chargeback_amount := ( var_invoice_amount * (var_offer_days_interval - var_license_days_used) ) / var_offer_days_interval;
16:00:51 852  	    var_chargeback_calculated := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 853  	  END IF;
16:00:51 854  	END IF;
16:00:51 855  
16:00:51 856  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:51 857  	  PROCS_INVOICE_V20.GET_MAX_REFUND(
16:00:51 858  	    in_invoice_id => in_invoice_id,
16:00:51 859  	    out_amount	  => var_max_invoice_refund
16:00:51 860  	  );
16:00:51 861  	  IF var_max_invoice_refund < out_chargeback_amount THEN
16:00:51 862  	    out_chargeback_amount := var_max_invoice_refund;
16:00:51 863  	  END IF;
16:00:51 864  	END IF;
16:00:51 865  
16:00:51 866  	IF var_chargeback_calculated = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 867  	  out_chargeback_amount := 0;
16:00:51 868  	END IF;
16:00:51 869  
16:00:51 870  EXCEPTION
16:00:51 871  WHEN BAD_INVOICE_ID THEN
16:00:51 872  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 873  	  SPROC_NAME, 'No such invoice');
16:00:51 874  WHEN NO_LICENSES_FOUND_EXCEPTION THEN
16:00:51 875  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 876  	  SPROC_NAME, 'No licenses found');
16:00:51 877  WHEN OFFER_LENGTH_IS_ZERO THEN
16:00:51 878  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 879  	  SPROC_NAME, 'Offer length is zero');
16:00:51 880  WHEN OTHERS THEN
16:00:51 881  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 882  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 883  END CALCULATE_INVOICE_CHARGEBACK;
16:00:51 884  
16:00:51 885  /********************************************************************/
16:00:51 886  
16:00:51 887  PROCEDURE APPLY_REFUND (
16:00:51 888  	in_invoice_id	     IN NUMBER,
16:00:51 889  	in_chargeback_amount IN NUMBER,
16:00:51 890  	in_created_by	     IN VARCHAR2,
16:00:51 891  	out_charge_id	     OUT NUMBER
16:00:51 892  ) AS
16:00:51 893  -- VARIABLES
16:00:51 894  SPROC_NAME		 CONSTANT VARCHAR2(16) := 'APPLY_CHARGEBACK';
16:00:51 895  temp_invoice_id		 NUMBER;
16:00:51 896  var_total_charges_amount	 NUMBER(10,2);
16:00:51 897  var_charge_amount_to_apply NUMBER(10,2);
16:00:51 898  var_transaction_id	 NUMBER;
16:00:51 899  var_instrument_type_id	 NUMBER;
16:00:51 900  var_instrument_id 	 NUMBER;
16:00:51 901  var_charge_id		 NUMBER;
16:00:51 902  -- EXCEPTIONS
16:00:51 903  BAD_INVOICE_ID		 EXCEPTION;
16:00:51 904  CAN_NOT_CREATE_TRANSACTION EXCEPTION;
16:00:51 905  CAN_NOT_FIND_INSTRUMENT	 EXCEPTION;
16:00:51 906  CAN_NOT_CREATE_CHARGE	 EXCEPTION;
16:00:51 907  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:00:51 908  BEGIN
16:00:51 909  
16:00:51 910  	BEGIN
16:00:51 911  	  SELECT
16:00:51 912  	    INVOICE.ID into temp_invoice_id
16:00:51 913  	  FROM
16:00:51 914  	    INVOICE
16:00:51 915  	  WHERE
16:00:51 916  	    INVOICE.ID = in_invoice_id;
16:00:51 917  	  EXCEPTION
16:00:51 918  	    WHEN NO_DATA_FOUND THEN
16:00:51 919  	      RAISE BAD_INVOICE_ID;
16:00:51 920  	END;
16:00:51 921  
16:00:51 922  	SELECT
16:00:51 923  	  SUM (CHARGE.CHARGE_AMOUNT) into var_total_charges_amount
16:00:51 924  	FROM
16:00:51 925  	  CHARGE
16:00:51 926  	WHERE
16:00:51 927  	  CHARGE.INVOICE_ID = in_invoice_id
16:00:51 928  	  AND CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:51 929  	  AND CHARGE.INSTRUMENT_TYPE_ID != GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
16:00:51 930  
16:00:51 931  	-- FIXME: Maybe whe should throw exception here?
16:00:51 932  	IF var_total_charges_amount < in_chargeback_amount THEN
16:00:51 933  	  var_charge_amount_to_apply := var_total_charges_amount;
16:00:51 934  	ELSE
16:00:51 935  	  var_charge_amount_to_apply := in_chargeback_amount;
16:00:51 936  	END IF;
16:00:51 937  
16:00:51 938  	BEGIN
16:00:51 939  	  PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:51 940  	    in_transaction_id	      => NULL,
16:00:51 941  	    in_status_id	      => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
16:00:51 942  	    in_amount		      => -var_charge_amount_to_apply,
16:00:51 943  	    in_created_by	      => in_created_by,
16:00:51 944  	    in_order_id 	      => NULL,
16:00:51 945  	    in_is_refund	      => GLOBAL_CONSTANTS_V20.TRUE,
16:00:51 946  	    in_transaction_type_code  => 'REFUND',
16:00:51 947  	    out_transaction_id	      => var_transaction_id
16:00:51 948  	  );
16:00:51 949  	  EXCEPTION
16:00:51 950  	    WHEN OTHERS THEN
16:00:51 951  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 952  	      RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:51 953  	END;
16:00:51 954  
16:00:51 955  	BEGIN
16:00:51 956  	  SELECT
16:00:51 957  	    C.INSTRUMENT_TYPE_ID,
16:00:51 958  	    C.INSTRUMENT_ID
16:00:51 959  	    into
16:00:51 960  	    var_instrument_type_id,
16:00:51 961  	    var_instrument_id
16:00:51 962  	  FROM
16:00:51 963  	    CHARGE C,
16:00:51 964  	    TRANSACTION_ATTEMPT TA,
16:00:51 965  	    TRANSACTION T
16:00:51 966  	  WHERE
16:00:51 967  	    C.INVOICE_ID = in_invoice_id and
16:00:51 968  	    C.TRANSACTION_ID = T.ID and
16:00:51 969  	    TA.TRANSACTION_ID = T.ID and
16:00:51 970  	    TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS and
16:00:51 971  	    T.IS_REFUND = GLOBAL_CONSTANTS_V20.FALSE and
16:00:51 972  	    T.TRANSACTION_AMOUNT >= 0 and
16:00:51 973  	    rownum < 2;
16:00:51 974  	EXCEPTION
16:00:51 975  	    WHEN NO_DATA_FOUND THEN
16:00:51 976  	      RAISE CAN_NOT_FIND_INSTRUMENT;
16:00:51 977  	END;
16:00:51 978  	BEGIN
16:00:51 979  	  PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:51 980  	    in_invoice_id	  => in_invoice_id,
16:00:51 981  	    in_transaction_id	  => var_transaction_id,
16:00:51 982  	    in_instrument_type_id => var_instrument_type_id,
16:00:51 983  	    in_instrument_id	  => var_instrument_id,
16:00:51 984  	    in_charge_amount	  => -var_charge_amount_to_apply,
16:00:51 985  	    in_created_by	  => in_created_by,
16:00:51 986  	    in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:51 987  	    out_charge_id	  => var_charge_id
16:00:51 988  	  );
16:00:51 989  	  EXCEPTION
16:00:51 990  	    WHEN OTHERS THEN
16:00:51 991  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 992  	      RAISE CAN_NOT_CREATE_CHARGE;
16:00:51 993  	END;
16:00:51 994  
16:00:51 995  	out_charge_id := var_charge_id;
16:00:51 996  
16:00:51 997  EXCEPTION
16:00:51 998  WHEN BAD_INVOICE_ID THEN
16:00:51 999  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1000  	   SPROC_NAME, 'No such invoice');
16:00:51 1001  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:51 1002  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1003  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:51 1004  WHEN CAN_NOT_FIND_INSTRUMENT THEN
16:00:51 1005  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1006  	   SPROC_NAME, 'Could not find financial instrument');
16:00:51 1007  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:51 1008  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1009  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:51 1010  WHEN OTHERS THEN
16:00:51 1011  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1012  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1013  END APPLY_REFUND;
16:00:51 1014  
16:00:51 1015  /******************************************************************************/
16:00:51 1016  
16:00:51 1017  PROCEDURE GET_MAX_REFUND (
16:00:51 1018  	 in_invoice_id IN NUMBER,
16:00:51 1019  	 out_amount    OUT NUMBER
16:00:51 1020  ) AS
16:00:51 1021  SPROC_NAME CONSTANT VARCHAR2(14) := 'GET_MAX_REFUND';
16:00:51 1022  -- VARIABLES
16:00:51 1023  temp_invoice_id	       NUMBER;
16:00:51 1024  var_invoice_refunds_sum NUMBER(10,2);
16:00:51 1025  var_invoice_charges_sum NUMBER(10,2);
16:00:51 1026  -- EXCEPTIONS
16:00:51 1027  BAD_INVOICE_ID EXCEPTION;
16:00:51 1028  BEGIN
16:00:51 1029  
16:00:51 1030  	 BEGIN
16:00:51 1031  	   SELECT
16:00:51 1032  	     INVOICE.ID into temp_invoice_id
16:00:51 1033  	   FROM
16:00:51 1034  	     INVOICE
16:00:51 1035  	   WHERE
16:00:51 1036  	     INVOICE.ID = in_invoice_id;
16:00:51 1037  	   EXCEPTION
16:00:51 1038  	     WHEN NO_DATA_FOUND THEN
16:00:51 1039  	       RAISE BAD_INVOICE_ID;
16:00:51 1040  	 END;
16:00:51 1041  
16:00:51 1042  	 var_invoice_refunds_sum := 0;
16:00:51 1043  	 var_invoice_charges_sum := 0;
16:00:51 1044  
16:00:51 1045  	 FOR f_charge IN (
16:00:51 1046  	   SELECT
16:00:51 1047  	     CHARGE.ID,
16:00:51 1048  	     CHARGE.CHARGE_STATUS_ID,
16:00:51 1049  	     CHARGE.CHARGE_AMOUNT,
16:00:51 1050  	     CHARGE.TRANSACTION_ID
16:00:51 1051  	   FROM
16:00:51 1052  	     CHARGE
16:00:51 1053  	   WHERE
16:00:51 1054  	     CHARGE.INVOICE_ID = in_invoice_id
16:00:51 1055  	 )
16:00:51 1056  	 LOOP
16:00:51 1057  	   -- If charge.status = canceled then continue
16:00:51 1058  	   IF f_charge.CHARGE_STATUS_ID != GLOBAL_STATUSES_V20.CHARGE_CANCELED THEN
16:00:51 1059  
16:00:51 1060  	     IF f_charge.CHARGE_AMOUNT > 0 THEN
16:00:51 1061  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:51 1062  		  AND PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:51 1063  		 -- Transaction collected
16:00:51 1064  		 var_invoice_charges_sum := var_invoice_charges_sum + f_charge.CHARGE_AMOUNT;
16:00:51 1065  	       ELSE
16:00:51 1066  		 -- Transaction is not collected. Do nothing
16:00:51 1067  		 NULL;
16:00:51 1068  	       END IF;
16:00:51 1069  	     ELSE
16:00:51 1070  	       IF f_charge.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:51 1071  		  AND PROCS_TRANSACTION_V20.IS_TRANSACTION_COLLECTED(f_charge.TRANSACTION_ID) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 1072  		 -- If charge is processed transaction is not collected then do nothing
16:00:51 1073  		 NULL;
16:00:51 1074  	       ELSE
16:00:51 1075  		 var_invoice_refunds_sum := var_invoice_refunds_sum + f_charge.CHARGE_AMOUNT;
16:00:51 1076  	       END IF;
16:00:51 1077  	     END IF;
16:00:51 1078  
16:00:51 1079  	   END IF;
16:00:51 1080  	 END LOOP;
16:00:51 1081  
16:00:51 1082  	 -- Refunds are negative
16:00:51 1083  	 var_invoice_refunds_sum := 0 - var_invoice_refunds_sum;
16:00:51 1084  
16:00:51 1085  	 out_amount := var_invoice_charges_sum - var_invoice_refunds_sum;
16:00:51 1086  
16:00:51 1087  EXCEPTION
16:00:51 1088  WHEN BAD_INVOICE_ID THEN
16:00:51 1089  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1090  	   SPROC_NAME, 'No such invoice');
16:00:51 1091  WHEN OTHERS THEN
16:00:51 1092  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1093  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1094  END GET_MAX_REFUND;
16:00:51 1095  
16:00:51 1096  /******************************************************************************/
16:00:51 1097  
16:00:51 1098  PROCEDURE GET_INVOICE_DAYS_USED_NUMBER (
16:00:51 1099  	 in_invoice_id	     IN NUMBER,
16:00:51 1100  	 in_chargeback_date  IN DATE DEFAULT SYSDATE,
16:00:51 1101  	 out_days_num	     OUT NUMBER
16:00:51 1102  ) AS
16:00:51 1103  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_DAYS_USED_NUMBER';
16:00:51 1104  -- VARIABLES
16:00:51 1105  temp_invoice_id	      NUMBER;
16:00:51 1106  var_license_start_date DATE;
16:00:51 1107  var_license_end_date   DATE;
16:00:51 1108  var_chargeback_date    DATE;
16:00:51 1109  var_invoice_days_used  NUMBER;
16:00:51 1110  -- EXCEPTIONS
16:00:51 1111  BAD_INVOICE_ID EXCEPTION;
16:00:51 1112  BEGIN
16:00:51 1113  
16:00:51 1114  	 var_chargeback_date := NVL(in_chargeback_date, SYSDATE);
16:00:51 1115  
16:00:51 1116  	 BEGIN
16:00:51 1117  	   SELECT
16:00:51 1118  	     INVOICE.ID into temp_invoice_id
16:00:51 1119  	   FROM
16:00:51 1120  	     INVOICE
16:00:51 1121  	   WHERE
16:00:51 1122  	     INVOICE.ID = in_invoice_id;
16:00:51 1123  	   EXCEPTION
16:00:51 1124  	     WHEN NO_DATA_FOUND THEN
16:00:51 1125  	       RAISE BAD_INVOICE_ID;
16:00:51 1126  	 END;
16:00:51 1127  
16:00:51 1128  	 var_invoice_days_used := 0;
16:00:51 1129  
16:00:51 1130  	 FOR f_license IN (
16:00:51 1131  	   SELECT
16:00:51 1132  	     LICENSE.START_DATE,
16:00:51 1133  	     LICENSE.END_DATE
16:00:51 1134  	   FROM
16:00:51 1135  	     LICENSE
16:00:51 1136  	   WHERE
16:00:51 1137  	     LICENSE.INVOICE_ID = in_invoice_id
16:00:51 1138  	     AND LICENSE.IS_EXTENSION = GLOBAL_CONSTANTS_V20.FALSE
16:00:51 1139  	 )
16:00:51 1140  	 LOOP
16:00:51 1141  	   var_license_start_date := PROCS_COMMON_V20.NORMALIZE_DATE(f_license.START_DATE);
16:00:51 1142  	   var_license_end_date := PROCS_COMMON_V20.NORMALIZE_DATE(f_license.END_DATE);
16:00:51 1143  
16:00:51 1144  	   IF var_license_start_date <= var_chargeback_date THEN
16:00:51 1145  	     IF var_license_end_date <= var_chargeback_date THEN
16:00:51 1146  	       -- License is passed
16:00:51 1147  	       var_invoice_days_used := var_invoice_days_used + (var_license_end_date - var_license_start_date);
16:00:51 1148  	     ELSE
16:00:51 1149  	       -- This is current license
16:00:51 1150  	       var_invoice_days_used := var_invoice_days_used + (var_chargeback_date - var_license_start_date);
16:00:51 1151  	     END IF;
16:00:51 1152  	   ELSE
16:00:51 1153  	     -- if var_license_start_date > in_chargeback_date then do nothing
16:00:51 1154  	     NULL;
16:00:51 1155  	   END IF;
16:00:51 1156  	 END LOOP;
16:00:51 1157  
16:00:51 1158  	 out_days_num := var_invoice_days_used;
16:00:51 1159  
16:00:51 1160  EXCEPTION
16:00:51 1161  WHEN BAD_INVOICE_ID THEN
16:00:51 1162  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1163  	   SPROC_NAME, 'No such invoice');
16:00:51 1164  WHEN OTHERS THEN
16:00:51 1165  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1166  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1167  END GET_INVOICE_DAYS_USED_NUMBER;
16:00:51 1168  
16:00:51 1169  /******************************************************************************/
16:00:51 1170  
16:00:51 1171  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:51 1172  	 in_invoice_id	IN NUMBER,
16:00:51 1173  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1174  ) AS
16:00:51 1175  SPROC_NAME CONSTANT VARCHAR2(22) := 'GET_INVOICE_LINE_ITEMS';
16:00:51 1176  -- VARIABLES
16:00:51 1177  temp_invoice_id NUMBER;
16:00:51 1178  -- EXCEPTIONS
16:00:51 1179  BAD_INVOICE_ID EXCEPTION;
16:00:51 1180  BEGIN
16:00:51 1181  
16:00:51 1182  	 BEGIN
16:00:51 1183  	   SELECT
16:00:51 1184  	     INVOICE.ID into temp_invoice_id
16:00:51 1185  	   FROM
16:00:51 1186  	     INVOICE
16:00:51 1187  	   WHERE
16:00:51 1188  	     INVOICE.ID = in_invoice_id;
16:00:51 1189  	   EXCEPTION
16:00:51 1190  	     WHEN NO_DATA_FOUND THEN
16:00:51 1191  	       RAISE BAD_INVOICE_ID;
16:00:51 1192  	 END;
16:00:51 1193  
16:00:51 1194  	 OPEN out_result_set FOR
16:00:51 1195  	 SELECT
16:00:51 1196  	   LINE_ITEM.ID,
16:00:51 1197  	   LINE_ITEM.PRODUCT_OFFER_ID,
16:00:51 1198  	   LINE_ITEM.INVOICE_ID,
16:00:51 1199  	   LINE_ITEM.AMOUNT,
16:00:51 1200  	   LINE_ITEM.DISCOUNT_AMOUNT,
16:00:51 1201  	   LINE_ITEM.TAXES_AMOUNT,
16:00:51 1202  	   LINE_ITEM.CREATE_DATE,
16:00:51 1203  	   LINE_ITEM.CREATED_BY
16:00:51 1204  	 FROM
16:00:51 1205  	   LINE_ITEM
16:00:51 1206  	 WHERE
16:00:51 1207  	   LINE_ITEM.INVOICE_ID = in_invoice_id;
16:00:51 1208  
16:00:51 1209  EXCEPTION
16:00:51 1210  WHEN BAD_INVOICE_ID THEN
16:00:51 1211  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1212  	   SPROC_NAME, 'No such invoice');
16:00:51 1213  WHEN OTHERS THEN
16:00:51 1214  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1215  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1216  END GET_INVOICE_LINE_ITEMS;
16:00:51 1217  
16:00:51 1218  /******************************************************************************/
16:00:51 1219  
16:00:51 1220  PROCEDURE GET_INVOICE_LICENSES (
16:00:51 1221  	 in_invoice_id	IN NUMBER,
16:00:51 1222  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1223  ) AS
16:00:51 1224  SPROC_NAME CONSTANT VARCHAR2(20) := 'GET_INVOICE_LICENSES';
16:00:51 1225  -- VARIABLES
16:00:51 1226  temp_invoice_id NUMBER;
16:00:51 1227  -- EXCEPTIONS
16:00:51 1228  BAD_INVOICE_ID EXCEPTION;
16:00:51 1229  BEGIN
16:00:51 1230  
16:00:51 1231  	 BEGIN
16:00:51 1232  	   SELECT
16:00:51 1233  	     INVOICE.ID into temp_invoice_id
16:00:51 1234  	   FROM
16:00:51 1235  	     INVOICE
16:00:51 1236  	   WHERE
16:00:51 1237  	     INVOICE.ID = in_invoice_id;
16:00:51 1238  	   EXCEPTION
16:00:51 1239  	     WHEN NO_DATA_FOUND THEN
16:00:51 1240  	       RAISE BAD_INVOICE_ID;
16:00:51 1241  	 END;
16:00:51 1242  
16:00:51 1243  	 OPEN out_result_set FOR
16:00:51 1244  	 SELECT
16:00:51 1245  	   LICENSE.ID,
16:00:51 1246  	   LICENSE.INVOICE_ID,
16:00:51 1247  	   LICENSE.CREATE_DATE,
16:00:51 1248  	   LICENSE.CREATED_BY,
16:00:51 1249  	   LICENSE.CURRENT_OFFER_INDEX,
16:00:51 1250  	   LICENSE.CURRENT_OFFER_RECURR_NUM,
16:00:51 1251  	   LICENSE.END_DATE,
16:00:51 1252  	   LICENSE.ENTITLEMENT_END_DATE,
16:00:51 1253  	   LICENSE.IS_EXTENSION,
16:00:51 1254  	   LICENSE.LICENSE_STATUS_ID,
16:00:51 1255  	   LICENSE.NEEDS_ENTITLEMENTS,
16:00:51 1256  	   LICENSE.OFFER_ID,
16:00:51 1257  	   LICENSE.START_DATE,
16:00:51 1258  	   LICENSE.SUBSCRIPTION_ID,
16:00:51 1259  	   LICENSE.UPDATE_DATE,
16:00:51 1260  	   LICENSE.UPDATED_BY
16:00:51 1261  	 FROM
16:00:51 1262  	   LICENSE
16:00:51 1263  	 WHERE
16:00:51 1264  	   LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 1265  
16:00:51 1266  EXCEPTION
16:00:51 1267  WHEN BAD_INVOICE_ID THEN
16:00:51 1268  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1269  	   SPROC_NAME, 'No such invoice');
16:00:51 1270  WHEN OTHERS THEN
16:00:51 1271  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1272  	   SPROC_NAME, 'Unknown error');
16:00:51 1273  END GET_INVOICE_LICENSES;
16:00:51 1274  
16:00:51 1275  /******************************************************************************/
16:00:51 1276  
16:00:51 1277  PROCEDURE GET_OFFER_CH_ID_BY_INVOICE_ID (
16:00:51 1278  	 in_invoice_id	    IN NUMBER,
16:00:51 1279  	 out_offer_chain_id OUT NUMBER
16:00:51 1280  ) AS
16:00:51 1281  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_OFFER_CH_ID_BY_INVOICE_ID';
16:00:51 1282  -- VARIABLES
16:00:51 1283  temp_invoice_id NUMBER;
16:00:51 1284  -- EXCEPTIONS
16:00:51 1285  BAD_INVOICE_ID EXCEPTION;
16:00:51 1286  BEGIN
16:00:51 1287  
16:00:51 1288  	 BEGIN
16:00:51 1289  	   SELECT
16:00:51 1290  	     INVOICE.ID into temp_invoice_id
16:00:51 1291  	   FROM
16:00:51 1292  	     INVOICE
16:00:51 1293  	   WHERE
16:00:51 1294  	     INVOICE.ID = in_invoice_id;
16:00:51 1295  	   EXCEPTION
16:00:51 1296  	     WHEN NO_DATA_FOUND THEN
16:00:51 1297  	       RAISE BAD_INVOICE_ID;
16:00:51 1298  	 END;
16:00:51 1299  
16:00:51 1300  	 BEGIN
16:00:51 1301  	   SELECT DISTINCT
16:00:51 1302  	     SUBSCRIPTION.OFFER_CHAIN_ID into out_offer_chain_id
16:00:51 1303  	   FROM
16:00:51 1304  	     LICENSE
16:00:51 1305  	     INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 1306  	   WHERE
16:00:51 1307  	     LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 1308  	   EXCEPTION
16:00:51 1309  	     WHEN NO_DATA_FOUND THEN
16:00:51 1310  	       out_offer_chain_id := NULL;
16:00:51 1311  	 END;
16:00:51 1312  
16:00:51 1313  EXCEPTION
16:00:51 1314  WHEN BAD_INVOICE_ID THEN
16:00:51 1315  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1316  	   SPROC_NAME, 'No such invoice');
16:00:51 1317  WHEN OTHERS THEN
16:00:51 1318  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1319  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1320  END GET_OFFER_CH_ID_BY_INVOICE_ID;
16:00:51 1321  
16:00:51 1322  /******************************************************************************/
16:00:51 1323  
16:00:51 1324  PROCEDURE CLOSE_INVOICE_AS_NOT_COLLECTED (
16:00:51 1325  -- Closing invoice without refund
16:00:51 1326  	 in_invoice_id IN NUMBER,
16:00:51 1327  	 in_updated_by IN VARCHAR2
16:00:51 1328  ) AS
16:00:51 1329  SPROC_NAME CONSTANT VARCHAR2(30) := 'CLOSE_INVOICE_AS_NOT_COLLECTED';
16:00:51 1330  -- VARIABLES
16:00:51 1331  temp_invoice_id NUMBER;
16:00:51 1332  -- EXCEPTIONS
16:00:51 1333  BAD_INVOICE_ID EXCEPTION;
16:00:51 1334  BEGIN
16:00:51 1335  
16:00:51 1336  	 BEGIN
16:00:51 1337  	   SELECT
16:00:51 1338  	     INVOICE.ID into temp_invoice_id
16:00:51 1339  	   FROM
16:00:51 1340  	     INVOICE
16:00:51 1341  	   WHERE
16:00:51 1342  	     INVOICE.ID = in_invoice_id;
16:00:51 1343  	   EXCEPTION
16:00:51 1344  	     WHEN NO_DATA_FOUND THEN
16:00:51 1345  	       RAISE BAD_INVOICE_ID;
16:00:51 1346  	 END;
16:00:51 1347  
16:00:51 1348  	 -- Needs to close charges. No refund.
16:00:51 1349  	 FOR f_charge_to_close IN (
16:00:51 1350  	   SELECT CHARGE.ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
16:00:51 1351  	 )
16:00:51 1352  	 LOOP
16:00:51 1353  	   PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
16:00:51 1354  	     in_charge_id	 => f_charge_to_close.ID,
16:00:51 1355  	     in_updated_by	 => in_updated_by,
16:00:51 1356  	     in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
16:00:51 1357  	   );
16:00:51 1358  	 END LOOP;
16:00:51 1359  
16:00:51 1360  	 --FOR f_license_to_cancel IN (
16:00:51 1361  	 --  SELECT LICENSE.ID FROM LICENSE WHERE LICENSE.INVOICE_ID = in_invoice_id AND LICENSE.LICENSE_STATUS_ID = GLOBAL_STATUSES_V20.LICENSE_ACTIVE
16:00:51 1362  	 --)
16:00:51 1363  	 --LOOP
16:00:51 1364  	 --  PROCS_LICENSE_CRU_V20.UPDATE_LICENSE(
16:00:51 1365  	 --    in_license_id	     => f_license_to_cancel.ID,
16:00:51 1366  	 --    in_license_status_id  => GLOBAL_STATUSES_V20.LICENSE_CLOSED,
16:00:51 1367  	 --    in_needs_entitlements => GLOBAL_CONSTANTS_V20.FALSE,
16:00:51 1368  	 --    in_updated_by	     => in_updated_by
16:00:51 1369  	 --  );
16:00:51 1370  	 --END LOOP;
16:00:51 1371  
16:00:51 1372  	 PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
16:00:51 1373  	   in_invoice_id		  => in_invoice_id,
16:00:51 1374  	   in_updated_by		  => in_updated_by,
16:00:51 1375  	   in_invoice_status_id 	  => GLOBAL_STATUSES_V20.INVOICE_CLOSED
16:00:51 1376  	 );
16:00:51 1377  
16:00:51 1378  	 FOR f_transaction_to_close IN (
16:00:51 1379  	   SELECT DISTINCT CHARGE.TRANSACTION_ID AS "ID" FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id
16:00:51 1380  	 )
16:00:51 1381  	 LOOP
16:00:51 1382  	   PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
16:00:51 1383  	     in_transaction_id	      => f_transaction_to_close.ID,
16:00:51 1384  	     in_updated_by	      => in_updated_by,
16:00:51 1385  	     in_transaction_status_id => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
16:00:51 1386  	   );
16:00:51 1387  	 END LOOP;
16:00:51 1388  
16:00:51 1389  EXCEPTION
16:00:51 1390  WHEN BAD_INVOICE_ID THEN
16:00:51 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1392  	   SPROC_NAME, 'No such invoice');
16:00:51 1393  WHEN OTHERS THEN
16:00:51 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1395  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1396  END CLOSE_INVOICE_AS_NOT_COLLECTED;
16:00:51 1397  
16:00:51 1398  /******************************************************************************/
16:00:51 1399  
16:00:51 1400  PROCEDURE GET_SUBSCR_ID_BY_INVOICE_ID (
16:00:51 1401  	 in_invoice_id	     IN NUMBER,
16:00:51 1402  	 out_subscription_id OUT NUMBER
16:00:51 1403  ) AS
16:00:51 1404  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_SUBSCR_ID_BY_INVOICE_ID';
16:00:51 1405  -- VARIABLES
16:00:51 1406  temp_invoice_id NUMBER;
16:00:51 1407  -- EXCEPTIONS
16:00:51 1408  BAD_INVOICE_ID		 EXCEPTION;
16:00:51 1409  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:00:51 1410  BEGIN
16:00:51 1411  
16:00:51 1412  	 BEGIN
16:00:51 1413  	   SELECT
16:00:51 1414  	     INVOICE.ID into temp_invoice_id
16:00:51 1415  	   FROM
16:00:51 1416  	     INVOICE
16:00:51 1417  	   WHERE
16:00:51 1418  	     INVOICE.ID = in_invoice_id;
16:00:51 1419  	   EXCEPTION
16:00:51 1420  	     WHEN NO_DATA_FOUND THEN
16:00:51 1421  	       RAISE BAD_INVOICE_ID;
16:00:51 1422  	 END;
16:00:51 1423  
16:00:51 1424  	 BEGIN
16:00:51 1425  	   SELECT DISTINCT
16:00:51 1426  	     LICENSE.SUBSCRIPTION_ID into out_subscription_id
16:00:51 1427  	   FROM
16:00:51 1428  	     LICENSE
16:00:51 1429  	   WHERE
16:00:51 1430  	     LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 1431  	   EXCEPTION
16:00:51 1432  	     WHEN NO_DATA_FOUND THEN
16:00:51 1433  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:00:51 1434  	 END;
16:00:51 1435  
16:00:51 1436  EXCEPTION
16:00:51 1437  WHEN BAD_INVOICE_ID THEN
16:00:51 1438  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1439  	   SPROC_NAME, 'No such invoice');
16:00:51 1440  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:00:51 1441  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1442  	   SPROC_NAME, 'Could not find subscription for given invoice');
16:00:51 1443  WHEN OTHERS THEN
16:00:51 1444  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1445  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1446  END GET_SUBSCR_ID_BY_INVOICE_ID;
16:00:51 1447  
16:00:51 1448  /******************************************************************************/
16:00:51 1449  
16:00:51 1450  PROCEDURE IS_INVOICE_TAX_EXEMPT (
16:00:51 1451  /*
16:00:51 1452  Throws exceptions:
16:00:51 1453  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1454  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 1455  Return:
16:00:51 1456  	 GLOBAL_CONSTANTS_V20.TRUE if ACCOUNT.EXEMPT_ID is not null
16:00:51 1457  	 GLOBAL_CONSTANTS_V20.FALSE else
16:00:51 1458  */
16:00:51 1459  	 in_invoice_id	   IN NUMBER,
16:00:51 1460  	 out_is_tax_exempt OUT NUMBER
16:00:51 1461  ) AS
16:00:51 1462  SPROC_NAME CONSTANT VARCHAR2(21) := 'IS_INVOICE_TAX_EXEMPT';
16:00:51 1463  -- VARIABLES
16:00:51 1464  var_is_tax_exempt INVOICE.TAX_EXEMPT_ID%TYPE;
16:00:51 1465  -- EXCEPTIONS
16:00:51 1466  BAD_INVOICE_ID EXCEPTION;
16:00:51 1467  BEGIN
16:00:51 1468  
16:00:51 1469  	 BEGIN
16:00:51 1470  	   SELECT
16:00:51 1471  	     INVOICE.TAX_EXEMPT_ID into var_is_tax_exempt
16:00:51 1472  	   FROM
16:00:51 1473  	     INVOICE
16:00:51 1474  	   WHERE
16:00:51 1475  	     INVOICE.ID = in_invoice_id;
16:00:51 1476  	   EXCEPTION
16:00:51 1477  	     WHEN NO_DATA_FOUND THEN
16:00:51 1478  	       RAISE BAD_INVOICE_ID;
16:00:51 1479  	 END;
16:00:51 1480  
16:00:51 1481  	 IF var_is_tax_exempt IS NULL THEN
16:00:51 1482  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 1483  	 ELSE
16:00:51 1484  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 1485  	 END IF;
16:00:51 1486  
16:00:51 1487  EXCEPTION
16:00:51 1488  WHEN BAD_INVOICE_ID THEN
16:00:51 1489  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1490  	   SPROC_NAME, 'No such invoice');
16:00:51 1491  WHEN OTHERS THEN
16:00:51 1492  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1493  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1494  END IS_INVOICE_TAX_EXEMPT;
16:00:51 1495  
16:00:51 1496  /******************************************************************************/
16:00:51 1497  
16:00:51 1498  PROCEDURE GET_INVOICE_BY_TRNS_ORDER_ID (
16:00:51 1499  	 in_order_id  IN TRANSACTION.ORDER_ID%TYPE,
16:00:51 1500  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1501  ) AS
16:00:51 1502  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_INVOICE_BY_TRNS_ORDER_ID';
16:00:51 1503  -- VARIABLE
16:00:51 1504  temp_order_id TRANSACTION.ORDER_ID%TYPE;
16:00:51 1505  -- EXCEPTIONS
16:00:51 1506  BAD_ORDER_ID EXCEPTION;
16:00:51 1507  CAN_NOT_FIND_INVOICE EXCEPTION;
16:00:51 1508  BEGIN
16:00:51 1509  
16:00:51 1510  	 OPEN out_result_set FOR
16:00:51 1511  	   SELECT DISTINCT
16:00:51 1512  	     CHARGE.INVOICE_ID
16:00:51 1513  	   FROM
16:00:51 1514  	     CHARGE
16:00:51 1515  	   INNER JOIN
16:00:51 1516  	     TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID
16:00:51 1517  	   WHERE
16:00:51 1518  	     TRANSACTION.ORDER_ID = in_order_id;
16:00:51 1519  
16:00:51 1520  EXCEPTION
16:00:51 1521  WHEN BAD_ORDER_ID THEN
16:00:51 1522  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1523  	   SPROC_NAME, 'No such transaction');
16:00:51 1524  WHEN CAN_NOT_FIND_INVOICE THEN
16:00:51 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1526  	   SPROC_NAME, 'Could not find invoice for given order id');
16:00:51 1527  WHEN OTHERS THEN
16:00:51 1528  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1529  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1530  END GET_INVOICE_BY_TRNS_ORDER_ID;
16:00:51 1531  
16:00:51 1532  /******************************************************************************/
16:00:51 1533  
16:00:51 1534  PROCEDURE GET_INVOICE_BY_ID (
16:00:51 1535  	 in_invoice_id	IN NUMBER,
16:00:51 1536  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1537  ) AS
16:00:51 1538  SPROC_NAME CONSTANT VARCHAR2(17) := 'GET_INVOICE_BY_ID';
16:00:51 1539  -- VARIABLE
16:00:51 1540  temp_invoice_id NUMBER;
16:00:51 1541  -- EXCEPTIONS
16:00:51 1542  BAD_INVOCIE_ID EXCEPTION;
16:00:51 1543  BEGIN
16:00:51 1544  
16:00:51 1545  	 BEGIN
16:00:51 1546  	   SELECT
16:00:51 1547  	     INVOICE.ID into temp_invoice_id
16:00:51 1548  	   FROM
16:00:51 1549  	     INVOICE
16:00:51 1550  	   WHERE
16:00:51 1551  	     INVOICE.ID = in_invoice_id;
16:00:51 1552  	   EXCEPTION
16:00:51 1553  	     WHEN NO_DATA_FOUND THEN
16:00:51 1554  	       RAISE BAD_INVOCIE_ID;
16:00:51 1555  	 END;
16:00:51 1556  
16:00:51 1557  	 OPEN out_result_set FOR
16:00:51 1558  	 SELECT
16:00:51 1559  	   INVOICE.ID,
16:00:51 1560  	   INVOICE.INVOICE_STATUS_ID,
16:00:51 1561  	   INVOICE.TAX_EXEMPT_ID,
16:00:51 1562  	   INVOICE.UPDATE_DATE,
16:00:51 1563  	   INVOICE.UPDATED_BY,
16:00:51 1564  	   INVOICE.CREATE_DATE,
16:00:51 1565  	   INVOICE.CREATED_BY
16:00:51 1566  	 FROM
16:00:51 1567  	   INVOICE
16:00:51 1568  	 WHERE
16:00:51 1569  	   INVOICE.ID = in_invoice_id;
16:00:51 1570  
16:00:51 1571  EXCEPTION
16:00:51 1572  WHEN BAD_INVOCIE_ID THEN
16:00:51 1573  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1574  	   SPROC_NAME, 'No such invoice');
16:00:51 1575  WHEN OTHERS THEN
16:00:51 1576  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1577  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1578  END GET_INVOICE_BY_ID;
16:00:51 1579  
16:00:51 1580  /******************************************************************************/
16:00:51 1581  
16:00:51 1582  PROCEDURE GET_IS_TAX_CALCULATION_NEEDED (
16:00:51 1583  	 in_invoice_id		       IN NUMBER,
16:00:51 1584  	 out_is_tax_calculation_needed OUT NUMBER
16:00:51 1585  ) AS
16:00:51 1586  SPROC_NAME CONSTANT VARCHAR2(29) := 'GET_IS_TAX_CALCULATION_NEEDED';
16:00:51 1587  BEGIN
16:00:51 1588  
16:00:51 1589  	 SELECT
16:00:51 1590  	   I.IS_TAX_CALCULATION_NEEDED into out_is_tax_calculation_needed
16:00:51 1591  	 FROM
16:00:51 1592  	   INVOICE I
16:00:51 1593  	 WHERE
16:00:51 1594  	   I.ID = in_invoice_id;
16:00:51 1595  
16:00:51 1596  EXCEPTION
16:00:51 1597  WHEN NO_DATA_FOUND THEN
16:00:51 1598  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1599  	   SPROC_NAME, 'No such invoice');
16:00:51 1600  WHEN OTHERS THEN
16:00:51 1601  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1602  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1603  END GET_IS_TAX_CALCULATION_NEEDED;
16:00:51 1604  
16:00:51 1605  /******************************************************************************/
16:00:51 1606  
16:00:51 1607  PROCEDURE SET_IS_TAX_CALCULATION_NEEDED (
16:00:51 1608  	 in_invoice_id		      IN NUMBER,
16:00:51 1609  	 in_updated_by		      IN VARCHAR2,
16:00:51 1610  	 in_is_tax_calculation_needed IN NUMBER
16:00:51 1611  ) AS
16:00:51 1612  SPROC_NAME CONSTANT VARCHAR2(29) := 'SET_IS_TAX_CALCULATION_NEEDED';
16:00:51 1613  -- VARIABLES
16:00:51 1614  temp_invoice_id	      NUMBER;
16:00:51 1615  -- EXCEPTIONS
16:00:51 1616  BAD_INVOICE_ID	      EXCEPTION;
16:00:51 1617  CAN_NOT_UPDATE_INVOCIE EXCEPTION;
16:00:51 1618  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 1619  BEGIN
16:00:51 1620  
16:00:51 1621  	 BEGIN
16:00:51 1622  	   SELECT
16:00:51 1623  	     i.id into temp_invoice_id
16:00:51 1624  	   FROM
16:00:51 1625  	     invoice i
16:00:51 1626  	   WHERE
16:00:51 1627  	     i.id = in_invoice_id;
16:00:51 1628  	   EXCEPTION
16:00:51 1629  	     WHEN NO_DATA_FOUND THEN
16:00:51 1630  	       RAISE BAD_INVOICE_ID;
16:00:51 1631  	 END;
16:00:51 1632  
16:00:51 1633  	 BEGIN
16:00:51 1634  	   PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
16:00:51 1635  	     in_invoice_id => in_invoice_id,
16:00:51 1636  	     in_updated_by => in_updated_by,
16:00:51 1637  	     in_is_tax_calculation_needed => in_is_tax_calculation_needed
16:00:51 1638  	   );
16:00:51 1639  	   EXCEPTION
16:00:51 1640  	     WHEN OTHERS THEN
16:00:51 1641  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1642  	       RAISE CAN_NOT_UPDATE_INVOCIE;
16:00:51 1643  	 END;
16:00:51 1644  
16:00:51 1645  EXCEPTION
16:00:51 1646  WHEN BAD_INVOICE_ID THEN
16:00:51 1647  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1648  	   SPROC_NAME, 'No such invoice');
16:00:51 1649  WHEN CAN_NOT_UPDATE_INVOCIE THEN
16:00:51 1650  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1651  	   SPROC_NAME, 'Could not update invoice', EXCEPTION_MESSAGE);
16:00:51 1652  WHEN OTHERS THEN
16:00:51 1653  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1654  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1655  END SET_IS_TAX_CALCULATION_NEEDED;
16:00:51 1656  
16:00:51 1657  /******************************************************************************/
16:00:51 1658  
16:00:51 1659  PROCEDURE REFUND_INVOICE (
16:00:51 1660  	 in_invoice_id	    IN NUMBER,
16:00:51 1661  	 in_refund_amount   IN NUMBER,
16:00:51 1662  	 in_note	    IN VARCHAR2,
16:00:51 1663  	 in_created_by	    IN VARCHAR2,
16:00:51 1664  	 out_charge_id	    OUT NUMBER
16:00:51 1665  ) AS
16:00:51 1666  SPROC_NAME CONSTANT VARCHAR2(14) := 'REFUND_INVOICE';
16:00:51 1667  -- VARIABLES
16:00:51 1668  var_invoice_status_id  NUMBER;
16:00:51 1669  var_subscription_id    NUMBER;
16:00:51 1670  var_account_id	      NUMBER;
16:00:51 1671  var_group_id	      NUMBER;
16:00:51 1672  var_account_status_id  NUMBER;
16:00:51 1673  var_new_transaction_id NUMBER;
16:00:51 1674  var_instrument_type_id NUMBER;
16:00:51 1675  var_instrument_id      NUMBER;
16:00:51 1676  var_new_charge_id      NUMBER;
16:00:51 1677  var_invoice_amount     NUMBER(10,2);
16:00:51 1678  var_refunds_before     NUMBER(10,2);
16:00:51 1679  var_charges_amount     NUMBER(10,2);
16:00:51 1680  -- EXCEPTIONS
16:00:51 1681  CAN_NOT_FIND_SUBSCR_OR_GC     EXCEPTION;
16:00:51 1682  ACCOUNT_IS_FROZEN	     EXCEPTION;
16:00:51 1683  BAD_INVOICE_ID		     EXCEPTION;
16:00:51 1684  CAN_NOT_CREATE_TRANSACTION    EXCEPTION;
16:00:51 1685  CAN_NOT_CREATE_CHARGE	     EXCEPTION;
16:00:51 1686  CAN_NOT_CALC_INVOICE_AMOUNT   EXCEPTION;
16:00:51 1687  REFUND_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:00:51 1688  CAN_NOT_ANNOTATE_SUBSCRIPTION EXCEPTION;
16:00:51 1689  TOT_REF_IS_GREATER_THAN_ANOUNT EXCEPTION;
16:00:51 1690  INVOICE_IS_NOT_CLOSED	     EXCEPTION;
16:00:51 1691  TOT_REF_IS_GRATER_THAN_CHARGES EXCEPTION;
16:00:51 1692  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:00:51 1693  BEGIN
16:00:51 1694  
16:00:51 1695  	 BEGIN
16:00:51 1696  	   SELECT
16:00:51 1697  	     INVOICE.INVOICE_STATUS_ID into var_invoice_status_id
16:00:51 1698  	   FROM
16:00:51 1699  	     INVOICE
16:00:51 1700  	   WHERE
16:00:51 1701  	     INVOICE.ID = in_invoice_id;
16:00:51 1702  	   EXCEPTION
16:00:51 1703  	     WHEN NO_DATA_FOUND THEN
16:00:51 1704  	       RAISE BAD_INVOICE_ID;
16:00:51 1705  	 END;
16:00:51 1706  
16:00:51 1707  	 -- Get instrument and subscription id if exists
16:00:51 1708  	 BEGIN
16:00:51 1709  	   SELECT
16:00:51 1710  	     SUBSCRIPTION.INSTRUMENT_ID,
16:00:51 1711  	     SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:00:51 1712  	     SUBSCRIPTION.ACCOUNT_ID,
16:00:51 1713  	     SUBSCRIPTION.ID
16:00:51 1714  	     into
16:00:51 1715  	     var_instrument_id,
16:00:51 1716  	     var_instrument_type_id,
16:00:51 1717  	     var_account_id,
16:00:51 1718  	     var_subscription_id
16:00:51 1719  	   FROM
16:00:51 1720  	     SUBSCRIPTION
16:00:51 1721  	     INNER JOIN LICENSE ON SUBSCRIPTION.ID = LICENSE.SUBSCRIPTION_ID
16:00:51 1722  	   WHERE
16:00:51 1723  	     LICENSE.INVOICE_ID = in_invoice_id
16:00:51 1724  	     AND ROWNUM <= 1;
16:00:51 1725  	   EXCEPTION
16:00:51 1726  	     WHEN NO_DATA_FOUND THEN
16:00:51 1727  	       BEGIN
16:00:51 1728  
16:00:51 1729  		 var_subscription_id := NULL;
16:00:51 1730  
16:00:51 1731  		 SELECT
16:00:51 1732  		   CHARGE.INSTRUMENT_ID,
16:00:51 1733  		   CHARGE.INSTRUMENT_TYPE_ID,
16:00:51 1734  		   GIFT_CERTIFICATE.PURCHASER_GROUP_ID
16:00:51 1735  		   into
16:00:51 1736  		   var_instrument_id,
16:00:51 1737  		   var_instrument_type_id,
16:00:51 1738  		   var_group_id
16:00:51 1739  		 FROM
16:00:51 1740  		   INVOICE
16:00:51 1741  		   INNER JOIN CHARGE ON INVOICE.ID = CHARGE.INVOICE_ID
16:00:51 1742  		   INNER JOIN GIFT_CERTIFICATE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:00:51 1743  		 WHERE
16:00:51 1744  		   INVOICE.ID = in_invoice_id
16:00:51 1745  		   AND ROWNUM <= 1;
16:00:51 1746  
16:00:51 1747  		 SELECT
16:00:51 1748  		   ACCOUNT.ID into var_account_id
16:00:51 1749  		 FROM
16:00:51 1750  		   ACCOUNT
16:00:51 1751  		 WHERE
16:00:51 1752  		   ACCOUNT.GROUP_ID = var_group_id;
16:00:51 1753  
16:00:51 1754  		 EXCEPTION
16:00:51 1755  		   WHEN NO_DATA_FOUND THEN
16:00:51 1756  		     RAISE CAN_NOT_FIND_SUBSCR_OR_GC;
16:00:51 1757  	       END;
16:00:51 1758  	 END;
16:00:51 1759  
16:00:51 1760  	 -- Check account status. It should not to be frozen
16:00:51 1761  	 SELECT
16:00:51 1762  	   ACCOUNT.ACCOUNT_STATUS_ID into var_account_status_id
16:00:51 1763  	 FROM
16:00:51 1764  	   ACCOUNT
16:00:51 1765  	 WHERE
16:00:51 1766  	   ACCOUNT.ID = var_account_id;
16:00:51 1767  
16:00:51 1768  	 IF var_account_status_id = GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
16:00:51 1769  	   RAISE ACCOUNT_IS_FROZEN;
16:00:51 1770  	 END IF;
16:00:51 1771  
16:00:51 1772  	 IF var_invoice_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
16:00:51 1773  	   RAISE INVOICE_IS_NOT_CLOSED;
16:00:51 1774  	 END IF;
16:00:51 1775  
16:00:51 1776  	 BEGIN
16:00:51 1777  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
16:00:51 1778  	     in_invoice_id => in_invoice_id,
16:00:51 1779  	     out_amount    => var_invoice_amount
16:00:51 1780  	   );
16:00:51 1781  	   EXCEPTION
16:00:51 1782  	     WHEN OTHERS THEN
16:00:51 1783  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1784  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:00:51 1785  	 END;
16:00:51 1786  
16:00:51 1787  	 IF ( in_refund_amount > var_invoice_amount ) THEN
16:00:51 1788  	   RAISE REFUND_IS_GREATER_THAN_ANOUNT;
16:00:51 1789  	 END IF;
16:00:51 1790  
16:00:51 1791  	 SELECT /*+ STAR_TRANSFORMATION */
16:00:51 1792  	   SUM(CHARGE.CHARGE_AMOUNT) into var_refunds_before
16:00:51 1793  	 FROM
16:00:51 1794  	   CHARGE
16:00:51 1795  	 WHERE
16:00:51 1796  	   CHARGE.INVOICE_ID = in_invoice_id
16:00:51 1797  	   AND (
16:00:51 1798  	     CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:51 1799  	     OR (
16:00:51 1800  	       CHARGE.CHARGE_STATUS_ID = GLOBAL_STATUSES_V20.CHARGE_PROCESSED
16:00:51 1801  	       AND EXISTS (
16:00:51 1802  		 SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:51 1803  	       )
16:00:51 1804  	     )
16:00:51 1805  	   )
16:00:51 1806  	   AND CHARGE.CHARGE_AMOUNT < 0;
16:00:51 1807  
16:00:51 1808  	 -- Refunds are negative
16:00:51 1809  	 IF var_refunds_before IS NULL THEN var_refunds_before := 0; END IF;
16:00:51 1810  	 var_refunds_before := 0 - var_refunds_before;
16:00:51 1811  
16:00:51 1812  	 var_charges_amount := 0;
16:00:51 1813  
16:00:51 1814  	 FOR f_processed_charges IN (
16:00:51 1815  	   SELECT
16:00:51 1816  	     CHARGE.CHARGE_AMOUNT
16:00:51 1817  	   FROM
16:00:51 1818  	     CHARGE
16:00:51 1819  	   WHERE
16:00:51 1820  	     CHARGE.INVOICE_ID = in_invoice_id
16:00:51 1821  	     AND CHARGE.CHARGE_AMOUNT > 0
16:00:51 1822  	     AND CHARGE.CHARGE_STATUS_ID IN (SELECT GLOBAL_STATUSES_V20.CHARGE_PROCESSED FROM DUAL)
16:00:51 1823  	     AND EXISTS (SELECT 1 FROM TRANSACTION_ATTEMPT ta where ta.transaction_id = CHARGE.TRANSACTION_ID and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS)
16:00:51 1824  	 )
16:00:51 1825  	 LOOP
16:00:51 1826  	   var_charges_amount := var_charges_amount + f_processed_charges.CHARGE_AMOUNT;
16:00:51 1827  	 END LOOP;
16:00:51 1828  
16:00:51 1829  	 IF (in_refund_amount + var_refunds_before > var_invoice_amount) THEN
16:00:51 1830  	   RAISE TOT_REF_IS_GREATER_THAN_ANOUNT;
16:00:51 1831  	 END IF;
16:00:51 1832  
16:00:51 1833  	 IF (in_refund_amount + var_refunds_before > var_charges_amount) THEN
16:00:51 1834  	   RAISE TOT_REF_IS_GRATER_THAN_CHARGES;
16:00:51 1835  	 END IF;
16:00:51 1836  
16:00:51 1837  	 BEGIN
16:00:51 1838  	   PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:51 1839  	     in_transaction_id	       => NULL,
16:00:51 1840  	     in_status_id	       => GLOBAL_STATUSES_V20.TRANSACTION_PREPARE,
16:00:51 1841  	     in_amount		       => -in_refund_amount,
16:00:51 1842  	     in_created_by	       => in_created_by,
16:00:51 1843  	     in_order_id	       => NULL,
16:00:51 1844  	     in_is_refund	       => GLOBAL_CONSTANTS_V20.TRUE,
16:00:51 1845  	     in_transaction_type_code  => 'REFUND',
16:00:51 1846  	     out_transaction_id        => var_new_transaction_id
16:00:51 1847  	   );
16:00:51 1848  	   EXCEPTION
16:00:51 1849  	     WHEN OTHERS THEN
16:00:51 1850  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1851  	       RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:51 1852  	 END;
16:00:51 1853  
16:00:51 1854  	 BEGIN
16:00:51 1855  	   PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:51 1856  	     in_invoice_id	   => in_invoice_id,
16:00:51 1857  	     in_transaction_id	   => var_new_transaction_id,
16:00:51 1858  	     in_instrument_type_id => var_instrument_type_id,
16:00:51 1859  	     in_instrument_id	   => var_instrument_id,
16:00:51 1860  	     in_charge_amount	   => -in_refund_amount,
16:00:51 1861  	     in_created_by	   => in_created_by,
16:00:51 1862  	     in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:51 1863  	     out_charge_id	   => var_new_charge_id
16:00:51 1864  	   );
16:00:51 1865  	   EXCEPTION
16:00:51 1866  	     WHEN OTHERS THEN
16:00:51 1867  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1868  	       RAISE CAN_NOT_CREATE_CHARGE;
16:00:51 1869  	 END;
16:00:51 1870  
16:00:51 1871  	 out_charge_id := var_new_charge_id;
16:00:51 1872  
16:00:51 1873  	 IF in_note IS NOT NULL AND var_subscription_id IS NOT NULL THEN
16:00:51 1874  	   BEGIN
16:00:51 1875  	     PROCS_SUBSCRIPTION_V20.ANNOTATE_SUBSCRIPTION(
16:00:51 1876  	       in_subscription_id => var_subscription_id,
16:00:51 1877  	       in_agent_id	  => 0, -- AGENT_ID??
16:00:51 1878  	       in_note		  => in_note,
16:00:51 1879  	       in_created_by	  => in_created_by
16:00:51 1880  	     );
16:00:51 1881  	     EXCEPTION
16:00:51 1882  	       WHEN OTHERS THEN
16:00:51 1883  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1884  		 RAISE CAN_NOT_ANNOTATE_SUBSCRIPTION;
16:00:51 1885  	   END;
16:00:51 1886  	 END IF;
16:00:51 1887  
16:00:51 1888  EXCEPTION
16:00:51 1889  WHEN CAN_NOT_FIND_SUBSCR_OR_GC THEN
16:00:51 1890  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1891  	   SPROC_NAME, 'Could not find subscription or GC for the inovice');
16:00:51 1892  WHEN INVOICE_IS_NOT_CLOSED THEN
16:00:51 1893  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1894  	   SPROC_NAME, 'Invoice is not closed');
16:00:51 1895  WHEN ACCOUNT_IS_FROZEN THEN
16:00:51 1896  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1897  	   SPROC_NAME, 'Could not refund subscription for frozen account');
16:00:51 1898  WHEN BAD_INVOICE_ID THEN
16:00:51 1899  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1900  	   SPROC_NAME, 'No such invoice');
16:00:51 1901  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:00:51 1902  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1903  	   SPROC_NAME, 'Could not calculate invoice amount', EXCEPTION_MESSAGE);
16:00:51 1904  WHEN REFUND_IS_GREATER_THAN_ANOUNT THEN
16:00:51 1905  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1906  	   SPROC_NAME, 'Refund is greater than amount');
16:00:51 1907  WHEN TOT_REF_IS_GREATER_THAN_ANOUNT THEN
16:00:51 1908  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1909  	   SPROC_NAME, 'There were refunds before and sum of all refunds and new refund more than invoice amount');
16:00:51 1910  WHEN TOT_REF_IS_GRATER_THAN_CHARGES THEN
16:00:51 1911  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1912  	   SPROC_NAME, 'Total refund amount is greater than sum of processed charges');
16:00:51 1913  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:51 1914  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1915  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:51 1916  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:51 1917  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1918  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:51 1919  WHEN CAN_NOT_ANNOTATE_SUBSCRIPTION THEN
16:00:51 1920  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1921  	   SPROC_NAME, 'Could not annotate subscription', EXCEPTION_MESSAGE);
16:00:51 1922  WHEN OTHERS THEN
16:00:51 1923  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1924  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1925  END REFUND_INVOICE;
16:00:51 1926  
16:00:51 1927  /******************************************************************************/
16:00:51 1928  
16:00:51 1929  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:00:51 1930  	 in_invoice_id		     IN NUMBER,
16:00:51 1931  	 out_order_id		     OUT VARCHAR2,
16:00:51 1932  	 out_external_transaction_id OUT VARCHAR2
16:00:51 1933  ) AS
16:00:51 1934  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_PEYMENT_INFO_BY_INVOICE_ID';
16:00:51 1935  -- VARIABLES
16:00:51 1936  temp_invoice_id number;
16:00:51 1937  cnt_matched_instr number := 0;
16:00:51 1938  -- EXCEPTIONS
16:00:51 1939  BAD_INVOICE_ID EXCEPTION;
16:00:51 1940  BEGIN
16:00:51 1941  
16:00:51 1942  	 BEGIN
16:00:51 1943  	   SELECT
16:00:51 1944  	     i.id into temp_invoice_id
16:00:51 1945  	   from
16:00:51 1946  	     invoice i
16:00:51 1947  	   where
16:00:51 1948  	     i.id = in_invoice_id;
16:00:51 1949  	   EXCEPTION
16:00:51 1950  	     WHEN NO_DATA_FOUND THEN
16:00:51 1951  	       RAISE BAD_INVOICE_ID;
16:00:51 1952  	 END;
16:00:51 1953  
16:00:51 1954  	 select
16:00:51 1955  	   count(1) into cnt_matched_instr
16:00:51 1956  	 from
16:00:51 1957  	   charge ch
16:00:51 1958  	 inner join
16:00:51 1959  	   subscription s
16:00:51 1960  	 on
16:00:51 1961  	   s.instrument_id = ch.instrument_id
16:00:51 1962  	 where
16:00:51 1963  	   ch.invoice_id = in_invoice_id;
16:00:51 1964  
16:00:51 1965  	 if cnt_matched_instr = 0 then
16:00:51 1966  	   out_external_transaction_id := null;
16:00:51 1967  	   out_order_id := null;
16:00:51 1968  	   return;
16:00:51 1969  	 end if;
16:00:51 1970  
16:00:51 1971  	 SELECT
16:00:51 1972  	   t.order_id,
16:00:51 1973  	   ta.external_transaction_id
16:00:51 1974  	   into
16:00:51 1975  	   out_order_id,
16:00:51 1976  	   out_external_transaction_id
16:00:51 1977  	 from
16:00:51 1978  	   charge ch
16:00:51 1979  	   inner join transaction t on ch.transaction_id = t.id
16:00:51 1980  	   inner join transaction_attempt ta on ta.transaction_id = t.id
16:00:51 1981  	 where
16:00:51 1982  	   ch.invoice_id = in_invoice_id
16:00:51 1983  	   and ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:51 1984  	   and ch.charge_amount > 0; -- We are not creating charges for the 0-amount invoices
16:00:51 1985  
16:00:51 1986  EXCEPTION
16:00:51 1987  WHEN BAD_INVOICE_ID THEN
16:00:51 1988  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1989  	   SPROC_NAME, 'No such invoice');
16:00:51 1990  WHEN NO_DATA_FOUND THEN
16:00:51 1991  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1992  	   SPROC_NAME, 'No payment data found');
16:00:51 1993  WHEN OTHERS THEN
16:00:51 1994  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1995  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1996  END GET_PAYMENT_INFO_BY_INVOICE_ID;
16:00:51 1997  
16:00:51 1998  PROCEDURE IS_REVOKE_ENTITLEMENTS(
16:00:51 1999  	 in_invoice_id IN NUMBER,
16:00:51 2000  	 out_is_revoke OUT NUMBER
16:00:51 2001  ) AS
16:00:51 2002  BEGIN
16:00:51 2003  	 SELECT DECODE(COUNT(1), 0, GLOBAL_CONSTANTS_V20.FALSE, GLOBAL_CONSTANTS_V20.TRUE)
16:00:51 2004  	   into out_is_revoke
16:00:51 2005  	 FROM
16:00:51 2006  	   offer_chain oc,
16:00:51 2007  	   subscription s,
16:00:51 2008  	   license l,
16:00:51 2009  	   invoice i
16:00:51 2010  	 where
16:00:51 2011  	   oc.id = s.offer_chain_id and
16:00:51 2012  	   s.id = l.subscription_id and
16:00:51 2013  	   l.invoice_id = i.id and
16:00:51 2014  	   oc.revoke_entitlements = GLOBAL_CONSTANTS_V20.TRUE and
16:00:51 2015  	   i.id = in_invoice_id and
16:00:51 2016  	   rownum < 2
16:00:51 2017  	 ;
16:00:51 2018  END IS_REVOKE_ENTITLEMENTS;
16:00:51 2019  
16:00:51 2020  END PROCS_INVOICE_V20;
16:00:51 2021  .
16:00:51 SQL> /

Package body created.

Elapsed: 00:00:00.17
16:00:51 SQL> 
16:00:51 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_FIN_INSTRUMENTS_V20" AS
16:00:51   2  
16:00:51   3  PROCEDURE UPDATE_GC_STATUS_BY_INVOICE(
16:00:51   4  	  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:51   5  	  in_status_id	IN GIFT_CERTIFICATE_STATUS.ID%TYPE,
16:00:51   6  	  in_updater	IN GIFT_CERTIFICATE.UPDATED_BY%TYPE)
16:00:51   7  AS
16:00:51   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_GC_STATUS_BY_INVOICE';
16:00:51   9  BEGIN
16:00:51  10  	FOR rec IN (SELECT id FROM Gift_Certificate WHERE Purchase_Invoice_Id = in_invoice_id) LOOP
16:00:51  11  	  PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE (
16:00:51  12  	    in_gift_certificate_id	  => rec.Id,
16:00:51  13  	    in_gift_certificate_status_id => in_status_id,
16:00:51  14  	    in_updated_by		  => in_updater
16:00:51  15  	  );
16:00:51  16  	END LOOP;
16:00:51  17  END UPDATE_GC_STATUS_BY_INVOICE;
16:00:51  18  
16:00:51  19  PROCEDURE IS_INVOICE_FOR_REDEEMED_GC (
16:00:51  20  	in_invoice_id		     IN NUMBER,
16:00:51  21  	out_is_invoice_for_redeem_gc OUT NUMBER
16:00:51  22  ) AS
16:00:51  23  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_INVOICE_FOR_REDEEMED_GC';
16:00:51  24  var_is_for_gc NUMBER;
16:00:51  25  BEGIN
16:00:51  26  	SELECT
16:00:51  27  	  count(1) into var_is_for_gc
16:00:51  28  	FROM GIFT_CERTIFICATE GC
16:00:51  29  	WHERE GC.PURCHASE_INVOICE_ID = in_invoice_id AND
16:00:51  30  	      GC.GIFT_CERTIFICATE_STATUS_ID = 2;
16:00:51  31  
16:00:51  32  	IF var_is_for_gc > 0 THEN
16:00:51  33  	  out_is_invoice_for_redeem_gc := 1;
16:00:51  34  	ELSE
16:00:51  35  	  out_is_invoice_for_redeem_gc := 0;
16:00:51  36  	END IF;
16:00:51  37  END IS_INVOICE_FOR_REDEEMED_GC;
16:00:51  38  
16:00:51  39  PROCEDURE GET_UNREDEEMED_GCS (
16:00:51  40  	out_result_set		OUT SYS_REFCURSOR,
16:00:51  41  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:51  42  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:51  43  	in_process_name IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:51  44  ) AS
16:00:51  45  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_UNREDEEMED_GCS';
16:00:51  46  BEGIN
16:00:51  47  	OPEN out_result_set FOR
16:00:51  48  SELECT * FROM
16:00:51  49  (
16:00:51  50  	SELECT
16:00:51  51  	  gc.EXPIRATION_DATE,
16:00:51  52  	  ch.name,
16:00:51  53  	  ch.id offer_chain_id,
16:00:51  54  	  gc.sender_email,
16:00:51  55  	  gc.sender_name,
16:00:51  56  	  gc.recipient_email,
16:00:51  57  	  gc.recipient_name,
16:00:51  58  	  gc.purchase_date,
16:00:51  59  	  gc.redemption_date,
16:00:51  60  	  gc.purchaser_group_id,
16:00:51  61  	  gc.redeemer_group_id,
16:00:51  62  	  gc.code,
16:00:51  63  	  gc.gift_message,
16:00:51  64  	  gc.recipient_notify_date,
16:00:51  65  	  gc.id
16:00:51  66  	FROM
16:00:51  67  	  GIFT_CERTIFICATE gc,
16:00:51  68  	  OFFER_CHAIN ch
16:00:51  69  	WHERE
16:00:51  70  	  ch.id = gc.offer_chain_id
16:00:51  71  	  AND gc.RECIPIENT_NOTIFY_DATE is not null
16:00:51  72  	  AND gc.RECIPIENT_NOTIFY_DATE >= (sysdate - in_hours_number/24)
16:00:51  73  	  AND gc.RECIPIENT_NOTIFY_DATE < (sysdate - (in_hours_number-72)/24)
16:00:51  74  	  AND gc.redeemer_group_id is null
16:00:51  75  	  AND NOT EXISTS(
16:00:51  76  	    SELECT NULL
16:00:51  77  	    FROM PROCESS_RETRY_THROTTLE
16:00:51  78  	    WHERE PROCESS_NAME = in_process_name
16:00:51  79  	      AND GENERIC_ID = gc.id
16:00:51  80  	  ) AND EXISTS(
16:00:51  81  	    SELECT NULL
16:00:51  82  	    FROM
16:00:51  83  	      charge c,
16:00:51  84  	      transaction_attempt ta,
16:00:51  85  	      transaction t
16:00:51  86  	    WHERE
16:00:51  87  	      c.invoice_id = gc.purchase_invoice_id and
16:00:51  88  	      c.transaction_id = t.id and
16:00:51  89  	      t.id = ta.transaction_id and
16:00:51  90  	      ta.transaction_attempt_status_id = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS
16:00:51  91  	  ) AND NOT EXISTS (
16:00:51  92  	    SELECT NULL
16:00:51  93  	    FROM
16:00:51  94  	      charge c,
16:00:51  95  	      transaction t
16:00:51  96  	    WHERE
16:00:51  97  	      c.invoice_id = gc.purchase_invoice_id and
16:00:51  98  	      c.transaction_id = t.id and
16:00:51  99  	      t.is_refund = GLOBAL_CONSTANTS_V20.TRUE
16:00:51 100  	  )
16:00:51 101  	  AND ROWNUM <= in_num_rows*10
16:00:51 102  	  ORDER BY dbms_random.value
16:00:51 103  ) WHERE
16:00:51 104  	  ROWNUM <= in_num_rows;
16:00:51 105  EXCEPTION
16:00:51 106  WHEN OTHERS THEN
16:00:51 107  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 108  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 109  END GET_UNREDEEMED_GCS;
16:00:51 110  
16:00:51 111  PROCEDURE ADD_CREDIT_CARD (
16:00:51 112  /*
16:00:51 113  Throws exceptions:
16:00:51 114  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 115  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 116  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:51 117  */
16:00:51 118  	in_group_id		  IN NUMBER,
16:00:51 119  	in_updated_by		  IN VARCHAR2,
16:00:51 120  	in_instrument_name	  IN VARCHAR2,
16:00:51 121  	in_card_holder_name	  IN VARCHAR2,
16:00:51 122  	in_street_address	  IN VARCHAR2,
16:00:51 123  	in_street_address2	  IN VARCHAR2,
16:00:51 124  	in_state		  IN VARCHAR2,
16:00:51 125  	in_city 		  IN VARCHAR2,
16:00:51 126  	in_postal_code		  IN VARCHAR2,
16:00:51 127  	in_country		  IN CHAR,
16:00:51 128  	in_last_four_cc 	  IN VARCHAR2,
16:00:51 129  	in_expiration_date	  IN DATE,
16:00:51 130  	in_credit_card_type_id	  IN NUMBER,
16:00:51 131  	in_token		  IN VARCHAR2,
16:00:51 132  	in_chase_profile_id	  IN VARCHAR2,
16:00:51 133  	in_credit_card_status_id  IN NUMBER,
16:00:51 134  	in_private_first_name	  IN VARCHAR2,
16:00:51 135  	in_private_last_name	  IN VARCHAR2,
16:00:51 136  	out_credit_card_id	  OUT NUMBER
16:00:51 137  ) AS
16:00:51 138  SPROC_NAME	     CONSTANT VARCHAR2(15) := 'ADD_CREDIT_CARD';
16:00:51 139  -- VARIABLES
16:00:51 140  var_account_id	      NUMBER;
16:00:51 141  var_account_status      NUMBER;
16:00:51 142  var_credit_card_id      NUMBER;
16:00:51 143  temp_old_credit_card_id NUMBER;
16:00:51 144  -- EXCEPTIONS
16:00:51 145  BAD_ACCOUNT_STATUS	 EXCEPTION;
16:00:51 146  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
16:00:51 147  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
16:00:51 148  BAD_OLD_CREDIT_CARD	 EXCEPTION;
16:00:51 149  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:00:51 150  ----- DELETE NEXT LINES WHEN UI WILL SUPPORT MANY CC PER ACCOUNT
16:00:51 151  var_charges_set		SYS_REFCURSOR;
16:00:51 152  var_charge_id		NUMBER;
16:00:51 153  var_charge_invoice_id	NUMBER;
16:00:51 154  var_charge_transaction_id NUMBER;
16:00:51 155  var_charge_amount 	NUMBER(10,2);
16:00:51 156  temp_out_charge_id	NUMBER;
16:00:51 157  temp_out_transaction_id	NUMBER;
16:00:51 158  var_order_id			VARCHAR2(1024);
16:00:51 159  BEGIN
16:00:51 160  
16:00:51 161  	-- Get account id
16:00:51 162  	-- Get account status
16:00:51 163  	SELECT
16:00:51 164  	  ACCOUNT.ID,
16:00:51 165  	  ACCOUNT.ACCOUNT_STATUS_ID
16:00:51 166  	  into
16:00:51 167  	  var_account_id,
16:00:51 168  	  var_account_status
16:00:51 169  	FROM
16:00:51 170  	  ACCOUNT
16:00:51 171  	WHERE
16:00:51 172  	  ACCOUNT.GROUP_ID = in_group_id;
16:00:51 173  
16:00:51 174  	SELECT
16:00:51 175  	  CC_ID_SEQ.nextVal into var_credit_card_id
16:00:51 176  	FROM DUAL;
16:00:51 177  
16:00:51 178  	-- Insert new row in CREDIT_CARD table
16:00:51 179  	PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_CREDIT_CARD(
16:00:51 180  	  out_credit_card_id	      => var_credit_card_id,
16:00:51 181  	  in_account_id 	      => var_account_id,
16:00:51 182  	  in_instrument_name	      => in_instrument_name,
16:00:51 183  	  in_private_card_holder_name => in_card_holder_name,
16:00:51 184  	  in_private_street_address   => in_street_address,
16:00:51 185  	  in_private_street_address2  => in_street_address2,
16:00:51 186  	  in_state		      => in_state,
16:00:51 187  	  in_city		      => in_city,
16:00:51 188  	  in_postal_code	      => in_postal_code,
16:00:51 189  	  in_country		      => in_country,
16:00:51 190  	  in_last_four_cc	      => in_last_four_cc,
16:00:51 191  	  in_expiration_date	      => in_expiration_date,
16:00:51 192  	  in_credit_card_type_id      => in_credit_card_type_id,
16:00:51 193  	  in_secret_token	      => in_token,
16:00:51 194  	  in_chase_profile_id	      => in_chase_profile_id,
16:00:51 195  	  in_created_by 	      => in_updated_by,
16:00:51 196  	  in_credit_card_status_id    => in_credit_card_status_id,
16:00:51 197  	  in_private_first_name       => in_private_first_name,
16:00:51 198  	  in_private_last_name	      => in_private_last_name
16:00:51 199  	);
16:00:51 200  
16:00:51 201  	out_credit_card_id := var_credit_card_id;
16:00:51 202  
16:00:51 203  EXCEPTION
16:00:51 204  WHEN NO_DATA_FOUND THEN
16:00:51 205  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 206  	  SPROC_NAME, 'No such account');
16:00:51 207  WHEN BAD_OLD_CREDIT_CARD THEN
16:00:51 208  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 209  	  SPROC_NAME, 'Bad old credit card id');
16:00:51 210  WHEN BAD_IS_DEFAULT_VALUE THEN
16:00:51 211  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 212  	  SPROC_NAME, 'Bad is_default value');
16:00:51 213  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
16:00:51 214  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 215  	  SPROC_NAME, 'Can not set default finansial instrument', EXCEPTION_MESSAGE);
16:00:51 216  WHEN BAD_ACCOUNT_STATUS THEN
16:00:51 217  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 218  	  SPROC_NAME, 'Account is not active');
16:00:51 219  WHEN OTHERS THEN
16:00:51 220  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 221  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 222  END ADD_CREDIT_CARD;
16:00:51 223  
16:00:51 224  /******************************************************************************/
16:00:51 225  
16:00:51 226  PROCEDURE ADD_PAYPAL (
16:00:51 227  /*
16:00:51 228  Throws exceptions:
16:00:51 229  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 230  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 231  */
16:00:51 232  	in_group_id			IN NUMBER,
16:00:51 233  	in_instrument_name		IN VARCHAR2,
16:00:51 234  	in_private_email_address	IN VARCHAR2,
16:00:51 235  	in_created_by			IN VARCHAR2,
16:00:51 236  	in_paypal_status_id		IN NUMBER,
16:00:51 237  	in_paypal_prvt_street_address	IN VARCHAR2,
16:00:51 238  	in_paypal_prvt_street_address2	IN VARCHAR2,
16:00:51 239  	in_state			IN VARCHAR2,
16:00:51 240  	in_city 			IN VARCHAR2,
16:00:51 241  	in_postal_code			IN VARCHAR2,
16:00:51 242  	in_country			IN CHAR,
16:00:51 243  	in_expiration_date		IN DATE,
16:00:51 244  	in_secret_token 		IN VARCHAR2,
16:00:51 245  	out_paypal_id			OUT NUMBER
16:00:51 246  ) AS
16:00:51 247  SPROC_NAME CONSTANT VARCHAR2(10) := 'ADD_PAYPAL';
16:00:51 248  var_paypal_id NUMBER;
16:00:51 249  var_account_id  NUMBER;
16:00:51 250  -- EXCEPTIONS
16:00:51 251  BAD_GROUP_ID	    EXCEPTION;
16:00:51 252  CAN_NOT_CREATE_PAYPAL EXCEPTION;
16:00:51 253  BAD_PAYPAL_STATUS     EXCEPTION;
16:00:51 254  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:51 255  BEGIN
16:00:51 256  
16:00:51 257  	IF in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_ACTIVE
16:00:51 258  	  AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
16:00:51 259  	  AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_FROZEN THEN
16:00:51 260  	  RAISE BAD_PAYPAL_STATUS;
16:00:51 261  	END IF;
16:00:51 262  
16:00:51 263  	BEGIN
16:00:51 264  	  SELECT
16:00:51 265  	    a.id into var_account_id
16:00:51 266  	  from
16:00:51 267  	    account a
16:00:51 268  	  where
16:00:51 269  	    a.group_id = in_group_id;
16:00:51 270  	  EXCEPTION
16:00:51 271  	    WHEN NO_DATA_FOUND THEN
16:00:51 272  	      RAISE BAD_GROUP_ID;
16:00:51 273  	END;
16:00:51 274  
16:00:51 275  	BEGIN
16:00:51 276  	  PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_PAYPAL(
16:00:51 277  	    out_paypal_id		   => var_paypal_id,
16:00:51 278  	    in_paypal_id		   => NULL,
16:00:51 279  	    in_account_id		   => var_account_id,
16:00:51 280  	    in_instrument_name		   => in_instrument_name,
16:00:51 281  	    in_private_email_address	   => in_private_email_address,
16:00:51 282  	    in_created_by		   => in_created_by,
16:00:51 283  	    in_paypal_status_id 	   => in_paypal_status_id,
16:00:51 284  	    in_paypal_prvt_street_address  => in_paypal_prvt_street_address,
16:00:51 285  	    in_paypal_prvt_street_address2 => in_paypal_prvt_street_address2,
16:00:51 286  	    in_state			   => in_state,
16:00:51 287  	    in_city			   => in_city,
16:00:51 288  	    in_postal_code		   => in_postal_code,
16:00:51 289  	    in_country			   => in_country,
16:00:51 290  	    in_expiration_date		   => in_expiration_date,
16:00:51 291  	    in_secret_token		   => in_secret_token
16:00:51 292  	  );
16:00:51 293  	  EXCEPTION
16:00:51 294  	    WHEN OTHERS THEN
16:00:51 295  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 296  	      RAISE CAN_NOT_CREATE_PAYPAL;
16:00:51 297  	END;
16:00:51 298  
16:00:51 299  	out_paypal_id := var_paypal_id;
16:00:51 300  
16:00:51 301  EXCEPTION
16:00:51 302  WHEN BAD_GROUP_ID THEN
16:00:51 303  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 304  	  SPROC_NAME, 'No such group id');
16:00:51 305  WHEN BAD_PAYPAL_STATUS THEN
16:00:51 306  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 307  	  SPROC_NAME, 'Bad paypal status');
16:00:51 308  WHEN CAN_NOT_CREATE_PAYPAL THEN
16:00:51 309  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 310  	  SPROC_NAME, 'Could not create paypal', EXCEPTION_MESSAGE);
16:00:51 311  WHEN OTHERS THEN
16:00:51 312  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 313  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 314  END ADD_PAYPAL;
16:00:51 315  
16:00:51 316  /******************************************************************************/
16:00:51 317  
16:00:51 318  PROCEDURE DISABLE_CREDIT_CARD (
16:00:51 319  /*
16:00:51 320  Throws exceptions:
16:00:51 321  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 322  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 323  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:51 324  */
16:00:51 325  	in_credit_card_id IN NUMBER,
16:00:51 326  	in_updated_by	  IN VARCHAR2
16:00:51 327  ) AS
16:00:51 328  SPROC_NAME		   CONSTANT VARCHAR2(19) := 'DISABLE_CREDIT_CARD';
16:00:51 329  -- VARIBLES
16:00:51 330  var_account_id		     NUMBER;
16:00:51 331  var_group_id		     NUMBER;
16:00:51 332  var_credit_card_status	     NUMBER;
16:00:51 333  var_pending_transactions_num   NUMBER;
16:00:51 334  var_pending_invoices_num	     NUMBER;
16:00:51 335  current_def_instrument_type_id NUMBER;
16:00:51 336  current_def_instrument_id      NUMBER;
16:00:51 337  -- EXCEPTIONS
16:00:51 338  BAD_CC_STATUS		   EXCEPTION;
16:00:51 339  PENDING_TRANSACTIONS_FOUNDED EXCEPTION;
16:00:51 340  CAN_NOT_GET_DEF_FINANCIAL    EXCEPTION;
16:00:51 341  CAN_NOT_DEL_DEF_FINANCIAL    EXCEPTION;
16:00:51 342  CAN_NOT_DISABLE_CREDIT_CARD  EXCEPTION;
16:00:51 343  EXCEPTION_MESSAGE 	   VARCHAR2(1024);
16:00:51 344  BEGIN
16:00:51 345  
16:00:51 346  	-- Get credit card status
16:00:51 347  	-- Get account id
16:00:51 348  	SELECT
16:00:51 349  	  CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:00:51 350  	  CREDIT_CARD.ACCOUNT_ID
16:00:51 351  	  into
16:00:51 352  	  var_credit_card_status,
16:00:51 353  	  var_account_id
16:00:51 354  	FROM
16:00:51 355  	  CREDIT_CARD
16:00:51 356  	WHERE
16:00:51 357  	  CREDIT_CARD.ID = in_credit_card_id;
16:00:51 358  
16:00:51 359  	-- Check that we can disable this credit card (STUB)
16:00:51 360  	IF F_CAN_DISABLE_CREDIT_CARD(in_credit_card_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 361  	  RAISE CAN_NOT_DISABLE_CREDIT_CARD;
16:00:51 362  	END IF;
16:00:51 363  
16:00:51 364  	-- Get account id
16:00:51 365  	SELECT
16:00:51 366  	  ACCOUNT.GROUP_ID into var_group_id
16:00:51 367  	FROM
16:00:51 368  	  ACCOUNT
16:00:51 369  	WHERE
16:00:51 370  	  ACCOUNT.ID = var_account_id;
16:00:51 371  
16:00:51 372  	-- Card should to be active
16:00:51 373  	IF var_credit_card_status != GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE THEN
16:00:51 374  	  RAISE BAD_CC_STATUS;
16:00:51 375  	END IF;
16:00:51 376  
16:00:51 377  	-- Looking for pending transactions associated with given credit card
16:00:51 378  	SELECT
16:00:51 379  	  COUNT(*) into var_pending_invoices_num
16:00:51 380  	FROM
16:00:51 381  	  CHARGE
16:00:51 382  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:51 383  	WHERE
16:00:51 384  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:51 385  	  AND CHARGE.INSTRUMENT_ID = in_credit_card_id
16:00:51 386  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
16:00:51 387  
16:00:51 388  	IF var_pending_invoices_num > 0 THEN
16:00:51 389  	  RAISE PENDING_TRANSACTIONS_FOUNDED;
16:00:51 390  	END IF;
16:00:51 391  
16:00:51 392  	-- Getting current default financial instrument
16:00:51 393  	BEGIN
16:00:51 394  	  GET_DEF_FINANCIAL_INSTRUMENT(
16:00:51 395  	    in_group_id 	   => var_group_id,
16:00:51 396  	    out_instrument_type_id => current_def_instrument_type_id,
16:00:51 397  	    out_instrument_id	   => current_def_instrument_id
16:00:51 398  	  );
16:00:51 399  	  EXCEPTION
16:00:51 400  	    WHEN OTHERS THEN
16:00:51 401  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 402  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:00:51 403  	END;
16:00:51 404  
16:00:51 405  	-- Checking that credit card is not default
16:00:51 406  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:51 407  	  AND current_def_instrument_id = in_credit_card_id THEN
16:00:51 408  	  BEGIN
16:00:51 409  	    DEL_DEF_FINANCIAL_INSTRUMENT(
16:00:51 410  	      in_group_id => var_group_id
16:00:51 411  	    );
16:00:51 412  	  EXCEPTION
16:00:51 413  	    WHEN OTHERS THEN
16:00:51 414  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 415  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:00:51 416  	  END;
16:00:51 417  	END IF;
16:00:51 418  
16:00:51 419  	-- Update credit card status
16:00:51 420  	PROCS_FIN_INSTRUMENTS_V20.UPDATE_CREDIT_CARD_STATUS(
16:00:51 421  	  in_credit_card_id	   => in_credit_card_id,
16:00:51 422  	  in_updated_by 	   => in_updated_by,
16:00:51 423  	  in_credit_card_status_id => GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
16:00:51 424  	);
16:00:51 425  
16:00:51 426  EXCEPTION
16:00:51 427  WHEN NO_DATA_FOUND THEN
16:00:51 428  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 429  	  SPROC_NAME, 'No such credit card');
16:00:51 430  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:00:51 431  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 432  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
16:00:51 433  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:00:51 434  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 435  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
16:00:51 436  WHEN BAD_CC_STATUS THEN
16:00:51 437  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 438  	  SPROC_NAME, 'Credit card is not active');
16:00:51 439  WHEN PENDING_TRANSACTIONS_FOUNDED THEN
16:00:51 440  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 441  	  SPROC_NAME, 'Account has pending charge which is using this card');
16:00:51 442  WHEN CAN_NOT_DISABLE_CREDIT_CARD THEN
16:00:51 443  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 444  	  SPROC_NAME, 'Could not disable this credit card', EXCEPTION_MESSAGE);
16:00:51 445  WHEN OTHERS THEN
16:00:51 446  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 447  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 448  END DISABLE_CREDIT_CARD;
16:00:51 449  
16:00:51 450  /******************************************************************************/
16:00:51 451  
16:00:51 452  PROCEDURE DISABLE_PAYPAL (
16:00:51 453  /*
16:00:51 454  Throws exceptions:
16:00:51 455  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 456  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 457  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:51 458  */
16:00:51 459  	in_paypal_id  IN NUMBER,
16:00:51 460  	in_updated_by IN VARCHAR2
16:00:51 461  ) AS
16:00:51 462  SPROC_NAME CONSTANT VARCHAR2(14) := 'DISABLE_PAYPAL';
16:00:51 463  -- VARIABLES
16:00:51 464  var_paypal_status_id NUMBER;
16:00:51 465  var_account_id	   NUMBER;
16:00:51 466  var_group_id	   NUMBER;
16:00:51 467  var_pending_invoices_num NUMBER;
16:00:51 468  current_def_instrument_type_id NUMBER;
16:00:51 469  current_def_instrument_id NUMBER;
16:00:51 470  -- EXCEPTIONS
16:00:51 471  BAD_PAYPAL_ID EXCEPTION;
16:00:51 472  PAYPAL_ALREADY_INACTIVE EXCEPTION;
16:00:51 473  PENDING_TRANSACTIONS_FOUND EXCEPTION;
16:00:51 474  CAN_NOT_GET_DEF_FINANCIAL EXCEPTION;
16:00:51 475  CAN_NOT_DEL_DEF_FINANCIAL EXCEPTION;
16:00:51 476  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:51 477  BEGIN
16:00:51 478  
16:00:51 479  	-- Get Paypal status
16:00:51 480  	-- Get account
16:00:51 481  	BEGIN
16:00:51 482  	  SELECT
16:00:51 483  	    PAYPAL.PAYPAL_STATUS_ID,
16:00:51 484  	    PAYPAL.ACCOUNT_ID
16:00:51 485  	    into
16:00:51 486  	    var_paypal_status_id,
16:00:51 487  	    var_account_id
16:00:51 488  	  FROM
16:00:51 489  	    PAYPAL
16:00:51 490  	  WHERE
16:00:51 491  	    PAYPAL.ID = in_paypal_id;
16:00:51 492  	  EXCEPTION
16:00:51 493  	    WHEN NO_DATA_FOUND THEN
16:00:51 494  	      RAISE BAD_PAYPAL_ID;
16:00:51 495  	END;
16:00:51 496  
16:00:51 497  	-- Get group id
16:00:51 498  	SELECT
16:00:51 499  	  ACCOUNT.GROUP_ID into var_group_id
16:00:51 500  	FROM
16:00:51 501  	  ACCOUNT
16:00:51 502  	WHERE
16:00:51 503  	  ACCOUNT.ID = var_account_id;
16:00:51 504  
16:00:51 505  	-- Card should not be disabled
16:00:51 506  	IF var_paypal_status_id = GLOBAL_STATUSES_V20.PAYPAL_INACTIVE THEN
16:00:51 507  	  RAISE PAYPAL_ALREADY_INACTIVE;
16:00:51 508  	END IF;
16:00:51 509  
16:00:51 510  	-- Looking for pending transactions associated with given credit card
16:00:51 511  	SELECT
16:00:51 512  	  COUNT(*) into var_pending_invoices_num
16:00:51 513  	FROM
16:00:51 514  	  CHARGE
16:00:51 515  	  INNER JOIN TRANSACTION ON CHARGE.TRANSACTION_ID = TRANSACTION.ID
16:00:51 516  	WHERE
16:00:51 517  	  CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
16:00:51 518  	  AND CHARGE.INSTRUMENT_ID = in_paypal_id
16:00:51 519  	  AND TRANSACTION.TRANSACTION_STATUS_ID = GLOBAL_STATUSES_V20.TRANSACTION_PENDING;
16:00:51 520  
16:00:51 521  	IF var_pending_invoices_num > 0 THEN
16:00:51 522  	  RAISE PENDING_TRANSACTIONS_FOUND;
16:00:51 523  	END IF;
16:00:51 524  
16:00:51 525  	-- Getting current default financial instrument
16:00:51 526  	BEGIN
16:00:51 527  	  GET_DEF_FINANCIAL_INSTRUMENT(
16:00:51 528  	    in_group_id 	   => var_group_id,
16:00:51 529  	    out_instrument_type_id => current_def_instrument_type_id,
16:00:51 530  	    out_instrument_id	   => current_def_instrument_id
16:00:51 531  	  );
16:00:51 532  	  EXCEPTION
16:00:51 533  	    WHEN OTHERS THEN
16:00:51 534  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 535  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:00:51 536  	END;
16:00:51 537  
16:00:51 538  	-- Checking that credit card is not default
16:00:51 539  	IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
16:00:51 540  	  AND current_def_instrument_id = in_paypal_id THEN
16:00:51 541  	  BEGIN
16:00:51 542  	    DEL_DEF_FINANCIAL_INSTRUMENT(
16:00:51 543  	      in_group_id => var_group_id
16:00:51 544  	    );
16:00:51 545  	  EXCEPTION
16:00:51 546  	    WHEN OTHERS THEN
16:00:51 547  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 548  	      RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:00:51 549  	  END;
16:00:51 550  	END IF;
16:00:51 551  
16:00:51 552  	PROCS_FIN_INSTRUMENTS_V20.UPDATE_PAYPAL_STATUS(
16:00:51 553  	  in_paypal_id	      => in_paypal_id,
16:00:51 554  	  in_updated_by       => in_updated_by,
16:00:51 555  	  in_paypal_status_id => GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
16:00:51 556  	);
16:00:51 557  
16:00:51 558  EXCEPTION
16:00:51 559  WHEN BAD_PAYPAL_ID THEN
16:00:51 560  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 561  	  SPROC_NAME, 'No such paypal');
16:00:51 562  WHEN PAYPAL_ALREADY_INACTIVE THEN
16:00:51 563  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 564  	  SPROC_NAME, 'Paypal already inactive');
16:00:51 565  WHEN PENDING_TRANSACTIONS_FOUND THEN
16:00:51 566  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 567  	  SPROC_NAME, 'Account has pending charge which are using this paypal');
16:00:51 568  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:00:51 569  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 570  	  SPROC_NAME, 'Could not get current default financial instrument', EXCEPTION_MESSAGE);
16:00:51 571  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:00:51 572  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 573  	  SPROC_NAME, 'Could not delete information about default financial instrument from account', EXCEPTION_MESSAGE);
16:00:51 574  WHEN OTHERS THEN
16:00:51 575  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 576  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 577  END DISABLE_PAYPAL;
16:00:51 578  
16:00:51 579  /******************************************************************************/
16:00:51 580  
16:00:51 581  PROCEDURE UPDATE_CREDIT_CARD (
16:00:51 582  /*
16:00:51 583  Throws exceptions:
16:00:51 584  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:51 585  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 586  */
16:00:51 587  	in_credit_card_id	  IN NUMBER,
16:00:51 588  	in_updated_by		  IN VARCHAR2,
16:00:51 589  	in_instrument_name	  IN VARCHAR2,
16:00:51 590  	in_is_default		  IN NUMBER
16:00:51 591  ) AS
16:00:51 592  SPROC_NAME CONSTANT VARCHAR2(18) := 'UPDATE_CREDIT_CARD';
16:00:51 593  -- VARIABLES
16:00:51 594  var_account_id NUMBER;
16:00:51 595  var_group_id   NUMBER;
16:00:51 596  temp_cc_rownum NUMBER;
16:00:51 597  current_def_instrument_type_id NUMBER;
16:00:51 598  current_def_instrument_id      NUMBER;
16:00:51 599  -- EXCEPTION
16:00:51 600  CAN_NOT_SET_DEF_FINANCIAL  EXCEPTION;
16:00:51 601  BAD_IS_DEFAULT_VALUE	 EXCEPTION;
16:00:51 602  CAN_NOT_GET_DEF_FINANCIAL  EXCEPTION;
16:00:51 603  CAN_NOT_DEL_DEF_FINANCIAL  EXCEPTION;
16:00:51 604  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:00:51 605  BEGIN
16:00:51 606  
16:00:51 607  	-- Get account id
16:00:51 608  	SELECT
16:00:51 609  	  CREDIT_CARD.ACCOUNT_ID
16:00:51 610  	  into
16:00:51 611  	  var_account_id
16:00:51 612  	FROM
16:00:51 613  	  CREDIT_CARD
16:00:51 614  	WHERE
16:00:51 615  	  CREDIT_CARD.ID = in_credit_card_id;
16:00:51 616  
16:00:51 617  	-- Get group id
16:00:51 618  	SELECT
16:00:51 619  	  ACCOUNT.GROUP_ID into var_group_id
16:00:51 620  	FROM
16:00:51 621  	  ACCOUNT
16:00:51 622  	WHERE
16:00:51 623  	  ACCOUNT.ID = var_account_id;
16:00:51 624  
16:00:51 625  	-- Check that passed data is correct
16:00:51 626  	IF in_is_default != GLOBAL_CONSTANTS_V20.TRUE
16:00:51 627  	  AND in_is_default != GLOBAL_CONSTANTS_V20.FALSE
16:00:51 628  	  AND in_is_default IS NOT NULL THEN
16:00:51 629  	  RAISE BAD_IS_DEFAULT_VALUE;
16:00:51 630  	END IF;
16:00:51 631  
16:00:51 632  	-- Update credit card
16:00:51 633  	IF in_instrument_name IS NOT NULL THEN
16:00:51 634  	  PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_CREDIT_CARD(
16:00:51 635  	    in_credit_card_id  => in_credit_card_id,
16:00:51 636  	    in_updated_by      => in_updated_by,
16:00:51 637  	    in_instrument_name => in_instrument_name
16:00:51 638  	  );
16:00:51 639  	END IF;
16:00:51 640  
16:00:51 641  	-- Set default financial instrument
16:00:51 642  	IF in_is_default = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:51 643  	  BEGIN
16:00:51 644  	    PROCS_FIN_INSTRUMENTS_V20.SET_DEF_FINANCIAL_INSTRUMENT(
16:00:51 645  	      in_group_id	    => var_group_id,
16:00:51 646  	      in_instrument_type_id => GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD,
16:00:51 647  	      in_instrument_id	    => in_credit_card_id,
16:00:51 648  	      in_updated_by	    => in_updated_by
16:00:51 649  	    );
16:00:51 650  	    EXCEPTION
16:00:51 651  	      WHEN OTHERS THEN
16:00:51 652  		EXCEPTION_MESSAGE := SQLERRM;
16:00:51 653  		RAISE CAN_NOT_SET_DEF_FINANCIAL;
16:00:51 654  	  END;
16:00:51 655  	END IF;
16:00:51 656  
16:00:51 657  	-- Set default financial instrument
16:00:51 658  	IF in_is_default = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 659  	  BEGIN
16:00:51 660  	    GET_DEF_FINANCIAL_INSTRUMENT(
16:00:51 661  	      in_group_id	     => var_group_id,
16:00:51 662  	      out_instrument_type_id => current_def_instrument_type_id,
16:00:51 663  	      out_instrument_id      => current_def_instrument_id
16:00:51 664  	    );
16:00:51 665  	  EXCEPTION
16:00:51 666  	    WHEN OTHERS THEN
16:00:51 667  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 668  	      RAISE CAN_NOT_GET_DEF_FINANCIAL;
16:00:51 669  	  END;
16:00:51 670  	  IF current_def_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:51 671  	    AND current_def_instrument_id = in_credit_card_id THEN
16:00:51 672  	    BEGIN
16:00:51 673  	      DEL_DEF_FINANCIAL_INSTRUMENT(
16:00:51 674  		in_group_id => var_group_id
16:00:51 675  	      );
16:00:51 676  	      EXCEPTION
16:00:51 677  		WHEN OTHERS THEN
16:00:51 678  		  EXCEPTION_MESSAGE := SQLERRM;
16:00:51 679  		  RAISE CAN_NOT_DEL_DEF_FINANCIAL;
16:00:51 680  	    END;
16:00:51 681  	  END IF;
16:00:51 682  	END IF;
16:00:51 683  
16:00:51 684  EXCEPTION
16:00:51 685  WHEN NO_DATA_FOUND THEN
16:00:51 686  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 687  	  SPROC_NAME, 'No such credit card');
16:00:51 688  WHEN CAN_NOT_SET_DEF_FINANCIAL THEN
16:00:51 689  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 690  	  SPROC_NAME, 'Could not set default financial instrument for account', EXCEPTION_MESSAGE);
16:00:51 691  WHEN CAN_NOT_GET_DEF_FINANCIAL THEN
16:00:51 692  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 693  	  SPROC_NAME, 'Could not get default financial instrument for account', EXCEPTION_MESSAGE);
16:00:51 694  WHEN CAN_NOT_DEL_DEF_FINANCIAL THEN
16:00:51 695  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 696  	  SPROC_NAME, 'Could not delete information about default financial instrument', EXCEPTION_MESSAGE);
16:00:51 697  WHEN OTHERS THEN
16:00:51 698  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 699  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 700  END UPDATE_CREDIT_CARD;
16:00:51 701  
16:00:51 702  /******************************************************************************/
16:00:51 703  
16:00:51 704  PROCEDURE START_GC_PURCHASING (
16:00:51 705  	in_group_id		  IN NUMBER,
16:00:51 706  	in_offer_chain_id	  IN VARCHAR2,
16:00:51 707  	in_gift_certificate_code  IN  VARCHAR2,
16:00:51 708  	in_created_by		  IN  VARCHAR2,
16:00:51 709  	in_recipient_name	  IN  VARCHAR2,
16:00:51 710  	in_recipient_email	  IN  VARCHAR2,
16:00:51 711  	in_recipient_address_id   IN NUMBER,
16:00:51 712  	in_recipient_notify_date  IN DATE,
16:00:51 713  	in_sender_name		  IN VARCHAR2,
16:00:51 714  	in_sender_email 	  IN VARCHAR2,
16:00:51 715  	in_gift_message 	  IN  VARCHAR2,
16:00:51 716  	in_expiration_date	  IN DATE,
16:00:51 717  	out_gift_certificate_id   OUT NUMBER,
16:00:51 718  	out_invoice_id		  OUT NUMBER
16:00:51 719  ) AS
16:00:51 720  SPROC_NAME CONSTANT VARCHAR2(19) := 'START_GC_PURCHASING';
16:00:51 721  -- VARIABLES
16:00:51 722  var_account_id		NUMBER;
16:00:51 723  temp_gc_code		GIFT_CERTIFICATE.CODE%TYPE;
16:00:51 724  var_och_is_gc		NUMBER;
16:00:51 725  var_offer_chain_status_id NUMBER;
16:00:51 726  var_is_for_redemption	NUMBER;
16:00:51 727  var_new_invoice_id	NUMBER;
16:00:51 728  var_gift_cert_id		NUMBER;
16:00:51 729  var_account_tax_exempt_id VARCHAR2(255);
16:00:51 730  -- EXCEPTIONS
16:00:51 731  BAD_GROUP_ID		    EXCEPTION;
16:00:51 732  GC_CODE_ALREADY_EXISTS	    EXCEPTION;
16:00:51 733  BAD_OFFER_CHAIN_ID	    EXCEPTION;
16:00:51 734  OCH_IS_NOT_GIFT_CERTIFICATE   EXCEPTION;
16:00:51 735  BAD_OFFER_CHAIN_STATUS	    EXCEPTION;
16:00:51 736  CAN_NOT_PURCHASE_GC_FOR_RDMPN EXCEPTION;
16:00:51 737  CAN_NOT_CREATE_INVOICE	    EXCEPTION;
16:00:51 738  OFFER_REC_NUM_LESS_THAN_ONE   EXCEPTION;
16:00:51 739  CAN_NOT_CREATE_LINE_ITEMS     EXCEPTION;
16:00:51 740  
16:00:51 741  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:51 742  BEGIN
16:00:51 743  	-- Get account id
16:00:51 744  	BEGIN
16:00:51 745  	  SELECT
16:00:51 746  	    ACCOUNT.ID,
16:00:51 747  	    ACCOUNT.TAX_EXEMPT_ID
16:00:51 748  	    into
16:00:51 749  	    var_account_id,
16:00:51 750  	    var_account_tax_exempt_id
16:00:51 751  	  FROM
16:00:51 752  	    ACCOUNT
16:00:51 753  	  WHERE
16:00:51 754  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 755  	  EXCEPTION
16:00:51 756  	  WHEN NO_DATA_FOUND THEN
16:00:51 757  	    RAISE BAD_GROUP_ID;
16:00:51 758  	END;
16:00:51 759  
16:00:51 760  	-- Check for the same code
16:00:51 761  	BEGIN
16:00:51 762  	  SELECT
16:00:51 763  	    GIFT_CERTIFICATE.CODE into temp_gc_code
16:00:51 764  	  FROM
16:00:51 765  	    GIFT_CERTIFICATE
16:00:51 766  	  WHERE
16:00:51 767  	    GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
16:00:51 768  
16:00:51 769  	  RAISE GC_CODE_ALREADY_EXISTS;
16:00:51 770  
16:00:51 771  	  EXCEPTION
16:00:51 772  	    WHEN NO_DATA_FOUND THEN
16:00:51 773  	      NULL;
16:00:51 774  	END;
16:00:51 775  
16:00:51 776  	-- Get offer chain flag "is_gift_certificate"
16:00:51 777  	BEGIN
16:00:51 778  	  SELECT
16:00:51 779  	    OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:00:51 780  	    OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
16:00:51 781  	    into
16:00:51 782  	    var_och_is_gc,
16:00:51 783  	    var_offer_chain_status_id
16:00:51 784  	  FROM
16:00:51 785  	    OFFER_CHAIN
16:00:51 786  	  WHERE
16:00:51 787  	    OFFER_CHAIN.ID = in_offer_chain_id;
16:00:51 788  	  EXCEPTION
16:00:51 789  	  WHEN NO_DATA_FOUND THEN
16:00:51 790  	    RAISE BAD_OFFER_CHAIN_ID;
16:00:51 791  	END;
16:00:51 792  
16:00:51 793  	IF var_och_is_gc != GLOBAL_CONSTANTS_V20.TRUE
16:00:51 794  	  OR var_och_is_gc IS NULL THEN
16:00:51 795  	  RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
16:00:51 796  	END IF;
16:00:51 797  
16:00:51 798  	IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
16:00:51 799  	  RAISE BAD_OFFER_CHAIN_STATUS;
16:00:51 800  	END IF;
16:00:51 801  
16:00:51 802  	-- norlov: #38151 check if the OC is for Redemption:
16:00:51 803  	SELECT
16:00:51 804  	  COUNT(*) into var_is_for_redemption
16:00:51 805  	FROM
16:00:51 806  	  OFFER_CHAIN_ELIGIBILITY
16:00:51 807  	WHERE
16:00:51 808  	  OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:00:51 809  	  AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
16:00:51 810  	  AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
16:00:51 811  
16:00:51 812  	IF var_is_for_redemption > 0 THEN
16:00:51 813  	  RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
16:00:51 814  	END IF;
16:00:51 815  
16:00:51 816  	-- Create new invoice
16:00:51 817  	BEGIN
16:00:51 818  	  PROCS_INVOICE_V20.CREATE_INVOICE(
16:00:51 819  	    in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
16:00:51 820  	    in_created_by     => in_created_by,
16:00:51 821  	    in_tax_exempt_id  => var_account_tax_exempt_id,
16:00:51 822  	    out_invoice_id    => var_new_invoice_id
16:00:51 823  	  );
16:00:51 824  	  EXCEPTION
16:00:51 825  	    WHEN OTHERS THEN
16:00:51 826  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 827  	      RAISE CAN_NOT_CREATE_INVOICE;
16:00:51 828  	END;
16:00:51 829  
16:00:51 830  	-- Add line items for new invoice
16:00:51 831  	BEGIN
16:00:51 832  	  FOR f_offer_data IN (
16:00:51 833  	    SELECT
16:00:51 834  	      OFFER_ID,
16:00:51 835  	      NUM_RECURRENCES
16:00:51 836  	    FROM
16:00:51 837  	      OFFER_OFFER_CHAIN
16:00:51 838  	    WHERE
16:00:51 839  	      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:51 840  	  )
16:00:51 841  	  LOOP
16:00:51 842  	    IF f_offer_data.NUM_RECURRENCES < 1 THEN
16:00:51 843  	      RAISE OFFER_REC_NUM_LESS_THAN_ONE;
16:00:51 844  	    END IF;
16:00:51 845  	    FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
16:00:51 846  	    LOOP
16:00:51 847  	      PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
16:00:51 848  		in_invoice_id => var_new_invoice_id,
16:00:51 849  		in_offer_id   => f_offer_data.OFFER_ID,
16:00:51 850  		in_created_by => in_created_by
16:00:51 851  	      );
16:00:51 852  	    END LOOP;
16:00:51 853  	  END LOOP;
16:00:51 854  
16:00:51 855  	  EXCEPTION
16:00:51 856  	    WHEN OTHERS THEN
16:00:51 857  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 858  	      RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:00:51 859  	END;
16:00:51 860  
16:00:51 861  	PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_GIFT_CERTIFICATE(
16:00:51 862  	  out_gift_certificate_id	=> var_gift_cert_id,
16:00:51 863  	  in_purchaser_group_id 	=> in_group_id,
16:00:51 864  	  in_purchaser_invoice_id	=> var_new_invoice_id,
16:00:51 865  	  in_offer_chain_id		=> in_offer_chain_id,
16:00:51 866  	  in_expiration_date		=> in_expiration_date,
16:00:51 867  	  in_purchase_date		=> SYSDATE,
16:00:51 868  	  in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE,
16:00:51 869  	  in_code			=> in_gift_certificate_code,
16:00:51 870  	  in_created_by 		=> in_created_by,
16:00:51 871  	  in_recipient_name		=> in_recipient_name,
16:00:51 872  	  in_gift_message		=> in_gift_message,
16:00:51 873  	  in_recipient_email		=> in_recipient_email,
16:00:51 874  	  in_sender_email		=> in_sender_email,
16:00:51 875  	  in_sender_name		=> in_sender_name,
16:00:51 876  	  in_recipient_address_id	=> in_recipient_address_id,
16:00:51 877  	  in_recipient_notify_date	=> in_recipient_notify_date
16:00:51 878  	);
16:00:51 879  
16:00:51 880  	out_gift_certificate_id := var_gift_cert_id;
16:00:51 881  	out_invoice_id := var_new_invoice_id;
16:00:51 882  
16:00:51 883  EXCEPTION
16:00:51 884  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:00:51 885  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 886  	  SPROC_NAME, 'Offer chain is not active');
16:00:51 887  WHEN GC_CODE_ALREADY_EXISTS THEN
16:00:51 888  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:51 889  	  SPROC_NAME, 'Gift certificate with same code already exists');
16:00:51 890  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
16:00:51 891  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 892  	  SPROC_NAME, 'This offer chain can not be used for gift certificate');
16:00:51 893  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
16:00:51 894  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 895  	  SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
16:00:51 896  WHEN CAN_NOT_CREATE_INVOICE THEN
16:00:51 897  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 898  	  SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:00:51 899  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:00:51 900  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 901  	  SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:00:51 902  WHEN BAD_GROUP_ID THEN
16:00:51 903  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 904  	  SPROC_NAME, 'No such group id');
16:00:51 905  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:51 906  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 907  	  SPROC_NAME, 'No such offer chain');
16:00:51 908  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
16:00:51 909  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 910  	  SPROC_NAME, 'Some offer has recurrences number less than 1');
16:00:51 911  WHEN OTHERS THEN
16:00:51 912  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 913  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 914  END START_GC_PURCHASING;
16:00:51 915  
16:00:51 916  /******************************************************************************/
16:00:51 917  
16:00:51 918  PROCEDURE FINALIZE_GC_PURCHASING (
16:00:51 919  	in_invoice_id	      IN NUMBER,
16:00:51 920  	in_created_by	      IN VARCHAR2,
16:00:51 921  	in_instrument_id      IN NUMBER,
16:00:51 922  	in_instrument_type_id IN NUMBER,
16:00:51 923  	in_order_id	      IN VARCHAR2,
16:00:51 924  	in_transaction_id     IN NUMBER,
16:00:51 925  	out_charge_amount     OUT NUMBER
16:00:51 926  ) AS
16:00:51 927  SPROC_NAME CONSTANT VARCHAR2(22) := 'FINALIZE_GC_PURCHASING';
16:00:51 928  -- VARIABLES
16:00:51 929  temp_transaction_id_count NUMBER;
16:00:51 930  var_invoice_amount	NUMBER(10,2);
16:00:51 931  var_transaction_id	NUMBER;
16:00:51 932  var_new_charge_id 	NUMBER;
16:00:51 933  -- EXCEPTIONS
16:00:51 934  BAD_CREDIT_CARD_ID	  EXCEPTION;
16:00:51 935  BAD_PAYPAL_ID		  EXCEPTION;
16:00:51 936  BAD_INSTRUMENT_TYPE	  EXCEPTION;
16:00:51 937  TRANSACTION_EXISTS	  EXCEPTION;
16:00:51 938  CAN_NOT_CALC_INVOICE_AMOUNT EXCEPTION;
16:00:51 939  CAN_NOT_USE_FCINSTR	  EXCEPTION;
16:00:51 940  CAN_NOT_CREATE_TRANSACTION  EXCEPTION;
16:00:51 941  CAN_NOT_CREATE_CHARGE	  EXCEPTION;
16:00:51 942  EXCEPTION_MESSAGE   VARCHAR2(1024);
16:00:51 943  BEGIN
16:00:51 944  
16:00:51 945  	-- Check that instrument exists
16:00:51 946  	IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:51 947  	  IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 948  	    RAISE BAD_CREDIT_CARD_ID;
16:00:51 949  	  END IF;
16:00:51 950  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:51 951  	  IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 952  	    RAISE BAD_PAYPAL_ID;
16:00:51 953  	  END IF;
16:00:51 954  	ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
16:00:51 955  	  NULL;
16:00:51 956  	ELSE
16:00:51 957  	  RAISE BAD_INSTRUMENT_TYPE;
16:00:51 958  	END IF;
16:00:51 959  
16:00:51 960  	-- Check that transaction with given id do not exists
16:00:51 961  	SELECT
16:00:51 962  	  COUNT(*) into temp_transaction_id_count
16:00:51 963  	FROM
16:00:51 964  	  TRANSACTION
16:00:51 965  	WHERE
16:00:51 966  	  TRANSACTION.ID = in_transaction_id;
16:00:51 967  
16:00:51 968  	IF temp_transaction_id_count > 0 THEN
16:00:51 969  	  RAISE TRANSACTION_EXISTS;
16:00:51 970  	END IF;
16:00:51 971  
16:00:51 972  	-- Calculate new invoice amount
16:00:51 973  	BEGIN
16:00:51 974  	  PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(in_invoice_id, var_invoice_amount);
16:00:51 975  	  EXCEPTION
16:00:51 976  	    WHEN OTHERS THEN
16:00:51 977  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 978  	      RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:00:51 979  	END;
16:00:51 980  
16:00:51 981  	IF var_invoice_amount > 0
16:00:51 982  	  AND in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
16:00:51 983  	  RAISE CAN_NOT_USE_FCINSTR;
16:00:51 984  	END IF;
16:00:51 985  
16:00:51 986  	-- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
16:00:51 987  	IF var_invoice_amount = 0 THEN
16:00:51 988  	  PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
16:00:51 989  	    in_invoice_id		   => in_invoice_id,
16:00:51 990  	    in_updated_by		   => in_created_by,
16:00:51 991  	    in_invoice_status_id	   => GLOBAL_STATUSES_V20.INVOICE_CLOSED
16:00:51 992  	  );
16:00:51 993  	END IF;
16:00:51 994  
16:00:51 995  	IF var_invoice_amount > 0 THEN
16:00:51 996  	  -- Create transaction
16:00:51 997  	  BEGIN
16:00:51 998  	    PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:51 999  	      in_transaction_id        => in_transaction_id,
16:00:51 1000  	       in_status_id		=> GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
16:00:51 1001  	       in_amount		=> var_invoice_amount,
16:00:51 1002  	       in_created_by		=> in_created_by,
16:00:51 1003  	       in_order_id		=> in_order_id,
16:00:51 1004  	       in_transaction_type_code => 'GIFT_CERTIFICATE_PURCHASE',
16:00:51 1005  	       out_transaction_id	=> var_transaction_id
16:00:51 1006  	     );
16:00:51 1007  	     EXCEPTION
16:00:51 1008  	       WHEN OTHERS THEN
16:00:51 1009  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1010  		 RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:51 1011  	   END;
16:00:51 1012  
16:00:51 1013  	   -- Create charge
16:00:51 1014  	   BEGIN
16:00:51 1015  	     PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:51 1016  	       in_invoice_id	     => in_invoice_id,
16:00:51 1017  	       in_transaction_id     => var_transaction_id,
16:00:51 1018  	       in_instrument_type_id => in_instrument_type_id,
16:00:51 1019  	       in_instrument_id      => in_instrument_id,
16:00:51 1020  	       in_charge_amount      => var_invoice_amount,
16:00:51 1021  	       in_created_by	     => in_created_by,
16:00:51 1022  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:51 1023  	       out_charge_id	     => var_new_charge_id
16:00:51 1024  	     );
16:00:51 1025  	     out_charge_amount := var_invoice_amount;
16:00:51 1026  	     EXCEPTION
16:00:51 1027  	       WHEN OTHERS THEN
16:00:51 1028  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1029  		 RAISE CAN_NOT_CREATE_CHARGE;
16:00:51 1030  	   END;
16:00:51 1031  	 ELSE
16:00:51 1032  	   out_charge_amount := 0;
16:00:51 1033  	 END IF;
16:00:51 1034  
16:00:51 1035  EXCEPTION
16:00:51 1036  WHEN CAN_NOT_USE_FCINSTR THEN
16:00:51 1037  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1038  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:00:51 1039  WHEN BAD_CREDIT_CARD_ID THEN
16:00:51 1040  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1041  	   SPROC_NAME, 'Bad credit card id');
16:00:51 1042  WHEN BAD_PAYPAL_ID THEN
16:00:51 1043  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1044  	   SPROC_NAME, 'Bad paypal id');
16:00:51 1045  WHEN BAD_INSTRUMENT_TYPE THEN
16:00:51 1046  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1047  	   SPROC_NAME, 'Bad instrument type');
16:00:51 1048  WHEN TRANSACTION_EXISTS THEN
16:00:51 1049  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:51 1050  	   SPROC_NAME, 'Transaction with given id already exists');
16:00:51 1051  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:51 1052  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1053  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:51 1054  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:51 1055  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1056  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:51 1057  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:00:51 1058  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1059  	   SPROC_NAME, 'Could not calculate amount for new invoice', EXCEPTION_MESSAGE);
16:00:51 1060  WHEN OTHERS THEN
16:00:51 1061  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1062  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1063  END FINALIZE_GC_PURCHASING;
16:00:51 1064  
16:00:51 1065  /******************************************************************************/
16:00:51 1066  
16:00:51 1067  PROCEDURE PURCHASE_GIFT_CERTIFICATE (
16:00:51 1068  	 in_group_id		   IN NUMBER,
16:00:51 1069  	 in_offer_chain_id	   IN VARCHAR2,
16:00:51 1070  	 in_gift_certificate_code  IN VARCHAR2,
16:00:51 1071  	 in_created_by		   IN VARCHAR2,
16:00:51 1072  	 in_recipient_name	   IN VARCHAR2,
16:00:51 1073  	 in_recipient_email	   IN VARCHAR2,
16:00:51 1074  	 in_sender_name 	   IN VARCHAR2,
16:00:51 1075  	 in_sender_email	   IN VARCHAR2,
16:00:51 1076  	 in_gift_message	   IN VARCHAR2,
16:00:51 1077  	 in_instrument_id	   IN NUMBER,
16:00:51 1078  	 in_instrument_type_id	   IN NUMBER,
16:00:51 1079  	 in_expiration_date	   IN DATE,
16:00:51 1080  	 in_order_id		   IN VARCHAR2,
16:00:51 1081  	 in_transaction_id	   IN NUMBER
16:00:51 1082  ) AS
16:00:51 1083  SPROC_NAME	  CONSTANT VARCHAR2(25) := 'PURCHASE_GIFT_CERTIFICATE';
16:00:51 1084  -- VARIABLES
16:00:51 1085  var_gift_cert_id   NUMBER;
16:00:51 1086  var_account_id	  NUMBER;
16:00:51 1087  var_invoice_amount NUMBER (10,2);
16:00:51 1088  var_new_invoice_id NUMBER;
16:00:51 1089  var_new_charge_id  NUMBER;
16:00:51 1090  var_och_is_gc	  NUMBER;
16:00:51 1091  var_offer_chain_status_id NUMBER;
16:00:51 1092  var_is_for_redemption	 NUMBER;
16:00:51 1093  var_account_tax_exempt_id VARCHAR2(255);
16:00:51 1094  
16:00:51 1095  temp_transaction_id_count NUMBER;
16:00:51 1096  var_transaction_id	 NUMBER;
16:00:51 1097  temp_gc_code VARCHAR2(255);
16:00:51 1098  
16:00:51 1099  var_invoice_status_id NUMBER;
16:00:51 1100  -- EXCEPTIONS
16:00:51 1101  CAN_NOT_CREATE_INVOICE		   EXCEPTION;
16:00:51 1102  CAN_NOT_CREATE_TRANSACTION	   EXCEPTION;
16:00:51 1103  CAN_NOT_CREATE_CHARGE		   EXCEPTION;
16:00:51 1104  CAN_NOT_CREATE_LINE_ITEMS	   EXCEPTION;
16:00:51 1105  BAD_GROUP_ID			   EXCEPTION;
16:00:51 1106  BAD_OFFER_CHAIN_ID		   EXCEPTION;
16:00:51 1107  OCH_IS_NOT_GIFT_CERTIFICATE	   EXCEPTION;
16:00:51 1108  TRANSACTION_EXISTS		   EXCEPTION;
16:00:51 1109  GC_CODE_ALREADY_EXISTS		   EXCEPTION;
16:00:51 1110  BAD_INSTRUMENT_TYPE		   EXCEPTION;
16:00:51 1111  BAD_CREDIT_CARD_ID		   EXCEPTION;
16:00:51 1112  BAD_PAYPAL_ID			   EXCEPTION;
16:00:51 1113  CAN_NOT_CALCULATE_OCH_AMOUNT	   EXCEPTION;
16:00:51 1114  BAD_OFFER_CHAIN_STATUS		   EXCEPTION;
16:00:51 1115  OFFER_REC_NUM_LESS_THAN_ONE	   EXCEPTION;
16:00:51 1116  CAN_NOT_CALC_INVOICE_AMOUNT	   EXCEPTION;
16:00:51 1117  CAN_NOT_USE_FCINSTR		   EXCEPTION;
16:00:51 1118  CAN_NOT_PURCHASE_GC_FOR_RDMPN	   EXCEPTION;
16:00:51 1119  EXCEPTION_MESSAGE		   VARCHAR2(1024);
16:00:51 1120  BEGIN
16:00:51 1121  
16:00:51 1122  	 -- Get account id
16:00:51 1123  	 BEGIN
16:00:51 1124  	   SELECT
16:00:51 1125  	     ACCOUNT.ID,
16:00:51 1126  	     ACCOUNT.TAX_EXEMPT_ID
16:00:51 1127  	     into
16:00:51 1128  	     var_account_id,
16:00:51 1129  	     var_account_tax_exempt_id
16:00:51 1130  	   FROM
16:00:51 1131  	     ACCOUNT
16:00:51 1132  	   WHERE
16:00:51 1133  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1134  	   EXCEPTION
16:00:51 1135  	   WHEN NO_DATA_FOUND THEN
16:00:51 1136  	     RAISE BAD_GROUP_ID;
16:00:51 1137  	 END;
16:00:51 1138  
16:00:51 1139  	 -- Check that instrument exists
16:00:51 1140  	 IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:51 1141  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 1142  	     RAISE BAD_CREDIT_CARD_ID;
16:00:51 1143  	   END IF;
16:00:51 1144  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:51 1145  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 1146  	     RAISE BAD_PAYPAL_ID;
16:00:51 1147  	   END IF;
16:00:51 1148  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
16:00:51 1149  	   NULL;
16:00:51 1150  	 ELSE
16:00:51 1151  	   RAISE BAD_INSTRUMENT_TYPE;
16:00:51 1152  	 END IF;
16:00:51 1153  
16:00:51 1154  	 -- Check for the same code
16:00:51 1155  	 BEGIN
16:00:51 1156  	   SELECT
16:00:51 1157  	     GIFT_CERTIFICATE.CODE into temp_gc_code
16:00:51 1158  	   FROM
16:00:51 1159  	     GIFT_CERTIFICATE
16:00:51 1160  	   WHERE
16:00:51 1161  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code;
16:00:51 1162  
16:00:51 1163  	   RAISE GC_CODE_ALREADY_EXISTS;
16:00:51 1164  
16:00:51 1165  	   EXCEPTION
16:00:51 1166  	     WHEN NO_DATA_FOUND THEN
16:00:51 1167  	       NULL;
16:00:51 1168  	 END;
16:00:51 1169  
16:00:51 1170  	 -- Get offer chain flag "is_gift_certificate"
16:00:51 1171  	 BEGIN
16:00:51 1172  	   SELECT
16:00:51 1173  	     OFFER_CHAIN.IS_GIFT_CERTIFICATE,
16:00:51 1174  	     OFFER_CHAIN.OFFER_CHAIN_STATUS_ID
16:00:51 1175  	     into
16:00:51 1176  	     var_och_is_gc,
16:00:51 1177  	     var_offer_chain_status_id
16:00:51 1178  	   FROM
16:00:51 1179  	     OFFER_CHAIN
16:00:51 1180  	   WHERE
16:00:51 1181  	     OFFER_CHAIN.ID = in_offer_chain_id;
16:00:51 1182  	   EXCEPTION
16:00:51 1183  	   WHEN NO_DATA_FOUND THEN
16:00:51 1184  	     RAISE BAD_OFFER_CHAIN_ID;
16:00:51 1185  	 END;
16:00:51 1186  
16:00:51 1187  	 IF var_och_is_gc != GLOBAL_CONSTANTS_V20.TRUE
16:00:51 1188  	   OR var_och_is_gc IS NULL THEN
16:00:51 1189  	   RAISE OCH_IS_NOT_GIFT_CERTIFICATE;
16:00:51 1190  	 END IF;
16:00:51 1191  
16:00:51 1192  	 IF var_offer_chain_status_id != GLOBAL_STATUSES_V20.OFFER_CHAIN_ACTIVE THEN
16:00:51 1193  	   RAISE BAD_OFFER_CHAIN_STATUS;
16:00:51 1194  	 END IF;
16:00:51 1195  
16:00:51 1196  	 -- norlov: #38151 check if the OC is for Redemption:
16:00:51 1197  	 SELECT
16:00:51 1198  	   COUNT(*) into var_is_for_redemption
16:00:51 1199  	 FROM
16:00:51 1200  	   OFFER_CHAIN_ELIGIBILITY
16:00:51 1201  	 WHERE
16:00:51 1202  	   OFFER_CHAIN_ELIGIBILITY.OFFER_CHAIN_ID = in_offer_chain_id
16:00:51 1203  	   AND OFFER_CHAIN_ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
16:00:51 1204  	   AND OFFER_CHAIN_ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET;
16:00:51 1205  
16:00:51 1206  	 IF var_is_for_redemption > 0 THEN
16:00:51 1207  	   RAISE CAN_NOT_PURCHASE_GC_FOR_RDMPN;
16:00:51 1208  	 END IF;
16:00:51 1209  
16:00:51 1210  	 -- Check that transaction with given id do not exists
16:00:51 1211  	 SELECT
16:00:51 1212  	   COUNT(*) into temp_transaction_id_count
16:00:51 1213  	 FROM
16:00:51 1214  	   TRANSACTION
16:00:51 1215  	 WHERE
16:00:51 1216  	   TRANSACTION.ID = in_transaction_id;
16:00:51 1217  
16:00:51 1218  	 IF temp_transaction_id_count > 0 THEN
16:00:51 1219  	   RAISE TRANSACTION_EXISTS;
16:00:51 1220  	 END IF;
16:00:51 1221  
16:00:51 1222  	 -- Create new invoice
16:00:51 1223  	 BEGIN
16:00:51 1224  	   PROCS_INVOICE_V20.CREATE_INVOICE(
16:00:51 1225  	     in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_OPEN,
16:00:51 1226  	     in_created_by     => in_created_by,
16:00:51 1227  	     in_tax_exempt_id  => var_account_tax_exempt_id,
16:00:51 1228  	     out_invoice_id    => var_new_invoice_id
16:00:51 1229  	   );
16:00:51 1230  	   EXCEPTION
16:00:51 1231  	     WHEN OTHERS THEN
16:00:51 1232  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1233  	       RAISE CAN_NOT_CREATE_INVOICE;
16:00:51 1234  	 END;
16:00:51 1235  
16:00:51 1236  	 -- Add line items for new invoice
16:00:51 1237  	 BEGIN
16:00:51 1238  	   FOR f_offer_data IN (
16:00:51 1239  	     SELECT
16:00:51 1240  	       OFFER_ID,
16:00:51 1241  	       NUM_RECURRENCES
16:00:51 1242  	     FROM
16:00:51 1243  	       OFFER_OFFER_CHAIN
16:00:51 1244  	     WHERE
16:00:51 1245  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID = in_offer_chain_id
16:00:51 1246  	   )
16:00:51 1247  	   LOOP
16:00:51 1248  	     IF f_offer_data.NUM_RECURRENCES < 1 THEN
16:00:51 1249  	       RAISE OFFER_REC_NUM_LESS_THAN_ONE;
16:00:51 1250  	     END IF;
16:00:51 1251  	     FOR i_offer_recurrences_iterator IN 1..f_offer_data.NUM_RECURRENCES
16:00:51 1252  	     LOOP
16:00:51 1253  	       PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
16:00:51 1254  		 in_invoice_id => var_new_invoice_id,
16:00:51 1255  		 in_offer_id   => f_offer_data.OFFER_ID,
16:00:51 1256  		 in_created_by => in_created_by
16:00:51 1257  	       );
16:00:51 1258  	     END LOOP;
16:00:51 1259  	   END LOOP;
16:00:51 1260  
16:00:51 1261  	   EXCEPTION
16:00:51 1262  	     WHEN OTHERS THEN
16:00:51 1263  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1264  	       RAISE CAN_NOT_CREATE_LINE_ITEMS;
16:00:51 1265  	 END;
16:00:51 1266  
16:00:51 1267  	 -- Calculate new invoice amount
16:00:51 1268  	 BEGIN
16:00:51 1269  	   PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT(var_new_invoice_id, var_invoice_amount);
16:00:51 1270  	   EXCEPTION
16:00:51 1271  	     WHEN OTHERS THEN
16:00:51 1272  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1273  	       RAISE CAN_NOT_CALC_INVOICE_AMOUNT;
16:00:51 1274  	 END;
16:00:51 1275  
16:00:51 1276  	 IF var_invoice_amount > 0
16:00:51 1277  	   AND in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_ZCI_INSTRUMENT THEN
16:00:51 1278  	   RAISE CAN_NOT_USE_FCINSTR;
16:00:51 1279  	 END IF;
16:00:51 1280  
16:00:51 1281  	 -- If invoice amount iz 0 then we need to set status for this invoice to PROCCESSED
16:00:51 1282  	 IF var_invoice_amount = 0 THEN
16:00:51 1283  	   PROCS_INVOICE_CRU_V20.UPDATE_INVOICE(
16:00:51 1284  	     in_invoice_id		    => var_new_invoice_id,
16:00:51 1285  	     in_updated_by		    => in_created_by,
16:00:51 1286  	     in_invoice_status_id	    => GLOBAL_STATUSES_V20.INVOICE_CLOSED
16:00:51 1287  	   );
16:00:51 1288  	 END IF;
16:00:51 1289  
16:00:51 1290  	 IF var_invoice_amount > 0 THEN
16:00:51 1291  	   -- Create transaction
16:00:51 1292  	   BEGIN
16:00:51 1293  	     PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:51 1294  	       in_transaction_id  => in_transaction_id,
16:00:51 1295  	       in_status_id	  => GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
16:00:51 1296  	       in_amount	  => var_invoice_amount,
16:00:51 1297  	       in_created_by	  => in_created_by,
16:00:51 1298  	       in_order_id	  => in_order_id,
16:00:51 1299  	       out_transaction_id => var_transaction_id
16:00:51 1300  	     );
16:00:51 1301  	     EXCEPTION
16:00:51 1302  	       WHEN OTHERS THEN
16:00:51 1303  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1304  		 RAISE CAN_NOT_CREATE_TRANSACTION;
16:00:51 1305  	   END;
16:00:51 1306  
16:00:51 1307  	   -- Create charge
16:00:51 1308  	   BEGIN
16:00:51 1309  	     PROCS_CHARGE_V20.CREATE_CHARGE(
16:00:51 1310  	       in_invoice_id	     => var_new_invoice_id,
16:00:51 1311  	       in_transaction_id     => var_transaction_id,
16:00:51 1312  	       in_instrument_type_id => in_instrument_type_id,
16:00:51 1313  	       in_instrument_id      => in_instrument_id,
16:00:51 1314  	       in_charge_amount      => var_invoice_amount,
16:00:51 1315  	       in_created_by	     => in_created_by,
16:00:51 1316  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:51 1317  	       out_charge_id	     => var_new_charge_id
16:00:51 1318  	     );
16:00:51 1319  	     EXCEPTION
16:00:51 1320  	       WHEN OTHERS THEN
16:00:51 1321  		 EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1322  		 RAISE CAN_NOT_CREATE_CHARGE;
16:00:51 1323  	   END;
16:00:51 1324  	 END IF;
16:00:51 1325  
16:00:51 1326  	 -- Create new row in GIFT_CERTIFICATE table
16:00:51 1327  	 PROCS_FIN_INSTRUMENTS_CRU_V20.CREATE_GIFT_CERTIFICATE(
16:00:51 1328  	   out_gift_certificate_id	 => var_gift_cert_id,
16:00:51 1329  	   in_purchaser_group_id	 => in_group_id,
16:00:51 1330  	   in_purchaser_invoice_id	 => var_new_invoice_id,
16:00:51 1331  	   in_offer_chain_id		 => in_offer_chain_id,
16:00:51 1332  	   in_expiration_date		 => in_expiration_date,
16:00:51 1333  	   in_purchase_date		 => SYSDATE,
16:00:51 1334  	   in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE,
16:00:51 1335  	   in_code			 => in_gift_certificate_code,
16:00:51 1336  	   in_created_by		 => in_created_by,
16:00:51 1337  	   in_recipient_name		 => in_recipient_name,
16:00:51 1338  	   in_gift_message		 => in_gift_message,
16:00:51 1339  	   in_recipient_email		 => in_recipient_email,
16:00:51 1340  	   in_sender_email		 => in_sender_email,
16:00:51 1341  	   in_sender_name		 => in_sender_name
16:00:51 1342  	 );
16:00:51 1343  
16:00:51 1344  EXCEPTION
16:00:51 1345  WHEN CAN_NOT_USE_FCINSTR THEN
16:00:51 1346  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1347  	   SPROC_NAME, 'Could not use "free charge instrument" for non-zero invoice');
16:00:51 1348  WHEN BAD_OFFER_CHAIN_STATUS THEN
16:00:51 1349  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1350  	   SPROC_NAME, 'Offer chain is not active');
16:00:51 1351  WHEN CAN_NOT_CALCULATE_OCH_AMOUNT THEN
16:00:51 1352  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1353  	   SPROC_NAME, 'Could not calculate offer chain amount', EXCEPTION_MESSAGE);
16:00:51 1354  WHEN BAD_CREDIT_CARD_ID THEN
16:00:51 1355  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1356  	   SPROC_NAME, 'Bad credit card id');
16:00:51 1357  WHEN BAD_PAYPAL_ID THEN
16:00:51 1358  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1359  	   SPROC_NAME, 'Bad paypal id');
16:00:51 1360  WHEN BAD_INSTRUMENT_TYPE THEN
16:00:51 1361  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1362  	   SPROC_NAME, 'Bad instrument type');
16:00:51 1363  WHEN GC_CODE_ALREADY_EXISTS THEN
16:00:51 1364  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:51 1365  	   SPROC_NAME, 'Gift certificate with same code already exists');
16:00:51 1366  WHEN OCH_IS_NOT_GIFT_CERTIFICATE THEN
16:00:51 1367  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1368  	   SPROC_NAME, 'This offer chain can not be used for gift certificate');
16:00:51 1369  WHEN CAN_NOT_PURCHASE_GC_FOR_RDMPN THEN
16:00:51 1370  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1371  	   SPROC_NAME, 'This offer chain can not be purchased for gift certificate since it is for redemption');
16:00:51 1372  WHEN TRANSACTION_EXISTS THEN
16:00:51 1373  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.DUPLICATE_ERROR,
16:00:51 1374  	   SPROC_NAME, 'Transaction with given id already exists');
16:00:51 1375  WHEN CAN_NOT_CREATE_INVOICE THEN
16:00:51 1376  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1377  	   SPROC_NAME, 'Could not create new invoice', EXCEPTION_MESSAGE);
16:00:51 1378  WHEN CAN_NOT_CREATE_TRANSACTION THEN
16:00:51 1379  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1380  	   SPROC_NAME, 'Could not create transaction', EXCEPTION_MESSAGE);
16:00:51 1381  WHEN CAN_NOT_CREATE_CHARGE THEN
16:00:51 1382  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1383  	   SPROC_NAME, 'Could not create charge', EXCEPTION_MESSAGE);
16:00:51 1384  WHEN CAN_NOT_CREATE_LINE_ITEMS THEN
16:00:51 1385  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1386  	   SPROC_NAME, 'Could not create line items', EXCEPTION_MESSAGE);
16:00:51 1387  WHEN BAD_GROUP_ID THEN
16:00:51 1388  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1389  	   SPROC_NAME, 'No such group id');
16:00:51 1390  WHEN BAD_OFFER_CHAIN_ID THEN
16:00:51 1391  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1392  	   SPROC_NAME, 'No such offer chain');
16:00:51 1393  WHEN OFFER_REC_NUM_LESS_THAN_ONE THEN
16:00:51 1394  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1395  	   SPROC_NAME, 'Some offer has recurrences number less than 1');
16:00:51 1396  WHEN CAN_NOT_CALC_INVOICE_AMOUNT THEN
16:00:51 1397  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1398  	   SPROC_NAME, 'COuold not calculate amount for new invoice', EXCEPTION_MESSAGE);
16:00:51 1399  WHEN OTHERS THEN
16:00:51 1400  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1401  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1402  END PURCHASE_GIFT_CERTIFICATE;
16:00:51 1403  
16:00:51 1404  /******************************************************************************/
16:00:51 1405  
16:00:51 1406  PROCEDURE REDEEM_GIFT_CERTIFICATE (
16:00:51 1407  	 in_group_id			 IN NUMBER,
16:00:51 1408  	 in_gift_certificate_code	 IN VARCHAR2,
16:00:51 1409  	 in_created_by			 IN VARCHAR2,
16:00:51 1410  	 in_redeemer_address_id 	 IN NUMBER,
16:00:51 1411  	 in_fin_instrument_id		 IN NUMBER,
16:00:51 1412  	 in_fin_instrument_type_id	 IN NUMBER,
16:00:51 1413  	 in_redemption_offer_chain_id	 IN NUMBER,
16:00:51 1414  	 out_subscription_id		 OUT NUMBER,
16:00:51 1415  	 out_license_id 		 OUT NUMBER
16:00:51 1416  ) AS
16:00:51 1417  SPROC_NAME	       CONSTANT VARCHAR2(23) := 'REDEEM_GIFT_CERTIFICATE';
16:00:51 1418  -- VARIABLES
16:00:51 1419  var_gift_certificate_id NUMBER;
16:00:51 1420  -- norlov: #38151 var_offer_chain_id replaced by var_purchased_oc_id and var_oc_id_to_redeem
16:00:51 1421  var_purchased_oc_id     NUMBER;
16:00:51 1422  var_oc_id_to_redeem     NUMBER := in_redemption_offer_chain_id;
16:00:51 1423  var_offer_duration      VARCHAR2(30);
16:00:51 1424  var_invoice_id	       NUMBER;
16:00:51 1425  var_succ_purch_attempts_num NUMBER;
16:00:51 1426  var_subscription_id     NUMBER;
16:00:51 1427  var_license_id	       NUMBER;
16:00:51 1428  var_account_id	       NUMBER;
16:00:51 1429  var_gc_status_id        NUMBER;
16:00:51 1430  var_gc_charges_amount   NUMBER;
16:00:51 1431  var_gc_expiration_date  DATE;
16:00:51 1432  var_gc_redeemer_group_id NUMBER;
16:00:51 1433  var_gc_purchase_invoice_id NUMBER;
16:00:51 1434  var_gc_purchase_inv_status_id NUMBER;
16:00:51 1435  var_offer_index		     NUMBER;
16:00:51 1436  var_purchaser_group_id	     NUMBER;
16:00:51 1437  temp_license_id		     NUMBER;
16:00:51 1438  var_same_offer_chains_num     NUMBER;
16:00:51 1439  var_max_concurrent_subscrs    NUMBER;
16:00:51 1440  var_account_tax_exempt_id     VARCHAR2(255);
16:00:51 1441  var_fin_instrument_type_id    NUMBER := in_fin_instrument_type_id;
16:00:51 1442  var_fin_instrument_id	     NUMBER := in_fin_instrument_id;
16:00:51 1443  var_first_offer_id	  NUMBER;
16:00:51 1444  var_date 	     DATE := SYSDATE;
16:00:51 1445  
16:00:51 1446  var_offers SYS_REFCURSOR;
16:00:51 1447  
16:00:51 1448  -- EXCEPTIONS
16:00:51 1449  BAD_GIFT_CERTIFICATE_CODE      EXCEPTION;
16:00:51 1450  BAD_GROUP_ID		      EXCEPTION;
16:00:51 1451  CAN_NOT_CREATE_LICENSE	      EXCEPTION;
16:00:51 1452  GIFT_CERT_IS_FINALIZED	      EXCEPTION;
16:00:51 1453  GIFT_CERT_IS_REFUNDED	      EXCEPTION;
16:00:51 1454  CAN_NOT_UPDATE_CERTIFICATE     EXCEPTION;
16:00:51 1455  GIFT_CERTIFICATE_EXPIRED       EXCEPTION;
16:00:51 1456  GIFT_CERTIFICATE_REDEEMED      EXCEPTION;
16:00:51 1457  USER_ALREADY_SUBSCRIBED_TO_PRD EXCEPTION;
16:00:51 1458  LIMIT_REACHED		      EXCEPTION;
16:00:51 1459  GC_PURCHASE_INVOICE_NOT_CLOSED EXCEPTION;
16:00:51 1460  PURCHASE_INVOICES_NOT_PAID     EXCEPTION;
16:00:51 1461  OC_TO_REDEEM_NOT_FOUND	      EXCEPTION;
16:00:51 1462  CAN_NOT_GET_FIRST_OFFER_CHAIN  EXCEPTION;
16:00:51 1463  EXCEPTION_MESSAGE	      VARCHAR2(1024);
16:00:51 1464  BEGIN
16:00:51 1465  
16:00:51 1466  	 -- Get account id
16:00:51 1467  	 BEGIN
16:00:51 1468  	   SELECT
16:00:51 1469  	     ACCOUNT.ID,
16:00:51 1470  	     ACCOUNT.TAX_EXEMPT_ID
16:00:51 1471  	     into
16:00:51 1472  	     var_account_id,
16:00:51 1473  	     var_account_tax_exempt_id
16:00:51 1474  	   FROM
16:00:51 1475  	     ACCOUNT
16:00:51 1476  	   WHERE
16:00:51 1477  	     ACCOUNT.GROUP_ID = in_group_id
16:00:51 1478  	     AND ROWNUM <= 1;
16:00:51 1479  
16:00:51 1480  	   EXCEPTION
16:00:51 1481  	   WHEN NO_DATA_FOUND THEN
16:00:51 1482  	     RAISE BAD_GROUP_ID;
16:00:51 1483  	 END;
16:00:51 1484  
16:00:51 1485  	 -- Get gift certificate data
16:00:51 1486  	 BEGIN
16:00:51 1487  	   SELECT
16:00:51 1488  	     GIFT_CERTIFICATE.ID,
16:00:51 1489  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:00:51 1490  	     GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:00:51 1491  	     GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:00:51 1492  	     GIFT_CERTIFICATE.EXPIRATION_DATE,
16:00:51 1493  	     GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:00:51 1494  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID
16:00:51 1495  	     into
16:00:51 1496  	     var_gift_certificate_id,
16:00:51 1497  	     var_purchased_oc_id,
16:00:51 1498  	     var_gc_status_id,
16:00:51 1499  	     var_purchaser_group_id,
16:00:51 1500  	     var_gc_expiration_date,
16:00:51 1501  	     var_gc_redeemer_group_id,
16:00:51 1502  	     var_gc_purchase_invoice_id
16:00:51 1503  	   FROM
16:00:51 1504  	     GIFT_CERTIFICATE
16:00:51 1505  	   WHERE
16:00:51 1506  	     GIFT_CERTIFICATE.CODE = in_gift_certificate_code
16:00:51 1507  	     AND ROWNUM <= 1;
16:00:51 1508  
16:00:51 1509  	   EXCEPTION
16:00:51 1510  	   WHEN NO_DATA_FOUND THEN
16:00:51 1511  	     RAISE BAD_GIFT_CERTIFICATE_CODE;
16:00:51 1512  	 END;
16:00:51 1513  
16:00:51 1514  	 -- get redemption oc id from meta data if it wasn't passed in, parsing will fail for gcs with multiple redemption offer chains,
16:00:51 1515  	 -- but in that case a redemption offer chain id should always be passed in
16:00:51 1516  	 IF var_oc_id_to_redeem IS NULL THEN
16:00:51 1517  	   BEGIN
16:00:51 1518  	     SELECT
16:00:51 1519  	       to_number(OFFER_CHAIN_META_DATA.VALUE)
16:00:51 1520  	       into
16:00:51 1521  	       var_oc_id_to_redeem
16:00:51 1522  	     FROM
16:00:51 1523  	       OFFER_CHAIN_META_DATA
16:00:51 1524  	     WHERE
16:00:51 1525  	       OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = var_purchased_oc_id
16:00:51 1526  	       AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V20.REDEMPTION_OC_ID
16:00:51 1527  	       AND ROWNUM = 1;
16:00:51 1528  -- requested by ticket so (but above is correct for the actual migrated data):
16:00:51 1529  --  SELECT
16:00:51 1530  --      OFFER_CHAIN.ID
16:00:51 1531  --      into
16:00:51 1532  --      var_oc_id_to_redeem
16:00:51 1533  --    FROM
16:00:51 1534  --      OFFER_CHAIN
16:00:51 1535  --	 INNER JOIN ELIGIBILITY ON OFFER_CHAIN.ID = ELIGIBILITY.OFFER_CHAIN_ID
16:00:51 1536  --	 INNER JOIN OFFER_CHAIN_META_DATA ON OFFER_CHAIN.ID = OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID
16:00:51 1537  --    WHERE
16:00:51 1538  --      ELIGIBILITY.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 1539  --      AND ELIGIBILITY.NAME = GLOBAL_CONSTANTS_V20.GIFT_CERTIFICATE_REQUIRED
16:00:51 1540  --      AND ELIGIBILITY.VALUE = GLOBAL_CONSTANTS_V20.ELIGIBILITY_FLAG_SET
16:00:51 1541  --      AND OFFER_CHAIN_META_DATA.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 1542  --      AND OFFER_CHAIN_META_DATA.NAME = GLOBAL_CONSTANTS_V20.REDEMPTION_OC_ID
16:00:51 1543  --      AND to_number(OFFER_CHAIN_META_DATA.VALUE) = var_purchased_oc_id
16:00:51 1544  --      AND ROWNUM = 1;
16:00:51 1545  
16:00:51 1546  	     EXCEPTION
16:00:51 1547  	     WHEN NO_DATA_FOUND THEN
16:00:51 1548  	       RAISE OC_TO_REDEEM_NOT_FOUND;
16:00:51 1549  	   END;
16:00:51 1550  	 END IF;
16:00:51 1551  
16:00:51 1552  	 -- Check that purchase invoice for this GC was closed
16:00:51 1553  	 SELECT
16:00:51 1554  	   INVOICE.INVOICE_STATUS_ID into var_gc_purchase_inv_status_id
16:00:51 1555  	 FROM
16:00:51 1556  	   INVOICE
16:00:51 1557  	 WHERE
16:00:51 1558  	   INVOICE.ID = var_gc_purchase_invoice_id;
16:00:51 1559  
16:00:51 1560  	 IF var_gc_purchase_inv_status_id != GLOBAL_STATUSES_V20.INVOICE_CLOSED THEN
16:00:51 1561  	   RAISE GC_PURCHASE_INVOICE_NOT_CLOSED;
16:00:51 1562  	 END IF;
16:00:51 1563  
16:00:51 1564  	 -- Check that this invoice was successfully processed by billing
16:00:51 1565  	 SELECT
16:00:51 1566  	   COUNT(1) into var_succ_purch_attempts_num
16:00:51 1567  	 FROM
16:00:51 1568  	   TRANSACTION_ATTEMPT TA
16:00:51 1569  	   INNER JOIN TRANSACTION T ON T.ID = TA.TRANSACTION_ID
16:00:51 1570  	   INNER JOIN CHARGE CH ON CH.TRANSACTION_ID = T.ID
16:00:51 1571  	 WHERE
16:00:51 1572  	   CH.INVOICE_ID = var_gc_purchase_invoice_id
16:00:51 1573  	   AND TA.TRANSACTION_ATTEMPT_STATUS_ID = GLOBAL_STATUSES_V20.TRANS_ATTEMPT_SUCCESS;
16:00:51 1574  
16:00:51 1575  	 IF var_succ_purch_attempts_num = 0 THEN
16:00:51 1576  	   SELECT
16:00:51 1577  	     COUNT(1) into var_succ_purch_attempts_num
16:00:51 1578  	   FROM
16:00:51 1579  	     DUAL
16:00:51 1580  	   WHERE
16:00:51 1581  	     PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(var_gc_purchase_invoice_id) = 0;
16:00:51 1582  	 END IF;
16:00:51 1583  
16:00:51 1584  	 IF var_succ_purch_attempts_num = 0 THEN
16:00:51 1585  	   RAISE PURCHASE_INVOICES_NOT_PAID;
16:00:51 1586  	 END IF;
16:00:51 1587  
16:00:51 1588  	 -- Check limit for gc's offer chain
16:00:51 1589  	 SELECT
16:00:51 1590  	   COUNT(*) into var_same_offer_chains_num
16:00:51 1591  	 FROM
16:00:51 1592  	   SUBSCRIPTION
16:00:51 1593  	 WHERE
16:00:51 1594  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 1595  	   AND SUBSCRIPTION.OFFER_CHAIN_ID = var_oc_id_to_redeem
16:00:51 1596  	   AND (
16:00:51 1597  	     SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:51 1598  	     OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:51 1599  IF var_same_offer_chains_num = 0 THEN
16:00:51 1600  	   -- if user does not have any active existing subscriptions to the offer chain
16:00:51 1601  	   -- and if product from the offer chain is already owned from another offer chain
16:00:51 1602  	   -- then deny purchase
16:00:51 1603  	   FOR f_account_offer_chains IN (
16:00:51 1604  	     SELECT DISTINCT
16:00:51 1605  	       OFFER_CHAIN_ID
16:00:51 1606  	     FROM
16:00:51 1607  	       SUBSCRIPTION
16:00:51 1608  	     WHERE
16:00:51 1609  	       ACCOUNT_ID = var_account_id
16:00:51 1610  	       AND (
16:00:51 1611  		 SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:51 1612  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
16:00:51 1613  		 OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:51 1614  	   )
16:00:51 1615  	   LOOP
16:00:51 1616  	     IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_account_offer_chains.OFFER_CHAIN_ID) = GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:51 1617  	       RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
16:00:51 1618  	     END IF;
16:00:51 1619  	   END LOOP;
16:00:51 1620  	 ELSE
16:00:51 1621  
16:00:51 1622  	   -- if user have any active existing subscriptions to the offer chain
16:00:51 1623  	   -- and if MAX_CONCURRENT_SUBS <= [user's subscription count for the offer chain]
16:00:51 1624  	   -- then deny purchase
16:00:51 1625  	   var_max_concurrent_subscrs := PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MAX_CONC_SUBSC(var_oc_id_to_redeem);
16:00:51 1626  	   IF var_max_concurrent_subscrs != GLOBAL_CONSTANTS_V20.INFINITY
16:00:51 1627  	     AND var_max_concurrent_subscrs <= var_same_offer_chains_num THEN
16:00:51 1628  	     RAISE LIMIT_REACHED;
16:00:51 1629  	   END IF;
16:00:51 1630  	 END IF;
16:00:51 1631  -- norlov: END OF TODO
16:00:51 1632  
16:00:51 1633  
16:00:51 1634  	 IF var_gc_redeemer_group_id IS NOT NULL THEN
16:00:51 1635  	   RAISE GIFT_CERTIFICATE_REDEEMED;
16:00:51 1636  	 END IF;
16:00:51 1637  
16:00:51 1638  	 IF var_gc_expiration_date < sysdate THEN
16:00:51 1639  	   RAISE GIFT_CERTIFICATE_EXPIRED;
16:00:51 1640  	 END IF;
16:00:51 1641  
16:00:51 1642  	  IF var_gc_status_id = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_REFUNDED THEN
16:00:51 1643  	   RAISE GIFT_CERT_IS_REFUNDED;
16:00:51 1644  	 END IF;
16:00:51 1645  
16:00:51 1646  	 IF var_gc_status_id = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED THEN
16:00:51 1647  	   RAISE GIFT_CERT_IS_FINALIZED;
16:00:51 1648  	 END IF;
16:00:51 1649  
16:00:51 1650  	 -- Check that user did not subscribed to same product already
16:00:51 1651  	 -- norlov: get rid of this since there is already the check?
16:00:51 1652  	 FOR f_user_offer_chain IN (
16:00:51 1653  	   SELECT DISTINCT
16:00:51 1654  	     OFFER_CHAIN_ID
16:00:51 1655  	   FROM
16:00:51 1656  	     SUBSCRIPTION
16:00:51 1657  	   WHERE
16:00:51 1658  	     ACCOUNT_ID=var_account_id
16:00:51 1659  	     AND (
16:00:51 1660  	       SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:51 1661  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
16:00:51 1662  	       OR SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD)
16:00:51 1663  	 )
16:00:51 1664  	 LOOP
16:00:51 1665  	   IF PROCS_OFFER_CHAIN_V20.CHECK_FOR_SAME_PRODUCTS(var_oc_id_to_redeem, f_user_offer_chain.OFFER_CHAIN_ID)=GLOBAL_CONSTANTS_V20.TRUE THEN
16:00:51 1666  	     RAISE USER_ALREADY_SUBSCRIBED_TO_PRD;
16:00:51 1667  	   END IF;
16:00:51 1668  	 END LOOP;
16:00:51 1669  
16:00:51 1670  	 -- Check for gift certificate amount
16:00:51 1671  	 SELECT
16:00:51 1672  	   SUM(CHARGE.CHARGE_AMOUNT) into var_gc_charges_amount
16:00:51 1673  	 FROM
16:00:51 1674  	   CHARGE
16:00:51 1675  	 WHERE
16:00:51 1676  	   CHARGE.INSTRUMENT_ID = var_gift_certificate_id
16:00:51 1677  	   AND CHARGE.INSTRUMENT_TYPE_ID = GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
16:00:51 1678  
16:00:51 1679  	 -- Create new invoice
16:00:51 1680  	 PROCS_INVOICE_V20.CREATE_INVOICE(
16:00:51 1681  	   out_invoice_id    => var_invoice_id,
16:00:51 1682  	   in_invoice_status => GLOBAL_STATUSES_V20.INVOICE_CLOSED,
16:00:51 1683  	   in_tax_exempt_id  => var_account_tax_exempt_id,
16:00:51 1684  	   in_created_by     => in_created_by
16:00:51 1685  	 );
16:00:51 1686  
16:00:51 1687  	 -- If a financial instrument wasn't passed in, use the gift certificate id
16:00:51 1688  	 -- Real financial instrument is required for upsell/till forbid gift subscriptions
16:00:51 1689  	 IF var_fin_instrument_id is null THEN
16:00:51 1690  	   var_fin_instrument_id := var_gift_certificate_id;
16:00:51 1691  	   var_fin_instrument_type_id := GLOBAL_ENUMS_V20.INSTRUMENT_GIFT_CERTIFICATE;
16:00:51 1692  	 END IF;
16:00:51 1693  
16:00:51 1694  	 -- Insert new row into subscription table
16:00:51 1695  	 PROCS_SUBSCRIPTION_CRU_V20.CREATE_SUBSCRIPTION(
16:00:51 1696  	   out_subscription_id	     => var_subscription_id,
16:00:51 1697  	   in_account_id	     => var_account_id,
16:00:51 1698  	   in_purchase_date	     => var_date,
16:00:51 1699  	   in_offer_chain_id	     => var_oc_id_to_redeem,
16:00:51 1700  	   in_created_by	     => in_created_by,
16:00:51 1701  	   in_instrument_type_id     => var_fin_instrument_type_id,
16:00:51 1702  	   in_instrument_id	     => var_fin_instrument_id,
16:00:51 1703  	   in_subscription_status_id => GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:51 1704  	 );
16:00:51 1705  
16:00:51 1706  	 out_subscription_id := var_subscription_id;
16:00:51 1707  
16:00:51 1708  	 BEGIN
16:00:51 1709  	   PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER(var_oc_id_to_redeem, var_first_offer_id);
16:00:51 1710  	   EXCEPTION
16:00:51 1711  	     WHEN OTHERS THEN
16:00:51 1712  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1713  	       RAISE CAN_NOT_GET_FIRST_OFFER_CHAIN;
16:00:51 1714  	 END;
16:00:51 1715  
16:00:51 1716  	 BEGIN
16:00:51 1717  	   PROCS_LICENSE_V20.CREATE_LICENSE (
16:00:51 1718  	     out_license_id		 => out_license_id,
16:00:51 1719  	     in_status_id		 => GLOBAL_STATUSES_V20.LICENSE_ACTIVE,
16:00:51 1720  	     in_needs_entitlements	 => GLOBAL_CONSTANTS_V20.TRUE,
16:00:51 1721  	     in_start_date		 => var_date,
16:00:51 1722  	     in_offer_id		 => var_first_offer_id,
16:00:51 1723  	     in_subscription_id 	 => var_subscription_id,
16:00:51 1724  	     in_invoice_id		 => var_invoice_id,
16:00:51 1725  	     in_created_by		 => in_created_by,
16:00:51 1726  	     in_end_date		 => NULL, -- Will be calculated automatically
16:00:51 1727  	     in_is_extension		 => GLOBAL_CONSTANTS_V20.FALSE,
16:00:51 1728  	     in_current_offer_index	 => PROCS_OFFER_CHAIN_V20.GET_FIRST_OFFER_INDEX(var_oc_id_to_redeem),
16:00:51 1729  	     in_current_offer_recurr_num => 1
16:00:51 1730  	   );
16:00:51 1731  
16:00:51 1732  	   EXCEPTION
16:00:51 1733  	     WHEN OTHERS THEN
16:00:51 1734  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1735  	       RAISE CAN_NOT_CREATE_LICENSE;
16:00:51 1736  	 END;
16:00:51 1737  
16:00:51 1738  	 -- Update original gift certificate
16:00:51 1739  	 BEGIN
16:00:51 1740  	   PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE(
16:00:51 1741  	     in_gift_certificate_id	   => var_gift_certificate_id,
16:00:51 1742  	     in_updated_by		   => in_created_by,
16:00:51 1743  	     in_redeemer_group_id	   => in_group_id,
16:00:51 1744  	     in_finalized_invoice_id	   => var_invoice_id,
16:00:51 1745  	     in_redemption_date 	   => var_date,
16:00:51 1746  	     in_redeemer_address_id	   => in_redeemer_address_id,
16:00:51 1747  	     in_gift_certificate_status_id => GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED
16:00:51 1748  	   );
16:00:51 1749  	   EXCEPTION
16:00:51 1750  	     WHEN OTHERS THEN
16:00:51 1751  	       EXCEPTION_MESSAGE := SQLERRM;
16:00:51 1752  	       RAISE CAN_NOT_UPDATE_CERTIFICATE;
16:00:51 1753  	 END;
16:00:51 1754  
16:00:51 1755  EXCEPTION
16:00:51 1756  WHEN LIMIT_REACHED THEN
16:00:51 1757  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
16:00:51 1758  	   SPROC_NAME, 'Limit reached for given offer chain');
16:00:51 1759  WHEN USER_ALREADY_SUBSCRIBED_TO_PRD THEN
16:00:51 1760  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.CONFLICT_ERROR,
16:00:51 1761  	   SPROC_NAME, 'User already subscribed to some product in given gift certificate');
16:00:51 1762  WHEN GIFT_CERTIFICATE_REDEEMED THEN
16:00:51 1763  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1764  	   SPROC_NAME, 'Gift certificate already redeemed');
16:00:51 1765  WHEN GIFT_CERTIFICATE_EXPIRED THEN
16:00:51 1766  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1767  	   SPROC_NAME, 'Gift certificate expired');
16:00:51 1768  WHEN GIFT_CERT_IS_FINALIZED THEN
16:00:51 1769  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1770  	   SPROC_NAME, 'Gift certificate is finalized');
16:00:51 1771  WHEN GIFT_CERT_IS_REFUNDED THEN
16:00:51 1772  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1773  	   SPROC_NAME, 'Gift certificate has been refunded');
16:00:51 1774  WHEN BAD_GROUP_ID THEN
16:00:51 1775  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1776  	   SPROC_NAME, 'No such account with given group id');
16:00:51 1777  WHEN OC_TO_REDEEM_NOT_FOUND THEN
16:00:51 1778  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1779  	   SPROC_NAME, 'Offer chain to redeem not found');
16:00:51 1780  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
16:00:51 1781  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1782  	   SPROC_NAME, 'No such gift certificate code');
16:00:51 1783  WHEN CAN_NOT_CREATE_LICENSE THEN
16:00:51 1784  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1785  	   SPROC_NAME, 'Could not create new license', EXCEPTION_MESSAGE);
16:00:51 1786  WHEN CAN_NOT_UPDATE_CERTIFICATE THEN
16:00:51 1787  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 1788  	   SPROC_NAME, 'Could not update gift certificate', EXCEPTION_MESSAGE);
16:00:51 1789  WHEN GC_PURCHASE_INVOICE_NOT_CLOSED THEN
16:00:51 1790  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1791  	   SPROC_NAME, 'Purchase invoice is not closed');
16:00:51 1792  WHEN PURCHASE_INVOICES_NOT_PAID THEN
16:00:51 1793  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 1794  	   SPROC_NAME, 'Purchase invoice is not successfully processed by billing');
16:00:51 1795  WHEN OTHERS THEN
16:00:51 1796  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1797  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1798  END;
16:00:51 1799  
16:00:51 1800  /******************************************************************************/
16:00:51 1801  
16:00:51 1802  PROCEDURE GET_GIFT_CERTIFICATE_BY_CODE (
16:00:51 1803  /*
16:00:51 1804  Throws exceptions:
16:00:51 1805  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1806  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 1807  */
16:00:51 1808  	 in_code	IN VARCHAR,
16:00:51 1809  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1810  ) AS
16:00:51 1811  -- VARIABLES
16:00:51 1812  SPROC_NAME		CONSTANT VARCHAR2(28) := 'GET_GIFT_CERTIFICATE_BY_CODE';
16:00:51 1813  temp_gift_certificate_id NUMBER;
16:00:51 1814  -- EXCEPTIONS
16:00:51 1815  BAD_GIFT_CERTIFICATE_CODE EXCEPTION;
16:00:51 1816  BEGIN
16:00:51 1817  
16:00:51 1818  	 BEGIN
16:00:51 1819  	   SELECT
16:00:51 1820  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
16:00:51 1821  	   FROM
16:00:51 1822  	     GIFT_CERTIFICATE
16:00:51 1823  	   WHERE
16:00:51 1824  	     GIFT_CERTIFICATE.CODE = in_code;
16:00:51 1825  	   EXCEPTION
16:00:51 1826  	     WHEN NO_DATA_FOUND THEN
16:00:51 1827  	       RAISE BAD_GIFT_CERTIFICATE_CODE;
16:00:51 1828  	 END;
16:00:51 1829  
16:00:51 1830  	 -- Select all gift certificates with given code
16:00:51 1831  	 OPEN out_result_set FOR
16:00:51 1832  	 SELECT
16:00:51 1833  	   gc.EXPIRATION_DATE,
16:00:51 1834  	   ch.name,
16:00:51 1835  	   ch.id,
16:00:51 1836  	   gc.sender_email,
16:00:51 1837  	   gc.sender_name,
16:00:51 1838  	   gc.recipient_email,
16:00:51 1839  	   gc.recipient_name,
16:00:51 1840  	   gc.purchase_date,
16:00:51 1841  	   gc.redemption_date,
16:00:51 1842  	   gc.purchaser_group_id,
16:00:51 1843  	   gc.redeemer_group_id,
16:00:51 1844  	   gc.gift_message,
16:00:51 1845  	   ocmd.value redemption_offer_chain_ids,
16:00:51 1846  	   s.offer_chain_id redeemed_offer_chain_id,
16:00:51 1847  	   gc.recipient_notify_date,
16:00:51 1848  	   gc.gift_certificate_status_id,
16:00:51 1849  	   gc.purchase_invoice_id,
16:00:51 1850  	   gc.finalized_invoice_id
16:00:51 1851  	 FROM
16:00:51 1852  	   GIFT_CERTIFICATE gc
16:00:51 1853  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:00:51 1854  	 INNER JOIN OFFER_CHAIN_META_DATA ocmd ON gc.offer_chain_id = ocmd.offer_chain_id AND ocmd.name = 'redemption offer chain id'
16:00:51 1855  	 LEFT JOIN LICENSE l ON l.invoice_id = gc.finalized_invoice_id
16:00:51 1856  	 LEFT JOIN SUBSCRIPTION s ON l.subscription_id = s.id
16:00:51 1857  	 WHERE
16:00:51 1858  	   gc.code = in_code;
16:00:51 1859  
16:00:51 1860  EXCEPTION
16:00:51 1861  WHEN BAD_GIFT_CERTIFICATE_CODE THEN
16:00:51 1862  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1863  	   SPROC_NAME, 'No such gift certificate');
16:00:51 1864  WHEN OTHERS THEN
16:00:51 1865  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1866  	   SPROC_NAME, 'Unknown Error', SQLERRM);
16:00:51 1867  END;
16:00:51 1868  
16:00:51 1869  /******************************************************************************/
16:00:51 1870  
16:00:51 1871  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:00:51 1872  /*
16:00:51 1873  Throws exceptions:
16:00:51 1874  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1875  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:51 1876  */
16:00:51 1877  	 in_gift_certificate_id IN NUMBER,
16:00:51 1878  	 out_result_set 	OUT SYS_REFCURSOR
16:00:51 1879  ) AS
16:00:51 1880  -- VARIABLES
16:00:51 1881  SPROC_NAME		CONSTANT VARCHAR2(26) := 'GET_GIFT_CERTIFICATE_BY_ID';
16:00:51 1882  temp_gift_certificate_id NUMBER;
16:00:51 1883  -- EXCEPTIONS
16:00:51 1884  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:00:51 1885  BEGIN
16:00:51 1886  
16:00:51 1887  	 BEGIN
16:00:51 1888  	   SELECT
16:00:51 1889  	     GIFT_CERTIFICATE.ID into temp_gift_certificate_id
16:00:51 1890  	   FROM
16:00:51 1891  	     GIFT_CERTIFICATE
16:00:51 1892  	   WHERE
16:00:51 1893  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:00:51 1894  	   EXCEPTION
16:00:51 1895  	     WHEN NO_DATA_FOUND THEN
16:00:51 1896  	       RAISE BAD_GIFT_CERTIFICATE_ID;
16:00:51 1897  	 END;
16:00:51 1898  
16:00:51 1899  	 -- Select all gift certificates with given code
16:00:51 1900  	 OPEN out_result_set FOR
16:00:51 1901  	 SELECT
16:00:51 1902  	   gc.EXPIRATION_DATE,
16:00:51 1903  	   ch.name,
16:00:51 1904  	   ch.id,
16:00:51 1905  	   gc.sender_email,
16:00:51 1906  	   gc.sender_name,
16:00:51 1907  	   gc.recipient_email,
16:00:51 1908  	   gc.recipient_name,
16:00:51 1909  	   gc.purchase_date,
16:00:51 1910  	   gc.redemption_date,
16:00:51 1911  	   gc.purchaser_group_id,
16:00:51 1912  	   gc.redeemer_group_id,
16:00:51 1913  	   gc.code,
16:00:51 1914  	   gc.gift_message,
16:00:51 1915  	   gc.recipient_notify_date
16:00:51 1916  	 FROM
16:00:51 1917  	   GIFT_CERTIFICATE gc
16:00:51 1918  	 INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:00:51 1919  	 WHERE
16:00:51 1920  	   gc.id = in_gift_certificate_id;
16:00:51 1921  
16:00:51 1922  EXCEPTION
16:00:51 1923  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:00:51 1924  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1925  	   SPROC_NAME, 'No such gift certificate');
16:00:51 1926  WHEN OTHERS THEN
16:00:51 1927  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1928  	   SPROC_NAME, 'Unknown Error', SQLERRM);
16:00:51 1929  END GET_GIFT_CERTIFICATE_BY_ID;
16:00:51 1930  
16:00:51 1931  /******************************************************************************/
16:00:51 1932  
16:00:51 1933  PROCEDURE GET_DEF_FINANCIAL_INSTRUMENT (
16:00:51 1934  	 in_group_id		IN  NUMBER,
16:00:51 1935  	 out_instrument_type_id OUT NUMBER,
16:00:51 1936  	 out_instrument_id	OUT NUMBER
16:00:51 1937  ) AS
16:00:51 1938  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_DEF_FINANCIAL_INSTRUMENT';
16:00:51 1939  BEGIN
16:00:51 1940  
16:00:51 1941  	 SELECT
16:00:51 1942  	   ACCOUNT.INSTRUMENT_TYPE_ID,
16:00:51 1943  	   ACCOUNT.INSTRUMENT_ID
16:00:51 1944  	   into
16:00:51 1945  	   out_instrument_type_id,
16:00:51 1946  	   out_instrument_id
16:00:51 1947  	 FROM
16:00:51 1948  	   ACCOUNT
16:00:51 1949  	 WHERE
16:00:51 1950  	   ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1951  
16:00:51 1952  EXCEPTION
16:00:51 1953  WHEN NO_DATA_FOUND THEN
16:00:51 1954  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1955  	   SPROC_NAME, 'Bad group id');
16:00:51 1956  WHEN OTHERS THEN
16:00:51 1957  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1958  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1959  END GET_DEF_FINANCIAL_INSTRUMENT;
16:00:51 1960  
16:00:51 1961  /******************************************************************************/
16:00:51 1962  
16:00:51 1963  PROCEDURE SET_DEF_FINANCIAL_INSTRUMENT (
16:00:51 1964  	 in_group_id	       IN NUMBER,
16:00:51 1965  	 in_instrument_type_id IN NUMBER,
16:00:51 1966  	 in_instrument_id      IN NUMBER,
16:00:51 1967  	 in_updated_by	       IN VARCHAR2
16:00:51 1968  ) AS
16:00:51 1969  -- VARIABLES
16:00:51 1970  SPROC_NAME	      CONSTANT VARCHAR2(28) := 'SET_DEF_FINANCIAL_INSTRUMENT';
16:00:51 1971  var_account_id	      NUMBER;
16:00:51 1972  -- EXCEPTIONS
16:00:51 1973  BAD_GROUP_ID	      EXCEPTION;
16:00:51 1974  BAD_CREDIT_CARD	      EXCEPTION;
16:00:51 1975  BAD_PAYPAL	      EXCEPTION;
16:00:51 1976  BAD_INSTRUMENT_TYPE    EXCEPTION;
16:00:51 1977  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 1978  BEGIN
16:00:51 1979  
16:00:51 1980  	 -- get account id
16:00:51 1981  	 BEGIN
16:00:51 1982  	   SELECT
16:00:51 1983  	     ACCOUNT.ID into var_account_id
16:00:51 1984  	   FROM
16:00:51 1985  	     ACCOUNT
16:00:51 1986  	   WHERE
16:00:51 1987  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1988  	   EXCEPTION
16:00:51 1989  	     WHEN NO_DATA_FOUND THEN
16:00:51 1990  	       RAISE BAD_GROUP_ID;
16:00:51 1991  	 END;
16:00:51 1992  
16:00:51 1993  	 -- Chech that given instrument exists
16:00:51 1994  	 IF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:51 1995  	   IF IS_CREDIT_CARD_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 1996  	     RAISE BAD_CREDIT_CARD;
16:00:51 1997  	   END IF;
16:00:51 1998  	 ELSIF in_instrument_type_id = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:51 1999  	   IF IS_PAYPAL_EXISTS(in_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 2000  	     RAISE BAD_PAYPAL;
16:00:51 2001  	   END IF;
16:00:51 2002  	 ELSE
16:00:51 2003  	   RAISE BAD_INSTRUMENT_TYPE;
16:00:51 2004  	 END IF;
16:00:51 2005  
16:00:51 2006  	 -- update account information
16:00:51 2007  	 PROCS_ACCOUNT_CRU_V20.UPDATE_ACCOUNT(
16:00:51 2008  	   in_account_id	 => var_account_id,
16:00:51 2009  	   in_updated_by	 => in_updated_by,
16:00:51 2010  	   in_instrument_type_id => in_instrument_type_id,
16:00:51 2011  	   in_instrument_id	 => in_instrument_id
16:00:51 2012  	 );
16:00:51 2013  
16:00:51 2014  EXCEPTION
16:00:51 2015  WHEN BAD_GROUP_ID THEN
16:00:51 2016  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2017  	   SPROC_NAME, 'No such account');
16:00:51 2018  WHEN BAD_CREDIT_CARD THEN
16:00:51 2019  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2020  	   SPROC_NAME, 'Could not find credit card with given ID');
16:00:51 2021  WHEN BAD_PAYPAL THEN
16:00:51 2022  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2023  	   SPROC_NAME, 'Could not find paypal with given ID');
16:00:51 2024  WHEN BAD_INSTRUMENT_TYPE THEN
16:00:51 2025  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 2026  	   SPROC_NAME, 'Bad instrument type id');
16:00:51 2027  WHEN OTHERS THEN
16:00:51 2028  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2029  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2030  END SET_DEF_FINANCIAL_INSTRUMENT;
16:00:51 2031  
16:00:51 2032  /******************************************************************************/
16:00:51 2033  
16:00:51 2034  PROCEDURE DEL_DEF_FINANCIAL_INSTRUMENT (
16:00:51 2035  	 in_group_id IN NUMBER
16:00:51 2036  ) AS
16:00:51 2037  SPROC_NAME CONSTANT VARCHAR2(28) := 'DEL_DEF_FINANCIAL_INSTRUMENT';
16:00:51 2038  -- VARIABLES
16:00:51 2039  var_account_id NUMBER;
16:00:51 2040  -- EXCEPTIONS
16:00:51 2041  BAD_GROUP_ID	 EXCEPTION;
16:00:51 2042  EXCEPTION_MESSAGE VARCHAR2(1024);
16:00:51 2043  BEGIN
16:00:51 2044  
16:00:51 2045  	 BEGIN
16:00:51 2046  	   SELECT
16:00:51 2047  	     ACCOUNT.ID into var_account_id
16:00:51 2048  	   FROM
16:00:51 2049  	     ACCOUNT
16:00:51 2050  	   WHERE
16:00:51 2051  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 2052  	   EXCEPTION
16:00:51 2053  	     WHEN NO_DATA_FOUND THEN
16:00:51 2054  	       RAISE BAD_GROUP_ID;
16:00:51 2055  	 END;
16:00:51 2056  
16:00:51 2057  	 PROCS_ACCOUNT_CRU_V20.UPDATE_DEF_FIN_INSTRUMENT(
16:00:51 2058  	   in_account_id => var_account_id,
16:00:51 2059  	   in_instrument_type_id => NULL,
16:00:51 2060  	   in_instrument_id => NULL,
16:00:51 2061  	   in_updated_by => 'in_updated_by' -- TODO: add in_updated_by field
16:00:51 2062  	 );
16:00:51 2063  
16:00:51 2064  EXCEPTION
16:00:51 2065  WHEN BAD_GROUP_ID THEN
16:00:51 2066  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2067  	   SPROC_NAME, 'No such group id');
16:00:51 2068  WHEN OTHERS THEN
16:00:51 2069  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2070  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2071  END DEL_DEF_FINANCIAL_INSTRUMENT;
16:00:51 2072  
16:00:51 2073  /******************************************************************************/
16:00:51 2074  
16:00:51 2075  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:51 2076  	 in_credit_card_id IN  NUMBER,
16:00:51 2077  	 out_result_set    OUT SYS_REFCURSOR
16:00:51 2078  ) AS
16:00:51 2079  -- VARIABLES
16:00:51 2080  SPROC_NAME    CONSTANT VARCHAR2(21) := 'GET_CREDIT_CARD_BY_ID';
16:00:51 2081  temp_cc_count NUMBER;
16:00:51 2082  
16:00:51 2083  -- EXCEPTIONS
16:00:51 2084  BAD_CREDIT_CARD_ID EXCEPTION;
16:00:51 2085  BEGIN
16:00:51 2086  
16:00:51 2087  	 -- Check that credit card exists
16:00:51 2088  	 SELECT
16:00:51 2089  	   COUNT(*) into temp_cc_count
16:00:51 2090  	 FROM
16:00:51 2091  	   CREDIT_CARD
16:00:51 2092  	 WHERE
16:00:51 2093  	   CREDIT_CARD.ID = in_credit_card_id;
16:00:51 2094  	 IF temp_cc_count = 0 THEN
16:00:51 2095  	   RAISE BAD_CREDIT_CARD_ID;
16:00:51 2096  	 END IF;
16:00:51 2097  
16:00:51 2098  	 -- Get data
16:00:51 2099  	 OPEN out_result_set FOR
16:00:51 2100  	 SELECT
16:00:51 2101  	   CREDIT_CARD.ID,
16:00:51 2102  	   CREDIT_CARD.ACCOUNT_ID,
16:00:51 2103  	   CREDIT_CARD.INSTRUMENT_NAME,
16:00:51 2104  	   CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
16:00:51 2105  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS,
16:00:51 2106  	   CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
16:00:51 2107  	   CREDIT_CARD.STATE,
16:00:51 2108  	   CREDIT_CARD.CITY,
16:00:51 2109  	   CREDIT_CARD.POSTAL_CODE,
16:00:51 2110  	   CREDIT_CARD.COUNTRY,
16:00:51 2111  	   CREDIT_CARD.LAST_FOUR_CC,
16:00:51 2112  	   CREDIT_CARD.EXPIRATION_DATE,
16:00:51 2113  	   CREDIT_CARD.CREDIT_CARD_TYPE_ID,
16:00:51 2114  	   CREDIT_CARD.SECRET_TOKEN,
16:00:51 2115  	   CREDIT_CARD.CREATE_DATE,
16:00:51 2116  	   CREDIT_CARD.CREATED_BY,
16:00:51 2117  	   CREDIT_CARD.UPDATE_DATE,
16:00:51 2118  	   CREDIT_CARD.UPDATED_BY,
16:00:51 2119  	   CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:00:51 2120  	   CREDIT_CARD.PRIVATE_FIRST_NAME,
16:00:51 2121  	   CREDIT_CARD.PRIVATE_LAST_NAME,
16:00:51 2122  	       CREDIT_CARD.CHASE_PROFILE_ID
16:00:51 2123  	 FROM
16:00:51 2124  	   CREDIT_CARD
16:00:51 2125  	 WHERE
16:00:51 2126  	   CREDIT_CARD.ID = in_credit_card_id;
16:00:51 2127  
16:00:51 2128  EXCEPTION
16:00:51 2129  WHEN BAD_CREDIT_CARD_ID THEN
16:00:51 2130  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2131  	   SPROC_NAME, 'No such credit card');
16:00:51 2132  WHEN OTHERS THEN
16:00:51 2133  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2134  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2135  END GET_CREDIT_CARD_BY_ID;
16:00:51 2136  
16:00:51 2137  /******************************************************************************/
16:00:51 2138  
16:00:51 2139  PROCEDURE GET_PAYPAL_BY_ID (
16:00:51 2140  	 in_paypal_id	IN  NUMBER,
16:00:51 2141  	 out_result_set OUT SYS_REFCURSOR
16:00:51 2142  ) AS
16:00:51 2143  SPROC_NAME CONSTANT VARCHAR2(16) := 'GET_PAYPAL_BY_ID';
16:00:51 2144  -- VARIABLES
16:00:51 2145  temp_pp_count NUMBER;
16:00:51 2146  -- EXCEPTIONS
16:00:51 2147  BAD_PAYPAL_ID EXCEPTION;
16:00:51 2148  BEGIN
16:00:51 2149  
16:00:51 2150  	 -- Check that credit card exists
16:00:51 2151  	 SELECT
16:00:51 2152  	   COUNT(*) into temp_pp_count
16:00:51 2153  	 FROM
16:00:51 2154  	   PAYPAL
16:00:51 2155  	 WHERE
16:00:51 2156  	   PAYPAL.ID = in_paypal_id;
16:00:51 2157  	 IF temp_pp_count = 0 THEN
16:00:51 2158  	   RAISE BAD_PAYPAL_ID;
16:00:51 2159  	 END IF;
16:00:51 2160  
16:00:51 2161  	 OPEN out_result_set FOR
16:00:51 2162  	 SELECT
16:00:51 2163  	   ID,
16:00:51 2164  	   ACCOUNT_ID,
16:00:51 2165  	   INSTRUMENT_NAME,
16:00:51 2166  	   PRIVATE_EMAIL_ADDRESS,
16:00:51 2167  	   CREATE_DATE,
16:00:51 2168  	   CREATED_BY,
16:00:51 2169  	   UPDATE_DATE,
16:00:51 2170  	   UPDATED_BY,
16:00:51 2171  	   PAYPAL_STATUS_ID,
16:00:51 2172  	   PRIVATE_STREET_ADDRESS,
16:00:51 2173  	   PRIVATE_STREET_ADDRESS2,
16:00:51 2174  	   STATE,
16:00:51 2175  	   CITY,
16:00:51 2176  	   POSTAL_CODE,
16:00:51 2177  	   COUNTRY,
16:00:51 2178  	   EXPIRATION_DATE,
16:00:51 2179  	   SECRET_TOKEN
16:00:51 2180  	 FROM
16:00:51 2181  	   PAYPAL
16:00:51 2182  	 WHERE
16:00:51 2183  	   ID = in_paypal_id;
16:00:51 2184  
16:00:51 2185  EXCEPTION
16:00:51 2186  WHEN BAD_PAYPAL_ID THEN
16:00:51 2187  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2188  	   SPROC_NAME, 'No such paypal');
16:00:51 2189  WHEN OTHERS THEN
16:00:51 2190  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2191  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2192  END GET_PAYPAL_BY_ID;
16:00:51 2193  
16:00:51 2194  /******************************************************************************/
16:00:51 2195  
16:00:51 2196  FUNCTION F_CAN_DISABLE_CREDIT_CARD (
16:00:51 2197  /*
16:00:51 2198  	 Returns GLOBAL_CONSTANTS_V20.TRUE if system can disable credit card
16:00:51 2199  	 GLOBAL_CONSTANTS_V20.FALSE else
16:00:51 2200  */
16:00:51 2201  	 in_credit_card_id NUMBER
16:00:51 2202  ) RETURN NUMBER AS
16:00:51 2203  BEGIN
16:00:51 2204  	 -- STUB
16:00:51 2205  	 RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 2206  END F_CAN_DISABLE_CREDIT_CARD;
16:00:51 2207  
16:00:51 2208  /******************************************************************************/
16:00:51 2209  
16:00:51 2210  PROCEDURE GET_PURCHASED_GCERTIFICATES (
16:00:51 2211  	 in_group_id	IN NUMBER,
16:00:51 2212  	 out_result_set OUT SYS_REFCURSOR
16:00:51 2213  ) AS
16:00:51 2214  -- VARIABLES
16:00:51 2215  SPROC_NAME     CONSTANT VARCHAR2(27) := 'GET_PURCHASED_GCERTIFICATES';
16:00:51 2216  var_account_id NUMBER;
16:00:51 2217  -- EXCEPTIONS
16:00:51 2218  BAD_GROUP_ID EXCEPTION;
16:00:51 2219  BEGIN
16:00:51 2220  
16:00:51 2221  	 BEGIN
16:00:51 2222  	   SELECT
16:00:51 2223  	     ACCOUNT.ID into var_account_id
16:00:51 2224  	   FROM
16:00:51 2225  	     ACCOUNT
16:00:51 2226  	   WHERE
16:00:51 2227  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 2228  	   EXCEPTION
16:00:51 2229  	     WHEN NO_DATA_FOUND THEN
16:00:51 2230  	       RAISE BAD_GROUP_ID;
16:00:51 2231  	 END;
16:00:51 2232  
16:00:51 2233  	 OPEN out_result_set FOR
16:00:51 2234  	 SELECT
16:00:51 2235  	   GIFT_CERTIFICATE.CODE,
16:00:51 2236  	   GIFT_CERTIFICATE.EXPIRATION_DATE,
16:00:51 2237  	   OFFER_CHAIN.NAME AS "OFFER_CHAIN_NAME",
16:00:51 2238  	   OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:00:51 2239  	   GIFT_CERTIFICATE.SENDER_EMAIL,
16:00:51 2240  	   GIFT_CERTIFICATE.SENDER_NAME,
16:00:51 2241  	   GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:00:51 2242  	   GIFT_CERTIFICATE.RECIPIENT_NAME,
16:00:51 2243  	   GIFT_CERTIFICATE.PURCHASE_DATE,
16:00:51 2244  	   GIFT_CERTIFICATE.REDEMPTION_DATE,
16:00:51 2245  	   GIFT_CERTIFICATE.REDEEMER_GROUP_ID
16:00:51 2246  	 FROM
16:00:51 2247  	   GIFT_CERTIFICATE
16:00:51 2248  	   INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 2249  	 WHERE
16:00:51 2250  	   ROWNUM <= 100 AND
16:00:51 2251  	   GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:00:51 2252  
16:00:51 2253  EXCEPTION
16:00:51 2254  WHEN BAD_GROUP_ID THEN
16:00:51 2255  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2256  	   SPROC_NAME, 'No such group id');
16:00:51 2257  WHEN OTHERS THEN
16:00:51 2258  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2259  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2260  END GET_PURCHASED_GCERTIFICATES;
16:00:51 2261  
16:00:51 2262  /******************************************************************************/
16:00:51 2263  
16:00:51 2264  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:00:51 2265  	 in_gift_certificate_id IN NUMBER,
16:00:51 2266  	 in_charge_id		IN NUMBER,
16:00:51 2267  	 out_result		OUT NUMBER
16:00:51 2268  ) AS
16:00:51 2269  -- VARIABLES
16:00:51 2270  SPROC_NAME	    CONSTANT VARCHAR2(25) := 'IS_GCERT_FOR_PROPER_OFFER';
16:00:51 2271  var_invoice_id	    NUMBER;
16:00:51 2272  var_offer_chain_id   NUMBER;
16:00:51 2273  var_offer_chain_s_id NUMBER;
16:00:51 2274  -- EXCEPTIONS
16:00:51 2275  BAD_CHARGE_ID		 EXCEPTION;
16:00:51 2276  BAD_GIFT_CERTIFICATE_ID	 EXCEPTION;
16:00:51 2277  CAN_NOT_FIND_SUBSCRIPTION EXCEPTION;
16:00:51 2278  BEGIN
16:00:51 2279  
16:00:51 2280  	 BEGIN
16:00:51 2281  	   SELECT
16:00:51 2282  	     CHARGE.INVOICE_ID into var_invoice_id
16:00:51 2283  	   FROM
16:00:51 2284  	     CHARGE
16:00:51 2285  	   WHERE
16:00:51 2286  	     CHARGE.ID = in_charge_id;
16:00:51 2287  	   EXCEPTION
16:00:51 2288  	     WHEN NO_DATA_FOUND THEN
16:00:51 2289  	       RAISE BAD_CHARGE_ID;
16:00:51 2290  	 END;
16:00:51 2291  
16:00:51 2292  	 BEGIN
16:00:51 2293  	   SELECT
16:00:51 2294  	     GIFT_CERTIFICATE.OFFER_CHAIN_ID into var_offer_chain_id
16:00:51 2295  	   FROM
16:00:51 2296  	     GIFT_CERTIFICATE
16:00:51 2297  	   WHERE
16:00:51 2298  	     GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:00:51 2299  	   EXCEPTION
16:00:51 2300  	     WHEN NO_DATA_FOUND THEN
16:00:51 2301  	       RAISE BAD_GIFT_CERTIFICATE_ID;
16:00:51 2302  	 END;
16:00:51 2303  
16:00:51 2304  	 BEGIN
16:00:51 2305  	   SELECT
16:00:51 2306  	     SUBSCRIPTION.OFFER_CHAIN_ID into var_offer_chain_s_id
16:00:51 2307  	   FROM
16:00:51 2308  	     SUBSCRIPTION
16:00:51 2309  	   WHERE
16:00:51 2310  	     SUBSCRIPTION.ID IN (
16:00:51 2311  	       SELECT DISTINCT
16:00:51 2312  		 LICENSE.SUBSCRIPTION_ID
16:00:51 2313  	       FROM
16:00:51 2314  		 LICENSE
16:00:51 2315  	       WHERE
16:00:51 2316  		 LICENSE.INVOICE_ID = var_invoice_id
16:00:51 2317  	     );
16:00:51 2318  	   EXCEPTION
16:00:51 2319  	     WHEN NO_DATA_FOUND THEN
16:00:51 2320  	       RAISE CAN_NOT_FIND_SUBSCRIPTION;
16:00:51 2321  	 END;
16:00:51 2322  
16:00:51 2323  	 IF var_offer_chain_s_id = var_offer_chain_id THEN
16:00:51 2324  	   out_result := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 2325  	 ELSE
16:00:51 2326  	   out_result := GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 2327  	 END IF;
16:00:51 2328  
16:00:51 2329  EXCEPTION
16:00:51 2330  WHEN BAD_CHARGE_ID THEN
16:00:51 2331  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2332  	   SPROC_NAME, 'No such charge');
16:00:51 2333  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:00:51 2334  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2335  	   SPROC_NAME, 'No such gift certificate');
16:00:51 2336  WHEN CAN_NOT_FIND_SUBSCRIPTION THEN
16:00:51 2337  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2338  	   SPROC_NAME, 'Could not find subscription for given charge');
16:00:51 2339  WHEN OTHERS THEN
16:00:51 2340  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2341  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2342  END IS_GCERT_FOR_PROPER_OFFER;
16:00:51 2343  
16:00:51 2344  /******************************************************************************/
16:00:51 2345  
16:00:51 2346  FUNCTION IS_CREDIT_CARD_EXISTS (
16:00:51 2347  /*
16:00:51 2348  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
16:00:51 2349  GLOBAL_CONSTANTS_V20.FALSE - else
16:00:51 2350  */
16:00:51 2351  	 in_credit_card_id IN NUMBER
16:00:51 2352  ) RETURN NUMBER AS
16:00:51 2353  -- VARIABLES
16:00:51 2354  var_cc_count NUMBER;
16:00:51 2355  BEGIN
16:00:51 2356  	 SELECT
16:00:51 2357  	   COUNT(*) into var_cc_count
16:00:51 2358  	 FROM
16:00:51 2359  	   CREDIT_CARD
16:00:51 2360  	 WHERE
16:00:51 2361  	   CREDIT_CARD.ID = in_credit_card_id;
16:00:51 2362  
16:00:51 2363  	 IF var_cc_count = 0 THEN
16:00:51 2364  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 2365  	 ELSE
16:00:51 2366  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 2367  	 END IF;
16:00:51 2368  
16:00:51 2369  END IS_CREDIT_CARD_EXISTS;
16:00:51 2370  
16:00:51 2371  /******************************************************************************/
16:00:51 2372  
16:00:51 2373  FUNCTION IS_PAYPAL_EXISTS (
16:00:51 2374  /*
16:00:51 2375  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
16:00:51 2376  GLOBAL_CONSTANTS_V20.FALSE - else
16:00:51 2377  */
16:00:51 2378  	 in_paypal_id IN NUMBER
16:00:51 2379  ) RETURN NUMBER AS
16:00:51 2380  -- VARIABLES
16:00:51 2381  var_pp_count NUMBER;
16:00:51 2382  BEGIN
16:00:51 2383  	 SELECT
16:00:51 2384  	   COUNT(*) into var_pp_count
16:00:51 2385  	 FROM
16:00:51 2386  	   PAYPAL
16:00:51 2387  	 WHERE
16:00:51 2388  	   PAYPAL.ID = in_paypal_id;
16:00:51 2389  
16:00:51 2390  	 IF var_pp_count = 0 THEN
16:00:51 2391  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 2392  	 ELSE
16:00:51 2393  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 2394  	 END IF;
16:00:51 2395  
16:00:51 2396  END IS_PAYPAL_EXISTS;
16:00:51 2397  
16:00:51 2398  /******************************************************************************/
16:00:51 2399  
16:00:51 2400  FUNCTION IS_GIFT_CERTIFICATE_EXISTS (
16:00:51 2401  /*
16:00:51 2402  GLOBAL_CONSTANTS_V20.TRUE - if instrument exists
16:00:51 2403  GLOBAL_CONSTANTS_V20.FALSE - else
16:00:51 2404  */
16:00:51 2405  	 in_gift_certificate_id IN NUMBER
16:00:51 2406  ) RETURN NUMBER AS
16:00:51 2407  -- VARIABLES
16:00:51 2408  var_gc_count NUMBER;
16:00:51 2409  BEGIN
16:00:51 2410  	 SELECT
16:00:51 2411  	   COUNT(*) into var_gc_count
16:00:51 2412  	 FROM
16:00:51 2413  	   GIFT_CERTIFICATE
16:00:51 2414  	 WHERE
16:00:51 2415  	   GIFT_CERTIFICATE.ID = in_gift_certificate_id;
16:00:51 2416  
16:00:51 2417  	 IF var_gc_count = 0 THEN
16:00:51 2418  	   RETURN GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 2419  	 ELSE
16:00:51 2420  	   RETURN GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 2421  	 END IF;
16:00:51 2422  
16:00:51 2423  END IS_GIFT_CERTIFICATE_EXISTS;
16:00:51 2424  
16:00:51 2425  /******************************************************************************/
16:00:51 2426  
16:00:51 2427  PROCEDURE GET_GROUP_ID_BY_CREDIT_CARD_ID (
16:00:51 2428  	 in_credit_card_id IN NUMBER,
16:00:51 2429  	 out_group_id	   OUT NUMBER
16:00:51 2430  ) AS
16:00:51 2431  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_GROUP_ID_BY_CREDIT_CARD_ID';
16:00:51 2432  BEGIN
16:00:51 2433  	 SELECT
16:00:51 2434  	   ACCOUNT.GROUP_ID into out_group_id
16:00:51 2435  	 FROM
16:00:51 2436  	   CREDIT_CARD
16:00:51 2437  	   INNER JOIN ACCOUNT ON CREDIT_CARD.ACCOUNT_ID = ACCOUNT.ID
16:00:51 2438  	 WHERE
16:00:51 2439  	   CREDIT_CARD.ID = in_credit_card_id;
16:00:51 2440  EXCEPTION
16:00:51 2441  WHEN NO_DATA_FOUND THEN
16:00:51 2442  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2443  	   SPROC_NAME, 'No such credit card');
16:00:51 2444  WHEN OTHERS THEN
16:00:51 2445  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2446  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2447  END GET_GROUP_ID_BY_CREDIT_CARD_ID;
16:00:51 2448  
16:00:51 2449  /******************************************************************************/
16:00:51 2450  
16:00:51 2451  PROCEDURE GET_GROUP_ID_BY_PAYPAL_ID (
16:00:51 2452  	 in_paypal_id IN NUMBER,
16:00:51 2453  	 out_group_id OUT NUMBER
16:00:51 2454  ) AS
16:00:51 2455  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ID_BY_PAYPAL_ID';
16:00:51 2456  BEGIN
16:00:51 2457  	 SELECT
16:00:51 2458  	   ACCOUNT.GROUP_ID into out_group_id
16:00:51 2459  	 FROM
16:00:51 2460  	   PAYPAL
16:00:51 2461  	   INNER JOIN ACCOUNT ON PAYPAL.ACCOUNT_ID = ACCOUNT.ID
16:00:51 2462  	 WHERE
16:00:51 2463  	   PAYPAL.ID = in_paypal_id;
16:00:51 2464  EXCEPTION
16:00:51 2465  WHEN NO_DATA_FOUND THEN
16:00:51 2466  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2467  	   SPROC_NAME, 'No such paypal');
16:00:51 2468  WHEN OTHERS THEN
16:00:51 2469  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2470  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2471  END GET_GROUP_ID_BY_PAYPAL_ID;
16:00:51 2472  
16:00:51 2473  /******************************************************************************/
16:00:51 2474  
16:00:51 2475  PROCEDURE UPDATE_CREDIT_CARD_STATUS (
16:00:51 2476  	 in_credit_card_id	  IN CREDIT_CARD.ID%TYPE,
16:00:51 2477  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE,
16:00:51 2478  	 in_updated_by		  IN CREDIT_CARD.UPDATED_BY%TYPE
16:00:51 2479  ) AS
16:00:51 2480  SPROC_NAME CONSTANT VARCHAR2(25) := 'UPDATE_CREDIT_CARD_STATUS';
16:00:51 2481  -- EXCEPTIONS
16:00:51 2482  BAD_CREDIT_CARD_ID     EXCEPTION;
16:00:51 2483  BAD_STATUS_ID	      EXCEPTION;
16:00:51 2484  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 2485  BEGIN
16:00:51 2486  
16:00:51 2487  	 IF in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE
16:00:51 2488  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_INVALID
16:00:51 2489  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_DISABLED
16:00:51 2490  	   AND in_credit_card_status_id != GLOBAL_STATUSES_V20.CREDIT_CARD_EXPIRED THEN
16:00:51 2491  	   RAISE BAD_STATUS_ID;
16:00:51 2492  	 END IF;
16:00:51 2493  
16:00:51 2494  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_CREDIT_CARD(
16:00:51 2495  	   in_credit_card_id	    => in_credit_card_id,
16:00:51 2496  	   in_updated_by	    => in_updated_by,
16:00:51 2497  	   in_credit_card_status_id => in_credit_card_status_id
16:00:51 2498  	 );
16:00:51 2499  
16:00:51 2500  	 IF SQL%ROWCOUNT = 0 THEN
16:00:51 2501  	   RAISE BAD_CREDIT_CARD_ID;
16:00:51 2502  	 END IF;
16:00:51 2503  
16:00:51 2504  EXCEPTION
16:00:51 2505  WHEN BAD_CREDIT_CARD_ID THEN
16:00:51 2506  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2507  	   SPROC_NAME, 'No such credit card');
16:00:51 2508  WHEN BAD_STATUS_ID THEN
16:00:51 2509  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 2510  	   SPROC_NAME, 'Bad credit card status id');
16:00:51 2511  WHEN OTHERS THEN
16:00:51 2512  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2513  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2514  END UPDATE_CREDIT_CARD_STATUS;
16:00:51 2515  
16:00:51 2516  /******************************************************************************/
16:00:51 2517  
16:00:51 2518  PROCEDURE UPDATE_PAYPAL_STATUS (
16:00:51 2519  	 in_paypal_id	     IN PAYPAL.ID%TYPE,
16:00:51 2520  	 in_paypal_status_id IN PAYPAL.PAYPAL_STATUS_ID%TYPE,
16:00:51 2521  	 in_updated_by	     IN PAYPAL.UPDATED_BY%TYPE
16:00:51 2522  ) AS
16:00:51 2523  SPROC_NAME CONSTANT VARCHAR2(20) := 'UPDATE_PAYPAL_STATUS';
16:00:51 2524  -- EXCEPTIONS
16:00:51 2525  BAD_PAYPAL_ID	      EXCEPTION;
16:00:51 2526  BAD_STATUS_ID	      EXCEPTION;
16:00:51 2527  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 2528  BEGIN
16:00:51 2529  
16:00:51 2530  	 IF in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_ACTIVE
16:00:51 2531  	   AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_INACTIVE
16:00:51 2532  	   AND in_paypal_status_id != GLOBAL_STATUSES_V20.PAYPAL_FROZEN THEN
16:00:51 2533  	   RAISE BAD_STATUS_ID;
16:00:51 2534  	 END IF;
16:00:51 2535  
16:00:51 2536  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_PAYPAL(
16:00:51 2537  	   in_paypal_id        => in_paypal_id,
16:00:51 2538  	   in_paypal_status_id => in_paypal_status_id,
16:00:51 2539  	   in_updated_by       => in_updated_by
16:00:51 2540  	 );
16:00:51 2541  
16:00:51 2542  	 IF SQL%ROWCOUNT = 0 THEN
16:00:51 2543  	   RAISE BAD_PAYPAL_ID;
16:00:51 2544  	 END IF;
16:00:51 2545  
16:00:51 2546  EXCEPTION
16:00:51 2547  WHEN BAD_PAYPAL_ID THEN
16:00:51 2548  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2549  	   SPROC_NAME, 'No such paypal');
16:00:51 2550  WHEN BAD_STATUS_ID THEN
16:00:51 2551  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 2552  	   SPROC_NAME, 'Bad paypal status id');
16:00:51 2553  WHEN OTHERS THEN
16:00:51 2554  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2555  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2556  END UPDATE_PAYPAL_STATUS;
16:00:51 2557  
16:00:51 2558  /******************************************************************************/
16:00:51 2559  
16:00:51 2560  PROCEDURE UPDATE_GIFT_CERTIFICATE_STATUS (
16:00:51 2561  	 in_gift_certificate_id        IN GIFT_CERTIFICATE.ID%TYPE,
16:00:51 2562  	 in_gift_certificate_status_id IN GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID%TYPE,
16:00:51 2563  	 in_updated_by		       IN GIFT_CERTIFICATE.UPDATED_BY%TYPE
16:00:51 2564  ) AS
16:00:51 2565  SPROC_NAME CONSTANT VARCHAR2(30) := 'UPDATE_GIFT_CERTIFICATE_STATUS';
16:00:51 2566  -- EXCEPTIONS
16:00:51 2567  BAD_GIFT_CERTIFICATE_ID EXCEPTION;
16:00:51 2568  BAD_STATUS_ID	       EXCEPTION;
16:00:51 2569  EXCEPTION_MESSAGE       VARCHAR2(1024);
16:00:51 2570  BEGIN
16:00:51 2571  
16:00:51 2572  	 IF in_gift_certificate_status_id != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
16:00:51 2573  	   AND in_gift_certificate_status_id != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_FINALIZED THEN
16:00:51 2574  	   RAISE BAD_STATUS_ID;
16:00:51 2575  	 END IF;
16:00:51 2576  
16:00:51 2577  	 PROCS_FIN_INSTRUMENTS_CRU_V20.UPDATE_GIFT_CERTIFICATE(
16:00:51 2578  	   in_gift_certificate_id	 => in_gift_certificate_id,
16:00:51 2579  	   in_gift_certificate_status_id => in_gift_certificate_status_id,
16:00:51 2580  	   in_updated_by		 => in_updated_by
16:00:51 2581  	 );
16:00:51 2582  
16:00:51 2583  	 IF SQL%ROWCOUNT = 0 THEN
16:00:51 2584  	   RAISE BAD_GIFT_CERTIFICATE_ID;
16:00:51 2585  	 END IF;
16:00:51 2586  
16:00:51 2587  EXCEPTION
16:00:51 2588  WHEN BAD_GIFT_CERTIFICATE_ID THEN
16:00:51 2589  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2590  	   SPROC_NAME, 'No such gift certificate');
16:00:51 2591  WHEN BAD_STATUS_ID THEN
16:00:51 2592  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 2593  	   SPROC_NAME, 'Bad paypal status id');
16:00:51 2594  WHEN OTHERS THEN
16:00:51 2595  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2596  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2597  END UPDATE_GIFT_CERTIFICATE_STATUS;
16:00:51 2598  
16:00:51 2599  /******************************************************************************/
16:00:51 2600  
16:00:51 2601  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:51 2602  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:51 2603  	 out_result_set OUT SYS_REFCURSOR
16:00:51 2604  ) AS
16:00:51 2605  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_BY_PURCHASE_INVOICE_ID';
16:00:51 2606  -- VARIABLES
16:00:51 2607  temp_invoice_id NUMBER;
16:00:51 2608  -- EXCEPTIONS
16:00:51 2609  BAD_INVOICE_ID EXCEPTION;
16:00:51 2610  BEGIN
16:00:51 2611  
16:00:51 2612  	 BEGIN
16:00:51 2613  	   SELECT
16:00:51 2614  	     I.ID into temp_invoice_id
16:00:51 2615  	   FROM
16:00:51 2616  	     INVOICE I
16:00:51 2617  	   WHERE
16:00:51 2618  	     I.ID = in_invoice_id;
16:00:51 2619  	   EXCEPTION
16:00:51 2620  	     WHEN NO_DATA_FOUND THEN
16:00:51 2621  	       RAISE BAD_INVOICE_ID;
16:00:51 2622  	 END;
16:00:51 2623  
16:00:51 2624  	 OPEN out_result_set FOR
16:00:51 2625  	   SELECT
16:00:51 2626  	     gc.EXPIRATION_DATE,
16:00:51 2627  	     ch.name,
16:00:51 2628  	     ch.id offer_chain_id,
16:00:51 2629  	     gc.sender_email,
16:00:51 2630  	     gc.sender_name,
16:00:51 2631  	     gc.recipient_email,
16:00:51 2632  	     gc.recipient_name,
16:00:51 2633  	     gc.purchase_date,
16:00:51 2634  	     gc.redemption_date,
16:00:51 2635  	     gc.purchaser_group_id,
16:00:51 2636  	     gc.redeemer_group_id,
16:00:51 2637  	     gc.code,
16:00:51 2638  	     gc.gift_message,
16:00:51 2639  	     gc.recipient_notify_date,
16:00:51 2640  	     gc.id
16:00:51 2641  	   FROM
16:00:51 2642  	     GIFT_CERTIFICATE gc
16:00:51 2643  	     INNER JOIN OFFER_CHAIN ch ON ch.id = gc.offer_chain_id
16:00:51 2644  	   WHERE
16:00:51 2645  	     gc.PURCHASE_INVOICE_ID = in_invoice_id;
16:00:51 2646  
16:00:51 2647  EXCEPTION
16:00:51 2648  WHEN BAD_INVOICE_ID THEN
16:00:51 2649  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2650  	   SPROC_NAME, 'No such invoice');
16:00:51 2651  WHEN OTHERS THEN
16:00:51 2652  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2653  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2654  END GET_GC_BY_PURCH_INVOICE_ID;
16:00:51 2655  
16:00:51 2656  
16:00:51 2657  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:00:51 2658  	 in_invoice_id		 IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:51 2659  	 out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:00:51 2660  ) AS
16:00:51 2661  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GC_ID_BY_PURCHASE_INVOICE_ID';
16:00:51 2662  -- VARIABLES
16:00:51 2663  temp_invoice_id NUMBER;
16:00:51 2664  -- EXCEPTIONS
16:00:51 2665  BAD_INVOICE_ID EXCEPTION;
16:00:51 2666  BEGIN
16:00:51 2667  
16:00:51 2668  	 BEGIN
16:00:51 2669  	   SELECT
16:00:51 2670  	     I.ID into temp_invoice_id
16:00:51 2671  	   FROM
16:00:51 2672  	     INVOICE I
16:00:51 2673  	   WHERE
16:00:51 2674  	     I.ID = in_invoice_id;
16:00:51 2675  	   EXCEPTION
16:00:51 2676  	     WHEN NO_DATA_FOUND THEN
16:00:51 2677  	       RAISE BAD_INVOICE_ID;
16:00:51 2678  	 END;
16:00:51 2679  
16:00:51 2680  	 BEGIN
16:00:51 2681  	   SELECT
16:00:51 2682  	     GIFT_CERTIFICATE.ID into out_gift_certificate_id
16:00:51 2683  	   FROM
16:00:51 2684  	     GIFT_CERTIFICATE
16:00:51 2685  	   WHERE
16:00:51 2686  	     GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id;
16:00:51 2687  	   EXCEPTION
16:00:51 2688  	     WHEN NO_DATA_FOUND THEN
16:00:51 2689  	       out_gift_certificate_id := NULL;
16:00:51 2690  	 END;
16:00:51 2691  
16:00:51 2692  EXCEPTION
16:00:51 2693  WHEN BAD_INVOICE_ID THEN
16:00:51 2694  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2695  	   SPROC_NAME, 'No such invoice');
16:00:51 2696  WHEN OTHERS THEN
16:00:51 2697  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2698  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2699  END GET_GC_ID_BY_PURCH_INVOICE_ID;
16:00:51 2700  
16:00:51 2701  /******************************************************************************/
16:00:51 2702  
16:00:51 2703  PROCEDURE SWITCH_FINANCIAL_INSTRUMENT (
16:00:51 2704  	 in_old_fin_instrument_id   IN NUMBER,
16:00:51 2705  	 in_old_fin_instrument_type IN NUMBER,
16:00:51 2706  	 in_new_fin_instrument_id   IN NUMBER,
16:00:51 2707  	 in_new_fin_instrument_type IN NUMBER,
16:00:51 2708  	 in_updated_by		    IN VARCHAR2
16:00:51 2709  ) AS
16:00:51 2710  SPROC_NAME CONSTANT VARCHAR2(27) := 'SWITCH_FINANCIAL_INSTRUMENT';
16:00:51 2711  -- variables
16:00:51 2712  temp_out_transaction_id NUMBER;
16:00:51 2713  temp_out_charge_id      NUMBER;
16:00:51 2714  var_accounts_count      NUMBER;
16:00:51 2715  var_transaction_type_old  "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
16:00:51 2716  var_transaction_type	 "TRANSACTION".TRANSACTION_TYPE_CODE%TYPE;
16:00:51 2717  -- EXCEPTIONS
16:00:51 2718  BAD_OLD_CC   EXCEPTION;
16:00:51 2719  BAD_OLD_PP   EXCEPTION;
16:00:51 2720  BAD_OLD_TYPE EXCEPTION;
16:00:51 2721  BAD_NEW_CC   EXCEPTION;
16:00:51 2722  BAD_NEW_PP   EXCEPTION;
16:00:51 2723  BAD_NEW_TYPE EXCEPTION;
16:00:51 2724  DIFFERENT_OWNERS EXCEPTION;
16:00:51 2725  BEGIN
16:00:51 2726  
16:00:51 2727  	 IF in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:51 2728  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 2729  	     -- throw exception: bad old credit card
16:00:51 2730  	     RAISE BAD_OLD_CC;
16:00:51 2731  	   END IF;
16:00:51 2732  	 ELSIF in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:51 2733  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_old_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 2734  	     -- throw exception: bad old paypal
16:00:51 2735  	     RAISE BAD_OLD_PP;
16:00:51 2736  	   END IF;
16:00:51 2737  	 ELSE
16:00:51 2738  	   -- throw exception: bad instrument type
16:00:51 2739  	   RAISE BAD_OLD_TYPE;
16:00:51 2740  	 END IF;
16:00:51 2741  
16:00:51 2742  	 IF in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD THEN
16:00:51 2743  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_CREDIT_CARD_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 2744  	     -- throw exception: bad new credit card
16:00:51 2745  	     RAISE BAD_NEW_CC;
16:00:51 2746  	   END IF;
16:00:51 2747  	 ELSIF in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL THEN
16:00:51 2748  	   IF PROCS_FIN_INSTRUMENTS_V20.IS_PAYPAL_EXISTS(in_new_fin_instrument_id) = GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 2749  	     -- throw exception: bad new paypal
16:00:51 2750  	     RAISE BAD_NEW_PP;
16:00:51 2751  	   END IF;
16:00:51 2752  	 ELSE
16:00:51 2753  	   -- throw exception: bad new instrument type
16:00:51 2754  	   RAISE BAD_NEW_TYPE;
16:00:51 2755  	 END IF;
16:00:51 2756  
16:00:51 2757  	 -- Check that owner of both instruments - same man
16:00:51 2758  
16:00:51 2759  	 SELECT count(1) into var_accounts_count FROM (
16:00:51 2760  	   SELECT
16:00:51 2761  	     CC.ACCOUNT_ID
16:00:51 2762  	   FROM
16:00:51 2763  	     CREDIT_CARD CC
16:00:51 2764  	   WHERE
16:00:51 2765  	     (
16:00:51 2766  	       CC.ID = in_old_fin_instrument_id
16:00:51 2767  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:51 2768  	     )
16:00:51 2769  	     OR
16:00:51 2770  	     (
16:00:51 2771  	       CC.ID = in_new_fin_instrument_id
16:00:51 2772  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_CREDIT_CARD
16:00:51 2773  	     )
16:00:51 2774  	   UNION
16:00:51 2775  	   SELECT
16:00:51 2776  	     PP.ACCOUNT_ID
16:00:51 2777  	   FROM
16:00:51 2778  	     PAYPAL PP
16:00:51 2779  	   WHERE
16:00:51 2780  	     (
16:00:51 2781  	       PP.ID = in_old_fin_instrument_id
16:00:51 2782  	       AND in_old_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
16:00:51 2783  	     )
16:00:51 2784  	     OR
16:00:51 2785  	     (
16:00:51 2786  	       PP.ID = in_new_fin_instrument_id
16:00:51 2787  	       AND in_new_fin_instrument_type = GLOBAL_ENUMS_V20.INSTRUMENT_PAYPAL
16:00:51 2788  	     )
16:00:51 2789  	 )
16:00:51 2790  	 WHERE
16:00:51 2791  	   account_id IS NOT NULL;
16:00:51 2792  
16:00:51 2793  	 IF (var_accounts_count > 1) THEN
16:00:51 2794  	   -- Throw exception: different owners of instruments
16:00:51 2795  	   RAISE DIFFERENT_OWNERS;
16:00:51 2796  	 END IF;
16:00:51 2797  
16:00:51 2798  	 FOR f_sub IN (
16:00:51 2799  	   select
16:00:51 2800  	     s.id
16:00:51 2801  	   FROM
16:00:51 2802  	     subscription s
16:00:51 2803  	   WHERE
16:00:51 2804  	     (
16:00:51 2805  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE OR
16:00:51 2806  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED OR
16:00:51 2807  	       s.subscription_status_id = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD
16:00:51 2808  	     )
16:00:51 2809  	     AND
16:00:51 2810  	     s.instrument_type_id = in_old_fin_instrument_type AND
16:00:51 2811  	     s.instrument_id = in_old_fin_instrument_id
16:00:51 2812  	 ) LOOP
16:00:51 2813  	   PROCS_SUBSCRIPTION_CRU_V20.UPDATE_SUBSCRIPTION(
16:00:51 2814  	     in_subscription_id => f_sub.id,
16:00:51 2815  	     in_instrument_type_id => in_new_fin_instrument_type,
16:00:51 2816  	     in_instrument_id => in_new_fin_instrument_id,
16:00:51 2817  	     in_updated_by => in_updated_by
16:00:51 2818  	   );
16:00:51 2819  	 END LOOP;
16:00:51 2820  
16:00:51 2821  	 FOR f_open_charge IN (
16:00:51 2822  	   select
16:00:51 2823  	     ch.id,
16:00:51 2824  	     ch.invoice_id,
16:00:51 2825  	     ch.transaction_id,
16:00:51 2826  	     ch.charge_amount
16:00:51 2827  	   FROM
16:00:51 2828  	     charge ch
16:00:51 2829  	   WHERE
16:00:51 2830  	     ch.instrument_type_id = in_old_fin_instrument_type
16:00:51 2831  	     AND ch.instrument_id = in_old_fin_instrument_id
16:00:51 2832  	     AND ch.charge_status_id = GLOBAL_STATUSES_V20.CHARGE_OPENED
16:00:51 2833  	 ) LOOP
16:00:51 2834  
16:00:51 2835  	   FOR f_pending_transaction IN (
16:00:51 2836  	     select
16:00:51 2837  	       id, transaction_amount, order_id, is_refund
16:00:51 2838  	     from
16:00:51 2839  	       transaction
16:00:51 2840  	     where
16:00:51 2841  	       id = f_open_charge.transaction_id
16:00:51 2842  	       and transaction_status_id = GLOBAL_STATUSES_V20.TRANSACTION_PENDING
16:00:51 2843  	   ) LOOP
16:00:51 2844  
16:00:51 2845  	     SELECT
16:00:51 2846  	       DECODE(TRANSACTION_TYPE_CODE, 'RECURRING_BILLING', 'RECURRING_BILLING_USER_UPDATE',
16:00:51 2847  					     'GRACE_PERIOD_FINAL', 'GRACE_PERIOD_USER_UPDATE',
16:00:51 2848  					     TRANSACTION_TYPE_CODE)
16:00:51 2849  	     INTO var_transaction_type
16:00:51 2850  	     FROM
16:00:51 2851  	       Transaction
16:00:51 2852  	     WHERE
16:00:51 2853  	       id = f_pending_transaction.id
16:00:51 2854  	       AND ROWNUM <= 1;
16:00:51 2855  
16:00:51 2856  	     PROCS_TRANSACTION_V20.CREATE_TRANSACTION (
16:00:51 2857  	       in_transaction_id => NULL,
16:00:51 2858  	       in_status_id  => GLOBAL_STATUSES_V20.TRANSACTION_PENDING,
16:00:51 2859  	       in_amount     => f_pending_transaction.transaction_amount,
16:00:51 2860  	       in_created_by => in_updated_by,
16:00:51 2861  	       in_order_id   => null,
16:00:51 2862  	       in_is_refund  => f_pending_transaction.is_refund,
16:00:51 2863  	       in_transaction_type_code => var_transaction_type,
16:00:51 2864  	       out_transaction_id => temp_out_transaction_id
16:00:51 2865  	     );
16:00:51 2866  
16:00:51 2867  	     PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
16:00:51 2868  	       in_transaction_id => f_pending_transaction.id,
16:00:51 2869  	       in_updated_by	 => in_updated_by,
16:00:51 2870  	       in_transaction_status_id  => GLOBAL_STATUSES_V20.TRANSACTION_CLOSED
16:00:51 2871  	     );
16:00:51 2872  
16:00:51 2873  	     -- Create new charge
16:00:51 2874  	     PROCS_CHARGE_V20.CREATE_CHARGE (
16:00:51 2875  	       in_invoice_id	     => f_open_charge.invoice_id,
16:00:51 2876  	       in_transaction_id     => temp_out_transaction_id,
16:00:51 2877  	       in_instrument_type_id => in_new_fin_instrument_type,
16:00:51 2878  	       in_instrument_id      => in_new_fin_instrument_id,
16:00:51 2879  	       in_charge_amount      => f_open_charge.charge_amount,
16:00:51 2880  	       in_created_by	     => in_updated_by,
16:00:51 2881  	       in_charge_status_id   => GLOBAL_STATUSES_V20.CHARGE_OPENED,
16:00:51 2882  	       out_charge_id	     => temp_out_charge_id
16:00:51 2883  	     );
16:00:51 2884  	     -- Cancel old charge
16:00:51 2885  	     PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
16:00:51 2886  	       in_charge_id	   => f_open_charge.id,
16:00:51 2887  	       in_updated_by	   => in_updated_by,
16:00:51 2888  	       in_charge_status_id => GLOBAL_STATUSES_V20.CHARGE_CANCELED
16:00:51 2889  	     );
16:00:51 2890  
16:00:51 2891  	     PROCS_ADJUSTMENTS_V20.UPDATE_INVOICE_ADJUSTMENT(
16:00:51 2892  	       IN_INVOICE_ID => f_open_charge.invoice_id,
16:00:51 2893  	       IN_ORIGINAL_CHARGE_ID => f_open_charge.id,
16:00:51 2894  	       IN_CHARGE_ID => temp_out_charge_id,
16:00:51 2895  	       IN_UPDATED_BY => in_updated_by
16:00:51 2896  	     );
16:00:51 2897  
16:00:51 2898  	   END LOOP;
16:00:51 2899  	 END LOOP;
16:00:51 2900  
16:00:51 2901  EXCEPTION
16:00:51 2902  WHEN BAD_OLD_CC THEN
16:00:51 2903  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2904  	   SPROC_NAME, 'Trying to switch from non existing credit card');
16:00:51 2905  WHEN BAD_OLD_PP THEN
16:00:51 2906  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2907  	   SPROC_NAME, 'Trying to switch from non existing paypal');
16:00:51 2908  WHEN BAD_OLD_TYPE THEN
16:00:51 2909  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2910  	   SPROC_NAME, 'Trying to switch from unknown/unsupported financial instrument');
16:00:51 2911  WHEN BAD_NEW_CC THEN
16:00:51 2912  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2913  	   SPROC_NAME, 'Trying to switch to non existing credit card');
16:00:51 2914  WHEN BAD_NEW_PP THEN
16:00:51 2915  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2916  	   SPROC_NAME, 'Trying to switch to non existing paypal');
16:00:51 2917  WHEN BAD_NEW_TYPE THEN
16:00:51 2918  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 2919  	   SPROC_NAME, 'Trying to switch to unknown/unsupported financial instrument');
16:00:51 2920  WHEN DIFFERENT_OWNERS THEN
16:00:51 2921  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 2922  	   SPROC_NAME, 'Could not switch instrument, because owners are different');
16:00:51 2923  WHEN OTHERS THEN
16:00:51 2924  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 2925  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 2926  END SWITCH_FINANCIAL_INSTRUMENT;
16:00:51 2927  
16:00:51 2928  END PROCS_FIN_INSTRUMENTS_V20;
16:00:51 2929  .
16:00:51 SQL> /

Package body created.

Elapsed: 00:00:00.36
16:00:51 SQL> 
16:00:51 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_GROUP_ACCOUNT_V20" AS
16:00:51   2  
16:00:51   3  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:00:51   4  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:51   5  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:00:51   6  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:51   7  ) AS
16:00:51   8  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_SS_NEED_ENTITLEMENTS';
16:00:51   9  BEGIN
16:00:51  10  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_SUBSCRIPTION_SHARE (
16:00:51  11  	  in_id 		=> in_sub_share_id,
16:00:51  12  	  in_needs_entitlements => in_need_entitlements,
16:00:51  13  	  in_updated_by 	=> in_updater
16:00:51  14  	);
16:00:51  15  END UPDATE_SS_NEED_ENTITLEMENTS;
16:00:51  16  
16:00:51  17  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:00:51  18  	out_result_set OUT SYS_REFCURSOR
16:00:51  19  ) AS
16:00:51  20  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_EXPIRES_NEED_ENTITLEMENTS';
16:00:51  21  BEGIN
16:00:51  22  	OPEN out_result_set FOR
16:00:51  23  	SELECT * FROM (
16:00:51  24  	  SELECT DISTINCT
16:00:51  25  	    ga.Subscription_Id,
16:00:51  26  	    A.Group_Id Borrower_Group_Id,
16:00:51  27  	    L.Offer_Id,
16:00:51  28  	    ss.id Subscription_Share_id
16:00:51  29  	  FROM
16:00:51  30  	    Subscription_Share Ss,
16:00:51  31  	    Group_Account Ga,
16:00:51  32  	    Account A,
16:00:51  33  	    License l
16:00:51  34  	  WHERE
16:00:51  35  	    Ss.Group_Account_Id        = ga.id
16:00:51  36  	    AND Ss.Needs_Entitlements  = GLOBAL_CONSTANTS_V20.TRUE
16:00:51  37  	    AND Ss.Borrower_Account_Id = A.Id
16:00:51  38  	    AND L.Subscription_Id      = Ga.Subscription_Id
16:00:51  39  	    AND ROWNUM <= 5000
16:00:51  40  	  ORDER BY dbms_random.value
16:00:51  41  ) WHERE
16:00:51  42  	ROWNUM <= 1000;
16:00:51  43  END SUB_EXPIRES_NEED_ENTITLEMENTS;
16:00:51  44  
16:00:51  45  PROCEDURE EXPIRE_SUB_SHARE(
16:00:51  46  	in_sub_share_id IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:51  47  	in_updater	IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:51  48  ) AS
16:00:51  49  SPROC_NAME CONSTANT VARCHAR2(32) := 'EXPIRE_SUB_SHARE';
16:00:51  50  BEGIN
16:00:51  51  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_SUBSCRIPTION_SHARE (
16:00:51  52  	  in_id 	=> in_sub_share_id,
16:00:51  53  	  in_end_date	=> SYSDATE,
16:00:51  54  	  in_updated_by => in_updater,
16:00:51  55  	  in_needs_entitlements => 1
16:00:51  56  	);
16:00:51  57  END EXPIRE_SUB_SHARE;
16:00:51  58  
16:00:51  59  PROCEDURE EXPIRE_ALL_SHARES (
16:00:51  60  	in_group_account_id IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:00:51  61  	in_updated_by	    IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:51  62  ) AS
16:00:51  63  SPROC_NAME CONSTANT VARCHAR2(28) := 'EXPIRE_ALL_SHARES';
16:00:51  64  BEGIN
16:00:51  65  	UPDATE SUBSCRIPTION_SHARE SET
16:00:51  66  	  END_DATE = SYSDATE,
16:00:51  67  	  UPDATED_BY = in_updated_by,
16:00:51  68  	  UPDATE_DATE = SYSDATE
16:00:51  69  	WHERE
16:00:51  70  	  GROUP_ACCOUNT_ID = in_group_account_id
16:00:51  71  	AND
16:00:51  72  	  SYSDATE < END_DATE;
16:00:51  73  EXCEPTION
16:00:51  74  	WHEN OTHERS THEN
16:00:51  75  	  PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51  76  	      SPROC_NAME, 'Unknown error while expiring subscription shares', SQLERRM);
16:00:51  77  END EXPIRE_ALL_SHARES;
16:00:51  78  
16:00:51  79  PROCEDURE SUB_SHARE_BY_GROUP_ID (
16:00:51  80  	in_group_id	 IN  ACCOUNT.GROUP_ID%TYPE,
16:00:51  81  	in_start	 IN  NUMBER,
16:00:51  82  	in_end		 IN  NUMBER,
16:00:51  83  	in_expired	 IN  NUMBER,
16:00:51  84  	out_result_set	 OUT SYS_REFCURSOR,
16:00:51  85  	out_shares_count OUT NUMBER
16:00:51  86  ) AS
16:00:51  87  SPROC_NAME CONSTANT VARCHAR2(32) := 'SUB_SHARE_BY_GROUP_ID';
16:00:51  88  range_diff NUMBER := 0;
16:00:51  89  upper_bond_diff NUMBER := 0;
16:00:51  90  l_start NUMBER := 0;
16:00:51  91  l_end   NUMBER := 0;
16:00:51  92  BEGIN
16:00:51  93  	--Normalize the end points [START]
16:00:51  94  	IF (in_start IS NULL OR in_start < 0) Then
16:00:51  95  	  l_start := 0;
16:00:51  96  	ELSE
16:00:51  97  	  l_start := in_start;
16:00:51  98  	END IF;
16:00:51  99  
16:00:51 100  	IF (in_end IS NULL) Then
16:00:51 101  	  l_end := 11;
16:00:51 102  	ELSE
16:00:51 103  	  l_end := in_end;
16:00:51 104  	END IF;
16:00:51 105  
16:00:51 106  	l_start := l_start + 1;
16:00:51 107  	l_end	:= l_end   + 1;
16:00:51 108  
16:00:51 109  	range_diff := l_end - l_start;
16:00:51 110  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
16:00:51 111  
16:00:51 112  	IF (upper_bond_diff > 0) Then
16:00:51 113  	  l_end := l_end - upper_bond_diff;
16:00:51 114  	END IF;
16:00:51 115  	--Normalize the end points [END]
16:00:51 116  
16:00:51 117  	BEGIN
16:00:51 118  	  SELECT
16:00:51 119  	    COUNT(1) INTO out_shares_count
16:00:51 120  	  FROM
16:00:51 121  	    GROUP_ACCOUNT ga,
16:00:51 122  	    SUBSCRIPTION_SHARE ss,
16:00:51 123  	    ACCOUNT a
16:00:51 124  	  WHERE
16:00:51 125  	    a.GROUP_ID		= in_group_id AND
16:00:51 126  	    a.Id		= ss.borrower_account_id And
16:00:51 127  	    ss.GROUP_ACCOUNT_ID = ga.ID;
16:00:51 128  	END;
16:00:51 129  
16:00:51 130  	IF in_expired > 0 THEN
16:00:51 131  	BEGIN
16:00:51 132  	    OPEN out_result_set FOR
16:00:51 133  	    SELECT
16:00:51 134  	      *
16:00:51 135  	    FROM
16:00:51 136  	      (SELECT rownum rnum, q.*
16:00:51 137  	       FROM
16:00:51 138  		(SELECT
16:00:51 139  		   ga.SUBSCRIPTION_ID,
16:00:51 140  		   ss.START_DATE,
16:00:51 141  		   ss.END_DATE,
16:00:51 142  		   a2.GROUP_ID AS PARENT_GROUP_ID
16:00:51 143  		 FROM
16:00:51 144  		   GROUP_ACCOUNT ga,
16:00:51 145  		   SUBSCRIPTION_SHARE ss,
16:00:51 146  		   ACCOUNT a,
16:00:51 147  		   SUBSCRIPTION s,
16:00:51 148  		   ACCOUNT a2
16:00:51 149  		 WHERE
16:00:51 150  		   a.GROUP_ID	       = in_group_id AND
16:00:51 151  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
16:00:51 152  		   ss.GROUP_ACCOUNT_ID = ga.ID	AND
16:00:51 153  		   ga.SUBSCRIPTION_ID  = s.ID AND
16:00:51 154  		   s.ACCOUNT_ID        = a2.ID
16:00:51 155  		) Q
16:00:51 156  	      WHERE rownum <= l_end)
16:00:51 157  	    WHERE rnum >= l_Start;
16:00:51 158  	END;
16:00:51 159  	ELSE
16:00:51 160  	BEGIN
16:00:51 161  	    OPEN out_result_set FOR
16:00:51 162  	    SELECT
16:00:51 163  	      *
16:00:51 164  	    FROM
16:00:51 165  	      (SELECT rownum rnum, q.*
16:00:51 166  	       FROM
16:00:51 167  		(SELECT
16:00:51 168  		   ga.SUBSCRIPTION_ID,
16:00:51 169  		   ss.START_DATE,
16:00:51 170  		   ss.END_DATE,
16:00:51 171  		   a2.GROUP_ID AS PARENT_GROUP_ID
16:00:51 172  		 FROM
16:00:51 173  		   GROUP_ACCOUNT ga,
16:00:51 174  		   SUBSCRIPTION_SHARE ss,
16:00:51 175  		   ACCOUNT a,
16:00:51 176  		   SUBSCRIPTION s,
16:00:51 177  		   ACCOUNT a2
16:00:51 178  		 WHERE
16:00:51 179  		   a.GROUP_ID	       = in_group_id AND
16:00:51 180  		   a.ID 	       = ss.BORROWER_ACCOUNT_ID AND
16:00:51 181  		   SYSDATE BETWEEN START_DATE AND END_DATE AND
16:00:51 182  		   ss.GROUP_ACCOUNT_ID = ga.ID AND
16:00:51 183  		   ga.SUBSCRIPTION_ID  = s.ID  AND
16:00:51 184  		   s.ACCOUNT_ID        = a2.ID
16:00:51 185  		) Q
16:00:51 186  	      WHERE rownum <= l_end)
16:00:51 187  	    WHERE rnum >= l_start;
16:00:51 188  	  END;
16:00:51 189  	END IF;
16:00:51 190  EXCEPTION
16:00:51 191  WHEN NO_DATA_FOUND THEN
16:00:51 192  	NULL;
16:00:51 193  WHEN OTHERS THEN
16:00:51 194  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 195  	  SPROC_NAME, 'Unknow error while retrieving subscription share info by group id', SQLERRM);
16:00:51 196  END SUB_SHARE_BY_GROUP_ID;
16:00:51 197  
16:00:51 198  PROCEDURE IS_VALID_IP_ADDRESS (
16:00:51 199  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:51 200  	in_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:51 201  	in_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:51 202  	out_is_valid	    OUT NUMBER
16:00:51 203  ) AS
16:00:51 204  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_IP_ADDRESS';
16:00:51 205  BEGIN
16:00:51 206  	SELECT
16:00:51 207  	  COUNT(1) INTO out_is_valid
16:00:51 208  	FROM
16:00:51 209  	  GROUP_ACCOUNT_IP_RANGE,
16:00:51 210  	  GROUP_ACCOUNT,
16:00:51 211  	  SUBSCRIPTION,
16:00:51 212  	  OFFER_CHAIN
16:00:51 213  	WHERE
16:00:51 214  	  GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID AND
16:00:51 215  	  GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:00:51 216  	  SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:00:51 217  	  OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL' AND
16:00:51 218  	 GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 219  	 (
16:00:51 220  	  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
16:00:51 221  	  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
16:00:51 222  	  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
16:00:51 223  	 ) AND
16:00:51 224  	 GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE;
16:00:51 225  EXCEPTION
16:00:51 226  WHEN OTHERS THEN
16:00:51 227  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 228  	  SPROC_NAME, 'Error while checking IP', SQLERRM);
16:00:51 229  END IS_VALID_IP_ADDRESS;
16:00:51 230  
16:00:51 231  PROCEDURE IS_VALID_EMAIL_DOMAIN (
16:00:51 232  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:51 233  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:51 234  	out_is_valid	    OUT NUMBER
16:00:51 235  ) AS
16:00:51 236  SPROC_NAME CONSTANT VARCHAR2(32) := 'IS_VALID_EMAIL_DOMAIN';
16:00:51 237  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:00:51 238  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:00:51 239  BEGIN
16:00:51 240  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
16:00:51 241  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
16:00:51 242  
16:00:51 243  	SELECT
16:00:51 244  	  COUNT(1) INTO out_is_valid
16:00:51 245  	FROM
16:00:51 246  	  GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
16:00:51 247  	  GROUP_ACCOUNT ga,
16:00:51 248  	  SUBSCRIPTION s,
16:00:51 249  	  OFFER_CHAIN oc
16:00:51 250  	WHERE
16:00:51 251  	  ga.ID = gaed.GROUP_ACCOUNT_ID AND
16:00:51 252  	  ga.SUBSCRIPTION_ID = s.ID AND
16:00:51 253  	  s.OFFER_CHAIN_ID = oc.ID AND
16:00:51 254  	  oc.GROUP_ACCOUNT_TYPE_ID IN ('GL', 'KL') AND
16:00:51 255  	  gaed.GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 256  	  (gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
16:00:51 257  	  gaed.IS_ACTIVE = 1;
16:00:51 258  EXCEPTION
16:00:51 259  WHEN OTHERS THEN
16:00:51 260  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 261  	  SPROC_NAME, 'Error while checking email domain', SQLERRM);
16:00:51 262  END IS_VALID_EMAIL_DOMAIN;
16:00:51 263  
16:00:51 264  PROCEDURE GET_SUBSCRIPTION_SHARE (
16:00:51 265  	in_group_account_id    IN SUBSCRIPTION_SHARE.GROUP_ACCOUNT_ID%TYPE,
16:00:51 266  	In_Borrower_Account_Id In SUBSCRIPTION_SHARE.BORROWER_ACCOUNT_ID%Type,
16:00:51 267  	out_Result_Set	       OUT Sys_Refcursor
16:00:51 268  ) AS
16:00:51 269  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARE';
16:00:51 270  BEGIN
16:00:51 271  	BEGIN
16:00:51 272  	   OPEN out_result_set FOR
16:00:51 273  	   SELECT
16:00:51 274  	      ss.ID,
16:00:51 275  	      ss.GROUP_ACCOUNT_ID,
16:00:51 276  	      ss.BORROWER_ACCOUNT_ID,
16:00:51 277  	      ss.IP_ADDRESS,
16:00:51 278  	      ss.START_DATE,
16:00:51 279  	      ss.END_DATE,
16:00:51 280  	      ss.CREATED_BY,
16:00:51 281  	      ss.CREATE_DATE,
16:00:51 282  	      ss.UPDATED_BY,
16:00:51 283  	      ss.UPDATE_DATE,
16:00:51 284  	      a.GROUP_ID AS BORROWER_GROUP_ID
16:00:51 285  	   FROM
16:00:51 286  	     SUBSCRIPTION_SHARE ss,
16:00:51 287  	     ACCOUNT a
16:00:51 288  	   WHERE
16:00:51 289  	     ss.GROUP_ACCOUNT_ID    = in_group_account_id AND
16:00:51 290  	     ss.BORROWER_ACCOUNT_ID = in_borrower_account_id AND
16:00:51 291  	     SYSDATE BETWEEN ss.START_DATE AND END_DATE AND
16:00:51 292  	     ss.BORROWER_ACCOUNT_ID  = a.ID;
16:00:51 293  	END;
16:00:51 294  EXCEPTION
16:00:51 295  WHEN OTHERS THEN
16:00:51 296  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 297  	  Sproc_Name, 'Error while getting subscription share', Sqlerrm);
16:00:51 298  END GET_SUBSCRIPTION_SHARE;
16:00:51 299  
16:00:51 300  PROCEDURE GET_GROUP_ACCOUNT_BY_SUB_ID (
16:00:51 301  	in_subscription_id IN Group_Account.SUBSCRIPTION_ID%TYPE,
16:00:51 302  	out_result_set	   OUT SYS_REFCURSOR
16:00:51 303  ) As
16:00:51 304  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_SUB_ID';
16:00:51 305  BEGIN
16:00:51 306  OPEN out_result_set FOR
16:00:51 307  	SELECT
16:00:51 308  	  ID,
16:00:51 309  	  SUBSCRIPTION_ID,
16:00:51 310  	  GROUP_NAME,
16:00:51 311  	  FIRST_NAME,
16:00:51 312  	  LAST_NAME,
16:00:51 313  	  EMAIL,
16:00:51 314  	  PHONE,
16:00:51 315  	  ORGANIZATION_TYPE,
16:00:51 316  	  SEATS,
16:00:51 317  	  SEAT_TTL_IN_HOURS,
16:00:51 318  	  CREATE_DATE,
16:00:51 319  	  CREATED_BY,
16:00:51 320  	  UPDATE_DATE,
16:00:51 321  	  UPDATED_BY
16:00:51 322  	FROM
16:00:51 323  	  GROUP_ACCOUNT
16:00:51 324  	Where
16:00:51 325  	  Subscription_Id = in_subscription_id;
16:00:51 326  EXCEPTION
16:00:51 327  WHEN OTHERS THEN
16:00:51 328  	Procs_Common_V20.Throw_Exception(APP_EXCEPTION_CODES_V20.Unknown_Error,
16:00:51 329  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 330  
16:00:51 331  END GET_GROUP_ACCOUNT_BY_SUB_ID;
16:00:51 332  
16:00:51 333  PROCEDURE CREATE_GROUP_ACCOUNT (
16:00:51 334  	in_subscription_id	 IN NUMBER,
16:00:51 335  	in_group_name		 IN VARCHAR2,
16:00:51 336  	in_first_name		 IN VARCHAR2,
16:00:51 337  	in_last_name		 IN VARCHAR2,
16:00:51 338  	in_email		 IN VARCHAR2,
16:00:51 339  	in_phone		 IN VARCHAR2,
16:00:51 340  	in_organization_type	 IN VARCHAR2,
16:00:51 341  	in_seats		 IN NUMBER,
16:00:51 342  	in_seat_ttl_in_hours	 IN NUMBER,
16:00:51 343  	in_ip			 IN NUMBER,
16:00:51 344  	in_created_by		 IN VARCHAR2
16:00:51 345  ) AS
16:00:51 346  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_GROUP_ACCOUNT';
16:00:51 347  BEGIN
16:00:51 348  
16:00:51 349  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.CREATE_GROUP_ACCOUNT(
16:00:51 350  	  in_subscription_id => in_subscription_id,
16:00:51 351  	  in_group_name => in_group_name,
16:00:51 352  	  in_first_name => in_first_name,
16:00:51 353  	  in_last_name => in_last_name,
16:00:51 354  	  in_email => in_email,
16:00:51 355  	  in_phone => in_phone,
16:00:51 356  	  in_organization_type => in_organization_type,
16:00:51 357  	  in_seats => in_seats,
16:00:51 358  	  in_seat_ttl_in_hours => in_seat_ttl_in_hours,
16:00:51 359  	  in_ip => in_ip,
16:00:51 360  	  in_created_by => in_created_by
16:00:51 361  	);
16:00:51 362  
16:00:51 363  END CREATE_GROUP_ACCOUNT;
16:00:51 364  
16:00:51 365  PROCEDURE GET_SUBSCRIPTION_SHARES (
16:00:51 366  	in_group_account_id IN NUMBER,
16:00:51 367  	in_start	    IN NUMBER,
16:00:51 368  	in_end		    IN NUMBER,
16:00:51 369  	out_Result_Set	    OUT Sys_Refcursor
16:00:51 370  ) AS
16:00:51 371  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_SUBSCRIPTION_SHARES';
16:00:51 372  range_diff NUMBER := 0;
16:00:51 373  upper_bond_diff NUMBER := 0;
16:00:51 374  l_start NUMBER := 0;
16:00:51 375  l_end   NUMBER := 0;
16:00:51 376  BEGIN
16:00:51 377  	-- Normalize the end points [START]
16:00:51 378  	IF (in_start IS NULL OR in_start < 0) Then
16:00:51 379  	  l_start := 0;
16:00:51 380  	ELSE
16:00:51 381  	  l_start := in_start;
16:00:51 382  	END IF;
16:00:51 383  
16:00:51 384  	IF (in_end IS NULL) Then
16:00:51 385  	  l_end := 11;
16:00:51 386  	ELSE
16:00:51 387  	  l_end := in_end;
16:00:51 388  	END IF;
16:00:51 389  
16:00:51 390  	l_start := l_start + 1;
16:00:51 391  	l_end	:= l_end   + 1;
16:00:51 392  
16:00:51 393  	range_diff := l_end - l_start;
16:00:51 394  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
16:00:51 395  
16:00:51 396  	IF (upper_bond_diff > 0) Then
16:00:51 397  	  l_end := l_end - upper_bond_diff;
16:00:51 398  	END IF;
16:00:51 399  	-- Normalize the end points [END]
16:00:51 400  
16:00:51 401  	BEGIN
16:00:51 402  	   OPEN out_result_set FOR
16:00:51 403  	   SELECT *
16:00:51 404  	   FROM
16:00:51 405  	     (SELECT rownum rnum, Q.*
16:00:51 406  	      FROM
16:00:51 407  	       (SELECT
16:00:51 408  		  ss.ID,
16:00:51 409  		  ss.GROUP_ACCOUNT_ID,
16:00:51 410  		  ss.BORROWER_ACCOUNT_ID,
16:00:51 411  		  ss.IP_ADDRESS,
16:00:51 412  		  ss.START_DATE,
16:00:51 413  		  ss.END_DATE,
16:00:51 414  		  ss.CREATED_BY,
16:00:51 415  		  ss.CREATE_DATE,
16:00:51 416  		  ss.UPDATED_BY,
16:00:51 417  		  ss.UPDATE_DATE,
16:00:51 418  		  a.GROUP_ID AS BORROWER_GROUP_ID
16:00:51 419  		FROM
16:00:51 420  		  SUBSCRIPTION_SHARE ss,
16:00:51 421  		  ACCOUNT a,
16:00:51 422  		  LICENSE l,
16:00:51 423  		  GROUP_ACCOUNT ga
16:00:51 424  		WHERE
16:00:51 425  		  ss.GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 426  		  ss.GROUP_ACCOUNT_ID = ga.ID AND
16:00:51 427  		  GA.SUBSCRIPTION_ID = l.SUBSCRIPTION_ID AND
16:00:51 428  		  SYSDATE BETWEEN l.START_DATE AND l.ENTITLEMENT_END_DATE AND
16:00:51 429  		  SYSDATE BETWEEN ss.START_DATE AND ss.END_DATE AND
16:00:51 430  		  ss.BORROWER_ACCOUNT_ID  = a.ID
16:00:51 431  	      ) Q
16:00:51 432  	    WHERE rownum <= l_end)
16:00:51 433  	  WHERE rnum >= l_start;
16:00:51 434  	END;
16:00:51 435  EXCEPTION
16:00:51 436  WHEN OTHERS THEN
16:00:51 437  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 438  	  SPROC_NAME, 'Unknown error while retrieving subscription shares', SQLERRM);
16:00:51 439  END GET_SUBSCRIPTION_SHARES;
16:00:51 440  
16:00:51 441  PROCEDURE GET_GROUP_ACCOUNT_BY_IP (
16:00:51 442  	in_ip_low	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:51 443  	in_ip_high	    IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:51 444  	out_result_set	      OUT SYS_REFCURSOR
16:00:51 445  ) AS
16:00:51 446  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_IP';
16:00:51 447  BEGIN
16:00:51 448  	BEGIN
16:00:51 449  	  OPEN out_result_set FOR
16:00:51 450  	  SELECT
16:00:51 451  	    ID,
16:00:51 452  	    SUBSCRIPTION_ID,
16:00:51 453  	    GROUP_NAME,
16:00:51 454  	    FIRST_NAME,
16:00:51 455  	    LAST_NAME,
16:00:51 456  	    EMAIL,
16:00:51 457  	    PHONE,
16:00:51 458  	    ORGANIZATION_TYPE,
16:00:51 459  	    SEATS,
16:00:51 460  	    SEAT_TTL_IN_HOURS,
16:00:51 461  	    CREATE_DATE,
16:00:51 462  	    CREATED_BY,
16:00:51 463  	    UPDATE_DATE,
16:00:51 464  	    UPDATED_BY
16:00:51 465  	  FROM
16:00:51 466  	    GROUP_ACCOUNT
16:00:51 467  	  WHERE
16:00:51 468  	    ID IN (
16:00:51 469  	      SELECT
16:00:51 470  		GROUP_ACCOUNT_ID
16:00:51 471  	      FROM
16:00:51 472  		GROUP_ACCOUNT_IP_RANGE,
16:00:51 473  		GROUP_ACCOUNT,
16:00:51 474  		SUBSCRIPTION,
16:00:51 475  		OFFER_CHAIN
16:00:51 476  	      WHERE
16:00:51 477  		GROUP_ACCOUNT.ID = GROUP_ACCOUNT_ID
16:00:51 478  	      AND
16:00:51 479  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:00:51 480  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:00:51 481  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = 'GL'
16:00:51 482  	      AND
16:00:51 483  		(
16:00:51 484  		  (in_ip_high > minimum_ip_high and in_ip_high < maximum_ip_high) or
16:00:51 485  		  (in_ip_high = minimum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low)) or
16:00:51 486  		  (in_ip_high = maximum_ip_high and (in_ip_low >= minimum_ip_low and in_ip_low <= maximum_ip_low))
16:00:51 487  		)
16:00:51 488  	      AND
16:00:51 489  		GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE
16:00:51 490  	    );
16:00:51 491  	  END;
16:00:51 492  EXCEPTION
16:00:51 493  WHEN OTHERS THEN
16:00:51 494  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 495  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 496  END GET_GROUP_ACCOUNT_BY_IP;
16:00:51 497  
16:00:51 498  PROCEDURE GET_GROUP_ACCOUNT_BY_EMAIL (
16:00:51 499  	in_email_domain     IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:51 500  	out_result_set	    OUT SYS_REFCURSOR
16:00:51 501  ) AS
16:00:51 502  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_BY_EMAIL';
16:00:51 503  var_second_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:00:51 504  var_third_level_domain GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE;
16:00:51 505  BEGIN
16:00:51 506  	var_second_level_domain := REGEXP_REPLACE(in_email_domain, '.*?([^\.]+\.[^\.]+)$', '\1');
16:00:51 507  	var_third_level_domain := REGEXP_REPLACE(in_email_domain, '.*?(([^\.]+\.){2}[^\.]+)$', '\1');
16:00:51 508  	BEGIN
16:00:51 509  	  OPEN out_result_set FOR
16:00:51 510  	  SELECT
16:00:51 511  	    ID,
16:00:51 512  	    SUBSCRIPTION_ID,
16:00:51 513  	    GROUP_NAME,
16:00:51 514  	    FIRST_NAME,
16:00:51 515  	    LAST_NAME,
16:00:51 516  	    EMAIL,
16:00:51 517  	    PHONE,
16:00:51 518  	    ORGANIZATION_TYPE,
16:00:51 519  	    SEATS,
16:00:51 520  	    SEAT_TTL_IN_HOURS,
16:00:51 521  	    CREATE_DATE,
16:00:51 522  	    CREATED_BY,
16:00:51 523  	    UPDATE_DATE,
16:00:51 524  	    UPDATED_BY
16:00:51 525  	  FROM
16:00:51 526  	    GROUP_ACCOUNT
16:00:51 527  	  WHERE
16:00:51 528  	    ID IN (
16:00:51 529  	      SELECT
16:00:51 530  		GROUP_ACCOUNT_ID
16:00:51 531  	      FROM
16:00:51 532  		GROUP_ACCOUNT_EMAIL_DOMAIN gaed,
16:00:51 533  		GROUP_ACCOUNT ga,
16:00:51 534  		SUBSCRIPTION s,
16:00:51 535  		OFFER_CHAIN oc
16:00:51 536  	      WHERE
16:00:51 537  		ga.ID = gaed.GROUP_ACCOUNT_ID AND
16:00:51 538  		ga.SUBSCRIPTION_ID = s.ID AND
16:00:51 539  		s.OFFER_CHAIN_ID = oc.ID AND
16:00:51 540  		oc.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL') AND
16:00:51 541  		(gaed.EMAIL_DOMAIN = var_third_level_domain OR gaed.EMAIL_DOMAIN = var_second_level_domain) AND
16:00:51 542  		gaed.IS_ACTIVE = 1
16:00:51 543  	    );
16:00:51 544  	  END;
16:00:51 545  EXCEPTION
16:00:51 546  WHEN OTHERS THEN
16:00:51 547  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 548  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 549  END GET_GROUP_ACCOUNT_BY_EMAIL;
16:00:51 550  
16:00:51 551  PROCEDURE GET_GROUP_ACCOUNT_IP_RANGES (
16:00:51 552  	in_group_account_id   IN NUMBER,
16:00:51 553  	in_start	      IN NUMBER,
16:00:51 554  	in_end		      IN NUMBER,
16:00:51 555  	in_status	      IN NUMBER,
16:00:51 556  	out_record_count      OUT NUMBER,
16:00:51 557  	out_result_set	      OUT SYS_REFCURSOR
16:00:51 558  ) AS
16:00:51 559  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_ACCOUNT_IP_RANGES';
16:00:51 560  range_diff NUMBER := 0;
16:00:51 561  upper_bond_diff NUMBER := 0;
16:00:51 562  l_start NUMBER := 0;
16:00:51 563  l_end   NUMBER := 0;
16:00:51 564  BEGIN
16:00:51 565  	--Normalize the end points [START]
16:00:51 566  	IF (in_start IS NULL OR in_start < 0) Then
16:00:51 567  	  l_start := 0;
16:00:51 568  	ELSE
16:00:51 569  	  l_start := in_start;
16:00:51 570  	END IF;
16:00:51 571  
16:00:51 572  	IF (in_end IS NULL) Then
16:00:51 573  	  l_end := 11;
16:00:51 574  	ELSE
16:00:51 575  	  l_end := in_end;
16:00:51 576  	END IF;
16:00:51 577  
16:00:51 578  	l_start := l_start + 1;
16:00:51 579  	l_end	:= l_end   + 1;
16:00:51 580  
16:00:51 581  	range_diff := l_end - l_start;
16:00:51 582  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
16:00:51 583  
16:00:51 584  	IF (upper_bond_diff > 0) Then
16:00:51 585  	  l_end := l_end - upper_bond_diff;
16:00:51 586  	END IF;
16:00:51 587  	--Normalize the end points [END]
16:00:51 588  
16:00:51 589  	--Total count of records [START]
16:00:51 590  	SELECT
16:00:51 591  	  COUNT(1) INTO out_record_count
16:00:51 592  	FROM
16:00:51 593  	  GROUP_ACCOUNT_IP_RANGE
16:00:51 594  	WHERE
16:00:51 595  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 596  	  (in_status IS NULL OR GROUP_ACC_IP_RNG_STATUS_ID = in_status);
16:00:51 597  	--Total count of records [END]
16:00:51 598  
16:00:51 599  	OPEN out_result_set FOR
16:00:51 600  	SELECT
16:00:51 601  	  *
16:00:51 602  	FROM
16:00:51 603  	  (SELECT rownum rnum, q.*
16:00:51 604  	   FROM
16:00:51 605  	    (SELECT
16:00:51 606  	       ID,
16:00:51 607  	       GROUP_ACCOUNT_ID,
16:00:51 608  	       MINIMUM_IP_STRING,
16:00:51 609  	       MAXIMUM_IP_STRING,
16:00:51 610  	       GROUP_ACC_IP_RNG_STATUS_ID
16:00:51 611  	     FROM
16:00:51 612  	       GROUP_ACCOUNT_IP_RANGE
16:00:51 613  	     WHERE
16:00:51 614  	       GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 615  	       (in_status IS NULL OR
16:00:51 616  		GROUP_ACC_IP_RNG_STATUS_ID = in_status)
16:00:51 617  	    ) Q
16:00:51 618  	  WHERE rownum <= l_end)
16:00:51 619  	WHERE rnum >= l_Start;
16:00:51 620  EXCEPTION
16:00:51 621  WHEN OTHERS THEN
16:00:51 622  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 623  	  SPROC_NAME, 'Unknown error while retrieving IP ranges ', SQLERRM);
16:00:51 624  END GET_GROUP_ACCOUNT_IP_RANGES;
16:00:51 625  
16:00:51 626  PROCEDURE GET_GRP_ACCNT_EMAIL_DOMAINS (
16:00:51 627  	in_group_account_id   IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:51 628  	in_start	      IN NUMBER,
16:00:51 629  	in_end		      IN NUMBER,
16:00:51 630  	in_status	      IN GROUP_ACCOUNT_EMAIL_DOMAIN.IS_ACTIVE%TYPE,
16:00:51 631  	out_record_count      OUT NUMBER,
16:00:51 632  	out_result_set	      OUT SYS_REFCURSOR
16:00:51 633  ) AS
16:00:51 634  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ACCNT_EMAIL_DOMAINS';
16:00:51 635  range_diff NUMBER := 0;
16:00:51 636  upper_bond_diff NUMBER := 0;
16:00:51 637  l_start NUMBER := 0;
16:00:51 638  l_end   NUMBER := 0;
16:00:51 639  BEGIN
16:00:51 640  	--Normalize the end points [START]
16:00:51 641  	IF (in_start IS NULL OR in_start < 0) Then
16:00:51 642  	  l_start := 0;
16:00:51 643  	ELSE
16:00:51 644  	  l_start := in_start;
16:00:51 645  	END IF;
16:00:51 646  
16:00:51 647  	IF (in_end IS NULL) Then
16:00:51 648  	  l_end := 11;
16:00:51 649  	ELSE
16:00:51 650  	  l_end := in_end;
16:00:51 651  	END IF;
16:00:51 652  
16:00:51 653  	l_start := l_start + 1;
16:00:51 654  	l_end	:= l_end   + 1;
16:00:51 655  
16:00:51 656  	range_diff := l_end - l_start;
16:00:51 657  	upper_bond_diff :=  range_diff - GLOBAL_CONSTANTS_V20.MAX_RETURN_COUNT;
16:00:51 658  
16:00:51 659  	IF (upper_bond_diff > 0) Then
16:00:51 660  	  l_end := l_end - upper_bond_diff;
16:00:51 661  	END IF;
16:00:51 662  	--Normalize the end points [END]
16:00:51 663  
16:00:51 664  	--Total count of records [START]
16:00:51 665  	SELECT
16:00:51 666  	  COUNT(1) INTO out_record_count
16:00:51 667  	FROM
16:00:51 668  	  GROUP_ACCOUNT_EMAIL_DOMAIN
16:00:51 669  	WHERE
16:00:51 670  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 671  	  (IS_ACTIVE IS NULL OR IS_ACTIVE = in_status);
16:00:51 672  	--Total count of records [END]
16:00:51 673  
16:00:51 674  	OPEN out_result_set FOR
16:00:51 675  	SELECT
16:00:51 676  	  *
16:00:51 677  	FROM
16:00:51 678  	  (SELECT rownum rnum, q.*
16:00:51 679  	   FROM
16:00:51 680  	    (SELECT
16:00:51 681  	      ID,
16:00:51 682  	      GROUP_ACCOUNT_ID,
16:00:51 683  	      EMAIL_DOMAIN,
16:00:51 684  	      IS_ACTIVE
16:00:51 685  	     FROM
16:00:51 686  	       GROUP_ACCOUNT_EMAIL_DOMAIN
16:00:51 687  	     WHERE
16:00:51 688  	       GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 689  	       (in_status IS NULL OR
16:00:51 690  		IS_ACTIVE = in_status)
16:00:51 691  	    ) Q
16:00:51 692  	  WHERE rownum <= l_end)
16:00:51 693  	WHERE rnum >= l_Start;
16:00:51 694  
16:00:51 695  EXCEPTION
16:00:51 696  WHEN OTHERS THEN
16:00:51 697  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 698  	  SPROC_NAME, 'Unknown error while retrieving Email Domains ', SQLERRM);
16:00:51 699  END GET_GRP_ACCNT_EMAIL_DOMAINS;
16:00:51 700  
16:00:51 701  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_GA_ID (
16:00:51 702  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:51 703  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:51 704  ) AS
16:00:51 705  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_GA_ID';
16:00:51 706  BEGIN
16:00:51 707  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_EMAIL_DOMAIN_BY_GA_ID(
16:00:51 708  	    in_group_account_id => in_group_account_id,
16:00:51 709  	    in_updated_by => in_updated_by
16:00:51 710  	  );
16:00:51 711  EXCEPTION
16:00:51 712  WHEN OTHERS THEN
16:00:51 713  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 714  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 715  END DISABLE_EMAIL_DOMAIN_BY_GA_ID;
16:00:51 716  
16:00:51 717  PROCEDURE DISABLE_EMAIL_DOMAIN_BY_ID (
16:00:51 718  	in_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE,
16:00:51 719  	in_updated_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.UPDATED_BY%TYPE
16:00:51 720  ) AS
16:00:51 721  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_EMAIL_DOMAIN_BY_ID';
16:00:51 722  BEGIN
16:00:51 723  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_EMAIL_DOMAIN_BY_ID(
16:00:51 724  	    in_id => in_id,
16:00:51 725  	    in_updated_by => in_updated_by
16:00:51 726  	  );
16:00:51 727  EXCEPTION
16:00:51 728  WHEN OTHERS THEN
16:00:51 729  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 730  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 731  END DISABLE_EMAIL_DOMAIN_BY_ID;
16:00:51 732  
16:00:51 733  PROCEDURE ADD_EMAIL_DOMAIN (
16:00:51 734  	in_group_account_id IN GROUP_ACCOUNT_EMAIL_DOMAIN.GROUP_ACCOUNT_ID%TYPE,
16:00:51 735  	in_email_domain IN GROUP_ACCOUNT_EMAIL_DOMAIN.EMAIL_DOMAIN%TYPE,
16:00:51 736  	in_created_by IN GROUP_ACCOUNT_EMAIL_DOMAIN.CREATED_BY%TYPE
16:00:51 737  ) AS
16:00:51 738  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_EMAIL_DOMAIN';
16:00:51 739  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
16:00:51 740  var_is_dupe NUMBER(1);
16:00:51 741  var_group_account_count NUMBER := 0;
16:00:51 742  var_id  GROUP_ACCOUNT_EMAIL_DOMAIN.ID%TYPE;
16:00:51 743  NOT_GL EXCEPTION;
16:00:51 744  DUPE EXCEPTION;
16:00:51 745  BEGIN
16:00:51 746  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
16:00:51 747  	  FROM
16:00:51 748  	    GROUP_ACCOUNT,
16:00:51 749  	    SUBSCRIPTION,
16:00:51 750  	    OFFER_CHAIN
16:00:51 751  	  WHERE
16:00:51 752  	    GROUP_ACCOUNT.ID = in_group_account_id AND
16:00:51 753  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:00:51 754  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 755  	  ;
16:00:51 756  	  IF(var_ga_type != 'GL' and var_ga_type != 'KL' ) THEN
16:00:51 757  	    RAISE NOT_GL;
16:00:51 758  	  END IF;
16:00:51 759  
16:00:51 760  	  --check if email domain already exists
16:00:51 761  	  SELECT count(1) into var_group_account_count
16:00:51 762  	  FROM
16:00:51 763  	      GROUP_ACCOUNT_EMAIL_DOMAIN
16:00:51 764  	  WHERE
16:00:51 765  	      GROUP_ACCOUNT_ID= in_group_account_id AND
16:00:51 766  	      EMAIL_DOMAIN = in_email_domain
16:00:51 767  	  ;
16:00:51 768  
16:00:51 769  	  IF(var_group_account_count > 0) THEN
16:00:51 770  	      SELECT ID into var_id
16:00:51 771  	      FROM
16:00:51 772  		  GROUP_ACCOUNT_EMAIL_DOMAIN
16:00:51 773  	      WHERE
16:00:51 774  		  GROUP_ACCOUNT_ID= in_group_account_id AND
16:00:51 775  		  EMAIL_DOMAIN = in_email_domain AND
16:00:51 776  		  rownum <= 1;
16:00:51 777  	      PROCS_GROUP_ACCOUNT_CRU_V20.ENABLE_EMAIL_DOMAIN_BY_ID(
16:00:51 778  		  in_id => var_id,
16:00:51 779  		  in_updated_by => in_created_by
16:00:51 780  		  );
16:00:51 781  	  ELSE
16:00:51 782  	      PROCS_GROUP_ACCOUNT_CRU_V20.ADD_EMAIL_DOMAIN(
16:00:51 783  		  in_group_account_id => in_group_account_id,
16:00:51 784  		  in_email_domain => in_email_domain,
16:00:51 785  		      in_is_active => GLOBAL_STATUSES_V20.GROUP_ACC_EMAIL_DOMAIN_ACT,
16:00:51 786  		  in_created_by => in_created_by
16:00:51 787  	      );
16:00:51 788  	  END IF;
16:00:51 789  
16:00:51 790  EXCEPTION
16:00:51 791  WHEN NOT_GL THEN
16:00:51 792  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 793  	  SPROC_NAME, 'Group account type does not support Email Domains', SQLERRM);
16:00:51 794  WHEN OTHERS THEN
16:00:51 795  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 796  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 797  END ADD_EMAIL_DOMAIN;
16:00:51 798  
16:00:51 799  PROCEDURE CREATE_SUBSCRIPTION_SHARE (
16:00:51 800  	in_group_account_id    IN NUMBER,
16:00:51 801  	in_borrower_account_id IN NUMBER,
16:00:51 802  	in_ip_address	       IN VARCHAR2,
16:00:51 803  	in_email_domain        IN VARCHAR2,
16:00:51 804  	in_created_by	       IN VARCHAR2
16:00:51 805  ) AS
16:00:51 806  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_SUBSCRIPTION_SHARE';
16:00:51 807  ga_ttl_in_hours NUMBER := NULL;
16:00:51 808  start_date DATE := NULL;
16:00:51 809  end_date DATE := NULL;
16:00:51 810  BEGIN
16:00:51 811  	start_date := sysdate;
16:00:51 812  	end_date   := GLOBAL_CONSTANTS_V20.MAX_DATE;
16:00:51 813  
16:00:51 814  	BEGIN
16:00:51 815  	  SELECT SEAT_TTL_IN_HOURS into ga_ttl_in_hours
16:00:51 816  	  FROM GROUP_ACCOUNT, SUBSCRIPTION, OFFER_CHAIN
16:00:51 817  	  WHERE GROUP_ACCOUNT.ID = in_group_account_id AND
16:00:51 818  		GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:00:51 819  		SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID AND
16:00:51 820  		OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID in ('GL', 'KL');
16:00:51 821  	EXCEPTION
16:00:51 822  	  WHEN no_data_found THEN
16:00:51 823  	    ga_ttl_in_hours := NULL;
16:00:51 824  	END;
16:00:51 825  
16:00:51 826  	IF (ga_ttl_in_hours IS NOT NULL) THEN
16:00:51 827  	  end_date := (start_date + (1/24 * ga_ttl_in_hours));
16:00:51 828  	END IF;
16:00:51 829  
16:00:51 830  	CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20.CREATE_SUBSCRIPTION_SHARE(
16:00:51 831  	  in_group_account_id => in_group_account_id,
16:00:51 832  	  in_borrower_account_id => in_borrower_account_id,
16:00:51 833  	  in_ip_address => in_ip_address,
16:00:51 834  	  in_email_domain => in_email_domain,
16:00:51 835  	  in_start_date => start_date,
16:00:51 836  	  in_end_date => end_date,
16:00:51 837  	  in_created_by => in_created_by
16:00:51 838  	);
16:00:51 839  END CREATE_SUBSCRIPTION_SHARE;
16:00:51 840  
16:00:51 841  
16:00:51 842  PROCEDURE GET_NUM_OCCUPIED_GROUP_SEATS (
16:00:51 843  	in_group_account_id   IN NUMBER,
16:00:51 844  	out_occupied_seats   OUT NUMBER
16:00:51 845  ) AS
16:00:51 846  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
16:00:51 847  BEGIN
16:00:51 848  	SELECT
16:00:51 849  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(in_group_account_id) INTO out_occupied_seats
16:00:51 850  	FROM dual;
16:00:51 851  EXCEPTION
16:00:51 852  WHEN OTHERS THEN
16:00:51 853  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 854  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 855  END GET_NUM_OCCUPIED_GROUP_SEATS;
16:00:51 856  
16:00:51 857  
16:00:51 858  FUNCTION F_GET_NUM_OCCUPIED_GROUP_SEATS (
16:00:51 859  	in_group_account_id   IN NUMBER
16:00:51 860  ) RETURN NUMBER IS
16:00:51 861  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NUM_OCCUPIED_GROUP_SEATS';
16:00:51 862  num_seats NUMBER;
16:00:51 863  BEGIN
16:00:51 864  	SELECT
16:00:51 865  	  COUNT(1) INTO num_seats
16:00:51 866  	FROM
16:00:51 867  	  SUBSCRIPTION_SHARE
16:00:51 868  	WHERE
16:00:51 869  	  GROUP_ACCOUNT_ID = in_group_account_id AND
16:00:51 870  	  SYSDATE BETWEEN START_DATE AND END_DATE;
16:00:51 871  	RETURN num_seats;
16:00:51 872  EXCEPTION
16:00:51 873  WHEN OTHERS THEN
16:00:51 874  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 875  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 876  END F_GET_NUM_OCCUPIED_GROUP_SEATS;
16:00:51 877  
16:00:51 878  -- *********************************************************************
16:00:51 879  -- *************** GROUP ACCOUNT IP RANGE JUNK *************************
16:00:51 880  -- *********************************************************************
16:00:51 881  -- I'm debating if this should be in a different package, but right now
16:00:51 882  -- I'm too lazy to move this else where.
16:00:51 883  -- *********************************************************************
16:00:51 884  
16:00:51 885  PROCEDURE DISABLE_IP_RANGES_BY_GA_ID (
16:00:51 886  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:51 887  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:51 888  ) AS
16:00:51 889  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGES_BY_GA_ID';
16:00:51 890  BEGIN
16:00:51 891  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_IP_RANGES_BY_GA_ID(
16:00:51 892  	    in_group_account_id => in_group_account_id,
16:00:51 893  	    in_updated_by => in_updated_by
16:00:51 894  	  );
16:00:51 895  EXCEPTION
16:00:51 896  WHEN OTHERS THEN
16:00:51 897  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 898  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 899  END DISABLE_IP_RANGES_BY_GA_ID;
16:00:51 900  
16:00:51 901  PROCEDURE DISABLE_IP_RANGE_BY_ID (
16:00:51 902  	in_id IN GROUP_ACCOUNT_IP_RANGE.ID%TYPE,
16:00:51 903  	in_updated_by IN GROUP_ACCOUNT_IP_RANGE.UPDATED_BY%TYPE
16:00:51 904  ) AS
16:00:51 905  SPROC_NAME CONSTANT VARCHAR2(32) := 'DISABLE_IP_RANGE_BY_ID';
16:00:51 906  BEGIN
16:00:51 907  	  PROCS_GROUP_ACCOUNT_CRU_V20.DISABLE_IP_RANGE_BY_ID(
16:00:51 908  	    in_id => in_id,
16:00:51 909  	    in_updated_by => in_updated_by
16:00:51 910  	  );
16:00:51 911  EXCEPTION
16:00:51 912  WHEN OTHERS THEN
16:00:51 913  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 914  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 915  END DISABLE_IP_RANGE_BY_ID;
16:00:51 916  
16:00:51 917  PROCEDURE ADD_IP_RANGE (
16:00:51 918  	in_group_account_id IN GROUP_ACCOUNT_IP_RANGE.GROUP_ACCOUNT_ID%TYPE,
16:00:51 919  	in_minimum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_STRING%TYPE,
16:00:51 920  	in_minimum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_LOW%TYPE,
16:00:51 921  	in_minimum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MINIMUM_IP_HIGH%TYPE,
16:00:51 922  	in_maximum_ip_string IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_STRING%TYPE,
16:00:51 923  	in_maximum_ip_low IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_LOW%TYPE,
16:00:51 924  	in_maximum_ip_high IN GROUP_ACCOUNT_IP_RANGE.MAXIMUM_IP_HIGH%TYPE,
16:00:51 925  	in_created_by IN GROUP_ACCOUNT_IP_RANGE.CREATED_BY%TYPE
16:00:51 926  ) AS
16:00:51 927  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_IP_RANGE';
16:00:51 928  var_ga_type OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID%TYPE;
16:00:51 929  var_is_dupe NUMBER(1);
16:00:51 930  NOT_GL EXCEPTION;
16:00:51 931  DUPE EXCEPTION;
16:00:51 932  BEGIN
16:00:51 933  	  SELECT OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID into var_ga_type
16:00:51 934  	  FROM
16:00:51 935  	    GROUP_ACCOUNT,
16:00:51 936  	    SUBSCRIPTION,
16:00:51 937  	    OFFER_CHAIN
16:00:51 938  	  WHERE
16:00:51 939  	    GROUP_ACCOUNT.ID = in_group_account_id AND
16:00:51 940  	    GROUP_ACCOUNT.SUBSCRIPTION_ID = SUBSCRIPTION.ID AND
16:00:51 941  	    SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 942  	  ;
16:00:51 943  	  IF(var_ga_type != 'GL') THEN
16:00:51 944  	    RAISE NOT_GL;
16:00:51 945  	  END IF;
16:00:51 946  
16:00:51 947  	  PROCS_GROUP_ACCOUNT_CRU_V20.ADD_IP_RANGE(
16:00:51 948  	    in_group_account_id => in_group_account_id,
16:00:51 949  	    in_minimum_ip_string => in_minimum_ip_string,
16:00:51 950  	    in_minimum_ip_low => in_minimum_ip_low,
16:00:51 951  	    in_minimum_ip_high => in_minimum_ip_high,
16:00:51 952  	    in_maximum_ip_string => in_maximum_ip_string,
16:00:51 953  	    in_maximum_ip_low => in_maximum_ip_low,
16:00:51 954  	    in_maximum_ip_high => in_maximum_ip_high,
16:00:51 955  	    in_created_by => in_created_by
16:00:51 956  	  );
16:00:51 957  
16:00:51 958  	  -- Check for overlapping ip address range after insert.  Note that if another
16:00:51 959  	  -- call to add_ip_range has not completed, overlapping ip entries can occur.
16:00:51 960  	  SELECT count(1) into var_is_dupe
16:00:51 961  	  FROM
16:00:51 962  	    GROUP_ACCOUNT_IP_RANGE
16:00:51 963  	  WHERE
16:00:51 964  	    GROUP_ACC_IP_RNG_STATUS_ID = GLOBAL_STATUSES_V20.GROUP_ACC_IP_RNG_ACTIVE AND
16:00:51 965  		((
16:00:51 966  		  (in_minimum_ip_high > minimum_ip_high and in_minimum_ip_high < maximum_ip_high) or
16:00:51 967  		  (in_minimum_ip_high = minimum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low)) or
16:00:51 968  		  (in_minimum_ip_high = maximum_ip_high and (in_minimum_ip_low >= minimum_ip_low and in_minimum_ip_low <= maximum_ip_low))
16:00:51 969  		) OR
16:00:51 970  
16:00:51 971  		(
16:00:51 972  		  (in_maximum_ip_high > minimum_ip_high and in_maximum_ip_high < maximum_ip_high) or
16:00:51 973  		  (in_maximum_ip_high = minimum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low)) or
16:00:51 974  		  (in_maximum_ip_high = maximum_ip_high and (in_maximum_ip_low >= minimum_ip_low and in_maximum_ip_low <= maximum_ip_low))
16:00:51 975  		)) AND
16:00:51 976  	    ROWNUM < 3;
16:00:51 977  
16:00:51 978  	  If(var_is_dupe > 1) THEN
16:00:51 979  	    RAISE DUPE;
16:00:51 980  	  END IF;
16:00:51 981  EXCEPTION
16:00:51 982  WHEN NOT_GL THEN
16:00:51 983  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 984  	  SPROC_NAME, 'Group account type does not support IPs', SQLERRM);
16:00:51 985  WHEN DUPE THEN
16:00:51 986  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 987  	  SPROC_NAME, 'The IP address range is already in use', SQLERRM);
16:00:51 988  WHEN OTHERS THEN
16:00:51 989  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 990  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 991  END ADD_IP_RANGE;
16:00:51 992  
16:00:51 993  PROCEDURE GET_GRP_ID_BY_GRP_ACCOUNT_ID (
16:00:51 994  	in_group_account_id IN NUMBER,
16:00:51 995  	out_group_id OUT NUMBER
16:00:51 996  ) AS
16:00:51 997  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRP_ACCOUNT_ID';
16:00:51 998  BEGIN
16:00:51 999  	SELECT
16:00:51 1000  	   a.group_id into out_group_id
16:00:51 1001  	 FROM
16:00:51 1002  	   account a,
16:00:51 1003  	   subscription s,
16:00:51 1004  	   group_account ga
16:00:51 1005  	 WHERE
16:00:51 1006  	   a.id = s.account_id and
16:00:51 1007  	   s.id = ga.subscription_id and
16:00:51 1008  	   ga.id = in_group_account_id and
16:00:51 1009  	   rownum < 2
16:00:51 1010  	 ;
16:00:51 1011  EXCEPTION
16:00:51 1012  WHEN NO_DATA_FOUND THEN
16:00:51 1013  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1014  	   SPROC_NAME, 'Bad group_account_id');
16:00:51 1015  WHEN OTHERS THEN
16:00:51 1016  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1017  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1018  END GET_GRP_ID_BY_GRP_ACCOUNT_ID;
16:00:51 1019  
16:00:51 1020  PROCEDURE GET_GRP_ID_BY_GRPACCIPRNG_ID (
16:00:51 1021  	 in_group_account_ip_range_id IN NUMBER,
16:00:51 1022  	 out_group_id OUT NUMBER
16:00:51 1023  ) AS
16:00:51 1024  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_GRPACCIPRNG_ID';
16:00:51 1025  BEGIN
16:00:51 1026  	 SELECT
16:00:51 1027  	   a.group_id into out_group_id
16:00:51 1028  	 FROM
16:00:51 1029  	   account a,
16:00:51 1030  	   subscription s,
16:00:51 1031  	   group_account ga,
16:00:51 1032  	   group_account_ip_range ir
16:00:51 1033  	 WHERE
16:00:51 1034  	   a.id = s.account_id and
16:00:51 1035  	   s.id = ga.subscription_id and
16:00:51 1036  	   ga.id = ir.group_account_id and
16:00:51 1037  	   ir.id = in_group_account_ip_range_id and
16:00:51 1038  	   rownum < 2
16:00:51 1039  	 ;
16:00:51 1040  EXCEPTION
16:00:51 1041  WHEN NO_DATA_FOUND THEN
16:00:51 1042  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1043  	   SPROC_NAME, 'Bad group_account_ip_range_id');
16:00:51 1044  WHEN OTHERS THEN
16:00:51 1045  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1046  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1047  END GET_GRP_ID_BY_GRPACCIPRNG_ID;
16:00:51 1048  
16:00:51 1049  PROCEDURE GET_GRP_ID_BY_EMAIL_DOM_ID (
16:00:51 1050  	 in_group_account_email_dom_id IN NUMBER,
16:00:51 1051  	 out_group_id OUT NUMBER
16:00:51 1052  ) AS
16:00:51 1053  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GRP_ID_BY_EMAIL_DOM_ID';
16:00:51 1054  BEGIN
16:00:51 1055  	 SELECT
16:00:51 1056  	   a.group_id into out_group_id
16:00:51 1057  	 FROM
16:00:51 1058  	   account a,
16:00:51 1059  	   subscription s,
16:00:51 1060  	   group_account ga,
16:00:51 1061  	   group_account_email_domain ir
16:00:51 1062  	 WHERE
16:00:51 1063  	   a.id = s.account_id and
16:00:51 1064  	   s.id = ga.subscription_id and
16:00:51 1065  	   ga.id = ir.group_account_id and
16:00:51 1066  	   ir.id = in_group_account_email_dom_id and
16:00:51 1067  	   rownum < 2
16:00:51 1068  	 ;
16:00:51 1069  EXCEPTION
16:00:51 1070  WHEN NO_DATA_FOUND THEN
16:00:51 1071  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1072  	   SPROC_NAME, 'Bad group_account_ip_range_id');
16:00:51 1073  WHEN OTHERS THEN
16:00:51 1074  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1075  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1076  END GET_GRP_ID_BY_EMAIL_DOM_ID;
16:00:51 1077  
16:00:51 1078  PROCEDURE UPDATE_GROUP_ACCOUNT (
16:00:51 1079  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
16:00:51 1080  	 in_group_name		  IN GROUP_ACCOUNT.GROUP_NAME%TYPE,
16:00:51 1081  	 in_first_name		  IN GROUP_ACCOUNT.FIRST_NAME%TYPE,
16:00:51 1082  	 in_last_name		  IN GROUP_ACCOUNT.LAST_NAME%TYPE,
16:00:51 1083  	 in_email		  IN GROUP_ACCOUNT.EMAIL%TYPE,
16:00:51 1084  	 in_phone		  IN GROUP_ACCOUNT.PHONE%TYPE,
16:00:51 1085  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:51 1086  ) AS
16:00:51 1087  BEGIN
16:00:51 1088  	 PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_GROUP_ACCOUNT(
16:00:51 1089  	   in_group_account_id => in_group_account_id,
16:00:51 1090  	   in_group_name => in_group_name,
16:00:51 1091  	   in_first_name => in_first_name,
16:00:51 1092  	   in_last_name => in_last_name,
16:00:51 1093  	   in_email => in_email,
16:00:51 1094  	   in_phone => in_phone,
16:00:51 1095  	   in_updated_by => in_updated_by
16:00:51 1096  	 );
16:00:51 1097  END UPDATE_GROUP_ACCOUNT;
16:00:51 1098  
16:00:51 1099  PROCEDURE UPDATE_GROUP_ACCOUNT_SEATS (
16:00:51 1100  	 in_group_account_id	  IN GROUP_ACCOUNT.ID%TYPE,
16:00:51 1101  	 in_seats		  IN GROUP_ACCOUNT.SEATS%TYPE,
16:00:51 1102  	 in_updated_by		  IN GROUP_ACCOUNT.UPDATED_BY%TYPE
16:00:51 1103  ) AS
16:00:51 1104  BEGIN
16:00:51 1105  	 PROCS_GROUP_ACCOUNT_CRU_V20.UPDATE_GROUP_ACCOUNT_SEATS(
16:00:51 1106  	   in_group_account_id => in_group_account_id,
16:00:51 1107  	   in_seats => in_seats,
16:00:51 1108  	   in_updated_by => in_updated_by
16:00:51 1109  	 );
16:00:51 1110  END UPDATE_GROUP_ACCOUNT_SEATS;
16:00:51 1111  
16:00:51 1112  END PROCS_GROUP_ACCOUNT_V20;
16:00:51 1113  .
16:00:51 SQL> /

Package body created.

Elapsed: 00:00:00.12
16:00:51 SQL> 
16:00:51 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_TEST_V20" AS
16:00:51   2  
16:00:51   3  PROCEDURE TEST_CLEAR_ALL IS
16:00:51   4  BEGIN
16:00:51   5  	DELETE FROM TAX_ADJUSTMENT;
16:00:51   6  	DELETE FROM LINE_ITEM_ADJUSTMENT;
16:00:51   7  	DELETE FROM INVOICE_ADJUSTMENT;
16:00:51   8  	DELETE FROM LICENSE;
16:00:51   9  	DELETE FROM OFFER_OFFER_CHAIN;
16:00:51  10  	delete from offer_product_offering;
16:00:51  11  	delete from tax;
16:00:51  12  	delete from discount_lineitem_adjustment; -- ? JUnitTests don't clear db in the moment of clear sproc corrections
16:00:51  13  	delete from discount_line_item; -- ?
16:00:51  14  	delete from discount; -- ?
16:00:51  15  	DELETE FROM LINE_ITEM;
16:00:51  16  	DELETE FROM PRODUCT_OFFERING_META_DATA;
16:00:51  17  	DELETE FROM PRODUCT_OFFERING;
16:00:51  18  	DELETE FROM PRODUCT;
16:00:51  19  	DELETE FROM INVOICE_NOTE;
16:00:51  20  	DELETE FROM GIFT_CERTIFICATE;
16:00:51  21  	DELETE FROM OFFER;
16:00:51  22  	DELETE FROM OFFER_CHAIN_META_DATA;
16:00:51  23  	DELETE FROM SUBSCRIPTION_NOTE;
16:00:51  24  	DELETE FROM SUBSCRIPTION_META_DATA;
16:00:51  25  	DELETE FROM SUBSCRIPTION;
16:00:51  26  	DELETE FROM CREDIT_CARD;
16:00:51  27  	DELETE FROM FLAGGED_ACCOUNTS;
16:00:51  28  	DELETE FROM ACCOUNT_NOTE;
16:00:51  29  	DELETE FROM ACCOUNT_LOCK;
16:00:51  30  	DELETE FROM ACCOUNT;
16:00:51  31  	DELETE FROM CHARGE;
16:00:51  32  	DELETE FROM TRANSACTION_ATTEMPT;
16:00:51  33  	DELETE FROM CHARGEBACK;
16:00:51  34  	DELETE FROM TRANSACTION;
16:00:51  35  	DELETE FROM INVOICE_NOTE;
16:00:51  36  	DELETE FROM INVOICE;
16:00:51  37  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
16:00:51  38  	DELETE FROM OFFER_CHAIN;
16:00:51  39  END TEST_CLEAR_ALL;
16:00:51  40  
16:00:51  41  PROCEDURE TEST_CLEAR_PRODUCTS AS
16:00:51  42  BEGIN
16:00:51  43  	DELETE FROM OFFER_OFFER_CHAIN;
16:00:51  44  	DELETE FROM OFFER_PRODUCT_OFFERING;
16:00:51  45  	DELETE FROM TAX;
16:00:51  46  	DELETE FROM PRODUCT_OFFERING;
16:00:51  47  	DELETE FROM PRODUCT;
16:00:51  48  	DELETE FROM OFFER;
16:00:51  49  	DELETE FROM OFFER_CHAIN_META_DATA;
16:00:51  50  	DELETE FROM OFFER_CHAIN;
16:00:51  51  	DELETE FROM OFFER_CHAIN_ELIGIBILITY;
16:00:51  52  END;
16:00:51  53  
16:00:51  54  /******************************************/
16:00:51  55  
16:00:51  56  PROCEDURE TEST_GET_ACCOUNT (
16:00:51  57  	in_group_id	IN NUMBER,
16:00:51  58  	out_result_set	OUT SYS_REFCURSOR
16:00:51  59  ) AS
16:00:51  60  BEGIN
16:00:51  61  
16:00:51  62  	OPEN out_result_set FOR
16:00:51  63  	SELECT *
16:00:51  64  	FROM
16:00:51  65  	  ACCOUNT
16:00:51  66  	WHERE
16:00:51  67  	  ACCOUNT.GROUP_ID = in_group_id;
16:00:51  68  
16:00:51  69  END TEST_GET_ACCOUNT;
16:00:51  70  
16:00:51  71  /*******************************************/
16:00:51  72  
16:00:51  73  PROCEDURE TEST_GET_SUBSCRIPTION (
16:00:51  74  	in_subscription_id IN NUMBER,
16:00:51  75  	out_result_set	   OUT SYS_REFCURSOR
16:00:51  76  ) AS
16:00:51  77  BEGIN
16:00:51  78  	OPEN out_result_set FOR
16:00:51  79  	SELECT *
16:00:51  80  	FROM
16:00:51  81  	  SUBSCRIPTION
16:00:51  82  	WHERE
16:00:51  83  	  SUBSCRIPTION.ID = in_subscription_id;
16:00:51  84  
16:00:51  85  END TEST_GET_SUBSCRIPTION;
16:00:51  86  
16:00:51  87  /***************************************************/
16:00:51  88  
16:00:51  89  PROCEDURE TEST_DELETE_INVOICE (
16:00:51  90  	in_invoice_id IN NUMBER
16:00:51  91  ) AS
16:00:51  92  var_line_item_id_set SYS_REFCURSOR;
16:00:51  93  var_line_item_id	   NUMBER;
16:00:51  94  
16:00:51  95  var_charge_id_set  SYS_REFCURSOR;
16:00:51  96  var_charge_id	 NUMBER;
16:00:51  97  var_transaction_id NUMBER;
16:00:51  98  BEGIN
16:00:51  99  	-- GET ACCOUNT'S LINE_ITEMS
16:00:51 100  	OPEN var_line_item_id_set FOR
16:00:51 101  	SELECT LINE_ITEM.ID FROM LINE_ITEM WHERE LINE_ITEM.INVOICE_ID = in_invoice_id;
16:00:51 102  	LOOP
16:00:51 103  	  FETCH var_line_item_id_set into var_line_item_id;
16:00:51 104  	  EXIT WHEN var_line_item_id_set%NOTFOUND;
16:00:51 105  
16:00:51 106  	  -- DELETE ADJUSTMENTS
16:00:51 107  	  FOR f_line_item_adjustments IN (SELECT * FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id)
16:00:51 108  	  LOOP
16:00:51 109  
16:00:51 110  	    -- DELETE DISCOUNT ADJUSTMENTS
16:00:51 111  	    DELETE FROM DISCOUNT_LINEITEM_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
16:00:51 112  
16:00:51 113  	    -- DELETE TAX ADJUSTMENTS
16:00:51 114  	    DELETE FROM TAX_ADJUSTMENT WHERE LINE_ITEM_ADJUSTMENT_ID = f_line_item_adjustments.ID;
16:00:51 115  	  END LOOP;
16:00:51 116  
16:00:51 117  	  -- DELETE LINE ITEM ADJUSTMENTS
16:00:51 118  	  DELETE FROM LINE_ITEM_ADJUSTMENT WHERE LINE_ITEM_ID = var_line_item_id;
16:00:51 119  
16:00:51 120  	  -- DELETE DISCOUNT_LINE_ITEM
16:00:51 121  	  DELETE FROM DISCOUNT_LINE_ITEM WHERE DISCOUNT_LINE_ITEM.LINE_ITEM_ID = var_line_item_id;
16:00:51 122  
16:00:51 123  	  DELETE FROM TAX WHERE LINE_ITEM_ID = var_line_item_id;
16:00:51 124  
16:00:51 125  	  -- DELETE LINE ITEM
16:00:51 126  	  DELETE FROM LINE_ITEM WHERE LINE_ITEM.ID = var_line_item_id;
16:00:51 127  
16:00:51 128  	END LOOP;
16:00:51 129  
16:00:51 130  	-- DELETE INVOICE ADJUSTMENTS
16:00:51 131  	DELETE FROM INVOICE_ADJUSTMENT WHERE INVOICE_ID = in_invoice_id;
16:00:51 132  
16:00:51 133  	-- GET ACCOUNT'S CHARGES AND TRANSACTIONS
16:00:51 134  	OPEN var_charge_id_set FOR
16:00:51 135  	SELECT CHARGE.ID, CHARGE.TRANSACTION_ID FROM CHARGE WHERE CHARGE.INVOICE_ID = in_invoice_id;
16:00:51 136  	LOOP
16:00:51 137  	  FETCH var_charge_id_set into var_charge_id, var_transaction_id;
16:00:51 138  	  EXIT WHEN var_charge_id_set%NOTFOUND;
16:00:51 139  	  -- DELETE CHARGEBACK
16:00:51 140  	  DELETE FROM CHARGEBACK WHERE CHARGEBACK.TRANSACTION_ID = var_transaction_id;
16:00:51 141  
16:00:51 142  	  -- DELETE TRANSACTION ATTEMP
16:00:51 143  	  DELETE FROM TRANSACTION_ATTEMPT WHERE TRANSACTION_ATTEMPT.TRANSACTION_ID = var_transaction_id;
16:00:51 144  
16:00:51 145  	  -- DELETE CHARGE
16:00:51 146  	  DELETE FROM CHARGE WHERE CHARGE.ID = var_charge_id;
16:00:51 147  
16:00:51 148  	  -- DELETE TRANSACTION
16:00:51 149  	  DELETE FROM TRANSACTION WHERE TRANSACTION.ID = var_transaction_id;
16:00:51 150  	END LOOP;
16:00:51 151  
16:00:51 152  	-- DELETE INVOICE NOTES
16:00:51 153  	DELETE FROM INVOICE_NOTE WHERE INVOICE_NOTE.INVOICE_ID = in_invoice_id;
16:00:51 154  
16:00:51 155  	-- DELETE INVOICE
16:00:51 156  	DELETE FROM INVOICE WHERE INVOICE.ID = in_invoice_id;
16:00:51 157  END;
16:00:51 158  
16:00:51 159  PROCEDURE TEST_DELETE_USER_ACCOUNT (
16:00:51 160  	in_group_id IN NUMBER
16:00:51 161  ) AS
16:00:51 162  -- VARIABLES
16:00:51 163  var_account_id NUMBER;
16:00:51 164  
16:00:51 165  -- CURSORS
16:00:51 166  var_subscription_id_set SYS_REFCURSOR;
16:00:51 167  var_subscription_id     NUMBER;
16:00:51 168  
16:00:51 169  var_license_id_set SYS_REFCURSOR;
16:00:51 170  var_license_id	 NUMBER;
16:00:51 171  var_invoice_id	 NUMBER;
16:00:51 172  
16:00:51 173  var_gift_certificate_id_set SYS_REFCURSOR;
16:00:51 174  var_gift_certificate_id	  NUMBER;
16:00:51 175  var_gc_purchase_invoice_id  NUMBER;
16:00:51 176  BEGIN
16:00:51 177  
16:00:51 178   /*FOR f_account in (
16:00:51 179  	  select id from account where group_id = in_group_id
16:00:51 180  	)
16:00:51 181  	loop
16:00:51 182  
16:00:51 183  	  -- delete account
16:00:51 184  	  delete from account where id = f_account.id;
16:00:51 185  
16:00:51 186  	end loop;*/
16:00:51 187  
16:00:51 188  	BEGIN
16:00:51 189  	  SELECT
16:00:51 190  	    ACCOUNT.ID into var_account_id
16:00:51 191  	  FROM
16:00:51 192  	    ACCOUNT
16:00:51 193  	  WHERE
16:00:51 194  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 195  	  EXCEPTION
16:00:51 196  	    WHEN NO_DATA_FOUND THEN
16:00:51 197  	      -- Nothing to do
16:00:51 198  	      RETURN;
16:00:51 199  	END;
16:00:51 200  
16:00:51 201  	-- GET ACCOUNT'S SUBSCRIPTIONS
16:00:51 202  	OPEN var_subscription_id_set FOR
16:00:51 203  	SELECT SUBSCRIPTION.ID FROM SUBSCRIPTION WHERE SUBSCRIPTION.ACCOUNT_ID = var_account_id;
16:00:51 204  	LOOP
16:00:51 205  	  FETCH var_subscription_id_set into var_subscription_id;
16:00:51 206  	  EXIT WHEN var_subscription_id_set%NOTFOUND;
16:00:51 207  
16:00:51 208  	  -- GET ACCOUNT'S LICENSES AND INVOICES
16:00:51 209  	  OPEN var_license_id_set FOR
16:00:51 210  	  SELECT LICENSE.ID, LICENSE.INVOICE_ID FROM LICENSE WHERE LICENSE.SUBSCRIPTION_ID = var_subscription_id;
16:00:51 211  	  LOOP
16:00:51 212  	    FETCH var_license_id_set into var_license_id, var_invoice_id;
16:00:51 213  	    EXIT WHEN var_license_id_set%NOTFOUND;
16:00:51 214  
16:00:51 215  
16:00:51 216  	    -- GET GC WHERE PURCHASE_INVOICE_ID = invoice
16:00:51 217  	    OPEN var_gift_certificate_id_set FOR
16:00:51 218  	    SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = var_invoice_id;
16:00:51 219  	    LOOP
16:00:51 220  	      FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
16:00:51 221  	      EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
16:00:51 222  
16:00:51 223  	      -- DELETE GIFT_CERTIFICATE
16:00:51 224  	      DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
16:00:51 225  
16:00:51 226  	      -- DELETE LICENSE
16:00:51 227  	      IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
16:00:51 228  		TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
16:00:51 229  	      END IF;
16:00:51 230  
16:00:51 231  	    END LOOP;
16:00:51 232  
16:00:51 233  	    -- DELETE GIFT_CERTIFICATE WHERE GC.REDEEMER_GROUP_ID = out group_id
16:00:51 234  	    DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.REDEEMER_GROUP_ID = in_group_id;
16:00:51 235  
16:00:51 236  	    -- DELETE LICENSE
16:00:51 237  	    DELETE FROM LICENSE WHERE LICENSE.ID = var_license_id;
16:00:51 238  
16:00:51 239  	    -- DELETE INVOICE
16:00:51 240  	    IF TEST_IS_INVOICE_EXISTS(var_invoice_id) = 1 THEN
16:00:51 241  	      TEST_DELETE_INVOICE(var_invoice_id);
16:00:51 242  	    END IF;
16:00:51 243  	  END LOOP;
16:00:51 244  
16:00:51 245  	  -- DELETE SUBSCRIPTION_NOTE
16:00:51 246  	  DELETE FROM SUBSCRIPTION_NOTE WHERE SUBSCRIPTION_NOTE.SUBSCRIPTION_ID = var_subscription_id;
16:00:51 247  
16:00:51 248  	  -- DELETE SUBSCRIPTION META_DATA
16:00:51 249  	  DELETE FROM SUBSCRIPTION_META_DATA WHERE SUBSCRIPTION_META_DATA.SUBSCRIPTION_ID = var_subscription_id;
16:00:51 250  
16:00:51 251  	  -- DELETE SUBSCRIPTION
16:00:51 252  	  DELETE FROM SUBSCRIPTION WHERE SUBSCRIPTION.ID = var_subscription_id;
16:00:51 253  	END LOOP;
16:00:51 254  
16:00:51 255  	-- DELETE CREDIT_CARDS
16:00:51 256  	DELETE FROM CREDIT_CARD WHERE CREDIT_CARD.ACCOUNT_ID = var_account_id;
16:00:51 257  
16:00:51 258  	-- DELETE PAYPAL
16:00:51 259  	DELETE FROM PAYPAL WHERE PAYPAL.ACCOUNT_ID = var_account_id;
16:00:51 260  
16:00:51 261  	-- DELETE FLAGS
16:00:51 262  	DELETE FROM FLAGGED_ACCOUNTS WHERE FLAGGED_ACCOUNTS.ACCOUNT_ID = var_account_id;
16:00:51 263  
16:00:51 264  	-- DELETE ACCOUNT NOTES
16:00:51 265  	DELETE FROM ACCOUNT_NOTE WHERE ACCOUNT_NOTE.ACCOUNT_ID = var_account_id;
16:00:51 266  
16:00:51 267  	-- DELETE INVOICES AND GC'S WHERE USER IS PURCHASER
16:00:51 268  	OPEN var_gift_certificate_id_set FOR
16:00:51 269  	SELECT GIFT_CERTIFICATE.ID, GIFT_CERTIFICATE.PURCHASE_INVOICE_ID FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:00:51 270  	LOOP
16:00:51 271  	  FETCH var_gift_certificate_id_set into var_gift_certificate_id, var_gc_purchase_invoice_id;
16:00:51 272  	  EXIT WHEN var_gift_certificate_id_set%NOTFOUND;
16:00:51 273  
16:00:51 274  	  -- DELETE GIFT CERTIFICATE
16:00:51 275  	  DELETE FROM GIFT_CERTIFICATE WHERE GIFT_CERTIFICATE.ID = var_gift_certificate_id;
16:00:51 276  
16:00:51 277  	  -- DELETE INVOICE
16:00:51 278  	  IF TEST_IS_INVOICE_EXISTS(var_gc_purchase_invoice_id) = 1 THEN
16:00:51 279  	    TEST_DELETE_INVOICE(var_gc_purchase_invoice_id);
16:00:51 280  	  END IF;
16:00:51 281  	END LOOP;
16:00:51 282  
16:00:51 283  	-- DELETE LOCKS
16:00:51 284  	DELETE FROM ACCOUNT_LOCK WHERE ACCOUNT_ID = var_account_id;
16:00:51 285  
16:00:51 286  	-- DELETE ACCOUNT
16:00:51 287  	DELETE FROM ACCOUNT WHERE ACCOUNT.ID = var_account_id;
16:00:51 288  
16:00:51 289  END TEST_DELETE_USER_ACCOUNT;
16:00:51 290  
16:00:51 291  PROCEDURE TEST_DELETE_USER_ACCOUNTS  (
16:00:51 292  	in_start_group_id IN NUMBER,
16:00:51 293  	in_end_group_id   IN NUMBER
16:00:51 294  ) IS
16:00:51 295   gid ACCOUNT.GROUP_ID%TYPE;
16:00:51 296   CURSOR c (v_from NUMBER, v_to NUMBER) IS SELECT ACCOUNT.GROUP_ID FROM ACCOUNT WHERE GROUP_ID BETWEEN v_from AND v_to;
16:00:51 297  BEGIN
16:00:51 298  -- arosolovskiy refactoring: call delete_user_account only "COUNT(group_id) WHERE ...." times instead of "in_end_group_id - in_start_group_id" times;
16:00:51 299  	/*
16:00:51 300  	FOR var_group_id IN in_start_group_id..in_end_group_id
16:00:51 301  	LOOP
16:00:51 302  	  TEST_DELETE_USER_ACCOUNT(var_group_id);
16:00:51 303  	END LOOP;*/
16:00:51 304  	OPEN c(in_start_group_id, in_end_group_id);
16:00:51 305  	WHILE c%ISOPEN LOOP
16:00:51 306  	  FETCH c INTO gid;
16:00:51 307  	  IF c%NOTFOUND THEN
16:00:51 308  	   CLOSE c;
16:00:51 309  	  END IF;
16:00:51 310  	  TEST_DELETE_USER_ACCOUNT(gid);
16:00:51 311  	END LOOP;
16:00:51 312  END;
16:00:51 313  
16:00:51 314  /**********************************************************/
16:00:51 315  
16:00:51 316  FUNCTION TEST_IS_INVOICE_EXISTS(
16:00:51 317  /*
16:00:51 318  1 - exists
16:00:51 319  0 - not exists
16:00:51 320  */
16:00:51 321  	in_invoice_id IN NUMBER
16:00:51 322  ) RETURN NUMBER AS
16:00:51 323  var_invoice_count NUMBER;
16:00:51 324  BEGIN
16:00:51 325  	SELECT
16:00:51 326  	  COUNT(*) into var_invoice_count
16:00:51 327  	FROM
16:00:51 328  	  INVOICE
16:00:51 329  	WHERE
16:00:51 330  	  INVOICE.ID = in_invoice_id;
16:00:51 331  	IF var_invoice_count = 0 THEN
16:00:51 332  	  RETURN 0;
16:00:51 333  	ELSE
16:00:51 334  	  RETURN 1;
16:00:51 335  	END IF;
16:00:51 336  END;
16:00:51 337  
16:00:51 338  PROCEDURE TEST_GET_INVOICE_INFO (
16:00:51 339  	in_invoice_id  IN NUMBER,
16:00:51 340  	out_result_set OUT SYS_REFCURSOR
16:00:51 341  ) AS
16:00:51 342  SPROC_NAME      CONSTANT VARCHAR2(21) := 'TEST_GET_INVOICE_INFO';
16:00:51 343  BEGIN
16:00:51 344  
16:00:51 345  	 OPEN out_result_set FOR SELECT
16:00:51 346  	    in_invoice_id AS "INVOICE_ID",
16:00:51 347  	    INVOICE.INVOICE_STATUS_ID,
16:00:51 348  	    PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(in_invoice_id) AS "INVOICE_AMOUNT",
16:00:51 349  	    CHARGE.ID AS "CHARGE_ID",
16:00:51 350  	    CHARGE.CHARGE_AMOUNT,
16:00:51 351  	    CHARGE.TRANSACTION_ID,
16:00:51 352  	    TRANSACTION.TRANSACTION_STATUS_ID
16:00:51 353  	  FROM CHARGE INNER JOIN INVOICE ON INVOICE.ID = CHARGE.INVOICE_ID INNER JOIN TRANSACTION ON TRANSACTION.ID = CHARGE.TRANSACTION_ID WHERE CHARGE.INVOICE_ID = in_invoice_id ORDER BY INVOICE.ID, CHARGE.ID, TRANSACTION.ID;
16:00:51 354  
16:00:51 355  END TEST_GET_INVOICE_INFO;
16:00:51 356  
16:00:51 357  /******************************************************************************/
16:00:51 358  
16:00:51 359  PROCEDURE TEST_DELETE_OFFER_CHAIN(
16:00:51 360  	in_offer_chain_id in number
16:00:51 361  ) as
16:00:51 362  begin
16:00:51 363  
16:00:51 364  	for v_offer_chain in (
16:00:51 365  	  select och.id from offer_chain och where och.id = in_offer_chain_id
16:00:51 366  	)
16:00:51 367  	loop
16:00:51 368  
16:00:51 369  	  for v_offer in (
16:00:51 370  	    select offer_id as id from offer_offer_chain where offer_chain_id = v_offer_chain.id
16:00:51 371  	  )
16:00:51 372  	  loop
16:00:51 373  
16:00:51 374  	    for v_product_offering in (
16:00:51 375  	      select
16:00:51 376  		product_offering.id,
16:00:51 377  		product_offering.product_id
16:00:51 378  	      from
16:00:51 379  		offer_product_offering
16:00:51 380  		inner join product_offering on offer_product_offering.product_offering_id = product_offering.id
16:00:51 381  	      where offer_product_offering.offer_id = v_offer.id
16:00:51 382  	    )
16:00:51 383  	    loop
16:00:51 384  
16:00:51 385  	      -- delete product eligibility
16:00:51 386  	      delete from product_eligibility where product_id = v_product_offering.product_id;
16:00:51 387  
16:00:51 388  	      -- delete meta data
16:00:51 389  	      delete from product_offering_meta_data where product_offering_id = v_product_offering.id;
16:00:51 390  
16:00:51 391  	      -- delete product
16:00:51 392  	      delete from product where id = v_product_offering.product_id;
16:00:51 393  
16:00:51 394  	      -- delete product_offering
16:00:51 395  	      delete from product_offering where id = v_product_offering.id;
16:00:51 396  
16:00:51 397  	    end loop;
16:00:51 398  
16:00:51 399  	    -- delete data from offer_product_offering table
16:00:51 400  	    delete from offer_product_offering where offer_id = v_offer.id;
16:00:51 401  
16:00:51 402  	    -- delete data from offer_offer_chain table
16:00:51 403  	    delete from offer_offer_chain where offer_chain_id = v_offer_chain.id;
16:00:51 404  
16:00:51 405  	    -- delete offer
16:00:51 406  	    delete from offer where id = v_offer.id;
16:00:51 407  
16:00:51 408  	  end loop;
16:00:51 409  
16:00:51 410  	  -- delete offer_chain_eligibility
16:00:51 411  	  delete from offer_chain_eligibility where offer_chain_id = v_offer_chain.id;
16:00:51 412  
16:00:51 413  	  -- delete metadata
16:00:51 414  	  delete from offer_chain_meta_data where offer_chain_id = v_offer_chain.id;
16:00:51 415  
16:00:51 416  	  -- delete offer chain
16:00:51 417  	  delete from offer_chain where id = v_offer_chain.id;
16:00:51 418  
16:00:51 419  	end loop;
16:00:51 420  
16:00:51 421  end;
16:00:51 422  
16:00:51 423  END PROCS_TEST_V20;
16:00:51 424  .
16:00:51 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:00:51 SQL> 
16:00:51 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_ACCOUNT_V20" AS
16:00:51   2  
16:00:51   3  PROCEDURE INVOICE_IDS_BY_GROUP_ID (
16:00:51   4  	in_group_id    IN  NUMBER,
16:00:51   5  	out_result_set OUT SYS_REFCURSOR
16:00:51   6  ) AS
16:00:51   7  SPROC_NAME CONSTANT VARCHAR2(32) := 'INVOICE_IDS_BY_GROUP_ID';
16:00:51   8  BEGIN
16:00:51   9  	OPEN out_result_set FOR
16:00:51  10  	SELECT
16:00:51  11  	  Invoice.Id
16:00:51  12  	FROM
16:00:51  13  	  LICENSE
16:00:51  14  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51  15  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:51  16  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51  17  	  INNER JOIN INVOICE_STATUS ON INVOICE.INVOICE_STATUS_ID = INVOICE_STATUS.ID
16:00:51  18  	Where
16:00:51  19  	  SUBSCRIPTION.ACCOUNT_ID IN (SELECT ID FROM ACCOUNT WHERE GROUP_ID = in_group_id) AND
16:00:51  20  	  INVOICE.INVOICE_STATUS_ID = GLOBAL_STATUSES_V20.INVOICE_OPEN;
16:00:51  21  END INVOICE_IDS_BY_GROUP_ID;
16:00:51  22  
16:00:51  23  FUNCTION GET_GRACE_START_DATE(
16:00:51  24  	in_subscription_id IN NUMBER
16:00:51  25  ) RETURN DATE AS
16:00:51  26  SPROC_NAME	   CONSTANT VARCHAR2(32) := 'GET_GRACE_START_DATE';
16:00:51  27  grace_start_date_var DATE;
16:00:51  28  BEGIN
16:00:51  29  	SELECT GRACE_START_DATE into grace_start_date_var
16:00:51  30  	FROM
16:00:51  31  	  (
16:00:51  32  	    SELECT
16:00:51  33  	      GRACE_START_DATE
16:00:51  34  	    FROM
16:00:51  35  	      LICENSE
16:00:51  36  	    WHERE
16:00:51  37  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:51  38  	    ORDER BY
16:00:51  39  	      LICENSE.END_DATE DESC
16:00:51  40  	  )
16:00:51  41  	WHERE
16:00:51  42  	  ROWNUM <= 1;
16:00:51  43  
16:00:51  44  	RETURN grace_start_date_var;
16:00:51  45  END GET_GRACE_START_DATE;
16:00:51  46  
16:00:51  47  FUNCTION GET_GRACE_END_DATE(
16:00:51  48  	in_subscription_id IN NUMBER
16:00:51  49  ) RETURN DATE AS
16:00:51  50  SPROC_NAME	 CONSTANT VARCHAR2(32) := 'GET_GRACE_END_DATE';
16:00:51  51  grace_end_date_var DATE;
16:00:51  52  BEGIN
16:00:51  53  	SELECT GRACE_END_DATE into grace_end_date_var
16:00:51  54  	FROM
16:00:51  55  	  (
16:00:51  56  	    SELECT
16:00:51  57  	      GRACE_END_DATE
16:00:51  58  	    FROM
16:00:51  59  	      LICENSE
16:00:51  60  	    WHERE
16:00:51  61  	      LICENSE.SUBSCRIPTION_ID = in_subscription_id
16:00:51  62  	    ORDER BY
16:00:51  63  	      LICENSE.END_DATE DESC
16:00:51  64  	  )
16:00:51  65  	WHERE ROWNUM <= 1;
16:00:51  66  
16:00:51  67  	RETURN grace_end_date_var;
16:00:51  68  END GET_GRACE_END_DATE;
16:00:51  69  
16:00:51  70  
16:00:51  71  
16:00:51  72  PROCEDURE ANNOTATE_ACCOUNT (
16:00:51  73  	in_group_id   IN  NUMBER,
16:00:51  74  	in_agent_id   IN  NUMBER,
16:00:51  75  	in_note       IN  VARCHAR2,
16:00:51  76  	in_created_by IN  VARCHAR2
16:00:51  77  ) AS
16:00:51  78  SPROC_NAME  CONSTANT VARCHAR2(16) := 'ANNOTATE_ACCOUNT';
16:00:51  79  -- VARIABLES
16:00:51  80  var_account_id	  NUMBER;
16:00:51  81  var_account_note_id NUMBER;
16:00:51  82  -- EXCEPTIONS
16:00:51  83  BAD_ACCOUNT_ID EXCEPTION;
16:00:51  84  BEGIN
16:00:51  85  
16:00:51  86  	-- Get account id
16:00:51  87  	BEGIN
16:00:51  88  	  SELECT
16:00:51  89  	    ACCOUNT.ID into var_account_id
16:00:51  90  	  FROM
16:00:51  91  	    ACCOUNT
16:00:51  92  	  WHERE
16:00:51  93  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51  94  	  EXCEPTION
16:00:51  95  	    WHEN NO_DATA_FOUND THEN
16:00:51  96  	      RAISE BAD_ACCOUNT_ID;
16:00:51  97  	END;
16:00:51  98  
16:00:51  99  	-- Insert new row into ACCOUNT_NOTE table
16:00:51 100  	PROCS_ACCOUNT_CRU_V20.CREATE_ACCOUNT_NOTE(
16:00:51 101  	  inout_account_note_id => var_account_note_id,
16:00:51 102  	  in_agent_id		=> in_agent_id,
16:00:51 103  	  in_account_id 	=> var_account_id,
16:00:51 104  	  in_note		=> in_note,
16:00:51 105  	  in_created_by 	=> in_created_by
16:00:51 106  	);
16:00:51 107  
16:00:51 108  EXCEPTION
16:00:51 109  WHEN BAD_ACCOUNT_ID THEN
16:00:51 110  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 111  	  SPROC_NAME, 'No such group id');
16:00:51 112  WHEN OTHERS THEN
16:00:51 113  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 114  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 115  END ANNOTATE_ACCOUNT;
16:00:51 116  
16:00:51 117  PROCEDURE ASSERT_ACCOUNT_EXISTS (
16:00:51 118  	in_group_id IN	NUMBER,
16:00:51 119  	out_exists  OUT NUMBER
16:00:51 120  ) AS
16:00:51 121  -- VARIABLES
16:00:51 122  var_found_id  NUMBER;
16:00:51 123  SPROC_NAME    CONSTANT VARCHAR2(21) := 'ASSERT_ACCOUNT_EXISTS';
16:00:51 124  BEGIN
16:00:51 125  	SELECT ACCOUNT.ID INTO var_found_id FROM ACCOUNT WHERE ACCOUNT.GROUP_ID = in_group_id;
16:00:51 126  	out_exists := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 127  EXCEPTION
16:00:51 128  WHEN NO_DATA_FOUND THEN
16:00:51 129  	out_exists := GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 130  WHEN OTHERS THEN
16:00:51 131  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 132  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 133  END ASSERT_ACCOUNT_EXISTS;
16:00:51 134  
16:00:51 135  PROCEDURE DISABLE_ACCOUNT (
16:00:51 136  	in_group_id   IN NUMBER,
16:00:51 137  	in_updated_by IN VARCHAR2,
16:00:51 138  	in_note       IN VARCHAR2,
16:00:51 139  	in_agent_id   IN NUMBER
16:00:51 140  ) AS
16:00:51 141  SPROC_NAME	      CONSTANT VARCHAR2(15) := 'DISABLE_ACCOUNT';
16:00:51 142  var_account_id	      NUMBER;
16:00:51 143  current_account_status  NUMBER;
16:00:51 144  
16:00:51 145  var_active_subscriptions_num NUMBER;
16:00:51 146  var_pending_invoices_num	   NUMBER;
16:00:51 147  
16:00:51 148  -- EXCEPTIONS
16:00:51 149  BAD_ACOUNT_ID		EXCEPTION;
16:00:51 150  BAD_CURRENT_ACC_STATUS	EXCEPTION;
16:00:51 151  PENDING_INVOICES_FOUND	EXCEPTION;
16:00:51 152  ACCOUNT_HAS_ACIVE_SUBSCRS EXCEPTION;
16:00:51 153  CAN_NOT_ANNOTATE_ACCOUNT	EXCEPTION;
16:00:51 154  EXCEPTION_MESSAGE 	VARCHAR2(1024);
16:00:51 155  BEGIN
16:00:51 156  
16:00:51 157  	-- Get account's status and id
16:00:51 158  	BEGIN
16:00:51 159  	  SELECT
16:00:51 160  	    ACCOUNT.ACCOUNT_STATUS_ID,
16:00:51 161  	    ACCOUNT.ID
16:00:51 162  	  INTO
16:00:51 163  	    current_account_status,
16:00:51 164  	    var_account_id
16:00:51 165  	  FROM ACCOUNT
16:00:51 166  	  WHERE
16:00:51 167  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 168  	  EXCEPTION
16:00:51 169  	    WHEN NO_DATA_FOUND THEN
16:00:51 170  	      RAISE BAD_ACOUNT_ID;
16:00:51 171  	END;
16:00:51 172  
16:00:51 173  	-- For now, we can disable account whenever
16:00:51 174  	IF current_account_status = GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
16:00:51 175  	  RAISE BAD_CURRENT_ACC_STATUS;
16:00:51 176  	END IF;
16:00:51 177  
16:00:51 178  	-- Checks for out outstanding balances
16:00:51 179  	-- CHECK: No outstanding balances. If monies are due, then we can not cancel account. Return ERROR.
16:00:51 180  	SELECT
16:00:51 181  	  COUNT(*) into var_pending_invoices_num
16:00:51 182  	FROM
16:00:51 183  	  LICENSE
16:00:51 184  	    INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 185  	    INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:51 186  	WHERE
16:00:51 187  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 188  	  AND INVOICE.INVOICE_STATUS_ID IN ( SELECT GLOBAL_STATUSES_V20.INVOICE_OPEN FROM DUAL );
16:00:51 189  
16:00:51 190  	IF var_pending_invoices_num > 0 THEN
16:00:51 191  	  RAISE PENDING_INVOICES_FOUND;
16:00:51 192  	END IF;
16:00:51 193  
16:00:51 194  	SELECT
16:00:51 195  	  COUNT(*) into var_active_subscriptions_num
16:00:51 196  	FROM
16:00:51 197  	  SUBSCRIPTION
16:00:51 198  	WHERE
16:00:51 199  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 200  	  AND (
16:00:51 201  	    SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE
16:00:51 202  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_SUSPENDED
16:00:51 203  	    OR SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_IN_GRACE_PERIOD);
16:00:51 204  
16:00:51 205  	IF var_active_subscriptions_num > 0 THEN
16:00:51 206  	  RAISE ACCOUNT_HAS_ACIVE_SUBSCRS;
16:00:51 207  	END IF;
16:00:51 208  
16:00:51 209  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
16:00:51 210  	  in_account_id        => var_account_id,
16:00:51 211  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_DISABLED,
16:00:51 212  	  in_updated_by        => in_updated_by
16:00:51 213  	);
16:00:51 214  
16:00:51 215  	-- Annotate account
16:00:51 216  	IF in_note IS NOT NULL THEN
16:00:51 217  	  BEGIN
16:00:51 218  	    PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
16:00:51 219  	      in_group_id   => in_group_id,
16:00:51 220  	      in_agent_id   => in_agent_id,
16:00:51 221  	      in_note	    => in_note,
16:00:51 222  	      in_created_by => in_updated_by
16:00:51 223  	    );
16:00:51 224  	    EXCEPTION
16:00:51 225  	      WHEN OTHERS THEN
16:00:51 226  		EXCEPTION_MESSAGE := SQLERRM;
16:00:51 227  		RAISE CAN_NOT_ANNOTATE_ACCOUNT;
16:00:51 228  	  END;
16:00:51 229  	END IF;
16:00:51 230  
16:00:51 231  EXCEPTION
16:00:51 232  WHEN ACCOUNT_HAS_ACIVE_SUBSCRS THEN
16:00:51 233  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 234  	  SPROC_NAME, 'Account has active or suspended subsciptions');
16:00:51 235  WHEN BAD_CURRENT_ACC_STATUS THEN
16:00:51 236  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 237  	  SPROC_NAME, 'Current account status is "disabled". Can not disable it one more time.');
16:00:51 238  WHEN PENDING_INVOICES_FOUND THEN
16:00:51 239  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 240  	  SPROC_NAME, 'Opened/Pending invoices founded');
16:00:51 241  WHEN BAD_ACOUNT_ID THEN
16:00:51 242  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 243  	  SPROC_NAME, 'No such account');
16:00:51 244  WHEN CAN_NOT_ANNOTATE_ACCOUNT THEN
16:00:51 245  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 246  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
16:00:51 247  WHEN OTHERS THEN
16:00:51 248  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 249  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 250  END DISABLE_ACCOUNT;
16:00:51 251  
16:00:51 252  PROCEDURE CREATE_ACTIVE_ACCOUNT(
16:00:51 253  	in_group_id	   IN  ACCOUNT.GROUP_ID%TYPE,
16:00:51 254  	in_created_by	   IN  ACCOUNT.CREATED_BY%TYPE,
16:00:51 255  	out_new_account_id OUT ACCOUNT.ID%TYPE
16:00:51 256  ) AS
16:00:51 257  SPROC_NAME CONSTANT VARCHAR2(32) := 'CREATE_ACTIVE_ACCOUNT';
16:00:51 258  var_count  NUMBER  := 0;
16:00:51 259  BEGIN
16:00:51 260  	SELECT COUNT(1) INTO var_count FROM ACCOUNT WHERE GROUP_ID = in_group_id;
16:00:51 261  
16:00:51 262  	IF (var_count = 0) THEN
16:00:51 263  	  PROCS_ACCOUNT_CRU_V20.CREATE_ACCOUNT(
16:00:51 264  	      out_account_id	    => out_new_account_id,
16:00:51 265  	      in_account_status_id  => GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE,
16:00:51 266  	      in_group_id	    => in_group_id,
16:00:51 267  	      in_created_by	    => in_created_by,
16:00:51 268  	      in_system_category_id => GLOBAL_ENUMS_V20.SYSTEM_CATEGORY_LIVE
16:00:51 269  	  );
16:00:51 270  	ELSE
16:00:51 271  	  out_new_account_id := NULL;
16:00:51 272  	END IF;
16:00:51 273  END CREATE_ACTIVE_ACCOUNT;
16:00:51 274  
16:00:51 275  PROCEDURE REACTIVATE_ACCOUNT (
16:00:51 276  	in_group_id   IN NUMBER,
16:00:51 277  	in_updated_by IN VARCHAR2,
16:00:51 278  	in_note       IN VARCHAR2,
16:00:51 279  	in_agent_id   IN NUMBER
16:00:51 280  ) AS
16:00:51 281  -- VARIABLES
16:00:51 282  SPROC_NAME	      CONSTANT VARCHAR2(18) := 'REACTIVATE_ACCOUNT';
16:00:51 283  var_account_id	      NUMBER;
16:00:51 284  current_account_status  NUMBER;
16:00:51 285  
16:00:51 286  -- EXCEPTIONS
16:00:51 287  BAD_CURRENT_ACC_STATUS EXCEPTION;
16:00:51 288  CAN_NOT_CREATE_NOTE    EXCEPTION;
16:00:51 289  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 290  BEGIN
16:00:51 291  	-- Get account id, status
16:00:51 292  	SELECT
16:00:51 293  	  ACCOUNT.ACCOUNT_STATUS_ID,
16:00:51 294  	  ACCOUNT.ID
16:00:51 295  	INTO
16:00:51 296  	  current_account_status,
16:00:51 297  	  var_account_id
16:00:51 298  	FROM ACCOUNT
16:00:51 299  	WHERE
16:00:51 300  	  ACCOUNT.GROUP_ID = in_group_id;
16:00:51 301  
16:00:51 302  	IF current_account_status != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
16:00:51 303  	  RAISE BAD_CURRENT_ACC_STATUS;
16:00:51 304  	END IF;
16:00:51 305  
16:00:51 306  	-- Change account status
16:00:51 307  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
16:00:51 308  	  in_account_id        => var_account_id,
16:00:51 309  	  in_updated_by        => in_updated_by,
16:00:51 310  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
16:00:51 311  	);
16:00:51 312  
16:00:51 313  	-- Add note
16:00:51 314  	BEGIN
16:00:51 315  	  PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
16:00:51 316  	    in_group_id   => in_group_id,
16:00:51 317  	    in_agent_id   => in_agent_id,
16:00:51 318  	    in_note	  => in_note,
16:00:51 319  	    in_created_by => in_updated_by
16:00:51 320  	  );
16:00:51 321  	  EXCEPTION
16:00:51 322  	    WHEN OTHERS THEN
16:00:51 323  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 324  	      RAISE CAN_NOT_CREATE_NOTE;
16:00:51 325  	END;
16:00:51 326  
16:00:51 327  EXCEPTION
16:00:51 328  WHEN BAD_CURRENT_ACC_STATUS THEN
16:00:51 329  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 330  	  SPROC_NAME, 'Current account status is not "frozen"');
16:00:51 331  WHEN NO_DATA_FOUND THEN
16:00:51 332  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 333  	  SPROC_NAME, 'Could not find account with given group ID');
16:00:51 334  WHEN CAN_NOT_CREATE_NOTE THEN
16:00:51 335  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 336  	  SPROC_NAME, 'Could not annotate account');
16:00:51 337  WHEN OTHERS THEN
16:00:51 338  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 339  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 340  END REACTIVATE_ACCOUNT;
16:00:51 341  
16:00:51 342  PROCEDURE GET_ACCOUNT_CREDIT_CARDS (
16:00:51 343  	in_group_id    IN ACCOUNT.GROUP_ID%TYPE,
16:00:51 344  	in_status_id   IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.CREDIT_CARD_ACTIVE,
16:00:51 345  	out_result_set OUT SYS_REFCURSOR
16:00:51 346  ) AS
16:00:51 347  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_CREDIT_CARDS';
16:00:51 348  BEGIN
16:00:51 349  	OPEN out_result_set FOR
16:00:51 350  	  SELECT
16:00:51 351  	    CREDIT_CARD.ID,
16:00:51 352  	    CREDIT_CARD.ACCOUNT_ID,
16:00:51 353  	    CREDIT_CARD.INSTRUMENT_NAME,
16:00:51 354  	    CREDIT_CARD.PRIVATE_CARD_HOLDER_NAME,
16:00:51 355  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS,
16:00:51 356  	    CREDIT_CARD.PRIVATE_STREET_ADDRESS2,
16:00:51 357  	    CREDIT_CARD.STATE,
16:00:51 358  	    CREDIT_CARD.CITY,
16:00:51 359  	    CREDIT_CARD.POSTAL_CODE,
16:00:51 360  	    CREDIT_CARD.COUNTRY,
16:00:51 361  	    CREDIT_CARD.LAST_FOUR_CC,
16:00:51 362  	    CREDIT_CARD.EXPIRATION_DATE,
16:00:51 363  	    CREDIT_CARD.CREDIT_CARD_TYPE_ID,
16:00:51 364  	    CREDIT_CARD.SECRET_TOKEN,
16:00:51 365  	    CREDIT_CARD.CREATE_DATE,
16:00:51 366  	    CREDIT_CARD.CREATED_BY,
16:00:51 367  	    CREDIT_CARD.UPDATE_DATE,
16:00:51 368  	    CREDIT_CARD.UPDATED_BY,
16:00:51 369  	    CREDIT_CARD.CREDIT_CARD_STATUS_ID,
16:00:51 370  	    CREDIT_CARD.PRIVATE_FIRST_NAME,
16:00:51 371  	    Credit_Card.Private_Last_Name,
16:00:51 372  	    decode((SELECT Instrument_Id FROM ACCOUNT WHERE group_id = in_group_id and Instrument_Id = CREDIT_CARD.ID),null,'false', 'true') is_default
16:00:51 373  	  From
16:00:51 374  	      CREDIT_CARD left join account on account.id = CREDIT_CARD.Account_Id
16:00:51 375  	  Where
16:00:51 376  	    Account.Group_Id = in_group_id
16:00:51 377  	    AND CREDIT_CARD.CREDIT_CARD_STATUS_ID = in_status_id;
16:00:51 378  END GET_ACCOUNT_CREDIT_CARDS;
16:00:51 379  
16:00:51 380  PROCEDURE GET_ACCOUNT_GIFT_CERTIFICATES (
16:00:51 381  	in_group_id	  IN NUMBER,
16:00:51 382  	out_result_gc_set OUT SYS_REFCURSOR,
16:00:51 383  	in_instr_status   IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.TRUE
16:00:51 384  ) AS
16:00:51 385  SPROC_NAME     CONSTANT VARCHAR2(29) := 'GET_ACCOUNT_GIFT_CERTIFICATES';
16:00:51 386  var_account_id NUMBER;
16:00:51 387  
16:00:51 388  -- Exceptions
16:00:51 389  WRONG_INSTR_EXCEPTION	 EXCEPTION;
16:00:51 390  BEGIN
16:00:51 391  
16:00:51 392  	-- Get account id
16:00:51 393  	SELECT
16:00:51 394  	  ACCOUNT.ID INTO var_account_id
16:00:51 395  	FROM
16:00:51 396  	  ACCOUNT
16:00:51 397  	WHERE
16:00:51 398  	  ACCOUNT.GROUP_ID = in_group_id;
16:00:51 399  
16:00:51 400  	-- Check that incoming data is correct
16:00:51 401  	IF in_instr_status != GLOBAL_CONSTANTS_V20.TRUE AND in_instr_status != GLOBAL_CONSTANTS_V20.FALSE THEN
16:00:51 402  	  RAISE WRONG_INSTR_EXCEPTION;
16:00:51 403  	END IF;
16:00:51 404  
16:00:51 405  	OPEN out_result_gc_set FOR
16:00:51 406  	SELECT
16:00:51 407  	  GIFT_CERTIFICATE.ID,
16:00:51 408  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:00:51 409  	  GIFT_CERTIFICATE.PURCHASE_INVOICE_ID,
16:00:51 410  	  GIFT_CERTIFICATE.PURCHASE_DATE,
16:00:51 411  	  GIFT_CERTIFICATE.OFFER_CHAIN_ID,
16:00:51 412  	  GIFT_CERTIFICATE.EXPIRATION_DATE,
16:00:51 413  	  GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID,
16:00:51 414  	  GIFT_CERTIFICATE.CODE,
16:00:51 415  	  GIFT_CERTIFICATE.CREATE_DATE,
16:00:51 416  	  GIFT_CERTIFICATE.CREATED_BY,
16:00:51 417  	  GIFT_CERTIFICATE.UPDATE_DATE,
16:00:51 418  	  GIFT_CERTIFICATE.UPDATED_BY,
16:00:51 419  	  GIFT_CERTIFICATE.RECIPIENT_NAME,
16:00:51 420  	  GIFT_CERTIFICATE.RECIPIENT_EMAIL,
16:00:51 421  	  GIFT_CERTIFICATE.SENDER_NAME,
16:00:51 422  	  GIFT_CERTIFICATE.SENDER_EMAIL,
16:00:51 423  	  GIFT_CERTIFICATE.REDEEMER_GROUP_ID,
16:00:51 424  	  GIFT_CERTIFICATE.REDEMPTION_DATE,
16:00:51 425  	  GIFT_CERTIFICATE.FINALIZED_INVOICE_ID,
16:00:51 426  	  GIFT_CERTIFICATE.GIFT_MESSAGE
16:00:51 427  	FROM
16:00:51 428  	  GIFT_CERTIFICATE
16:00:51 429  	WHERE
16:00:51 430  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:00:51 431  	  AND (
16:00:51 432  		( in_instr_status = GLOBAL_CONSTANTS_V20.TRUE AND
16:00:51 433  		  (
16:00:51 434  		    GIFT_CERTIFICATE.EXPIRATION_DATE >= current_date
16:00:51 435  		    AND GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID = GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
16:00:51 436  		  )
16:00:51 437  		)
16:00:51 438  		OR
16:00:51 439  		(
16:00:51 440  		  in_instr_status = GLOBAL_CONSTANTS_V20.FALSE AND
16:00:51 441  		  (
16:00:51 442  		    GIFT_CERTIFICATE.EXPIRATION_DATE < current_date
16:00:51 443  		    OR GIFT_CERTIFICATE.GIFT_CERTIFICATE_STATUS_ID != GLOBAL_STATUSES_V20.GIFT_CERTIFICATE_ACTIVE
16:00:51 444  		  )
16:00:51 445  		)
16:00:51 446  	      );
16:00:51 447  
16:00:51 448  EXCEPTION
16:00:51 449  WHEN NO_DATA_FOUND THEN
16:00:51 450  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 451  	  SPROC_NAME, 'Can not find account with given group id');
16:00:51 452  WHEN WRONG_INSTR_EXCEPTION THEN
16:00:51 453  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 454  	  SPROC_NAME, 'Wrong gift certificate type');
16:00:51 455  WHEN OTHERS THEN
16:00:51 456  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 457  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 458  END GET_ACCOUNT_GIFT_CERTIFICATES;
16:00:51 459  
16:00:51 460  PROCEDURE GET_ACCOUNT_INFO  (
16:00:51 461  	  in_group_id	    IN	NUMBER,
16:00:51 462  	  out_account_info  OUT SYS_REFCURSOR
16:00:51 463  ) AS
16:00:51 464  SPROC_NAME      CONSTANT VARCHAR2(16) := 'GET_ACCOUNT_INFO';
16:00:51 465  var_account_id  NUMBER;
16:00:51 466  BEGIN
16:00:51 467  
16:00:51 468  	-- Get account id
16:00:51 469  	SELECT
16:00:51 470  	  ACCOUNT.ID INTO var_account_id
16:00:51 471  	FROM
16:00:51 472  	  ACCOUNT
16:00:51 473  	WHERE
16:00:51 474  	  ACCOUNT.GROUP_ID = in_group_id;
16:00:51 475  
16:00:51 476  	-- Get account info
16:00:51 477  	OPEN out_account_info FOR
16:00:51 478  	  SELECT
16:00:51 479  	    ACCOUNT.ACCOUNT_STATUS_ID
16:00:51 480  	  FROM ACCOUNT
16:00:51 481  	  WHERE
16:00:51 482  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 483  
16:00:51 484  EXCEPTION
16:00:51 485  WHEN NO_DATA_FOUND THEN
16:00:51 486  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 487  	  SPROC_NAME, 'No such account');
16:00:51 488  WHEN OTHERS THEN
16:00:51 489  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 490  	  SPROC_NAME, 'Unknown Error', SQLERRM);
16:00:51 491  END GET_ACCOUNT_INFO;
16:00:51 492  
16:00:51 493  PROCEDURE GET_ACCOUNT_NOTES (
16:00:51 494  	  in_group_id	 IN  NUMBER,
16:00:51 495  	  out_result_set OUT SYS_REFCURSOR
16:00:51 496  ) AS
16:00:51 497  -- VARIABLES
16:00:51 498  SPROC_NAME      CONSTANT VARCHAR2(17) := 'GET_ACCOUNT_NOTES';
16:00:51 499  var_account_id NUMBER;
16:00:51 500  -- EXCEPTIONS
16:00:51 501  BAD_ACCOUNT_ID EXCEPTION;
16:00:51 502  BEGIN
16:00:51 503  
16:00:51 504  	-- Check that account is exists
16:00:51 505  	BEGIN
16:00:51 506  	  SELECT
16:00:51 507  	    ACCOUNT.ID into var_account_id
16:00:51 508  	  FROM
16:00:51 509  	    ACCOUNT
16:00:51 510  	  WHERE
16:00:51 511  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 512  	  EXCEPTION
16:00:51 513  	    WHEN NO_DATA_FOUND THEN
16:00:51 514  	      RAISE BAD_ACCOUNT_ID;
16:00:51 515  	END;
16:00:51 516  
16:00:51 517  	-- Get account notes
16:00:51 518  	OPEN out_result_set FOR
16:00:51 519  	SELECT
16:00:51 520  	  ACCOUNT_NOTE.ACCOUNT_ID,
16:00:51 521  	  ACCOUNT_NOTE.AGENT_ID,
16:00:51 522  	  ACCOUNT_NOTE.CREATE_DATE,
16:00:51 523  	  ACCOUNT_NOTE.CREATED_BY,
16:00:51 524  	  ACCOUNT_NOTE.ID,
16:00:51 525  	  ACCOUNT_NOTE.NOTE
16:00:51 526  	FROM
16:00:51 527  	  ACCOUNT_NOTE
16:00:51 528  	WHERE
16:00:51 529  	  ACCOUNT_NOTE.ACCOUNT_ID = var_account_id
16:00:51 530  	ORDER BY
16:00:51 531  	  ACCOUNT_NOTE.CREATE_DATE ASC;
16:00:51 532  
16:00:51 533  EXCEPTION
16:00:51 534  WHEN BAD_ACCOUNT_ID THEN
16:00:51 535  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 536  	  SPROC_NAME, 'No such account');
16:00:51 537  WHEN OTHERS THEN
16:00:51 538  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 539  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 540  END GET_ACCOUNT_NOTES;
16:00:51 541  
16:00:51 542  PROCEDURE GET_ACCOUNT_PAYPALS(
16:00:51 543  	in_group_id    IN  ACCOUNT.GROUP_ID%TYPE,
16:00:51 544  	in_status_id   IN  PAYPAL.PAYPAL_STATUS_ID%TYPE DEFAULT GLOBAL_STATUSES_V20.PAYPAL_ACTIVE,
16:00:51 545  	out_result_set OUT SYS_REFCURSOR
16:00:51 546  ) AS
16:00:51 547  SPROC_NAME     CONSTANT VARCHAR2(32) := 'GET_ACCOUNT_PAYPALS';
16:00:51 548  BEGIN
16:00:51 549  	OPEN out_result_set FOR
16:00:51 550  	  SELECT
16:00:51 551  	    DISTINCT
16:00:51 552  	    PAYPAL.ID,
16:00:51 553  	    PAYPAL.ACCOUNT_ID,
16:00:51 554  	    PAYPAL.INSTRUMENT_NAME,
16:00:51 555  	    PAYPAL.PRIVATE_EMAIL_ADDRESS,
16:00:51 556  	    PAYPAL.CREATE_DATE,
16:00:51 557  	    PAYPAL.CREATED_BY,
16:00:51 558  	    PAYPAL.UPDATE_DATE,
16:00:51 559  	    PAYPAL.UPDATED_BY,
16:00:51 560  	    PAYPAL.PAYPAL_STATUS_ID,
16:00:51 561  	    PAYPAL.PRIVATE_STREET_ADDRESS,
16:00:51 562  	    PAYPAL.PRIVATE_STREET_ADDRESS2,
16:00:51 563  	    PAYPAL.STATE,
16:00:51 564  	    PAYPAL.CITY,
16:00:51 565  	    PAYPAL.POSTAL_CODE,
16:00:51 566  	    PAYPAL.COUNTRY,
16:00:51 567  	    Paypal.Expiration_Date,
16:00:51 568  	    Paypal.Secret_Token,
16:00:51 569  	    decode((SELECT
16:00:51 570  	    Instrument_Id
16:00:51 571  		    FROM ACCOUNT
16:00:51 572  		    WHERE group_id = in_group_id AND Instrument_Id = PAYPAL.ID), null, 'false', 'true') is_default
16:00:51 573  	  FROM
16:00:51 574  	      PAYPAL
16:00:51 575  	      LEFT JOIN ACCOUNT ON ACCOUNT.id = PAYPAL.ACCOUNT_ID
16:00:51 576  	  WHERE
16:00:51 577  	    ACCOUNT.GROUP_ID = in_group_id
16:00:51 578  	    AND PAYPAL.PAYPAL_STATUS_ID = in_status_id;
16:00:51 579  END GET_ACCOUNT_PAYPALS;
16:00:51 580  
16:00:51 581  PROCEDURE GET_ACCOUNT_SUBSCRIPTIONS (
16:00:51 582  	  in_group_id	 IN  NUMBER,
16:00:51 583  	  in_start_date  IN DATE,
16:00:51 584  	  in_end_date	 IN DATE,
16:00:51 585  	  in_status	 IN NUMBER,
16:00:51 586  	  in_group_account_type IN VARCHAR2,
16:00:51 587  	  out_result_set OUT SYS_REFCURSOR
16:00:51 588  ) AS
16:00:51 589  -- VARIABLES
16:00:51 590  SPROC_NAME     CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_SUBSCRIPTIONS';
16:00:51 591  var_account_id NUMBER;
16:00:51 592  -- EXCEPTIONS
16:00:51 593  BAD_GROUP_ID	      EXCEPTION;
16:00:51 594  BEGIN
16:00:51 595  	-- Get account id
16:00:51 596  	BEGIN
16:00:51 597  	  SELECT
16:00:51 598  	    ACCOUNT.ID INTO var_account_id
16:00:51 599  	  FROM
16:00:51 600  	    ACCOUNT
16:00:51 601  	  WHERE
16:00:51 602  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 603  	  EXCEPTION
16:00:51 604  	    WHEN NO_DATA_FOUND THEN
16:00:51 605  	      RAISE BAD_GROUP_ID;
16:00:51 606  	END;
16:00:51 607  
16:00:51 608  	-- Get information about account subscriptions
16:00:51 609  	OPEN out_result_set FOR
16:00:51 610  	SELECT
16:00:51 611  	  in_group_id AS "GROUP_ID",
16:00:51 612  	  SUBSCRIPTION.ID AS "SUBSCRIPTION_ID",
16:00:51 613  	  SUBSCRIPTION.SUBSCRIPTION_STATUS_ID,
16:00:51 614  	  SUBSCRIPTION.PURCHASE_DATE,
16:00:51 615  	  SUBSCRIPTION.SUSPEND_DATE,
16:00:51 616  	  SUBSCRIPTION.REACTIVATION_DATE,
16:00:51 617  	  SUBSCRIPTION.CANCELLATION_DATE,
16:00:51 618  	  SUBSCRIPTION_CANCEL_REASON.VALUE as "CANCEL_TYPE",
16:00:51 619  	  SUBSCRIPTION.INSTRUMENT_ID,
16:00:51 620  	  SUBSCRIPTION.INSTRUMENT_TYPE_ID,
16:00:51 621  	  OFFER_CHAIN.ID AS "OFFER_CHAIN_ID",
16:00:51 622  	  OFFER_CHAIN.NAME,
16:00:51 623  	  OFFER_CHAIN.DESCRIPTION,
16:00:51 624  	  OFFER_CHAIN.PRODUCT_URI,
16:00:51 625  	  PROCS_SUBSCRIPTION_V20.CALC_SUBSCRIPTION_END_DATE(SUBSCRIPTION.ID) as "END_DATE",
16:00:51 626  	  PROCS_SUBSCRIPTION_V20.GET_RECENT_CHARGE(SUBSCRIPTION.ID) AS "RECENT_CHARGE",
16:00:51 627  	  PROCS_SUBSCRIPTION_V20.GET_RENEWAL_DATE(SUBSCRIPTION.ID) AS "RENEWAL_DATE",
16:00:51 628  	  PROCS_SUBSCRIPTION_V20.GET_BILLING_CYCLE(SUBSCRIPTION.ID) AS "BILLING_CYCLE",
16:00:51 629  	  PROCS_SUBSCRIPTION_V20.IS_SUBSCRIPTION_CANCELABLE(SUBSCRIPTION.ID) AS "IS_CANCELABLE",
16:00:51 630  	  ITUNES_RECEIPT.ID AS "ITUNES_RECEIPT_ID",
16:00:51 631  	  (
16:00:51 632  	    SELECT
16:00:51 633  	      MAX(ENTITLEMENT_END_DATE)
16:00:51 634  	      FROM LICENSE
16:00:51 635  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 636  	  )
16:00:51 637  	  as "ENT_END_DATE",
16:00:51 638  	  (
16:00:51 639  	    SELECT
16:00:51 640  	      MIN(START_DATE)
16:00:51 641  	      FROM LICENSE
16:00:51 642  	      WHERE LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 643  	  )
16:00:51 644  	  as "ENT_START_DATE",
16:00:51 645  	  GROUP_ACCOUNT.SUBSCRIPTION_ID GA_SUBSCRIPTION_ID,
16:00:51 646  	  GROUP_ACCOUNT.ID GA_ID,
16:00:51 647  	  GROUP_ACCOUNT.GROUP_NAME GA_GROUP_NAME,
16:00:51 648  	  GROUP_ACCOUNT.FIRST_NAME GA_FIRST_NAME,
16:00:51 649  	  GROUP_ACCOUNT.LAST_NAME GA_LAST_NAME,
16:00:51 650  	  GROUP_ACCOUNT.EMAIL GA_EMAIL,
16:00:51 651  	  GROUP_ACCOUNT.PHONE GA_PHONE,
16:00:51 652  	  GROUP_ACCOUNT.ORGANIZATION_TYPE GA_ORGANIZATION_TYPE,
16:00:51 653  	  GROUP_ACCOUNT.SEATS GA_SEATS,
16:00:51 654  	  PROCS_GROUP_ACCOUNT_V20.F_GET_NUM_OCCUPIED_GROUP_SEATS(GROUP_ACCOUNT.ID) GA_SEATS_USED,
16:00:51 655  	  GROUP_ACCOUNT.IP GA_IP,
16:00:51 656  	  PROCS_SUBSCRIPTION_V20.GET_GIFT_CERT_CODE_BY_SUB_ID(SUBSCRIPTION.ID) GIFT_CERTIFICATE_CODE,
16:00:51 657  	  PROCS_ACCOUNT_V20.GET_GRACE_START_DATE(SUBSCRIPTION.ID) GRACE_START_DATE,
16:00:51 658  	  PROCS_ACCOUNT_V20.GET_GRACE_END_DATE(SUBSCRIPTION.ID) GRACE_END_DATE
16:00:51 659  	FROM
16:00:51 660  	  SUBSCRIPTION
16:00:51 661  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 662  	  LEFT JOIN SUBSCRIPTION_CANCEL_REASON ON SUBSCRIPTION.SCT_ID = SUBSCRIPTION_CANCEL_REASON.ID
16:00:51 663  	  LEFT JOIN ITUNES_RECEIPT ON SUBSCRIPTION.ID = ITUNES_RECEIPT.SUBSCRIPTION_ID
16:00:51 664  	  LEFT JOIN GROUP_ACCOUNT ON SUBSCRIPTION.ID = GROUP_ACCOUNT.SUBSCRIPTION_ID
16:00:51 665  	WHERE
16:00:51 666  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 667  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V20.REAL_TIME_CANCEL_REASON)
16:00:51 668  	  AND SUBSCRIPTION.SUBSCRIPTION_STATUS_ID = NVL(in_status, SUBSCRIPTION.SUBSCRIPTION_STATUS_ID)
16:00:51 669  	  AND PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) >= NVL(in_start_date, PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
16:00:51 670  	  AND PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE) <= NVL(in_end_date, PROCS_COMMON_V20.NORMALIZE_DATE(SUBSCRIPTION.PURCHASE_DATE))
16:00:51 671  	  AND (in_group_account_type IS NULL OR OFFER_CHAIN.GROUP_ACCOUNT_TYPE_ID = in_group_account_type);
16:00:51 672  
16:00:51 673  EXCEPTION
16:00:51 674  WHEN BAD_GROUP_ID THEN
16:00:51 675  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 676  	  SPROC_NAME, 'Can not find account with given group id');
16:00:51 677  WHEN OTHERS THEN
16:00:51 678  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 679  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 680  END GET_ACCOUNT_SUBSCRIPTIONS;
16:00:51 681  
16:00:51 682  PROCEDURE FREEZE_ACCOUNT (
16:00:51 683  	in_group_id   IN NUMBER,
16:00:51 684  	in_updated_by IN VARCHAR2,
16:00:51 685  	in_note       IN VARCHAR2,
16:00:51 686  	in_agent_id   IN NUMBER
16:00:51 687  ) AS
16:00:51 688  SPROC_NAME	    CONSTANT VARCHAR2(14) := 'FREEZE_ACCOUNT';
16:00:51 689  -- VARIABLES
16:00:51 690  var_account_id	    NUMBER;
16:00:51 691  var_account_status_id NUMBER;
16:00:51 692  -- EXCEPTIONS
16:00:51 693  BAD_GROUP_ID	    EXCEPTION;
16:00:51 694  BAD_ACCOUNT_STATUS_ID EXCEPTION;
16:00:51 695  CAN_NOT_CREATE_NOTE   EXCEPTION;
16:00:51 696  EXCEPTION_MESSAGE     VARCHAR2(1024);
16:00:51 697  BEGIN
16:00:51 698  
16:00:51 699  	-- Get account status, account id
16:00:51 700  	BEGIN
16:00:51 701  	  SELECT
16:00:51 702  	    ACCOUNT.ID,
16:00:51 703  	    ACCOUNT.ACCOUNT_STATUS_ID
16:00:51 704  	    into
16:00:51 705  	    var_account_id,
16:00:51 706  	    var_account_status_id
16:00:51 707  	  FROM
16:00:51 708  	    ACCOUNT
16:00:51 709  	  WHERE
16:00:51 710  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 711  	  EXCEPTION
16:00:51 712  	    WHEN NO_DATA_FOUND THEN
16:00:51 713  	      RAISE BAD_GROUP_ID;
16:00:51 714  	END;
16:00:51 715  
16:00:51 716  	-- We can freeze only ACTIVE accounts
16:00:51 717  	IF var_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
16:00:51 718  	  AND var_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN THEN
16:00:51 719  	  RAISE BAD_ACCOUNT_STATUS_ID;
16:00:51 720  	END IF;
16:00:51 721  
16:00:51 722  	-- Set account status
16:00:51 723  	PROCS_ACCOUNT_V20.UPDATE_ACCOUNT_STATUS(
16:00:51 724  	  in_account_id        => var_account_id,
16:00:51 725  	  in_updated_by        => in_updated_by,
16:00:51 726  	  in_account_status_id => GLOBAL_STATUSES_V20.ACCOUNT_FROZEN
16:00:51 727  	);
16:00:51 728  
16:00:51 729  	-- Annotate account
16:00:51 730  	BEGIN
16:00:51 731  	  PROCS_ACCOUNT_V20.ANNOTATE_ACCOUNT(
16:00:51 732  	    in_group_id   => in_group_id,
16:00:51 733  	    in_agent_id   => in_agent_id,
16:00:51 734  	    in_note	  => in_note,
16:00:51 735  	    in_created_by => in_updated_by
16:00:51 736  	  );
16:00:51 737  	  EXCEPTION
16:00:51 738  	    WHEN OTHERS THEN
16:00:51 739  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:51 740  	      RAISE CAN_NOT_CREATE_NOTE;
16:00:51 741  	END;
16:00:51 742  
16:00:51 743  EXCEPTION
16:00:51 744  WHEN BAD_GROUP_ID THEN
16:00:51 745  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 746  	  SPROC_NAME, 'No such group id');
16:00:51 747  WHEN BAD_ACCOUNT_STATUS_ID THEN
16:00:51 748  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.STATE_ERROR,
16:00:51 749  	  SPROC_NAME, 'Could not update this account. Status should to be active or frozen');
16:00:51 750  WHEN CAN_NOT_CREATE_NOTE THEN
16:00:51 751  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:51 752  	  SPROC_NAME, 'Could not annotate account', EXCEPTION_MESSAGE);
16:00:51 753  WHEN OTHERS THEN
16:00:51 754  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 755  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 756  END FREEZE_ACCOUNT;
16:00:51 757  
16:00:51 758  PROCEDURE GET_ACCOUNT_SUBSCR_INVOICES (
16:00:51 759  	in_group_id	   IN  NUMBER,
16:00:51 760  	in_subscription_id IN NUMBER,
16:00:51 761  	out_result_set	   OUT SYS_REFCURSOR
16:00:51 762  ) AS
16:00:51 763  SPROC_NAME	   CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_SUBSCR_INVOICES';
16:00:51 764  -- VARIABLES
16:00:51 765  var_account_id	   NUMBER;
16:00:51 766  temp_subscription_id NUMBER;
16:00:51 767  -- EXCEPTIONS
16:00:51 768  BAD_GROUP_ID	  EXCEPTION;
16:00:51 769  BAD_SUBSCRIPTION_ID EXCEPTION;
16:00:51 770  BEGIN
16:00:51 771  	-- Get account id
16:00:51 772  	BEGIN
16:00:51 773  	  SELECT
16:00:51 774  	    ACCOUNT.ID into var_account_id
16:00:51 775  	  FROM
16:00:51 776  	    ACCOUNT
16:00:51 777  	  WHERE
16:00:51 778  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 779  	  EXCEPTION
16:00:51 780  	    WHEN NO_DATA_FOUND THEN
16:00:51 781  	      RAISE BAD_GROUP_ID;
16:00:51 782  	END;
16:00:51 783  
16:00:51 784  	-- Check that subscription exists
16:00:51 785  	BEGIN
16:00:51 786  	  IF in_subscription_id IS NOT NULL THEN
16:00:51 787  	    SELECT
16:00:51 788  	      SUBSCRIPTION.ID into temp_subscription_id
16:00:51 789  	    FROM
16:00:51 790  	      SUBSCRIPTION
16:00:51 791  	    WHERE
16:00:51 792  	      SUBSCRIPTION.ID = in_subscription_id;
16:00:51 793  	  END IF;
16:00:51 794  	  EXCEPTION
16:00:51 795  	    WHEN NO_DATA_FOUND THEN
16:00:51 796  	      RAISE BAD_SUBSCRIPTION_ID;
16:00:51 797  	END;
16:00:51 798  
16:00:51 799  	OPEN out_result_set FOR
16:00:51 800  	SELECT DISTINCT
16:00:51 801  	  INVOICE.ID as "INVOICE_ID",
16:00:51 802  	  INVOICE.CREATE_DATE,
16:00:51 803  	  INVOICE.INVOICE_STATUS_ID,
16:00:51 804  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:00:51 805  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:00:51 806  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:00:51 807  	  SUBSCRIPTION.ID as "SUBSCRIPTION_ID",
16:00:51 808  	  NULL as "GC_CODE",
16:00:51 809  	  NULL as "GC_ID"
16:00:51 810  	FROM
16:00:51 811  	  LICENSE
16:00:51 812  	  INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 813  	  INNER JOIN INVOICE ON LICENSE.INVOICE_ID = INVOICE.ID
16:00:51 814  	  INNER JOIN OFFER_CHAIN ON SUBSCRIPTION.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 815  	WHERE
16:00:51 816  	  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 817  	  AND (SUBSCRIPTION.SCT_ID IS NULL OR SUBSCRIPTION.SCT_ID != GLOBAL_STATUSES_V20.REAL_TIME_CANCEL_REASON)
16:00:51 818  	  AND SUBSCRIPTION.ID = NVL(in_subscription_id, SUBSCRIPTION.ID);
16:00:51 819  
16:00:51 820  EXCEPTION
16:00:51 821  WHEN BAD_GROUP_ID THEN
16:00:51 822  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 823  	  SPROC_NAME, 'No such account');
16:00:51 824  WHEN BAD_SUBSCRIPTION_ID THEN
16:00:51 825  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 826  	  SPROC_NAME, 'No such subscription');
16:00:51 827  WHEN OTHERS THEN
16:00:51 828  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 829  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 830  END GET_ACCOUNT_SUBSCR_INVOICES;
16:00:51 831  
16:00:51 832  PROCEDURE GET_ACCOUNT_GC_INVOICES (
16:00:51 833  	in_group_id    IN  NUMBER,
16:00:51 834  	out_result_set OUT SYS_REFCURSOR
16:00:51 835  ) AS
16:00:51 836  SPROC_NAME     CONSTANT VARCHAR2(23) := 'GET_ACCOUNT_GC_INVOICES';
16:00:51 837  -- VARIABLES
16:00:51 838  var_account_id NUMBER;
16:00:51 839  -- EXCEPTIONS
16:00:51 840  BAD_GROUP_ID EXCEPTION;
16:00:51 841  BEGIN
16:00:51 842  	-- Get account id
16:00:51 843  	BEGIN
16:00:51 844  	  SELECT
16:00:51 845  	    ACCOUNT.ID into var_account_id
16:00:51 846  	  FROM
16:00:51 847  	    ACCOUNT
16:00:51 848  	  WHERE
16:00:51 849  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 850  	  EXCEPTION
16:00:51 851  	    WHEN NO_DATA_FOUND THEN
16:00:51 852  	      RAISE BAD_GROUP_ID;
16:00:51 853  	END;
16:00:51 854  
16:00:51 855  	-- Get invoices
16:00:51 856  	OPEN out_result_set FOR
16:00:51 857  	SELECT DISTINCT
16:00:51 858  	  INVOICE.ID as "INVOICE_ID",
16:00:51 859  	  INVOICE.CREATE_DATE,
16:00:51 860  	  INVOICE.INVOICE_STATUS_ID,
16:00:51 861  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:00:51 862  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:00:51 863  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:00:51 864  	  NULL as "SUBSCRIPTION_ID",
16:00:51 865  	  GIFT_CERTIFICATE.CODE as "GC_CODE",
16:00:51 866  	  GIFT_CERTIFICATE.ID as "GC_ID"
16:00:51 867  	FROM
16:00:51 868  	  GIFT_CERTIFICATE
16:00:51 869  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:00:51 870  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 871  	WHERE
16:00:51 872  	  ROWNUM <= 100 AND
16:00:51 873  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id;
16:00:51 874  
16:00:51 875  EXCEPTION
16:00:51 876  WHEN BAD_GROUP_ID THEN
16:00:51 877  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 878  	  SPROC_NAME, 'No such account');
16:00:51 879  WHEN OTHERS THEN
16:00:51 880  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 881  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 882  END GET_ACCOUNT_GC_INVOICES;
16:00:51 883  
16:00:51 884  -- norlov: #38580
16:00:51 885  PROCEDURE GET_GC_INVOICE (
16:00:51 886  	in_group_id    IN  NUMBER,
16:00:51 887  	in_gc_code     IN  VARCHAR2,
16:00:51 888  	out_result_set OUT SYS_REFCURSOR
16:00:51 889  ) AS
16:00:51 890  SPROC_NAME     CONSTANT VARCHAR2(14) := 'GET_GC_INVOICE';
16:00:51 891  -- VARIABLES
16:00:51 892  var_account_id NUMBER;
16:00:51 893  -- EXCEPTIONS
16:00:51 894  BAD_GROUP_ID EXCEPTION;
16:00:51 895  BEGIN
16:00:51 896  	-- Get account id
16:00:51 897  	BEGIN
16:00:51 898  	  SELECT
16:00:51 899  	    ACCOUNT.ID into var_account_id
16:00:51 900  	  FROM
16:00:51 901  	    ACCOUNT
16:00:51 902  	  WHERE
16:00:51 903  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 904  	  EXCEPTION
16:00:51 905  	    WHEN NO_DATA_FOUND THEN
16:00:51 906  	      RAISE BAD_GROUP_ID;
16:00:51 907  	END;
16:00:51 908  
16:00:51 909  	-- Get invoice for the GC
16:00:51 910  	OPEN out_result_set FOR
16:00:51 911  	SELECT DISTINCT
16:00:51 912  	  INVOICE.ID as "INVOICE_ID",
16:00:51 913  	  INVOICE.CREATE_DATE,
16:00:51 914  	  INVOICE.INVOICE_STATUS_ID,
16:00:51 915  	  PROCS_INVOICE_V20.F_CALCULATE_INVOICE_AMOUNT(INVOICE.ID) as "AMOUNT",
16:00:51 916  	  OFFER_CHAIN.ID as "OFFER_CHAIN_ID",
16:00:51 917  	  OFFER_CHAIN.NAME as "OFFER_CHAIN_NAME",
16:00:51 918  	  NULL as "SUBSCRIPTION_ID",
16:00:51 919  	  GIFT_CERTIFICATE.CODE as "GC_CODE"
16:00:51 920  	FROM
16:00:51 921  	  GIFT_CERTIFICATE
16:00:51 922  	  INNER JOIN INVOICE ON GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = INVOICE.ID
16:00:51 923  	  INNER JOIN OFFER_CHAIN ON GIFT_CERTIFICATE.OFFER_CHAIN_ID = OFFER_CHAIN.ID
16:00:51 924  	WHERE
16:00:51 925  	  GIFT_CERTIFICATE.PURCHASER_GROUP_ID = in_group_id
16:00:51 926  	  AND GIFT_CERTIFICATE.CODE = in_gc_code;
16:00:51 927  
16:00:51 928  EXCEPTION
16:00:51 929  WHEN BAD_GROUP_ID THEN
16:00:51 930  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 931  	  SPROC_NAME, 'No such account');
16:00:51 932  WHEN OTHERS THEN
16:00:51 933  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 934  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 935  END GET_GC_INVOICE;
16:00:51 936  
16:00:51 937  PROCEDURE GET_ACCOUNT_PRODUCTS (
16:00:51 938  	in_group_id    IN  NUMBER,
16:00:51 939  	out_result_set OUT SYS_REFCURSOR
16:00:51 940  ) AS
16:00:51 941  SPROC_NAME     CONSTANT VARCHAR2(20) := 'GET_ACCOUNT_PRODUCTS';
16:00:51 942  -- VARIABLES
16:00:51 943  var_account_id NUMBER;
16:00:51 944  -- EXCEPTIONS
16:00:51 945  BAD_GROUP_ID EXCEPTION;
16:00:51 946  BEGIN
16:00:51 947  	-- Get account id
16:00:51 948  	BEGIN
16:00:51 949  	  SELECT
16:00:51 950  	    ACCOUNT.ID into var_account_id
16:00:51 951  	  FROM
16:00:51 952  	    ACCOUNT
16:00:51 953  	  WHERE
16:00:51 954  	    ACCOUNT.GROUP_ID = in_group_id;
16:00:51 955  	  EXCEPTION
16:00:51 956  	    WHEN NO_DATA_FOUND THEN
16:00:51 957  	      RAISE BAD_GROUP_ID;
16:00:51 958  	END;
16:00:51 959  
16:00:51 960  	OPEN out_result_set FOR
16:00:51 961  	SELECT DISTINCT
16:00:51 962  	  PRODUCT.ID,
16:00:51 963  	  PRODUCT.NAME
16:00:51 964  	FROM
16:00:51 965  	  PRODUCT
16:00:51 966  	WHERE
16:00:51 967  	  PRODUCT.ID IN (
16:00:51 968  	    SELECT DISTINCT
16:00:51 969  	      PRODUCT_OFFERING.PRODUCT_ID
16:00:51 970  	    FROM
16:00:51 971  	      PRODUCT_OFFERING
16:00:51 972  	    WHERE
16:00:51 973  	      PRODUCT_OFFERING.ID IN (
16:00:51 974  		SELECT DISTINCT
16:00:51 975  		  OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:51 976  		FROM
16:00:51 977  		  OFFER_PRODUCT_OFFERING
16:00:51 978  		WHERE
16:00:51 979  		  OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:51 980  		    SELECT DISTINCT
16:00:51 981  		      OFFER_OFFER_CHAIN.OFFER_ID
16:00:51 982  		    FROM
16:00:51 983  		      OFFER_OFFER_CHAIN
16:00:51 984  		    WHERE
16:00:51 985  		      OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
16:00:51 986  			SELECT DISTINCT
16:00:51 987  			  SUBSCRIPTION.OFFER_CHAIN_ID
16:00:51 988  			FROM
16:00:51 989  			  SUBSCRIPTION
16:00:51 990  			WHERE
16:00:51 991  			  SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 992  		      )
16:00:51 993  		  )
16:00:51 994  	      )
16:00:51 995  	  );
16:00:51 996  
16:00:51 997  EXCEPTION
16:00:51 998  WHEN BAD_GROUP_ID THEN
16:00:51 999  	PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1000  	   SPROC_NAME, 'No such account');
16:00:51 1001  WHEN OTHERS THEN
16:00:51 1002  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1003  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1004  END GET_ACCOUNT_PRODUCTS;
16:00:51 1005  
16:00:51 1006  PROCEDURE GET_ACCOUNT_PROD_OFFERRINGS (
16:00:51 1007  	 in_group_id IN NUMBER,
16:00:51 1008  	 out_result_set     OUT SYS_REFCURSOR
16:00:51 1009  ) AS
16:00:51 1010  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_ACCOUNT_PROD_OFFERRINGS';
16:00:51 1011  -- VARIABLES
16:00:51 1012  var_account_id NUMBER;
16:00:51 1013  -- EXCEPTIONS
16:00:51 1014  BAD_GROUP_ID EXCEPTION;
16:00:51 1015  BEGIN
16:00:51 1016  	  -- Get account id
16:00:51 1017  	 BEGIN
16:00:51 1018  	   SELECT
16:00:51 1019  	     ACCOUNT.ID into var_account_id
16:00:51 1020  	   FROM
16:00:51 1021  	     ACCOUNT
16:00:51 1022  	   WHERE
16:00:51 1023  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1024  	   EXCEPTION
16:00:51 1025  	     WHEN NO_DATA_FOUND THEN
16:00:51 1026  	       RAISE BAD_GROUP_ID;
16:00:51 1027  	 END;
16:00:51 1028  
16:00:51 1029  	 OPEN out_result_set FOR
16:00:51 1030  	 SELECT DISTINCT
16:00:51 1031  	   PRODUCT_OFFERING.ID,
16:00:51 1032  	   PRODUCT_OFFERING.PRODUCT_ID,
16:00:51 1033  	   PRODUCT_OFFERING.TAX_CATEGORY_ID,
16:00:51 1034  	   PRODUCT_OFFERING.UNIT_PRICE,
16:00:51 1035  	   PRODUCT_OFFERING.QUANTITY,
16:00:51 1036  	   PRODUCT_OFFERING.CREATE_DATE,
16:00:51 1037  	   PRODUCT_OFFERING.CREATED_BY,
16:00:51 1038  	   CAPABILITY.ID CAP_ID,
16:00:51 1039  	   CAPABILITY.CODE CAP_CODE,
16:00:51 1040  	   CAPABILITY.DESCRIPTION CAP_DESCRIPTION,
16:00:51 1041  	   CAPABILITY.SHAREABLE CAP_SHAREABLE
16:00:51 1042  	 FROM
16:00:51 1043  	   OFFER_PRODUCT_OFFERING
16:00:51 1044  	   INNER JOIN PRODUCT_OFFERING ON PRODUCT_OFFERING.ID = OFFER_PRODUCT_OFFERING.PRODUCT_OFFERING_ID
16:00:51 1045  	   INNER JOIN CAPABILITY ON PRODUCT_OFFERING.CAPABILITY_ID = CAPABILITY.ID
16:00:51 1046  	 WHERE
16:00:51 1047  	   OFFER_PRODUCT_OFFERING.OFFER_ID IN (
16:00:51 1048  	     SELECT DISTINCT
16:00:51 1049  	       OFFER_OFFER_CHAIN.OFFER_ID
16:00:51 1050  	     FROM
16:00:51 1051  	       OFFER_OFFER_CHAIN
16:00:51 1052  	     WHERE
16:00:51 1053  	       OFFER_OFFER_CHAIN.OFFER_CHAIN_ID IN (
16:00:51 1054  		 SELECT DISTINCT
16:00:51 1055  		   SUBSCRIPTION.OFFER_CHAIN_ID
16:00:51 1056  		 FROM
16:00:51 1057  		   SUBSCRIPTION
16:00:51 1058  		 WHERE
16:00:51 1059  		   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 1060  	       )
16:00:51 1061  	   );
16:00:51 1062  
16:00:51 1063  EXCEPTION
16:00:51 1064  WHEN BAD_GROUP_ID THEN
16:00:51 1065  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1066  	   SPROC_NAME, 'No such account');
16:00:51 1067  WHEN OTHERS THEN
16:00:51 1068  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1069  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1070  END GET_ACCOUNT_PROD_OFFERRINGS;
16:00:51 1071  
16:00:51 1072  PROCEDURE UPDATE_ACCOUNT_STATUS (
16:00:51 1073  	 in_account_id	      IN ACCOUNT.ID%TYPE,
16:00:51 1074  	 in_account_status_id IN ACCOUNT.ACCOUNT_STATUS_ID%TYPE,
16:00:51 1075  	 in_updated_by	      IN ACCOUNT.UPDATED_BY%TYPE
16:00:51 1076  ) AS
16:00:51 1077  SPROC_NAME CONSTANT VARCHAR2(21) := 'UPDATE_ACCOUNT_STATUS';
16:00:51 1078  -- EXCEPTIONS
16:00:51 1079  BAD_ACCOUNT_ID	      EXCEPTION;
16:00:51 1080  BAD_STATUS_ID	      EXCEPTION;
16:00:51 1081  EXCEPTION_MESSAGE      VARCHAR2(1024);
16:00:51 1082  BEGIN
16:00:51 1083  
16:00:51 1084  	 IF in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_ACTIVE
16:00:51 1085  	   AND in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_FROZEN
16:00:51 1086  	   AND in_account_status_id != GLOBAL_STATUSES_V20.ACCOUNT_DISABLED THEN
16:00:51 1087  	   RAISE BAD_STATUS_ID;
16:00:51 1088  	 END IF;
16:00:51 1089  
16:00:51 1090  	 PROCS_ACCOUNT_CRU_V20.UPDATE_ACCOUNT(
16:00:51 1091  	   in_account_id	=> in_account_id,
16:00:51 1092  	   in_account_status_id => in_account_status_id,
16:00:51 1093  	   in_updated_by	=> in_updated_by
16:00:51 1094  	 );
16:00:51 1095  
16:00:51 1096  	 IF SQL%ROWCOUNT = 0 THEN
16:00:51 1097  	   RAISE BAD_ACCOUNT_ID;
16:00:51 1098  	 END IF;
16:00:51 1099  
16:00:51 1100  EXCEPTION
16:00:51 1101  WHEN BAD_ACCOUNT_ID THEN
16:00:51 1102  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1103  	   SPROC_NAME, 'No such account');
16:00:51 1104  WHEN BAD_STATUS_ID THEN
16:00:51 1105  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1106  	   SPROC_NAME, 'Bad status id');
16:00:51 1107  WHEN OTHERS THEN
16:00:51 1108  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1109  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1110  END UPDATE_ACCOUNT_STATUS;
16:00:51 1111  
16:00:51 1112  PROCEDURE GET_NEEDS_ENTTL_LICENSES_NUM (
16:00:51 1113  	 in_group_id	  IN ACCOUNT.GROUP_ID%TYPE,
16:00:51 1114  	 out_licenses_num OUT NUMBER
16:00:51 1115  ) AS
16:00:51 1116  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_NEEDS_ENTTL_LICENSES_NUM';
16:00:51 1117  -- VARIABLES
16:00:51 1118  var_account_id	  ACCOUNT.GROUP_ID%TYPE;
16:00:51 1119  -- EXCEPTIONS
16:00:51 1120  BAD_ACCOUNT_ID EXCEPTION;
16:00:51 1121  BEGIN
16:00:51 1122  
16:00:51 1123  	 BEGIN
16:00:51 1124  	   SELECT
16:00:51 1125  	     ACCOUNT.ID into var_account_id
16:00:51 1126  	   FROM
16:00:51 1127  	     ACCOUNT
16:00:51 1128  	   WHERE
16:00:51 1129  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1130  	   EXCEPTION
16:00:51 1131  	     WHEN NO_DATA_FOUND THEN
16:00:51 1132  	       RAISE BAD_ACCOUNT_ID;
16:00:51 1133  	 END;
16:00:51 1134  
16:00:51 1135  	 SELECT
16:00:51 1136  	   COUNT(LICENSE.ID) into out_licenses_num
16:00:51 1137  	 FROM
16:00:51 1138  	   LICENSE
16:00:51 1139  	   INNER JOIN SUBSCRIPTION ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 1140  	 WHERE
16:00:51 1141  	   SUBSCRIPTION.ACCOUNT_ID = var_account_id
16:00:51 1142  	   AND LICENSE.NEEDS_ENTITLEMENTS = GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 1143  
16:00:51 1144  EXCEPTION
16:00:51 1145  WHEN BAD_ACCOUNT_ID THEN
16:00:51 1146  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1147  	   SPROC_NAME, 'No such group id');
16:00:51 1148  WHEN OTHERS THEN
16:00:51 1149  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1150  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1151  END GET_NEEDS_ENTTL_LICENSES_NUM;
16:00:51 1152  
16:00:51 1153  PROCEDURE SET_TAX_EXEMPT (
16:00:51 1154  	 in_group_id  IN NUMBER,
16:00:51 1155  	 in_exempt_id IN VARCHAR2
16:00:51 1156  ) AS
16:00:51 1157  SPROC_NAME CONSTANT VARCHAR2(14) := 'SET_TAX_EXEMPT';
16:00:51 1158  -- VARIABLES
16:00:51 1159  var_account_id NUMBER;
16:00:51 1160  -- EXCEPTIONS
16:00:51 1161  BAD_GROUP_ID EXCEPTION;
16:00:51 1162  BEGIN
16:00:51 1163  
16:00:51 1164  	 BEGIN
16:00:51 1165  	   SELECT
16:00:51 1166  	     ACCOUNT.ID into var_account_id
16:00:51 1167  	   FROM
16:00:51 1168  	     ACCOUNT
16:00:51 1169  	   WHERE
16:00:51 1170  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1171  	   EXCEPTION
16:00:51 1172  	     WHEN NO_DATA_FOUND THEN
16:00:51 1173  	       RAISE BAD_GROUP_ID;
16:00:51 1174  	 END;
16:00:51 1175  
16:00:51 1176  	 UPDATE
16:00:51 1177  	   ACCOUNT
16:00:51 1178  	 SET
16:00:51 1179  	   ACCOUNT.TAX_EXEMPT_ID = in_exempt_id
16:00:51 1180  	 WHERE
16:00:51 1181  	   ACCOUNT.ID = var_account_id;
16:00:51 1182  
16:00:51 1183  EXCEPTION
16:00:51 1184  WHEN BAD_GROUP_ID THEN
16:00:51 1185  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1186  	   SPROC_NAME, 'No such group id');
16:00:51 1187  WHEN OTHERS THEN
16:00:51 1188  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1189  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1190  END SET_TAX_EXEMPT;
16:00:51 1191  
16:00:51 1192  PROCEDURE IS_TAX_EXEMPT (
16:00:51 1193  	 in_group_id	   IN NUMBER,
16:00:51 1194  	 out_is_tax_exempt OUT NUMBER
16:00:51 1195  ) AS
16:00:51 1196  SPROC_NAME CONSTANT VARCHAR2(13) := 'IS_TAX_EXEMPT';
16:00:51 1197  -- VARIABLES
16:00:51 1198  var_is_tax_exempt ACCOUNT.TAX_EXEMPT_ID%TYPE;
16:00:51 1199  -- EXCEPTIONS
16:00:51 1200  BAD_GROUP_ID EXCEPTION;
16:00:51 1201  BEGIN
16:00:51 1202  
16:00:51 1203  	 BEGIN
16:00:51 1204  	   SELECT
16:00:51 1205  	     ACCOUNT.TAX_EXEMPT_ID into var_is_tax_exempt
16:00:51 1206  	   FROM
16:00:51 1207  	     ACCOUNT
16:00:51 1208  	   WHERE
16:00:51 1209  	     ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1210  	   EXCEPTION
16:00:51 1211  	     WHEN NO_DATA_FOUND THEN
16:00:51 1212  	       RAISE BAD_GROUP_ID;
16:00:51 1213  	 END;
16:00:51 1214  
16:00:51 1215  	 IF var_is_tax_exempt IS NULL THEN
16:00:51 1216  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.FALSE;
16:00:51 1217  	 ELSE
16:00:51 1218  	   out_is_tax_exempt := GLOBAL_CONSTANTS_V20.TRUE;
16:00:51 1219  	 END IF;
16:00:51 1220  
16:00:51 1221  EXCEPTION
16:00:51 1222  WHEN BAD_GROUP_ID THEN
16:00:51 1223  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1224  	   SPROC_NAME, 'No such group id');
16:00:51 1225  WHEN OTHERS THEN
16:00:51 1226  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1227  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1228  END IS_TAX_EXEMPT;
16:00:51 1229  
16:00:51 1230  PROCEDURE GET_GROUP_ID_BY_ACCOUNT_ID (
16:00:51 1231  	 in_account_id IN NUMBER,
16:00:51 1232  	 out_group_id  OUT NUMBER
16:00:51 1233  ) AS
16:00:51 1234  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_GROUP_ID_BY_ACCOUNT_ID';
16:00:51 1235  BEGIN
16:00:51 1236  
16:00:51 1237  	 SELECT
16:00:51 1238  	   ACCOUNT.GROUP_ID into out_group_id
16:00:51 1239  	 FROM
16:00:51 1240  	   ACCOUNT
16:00:51 1241  	 WHERE
16:00:51 1242  	   ACCOUNT.ID = in_account_id;
16:00:51 1243  
16:00:51 1244  EXCEPTION
16:00:51 1245  WHEN NO_DATA_FOUND THEN
16:00:51 1246  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1247  	   SPROC_NAME, 'No such account');
16:00:51 1248  WHEN OTHERS THEN
16:00:51 1249  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1250  	   SPROC_NAME, 'Unknown error');
16:00:51 1251  END GET_GROUP_ID_BY_ACCOUNT_ID;
16:00:51 1252  
16:00:51 1253  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:51 1254  	 in_group_id IN NUMBER,
16:00:51 1255  	 out_account_id  OUT NUMBER
16:00:51 1256  ) AS
16:00:51 1257  SPROC_NAME CONSTANT VARCHAR2(26) := 'GET_ACCOUNT_ID_BY_GROUP_ID';
16:00:51 1258  BEGIN
16:00:51 1259  
16:00:51 1260  	 SELECT
16:00:51 1261  	   ACCOUNT.ID into out_account_id
16:00:51 1262  	 FROM
16:00:51 1263  	   ACCOUNT
16:00:51 1264  	 WHERE
16:00:51 1265  	   ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1266  
16:00:51 1267  EXCEPTION
16:00:51 1268  WHEN NO_DATA_FOUND THEN
16:00:51 1269  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1270  	   SPROC_NAME, 'No such account');
16:00:51 1271  WHEN OTHERS THEN
16:00:51 1272  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1273  	   SPROC_NAME, 'Unknown error');
16:00:51 1274  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:00:51 1275  
16:00:51 1276  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:00:51 1277  	 in_invoice_id IN NUMBER,
16:00:51 1278  	 out_group_ids OUT SYS_REFCURSOR
16:00:51 1279  ) AS
16:00:51 1280  SPROC_NAME CONSTANT VARCHAR2(27) := 'GET_GROUPS_ID_BY_INVOICE_ID';
16:00:51 1281  -- VARIABLES
16:00:51 1282  temp_invoice_id		 NUMBER;
16:00:51 1283  var_subscrib_group_id	 NUMBER;
16:00:51 1284  var_gc_purchaser_group_id NUMBER;
16:00:51 1285  var_gc_redeemer_group_id  NUMBER;
16:00:51 1286  -- EXCEPTIONS
16:00:51 1287  BAD_INVOICE_ID	    EXCEPTION;
16:00:51 1288  CAN_NOT_FIND_ACCOUNT EXCEPTION;
16:00:51 1289  BEGIN
16:00:51 1290  
16:00:51 1291  	 BEGIN
16:00:51 1292  	   SELECT
16:00:51 1293  	     INVOICE.ID into temp_invoice_id
16:00:51 1294  	   FROM
16:00:51 1295  	     INVOICE
16:00:51 1296  	   WHERE
16:00:51 1297  	     INVOICE.ID = in_invoice_id;
16:00:51 1298  	   EXCEPTION
16:00:51 1299  	     WHEN NO_DATA_FOUND THEN
16:00:51 1300  	       RAISE BAD_INVOICE_ID;
16:00:51 1301  	 END;
16:00:51 1302  
16:00:51 1303  	 BEGIN
16:00:51 1304  	   SELECT DISTINCT
16:00:51 1305  	     ACCOUNT.GROUP_ID into var_subscrib_group_id
16:00:51 1306  	   FROM
16:00:51 1307  	     ACCOUNT
16:00:51 1308  	     INNER JOIN SUBSCRIPTION ON SUBSCRIPTION.ACCOUNT_ID = ACCOUNT.ID
16:00:51 1309  	     INNER JOIN LICENSE ON LICENSE.SUBSCRIPTION_ID = SUBSCRIPTION.ID
16:00:51 1310  	   WHERE
16:00:51 1311  	     LICENSE.INVOICE_ID = in_invoice_id;
16:00:51 1312  	   EXCEPTION
16:00:51 1313  	     WHEN NO_DATA_FOUND THEN
16:00:51 1314  	       var_subscrib_group_id := NULL;
16:00:51 1315  	 END;
16:00:51 1316  
16:00:51 1317  	 IF var_subscrib_group_id IS NULL THEN
16:00:51 1318  	   BEGIN
16:00:51 1319  	     SELECT
16:00:51 1320  	       GIFT_CERTIFICATE.PURCHASER_GROUP_ID,
16:00:51 1321  	       GIFT_CERTIFICATE.REDEEMER_GROUP_ID
16:00:51 1322  	       into
16:00:51 1323  	       var_gc_purchaser_group_id,
16:00:51 1324  	       var_gc_redeemer_group_id
16:00:51 1325  	     FROM
16:00:51 1326  	       GIFT_CERTIFICATE
16:00:51 1327  	     WHERE
16:00:51 1328  	       GIFT_CERTIFICATE.PURCHASE_INVOICE_ID = in_invoice_id
16:00:51 1329  	       OR GIFT_CERTIFICATE.FINALIZED_INVOICE_ID = in_invoice_id;
16:00:51 1330  	     EXCEPTION
16:00:51 1331  	       WHEN NO_DATA_FOUND THEN
16:00:51 1332  		 var_gc_purchaser_group_id := NULL;
16:00:51 1333  		 var_gc_redeemer_group_id  := NULL;
16:00:51 1334  	   END;
16:00:51 1335  	 END IF;
16:00:51 1336  
16:00:51 1337  	 IF var_subscrib_group_id IS NULL
16:00:51 1338  	   AND var_gc_purchaser_group_id IS NULL
16:00:51 1339  	   AND var_gc_redeemer_group_id IS NULL THEN
16:00:51 1340  	     RAISE CAN_NOT_FIND_ACCOUNT;
16:00:51 1341  	 END IF;
16:00:51 1342  
16:00:51 1343  	 OPEN out_group_ids FOR
16:00:51 1344  	 SELECT GROUP_ID FROM (
16:00:51 1345  	   SELECT
16:00:51 1346  	     var_subscrib_group_id as "GROUP_ID"
16:00:51 1347  	   FROM
16:00:51 1348  	     DUAL
16:00:51 1349  	   UNION
16:00:51 1350  	   SELECT
16:00:51 1351  	     var_gc_purchaser_group_id as "GROUP_ID"
16:00:51 1352  	   FROM
16:00:51 1353  	     DUAL
16:00:51 1354  	   UNION
16:00:51 1355  	   SELECT
16:00:51 1356  	     var_gc_redeemer_group_id as "GROUP_ID"
16:00:51 1357  	   FROM
16:00:51 1358  	     DUAL
16:00:51 1359  	 )
16:00:51 1360  	 WHERE
16:00:51 1361  	   GROUP_ID IS NOT NULL;
16:00:51 1362  
16:00:51 1363  EXCEPTION
16:00:51 1364  WHEN BAD_INVOICE_ID THEN
16:00:51 1365  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1366  	   SPROC_NAME, 'No such invoice');
16:00:51 1367  WHEN CAN_NOT_FIND_ACCOUNT THEN
16:00:51 1368  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1369  	   SPROC_NAME, 'Could not find account for given invoice');
16:00:51 1370  WHEN OTHERS THEN
16:00:51 1371  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1372  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1373  END GET_GROUPS_ID_BY_INVOICE_ID;
16:00:51 1374  
16:00:51 1375  PROCEDURE GET_ACCOUNT_TAX_EXEMPT_ID (
16:00:51 1376  	 in_group_id	   IN NUMBER,
16:00:51 1377  	 out_tax_exempt_id OUT VARCHAR2
16:00:51 1378  ) AS
16:00:51 1379  SPROC_NAME CONSTANT VARCHAR2(25) := 'GET_ACCOUNT_TAX_EXEMPT_ID';
16:00:51 1380  -- VARIABLES
16:00:51 1381  -- EXCEPTIONS
16:00:51 1382  BEGIN
16:00:51 1383  
16:00:51 1384  	 SELECT
16:00:51 1385  	   ACCOUNT.TAX_EXEMPT_ID into out_tax_exempt_id
16:00:51 1386  	 FROM
16:00:51 1387  	   ACCOUNT
16:00:51 1388  	 WHERE
16:00:51 1389  	   ACCOUNT.GROUP_ID = in_group_id;
16:00:51 1390  
16:00:51 1391  EXCEPTION
16:00:51 1392  WHEN NO_DATA_FOUND THEN
16:00:51 1393  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1394  	   SPROC_NAME, 'No such account');
16:00:51 1395  WHEN OTHERS THEN
16:00:51 1396  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1397  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1398  END GET_ACCOUNT_TAX_EXEMPT_ID;
16:00:51 1399  
16:00:51 1400  PROCEDURE GET_UPGRADABLE_SUBSCRIPTIONS (
16:00:51 1401  	 in_group_id	IN NUMBER,
16:00:51 1402  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1403  ) AS
16:00:51 1404  SPROC_NAME CONSTANT VARCHAR2(28) := 'GET_UPGRADABLE_SUBSCRIPTIONS';
16:00:51 1405  -- Variables
16:00:51 1406  var_account_id NUMBER;
16:00:51 1407  -- Exceptions
16:00:51 1408  BAD_GROUP_ID   EXCEPTION;
16:00:51 1409  BEGIN
16:00:51 1410  
16:00:51 1411  	 BEGIN
16:00:51 1412  	   SELECT
16:00:51 1413  	     ID into var_account_id
16:00:51 1414  	   FROM
16:00:51 1415  	     ACCOUNT
16:00:51 1416  	   WHERE
16:00:51 1417  	     GROUP_ID = in_group_id;
16:00:51 1418  	   EXCEPTION
16:00:51 1419  	     WHEN NO_DATA_FOUND THEN
16:00:51 1420  	       RAISE BAD_GROUP_ID;
16:00:51 1421  	 END;
16:00:51 1422  
16:00:51 1423  	 OPEN out_result_set FOR
16:00:51 1424  	 SELECT
16:00:51 1425  	   S.ID as SUBSCRIPTION_ID,
16:00:51 1426  	   OCHMD.OFFER_CHAIN_ID
16:00:51 1427  	 FROM
16:00:51 1428  	   SUBSCRIPTION S
16:00:51 1429  	   INNER JOIN OFFER_CHAIN OCH ON OCH.ID = S.OFFER_CHAIN_ID
16:00:51 1430  	   INNER JOIN OFFER_CHAIN_META_DATA OCHMD ON (OCHMD.NAME = GLOBAL_CONSTANTS_V20.OCMD_UPGRADABLE_OFFER_CHAIN_ID AND TO_NUMBER(OCHMD.VALUE) = OCH.ID)
16:00:51 1431  	 WHERE
16:00:51 1432  	   S.ACCOUNT_ID = var_account_id;
16:00:51 1433  
16:00:51 1434  EXCEPTION
16:00:51 1435  WHEN BAD_GROUP_ID THEN
16:00:51 1436  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1437  	   SPROC_NAME, 'No such account');
16:00:51 1438  WHEN OTHERS THEN
16:00:51 1439  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1440  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1441  END GET_UPGRADABLE_SUBSCRIPTIONS;
16:00:51 1442  
16:00:51 1443  PROCEDURE GET_USR_ALL_SBSCR_IDS (
16:00:51 1444  	 in_group_id	    IN NUMBER,
16:00:51 1445  	 out_result_set     OUT SYS_REFCURSOR
16:00:51 1446  ) AS
16:00:51 1447  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_USR_ALL_SBSCR_IDS';
16:00:51 1448  -- VARIABLES
16:00:51 1449  var_account_id NUMBER;
16:00:51 1450  -- EXCEPTIONS
16:00:51 1451  BAD_GROUP_ID EXCEPTION;
16:00:51 1452  BEGIN
16:00:51 1453  
16:00:51 1454  	 BEGIN
16:00:51 1455  	   SELECT
16:00:51 1456  	     A.ID INTO var_account_id
16:00:51 1457  	   FROM
16:00:51 1458  	     ACCOUNT A
16:00:51 1459  	   WHERE
16:00:51 1460  	     A.GROUP_ID = in_group_id;
16:00:51 1461  	   EXCEPTION
16:00:51 1462  	     WHEN NO_DATA_FOUND THEN
16:00:51 1463  	       RAISE BAD_GROUP_ID;
16:00:51 1464  	 END;
16:00:51 1465  
16:00:51 1466  	 OPEN out_result_set FOR
16:00:51 1467  	 SELECT
16:00:51 1468  	   S.ID
16:00:51 1469  	 FROM
16:00:51 1470  	   SUBSCRIPTION S
16:00:51 1471  	 WHERE
16:00:51 1472  	   S.ACCOUNT_ID = var_account_id
16:00:51 1473  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
16:00:51 1474  
16:00:51 1475  EXCEPTION
16:00:51 1476  WHEN BAD_GROUP_ID THEN
16:00:51 1477  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1478  	   SPROC_NAME, 'No such account');
16:00:51 1479  WHEN OTHERS THEN
16:00:51 1480  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1481  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1482  END GET_USR_ALL_SBSCR_IDS;
16:00:51 1483  
16:00:51 1484  PROCEDURE GET_USR_SBSCR_IDS_BY_OFFCH_IDS (
16:00:51 1485  	 in_group_id	    IN NUMBER,
16:00:51 1486  	 in_offer_chain_ids IN core_owner.NUMBER_TABLE,
16:00:51 1487  	 out_result_set     OUT SYS_REFCURSOR
16:00:51 1488  ) AS
16:00:51 1489  SPROC_NAME CONSTANT VARCHAR2(30) := 'GET_USR_SBSCR_IDS_BY_OFFCH_IDS';
16:00:51 1490  -- VARIABLES
16:00:51 1491  var_account_id NUMBER;
16:00:51 1492  -- EXCEPTIONS
16:00:51 1493  BAD_GROUP_ID	   EXCEPTION;
16:00:51 1494  BAD_OFFER_CHAIN_IDS EXCEPTION;
16:00:51 1495  BEGIN
16:00:51 1496  
16:00:51 1497  	 IF in_offer_chain_ids IS NULL THEN
16:00:51 1498  	   RAISE BAD_OFFER_CHAIN_IDS;
16:00:51 1499  	 END IF;
16:00:51 1500  
16:00:51 1501  	 BEGIN
16:00:51 1502  	   SELECT
16:00:51 1503  	     A.ID INTO var_account_id
16:00:51 1504  	   FROM
16:00:51 1505  	     ACCOUNT A
16:00:51 1506  	   WHERE
16:00:51 1507  	     A.GROUP_ID = in_group_id;
16:00:51 1508  	   EXCEPTION
16:00:51 1509  	     WHEN NO_DATA_FOUND THEN
16:00:51 1510  	       RAISE BAD_GROUP_ID;
16:00:51 1511  	 END;
16:00:51 1512  
16:00:51 1513  	 OPEN out_result_set FOR
16:00:51 1514  	 SELECT
16:00:51 1515  	   S.ID
16:00:51 1516  	 FROM
16:00:51 1517  	   SUBSCRIPTION S
16:00:51 1518  	 WHERE
16:00:51 1519  	   S.ACCOUNT_ID = var_account_id
16:00:51 1520  	   AND S.OFFER_CHAIN_ID IN (SELECT * FROM TABLE(in_offer_chain_ids))
16:00:51 1521  	   AND S.SUBSCRIPTION_STATUS_ID = GLOBAL_STATUSES_V20.SUBSCRIPTION_ACTIVE;
16:00:51 1522  
16:00:51 1523  EXCEPTION
16:00:51 1524  WHEN BAD_OFFER_CHAIN_IDS THEN
16:00:51 1525  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.INVALID_PARAMETER,
16:00:51 1526  	   SPROC_NAME, 'Offer chains ids parameter is null');
16:00:51 1527  WHEN BAD_GROUP_ID THEN
16:00:51 1528  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:51 1529  	   SPROC_NAME, 'No such account');
16:00:51 1530  WHEN OTHERS THEN
16:00:51 1531  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1532  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1533  END GET_USR_SBSCR_IDS_BY_OFFCH_IDS;
16:00:51 1534  
16:00:51 1535  PROCEDURE GET_GROUP_IDS_BY_CC_INFO (
16:00:51 1536  	 in_last_four_cc IN CREDIT_CARD.LAST_FOUR_CC%TYPE,
16:00:51 1537  	 in_expiration_date IN DATE,
16:00:51 1538  	 in_country IN CREDIT_CARD.COUNTRY%TYPE DEFAULT NULL,
16:00:51 1539  	 in_postal_code IN CREDIT_CARD.POSTAL_CODE%TYPE DEFAULT NULL,
16:00:51 1540  	 in_city IN CREDIT_CARD.CITY%TYPE DEFAULT NULL,
16:00:51 1541  	 in_state IN CREDIT_CARD.STATE%TYPE DEFAULT NULL,
16:00:51 1542  	 in_credit_card_type_id IN CREDIT_CARD.CREDIT_CARD_TYPE_ID%TYPE DEFAULT NULL,
16:00:51 1543  	 in_credit_card_status_id IN CREDIT_CARD.CREDIT_CARD_STATUS_ID%TYPE DEFAULT NULL,
16:00:51 1544  	 in_lower_bound IN NUMBER DEFAULT 1,
16:00:51 1545  	 in_upper_bound IN NUMBER DEFAULT 11,
16:00:51 1546  	 out_result_set OUT SYS_REFCURSOR
16:00:51 1547  ) AS
16:00:51 1548  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_GROUP_IDS_BY_CC_INFO';
16:00:51 1549  BEGIN
16:00:51 1550  
16:00:51 1551  	 OPEN out_result_set FOR
16:00:51 1552  	     SELECT
16:00:51 1553  	       distinct /*+ first_rows(in_upper_bound-in_lower_bound) */ a.GROUP_ID GROUP_ID
16:00:51 1554  	     FROM
16:00:51 1555  	       account a,
16:00:51 1556  	       credit_card cc
16:00:51 1557  	     WHERE
16:00:51 1558  	       cc.expiration_date = in_expiration_date and
16:00:51 1559  	       cc.last_four_cc = in_last_four_cc and
16:00:51 1560  	       upper(cc.postal_code) = upper(nvl(in_postal_code, cc.postal_code)) and
16:00:51 1561  	       upper(cc.city) = upper(nvl(in_city, cc.city)) and
16:00:51 1562  	       upper(cc.state) = upper(nvl(in_state, cc.state)) and
16:00:51 1563  	       upper(cc.country) = upper(nvl(in_country, cc.country)) and
16:00:51 1564  	       cc.credit_card_status_id = nvl(in_credit_card_status_id, cc.credit_card_status_id) and
16:00:51 1565  	       cc.credit_card_type_id = nvl(in_credit_card_type_id, cc.credit_card_type_id) and
16:00:51 1566  	       a.id = cc.account_id and
16:00:51 1567  	       rownum >= in_lower_bound and
16:00:51 1568  	       rownum <= in_upper_bound
16:00:51 1569  	   ;
16:00:51 1570  
16:00:51 1571  EXCEPTION
16:00:51 1572  WHEN OTHERS THEN
16:00:51 1573  	 PROCS_COMMON_V20.THROW_EXCEPTION(APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:51 1574  	   SPROC_NAME, 'Unknown error', SQLERRM);
16:00:51 1575  END GET_GROUP_IDS_BY_CC_INFO;
16:00:51 1576  
16:00:51 1577  END PROCS_ACCOUNT_V20;
16:00:51 1578  .
16:00:51 SQL> /

Package body created.

Elapsed: 00:00:00.12
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_PROCESS_RETRY_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE LOG_RETRY(
16:00:52   4  	  in_process_name IN VARCHAR2,
16:00:52   5  	  in_generic_id   IN NUMBER,
16:00:52   6  	  in_date	  IN VARCHAR2,
16:00:52   7  	  out_success	   OUT NUMBER
16:00:52   8  ) AS
16:00:52   9  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V20';
16:00:52  10  BEGIN
16:00:52  11  
16:00:52  12  	out_success := 1;
16:00:52  13  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
16:00:52  14  	VALUES (in_process_name, in_generic_id, 1, to_date(in_date, 'DD-Mon-YYYY HH24:MI:SS'), sysdate);
16:00:52  15  	commit;
16:00:52  16  EXCEPTION
16:00:52  17  WHEN DUP_VAL_ON_INDEX THEN
16:00:52  18  	rollback;
16:00:52  19  	out_success := 0;
16:00:52  20  WHEN OTHERS THEN
16:00:52  21  	rollback;
16:00:52  22  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52  23  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52  24  
16:00:52  25  END;
16:00:52  26  
16:00:52  27  PROCEDURE LOG_RETRY_DATE(
16:00:52  28  	  in_process_name IN VARCHAR2,
16:00:52  29  	  in_generic_id   IN NUMBER,
16:00:52  30  	  in_date	  IN DATE,
16:00:52  31  	  out_success	   OUT NUMBER
16:00:52  32  ) AS
16:00:52  33  SPROC_NAME CONSTANT VARCHAR2(32) := 'PROCS_PROCESS_RETRY_V20';
16:00:52  34  BEGIN
16:00:52  35  
16:00:52  36  	out_success := 1;
16:00:52  37  	INSERT into PROCESS_RETRY_THROTTLE(process_name, generic_id, RETRY_count, create_date, update_date)
16:00:52  38  	VALUES (in_process_name, in_generic_id, 1, in_date, sysdate);
16:00:52  39  	commit;
16:00:52  40  EXCEPTION
16:00:52  41  WHEN DUP_VAL_ON_INDEX THEN
16:00:52  42  	rollback;
16:00:52  43  	out_success := 0;
16:00:52  44  WHEN OTHERS THEN
16:00:52  45  	rollback;
16:00:52  46  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52  47  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52  48  
16:00:52  49  END;
16:00:52  50  
16:00:52  51  PROCEDURE DELETE_RETRY(
16:00:52  52  	  in_process_name IN VARCHAR2,
16:00:52  53  	  in_remove_minutes  IN NUMBER
16:00:52  54  ) AS
16:00:52  55  BEGIN
16:00:52  56  
16:00:52  57  delete from PROCESS_RETRY_THROTTLE
16:00:52  58  where
16:00:52  59  	process_name = in_process_name and
16:00:52  60  	create_date <= sysdate-in_remove_minutes/1440;
16:00:52  61  commit;
16:00:52  62  END;
16:00:52  63  
16:00:52  64  PROCEDURE GET_SYSDATE (
16:00:52  65  	out_date  OUT VARCHAR2
16:00:52  66  ) AS
16:00:52  67  BEGIN
16:00:52  68  	SELECT to_char(SYSDATE, 'DD-Mon-YYYY HH24:MI:SS') into out_date from dual;
16:00:52  69  END;
16:00:52  70  
16:00:52  71  END PROCS_PROCESS_RETRY_V20;
16:00:52  72  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.03
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PROCS_NOTIFICATION_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
16:00:52   4  /*
16:00:52   5  Throws exceptions:
16:00:52   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52   8  */
16:00:52   9  	in_notification_type_name IN VARCHAR2,
16:00:52  10  	out_notification_type_id  OUT NUMBER
16:00:52  11  ) AS
16:00:52  12  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_NOTIFICATION_TYPE_BY_NAME';
16:00:52  13  BEGIN
16:00:52  14  	SELECT
16:00:52  15  	  NOTIFICATION_TYPE.ID into out_notification_type_id
16:00:52  16  	FROM
16:00:52  17  	  NOTIFICATION_TYPE
16:00:52  18  	WHERE
16:00:52  19  	  NOTIFICATION_TYPE.VALUE = in_notification_type_name;
16:00:52  20  EXCEPTION
16:00:52  21  WHEN NO_DATA_FOUND THEN
16:00:52  22  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52  23  	  SPROC_NAME, 'No such type');
16:00:52  24  WHEN OTHERS THEN
16:00:52  25  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52  26  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52  27  END GET_NOTIFICATION_TYPE_BY_NAME;
16:00:52  28  
16:00:52  29  /******************************************************************/
16:00:52  30  
16:00:52  31  PROCEDURE ADD_NOTIFICATION (
16:00:52  32  /*
16:00:52  33  Throws exceptions:
16:00:52  34  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  35  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  36  */
16:00:52  37  	in_sender_account_id	 IN NUMBER DEFAULT 0,
16:00:52  38  	in_recipient_group_id	 IN NUMBER,
16:00:52  39  	in_notification_type_id  IN NUMBER,
16:00:52  40  	in_date_to_notify	 IN DATE,
16:00:52  41  	in_email_template_params IN CLOB
16:00:52  42  ) AS
16:00:52  43  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION';
16:00:52  44  -- VARIABLES
16:00:52  45  temp_type_count NUMBER;
16:00:52  46  var_create_date DATE := SYSDATE;
16:00:52  47  -- EXCEPTIONS
16:00:52  48  BAD_NOTIFICATION_TYPE_ID EXCEPTION;
16:00:52  49  CAN_NOT_CREATE_HISTORY   EXCEPTION;
16:00:52  50  EXCEPTION_MESSAGE        VARCHAR2(1024);
16:00:52  51  BEGIN
16:00:52  52  
16:00:52  53  	SELECT
16:00:52  54  	  COUNT(*) into temp_type_count
16:00:52  55  	FROM
16:00:52  56  	  NOTIFICATION_TYPE
16:00:52  57  	WHERE
16:00:52  58  	  NOTIFICATION_TYPE.ID = in_notification_type_id;
16:00:52  59  
16:00:52  60  	IF temp_type_count = 0 THEN
16:00:52  61  	  RAISE BAD_NOTIFICATION_TYPE_ID;
16:00:52  62  	END IF;
16:00:52  63  
16:00:52  64  	INSERT INTO NOTIFICATION (
16:00:52  65  	  ID,
16:00:52  66  	  ACCOUNT_ID,
16:00:52  67  	  GROUP_ID,
16:00:52  68  	  NOTIFICATION_TYPE_ID,
16:00:52  69  	  NOTIFICATION_STATUS_ID,
16:00:52  70  	  EMAIL_TEMPLATE_PARAMS,
16:00:52  71  	  UPDATE_DATE,
16:00:52  72  	  CREATE_DATE,
16:00:52  73  	  DATE_TO_NOTIFY
16:00:52  74  	) VALUES (
16:00:52  75  	  NOT_ID_SEQ.nextVal,
16:00:52  76  	  in_sender_account_id,
16:00:52  77  	  in_recipient_group_id,
16:00:52  78  	  in_notification_type_id,
16:00:52  79  	  NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING,
16:00:52  80  	  in_email_template_params,
16:00:52  81  	  var_create_date,
16:00:52  82  	  var_create_date,
16:00:52  83  	  in_date_to_notify
16:00:52  84  	);
16:00:52  85  
16:00:52  86  	--BEGIN
16:00:52  87  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V20.CREATE_NOTIFICATION_HISTORY (
16:00:52  88  	--    in_account_id		  => 0, -- ACCOUNT_ID. Can we delete it?
16:00:52  89  	--    in_group_id		  => in_recipient_group_id,
16:00:52  90  	--    notification_reason_type_id => in_notification_type_id,
16:00:52  91  	--    notification_status_id	  => NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING,
16:00:52  92  	--    email_template_params	  => in_email_template_params,
16:00:52  93  	--    in_create_date		  => var_create_date
16:00:52  94  	--  );
16:00:52  95  	--  EXCEPTION
16:00:52  96  	--    WHEN OTHERS THEN
16:00:52  97  	--	EXCEPTION_MESSAGE := SQLERRM;
16:00:52  98  	--	RAISE CAN_NOT_CREATE_HISTORY;
16:00:52  99  	--END;
16:00:52 100  
16:00:52 101  EXCEPTION
16:00:52 102  WHEN BAD_NOTIFICATION_TYPE_ID THEN
16:00:52 103  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 104  	  SPROC_NAME, 'No such notification status');
16:00:52 105  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:52 106  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:52 107  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:52 108  WHEN OTHERS THEN
16:00:52 109  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 110  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 111  END ADD_NOTIFICATION;
16:00:52 112  
16:00:52 113  /******************************************************************************/
16:00:52 114  
16:00:52 115  PROCEDURE GET_PENDING_NOTIFICATIONS (
16:00:52 116  /*
16:00:52 117  Throws exceptions:
16:00:52 118  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 119  */
16:00:52 120  	out_result_set OUT SYS_REFCURSOR
16:00:52 121  ) AS
16:00:52 122  SPROC_NAME CONSTANT VARCHAR2(32) := 'GET_PENDING_NOTIFICATIONS';
16:00:52 123  -- CONSTANTS
16:00:52 124  C_NOTIFICATION_COUNT_LIMIT CONSTANT NUMBER := 500;
16:00:52 125  BEGIN
16:00:52 126  	OPEN out_result_set FOR
16:00:52 127  SELECT * FROM
16:00:52 128  (
16:00:52 129  	SELECT
16:00:52 130  	  NOTIFICATION.ID
16:00:52 131  	FROM
16:00:52 132  	  NOTIFICATION
16:00:52 133  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
16:00:52 134  	WHERE
16:00:52 135  	  ROWNUM <= C_NOTIFICATION_COUNT_LIMIT*10
16:00:52 136  	  AND NOT EXISTS (
16:00:52 137  	    SELECT NULL
16:00:52 138  	    FROM PROCESS_RETRY_THROTTLE
16:00:52 139  	    WHERE GENERIC_ID = NOTIFICATION.ID AND PROCESS_NAME = SPROC_NAME
16:00:52 140  	  )
16:00:52 141  	  AND (
16:00:52 142  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
16:00:52 143  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED
16:00:52 144  	  )
16:00:52 145  	  AND (
16:00:52 146  	    NOTIFICATION.DATE_TO_NOTIFY IS NULL OR SYSDATE > NOTIFICATION.DATE_TO_NOTIFY
16:00:52 147  	  )ORDER BY dbms_random.value
16:00:52 148  ) WHERE
16:00:52 149  	ROWNUM <= C_NOTIFICATION_COUNT_LIMIT;
16:00:52 150  
16:00:52 151  EXCEPTION
16:00:52 152  WHEN OTHERS THEN
16:00:52 153  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 154  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 155  END GET_PENDING_NOTIFICATIONS;
16:00:52 156  
16:00:52 157  /******************************************************************************/
16:00:52 158  
16:00:52 159  PROCEDURE UPDATE_NOTIFICATION_TIMESTAMP (
16:00:52 160  /*
16:00:52 161  Throws exceptions:
16:00:52 162  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 163  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 164  */
16:00:52 165  	in_notification_id IN NUMBER
16:00:52 166  ) AS
16:00:52 167  SPROC_NAME CONSTANT VARCHAR2(32) := 'UPDATE_NOTIFICATION_TIMESTAMP';
16:00:52 168  -- VARIABLES
16:00:52 169  temp_notification_id NUMBER;
16:00:52 170  -- EXCEPTIONS
16:00:52 171  BAD_NOTIFICATION_ID EXCEPTION;
16:00:52 172  BEGIN
16:00:52 173  
16:00:52 174  	BEGIN
16:00:52 175  	  SELECT
16:00:52 176  	    NOTIFICATION.ID into temp_notification_id
16:00:52 177  	  FROM
16:00:52 178  	    NOTIFICATION
16:00:52 179  	  WHERE
16:00:52 180  	    NOTIFICATION.ID = in_notification_id;
16:00:52 181  	  EXCEPTION
16:00:52 182  	    WHEN NO_DATA_FOUND THEN
16:00:52 183  	      RAISE BAD_NOTIFICATION_ID;
16:00:52 184  	END;
16:00:52 185  
16:00:52 186  	UPDATE
16:00:52 187  	  NOTIFICATION
16:00:52 188  	SET
16:00:52 189  	  NOTIFICATION.UPDATE_DATE = sysdate
16:00:52 190  	WHERE
16:00:52 191  	  NOTIFICATION.ID = in_notification_id;
16:00:52 192  
16:00:52 193  EXCEPTION
16:00:52 194  WHEN BAD_NOTIFICATION_ID THEN
16:00:52 195  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 196  	  SPROC_NAME, 'No such notification');
16:00:52 197  WHEN OTHERS THEN
16:00:52 198  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 199  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 200  END UPDATE_NOTIFICATION_TIMESTAMP;
16:00:52 201  
16:00:52 202  /******************************************************************************/
16:00:52 203  
16:00:52 204  PROCEDURE SET_NOTIFICATION_STATUS (
16:00:52 205  /*
16:00:52 206  Throws exceptions:
16:00:52 207  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 208  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 209  */
16:00:52 210  	in_notification_id	  IN NUMBER,
16:00:52 211  	in_notification_status_id IN NUMBER,
16:00:52 212  	in_error_message	  IN VARCHAR2
16:00:52 213  ) AS
16:00:52 214  SPROC_NAME CONSTANT VARCHAR2(32) := 'SET_NOTIFICATION_STATUS';
16:00:52 215  -- VARIABLES
16:00:52 216  var_group_id		NUMBER;
16:00:52 217  var_account_id		NUMBER;
16:00:52 218  var_notification_type_id	NUMBER;
16:00:52 219  var_email_template_params CLOB;
16:00:52 220  var_create_history_date	DATE := SYSDATE;
16:00:52 221  var_notification_status_id   NUMBER;
16:00:52 222  var_date_to_notify	DATE;
16:00:52 223  max_fails   NUMBER := 5;
16:00:52 224  num_fails   NUMBER;
16:00:52 225  -- EXCEPTIONS
16:00:52 226  BAD_NOTIFICATION_ID	 EXCEPTION;
16:00:52 227  BAD_NOTIFICATION_STATUS_ID EXCEPTION;
16:00:52 228  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
16:00:52 229  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:00:52 230  BEGIN
16:00:52 231  
16:00:52 232  	IF in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_SENT
16:00:52 233  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
16:00:52 234  	  AND in_notification_status_id != NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED THEN
16:00:52 235  	  RAISE BAD_NOTIFICATION_STATUS_ID;
16:00:52 236  	END IF;
16:00:52 237  
16:00:52 238  	BEGIN
16:00:52 239  	  SELECT
16:00:52 240  	    NOTIFICATION.GROUP_ID,
16:00:52 241  	    NOTIFICATION.ACCOUNT_ID,
16:00:52 242  	    NOTIFICATION.NOTIFICATION_TYPE_ID,
16:00:52 243  	    NOTIFICATION.NOTIFICATION_STATUS_ID,
16:00:52 244  	    NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
16:00:52 245  	    NOTIFICATION.DATE_TO_NOTIFY
16:00:52 246  	    into
16:00:52 247  	    var_group_id,
16:00:52 248  	    var_account_id,
16:00:52 249  	    var_notification_type_id,
16:00:52 250  	    var_notification_status_id,
16:00:52 251  	    var_email_template_params,
16:00:52 252  	    var_date_to_notify
16:00:52 253  	  FROM
16:00:52 254  	    NOTIFICATION
16:00:52 255  	  WHERE
16:00:52 256  	    NOTIFICATION.ID = in_notification_id;
16:00:52 257  	  EXCEPTION
16:00:52 258  	    WHEN NO_DATA_FOUND THEN
16:00:52 259  	      RAISE BAD_NOTIFICATION_ID;
16:00:52 260  	END;
16:00:52 261  
16:00:52 262  	BEGIN
16:00:52 263  	  CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIFICATION_HISTORY (
16:00:52 264  	    in_notification_id		=> in_notification_id,
16:00:52 265  	    in_account_id		=> var_account_id,
16:00:52 266  	    in_group_id 		=> var_group_id,
16:00:52 267  	    notification_reason_type_id => var_notification_type_id,
16:00:52 268  	    notification_status_id	=> var_notification_status_id,
16:00:52 269  	    email_template_params	=> var_email_template_params,
16:00:52 270  	    in_create_date		=> var_create_history_date,
16:00:52 271  	    in_date_to_notify		=> var_date_to_notify
16:00:52 272  	  );
16:00:52 273  	  EXCEPTION
16:00:52 274  	    WHEN OTHERS THEN
16:00:52 275  	      EXCEPTION_MESSAGE := SQLERRM;
16:00:52 276  	      RAISE CAN_NOT_CREATE_HISTORY;
16:00:52 277  	END;
16:00:52 278  
16:00:52 279  	UPDATE
16:00:52 280  	  NOTIFICATION
16:00:52 281  	SET
16:00:52 282  	  NOTIFICATION.NOTIFICATION_STATUS_ID = in_notification_status_id,
16:00:52 283  	  NOTIFICATION.UPDATE_DATE = sysdate
16:00:52 284  	WHERE
16:00:52 285  	  NOTIFICATION.ID = in_notification_id;
16:00:52 286  
16:00:52 287  	IF ( in_error_message IS NOT NULL ) THEN
16:00:52 288  	  ADD_NOTIFICATION_FAILURE(
16:00:52 289  	    in_notification_id => in_notification_id,
16:00:52 290  	    in_error_message => in_error_message
16:00:52 291  	  );
16:00:52 292  	END IF;
16:00:52 293  
16:00:52 294  	SELECT COUNT(1) INTO num_fails
16:00:52 295  	FROM NOTIFICATION_FAILURE
16:00:52 296  	WHERE NOTIFICATION_ID = in_notification_id;
16:00:52 297  
16:00:52 298  	IF (in_notification_status_id = NOTIFICATION_STATUSES_V20.NOTIFICATION_SENT OR num_fails >= max_fails) then
16:00:52 299  	  FOR REC IN (
16:00:52 300  	      SELECT ID, NOTIFICATION_ID, ERROR_MESSAGE, CREATE_DATE
16:00:52 301  	      FROM NOTIFICATION_FAILURE
16:00:52 302  	      WHERE NOTIFICATION_ID = in_notification_id
16:00:52 303  	      ) LOOP
16:00:52 304  	      BEGIN
16:00:52 305  		CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIF_FAILURE_HISTORY(
16:00:52 306  		  in_error_message	   => REC.ERROR_MESSAGE,
16:00:52 307  		  in_notification_id	   => REC.NOTIFICATION_ID,
16:00:52 308  		  in_create_date	   => REC.CREATE_DATE
16:00:52 309  		);
16:00:52 310  		EXCEPTION
16:00:52 311  		  WHEN OTHERS THEN
16:00:52 312  		    EXCEPTION_MESSAGE := SQLERRM;
16:00:52 313  		    RAISE CAN_NOT_CREATE_HISTORY;
16:00:52 314  	      END;
16:00:52 315  	  END LOOP;
16:00:52 316  	  DELETE FROM NOTIFICATION_FAILURE WHERE NOTIFICATION_ID = in_notification_id;
16:00:52 317  
16:00:52 318  	  BEGIN
16:00:52 319  	    SELECT
16:00:52 320  	      NOTIFICATION.GROUP_ID,
16:00:52 321  	      NOTIFICATION.ACCOUNT_ID,
16:00:52 322  	      NOTIFICATION.NOTIFICATION_TYPE_ID,
16:00:52 323  	      NOTIFICATION.NOTIFICATION_STATUS_ID,
16:00:52 324  	      NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
16:00:52 325  	      NOTIFICATION.DATE_TO_NOTIFY
16:00:52 326  	      into
16:00:52 327  	      var_group_id,
16:00:52 328  	      var_account_id,
16:00:52 329  	      var_notification_type_id,
16:00:52 330  	      var_notification_status_id,
16:00:52 331  	      var_email_template_params,
16:00:52 332  	      var_date_to_notify
16:00:52 333  	    FROM
16:00:52 334  	      NOTIFICATION
16:00:52 335  	    WHERE
16:00:52 336  	      NOTIFICATION.ID = in_notification_id;
16:00:52 337  	    EXCEPTION
16:00:52 338  	      WHEN NO_DATA_FOUND THEN
16:00:52 339  		RAISE BAD_NOTIFICATION_ID;
16:00:52 340  	  END;
16:00:52 341  
16:00:52 342  	  BEGIN
16:00:52 343  	    CORE_HIST_OWNER.PUBLIC_PROCS_CORE_V20.CREATE_NOTIFICATION_HISTORY (
16:00:52 344  	      in_notification_id	  => in_notification_id,
16:00:52 345  	      in_account_id		  => var_account_id,
16:00:52 346  	      in_group_id		  => var_group_id,
16:00:52 347  	      notification_reason_type_id => var_notification_type_id,
16:00:52 348  	      notification_status_id	  => var_notification_status_id,
16:00:52 349  	      email_template_params	  => var_email_template_params,
16:00:52 350  	      in_create_date		  => var_create_history_date,
16:00:52 351  	      in_date_to_notify 	  => var_date_to_notify
16:00:52 352  	    );
16:00:52 353  	    EXCEPTION
16:00:52 354  	      WHEN OTHERS THEN
16:00:52 355  		EXCEPTION_MESSAGE := SQLERRM;
16:00:52 356  		RAISE CAN_NOT_CREATE_HISTORY;
16:00:52 357  	  END;
16:00:52 358  
16:00:52 359  	  DELETE FROM NOTIFICATION WHERE ID = in_notification_id;
16:00:52 360  
16:00:52 361  	END IF;
16:00:52 362  	commit;
16:00:52 363  
16:00:52 364  EXCEPTION
16:00:52 365  WHEN BAD_NOTIFICATION_STATUS_ID THEN
16:00:52 366  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 367  	  SPROC_NAME, 'Bad notification status');
16:00:52 368  WHEN BAD_NOTIFICATION_ID THEN
16:00:52 369  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 370  	  SPROC_NAME, 'No such notification');
16:00:52 371  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:52 372  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:52 373  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:52 374  WHEN OTHERS THEN
16:00:52 375  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 376  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 377  END SET_NOTIFICATION_STATUS;
16:00:52 378  
16:00:52 379  /******************************************************************************/
16:00:52 380  
16:00:52 381  PROCEDURE ADD_NOTIFICATION_FAILURE (
16:00:52 382  /*
16:00:52 383  Throws exceptions:
16:00:52 384  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 385  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 386  */
16:00:52 387  	in_notification_id IN NUMBER,
16:00:52 388  	in_error_message   IN VARCHAR2
16:00:52 389  ) AS
16:00:52 390  SPROC_NAME CONSTANT VARCHAR2(32) := 'ADD_NOTIFICATION_FAILURE';
16:00:52 391  -- VARIABLES
16:00:52 392  temp_notification_id NUMBER;
16:00:52 393  var_create_date	   DATE := SYSDATE;
16:00:52 394  -- EXCEPTIONS
16:00:52 395  BAD_NOTIFICATION_ID	 EXCEPTION;
16:00:52 396  CAN_NOT_CREATE_HISTORY	 EXCEPTION;
16:00:52 397  EXCEPTION_MESSAGE 	 VARCHAR2(1024);
16:00:52 398  BEGIN
16:00:52 399  
16:00:52 400  	BEGIN
16:00:52 401  	  SELECT
16:00:52 402  	    NOTIFICATION.ID into temp_notification_id
16:00:52 403  	  FROM
16:00:52 404  	    NOTIFICATION
16:00:52 405  	  WHERE
16:00:52 406  	    NOTIFICATION.ID = in_notification_id;
16:00:52 407  	  EXCEPTION
16:00:52 408  	    WHEN NO_DATA_FOUND THEN
16:00:52 409  	      RAISE BAD_NOTIFICATION_ID;
16:00:52 410  	END;
16:00:52 411  
16:00:52 412  	INSERT INTO NOTIFICATION_FAILURE (
16:00:52 413  	  ID,
16:00:52 414  	  NOTIFICATION_ID,
16:00:52 415  	  ERROR_MESSAGE,
16:00:52 416  	  CREATE_DATE
16:00:52 417  	) VALUES (
16:00:52 418  	  NOTF_ID_SEQ.nextVal,
16:00:52 419  	  in_notification_id,
16:00:52 420  	  in_error_message,
16:00:52 421  	  sysdate
16:00:52 422  	);
16:00:52 423  
16:00:52 424  	--BEGIN
16:00:52 425  	--  OPS_HIST_OWNER.PUBLIC_PROCS_OPS_V20.CREATE_NOTIF_FAILURE_HISTORY(
16:00:52 426  	--    in_error_message	       => in_error_message,
16:00:52 427  	--    in_notification_queue_id => in_notification_id,
16:00:52 428  	--    in_create_date	       => var_create_date
16:00:52 429  	--  );
16:00:52 430  	--  EXCEPTION
16:00:52 431  	--    WHEN OTHERS THEN
16:00:52 432  	--	EXCEPTION_MESSAGE := SQLERRM;
16:00:52 433  	--	RAISE CAN_NOT_CREATE_HISTORY;
16:00:52 434  	--END;
16:00:52 435  
16:00:52 436  EXCEPTION
16:00:52 437  WHEN BAD_NOTIFICATION_ID THEN
16:00:52 438  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 439  	  SPROC_NAME, 'No such notification');
16:00:52 440  WHEN CAN_NOT_CREATE_HISTORY THEN
16:00:52 441  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.INTERNAL_ERROR,
16:00:52 442  	  SPROC_NAME, 'Could not create history', EXCEPTION_MESSAGE);
16:00:52 443  WHEN OTHERS THEN
16:00:52 444  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 445  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 446  END ADD_NOTIFICATION_FAILURE;
16:00:52 447  
16:00:52 448  /******************************************************************************/
16:00:52 449  
16:00:52 450  PROCEDURE LOCK_PENDING_NOTIFICATION (
16:00:52 451  /*
16:00:52 452  Result: GLOBAL_STATUSES.TRUE if notification locked
16:00:52 453  GLOBA_STATUSES.FALSE - else
16:00:52 454  */
16:00:52 455  	in_notification_id IN NUMBER,
16:00:52 456  	out_lock_status    OUT NUMBER
16:00:52 457  ) AS
16:00:52 458  SPROC_NAME CONSTANT VARCHAR2(25) := 'LOCK_PENDING_NOTIFICATION';
16:00:52 459  -- VARIABLE
16:00:52 460  temp_notification_id NUMBER;
16:00:52 461  BEGIN
16:00:52 462  	SELECT
16:00:52 463  	  NOTIFICATION.ID into temp_notification_id
16:00:52 464  	FROM
16:00:52 465  	  NOTIFICATION
16:00:52 466  	WHERE
16:00:52 467  	  NOTIFICATION.ID = in_notification_id
16:00:52 468  	  AND (
16:00:52 469  	    NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_PENDING
16:00:52 470  	    OR NOTIFICATION.NOTIFICATION_STATUS_ID = NOTIFICATION_STATUSES_V20.NOTIFICATION_FAILED
16:00:52 471  	  )
16:00:52 472  	FOR UPDATE;
16:00:52 473  
16:00:52 474  	out_lock_status := 1;
16:00:52 475  
16:00:52 476  EXCEPTION
16:00:52 477  WHEN NO_DATA_FOUND THEN
16:00:52 478  	out_lock_status := 0;
16:00:52 479  WHEN OTHERS THEN
16:00:52 480  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 481  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 482  END LOCK_PENDING_NOTIFICATION;
16:00:52 483  
16:00:52 484  /******************************************************************************/
16:00:52 485  
16:00:52 486  PROCEDURE GET_NOTIFICATION_DATA (
16:00:52 487  	in_notification_id IN NUMBER,
16:00:52 488  	out_result_set	   OUT SYS_REFCURSOR
16:00:52 489  ) AS
16:00:52 490  SPROC_NAME CONSTANT VARCHAR2(21) := 'GET_NOTIFICATION_DATA';
16:00:52 491  BEGIN
16:00:52 492  	OPEN out_result_set FOR
16:00:52 493  	SELECT
16:00:52 494  	  NOTIFICATION.ID,
16:00:52 495  	  NOTIFICATION.GROUP_ID,
16:00:52 496  	  NOTIFICATION.EMAIL_TEMPLATE_PARAMS,
16:00:52 497  	  NOTIFICATION.NOTIFICATION_STATUS_ID,
16:00:52 498  	  NOTIFICATION.CREATE_DATE,
16:00:52 499  	  NOTIFICATION.UPDATE_DATE,
16:00:52 500  	  NOTIFICATION.NOTIFICATION_TYPE_ID,
16:00:52 501  	  NOTIFICATION_TYPE.VALUE as "TYPE_VALUE",
16:00:52 502  	  NOTIFICATION_TYPE.TEMPLATE_URL
16:00:52 503  	FROM
16:00:52 504  	  NOTIFICATION
16:00:52 505  	  INNER JOIN NOTIFICATION_TYPE ON NOTIFICATION.NOTIFICATION_TYPE_ID = NOTIFICATION_TYPE.ID
16:00:52 506  	WHERE
16:00:52 507  	  NOTIFICATION.ID = in_notification_id;
16:00:52 508  
16:00:52 509  EXCEPTION
16:00:52 510  WHEN OTHERS THEN
16:00:52 511  	PROCS_COMMON_V20.THROW_EXCEPTION(CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR,
16:00:52 512  	  SPROC_NAME, 'Unknown error', SQLERRM);
16:00:52 513  END GET_NOTIFICATION_DATA;
16:00:52 514  
16:00:52 515  END PROCS_NOTIFICATION_V20;
16:00:52 516  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.06
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_BILLING_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:52   4  /*
16:00:52   5  Throws exceptions:
16:00:52   6  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52   7  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52   8  */
16:00:52   9  	  in_offer_chain_id IN	 NUMBER,
16:00:52  10  	  out_result_set    OUT  SYS_REFCURSOR
16:00:52  11  ) AS
16:00:52  12  BEGIN
16:00:52  13  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_BY_ID (
16:00:52  14  	  in_offer_chain_id => in_offer_chain_id,
16:00:52  15  	  out_result_set => out_result_set
16:00:52  16  	);
16:00:52  17  END GET_OFFER_CHAIN_BY_ID;
16:00:52  18  
16:00:52  19  PROCEDURE GET_PENDING_INVOICES (
16:00:52  20  /*
16:00:52  21  Throws exceptions:
16:00:52  22  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  23  */
16:00:52  24  	out_result_set	     OUT SYS_REFCURSOR,
16:00:52  25  	in_row_number	     IN NUMBER DEFAULT NULL
16:00:52  26  ) AS
16:00:52  27  BEGIN
16:00:52  28  	PROCS_INVOICE_V20.GET_PENDING_INVOICES(
16:00:52  29  	  out_result_set,
16:00:52  30  	  in_row_number
16:00:52  31  	);
16:00:52  32  END GET_PENDING_INVOICES;
16:00:52  33  
16:00:52  34  /********************************************************/
16:00:52  35  PROCEDURE GET_PENDING_REFUND_CHARGES (
16:00:52  36  /*
16:00:52  37  Throws exceptions:
16:00:52  38  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  39  */
16:00:52  40  	out_result_set	    OUT SYS_REFCURSOR,
16:00:52  41  	in_row_number	    IN NUMBER DEFAULT NULL
16:00:52  42  ) AS
16:00:52  43  BEGIN
16:00:52  44  	PROCS_CHARGE_V20.GET_PENDING_REFUND_CHARGES(
16:00:52  45  	  out_result_set,
16:00:52  46  	  in_row_number
16:00:52  47  	);
16:00:52  48  END GET_PENDING_REFUND_CHARGES;
16:00:52  49  /********************************************************/
16:00:52  50  
16:00:52  51  PROCEDURE GET_UNPROCESSED_CHARGES (
16:00:52  52  /*
16:00:52  53  Throws exceptions:
16:00:52  54  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  55  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  56  */
16:00:52  57  	in_invoice_id  IN NUMBER,
16:00:52  58  	out_result_set OUT SYS_REFCURSOR
16:00:52  59  ) AS
16:00:52  60  BEGIN
16:00:52  61  	PROCS_CHARGE_V20.GET_UNPROCESSED_CHARGES(
16:00:52  62  	  in_invoice_id,
16:00:52  63  	  out_result_set
16:00:52  64  	);
16:00:52  65  END GET_UNPROCESSED_CHARGES;
16:00:52  66  
16:00:52  67  /********************************************************/
16:00:52  68  
16:00:52  69  PROCEDURE GET_PROCESSED_CHARGES (
16:00:52  70  /*
16:00:52  71  Throws exceptions:
16:00:52  72  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  73  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  74  */
16:00:52  75  	in_invoice_id  IN NUMBER,
16:00:52  76  	out_result_set OUT SYS_REFCURSOR
16:00:52  77  ) AS
16:00:52  78  BEGIN
16:00:52  79  	PROCS_CHARGE_V20.GET_PROCESSED_CHARGES(
16:00:52  80  	  in_invoice_id,
16:00:52  81  	  out_result_set
16:00:52  82  	);
16:00:52  83  END GET_PROCESSED_CHARGES;
16:00:52  84  
16:00:52  85  /********************************************************/
16:00:52  86  
16:00:52  87  PROCEDURE GET_TRNSCTN_ATTEMPTS_BY_STATUS (
16:00:52  88  /*
16:00:52  89  Throws exceptions:
16:00:52  90  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  91  */
16:00:52  92  	in_transaction_id	      IN NUMBER,
16:00:52  93  	in_transaction_attempt_status IN NUMBER,
16:00:52  94  	out_result_set		      OUT SYS_REFCURSOR
16:00:52  95  ) AS
16:00:52  96  BEGIN
16:00:52  97  	PROCS_TRANSACTION_V20.GET_TRNSCTN_ATTEMPTS_BY_STATUS(
16:00:52  98  	  in_transaction_id,
16:00:52  99  	  in_transaction_attempt_status,
16:00:52 100  	  out_result_set
16:00:52 101  	);
16:00:52 102  END GET_TRNSCTN_ATTEMPTS_BY_STATUS;
16:00:52 103  
16:00:52 104  /********************************************************/
16:00:52 105  
16:00:52 106  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_STATUS (
16:00:52 107  /*
16:00:52 108  Throws exceptions:
16:00:52 109  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 110  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 111  */
16:00:52 112  	in_transaction_attempt_id     IN NUMBER,
16:00:52 113  	in_transaction_attempt_status IN NUMBER
16:00:52 114  ) AS
16:00:52 115  BEGIN
16:00:52 116  	PROCS_TRANSACTION_V20.UPDATE_TRNSCTN_ATTEMPT_STATUS(
16:00:52 117  	   in_transaction_attempt_id,
16:00:52 118  	   in_transaction_attempt_status
16:00:52 119  	);
16:00:52 120  END UPDATE_TRNSCTN_ATTEMPT_STATUS;
16:00:52 121  
16:00:52 122  /********************************************************/
16:00:52 123  PROCEDURE GET_CLOSED_REFUNDS_BY_INVOICE (
16:00:52 124  /*
16:00:52 125  Throws exceptions:
16:00:52 126  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 127  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 128  */
16:00:52 129  	in_invoice_id	IN  NUMBER,
16:00:52 130  	out_result_set OUT SYS_REFCURSOR
16:00:52 131  ) AS
16:00:52 132  BEGIN
16:00:52 133  	PROCS_TRANSACTION_V20.GET_CLOSED_REFUNDS_BY_INVOICE(
16:00:52 134  	   in_invoice_id,
16:00:52 135  	   out_result_set
16:00:52 136  	);
16:00:52 137  END GET_CLOSED_REFUNDS_BY_INVOICE;
16:00:52 138  
16:00:52 139  /********************************************************/
16:00:52 140  
16:00:52 141  PROCEDURE UPDATE_TRNSCTN_ATTEMPT_TIME (
16:00:52 142  /*
16:00:52 143  Throws exceptions:
16:00:52 144  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 145  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 146  */
16:00:52 147  	in_transaction_attempt_id IN NUMBER,
16:00:52 148  	in_updated_by		  IN VARCHAR2
16:00:52 149  ) AS
16:00:52 150  BEGIN
16:00:52 151  	PROCS_TRANSACTION_V20.UPDATE_TRNSCTN_ATTEMPT_TIME(
16:00:52 152  	  in_transaction_attempt_id,
16:00:52 153  	  in_updated_by
16:00:52 154  	);
16:00:52 155  END UPDATE_TRNSCTN_ATTEMPT_TIME;
16:00:52 156  
16:00:52 157  /********************************************************/
16:00:52 158  
16:00:52 159  PROCEDURE CREATE_TRANSACTION_ATTEMPT (
16:00:52 160  /*
16:00:52 161  Throws exceptions:
16:00:52 162  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 163  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 164  */
16:00:52 165  	in_transaction_id	   IN NUMBER,
16:00:52 166  	in_trans_attempt_status    IN NUMBER,
16:00:52 167  	in_external_status_code    IN VARCHAR2,
16:00:52 168  	in_external_status_message IN VARCHAR2,
16:00:52 169  	in_created_by		   IN VARCHAR2,
16:00:52 170  	in_ext_transaction_id	   IN VARCHAR2,
16:00:52 171  	out_transaction_attempt_id OUT NUMBER
16:00:52 172  ) AS
16:00:52 173  BEGIN
16:00:52 174  	PROCS_TRANSACTION_V20.CREATE_TRANSACTION_ATTEMPT(
16:00:52 175  	  in_transaction_id,
16:00:52 176  	  in_trans_attempt_status,
16:00:52 177  	  in_external_status_code,
16:00:52 178  	  in_external_status_message,
16:00:52 179  	  in_created_by,
16:00:52 180  	  in_ext_transaction_id,
16:00:52 181  	  out_transaction_attempt_id
16:00:52 182  	);
16:00:52 183  END CREATE_TRANSACTION_ATTEMPT;
16:00:52 184  
16:00:52 185  /********************************************************/
16:00:52 186  
16:00:52 187  PROCEDURE UPDATE_TRANSACTION_ATTEMPT_INF (
16:00:52 188  /*
16:00:52 189  Throws exceptions:
16:00:52 190  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 191  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 192  */
16:00:52 193  	in_transaction_attempt_id IN NUMBER,
16:00:52 194  	in_ext_status_code	  IN VARCHAR2,
16:00:52 195  	in_ext_status_message	  IN VARCHAR2,
16:00:52 196  	in_ext_transaction_id	  IN VARCHAR2
16:00:52 197  ) AS
16:00:52 198  BEGIN
16:00:52 199  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_ATTEMPT_INF(
16:00:52 200  	  in_transaction_attempt_id,
16:00:52 201  	  in_ext_status_code,
16:00:52 202  	  in_ext_status_message,
16:00:52 203  	  in_ext_transaction_id
16:00:52 204  	);
16:00:52 205  END UPDATE_TRANSACTION_ATTEMPT_INF;
16:00:52 206  
16:00:52 207  /********************************************************/
16:00:52 208  
16:00:52 209  PROCEDURE UPDATE_TRANSACTION_STATUS (
16:00:52 210  /*
16:00:52 211  Throws exceptions:
16:00:52 212  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 213  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 214  */
16:00:52 215  	in_transaction_id	 IN NUMBER,
16:00:52 216  	in_updated_by		 IN VARCHAR2,
16:00:52 217  	in_transaction_status_id IN NUMBER
16:00:52 218  ) AS
16:00:52 219  BEGIN
16:00:52 220  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_STATUS(
16:00:52 221  	  in_transaction_id,
16:00:52 222  	  in_updated_by,
16:00:52 223  	  in_transaction_status_id
16:00:52 224  	);
16:00:52 225  END UPDATE_TRANSACTION_STATUS;
16:00:52 226  
16:00:52 227  /********************************************************/
16:00:52 228  
16:00:52 229  PROCEDURE GET_FAILED_ATTEMPTS_NUMBER (
16:00:52 230  /*
16:00:52 231  Throws exceptions:
16:00:52 232  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 233  */
16:00:52 234  	in_transaction_id IN  NUMBER,
16:00:52 235  	out_attempts_num  OUT NUMBER
16:00:52 236  ) AS
16:00:52 237  BEGIN
16:00:52 238  	PROCS_TRANSACTION_V20.GET_FAILED_ATTEMPTS_NUMBER(
16:00:52 239  	  in_transaction_id,
16:00:52 240  	  out_attempts_num
16:00:52 241  	);
16:00:52 242  END GET_FAILED_ATTEMPTS_NUMBER;
16:00:52 243  
16:00:52 244  /********************************************************/
16:00:52 245  
16:00:52 246  PROCEDURE IS_TRANSACTION_SUCCESSFULL (
16:00:52 247  /*
16:00:52 248  Throws exceptions:
16:00:52 249  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 250  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 251  */
16:00:52 252  	in_transaction_id IN  NUMBER,
16:00:52 253  	out_is_successfull  OUT NUMBER
16:00:52 254  ) AS
16:00:52 255  BEGIN
16:00:52 256  	PROCS_TRANSACTION_V20.IS_TRANSACTION_SUCCESSFULL(
16:00:52 257  	  in_transaction_id,
16:00:52 258  	  out_is_successfull
16:00:52 259  	);
16:00:52 260  END IS_TRANSACTION_SUCCESSFULL;
16:00:52 261  /********************************************************/
16:00:52 262  
16:00:52 263  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:52 264  /*
16:00:52 265  Throws exceptions:
16:00:52 266  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 267  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 268  */
16:00:52 269  	in_invoice_id		       IN NUMBER,
16:00:52 270  	in_invoice_status_id	       IN NUMBER,
16:00:52 271  	in_updated_by		       IN VARCHAR2
16:00:52 272  ) AS
16:00:52 273  BEGIN
16:00:52 274  	PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
16:00:52 275  	  in_invoice_id,
16:00:52 276  	  in_invoice_status_id,
16:00:52 277  	  in_updated_by
16:00:52 278  	);
16:00:52 279  END UPDATE_INVOICE_STATUS;
16:00:52 280  
16:00:52 281  /********************************************************/
16:00:52 282  
16:00:52 283  PROCEDURE SUSPEND_SUBSCRIPTION(
16:00:52 284  /*
16:00:52 285  Throws exceptions:
16:00:52 286  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 287  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:52 288  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 289  */
16:00:52 290  	  in_subs_id	IN NUMBER ,
16:00:52 291  	  in_updated_by IN VARCHAR2
16:00:52 292  ) AS
16:00:52 293  BEGIN
16:00:52 294  	PROCS_SUBSCRIPTION_V20.SUSPEND_SUBSCRIPTION(
16:00:52 295  	  in_subs_id,
16:00:52 296  	  in_updated_by
16:00:52 297  	);
16:00:52 298  END SUSPEND_SUBSCRIPTION;
16:00:52 299  
16:00:52 300  /********************************************************/
16:00:52 301  
16:00:52 302  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:52 303  /*
16:00:52 304  Throws exceptions:
16:00:52 305  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 306  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 307  */
16:00:52 308  	in_credit_card_id IN  NUMBER,
16:00:52 309  	out_result_set	  OUT SYS_REFCURSOR
16:00:52 310  ) AS
16:00:52 311  BEGIN
16:00:52 312  	PROCS_FIN_INSTRUMENTS_V20.GET_CREDIT_CARD_BY_ID(
16:00:52 313  	  in_credit_card_id,
16:00:52 314  	  out_result_set
16:00:52 315  	);
16:00:52 316  END GET_CREDIT_CARD_BY_ID;
16:00:52 317  
16:00:52 318  /*********************************************************/
16:00:52 319  
16:00:52 320  PROCEDURE GET_TRANSACTION_AMOUNT (
16:00:52 321  /*
16:00:52 322  Throws exceptions:
16:00:52 323  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 324  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 325  */
16:00:52 326  	in_transaction_id      IN  NUMBER,
16:00:52 327  	out_transaction_amount OUT NUMBER
16:00:52 328  ) AS
16:00:52 329  BEGIN
16:00:52 330  	PROCS_TRANSACTION_V20.GET_TRANSACTION_AMOUNT(
16:00:52 331  	  in_transaction_id,
16:00:52 332  	  out_transaction_amount
16:00:52 333  	);
16:00:52 334  END GET_TRANSACTION_AMOUNT;
16:00:52 335  
16:00:52 336  /***********************************************************/
16:00:52 337  
16:00:52 338  PROCEDURE GET_ACCOUNT_BY_INVOICE_ID (
16:00:52 339  /*
16:00:52 340  Throws exceptions:
16:00:52 341  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 342  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 343  */
16:00:52 344  	in_invoice_id  IN  NUMBER,
16:00:52 345  	out_account_id OUT NUMBER
16:00:52 346  ) AS
16:00:52 347  BEGIN
16:00:52 348  	PROCS_INVOICE_V20.GET_ACCOUNT_BY_INVOICE_ID(
16:00:52 349  	  in_invoice_id,
16:00:52 350  	  out_account_id
16:00:52 351  	);
16:00:52 352  END GET_ACCOUNT_BY_INVOICE_ID;
16:00:52 353  
16:00:52 354  /************************************************************/
16:00:52 355  
16:00:52 356  PROCEDURE GET_GIFT_CERTIFICATE_BY_ID (
16:00:52 357  /*
16:00:52 358  Throws exceptions:
16:00:52 359  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 360  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 361  */
16:00:52 362  	in_gift_certificate_id IN NUMBER,
16:00:52 363  	out_result_set	       OUT SYS_REFCURSOR
16:00:52 364  ) AS
16:00:52 365  BEGIN
16:00:52 366  	PROCS_FIN_INSTRUMENTS_V20.GET_GIFT_CERTIFICATE_BY_ID (
16:00:52 367  	  in_gift_certificate_id,
16:00:52 368  	  out_result_set
16:00:52 369  	);
16:00:52 370  END GET_GIFT_CERTIFICATE_BY_ID;
16:00:52 371  
16:00:52 372  /**************************************************************/
16:00:52 373  
16:00:52 374  PROCEDURE GET_SUBSCR_ID_BY_CHARGE_ID (
16:00:52 375  /*
16:00:52 376  Throws exceptions:
16:00:52 377  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 378  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 379  */
16:00:52 380  	in_charge_id	    IN NUMBER,
16:00:52 381  	out_subscription_id OUT NUMBER
16:00:52 382  ) AS
16:00:52 383  BEGIN
16:00:52 384  	PROCS_CHARGE_V20.GET_SUBSCR_ID_BY_CHARGE_ID(
16:00:52 385  	  in_charge_id,
16:00:52 386  	  out_subscription_id
16:00:52 387  	);
16:00:52 388  END GET_SUBSCR_ID_BY_CHARGE_ID;
16:00:52 389  
16:00:52 390  /**************************************************************/
16:00:52 391  
16:00:52 392  PROCEDURE IS_GCERT_FOR_PROPER_OFFER (
16:00:52 393  /*
16:00:52 394  Throws exceptions:
16:00:52 395  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 396  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 397  */
16:00:52 398  	in_gift_certificate_id IN NUMBER,
16:00:52 399  	in_charge_id	       IN NUMBER,
16:00:52 400  	out_result	       OUT NUMBER
16:00:52 401  ) AS
16:00:52 402  BEGIN
16:00:52 403  	PROCS_FIN_INSTRUMENTS_V20.IS_GCERT_FOR_PROPER_OFFER (
16:00:52 404  	  in_gift_certificate_id,
16:00:52 405  	  in_charge_id,
16:00:52 406  	  out_result
16:00:52 407  	);
16:00:52 408  END IS_GCERT_FOR_PROPER_OFFER;
16:00:52 409  
16:00:52 410  /**************************************************************/
16:00:52 411  
16:00:52 412  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:52 413  /*
16:00:52 414  Throws exceptions:
16:00:52 415  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 416  */
16:00:52 417  	  in_subscription_id IN  NUMBER,
16:00:52 418  	  out_result_set      OUT SYS_REFCURSOR
16:00:52 419  ) AS
16:00:52 420  BEGIN
16:00:52 421  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTION_INFO (
16:00:52 422  	  in_subscription_id,
16:00:52 423  	  out_result_set
16:00:52 424  	);
16:00:52 425  END GET_SUBSCRIPTION_INFO;
16:00:52 426  
16:00:52 427  /****************************************************************/
16:00:52 428  
16:00:52 429  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:52 430  /*
16:00:52 431  Throws exceptions:
16:00:52 432  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 433  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 434  */
16:00:52 435  	in_invoice_id IN  NUMBER,
16:00:52 436  	out_amount    OUT NUMBER
16:00:52 437  ) AS
16:00:52 438  BEGIN
16:00:52 439  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
16:00:52 440  	  in_invoice_id,
16:00:52 441  	  out_amount
16:00:52 442  	);
16:00:52 443  END CALCULATE_INVOICE_AMOUNT;
16:00:52 444  
16:00:52 445  /****************************************************************/
16:00:52 446  
16:00:52 447  PROCEDURE GET_TRANSACTION_BY_ID (
16:00:52 448  /*
16:00:52 449  Throws exceptions:
16:00:52 450  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 451  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 452  */
16:00:52 453  	in_transaction_id IN NUMBER,
16:00:52 454  	out_result_set	  OUT SYS_REFCURSOR
16:00:52 455  ) AS
16:00:52 456  BEGIN
16:00:52 457  	PROCS_TRANSACTION_V20.GET_TRANSACTION_BY_ID(
16:00:52 458  	  in_transaction_id,
16:00:52 459  	  out_result_set
16:00:52 460  	);
16:00:52 461  END GET_TRANSACTION_BY_ID;
16:00:52 462  
16:00:52 463  /****************************************************************/
16:00:52 464  
16:00:52 465  PROCEDURE UPDATE_CHARGE_STATUS (
16:00:52 466  /*
16:00:52 467  Throws exceptions:
16:00:52 468  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 469  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 470  */
16:00:52 471  	in_charge_id	    IN CHARGE.ID%TYPE,
16:00:52 472  	in_charge_status_id IN CHARGE.CHARGE_STATUS_ID%TYPE,
16:00:52 473  	in_updated_by	    IN CHARGE.UPDATED_BY%TYPE
16:00:52 474  ) AS
16:00:52 475  BEGIN
16:00:52 476  	PROCS_CHARGE_V20.UPDATE_CHARGE_STATUS(
16:00:52 477  	  in_charge_id,
16:00:52 478  	  in_charge_status_id,
16:00:52 479  	  in_updated_by
16:00:52 480  	);
16:00:52 481  END UPDATE_CHARGE_STATUS;
16:00:52 482  
16:00:52 483  /****************************************************************/
16:00:52 484  
16:00:52 485  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:52 486  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:52 487  	out_result_set OUT SYS_REFCURSOR
16:00:52 488  ) AS
16:00:52 489  BEGIN
16:00:52 490  	PROCS_FIN_INSTRUMENTS_V20.GET_GC_BY_PURCH_INVOICE_ID(
16:00:52 491  	  in_invoice_id,
16:00:52 492  	  out_result_set
16:00:52 493  	);
16:00:52 494  END GET_GC_BY_PURCH_INVOICE_ID;
16:00:52 495  
16:00:52 496  /****************************************************************/
16:00:52 497  
16:00:52 498  PROCEDURE UPDATE_TRANSACTION_ORDER_ID (
16:00:52 499  /*
16:00:52 500  Throws exceptions:
16:00:52 501  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 502  APP_EXCEPTION_CODES_V20.INTRNAL_ERROR
16:00:52 503  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 504  */
16:00:52 505  	in_transaction_id IN TRANSACTION.ID%TYPE,
16:00:52 506  	in_order_id	  IN TRANSACTION.ORDER_ID%TYPE,
16:00:52 507  	in_updated_by	  IN TRANSACTION.UPDATED_BY%TYPE
16:00:52 508  ) AS
16:00:52 509  BEGIN
16:00:52 510  	PROCS_TRANSACTION_V20.UPDATE_TRANSACTION_ORDER_ID(
16:00:52 511  	  in_transaction_id,
16:00:52 512  	  in_order_id,
16:00:52 513  	  in_updated_by
16:00:52 514  	);
16:00:52 515  END UPDATE_TRANSACTION_ORDER_ID;
16:00:52 516  
16:00:52 517  /****************************************************************/
16:00:52 518  
16:00:52 519  PROCEDURE GET_ACTIVE_INVOICES_IDS (
16:00:52 520  /*
16:00:52 521  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 522  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 523  */
16:00:52 524  --  in_subscription_id IN SUBSCRIPTION.ID%TYPE,
16:00:52 525  	in_subscription_id IN NUMBER,
16:00:52 526  	out_result_set	   OUT SYS_REFCURSOR
16:00:52 527  ) AS
16:00:52 528  BEGIN
16:00:52 529  	PROCS_SUBSCRIPTION_V20.GET_ACTIVE_INVOICES_IDS(
16:00:52 530  	  in_subscription_id,
16:00:52 531  	  out_result_set
16:00:52 532  	);
16:00:52 533  END GET_ACTIVE_INVOICES_IDS;
16:00:52 534  
16:00:52 535  /****************************************************************/
16:00:52 536  
16:00:52 537  PROCEDURE CANCEL_SUBSCRIPTION_INVOICE (
16:00:52 538  /*
16:00:52 539  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 540  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 541  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:52 542  */
16:00:52 543  --  in_invoice_id        IN INVOICE.ID%TYPE,
16:00:52 544  --  in_updated_by        IN INVOICE.UPDATED_BY%TYPE,
16:00:52 545  -- norlov: in_refundable	      IN refund enabled
16:00:52 546  	in_invoice_id	     IN NUMBER,
16:00:52 547  	in_updated_by	     IN VARCHAR2,
16:00:52 548  	in_refundable	     IN NUMBER DEFAULT GLOBAL_CONSTANTS_V20.FALSE
16:00:52 549  --  in_cancellation_date IN DATE DEFAULT current_timestamp
16:00:52 550  ) AS
16:00:52 551  BEGIN
16:00:52 552  	PROCS_SUBSCRIPTION_V20.CANCEL_SUBSCRIPTION_INVOICE(
16:00:52 553  	  in_invoice_id,
16:00:52 554  	  in_updated_by,
16:00:52 555  	  in_refundable
16:00:52 556  	);
16:00:52 557  END CANCEL_SUBSCRIPTION_INVOICE;
16:00:52 558  
16:00:52 559  /****************************************************************/
16:00:52 560  
16:00:52 561  PROCEDURE FINALIZE_CANCELATION (
16:00:52 562  /*
16:00:52 563  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 564  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 565  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:52 566  */
16:00:52 567  --  in_subscription_id	IN SUBSCRIPTION.ID%TYPE,
16:00:52 568  --  in_cancelation_reason IN SUBSCRIPTION_CANCEL_REASON.VALUE%TYPE,
16:00:52 569  --  in_cancelation_date	IN SUBSCRIPTION.CANCELLATION_DATE%TYPE,
16:00:52 570  --  in_note		IN SUBSCRIPTION_NOTE.NOTE%TYPE,
16:00:52 571  --  in_agent_id		IN SUBSCRIPTION_NOTE.AGENT_ID%TYPE,
16:00:52 572  --  in_updated_by 	IN SUBSCRIPTION.UPDATED_BY%TYPE
16:00:52 573  	in_subscription_id    IN NUMBER,
16:00:52 574  	in_cancelation_reason IN VARCHAR2,
16:00:52 575  	in_cancelation_date   IN DATE,
16:00:52 576  	in_note 	      IN VARCHAR2,
16:00:52 577  	in_agent_id	      IN NUMBER,
16:00:52 578  	in_updated_by	      IN VARCHAR2
16:00:52 579  ) AS
16:00:52 580  BEGIN
16:00:52 581  	PROCS_SUBSCRIPTION_V20.FINALIZE_CANCELATION(
16:00:52 582  	  in_subscription_id,
16:00:52 583  	  in_cancelation_reason,
16:00:52 584  	  in_cancelation_date,
16:00:52 585  	  in_note,
16:00:52 586  	  in_agent_id,
16:00:52 587  	  in_updated_by
16:00:52 588  	);
16:00:52 589  END FINALIZE_CANCELATION;
16:00:52 590  
16:00:52 591  /****************************************************************/
16:00:52 592  
16:00:52 593  PROCEDURE GET_SUBSCR_PROD_OFFERRINGS (
16:00:52 594  /*
16:00:52 595  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 596  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 597  */
16:00:52 598  	in_subscription_id IN NUMBER,
16:00:52 599  	out_result_set	   OUT SYS_REFCURSOR
16:00:52 600  ) AS
16:00:52 601  BEGIN
16:00:52 602  	PROCS_SUBSCRIPTION_V20.GET_SUBSCR_PROD_OFFERRINGS(
16:00:52 603  	  in_subscription_id,
16:00:52 604  	  out_result_set
16:00:52 605  	);
16:00:52 606  END GET_SUBSCR_PROD_OFFERRINGS;
16:00:52 607  
16:00:52 608  /****************************************************************/
16:00:52 609  
16:00:52 610  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:52 611  /*
16:00:52 612  Throws exceptions (codes):
16:00:52 613  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 614  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 615  */
16:00:52 616  	in_offer_chain_id IN NUMBER,
16:00:52 617  	in_meta_data_name IN VARCHAR2,
16:00:52 618  	out_result_set	  OUT SYS_REFCURSOR
16:00:52 619  )AS
16:00:52 620  BEGIN
16:00:52 621  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_META_DATA(
16:00:52 622  	  in_offer_chain_id,
16:00:52 623  	  in_meta_data_name,
16:00:52 624  	  out_result_set
16:00:52 625  	);
16:00:52 626  END GET_OFFER_CHAIN_META_DATA;
16:00:52 627  
16:00:52 628  /****************************************************************/
16:00:52 629  
16:00:52 630  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:52 631  /*
16:00:52 632  Throws exceptions (codes):
16:00:52 633  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 634  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 635  */
16:00:52 636  	in_product_offering_id IN NUMBER,
16:00:52 637  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:00:52 638  	out_result_set	       OUT SYS_REFCURSOR
16:00:52 639  )AS
16:00:52 640  BEGIN
16:00:52 641  	PROCS_OFFER_CHAIN_V20.GET_PRODUCT_OFFERING_META_DATA(
16:00:52 642  	  in_product_offering_id,
16:00:52 643  	  in_meta_data_name,
16:00:52 644  	  out_result_set
16:00:52 645  	);
16:00:52 646  END GET_PRODUCT_OFFERING_META_DATA;
16:00:52 647  
16:00:52 648  /****************************************************************/
16:00:52 649  
16:00:52 650  PROCEDURE READ_ACCOUNT (
16:00:52 651  	in_account_id  IN ACCOUNT.ID%TYPE,
16:00:52 652  	out_result_set OUT SYS_REFCURSOR
16:00:52 653  )AS
16:00:52 654  BEGIN
16:00:52 655  	PROCS_ACCOUNT_CRU_V20.READ_ACCOUNT(
16:00:52 656  	  in_account_id,
16:00:52 657  	  out_result_set
16:00:52 658  	);
16:00:52 659  END READ_ACCOUNT;
16:00:52 660  
16:00:52 661  /****************************************************************/
16:00:52 662  
16:00:52 663  PROCEDURE GET_COLLECTED_CHARGES (
16:00:52 664  /*
16:00:52 665  Throws exceptions:
16:00:52 666  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 667  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 668  */
16:00:52 669  	in_invoice_id  IN NUMBER,
16:00:52 670  	out_result_set OUT SYS_REFCURSOR
16:00:52 671  ) AS
16:00:52 672  BEGIN
16:00:52 673  	PROCS_CHARGE_V20.GET_COLLECTED_CHARGES(
16:00:52 674  	  in_invoice_id,
16:00:52 675  	  out_result_set
16:00:52 676  	);
16:00:52 677  END GET_COLLECTED_CHARGES;
16:00:52 678  
16:00:52 679  /****************************************************************/
16:00:52 680  
16:00:52 681  PROCEDURE GET_GROUPS_ID_BY_INVOICE_ID (
16:00:52 682  /*
16:00:52 683  Throws exceptions:
16:00:52 684  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 685  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 686  */
16:00:52 687  	in_invoice_id IN NUMBER,
16:00:52 688  	out_group_ids OUT SYS_REFCURSOR
16:00:52 689  ) AS
16:00:52 690  BEGIN
16:00:52 691  
16:00:52 692  	PROCS_ACCOUNT_V20.GET_GROUPS_ID_BY_INVOICE_ID(
16:00:52 693  	  in_invoice_id,
16:00:52 694  	  out_group_ids
16:00:52 695  	);
16:00:52 696  
16:00:52 697  END GET_GROUPS_ID_BY_INVOICE_ID;
16:00:52 698  
16:00:52 699  /****************************************************************/
16:00:52 700  
16:00:52 701  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:52 702  /*
16:00:52 703  Throws exceptions:
16:00:52 704  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 705  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 706  */
16:00:52 707  	in_group_id IN NUMBER,
16:00:52 708  	out_account_id	OUT NUMBER
16:00:52 709  ) AS
16:00:52 710  BEGIN
16:00:52 711  
16:00:52 712  	PROCS_ACCOUNT_V20.GET_ACCOUNT_ID_BY_GROUP_ID(
16:00:52 713  	  in_group_id,
16:00:52 714  	  out_account_id
16:00:52 715  	);
16:00:52 716  
16:00:52 717  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:00:52 718  
16:00:52 719  /****************************************************************/
16:00:52 720  
16:00:52 721  PROCEDURE LOCK_ACCOUNT (
16:00:52 722  	in_group_id    IN NUMBER,
16:00:52 723  	in_lock_key    IN VARCHAR2,
16:00:52 724  	in_seconds_num IN NUMBER,
16:00:52 725  	in_created_by  IN VARCHAR2,
16:00:52 726  	in_reason      IN VARCHAR2
16:00:52 727  ) AS
16:00:52 728  BEGIN
16:00:52 729  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
16:00:52 730  	  in_group_id,
16:00:52 731  	  in_lock_key,
16:00:52 732  	  in_seconds_num,
16:00:52 733  	  in_created_by,
16:00:52 734  	  in_reason
16:00:52 735  	);
16:00:52 736  END LOCK_ACCOUNT;
16:00:52 737  
16:00:52 738  /****************************************************************/
16:00:52 739  
16:00:52 740  PROCEDURE RELEASE_LOCK (
16:00:52 741  	in_group_id IN NUMBER,
16:00:52 742  	in_lock_key IN VARCHAR2
16:00:52 743  ) AS
16:00:52 744  BEGIN
16:00:52 745  	PROCS_LOCKING_V20.RELEASE_LOCK(
16:00:52 746  	  in_group_id,
16:00:52 747  	  in_lock_key
16:00:52 748  	);
16:00:52 749  END RELEASE_LOCK;
16:00:52 750  
16:00:52 751  PROCEDURE GET_PAYMENT_INFO_BY_INVOICE_ID (
16:00:52 752  	in_invoice_id		    IN NUMBER,
16:00:52 753  	out_order_id		    OUT VARCHAR2,
16:00:52 754  	out_external_transaction_id OUT VARCHAR2
16:00:52 755  ) AS
16:00:52 756  BEGIN
16:00:52 757  	PROCS_INVOICE_V20.GET_PAYMENT_INFO_BY_INVOICE_ID(
16:00:52 758  	  in_invoice_id,
16:00:52 759  	  out_order_id,
16:00:52 760  	  out_external_transaction_id
16:00:52 761  	);
16:00:52 762  END GET_PAYMENT_INFO_BY_INVOICE_ID;
16:00:52 763  
16:00:52 764  /******************************************************************************/
16:00:52 765  
16:00:52 766  PROCEDURE GET_PAYPAL_BY_ID (
16:00:52 767  	in_paypal_id   IN  NUMBER,
16:00:52 768  	out_result_set OUT SYS_REFCURSOR
16:00:52 769  ) AS
16:00:52 770  BEGIN
16:00:52 771  	PROCS_FIN_INSTRUMENTS_V20.GET_PAYPAL_BY_ID(
16:00:52 772  	  in_paypal_id,
16:00:52 773  	  out_result_set
16:00:52 774  	);
16:00:52 775  END GET_PAYPAL_BY_ID;
16:00:52 776  
16:00:52 777  PROCEDURE GET_NEXT_ATTEMPT_NUMBER (
16:00:52 778  /*
16:00:52 779  Throws exceptions:
16:00:52 780  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 781  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 782  */
16:00:52 783  	in_charge_id   in  number,
16:00:52 784  	out_attempt_count out number
16:00:52 785  ) as
16:00:52 786  begin
16:00:52 787  	PROCS_TRANSACTION_V20.GET_NEXT_ATTEMPT_NUMBER(
16:00:52 788  	  in_charge_id,
16:00:52 789  	  out_attempt_count
16:00:52 790  	);
16:00:52 791  end GET_NEXT_ATTEMPT_NUMBER;
16:00:52 792  
16:00:52 793  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:52 794  	in_offer_chain_id	 IN NUMBER,
16:00:52 795  	in_action_name		 IN VARCHAR2,
16:00:52 796  	out_notification_type_id out number
16:00:52 797  ) as
16:00:52 798  begin
16:00:52 799  	PROCS_OFFER_CHAIN_V20.GET_NOTIFICATION_TYPE_ID(
16:00:52 800  	  in_offer_chain_id,
16:00:52 801  	  in_action_name,
16:00:52 802  	  out_notification_type_id
16:00:52 803  	);
16:00:52 804  end GET_NOTIFICATION_TYPE_ID;
16:00:52 805  
16:00:52 806  PROCEDURE GET_GC_ID_BY_PURCH_INVOICE_ID (
16:00:52 807  /*
16:00:52 808  Throws exceptions:
16:00:52 809  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 810  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 811  */
16:00:52 812  in_invoice_id IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:52 813  out_gift_certificate_id OUT GIFT_CERTIFICATE.ID%TYPE
16:00:52 814  ) AS
16:00:52 815  BEGIN
16:00:52 816  PROCS_FIN_INSTRUMENTS_V20.GET_GC_ID_BY_PURCH_INVOICE_ID(
16:00:52 817  in_invoice_id,
16:00:52 818  out_gift_certificate_id
16:00:52 819  );
16:00:52 820  END GET_GC_ID_BY_PURCH_INVOICE_ID;
16:00:52 821  
16:00:52 822  /****************************************************************************/
16:00:52 823  
16:00:52 824  PROCEDURE SHOULD_MOVE_TO_GRACE(
16:00:52 825  	in_invoice_id  IN INVOICE.ID%TYPE,
16:00:52 826  	out_result     OUT NUMBER
16:00:52 827  ) AS
16:00:52 828  BEGIN
16:00:52 829  	-- if the invoice preceding the given invoice has no transaction attempts, then
16:00:52 830  	-- it is not billed out of Sartre. if so, then the associated subscription
16:00:52 831  	-- should be canceled after a final failed billing attempt--not moved to grace.
16:00:52 832  	SELECT DECODE(COUNT(1), 0, 0, 1) INTO out_result
16:00:52 833  	FROM CHARGE c
16:00:52 834  	INNER JOIN TRANSACTION t ON c.TRANSACTION_ID = t.ID
16:00:52 835  	INNER JOIN TRANSACTION_ATTEMPT ta ON ta.TRANSACTION_ID = t.ID
16:00:52 836  	WHERE c.INVOICE_ID = (
16:00:52 837  	  -- select previous invoice_id, or -1 if there is none
16:00:52 838  	  SELECT PREV_INVOICE_ID FROM (
16:00:52 839  	    SELECT i.ID, LAG(i.ID, 1, -1) OVER (ORDER BY i.CREATE_DATE) AS PREV_INVOICE_ID
16:00:52 840  	    FROM INVOICE i
16:00:52 841  	    INNER JOIN LICENSE l ON i.ID = l.INVOICE_ID
16:00:52 842  	    WHERE l.SUBSCRIPTION_ID = (
16:00:52 843  	      SELECT SUBSCRIPTION_ID FROM LICENSE WHERE INVOICE_ID = in_invoice_id
16:00:52 844  	    )
16:00:52 845  	  ) WHERE ID = in_invoice_id
16:00:52 846  	);
16:00:52 847  END SHOULD_MOVE_TO_GRACE;
16:00:52 848  
16:00:52 849  /****************************************************************************/
16:00:52 850  
16:00:52 851  PROCEDURE MOVE_TO_GRACE(
16:00:52 852  	in_invoice_id		      IN INVOICE.ID%TYPE,
16:00:52 853  	in_updated_by		      IN LICENSE.UPDATED_BY%TYPE,
16:00:52 854  	in_grace_period_length_hours  IN NUMBER
16:00:52 855  ) AS
16:00:52 856  BEGIN
16:00:52 857  	PROCS_SUBSCRIPTION_V20.START_GRACE_BY_INVOICE_ID(
16:00:52 858  	  in_invoice_id        => in_invoice_id,
16:00:52 859  	  in_updater	       => in_updated_by,
16:00:52 860  	  in_duration_in_hours => in_grace_period_length_hours
16:00:52 861  	);
16:00:52 862  END MOVE_TO_GRACE;
16:00:52 863  
16:00:52 864  /****************************************************************************/
16:00:52 865  
16:00:52 866  PROCEDURE MOVE_OUT_OF_GRACE(
16:00:52 867  	in_invoice_id	IN INVOICE.ID%TYPE,
16:00:52 868  	in_updated_by	IN LICENSE.UPDATED_BY%TYPE
16:00:52 869  ) AS
16:00:52 870  BEGIN
16:00:52 871  	PROCS_SUBSCRIPTION_V20.STOP_GRACE_BY_INVOICE_ID(
16:00:52 872  	  in_invoice_id => in_invoice_id,
16:00:52 873  	  in_updater	=> in_updated_by
16:00:52 874  	);
16:00:52 875  END MOVE_OUT_OF_GRACE;
16:00:52 876  
16:00:52 877  END PUBLIC_PROCS_BILLING_V20;
16:00:52 878  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.05
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_NOTIFICATION_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE LOCK_ACCOUNT (
16:00:52   4  	in_group_id    IN NUMBER,
16:00:52   5  	in_lock_key    IN VARCHAR2,
16:00:52   6  	in_seconds_num IN NUMBER,
16:00:52   7  	in_created_by  IN VARCHAR2,
16:00:52   8  	in_reason      IN VARCHAR2
16:00:52   9  ) AS
16:00:52  10  BEGIN
16:00:52  11  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
16:00:52  12  	  in_group_id,
16:00:52  13  	  in_lock_key,
16:00:52  14  	  in_seconds_num,
16:00:52  15  	  in_created_by,
16:00:52  16  	  in_reason
16:00:52  17  	);
16:00:52  18  END LOCK_ACCOUNT;
16:00:52  19  
16:00:52  20  /******************************************************************************/
16:00:52  21  
16:00:52  22  PROCEDURE RELEASE_LOCK (
16:00:52  23  	in_group_id IN NUMBER,
16:00:52  24  	in_lock_key IN VARCHAR2
16:00:52  25  ) AS
16:00:52  26  BEGIN
16:00:52  27  	PROCS_LOCKING_V20.RELEASE_LOCK(
16:00:52  28  	  in_group_id,
16:00:52  29  	  in_lock_key
16:00:52  30  	);
16:00:52  31  END RELEASE_LOCK;
16:00:52  32  
16:00:52  33  END PUBLIC_PROCS_NOTIFICATION_V20;
16:00:52  34  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_RENEWAL_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE SUB_EXPIRES_NEED_ENTITLEMENTS (
16:00:52   4  	out_result_set OUT SYS_REFCURSOR
16:00:52   5  ) AS
16:00:52   6  BEGIN
16:00:52   7  	PROCS_GROUP_ACCOUNT_V20.SUB_EXPIRES_NEED_ENTITLEMENTS(out_result_set => out_result_set);
16:00:52   8  END SUB_EXPIRES_NEED_ENTITLEMENTS;
16:00:52   9  
16:00:52  10  PROCEDURE UPDATE_SS_NEED_ENTITLEMENTS (
16:00:52  11  	in_sub_share_id      IN SUBSCRIPTION_SHARE.ID%TYPE,
16:00:52  12  	in_need_entitlements IN SUBSCRIPTION_SHARE.NEEDS_ENTITLEMENTS%TYPE,
16:00:52  13  	in_updater	     IN SUBSCRIPTION_SHARE.UPDATED_BY%TYPE
16:00:52  14  ) AS
16:00:52  15  BEGIN
16:00:52  16  	PROCS_GROUP_ACCOUNT_V20.UPDATE_SS_NEED_ENTITLEMENTS(
16:00:52  17  	  in_sub_share_id => in_sub_share_id,
16:00:52  18  	  in_need_entitlements => in_need_entitlements,
16:00:52  19  	  in_updater => in_updater
16:00:52  20  	);
16:00:52  21  END UPDATE_SS_NEED_ENTITLEMENTS;
16:00:52  22  
16:00:52  23  PROCEDURE GET_OFFER_CHAIN_BY_ID (
16:00:52  24  /*
16:00:52  25  Throws exceptions:
16:00:52  26  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  27  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  28  */
16:00:52  29  	  in_offer_chain_id IN	 NUMBER,
16:00:52  30  	  out_result_set    OUT  SYS_REFCURSOR
16:00:52  31  ) AS
16:00:52  32  BEGIN
16:00:52  33  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_BY_ID (
16:00:52  34  	  in_offer_chain_id => in_offer_chain_id,
16:00:52  35  	  out_result_set => out_result_set
16:00:52  36  	);
16:00:52  37  END GET_OFFER_CHAIN_BY_ID;
16:00:52  38  
16:00:52  39  PROCEDURE GET_OFFER_CHAIN_META_DATA (
16:00:52  40  /*
16:00:52  41  Throws exceptions (codes):
16:00:52  42  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  43  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  44  */
16:00:52  45  	in_offer_chain_id IN NUMBER,
16:00:52  46  	in_meta_data_name IN VARCHAR2,
16:00:52  47  	out_result_set	  OUT SYS_REFCURSOR
16:00:52  48  )AS
16:00:52  49  BEGIN
16:00:52  50  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_META_DATA(
16:00:52  51  	  in_offer_chain_id,
16:00:52  52  	  in_meta_data_name,
16:00:52  53  	  out_result_set
16:00:52  54  	);
16:00:52  55  END GET_OFFER_CHAIN_META_DATA;
16:00:52  56  
16:00:52  57  PROCEDURE GET_ENDING_LICENSES (
16:00:52  58  /*
16:00:52  59  Throws exceptions:
16:00:52  60  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  61  */
16:00:52  62  	in_hours_number IN NUMBER,
16:00:52  63  	out_result_set OUT SYS_REFCURSOR
16:00:52  64  ) AS
16:00:52  65  BEGIN
16:00:52  66  	PROCS_LICENSE_V20.GET_ENDING_LICENSES(in_hours_number,out_result_set);
16:00:52  67  END GET_ENDING_LICENSES;
16:00:52  68  
16:00:52  69  PROCEDURE GET_ENDING_LICENSES_CC (
16:00:52  70  /*
16:00:52  71  Throws exceptions:
16:00:52  72  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  73  */
16:00:52  74  	in_hours_number IN NUMBER,
16:00:52  75  	out_result_set OUT SYS_REFCURSOR,
16:00:52  76  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:52  77  ) AS
16:00:52  78  BEGIN
16:00:52  79  	PROCS_LICENSE_V20.GET_ENDING_LICENSES_CC(in_hours_number,out_result_set, in_process_name);
16:00:52  80  END GET_ENDING_LICENSES_CC;
16:00:52  81  
16:00:52  82  /*******************************************************/
16:00:52  83  
16:00:52  84  PROCEDURE GET_RECURRING_OFFER (
16:00:52  85  /*
16:00:52  86  Throws exceptions:
16:00:52  87  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  88  */
16:00:52  89  	in_license_id  IN NUMBER,
16:00:52  90  	out_result_set OUT SYS_REFCURSOR
16:00:52  91  ) AS
16:00:52  92  BEGIN
16:00:52  93  	PROCS_LICENSE_V20.GET_RECURRING_OFFER (
16:00:52  94  	  in_license_id,
16:00:52  95  	  out_result_set
16:00:52  96  	);
16:00:52  97  END GET_RECURRING_OFFER;
16:00:52  98  
16:00:52  99  /********************************************************/
16:00:52 100  
16:00:52 101  PROCEDURE GET_NEXT_OFFER (
16:00:52 102  /*
16:00:52 103  Throws exceptions:
16:00:52 104  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 105  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:52 106  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 107  */
16:00:52 108  	in_license_id  IN NUMBER,
16:00:52 109  	out_result_set OUT SYS_REFCURSOR
16:00:52 110  ) AS
16:00:52 111  BEGIN
16:00:52 112  	PROCS_LICENSE_V20.GET_NEXT_OFFER (
16:00:52 113  	  in_license_id,
16:00:52 114  	  out_result_set
16:00:52 115  	);
16:00:52 116  END GET_NEXT_OFFER;
16:00:52 117  
16:00:52 118  /*********************************************************/
16:00:52 119  
16:00:52 120  PROCEDURE UPDATE_LICENSE_STATUS(
16:00:52 121  /*
16:00:52 122  Throws exceptions:
16:00:52 123  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 124  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 125  */
16:00:52 126  	  in_license_id     IN NUMBER,
16:00:52 127  	  in_license_status IN NUMBER,
16:00:52 128  	  in_updated_by     IN VARCHAR2
16:00:52 129  ) AS
16:00:52 130  BEGIN
16:00:52 131  	PROCS_LICENSE_V20.UPDATE_LICENSE_STATUS (
16:00:52 132  	  in_license_id,
16:00:52 133  	  in_license_status,
16:00:52 134  	  in_updated_by
16:00:52 135  	);
16:00:52 136  END UPDATE_LICENSE_STATUS;
16:00:52 137  
16:00:52 138  /**********************************************************/
16:00:52 139  
16:00:52 140  PROCEDURE UPDATE_INVOICE_STATUS (
16:00:52 141  /*
16:00:52 142  Throws exceptions:
16:00:52 143  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 144  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 145  */
16:00:52 146  	in_invoice_id		       IN NUMBER,
16:00:52 147  	in_invoice_status_id	       IN NUMBER,
16:00:52 148  	in_updated_by		       IN VARCHAR2
16:00:52 149  ) AS
16:00:52 150  BEGIN
16:00:52 151  	PROCS_INVOICE_V20.UPDATE_INVOICE_STATUS(
16:00:52 152  	  in_invoice_id,
16:00:52 153  	  in_invoice_status_id,
16:00:52 154  	  in_updated_by
16:00:52 155  	);
16:00:52 156  END UPDATE_INVOICE_STATUS;
16:00:52 157  
16:00:52 158  /***********************************************************/
16:00:52 159  
16:00:52 160  PROCEDURE CREATE_LICENSE(
16:00:52 161  /*
16:00:52 162  Throws exceptions:
16:00:52 163  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 164  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 165  APP_EXCEPTION_CODES_V20.INTERNAL_ERROR
16:00:52 166  */
16:00:52 167  	in_status_id		    IN NUMBER,
16:00:52 168  	in_needs_entitlements	    IN NUMBER,
16:00:52 169  	in_start_date		    IN DATE,
16:00:52 170  	in_end_date		    IN DATE,
16:00:52 171  	in_offer_id		    IN NUMBER,
16:00:52 172  	in_subscription_id	    IN NUMBER,
16:00:52 173  	in_invoice_id		    IN NUMBER,
16:00:52 174  	in_created_by		    IN VARCHAR2,
16:00:52 175  	in_is_extension 	    IN NUMBER,
16:00:52 176  	in_current_offer_index	    IN NUMBER,
16:00:52 177  	in_current_offer_recurr_num IN NUMBER,
16:00:52 178  	out_license_id		    OUT NUMBER
16:00:52 179  ) AS
16:00:52 180  BEGIN
16:00:52 181  	PROCS_LICENSE_V20.CREATE_LICENSE (
16:00:52 182  	  in_status_id,
16:00:52 183  	  in_needs_entitlements,
16:00:52 184  	  in_start_date,
16:00:52 185  	  in_end_date,
16:00:52 186  	  in_offer_id,
16:00:52 187  	  in_subscription_id,
16:00:52 188  	  in_invoice_id,
16:00:52 189  	  in_created_by,
16:00:52 190  	  in_is_extension,
16:00:52 191  	  in_current_offer_index,
16:00:52 192  	  in_current_offer_recurr_num,
16:00:52 193  	  out_license_id
16:00:52 194  	);
16:00:52 195  END CREATE_LICENSE;
16:00:52 196  
16:00:52 197  /******************************************************/
16:00:52 198  
16:00:52 199  PROCEDURE CREATE_INVOICE(
16:00:52 200  /*
16:00:52 201  Throws exceptions:
16:00:52 202  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 203  */
16:00:52 204  	  in_invoice_status IN NUMBER,
16:00:52 205  	  in_created_by     IN VARCHAR2,
16:00:52 206  	  in_tax_exempt_id  IN VARCHAR2,
16:00:52 207  	  out_invoice_id    OUT NUMBER
16:00:52 208  ) AS
16:00:52 209  BEGIN
16:00:52 210  	PROCS_INVOICE_V20.CREATE_INVOICE (
16:00:52 211  	  in_invoice_status,
16:00:52 212  	  in_created_by,
16:00:52 213  	  in_tax_exempt_id,
16:00:52 214  	  out_invoice_id
16:00:52 215  	);
16:00:52 216  END CREATE_INVOICE;
16:00:52 217  
16:00:52 218  /*******************************************************/
16:00:52 219  
16:00:52 220  PROCEDURE CREATE_CHARGE(
16:00:52 221  /*
16:00:52 222  Throws exceptions:
16:00:52 223  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 224  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 225  */
16:00:52 226  	in_invoice_id	      IN NUMBER,
16:00:52 227  	in_transaction_id     IN NUMBER,
16:00:52 228  	in_instrument_type_id IN NUMBER,
16:00:52 229  	in_instrument_id      IN NUMBER,
16:00:52 230  	in_charge_amount      IN NUMBER,
16:00:52 231  	in_created_by	      IN VARCHAR2,
16:00:52 232  	in_charge_status_id   IN NUMBER,
16:00:52 233  	out_charge_id	      OUT NUMBER
16:00:52 234  ) AS
16:00:52 235  BEGIN
16:00:52 236  	PROCS_CHARGE_V20.CREATE_CHARGE (
16:00:52 237  	  in_invoice_id,
16:00:52 238  	  in_transaction_id,
16:00:52 239  	  in_instrument_type_id,
16:00:52 240  	  in_instrument_id,
16:00:52 241  	  in_charge_amount,
16:00:52 242  	  in_created_by,
16:00:52 243  	  in_charge_status_id,
16:00:52 244  	  out_charge_id
16:00:52 245  	);
16:00:52 246  END CREATE_CHARGE;
16:00:52 247  
16:00:52 248  /**********************************************************/
16:00:52 249  
16:00:52 250  PROCEDURE HAS_FUTURE_LICENSE (
16:00:52 251  /*
16:00:52 252  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 253  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 254  --
16:00:52 255  RETURNS:
16:00:52 256  1 - if has,
16:00:52 257  0 - else
16:00:52 258  */
16:00:52 259  	in_license_id IN NUMBER,
16:00:52 260  	out_result	   OUT NUMBER
16:00:52 261  ) AS
16:00:52 262  BEGIN
16:00:52 263  	PROCS_SUBSCRIPTION_V20.HAS_FUTURE_LICENSE (
16:00:52 264  	  in_license_id,
16:00:52 265  	  out_result
16:00:52 266  	);
16:00:52 267  END HAS_FUTURE_LICENSE;
16:00:52 268  
16:00:52 269  /***********************************************************/
16:00:52 270  
16:00:52 271  PROCEDURE GET_GROUP_ID_BY_LICENSE_ID (
16:00:52 272  /*
16:00:52 273  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 274  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 275  */
16:00:52 276  	in_license_id IN NUMBER,
16:00:52 277  	out_group_id  OUT NUMBER
16:00:52 278  ) AS
16:00:52 279  BEGIN
16:00:52 280  	PROCS_LICENSE_V20.GET_GROUP_ID_BY_LICENSE_ID (
16:00:52 281  	  in_license_id,
16:00:52 282  	  out_group_id
16:00:52 283  	);
16:00:52 284  END GET_GROUP_ID_BY_LICENSE_ID;
16:00:52 285  
16:00:52 286  /**********************************************************/
16:00:52 287  
16:00:52 288  PROCEDURE GET_OFFER_PRODUCTS (
16:00:52 289  /*
16:00:52 290  Throws exceptions (codes):
16:00:52 291  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 292  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 293  */
16:00:52 294  	in_offer_id    IN NUMBER,
16:00:52 295  	out_result_set OUT SYS_REFCURSOR
16:00:52 296  ) AS
16:00:52 297  BEGIN
16:00:52 298  	PROCS_OFFER_CHAIN_V20.GET_OFFER_PRODUCTS (
16:00:52 299  	  in_offer_id,
16:00:52 300  	  out_result_set
16:00:52 301  	);
16:00:52 302  END GET_OFFER_PRODUCTS;
16:00:52 303  
16:00:52 304  /***********************************************************/
16:00:52 305  
16:00:52 306  PROCEDURE CREATE_TRANSACTION (
16:00:52 307  /*
16:00:52 308  Throws exceptions:
16:00:52 309  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 310  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 311  */
16:00:52 312  	in_transaction_id	  IN NUMBER,
16:00:52 313  	in_status_id		  IN NUMBER,
16:00:52 314  	in_amount		  IN NUMBER,
16:00:52 315  	in_created_by		  IN VARCHAR2,
16:00:52 316  	in_order_id		  IN VARCHAR2,
16:00:52 317  	in_transaction_type_code  IN VARCHAR2 DEFAULT NULL,
16:00:52 318  	out_transaction_id	  OUT NUMBER
16:00:52 319  ) AS
16:00:52 320  BEGIN
16:00:52 321  	PROCS_TRANSACTION_V20.CREATE_TRANSACTION(
16:00:52 322  	  in_transaction_id,
16:00:52 323  	  in_status_id,
16:00:52 324  	  in_amount,
16:00:52 325  	  in_created_by,
16:00:52 326  	  in_order_id,
16:00:52 327  	  GLOBAL_CONSTANTS_V20.FALSE, -- is_refund should be false in renewal
16:00:52 328  	  in_transaction_type_code,
16:00:52 329  	  out_transaction_id
16:00:52 330  	);
16:00:52 331  END CREATE_TRANSACTION;
16:00:52 332  
16:00:52 333  /************************************************************/
16:00:52 334  
16:00:52 335  PROCEDURE ADD_LINE_ITEMS(
16:00:52 336  /*
16:00:52 337  Throws exceptions:
16:00:52 338  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 339  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 340  */
16:00:52 341  	in_invoice_id IN NUMBER,
16:00:52 342  	in_offer_id   IN NUMBER,
16:00:52 343  	in_created_by IN VARCHAR2
16:00:52 344  ) AS
16:00:52 345  BEGIN
16:00:52 346  	PROCS_LINE_ITEMS_V20.ADD_LINE_ITEMS(
16:00:52 347  	  in_invoice_id,
16:00:52 348  	  in_offer_id,
16:00:52 349  	  in_created_by
16:00:52 350  	);
16:00:52 351  END ADD_LINE_ITEMS;
16:00:52 352  
16:00:52 353  /************************************************************/
16:00:52 354  
16:00:52 355  PROCEDURE CALCULATE_INVOICE_AMOUNT (
16:00:52 356  /*
16:00:52 357  Throws exceptions:
16:00:52 358  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 359  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 360  */
16:00:52 361  	in_invoice_id IN  NUMBER,
16:00:52 362  	out_amount    OUT NUMBER
16:00:52 363  ) AS
16:00:52 364  BEGIN
16:00:52 365  	PROCS_INVOICE_V20.CALCULATE_INVOICE_AMOUNT (
16:00:52 366  	  in_invoice_id,
16:00:52 367  	  out_amount
16:00:52 368  	);
16:00:52 369  END CALCULATE_INVOICE_AMOUNT;
16:00:52 370  
16:00:52 371  /*************************************************************/
16:00:52 372  
16:00:52 373  PROCEDURE RESERVE_TRANSACTION_ID (
16:00:52 374  /*
16:00:52 375  Throws exceptions:
16:00:52 376  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 377  */
16:00:52 378  	out_transaction_id OUT NUMBER
16:00:52 379  ) AS
16:00:52 380  BEGIN
16:00:52 381  	PROCS_TRANSACTION_V20.RESERVE_TRANSACTION_ID (
16:00:52 382  	  out_transaction_id
16:00:52 383  	);
16:00:52 384  END RESERVE_TRANSACTION_ID;
16:00:52 385  
16:00:52 386  /***************************************************************/
16:00:52 387  
16:00:52 388  PROCEDURE P_GET_NEXT_OFFER_INDEX (
16:00:52 389  	in_offer_chain_id	     IN NUMBER,
16:00:52 390  	in_offer_chain_current_index IN NUMBER,
16:00:52 391  	out_next_offer_index	     OUT NUMBER
16:00:52 392  ) AS
16:00:52 393  BEGIN
16:00:52 394  	PROCS_OFFER_CHAIN_V20.P_GET_NEXT_OFFER_INDEX(
16:00:52 395  	  in_offer_chain_id,
16:00:52 396  	  in_offer_chain_current_index,
16:00:52 397  	  out_next_offer_index
16:00:52 398  	);
16:00:52 399  END P_GET_NEXT_OFFER_INDEX;
16:00:52 400  
16:00:52 401  /***************************************************************/
16:00:52 402  
16:00:52 403  PROCEDURE GET_NEXT_OFFER_INDEX_BY_LCNS (
16:00:52 404  	in_license_id		     IN NUMBER,
16:00:52 405  	in_offer_chain_current_index IN NUMBER,
16:00:52 406  	out_next_offer_index	     OUT NUMBER
16:00:52 407  ) AS
16:00:52 408  BEGIN
16:00:52 409  	PROCS_OFFER_CHAIN_V20.GET_NEXT_OFFER_INDEX_BY_LCNS(
16:00:52 410  	  in_license_id,
16:00:52 411  	  in_offer_chain_current_index,
16:00:52 412  	  out_next_offer_index
16:00:52 413  	);
16:00:52 414  END GET_NEXT_OFFER_INDEX_BY_LCNS;
16:00:52 415  
16:00:52 416  /******************************************************************/
16:00:52 417  
16:00:52 418  PROCEDURE GET_SUBSCRIPTION_INFO (
16:00:52 419  /*
16:00:52 420  Throws exceptions:
16:00:52 421  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 422  */
16:00:52 423  	  in_subscription_id IN  NUMBER,
16:00:52 424  	  out_result_set      OUT SYS_REFCURSOR
16:00:52 425  ) AS
16:00:52 426  BEGIN
16:00:52 427  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTION_INFO(
16:00:52 428  	  in_subscription_id,
16:00:52 429  	  out_result_set
16:00:52 430  	);
16:00:52 431  END GET_SUBSCRIPTION_INFO;
16:00:52 432  
16:00:52 433  /*******************************************************************/
16:00:52 434  
16:00:52 435  PROCEDURE CLOSE_SUBSCRIPTION (
16:00:52 436  	in_subscription_id IN NUMBER,
16:00:52 437  	in_updated_by	   IN VARCHAR2
16:00:52 438  ) AS
16:00:52 439  BEGIN
16:00:52 440  	PROCS_SUBSCRIPTION_V20.CLOSE_SUBSCRIPTION(
16:00:52 441  	  in_subscription_id,
16:00:52 442  	  in_updated_by
16:00:52 443  	);
16:00:52 444  END CLOSE_SUBSCRIPTION;
16:00:52 445  
16:00:52 446  /*******************************************************************/
16:00:52 447  
16:00:52 448  PROCEDURE GET_NEED_ENTITLEMENTS_LICENSES (
16:00:52 449  	out_result_set OUT SYS_REFCURSOR
16:00:52 450  ) AS
16:00:52 451  BEGIN
16:00:52 452  	PROCS_LICENSE_V20.GET_NEED_ENTITLEMENTS_LICENSES(
16:00:52 453  	  out_result_set
16:00:52 454  	);
16:00:52 455  END GET_NEED_ENTITLEMENTS_LICENSES;
16:00:52 456  
16:00:52 457  /*******************************************************************/
16:00:52 458  
16:00:52 459  PROCEDURE UPDATE_NEED_ENTITLEMENTS_FLAG (
16:00:52 460  	in_license_id	      IN NUMBER,
16:00:52 461  	in_needs_entitlements IN NUMBER,
16:00:52 462  	in_updated_by	      IN VARCHAR2
16:00:52 463  ) AS
16:00:52 464  BEGIN
16:00:52 465  	PROCS_LICENSE_V20.UPDATE_NEED_ENTITLEMENTS_FLAG(
16:00:52 466  	  in_license_id,
16:00:52 467  	  in_needs_entitlements,
16:00:52 468  	  in_updated_by
16:00:52 469  	);
16:00:52 470  END UPDATE_NEED_ENTITLEMENTS_FLAG;
16:00:52 471  
16:00:52 472  /*******************************************************/
16:00:52 473  
16:00:52 474  PROCEDURE GET_PROD_OFFERINGS_BY_OFFER_ID (
16:00:52 475  /*
16:00:52 476  Throws exceptions (codes):
16:00:52 477  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 478  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 479  */
16:00:52 480  	in_offer_id    IN NUMBER,
16:00:52 481  	out_result_set OUT SYS_REFCURSOR
16:00:52 482  ) AS
16:00:52 483  BEGIN
16:00:52 484  	PROCS_OFFER_CHAIN_V20.GET_PROD_OFFERINGS_BY_OFFER_ID(in_offer_id,out_result_set);
16:00:52 485  END GET_PROD_OFFERINGS_BY_OFFER_ID;
16:00:52 486  
16:00:52 487  /*******************************************************/
16:00:52 488  PROCEDURE GET_PRODUCT_OFFERING_META_DATA (
16:00:52 489  /*
16:00:52 490  Throws exceptions (codes):
16:00:52 491  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 492  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 493  */
16:00:52 494  	in_product_offering_id IN NUMBER,
16:00:52 495  	in_meta_data_name      IN VARCHAR2 DEFAULT NULL,
16:00:52 496  	out_result_set	       OUT SYS_REFCURSOR
16:00:52 497  ) AS
16:00:52 498  BEGIN
16:00:52 499  	PROCS_OFFER_CHAIN_V20.GET_PRODUCT_OFFERING_META_DATA(in_product_offering_id,in_meta_data_name,out_result_set);
16:00:52 500  END GET_PRODUCT_OFFERING_META_DATA;
16:00:52 501  
16:00:52 502  /*******************************************************/
16:00:52 503  
16:00:52 504  PROCEDURE LOCK_ACCOUNT (
16:00:52 505  	in_group_id    IN NUMBER,
16:00:52 506  	in_lock_key    IN VARCHAR2,
16:00:52 507  	in_seconds_num IN NUMBER,
16:00:52 508  	in_created_by  IN VARCHAR2,
16:00:52 509  	in_reason      IN VARCHAR2
16:00:52 510  ) AS
16:00:52 511  BEGIN
16:00:52 512  	PROCS_LOCKING_V20.LOCK_ACCOUNT(
16:00:52 513  	  in_group_id,
16:00:52 514  	  in_lock_key,
16:00:52 515  	  in_seconds_num,
16:00:52 516  	  in_created_by,
16:00:52 517  	  in_reason
16:00:52 518  	);
16:00:52 519  END LOCK_ACCOUNT;
16:00:52 520  
16:00:52 521  /****************************************************************/
16:00:52 522  
16:00:52 523  PROCEDURE RELEASE_LOCK (
16:00:52 524  	in_group_id IN NUMBER,
16:00:52 525  	in_lock_key IN VARCHAR2
16:00:52 526  ) AS
16:00:52 527  BEGIN
16:00:52 528  	PROCS_LOCKING_V20.RELEASE_LOCK(
16:00:52 529  	  in_group_id,
16:00:52 530  	  in_lock_key
16:00:52 531  	);
16:00:52 532  END RELEASE_LOCK;
16:00:52 533  
16:00:52 534  /******************************************************************************/
16:00:52 535  
16:00:52 536  PROCEDURE GET_INVOICE_LINE_ITEMS (
16:00:52 537  	in_invoice_id  IN NUMBER,
16:00:52 538  	out_result_set OUT SYS_REFCURSOR
16:00:52 539  ) AS
16:00:52 540  BEGIN
16:00:52 541  	PROCS_INVOICE_V20.GET_INVOICE_LINE_ITEMS(
16:00:52 542  	  in_invoice_id,
16:00:52 543  	  out_result_set
16:00:52 544  	);
16:00:52 545  END GET_INVOICE_LINE_ITEMS;
16:00:52 546  
16:00:52 547  /******************************************************************************/
16:00:52 548  
16:00:52 549  PROCEDURE ADD_TAX (
16:00:52 550  	in_tax_type_id		 IN NUMBER,
16:00:52 551  	in_calculated_amount	 IN NUMBER,
16:00:52 552  	in_created_by		 IN VARCHAR2,
16:00:52 553  	in_line_item_id 	 IN NUMBER,
16:00:52 554  	in_effective_rate	 IN VARCHAR2,
16:00:52 555  	in_taxable_amount	 IN NUMBER,
16:00:52 556  	in_tax_rule_id		 IN NUMBER,
16:00:52 557  	in_jurisdiction_level_id IN NUMBER,
16:00:52 558  	in_jurisdiction_name	 IN VARCHAR2,
16:00:52 559  	in_jurisdiction_id	 IN VARCHAR2,
16:00:52 560  	in_ext_tax_type 	 IN VARCHAR2,
16:00:52 561  	in_ext_result		 IN VARCHAR2,
16:00:52 562  	in_imposition_type	 IN VARCHAR2,
16:00:52 563  	in_imposition		 IN VARCHAR2
16:00:52 564  ) AS
16:00:52 565  BEGIN
16:00:52 566  	PROCS_TAXES_V20.ADD_TAX(
16:00:52 567  	  in_tax_type_id,
16:00:52 568  	  in_calculated_amount,
16:00:52 569  	  in_created_by,
16:00:52 570  	  in_line_item_id,
16:00:52 571  	  in_effective_rate,
16:00:52 572  	  in_taxable_amount,
16:00:52 573  	  in_tax_rule_id,
16:00:52 574  	  in_jurisdiction_level_id,
16:00:52 575  	  in_jurisdiction_name,
16:00:52 576  	  in_jurisdiction_id,
16:00:52 577  	  in_ext_tax_type,
16:00:52 578  	  in_ext_result,
16:00:52 579  	  in_imposition_type,
16:00:52 580  	  in_imposition
16:00:52 581  	);
16:00:52 582  END ADD_TAX;
16:00:52 583  
16:00:52 584  /******************************************************************************/
16:00:52 585  
16:00:52 586  PROCEDURE GET_CREDIT_CARD_BY_ID (
16:00:52 587  	in_credit_card_id IN  NUMBER,
16:00:52 588  	out_result_set	  OUT SYS_REFCURSOR
16:00:52 589  ) AS
16:00:52 590  BEGIN
16:00:52 591  	PROCS_FIN_INSTRUMENTS_V20.GET_CREDIT_CARD_BY_ID(
16:00:52 592  	  in_credit_card_id,
16:00:52 593  	  out_result_set
16:00:52 594  	);
16:00:52 595  END GET_CREDIT_CARD_BY_ID;
16:00:52 596  
16:00:52 597  /******************************************************************************/
16:00:52 598  
16:00:52 599  PROCEDURE GET_PRD_OFFERING_BY_LINE_IT_ID (
16:00:52 600  	in_line_item_id IN NUMBER,
16:00:52 601  	out_result_set	OUT SYS_REFCURSOR
16:00:52 602  ) AS
16:00:52 603  BEGIN
16:00:52 604  	PROCS_PRODUCT_V20.GET_PRD_OFFERING_BY_LINE_IT_ID(
16:00:52 605  	  in_line_item_id,
16:00:52 606  	  out_result_set
16:00:52 607  	);
16:00:52 608  END GET_PRD_OFFERING_BY_LINE_IT_ID;
16:00:52 609  
16:00:52 610  /******************************************************************************/
16:00:52 611  
16:00:52 612  PROCEDURE GET_ACCOUNT_ID_BY_GROUP_ID (
16:00:52 613  /*
16:00:52 614  Throws exceptions:
16:00:52 615  APP_EXCEPTION_CODES_V20.NOT_FOUND,
16:00:52 616  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 617  */
16:00:52 618  	in_group_id IN NUMBER,
16:00:52 619  	out_account_id	OUT NUMBER
16:00:52 620  ) AS
16:00:52 621  BEGIN
16:00:52 622  	PROCS_ACCOUNT_V20.GET_ACCOUNT_ID_BY_GROUP_ID(
16:00:52 623  	  in_group_id,
16:00:52 624  	  out_account_id
16:00:52 625  	);
16:00:52 626  END GET_ACCOUNT_ID_BY_GROUP_ID;
16:00:52 627  
16:00:52 628  /******************************************************************************/
16:00:52 629  
16:00:52 630  PROCEDURE GET_LINE_ITEM_DISCOUNTS (
16:00:52 631  /*
16:00:52 632  Throws exceptions:
16:00:52 633  APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52 634  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 635  */
16:00:52 636  	in_line_item_id IN  NUMBER,
16:00:52 637  	out_result_set	OUT SYS_REFCURSOR
16:00:52 638  ) AS
16:00:52 639  BEGIN
16:00:52 640  	PROCS_LINE_ITEMS_V20.GET_LINE_ITEM_DISCOUNTS(
16:00:52 641  	  in_line_item_id,
16:00:52 642  	  out_result_set
16:00:52 643  	);
16:00:52 644  END GET_LINE_ITEM_DISCOUNTS;
16:00:52 645  
16:00:52 646  /******************************************************************************/
16:00:52 647  
16:00:52 648  PROCEDURE UPDATE_LINE_ITEM_AMOUNT (
16:00:52 649  	in_line_item_id    IN NUMBER,
16:00:52 650  	in_amount	   IN NUMBER,
16:00:52 651  	in_discount_amount IN NUMBER,
16:00:52 652  	in_taxes_amount    IN NUMBER
16:00:52 653  ) AS
16:00:52 654  BEGIN
16:00:52 655  	PROCS_LINE_ITEMS_V20.UPDATE_LINE_ITEM_AMOUNT(
16:00:52 656  	  in_line_item_id,
16:00:52 657  	  in_amount,
16:00:52 658  	  in_discount_amount,
16:00:52 659  	  in_taxes_amount
16:00:52 660  	);
16:00:52 661  END UPDATE_LINE_ITEM_AMOUNT;
16:00:52 662  
16:00:52 663  /******************************************************************************/
16:00:52 664  
16:00:52 665  PROCEDURE GET_PAYPAL_BY_ID (
16:00:52 666  	in_paypal_id   IN  NUMBER,
16:00:52 667  	out_result_set OUT SYS_REFCURSOR
16:00:52 668  ) AS
16:00:52 669  BEGIN
16:00:52 670  	PROCS_FIN_INSTRUMENTS_V20.GET_PAYPAL_BY_ID(
16:00:52 671  	  in_paypal_id,
16:00:52 672  	  out_result_set
16:00:52 673  	);
16:00:52 674  END GET_PAYPAL_BY_ID;
16:00:52 675  
16:00:52 676  PROCEDURE GET_GC_BY_PURCH_INVOICE_ID (
16:00:52 677  	in_invoice_id		IN GIFT_CERTIFICATE.PURCHASE_INVOICE_ID%TYPE,
16:00:52 678  	out_result_set OUT SYS_REFCURSOR
16:00:52 679  ) AS
16:00:52 680  BEGIN
16:00:52 681  	PROCS_FIN_INSTRUMENTS_V20.GET_GC_BY_PURCH_INVOICE_ID (
16:00:52 682  	  in_invoice_id,
16:00:52 683  	  out_result_set
16:00:52 684  	);
16:00:52 685  END GET_GC_BY_PURCH_INVOICE_ID;
16:00:52 686  
16:00:52 687  PROCEDURE GET_LICENSE_BY_ID (
16:00:52 688  	in_license_id  IN NUMBER,
16:00:52 689  	out_result_set OUT SYS_REFCURSOR
16:00:52 690  ) AS
16:00:52 691  BEGIN
16:00:52 692  	PROCS_LICENSE_V20.GET_LICENSE_BY_ID (
16:00:52 693  	  in_license_id,
16:00:52 694  	  out_result_set
16:00:52 695  	);
16:00:52 696  END GET_LICENSE_BY_ID;
16:00:52 697  
16:00:52 698  /******************************************************************************/
16:00:52 699  
16:00:52 700  PROCEDURE GET_NOTIFICATION_TYPE_ID (
16:00:52 701  	in_offer_chain_id	 IN NUMBER,
16:00:52 702  	in_action_name		 IN VARCHAR2,
16:00:52 703  	out_notification_type_id OUT NUMBER
16:00:52 704  ) AS
16:00:52 705  BEGIN
16:00:52 706  	PROCS_OFFER_CHAIN_V20.GET_NOTIFICATION_TYPE_ID(
16:00:52 707  	  in_offer_chain_id,
16:00:52 708  	  in_action_name,
16:00:52 709  	  out_notification_type_id
16:00:52 710  	);
16:00:52 711  END GET_NOTIFICATION_TYPE_ID;
16:00:52 712  
16:00:52 713  /******************************************************************************/
16:00:52 714  
16:00:52 715  PROCEDURE GET_ALL_OCH_META_DATA (
16:00:52 716  	in_offer_chain_id IN NUMBER,
16:00:52 717  	out_result_set	  OUT SYS_REFCURSOR
16:00:52 718  ) AS
16:00:52 719  BEGIN
16:00:52 720  	PROCS_OFFER_CHAIN_V20.GET_ALL_META_DATA (
16:00:52 721  	  in_offer_chain_id,
16:00:52 722  	  out_result_set
16:00:52 723  	);
16:00:52 724  END GET_ALL_OCH_META_DATA;
16:00:52 725  
16:00:52 726  /******************************************************************************/
16:00:52 727  
16:00:52 728  PROCEDURE GET_SUBSCRIPTIONS_META_DATA (
16:00:52 729  /*
16:00:52 730  APP_EXCEPTION_CODES_V20.INVALID_PARAMETER
16:00:52 731  APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52 732  */
16:00:52 733  	in_subscriptions_ids IN core_owner.NUMBER_TABLE,
16:00:52 734  	out_result_set	     OUT SYS_REFCURSOR
16:00:52 735  ) AS
16:00:52 736  BEGIN
16:00:52 737  	PROCS_SUBSCRIPTION_V20.GET_SUBSCRIPTIONS_META_DATA(
16:00:52 738  	  in_subscriptions_ids,
16:00:52 739  	  out_result_set
16:00:52 740  	);
16:00:52 741  END GET_SUBSCRIPTIONS_META_DATA;
16:00:52 742  
16:00:52 743  PROCEDURE GET_UNREDEEMED_GCS (
16:00:52 744  	out_result_set		OUT SYS_REFCURSOR,
16:00:52 745  	in_hours_number 	IN NUMBER DEFAULT 14*24,
16:00:52 746  	in_num_rows		IN NUMBER DEFAULT 10000,
16:00:52 747  	in_process_name 	IN PROCESS_RETRY_THROTTLE.PROCESS_NAME%TYPE
16:00:52 748  ) AS
16:00:52 749  BEGIN
16:00:52 750  	PROCS_FIN_INSTRUMENTS_V20.GET_UNREDEEMED_GCS(
16:00:52 751  	  out_result_set => out_result_set,
16:00:52 752  	  in_hours_number => in_hours_number,
16:00:52 753  	  in_num_rows => in_num_rows,
16:00:52 754  	  in_process_name => in_process_name
16:00:52 755  	);
16:00:52 756  END GET_UNREDEEMED_GCS;
16:00:52 757  
16:00:52 758  PROCEDURE GET_OFFER_CHAIN_MD_VALUE (
16:00:52 759  	in_offer_chain_id IN NUMBER,
16:00:52 760  	in_meta_data_name IN VARCHAR2,
16:00:52 761  	out_value	  OUT VARCHAR2
16:00:52 762  ) AS
16:00:52 763  BEGIN
16:00:52 764  	PROCS_OFFER_CHAIN_V20.GET_OFFER_CHAIN_MD_VALUE(
16:00:52 765  	  in_offer_chain_id => in_offer_chain_id,
16:00:52 766  	  in_meta_data_name => in_meta_data_name,
16:00:52 767  	  out_value => out_value
16:00:52 768  	);
16:00:52 769  END GET_OFFER_CHAIN_MD_VALUE;
16:00:52 770  
16:00:52 771  PROCEDURE GET_ACT_SUBS_W_CPT_CHARGEBACKS (
16:00:52 772  	out_result_set	    OUT SYS_REFCURSOR
16:00:52 773  )
16:00:52 774  AS
16:00:52 775  BEGIN
16:00:52 776  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_CPT_CHARGEBACKS(
16:00:52 777  	  out_result_set => out_result_set
16:00:52 778  	);
16:00:52 779  END GET_ACT_SUBS_W_CPT_CHARGEBACKS;
16:00:52 780  
16:00:52 781  PROCEDURE GET_ACT_SUBS_W_PP_CHARGEBACKS (
16:00:52 782  	out_result_set	    OUT SYS_REFCURSOR
16:00:52 783  )
16:00:52 784  AS
16:00:52 785  BEGIN
16:00:52 786  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_PP_CHARGEBACKS(
16:00:52 787  	  out_result_set => out_result_set
16:00:52 788  	);
16:00:52 789  END GET_ACT_SUBS_W_PP_CHARGEBACKS;
16:00:52 790  
16:00:52 791  PROCEDURE GET_GRACE_PERIOD_SUB_REGIS (
16:00:52 792  	in_max_days_until_close IN NUMBER,
16:00:52 793  	in_num_subs_to_fetch	IN NUMBER,
16:00:52 794  	out_result_set		OUT SYS_REFCURSOR
16:00:52 795  )
16:00:52 796  AS
16:00:52 797  BEGIN
16:00:52 798  	PROCS_SUBSCRIPTION_V20.GET_GRACE_PERIOD_SUB_REGIS(
16:00:52 799  	  in_max_days_until_close => in_max_days_until_close,
16:00:52 800  	  in_num_subs_to_fetch => in_num_subs_to_fetch,
16:00:52 801  	  out_result_set => out_result_set
16:00:52 802  	);
16:00:52 803  END GET_GRACE_PERIOD_SUB_REGIS;
16:00:52 804  
16:00:52 805  PROCEDURE GET_ACT_SUBS_W_AMEX_CB (
16:00:52 806  	out_result_set	    OUT SYS_REFCURSOR
16:00:52 807  )
16:00:52 808  AS
16:00:52 809  BEGIN
16:00:52 810  	PROCS_SUBSCRIPTION_V20.GET_ACT_SUBS_W_AMEX_CB(
16:00:52 811  	  out_result_set => out_result_set
16:00:52 812  	);
16:00:52 813  END GET_ACT_SUBS_W_AMEX_CB;
16:00:52 814  
16:00:52 815  PROCEDURE GET_GRACE_LICE_FOR_FINAL_TRANS (
16:00:52 816  	in_days_before_close	 IN NUMBER,
16:00:52 817  	in_num_licenses_to_fetch IN NUMBER,
16:00:52 818  	out_result_set		 OUT SYS_REFCURSOR
16:00:52 819  ) AS
16:00:52 820  BEGIN
16:00:52 821  	PROCS_LICENSE_V20.GET_GRACE_LICE_FOR_FINAL_TRANS(
16:00:52 822  	  in_days_before_close => in_days_before_close,
16:00:52 823  	  in_num_licenses_to_fetch => in_num_licenses_to_fetch,
16:00:52 824  	  out_result_set => out_result_set
16:00:52 825  	);
16:00:52 826  END GET_GRACE_LICE_FOR_FINAL_TRANS;
16:00:52 827  
16:00:52 828  END PUBLIC_PROCS_RENEWAL_V20;
16:00:52 829  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.07
16:00:52 SQL> 
16:00:52 SQL> CREATE OR REPLACE PACKAGE BODY "PUBLIC_PROCS_CLIENT_V20" AS
16:00:52   2  
16:00:52   3  PROCEDURE GET_NOTIFICATION_TYPE_BY_NAME (
16:00:52   4  /*
16:00:52   5  Throws exceptions:
16:00:52   6  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52   7  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52   8  */
16:00:52   9  	in_notification_type_name IN VARCHAR2,
16:00:52  10  	out_notification_type_id  OUT NUMBER
16:00:52  11  ) AS
16:00:52  12  BEGIN
16:00:52  13  	PROCS_NOTIFICATION_V20.GET_NOTIFICATION_TYPE_BY_NAME (
16:00:52  14  	  in_notification_type_name,
16:00:52  15  	  out_notification_type_id
16:00:52  16  	);
16:00:52  17  END;
16:00:52  18  
16:00:52  19  /*****************************************************************/
16:00:52  20  
16:00:52  21  PROCEDURE ADD_NOTIFICATION (
16:00:52  22  /*
16:00:52  23  Throws exceptions:
16:00:52  24  CORE_OWNER.APP_EXCEPTION_CODES_V20.NOT_FOUND
16:00:52  25  CORE_OWNER.APP_EXCEPTION_CODES_V20.UNKNOWN_ERROR
16:00:52  26  */
16:00:52  27  	in_sender_account_id	 IN NUMBER DEFAULT 0,
16:00:52  28  	in_recipient_group_id	 IN NUMBER,
16:00:52  29  	in_notification_type_id  IN NUMBER,
16:00:52  30  	in_date_to_notify	 IN DATE,
16:00:52  31  	in_email_template_params IN CLOB
16:00:52  32  ) AS
16:00:52  33  BEGIN
16:00:52  34  	PROCS_NOTIFICATION_V20.ADD_NOTIFICATION (
16:00:52  35  	  in_sender_account_id,
16:00:52  36  	  in_recipient_group_id,
16:00:52  37  	  in_notification_type_id,
16:00:52  38  	  in_date_to_notify,
16:00:52  39  	  in_email_template_params
16:00:52  40  	);
16:00:52  41  END;
16:00:52  42  
16:00:52  43  END PUBLIC_PROCS_CLIENT_V20;
16:00:52  44  .
16:00:52 SQL> /

Package body created.

Elapsed: 00:00:00.02
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ADX_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_CHARGE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_COMMON_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_FIN_INSTRUMENTS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LINE_ITEMS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_OFFER_CHAIN_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_TEST_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ADJUSTMENTS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ADDRESS_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_BILLING_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_RENEWAL_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_NOTIFICATION_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_TAXES_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PRODUCT_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to core_tax_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_POLLING_SYNC to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_RECONCILIATION_CRU_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_TRANSACTION_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_REPORTING to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ACCOUNT_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_INVOICE_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ITUNES_RECEIPT_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_AMAZON_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LICENSE_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_SUBSCRIPTION_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_GROUP_ACCOUNT_CRU_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_ENTITLEMENT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_CUPY to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.02
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_LOCKING_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.NOTIFICATION_STATUSES_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_NOTIFICATION_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_SYSTEM_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PUBLIC_PROCS_CLIENT_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to ops_notif_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to etl_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_poller_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant execute on CORE_OWNER.PROCS_PROCESS_RETRY_V20 to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.03
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.02
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_app;

Grant succeeded.

Elapsed: 00:00:00.02
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant select on CORE_OWNER.PROCESS_RETRY_THROTTLE to core_subup_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant select on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to cupy_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_billing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> grant REFERENCES on CORE_OWNER.NOTIFICATION_TYPE to core_licensing_app;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> grant select, insert, update, delete ON CORE_OWNER.NOTIFICATION_TYPE to core_owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> grant select ON CORE_OWNER.NOTTID_SEQ to core_owner;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> Grant Execute On Core_Owner.App_Exception_Codes_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> Grant Execute On Core_Owner.GLOBAL_ENUMS_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.01
16:00:52 SQL> 
16:00:52 SQL> Grant Execute On Core_Owner.Global_Statuses_V20 To Core_Hist_Owner;

Grant succeeded.

Elapsed: 00:00:00.00
16:00:52 SQL> 
16:00:52 SQL> commit;

Commit complete.

Elapsed: 00:00:00.00
16:00:52 SQL> spool off;


Subject: Nomad upgrade completed successfully: ECST@rac01.stg.ewr1.nytimes.com
From: Nomad for Oracle <nytd_oracledba@nytimes.com>
To: nytd_ecommerce@nytimes.com
Cc: nytd_oracledba@nytimes.com

Nomad upgrade operation completed successfully without errors. 
        
        Details
        -------
        DB Hostname: rac01.stg.ewr1.nytimes.com
        DB Role: PRIMARY
        SID: ECST
        Schema: core_owner
        Migration: 47.2-release-1.14.0-3-CORE-all
        SVN Revision: 12320
        Duration: 8 sec.
        DBA: sbao
        Service Request: https://jira.em.nytimes.com/browse/ORA-730