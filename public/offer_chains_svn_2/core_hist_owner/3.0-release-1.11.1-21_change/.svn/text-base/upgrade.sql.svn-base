WHENEVER SQLERROR EXIT ROLLBACK;

variable is_current_version_fine NUMBER;
variable change_version NUMBER;
variable bad_current_version VARCHAR2(1024);

exec :change_version := 21;
exec PROCS_SYSTEM_V9.CHECK_VERSION(:change_version - 1, :is_current_version_fine);
exec :bad_current_version := 'Current version is bad, please update your version to '||(:change_version-1);

BEGIN
  IF (:is_current_version_fine != 0) THEN
    RAISE_APPLICATION_ERROR(-20001, :bad_current_version);
  END IF;
END;
/

CREATE TABLE
        NOTIFICATION_FAILURE_HISTORY
(
  ERROR_MESSAGE VARCHAR2(2048) NOT NULL,
  NOTIFICATION_ID NUMBER NOT NULL,
  CREATE_DATE DATE,
  UPDATE_DATE DATE
);
COMMENT ON COLUMN NOTIFICATION_FAILURE_HISTORY.ERROR_MESSAGE
IS
        'message returned from the api'

CREATE TABLE
        NOTIFICATION_HISTORY
(
  ACCOUNT_ID NUMBER NOT NULL,
  GROUP_ID NUMBER,
  NOTIFICATION_REASON_TYPE_ID NUMBER NOT NULL,
  NOTIFICATION_STATUS_ID NUMBER NOT NULL,
  CREATE_DATE DATE NOT NULL,
  EMAIL_TEMPLATE_PARAMS CLOB NOT NULL,
  UPDATE_DATE DATE,
  NOTIFICATION_ID NUMBER,
  DATE_TO_NOTIFY DATE
);
COMMENT ON TABLE NOTIFICATION_HISTORY
IS
        'Alias: nota'

exec PROCS_SYSTEM_V9.INCREMENT_VERSION();
